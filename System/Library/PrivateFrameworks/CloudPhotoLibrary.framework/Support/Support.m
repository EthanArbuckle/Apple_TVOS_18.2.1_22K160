}

id sub_100002EB4()
{
  if (qword_100295ED0 != -1) {
    dispatch_once(&qword_100295ED0, &stru_10023DBA0);
  }
  return (id)qword_100295ED8;
}

void sub_100002F84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v9 = *(void **)(v7 + 112);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10000308C;
  v15[3] = &unk_10023DA98;
  v15[4] = v7;
  id v16 = v6;
  id v17 = v5;
  uint64_t v18 = v8;
  v10 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100004A30;
  block[3] = &unk_10023DBC8;
  id v20 = v10;
  v11 = v9;
  id v12 = v5;
  id v13 = v6;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v14);
}

void sub_10000308C(uint64_t a1)
{
  v3 = (id *)(a1 + 32);
  v2 = *(_BYTE **)(a1 + 32);
  if (v2[96])
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_100002EB4();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Stopped waiting for push notifications before we had a chance to set them up",  buf,  2u);
      }

      v2 = *v3;
    }

    [v2 _setPushRegistrationStatus:@"closed" error:0];
    return;
  }

  if (*(void *)(a1 + 40))
  {
    objc_msgSend(v2, "_setPushRegistrationStatus:error:", @"failed");
    if (!_CPLSilentLogging)
    {
      id v6 = sub_100002EB4();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        id v32 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to get push environment and push topic: %@",  buf,  0xCu);
      }
    }

    return;
  }

  if ([*(id *)(a1 + 48) length]) {
    v9 = *(void **)(a1 + 48);
  }
  else {
    v9 = 0LL;
  }
  id v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue( [@"com.apple.icloud-container." stringByAppendingString:@"com.apple.photos.cloud"]);
  [*v3 _setPushRegistrationStatus:0 error:0];
  id v12 = (void *)APSEnvironmentProduction;
  if (v10) {
    id v12 = v10;
  }
  id v13 = v12;
  uint64_t v14 = *((void *)*v3 + 1);
  if (!*((_BYTE *)*v3 + 16))
  {
    if (v14) {
      sub_10018E3CC(a1, (uint64_t *)v3);
    }
    goto LABEL_33;
  }

  if (!v14) {
    sub_10018E488(a1, (uint64_t *)v3);
  }
  v15 = (void *)*((void *)*v3 + 3);
  if (!v15) {
    sub_10018E544(a1, (uint64_t *)v3);
  }
  if (([v15 isEqualToString:v13] & 1) == 0)
  {
    if (!_CPLSilentLogging)
    {
      id v18 = sub_100002EB4();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v32 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Dropping idle APS connection as real environment is %@",  buf,  0xCu);
      }
    }

    [*((id *)*v3 + 1) shutdown];
    id v17 = (os_log_s *)*((void *)*v3 + 1);
    *((void *)*v3 + 1) = 0LL;
    goto LABEL_31;
  }

  if (!_CPLSilentLogging)
  {
    id v16 = sub_100002EB4();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v32 = v11;
      __int16 v33 = 2112;
      id v34 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Start waiting for push notifications, topic %@, environment: %@ (reusing idle APS connection)",  buf,  0x16u);
    }

LABEL_31:
  }

  *((_BYTE *)*v3 + 16) = 0;
LABEL_33:
  id v20 = [v13 copy];
  v21 = (void *)*((void *)*v3 + 3);
  *((void *)*v3 + 3) = v20;

  if (!*((void *)*v3 + 1))
  {
    if (!_CPLSilentLogging)
    {
      id v22 = sub_100002EB4();
      v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        id v32 = v11;
        __int16 v33 = 2112;
        id v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Start waiting for push notifications, topic %@, environment: %@",  buf,  0x16u);
      }
    }

    v24 = -[APSConnection initWithEnvironmentName:namedDelegatePort:queue:]( objc_alloc(&OBJC_CLASS___APSConnection),  "initWithEnvironmentName:namedDelegatePort:queue:",  *((void *)*v3 + 3),  @"com.apple.photos.cloud.pushnotification",  *((void *)*v3 + 14));
    v25 = (void *)*((void *)*v3 + 1);
    *((void *)*v3 + 1) = v24;

    objc_msgSend(*((id *)*v3 + 1), "setDelegate:");
  }

  v30 = v11;
  uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v30, 1LL));
  v27 = (void *)*((void *)*v3 + 4);
  *((void *)*v3 + 4) = v26;

  uint64_t v28 = *((void *)*v3 + 4);
  if (*((_BYTE *)*v3 + 97))
  {
    uint64_t v29 = *((void *)*v3 + 4);
    uint64_t v28 = 0LL;
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  [*((id *)*v3 + 1) setEnabledTopics:v29 ignoredTopics:0 opportunisticTopics:v28];
}

    if (_CPLSilentLogging)
    {
LABEL_35:

      goto LABEL_36;
    }

    v35 = sub_100002EB4();
    WeakRetained = (id)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled((os_log_t)WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 138412546;
      v39 = v30;
      v40 = 2112;
      v41 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Discarding unexpected %@ with topic %@",  (uint8_t *)&v38,  0x16u);
    }

  -[NSMutableArray addObject:](v3, "addObject:", @"groupScheduling");
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

                id v32 = v43;

                if (v32) {
                  goto LABEL_22;
                }
              }

              v15 = v77;
              v19 = v82;
              id v17 = v83;
            }

            if (v21 == v84)
            {
              v89 = 0LL;
              v47 = [v81 cplMoveItemAtURL:v19 toURL:v25 error:&v89];
              uint64_t v28 = (uint64_t)v89;
              if ((v47 & 1) != 0)
              {
                CPLMarkDownloadedResourceWithDynamicVersion(v25, a6, 0LL);
                v48 = 0LL;
                v76 = 1;
              }

              else
              {
                if (!_CPLSilentLogging)
                {
                  v52 = sub_10008595C();
                  v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                  {
                    v54 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup resourceTypeDescription](v79, "resourceTypeDescription"));
                    *(_DWORD *)buf = 138413058;
                    v96 = v54;
                    v97 = 2112;
                    v98 = v82;
                    v99 = 2112;
                    v100 = v25;
                    v101 = 2112;
                    v102 = v28;
                    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "Failed to move downloaded asset %@ from %@ to %@: %@",  buf,  0x2Au);

                    v19 = v82;
                  }
                }

                v48 = v28;
              }

              ((void (**)(void, void *, uint64_t))v24)[2](v24, v84, v48);
            }

            else
            {
              v88 = 0LL;
              v44 = [v81 cplCopyItemAtURL:v19 toURL:v25 error:&v88];
              v45 = v88;
              uint64_t v28 = (uint64_t)v45;
              if ((v44 & 1) != 0)
              {
                CPLMarkDownloadedResourceWithDynamicVersion(v25, a6, 0LL);
                v46 = 0LL;
                v19 = v82;
              }

              else
              {
                v46 = (uint64_t)v45;
                v19 = v82;
                if (!_CPLSilentLogging)
                {
                  v49 = sub_10008595C();
                  v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
                  {
                    v51 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup resourceTypeDescription](v79, "resourceTypeDescription"));
                    *(_DWORD *)buf = 138413058;
                    v96 = v51;
                    v97 = 2112;
                    v98 = v82;
                    v99 = 2112;
                    v100 = v25;
                    v101 = 2112;
                    v102 = v28;
                    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "Failed to copy downloaded asset %@ from %@ to %@: %@",  buf,  0x2Au);

                    v19 = v82;
                  }

                  v46 = v28;
                  id v17 = v83;
                }
              }

              ((void (**)(void, void *, uint64_t))v24)[2](v24, v21, v46);
            }

        if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
          && ![v11 areObjectsDifferentOnProperty:@"sharedLibrarySharingState" changeType:2])
        {
          goto LABEL_38;
        }

        v21 = 0;
        goto LABEL_34;
      }
    }

    id v12 = 1;
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

    goto LABEL_32;
  }

  LOBYTE(v18) = 1;
LABEL_32:

  return v18;
}
  }

  v21 = 0LL;
  cachedPushPullGatekeepers = v2->_cachedPushPullGatekeepers;
  v2->_cachedPushPullGatekeepers = 0LL;
LABEL_33:

  return (NSArray *)v21;
}

LABEL_34:
    goto LABEL_35;
  }

  if (!_CPLSilentLogging)
  {
    v15 = sub_100002EB4();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue([v8 topic]);
      v38 = 138412290;
      v39 = v11;
      id v12 = "Discarding unexpected push notification with topic %@";
      id v13 = v10;
      uint64_t v14 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_9;
    }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
}

          __break(1u);
          goto LABEL_35;
        }

LABEL_37:
  }
        }
      }

      else if (!_CPLSilentLogging)
      {
        v44 = sub_100078FF0();
        v40 = (void *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_DEFAULT))
        {
          v45 = (void *)objc_claimAutoreleasedReturnValue([v18 privateCloudScopedIdentifier]);
          v46 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedCloudScopedIdentifier]);
          v47 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
          *(_DWORD *)buf = 138412802;
          v84 = v45;
          v85 = 2112;
          v86 = v46;
          v87 = 2112;
          v88 = v47;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  OS_LOG_TYPE_DEFAULT,  "Record %@ is not sparse anymore. No need to fix-up its sharing record scoped identifier (%@ -> %@)",  buf,  0x20u);

          uint64_t v14 = v70;
        }

        goto LABEL_37;
      }

LABEL_39:
    }

    v15 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v78,  v91,  16LL);
  }

  while (v15);
LABEL_41:

  if (-[NSMutableArray count](v69, "count"))
  {
    v56 = v14;
    v57 = (void *)objc_claimAutoreleasedReturnValue(-[objc_class firstObject]((&v14->super.super.isa)[v64], "firstObject"));
    v58 = (void *)objc_claimAutoreleasedReturnValue([v57 privateCloudScopedIdentifier]);
    v59 = (void *)objc_claimAutoreleasedReturnValue([v58 scopeIdentifier]);

    id v10 = v67;
    if (!v59) {
      sub_100195AB4((uint64_t)v65, (uint64_t)v56);
    }
    v60 = objc_claimAutoreleasedReturnValue(-[CPLCloudKitTransportTask cloudKitScopeForScopeIdentifier:](v56, "cloudKitScopeForScopeIdentifier:", v59));
    v61 = v56;
    if (!v60) {
      sub_100195B6C((uint64_t)v65, (uint64_t)v56);
    }
    v62 = (void *)v60;
    v63 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation),  "initWithRecordsToSave:recordIDsToDelete:",  v69,  &__NSArray0__struct);
    -[CKModifyRecordsOperation setSavePolicy:](v63, "setSavePolicy:", 0LL);
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472LL;
    v73[2] = sub_100079030;
    v73[3] = &unk_1002414C8;
    v73[4] = v61;
    v76 = v65;
    v74 = v69;
    v75 = v67;
    -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v63, "setModifyRecordsCompletionBlock:", v73);
    -[CPLCloudKitTransportTask launchOperation:type:withContext:]( v61,  "launchOperation:type:withContext:",  v63,  CPLCloudKitOperationTypeForScope(v62),  0LL);
  }

  else
  {
    id v10 = v67;
    v67[2](v67, 0LL);
  }

  id v12 = v66;
LABEL_48:
}

  return v12;
}

LABEL_38:
}

          if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
            && ![v11 areObjectsDifferentOnProperty:@"playCount" changeType:2])
          {
            if ((+[CPLAssetChange serverSupportsLastViewedDate]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsLastViewedDate") & 1) == 0) {
              goto LABEL_54;
            }
            goto LABEL_47;
          }

          v24 = 0;
LABEL_41:
          if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"playCount")))
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[CPLAssetChange playCount](v9, "playCount")));
            [v7 setObject:v25 forKey:@"playCount"];
          }

          if ((+[CPLAssetChange serverSupportsLastViewedDate]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsLastViewedDate") & 1) == 0)
          {
LABEL_52:
            if ((v24 & 1) != 0)
            {
              v27 = 1;
              goto LABEL_57;
            }

      v105 = *v127;
      v104 = v127[1];
      v106 = v146;
      if ((unint64_t)v146 >> 62)
      {
        if (v146 < 0) {
          v117 = v146;
        }
        else {
          v117 = v146 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v127[1]);
        swift_bridgeObjectRetain(v106);
        v118 = sub_1000BED3C(&qword_100294FF0);
        v108 = _bridgeCocoaArray<A>(_:)(v117, v118);
        swift_bridgeObjectRelease(v106);
      }

      else
      {
        swift_bridgeObjectRetain(v127[1]);
        v107 = swift_bridgeObjectRetain(v106);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v107);
        v108 = v106;
      }

      swift_bridgeObjectRelease(v106);
      v109 = *((void *)v9 + 1);
      v110 = *((void *)v9 + 2);
      v111 = v9[24];
      v112 = *(void *)v9;
      v113 = HIBYTE(v109) & 0xF;
      if ((v109 & 0x2000000000000000LL) == 0) {
        v113 = *(void *)v9 & 0xFFFFFFFFFFFFLL;
      }
      if (v113)
      {
        swift_bridgeObjectRetain(*((void *)v9 + 1));
        if (v111)
        {
LABEL_44:
          v114 = qword_100219B30[v110];
LABEL_47:
          v116 = sub_10011553C( v114,  v112,  v109,  0LL,  *((void *)v9 + 8),  *((void *)v9 + 9),  *((void *)v9 + 10),  *((void *)v9 + 11));
          swift_bridgeObjectRelease(v109);
          a3(0LL, v105, v104, v108, v116);
          swift_errorRelease(v116);
          swift_bridgeObjectRelease(v104);
          swift_bridgeObjectRelease(v108);
          sub_1000CECE0((uint64_t)v9, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
          v95 = (uint64_t)v127;
          return sub_1000CECE0(v95, type metadata accessor for Goldilocks_InitiateExitResponse);
        }
      }

      else
      {
        v112 = sub_100114020(*((void *)v9 + 2), v9[24]);
        v109 = v115;
        if (v111) {
          goto LABEL_44;
        }
      }

      v114 = 150LL;
      goto LABEL_47;
    }

void sub_100003D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(void **)(v4 + 112);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100003E88;
  v11[3] = &unk_10023DB10;
  v11[4] = v4;
  id v12 = v3;
  id v13 = v5;
  uint64_t v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100004A30;
  block[3] = &unk_10023DBC8;
  id v15 = v7;
  uint64_t v8 = v6;
  id v9 = v3;
  dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

void sub_100003E88(void *a1)
{
  v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = (void *)a1[4];
  if (v3[1])
  {
    uint64_t v4 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"push notification environment: %@\npush notification topics: ",  *(void *)(a1[4] + 24LL));
    v42[0] = 0LL;
    v42[1] = v42;
    v42[2] = 0x2020000000LL;
    char v43 = 1;
    v36 = _NSConcreteStackBlock;
    uint64_t v37 = 3221225472LL;
    v38 = sub_1000042E8;
    v39 = &unk_10023DAE8;
    v41 = v42;
    id v5 = v4;
    v40 = v5;
    id v6 = objc_retainBlock(&v36);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) enabledTopics]);
    ((void (*)(void ***, void *, const __CFString *))v6[2])(v6, v7, @"enabled");

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) ignoredTopics]);
    ((void (*)(void ***, void *, const __CFString *))v6[2])(v6, v8, @"ignored");

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) opportunisticTopics]);
    ((void (*)(void ***, void *, const __CFString *))v6[2])(v6, v9, @"opportunistic");

    -[NSMutableArray addObject:](v2, "addObject:", v5);
    _Block_object_dispose(v42, 8);

    id v3 = (void *)a1[4];
  }

  if (v3[5])
  {
    dispatch_block_t v10 = (void *)v3[11];
    v11 = &OBJC_CLASS___NSBundle_ptr;
    if (v10)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 cplNotificationTypeDescription]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) notificationID]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 notificationUUID]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) containerIdentifier]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) subscriptionID]);
      if (v16)
      {
        v11 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) subscriptionID]);
        id v17 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"\n\tsubscriptionID = %@",  v11));
      }

      else
      {
        id v17 = &stru_1002482B0;
      }

      id v22 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"notificationType = %@\n\tnotificationID = %@\n\tcontainerIdentifier = %@%@",  v12,  v14,  v15,  v17,  v36,  v37,  v38,  v39));
      if (v16)
      {
      }
    }

    else
    {
      id v22 = @"(no push info)";
    }

    v23 = objc_alloc(&OBJC_CLASS___NSMutableString);
    v24 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringFromDateAgo:now:]( &OBJC_CLASS___CPLDateFormatter,  "stringFromDateAgo:now:",  *(void *)(a1[4] + 40LL),  0LL));
    v25 = -[NSMutableString initWithFormat:]( v23,  "initWithFormat:",  @"last push notification: %@ - %@",  v24,  *(void *)(a1[4] + 64LL));

    uint64_t v26 = (void *)a1[5];
    if (v26)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue([v26 cloudKitClientIdentifier]);
      -[NSMutableString appendFormat:](v25, "appendFormat:", @"\n\t(initially served to %@)", v27);
    }

    -[NSMutableString appendFormat:](v25, "appendFormat:", @"\n\t%@", v22);
    -[NSMutableArray addObject:](v2, "addObject:", v25);
    if (*(void *)(a1[4] + 56LL) >= 2uLL)
    {
      uint64_t v28 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v29 = a1[4];
      uint64_t v30 = *(void *)(v29 + 56);
      [*(id *)(v29 + 40) timeIntervalSinceDate:*(void *)(v29 + 48)];
      id v32 = -[NSString initWithFormat:]( v28,  "initWithFormat:",  @"received %lu push notifications in %.1fs",  v30,  v31);
      -[NSMutableArray addObject:](v2, "addObject:", v32);
    }

    goto LABEL_23;
  }

  if (v3[9])
  {
    uint64_t v18 = v3[10];
    v19 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v20 = a1[4];
    if (v18) {
      v21 = -[NSString initWithFormat:]( v19,  "initWithFormat:",  @"push notification: %@ (%@)",  *(void *)(v20 + 72),  *(void *)(v20 + 80));
    }
    else {
      v21 = -[NSString initWithFormat:]( v19,  "initWithFormat:",  @"push notification: %@",  *(void *)(v20 + 72),  v35);
    }
    id v22 = v21;
    -[NSMutableArray addObject:](v2, "addObject:", v21);
LABEL_23:

    goto LABEL_24;
  }

  -[NSMutableArray addObject:](v2, "addObject:", @"last push notification: none since launch");
LABEL_24:
  uint64_t v33 = a1[6];
  id v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v2, "componentsJoinedByString:", @"\n"));
  (*(void (**)(uint64_t, void *))(v33 + 16))(v33, v34);
}

void sub_1000042D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000042E8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if ([v10 count])
  {
    id v6 = *(void **)(a1 + 32);
    int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "componentsJoinedByString:", @", "));
    id v9 = (void *)v8;
    if (v7)
    {
      [v6 appendFormat:@"%@ (%@)", v8, v5];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    }

    else
    {
      [v6 appendFormat:@", %@ (%@)", v8, v5];
    }
  }
}

void sub_100004440(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(void **)(v4 + 112);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100004534;
  v11[3] = &unk_10023DB10;
  v11[4] = v4;
  id v12 = v3;
  id v13 = v5;
  int v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100004A30;
  block[3] = &unk_10023DBC8;
  id v15 = v7;
  uint64_t v8 = v6;
  id v9 = v3;
  dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

void sub_100004534(void *a1)
{
  v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = a1[4];
  if (*(void *)(v3 + 8))
  {
    uint64_t v4 = *(void *)(v3 + 24);
    if (v4)
    {
      id v32 = @"environment";
      uint64_t v33 = v4;
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL));
      id v6 = [v5 mutableCopy];

      v27 = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472LL;
      uint64_t v29 = sub_1000048D0;
      uint64_t v30 = &unk_10023DB60;
      id v7 = v6;
      id v31 = v7;
      uint64_t v8 = objc_retainBlock(&v27);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "enabledTopics", v27, v28, v29, v30));
      ((void (*)(void ***, void *, const __CFString *))v8[2])(v8, v9, @"enabled");

      dispatch_block_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) ignoredTopics]);
      ((void (*)(void ***, void *, const __CFString *))v8[2])(v8, v10, @"ignored");

      v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) opportunisticTopics]);
      ((void (*)(void ***, void *, const __CFString *))v8[2])(v8, v11, @"opportunistic");

      uint64_t v12 = a1[4];
      if (*(void *)(v12 + 88) || *(void *)(v12 + 40))
      {
        id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v14 = *(void **)(a1[4] + 88LL);
        if (v14)
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 cplNotificationTypeDescription]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v13, "setObject:forKeyedSubscript:", v15, @"type");

          id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) notificationID]);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 notificationUUID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v17,  @"notificationID");

          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) containerIdentifier]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v18,  @"container");

          v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) subscriptionID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v19,  @"subscriptionID");

          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) notificationID]);
          v21 = (void *)objc_claimAutoreleasedReturnValue([v20 notificationUUID]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v21,  @"notificationID");

          id v22 = (void *)a1[5];
          if (v22)
          {
            v23 = (void *)objc_claimAutoreleasedReturnValue([v22 cloudKitClientIdentifier]);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v23,  @"client");
          }
        }

        if (*(void *)(a1[4] + 64LL)) {
          v24 = *(const __CFString **)(a1[4] + 64LL);
        }
        else {
          v24 = @"none";
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v24,  @"pushTopic");
        v25 = *(void **)(a1[4] + 40LL);
        if (v25)
        {
          [v25 timeIntervalSinceReferenceDate];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v13, "setObject:forKeyedSubscript:", v26, @"date");
        }

        [v7 setObject:v13 forKeyedSubscript:@"lastPush"];
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v7, @"push");
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000048D0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v6 count]) {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_100004A04(id a1)
{
  v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.push");
  uint64_t v3 = (void *)qword_100295ED8;
  qword_100295ED8 = (uint64_t)v2;
}

void sub_100004A30(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100004A64( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

BOOL sub_100004A78(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

LABEL_35:
LABEL_36:
    if (!_CPLSilentLogging)
    {
      uint64_t v37 = sub_10000537C();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "Using engine with CloudKit transport",  buf,  2u);
      }
    }
  }

  v39 = objc_opt_class(&OBJC_CLASS___CPLCloudKitTransport);
  [v27 setPlatformImplementation:v39 forClass:objc_opt_class(CPLEngineTransport)];
LABEL_41:
  +[CPLPlatform setDirectClientImplementationForPlatform:]( &OBJC_CLASS___CPLPlatform,  "setDirectClientImplementationForPlatform:",  v27);
  if (*((_BYTE *)v7 + 16))
  {
    v40 = objc_opt_class(&OBJC_CLASS___CPLSyncBubbleScheduler);
    [v27 setPlatformImplementation:v40 forClass:objc_opt_class(CPLEngineScheduler)];
  }

  +[CPLPlatform setDefaultPlatform:](&OBJC_CLASS___CPLPlatform, "setDefaultPlatform:", v27);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0LL);
  v42 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(initially_inactive);
  char v43 = dispatch_queue_create("com.apple.cloudphotod.daemon", v42);
  v44 = (void *)*((void *)v7 + 16);
  *((void *)v7 + 16) = v43;

  dispatch_set_qos_class_fallback(*((void *)v7 + 16), 9LL);
  v45 = *((void *)v7 + 16);
  v89[0] = _NSConcreteStackBlock;
  v89[1] = 3221225472LL;
  v89[2] = sub_10000558C;
  v89[3] = &unk_10023DC70;
  v46 = v7;
  v90 = v46;
  xpc_set_idle_handler(v45, v89);
  v46[138] = 1;
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472LL;
  v86[2] = sub_1000056B8;
  v86[3] = &unk_10023DC98;
  v88 = a2;
  v47 = v46;
  v87 = v47;
  [v47 _performOnceDeviceIsUnlocked:v86];
  signal(15, (void (__cdecl *)(int))1);
  v48 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  0xFuLL,  0LL,  *((dispatch_queue_t *)v7 + 16));
  v50 = (dispatch_object_t *)(v47 + 13);
  v49 = (void *)v47[13];
  v47[13] = v48;

  v51 = (dispatch_source_s *)v47[13];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1000057EC;
  handler[3] = &unk_10023DC70;
  v52 = v47;
  v85 = v52;
  dispatch_source_set_event_handler(v51, handler);
  dispatch_resume(*v50);
  signal(29, (void (__cdecl *)(int))1);
  v53 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  0x1DuLL,  0LL,  *((dispatch_queue_t *)v7 + 16));
  v55 = v52 + 14;
  v54 = v52[14];
  v52[14] = v53;

  *(void *)buf = 0LL;
  v81 = buf;
  v82 = 0x2020000000LL;
  v83 = 0;
  v56 = (dispatch_source_s *)v52[14];
  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472LL;
  v77[2] = sub_10000594C;
  v77[3] = &unk_10023DD58;
  v79 = buf;
  v57 = v52;
  v78 = v57;
  dispatch_source_set_event_handler(v56, v77);
  dispatch_resume(*v55);
  signal(30, (void (__cdecl *)(int))1);
  v58 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  0x1EuLL,  0LL,  *((dispatch_queue_t *)v7 + 16));
  v60 = v57 + 15;
  v59 = v57[15];
  v57[15] = v58;

  v61 = (dispatch_source_s *)v57[15];
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472LL;
  v75[2] = sub_100005E18;
  v75[3] = &unk_10023DC70;
  v62 = v57;
  v76 = v62;
  dispatch_source_set_event_handler(v61, v75);
  dispatch_resume(*v60);
  if (!_CPLSilentLogging)
  {
    v63 = sub_10000537C();
    v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v92 = 138412290;
      v93 = @"com.apple.cloudphotod";
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "Daemon listening on %@", v92, 0xCu);
    }
  }

  v65 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.cloudphotod");
  v66 = v62[4];
  v62[4] = v65;

  -[dispatch_object_s setDelegate:](v62[4], "setDelegate:", v62);
  -[dispatch_object_s _setQueue:](v62[4], "_setQueue:", *((void *)v7 + 16));
  -[dispatch_object_s resume](v62[4], "resume");
  v67 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.cloudphotod.daemon");
  v68 = v62[5];
  v62[5] = v67;

  -[dispatch_object_s setDelegate:](v62[5], "setDelegate:", v62);
  -[dispatch_object_s _setQueue:](v62[5], "_setQueue:", *((void *)v7 + 16));
  -[dispatch_object_s resume](v62[5], "resume");
  v69 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v70 = v62[6];
  v62[6] = (dispatch_object_t)v69;

  v71 = notify_post("com.apple.cpl.cloudphotoddidlaunch");
  if (v71 && !_CPLSilentLogging)
  {
    v72 = sub_10000537C();
    v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v92 = 67109120;
      LODWORD(v93) = v71;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_ERROR,  "Unable to notify that daemon has launched: %i",  v92,  8u);
    }
  }

  dispatch_activate(*((dispatch_object_t *)v7 + 16));

  _Block_object_dispose(buf, 8);
  return v7;
}

  return v10;
}
      }
    }

    else
    {
      char v43 = (CKFetchRecordZonesOperation *)objc_claimAutoreleasedReturnValue( +[CKFetchRecordZonesOperation fetchAllRecordZonesOperation]( &OBJC_CLASS___CKFetchRecordZonesOperation,  "fetchAllRecordZonesOperation"));
      if (!_CPLSilentLogging)
      {
        v48 = sub_100030230();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          v49 = self->_scope;
          *(_DWORD *)buf = 138412290;
          v84 = v49;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Fetching all zones for %@", buf, 0xCu);
        }

        goto LABEL_35;
      }
    }

    v50 = (void *)objc_claimAutoreleasedReturnValue(-[CKFetchRecordZonesOperation operationID](v43, "operationID"));
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472LL;
    v59[2] = sub_100031054;
    v59[3] = &unk_10023F4E8;
    v59[4] = self;
    v64 = &v70;
    v51 = v18;
    v62 = v51;
    v65 = &v76;
    v52 = v50;
    v66 = a2;
    v60 = v52;
    v63 = v19;
    v53 = v17;
    v61 = v53;
    -[CKFetchRecordZonesOperation setFetchRecordZonesCompletionBlock:](v43, "setFetchRecordZonesCompletionBlock:", v59);
    -[CPLCloudKitTransportTask launchOperation:type:withContext:]( self,  "launchOperation:type:withContext:",  v43,  v40,  0LL);

    _Block_object_dispose(&v70, 8);
    _Block_object_dispose(&v76, 8);

    goto LABEL_37;
  }

  (*((void (**)(void))self->_completionHandler + 2))();
LABEL_37:
}

            __break(1u);
            return result;
          }

void sub_100005358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

id sub_10000537C()
{
  if (qword_100295F00 != -1) {
    dispatch_once(&qword_100295F00, &stru_10023E0F0);
  }
  return (id)qword_100295F08;
}

void sub_1000053BC(id a1, NSString *a2)
{
  os_log_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_10000537C();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Requesting client to connect to %@",  (uint8_t *)&v5,  0xCu);
    }
  }

  sub_1000228B4();
}

void sub_100005478(id a1)
{
  v1 = -[NSURL initFileURLWithPath:isDirectory:]( objc_alloc(&OBJC_CLASS___NSURL), "initFileURLWithPath:isDirectory:", @"/usr/local/lib/libEnginePlistImplementation.dylib", 0LL);
  qword_100295EE0 = (uint64_t)dlopen(-[NSURL fileSystemRepresentation](v1, "fileSystemRepresentation"), 1);
  if (qword_100295EE0) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = _CPLSilentLogging == 0;
  }
  if (v2)
  {
    id v3 = sub_10000537C();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors posixErrorForURL:](&OBJC_CLASS___CPLErrors, "posixErrorForURL:", v1));
      int v6 = 138412290;
      id v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to load local transport: %@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_10000558C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 72) count])
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v2 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    __int16 v12 = 0;
    uint64_t v4 = "Daemon is idle";
    int v5 = (uint8_t *)&v12;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
LABEL_10:

    return;
  }

  if ([*(id *)(*(void *)(a1 + 32) + 80) count])
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v6 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    __int16 v10 = 0;
    uint64_t v4 = "Daemon is idle with no client";
    int v5 = (uint8_t *)&v10;
    goto LABEL_9;
  }

  if (!_CPLSilentLogging)
  {
    id v7 = sub_10000537C();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Daemon is idle and has no engine to manage. Exiting",  buf,  2u);
    }
  }

  uint64_t v9 = _CPLExit(0LL);
  sub_1000056B8(v9);
}

void sub_1000056B8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v13 = (id)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);

  if (!v13) {
    sub_10018E600(a1);
  }
  id v3 = -[CPLEngineParametersStorage initWithBundleIdentifier:]( objc_alloc(&OBJC_CLASS___CPLEngineParametersStorage),  "initWithBundleIdentifier:",  v13);
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;

  id v6 = -[CPLEngineWrapperArray initWithParametersStorage:queue:]( objc_alloc(&OBJC_CLASS___CPLEngineWrapperArray),  "initWithParametersStorage:queue:",  *(void *)(*(void *)(a1 + 32) + 24LL),  *(void *)(*(void *)(a1 + 32) + 128LL));
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 80);
  *(void *)(v7 + 80) = v6;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "setDelegate:");
  uint64_t v9 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v9 + 16))
  {
    +[CPLCloudKitReschedulerCoordinator beginRegisteringKnownReschedulerManager]( &OBJC_CLASS___CPLCloudKitReschedulerCoordinator,  "beginRegisteringKnownReschedulerManager");
    uint64_t v9 = *(void *)(a1 + 32);
  }

  [*(id *)(v9 + 80) loadRegisteredWrappers];
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 16LL)) {
    +[CPLCloudKitReschedulerCoordinator endRegisteringKnownReschedulerManagers]( &OBJC_CLASS___CPLCloudKitReschedulerCoordinator,  "endRegisteringKnownReschedulerManagers");
  }
  __int16 v10 = -[CPLInitialDownloadHelper initWithWrappers:queue:]( objc_alloc(&OBJC_CLASS___CPLInitialDownloadHelper),  "initWithWrappers:queue:",  *(void *)(*(void *)(a1 + 32) + 80LL),  *(void *)(*(void *)(a1 + 32) + 128LL));
  uint64_t v11 = *(void *)(a1 + 32);
  __int16 v12 = *(void **)(v11 + 88);
  *(void *)(v11 + 8_Block_object_dispose(va, 8) = v10;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 88), "setDelegate:");
  [*(id *)(a1 + 32) _registerAfterLaunchWhenAllEnginesAreOpened];
}

id sub_1000057EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 138)) {
    goto LABEL_12;
  }
  id v3 = [*(id *)(v1 + 80) count];
  if (![*(id *)(*(void *)(a1 + 32) + 80) count])
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10000537C();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Got SIGTERM signal. Exiting immediately",  (uint8_t *)&v9,  2u);
      }
    }

LABEL_12:
    exit(0);
  }

  if (!_CPLSilentLogging)
  {
    id v4 = sub_10000537C();
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Got SIGTERM signal. Closing %lu engines and exiting",  (uint8_t *)&v9,  0xCu);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 136LL) = 1;
  return [*(id *)(*(void *)(a1 + 32) + 80) stopAllWithCompletionHandler:&stru_10023DCB8];
}

  return v28;
}
        }
      }
    }
  }

  else if (!_CPLSilentLogging)
  {
    uint64_t v26 = sub_10003AF08();
    v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v27 = v11;
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v9 cplFullDescription]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v13 sourceRecordChangeTag]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v10 recordID]);
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 cplFullDescription]);
      *(_DWORD *)buf = 138413058;
      v41 = v28;
      v42 = 2112;
      char v43 = v29;
      v44 = 2112;
      v45 = v31;
      v46 = 2112;
      v47 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Successfully moved [%@ etag: %@] to %@. Move marker: %@",  buf,  0x2Au);

      __int16 v12 = 0LL;
      uint64_t v11 = v27;
    }

    goto LABEL_12;
  }

  if (*(void *)(a1 + 40) && (v9 || v10 || v13))
  {
    id v32 = *(void **)(a1 + 48);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_10003C9E0;
    v35[3] = &unk_10023EDE8;
    v36 = v9;
    uint64_t v37 = *(id *)(a1 + 40);
    v38 = v10;
    v39 = v13;
    [v32 dispatchAsync:v35];
  }
}

  return v7;
}

  return v7;
}

      id v15 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
      id v16 = *(void *)(a1 + 56);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 recordName]);
      uint64_t v18 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( v15,  "initWithScopeIdentifier:identifier:",  v16,  v17);

      v19 = -[objc_class newDeleteChangeWithScopedIdentifier:](v10, "newDeleteChangeWithScopedIdentifier:", v18);
      [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) addRecord:v19];

      goto LABEL_13;
    }

    id v10 = 0LL;
    goto LABEL_11;
  }

    [v6 coordinatorDidReceiveAPushNotification:self];
    goto LABEL_13;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitCoordinator _bestClientToReceivePushNotification:]( self,  "_bestClientToReceivePushNotification:",  v5));
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_100054E18();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudKitClientIdentifier]);
        id v15 = 138543618;
        id v16 = v12;
        id v17 = 2112;
        uint64_t v18 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Serving push notification to client %{public}@: %@",  (uint8_t *)&v15,  0x16u);
      }
    }

    objc_storeStrong((id *)&self->_lastClientServedWithAPushNotification, v6);
    goto LABEL_12;
  }

  if (!_CPLSilentLogging)
  {
    id v13 = sub_100054E18();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = 138412290;
      id v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Ignoring push notification as there is no client interested: %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  v21 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord objectForKey:](self, "objectForKey:", v12));
  id v22 = [v10 length];
  v23 = [v21 unsignedIntegerValue];
  if (v22 != v23 && !_CPLSilentLogging)
  {
    v24 = __CPLGenericOSLogDomain(v23);
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = (CKRecord *)[v10 length];
      *(_DWORD *)buf = 134218498;
      uint64_t v29 = v26;
      uint64_t v30 = 2112;
      id v31 = v21;
      id v32 = 2112;
      uint64_t v33 = self;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Mismatching filesize (fetched %lu vs. expected %@) for resourceData for %@",  buf,  0x20u);
    }
  }
}

  [v10 setLibraryState:v16];

  return v10;
}

          goto LABEL_13;
        }

        goto LABEL_13;
      }

      goto LABEL_42;
    }

    id v31 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:@"contributors"]);
    if (!v31)
    {
      uint64_t v37 = 0LL;
LABEL_41:
      -[CPLRecordChange setSharingContributorUserIdentifiers:](self, "setSharingContributorUserIdentifiers:", v37);

      goto LABEL_42;
    }

    id v32 = objc_opt_class(&OBJC_CLASS___NSArray);
    isKindOfClass = objc_opt_isKindOfClass(v31, v32);
    v75 = v18;
    if ((isKindOfClass & 1) != 0)
    {
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v66 = v31;
      id v34 = v31;
      uint64_t v35 = [v34 countByEnumeratingWithState:&v79 objects:v84 count:16];
      if (v35)
      {
        v36 = v35;
        v70 = v13;
        v73 = v15;
        v68 = v14;
        v65 = v12;
        uint64_t v37 = 0LL;
        v38 = *(void *)v80;
        v39 = 1;
LABEL_18:
        v40 = 0LL;
        while (1)
        {
          if (*(void *)v80 != v38) {
            objc_enumerationMutation(v34);
          }
          v41 = *(void **)(*((void *)&v79 + 1) + 8 * v40);
          if ((v39 & 1) != 0)
          {
            v42 = objc_opt_class(&OBJC_CLASS___CKReference);
            char v43 = objc_opt_isKindOfClass(v41, v42);
            if ((v43 & 1) == 0) {
              break;
            }
          }

          if (!v37) {
            uint64_t v37 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v34 count]);
          }
          v44 = (void *)objc_claimAutoreleasedReturnValue([v41 recordID]);
          v45 = (void *)objc_claimAutoreleasedReturnValue([v44 recordName]);
          -[NSMutableArray addObject:](v37, "addObject:", v45);

          v39 = 0;
          if (v36 == (id)++v40)
          {
            v36 = [v34 countByEnumeratingWithState:&v79 objects:v84 count:16];
            v39 = 0;
            if (v36) {
              goto LABEL_18;
            }
            goto LABEL_27;
          }
        }

        if (_CPLSilentLogging)
        {
LABEL_27:
          __int16 v12 = v65;
          id v31 = v66;
          uint64_t v14 = v68;
          id v13 = v70;
          id v15 = v73;
          goto LABEL_39;
        }

        v47 = __CPLGenericOSLogDomain(v43);
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        __int16 v12 = v65;
        uint64_t v14 = v68;
        id v13 = v70;
        id v15 = v73;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v86 = (CPLRecordChange *)@"contributors";
          v87 = 2112;
          v88 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "Got unexpected value for %@: %@",  buf,  0x16u);
        }
      }

      else
      {
        uint64_t v37 = 0LL;
      }

      id v31 = v66;
    }

    else
    {
      if (_CPLSilentLogging)
      {
        uint64_t v37 = 0LL;
        goto LABEL_40;
      }

      v46 = __CPLGenericOSLogDomain(isKindOfClass);
      id v34 = (id)objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v86 = (CPLRecordChange *)@"contributors";
        v87 = 2112;
        v88 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v34,  OS_LOG_TYPE_ERROR,  "Got unexpected value for %@: %@",  buf,  0x16u);
      }

      uint64_t v37 = 0LL;
    }

    id v17 = 0;
  }

  return v17 & 1;
}

    id v17 = 0;
  }

  return v17 & 1;
}

    id v17 = 0;
  }

  return v17 & 1;
}

    sub_1000CEDAC((uint64_t)v14, &qword_100294DF8);
    goto LABEL_26;
  }

  uint64_t v30 = v63;
  sub_1000CE7B4((uint64_t)v14, v63, &qword_100293CA8);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v20, &qword_100293CA8);
    sub_1000CEDAC((uint64_t)v22, &qword_100293CA8);
    sub_1000CECE0(v30, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
    goto LABEL_12;
  }

  id v31 = (uint64_t)v58;
  sub_1000CEC9C(v28, (uint64_t)v58, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  id v32 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0(v30, v31);
  sub_1000CECE0(v31, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  sub_1000CEDAC((uint64_t)v20, &qword_100293CA8);
  sub_1000CEDAC((uint64_t)v22, &qword_100293CA8);
  sub_1000CECE0(v30, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
  sub_1000CEDAC((uint64_t)v14, &qword_100293CA8);
  if ((v32 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_14:
  uint64_t v33 = *(void *)(a1 + 32);
  id v34 = *(void *)(a1 + 40);
  uint64_t v35 = *(void *)(a2 + 32);
  v36 = *(void *)(a2 + 40);
  if (v33 != v35 || v34 != v36)
  {
    v25 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0LL) & 1) == 0) {
      return v25 & 1;
    }
  }

  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || (sub_1000FFE20(*(void *)(a1 + 56), *(void *)(a2 + 56)) & 1) == 0)
  {
    goto LABEL_26;
  }

  uint64_t v37 = *(void *)(a1 + 64);
  v38 = *(void *)(a1 + 72);
  v39 = *(void *)(a2 + 64);
  v40 = *(void *)(a2 + 72);
  if (v37 == v39 && v38 == v40
    || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) != 0))
  {
    v41 = *(void *)(a1 + 80);
    v42 = *(void *)(a1 + 88);
    char v43 = *(void *)(a2 + 80);
    v44 = *(void *)(a2 + 88);
    if (v41 == v43 && v42 == v44
      || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v43, v44, 0LL) & 1) != 0))
    {
      v45 = v57;
      v46 = a1 + *(int *)(v57 + 44);
      v48 = v61;
      v47 = v62;
      v49 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
      v50 = v59;
      v49(v59, v46, v62);
      v51 = a2 + *(int *)(v45 + 44);
      v52 = v60;
      v49(v60, v51, v47);
      v53 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v52, v47, v53);
      v54 = *(void (**)(char *, uint64_t))(v48 + 8);
      v54(v52, v47);
      v54(v50, v47);
    }
  }

  return v25 & 1;
}

      goto LABEL_13;
    }

    goto LABEL_13;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v35 = sub_100140908();
    v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue([v11 scopeIdentifier]);
      *(_DWORD *)buf = 138412802;
      v45 = v38;
      v46 = 2048;
      v47 = v14;
      v48 = 2048;
      v49 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Last supported feature version for %@ was %lu and current server version is %lu - no changes were missed",  buf,  0x20u);
    }
  }

  char v43 = 0LL;
  uint64_t v37 = -[CPLPrequeliteScopeStorage storeSupportedFeatureVersionInLastSync:forScope:error:]( self,  "storeSupportedFeatureVersionInLastSync:forScope:error:",  20LL,  v11,  &v43,  v38);
  uint64_t v20 = v43;

  if ((v37 & 1) == 0)
  {
    objc_autoreleasePoolPop(v12);
    if (a6) {
      goto LABEL_26;
    }
LABEL_35:
    id v32 = 0;
    goto LABEL_28;
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
  uint64_t v11 = [v19 addGlobalVariable:v9 defaultValue:v10 error:a5];

  if (a5 && (v11 & 1) == 0)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
    v21 = (void *)objc_claimAutoreleasedReturnValue([v20 pqlConnection]);
    *a5 = (id)objc_claimAutoreleasedReturnValue([v21 lastCPLError]);

    uint64_t v11 = 0;
  }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    goto LABEL_16;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:3]);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  [v7 setScopedIdentifier:*(void *)(a1 + 32)];
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:4]);
  [v8 setRelatedIdentifier:v9];

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:5]);
  [v8 setSecondaryIdentifier:v10];
  uint64_t v11 = 6LL;
LABEL_9:

  objc_msgSend( *(id *)(a1 + 40),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v8,  objc_msgSend(v3, "integerAtIndex:", v11));
  uint64_t v14 = *(unsigned __int8 **)(a1 + 48);
  if (v14)
  {
    if (v5)
    {
      id v15 = [v3 BOOLAtIndex:10];
      uint64_t v14 = *(unsigned __int8 **)(a1 + 48);
    }

    else
    {
      id v15 = 1;
    }

    *uint64_t v14 = v15;
  }

  [v8 awakeFromStorage];
LABEL_16:

  return v8;
}

  if (-[NSMutableArray count](v7, "count"))
  {
    self->_countOfOutgoingResources += (unint64_t)-[NSMutableArray count](v7, "count");
    outgoingResources = self->_outgoingResources;
    id v32 = 0LL;
    v23 = v30;
    v24 = -[CPLEngineOutgoingResources storeResourcesToUpload:withUploadIdentifier:shouldCheckResources:error:]( outgoingResources,  "storeResourcesToUpload:withUploadIdentifier:shouldCheckResources:error:",  v7,  v30,  0LL,  &v32);
    v25 = v32;
    if ((v24 & 1) == 0) {
      -[CPLPrequeliteFlattentPipelineMigrator _setLastError:](self, "_setLastError:", v25);
    }
LABEL_22:
  }

  else
  {
    v24 = 1;
    v23 = v30;
  }

  return v24;
}

void sub_10000593C(id a1)
{
}

void sub_10000594C(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v1 = sub_10000537C();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    id v3 = "SIGINFO: daemon is already computing info";
    goto LABEL_13;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v5 + 138))
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v6 = sub_10000537C();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    id v3 = "SIGINFO: daemon is waiting for first unlock";
    goto LABEL_13;
  }

  if (*(_BYTE *)(v5 + 136))
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v7 = sub_10000537C();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    id v3 = "SIGINFO: daemon is closing";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 2u);
LABEL_14:

    return;
  }

  if ([*(id *)(v5 + 80) count])
  {
    dispatch_group_t v8 = dispatch_group_create();
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    int v9 = *(void **)(a1 + 32);
    id v10 = (void *)v9[10];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100005B74;
    v15[3] = &unk_10023DD08;
    id v16 = v9;
    dispatch_group_t v17 = v8;
    id v2 = v8;
    [v10 enumerateOpenedWrappersWithBlock:v15];
    uint64_t v11 = *(void *)(a1 + 40);
    __int16 v12 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100005E08;
    block[3] = &unk_10023DD30;
    void block[4] = v11;
    dispatch_group_notify((dispatch_group_t)v2, v12, block);

    goto LABEL_14;
  }

  if (!_CPLSilentLogging)
  {
    id v13 = sub_10000537C();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)buf = 0;
    id v3 = "SIGINFO: no engine configured";
    goto LABEL_13;
  }

void sub_100005B74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 80) isWrapperOpened:v3])
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 engine]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100005CC8;
    v7[3] = &unk_10023DCE0;
    id v8 = v3;
    id v9 = *(id *)(a1 + 40);
    [v4 getStatusForComponents:0 completionHandler:v7];

    uint64_t v5 = v8;
LABEL_6:

    goto LABEL_7;
  }

  if (!_CPLSilentLogging)
  {
    id v6 = sub_10000537C();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "SIGINFO for %@: not opened",  buf,  0xCu);
    }

    goto LABEL_6;
  }

LABEL_7:
}

LABEL_8:
}

  id v9 = 0LL;
LABEL_11:
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  [*(id *)(a1 + 32) setCurrentFetchRecordZoneChangesOperation:0];
}

  __int16 v12 = -[CPLShareParticipant initWithUserIdentifier:](self, "initWithUserIdentifier:", v10);
  if (v12)
  {
    -[CPLShareParticipant setIsCurrentUser:](v12, "setIsCurrentUser:", [v6 isCurrentUser]);
    id v13 = (unint64_t)[v6 role] - 1;
    if (v13 > 3) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = qword_1002122A0[v13];
    }
    -[CPLShareParticipant setRole:](v12, "setRole:", v14);
    id v15 = (char *)[v6 acceptanceStatus];
    else {
      id v16 = v15;
    }
    -[CPLShareParticipant setAcceptanceStatus:](v12, "setAcceptanceStatus:", v16);
    dispatch_group_t v17 = (char *)[v6 permission];
    else {
      uint64_t v18 = v17;
    }
    -[CPLShareParticipant setPermission:](v12, "setPermission:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue([v6 participantID]);
    -[CPLShareParticipant setParticipantID:](v12, "setParticipantID:", v19);

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v8 lookupInfo]);
    v21 = (void *)objc_claimAutoreleasedReturnValue([v8 nameComponents]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 emailAddress]);
    if (v22) {
      -[CPLShareParticipant setEmail:](v12, "setEmail:", v22);
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue([v20 phoneNumber]);
    if (v23) {
      -[CPLShareParticipant setPhoneNumber:](v12, "setPhoneNumber:", v23);
    }
    -[CPLShareParticipant setNameComponents:](v12, "setNameComponents:", v21);
    -[CPLShareParticipant setHasiCloudAccount:](v12, "setHasiCloudAccount:", [v8 hasiCloudAccount]);
  }

  return v12;
}

  return v5;
}
}

  if (!_CPLSilentLogging)
  {
    uint64_t v14 = sub_10014F0EC();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
LABEL_11:

      goto LABEL_12;
    }

    *(_DWORD *)buf = 138412546;
    uint64_t v30 = v9;
    id v31 = 2112;
    id v32 = v10;
    id v16 = "Creating variable %@ with default value %@";
    dispatch_group_t v17 = v15;
    uint64_t v18 = OS_LOG_TYPE_DEBUG;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, 0x16u);
    goto LABEL_11;
  }
}
}

    **(_BYTE **)(a1 + 56) = 0;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    goto LABEL_8;
  }

  *uint64_t v5 = 0;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 cplChangeAtIndex:3]);
  if (!v6) {
    goto LABEL_7;
  }
  id v7 = v6;
  [v6 setScopedIdentifier:*(void *)(a1 + 32)];
  **(_BYTE **)(a1 + 56) = [v3 BOOLAtIndex:10];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:4]);
  [v7 setRelatedIdentifier:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 stringAtIndex:5]);
  [v7 setSecondaryIdentifier:v9];
  id v10 = 6LL;
LABEL_6:

  objc_msgSend( *(id *)(a1 + 40),  "_updateOtherScopeIdentifierInRecord:otherScopeIndex:",  v7,  objc_msgSend(v3, "integerAtIndex:", v10));
  [v7 awakeFromStorage];
LABEL_8:

  return v7;
}

    dispatch_group_t v17 = 0LL;
    goto LABEL_8;
  }

  id v16 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%lu not matched with client",  a4 - (void)v15);
LABEL_6:
  dispatch_group_t v17 = v16;
LABEL_8:

  return v17;
}

void sub_100005CC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10000537C();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v13 = 138412546;
        uint64_t v14 = v9;
        __int16 v15 = 2112;
        id v16 = v6;
        id v10 = "SIGINFO for %@ failed: %@";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v13, 0x16u);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v11 = sub_10000537C();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      id v16 = v5;
      id v10 = "SIGINFO for %@:\n%{public}@";
      goto LABEL_8;
    }

LABEL_9:
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}
  }
}
  }

  -[CPLDaemon _daemonLibraryManagerWantsToExitNow:](self, "_daemonLibraryManagerWantsToExitNow:", v6);
}
}
  }

  return (*(uint64_t (**)(void, void, uint64_t))(a1[7] + 16LL))(a1[7], a1[4], a3);
}
  }

  -[NSMutableDictionary removeObjectForKey:](self->_wrappers, "removeObjectForKey:", v6);
  -[NSMutableDictionary removeObjectForKey:](self->_unopenedWrappers, "removeObjectForKey:", v6);
}

  uint64_t v12 = *(void *)(a1 + 32);
  if (*(void *)(v12 + 72))
  {
    int v13 = *(double *)(v12 + 88);
    if (v13 <= 10.0)
    {
      uint64_t v14 = @"short";
    }

    else if (v13 >= *(double *)(v12 + 168))
    {
      __int16 v15 = objc_alloc(&OBJC_CLASS___NSString);
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringForTimeInterval:]( &OBJC_CLASS___CPLDateFormatter,  "stringForTimeInterval:",  *(double *)(*(void *)(a1 + 32) + 88LL)));
      uint64_t v14 = -[NSString initWithFormat:](v15, "initWithFormat:", @"more than %@", v16);
    }

    else
    {
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringForTimeInterval:]( &OBJC_CLASS___CPLDateFormatter,  "stringForTimeInterval:"));
    }

    dispatch_group_t v17 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v17 + 80)) {
      uint64_t v18 = @"session has been explicitly extended";
    }
    else {
      uint64_t v18 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(v17 + 72) description]);
    }
    v19 = objc_alloc(&OBJC_CLASS___NSString);
    if (*(void *)(*(void *)(a1 + 32) + 32LL)) {
      uint64_t v20 = @"Requested";
    }
    else {
      uint64_t v20 = @"Last requested";
    }
    v21 = -[NSString initWithFormat:](v19, "initWithFormat:", @"%@ minimum running time: %@ (%@)", v20, v14, v18);
    [v25 addObject:v21];
  }

  id v22 = [v25 copy];
  v23 = *(void *)(*(void *)(a1 + 48) + 8LL);
  v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v22;
}

    id v8 = 0LL;
    goto LABEL_10;
  }

  id v8 = 0LL;
LABEL_8:

LABEL_10:
  return v8;
}
  }
}

  return v8;
}
  }

  [*(id *)(*(void *)(a1 + 32) + 16) enumerateObjectsUsingBlock:&stru_100241088];
  return 1LL;
}

    uint64_t v12 = 0LL;
    goto LABEL_10;
  }

  uint64_t v12 = 0LL;
LABEL_8:

LABEL_10:
  return v12;
}

  return v14;
}
  }
}

    sub_1000CEDAC((uint64_t)v14, &qword_100294E00);
    uint64_t v28 = 0;
    return v28 & 1;
  }

  sub_1000CE7B4((uint64_t)v14, (uint64_t)v18, &qword_100293C98);
  if (v34(v33, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
    sub_1000CEDAC((uint64_t)v23, &qword_100293C98);
    sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    goto LABEL_9;
  }

  sub_1000CEC9C(v33, (uint64_t)v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  uint64_t v35 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v18, (uint64_t)v11);
  sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  sub_1000CEDAC((uint64_t)v21, &qword_100293C98);
  sub_1000CEDAC((uint64_t)v23, &qword_100293C98);
  sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
  sub_1000CEDAC((uint64_t)v14, &qword_100293C98);
  if ((v35 & 1) == 0)
  {
LABEL_17:
    uint64_t v28 = 0;
    return v28 & 1;
  }

  return v10;
}

  id v11 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage _libraryInfoForScope:](self, "_libraryInfoForScope:", v4));
  if (v7) {
    goto LABEL_14;
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 scopeIdentifier]);
  id v7 = +[CPLScopeChange newScopeChangeInferClassWithScopeIdentifier:type:]( CPLScopeChange,  "newScopeChangeInferClassWithScopeIdentifier:type:",  v12,  [v4 scopeType]);

  if (v11)
  {
    int v13 = objc_opt_class(&OBJC_CLASS___CPLMomentShareScopeChange);
    if ((objc_opt_isKindOfClass(v7, v13) & 1) != 0)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 momentShare]);
      [v7 setMomentShare:v14];

      [v11 setMomentShare:0];
    }
  }

  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage _librarySateForScope:](self, "_librarySateForScope:", v4));
  [v7 setLibraryState:v15];

  if (v7)
  {
LABEL_14:
    [v7 setLibraryInfo:v11];
    id v16 = (void *)objc_claimAutoreleasedReturnValue( -[CPLPrequeliteScopeStorage _valueForColumnVariable:scope:]( self,  "_valueForColumnVariable:scope:",  *(_CPLPrequeliteScopeBase **)((char *)&self->_base + 4),  v4));
    objc_msgSend(v7, "setActivated:", ((unint64_t)objc_msgSend(v16, "integerValue") & 0x10) == 0);
    if ([v7 isActivated]
      && +[CPLScopeChange supportsStagingScopeForScopeWithType:]( CPLScopeChange,  "supportsStagingScopeForScopeWithType:",  [v7 scopeType]))
    {
      dispatch_group_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage stagingScopeForScope:](self, "stagingScopeForScope:", v4));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 scopeIdentifier]);
      [v7 setStagingScopeIdentifier:v18];
    }

    v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_transportScopeVar + 4) busyStateVar]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( -[CPLPrequeliteScopeStorage _valueForColumnVariable:scope:]( self,  "_valueForColumnVariable:scope:",  v19,  v4));
    v21 = [v20 integerValue];

    [v7 setBusyState:v21];
    id v22 = v7;
  }

  else
  {
    id v22 = 0LL;
  }

  return v22;
}

    id v7 = 0LL;
  }

  self->_hasCachedChangeSessionUpdate = 1;
  objc_storeStrong((id *)&self->_cachedChangeSessionUpdate, v7);

  objc_autoreleasePoolPop(v4);
  return (CPLChangeSessionUpdate *)v7;
}

  return v15;
}

    if (a6)
    {
      id v16 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue([v12 lastCPLError]);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  *a4 = 0;
  id v16 = 1;
LABEL_14:

  return v16;
}

uint64_t sub_100005E08(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  return result;
}

id sub_100005E18(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received signal to ping supervisors", v5, 2u);
    }
  }

  return [*(id *)(*(void *)(a1 + 32) + 80) enumerateOpenedWrappersWithBlock:&stru_10023DD98];
}

void sub_100005EA4(id a1, CPLEngineWrapper *a2, BOOL *a3)
{
}

void sub_1000060F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

id sub_10000610C(uint64_t a1)
{
  id result = (id)MKBDeviceUnlockedSinceBoot();
  if ((_DWORD)result == 1)
  {
    notify_cancel(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    return [*(id *)(a1 + 32) _performPendingBlockAfterFirstUnlock];
  }

  return result;
}

uint64_t sub_100006160(uint64_t result, int a2)
{
  if (*(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) == a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

id sub_100006468(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) refreshAllConfigurationDictionaries];
}

LABEL_13:
      }

LABEL_15:
    }
  }
}
  }
}

  return v9;
}
}

    -[CPLCKBatchUploadPlanner _dontUnshareRecordWithScopedIdentifier:recordClass:]( self,  "_dontUnshareRecordWithScopedIdentifier:recordClass:",  v12,  a4);
    goto LABEL_14;
  }

  if (-[CPLCKUnsharePlan hasShareTodoForScopedIdentifier:](self->_unsharePlan, "hasShareTodoForScopedIdentifier:", v12))
  {
    if (!_CPLSilentLogging)
    {
      dispatch_group_t v17 = sub_100032740();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v34 = v12;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Remove plan to unshare %@", buf, 0xCu);
      }
    }

    -[CPLCKUnsharePlan removeShareTodoForScopedIdentifier:]( self->_unsharePlan,  "removeShareTodoForScopedIdentifier:",  v12);
    goto LABEL_13;
  }

  if (!-[CPLCKSharePlan hasShareTodoForScopedIdentifier:](self->_sharePlan, "hasShareTodoForScopedIdentifier:", v12))
  {
    if (!self->_sharePlan)
    {
      v19 = -[CPLCKSharePlan initWithPlanner:](objc_alloc(&OBJC_CLASS___CPLCKSharePlan), "initWithPlanner:", self);
      sharePlan = self->_sharePlan;
      self->_sharePlan = v19;
    }

    v21 = objc_claimAutoreleasedReturnValue( -[CPLCKBatchUploadPlanner _shareTodoForRecordWithScopedIdentifier:recordClass:proposedContributorUserIdentifiers:target:]( self,  "_shareTodoForRecordWithScopedIdentifier:recordClass:proposedContributorUserIdentifiers:target:",  v12,  a4,  v13,  v14));
    id v22 = (void *)v21;
    if (v21)
    {
      -[CPLCKBatchUploadPlanner _willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:]( self,  "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:",  *(void *)(v21 + 24),  v12);
      v23 = v22[4];
    }

    else
    {
      -[CPLCKBatchUploadPlanner _willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:]( self,  "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:",  0LL,  v12);
      v23 = 0LL;
    }

    -[CPLCKBatchUploadPlanner _willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:]( self,  "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:",  v23,  v12);
    if (!_CPLSilentLogging)
    {
      v24 = sub_100032740();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v32 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitZoneIdentification engineScope](self->_sharedZoneIdentification, "engineScope"));
        if (v22) {
          uint64_t v26 = (void *)v22[3];
        }
        else {
          uint64_t v26 = 0LL;
        }
        id v31 = v26;
        v27 = (void *)objc_claimAutoreleasedReturnValue([v31 recordName]);
        if (v22) {
          uint64_t v28 = (void *)v22[4];
        }
        else {
          uint64_t v28 = 0LL;
        }
        uint64_t v29 = v28;
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 recordName]);
        *(_DWORD *)buf = 138413058;
        id v34 = v12;
        uint64_t v35 = 2112;
        v36 = v32;
        uint64_t v37 = 2112;
        v38 = v27;
        v39 = 2112;
        v40 = v30;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Will move %@ to %@ (%@ -> %@)", buf, 0x2Au);
      }
    }

    -[CPLCKSharePlan addShareTodo:](self->_sharePlan, "addShareTodo:", v22);
  }
}
}

  return v8;
}

    -[CPLRecordChange setChangeType:](self, "setChangeType:", 1024LL);
    goto LABEL_53;
  }
}

    v25 = 0;
  }

  return v25 & 1;
}

        v27 = 0;
        return v27 & 1;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v13, (uint64_t)v17, &qword_100293C98);
      if (v30(v29, 1LL, v8) != 1)
      {
        id v31 = v48;
        sub_1000CEC9C(v29, v48, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        id v32 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v17, v31);
        sub_1000CECE0(v31, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC((uint64_t)v20, &qword_100293C98);
        sub_1000CEDAC((uint64_t)v22, &qword_100293C98);
        sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC((uint64_t)v13, &qword_100293C98);
        if ((v32 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }

      sub_1000CEDAC((uint64_t)v20, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v22, &qword_100293C98);
      sub_1000CECE0((uint64_t)v17, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }

    sub_1000CEDAC((uint64_t)v13, &qword_100294E00);
    goto LABEL_13;
  }

  return v27 & 1;
}

        uint64_t v28 = 0;
        return v28 & 1;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v14, (uint64_t)v18, &qword_100295030);
      if (v34(v33, 1LL, v8) != 1)
      {
        sub_1000CEC9C(v33, (uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        v50 = v18[1];
        v51 = v11[1];
        if (*v18 == *v11 && v50 == v51
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v50, *v11, v51, 0LL) & 1) != 0)
        {
          if ((v52 = v18[2], v53 = v18[3], v54 = v11[2], v55 = v11[3], v52 == v54) && v53 == v55
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v54, v55, 0LL) & 1) != 0)
          {
            v56 = *(int *)(v8 + 24);
            v57 = (char *)v18 + v56;
            v58 = (char *)v11 + v56;
            v59 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)(v57, v58, v66, v59);
            sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v21, &qword_100295030);
            sub_1000CEDAC((uint64_t)v23, &qword_100295030);
            sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v14, &qword_100295030);
            goto LABEL_7;
          }
        }

        sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC((uint64_t)v21, &qword_100295030);
        sub_1000CEDAC((uint64_t)v23, &qword_100295030);
        sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
        v48 = (uint64_t)v14;
        v47 = &qword_100295030;
LABEL_12:
        sub_1000CEDAC(v48, v47);
        goto LABEL_13;
      }

      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    }

    v47 = &qword_100294DF0;
    v48 = (uint64_t)v14;
    goto LABEL_12;
  }

  return v28 & 1;
}

        uint64_t v30 = 0;
        return v30 & 1;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v16, (uint64_t)v20, &qword_100293C98);
      if (v33(v32, 1LL, v11) != 1)
      {
        id v34 = v52;
        sub_1000CEC9C(v32, v52, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        uint64_t v35 = _s22CloudKitImplementation20Goldilocks_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0((uint64_t)v20, v34);
        sub_1000CECE0(v34, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC((uint64_t)v23, &qword_100293C98);
        sub_1000CEDAC((uint64_t)v25, &qword_100293C98);
        sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        sub_1000CEDAC((uint64_t)v16, &qword_100293C98);
        if ((v35 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }

      sub_1000CEDAC((uint64_t)v23, &qword_100293C98);
      sub_1000CEDAC((uint64_t)v25, &qword_100293C98);
      sub_1000CECE0((uint64_t)v20, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
    }

    sub_1000CEDAC((uint64_t)v16, &qword_100294E00);
    goto LABEL_13;
  }

  return v30 & 1;
}

        uint64_t v28 = 0;
        return v28 & 1;
      }
    }

    else
    {
      sub_1000CE7B4((uint64_t)v14, (uint64_t)v18, &qword_100295030);
      if (v34(v33, 1LL, v8) != 1)
      {
        sub_1000CEC9C(v33, (uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        v48 = v18[1];
        v49 = v11[1];
        if (*v18 == *v11 && v48 == v49
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v48, *v11, v49, 0LL) & 1) != 0)
        {
          if ((v50 = v18[2], v51 = v18[3], v52 = v11[2], v53 = v11[3], v50 == v52) && v51 == v53
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, v52, v53, 0LL) & 1) != 0)
          {
            v54 = *(int *)(v8 + 24);
            v55 = (char *)v18 + v54;
            v56 = (char *)v11 + v54;
            v57 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            LOBYTE(v55) = dispatch thunk of static Equatable.== infix(_:_:)(v55, v56, v64, v57);
            sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v21, &qword_100295030);
            sub_1000CEDAC((uint64_t)v23, &qword_100295030);
            sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
            sub_1000CEDAC((uint64_t)v14, &qword_100295030);
            goto LABEL_7;
          }
        }

        sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC((uint64_t)v21, &qword_100295030);
        sub_1000CEDAC((uint64_t)v23, &qword_100295030);
        sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
        v46 = (uint64_t)v14;
        v45 = &qword_100295030;
LABEL_12:
        sub_1000CEDAC(v46, v45);
        goto LABEL_13;
      }

      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    }

    v45 = &qword_100294DF0;
    v46 = (uint64_t)v14;
    goto LABEL_12;
  }

  return v28 & 1;
}

  uint64_t v12 = 0;
  return v12 & 1;
}

    sub_10019891C( a1,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v30,  (uint64_t)v31,  v32,  (uint64_t)v33,  v34,  v35,  (uint64_t)v36,  v37,  (uint64_t)v38,  (uint64_t)v39,  (uint64_t)v40,  v41,  v42);
  }

  if (!_CPLSilentLogging)
  {
    int v13 = sub_10011CDF4();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      __int16 v15 = *(void *)(a1 + 40);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Unable to create %@: %@", buf, 0x16u);
    }
  }

  dispatch_group_t v17 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v36 = _NSConcreteStackBlock;
  uint64_t v37 = 3221225472LL;
  v38 = sub_100123A80;
  v39 = &unk_100245D80;
  uint64_t v18 = (id *)&v41;
  v19 = *(id *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  v41 = (uint64_t)v19;
  v42 = v20;
  v40 = v3;
  v21 = &v36;
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = sub_10013AA68;
  v44 = &unk_10023DBC8;
  v45 = v21;
  id v22 = v17;
  v23 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v22, v23);

LABEL_11:
}

    sub_100198CCC( (uint64_t)a1,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v32,  (uint64_t)v33,  v34,  (uint64_t)v35,  v36,  v37,  (uint64_t)v38,  v39,  (uint64_t)v40,  (uint64_t)v41,  (uint64_t)v42,  v43,  v44);
  }

  if (!_CPLSilentLogging)
  {
    int v13 = sub_10011CDF4();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      __int16 v15 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Unable to refresh %@: %@", buf, 0x16u);
    }
  }

  dispatch_group_t v17 = (void *)a1[5];
  uint64_t v18 = *(void **)(a1[4] + 104LL);
  v38 = _NSConcreteStackBlock;
  v39 = 3221225472LL;
  v40 = sub_100126BB0;
  v41 = &unk_100245D80;
  v19 = (id *)&v43;
  uint64_t v20 = v17;
  v21 = a1[6];
  char v43 = (uint64_t)v20;
  v44 = v21;
  v42 = v3;
  id v22 = &v38;
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = sub_10013AA68;
  v46 = &unk_10023DBC8;
  v47 = v22;
  v23 = v18;
  v24 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
  dispatch_async(v23, v24);

LABEL_11:
}

LABEL_14:
    uint64_t v20 = 0LL;
    goto LABEL_15;
  }

  dispatch_group_t v17 = [v15 currentFeatureVersion];
  if ((unint64_t)v17 > v14)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v18 = sub_100140908();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue([v11 scopeIdentifier]);
        *(_DWORD *)buf = 138413314;
        v45 = v38;
        v46 = 2048;
        v47 = v14;
        v48 = 2048;
        v49 = v17;
        v50 = 2048;
        v51 = v14;
        v52 = 2048;
        v53 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Last supported feature version for %@ was %lu and current server version is %lu - will definitely have to catc h up with changes from %lu to %lu",  buf,  0x34u);
      }
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 pqlConnection]);

  v21 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v8 columnDefinition]);
  v23 = [v20 cplExecute:@"ALTER TABLE %@ ADD COLUMN %@", v21, v22];

  if (a4 && (v23 & 1) == 0) {
    *a4 = (id)objc_claimAutoreleasedReturnValue([v20 lastCPLError]);
  }

  return v23;
}
    }

void sub_10000674C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10000537C();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "System is requesting a configuration refresh",  buf,  2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.configurationrefresh"];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10000688C;
  v11[3] = &unk_10023DC70;
  v11[4] = *(void *)(a1 + 32);
  [v3 setExpirationHandler:v11];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 80);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000069E0;
  v9[3] = &unk_10023DDE8;
  v9[4] = v6;
  id v10 = v3;
  id v8 = v3;
  [v7 refreshAllConfigurationDictionariesWithCompletionHandler:v9];
  [*(id *)(*(void *)(a1 + 32) + 80) enumerateOpenedWrappersWithBlock:&stru_10023DE08];
}

void sub_10000688C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 128);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100006948;
  v6[3] = &unk_10023DC70;
  v6[4] = v1;
  id v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v8 = v3;
  id v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

id sub_100006948(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)dispatch_block_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "System-requested configuration refresh has expired",  v5,  2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.configurationrefresh"];
  return [*(id *)(*(void *)(a1 + 32) + 80) cancelConfigurationDictionariesRefresh];
}

id sub_1000069E0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)dispatch_block_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "System-requested configuration refresh finished",  v5,  2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.configurationrefresh"];
  [*(id *)(a1 + 40) setTaskCompleted];
  return [*(id *)(a1 + 32) _updateConfigurationRefreshIntervalIfNecessary];
}

void sub_100006A7C(id a1, CPLEngineWrapper *a2, BOOL *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[CPLEngineWrapper engine](a2, "engine", a3));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 feedback]);
  [v3 sendFeedbackToServerIfNecessary];
}

void sub_100006B98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10000537C();
    dispatch_block_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "System is requesting a maintenance", buf, 2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.maintenance"];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSProgress progressWithTotalUnitCount:](&OBJC_CLASS___NSProgress, "progressWithTotalUnitCount:", 1LL));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100006D04;
  v13[3] = &unk_10023DDE8;
  v13[4] = *(void *)(a1 + 32);
  id v7 = v6;
  id v14 = v7;
  [v3 setExpirationHandler:v13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100006E3C;
  v10[3] = &unk_10023DE80;
  v10[4] = *(void *)(a1 + 32);
  id v11 = v3;
  id v12 = v7;
  id v8 = v7;
  id v9 = v3;
  [v8 performAsCurrentWithPendingUnitCount:1 usingBlock:v10];
}

id sub_100006D04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100006E28;
  v10[3] = &unk_10023DC70;
  v10[4] = v2;
  id v4 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v12 = v4;
  dispatch_block_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);

  if (!_CPLSilentLogging)
  {
    id v7 = sub_10000537C();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "System-requested maintenance has expired",  (uint8_t *)block,  2u);
    }
  }

  return [*(id *)(a1 + 40) cancel];
}

id sub_100006E28(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.maintenance"];
}

void sub_100006E3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 80LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100006EC8;
  v6[3] = &unk_10023DE58;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v3 executeMaintenanceWithCompletionHandler:v6];
}

id sub_100006EC8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "System-requested maintenance finished",  v5,  2u);
    }
  }

  [*(id *)(a1 + 32) setTaskCompleted];
  [*(id *)(*(void *)(a1 + 40) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.maintenance"];
  return objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
}

void sub_100007044(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10000537C();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "System is requesting a backup", buf, 2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
  dispatch_block_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSProgress progressWithTotalUnitCount:](&OBJC_CLASS___NSProgress, "progressWithTotalUnitCount:", 1LL));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000071AC;
  v13[3] = &unk_10023DDE8;
  v13[4] = *(void *)(a1 + 32);
  id v7 = v6;
  id v14 = v7;
  [v3 setExpirationHandler:v13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000072E4;
  v10[3] = &unk_10023DE80;
  v10[4] = *(void *)(a1 + 32);
  id v11 = v7;
  id v12 = v3;
  id v8 = v3;
  id v9 = v7;
  [v9 performAsCurrentWithPendingUnitCount:1 usingBlock:v10];
}

id sub_1000071AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000072D0;
  v10[3] = &unk_10023DC70;
  v10[4] = v2;
  id v4 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v12 = v4;
  uint64_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);

  if (!_CPLSilentLogging)
  {
    id v7 = sub_10000537C();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "System-requested backup has expired",  (uint8_t *)block,  2u);
    }
  }

  return [*(id *)(a1 + 40) cancel];
}

id sub_1000072D0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
}

void sub_1000072E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 80LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100007378;
  v6[3] = &unk_10023DE58;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  [v3 forceBackupWithActivity:0 forceClientPush:1 completionHandler:v6];
}

void sub_100007378(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (![*(id *)(a1 + 32) isCancelled])
  {
    if (v3)
    {
      if (!_CPLSilentLogging)
      {
        id v9 = sub_10000537C();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v20 = v3;
          id v11 = "System-requested backup finished with error: %@";
          id v12 = v10;
          os_log_type_t v13 = OS_LOG_TYPE_ERROR;
          uint32_t v14 = 12;
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, buf, v14);
          goto LABEL_22;
        }

        goto LABEL_22;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v17 = sub_10000537C();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        id v11 = "System-requested backup finished";
        id v12 = v10;
        os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
        uint32_t v14 = 2;
        goto LABEL_21;
      }

LABEL_22:
    }

    [*(id *)(a1 + 40) setTaskCompleted];
    [*(id *)(*(void *)(a1 + 48) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
    goto LABEL_24;
  }

  id v4 = *(void **)(a1 + 40);
  id v18 = 0LL;
  unsigned __int8 v5 = [v4 setTaskExpiredWithRetryAfter:&v18 error:0.0];
  id v6 = v18;
  if ((v5 & 1) != 0)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10000537C();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "System-requested Backup has been deferred",  buf,  2u);
      }
    }

    [*(id *)(*(void *)(a1 + 48) + 168) didDeferTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
  }

  else
  {
    [*(id *)(a1 + 40) setTaskCompleted];
    if (!_CPLSilentLogging)
    {
      id v15 = sub_10000537C();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v20 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to defer System-requested Backup: %@",  buf,  0xCu);
      }
    }

    [*(id *)(*(void *)(a1 + 48) + 168) didErrorTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
    [*(id *)(*(void *)(a1 + 48) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.backup"];
  }

LABEL_24:
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
}
    }
  }

LABEL_23:
  id v16 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  v8,  v12);
  if (((unint64_t)[v6 targetState] & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    -[CKRecord setKnownToServer:](v16, "setKnownToServer:", 1LL);
    -[CKRecord setEtag:](v16, "setEtag:", @"-gateon");
  }

  -[NSMutableArray addObject:](v3, "addObject:", @"significantWork");
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }

      if (self->_downloadGroup)
      {
        -[CPLCloudKitResourcesDownloadTask _downloadCurrentGroup](self, "_downloadCurrentGroup");
      }

      else
      {
        if (-[NSMutableArray count](self->_currentRemainingTasks, "count")) {
          sub_1001962D4((uint64_t)v33, (uint64_t)self);
        }
        -[CPLCloudKitResourcesDownloadTask _downloadNextGroup](self, "_downloadNextGroup");
      }
    }

    else
    {
      remainingTasksPerOperationType = self->_remainingTasksPerOperationType;
      id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  self->_currentOperationType));
      -[NSMutableDictionary removeObjectForKey:](remainingTasksPerOperationType, "removeObjectForKey:", v32);

      -[CPLCloudKitResourcesDownloadTask _downloadNextOperationType](self, "_downloadNextOperationType");
    }
  }

  else
  {
    -[CPLCloudKitResourcesDownloadTask _finishRemainingTasksWithError:](self, "_finishRemainingTasksWithError:", v5);
  }
}
}

    [v6 setObject:CPLSocialGroupClientVersion forKey:@"version"];
    goto LABEL_23;
  }

        if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
          && ![v11 areObjectsDifferentOnProperty:@"syndicationIdentifier" changeType:2])
        {
          if ((+[CPLAssetChange serverSupportsSharedLibrarySharingState]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsSharedLibrarySharingState") & 1) == 0) {
            goto LABEL_38;
          }
          goto LABEL_31;
        }

        v21 = 0;
LABEL_25:
        if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"syndicationIdentifier")))
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange syndicationIdentifier](v9, "syndicationIdentifier"));
          [v7 setObject:v22 forKey:@"syndicationId"];
        }

        if ((+[CPLAssetChange serverSupportsSharedLibrarySharingState]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsSharedLibrarySharingState") & 1) == 0)
        {
LABEL_36:
          if ((v21 & 1) != 0)
          {
            v24 = 1;
            goto LABEL_41;
          }

          v38 = sub_100089BD4(*(void *)(a1 + 8));
          v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          *a5 = (id)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v39]);

          goto LABEL_23;
        }

        uint64_t v26 = 0;
LABEL_19:
        uint64_t v30 = sub_100089BE0(*(void *)(a1 + 8));
        id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v31]);

        uint64_t v33 = sub_100089BEC(*(void *)(a1 + 8));
        id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v34]);

        v36 = (double)(uint64_t)[v32 integerValue];
        uint64_t v37 = [v35 integerValue];
        *a4 = v36;
        a4[1] = (double)(uint64_t)v37;

        if ((v26 & 1) != 0) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }
    }

    else
    {
      id v17 = 0LL;
    }

    id v18 = 1;
    goto LABEL_9;
  }

  v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  CFStringRef v24 = v8;
  v24[1] = a2;
  v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}
}

      objc_autoreleasePoolPop(v19);
      ++v16;
    }

    while (v13 != v16);
    v39 = (char *)[obj countByEnumeratingWithState:&v54 objects:v58 count:16];
    os_log_type_t v13 = v39;
    uint32_t v14 = v43;
  }

  while (v39);

  if (v43)
  {
    id v3 = v42;
    if (v43 == v47)
    {
      -[CPLPrequeliteStore recordUpgradeEvent:](v45, "recordUpgradeEvent:", @"Fixed %lu relations", v43);
      id v12 = 1;
    }

    else
    {
      id v12 = [v46 _deleteBadRelations];
      -[CPLPrequeliteStore recordUpgradeEvent:]( v45,  "recordUpgradeEvent:",  @"Fixed %lu relations and deleted %lu",  v43,  v43 - v47);
    }
  }

  else
  {
    id v12 = 1;
    id v3 = v42;
  }

LABEL_16:
  }
}

        char v43 = 0LL;
        id v22 = [v12 startWithError:&v43];
        v23 = v43;
        v24 = v23;
        if ((v22 & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            v40 = sub_1000109E4();
            v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v12;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v24;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Unable to start %@: %@", buf, 0x16u);
            }
          }

          if (a5) {
            *a5 = v24;
          }

          id v18 = 0LL;
          goto LABEL_40;
        }

LABEL_32:
        wrappers = self->_wrappers;
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v8 libraryIdentifier]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](wrappers, "setObject:forKeyedSubscript:", v12, v37);

        unopenedWrappers = self->_unopenedWrappers;
        v39 = (void *)objc_claimAutoreleasedReturnValue([v8 libraryIdentifier]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](unopenedWrappers, "setObject:forKeyedSubscript:", v12, v39);

        id v18 = v12;
LABEL_40:

        goto LABEL_41;
      }

      v48 = 0LL;
      uint32_t v14 = -[CPLEngineWrapperArray _canReallyOpenWrapper:error:](self, "_canReallyOpenWrapper:error:", v12, &v48);
      id v15 = v48;
      id v16 = v15;
      if ((v14 & 1) != 0)
      {

        [v12 setDelegate:self];
        id v17 = 0LL;
        goto LABEL_16;
      }

      if (!_CPLSilentLogging)
      {
        v25 = sub_1000109E4();
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue([v16 localizedDescription]);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Can't open %@: %@", buf, 0x16u);
        }
      }

      if (a5) {
        *a5 = v16;
      }
      uint64_t v28 = objc_loadWeakRetained((id *)&self->_delegate);
      [v28 wrapperArray:self wrapperShouldBeDropped:v12];
    }

    else
    {
      if (v6 && !_CPLSilentLogging)
      {
        v19 = sub_1000109E4();
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Can't instantiate wrapper for %@: %@",  buf,  0x16u);
        }
      }

      if (a5)
      {
        id v18 = 0LL;
        *a5 = v13;
LABEL_41:

        goto LABEL_42;
      }
    }

    id v18 = 0LL;
    goto LABEL_41;
  }

  id v18 = 0LL;
  if (a5) {
    *a5 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectMachineStateErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "incorrectMachineStateErrorWithReason:",  @"missing delegate"));
  }
LABEL_42:

  return v18;
}

    goto LABEL_17;
  }

  id v16 = *(void *)(a1 + 64);
  id v17 = *(void *)(a1 + 72);
  id v18 = *(void *)(a1 + 40);
  v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "cpl_zoneName"));
  v21 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"%@ %@ not found in %@",  v17,  v18,  v20));
  (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0LL, v21);

LABEL_17:
}

        goto LABEL_39;
      }

      if (objc_msgSend(v20, "cpl_inExpunged"))
      {
        if (_CPLSilentLogging) {
          goto LABEL_39;
        }
        v21 = sub_100078FF0();
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue([v18 privateCloudScopedIdentifier]);
          v24 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedCloudScopedIdentifier]);
          v25 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
          *(_DWORD *)buf = 138412802;
          v84 = v23;
          v85 = 2112;
          v86 = v24;
          v87 = 2112;
          v88 = v25;
          uint64_t v26 = v22;
          v27 = "Sparse record %@ is expunged. No need to fix-up its sharing record scoped identifier (%@ -> %@)";
          goto LABEL_15;
        }

        goto LABEL_16;
      }

      uint64_t v29 = objc_claimAutoreleasedReturnValue( objc_msgSend( v20,  "cpl_sharingRecordScopedIdentifierWithScopeProvider:currentUserRecordID:isSparseRecord:",  v14,  v71,  &v77));
      uint64_t v30 = (void *)v29;
      if (v77)
      {
        if (v29)
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedCloudScopedIdentifier]);
          id v32 = [v30 isEqual:v31];

          if ((v32 & 1) != 0)
          {
            if (!_CPLSilentLogging)
            {
              uint64_t v33 = sub_100078FF0();
              id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v18 privateCloudScopedIdentifier]);
                v36 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedCloudScopedIdentifier]);
                uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
                *(_DWORD *)buf = 138412802;
                v84 = v35;
                v85 = 2112;
                v86 = v36;
                v87 = 2112;
                v88 = v37;
                _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Will fix sparse record %@'s sharing record scoped identifier (%@ -> %@)",  buf,  0x20u);
              }
            }

            v38 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
            v39 = (void *)objc_claimAutoreleasedReturnValue([v38 scopeIdentifier]);
            v40 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask cloudKitScopeForScopeIdentifier:]( v70,  "cloudKitScopeForScopeIdentifier:",  v39));

            if (!v40) {
              sub_100195C24(v18, (uint64_t)v65, (uint64_t)v70);
            }
            v41 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
            v42 = (void *)objc_claimAutoreleasedReturnValue([v41 identifier]);
            char v43 = (void *)objc_claimAutoreleasedReturnValue([v40 recordIDWithRecordName:v42]);

            objc_msgSend( v20,  "cpl_updatePrivateRecordSharedToRecordWithID:currentUserRecordID:setSparseRecordFlag:force:",  v43,  v71,  0,  0);
            -[NSMutableArray addObject:](v69, "addObject:", v20);

            id v9 = v68;
            goto LABEL_36;
          }

          uint32_t v14 = v70;
          if (!_CPLSilentLogging)
          {
            v55 = sub_100078FF0();
            v40 = (void *)objc_claimAutoreleasedReturnValue(v55);
            if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_DEFAULT))
            {
              v49 = (void *)objc_claimAutoreleasedReturnValue([v18 privateCloudScopedIdentifier]);
              v50 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedCloudScopedIdentifier]);
              v51 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
              *(_DWORD *)buf = 138413058;
              v84 = v49;
              v85 = 2112;
              v86 = v30;
              v87 = 2112;
              v88 = v50;
              v89 = 2112;
              v90 = v51;
              v52 = (os_log_s *)v40;
              v53 = "Record %@ is sparse but has already been fixed to point to %@. No need to fix-up its sharing record "
                    "scoped identifier (%@ -> %@)";
              v54 = 42;
              goto LABEL_35;
            }

            goto LABEL_37;
          }
        }

        else if (!_CPLSilentLogging)
        {
          v48 = sub_100078FF0();
          v40 = (void *)objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_DEFAULT))
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue([v18 privateCloudScopedIdentifier]);
            v50 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedCloudScopedIdentifier]);
            v51 = (void *)objc_claimAutoreleasedReturnValue([v18 realCloudScopedIdentifier]);
            *(_DWORD *)buf = 138412802;
            v84 = v49;
            v85 = 2112;
            v86 = v50;
            v87 = 2112;
            v88 = v51;
            v52 = (os_log_s *)v40;
            v53 = "Record %@ is sparse but pointing to an unknown sharing zone. No need to fix-up its sharing record scop"
                  "ed identifier (%@ -> %@)";
            v54 = 32;
LABEL_35:
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v53, buf, v54);

LABEL_36:
            uint32_t v14 = v70;
          }

  return v17;
}

        if (-[CPLCloudKitResourceInfo hasImageDimensions](v17, "hasImageDimensions"))
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitResourceInfo imageDimensions](v17, "imageDimensions"));
          uint64_t v28 = (double)(uint64_t)[v27 width];
          uint64_t v29 = [v27 height];
          *a4 = v28;
          a4[1] = (double)(uint64_t)v29;

LABEL_20:
          if (-[CPLCloudKitResourceInfo hasFileUTI](v17, "hasFileUTI"))
          {
            *a5 = (id)objc_claimAutoreleasedReturnValue(-[CPLCloudKitResourceInfo fileUTI](v17, "fileUTI"));
LABEL_23:

            id v11 = v40;
            goto LABEL_24;
          }
      }

          goto LABEL_18;
        }

        -[NSMutableArray addObject:](v6, "addObject:", v13);
LABEL_18:
      }

      id v9 = [v7 countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (!v9)
      {
LABEL_20:

        (*(void (**)(void))(*(void *)(v20 + 32) + 16LL))();
        unsigned __int8 v5 = v21;
        goto LABEL_21;
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
LABEL_21:
}
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a4 = 1;
  }
}

void sub_100007998(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10000537C();
    unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "System is requesting an Initial Download",  buf,  2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSProgress progressWithTotalUnitCount:](&OBJC_CLASS___NSProgress, "progressWithTotalUnitCount:", 1LL));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100007B04;
  v13[3] = &unk_10023DDE8;
  v13[4] = *(void *)(a1 + 32);
  id v7 = v6;
  id v14 = v7;
  [v3 setExpirationHandler:v13];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100007C3C;
  v10[3] = &unk_10023DE80;
  v10[4] = *(void *)(a1 + 32);
  id v11 = v3;
  id v12 = v7;
  id v8 = v7;
  id v9 = v3;
  [v8 performAsCurrentWithPendingUnitCount:1 usingBlock:v10];
}

id sub_100007B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 128);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100007C28;
  v10[3] = &unk_10023DC70;
  v10[4] = v2;
  id v4 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v12 = v4;
  unsigned __int8 v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);

  if (!_CPLSilentLogging)
  {
    id v7 = sub_10000537C();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "System-requested Initial Download has expired",  (uint8_t *)block,  2u);
    }
  }

  return [*(id *)(a1 + 40) cancel];
}

id sub_100007C28(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
}

void sub_100007C3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 88LL);
  uint64_t v4 = CPLLibraryIdentifierSystemLibrary;
  v12[2] = sub_100007D18;
  v12[3] = &unk_10023DEA8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v13 = v2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100007EC8;
  v8[3] = &unk_10023DED0;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [v3 requestInitialDownloadOfMainScopeForLibraryWithIdentifier:v4 progressHandler:v12 completionHandler:v8];
}

void sub_100007D18(uint64_t a1, uint64_t a2)
{
  id v4 = [[BGSystemTaskResult alloc] initWithIdentifier:@"com.apple.cloudphotod.initialdownload.assets" cumulativeProductionCount:a2];
  id v5 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v4, 0LL);
  uint64_t v6 = *(void **)(a1 + 32);
  id v18 = 0LL;
  unsigned __int8 v7 = [v6 producedCumulativeResults:v5 error:&v18];
  id v8 = v18;
  if ((v7 & 1) != 0)
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_10000537C();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v20 = v11;
        __int16 v21 = 2048;
        uint64_t v22 = a2;
        id v12 = "Notified %@ Initial Download has produced %lu assets";
        id v13 = v10;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
        uint32_t v15 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, buf, v15);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v16 = sub_10000537C();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      uint64_t v20 = v17;
      __int16 v21 = 2048;
      uint64_t v22 = a2;
      __int16 v23 = 2112;
      id v24 = v8;
      id v12 = "Failed to notify %@ Initial Download has produced %lu assets: %@";
      id v13 = v10;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 32;
      goto LABEL_8;
    }

void sub_100007EC8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  double v6 = 0.0;
  if ([*(id *)(a1 + 32) isCancelled])
  {
LABEL_2:
    unsigned __int8 v7 = *(void **)(a1 + 48);
    id v39 = 0LL;
    unsigned __int8 v8 = [v7 setTaskExpiredWithRetryAfter:&v39 error:v6];
    id v9 = v39;
    if ((v8 & 1) != 0)
    {
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10000537C();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "System-requested Initial Download has been deferred",  buf,  2u);
        }
      }

      [*(id *)(*(void *)(a1 + 40) + 168) didDeferTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
    }

    else
    {
      [*(id *)(a1 + 48) setTaskCompleted];
      if (!_CPLSilentLogging)
      {
        id v14 = sub_10000537C();
        uint32_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v41 = (uint64_t)v9;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Failed to defer Initial Download: %@",  buf,  0xCu);
        }
      }

      [*(id *)(*(void *)(a1 + 40) + 168) didErrorTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
      [*(id *)(*(void *)(a1 + 40) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
    }

    goto LABEL_48;
  }

  if (!v5)
  {
    if (!_CPLSilentLogging)
    {
      id v16 = sub_10000537C();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "System-requested Initial Download finished successfully",  buf,  2u);
      }
    }

    id v18 = *(void **)(a1 + 40);
    if (a2) {
      uint64_t v19 = 50LL;
    }
    else {
      uint64_t v19 = 30LL;
    }
    goto LABEL_41;
  }

  if ([v5 isCPLErrorWithCode:28])
  {
    if (!_CPLSilentLogging)
    {
      id v12 = sub_10000537C();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Apple Account is not setup - won't request a retry for Initial Download",  buf,  2u);
      }

LABEL_29:
      goto LABEL_30;
    }

    goto LABEL_30;
  }

  if ([v5 isCPLErrorWithCode:83])
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:CPLErrorScopesHaveNotBeenActivatedKey]);
    unsigned int v22 = [v21 BOOLValue];

    if (v22)
    {
      if (!_CPLSilentLogging)
      {
        id v23 = sub_10000537C();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = CPLPrimaryScopeIdentifierForCurrentUniverse();
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          *(_DWORD *)buf = 138412546;
          uint64_t v41 = (uint64_t)v25;
          __int16 v42 = 2112;
          id v43 = (id)CPLLibraryIdentifierSystemLibrary;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%@ has not been activated in %@ - won't request a retry for Initial Download",  buf,  0x16u);
        }

        goto LABEL_29;
      }

  -[NSMutableArray addObject:](v3, "addObject:", @"smartPowerNap");
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }

            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"importDate" changeType:2])
            {
              goto LABEL_36;
            }

            uint64_t v20 = 0;
LABEL_32:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"importDate")))
            {
              __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange importDate](v7, "importDate"));
              [v44 setObject:v21 forKey:@"importDate"];

              if ((v20 & 1) != 0)
              {
LABEL_34:
                unsigned int v22 = 1;
                goto LABEL_39;
              }
            }

            else if ((v20 & 1) != 0)
            {
              goto LABEL_34;
            }

    id v23 = 1;
    goto LABEL_28;
  }

  if (_CPLSilentLogging) {
    goto LABEL_29;
  }
  uint64_t v24 = sub_10016AF58();
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v36 = v12;
    v25 = "Dropping background download of %@ as it has been removed from the queue";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v16, OS_LOG_TYPE_DEBUG, v25, buf, 0xCu);
  }

LABEL_30:
      id v18 = *(void **)(a1 + 40);
      uint64_t v19 = 1LL;
LABEL_41:
      [v18 _reportICPLFeatureCheckpoint:v19];
      goto LABEL_42;
    }
  }

  if (!_CPLSilentLogging)
  {
    id v26 = sub_10000537C();
    v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v41 = (uint64_t)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "System-requested Initial Download finished with error: %@",  buf,  0xCu);
    }
  }

  [*(id *)(*(void *)(a1 + 40) + 168) didErrorTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];
  if (++*(void *)(*(void *)(a1 + 40) + 176LL) <= 4uLL)
  {
    double v6 = 300.0;
    if (!_CPLSilentLogging)
    {
      id v28 = sub_10000537C();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = 5LL - *(void *)(*(void *)(a1 + 40) + 176LL);
        *(_DWORD *)buf = 134217984;
        uint64_t v41 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Will retry Initial Download %lu more time(s)",  buf,  0xCu);
      }
    }

    goto LABEL_2;
  }

  return v17;
}

  -[NSMutableArray addObject:](v3, "addObject:", @"thunderingHerd");
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }

    id v13 = 0LL;
    id v9 = v17;
    uint64_t v17 = 0LL;
    goto LABEL_31;
  }

  id v13 = (void *)v12;
LABEL_32:

  return v13;
}

        if (self->_participantIDsToRemove)
        {
          uint64_t v30 = v7;
LABEL_34:
          v71 = 0LL;
          v70 = (NSArray *)&__NSArray0__struct;
          goto LABEL_60;
        }

        uint64_t v37 = self->_completionHandler;
        if (v4)
        {
          id v14 = (void (*)(void))*((void *)v37 + 2);
          goto LABEL_15;
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_42:
  id v9 = [[BGSystemTaskResult alloc] initWithIdentifier:@"com.apple.cloudphotod.initialdownload.finished" cumulativeProductionCount:1];
  id v31 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v9, 0LL);
  id v32 = *(void **)(a1 + 48);
  id v38 = 0LL;
  unsigned __int8 v33 = [v32 producedCumulativeResults:v31 error:&v38];
  id v34 = v38;
  if ((v33 & 1) == 0 && !_CPLSilentLogging)
  {
    id v35 = sub_10000537C();
    v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v41 = v37;
      __int16 v42 = 2112;
      id v43 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "Failed to notify %@ Initial Download result: %@",  buf,  0x16u);
    }
  }

  [*(id *)(a1 + 48) setTaskCompleted];
  [*(id *)(*(void *)(a1 + 40) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.initialdownload.fastpass"];

LABEL_48:
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
}

  return v13;
}

  v74 = v15;
  v76 = v18;
  v49 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:@"recordModificationDate"]);
  -[CPLRecordChange setRecordModificationDate:](self, "setRecordModificationDate:", v49);

  v50 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:@"isDeleted"]);
  -[CPLRecordChange setInTrash:](self, "setInTrash:", [v50 BOOLValue]);

  v51 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:@"isExpunged"]);
  -[CPLRecordChange setInExpunged:](self, "setInExpunged:", [v51 BOOLValue]);

  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472LL;
  v77[2] = sub_10009DD4C;
  v77[3] = &unk_100242368;
  v52 = v11;
  v78 = v52;
  v53 = (void *)objc_claimAutoreleasedReturnValue( +[CPLArchiver archivedDataWithRootObject:usingBlock:]( &OBJC_CLASS___CPLArchiver,  "archivedDataWithRootObject:usingBlock:",  v52,  v77));
  -[CPLRecordChange setRecordChangeData:](self, "setRecordChangeData:", v53);
  v54 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKey:@"remappedRef"]);
  if (v54)
  {
    v71 = v13;
    v55 = v12;
    v56 = (void *)objc_claimAutoreleasedReturnValue(-[CPLRecordChange sharingContributorUserIdentifiers](self, "sharingContributorUserIdentifiers"));
    if ([v56 count]
      && (v57 = (void *)objc_claimAutoreleasedReturnValue([v14 recordName]),
          v58 = [v56 containsObject:v57],
          v57,
          (v58 & 1) == 0))
    {
      if (!_CPLSilentLogging)
      {
        v62 = __CPLGenericOSLogDomain(v59);
        v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          v64 = (CPLRecordChange *)objc_claimAutoreleasedReturnValue(-[CPLRecordChange scopedIdentifier](self, "scopedIdentifier"));
          *(_DWORD *)buf = 138412290;
          v86 = v64;
          _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "Ignoring remapped shared record %@ not contributed by the current user",  buf,  0xCu);
        }
      }

      -[CPLRecordChange setChangeType:](self, "setChangeType:", 1024LL);
    }

    else
    {
      v60 = (void *)objc_claimAutoreleasedReturnValue([v54 recordID]);
      v61 = (void *)objc_claimAutoreleasedReturnValue([v60 recordName]);
      -[CPLRecordChange setRealIdentifier:](self, "setRealIdentifier:", v61);
    }

    id v12 = v55;

    id v13 = v71;
  }

  uint32_t v15 = v74;
  id v18 = v76;
LABEL_53:
}

        v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (uint64_t)v58));
        v66 = sub_100089BE0(*(void *)(a1 + 8));
        v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
        [v18 setObject:v65 forKey:v67];

        v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (uint64_t)v59));
        v69 = sub_100089BEC(*(void *)(a1 + 8));
        v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
        [v18 setObject:v68 forKey:v70];

        if (v58 != a9 || v59 != a10)
        {
          v86[0] = _NSConcreteStackBlock;
          v86[1] = 3221225472LL;
          v86[2] = sub_1000A7D94;
          v86[3] = &unk_100242458;
          *(double *)&v86[5] = a9;
          *(double *)&v86[6] = a10;
          v86[4] = &v92;
          ((void (*)(void *, void *))v26[2])(v26, v86);
        }
      }

      else
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (uint64_t)a9));
        v53 = sub_100089BE0(*(void *)(a1 + 8));
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        [v18 setObject:v52 forKey:v54];

        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (uint64_t)a10));
        v56 = sub_100089BEC(*(void *)(a1 + 8));
        v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
        [v18 setObject:v55 forKey:v57];
      }

      if (a8)
      {
        if (v21 && (qword_1002911C8 & 4) != 0)
        {
          v71 = CPLFuzziedFileUTI(v21);
          v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
          v73 = sub_100089BD4(*(void *)(a1 + 8));
          v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
          [v18 setObject:v72 forKey:v74];

          v75 = v72;
          v76 = v21;
          if (v75 && ([v75 isEqual:v76] & 1) != 0)
          {

            v77 = v75;
          }

          else
          {

            v83[0] = _NSConcreteStackBlock;
            v83[1] = 3221225472LL;
            v83[2] = sub_1000A7DFC;
            v83[3] = &unk_10023DD58;
            v85 = &v92;
            v84 = v76;
            ((void (*)(void *, void *))v26[2])(v26, v83);
            v77 = v84;
          }
        }

        else
        {
          v78 = sub_100089BD4(*(void *)(a1 + 8));
          v75 = (id)objc_claimAutoreleasedReturnValue(v78);
          [v18 setObject:v21 forKey:v75];
        }
      }

      v79 = (void *)objc_claimAutoreleasedReturnValue([(id)v93[5] data]);
      v80 = sub_100089C10(*(void *)(a1 + 8));
      v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
      [v18 setEncryptedObject:v79 forKey:v81 validateClass:objc_opt_class(NSData)];

      _Block_object_dispose(&v92, 8);
    }

    else
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a6));
      id v31 = sub_100031F28(*(void *)(a1 + 8));
      id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      [v18 setObject:v30 forKey:v32];

      unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (uint64_t)a9));
      id v34 = sub_100089BE0(*(void *)(a1 + 8));
      id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      [v18 setObject:v33 forKey:v35];

      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (uint64_t)a10));
      uint64_t v37 = sub_100089BEC(*(void *)(a1 + 8));
      id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      [v18 setObject:v36 forKey:v38];

      if (a8)
      {
        id v39 = sub_100089BD4(*(void *)(a1 + 8));
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        [v18 setObject:v21 forKey:v40];
      }

      uint64_t v41 = sub_100089C10(*(void *)(a1 + 8));
      __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      [v18 setEncryptedObject:0 forKey:v42 validateClass:objc_opt_class(NSData)];

      if (a5)
      {
        id v43 = sub_100089C04(*(void *)(a1 + 8));
        v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
        [v18 setEncryptedObject:0 forKey:v44 validateClass:objc_opt_class(NSString)];
      }
    }
  }
}

                      uint64_t v41 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v101, "objectForKey:", v22));
                      if (!v41)
                      {
                        v44 = (void *)objc_claimAutoreleasedReturnValue([v98 transactionClientCacheView]);
                        v45 = (void *)objc_claimAutoreleasedReturnValue([v44 recordViewWithScopedIdentifier:v22]);
                        __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v45 changeForType:8]);

                        if (!v42)
                        {
                          __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                          -[NSMutableDictionary setObject:forKey:](v101, "setObject:forKey:", v42, v22);
                          goto LABEL_83;
                        }

                        if ([v42 supportsResources])
                        {
                          -[NSMutableDictionary setObject:forKey:](v101, "setObject:forKey:", v42, v22);
                          goto LABEL_48;
                        }

                        if (!_CPLSilentLogging)
                        {
                          v64 = sub_10011CDF4();
                          v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
                          if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                          {
                            v66 = (__CFString *)objc_opt_class(v42);
                            *(_DWORD *)buf = 138412546;
                            v129 = v66;
                            v130 = 2112;
                            v131 = v21;
                            v67 = v66;
                            _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "Client is asking to delete a resource for a record that does not support resources (%@): %@",  buf,  0x16u);
                          }
                        }

                        v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                        -[NSMutableDictionary setObject:forKey:](v101, "setObject:forKey:", v68, v22);

LABEL_83:
                        v102 = 0LL;
                        goto LABEL_84;
                      }

                      __int16 v42 = (void *)v41;
                      id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

                      if (v42 == v43) {
                        goto LABEL_83;
                      }
LABEL_48:
                      v102 = v42;
                      v106 = (os_log_s *)objc_claimAutoreleasedReturnValue( objc_msgSend( v42,  "resourceForType:",  -[__CFString resourceType](v21, "resourceType")));
                      v46 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s identity](v106, "identity"));
                      v47 = objc_claimAutoreleasedReturnValue([v46 fingerPrint]);

                      v48 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identity](v21, "identity"));
                      v49 = objc_claimAutoreleasedReturnValue([v48 fingerPrint]);

                      if (!v47 || !v49)
                      {

                        if (!(v47 | v49)) {
                          goto LABEL_61;
                        }
LABEL_64:
                        if (!_CPLSilentLogging)
                        {
                          v58 = sub_10011CDF4();
                          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
                          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 138412546;
                            v129 = v21;
                            v130 = 2112;
                            v131 = (__CFString *)v106;
                            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Client is asking to delete %@ but it does not match the client cache: %@",  buf,  0x16u);
                          }
                        }

                        goto LABEL_68;
                      }

                      v50 = [(id)v47 isEqual:v49];

                      if ((v50 & 1) == 0) {
                        goto LABEL_64;
                      }
LABEL_61:
                      v53 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s identity](v106, "identity"));
                      v54 = objc_claimAutoreleasedReturnValue([v53 fileUTI]);

                      v55 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identity](v21, "identity"));
                      v56 = objc_claimAutoreleasedReturnValue([v55 fileUTI]);

                      if (v54 && v56)
                      {
                        v57 = [(id)v54 isEqual:v56];

                        if ((v57 & 1) == 0) {
                          goto LABEL_64;
                        }
                      }

                      else
                      {

                        if (v54 | v56) {
                          goto LABEL_64;
                        }
                      }

                      __int16 v42 = v106;
LABEL_84:

                      if (-[__CFString serverRecordIsCorrupted](v36, "serverRecordIsCorrupted"))
                      {
                        if (_CPLSilentLogging)
                        {
                          v60 = 0;
                          v25 = @"record's resources is corrupted";
                          id v26 = 31LL;
                          v63 = v114;
                        }

                        else
                        {
                          v69 = sub_10011CDF4();
                          v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
                          v106 = v70;
                          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 138412546;
                            v129 = v21;
                            v130 = 2112;
                            v131 = v36;
                            _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Client is asking to delete %@ but we determined %@ is incoherent on server",  buf,  0x16u);
                          }

                          v60 = 0;
                          v25 = @"record's resources is corrupted";
                          id v26 = 31LL;
LABEL_89:
                          v63 = v114;
LABEL_105:
                        }

LABEL_107:
                        goto LABEL_108;
                      }

                      v106 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[__CFString resourceForType:]( v36,  "resourceForType:",  -[__CFString resourceType](v21, "resourceType")));
                      v71 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s identity](v106, "identity"));
                      v72 = objc_claimAutoreleasedReturnValue([v71 fingerPrint]);

                      v73 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identity](v21, "identity"));
                      v74 = objc_claimAutoreleasedReturnValue([v73 fingerPrint]);

                      if (v72 && v74)
                      {
                        v75 = [(id)v72 isEqual:v74];

                        if ((v75 & 1) == 0)
                        {
LABEL_98:
                          if (!_CPLSilentLogging)
                          {
                            v81 = sub_10011CDF4();
                            v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
                            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 138412546;
                              v129 = v21;
                              v130 = 2112;
                              v131 = (__CFString *)v106;
                              _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "Client is asking to delete %@ but it does not match the cloud cache: %@",  buf,  0x16u);
                            }

                            v60 = 0;
                            v83 = v82;
                            v25 = @"resource is stale";
                            goto LABEL_102;
                          }

      if ((v29 & 1) == 0) {
        goto LABEL_49;
      }
    }

    v27 = [v24 countByEnumeratingWithState:&v56 objects:v60 count:16];
    if (v27) {
      continue;
    }
    break;
  }

      sub_10019C66C(v11, v54, self);
      goto LABEL_43;
    }
  }

  else if (v11)
  {
    goto LABEL_27;
  }

void sub_100008500(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10000537C();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "System is requesting periodic upload of compute states",  buf,  2u);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 168) didAcquireTaskWithIdentifier:@"com.apple.cloudphotod.periodic.upload.computestates"];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10000862C;
  v12[3] = &unk_10023DC70;
  void v12[4] = *(void *)(a1 + 32);
  [v3 setExpirationHandler:v12];
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned __int8 v7 = *(void **)(v6 + 80);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100008750;
  v9[3] = &unk_10023DEF8;
  id v10 = v3;
  uint64_t v11 = v6;
  id v8 = v3;
  [v7 executePeriodicUploadOfComputeStatesWithCompletionHandler:v9];
}

void sub_10000862C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 128);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10000873C;
  v8[3] = &unk_10023DC70;
  void v8[4] = v1;
  id v3 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v10 = v3;
  id v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);

  if (!_CPLSilentLogging)
  {
    id v6 = sub_10000537C();
    unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "System-requested periodic upload of compute states has expired",  (uint8_t *)block,  2u);
    }
  }

id sub_10000873C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) didExpireTaskWithIdentifier:@"com.apple.cloudphotod.periodic.upload.computestates"];
}

id sub_100008750(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000537C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)dispatch_block_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "System-requested periodic upload of compute states finished",  v5,  2u);
    }
  }

  [*(id *)(a1 + 32) setTaskCompleted];
  return [*(id *)(*(void *)(a1 + 40) + 168) didFinishTaskWithIdentifier:@"com.apple.cloudphotod.periodic.upload.computestates"];
}

void sub_100008A90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
}

void sub_100008AC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _processConnectionDidInvalidate:v2];
}

LABEL_43:
      uint64_t v30 = (__CFString *)v50;
      if (!v50)
      {
        uint64_t v30 = (__CFString *)CFRetain(@"anonymous");
        v50 = v30;
      }

      id v31 = (Protocol *)objc_claimAutoreleasedReturnValue(-[CPLDaemon allowedProtocolForClientAccess:](self, "allowedProtocolForClientAccess:", v14));
      id v10 = v31 != 0LL;
      if (v31)
      {
        if (!_CPLSilentLogging)
        {
          id v32 = sub_10000537C();
          unsigned __int8 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            id v34 = NSStringFromProtocol(v31);
            id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            *(_DWORD *)buf = 138413058;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v30;
            *(_WORD *)&buf[22] = 2112;
            *(void *)&buf[24] = v35;
            LOWORD(v5_Block_object_dispose(va, 8) = 2112;
            *(void *)((char *)&v58 + 2) = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "Accepting a new connection from %@ (bundle identifier: %@). Allowed protocol is %@ (%@)",  buf,  0x2Au);
          }
        }

        v48 = [v14 isEqualToString:@"management"];
        v36 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@[%@]",  v30,  v14);
        uint64_t v37 = CPLCopyDefaultSerialQueueAttributes(v36);
        id v38 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v37);
        id v39 = dispatch_queue_create_with_target_V2( "com.apple.cloudphotod.daemon.connection",  v38,  (dispatch_queue_t)self->_queue);

        v49 = v39;
        [v7 _setQueue:v39];
        v40 = -[CPLDaemonLibraryManager initWithConnection:name:allowedProcol:isManagement:]( objc_alloc(&OBJC_CLASS___CPLDaemonLibraryManager),  "initWithConnection:name:allowedProcol:isManagement:",  v7,  v36,  v31,  v48);
        -[CPLDaemonLibraryManager setDelegate:](v40, "setDelegate:", self);
        -[NSMutableArray addObject:](self->_daemonManagers, "addObject:", v40);
        if (!_CPLSilentLogging)
        {
          uint64_t v41 = sub_10000537C();
          __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            daemonManagers = self->_daemonManagers;
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = daemonManagers;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Current daemon's clients: %@", buf, 0xCu);
          }
        }
      }

      else
      {
        if (_CPLSilentLogging)
        {
LABEL_59:

LABEL_60:
          goto LABEL_61;
        }

        v44 = sub_10000537C();
        v36 = (NSString *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v7;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&buf[24] = v30;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v36,  OS_LOG_TYPE_ERROR,  "Unknown access type '%@' from %@ (%@)",  buf,  0x20u);
        }
      }

      goto LABEL_59;
    }

    if (!_CPLSilentLogging)
    {
      id v16 = sub_10000537C();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = @"com.apple.private.cloudphotod.access";
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@: value for entitlement %@ is invalid",  buf,  0x16u);
      }
    }
  }

  if (!_CPLSilentLogging)
  {
    id v18 = sub_10000537C();
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = @"com.apple.private.cloudphotod.access";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_ERROR,  "%@ has no valid entitlement for %@",  buf,  0x16u);
    }

    id v10 = 0;
    goto LABEL_60;
  }

  id v10 = 0;
LABEL_61:
  if ((v10 & 1) == 0 && !_CPLSilentLogging)
  {
    v45 = sub_10000537C();
    v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Refusing connection from %@", buf, 0xCu);
    }
  }

  id v39 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitTransportTask controller](v22, "controller"));
  v70 = (void *)objc_claimAutoreleasedReturnValue([v39 zoneIdentificationForCloudKitScope:v73 engineScope:v77->_scope]);

  if (v72 && v77->_sharedScope)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitTransportTask controller](v77, "controller"));
    v69 = (void *)objc_claimAutoreleasedReturnValue([v40 zoneIdentificationForCloudKitScope:v72 engineScope:v77->_sharedScope]);
  }

  else
  {
    v69 = 0LL;
  }

  v71 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitUploadMetric);
  uint64_t v41 = objc_alloc(&OBJC_CLASS___CPLCKBatchUploadPlanner);
  __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitTransportTask controller](v77, "controller"));
  id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 propertyMapping]);
  targetMapping = v77->_targetMapping;
  v45 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitTransportTask fetchCache](v77, "fetchCache"));
  v46 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitUploadBatchTask cplEnabledDate](v77, "cplEnabledDate"));
  v76 = -[CPLCKBatchUploadPlanner initWithScopeProvider:destinationZoneIdentification:sharedZoneIdentification:propertyMapping:currentUserRecordID:targetMapping:fetchCache:cplEnabledDate:]( v41,  "initWithScopeProvider:destinationZoneIdentification:sharedZoneIdentification:propertyMapping:currentUserRecord ID:targetMapping:fetchCache:cplEnabledDate:",  v77,  v70,  v69,  v43,  v75,  targetMapping,  v45,  v46);

  -[CPLCKBatchUploadPlanner setMetric:](v76, "setMetric:", v71);
  -[CPLCKBatchUploadPlanner setProgressHandler:](v76, "setProgressHandler:", v77->_progressHandler);
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v47 = v77->_batch;
  v48 = 0LL;
  v49 = -[CPLChangeBatch countByEnumeratingWithState:objects:count:]( v47,  "countByEnumeratingWithState:objects:count:",  &v84,  v99,  16LL);
  if (v49)
  {
    v50 = *(void *)v85;
    do
    {
      for (k = 0LL; k != v49; k = (char *)k + 1)
      {
        if (*(void *)v85 != v50) {
          objc_enumerationMutation(v47);
        }
        v52 = *(void **)(*((void *)&v84 + 1) + 8LL * (void)k);
        v53 = objc_autoreleasePoolPush();
        v83 = 0LL;
        v54 = -[CPLCKBatchUploadPlanner planRecordChangeUpload:error:](v76, "planRecordChangeUpload:error:", v52, &v83);
        v55 = v83;
        v56 = v55;
        if ((v54 & 1) == 0)
        {
          v57 = (void *)objc_claimAutoreleasedReturnValue([v55 localizedDescription]);
          v58 = v57;
          v59 = v57
              ? v57
              : -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Failed to create CKRecord from %@",  objc_opt_class(v52));
          v60 = v59;

          if (v60)
          {
            if (!v48) {
              v48 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            }
            v61 = (void *)objc_claimAutoreleasedReturnValue([v52 scopedIdentifier]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v48, "setObject:forKeyedSubscript:", v60, v61);
          }
        }

        objc_autoreleasePoolPop(v53);
      }

      v49 = -[CPLChangeBatch countByEnumeratingWithState:objects:count:]( v47,  "countByEnumeratingWithState:objects:count:",  &v84,  v99,  16LL);
    }

    while (v49);
  }

  if (-[NSMutableDictionary count](v48, "count"))
  {
    v97 = CPLErrorRejectedRecordIdentifiersAndReasonsKey;
    v98 = v48;
    v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v98,  &v97,  1LL));
    v63 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:userInfo:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:userInfo:description:",  18LL,  0LL,  v62,  @"Some records were rejected before upload"));

    (*((void (**)(void))v77->_completionHandler + 2))();
  }

  else
  {
    -[CPLCKBatchUploadPlanner finalizePlan](v76, "finalizePlan");
    v66 = objc_retainBlock(v77->_completionHandler);
    -[CPLCloudKitTransportTask associateMetric:](v77, "associateMetric:", v71);
    -[CPLCloudKitMetric begin](v71, "begin");
    v78[0] = _NSConcreteStackBlock;
    v78[1] = 3221225472LL;
    v78[2] = sub_100096298;
    v78[3] = &unk_100240288;
    v82 = v66;
    v67 = v76;
    v79 = v67;
    v80 = v71;
    v81 = v77;
    v63 = v66;
    v68 = objc_retainBlock(v78);
    -[CPLCloudKitUploadBatchTask _fetchRequestedRecordsFromPlanner:completionHandler:]( v77,  "_fetchRequestedRecordsFromPlanner:completionHandler:",  v67,  v68);
  }

LABEL_67:
LABEL_4:
}
}

            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"mediaMetaDataType" changeType:2])
            {
              goto LABEL_50;
            }

            uint64_t v24 = 0;
LABEL_46:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"mediaMetaDataType")))
            {
              v25 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange mediaMetaDataType](v7, "mediaMetaDataType"));
              [v44 setObject:v25 forKey:@"mediaMetaDataType"];

              if ((v24 & 1) != 0)
              {
LABEL_48:
                id v26 = 1;
                goto LABEL_53;
              }
            }

            else if ((v24 & 1) != 0)
            {
              goto LABEL_48;
            }

        if (!_CPLSilentLogging)
        {
          v46 = sub_10017CB04();
          v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            if (v13) {
              v48 = (void *)v13[5];
            }
            else {
              v48 = 0LL;
            }
            v49 = v48;
            *(_DWORD *)buf = 138412290;
            v58 = v49;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Invalid bottom change for %@", buf, 0xCu);
          }
        }

        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
        v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Preq ueliteStore/CPLPrequelitePushRepository.m"));
        if (v13) {
          v52 = v13[5];
        }
        else {
          v52 = 0LL;
        }
        [v50 handleFailureInMethod:v54, self, v51, 702, @"Invalid bottom change for %@", v52 object file lineNumber description];

        abort();
      }

          goto LABEL_44;
        }

        LOBYTE(v15) = 0;
        goto LABEL_44;
      }
    }

    if (v7) {
      id v26 = &unk_100295E00;
    }
    else {
      id v26 = 0LL;
    }
    if (-[CPLBucketFileStorage _setIsOriginal:markedForDelete:onDestinationURL:clearFlags:error:]( self,  "_setIsOriginal:markedForDelete:onDestinationURL:clearFlags:error:",  v26,  &unk_100295E00,  v12,  0LL,  v47))
    {
      goto LABEL_20;
    }

    -[NSFileManager removeItemAtURL:error:](self->_fileManager, "removeItemAtURL:error:", v12, 0LL);
    goto LABEL_35;
  }

  if (v17)
  {
    v36 = sub_1001892A0();
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      id v38 = (void *)objc_claimAutoreleasedReturnValue([v12 lastPathComponent]);
      *(_DWORD *)buf = 138412546;
      v52 = v11;
      v53 = 2112;
      v54 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "STORING (unretained) %@ to %@: already in storage",  buf,  0x16u);
    }

    id v18 = 0LL;
    goto LABEL_43;
  }

  id v18 = 0LL;
LABEL_20:
  LOBYTE(v15) = 1;
LABEL_44:

  return v15;
}

          goto LABEL_44;
        }

        LOBYTE(v15) = 0;
        goto LABEL_44;
      }
    }

    if (v7) {
      v25 = &unk_100295E00;
    }
    else {
      v25 = 0LL;
    }
    if (-[CPLBucketFileStorage _setIsOriginal:markedForDelete:onDestinationURL:clearFlags:error:]( self,  "_setIsOriginal:markedForDelete:onDestinationURL:clearFlags:error:",  v25,  &unk_100295E00,  v12,  0LL,  v45))
    {
      goto LABEL_20;
    }

    -[NSFileManager removeItemAtURL:error:](self->_fileManager, "removeItemAtURL:error:", v12, 0LL);
    goto LABEL_35;
  }

  if (v17)
  {
    id v34 = sub_1001892A0();
    id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue([v12 lastPathComponent]);
      *(_DWORD *)buf = 138412546;
      v50 = v11;
      v51 = 2112;
      v52 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "STORING (unretained) %@ to %@: already in storage",  buf,  0x16u);
    }

    id v18 = 0LL;
    goto LABEL_43;
  }

  id v18 = 0LL;
LABEL_20:
  LOBYTE(v15) = 1;
LABEL_44:

  return v15;
}

LABEL_66:
  return v10;
}

LABEL_17:
      uint64_t v24 = 0LL;
      goto LABEL_18;
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( -[CPLEngineWrapperArray registeredWrapperWithLibraryIdentifier:error:]( self->_wrappers,  "registeredWrapperWithLibraryIdentifier:error:",  v20,  a10));
  }

    goto LABEL_18;
  }

  if (!_CPLSilentLogging)
  {
    uint32_t v15 = sub_10000537C();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 libraryIdentifier]);
      *(_DWORD *)buf = 138543362;
      uint64_t v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Noting that %{public}@ needs Fast Pass Initial Download - resubmitted request",  buf,  0xCu);
    }
  }

  -[CPLBGSTActivitiesReport didSubmitTaskWithIdentifier:]( self->_backgroundSystemTasksReport,  "didSubmitTaskWithIdentifier:",  @"com.apple.cloudphotod.initialdownload.fastpass");
LABEL_18:
}

  sourceRelatedRecordName = self->_sourceRelatedRecordName;
  self->_sourceRelatedRecordName = 0LL;

  id v32 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( -[CPLRecordChange recordClass](self->_currentSharedRecord, "recordClass"),  "ckPropertyForRelatedIdentifier"));
  if (v32)
  {
    unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v32]);
    if (v33)
    {
      id v34 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v33, v34) & 1) != 0)
      {
        id v35 = v33;
        v36 = self->_sourceRelatedRecordName;
        self->_sourceRelatedRecordName = v35;
LABEL_23:

        goto LABEL_24;
      }

      uint64_t v37 = objc_opt_class(&OBJC_CLASS___CKReference);
      if ((objc_opt_isKindOfClass(v33, v37) & 1) != 0)
      {
        v36 = (NSString *)objc_claimAutoreleasedReturnValue([v33 recordID]);
        id v38 = (NSString *)objc_claimAutoreleasedReturnValue(-[NSString recordName](v36, "recordName"));
        id v39 = self->_sourceRelatedRecordName;
        self->_sourceRelatedRecordName = v38;

        goto LABEL_23;
      }
    }

LABEL_18:
  id result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

  if (+[CPLLibraryShareScopeChange serverSupportsLibraryShareSettingsRecordSyncing]( &OBJC_CLASS___CPLLibraryShareScopeChange,  "serverSupportsLibraryShareSettingsRecordSyncing"))
  {
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v11 recordType]);
    uint64_t v24 = [v23 isEqualToString:@"CPLScopeUserSettings"];

    if (v24)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitZoneIdentification zoneID](self, "zoneID"));
      id v26 = CPLLibraryShareSettingsRecordID(v25, v10);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

      if (v27)
      {
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v11 recordID]);
        uint64_t v29 = [v28 isEqual:v27];

        if (v29)
        {
          if (!v13) {
            id v13 = [v9 copy];
          }
          [v13 updateLibraryShareSettingsWithCKRecord:v11];
        }
      }
    }
  }

  return v13;
}

      id v8 = (char *)v8 + 1;
    }

    while (v6 != v8);
    __int16 v21 = -[NSArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v33,  v43,  16LL);
    id v6 = v21;
  }

  while (v21);
LABEL_23:

  *(void *)&buf = 0LL;
  *((void *)&buf + 1) = &buf;
  id v39 = 0x3032000000LL;
  v40 = sub_1000AC0A0;
  uint64_t v41 = sub_1000AC0B0;
  __int16 v42 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[objc_class count]((&v28->super.super.isa)[v25], "count"));
  unsigned int v22 = -[CKFetchShareParticipantsOperation initWithUserIdentityLookupInfos:]( objc_alloc(&OBJC_CLASS___CKFetchShareParticipantsOperation),  "initWithUserIdentityLookupInfos:",  v4);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_1000AC0B8;
  v30[3] = &unk_100242668;
  id v31 = v27;
  p_buf = &buf;
  -[CKFetchShareParticipantsOperation setPerShareParticipantCompletionBlock:]( v22,  "setPerShareParticipantCompletionBlock:",  v30);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_1000AC1EC;
  v29[3] = &unk_100242690;
  v29[4] = v28;
  v29[5] = &buf;
  -[CKFetchShareParticipantsOperation setFetchShareParticipantsCompletionBlock:]( v22,  "setFetchShareParticipantsCompletionBlock:",  v29);
  -[CPLCloudKitTransportTask launchOperation:type:withContext:](v28, "launchOperation:type:withContext:", v22, 0LL, 0LL);

  _Block_object_dispose(&buf, 8);
LABEL_26:
}

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v9));
  v25 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  26LL,  @"Resource %@ on cloud record is different from %@",  v30,  v7));

LABEL_18:
  if (a5)
  {
    v25 = v25;
    id v31 = 0;
    *a5 = v25;
  }

  else
  {
    id v31 = 0;
  }

  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v55 = v54;
  v56 = HIBYTE(a3) & 0xF;
  v57 = a2;
  if ((a3 & 0x2000000000000000LL) == 0) {
    v56 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v56)
  {
    swift_bridgeObjectRetain(a3);
  }

  else
  {
    a3 = 0xED0000726F727265LL;
    v57 = 0x206E776F6E6B6E55LL;
  }

  v72 = &type metadata for String;
  *(void *)&v71 = v57;
  *((void *)&v71 + 1) = a3;
  sub_10011C5EC(&v71, v70);
  v58 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_10011A25C(v70, v53, v55, v58);
  v59 = v14;
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorDomain);
  v61 = v60;
  v62 = objc_allocWithZone(&OBJC_CLASS___NSError);
  v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v59);
  v65 = [v62 initWithDomain:v63 code:a1 userInfo:isa];

  return v65;
}

      id v23 = v52;
      if (v20 | v18 & 1) {
        id v23 = 1;
      }
      if ((v23 & 1) != 0)
      {
        uint64_t v19 = (void *)v20;
        if (v20) {
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
        v25 = [v24 BOOLForKey:@"CPLAllowForceSyncOnAllScopes"];

        uint64_t v19 = 0LL;
        if ((v25 & 1) != 0)
        {
          id v10 = v53;
        }

        else
        {
          id v10 = v53;
          if ((v18 & 0x20000) == 0)
          {
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  10LL,  @"Scope %@ is not read-only",  v15));
          }

          if (v19) {
            goto LABEL_26;
          }
        }
      }

      if ((v18 & 0x40000) == 0
        || (uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  1002LL,  @"Feature for scope %@ is disabled",  v15))) == 0LL)
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v29 = sub_10011CDF4();
          uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}@ is a valid scope for a forced sync",  buf,  0xCu);
          }
        }

        -[NSMutableArray addObject:](v51, "addObject:", v15);
        goto LABEL_31;
      }
}
    }
  }

  else
  {
    if (![v4 isCPLErrorWithCode:10000])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(-[CPLBaseSyncManager abstractObject](self, "abstractObject"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 engineLibrary]);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 transport]);

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:NSUnderlyingErrorKey]);

      if (!_CPLSilentLogging)
      {
        id v13 = sub_10015278C();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          if (self->_foreground) {
            uint32_t v15 = " (foreground)";
          }
          else {
            uint32_t v15 = "";
          }
          id v16 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s bestErrorForUnderlyingError:](v6, "bestErrorForUnderlyingError:", v12));
          uint64_t v17 = 136315650;
          id v18 = v15;
          uint64_t v19 = 2112;
          uint64_t v20 = v4;
          __int16 v21 = 2112;
          unsigned int v22 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Sync session did fail with error%s: %@, underlying error: %@",  (uint8_t *)&v17,  0x20u);
        }
      }

      goto LABEL_17;
    }

    if (!_CPLSilentLogging)
    {
      unsigned __int8 v7 = sub_10015278C();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = (char *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
        uint64_t v17 = 138412290;
        id v18 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sync session has to be retried: %@",  (uint8_t *)&v17,  0xCu);
      }

      goto LABEL_17;
    }
  }
}

LABEL_18:
      id v9 = v18;
    }
  }

  else if (!_CPLSilentLogging)
  {
    uint32_t v15 = sub_1001892A0();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 path]);
      __int16 v21 = 138412546;
      unsigned int v22 = v17;
      id v23 = 2112;
      uint64_t v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to get flags when storing resource at %@ (ignoring): %@",  (uint8_t *)&v21,  0x16u);
    }

    id v18 = v9;
    goto LABEL_17;
  }
}

LABEL_18:
  return v24;
}

  return v20;
}
}
}

  id v39 = v10;
  id v26 = v12;
  v27 = a6;
  id v28 = *(uint64_t *)((char *)&self->_deleteDateVar + 4);
  __int16 v42 = v20;
  uint64_t v29 = -[CPLPrequeliteScopeStorage _storeValue:forColumnVariable:scope:error:]( self,  "_storeValue:forColumnVariable:scope:error:",  v23,  v28,  v11,  &v42,  v39);
  uint64_t v30 = v42;

  id v31 = 1;
  if (v29)
  {
    void *v41 = 1;
    uint64_t v20 = v30;
    id v31 = 0;
  }

  else
  {
    uint64_t v20 = v30;
  }

  a6 = v27;
  id v12 = v26;
  id v10 = v40;
LABEL_24:

  objc_autoreleasePoolPop(v12);
  if ((v31 & 1) == 0) {
    goto LABEL_27;
  }
  if (!a6) {
    goto LABEL_35;
  }
LABEL_26:
  uint64_t v20 = v20;
  id v32 = 0;
  *a6 = v20;
LABEL_28:

  return v32;
}

                -[CPLPrequeliteStore recordUpgradeEvent:]( v45,  "recordUpgradeEvent:",  @"FIX: Client %@'s item: %@",  v18,  v33);
                id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 identifier]);
                id v35 = [v46 _updateRelatedIdentifier:v34 forRecordWithIdentifier:v18];

                if ((v35 & 1) == 0) {
                  goto LABEL_35;
                }
                ++v47;
LABEL_20:
                id v10 = v30;
LABEL_21:
                uint32_t v15 = v27;
                uint64_t v17 = v48;
                id v13 = v49;
                goto LABEL_22;
              }
            }
          }

          goto LABEL_21;
        }
      }

  id v23 = 1;
LABEL_27:

LABEL_28:
  return v23;
}

      LOBYTE(v5) = 1;
      return v5;
    }

    if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
      goto LABEL_18;
    }
    dispatch_block_t v5 = -[CPLPrequeliteStorage createVariable:defaultValue:error:]( self,  "createVariable:defaultValue:error:",  *(CPLPrequeliteVariable **)((char *)&self->_totalOriginalSizeVar + 4),  &off_10025A488,  0LL);
    if (v5)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pqlConnection]);

      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      uint32_t v15 = [v13 execute:@"ALTER TABLE %@ ADD COLUMN size INTEGER DEFAULT NULL", v14];

      if (v15) {
        LOBYTE(v5) = -[CPLPrequeliteStorage createIndexWithName:withDefinition:condition:unique:error:]( self,  "createIndexWithName:withDefinition:condition:unique:error:",  @"size",  @"size DESC",  @"size IS NOT NULL",  0LL,  0LL);
      }
      else {
        LOBYTE(v5) = 0;
      }
    }
  }

  return v5;
}

  return v25;
}

  return v23 & 1;
}

LABEL_10:
    }
  }

  return v10;
}

  -[CPLBGSTActivitiesReport didCancelTaskWithIdentifier:](self->_report, "didCancelTaskWithIdentifier:", v10);
  unsigned int v22 = self->_interestedRescheduler;
  self->_interestedRescheduler = 0LL;

  -[CPLBGSTReschedulerManager _deregisterTaskIdentifier:](self, "_deregisterTaskIdentifier:", v10);
  self->_currentTaskRequestHasBeenSubmitted = 0;

LABEL_14:
  objc_storeStrong((id *)&self->_lastTaskRequest, self->_currentTaskRequest);
  id v23 = self->_currentTaskRequest;
  self->_currentTaskRequest = 0LL;
}
    }

    id v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 48);
    *(void *)(v12 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  return v11;
}

    uint32_t v15 = v5;
    goto LABEL_11;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCKBatchUploadPlanner destinationZoneIdentification](planner, "destinationZoneIdentification"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeIdentifier]);
  uint64_t v11 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:](v7, "initWithScopeIdentifier:identifier:", v10, v5);

  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCKBatchUploadPlanner targetMapping](self->_planner, "targetMapping"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 targetForRecordWithScopedIdentifier:v11]);

  if (!v13) {
    goto LABEL_10;
  }
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 scopedIdentifier]);
  uint32_t v15 = (id)objc_claimAutoreleasedReturnValue([v14 identifier]);
LABEL_9:

LABEL_11:
  return v15;
}

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v11,  v10,  @"Failed to invoke ramping request function"));

    id v9 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 288LL) + 16LL);
    goto LABEL_11;
  }

  id v4 = *(id *)(a1 + 48);
  dispatch_block_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 responses]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);

  (*(void (**)(void, id, id, void))(*(void *)(*(void *)(a1 + 32) + 288) + 16))( *(void *)(*(void *)(a1 + 32) + 288),  [v6 allowed],  objc_msgSend(v6, "retryAfterMillis"),  0);
LABEL_12:
}
}

  return v5;
}

  if (*(void *)(v34 + 16))
  {
    v36 = *(void *)(a1 + 56);
    swift_bridgeObjectRetain(v34);
    id result = swift_bridgeObjectRelease(v36);
    *(void *)(a1 + 56) = v34;
  }

  if ((a12 & 1) != 0)
  {
    if ((a14 & 0x100) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    *(void *)(a1 + 64) = a11;
    if ((a14 & 0x100) != 0)
    {
LABEL_14:
      if ((a16 & 0x100) != 0) {
        return result;
      }
      goto LABEL_15;
    }
  }

  *(void *)(a1 + 72) = a13;
  *(_BYTE *)(a1 + 80) = a14 & 1;
  if ((a16 & 0x100) != 0) {
    return result;
  }
LABEL_15:
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = a15;
  *(_BYTE *)(a1 + 96) = a16 & 1;
  return result;
}

        id v43 = &qword_100294E08;
        v44 = (uint64_t)v22;
LABEL_18:
        sub_1000CEDAC(v44, v43);
        goto LABEL_19;
      }

      sub_1000CE7B4((uint64_t)v22, (uint64_t)v26, &qword_100293CA0);
      if (v42(v41, 1LL, v16) == 1)
      {
        sub_1000CEDAC((uint64_t)v29, &qword_100293CA0);
        sub_1000CEDAC((uint64_t)v31, &qword_100293CA0);
        sub_1000CECE0((uint64_t)v26, type metadata accessor for Goldilocks_OperationControl);
        goto LABEL_10;
      }

      v45 = (uint64_t)v67;
      sub_1000CEC9C(v41, (uint64_t)v67, type metadata accessor for Goldilocks_OperationControl);
      v46 = _s22CloudKitImplementation27Goldilocks_OperationControlV2eeoiySbAC_ACtFZ_0((uint64_t)v26, v45);
      sub_1000CECE0(v45, type metadata accessor for Goldilocks_OperationControl);
      sub_1000CEDAC((uint64_t)v29, &qword_100293CA0);
      sub_1000CEDAC((uint64_t)v31, &qword_100293CA0);
      sub_1000CECE0((uint64_t)v26, type metadata accessor for Goldilocks_OperationControl);
      sub_1000CEDAC((uint64_t)v22, &qword_100293CA0);
      if ((v46 & 1) != 0) {
        goto LABEL_12;
      }
    }

  uint64_t v37 = [v20 standardUserDefaults];
  id v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 stringForKey:v38];

  if (v39)
  {
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    __int16 v42 = v41;

    id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorLearnMoreLinkKey);
    v45 = v44;
    v72 = &type metadata for String;
    *(void *)&v71 = v40;
    *((void *)&v71 + 1) = v42;
    sub_10011C5EC(&v71, v70);
    v46 = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_10011A25C(v70, v43, v45, v46);
    v47 = v45;
LABEL_16:
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    goto LABEL_17;
  }

  v48 = HIBYTE(v67) & 0xF;
  if ((v67 & 0x2000000000000000LL) == 0) {
    v48 = a7 & 0xFFFFFFFFFFFFLL;
  }
  if (v48)
  {
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(CPLErrorLearnMoreLinkKey);
    v51 = v50;
    v72 = &type metadata for String;
    *(void *)&v71 = a7;
    *((void *)&v71 + 1) = v67;
    sub_10011C5EC(&v71, v70);
    swift_bridgeObjectRetain(v67);
    v52 = swift_isUniquelyReferenced_nonNull_native(v14);
    sub_10011A25C(v70, v49, v51, v52);
    v47 = v51;
    goto LABEL_16;
  }
    }
  }
}

        uint64_t v24 = 2;
LABEL_11:
        v9->_fileKind = v24;
        goto LABEL_13;
      }
    }

    else if (v9->_resourceType != 1)
    {
      id v23 = 0LL;
      goto LABEL_13;
    }

    id v23 = 0LL;
    goto LABEL_10;
  }

  return v10;
}

  return v6;
}

LABEL_11:
}
}

    [v10 invoke];
    goto LABEL_12;
  }

  uint32_t v15 = (const char *)[v9 selector];
  if ((unint64_t)protocol_getMethodDescription(self->_allowedProtocol, v15, 1, 1).name)
  {
    if (!_CPLSilentLogging)
    {
      id v16 = sub_1000169C8();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        id v18 = NSStringFromSelector(v15);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        uint64_t v24 = 138412546;
        v25 = self;
        id v26 = 2112;
        v27 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%@ is calling %@", (uint8_t *)&v24, 0x16u);
      }
    }

    goto LABEL_11;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v20 = sub_1000169C8();
    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      unsigned int v22 = NSStringFromSelector(v15);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      uint64_t v24 = 138412546;
      v25 = self;
      id v26 = 2112;
      v27 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ tried to call %@ but is not allowed to",  (uint8_t *)&v24,  0x16u);
    }
  }

  [v8 invalidate];
LABEL_12:
}

  return (char)v4;
}

    goto LABEL_12;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v20 = __CPLGenericOSLogDomain(v14);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v29 = self;
      uint64_t v30 = 2112;
      id v31 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_ERROR,  "Unable to fingerprint resource data for %@: %@",  buf,  0x16u);
    }

    goto LABEL_11;
  }

    __int16 v21 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  v11,  v13);
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v8 scopeIdentifierFromZoneID:v21]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v8 cloudKitScopeForScopeIdentifier:v22]);
    uint64_t v24 = v23 == 0LL;
    if (v23)
    {
      if (!v22)
      {
        uint64_t v24 = 1;
LABEL_23:

        if (!v24)
        {
LABEL_25:

          goto LABEL_26;
        }
  }
}
}

  return (char)v6;
}

  return (char)v6;
}
}

        if (-[CPLCloudKitResourceInfo hasFileSize](v17, "hasFileSize"))
        {
          *a3 = -[CPLCloudKitResourceInfo fileSize](v17, "fileSize");
          goto LABEL_16;
        }

        unsigned int v22 = 0;
LABEL_14:
        id v23 = sub_100031F28(*(void *)(a1 + 8));
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v24]);
        *a3 = [v25 unsignedIntegerValue];

        if ((v22 & 1) != 0)
        {
          id v26 = 1;
          goto LABEL_19;
        }

            id v28 = 0;
            return v28 & 1;
          }
        }

        sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC((uint64_t)v21, &qword_100295030);
        sub_1000CEDAC((uint64_t)v23, &qword_100295030);
        sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
        unsigned __int8 v33 = (uint64_t)v14;
        id v32 = &qword_100295030;
LABEL_10:
        sub_1000CEDAC(v33, v32);
        goto LABEL_11;
      }

      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    }

    id v32 = &qword_100294DF0;
    unsigned __int8 v33 = (uint64_t)v14;
    goto LABEL_10;
  }

  return v28 & 1;
}

  v36 = v59;
  if (v59[2] != v60[2]) {
    goto LABEL_17;
  }
  uint64_t v37 = v59[3];
  id v38 = v59[4];
  id v39 = v60[3];
  v40 = v60[4];
  if (v37 == v39 && v38 == v40
    || (id v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL) & 1) != 0))
  {
    uint64_t v41 = v60;
    if ((sub_1000FEEBC((void *)v36[5], (void *)v60[5]) & 1) != 0
      && *((unsigned __int8 *)v36 + 48) == *((unsigned __int8 *)v41 + 48))
    {
      v44 = v54;
      id v43 = v55;
      v45 = (char *)v36 + *(int *)(v54 + 36);
      v47 = v57;
      v46 = v58;
      v48 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
      v48(v55, v45, v58);
      v49 = (char *)v41 + *(int *)(v44 + 36);
      v50 = v56;
      v48(v56, v49, v46);
      v51 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      id v28 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v50, v46, v51);
      v52 = *(void (**)(char *, uint64_t))(v47 + 8);
      v52(v50, v46);
      v52(v43, v46);
      return v28 & 1;
    }

    goto LABEL_17;
  }

  return v28 & 1;
}

                v27 = 0;
                return v27 & 1;
              }

              if (v49) {
                goto LABEL_11;
              }
            }

            else if (v49 != v50)
            {
              goto LABEL_11;
            }

            id v28 = 0;
            return v28 & 1;
          }
        }

        sub_1000CECE0((uint64_t)v11, type metadata accessor for Goldilocks_ZoneID);
        sub_1000CEDAC((uint64_t)v21, &qword_100295030);
        sub_1000CEDAC((uint64_t)v23, &qword_100295030);
        sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
        unsigned __int8 v33 = (uint64_t)v14;
        id v32 = &qword_100295030;
LABEL_10:
        sub_1000CEDAC(v33, v32);
        goto LABEL_11;
      }

      sub_1000CEDAC((uint64_t)v21, &qword_100295030);
      sub_1000CEDAC((uint64_t)v23, &qword_100295030);
      sub_1000CECE0((uint64_t)v18, type metadata accessor for Goldilocks_ZoneID);
    }

    id v32 = &qword_100294DF0;
    unsigned __int8 v33 = (uint64_t)v14;
    goto LABEL_10;
  }

  return v28 & 1;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    unsigned int v22 = (uint64_t *)(v18[6] + 16 * v12);
    *unsigned int v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100119324(v15, a4 & 1);
  uint64_t v20 = sub_100119098(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    id v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v17[(v11 >> 6) + 8] |= 1LL << v11;
    *(void *)(v17[6] + 8 * v11) = a3;
    unsigned int v22 = (void *)(v17[7] + 16 * v11);
    *unsigned int v22 = a1;
    v22[1] = a2;
    id v23 = v17[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    v25 = v23 + 1;
    if (!v24)
    {
      v17[2] = v25;
      return a3;
    }

    goto LABEL_14;
  }

  sub_100119630(v14, a4 & 1);
  uint64_t v20 = sub_1001190FC((uint64_t)a3);
  if ((v15 & 1) == (v21 & 1))
  {
    uint64_t v11 = v20;
    uint64_t v17 = (void *)*v5;
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
    }

    (*(void (**)(void, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL);
    goto LABEL_13;
  }

  [v3 libraryManager:v2 provideLocalResource:*(void *)(a1 + 40) recordClass:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
LABEL_13:
}
    }

    id v10 = *(void *)(a1 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors notImplementedError](&OBJC_CLASS___CPLErrors, "notImplementedError", *(_OWORD *)v12));
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

    goto LABEL_13;
  }

  [v3 libraryManager:v2 pushAllChangesWithCompletionHandler:*(void *)(a1 + 40)];
LABEL_13:
}

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[CPLPrequeliteVariable indexVariableForVariableWithName:forTable:]( &OBJC_CLASS___CPLPrequeliteVariable,  "indexVariableForVariableWithName:forTable:",  v13,  self->_nameTable));
  v25 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 pqlConnection]);
  v27 = v26;
  if (!v8)
  {
    if (!v15)
    {
      id v28 = [v26 cplExecute:@"CREATE INDEX IF NOT EXISTS %@ ON %@ (%@)", v24, self->_mainTable, v14, v35, *(void *)buf, *(_OWORD *)&buf[8], v37];
      goto LABEL_17;
    }

    goto LABEL_15;
  }

  if (v15)
  {
LABEL_15:
    id v28 = [v26 cplExecute:@"CREATE INDEX IF NOT EXISTS %@ ON %@ (%@) WHERE %@", v24, self->_mainTable, v14, v15, *(void *)buf, *(_OWORD *)&buf[8], v37];
    goto LABEL_17;
  }

  id v28 = [v26 cplExecute:@"CREATE UNIQUE INDEX IF NOT EXISTS %@ ON %@ (%@)", v24, self->_mainTable, v14, v35, *(_OWORD *)buf, *(void *)&buf[16], v37];
LABEL_17:
  uint64_t v29 = v28;

  if (a7 && !v29)
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
    id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 pqlConnection]);
    *a7 = (id)objc_claimAutoreleasedReturnValue([v31 lastCPLError]);
  }

  return v29;
}

LABEL_12:
  return v14;
}

LABEL_12:
  return v11;
}

LABEL_12:
  return v11;
}

LABEL_12:
  __int16 v21 = 0LL;
  unsigned int v22 = 1;
LABEL_19:

  return v22;
}

  id v34 = 0LL;
  uint64_t v24 = -[CPLPrequeliteChangePipe _setPushMarker:error:](self, "_setPushMarker:error:", v11 + 1, &v34);
  v25 = v34;
LABEL_21:

  objc_autoreleasePoolPop(v7);
  if (a4 && !v24) {
    *a4 = v25;
  }

  return v24;
}

uint64_t sub_100009A4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_33:
    id v28 = 0LL;
    goto LABEL_34;
  }

  swift_beginAccess(a1 + 128, &v89, 0LL, 0LL);
  uint64_t v19 = *(void *)(a1 + 128);
  if (*(void *)(v19 + 16))
  {
    v73 = type metadata accessor for Ckcode_RecordTransport(0LL);
    id v34 = sub_1000BD35C( &qword_100292930,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
    id v35 = swift_bridgeObjectRetain(v19);
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v35, 8LL, v73, v34, a3, a4);
    if (v5) {
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v19);
  }

  v36 = a1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange,  &v88,  0LL,  0LL);
  sub_1000CE7B4(v36, (uint64_t)v15, &qword_100292870);
  uint64_t v37 = v78;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, v78) == 1)
  {
    sub_1000CEDAC((uint64_t)v15, &qword_100292870);
    id v38 = a4;
    id v39 = a3;
    v40 = (uint64_t)v98;
  }

  else
  {
    uint64_t v41 = v77;
    sub_1000CEC9C((uint64_t)v15, v77, type metadata accessor for CMTimeRange);
    __int16 v42 = sub_1000BD35C( &qword_100293900,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
    id v43 = v37;
    id v38 = a4;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v41, 101LL, v43, v42, a3, a4);
    id v39 = a3;
    id result = sub_1000CECE0(v41, type metadata accessor for CMTimeRange);
    v40 = (uint64_t)v98;
    if (v5) {
      return result;
    }
  }

  v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint,  &v87,  0LL,  0LL);
  v45 = *v44;
  if (!*(void *)(v45 + 16)
    || (v46 = sub_1000EA8FC(),
        v47 = swift_bridgeObjectRetain(v45),
        dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)( v47,  102LL,  &type metadata for RequestItem.MediaTypeHint,  v46,  v39,  v38),  id result = swift_bridgeObjectRelease(v45),  !v5))
  {
    v48 = a1
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
    swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation,  &v86,  0LL,  0LL);
    sub_1000CE7B4(v48, v40, &qword_100292888);
    v49 = v76;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v40, 1LL, v76) == 1)
    {
      sub_1000CEDAC(v40, &qword_100292888);
    }

    else
    {
      v50 = v40;
      v51 = v74;
      sub_1000CEC9C(v50, v74, type metadata accessor for VideoHEVCProfileTierLevelInformation);
      v52 = sub_1000BD35C( &qword_100292020,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v51, 104LL, v49, v52, v39, v38);
      id result = sub_1000CECE0(v51, type metadata accessor for VideoHEVCProfileTierLevelInformation);
      if (v5) {
        return result;
      }
    }

    v53 = (unsigned int *)(a1
                         + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
    swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount,  &v85,  0LL,  0LL);
    v54 = *v53;
    if (!(_DWORD)v54
      || (id result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v54, 105LL, v39, v38), !v5))
    {
      v55 = (unsigned int *)(a1
                           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
      swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount,  &v84,  0LL,  0LL);
      v56 = *v55;
      if (!(_DWORD)v56
        || (id result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v56, 106LL, v39, v38), !v5))
      {
        v57 = (unsigned int *)(a1
                             + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
        swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount,  &v83,  0LL,  0LL);
        v58 = *v57;
        if (!(_DWORD)v58
          || (id result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v58, 107LL, v39, v38), !v5))
        {
          v59 = (uint64_t *)(a1
                          + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
          swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake,  &v82,  0LL,  0LL);
          v60 = *v59;
          v61 = v59[1];
          v62 = HIBYTE(v61) & 0xF;
          if ((v61 & 0x2000000000000000LL) == 0) {
            v62 = v60 & 0xFFFFFFFFFFFFLL;
          }
          if (!v62
            || (swift_bridgeObjectRetain(v61),
                dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v60, v61),
                id result = swift_bridgeObjectRelease(v61),
                !v5))
          {
            v63 = (uint64_t *)(a1
                            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
            swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel,  &v81,  0LL,  0LL);
            v64 = *v63;
            v65 = v63[1];
            v66 = HIBYTE(v65) & 0xF;
            if ((v65 & 0x2000000000000000LL) == 0) {
              v66 = v64 & 0xFFFFFFFFFFFFLL;
            }
            if (!v66
              || (swift_bridgeObjectRetain(v65),
                  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v64, v65),
                  id result = swift_bridgeObjectRelease(v65),
                  !v5))
            {
              v67 = (uint64_t *)(a1
                              + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
              swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription,  &v80,  0LL,  0LL);
              v68 = *v67;
              v69 = v67[1];
              v70 = HIBYTE(v69) & 0xF;
              if ((v69 & 0x2000000000000000LL) == 0) {
                v70 = v68 & 0xFFFFFFFFFFFFLL;
              }
              if (!v70
                || (swift_bridgeObjectRetain(v69),
                    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v68, v69),
                    id result = swift_bridgeObjectRelease(v69),
                    !v5))
              {
                v71 = (_BYTE *)(a1
                              + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
                id result = swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay,  &v79,  0LL,  0LL);
                if (*v71 == 1) {
                  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 111LL, v39, v38);
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

        __break(1u);
        goto LABEL_34;
      }
    }

    else
    {
      sub_1000CECE0((uint64_t)v26, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
    }

    id v43 = v34;
    v45 = *v34;
    v44 = v34[1];
    v46 = (void *)v34[2];
    v47 = v83;
    sub_1000CE7B4(v31, v83, &qword_100293C98);
    v48 = v88;
    if (v85(v47, 1LL, v88) == 1)
    {
      *(void *)id v6 = 0LL;
      *((void *)v6 + 1) = 0xE000000000000000LL;
      *((void *)v6 + 2) = 0LL;
      v6[24] = 1;
      *((void *)v6 + 4) = 0LL;
      *((void *)v6 + 5) = 0xE000000000000000LL;
      *((_DWORD *)v6 + 12) = 0;
      *((void *)v6 + 7) = &_swiftEmptyArrayStorage;
      *((void *)v6 + _Block_object_dispose(va, 8) = 0LL;
      *((void *)v6 + 9) = 0xE000000000000000LL;
      *((void *)v6 + 10) = 0LL;
      *((void *)v6 + 11) = 0xE000000000000000LL;
      v49 = swift_bridgeObjectRetain(v44);
      UnknownStorage.init()(v49);
      v50 = &v6[*(int *)(v48 + 48)];
      v51 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v50, 1LL, 1LL, v51);
      id result = sub_1000CEDAC(v47, &qword_100293C98);
    }

    else
    {
      sub_1000CEC9C(v47, (uint64_t)v6, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
      id result = swift_bridgeObjectRetain(v44);
    }

    v52 = v43[2];
    v53 = 1000 * v52;
    if ((unsigned __int128)(v52 * (__int128)1000LL) >> 64 != (1000 * v52) >> 63)
    {
      __break(1u);
      goto LABEL_33;
    }

    v54 = *((void *)v6 + 1);
    v55 = *((void *)v6 + 2);
    v56 = v6[24];
    v57 = *(void *)v6;
    v58 = HIBYTE(v54) & 0xF;
    if ((v54 & 0x2000000000000000LL) == 0) {
      v58 = *(void *)v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      swift_bridgeObjectRetain(*((void *)v6 + 1));
      if (v56)
      {
LABEL_19:
        v59 = qword_100219B30[v55];
LABEL_22:
        v61 = sub_10011553C( v59,  v57,  v54,  v53,  *((void *)v6 + 8),  *((void *)v6 + 9),  *((void *)v6 + 10),  *((void *)v6 + 11));
        swift_bridgeObjectRelease(v54);
        sub_1000CECE0((uint64_t)v6, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
        v87(0LL, v45, v44, v46, 0LL, 0LL, 0LL, 0LL, 0, v61);
        swift_errorRelease(v61);
        swift_bridgeObjectRelease(v44);
        v62 = (uint64_t)v43;
        return sub_1000CECE0(v62, type metadata accessor for Goldilocks_SilentMoverRampingResponse);
      }
    }

    else
    {
      v57 = sub_100114020(*((void *)v6 + 2), v6[24]);
      v54 = v60;
      if (v56) {
        goto LABEL_19;
      }
    }

    v59 = 150LL;
    goto LABEL_22;
  }

  sub_1000CEDAC((uint64_t)v21, &qword_100295100);
  uint64_t v29 = v84;
  if (v84) {
    uint64_t v30 = v84;
  }
  else {
    uint64_t v30 = sub_10011553C( 150LL,  0xD00000000000001ALL,  0x80000001001D3830LL,  0LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }
  swift_errorRetain(v29);
  v87(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0, v30);
  return swift_errorRelease(v30);
}

    uint64_t v11 = (v24 - 1) & v24;
    __int16 v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    id v32 = *v30;
    id v31 = v30[1];
    unsigned __int8 v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      id v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    id result = Hasher._finalize()();
    uint32_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      id v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v36;
  id v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  os_log_s *v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    unsigned int v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    id v31 = *(void **)(*(void *)(v5 + 48) + 8 * v22);
    id v32 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v22);
    unsigned __int8 v33 = *v32;
    id v34 = v32[1];
    if ((v39 & 1) == 0)
    {
      id v35 = v31;
      swift_bridgeObjectRetain(v34);
    }

    id result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v27 = 0;
      id v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(void *)(*(void *)(v8 + 48) + 8 * v19) = v31;
    uint64_t v20 = (void *)(*(void *)(v8 + 56) + 16 * v19);
    *uint64_t v20 = v33;
    v20[1] = v34;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    CFStringRef v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  os_log_s *v3 = v8;
  return result;
}

            goto LABEL_40;
          }

          id v39 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106LL));
          v40 = [v39 doesScopeNeedToPullChangesFromTransport:v32];

          if (v40)
          {
            uint64_t v30 = a2;
            if (_CPLSilentLogging) {
              goto LABEL_40;
            }
            uint64_t v41 = sub_10013AF3C();
            uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v32 scopeIdentifier]);
              *(_DWORD *)buf = v51;
              v62 = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "No more changes for %@, but there are still changes to pull from the transport",  buf,  0xCu);

              uint64_t v30 = a2;
            }

            goto LABEL_33;
          }

          if (!_CPLSilentLogging)
          {
            id v43 = sub_10013AF3C();
            v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              v45 = (void *)objc_claimAutoreleasedReturnValue([v32 scopeIdentifier]);
              *(_DWORD *)buf = v51;
              v62 = v45;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "No more changes for %@, nothing to push or pull from/to transport - committing transient sync anchor",  buf,  0xCu);
            }
          }

          v46 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106LL));
          v47 = [v46 setSyncAnchor:v35 forScope:v32 error:a2];

          if (!v47
            || (v48 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 106LL)),
                v49 = [v48 storeTransientSyncAnchor:0 forScope:v32 error:a2],
                v48,
                uint64_t v30 = a2,
                (v49 & 1) == 0))
          {

            LOBYTE(v29) = 0;
            uint64_t v24 = v53;
            goto LABEL_49;
          }
        }

  objc_autoreleasePoolPop(v12);
  if (a6 && !v27) {
    *a6 = v15;
  }

  return v27;
}

  id v31 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineScopeStorage platformObject](self->_scopes, "platformObject"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 creationDateForScope:v53]);
  unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue([v31 creationDateForScope:v7]);
  id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v34 doubleForKey:@"CPLRewindForSparseRecordsInterval"];
  v36 = v35;

  uint64_t v37 = v32;
  if (v32 && v33)
  {
    if (v36 <= 0.0) {
      v36 = 86400.0;
    }
    [v33 timeIntervalSinceDate:v32];
    if (v38 < 0.0) {
      id v38 = -v38;
    }
    if (v38 >= v36)
    {

LABEL_51:
      id v26 = 1;
      goto LABEL_52;
    }
  }

  id v39 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineScopeStorage scopeChangeForScope:](self->_scopes, "scopeChangeForScope:", v53));
  if (v39 && (v40 = objc_opt_class(&OBJC_CLASS___CPLLibraryScopeChange), (objc_opt_isKindOfClass(v39, v40) & 1) != 0))
  {
    v49 = v37;
    if (!_CPLSilentLogging)
    {
      uint64_t v41 = sub_10014E628();
      __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v64 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Resetting sync anchor for %@ to ensure we catch up with missing sparse private records and relationships to them",  buf,  0xCu);
      }
    }

    -[CPLPrequeliteStore recordUpgradeEvent:]( self->_pqStore,  "recordUpgradeEvent:",  @"Resetting sync anchor for private scope");
    id v43 = self->_scopes;
    v54 = v23;
    v44 = -[CPLEngineScopeStorage resetSyncAnchorForScope:error:]( v43,  "resetSyncAnchorForScope:error:",  v53,  &v54);
    v45 = v54;

    id v23 = v45;
    uint64_t v37 = v49;
  }

  else
  {
    v44 = 1;
  }

  if ((v44 & 1) != 0) {
    goto LABEL_51;
  }
LABEL_18:
  if (!_CPLSilentLogging)
  {
    uint64_t v24 = sub_10014E628();
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v64 = (char *)v23;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to perform migration: %@", buf, 0xCu);
    }
  }

  if (a5)
  {
    id v23 = v23;
    id v26 = 0;
    *a5 = v23;
  }

  else
  {
    id v26 = 0;
  }

LABEL_6:
  if (!v18 && !_CPLSilentLogging)
  {
    uint64_t v24 = sub_10000537C();
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v14 path]);
      *(_DWORD *)buf = 138412290;
      v64 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Unable to determine engine volume for %@",  buf,  0xCu);
    }
  }

  v52 = v14;
  v27 = -[CPLEngineLibrary initWithParameters:](objc_alloc(&OBJC_CLASS___CPLEngineLibrary), "initWithParameters:", v11);
  id v28 = -[CPLEngineWrapper initWithParameters:engine:queue:]( objc_alloc(&OBJC_CLASS___CPLEngineWrapper),  "initWithParameters:engine:queue:",  v11,  v27,  v12);
  uint64_t v29 = -[CPLEngineLibrarySupervisor initWithEngineLibrary:queue:]( objc_alloc(&OBJC_CLASS___CPLEngineLibrarySupervisor),  "initWithEngineLibrary:queue:",  v27,  self->_queue);
  -[CPLEngineLibrary setSupervisor:](v27, "setSupervisor:", v29);

  if (+[CPLResource cplShouldGenerateDerivatives]( &OBJC_CLASS___CPLResource,  "cplShouldGenerateDerivatives"))
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineLibrary store](v27, "store"));
    id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 derivativesCache]);
    [v31 setDerivativeGeneratorClass:objc_opt_class(CloudPhotoServices)];
  }

  id v32 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineLibrary transport](v27, "transport"));
  unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 platformObject]);

  id v34 = objc_opt_class(&OBJC_CLASS___CPLCloudKitTransport);
  if ((objc_opt_isKindOfClass(v33, v34) & 1) != 0)
  {
    if (!self->_forSyncBubble)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineLibrary libraryIdentifier](v27, "libraryIdentifier"));
      id v35 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineLibrary processesInvolvedInSyncSessions](v27, "processesInvolvedInSyncSessions"));
      v53 = v12;
      v36 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineLibrary clientAppBundleIdentifier](v27, "clientAppBundleIdentifier"));
      v62 = v36;
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v62, 1LL));
      id v38 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitReschedulerCoordinator cloudKitReschedulerManagerForLibraryWithIdentifier:involvedProcesses:relatedApplications:]( &OBJC_CLASS___CPLCloudKitReschedulerCoordinator,  "cloudKitReschedulerManagerForLibraryWithIdentifier:involvedProcesses:relatedApplications:",  v50,  v35,  v37));
      [v33 setReschedulerManager:v38];

      id v12 = v53;
    }

    id v39 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitComputeStateEncryptionHelper);
    [v33 registerHelper:v39 withIdentifier:@"compute-state-encryption"];
  }

  -[CPLEngineWrapper setVolumeURL:](v28, "setVolumeURL:", v18);

  id v14 = v52;
LABEL_34:

  return v28;
}

    if (v5)
    {
      uint64_t v11 = v5;
      id v12 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v11 featuresCount]);
      unsigned int v22 = 0u;
      id v23 = 0u;
      uint64_t v24 = 0u;
      v25 = 0u;
      __int16 v21 = v11;
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 features]);
      id v14 = [v13 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v14)
      {
        uint32_t v15 = v14;
        id v16 = *(void *)v23;
        do
        {
          for (i = 0LL; i != v15; i = (char *)i + 1)
          {
            if (*(void *)v23 != v16) {
              objc_enumerationMutation(v13);
            }
            id v18 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
            uint64_t v19 = sub_100040CA8((int)[v18 feature]);
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          }

          uint32_t v15 = [v13 countByEnumeratingWithState:&v22 objects:v26 count:16];
        }

        while (v15);
      }

      ((void (**)(void, NSMutableArray *, void))v8)[2](v8, v12, 0LL);
    }

    else
    {
      ((void (**)(void, void *, void))v8)[2](v8, &__NSArray0__struct, 0LL);
    }

    id v6 = 0LL;
    goto LABEL_22;
  }

  unsigned __int8 v7 = objc_retainBlock(v4);

  return v7;
}

    id v8 = 0;
    if (!a3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
}

    dispatch_block_t v5 = 0;
  }

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v9 = v3 + 16;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v10 = v3 + *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0LL) + 28);
    uint64_t v11 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
    id v12 = sub_1000BD35C( &qword_1002920C8,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
    id v13 = v9;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
LABEL_5:
    id v9 = v13;
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v9 = v3 + 8;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v9, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v9 = v3 + *(int *)(type metadata accessor for CMTimeRange(0LL) + 24);
    id v10 = type metadata accessor for CMTime(0LL);
    uint64_t v11 = sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
    id v12 = v9;
    id v13 = v10;
LABEL_5:
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v12, v13, v11, a2, a3);
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v10 = v9;
    dispatch thunk of Decoder.decodeRepeatedStringField(value:)(v3 + 16, a2, a3);
LABEL_5:
    id v9 = v10;
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(v15, a3);
    }

    uint64_t v19 = a5(0LL);
    uint64_t v20 = sub_1000BD35C(a6, a5, a7);
    __int16 v21 = v18;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v13 + 16, v19, v20, v15, a3);
LABEL_5:
    id v18 = v21;
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }

    id v10 = v9;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + 16, a2, a3);
LABEL_5:
    id v9 = v10;
    goto LABEL_6;
  }

  return result;
}

      id result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

    __int16 v21 = sub_1000BED3C(&qword_100293CA0);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  if (v20)
  {
    sub_1000CECE0((uint64_t)v14, type metadata accessor for Goldilocks_OperationControl);
    goto LABEL_6;
  }

  *(void *)id v14 = *(void *)v15;
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  v14[13] = v15[13];
  v14[14] = v15[14];
  unsigned int v22 = (void (*)(uint64_t, char *, uint64_t))v12;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v12)(&v14[*(int *)(v16 + 44)], &v15[*(int *)(v16 + 44)], v67);
LABEL_8:
  id v23 = a3[8];
  uint64_t v24 = (uint64_t)a1 + v23;
  v25 = (char *)a2 + v23;
  id v26 = type metadata accessor for Goldilocks_ErrorInfo.ResultError(0LL);
  v27 = *(void *)(v26 - 8);
  id v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  uint64_t v29 = v28(v24, 1LL, v26);
  uint64_t v30 = v28((uint64_t)v25, 1LL, v26);
  if (!v29)
  {
    if (!v30)
    {
      __int16 v42 = *((void *)v25 + 1);
      id v43 = *(void *)(v24 + 8);
      *(void *)uint64_t v24 = *(void *)v25;
      *(void *)(v24 + _Block_object_dispose(va, 8) = v42;
      swift_bridgeObjectRelease(v43);
      *(void *)(v24 + 16) = *((void *)v25 + 2);
      *(_BYTE *)(v24 + 24) = v25[24];
      v44 = *((void *)v25 + 5);
      v45 = *(void *)(v24 + 40);
      *(void *)(v24 + 32) = *((void *)v25 + 4);
      *(void *)(v24 + 40) = v44;
      swift_bridgeObjectRelease(v45);
      *(_DWORD *)(v24 + 4_Block_object_dispose(va, 8) = *((_DWORD *)v25 + 12);
      v46 = *(void *)(v24 + 56);
      *(void *)(v24 + 56) = *((void *)v25 + 7);
      swift_bridgeObjectRelease(v46);
      v47 = *((void *)v25 + 9);
      v48 = *(void *)(v24 + 72);
      *(void *)(v24 + 64) = *((void *)v25 + 8);
      *(void *)(v24 + 72) = v47;
      swift_bridgeObjectRelease(v48);
      v49 = *((void *)v25 + 11);
      v50 = *(void *)(v24 + 88);
      *(void *)(v24 + 80) = *((void *)v25 + 10);
      *(void *)(v24 + 8_Block_object_dispose(va, 8) = v49;
      swift_bridgeObjectRelease(v50);
      v22(v24 + *(int *)(v26 + 44), &v25[*(int *)(v26 + 44)], v67);
      v51 = *(int *)(v26 + 48);
      v52 = v24 + v51;
      v53 = &v25[v51];
      v54 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
      v55 = *(void *)(v54 - 8);
      v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
      v57 = v56(v52, 1LL, v54);
      v58 = v56((uint64_t)v53, 1LL, v54);
      if (v57)
      {
        if (!v58)
        {
          v59 = *((_OWORD *)v53 + 1);
          *(_OWORD *)v52 = *(_OWORD *)v53;
          *(_OWORD *)(v52 + 16) = v59;
          *(void *)(v52 + 32) = *((void *)v53 + 4);
          *(_BYTE *)(v52 + 40) = v53[40];
          *(void *)(v52 + 4_Block_object_dispose(va, 8) = *((void *)v53 + 6);
          *(_BYTE *)(v52 + 56) = v53[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))( v52 + *(int *)(v54 + 32),  &v53[*(int *)(v54 + 32)],  v67);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v52, 0LL, 1LL, v54);
          return a1;
        }
      }

      else
      {
        if (!v58)
        {
          v62 = *((void *)v53 + 1);
          v63 = *(void *)(v52 + 8);
          *(void *)v52 = *(void *)v53;
          *(void *)(v52 + _Block_object_dispose(va, 8) = v62;
          swift_bridgeObjectRelease(v63);
          v64 = *((void *)v53 + 3);
          v65 = *(void *)(v52 + 24);
          *(void *)(v52 + 16) = *((void *)v53 + 2);
          *(void *)(v52 + 24) = v64;
          swift_bridgeObjectRelease(v65);
          *(void *)(v52 + 32) = *((void *)v53 + 4);
          *(_BYTE *)(v52 + 40) = v53[40];
          *(void *)(v52 + 4_Block_object_dispose(va, 8) = *((void *)v53 + 6);
          *(_BYTE *)(v52 + 56) = v53[56];
          v22(v52 + *(int *)(v54 + 32), &v53[*(int *)(v54 + 32)], v67);
          return a1;
        }

        sub_1000CECE0(v52, type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure);
      }

      id v39 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293CA8) - 8) + 64LL);
      v40 = (void *)v52;
      uint64_t v41 = v53;
      goto LABEL_15;
    }

    sub_1000CECE0(v24, type metadata accessor for Goldilocks_ErrorInfo.ResultError);
LABEL_14:
    id v39 = *(void *)(*(void *)(sub_1000BED3C(&qword_100293C98) - 8) + 64LL);
    v40 = (void *)v24;
    uint64_t v41 = v25;
LABEL_15:
    memcpy(v40, v41, v39);
    return a1;
  }

  if (v30) {
    goto LABEL_14;
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(_BYTE *)(v24 + 24) = v25[24];
  *(void *)(v24 + 16) = *((void *)v25 + 2);
  *(_OWORD *)(v24 + 32) = *((_OWORD *)v25 + 2);
  *(_DWORD *)(v24 + 4_Block_object_dispose(va, 8) = *((_DWORD *)v25 + 12);
  *(void *)(v24 + 56) = *((void *)v25 + 7);
  id v31 = *((_OWORD *)v25 + 5);
  *(_OWORD *)(v24 + 64) = *((_OWORD *)v25 + 4);
  *(_OWORD *)(v24 + 80) = v31;
  id v32 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 32);
  v32(v24 + *(int *)(v26 + 44), &v25[*(int *)(v26 + 44)], v67);
  unsigned __int8 v33 = *(int *)(v26 + 48);
  id v34 = (_OWORD *)(v24 + v33);
  id v35 = &v25[v33];
  v36 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1LL, v36))
  {
    id v38 = sub_1000BED3C(&qword_100293CA8);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    v60 = *((_OWORD *)v35 + 1);
    *id v34 = *(_OWORD *)v35;
    v34[1] = v60;
    *((void *)v34 + 4) = *((void *)v35 + 4);
    *((_BYTE *)v34 + 40) = v35[40];
    *((void *)v34 + 6) = *((void *)v35 + 6);
    *((_BYTE *)v34 + 56) = v35[56];
    v32((uint64_t)v34 + *(int *)(v36 + 32), &v35[*(int *)(v36 + 32)], v67);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  return a1;
}

  return v9;
}

void sub_10000A334(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  dispatch_block_t v5 = objc_alloc(&OBJC_CLASS___NSMutableString);
  if (*(_BYTE *)(a1 + 56)) {
    id v6 = ":";
  }
  else {
    id v6 = "";
  }
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringFromDateAgo:now:]( &OBJC_CLASS___CPLDateFormatter,  "stringFromDateAgo:now:",  *(void *)(*(void *)(a1 + 32) + 8LL),  v4));
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v8 + 16)) {
    id v9 = " for sync bubble";
  }
  else {
    id v9 = "";
  }
  if (*(_BYTE *)(v8 + 17)) {
    id v10 = " forcing client push";
  }
  else {
    id v10 = "";
  }
  uint64_t v11 = __CPLVersion();
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = -[NSMutableString initWithFormat:](v5, "initWithFormat:", @"launched%s %@%s%s (%@)", v6, v7, v9, v10, v12);

  if (*(_BYTE *)(a1 + 56))
  {
    -[NSMutableString appendString:](v13, "appendString:", @"\nregistered libraries:");
    if (![*(id *)(a1 + 40) count])
    {
      -[NSMutableString appendString:](v13, "appendString:", @" none");
      goto LABEL_29;
    }

    if ([*(id *)(a1 + 40) count] == (id)1)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) registeredLibraryIdentifiers]);
      -[NSMutableString appendFormat:](v13, "appendFormat:", @" %@", v14);
    }

    else
    {
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) registeredLibraryIdentifiers]);
      id v18 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v33;
        do
        {
          for (i = 0LL; i != v19; i = (char *)i + 1)
          {
            if (*(void *)v33 != v20) {
              objc_enumerationMutation(v14);
            }
            -[NSMutableString appendFormat:]( v13,  "appendFormat:",  @"\n\t%@",  *(void *)(*((void *)&v32 + 1) + 8LL * (void)i));
          }

          id v19 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }

        while (v19);
      }
    }
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) registeredLibraryIdentifiers]);
    uint64_t v15 = CPLLibraryIdentifierSystemLibrary;
    unsigned int v16 = [v14 containsObject:CPLLibraryIdentifierSystemLibrary];
    uint64_t v17 = (char *)[v14 count];
    if (v16) {
      -[NSMutableString appendFormat:]( v13,  "appendFormat:",  @"\nregistered libraries: %@ and %lu more",  v15,  v17 - 1);
    }
    else {
      -[NSMutableString appendFormat:](v13, "appendFormat:", @"\nregistered libraries: %lu", v17, v29);
    }
    -[NSMutableString appendString:](v13, "appendString:", @" (use cplctl daemon engines for more info)");
  }

LABEL_29:
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 dictionaryRepresentation]);

  uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (qword_100295EF8 != -1) {
    dispatch_once(&qword_100295EF8, &stru_10023DF68);
  }
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_10000A7CC;
  v30[3] = &unk_10023DF90;
  v30[4] = *(void *)(a1 + 32);
  v25 = v24;
  id v31 = v25;
  [v23 enumerateKeysAndObjectsUsingBlock:v30];
  if (-[NSMutableArray count](v25, "count"))
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v25, "componentsJoinedByString:", @"\n\t"));
    -[NSMutableString appendFormat:](v13, "appendFormat:", @"\ndefaults:\n\t%@", v26);
  }

  if ([v3 length]) {
    -[NSMutableString appendFormat:](v13, "appendFormat:", @"\n%@", v3);
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) statusesWithNow:0]);
  if ([v27 count])
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 componentsJoinedByString:@"\n  "]);
    -[NSMutableString appendFormat:](v13, "appendFormat:", @"\nbackground tasks:\n  %@", v28);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10000A788(id a1)
{
  uint64_t v1 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  @"CPLDidFetchAccountFlagsAfterMigration",  0LL);
  id v2 = (void *)qword_100295EF0;
  qword_100295EF0 = (uint64_t)v1;
}

void sub_10000A7CC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v8 hasPrefix:@"CPL"]
    && ([(id)qword_100295EF0 containsObject:v8] & 1) == 0
    && (+[CPLResetTracker shouldIgnoreDefaultsCPLKey:]( CPLResetTracker,  "shouldIgnoreDefaultsCPLKey:",  v8) & 1) == 0 && ([*(id *)(*(void *)(a1 + 32) + 24) isCPLEngineParametersStorageKey:v8] & 1) == 0)
  {
    if ([v8 isEqualToString:CPLDropDerivativesTestRulesKey])
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue( +[CPLDropDerivativesRecipe unarchiveArrayOfCPLDropDerivativeRecipesFrom:]( &OBJC_CLASS___CPLDropDerivativesRecipe,  "unarchiveArrayOfCPLDropDerivativeRecipesFrom:",  v5));

      id v5 = (id)v6;
    }

    unsigned __int8 v7 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@ = %@", v8, v5);
    [*(id *)(a1 + 40) addObject:v7];
  }
}

void sub_10000A8D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 128LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000A9C0;
  v10[3] = &unk_10023DFE0;
  id v11 = v3;
  id v12 = v4;
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v14 = v6;
  unsigned __int8 v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

uint64_t sub_10000A9C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10000AABC(uint64_t a1)
{
  id v8 = @"launchDate";
  [*(id *)(*(void *)(a1 + 32) + 8) timeIntervalSinceReferenceDate];
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  dispatch_block_t v9 = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));

  id v4 = *(void **)(*(void *)(a1 + 32) + 64LL);
  if (v4)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10000ABF0;
    v5[3] = &unk_10023E030;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    [v4 getStatusDictionaryWithCompletionHandler:v5];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10000ABF0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  [v5 addEntriesFromDictionary:v4];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10000B16C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10000B1F4;
  v3[3] = &unk_10023DE80;
  id v2 = *(void **)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v4 _performAfterRegistrations:v3];
}

id sub_10000B1F4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 176LL) = 0LL;
  id result = [*(id *)(*(void *)(a1 + 32) + 88) initialDownloadIsRunning];
  if ((result & 1) == 0) {
    return _[*(id *)(a1 + 32) _reRunFastPassInitialDownloadIfNecessaryForWrapper:*(void *)(a1 + 40) withReschedulerManager:*(void *)(a1 + 48)];
  }
  return result;
}

void sub_10000B768(_Unwind_Exception *a1)
{
}

void sub_10000B780(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 128LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  if (!*(_BYTE *)(v3 + 24))
  {
    *(_BYTE *)(v3 + 24) = 1;
    objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    [*(id *)(a1 + 40) setCancellationHandler:0];
  }
}

void sub_10000B804(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 128LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000B8CC;
  v6[3] = &unk_10023DBC8;
  id v7 = v1;
  uint64_t v3 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v9 = v3;
  id v4 = v2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

void sub_10000B8CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors operationCancelledError](&OBJC_CLASS___CPLErrors, "operationCancelledError"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10000B918(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(void **)(*(void *)(a1 + 32) + 128LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10000BA10;
  v13[3] = &unk_10023E0A8;
  uint64_t v16 = a2;
  id v14 = v6;
  id v15 = v7;
  id v9 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000BBFC;
  block[3] = &unk_10023DBC8;
  id v18 = v9;
  id v10 = v8;
  id v11 = v6;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v12);
}

void sub_10000BA10(void *a1)
{
  uint64_t v1 = a1[6];
  if ((unint64_t)(v1 - 1) < 2)
  {
    uint64_t v5 = a1[5];
    id v6 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
    uint64_t v7 = 0LL;
LABEL_9:
    v6(v5, v7);
    return;
  }

  if ((unint64_t)(v1 - 3) < 2)
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = @"No available iCloud user";
    uint64_t v4 = 28LL;
LABEL_4:
    id v8 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  v4,  v3));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v8);

    return;
  }

  if (!v1)
  {
    uint64_t v7 = a1[4];
    uint64_t v2 = a1[5];
    if (!v7)
    {
      uint64_t v3 = @"Failed to determine account status with no errors";
      uint64_t v4 = 150LL;
      goto LABEL_4;
    }

    id v6 = *(void (**)(uint64_t, uint64_t))(v2 + 16);
    uint64_t v5 = a1[5];
    goto LABEL_9;
  }

void sub_10000BBD0(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "daemon");
  uint64_t v3 = (void *)qword_100295F08;
  qword_100295F08 = (uint64_t)v2;
}

void sub_10000BBFC(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

uint64_t start(int a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v6 = [v5 BOOLForKey:@"CPLUseSyncBubbleScheduler"];

  if ((v6 & 1) != 0)
  {
    BOOL v7 = 1LL;
  }

  else if (a1 < 2)
  {
    BOOL v7 = 0LL;
  }

  else
  {
    uint64_t v8 = a1 - 2LL;
    id v9 = (const char **)(a2 + 8);
    do
    {
      id v10 = *v9++;
      int v11 = strcmp(v10, "--syncbubble");
      BOOL v7 = v11 == 0;
      if (v11) {
        BOOL v12 = v8 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      --v8;
    }

    while (!v12);
  }

  id v13 = -[CPLDaemon initForSyncBubble:forceClientPush:]( objc_alloc(&OBJC_CLASS___CPLDaemon),  "initForSyncBubble:forceClientPush:",  v7,  v6);
  objc_autoreleasePoolPop(v4);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
  [v14 run];

  return 0LL;
}

id sub_10000C010()
{
  if (qword_100295F10 != -1) {
    dispatch_once(&qword_100295F10, &stru_10023E400);
  }
  return (id)qword_100295F18;
}

id sub_10000C050(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
}

void sub_10000C088(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000C010();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = NSStringFromSelector(*(SEL *)(a1 + 32));
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      int v6 = 138543362;
      BOOL v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v6, 0xCu);
    }
  }

void sub_10000C14C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000C204;
  v6[3] = &unk_10023E1D8;
  id v7 = v2;
  id v10 = *(id *)(a1 + 56);
  char v11 = *(_BYTE *)(a1 + 64);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  [v3 requestRegisteredWrapperWithIdentifier:v7 completionHandler:v6];
}

void sub_10000C204(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    if (!_CPLSilentLogging)
    {
      id v14 = sub_10000C010();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        id v27 = v16;
        __int16 v28 = 2112;
        id v29 = v6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to get %{public}@: %@", buf, 0x16u);
      }
    }

    uint64_t v17 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
    goto LABEL_18;
  }

  if (!*(_BYTE *)(a1 + 64))
  {
    if (!_CPLSilentLogging)
    {
      id v18 = sub_10000C010();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v5;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Found %@", buf, 0xCu);
      }
    }

    uint64_t v17 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
LABEL_18:
    v17();
    goto LABEL_19;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 engine]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 mainScopeIdentifier]);
  if (!_CPLSilentLogging)
  {
    id v9 = sub_10000C010();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v27 = v5;
      __int16 v28 = 2114;
      id v29 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Found %@ - requesting %{public}@ is activated",  buf,  0x16u);
    }
  }

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10000C49C;
  v20[3] = &unk_10023E1B0;
  id v21 = v7;
  id v22 = v8;
  char v11 = *(void **)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 48);
  id v24 = v5;
  id v25 = *(id *)(a1 + 56);
  id v12 = v8;
  id v13 = v7;
  [v11 performAsCurrentWithPendingUnitCount:1 usingBlock:v20];

LABEL_19:
}

void sub_10000C49C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000C5A4;
  v6[3] = &unk_10023E188;
  int8x16_t v5 = *(int8x16_t *)(a1 + 40);
  id v4 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [v2 requestScopesWithIdentifiersToBeActivated:v3 completionHandler:v6];
}

void sub_10000C5A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  int8x16_t v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000C6C0;
  v10[3] = &unk_10023E160;
  id v11 = v3;
  id v12 = v4;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000DDEC;
  block[3] = &unk_10023DBC8;
  id v16 = v6;
  int8x16_t v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

uint64_t sub_10000C6C0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[4])
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10000C010();
      int8x16_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = a1[5];
        uint64_t v7 = a1[6];
        int v15 = 138543618;
        uint64_t v16 = v6;
        __int16 v17 = 2112;
        uint64_t v18 = v7;
        id v8 = "Failed to get %{public}@ activated for %@";
        dispatch_block_t v9 = v5;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v15, 0x16u);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v11 = sub_10000C010();
    int8x16_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a1[5];
      uint64_t v13 = a1[6];
      int v15 = 138543618;
      uint64_t v16 = v12;
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      id v8 = "Successfully got %{public}@ activated for %@";
      dispatch_block_t v9 = v5;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_8;
    }

id sub_10000CA80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 32), "totalUnitCount"));
}

void sub_10000CAB8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000C010();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = NSStringFromSelector(*(SEL *)(a1 + 32));
      int8x16_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v6, 0xCu);
    }
  }

void sub_10000CB7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  int8x16_t v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10000CCA4;
  v12[3] = &unk_10023E250;
  id v13 = v3;
  id v14 = v4;
  char v18 = *(_BYTE *)(a1 + 64);
  id v17 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v15 = v6;
  uint64_t v16 = v7;
  id v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000DDEC;
  block[3] = &unk_10023DBC8;
  id v20 = v8;
  dispatch_block_t v9 = v5;
  id v10 = v3;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

void sub_10000CCA4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_10000C010();
      id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a1 + 72)) {
          id v4 = " with activated main scope";
        }
        else {
          id v4 = "";
        }
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        uint64_t v13 = v5;
        __int16 v14 = 2080;
        id v15 = v4;
        __int16 v16 = 2112;
        uint64_t v17 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Requesting %{public}@%s but checking active Apple Account failed: %@",  buf,  0x20u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10000CE1C;
    v8[3] = &unk_10023E228;
    uint64_t v7 = *(void **)(a1 + 48);
    void v8[4] = *(void *)(a1 + 56);
    id v9 = *(id *)(a1 + 40);
    char v11 = *(_BYTE *)(a1 + 72);
    id v10 = *(id *)(a1 + 64);
    [v7 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
  }

id sub_10000CE1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _requestLibraryWithIdentifier:*(void *)(a1 + 40) withActivatedMainScope:*(unsigned __int8 *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
}

id sub_10000CE30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _requestLibraryWithIdentifier:*(void *)(a1 + 40) withActivatedMainScope:*(unsigned __int8 *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
}

LABEL_15:
    }

    queue = self->_queue;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_10000D1F4;
    void v42[3] = &unk_10023DBC8;
    id v43 = v12;
    uint64_t v30 = v42;
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_10000DDEC;
    v45 = &unk_10023DBC8;
    v46 = v30;
    id v31 = queue;
    id v25 = v12;
    __int128 v32 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
    dispatch_async(v31, v32);

    id v21 = v43;
    goto LABEL_17;
  }

  objc_storeStrong((id *)&self->_currentLibraryIdentifier, a3);
  id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSProgress progressWithTotalUnitCount:]( &OBJC_CLASS___NSProgress,  "progressWithTotalUnitCount:",  11LL));
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_10000D24C;
  v41[3] = &unk_10023E138;
  v41[4] = a2;
  [v19 setCancellationHandler:v41];
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_10000D310;
  v38[3] = &unk_10023E2A0;
  v38[4] = self;
  id v20 = v19;
  id v39 = v20;
  v40 = v12;
  id v21 = v12;
  id v22 = objc_retainBlock(v38);
  if (!_CPLSilentLogging)
  {
    uint64_t v23 = sub_10000C010();
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Requesting initial download of main scope for %{public}@",  buf,  0xCu);
    }
  }

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_10000D384;
  v33[3] = &unk_10023E3E0;
  v33[4] = self;
  __int128 v35 = v20;
  v36 = v22;
  __int128 v34 = v10;
  uint64_t v37 = v11;
  id v25 = v20;
  id v26 = v22;
  [v25 performAsCurrentWithPendingUnitCount:1 usingBlock:v33];

LABEL_17:
}
  }
}

  return v14;
}

    id v10 = 0;
    goto LABEL_16;
  }

  id v10 = 1;
LABEL_16:

  return v10;
}

    sub_1000CEDAC((uint64_t)v12, &qword_1002938E0);
    goto LABEL_36;
  }

  sub_1000CE7B4((uint64_t)v12, (uint64_t)v16, &qword_100291F58);
  if (v36(v34, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v19, &qword_100291F58);
    sub_1000CEDAC((uint64_t)v21, &qword_100291F58);
    (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v16, v8);
    goto LABEL_15;
  }

  uint64_t v37 = v66;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v35 + 32))(v66, v34, v8);
  id v38 = sub_1000BD35C( &qword_1002938E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v37, v8, v38);
  id v39 = *(void (**)(_BYTE *, uint64_t))(v35 + 8);
  v39(v37, v8);
  sub_1000CEDAC((uint64_t)v19, &qword_100291F58);
  sub_1000CEDAC((uint64_t)v21, &qword_100291F58);
  v39(v16, v8);
  sub_1000CEDAC((uint64_t)v12, &qword_100291F58);
  if ((v60 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_17:
  v40 = *(void *)(a1 + 48);
  uint64_t v41 = *(void *)(a1 + 56);
  __int16 v42 = *(void *)(a2 + 48);
  id v43 = *(void *)(a2 + 56);
  v44 = v62;
  if (v40 == v42 && v41 == v43
    || (id v24 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v42, v43, 0LL) & 1) != 0))
  {
    if (*(void *)(a1 + 64) == *(void *)(a2 + 64))
    {
      v45 = *(void *)(a1 + 72);
      v46 = *(void *)(a2 + 72);
      if (*(_BYTE *)(a2 + 80) == 1)
      {
        if (v46)
        {
          if (v46 == 1)
          {
            if (v45 == 1) {
              goto LABEL_31;
            }
          }

          else if (v45 == 2)
          {
LABEL_31:
            if (*(void *)(a1 + 88) == *(void *)(a2 + 88))
            {
              v47 = *(void *)(a1 + 96);
              if (*(_BYTE *)(a1 + 104) == 1) {
                v47 = qword_100216898[v47];
              }
              v48 = *(void *)(a2 + 96);
              if (*(_BYTE *)(a2 + 104)) {
                __asm { BR              X11 }
              }

              if (v47 == v48)
              {
                v50 = v61;
                v51 = a1 + *(int *)(v61 + 48);
                v52 = v65;
                v53 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16);
                v54 = v63;
                v53(v63, v51, v44);
                v55 = a2 + *(int *)(v50 + 48);
                v56 = v64;
                v53(v64, v55, v44);
                v57 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
                id v24 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v56, v44, v57);
                v58 = *(void (**)(_BYTE *, uint64_t))(v52 + 8);
                v58(v56, v44);
                v58(v54, v44);
                return v24 & 1;
              }
            }
          }
        }

        else if (!v45)
        {
          goto LABEL_31;
        }
      }

      else if (v45 == v46)
      {
        goto LABEL_31;
      }
    }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  id v26 = sub_1000CE284(0LL, &qword_100291F00, &OBJC_CLASS___CKRecordID_ptr);
  id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

  return 1LL;
}

  uint64_t v23 = objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver cpl_archivedDataWithRootObject:]( &OBJC_CLASS___NSKeyedArchiver,  "cpl_archivedDataWithRootObject:",  v10,  v38));
  id v24 = objc_claimAutoreleasedReturnValue( -[CPLPrequeliteScopeStorage _valueForColumnVariable:scope:]( self,  "_valueForColumnVariable:scope:",  *(CPLPrequeliteVariable **)((char *)&self->_deleteDateVar + 4),  v11));
  id v25 = (void *)v24;
  if (!v23 || !v24)
  {
    if (v23 | v24) {
      goto LABEL_18;
    }
LABEL_21:
    id v31 = 0;
    goto LABEL_24;
  }

  return v11;
}

    self->_hasCachedPushPullGatekeepers = 0;
    self->_hasModifiedPushPullGatekeepers = 0;
    uint64_t v23 = self->_cachedPushPullGatekeepers;
    self->_cachedPushPullGatekeepers = 0LL;

    id v22 = 0;
    goto LABEL_16;
  }

  uint64_t v7 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v6 count]);
  id v25 = 0u;
  id v26 = 0u;
  id v27 = 0u;
  __int16 v28 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v9)
  {
    id v10 = v9;
    char v11 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = (objc_class *)objc_opt_class(*(void *)(*((void *)&v25 + 1) + 8LL * (void)i));
        __int16 v14 = NSStringFromClass(v13);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        -[NSMutableArray addObject:](v7, "addObject:", v15);
      }

      id v10 = [v8 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v10);
  }

  __int16 v16 = (NSArray *)[v8 copy];
  uint64_t v17 = self->_cachedPushPullGatekeepers;
  self->_cachedPushPullGatekeepers = v16;

  char v18 = objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v7,  200LL,  0LL,  a4));
  if (!v18)
  {

    goto LABEL_15;
  }

  id v19 = (void *)v18;
  id v20 = -[CPLPrequeliteStore setValue:forGlobalVariable:error:]( self,  "setValue:forGlobalVariable:error:",  v18,  self->_pushPullGatekeepersVar,  a4);

  if ((v20 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_13:
  id v22 = 1;
LABEL_16:

  return v22;
}

void sub_10000D1F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectMachineStateErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "incorrectMachineStateErrorWithReason:",  @"Initial download is already running"));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

void sub_10000D24C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000C010();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = NSStringFromSelector(*(SEL *)(a1 + 32));
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v6, 0xCu);
    }
  }

void sub_10000D310(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  *(void *)(v4 + _Block_object_dispose((const void *)(v1 - 112), 8) = 0LL;
  id v6 = a3;

  objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10000D384(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10000D448;
  v7[3] = &unk_10023E3B8;
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 64);
  [v2 requestLibraryWithIdentifier:v3 withActivatedMainScope:1 completionHandler:v7];
}

void sub_10000D448(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) openedWrapperWithLibraryIdentifier:*(void *)(a1 + 40)]);
    id v8 = v3;
    if (v3)
    {
      id v4 = *(void **)(a1 + 48);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10000D56C;
      v9[3] = &unk_10023E390;
      id v10 = v3;
      id v5 = *(id *)(a1 + 64);
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = v5;
      id v13 = *(id *)(a1 + 56);
      [v4 performAsCurrentWithPendingUnitCount:10 usingBlock:v9];

      id v6 = v10;
    }

    else
    {
      uint64_t v7 = *(void *)(a1 + 56);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2006LL,  @"%@ not found",  *(void *)(a1 + 40),  0LL));
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v6);
    }
  }

void sub_10000D56C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engine]);
  v29[0] = 0LL;
  v29[1] = v29;
  v29[2] = 0x2020000000LL;
  char v30 = 0;
  v28[0] = 0LL;
  v28[1] = v28;
  v28[2] = 0x2020000000LL;
  v28[3] = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 store]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pullQueue]);
  if (*(void *)(a1 + 48))
  {
    id v5 = objc_alloc(&OBJC_CLASS___CPLEngineDequeueObserver);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10000D830;
    v24[3] = &unk_10023E2F0;
    id v6 = *(void **)(a1 + 48);
    v24[4] = *(void *)(a1 + 40);
    id v26 = v29;
    id v27 = v28;
    id v25 = v6;
    id v7 = [v5 initWithClientDidAcknowledgeBatchBlock:v24];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10000DA50;
    v21[3] = &unk_10023E318;
    id v22 = v4;
    id v8 = v7;
    id v23 = v8;
    id v9 = [v3 performReadTransactionWithBlock:v21];
  }

  else
  {
    id v8 = 0LL;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v2 mainScopeIdentifier]);
  id v31 = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v31, 1LL));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10000DA5C;
  v15[3] = &unk_10023E368;
  void v15[4] = *(void *)(a1 + 40);
  id v20 = v29;
  id v12 = v8;
  id v16 = v12;
  id v13 = v3;
  id v17 = v13;
  id v14 = v4;
  id v18 = v14;
  id v19 = *(id *)(a1 + 56);
  [v2 forceInitialDownloadWithActivity:0 scopeIdentifiers:v11 completionHandler:v15];

  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v29, 8);
}

void sub_10000D800(_Unwind_Exception *a1)
{
}

void sub_10000D830(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
      }

      id v6 = [v4 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }

    while (v6);
    if (v7)
    {
      uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_10000DA0C;
      v17[3] = &unk_10023E2C8;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = v7;
      __int128 v16 = *(_OWORD *)(a1 + 40);
      id v12 = (id)v16;
      __int128 v18 = v16;
      id v13 = v17;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10000DDEC;
      block[3] = &unk_10023DBC8;
      id v26 = v13;
      id v14 = v11;
      dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
      dispatch_async(v14, v15);
    }
  }
}

void *sub_10000DA0C(void *result)
{
  if (!*(_BYTE *)(*(void *)(result[5] + 8LL) + 24LL))
  {
    *(void *)(*(void *)(result[6] + 8LL) + 24LL) += result[7];
    return (void *)(*(uint64_t (**)(void, void))(result[4] + 16LL))( result[4],  *(void *)(*(void *)(result[6] + 8LL) + 24LL));
  }

  return result;
}

id sub_10000DA50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) addDequeueObserver:*(void *)(a1 + 40)];
}

void sub_10000DA5C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 32LL);
  v13[2] = sub_10000DBA0;
  v13[3] = &unk_10023E340;
  uint64_t v19 = *(void *)(a1 + 72);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  char v20 = a2;
  id v17 = v5;
  id v18 = v8;
  id v9 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000DDEC;
  block[3] = &unk_10023DBC8;
  id v22 = v9;
  id v10 = v7;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v12);
}

uint64_t sub_10000DBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
  if (*(void *)(a1 + 32))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10000DC54;
    v8[3] = &unk_10023E318;
    id v5 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 32);
    id v6 = [v5 performReadTransactionWithBlock:v8];
  }

  return (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  *(unsigned __int8 *)(a1 + 80),  *(void *)(a1 + 56),  a4);
}

id sub_10000DC54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeDequeueObserver:*(void *)(a1 + 40)];
}

uint64_t sub_10000DD38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000DDC0(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "daemon.initialdownload");
  uint64_t v3 = (void *)qword_100295F18;
  qword_100295F18 = (uint64_t)v2;
}

void sub_10000DDEC(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

LABEL_21:
  return v20;
}
}

  -[NSMutableArray addObject:](v3, "addObject:", @"lowBatteryLevel");
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }

    goto LABEL_22;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v19 = sub_1000955C4();
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v32 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_DEFAULT,  "Won't update contributors for %@ as the record is not in the cloud",  buf,  0xCu);
    }

    goto LABEL_21;
  }

LABEL_23:
  if (-[CPLSocialGroupChange shouldApplyPropertiesWithSelector:]( v13,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"personsData")))
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[CPLSocialGroupChange personsData](v13, "personsData"));

    if (v18)
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[CPLSocialGroupChange personsData](v13, "personsData"));
      [v6 setEncryptedObject:v19 forKey:@"personListEnc" validateClass:objc_opt_class(NSData)];
    }
  }

  return v31;
}
  }
}

id sub_10000E33C()
{
  if (qword_100295F20 != -1) {
    dispatch_once(&qword_100295F20, &stru_10023E4A0);
  }
  return (id)qword_100295F28;
}

void sub_10000E37C(uint64_t a1)
{
}

void sub_10000E394(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000E33C();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Watching %@ has been be cancelled",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_10000E448(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000E52C;
  v10[3] = &unk_10023DDE8;
  id v11 = v3;
  uint64_t v12 = v4;
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001042C;
  block[3] = &unk_10023DBC8;
  id v14 = v6;
  uint64_t v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_10000E52C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(*(id *)(v2 + 24), "removeVolumeUnmountObserver:");
    [*(id *)(*(void *)(a1 + 40) + 24) stop];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = 0LL;
  }

  else
  {
    *(_BYTE *)(v2 + 66) = 0;
    [*(id *)(a1 + 40) _startWatchingSystemState];
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 96LL));
  [WeakRetained wrapper:*(void *)(a1 + 40) libraryDidOpenWithError:*(void *)(a1 + 32)];
}

_BYTE *sub_10000E914(uint64_t a1)
{
  id result = *(_BYTE **)(a1 + 32);
  if (!result[66])
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10000E33C();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 80) currentClosingComponentName]);
        int v7 = 138412546;
        uint64_t v8 = v5;
        __int16 v9 = 2114;
        id v10 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Closing %@ took too long. Current closing component is %{public}@",  (uint8_t *)&v7,  0x16u);
      }

      id result = *(_BYTE **)(a1 + 32);
    }

    return [result _emergencyExit];
  }

  return result;
}

void sub_10000EA04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000EAE8;
  v10[3] = &unk_10023DDE8;
  void v10[4] = v4;
  id v11 = v3;
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001042C;
  block[3] = &unk_10023DBC8;
  id v13 = v6;
  int v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_10000EAE8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 66LL) = 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 65LL) = 0;
  if (*(void *)(a1 + 40))
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_10000E33C();
      id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v8 = v4;
        __int16 v9 = 2112;
        uint64_t v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Closing %@ raised an error: %@", buf, 0x16u);
      }
    }

    [*(id *)(a1 + 32) _emergencyExit];
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
    [WeakRetained wrapperLibraryDidClose:*(void *)(a1 + 32)];
  }

void sub_10000ED6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(v1 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10000EE38;
  v7[3] = &unk_10023E058;
  void v7[4] = v1;
  id v8 = v2;
  uint64_t v4 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001042C;
  block[3] = &unk_10023DBC8;
  id v10 = v4;
  uint64_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);
}

uint64_t sub_10000EE38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained wrapperShouldBeDropped:*(void *)(a1 + 32)];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10000EF30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(v1 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10000EFFC;
  v7[3] = &unk_10023E058;
  void v7[4] = v1;
  id v8 = v2;
  uint64_t v4 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001042C;
  block[3] = &unk_10023DBC8;
  id v10 = v4;
  uint64_t v5 = v3;
  dispatch_block_t v6 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v5, v6);
}

id sub_10000EFFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained wrapperShouldBeDropped:*(void *)(a1 + 32)];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  return [*(id *)(a1 + 32) _emergencyExit];
}

id sub_10000F6D0(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10000E33C();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%@ should be wiped - exiting immediately",  (uint8_t *)&v6,  0xCu);
    }
  }

  return [*(id *)(a1 + 32) _emergencyExit];
}

void sub_10000F86C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  id v3 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained wrapper:*(void *)(a1 + 32) getStatusDictionaryWithCompletionHandler:*(void *)(a1 + 40)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10000F9AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) supervisor]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 status]);

  if (!v4)
  {
    uint64_t v5 = (void (**)(id, const __CFString *, void))objc_retainBlock(*(id *)(a1 + 40));
    if (WeakRetained) {
      goto LABEL_3;
    }
LABEL_5:
    v5[2](v5, &stru_1002482B0, 0LL);
    goto LABEL_6;
  }

  int v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  id v8 = sub_10000FAB8;
  __int16 v9 = &unk_10023E480;
  id v11 = *(id *)(a1 + 40);
  id v10 = v4;
  uint64_t v5 = (void (**)(id, const __CFString *, void))[&v6 copy];

  if (!WeakRetained) {
    goto LABEL_5;
  }
LABEL_3:
  objc_msgSend(WeakRetained, "wrapper:getStatusWithCompletionHandler:", *(void *)(a1 + 32), v5, v6, v7, v8, v9);
LABEL_6:
}

void sub_10000FAB8(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 16);
    uint64_t v7 = a2;
    v5(v4);
  }

  else
  {
    id v6 = a2;
    uint64_t v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@\nsupervisor: %@",  v6,  *(void *)(a1 + 32));

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10000FC58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained wrapperNeedsInitialDownloadOfMainScope:*(void *)(a1 + 32)];
}

void sub_10000FD50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained wrapperDidCompleteInitialSyncOfMainScope:*(void *)(a1 + 32)];
}

void sub_100010400(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.wrapper");
  id v3 = (void *)qword_100295F28;
  qword_100295F28 = (uint64_t)v2;
}

void sub_10001042C(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

id sub_100010460()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CPLDaemonProcessProtocol));
  uint64_t v1 = objc_opt_class(&OBJC_CLASS___NSArray);
  os_log_t v2 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v1,  objc_opt_class(&OBJC_CLASS___CPLEngineWrapperStatus),  0LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v0 setClasses:v3 forSelector:"getEngineWrapperStatusesWithCompletionHandler:" argumentIndex:0 ofReply:1];

  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v5 = +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v4, objc_opt_class(&OBJC_CLASS___NSString), 0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v0 setClasses:v6 forSelector:"getDaemonLibraryManagerStatusesWithCompletionHandler:" argumentIndex:0 ofReply:1];

  return v0;
}

id sub_1000109E4()
{
  if (qword_100295F30 != -1) {
    dispatch_once(&qword_100295F30, &stru_10023E828);
  }
  return (id)qword_100295F38;
}

void sub_100010C98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100010CB0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_autoCloseWrapper:");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    *a4 = 1;
  }
  return result;
}

id sub_1000114D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) wrapper:*(void *)(a1 + 40) libraryDidOpenWithError:*(void *)(a1 + 48)];
}

void sub_1000117C8(id a1, NSString *a2, CPLEngineWrapper *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  if (!_CPLSilentLogging)
  {
    id v5 = sub_1000109E4();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Closing %@", (uint8_t *)&v7, 0xCu);
    }
  }

  -[CPLEngineWrapper stop](v4, "stop");
}

void sub_100011898(id a1, NSString *a2, CPLEngineWrapper *a3, BOOL *a4)
{
  uint64_t v4 = a3;
  if (!_CPLSilentLogging)
  {
    id v5 = sub_1000109E4();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Emergency closing %@", (uint8_t *)&v7, 0xCu);
    }
  }

  -[CPLEngineWrapper emergencyClose](v4, "emergencyClose");
}

int64_t sub_1000119FC(id a1, NSString *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  if (-[NSString isEqualToString:](v4, "isEqualToString:", v5))
  {
    int64_t v6 = 0LL;
  }

  else
  {
    uint64_t v7 = CPLLibraryIdentifierSystemLibrary;
    if (-[NSString isEqualToString:](v4, "isEqualToString:", CPLLibraryIdentifierSystemLibrary))
    {
      int64_t v6 = -1LL;
    }

    else if ([v5 isEqualToString:v7])
    {
      int64_t v6 = 1LL;
    }

    else
    {
      int64_t v6 = -[NSString compare:](v4, "compare:", v5);
    }
  }

  return v6;
}

LABEL_32:
  return v11;
}

  return v8;
}

  -[NSMutableArray addObject:](v3, "addObject:", @"deviceActivity");
  if ((v5 & 0x2000) != 0) {
LABEL_16:
  }
    -[NSMutableArray addObject:](v3, "addObject:", @"other");
LABEL_17:
  if (-[NSMutableArray count](v3, "count"))
  {
    int64_t v6 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v3, "componentsJoinedByString:", @" "));
    id v8 = -[NSString initWithFormat:](v6, "initWithFormat:", @"(%@)", v7);
  }

  else
  {
    id v8 = @"(no reasons)";
  }

  return v8;
}

  if (-[CPLAlbumChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"projectPreviewImageData")))
  {
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAlbumChange projectPreviewImageData](v7, "projectPreviewImageData"));
    if (!v28)
    {
      [v6 setObject:0 forKey:@"resProjectPreviewImageDataFingerprint"];
      [v6 setObject:0 forKey:@"resProjectPreviewImageDataRes"];
      [v6 setObject:0 forKey:@"resProjectPreviewImageDataFileSize"];
LABEL_42:

      goto LABEL_43;
    }

    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[CPLFingerprintScheme nonPrivateFingerprintScheme]( &OBJC_CLASS___CPLFingerprintScheme,  "nonPrivateFingerprintScheme"));
    v36 = 0LL;
    char v30 = (void *)objc_claimAutoreleasedReturnValue([v29 fingerPrintForData:v28 error:&v36]);
    id v31 = v36;

    if (v30)
    {
      [v6 setObject:v30 forKey:@"resProjectPreviewImageDataFingerprint"];
      __int128 v33 = -[CKAsset initWithAssetContent:itemTypeHint:]( objc_alloc(&OBJC_CLASS___CKAsset),  "initWithAssetContent:itemTypeHint:",  v28,  @"fxd");
      [v6 setObject:v33 forKey:@"resProjectPreviewImageDataRes"];
    }

    else
    {
      if (_CPLSilentLogging)
      {
LABEL_41:
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v28 length]));
        [v6 setObject:v35 forKey:@"resProjectPreviewImageDataFileSize"];

        goto LABEL_42;
      }

      __int128 v34 = __CPLGenericOSLogDomain(v32);
      __int128 v33 = (CKAsset *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v39 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v33,  OS_LOG_TYPE_ERROR,  "Failed to compute fingerprint for projectPreviewImageData: %@",  buf,  0xCu);
      }
    }

    goto LABEL_41;
  }

    *(void *)__int16 v9 = 0LL;
    *((void *)v9 + 1) = 0xE000000000000000LL;
    *((void *)v9 + 2) = 0LL;
    v9[24] = 1;
    *((void *)v9 + 4) = 0LL;
    *((void *)v9 + 5) = 0xE000000000000000LL;
    *((_DWORD *)v9 + 12) = 0;
    *((void *)v9 + 7) = &_swiftEmptyArrayStorage;
    *((void *)v9 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v9 + 9) = 0xE000000000000000LL;
    *((void *)v9 + 10) = 0LL;
    *((void *)v9 + 11) = 0xE000000000000000LL;
    UnknownStorage.init()(v88);
    v96 = &v9[*(int *)(v37 + 48)];
    v97 = type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56LL))(v96, 1LL, 1LL, v97);
    goto LABEL_38;
  }

  if ((v83 & 1) != 0) {
    goto LABEL_32;
  }
  v89 = v127;
  v91 = *v127;
  v90 = v127[1];
  v92 = v146;
  if ((unint64_t)v146 >> 62)
  {
    if (v146 < 0) {
      v119 = v146;
    }
    else {
      v119 = v146 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v127[1]);
    swift_bridgeObjectRetain(v92);
    v120 = sub_1000BED3C(&qword_100294FF0);
    v94 = _bridgeCocoaArray<A>(_:)(v119, v120);
    swift_bridgeObjectRelease_n(v92, 2LL);
    v92 = v94;
  }

  else
  {
    swift_bridgeObjectRetain(v127[1]);
    v93 = swift_bridgeObjectRetain(v92);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v93);
    swift_bridgeObjectRelease(v92);
    v94 = v92;
  }

  a3(1LL, v91, v90, v94, 0LL);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v92);
  v95 = (uint64_t)v89;
  return sub_1000CECE0(v95, type metadata accessor for Goldilocks_InitiateExitResponse);
}

    if (a7) {
      goto LABEL_33;
    }
  }

  else
  {
    char v30 = (void *)objc_claimAutoreleasedReturnValue([v13 lastCPLError]);
    id v31 = v30;
    if (v30) {
      __int128 v32 = v30;
    }
    else {
      __int128 v32 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
    }
    id v29 = v32;

    id v11 = 0LL;
    if (a7)
    {
LABEL_33:
      if (!v11) {
        *a7 = v29;
      }
    }
  }

  return v11;
}

void sub_100012140(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v7 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 libraryIdentifier]);
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (!v6) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1000124E8(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engine]);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 80);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000125E0;
  v5[3] = &unk_10023E5E0;
  uint64_t v4 = *(void *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 72);
  id v7 = *(id *)(a1 + 40);
  char v11 = *(_BYTE *)(a1 + 80);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [v2 forceBackupWithActivity:v4 forceClientPush:v3 completionHandler:v5];
}

void sub_1000125E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 72LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100012734;
  v12[3] = &unk_10023E5B8;
  id v13 = v3;
  id v14 = v4;
  id v6 = *(id *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 32);
  id v19 = v6;
  uint64_t v15 = v7;
  id v16 = *(id *)(a1 + 48);
  char v20 = *(_BYTE *)(a1 + 80);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100015800;
  block[3] = &unk_10023DBC8;
  id v22 = v8;
  id v9 = v5;
  id v10 = v3;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

id sub_100012734(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_1000109E4();
      id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v4 = *(void *)(a1 + 40);
        int v10 = 138412546;
        uint64_t v11 = v4;
        __int16 v12 = 2112;
        uint64_t v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Requested forced backup failed for %@: %@",  (uint8_t *)&v10,  0x16u);
      }
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000109E4();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v10 = 138412290;
        uint64_t v11 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Requested forced backup for %@ succeeded",  (uint8_t *)&v10,  0xCu);
      }
    }

    return [*(id *)(a1 + 48) _forceBackupWithActivity:*(void *)(a1 + 56) forceClientPush:*(unsigned __int8 *)(a1 + 88) enumerator:*(void *)(a1 + 64) progress:*(void *)(a1 + 72) completionHandler:*(void *)(a1 + 80)];
  }

void sub_100012C78(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] engine]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100012D48;
  v5[3] = &unk_10023E1B0;
  int8x16_t v4 = *((int8x16_t *)a1 + 2);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  id v7 = a1[6];
  id v8 = a1[7];
  id v9 = a1[8];
  [v2 performMaintenanceCleanupWithCompletionHandler:v5];
}

void sub_100012D48(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 72LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100012E5C;
  v9[3] = &unk_10023E1B0;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v10 = v4;
  uint64_t v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  int8x16_t v6 = v9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100015800;
  block[3] = &unk_10023DBC8;
  id v16 = v6;
  id v7 = v3;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v8);
}

id sub_100012E5C(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000109E4();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Requested maintenance for %@ completed",  (uint8_t *)&v6,  0xCu);
    }
  }

  return [*(id *)(a1 + 40) _executeMaintenanceWithEnumerator:*(void *)(a1 + 48) progress:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
}

BOOL sub_1000130A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToString:CPLLibraryIdentifierSystemLibrary])
  {
    BOOL v4 = 1LL;
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v3]);
    BOOL v4 = v5 != 0LL;
  }

  return v4;
}

void sub_100013110(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setCompletedUnitCount:", objc_msgSend(v3, "totalUnitCount"));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100013258(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordComputeStatePushQueue]);
  if ([v2 countOfComputeStates])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) engine]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 scheduler]);
    [v4 noteScopeNeedsToUploadComputeState];

    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000109E4();
      int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        int v8 = 138412290;
        uint64_t v9 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Requesting sync session to upload compute states for %@",  (uint8_t *)&v8,  0xCu);
      }
    }
  }
}

void sub_10001387C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_1000138A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000138B8(uint64_t a1)
{
}

void sub_1000138C0(uint64_t a1)
{
  id v2 = *(dispatch_source_s **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

void sub_100013914(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL))
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
    [*(id *)(a1 + 40) setCancellationHandler:0];
    [*(id *)(a1 + 48) _removeEngineWrapperOpenObserverWithIdentifier:*(void *)(a1 + 56)];
  }
}

void sub_1000139C4(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    id v2 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(a1 + 32));
    dispatch_time_t v3 = dispatch_time(0LL, (uint64_t)(*(double *)&qword_10028FC50 * 1000000000.0));
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100013B0C;
    v9[3] = &unk_10023E6A8;
    id v4 = v2;
    uint64_t v5 = *(void *)(a1 + 72);
    id v10 = v4;
    uint64_t v13 = v5;
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    dispatch_source_set_event_handler(v4, v9);
    uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v4;
    int v8 = v4;

    dispatch_resume(v8);
  }

void sub_100013B0C(void *a1)
{
  if (a1[4] == *(void *)(*(void *)(a1[7] + 8LL) + 40LL))
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_1000109E4();
      dispatch_time_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = a1[5];
        int v7 = 138412290;
        uint64_t v8 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Client has not tried to open %@ for a long time",  (uint8_t *)&v7,  0xCu);
      }
    }

    uint64_t v5 = a1[6];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  83LL,  @"Client failed to open library in time"));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

void sub_100013C14(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100013CE8;
  v7[3] = &unk_10023E6F8;
  __int128 v6 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v6;
  __int128 v8 = v6;
  dispatch_time_t v3 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100015800;
  block[3] = &unk_10023DBC8;
  id v10 = v3;
  uint64_t v4 = v1;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v4, v5);
}

void sub_100013CE8(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000109E4();
    dispatch_time_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = NSStringFromSelector(*(SEL *)(a1 + 40));
      dispatch_block_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      int v8 = 138543362;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@ cancelled", (uint8_t *)&v8, 0xCu);
    }
  }

  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors operationCancelledError](&OBJC_CLASS___CPLErrors, "operationCancelledError"));
  (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
}

void sub_100013DE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) openError]);
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_100013E2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_100013E40(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 libraryIdentifier]);
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 40)];

  if (v7)
  {
    id v8 = v10;
    if (v5)
    {
      id v8 = 0LL;
      id v9 = v5;
    }

    else
    {
      id v9 = 0LL;
    }

    (*(void (**)(void, id, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v8, v9);
  }
}

void sub_100013F64(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v15]);
  if (v6)
  {
LABEL_7:

    goto LABEL_8;
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 openError]);
  unsigned int v8 = [v7 isCPLErrorWithCode:1014];

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 parameters]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 cloudLibraryStateStorageURL]);

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 openError]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 userInfo]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:CPLErrorResetReason]);
    uint64_t v13 = (void *)v12;
    if (v12) {
      id v14 = (const __CFString *)v12;
    }
    else {
      id v14 = @"no reason";
    }
    +[CPLPrequeliteStore wipeStoreAtNextOpeningWithCloudLibraryStorageURL:reason:]( &OBJC_CLASS___CPLPrequeliteStore,  "wipeStoreAtNextOpeningWithCloudLibraryStorageURL:reason:",  v6,  v14);

    [*(id *)(a1 + 40) addObject:v15];
    goto LABEL_7;
  }

LABEL_8:
}

    id v5 = 0LL;
    goto LABEL_9;
  }

  if ([v3 scopeType] == (id)4) {
    id v5 = 2LL;
  }
  else {
    id v5 = 1LL;
  }
LABEL_9:

  return v5;
}

  return v19;
}

  unsigned int v7 = 1;
  if (a3 <= 43)
  {
    if (a3 > 28)
    {
      if (a3 == 29)
      {
        self->_mustFix22666940 = 1;
      }

      else if (a3 == 36)
      {
        unsigned int v8 = 128LL;
        goto LABEL_27;
      }
    }

    else if (a3 == 21)
    {
      dbURL = self->_dbURL;
      __int128 v23 = 0LL;
      id v22 = 0LL;
      id v14 = -[NSURL getResourceValue:forKey:error:]( dbURL,  "getResourceValue:forKey:error:",  &v23,  NSURLCreationDateKey,  &v22);
      id v15 = v23;
      id v16 = v22;
      if ((v14 & 1) == 0)
      {
        if (!_CPLSilentLogging)
        {
          id v17 = sub_10015409C();
          id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            id v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL path](self->_dbURL, "path"));
            *(_DWORD *)buf = 138412546;
            id v25 = v19;
            id v26 = 2112;
            id v27 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Can't get creation date for %@: %@",  buf,  0x16u);
          }
        }

        char v20 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));

        id v15 = (id)v20;
      }

      unsigned int v7 = -[CPLPrequeliteStore addGlobalVariable:defaultValue:error:]( self,  "addGlobalVariable:defaultValue:error:",  self->_libraryCreationDateVar,  v15,  0LL);
    }

    else if (a3 == 28)
    {
      unsigned int v8 = 96LL;
      goto LABEL_27;
    }
  }

  else
  {
    if (a3 <= 50)
    {
      if (a3 == 44)
      {
        id v9 = 176LL;
      }

      else
      {
        if (a3 != 50) {
          return v7;
        }
        id v9 = 216LL;
      }

      id v10 = *(void *)&self->CPLPlatformObject_opaque[v9];
      uint64_t v12 = &off_10025A428;
      id v11 = self;
      return -[CPLPrequeliteStore addGlobalVariable:defaultValue:error:]( v11,  "addGlobalVariable:defaultValue:error:",  v10,  v12,  0LL);
    }

    switch(a3)
    {
      case '3':
        if (-[CPLPrequeliteStore addGlobalVariable:defaultValue:error:]( self,  "addGlobalVariable:defaultValue:error:",  self->_shouldUpdateDisabledFeaturesVar,  &off_10025A428,  0LL))
        {
          unsigned int v8 = 192LL;
          goto LABEL_27;
        }

        return 0;
      case '=':
        unsigned int v8 = 208LL;
        goto LABEL_27;
      case 'Q':
        unsigned int v8 = 136LL;
LABEL_27:
        id v10 = *(void *)&self->CPLPlatformObject_opaque[v8];
        id v11 = self;
        uint64_t v12 = 0LL;
        return -[CPLPrequeliteStore addGlobalVariable:defaultValue:error:]( v11,  "addGlobalVariable:defaultValue:error:",  v10,  v12,  0LL);
    }
  }

  return v7;
}

  id v10 = -[PQLRawInjection initWithData:](objc_alloc(&OBJC_CLASS___PQLRawInjection), "initWithData:", v5);

  return v10;
}

  return v14;
}

void sub_1000142A8(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 libraryIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v5]);
  BOOL v7 = v6 == 0LL;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  id v9 = [WeakRetained wrapperArray:*(void *)(a1 + 32) countOfClientsForWrapper:v4];

  id v10 = -[CPLEngineWrapperStatus initWithWrapper:clientCount:isOpened:openError:]( objc_alloc(&OBJC_CLASS___CPLEngineWrapperStatus),  "initWithWrapper:clientCount:isOpened:openError:",  v4,  v9,  v7,  0LL);
  [*(id *)(a1 + 40) addObject:v10];
}

void sub_100014374(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:a2]);

  if (!v5)
  {
    uint64_t v6 = objc_alloc(&OBJC_CLASS___CPLEngineWrapperStatus);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v10 parameters]);
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v10 openError]);
    id v9 = -[CPLEngineWrapperStatus initWithParameters:clientCount:isOpened:openError:]( v6,  "initWithParameters:clientCount:isOpened:openError:",  v7,  0LL,  0LL,  v8);

    [*(id *)(a1 + 40) addObject:v9];
  }
}

void sub_1000144E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000144F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 engine]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 configurationDictionary]);
  if (!v3)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v6;

LABEL_6:
    BOOL v7 = v4;
    goto LABEL_7;
  }

  id v11 = (id)v6;

  if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) compare:v11] == (id)-1)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v4 = v11;
    id v5 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v4;
    goto LABEL_6;
  }

  BOOL v7 = v11;
LABEL_7:
}

void sub_100014670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100014688(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 engine]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 configurationDictionary]);
  if (v3)
  {
    id v11 = (id)v6;

    if ([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) compare:v11] != (id)1)
    {
      uint64_t v10 = v11;
      goto LABEL_7;
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v4 = v11;
    id v5 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v4;
  }

  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v6;
  }

  uint64_t v10 = v4;
LABEL_7:
}

void sub_100014A6C(uint64_t a1, void *a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a2 engine]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
  [v3 updateConfigurationDictionary:*(void *)(a1 + 32)];
}

void sub_100014C08(id a1, NSString *a2, CPLEngineWrapper *a3, BOOL *a4)
{
  id v4 = a3;
  if (!-[CPLEngineWrapper inEmergencyClosing](v4, "inEmergencyClosing"))
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000109E4();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        uint64_t v8 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Emergency closing %@", (uint8_t *)&v7, 0xCu);
      }
    }

    -[CPLEngineWrapper emergencyClose](v4, "emergencyClose");
  }
}

uint64_t sub_100014F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a3 + 16))(a3, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1000157D4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.wrapper.array");
  uint64_t v3 = (void *)qword_100295F38;
  qword_100295F38 = (uint64_t)v2;
}

void sub_100015800(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_1000159B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000159CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _activityHasExpired];
}

void sub_100015B34(void *a1)
{
}

void sub_100015B48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100015B68(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 12LL);
  return result;
}

void sub_100015CA8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) shouldDefer])
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (!*(void *)(*(void *)(a1 + 32) + 24LL))
    {
      os_log_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v3 = *(void *)(a1 + 32);
      id v4 = *(void **)(v3 + 24);
      *(void *)(v3 + 24) = v2;
    }

    id v6 = [*(id *)(a1 + 48) copy];
    id v5 = objc_retainBlock(v6);
    [*(id *)(*(void *)(a1 + 32) + 24) setObject:v5 forKeyedSubscript:*(void *)(a1 + 40)];
  }

id sub_100015E44(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_100015F18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  [WeakRetained activityHasExpired:*(void *)(a1 + 32)];

  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 32);
  id v4 = v3 + 2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  id v11 = sub_100016048;
  uint64_t v12 = &unk_10023DC70;
  uint64_t v13 = v3;
  id v5 = v10;
  os_unfair_lock_lock(v4);
  v11((uint64_t)v5);
  os_unfair_lock_unlock(v4);

  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 24);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100016060;
  v9[3] = &unk_10023E8A0;
  void v9[4] = v6;
  [v7 enumerateKeysAndObjectsUsingBlock:v9];
  return [*(id *)(*(void *)(a1 + 32) + 24) removeAllObjects];
}

void sub_100016020(void *a1)
{
}

void sub_100016034(_Unwind_Exception *a1)
{
}

uint64_t sub_100016048(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 12LL) = 1;
  return result;
}

uint64_t sub_100016060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(void *)(a1 + 32));
}

void sub_100016514(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100016868( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100016888(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_1000169C8();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v9 = 138412546;
        id v10 = WeakRetained;
        __int16 v11 = 2112;
        uint64_t v12 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ disconnected from %@",  (uint8_t *)&v9,  0x16u);
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 8) markLibraryManagerAsInvalid];
    [*(id *)(a1 + 32) _dropManagerWithCompletionBlock:&stru_10023E8C0];
    [*(id *)(*(void *)(a1 + 32) + 88) setDelegate:0];
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(void **)(v6 + 88);
    *(void *)(v6 + 8_Block_object_dispose(va, 8) = 0LL;

    id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
    [v8 daemonLibraryManagerHasBeenDisconnected:*(void *)(a1 + 32)];

    [WeakRetained setInvalidationHandler:0];
  }
}

id sub_1000169C8()
{
  if (qword_100295F40 != -1) {
    dispatch_once(&qword_100295F40, &stru_10023EE30);
  }
  return (id)qword_100295F48;
}

void sub_100016F74(id a1, NSString *a2, CPLResourceTransferTask *a3, BOOL *a4)
{
}

void sub_100016F7C(id a1, NSString *a2, CPLForceSyncTask *a3, BOOL *a4)
{
}

id sub_100016F84(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Discarded library", v5, 2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  return [*(id *)(*(void *)(a1 + 32) + 8) setDelegate:0];
}

void sub_1000170F8(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100017204;
  v9[3] = &unk_10023E058;
  id v2 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v2;
  id v3 = objc_retainBlock(v9);
  id v4 = *(void **)(a1 + 32);
  if (v4[11])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _clientWithErrorHandler:&stru_10023E9A8]);
    [v5 libraryManagerHasBeenReplaced];

    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 88LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100017378;
    v7[3] = &unk_10023DBC8;
    id v8 = v3;
    [v6 scheduleSendBarrierBlock:v7];
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_100017204(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Force dropping library manager for %@ and killing caller",  buf,  0xCu);
    }
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100017308;
  v6[3] = &unk_10023E058;
  uint64_t v5 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v5;
  [v7 _dropManagerWithCompletionBlock:v6];
}

uint64_t sub_100017308(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = 0LL;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
  [WeakRetained daemonLibraryManagerHasBeenDisconnected:*(void *)(a1 + 32)];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100017378(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100017464(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Force dropping library manager for %@",  buf,  0xCu);
    }
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100017574;
  v6[3] = &unk_10023E058;
  uint64_t v5 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v5;
  [v7 _dropManagerWithCompletionBlock:v6];
}

uint64_t sub_100017574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = 0LL;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
  [WeakRetained daemonLibraryManagerHasBeenDisconnected:*(void *)(a1 + 32)];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100017768(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100017854;
  v8[3] = &unk_10023DB10;
  void v8[4] = v2;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  uint64_t v5 = v8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100022874;
  block[3] = &unk_10023DBC8;
  id v12 = v5;
  uint64_t v6 = v4;
  dispatch_block_t v7 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v6, v7);
}

id sub_100017854(uint64_t a1)
{
  return [*(id *)(a1 + 32) _whenThereIsNoOtherLibraryManagersOpenedWithLibraryIdentifier:*(void *)(a1 + 40) callBlock:*(void *)(a1 + 48)];
}

void sub_100017988(uint64_t a1, void *a2)
{
  if (*(void **)(a1 + 32) != a2)
  {
    id v3 = *(dispatch_group_s **)(a1 + 40);
    id v4 = a2;
    dispatch_group_enter(v3);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100017A24;
    v5[3] = &unk_10023DC70;
    id v6 = *(id *)(a1 + 40);
    [v4 _dropWithCompletionBlock:v5];
  }

void sub_100017A24(uint64_t a1)
{
}

uint64_t sub_100017A2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100017BB8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[7];
  id v45 = 0LL;
  uint64_t v11 = objc_claimAutoreleasedReturnValue( [WeakRetained daemonLibraryManager:v4 engineWrapperWithClientLibraryBaseURL:v5 cloudLibraryStateStorageURL:v6 cloudLibraryResourceS torageURL:v7 libraryIdentifier:v8 mainScopeIdentifier:v9 options:v10 error:&v45]);
  id v12 = v45;
  uint64_t v13 = *(void **)(*v2 + 104);
  *(void *)(*v2 + 104) = v11;

  if (*(void *)(*v2 + 104))
  {
    id v14 = -[CPLLibraryManager initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:mainScopeIdentifier:options:]( objc_alloc(&OBJC_CLASS___CPLLibraryManager),  "initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:ma inScopeIdentifier:options:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 88));
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 8);
    *(void *)(v15 + _Block_object_dispose(va, 8) = v14;

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setDelegate:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setResourceProgressDelegate:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setForceSyncDelegate:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setRecordComputeStateDelegate:");
    uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) platformObject]);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 16);
    *(void *)(v18 + 16) = v17;

    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 16LL);
    uint64_t v21 = objc_opt_class(&OBJC_CLASS___CPLDirectLibraryManager);
    if ((objc_opt_isKindOfClass(v20, v21) & 1) == 0) {
      sub_10018E9A0(v2, a1);
    }
    [*(id *)(*v2 + 16) setClientQueue:*(void *)(*v2 + 56)];
    id v22 = *(void **)(*v2 + 16);
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*v2 + 104) engine]);
    [v22 setEngineLibrary:v23];

    if (!_CPLSilentLogging)
    {
      id v24 = sub_1000169C8();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *(void *)(*v2 + 8);
        *(_DWORD *)buf = 138412290;
        uint64_t v47 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Opening %@", buf, 0xCu);
      }
    }

    id v27 = *(id *)(*(void *)(a1 + 32) + 8LL);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_100017FC0;
    v41[3] = &unk_10023E9F8;
    uint64_t v28 = *(void *)(a1 + 32);
    id v42 = v27;
    uint64_t v43 = v28;
    id v44 = *(id *)(a1 + 80);
    id v29 = v27;
    [v29 openWithCompletionHandler:v41];

    goto LABEL_20;
  }

  if (![v12 isCPLErrorWithCode:2005])
  {
LABEL_19:
    (*(void (**)(void, id, void, void))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  v12,  0LL,  0LL);
    goto LABEL_20;
  }

  id v30 = objc_loadWeakRetained((id *)(*v2 + 112));

  if (!v30)
  {
    if (!_CPLSilentLogging)
    {
      id v37 = sub_1000169C8();
      id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = *(void *)(a1 + 32);
        uint64_t v40 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138412546;
        uint64_t v47 = v39;
        __int16 v48 = 2114;
        uint64_t v49 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%@ tried to open a mismatched %{public}@ but there is not delegate to reset parameters",  buf,  0x16u);
      }
    }

    goto LABEL_19;
  }

  if (!_CPLSilentLogging)
  {
    id v31 = sub_1000169C8();
    __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void *)(a1 + 64);
      id v35 = objc_loadWeakRetained((id *)(v33 + 112));
      *(_DWORD *)buf = 138412802;
      uint64_t v47 = v33;
      __int16 v48 = 2114;
      uint64_t v49 = v34;
      __int16 v50 = 2112;
      id v51 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%@ tried to open a mismatched %{public}@ - resetting parameters and asking %@ to quit immediately",  buf,  0x20u);
    }
  }

  id v36 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
  [v36 daemonLibraryManager:*(void *)(a1 + 32) wantsToExitAfterResettingParametersForLibraryWithIdentifier:*(void *)(a1 + 64)];

LABEL_20:
}

void sub_100017FC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_1000169C8();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@ failed to open with error: %@", buf, 0x16u);
      }
    }

    if ([v3 isCPLErrorWithCode:2003])
    {
      uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 56LL);
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472LL;
      v36[2] = sub_100018404;
      v36[3] = &unk_10023DB10;
      id v8 = v3;
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void **)(a1 + 48);
      id v37 = v8;
      uint64_t v38 = v9;
      id v39 = v10;
      uint64_t v11 = v36;
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_100022874;
      uint64_t v43 = &unk_10023DBC8;
      id v44 = v11;
      id v12 = v7;
      dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v12, v13);
    }

    else
    {
      (*(void (**)(void, id, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v3,  0LL,  0LL);
    }
  }

  else
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) libraryVersion]);
    if (!_CPLSilentLogging)
    {
      id v15 = sub_1000169C8();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%@ opened successfully with version %@",  buf,  0x16u);
      }
    }

    id v35 = (void *)v14;
    v40[0] = @"status";
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) status]));
    v40[1] = @"error";
    v41[0] = v18;
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) statusError]);
    uint64_t v20 = v19;
    if (!v19) {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    }
    v41[1] = v20;
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v41,  v40,  2LL));
    if (!v19) {

    }
    if (!_CPLSilentLogging)
    {
      id v21 = sub_1000169C8();
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v24 = *(void *)(v23 + 104);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%@ attached to daemon's engine %@",  buf,  0x16u);
      }
    }

    uint64_t v25 = *(void *)(a1 + 48);
    id v33 = [*(id *)(a1 + 32) sizeOfResourcesToUpload];
    id v26 = [*(id *)(a1 + 32) sizeOfOriginalResourcesToUpload];
    id v27 = [*(id *)(a1 + 32) numberOfImagesToUpload];
    id v28 = [*(id *)(a1 + 32) numberOfVideosToUpload];
    id v29 = [*(id *)(a1 + 32) numberOfOtherItemsToUpload];
    id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 104) libraryIdentifier]);
    id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 104) mainScopeIdentifier]);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 104) clientLibraryBaseURL]);
    (*(void (**)(uint64_t, void, void *, id, id, id, id, id, void *, void *, void *, void *))(v25 + 16))( v25,  0LL,  v34,  v33,  v26,  v27,  v28,  v29,  v35,  v30,  v31,  v32);
  }
}

void sub_100018404(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:CPLErrorWipeReasonKey]);
  id v4 = (void *)v3;
  uint64_t v5 = @"mismatched library options between client and engine";
  if (v3) {
    uint64_t v5 = (__CFString *)v3;
  }
  uint64_t v6 = v5;

  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(*(void *)(a1 + 40) + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000184E4;
  v9[3] = &unk_10023E058;
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  [v8 wipeWithReason:v6 completionHandler:v9];
}

void sub_1000184E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  2004LL,  *(void *)(a1 + 32),  @"Library has been wiped because library options are mismatched"));
  (*(void (**)(void, void *, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v2,  0LL,  0LL);
}

uint64_t sub_1000186F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000188CC(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 88LL);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100018974;
  v6[3] = &unk_10023EA48;
  id v7 = v2;
  id v8 = v3;
  void v6[4] = *(void *)(a1 + 32);
  id v5 = v2;
  [v4 deactivateWithCompletionHandler:v6];
}

void sub_100018974(void *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100018A0C;
  v4[3] = &unk_10023DC70;
  v4[4] = a1[4];
  id v2 = objc_retainBlock(v4);
  uint64_t v3 = (void *)a1[5];
  if (v3) {
    [v3 scheduleSendBarrierBlock:v2];
  }
  else {
    ((void (*)(void *))v2[2])(v2);
  }
}

id sub_100018A0C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100018A60;
  v3[3] = &unk_10023DC70;
  void v3[4] = v1;
  return [v1 _dropManagerWithCompletionBlock:v3];
}

void sub_100018A60(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 96LL);
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104LL);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2114;
      uint64_t v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@ has been deactivated by %{public}@ - exiting now if possible",  (uint8_t *)&v7,  0x16u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112LL));
  [WeakRetained daemonLibraryManagerWantsToExitNow:*(void *)(a1 + 32)];
}

void sub_100019154(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 taskIdentifier]);
  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000169C8();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        int v14 = 138413058;
        id v15 = v3;
        __int16 v16 = 2112;
        uint64_t v17 = v4;
        __int16 v18 = 2112;
        uint64_t v19 = v7;
        __int16 v20 = 2112;
        uint64_t v21 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got %@ with identifier %@ for %@(%@)",  (uint8_t *)&v14,  0x2Au);
      }
    }

    [*(id *)(*(void *)(a1 + 48) + 24) setObject:v3 forKey:v4];
    [*(id *)(a1 + 48) _storeVoucher:*(void *)(a1 + 56) forTaskWithIdentifier:v4];
    __int16 v9 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000169C8();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        id v12 = *(void **)(a1 + 32);
        dispatch_block_t v13 = *(void **)(a1 + 40);
        int v14 = 138412546;
        id v15 = v12;
        __int16 v16 = 2112;
        uint64_t v17 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Unable to get a download task for %@(%@)",  (uint8_t *)&v14,  0x16u);
      }
    }

    __int16 v9 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  v9();
}

void sub_100019730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000169C8();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 138412290;
        id v13 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Push session failed to begin with error %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    __int16 v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000169C8();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Push session %@ began",  (uint8_t *)&v12,  0xCu);
      }
    }

    +[CPLResetTracker discardTracker:](&OBJC_CLASS___CPLResetTracker, "discardTracker:", *(void *)(a1 + 32));
    __int16 v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v9();
}

void sub_100019AF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000169C8();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 138412290;
        id v13 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Pull session failed to begin with error %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    __int16 v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000169C8();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Pull session %@ began",  (uint8_t *)&v12,  0xCu);
      }
    }

    +[CPLResetTracker discardTracker:](&OBJC_CLASS___CPLResetTracker, "discardTracker:", *(void *)(a1 + 32));
    __int16 v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v9();
}

void sub_100019E98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_1000169C8();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 138412290;
        id v10 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Finalizing failed with error %@",  (uint8_t *)&v9,  0xCu);
      }
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000169C8();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Finalizing succeeded", (uint8_t *)&v9, 2u);
      }
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v6();
}

void sub_10001A23C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000169C8();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        id v12 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Getting changes failed with error %@",  buf,  0xCu);
      }
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v9 = sub_1000169C8();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Got %@", buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001A3A4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, void *a15)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(a1);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Exception raised while trying to send a batch to the client: %@"));
    if (!*v17)
    {
      id v20 = sub_1000169C8();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSByteCountFormatter stringFromByteCount:countStyle:]( NSByteCountFormatter,  "stringFromByteCount:countStyle:",  [v15 estimatedBatchSize],  1));
        LODWORD(buf) = 138412802;
        *(void *)((char *)&buf + 4) = v18;
        WORD6(buf) = 2112;
        *(void *)((char *)&buf + 14) = v22;
        a14 = 2112;
        a15 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Unable to send change batch to daemon: %@\nBatch (estimated size: %@): %@",  (uint8_t *)&buf,  0x20u);
      }
    }

    (*(void (**)(void))(*(void *)(v16 + 32) + 16LL))();

    objc_end_catch();
    JUMPOUT(0x10001A364LL);
  }

  _Unwind_Resume(a1);
}

void sub_10001A760(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000169C8();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Acknowledging batch failed with error %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    id v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000169C8();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 138412290;
        id v13 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Acknowledging batch succeeded with new library version %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    id v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v9();
}

void sub_10001AB60(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a4;
  id v10 = a5;
  if (v8)
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_1000169C8();
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 138412290;
        id v17 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Comitting batch failed with error %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    id v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v14 = sub_1000169C8();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 138412290;
        id v17 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Comitting batch succeeded with new library version %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    id v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v13();
}

uint64_t sub_10001B46C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001C7FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10001C980(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10001CB18(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10001D4E4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001D72C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  id v15 = (id)objc_claimAutoreleasedReturnValue([a6 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id, id, id, id))(v10 + 16))(v10, v14, v13, v12, v11, v15);
}

void sub_10001D954(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([a4 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v6 + 16))(v6, a2, a3, v7);
}

void sub_10001DBBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 taskIdentifier]);
  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000169C8();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v12 = 138412802;
        id v13 = v3;
        __int16 v14 = 2112;
        id v15 = v4;
        __int16 v16 = 2112;
        uint64_t v17 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got %@ with identifier %@ for %@",  (uint8_t *)&v12,  0x20u);
      }
    }

    [*(id *)(*(void *)(a1 + 40) + 24) setObject:v3 forKey:v4];
    [*(id *)(a1 + 40) _storeVoucher:*(void *)(a1 + 48) forTaskWithIdentifier:v4];
    id v8 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_1000169C8();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        id v11 = *(void **)(a1 + 32);
        int v12 = 138412290;
        id v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Unable to get an in-memory download task for %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  v8();
}

void sub_10001E15C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001E340(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001E528(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10001E6F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001E8D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001EAB4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10001EC60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001EE5C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001F06C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001F234(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

void sub_10001F550(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10001F7C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 taskIdentifier]);
  if (v4)
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000169C8();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentsJoinedByString:", @", "));
        int v12 = 138412802;
        id v13 = v3;
        __int16 v14 = 2112;
        id v15 = v4;
        __int16 v16 = 2112;
        uint64_t v17 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got %@ with identifier %@ for %@",  (uint8_t *)&v12,  0x20u);
      }
    }

    [*(id *)(*(void *)(a1 + 40) + 40) setObject:v3 forKeyedSubscript:v4];
    [*(id *)(a1 + 40) _storeVoucher:*(void *)(a1 + 48) forTaskWithIdentifier:v4];
    id v8 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_1000169C8();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentsJoinedByString:", @", "));
        int v12 = 138412290;
        id v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Unable to get a sync task for %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  v8();
}

void sub_10001FCB4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_1000169C8();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to send status did change to client: %@",  (uint8_t *)&v5,  0xCu);
    }
  }
}

void sub_10001FF10(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_1000169C8();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to notify client has changes to pull: %@",  (uint8_t *)&v5,  0xCu);
    }
  }
}

void sub_1000200A8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (!_CPLSilentLogging)
  {
    id v3 = sub_1000169C8();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to notify client has status changes: %@",  (uint8_t *)&v5,  0xCu);
    }
  }
}

void sub_1000202E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to ask client for (local) %@: %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100020504(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to ask client to push all changes: %@",  (uint8_t *)&v6,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10002071C(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000207A0;
  v4[3] = &unk_10023E430;
  uint64_t v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientWithErrorHandler:v4]);
  [v3 downloadDidStartForResourceTransferTask:*(void *)(a1 + 48)];
}

void sub_1000207A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did start downloading: %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_1000209E4(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100020A6C;
  v5[3] = &unk_10023E430;
  uint64_t v2 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientWithErrorHandler:v5]);
  LODWORD(v4) = *(_DWORD *)(a1 + 56);
  [v3 downloadDidProgress:*(void *)(a1 + 48) forResourceTransferTask:v4];
}

void sub_100020A6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did progress: %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_100020D10(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100020DC0;
  v7[3] = &unk_10023E430;
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientWithErrorHandler:v7]);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) cplSafeErrorForXPC]);
  [v3 downloadDidFinishForResourceTransferTask:v4 finalResource:v5 withError:v6];
}

void sub_100020DC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did finish downloading: %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_10002105C(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10002110C;
  v7[3] = &unk_10023E430;
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientWithErrorHandler:v7]);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) cplSafeErrorForXPC]);
  [v3 inMemoryDownloadDidFinishForResourceTransferTask:v4 data:v5 withError:v6];
}

void sub_10002110C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did finish downloading: %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_100021304(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ was downloaded in background",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_1000214DC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ failed to download in background",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_100021778(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did start",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_1000219FC(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did finish",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_100021C50(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did progress",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_100021E44(id a1, NSError *a2)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000169C8();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to notify client that size of resources to upload did change",  v4,  2u);
    }
  }

void sub_100022118(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 cplSafeErrorForXPC]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

void sub_100022178(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000221FC;
  v4[3] = &unk_10023E430;
  id v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientWithErrorHandler:v4]);
  [v3 forceSyncDidFinishForTask:*(void *)(a1 + 48) withErrors:*(void *)(a1 + 56)];
}

void sub_1000221FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_1000169C8();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to notify client that %@ did finish force sync: %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_1000223B8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100022444;
  v4[3] = &unk_10023EAE8;
  id v5 = *(id *)(a1 + 56);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientWithErrorHandler:v4]);
  [v3 providePayloadForComputeStates:*(void *)(a1 + 40) inFolderWithURL:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

uint64_t sub_100022444(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100022848(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "daemon.proxy");
  id v3 = (void *)qword_100295F48;
  qword_100295F48 = (uint64_t)v2;
}

void sub_100022874(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000228A8()
{
  return objc_opt_class(*(void *)(*(void *)v0 + 16LL));
}

void sub_1000228B4()
{
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification( DistributedCenter,  @"com.apple.cpl.wantslibrary.notification",  0LL,  0LL,  1u);
}

id sub_100023574(id a1)
{
  return a1;
}

void sub_10002358C( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

uint64_t sub_1000235A0()
{
  return objc_opt_class(v0);
}

uint64_t sub_1000235A8()
{
  return objc_opt_class(v0);
}

uint64_t sub_1000235B4()
{
  return objc_opt_class(*(void *)(v0 + 328));
}

id sub_1000235C0(void *a1)
{
  return a1;
}

BOOL sub_100023B8C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = a3;
  int v7 = (void *)v6;
  if (!a1) {
    goto LABEL_9;
  }
  BOOL v8 = (v5 | v6) == 0;
  if (!v5 || !v6) {
    goto LABEL_12;
  }
  if ([(id)v5 isEqual:v6])
  {
    BOOL v8 = 1LL;
    goto LABEL_12;
  }

  __int16 v9 = realpath_DARWIN_EXTSN( (const char *)[(id) v5 fileSystemRepresentation], 0);
  if (!v9)
  {
LABEL_9:
    BOOL v8 = 0LL;
    goto LABEL_12;
  }

  id v10 = v9;
  id v11 = realpath_DARWIN_EXTSN((const char *)[v7 fileSystemRepresentation], 0);
  if (v11)
  {
    int v12 = v11;
    BOOL v8 = strcmp(v10, v11) == 0;
    free(v12);
  }

  else
  {
    BOOL v8 = 0LL;
  }

  free(v10);
LABEL_12:

  return v8;
}

id sub_100023FDC()
{
  if (qword_100295F60 != -1) {
    dispatch_once(&qword_100295F60, &stru_10023EF10);
  }
  return (id)qword_100295F68;
}

void sub_1000240E0(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  os_log_t v2 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  CPLLibraryIdentifierSystemLibrary,  CPLLibraryIdentifierSyndicationLibrary,  0LL);
  id v3 = (void *)qword_100295F50;
  qword_100295F50 = (uint64_t)v2;
}

LABEL_39:
      goto LABEL_40;
    }

    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"clientLibraryBasePath"]);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"cloudLibraryStateStoragePath"]);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"cloudLibraryResourceStoragePath"]);
    id v37 = v28;
    if (v28) {
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:isDirectory:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:isDirectory:",  v28,  1LL));
    }
    if (v41) {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:isDirectory:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:isDirectory:",  v41,  1LL));
    }
    else {
      uint64_t v38 = 0LL;
    }
    if (v39) {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:isDirectory:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:isDirectory:",  v39,  1LL));
    }
    else {
      uint64_t v40 = 0LL;
    }
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"options"]);
    id v36 = [v29 integerValue];

    if (v41 && v28 && v40)
    {
      if (!_CPLSilentLogging)
      {
        id v30 = sub_100023FDC();
        id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          id v44 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Upgrading old engine info for %{public}@",  buf,  0xCu);
        }
      }

      __int128 v32 = objc_alloc(&OBJC_CLASS___CPLEngineParameters);
      id v33 = -[CPLEngineParameters initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier:mainScopeIdentifier:options:]( v32,  "initWithClientLibraryBaseURL:cloudLibraryStateStorageURL:cloudLibraryResourceStorageURL:libraryIdentifier: mainScopeIdentifier:options:",  v28,  v38,  v40,  v20,  CPLPrimaryScopeIdentifier,  v36);
      -[CPLEngineParametersStorage _saveParameters:withKey:](v13, "_saveParameters:withKey:", v33, v24);
    }

    else
    {
      if (_CPLSilentLogging)
      {
LABEL_38:

        id v26 = 0LL;
        goto LABEL_39;
      }

      uint64_t v34 = sub_100023FDC();
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        id v44 = v20;
        id v45 = 2112;
        v46 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Discarding old invalid engine info for %{public}@: %@",  buf,  0x16u);
      }
    }

    goto LABEL_38;
  }

LABEL_40:
    id v18 = v75;
    goto LABEL_41;
  }

  if (v83)
  {
    if (!_CPLSilentLogging)
    {
      id v30 = __CPLGenericOSLogDomain(v19);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v86 = self;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%@ is an unsupported sparse record - interpreting as a delete",  buf,  0xCu);
      }

      goto LABEL_12;
    }

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
  {
    v104 = *(void *)(a1 + v17);
    v105 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
    v106 = swift_retain(v104);
    v107 = sub_1000E5C5C(v106);
    swift_release(v104);
    v108 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = v107;
    swift_release(v108);
  }

  v109 = *(void *)(a1 + v17);
  swift_beginAccess(v109 + 96, v117, 1LL, 0LL);
  *(void *)(v109 + 96) = v40;
  *(_BYTE *)(v109 + 104) = 1;
}

  uint64_t v43 = -[CPLPrequelitePushRepository _storeChange:update:error:](self, "_storeChange:update:error:", v11, 1LL, v56);

  return v43;
}

void sub_100024CA4(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 hasPrefix:@"CPLEngineParameters-"])
  {
    id v3 = [v6 length];
    if (v3 > [@"CPLEngineParameters-" length])
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v6,  "substringWithRange:",  objc_msgSend(@"CPLEngineParameters-", "length"),  (_BYTE *)objc_msgSend(v6, "length")
                     - (_BYTE *)[@"CPLEngineParameters-" length]));
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) parametersForLibraryIdentifier:v4]);
      if (v5) {
        [*(id *)(a1 + 40) addObject:v5];
      }
    }
  }
}

int64_t sub_100024D78(id a1, CPLEngineParameters *a2, CPLEngineParameters *a3)
{
  id v4 = a2;
  unint64_t v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineParameters libraryIdentifier](v4, "libraryIdentifier"));
  int v7 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineParameters libraryIdentifier](v5, "libraryIdentifier"));
  unsigned __int8 v8 = [v6 isEqualToString:v7];

  if ((v8 & 1) != 0)
  {
    int64_t v9 = 0LL;
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineParameters libraryIdentifier](v4, "libraryIdentifier"));
    uint64_t v11 = CPLLibraryIdentifierSystemLibrary;
    unsigned __int8 v12 = [v10 isEqualToString:CPLLibraryIdentifierSystemLibrary];

    if ((v12 & 1) != 0)
    {
      int64_t v9 = -1LL;
    }

    else
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineParameters libraryIdentifier](v5, "libraryIdentifier"));
      unsigned __int8 v14 = [v13 isEqualToString:v11];

      if ((v14 & 1) != 0)
      {
        int64_t v9 = 1LL;
      }

      else
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineParameters libraryIdentifier](v4, "libraryIdentifier"));
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineParameters libraryIdentifier](v5, "libraryIdentifier"));
        int64_t v9 = (int64_t)[v15 compare:v16];
      }
    }
  }

  return v9;
}

void sub_100025250(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.parameters");
  id v3 = (void *)qword_100295F68;
  qword_100295F68 = (uint64_t)v2;
}

void sub_10002540C(void *a1)
{
}

void sub_100025420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100025440(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100025450(uint64_t a1)
{
}

void sub_100025458(uint64_t a1)
{
}

void sub_100025520(void *a1)
{
}

void sub_100025534( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

double sub_100025554(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 96LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100025610(void *a1)
{
}

void sub_100025624(_Unwind_Exception *a1)
{
}

id sub_100025638(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v2;

  [*(id *)(a1 + 40) expectedDuration];
  *(void *)(*(void *)(a1 + 32) + 96LL) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  double v7 = *(double *)(v6 + 96);
  if (v7 == 0.0)
  {
    [*(id *)(v6 + 120) minimumRuntime];
    *(void *)(*(void *)(a1 + 32) + 96LL) = v8;
    uint64_t v6 = *(void *)(a1 + 32);
    double v7 = *(double *)(v6 + 96);
  }

  [*(id *)(v6 + 120) minimumRuntimeLeeway];
  double v10 = v7 - v9;
  id result = [*(id *)(*(void *)(a1 + 32) + 120) minimumRuntimeLeeway];
  if (v10 >= v12) {
    double v12 = v10;
  }
  *(double *)(*(void *)(a1 + 32) + 96LL) = v12;
  return result;
}

void sub_1000257AC(void *a1)
{
}

void sub_1000257C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000257E0(uint64_t a1)
{
}

void sub_10002589C(void *a1)
{
}

void sub_1000258B0(_Unwind_Exception *a1)
{
}

void sub_1000258C4(uint64_t a1)
{
}

void sub_100025AB8(void *a1)
{
}

void sub_100025ACC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100025B04(void *a1)
{
}

id sub_100025C4C()
{
  if (qword_100295F70 != -1) {
    dispatch_once(&qword_100295F70, &stru_10023F088);
  }
  return (id)qword_100295F78;
}

#error "100025D90: call analysis failed (funcsize=68)"
void __cdecl -[CPLBGSTRescheduler _setCurrentActivity:](CPLBGSTRescheduler *self, SEL a2, id a3)
{
  os_unfair_lock_s *p_lock;
  id v5;
  void *v6;
  void v7[2];
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  CPLBGSTRescheduler *v11;
  p_lock = &self->_lock;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  uint64_t v8 = sub_100025E70;
  uint64_t v9 = &unk_10023DDE8;
  uint64_t v5 = a3;
  double v10 = v5;
  uint64_t v11 = self;
  uint64_t v6 = v7;
  os_unfair_lock_lock(p_lock);
  v8((uint64_t)v6);
  os_unfair_lock_unlock(p_lock);
}

void sub_100025E48(void *a1)
{
}

void sub_100025E5C(_Unwind_Exception *a1)
{
}

void sub_100025E70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(v2 + 120) now]);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = v3;
  }

  else
  {
    uint64_t v5 = *(void **)(v2 + 48);
    *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  double v7 = *(void **)(v6 + 56);
  *(void *)(v6 + 56) = 0LL;

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 16LL), *(id *)(a1 + 32));
}

void sub_1000262B0(id a1, NSUUID *a2, id a3)
{
}

uint64_t sub_1000265C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(void *)(a1 + 32));
}

void sub_1000266C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentActivity]);

  if (v2 == v3)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v4 = *(os_unfair_lock_s **)(a1 + 40);
    uint64_t v6 = v4 + 2;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    double v10 = sub_1000267BC;
    uint64_t v11 = &unk_10023EFC8;
    uint64_t v7 = *(void *)(a1 + 48);
    double v12 = v4;
    uint64_t v14 = v7;
    id v13 = v5;
    uint64_t v8 = v9;
    os_unfair_lock_lock(v6);
    v10((uint64_t)v8);
    os_unfair_lock_unlock(v6);

    objc_msgSend(*(id *)(*(void *)(a1 + 40) + 120), "activityHasExpired:forRescheduler:", *(void *)(a1 + 32));
  }

void sub_100026794(void *a1)
{
}

void sub_1000267A8(_Unwind_Exception *a1)
{
}

void sub_1000267BC(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 48)) {
    sub_10018F1CC();
  }
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(v2 + 120) now]);
  uint64_t v5 = *(void **)(*(void *)v3 + 56LL);
  *(void *)(*(void *)v3 + 56LL) = v4;

  if (!_CPLSilentLogging)
  {
    id v6 = sub_100025C4C();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      [*(id *)(*(void *)(a1 + 32) + 56) timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 48)];
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 96LL);
      int v11 = 138412802;
      uint64_t v12 = v8;
      __int16 v13 = 2048;
      uint64_t v14 = v10;
      __int16 v15 = 2048;
      uint64_t v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@ has expired after running for %.1fs (vs. estimated running time before expiration: %.1fs)",  (uint8_t *)&v11,  0x20u);
    }
  }

void sub_100026AA8(void *a1)
{
}

void sub_100026ABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100026ADC(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 16LL);
  if (result) {
    id result = [result shouldDefer];
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_100026BF8(void *a1)
{
}

void sub_100026C0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_100026C2C(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 48))
  {
    uint64_t v2 = result;
    id result = *(void **)(v1 + 56);
    if (result)
    {
      id result = objc_msgSend(result, "timeIntervalSinceDate:");
    }
  }

  return result;
}

void sub_100026D40(void *a1)
{
}

void sub_100026D54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100026D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 48);
  if (v2)
  {
    double v4 = *(double *)(v1 + 96);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 120) now]);
    [v2 timeIntervalSinceDate:v5];
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v4 + v6;

    *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = fmax( *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL)
                                                                              + 24LL),
                                                                    10.0);
  }

void sub_100026EE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentActivity]);
  if (v2)
  {
    uint64_t v45 = 0LL;
    v46 = &v45;
    uint64_t v47 = 0x3032000000LL;
    __int16 v48 = sub_100025440;
    uint64_t v49 = sub_100025450;
    id v50 = 0LL;
    double v3 = *(os_unfair_lock_s **)(a1 + 32);
    double v4 = v3 + 2;
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    uint64_t v41 = sub_100027418;
    id v42 = &unk_10023DD58;
    uint64_t v43 = v3;
    id v44 = &v45;
    uint64_t v5 = v40;
    os_unfair_lock_lock(v4);
    v41((uint64_t)v5);
    os_unfair_lock_unlock(v4);

    if (!v46[5])
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v26 = __CPLGenericOSLogDomain();
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskIdentifier]);
          *(_DWORD *)buf = 138412290;
          v52 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%@ has been deferred without any current task",  buf,  0xCu);
        }
      }

      id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
      uint64_t v30 = *(void *)(a1 + 48);
      uint64_t v31 = *(void *)(a1 + 32);
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
      id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskIdentifier]);
      [v29 handleFailureInMethod:v30, v31, v32, 333, @"%@ has been deferred without any current task", v33 object file lineNumber description];

      abort();
    }

    id v6 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = v6;

    uint64_t v9 = objc_claimAutoreleasedReturnValue([v2 request]);
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = *(void **)(v10 + 112);
    *(void *)(v10 + 112) = v9;

    [*(id *)(a1 + 32) _setCurrentActivity:0];
    uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) now]);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    [*(id *)(a1 + 32) _scheduleBlockedTimeout];
    *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 1;
    if (!_CPLSilentLogging)
    {
      id v15 = sub_100025C4C();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v52 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Resubmitting task request for %@ after task has been deferred",  buf,  0xCu);
      }
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) resubmitTaskRequestForRescheduler:*(void *)(a1 + 32) updatedPrediction:*(void *)(*(void *)(a1 + 32) + 72) afterTaskHasBeenDeferred:v46[5]]);
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = *(void **)(v19 + 72);
    *(void *)(v19 + 72) = 0LL;

    uint64_t v21 = *(void *)(a1 + 32);
    if (v18 != *(void **)(v21 + 112))
    {
      if (!v18)
      {
        if (!_CPLSilentLogging)
        {
          uint64_t v34 = __CPLGenericOSLogDomain();
          id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v52 = 0LL;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Unexpected nil request after resubmitting %@",  buf,  0xCu);
          }
        }

        id v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
        uint64_t v37 = *(void *)(a1 + 48);
        uint64_t v38 = *(void *)(a1 + 32);
        id v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
        [v36 handleFailureInMethod:v37, v38, v39, 350, @"Unexpected nil request after resubmitting %@", 0 object file lineNumber description];

        abort();
      }

      if (!_CPLSilentLogging)
      {
        id v22 = sub_100025C4C();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 112) identifier]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v18 identifier]);
          *(_DWORD *)buf = 138543618;
          v52 = v24;
          __int16 v53 = 2114;
          v54 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Switching Background Task Request from %{public}@ to %{public}@",  buf,  0x16u);
        }

        uint64_t v21 = *(void *)(a1 + 32);
      }

      objc_storeStrong((id *)(v21 + 112), v18);
      [*(id *)(a1 + 32) _updateTaskIdentifierWithRequest:*(void *)(*(void *)(a1 + 32) + 112)];
    }

    _Block_object_dispose(&v45, 8);
  }

  else
  {
    [*(id *)(a1 + 32) _updateRequestIfNecessary];
  }
}

void sub_1000273AC(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    JUMPOUT(0x1000273C8LL);
  }

  JUMPOUT(0x100027410LL);
}

void sub_1000273CC()
{
}

void sub_1000273D8( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    objc_terminate();
    sub_100027400(v9, v10, v11, v12, v13, v14, v15, v16, a9);
  }

  JUMPOUT(0x100027410LL);
}

void sub_100027400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100027418(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) task]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000275A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sessionIsDoneOrWontHappen];
}

id sub_100027668(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sessionIsDoneOrWontHappen];
}

void sub_100027728(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_100025C4C();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Engine is closing for %@", buf, 0xCu);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 66LL) = 1;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskIdentifier]);
  dispatch_time_t v6 = dispatch_time(0LL, 30000000000LL);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100027878;
  block[3] = &unk_10023EFC8;
  id v12 = v5;
  uint64_t v13 = v8;
  void block[4] = v7;
  id v10 = v5;
  dispatch_after(v6, v9, block);
}

void sub_100027878(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Daemon/CPLBGSTRescheduler.m"));
  [v2 handleFailureInMethod:v3, v4, v5, 398, @"Engine has closed for %@ 30s ago and the process is still running", a1[5] object file lineNumber description];

  abort();
}

void sub_100027A44(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentActivity]);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 72LL), *(id *)(a1 + 40));
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_100025C4C();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Updating prediction for %@ but task is already running",  (uint8_t *)&v9,  0xCu);
      }
    }
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_100025C4C();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Updating prediction for %@ and resubmitting the request",  (uint8_t *)&v9,  0xCu);
      }
    }

    [*(id *)(a1 + 32) _updateRequestIfNecessary];
  }
}

void sub_100027C5C(void *a1)
{
}

void sub_100027C70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100027C90(uint64_t a1)
{
}

void sub_100027DC0(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) acquireError]);
  if (v8)
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_5:
    v2();
    goto LABEL_6;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentActivity]);

  if (v3)
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_5;
  }

  if (!*(void *)(*(void *)(a1 + 32) + 24LL))
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = v4;
  }

  id v7 = objc_retainBlock(*(id *)(a1 + 48));
  [*(id *)(*(void *)(a1 + 32) + 24) setObject:v7 forKeyedSubscript:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) _submitTaskRequest];
LABEL_6:
}

id sub_100027F6C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if (result)
  {
    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
    id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
    if (!result) {
      return [*(id *)(a1 + 32) _dropTaskRequest];
    }
  }

  return result;
}

void *sub_10002815C(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[10] == *(void *)(a1 + 40)) {
    return _[result _sessionTimerFired];
  }
  return result;
}

void *sub_1000285A0(void *result)
{
  *(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL) = *(void *)(result[4] + 48LL) != 0LL;
  if (*(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL))
  {
    uint64_t v1 = result;
    id result = [*(id *)(result[4] + 24) isEqualToString:result[5]];
    *(_BYTE *)(*(void *)(v1[6] + 8LL) + 24LL) = (_BYTE)result;
  }

  return result;
}

uint64_t sub_10002868C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  BOOL v2 = !*(void *)(v1 + 56)
    && !*(void *)(v1 + 48)
    && !*(void *)(v1 + 24)
    && !*(void *)(v1 + 32)
    && *(_BYTE *)(v1 + 40) == 0;
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = v2;
  return result;
}

id sub_100028BCC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _acquiredTask:a2 error:0];
}

void sub_10002A6B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10002A6E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_100025C4C();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Persisted sync session acquired a Background System Task and can start",  v5,  2u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_10002A8B0(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _persistedSyncSessionForScheduler:*(void *)(a1 + 40) startSyncSessionBlock:*(void *)(a1 + 48)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_100025C4C();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(v5 + 24);
        int v11 = 138412546;
        uint64_t v12 = v5;
        __int16 v13 = 2114;
        uint64_t v14 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Found persisted request for %@ (%{public}@)",  (uint8_t *)&v11,  0x16u);
      }
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_100025C4C();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v11 = 138412290;
        uint64_t v12 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found no persisted request for %@",  (uint8_t *)&v11,  0xCu);
      }
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  v7();
}

#error "10002ABB4: call analysis failed (funcsize=59)"
id __cdecl -[CPLBGSTReschedulerManager newCloudKitReschedulerForSession:]( CPLBGSTReschedulerManager *self,  SEL a2,  id a3)
{
  id v4;
  CPLBGSTRescheduler *v5;
  uint64_t v4 = -[CPLBGSTReschedulerManager newTaskRequestForSession:](self, "newTaskRequestForSession:", a3);
  uint64_t v5 = -[CPLBGSTRescheduler initWithRequest:reschedulerManager:]( objc_alloc(&OBJC_CLASS___CPLBGSTRescheduler),  "initWithRequest:reschedulerManager:",  v4,  self);

  return v5;
}

void sub_10002B018(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) statusesWithNow:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(a1 + 32);
  if (!v5[4] && !v5[8] && !v5[9]) {
    return;
  }
  id v25 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) mutableCopy];
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 32))
  {
    id v7 = objc_alloc(&OBJC_CLASS___NSString);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _summaryForTaskRequest:*(void *)(*(void *)(a1 + 32) + 32)]);
    int v9 = -[NSString initWithFormat:](v7, "initWithFormat:", @"Current request: %@", v8);
LABEL_8:
    int v11 = v9;
    [v25 addObject:v9];

    goto LABEL_9;
  }

  if (*(void *)(v6 + 64))
  {
    uint64_t v10 = objc_alloc(&OBJC_CLASS___NSString);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _summaryForTaskRequest:*(void *)(*(void *)(a1 + 32) + 64)]);
    int v9 = -[NSString initWithFormat:](v10, "initWithFormat:", @"Last request: %@", v8);
    goto LABEL_8;
  }

void sub_10002B434(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "daemon.cloudkitrescheduler.bgst.rescheduler");
  uint64_t v3 = (void *)qword_100295F78;
  qword_100295F78 = (uint64_t)v2;
}

void sub_10002B460(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10002B494( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

BOOL sub_10002B4A8(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

void sub_10002B4B0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10002B4BC()
{
  return v0;
}

  ;
}

uint64_t sub_10002B4E4()
{
  return v0;
}

void sub_10002B858(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "diskarbitration");
  uint64_t v3 = (void *)qword_100295F88;
  qword_100295F88 = (uint64_t)v2;
}

void sub_10002BB50(void *a1)
{
}

void sub_10002BB68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10002BB88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002BB98(uint64_t a1)
{
}

void sub_10002BBA0(uint64_t a1)
{
  os_log_t v2 = (uint64_t *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_100295FA8 objectForKeyedSubscript:*(void *)(a1 + 32)]);

  if (v3) {
    sub_10018FD78((void *)(a1 + 32), a1);
  }
  uint64_t v4 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 72) _cloudKitReschedulerManagerForLibraryWithIdentifier:*(void *)(a1 + 32) involvedProcesses:*(void *)(a1 + 40) relatedApplications:*(void *)(a1 + 48)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (!v7)
  {
    if (_CPLSilentLogging) {
      return;
    }
    id v23 = sub_10002BE48();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *v2;
      int v25 = 138412290;
      uint64_t v26 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@ will not use a rescheduler manager",  (uint8_t *)&v25,  0xCu);
    }

    goto LABEL_15;
  }

  id v8 = (void *)qword_100295FA8;
  if (!qword_100295FA8)
  {
    int v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v10 = (void *)qword_100295FA8;
    qword_100295FA8 = (uint64_t)v9;

    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    id v8 = (void *)qword_100295FA8;
  }

  [v8 setObject:v7 forKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___CPLBGSTReschedulerManager);
  if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
  {
    double v13 = (void *)qword_100295F98;
    if (!qword_100295F98)
    {
      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      uint64_t v15 = (void *)qword_100295F98;
      qword_100295F98 = (uint64_t)v14;

      double v13 = (void *)qword_100295F98;
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) taskIdentifier]);
    [v13 addObject:v16];

    [*(id *)(a1 + 72) _saveRegisteredTaskIdentifiers];
  }

  if (!_CPLSilentLogging)
  {
    id v17 = sub_10002BE48();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", @", "));
      id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
      int v25 = 138413058;
      uint64_t v26 = v19;
      __int16 v27 = 2114;
      uint64_t v28 = v20;
      __int16 v29 = 2112;
      uint64_t v30 = v21;
      __int16 v31 = 2112;
      __int128 v32 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Providing %@ for %{public}@\nInvolved Processes: %@\nRelated Applications: %@",  (uint8_t *)&v25,  0x2Au);
    }

id sub_10002BE48()
{
  if (qword_100295FB0 != -1) {
    dispatch_once(&qword_100295FB0, &stru_10023F160);
  }
  return (id)qword_100295FB8;
}

void sub_10002BF70(void *a1)
{
}

void sub_10002BF88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002BFA8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([(id)qword_100295FA8 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10002BE48();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        int v13 = 138543618;
        uint64_t v14 = v7;
        __int16 v15 = 2112;
        uint64_t v16 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dropping rescheduler manager for %{public}@: %@",  (uint8_t *)&v13,  0x16u);
      }
    }

    [(id)qword_100295FA8 removeObjectForKey:*(void *)(a1 + 32)];
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___CPLBGSTReschedulerManager);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
    {
      uint64_t v11 = (void *)qword_100295F98;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) taskIdentifier]);
      [v11 removeObject:v12];

      [*(id *)(a1 + 48) _saveRegisteredTaskIdentifiers];
    }
  }

void sub_10002C1A0(void *a1)
{
}

void sub_10002C1B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10002C1CC(uint64_t result)
{
  if (byte_100295F90 == 1) {
    sub_10018FE6C(result);
  }
  byte_100295F90 = 1;
  return result;
}

void sub_10002C2A0(void *a1)
{
}

void sub_10002C2B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002C2D8(uint64_t a1)
{
  byte_100295F90 = 0;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_100295FA8 objectForKeyedSubscript:CPLLibraryIdentifierSystemLibrary]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v2 != 0LL;

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"_CPLRegisteredTaskIdentifiers"]);

  if (v4 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSArray), (objc_opt_isKindOfClass(v4, v5) & 1) != 0))
  {
    uint64_t v6 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", v4);
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v7 = (id)qword_100295F98;
    id v8 = [v7 countByEnumeratingWithState:&v28 objects:v35 count:16];
    if (v8)
    {
      id v9 = v8;
      char v10 = 0;
      uint64_t v11 = *(void *)v29;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v29 != v11) {
            objc_enumerationMutation(v7);
          }
          uint64_t v13 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)i);
          if ((v10 & 1) != 0
            || -[NSMutableSet containsObject:]( v6,  "containsObject:",  *(void *)(*((void *)&v28 + 1) + 8LL * (void)i)))
          {
            -[NSMutableSet removeObject:](v6, "removeObject:", v13);
          }

          else
          {
            char v10 = 1;
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v28 objects:v35 count:16];
      }

      while (v9);
    }

    else
    {
      char v10 = 0;
    }

    if (-[NSMutableSet count](v6, "count"))
    {
      id v22 = v4;
      uint64_t v23 = a1;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      uint64_t v14 = v6;
      id v15 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v24,  v34,  16LL);
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v25;
        do
        {
          for (j = 0LL; j != v16; j = (char *)j + 1)
          {
            if (*(void *)v25 != v17) {
              objc_enumerationMutation(v14);
            }
            uint64_t v19 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)j);
            if (!_CPLSilentLogging)
            {
              id v20 = sub_10002BE48();
              uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v33 = v19;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Unregistering unused Background System Task %@",  buf,  0xCu);
              }
            }

            +[CPLBGSTReschedulerManager unregisterUnusedReschedulerWithTaskIdentifier:]( &OBJC_CLASS___CPLBGSTReschedulerManager,  "unregisterUnusedReschedulerWithTaskIdentifier:",  v19,  v22,  v23);
          }

          id v16 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v24,  v34,  16LL);
        }

        while (v16);
      }

      uint64_t v4 = v22;
      a1 = v23;
      goto LABEL_33;
    }

    if ((v10 & 1) != 0) {
LABEL_33:
    }
      objc_msgSend(*(id *)(a1 + 40), "_saveRegisteredTaskIdentifiers", v22, v23);
  }

  else
  {
    if ([(id)qword_100295F98 count]) {
      [*(id *)(a1 + 40) _saveRegisteredTaskIdentifiers];
    }
    uint64_t v6 = 0LL;
  }
}

void sub_10002C5F4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "daemon.cloudkitrescheduler.coordinator");
  uint64_t v3 = (void *)qword_100295FB8;
  qword_100295FB8 = (uint64_t)v2;
}

void sub_10002C94C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10002C98C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002C99C(uint64_t a1)
{
}

void sub_10002C9A4(uint64_t a1)
{
  os_log_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (v2)
  {
    unsigned int v3 = [v2 shouldRunForceProcessingStagedScopesTaskNow];
    uint64_t v4 = *(id **)(a1 + 32);
    if (v3)
    {
      [v4 _launchForcedExitForSupervisor:v4[2]];
    }

    else if ([v4[2] shouldScheduleForceProcessingStagedScopesTask])
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) nextForcedExitDate]);
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
  }

void *sub_10002CA24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[7]) {
    return _[result _scheduleOrLaunchIfNecessaryInQueue];
  }
  return result;
}

id sub_10002CAF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scheduleOrLaunchIfNecessaryInQueue];
}

void sub_10002CB74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) sharingScopeIdentifier]);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) scopes]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 scopeWithIdentifier:v4]);
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 supervisorInfoForScope:v6]);
      if (v7)
      {
        id v8 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8LL);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        uint64_t v13 = sub_10002CCDC;
        uint64_t v14 = &unk_10023DE80;
        id v9 = v4;
        uint64_t v10 = *(void *)(a1 + 32);
        id v15 = v9;
        uint64_t v16 = v10;
        id v17 = v7;
        uint64_t v11 = v12;
        os_unfair_lock_lock(v8);
        v13(v11);
        os_unfair_lock_unlock(v8);
      }
    }

    [*(id *)(a1 + 32) _checkExitSupervisorInTransaction:v3];
  }
}

void sub_10002CCB4(void *a1)
{
}

void sub_10002CCC8(_Unwind_Exception *a1)
{
}

void sub_10002CCDC(void *a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10002CDBC();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      int v8 = 138543362;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Found supervisor info for %{public}@ - start supervising",  (uint8_t *)&v8,  0xCu);
    }
  }

  uint64_t v5 = -[CPLExitSharedLibrarySupervisor initWithScopeIdentifier:exitState:supervisorInfo:]( objc_alloc(&OBJC_CLASS___CPLExitSharedLibrarySupervisor),  "initWithScopeIdentifier:exitState:supervisorInfo:",  a1[4],  0LL,  a1[6]);
  uint64_t v6 = a1[5];
  id v7 = *(void **)(v6 + 16);
  *(void *)(v6 + 16) = v5;
}

id sub_10002CDBC()
{
  if (qword_100295FC0 != -1) {
    dispatch_once(&qword_100295FC0, &stru_10023F2E8);
  }
  return (id)qword_100295FC8;
}

id sub_10002CDFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

id sub_10002CEBC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 1;
  return [*(id *)(*(void *)(a1 + 32) + 40) cancelTask];
}

void sub_10002CFD4(void *a1)
{
}

void sub_10002CFE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002D008(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) shouldRunForceProcessingStagedScopesTaskNowMovingToForeground];
  if ((_DWORD)result)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10002CDBC();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) scopeIdentifier]);
        int v6 = 138543362;
        id v7 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is in foreground, will try to process staged scopes for %{public}@",  (uint8_t *)&v6,  0xCu);
      }
    }

    id result = [*(id *)(a1 + 32) _launchForcedExitForSupervisor:*(void *)(*(void *)(a1 + 32) + 16)];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }

  return result;
}

void sub_10002D3CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10002D414(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (v2)
  {
    if (!*(void *)(a1 + 40)
      || (id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 scopeIdentifier]),
          unsigned __int8 v4 = [v3 isEqualToString:*(void *)(a1 + 40)],
          v3,
          (v4 & 1) == 0))
    {
      if (!_CPLSilentLogging)
      {
        id v5 = sub_10002CDBC();
        int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) scopeIdentifier]);
          int v27 = 138543362;
          __int128 v28 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@ has been deleted, stop supervising its exit",  (uint8_t *)&v27,  0xCu);
        }
      }

      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void **)(v8 + 16);
      *(void *)(v8 + 16) = 0LL;
    }
  }

  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 16);
  id v12 = *(id *)(a1 + 72);
  if (!v11)
  {
    if (!v12) {
      return;
    }
    if (!_CPLSilentLogging)
    {
      id v13 = sub_10002CDBC();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = *(void **)(a1 + 40);
        int v27 = 138543362;
        __int128 v28 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}@ needs to be supervised, start supervising its exit",  (uint8_t *)&v27,  0xCu);
      }
    }

    uint64_t v16 = objc_alloc(&OBJC_CLASS___CPLExitSharedLibrarySupervisor);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopeIdentifier]);
    id v18 = -[CPLExitSharedLibrarySupervisor initWithScopeIdentifier:exitState:supervisorInfo:]( v16,  "initWithScopeIdentifier:exitState:supervisorInfo:",  v17,  *(void *)(a1 + 72),  0LL);
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = *(void **)(v19 + 16);
    *(void *)(v19 + 16) = v18;

    uint64_t v21 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) supervisorInfo]);
    uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;

    goto LABEL_24;
  }

  if (!v12)
  {
    if (!_CPLSilentLogging)
    {
      id v24 = sub_10002CDBC();
      __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void **)(a1 + 40);
        int v27 = 138543362;
        __int128 v28 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%{public}@ does not need to be supervised any more, stop supervising its exit",  (uint8_t *)&v27,  0xCu);
      }

      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void **)(v10 + 16);
    }

    *(void *)(v10 + 16) = 0LL;

LABEL_24:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    return;
  }

  if (v12 != [v11 exitState]) {
    [*(id *)(*(void *)(a1 + 32) + 16) setExitState:*(void *)(a1 + 72)];
  }
}

id sub_10002D6B8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) storeSupervisorInfo:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
}

id sub_10002D74C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _checkExitSupervisorInTransaction:a2];
}

id sub_10002D758(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void sub_10002D900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10002D94C(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) scopeIdentifier]);
  uint64_t v3 = *(void *)(a1[5] + 8LL);
  unsigned __int8 v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) supervisorInfo]);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id sub_10002D9AC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) storeSupervisorInfo:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forScope:*(void *)(a1 + 40) error:a2];
}

void sub_10002DB94(void *a1)
{
}

void sub_10002DBA8(_Unwind_Exception *a1)
{
}

void sub_10002DBD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) scopeIdentifier]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifier]);
  unsigned int v4 = [v2 isEqualToString:v3];

  uint64_t v5 = *(void *)(a1 + 56);
  if (v4)
  {
    if (v5) {
      return;
    }
  }

  else if (!v5)
  {
    return;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
}

void sub_10002DC54(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkExitSupervisorInTransaction:v4];
  [*(id *)(a1 + 32) _storeSupervisorInfoInTransaction:v4];
}

id sub_10002DCA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void sub_10002DDD8(_Unwind_Exception *a1)
{
}

void sub_10002DE14(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (v2 && (char *)[v2 exitState] - 1 <= (char *)2)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) noteServerHasChanges];
    if ([*(id *)(*(void *)(a1 + 32) + 16) shouldRunForceProcessingStagedScopesTaskNow])
    {
      if (!_CPLSilentLogging)
      {
        id v3 = sub_10002CDBC();
        id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[CPLExitSharedLibrarySupervisor descriptionForExitState:]( CPLExitSharedLibrarySupervisor,  "descriptionForExitState:",  [*(id *)(*(void *)(a1 + 32) + 16) exitState]));
          int v11 = 138412290;
          id v12 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Server has changes and we are %@ - will force exit now",  (uint8_t *)&v11,  0xCu);
        }
      }

      [*(id *)(a1 + 32) _launchForcedExitForSupervisor:*(void *)(*(void *)(a1 + 32) + 16)];
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_10002CDBC();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLExitSharedLibrarySupervisor descriptionForExitState:]( CPLExitSharedLibrarySupervisor,  "descriptionForExitState:",  [*(id *)(*(void *)(a1 + 32) + 16) exitState]));
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) nextForcedExitDate]);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringFromDateAgo:now:]( &OBJC_CLASS___CPLDateFormatter,  "stringFromDateAgo:now:",  v9,  0LL));
          int v11 = 138412546;
          id v12 = v8;
          __int16 v13 = 2112;
          uint64_t v14 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Server has changes and we are %@ - will force exit soon (%@)",  (uint8_t *)&v11,  0x16u);
        }
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    }
  }

void sub_10002E020(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkExitSupervisorInTransaction:v4];
  [*(id *)(a1 + 32) _storeSupervisorInfoInTransaction:v4];
}

id sub_10002E06C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void sub_10002E184(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 24) && !*(void *)(v1 + 32))
  {
    id v3 = *(void **)(v1 + 48);
    if (v3)
    {
      [v3 cancel];
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void **)(v4 + 48);
      *(void *)(v4 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    }

    uint64_t v6 = *(void *)(a1 + 56);
    if ((unint64_t)(v6 - 1) > 2)
    {
      if (_CPLSilentLogging) {
        return;
      }
      id v18 = sub_10002CDBC();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLExitSharedLibrarySupervisor descriptionForExitState:]( &OBJC_CLASS___CPLExitSharedLibrarySupervisor,  "descriptionForExitState:",  *(void *)(a1 + 56)));
        id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifier]);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@ is not a status we want to report to server for %{public}@",  buf,  0x16u);
      }
    }

    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transport]);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 platformObject]);

      uint64_t v10 = objc_opt_class(&OBJC_CLASS___CPLCloudKitTransport);
      if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x3032000000LL;
        uint64_t v37 = sub_10002C98C;
        uint64_t v38 = sub_10002C99C;
        id v39 = 0LL;
        int v11 = objc_alloc(&OBJC_CLASS___CPLCloudKitSendSharedLibraryExitStatusFeedbackTask);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifier]);
        __int128 v28 = _NSConcreteStackBlock;
        __int128 v30 = sub_10002E52C;
        __int128 v31 = &unk_10023F278;
        __int16 v13 = *(void **)(a1 + 40);
        uint64_t v32 = *(void *)(a1 + 32);
        uint64_t v34 = buf;
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v35 = *(void *)(a1 + 56);
        uint64_t v29 = 3221225472LL;
        id v33 = v13;
        uint64_t v15 = -[CPLCloudKitSendSharedLibraryExitStatusFeedbackTask initWithController:scopeIdentifier:cloudKitScope:status:completionHandler:]( v11,  "initWithController:scopeIdentifier:cloudKitScope:status:completionHandler:",  v9,  v12,  v14,  v6,  &v28);
        uint64_t v16 = *(void **)(*(void *)&buf[8] + 40LL);
        *(void *)(*(void *)&buf[8] + 40LL) = v15;

        id v17 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s createGroupForSendExitStatus]( v9,  "createGroupForSendExitStatus",  v28,  v29,  v30,  v31,  v32));
        [*(id *)(*(void *)&buf[8] + 40) setTransportGroup:v17];

        [*(id *)(*(void *)&buf[8] + 40) runWithNoSyncSession];
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(*(void *)&buf[8] + 40LL));

        _Block_object_dispose(buf, 8);
      }

      else if (!_CPLSilentLogging)
      {
        id v21 = sub_10002CDBC();
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = (void *)objc_opt_class(v9);
          uint64_t v24 = *(void *)(a1 + 56);
          id v25 = v23;
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[CPLExitSharedLibrarySupervisor descriptionForExitState:]( &OBJC_CLASS___CPLExitSharedLibrarySupervisor,  "descriptionForExitState:",  v24));
          int v27 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifier]);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v26;
          *(_WORD *)&buf[22] = 2114;
          uint64_t v37 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Transport (%@) does not allow reporting of %@ for %{public}@",  buf,  0x20u);
        }
      }
    }
  }

void sub_10002E50C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002E52C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 88);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10002E638;
  v13[3] = &unk_10023F250;
  void v13[4] = v5;
  id v14 = v4;
  __int128 v12 = *(_OWORD *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 56);
  id v7 = (id)v12;
  __int128 v15 = v12;
  uint64_t v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002FE90;
  block[3] = &unk_10023DBC8;
  id v18 = v8;
  uint64_t v9 = v6;
  id v10 = v4;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

void sub_10002E638(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) == *(void *)(*(void *)(a1 + 32) + 48LL))
  {
    if (*(void *)(a1 + 40))
    {
      if (!_CPLSilentLogging)
      {
        id v2 = sub_10002CDBC();
        id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLExitSharedLibrarySupervisor descriptionForExitState:]( &OBJC_CLASS___CPLExitSharedLibrarySupervisor,  "descriptionForExitState:",  *(void *)(a1 + 64)));
          uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopeIdentifier]);
          uint64_t v6 = *(void *)(a1 + 40);
          int v14 = 138412802;
          __int128 v15 = v4;
          __int16 v16 = 2114;
          id v17 = v5;
          __int16 v18 = 2112;
          uint64_t v19 = v6;
          id v7 = "Failed to report %@ to the server for %{public}@: %@";
          uint64_t v8 = v3;
          os_log_type_t v9 = OS_LOG_TYPE_ERROR;
          uint32_t v10 = 32;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v14, v10);

          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v11 = sub_10002CDBC();
      id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLExitSharedLibrarySupervisor descriptionForExitState:]( &OBJC_CLASS___CPLExitSharedLibrarySupervisor,  "descriptionForExitState:",  *(void *)(a1 + 64)));
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopeIdentifier]);
        int v14 = 138412546;
        __int128 v15 = v4;
        __int16 v16 = 2114;
        id v17 = v5;
        id v7 = "Successfully reported %@ to the server for %{public}@";
        uint64_t v8 = v3;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
        uint32_t v10 = 22;
        goto LABEL_9;
      }

void sub_10002E8D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 24) && !*(void *)(v2 + 32) && !*(void *)(v2 + 40))
  {
    [(id)v2 _unscheduleInQueue];
    id v3 = objc_alloc(&OBJC_CLASS___CPLEngineForceProcessingStagedScopesTask);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 syncManager]);
    id v7 = -[CPLEngineForceProcessingStagedScopesTask initWithEngineLibrary:delegate:]( v3,  "initWithEngineLibrary:delegate:",  WeakRetained,  v6);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);
    -[CPLEngineForceProcessingStagedScopesTask setTaskIdentifier:](v7, "setTaskIdentifier:", v9);

    -[CPLEngineForceProcessingStagedScopesTask setBypassForceSyncLimitations:]( v7,  "setBypassForceSyncLimitations:",  1LL);
    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    uint64_t v19 = sub_10002EAE4;
    id v20 = &unk_10023F2C8;
    uint32_t v10 = *(void **)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = v10;
    -[CPLEngineForceProcessingStagedScopesTask setTaskDidFinishWithErrorBlock:]( v7,  "setTaskDidFinishWithErrorBlock:",  &v17);
    if (!_CPLSilentLogging)
    {
      id v11 = sub_10002CDBC();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "scopeIdentifier", v17, v18, v19, v20, v21));
        *(_DWORD *)buf = 138412546;
        uint64_t v24 = v7;
        __int16 v25 = 2114;
        uint64_t v26 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Launching forced exit task %@ for %{public}@",  buf,  0x16u);
      }
    }

    -[CPLEngineForceProcessingStagedScopesTask launchTask](v7, "launchTask", v17, v18, v19, v20, v21);
    uint64_t v14 = *(void *)(a1 + 32);
    __int128 v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v7;
    __int16 v16 = v7;
  }

void sub_10002EAE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = *(void **)(v5 + 88);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10002EBD8;
  v12[3] = &unk_10023DE80;
  void v12[4] = v5;
  id v13 = v4;
  id v14 = v6;
  uint64_t v8 = v12;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002FE90;
  block[3] = &unk_10023DBC8;
  id v16 = v8;
  os_log_type_t v9 = v7;
  id v10 = v4;
  dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v11);
}

void sub_10002EBD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  id v4 = *(id *)(a1 + 40);
  if ([v4 isCPLErrorWithCode:10000])
  {
  }

  else if (v4)
  {
    if (_CPLSilentLogging) {
      goto LABEL_12;
    }
    id v5 = sub_10002CDBC();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopeIdentifier]);
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      __int16 v25 = v7;
      __int16 v26 = 2112;
      uint64_t v27 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Forced exit for %{public}@ finished with error %@",  buf,  0x16u);
    }

    goto LABEL_11;
  }

  if (!_CPLSilentLogging)
  {
    id v9 = sub_10002CDBC();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopeIdentifier]);
      *(_DWORD *)buf = 138543362;
      __int16 v25 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Forced exit for %{public}@ finished successfully",  buf,  0xCu);
    }

    id v4 = 0LL;
LABEL_11:

    goto LABEL_12;
  }

  id v4 = 0LL;
LABEL_12:
  uint64_t v11 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v11 + 24))
  {
    uint64_t v12 = (os_unfair_lock_s *)(v11 + 8);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    uint64_t v21 = sub_10002EEBC;
    id v22 = &unk_10023DC70;
    id v23 = *(id *)(a1 + 48);
    id v13 = v20;
    os_unfair_lock_lock(v12);
    v21((uint64_t)v13);
    os_unfair_lock_unlock(v12);

    uint64_t v14 = *(void *)(a1 + 32);
    __int128 v15 = *(void **)(v14 + 80);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10002EEC4;
    v18[3] = &unk_10023E318;
    v18[4] = v14;
    id v19 = *(id *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10002F144;
    v17[3] = &unk_10023F188;
    void v17[4] = *(void *)(a1 + 32);
    id v16 = [v15 performWriteTransactionWithBlock:v18 completionHandler:v17];
  }
}

void sub_10002EE7C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x10002EE9CLL);
  }

  _Unwind_Resume(exception_object);
}

id sub_10002EEBC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateLastForcedExitDate];
}

void sub_10002EEC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _checkExitSupervisorInTransaction:v3];
  uint64_t v26 = 0LL;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x2020000000LL;
  char v29 = 0;
  uint64_t v22 = 0LL;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  uint64_t v25 = 0LL;
  uint64_t v14 = _NSConcreteStackBlock;
  id v16 = sub_10002F0E8;
  id v17 = &unk_10023F2A0;
  id v4 = *(void **)(a1 + 40);
  id v5 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v15 = 3221225472LL;
  id v20 = &v26;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v18 = v6;
  uint64_t v19 = v7;
  uint64_t v21 = &v22;
  uint64_t v8 = &v14;
  os_unfair_lock_lock(v5);
  v16(v8);
  os_unfair_lock_unlock(v5);

  if (*((_BYTE *)v27 + 24))
  {
    objc_msgSend(*(id *)(a1 + 32), "_storeSupervisorInfoInTransaction:", v3, v14, v15);
    if (v23[3])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) scopes]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifier]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeWithIdentifier:v10]);

      if (v11
        && (uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 transportScopeForScope:v11])) != 0)
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitScope scopeFromTransportScope:]( &OBJC_CLASS___CPLCloudKitScope,  "scopeFromTransportScope:",  v12));

        if (v13) {
          [*(id *)(a1 + 32) _sendExitFeedbackForSupervisor:*(void *)(a1 + 40) cloudKitScope:v13 exitState:v23[3]];
        }
      }

      else
      {
        id v13 = 0LL;
      }
    }
  }

  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
}

void sub_10002F090( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002F0C4(void *a1)
{
}

void sub_10002F0D8()
{
}

id sub_10002F0E8(id result)
{
  *(_BYTE *)(*(void *)(*((void *)result + 6) + 8LL) + 24LL) = *((void *)result + 4) == *(void *)(*((void *)result + 5) + 16LL);
  if (*(_BYTE *)(*(void *)(*((void *)result + 6) + 8LL) + 24LL))
  {
    uint64_t v1 = result;
    id result = [*((id *)result + 4) exitState];
    *(void *)(*(void *)(v1[7] + 8LL) + 24LL) = result;
  }

  return result;
}

id sub_10002F144(uint64_t a1)
{
  return [*(id *)(a1 + 32) _scheduleOrLaunchIfNecessary];
}

void *sub_10002F204(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 32) == 1LL)
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 40) cancelTask];
    return [(id)v2[4] _unscheduleInQueue];
  }

  return result;
}

void *sub_10002F310(void *result)
{
  uint64_t v1 = result[4];
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2)
  {
    *(void *)(v1 + 32) = v2 - 1;
    id result = (void *)result[4];
    if (!result[4]) {
      return [result _scheduleOrLaunchIfNecessary];
    }
  }

  return result;
}

void sub_10002F3CC(void *a1)
{
}

void sub_10002F3E0(_Unwind_Exception *a1)
{
}

id sub_10002F3F4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) ping];
}

void sub_10002F4D4(void *a1)
{
}

void sub_10002F4E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002F508(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) status]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10002FE90(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10002FEC4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.supervisor");
  uint64_t v3 = (void *)qword_100295FC8;
  qword_100295FC8 = (uint64_t)v2;
}

id sub_100030230()
{
  if (qword_100295FD0 != -1) {
    dispatch_once(&qword_100295FD0, &stru_10023F508);
  }
  return (id)qword_100295FD8;
}

void sub_10003048C(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10003054C;
  v11[3] = &unk_10023F338;
  uint64_t v8 = (void *)a1[5];
  id v12 = (id)a1[4];
  id v13 = v7;
  id v14 = v8;
  id v15 = v6;
  uint64_t v16 = a1[6];
  id v9 = v6;
  id v10 = v7;
  [v12 dispatchAsync:v11];
}

void sub_10003054C(uint64_t a1)
{
  os_log_t v2 = (id *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[CPLCloudKitErrors realErrorForError:](&OBJC_CLASS___CPLCloudKitErrors, "realErrorForError:", v3));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 lastOperationRequestUUIDs]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v4,  v5,  @"Error creating primary zone"));

    if ([v6 isCPLErrorWithCode:1002])
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_100030230();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_zoneName"));
          *(_DWORD *)buf = 138543618;
          uint64_t v16 = v9;
          __int16 v17 = 2112;
          id v18 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create primary zone %{public}@ because 'feature is disabled': %@",  buf,  0x16u);
        }
      }

      uint64_t v10 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  150LL,  v3,  @"Failed to create primary zone %@ because 'feature is disabled'",  *(void *)(a1 + 48)));

      id v6 = (void *)v10;
    }

    (*(void (**)(void))(*((void *)*v2 + 34) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_100030230();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_zoneName"));
        *(_DWORD *)buf = 138543362;
        uint64_t v16 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Created primary zone with zoneID: %{public}@",  buf,  0xCu);
      }
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) firstObject]);
    if (!v14) {
      sub_10018FF7C((uint64_t *)v2, a1);
    }
    id v4 = (void *)v14;
    [*v2 _callCompletionWithZone:v14];
  }
}

void sub_100030F6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

uint64_t sub_100030FB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100030FC8(uint64_t a1)
{
}

BOOL sub_100030FD0(id a1, CKRecordZoneID *a2)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecordZoneID zoneName](a2, "zoneName"));
  unsigned __int8 v3 = [v2 hasPrefix:CPLPrimaryScopeIdentifier];

  return v3;
}

CKRecordZoneID *__cdecl sub_100031014(id a1, NSArray *a2)
{
  return (CKRecordZoneID *)+[CPLCloudKitLibraryZoneIdentification primaryZoneIDFromProposedZoneIDs:]( &OBJC_CLASS___CPLCloudKitLibraryZoneIdentification,  "primaryZoneIDFromProposedZoneIDs:",  a2);
}

id sub_100031024(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(a1 + 32)];
}

CKRecordZoneID *__cdecl sub_100031030(id a1, NSArray *a2)
{
  return (CKRecordZoneID *)-[NSArray firstObject](a2, "firstObject");
}

id sub_100031038(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

CKRecordZoneID *__cdecl sub_10003104C(id a1, NSArray *a2)
{
  return (CKRecordZoneID *)-[NSArray firstObject](a2, "firstObject");
}

void sub_100031054(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_100031168;
  v12[3] = &unk_10023F4C0;
  void v12[4] = v7;
  id v13 = v6;
  uint64_t v19 = *(void *)(a1 + 72);
  id v17 = *(id *)(a1 + 56);
  id v14 = v5;
  uint64_t v20 = *(void *)(a1 + 80);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 88);
  id v15 = v8;
  uint64_t v21 = v9;
  id v18 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  [v7 dispatchAsync:v12];
}

void sub_100031168(uint64_t a1)
{
  os_log_t v2 = (id *)(a1 + 32);
  unsigned __int8 v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (!v3)
  {
    id v8 = 0LL;
    goto LABEL_10;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[CPLCloudKitErrors realErrorForError:](&OBJC_CLASS___CPLCloudKitErrors, "realErrorForError:", v3));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 lastOperationRequestUUIDs]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*v2 scope]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 scopeIdentifier]);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v4,  v5,  @"Error fetching zone for %@",  v7));

LABEL_9:
    goto LABEL_10;
  }

  if (!+[CPLCloudKitErrors isPartialFailureError:](&OBJC_CLASS___CPLCloudKitErrors, "isPartialFailureError:", v3))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 lastOperationRequestUUIDs]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 scope]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 scopeIdentifier]);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v3,  v4,  @"Error fetching zone for %@",  v6));
    goto LABEL_9;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  v94 = sub_100030FB8;
  v95 = sub_100030FC8;
  id v96 = 0LL;
  uint64_t v81 = 0LL;
  v82 = &v81;
  uint64_t v83 = 0x3032000000LL;
  v84 = sub_100030FB8;
  v85 = sub_100030FC8;
  id v86 = 0LL;
  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v75 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors errorsPerZoneIDForPartialFailureError:]( &OBJC_CLASS___CPLCloudKitErrors,  "errorsPerZoneIDForPartialFailureError:",  v3));
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472LL;
  v76[2] = sub_100031D64;
  v76[3] = &unk_10023F498;
  id v78 = *(id *)(a1 + 72);
  id v10 = v9;
  v77 = v10;
  v79 = buf;
  v80 = &v81;
  [v75 enumerateKeysAndObjectsUsingBlock:v76];
  uint64_t v11 = *(void *)(*(void *)&buf[8] + 40LL);
  if (v11)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([*v2 lastOperationRequestUUIDs]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*v2 scope]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 scopeIdentifier]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([(id)v82[5] zoneName]);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v11,  v12,  @"Error fetching zone for %@ (zone %@)",  v14,  v15));
  }

  else
  {
    id v8 = 0LL;
    if (!-[NSMutableArray count](v10, "count") || _CPLSilentLogging) {
      goto LABEL_82;
    }
    id v70 = sub_100030230();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v71 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v10, "componentsJoinedByString:", @", "));
      id v72 = [*(id *)(a1 + 48) count];
      v73 = (void *)objc_claimAutoreleasedReturnValue([*v2 scope]);
      v74 = (void *)objc_claimAutoreleasedReturnValue([v73 scopeIdentifier]);
      *(_DWORD *)v87 = 138412802;
      id v88 = v71;
      __int16 v89 = 2048;
      id v90 = v72;
      __int16 v91 = 2112;
      v92 = v74;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Ignoring errors for %@ - found %lu actual zones for %@",  v87,  0x20u);
    }

    id v8 = 0LL;
  }

LABEL_82:
  _Block_object_dispose(&v81, 8);

  _Block_object_dispose(buf, 8);
LABEL_10:
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
  {
    uint64_t v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:"));
    uint64_t v17 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
    {
      if (v8)
      {
        if (!_CPLSilentLogging)
        {
          id v19 = sub_100030230();
          uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v21;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Using stored zone %{public}@ - ignoring fetch error: %@",  buf,  0x16u);
          }
        }
      }

      else
      {
        if (_CPLSilentLogging) {
          goto LABEL_41;
        }
        id v29 = sub_100030230();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v30;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Using stored zone %{public}@", buf, 0xCu);
        }
      }

LABEL_41:
      if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) {
          sub_10019017C(a1, (uint64_t *)v2);
        }
        objc_msgSend(*v2, "_callCompletionWithZone:");
        goto LABEL_87;
      }

      uint64_t v42 = *(void *)(a1 + 80);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allKeys]);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, void *))(v42 + 16))(v42, v43);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);

      if (v45)
      {
        uint64_t v46 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v45]);
        uint64_t v47 = *(void *)(*(void *)(a1 + 96) + 8LL);
        __int16 v48 = *(void **)(v47 + 40);
        *(void *)(v47 + 40) = v46;
      }

      uint64_t v49 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
      if (v49)
      {
        if (!_CPLSilentLogging)
        {
          id v50 = sub_100030230();
          id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "cpl_zoneName"));
            id v54 = [*(id *)(a1 + 48) count];
            *(_DWORD *)buf = 138543618;
            *(void *)&uint8_t buf[4] = v53;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v54;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Dynamically found zone %{public}@ among %ld zones",  buf,  0x16u);
          }

          uint64_t v49 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
        }

        uint64_t v55 = objc_claimAutoreleasedReturnValue([v49 zoneID]);
        uint64_t v56 = *(void *)(*(void *)(a1 + 88) + 8LL);
        v57 = *(os_log_s **)(v56 + 40);
        *(void *)(v56 + 40) = v55;
      }

      else
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), *(id *)(a1 + 64));
        if (_CPLSilentLogging)
        {
LABEL_66:
          uint64_t v65 = *(void *)(a1 + 32);
          if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
          {
            objc_msgSend((id)v65, "_callCompletionWithZone:");
          }

          else if (*(void *)(v65 + 304) || !*(_BYTE *)(v65 + 296))
          {
            if (!_CPLSilentLogging)
            {
              id v66 = sub_100030230();
              v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 88)
                                                                                               + 8LL)
                                                                                   + 40LL), "cpl_zoneName"));
                *(_DWORD *)buf = 138543362;
                *(void *)&uint8_t buf[4] = v68;
                _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_ERROR,  "Found no zone but was not asked to create %{public}@",  buf,  0xCu);
              }
            }

            v69 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"No zone found for library"));
            (*(void (**)(void))(*((void *)*v2 + 34) + 16LL))();
          }

          else
          {
            if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL)) {
              sub_1001900C0(a1, (uint64_t *)v2);
            }
            objc_msgSend((id)v65, "createRecordZoneWithID:");
          }

          goto LABEL_87;
        }

        id v62 = sub_100030230();
        v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          id v63 = [*(id *)(a1 + 48) count];
          *(_DWORD *)buf = 134218242;
          *(void *)&uint8_t buf[4] = v63;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v64;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Found no valid zone among %ld zones. Using %{public}@",  buf,  0x16u);
        }
      }

      goto LABEL_66;
    }

    if (v8)
    {
      if (-[os_log_s isCPLErrorWithCode:](v8, "isCPLErrorWithCode:", 1002LL))
      {
        if (!_CPLSilentLogging)
        {
          id v22 = sub_100030230();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*v2 scope]);
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 scopeIdentifier]);
            *(_DWORD *)buf = 138543362;
            *(void *)&uint8_t buf[4] = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Feature seems disabled for %{public}@ - inferring zone exists so we can track it",  buf,  0xCu);
          }
        }

        uint64_t v26 = -[CKRecordZone initWithZoneID:]( objc_alloc(&OBJC_CLASS___CKRecordZone),  "initWithZoneID:",  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
        uint64_t v27 = *(void *)(*(void *)(a1 + 96) + 8LL);
        uint64_t v28 = *(void **)(v27 + 40);
        *(void *)(v27 + 40) = v26;
      }

      goto LABEL_34;
    }

    if (!_CPLSilentLogging)
    {
      id v31 = sub_100030230();
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
        uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 48);
        uint64_t v34 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v34;
        *(_WORD *)&buf[22] = 2112;
        v94 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Failed to fetch %@ yet CloudKit returned no error, operation %@ returned %@",  buf,  0x20u);
      }
    }

    id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) zoneName]);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failed to fetch zone %@ for unknown reasons",  v36));
  }

  if (!v8) {
    goto LABEL_41;
  }
LABEL_34:
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL))
  {
    if (!_CPLSilentLogging)
    {
      id v37 = sub_100030230();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), "cpl_zoneName"));
        uint64_t v40 = (void *)v39;
        if (v3) {
          uint64_t v41 = v3;
        }
        else {
          uint64_t v41 = v8;
        }
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v39;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Failed to fetch zone %{public}@: %@",  buf,  0x16u);
      }

LABEL_58:
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v58 = sub_100030230();
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      if (v3) {
        v59 = v3;
      }
      else {
        v59 = v8;
      }
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v59;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to fetch all zones: %@", buf, 0xCu);
    }

    goto LABEL_58;
  }

  v60 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v2 + 38) transportScope]);
  if (!v60)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
    {
      uint64_t v61 = -[CPLCloudKitScope initWithZone:options:]( objc_alloc(&OBJC_CLASS___CPLCloudKitScope),  "initWithZone:options:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  *(void *)(*(void *)(a1 + 32) + 288LL));
      v60 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitScope transportScope](v61, "transportScope"));
    }

    else
    {
      v60 = 0LL;
    }
  }

  (*(void (**)(void))(*((void *)*v2 + 34) + 16LL))();

LABEL_87:
}

void sub_100031D30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100031D64(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v10 = a2;
  id v8 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16LL))())
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
    [*(id *)(a1 + 32) addObject:v9];
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a3);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_100031ECC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.fetchzone");
  unsigned __int8 v3 = (void *)qword_100295FD8;
  qword_100295FD8 = (uint64_t)v2;
}

uint64_t sub_100031EF8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100031F04(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + _Block_object_dispose((const void *)(v13 - 160), 8) = a2;
  }
  return result;
}

uint64_t sub_100031F10(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_100031F1C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_100031F28(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_100031F34(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 24) = a2;
  }
  return result;
}

void sub_100032168(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000321EC;
  v8[3] = &unk_10023F530;
  void v8[4] = v6;
  id v9 = v5;
  char v10 = a2;
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_1000321EC(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = _CPLSilentLogging == 0;
  }
  if (v4)
  {
    if (qword_100295FE0 != -1) {
      dispatch_once(&qword_100295FE0, &stru_10023F578);
    }
    id v5 = (os_log_s *)qword_100295FE8;
    if (os_log_type_enabled((os_log_t)qword_100295FE8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 296LL);
      int v7 = 134218242;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      char v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to send feedback with exit status %ld with error: %@",  (uint8_t *)&v7,  0x16u);
    }

    int v3 = *(unsigned __int8 *)(a1 + 48);
  }

  (*(void (**)(void, BOOL, void *))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 272LL),  v3 != 0,  v2);
}

void sub_1000323B4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.exitstatusfeedback");
  int v3 = (void *)qword_100295FE8;
  qword_100295FE8 = (uint64_t)v2;
}

id sub_100032740()
{
  if (qword_100295FF0 != -1) {
    dispatch_once(&qword_100295FF0, &stru_10023F6B0);
  }
  return (id)qword_100295FF8;
}

LABEL_44:
  if (self->_ckRecordToUpload)
  {
    if (!self->_uploadContext)
    {
      __int16 v53 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitUploadOperationContext);
      uploadContext = self->_uploadContext;
      self->_uploadContext = v53;
    }

    if (self->_sharedZoneIdentification
      && ([*p_currentRecordChange isMasterChange] & 1) == 0
      && [*p_currentRecordChange supportsSharingScopedIdentifier])
    {
      uint64_t v55 = -[CPLRecordTarget shouldUploadToOtherRecord]( self->_currentRecordTarget,  "shouldUploadToOtherRecord");
      uint64_t v56 = v55;
      -[CPLCloudKitUploadOperationContext addRecord:forRecordID:ignoreResources:]( self->_uploadContext,  "addRecord:forRecordID:ignoreResources:",  self->_currentRecordChange,  self->_currentRecordID,  v55 ^ 1);
      if ((v56 & 1) == 0) {
        goto LABEL_55;
      }
    }

    else
    {
      -[CPLCloudKitUploadOperationContext addRecord:forRecordID:ignoreResources:]( self->_uploadContext,  "addRecord:forRecordID:ignoreResources:",  self->_currentRecordChange,  self->_currentRecordID,  0LL);
    }

    if (sub_100031EF8((uint64_t)v42)) {
      -[CPLCKBatchUploadPlanner _addCKRecordIDForResourcesUploadProgressTracking:size:]( self,  "_addCKRecordIDForResourcesUploadProgressTracking:size:",  self->_currentRecordID,  (double)(unint64_t)sub_100031EF8((uint64_t)v42));
    }
  }

LABEL_45:
  if (!a9)
  {
    uint64_t v34 = 0;
LABEL_48:
    uint64_t v25 = v30;
    goto LABEL_51;
  }

  uint64_t v25 = v30;
  uint64_t v34 = 0;
  *a9 = v25;
LABEL_51:

  return v34;
}

LABEL_55:
  if (self->_sharedCKRecordToUpload)
  {
    if (self->_sharedUploadContext)
    {
      v57 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitUploadOperationContext);
      sharedUploadContext = self->_sharedUploadContext;
      self->_sharedUploadContext = v57;

      v59 = self->_sharedUploadContext;
    }

    else
    {
      v59 = 0LL;
    }

    -[CPLCloudKitUploadOperationContext addRecord:forRecordID:ignoreResources:]( v59,  "addRecord:forRecordID:ignoreResources:",  self->_currentRecordChange,  self->_sharedRecordID,  0LL);
    if (sub_100031EF8((uint64_t)v42)) {
      -[CPLCKBatchUploadPlanner _addCKRecordIDForResourcesUploadProgressTracking:size:]( self,  "_addCKRecordIDForResourcesUploadProgressTracking:size:",  self->_sharedRecordID,  (double)(unint64_t)sub_100031EF8((uint64_t)v42));
    }
  }

  v52 = 1;
LABEL_62:

  return v52;
}

    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v28, buf, 0xCu);
    goto LABEL_56;
  }

  if (!_CPLSilentLogging)
  {
    id v31 = sub_1000B20D0();
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = self->_scope;
      *(_DWORD *)buf = 138412290;
      v75 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Trying to exit %@ with no known zone ID",  buf,  0xCu);
    }
  }

  uint64_t v34 = (void (**)(id, void, void *))self->_completionHandler;
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineScope scopeIdentifier](self->_scope, "scopeIdentifier"));
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  32LL,  @"%@ needs a zone ID",  v35));
  v34[2](v34, 0LL, v36);

LABEL_77:
}

    id v78 = v35;
    v79 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEnginePushRepository platformObject](self->_pushRepository, "platformObject"));
    v102 = v35;
    v80 = [v79 deleteChangeWithScopedIdentifier:v54 error:&v102];
    uint64_t v35 = v102;

    if (!v80)
    {
LABEL_60:
      v67 = 0;
      v68 = v95;
      a7 = v97;
      uint64_t v33 = v90;
LABEL_61:

      if ((v67 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_62:
      uint64_t v81 = 1;
      goto LABEL_70;
    }

    id v88 = v15;
    v101 = v35;
    v67 = -[CPLStoreMigrationAssistant_101386451 _revertRecordWithLocalScopedIdentifier:class:revertedCount:error:]( self,  "_revertRecordWithLocalScopedIdentifier:class:revertedCount:error:",  v54,  objc_opt_class(&OBJC_CLASS___CPLAssetChange),  v94,  &v101);
    v75 = v101;
    v74 = v35;
LABEL_57:
    uint64_t v35 = v75;
    v68 = v95;
    a7 = v97;
    uint64_t v33 = v90;
LABEL_58:

    goto LABEL_59;
  }

  if (!_CPLSilentLogging)
  {
    id v36 = sub_10014E628();
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v113 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%@ should not have been served to the client - removing it",  buf,  0xCu);
    }
  }

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineCloudCache platformObject](self->_cloudCache, "platformObject"));
  v111 = 0LL;
  uint64_t v39 = [v38 _deleteRecordWithScopedIdentifier:v33 error:&v111];
  uint64_t v35 = (os_log_s *)v111;

  if (!v39) {
    goto LABEL_48;
  }
  id v96 = a7;
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEngineChangePipe platformObject](self->_pullQueue, "platformObject"));
  v110 = v35;
  uint64_t v41 = [v40 _deleteAllChangesWithScopedIdentifier:v33 error:&v110];
  uint64_t v42 = v110;

  if (v41)
  {
    __int16 v89 = v33;
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( -[CPLEngineIDMapping localScopedIdentifierForCloudScopedIdentifier:isFinal:]( self->_idMapping,  "localScopedIdentifierForCloudScopedIdentifier:isFinal:",  v33,  buf));
    objc_msgSend(v43, "setScopeIndex:", objc_msgSend(v14, "localIndex"));
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[CPLEnginePushRepository platformObject](self->_pushRepository, "platformObject"));
    v109 = v42;
    uint64_t v45 = [v44 deleteChangeWithScopedIdentifier:v43 error:&v109];
    uint64_t v35 = v109;

    if ((v45 & 1) != 0)
    {
      v108 = v35;
      uint64_t v46 = -[CPLStoreMigrationAssistant_101386451 _revertRecordWithLocalScopedIdentifier:class:revertedCount:error:]( self,  "_revertRecordWithLocalScopedIdentifier:class:revertedCount:error:",  v43,  -[os_log_s recordClass](v98, "recordClass"),  v94,  &v108);
      uint64_t v47 = v108;

      uint64_t v35 = v47;
      a7 = v96;
      uint64_t v33 = v89;
      if (!v46) {
        goto LABEL_48;
      }
      goto LABEL_19;
    }

    a7 = v96;
    uint64_t v33 = v89;
  }

  else
  {
    uint64_t v35 = v42;
    a7 = v96;
  }

id *sub_100033214(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v22 = a2;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)&OBJC_CLASS___CPLCKShareRecordTodo;
    id v18 = (id *)objc_msgSendSuper2(&v23, "init");
    a1 = v18;
    if (v18)
    {
      objc_storeStrong(v18 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
      objc_storeStrong(a1 + 4, a5);
      id v19 = [v16 copy];
      id v20 = a1[5];
      a1[5] = v19;

      objc_storeStrong(a1 + 6, a7);
    }
  }

  return a1;
}

LABEL_14:
}
  }
}
}
}

  if (-[CPLFaceCropChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"faceCropType")))
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLFaceCropChange faceCropType](v9, "faceCropType")));
    [v7 setObject:v22 forKey:@"type"];
  }

  if (-[CPLFaceCropChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"rejectedPersonIdentifier")))
  {
    if (+[CPLPersonChange serverSupportsGraphPeopleHome]( &OBJC_CLASS___CPLPersonChange,  "serverSupportsGraphPeopleHome"))
    {
      objc_super v23 = (void *)objc_claimAutoreleasedReturnValue(-[CPLFaceCropChange rejectedPersonIdentifier](v9, "rejectedPersonIdentifier"));

      if (v23)
      {
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[CPLFaceCropChange rejectedPersonIdentifier](v9, "rejectedPersonIdentifier"));
        [v7 setLegacyEncryptedObject:v24 forKey:@"rejectedPersonIdentifier"];
      }
    }
  }

  id v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v5;
  id v15 = *(void *)(v14 + 16);
  id v16 = __OFADD__(v15, 1LL);
  id v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

  if ([*(id *)(a1 + 40) valueForFlag:16 forScope:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)])
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scopeIdentifier]);
    uint64_t v21 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  2001LL,  @"Scope %@ is inactive",  v20));

    goto LABEL_18;
  }

  uint64_t v26 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transactionTransportScopeMapping]);
  uint64_t v27 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v26;

  id v29 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scopeIdentifier]);
  id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopes]);
  __int16 v48 = 0LL;
  LODWORD(v29) = [v29 addTransportScopeForScopeIdentifier:v30 scopes:v31 useStagingScopeIfNecessary:1 error:&v48];
  uint64_t v21 = v48;

  if ((_DWORD)v29)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)
      && (uint64_t v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharingScopeForScope:")),
          uint64_t v33 = *(void *)(*(void *)(a1 + 80) + 8LL),
          uint64_t v34 = *(void **)(v33 + 40),
          *(void *)(v33 + 40) = v32,
          v34,
          (uint64_t v35 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL)) != 0LL))
    {
      id v36 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v35 scopeIdentifier]);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopes]);
      uint64_t v47 = v21;
      uint64_t v39 = [v36 addTransportScopeForScopeIdentifier:v37 scopes:v38 useStagingScopeIfNecessary:1 error:&v47];
      uint64_t v40 = v47;

      if (v39)
      {
        uint64_t v21 = v40;
        goto LABEL_28;
      }

      uint64_t v24 = 0LL;
      uint64_t v21 = v40;
    }

    else
    {
LABEL_28:
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) recordComputeStatePushQueue]);
      uint64_t v46 = v21;
      uint64_t v42 = objc_claimAutoreleasedReturnValue([v41 createNewTempDownloadFolderWithError:&v46]);
      uint64_t v43 = v46;

      uint64_t v44 = *(void *)(*(void *)(a1 + 88) + 8LL);
      uint64_t v45 = *(void **)(v44 + 40);
      *(void *)(v44 + 40) = v42;

      uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL) != 0LL;
      uint64_t v21 = v43;
    }
  }

  else
  {
LABEL_18:
    uint64_t v24 = 0LL;
  }

  if (a2 && !v24) {
    *a2 = v21;
  }

  return v24;
}
    }

    goto LABEL_16;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v8 = sub_10013AF3C();
    __int16 v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      id v20 = 138412546;
      uint64_t v21 = v5;
      id v22 = 2112;
      objc_super v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_ERROR,  "Expected record:\n%@\nvs. acknowledged record:\n%@",  (uint8_t *)&v20,  0x16u);
    }

    goto LABEL_16;
  }
  }

  return v4;
}

  return v9;
}

void sub_100034900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

double sub_100034918(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  double result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

#error "100036338: call analysis failed (funcsize=98)"
id sub_100036340(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a2 recordID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 recordName]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  uint64_t v6 = [v4 isEqualToString:v5];

  return v6;
}

BOOL sub_1000363B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if ([*(id *)(*(void *)(a1 + 32) + 88) containsObject:*(void *)(a1 + 40)])
  {
    BOOL v7 = 1LL;
  }

  else
  {
    uint64_t v8 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]( [CPLCKSplitCopyHelper alloc],  "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:",  0,  *(void *)(a1 + 48),  0,  objc_opt_class(CPLMasterChange),  [*(id *)(*(void *)(a1 + 32) + 288) databaseScope],  *(void *)(a1 + 56),  *(void *)(a1 + 32));
    __int16 v9 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Copy (%@)",  *(void *)(a1 + 64));
    char v10 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCKSplitCopyHelper copiedRecordFromSourceRecord:action:error:]( v8,  "copiedRecordFromSourceRecord:action:error:",  v6,  v9,  a4));
    BOOL v7 = v10 != 0LL;
    if (v10)
    {
      [*(id *)(*(void *)(a1 + 32) + 24) insertObject:v10 atIndex:*(void *)(a1 + 72)];
      [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _noteMasterWillBeUploadedToPrivateZone:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) _noteRecordWithScopedIdentifierWillMoveToSplitState:*(void *)(a1 + 40)];
    }
  }

  return v7;
}

#error "10003668C: call analysis failed (funcsize=98)"
void __cdecl -[CPLCKBatchUploadPlanner _copyPrivateMasterWithScopedIdentifier:masterTarget:uploadIndex:reason:]( CPLCKBatchUploadPlanner *self,  SEL a2,  id a3,  id a4,  unint64_t a5,  id a6)
{
  void *v6;
  id v10;
  id v11;
  id v12;
  CKRecordID *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  CKRecordID *v18;
  CKRecordID *v19;
  void *v20;
  void *v21;
  void *v22;
  CKRecordID *v23;
  id v24;
  CKRecordID *v25;
  CKRecordID *v26;
  id v27;
  id v28;
  uint64_t v30;
  uint64_t v32;
  void v33[5];
  id v34;
  id v35;
  CKRecordID *v36;
  CKRecordID *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char v10 = a3;
  uint64_t v11 = a4;
  id v12 = a6;
  uint64_t v13 = objc_alloc(&OBJC_CLASS___CKRecordID);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 otherScopedIdentifier]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
  id v16 = v15;
  if (!v15)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v11 scopedIdentifier]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitZoneIdentification zoneID](self->_sharedZoneIdentification, "zoneID", a2, a5));
  id v18 = -[CKRecordID initWithRecordName:zoneID:](v13, "initWithRecordName:zoneID:", v16, v17);

  if (!v15)
  {
  }

  id v19 = objc_alloc(&OBJC_CLASS___CKRecordID);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v11 scopedIdentifier]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 identifier]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitZoneIdentification zoneID](self->_destinationZoneIdentification, "zoneID"));
  objc_super v23 = -[CKRecordID initWithRecordName:zoneID:](v19, "initWithRecordName:zoneID:", v21, v22);

  -[CPLCKBatchUploadPlanner _willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:]( self,  "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:",  v18,  v10);
  -[CPLCKBatchUploadPlanner _willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:]( self,  "_willUpdateCKRecordWithID:onBehalfOfRecordWithScopedIdentifier:",  v23,  v10);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1000368C0;
  v33[3] = &unk_10023F640;
  v33[4] = self;
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  id v36 = v18;
  id v37 = v23;
  uint64_t v38 = v12;
  uint64_t v39 = v30;
  uint64_t v40 = v32;
  uint64_t v24 = v12;
  uint64_t v25 = v23;
  uint64_t v26 = v18;
  uint64_t v27 = v11;
  uint64_t v28 = v10;
  -[CPLCKBatchUploadPlanner requestPrivateCKRecordWithRecordIDBeforeUpload:fetchedBlock:reason:]( self,  "requestPrivateCKRecordWithRecordIDBeforeUpload:fetchedBlock:reason:",  v25,  v33,  v24);
}

BOOL sub_1000368C0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *((void *)&v39 + 1) = a2;
  id v7 = a3;
  uint64_t v8 = a1 + 32;
  unsigned __int8 v9 = [*(id *)(*(void *)(a1 + 32) + 104) containsObject:*(void *)(a1 + 40)];
  if ((v9 & 1) != 0)
  {
    uint64_t v38 = a4;
    *(void *)&__int128 v39 = v7;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v10 = *(id *)(*(void *)v8 + 48LL);
    id v11 = [v10 countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (!v11) {
      goto LABEL_10;
    }
    id v12 = v11;
    uint64_t v13 = *(void *)v41;
LABEL_4:
    uint64_t v14 = 0LL;
    while (1)
    {
      if (*(void *)v41 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(void **)(*((void *)&v40 + 1) + 8 * v14);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 recordID]);
      unsigned __int8 v17 = [v16 isEqual:*(void *)(a1 + 56)];

      if ((v17 & 1) != 0) {
        break;
      }
      if (v12 == (id)++v14)
      {
        id v12 = [v10 countByEnumeratingWithState:&v40 objects:v44 count:16];
        if (!v12)
        {
LABEL_10:

          goto LABEL_11;
        }

        goto LABEL_4;
      }
    }

    id v28 = v15;

    if (!v28) {
LABEL_11:
    }
      sub_100190820( a1,  a1 + 32,  v18,  v19,  v20,  v21,  v22,  v23,  v37,  v38,  v39,  v40,  *((uint64_t *)&v40 + 1),  v41,  *((uint64_t *)&v41 + 1),  v42,  *((uint64_t *)&v42 + 1),  v43,  *((uint64_t *)&v43 + 1),  v44[0],  v44[1]);
    id v29 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]( [CPLCKSplitCopyHelper alloc],  "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:",  v28,  *(void *)(a1 + 64),  1,  objc_opt_class(CPLMasterChange),  [*(id *)(*(void *)(a1 + 32) + 280) databaseScope],  *(void *)(a1 + 56),  *(void *)(a1 + 32));

    a4 = v38;
    id v7 = (id)v39;
  }

  else
  {
    if ([*(id *)(a1 + 48) targetState] == (id)3)
    {
      uint64_t v24 = objc_opt_class(&OBJC_CLASS___CPLMasterChange);
      uint64_t v25 = CPLCKRecord(v24, *(void **)(a1 + 56), 1);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v26 setObject:v27 forKeyedSubscript:@"recordModificationDate"];
    }

    else
    {
      uint64_t v26 = 0LL;
    }

    id v29 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]( [CPLCKSplitCopyHelper alloc],  "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:",  v26,  *(void *)(a1 + 64),  1,  objc_opt_class(CPLMasterChange),  [*(id *)(*(void *)(a1 + 32) + 280) databaseScope],  *(void *)(a1 + 56),  *(void *)(a1 + 32));
  }

  __int128 v30 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Copy (%@)",  *(void *)(a1 + 72));
  id v31 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCKSplitCopyHelper copiedRecordFromSourceRecord:action:error:]( v29,  "copiedRecordFromSourceRecord:action:error:",  v7,  v30,  a4));
  if (v31) {
    char v32 = v9;
  }
  else {
    char v32 = 1;
  }
  if ((v32 & 1) == 0)
  {
    uint64_t v33 = *(void **)(*(void *)v8 + 48LL);
    if (!v33)
    {
      uint64_t v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v35 = *(void **)(*(void *)v8 + 48LL);
      *(void *)(*(void *)v8 + 48LL) = v34;

      uint64_t v33 = *(void **)(*(void *)v8 + 48LL);
    }

    [v33 insertObject:v31 atIndex:*(void *)(a1 + 88)];
    [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) _noteMasterWillBeUploadedToSharedZone:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _noteRecordWithScopedIdentifierWillMoveToSplitState:*(void *)(a1 + 40)];
  }

  return v31 != 0LL;
}

#error "100037508: call analysis failed (funcsize=75)"
void __cdecl -[CPLCKBatchUploadPlanner requestRecordWithID:cloudKitScope:forKey:completionHandler:]( CPLCKBatchUploadPlanner *self,  SEL a2,  id a3,  id a4,  id a5,  id a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;
  CPLCKRecordRequestor *v14;
  CPLCKRecordRequestor *recordRequestor;
  CKRecordID *currentRecordID;
  CPLCKRecordRequestor *v17;
  CKRecordID *v18;
  uint64_t v19;
  id v20;
  id v21;
  void v22[4];
  id v23;
  id v24;
  id v10 = a4;
  id v11 = a6;
  id v12 = a3;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCKBatchUploadPlanner recordBuilderForKey:](self, "recordBuilderForKey:", a5));
  if (!self->_recordRequestor)
  {
    uint64_t v14 = -[CPLCKRecordRequestor initWithFetchCache:scopeProvider:]( objc_alloc(&OBJC_CLASS___CPLCKRecordRequestor),  "initWithFetchCache:scopeProvider:",  self->_fetchCache,  self);
    recordRequestor = self->_recordRequestor;
    self->_recordRequestor = v14;
  }

  currentRecordID = self->_currentRecordID;
  unsigned __int8 v17 = self->_recordRequestor;
  uint64_t v18 = currentRecordID;
  uint64_t v19 = CPLCloudKitOperationTypeForScope(v10);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100037648;
  v22[3] = &unk_10023F668;
  uint64_t v23 = v13;
  uint64_t v24 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = v11;
  -[CPLCKRecordRequestor requestRecordWithRecordID:operationType:forRecordWithRecordID:completionHandler:]( v17,  "requestRecordWithRecordID:operationType:forRecordWithRecordID:completionHandler:",  v12,  v19,  v18,  v22);
}

uint64_t sub_100037648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  *(void *)(a1 + 32),  a3);
}

void sub_100037B74(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_100037B84(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_100037B94(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

id sub_100038E7C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    os_log_t v2 = *(void **)(a2 + 8);
  }
  else {
    os_log_t v2 = 0LL;
  }
  return [v2 isEqual:*(void *)(a1 + 32)];
}

void sub_10003A40C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.uploadbatch.planner");
  int v3 = (void *)qword_100295FF8;
  qword_100295FF8 = (uint64_t)v2;
}

BOOL sub_10003A438(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

void sub_10003A778(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10003A7F4;
  v6[3] = &unk_10023DDE8;
  void v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_10003A7F4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v4)
  {
    os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v4,  v2,  @"Error sending %lu feedback messages",  [*(id *)(*(void *)(a1 + 32) + 272) count]));
  }

  else
  {
    id v3 = 0LL;
  }

  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280LL) + 16LL))();
}

LABEL_20:
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v71 allKeys]);
    __int128 v41 = [v40 countByEnumeratingWithState:&v74 objects:v88 count:16];
    if (v41)
    {
      __int128 v42 = v41;
      __int128 v43 = *(void *)v75;
      v68 = v40;
      while (2)
      {
        for (j = 0LL; j != v42; j = (char *)j + 1)
        {
          if (*(void *)v75 != v43) {
            objc_enumerationMutation(v40);
          }
          uint64_t v45 = *(void *)(*((void *)&v74 + 1) + 8LL * (void)j);
          if ([v23 shouldCopyCKRecordKeyToDestinationCKRecord:v45]
            && !-[NSSet containsObject:](v30, "containsObject:", v45))
          {
            uint64_t v46 = v30;
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:v45]);
            v73 = 0LL;
            __int16 v48 = (uint64_t (*)(void *, void *, uint64_t, void *, id *))v24[2];
            uint64_t v49 = v24;
            id v50 = v24;
            id v51 = v26;
            v52 = v48(v50, v26, v45, v47, &v73);
            __int16 v53 = v73;
            id v54 = v53;
            if (!v52)
            {

              uint64_t v55 = 0LL;
              uint64_t v56 = v61;
              uint64_t v24 = v49;
              __int128 v30 = v46;
              uint64_t v26 = v68;
              goto LABEL_34;
            }

            uint64_t v26 = v51;
            uint64_t v24 = v49;
            __int128 v30 = v46;
            __int128 v40 = v68;
          }
        }

        __int128 v42 = [v40 countByEnumeratingWithState:&v74 objects:v88 count:16];
        if (v42) {
          continue;
        }
        break;
      }
    }

    if (v26)
    {
      uint64_t v47 = v67;
      id v72 = v67;
      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v23 finalizedDestinationCKRecordFromProposedCKRecord:v26 error:&v72]);
      id v54 = v72;
      uint64_t v56 = v61;
LABEL_34:

      v67 = v54;
    }

    else
    {
      uint64_t v55 = 0LL;
      uint64_t v56 = v61;
    }

    id v15 = v63;
    if (v66 && !v55) {
      *id v66 = v67;
    }
    if (!_CPLSilentLogging)
    {
      v57 = sub_10003AF08();
      id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        v59 = (void *)objc_claimAutoreleasedReturnValue([v55 cplFullDescription]);
        *(_DWORD *)buf = 138412546;
        __int16 v91 = v65;
        v92 = 2112;
        v93 = v59;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "%@ to record: %@", buf, 0x16u);
      }
    }

    __int128 v39 = v55;

    uint64_t v14 = v64;
    id v16 = v65;
  }

  else
  {
    __int128 v39 = 0LL;
  }

  return v39;
}

  return v9;
}

  unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v18 = (NSString *)objc_claimAutoreleasedReturnValue([v17 stringForKey:@"CPLFailCloudKitTransportTaskClass"]);

  if (v18 && (uint64_t v19 = NSClassFromString(v18)) != 0LL && (objc_opt_isKindOfClass(self, v19) & 1) != 0)
  {
    uint64_t v20 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failing %@ for testing purpose",  objc_opt_class(self));
    uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);

    uint64_t v8 = 0;
    uint64_t v14 = (NSError *)v21;
  }

  else
  {
    uint64_t v8 = 1;
  }

  id v7 = v14;
  if (a3)
  {
LABEL_7:
    if (!v8) {
      *a3 = v7;
    }
  }

        goto LABEL_21;
      }

      goto LABEL_21;
    }

    if (_CPLSilentLogging) {
      goto LABEL_21;
    }
    uint64_t v21 = sub_100064724();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    uint64_t v23 = 138412802;
    uint64_t v24 = v7;
    uint64_t v25 = 2112;
    uint64_t v26 = v9;
    uint64_t v27 = 2114;
    id v28 = v13;
    id v16 = "Error with no response for %@\nerror: %@\n\nrequest UUIDs: (%{public}@)";
    unsigned __int8 v17 = v15;
    uint64_t v18 = OS_LOG_TYPE_ERROR;
LABEL_15:
    uint64_t v19 = 32;
    goto LABEL_19;
  }

  if (v8)
  {
    if (_CPLSilentLogging) {
      goto LABEL_21;
    }
    uint64_t v20 = sub_100064724();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v23 = 138412802;
    uint64_t v24 = v7;
    uint64_t v25 = 2112;
    uint64_t v26 = v8;
    uint64_t v27 = 2114;
    id v28 = v13;
    id v16 = "Success for %@\nresponse: %@\n\nrequest UUIDs: (%{public}@)";
    unsigned __int8 v17 = v15;
    uint64_t v18 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_15;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v22 = sub_100064724();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = 138412546;
      uint64_t v24 = v7;
      uint64_t v25 = 2114;
      uint64_t v26 = v13;
      id v16 = "No error but no response for %@\n\nrequest UUIDs: (%{public}@)";
      unsigned __int8 v17 = v15;
      uint64_t v18 = OS_LOG_TYPE_ERROR;
      uint64_t v19 = 22;
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
LABEL_29:
}
    }

    id v11 = [v9 countByEnumeratingWithState:&v36 objects:v40 count:16];
  }

  while (v11);
LABEL_24:
  uint64_t v26 = v34;
  *a4 = v26;
  if (-[CPLRecordChange supportsResources](v30, "supportsResources"))
  {
    uint64_t v35 = 1;
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[CPLRecordChange scopedIdentifier](v30, "scopedIdentifier"));
    id v28 = (void *)objc_claimAutoreleasedReturnValue( [v7 cplResourcesWithScopedIdentifier:v27 coherent:&v35 forRecord:v30 scopeProvider:v31]);
    -[CPLRecordChange setResources:](v30, "setResources:", v28);

    if (!v35) {
      -[CPLRecordChange setServerRecordIsCorrupted:](v30, "setServerRecordIsCorrupted:", 1LL);
    }
    unsigned __int8 v9 = v33;
  }

  -[CPLRecordChange fillWithCKRecord:](v30, "fillWithCKRecord:", v7);
  if (-[NSMutableDictionary count](v12, "count")) {
    -[CPLRecordChange fillMissingCKAssetProperties:withCKRecord:]( v30,  "fillMissingCKAssetProperties:withCKRecord:",  v12,  v7);
  }
}
}

    if (!v36) {
      break;
    }
    __int16 v53 = (v36 - 1) & v36;
    id v54 = __clz(__rbit64(v36)) | (v43 << 6);
    v52 = v43;
LABEL_31:
    v57 = 8 * v54;
    id v58 = *(void **)(*(void *)(v37 + 56) + v57);
    uint64_t v49 = *(id *)(*(void *)(v37 + 48) + v57);
    id v51 = v58;
    if (!v49) {
      goto LABEL_50;
    }
  }

  v52 = v43 + 1;
  if (__OFADD__(v43, 1LL))
  {
    __break(1u);
    goto LABEL_55;
  }

  if (v52 >= v152) {
    goto LABEL_50;
  }
  uint64_t v55 = *(void *)(v153 + 8 * v52);
  if (v55)
  {
LABEL_30:
    __int16 v53 = (v55 - 1) & v55;
    id v54 = __clz(__rbit64(v55)) + (v52 << 6);
    goto LABEL_31;
  }

  uint64_t v56 = v43 + 2;
  if (v43 + 2 >= v152) {
    goto LABEL_50;
  }
  uint64_t v55 = *(void *)(v153 + 8 * v56);
  if (v55) {
    goto LABEL_29;
  }
  uint64_t v56 = v43 + 3;
  if (v43 + 3 >= v152) {
    goto LABEL_50;
  }
  uint64_t v55 = *(void *)(v153 + 8 * v56);
  if (v55)
  {
LABEL_29:
    v52 = v56;
    goto LABEL_30;
  }

  v52 = v43 + 4;
  if (v43 + 4 >= v152) {
    goto LABEL_50;
  }
  uint64_t v55 = *(void *)(v153 + 8 * v52);
  if (v55) {
    goto LABEL_30;
  }
  v93 = v43 + 5;
  while (v152 != v93)
  {
    uint64_t v55 = *(void *)(v153 + 8 * v93++);
    if (v55)
    {
      v52 = v93 - 1;
      goto LABEL_30;
    }
  }

      goto LABEL_21;
    }

    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage engineLibrary](self, "engineLibrary"));
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s initialSyncDate](v8, "initialSyncDate"));
    if (v9)
    {
      if (_CPLSilentLogging)
      {
LABEL_19:

        goto LABEL_20;
      }

      id v10 = sub_100140908();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to set initial sync date for status (initial sync date has already been set)",  buf,  2u);
      }
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        uint64_t v14 = sub_100140908();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Updating initial sync date in global status now",  v20,  2u);
        }
      }

      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage engineLibrary](self, "engineLibrary"));
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      -[os_log_s updateInitialSyncDate:](v11, "updateInitialSyncDate:", v16);
    }

    goto LABEL_19;
  }

  if (!_CPLSilentLogging)
  {
    id v12 = sub_100140908();
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int8 v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "Failed to set initial sync date for status (no committed sync anchor)",  v17,  2u);
    }

    goto LABEL_21;
  }

  return v21;
}

    id v6 = v21;
    goto LABEL_21;
  }

  if (!_CPLSilentLogging)
  {
    uint64_t v19 = sub_1001713AC();
    id v10 = (id)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 lastCPLError]);
      *(_DWORD *)buf = 138412290;
      id v28 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_ERROR,  "Can't get an enumerator for retained identifies: %@",  buf,  0xCu);
    }

id sub_10003AF08()
{
  if (qword_100296028 != -1) {
    dispatch_once(&qword_100296028, &stru_10023F938);
  }
  return (id)qword_100296030;
}

uint64_t sub_10003AF48(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = v11;
  if (!v11)
  {
    [v9 setObject:0 forKeyedSubscript:v10];
    id v21 = 0LL;
LABEL_11:
    uint64_t v28 = 1LL;
    goto LABEL_12;
  }

  uint64_t v13 = (CKReference *)v11;
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___CKAsset);
  if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
  {
    id v15 = objc_alloc(&OBJC_CLASS___CKAssetReference);
    uint64_t v16 = a1[4];
    uint64_t v17 = a1[7];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[CKReference signature](v13, "signature"));
    uint64_t v19 = -[CKAssetReference initWithExistingRecordID:databaseScope:fieldName:fileSignature:]( v15,  "initWithExistingRecordID:databaseScope:fieldName:fileSignature:",  v16,  v17,  v10,  v18);

    uint64_t v20 = -[CKAsset initWithAssetReference:](objc_alloc(&OBJC_CLASS___CKAsset), "initWithAssetReference:", v19);
    +[CPLFingerprintScheme configureAssetTransferOptionsForCKAsset:fromReference:scopeProvider:]( &OBJC_CLASS___CPLFingerprintScheme,  "configureAssetTransferOptionsForCKAsset:fromReference:scopeProvider:",  v20,  v19,  a1[5]);

    id v21 = 0LL;
LABEL_8:
    uint64_t v13 = v20;
LABEL_10:
    [v9 setObject:v13 forKeyedSubscript:v10];

    goto LABEL_11;
  }

  uint64_t v22 = objc_opt_class(&OBJC_CLASS___CKReference);
  if ((objc_opt_isKindOfClass(v13, v22) & 1) == 0)
  {
    id v21 = 0LL;
    goto LABEL_10;
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKReference recordID](v13, "recordID"));
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 recordName]);

  uint64_t v25 = (void *)a1[5];
  id v30 = 0LL;
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 recordNameInDestinationCKRecordFromRecordName:v24 error:&v30]);
  id v21 = v30;
  if (v26)
  {
    uint64_t v27 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v26,  a1[6]);
    uint64_t v20 = -[CKReference initWithRecordID:action:]( objc_alloc(&OBJC_CLASS___CKReference),  "initWithRecordID:action:",  v27,  -[CKReference referenceAction](v13, "referenceAction"));

    goto LABEL_8;
  }

  if (a5)
  {
    id v21 = v21;
    uint64_t v28 = 0LL;
    *a5 = v21;
  }

  else
  {
    uint64_t v28 = 0LL;
  }

void sub_10003B408(_Unwind_Exception *a1)
{
}

uint64_t sub_10003B420(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003B430(uint64_t a1)
{
}

void sub_10003B438(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:a3]);
  if (!v8) {
    sub_100190E4C((uint64_t)v7, a1);
  }
  id v10 = (void *)v9;
  [*(id *)(a1 + 56) prepareCopyForCKRecordID:v7 fromCKRecord:v8];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
  [*(id *)(a1 + 64) setObject:v11 forKeyedSubscript:v7];

  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 72);
  id v20 = 0LL;
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitTransportTask copiedRecordFromSourceRecord:sourceDatabaseScope:toRecordID:helper:action:error:]( &OBJC_CLASS___CPLCloudKitTransportTask,  "copiedRecordFromSourceRecord:sourceDatabaseScope:toRecordID:helper:action:error:",  v8,  v12,  v10,  v13,  v14,  &v20));
  id v16 = v20;
  id v17 = v20;
  if (v15)
  {
    uint64_t v18 = *(void **)(a1 + 80);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
    [v18 addCopyMoveFromRecordID:v19 toRecordID:v10];

    [*(id *)(a1 + 88) addObject:v15];
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL), v16);
    *a4 = 1;
  }
}

void sub_10003B878(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10003B90C;
  v6[3] = &unk_10023DDE8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_10003B90C(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_10003B918(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10003B9AC;
  v6[3] = &unk_10023DDE8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_10003B9AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_10003B9B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10003BA8C;
  v8[3] = &unk_10023F7A0;
  id v6 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  id v10 = v5;
  id v11 = v6;
  id v14 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v7 = v5;
  [v9 dispatchAsync:v8];
}

void sub_10003BA8C(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10003AF08();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v15 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to upload copied records: %@",  buf,  0xCu);
      }

      if (!_CPLSilentLogging)
      {
        id v5 = sub_10003AF08();
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          id v7 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138412290;
          id v15 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Records were:\n %@", buf, 0xCu);
        }
      }
    }

    uint64_t v8 = *(void *)(a1 + 72);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10003BC74;
    v12[3] = &unk_10023F778;
    id v13 = *(id *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:",  v2,  v12,  v9,  v10,  *(void *)(a1 + 64)));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v11);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

NSMutableArray *sub_10003BC74(uint64_t a1)
{
  os_log_t v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "recordID", (void)v10));
        -[NSMutableArray addObject:](v2, "addObject:", v8);

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  return v2;
}

void sub_10003C020(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    __int128 v10 = objc_alloc(&OBJC_CLASS___CPLCloudKitCopyMoveOperationContext);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneID]);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 zoneID]);
    id v15 = -[CPLCloudKitCopyMoveOperationContext initFromZoneID:toZoneID:](v10, "initFromZoneID:toZoneID:", v12, v14);

    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 56);
    id v33 = 0LL;
    id v34 = 0LL;
    id v21 = (void *)objc_claimAutoreleasedReturnValue( [v16 _destinationRecordsFromSourceRecords:v7 recordIDs:v18 sourceType:v17 destinationRecordIDs:v19 helper:v20 sourceRecord IDs:&v34 operationContext:v15 action:@"Copy" error:&v33]);
    id v22 = v34;
    id v23 = v33;
    if (v21)
    {
      id v24 = [v22 count];
      if (v24 != [v7 count]) {
        sub_100190F3C(a1, (uint64_t *)(a1 + 48));
      }
      uint64_t v29 = *(void *)(a1 + 88);
      id v25 = v23;
      uint64_t v27 = *(void **)(a1 + 48);
      uint64_t v26 = *(void *)(a1 + 56);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_10003C24C;
      v30[3] = &unk_10023E118;
      id v32 = *(id *)(a1 + 64);
      id v31 = v22;
      uint64_t v28 = v26;
      id v23 = v25;
      [v27 _uploadDestinationRecords:v21 destinationType:v29 scopeProvider:v28 operationContext:v15 uploadAction:@"copy" completionHandler:v30];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }
}

uint64_t sub_10003C24C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0LL, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

uint64_t sub_10003C328(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003C614(id a1)
{
  byte_100296000 = os_variant_has_internal_content("com.apple.cpl.log-move-change-on-error");
}

void sub_10003C638(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) changeWithSourceRecordID:v9]);
  if (v12)
  {
    if (!_CPLSilentLogging)
    {
      id v14 = sub_10003AF08();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v33 = v11;
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 cplFullDescription]);
        id v17 = v12;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v13 sourceRecordChangeTag]);
        id v34 = v10;
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v13 destinationRecord]);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 recordID]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 cplFullDescription]);
        *(_DWORD *)buf = 138413058;
        __int128 v41 = v16;
        __int16 v42 = 2112;
        __int128 v43 = v18;
        __int16 v44 = 2112;
        uint64_t v45 = v21;
        __int16 v46 = 2112;
        id v47 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Failed to move [%@ etag: %@] to %@: %@",  buf,  0x2Au);

        id v10 = v34;
        id v12 = v17;

        id v11 = v33;
      }

      if (byte_100296000)
      {
        if (!_CPLSilentLogging)
        {
          id v22 = sub_10003AF08();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v13 destinationRecord]);
            id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 cplFullDescription]);
            *(_DWORD *)buf = 138412290;
            __int128 v41 = v25;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Destination record was %@", buf, 0xCu);
          }

void sub_10003C9E0(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "didModifyRecordWithID:");
  }
  os_log_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v2 recordID]);
    objc_msgSend(v3, "didModifyRecordWithID:");
  }

  else
  {
    id v4 = *(void **)(a1 + 56);
    if (!v4) {
      return;
    }
    id v5 = *(void **)(a1 + 40);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v4 destinationRecord]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 recordID]);
    [v5 didModifyRecordWithID:v6];
  }
}

void sub_10003CA84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10003CB48;
  v6[3] = &unk_10023F860;
  void v6[4] = v4;
  id v7 = v3;
  id v10 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_10003CB48(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v2)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10003CC4C;
    v7[3] = &unk_10023F778;
    id v8 = *(id *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:",  v2,  v7,  v4,  v5,  @"move"));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v6);
  }

  else
  {
    (*(void (**)(void, void))(v3 + 16))(*(void *)(a1 + 64), 0LL);
  }
}

id sub_10003CC4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) destinationRecordIDs];
}

void sub_10003CEE4(_Unwind_Exception *a1)
{
}

void sub_10003CEFC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:a3]);
  if (v8)
  {
    if (objc_msgSend(v8, "cpl_inExpunged"))
    {
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10003AF08();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v44 = v7;
          __int16 v45 = 2112;
          __int16 v46 = v9;
          id v12 = "Won't move %@ to %@ as its real record is expunged";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0x16u);
          goto LABEL_28;
        }

        goto LABEL_28;
      }
    }

    else
    {
      if (!objc_msgSend(v8, "cpl_isSparseRecord"))
      {
        [*(id *)(a1 + 56) prepareCopyForCKRecordID:v7 fromCKRecord:v8];
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
        [*(id *)(a1 + 64) setObject:v15 forKeyedSubscript:v7];

        uint64_t v16 = *(void *)(a1 + 112);
        uint64_t v17 = *(void *)(a1 + 56);
        id v40 = 0LL;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitTransportTask copiedRecordFromSourceRecord:sourceDatabaseScope:toRecordID:helper:action:error:]( &OBJC_CLASS___CPLCloudKitTransportTask,  "copiedRecordFromSourceRecord:sourceDatabaseScope:toRecordID:helper:action:error:",  v8,  v16,  v9,  v17,  @"Move",  &v40));
        id v19 = v40;
        id v11 = (os_log_s *)v40;
        if (v18)
        {
          if (qword_100296010)
          {
            uint64_t v20 = (*(uint64_t (**)(void))(qword_100296010 + 16))();
            id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
            if ([v21 moveStep])
            {
              __int128 v41 = @"inject_fault_step";
              id v22 = *(void **)(a1 + 72);
              id v39 = v21;
              id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v21 moveStep]));
              id v24 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v23]);
              __int16 v42 = v24;
              id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
              id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v25));

              id v21 = v39;
              [v39 workItemDelay];
              if (v27 != 0.0)
              {
                [v39 workItemDelay];
                uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)(v28 * 1000.0)));
                [v26 setObject:v29 forKeyedSubscript:@"sparsifier_work_item_vesting_delay_milliseconds"];
              }

              [v18 setPluginFields:v26];
              if (!_CPLSilentLogging)
              {
                id v30 = sub_10003AF08();
                id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                {
                  id v32 = (void *)objc_claimAutoreleasedReturnValue([v18 recordID]);
                  *(_DWORD *)buf = 138412546;
                  id v44 = v32;
                  __int16 v45 = 2112;
                  __int16 v46 = v26;
                  _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Setting move plug-in fields on %@ to %@",  buf,  0x16u);
                }
              }
            }
          }

          id v33 = objc_alloc_init(&OBJC_CLASS___CKMovePhotosChange);
          id v34 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
          [v33 setSourceRecordID:v34];

          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v8 etag]);
          [v33 setSourceRecordChangeTag:v35];

          [v33 setDestinationRecord:v18];
          id v36 = *(void **)(a1 + 80);
          id v37 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
          id v38 = (void *)objc_claimAutoreleasedReturnValue([v18 recordID]);
          [v36 addCopyMoveFromRecordID:v37 toRecordID:v38];

          [*(id *)(a1 + 88) addChange:v33];
        }

        else
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL), v19);
          *a4 = 1;
        }

        goto LABEL_28;
      }

      if (!_CPLSilentLogging)
      {
        id v14 = sub_10003AF08();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v44 = v7;
          __int16 v45 = 2112;
          __int16 v46 = v9;
          id v12 = "Won't move %@ to %@ as its real record is a sparse record";
          goto LABEL_13;
        }

        goto LABEL_28;
      }
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v13 = sub_10003AF08();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v44 = v7;
      __int16 v45 = 2112;
      __int16 v46 = v9;
      id v12 = "Won't move %@ to %@ as its real record has already disappeared";
      goto LABEL_13;
    }

LABEL_28:
  }
}
}

    goto LABEL_29;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v12 = [v11 BOOLForKey:@"_CPLCloudKitAutoDisableGateKeeper"];

  if (v12)
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_10005E3FC();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v23) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "DDC has been disabled by server",  (uint8_t *)&v23,  2u);
      }
    }

    id v15 = 0;
    _CPLCloudKitGateKeeperDisabledByServer = 1;
  }

  else
  {
    id v15 = 1;
  }

  _CPLCloudKitUseGateKeeper = v15;
  if (v15) {
    goto LABEL_18;
  }
LABEL_29:
}

  -[NSMutableArray addObject:](v3, "addObject:", @"thermalHeavyOrAbove");
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

        id v13 = 0LL;
        id v9 = v17;
        uint64_t v17 = 0LL;
LABEL_29:

LABEL_31:
        goto LABEL_32;
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}
      }

      id v25 = [v23 countByEnumeratingWithState:&v134 objects:v143 count:16];
    }

    while (v25);
  }

  id v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v15 participants]);
  id v36 = [v35 countByEnumeratingWithState:&v130 objects:v138 count:16];
  v102 = v34;
  if (!v36) {
    goto LABEL_72;
  }
  id v37 = v36;
  id v38 = v34;
  v112 = *(void *)v131;
  do
  {
    id v39 = 0LL;
    do
    {
      if (*(void *)v131 != v112) {
        objc_enumerationMutation(v35);
      }
      id v40 = *(void **)(*((void *)&v130 + 1) + 8LL * (void)v39);
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 userIdentifier]);
      __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v40 participantID]);
      if (!v41 || !-[NSMutableSet containsObject:](v114, "containsObject:", v41))
      {
        -[NSMutableSet removeObject:](v22, "removeObject:", v42);
        __int16 v46 = v41;
        __int128 v41 = 0LL;
LABEL_47:

        goto LABEL_48;
      }

      -[NSMutableSet removeObject:](v114, "removeObject:", v41);
      if (v42) {
        -[NSMutableSet removeObject:](v22, "removeObject:", v42);
      }
      if ([v111 containsObject:v41])
      {
        __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
        id v44 = [v43 BOOLForKey:@"CPLSharedLibraryAllowMultipleRemoveParticipantCalls"];

        if ((v44 & 1) == 0)
        {
          if (_CPLSilentLogging)
          {
            id v22 = v115;
            id v34 = v38;
          }

          else
          {
            id v51 = sub_10011CDF4();
            v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
            id v22 = v115;
            id v34 = v38;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543618;
              v140 = v41;
              v141 = 2112;
              v142 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Ignoring %{public}@ who is already exiting %@",  buf,  0x16u);
            }
          }

          goto LABEL_67;
        }

        if (!_CPLSilentLogging)
        {
          __int16 v45 = sub_10011CDF4();
          __int16 v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          id v22 = v115;
          if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543618;
            v140 = v41;
            v141 = 2112;
            v142 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v46,  OS_LOG_TYPE_DEFAULT,  "%{public}@ is already exiting %@ but will retry the exit request",  buf,  0x16u);
          }

          goto LABEL_47;
        }

        id v22 = v115;
LABEL_48:
        id v34 = v38;
      }

      if ([v40 isCurrentUser])
      {
        id v13 = v105;
        uint64_t v3 = v106;
        id v15 = v108;
        uint64_t v17 = v103;
        if (!_CPLSilentLogging)
        {
          v75 = sub_10011CDF4();
          v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v140 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_ERROR,  "Can't remove current user from %@",  buf,  0xCu);
          }
        }

        v77 = *(void *)(v104 + 88);
        id v78 = @"Permission denied: can't remove current user";
        goto LABEL_108;
      }

      if ([v40 role] == (id)1)
      {
        id v13 = v105;
        uint64_t v3 = v106;
        id v15 = v108;
        uint64_t v17 = v103;
        if (!_CPLSilentLogging)
        {
          v79 = sub_10011CDF4();
          v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v140 = v7;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "Can't remove owner from %@", buf, 0xCu);
          }
        }

        v77 = *(void *)(v104 + 88);
        id v78 = @"Permission denied: can't remove owner";
LABEL_108:
        uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  52LL,  v78));
        (*(void (**)(uint64_t, void, void *))(v77 + 16))(v77, 0LL, v81);

        v59 = v115;
        goto LABEL_109;
      }

      if (v41 && [v40 acceptanceStatus] == (id)2)
      {
        id v47 = v109;
        __int16 v48 = v41;
LABEL_57:
        -[NSMutableArray addObject:](v47, "addObject:", v48);
        goto LABEL_67;
      }

      if (v42)
      {
        -[NSMutableArray addObject:](v110, "addObject:", v42);
        if ([v40 acceptanceStatus] == (id)2) {
          goto LABEL_67;
        }
        id v47 = v34;
        __int16 v48 = v42;
        goto LABEL_57;
      }

      if (!_CPLSilentLogging)
      {
        uint64_t v49 = sub_10011CDF4();
        id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v140 = v40;
          v141 = 2112;
          v142 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "Trying to remove pending %@ from %@ but it has no participant ID set yet",  buf,  0x16u);
        }
      }

      id v22 = v115;
LABEL_67:

      id v39 = (char *)v39 + 1;
    }

    while (v37 != v39);
    __int16 v53 = [v35 countByEnumeratingWithState:&v130 objects:v138 count:16];
    id v37 = v53;
  }

  while (v53);
LABEL_72:

  id v54 = -[NSMutableSet count](v114, "count");
  uint64_t v55 = v22;
  uint64_t v56 = v54;
  v57 = -[NSMutableSet count](v55, "count");
  if (!v56)
  {
    id v13 = v105;
    uint64_t v3 = v106;
    id v15 = v108;
    id v58 = v104;
    v59 = v115;
    if (!v57 || _CPLSilentLogging) {
      goto LABEL_125;
    }
    v85 = sub_10011CDF4();
    uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_124;
    }
    id v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v115, "allObjects"));
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "componentsJoinedByString:", @", "));
    *(_DWORD *)buf = 138412290;
    v140 = v87;
    id v88 = "Some participants have already been removed or have never been part of the share: %@";
    goto LABEL_123;
  }

  id v13 = v105;
  uint64_t v3 = v106;
  id v58 = v104;
  if (!v57)
  {
    __int16 v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    id v90 = [v89 BOOLForKey:@"CPLSharedLibraryAllowMultipleRemoveParticipantCalls"];

    id v15 = v108;
    if ((v90 & 1) != 0)
    {
      if (!_CPLSilentLogging)
      {
        __int16 v91 = sub_10011CDF4();
        v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          v93 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v114, "allObjects"));
          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "componentsJoinedByString:", @", "));
          *(_DWORD *)buf = 138543362;
          v140 = v94;
          _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEFAULT,  "Some participants have already been removed or have never been part of the share - will retry exit request: %{public}@",  buf,  0xCu);
        }
      }

      v95 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v114, "allObjects"));
      -[NSMutableArray addObjectsFromArray:](v109, "addObjectsFromArray:", v95);

      -[NSMutableSet removeAllObjects](v114, "removeAllObjects");
      v59 = v115;
      goto LABEL_125;
    }

    v59 = v115;
    if (_CPLSilentLogging) {
      goto LABEL_125;
    }
    id v96 = sub_10011CDF4();
    uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
    if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_124;
    }
    id v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v114, "allObjects"));
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "componentsJoinedByString:", @", "));
    *(_DWORD *)buf = 138543362;
    v140 = v87;
    id v88 = "Some participants have already been removed or have never been part of the share: %{public}@";
LABEL_123:
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, v88, buf, 0xCu);

    v59 = v115;
    goto LABEL_124;
  }

  id v15 = v108;
  v59 = v115;
  if (!_CPLSilentLogging)
  {
    v60 = sub_10011CDF4();
    uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v114, "allObjects"));
      v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "componentsJoinedByString:", @", "));
      id v62 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v115, "allObjects"));
      id v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "componentsJoinedByString:", @", "));
      *(_DWORD *)buf = 138543618;
      v140 = v107;
      v141 = 2114;
      v142 = v63;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Some participants have already been removed or have never been part of the share: %{public}@ / %{public}@",  buf,  0x16u);

      v59 = v115;
    }

    uint64_t v16 = 0;
    goto LABEL_43;
  }

  if ((v12 & 1) == 0
    && v8
    && +[CPLPrequeliteStore shouldWarnUserBeforeWipeOnUpgrade]( &OBJC_CLASS___CPLPrequeliteStore,  "shouldWarnUserBeforeWipeOnUpgrade"))
  {
    uint64_t v17 = objc_alloc(&OBJC_CLASS___CPLPrequelitePreventWipeNotification);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStore abstractObject](self, "abstractObject"));
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 engineLibrary]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 libraryIdentifier]);
    id v21 = v10;
    if (qword_1002A3AB8 != -1) {
      dispatch_once(&qword_1002A3AB8, &stru_100247660);
    }
    id v22 = (CPLPrequelitePreventWipeNotification *)objc_claimAutoreleasedReturnValue([(id)qword_1002A3AB0 objectForKeyedSubscript:v21]);
    if (!v22)
    {
      id v39 = v17;
      if (-[CPLPrequelitePreventWipeNotification length](v21, "length")
        && (id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet lowercaseLetterCharacterSet]( NSCharacterSet,  "lowercaseLetterCharacterSet")),  v24 = objc_msgSend( v23,  "characterIsMember:",  -[CPLPrequelitePreventWipeNotification characterAtIndex:]( v21,  "characterAtIndex:",  0)),  v23,  v24))
      {
        id v22 = (CPLPrequelitePreventWipeNotification *)-[CPLPrequelitePreventWipeNotification mutableCopy]( v21,  "mutableCopy");
        id v38 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequelitePreventWipeNotification substringToIndex:](v21, "substringToIndex:", 1LL));
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v38 uppercaseString]);
        -[CPLPrequelitePreventWipeNotification replaceCharactersInRange:withString:]( v22,  "replaceCharactersInRange:withString:",  0LL,  1LL,  v25);
      }

      else
      {
        id v22 = v21;
      }

      uint64_t v17 = v39;
    }

    id v15 = -[CPLPrequelitePreventWipeNotification initWithLibraryIdentifier:reason:]( v17,  "initWithLibraryIdentifier:reason:",  v20,  v22);
    if (-[CPLPrequelitePreventWipeNotification shouldPreventWipeOnUpgradeCreateRadar:]( v15,  "shouldPreventWipeOnUpgradeCreateRadar:",  v7))
    {
      if (!_CPLSilentLogging)
      {
        id v26 = sub_10015409C();
        double v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          __int128 v43 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Trying to wipe database for reason '%@' but user asked to prevent wipes",  buf,  0xCu);
        }
      }

      double v28 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors preventWipeErrorWithReason:preventedByUser:]( &OBJC_CLASS___CPLErrors,  "preventWipeErrorWithReason:preventedByUser:",  v21,  1LL));
      -[PQLConnection setLastError:](self->_db, "setLastError:", v28);
      if (a6) {
        *a6 = v28;
      }

      goto LABEL_28;
    }
  }

  db = self->_db;
  __int128 v41 = 0LL;
  id v30 = -[PQLConnection close:](db, "close:", &v41);
  id v15 = (CPLPrequelitePreventWipeNotification *)v41;
  if ((v30 & 1) == 0 && !_CPLSilentLogging)
  {
    id v31 = sub_10015409C();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v43 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Some trouble closing the stale db: %@",  buf,  0xCu);
    }
  }

  id v33 = self->_db;
  self->_db = 0LL;

  -[CPLPrequeliteStore _wipeWithReason:](self, "_wipeWithReason:", v10);
  self->_reentrencyGuard = 1;
  id v40 = 0LL;
  uint64_t v16 = -[CPLPrequeliteStore _openWithError:](self, "_openWithError:", &v40);
  id v34 = (CPLPrequelitePreventWipeNotification *)v40;
  if (!v16)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v35 = sub_10015409C();
      id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v43 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "Unable to create the database: %@",  buf,  0xCu);
      }
    }

    if (a6) {
      *a6 = v34;
    }
  }

  self->_reentrencyGuard = 0;

LABEL_43:
  return v16;
}

    return 0LL;
  }

  id v44 = 0u;
  __int16 v45 = 0u;
  __int16 v42 = 0u;
  __int128 v43 = 0u;
  os_log_t v2 = (os_log_s *)*(id *)(a1 + 40);
  uint64_t v3 = -[os_log_s countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v42,  v52,  16LL);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = *(void *)v43;
    while (2)
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v43 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 platformObject]);
        if ([v7 isAlive]
          && ([v8 upgradeStorageToVersion:*(void *)(a1 + 48)] & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            id v21 = sub_10015409C();
            id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              id v23 = *(void *)(a1 + 48);
              id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastCPLError]);
              id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 localizedDescription]);
              *(_DWORD *)buf = 138412802;
              id v47 = (id *)v7;
              __int16 v48 = 2048;
              uint64_t v49 = v23;
              id v50 = 2112;
              id v51 = v25;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Unable to upgrade %@ to version %lld: %@",  buf,  0x20u);
            }
          }

          id v26 = *(void **)(a1 + 32);
          double v27 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);
          double v28 = *(void *)(a1 + 48);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastCPLError]);
          id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 localizedDescription]);
          [v26 recordUpgradeEvent:@"Failed to upgrade %@ to %lld: %@", v27, v28, v30];

          goto LABEL_27;
        }
      }

      uint64_t v4 = -[os_log_s countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v42,  v52,  16LL);
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v9 = *(id **)(a1 + 32);
  if (v9[38])
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9[38] platformObject]);
    id v11 = [v10 upgradeStorageToVersion:*(void *)(a1 + 48)];

    if (!v11)
    {
      if (!_CPLSilentLogging)
      {
        id v31 = sub_10015409C();
        id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          id v33 = *(void *)(a1 + 32);
          id v34 = *(id **)(v33 + 304);
          uint64_t v35 = *(void *)(a1 + 48);
          id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v33 + 32) lastCPLError]);
          id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 localizedDescription]);
          *(_DWORD *)buf = 138412802;
          id v47 = v34;
          __int16 v48 = 2048;
          uint64_t v49 = v35;
          id v50 = 2112;
          id v51 = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Unable to upgrade %@ to version %lld: %@",  buf,  0x20u);
        }
      }

      id v38 = *(id **)(a1 + 32);
      os_log_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue([v38[38] name]);
      id v39 = *(void *)(a1 + 48);
      id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) lastCPLError]);
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 localizedDescription]);
      [v38 recordUpgradeEvent:@"Failed to upgrade %@ to %lld: %@", v2, v39, v41];

      goto LABEL_28;
    }

    id v9 = *(id **)(a1 + 32);
  }

  double result = [v9 _postUpgradeToVersion:*(void *)(a1 + 48)];
  if ((result & 1) == 0 && !_CPLSilentLogging)
  {
    id v13 = sub_10015409C();
    os_log_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id v14 = *(id **)(a1 + 32);
      id v15 = *(void *)(a1 + 48);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14[4] lastCPLError]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v16 localizedDescription]);
      *(_DWORD *)buf = 138412802;
      id v47 = v14;
      __int16 v48 = 2048;
      uint64_t v49 = v15;
      id v50 = 2112;
      id v51 = v8;
      uint64_t v17 = "Unable to do post-upgrade %@ to version %lld: %@";
      goto LABEL_21;
    }

    goto LABEL_28;
  }

  return result;
}

CPLMoveChangesBatch *__cdecl sub_10003D414(id a1, CPLMoveChangesBatch *a2)
{
  return a2;
}

void sub_10003D69C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v7 = objc_alloc(&OBJC_CLASS___CPLCloudKitCopyMoveOperationContext);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
    id v12 = -[CPLCloudKitCopyMoveOperationContext initFromZoneID:toZoneID:](v7, "initFromZoneID:toZoneID:", v9, v11);

    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 56);
    id v30 = 0LL;
    id v31 = 0LL;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( [v16 _moveChangesFromSourceRecords:v6 recordIDs:v14 sourceType:v13 destinationRecordIDs:v15 helper:v17 sourceRecordIDs:&v31 ope rationContext:v12 error:&v30]);
    id v19 = v31;
    id v20 = v30;
    if (v18)
    {
      uint64_t v21 = (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
      id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

      uint64_t v23 = *(void *)(a1 + 80);
      uint64_t v24 = *(void *)(a1 + 88);
      id v25 = *(void **)(a1 + 48);
      uint64_t v26 = *(void *)(a1 + 56);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10003D87C;
      v27[3] = &unk_10023E118;
      id v29 = *(id *)(a1 + 64);
      id v28 = v19;
      [v25 _applyMoveChanges:v22 sourceType:v23 destinationType:v24 helper:v26 operationContext:v12 completionHandler:v27];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }
}

uint64_t sub_10003D87C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0LL, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

void sub_10003DA48(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mappingForMoveSteps]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10003DB08;
  v5[3] = &unk_10023F918;
  id v6 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v4 count]);
  uint64_t v1 = v6;
  [v4 enumerateKeysAndObjectsUsingBlock:v5];
  id v2 = -[NSMutableDictionary copy](v1, "copy");
  uint64_t v3 = (void *)qword_100296018;
  qword_100296018 = (uint64_t)v2;
}

id sub_10003DB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:a3];
}

void sub_10003DF70(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.recordcopy");
  uint64_t v3 = (void *)qword_100296030;
  qword_100296030 = (uint64_t)v2;
}

uint64_t CPLCKFeatureAvailabilityResponseReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init(&OBJC_CLASS___CPLCKAvailabilityResponse);
      [a1 addFeatures:v12];
      if (!PBReaderPlaceMark(a2, v14) || (CPLCKAvailabilityResponseReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000402B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000402E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) objectForKey:v5]);
  uint64_t v8 = (uint64_t)[v6 integerValue];
  if (v8 > 100) {
    goto LABEL_4;
  }
  uint64_t v9 = v8;
  if (v8 < 0)
  {
    uint64_t v9 = 0LL;
    id v11 = @" [error]";
  }

  else
  {
    if ((unint64_t)v8 >= 0x64)
    {
LABEL_4:
      int v10 = 0LL;
      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      goto LABEL_43;
    }

    id v11 = &stru_1002482B0;
  }

  if ([v7 supportsResources])
  {
    id v12 = "";
    if ([v7 hasChangeType:8])
    {
      unsigned int v13 = [*(id *)(*(void *)(a1 + 32) + 88) containsObject:v5];
      if (v13) {
        id v12 = "(-R)";
      }
      goto LABEL_14;
    }
  }

  else
  {
    id v12 = "";
  }

  LOBYTE(v13) = 1;
LABEL_14:
  uint64_t v46 = a1;
  id v47 = v7;
  if (*(_BYTE *)(a1 + 72))
  {
    char v50 = v13;
    uint64_t v14 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v15 = objc_opt_class(v7);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 scopedIdentifier]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[CPLRecordChange descriptionForChangeType:]( CPLRecordChange,  "descriptionForChangeType:",  [v7 changeType]));
    uint64_t v41 = v15;
    a1 = v46;
    int v10 = -[NSString initWithFormat:]( v14,  "initWithFormat:",  @"\t%@[%@]%@%s [%ld%%]%@",  v41,  v16,  v17,  v12,  v9,  v11);

    [*(id *)(v46 + 40) addObject:v10];
    if ((v50 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    int v10 = 0LL;
    if ((v13 & 1) != 0) {
      goto LABEL_43;
    }
  }

  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v7 resources]);
  unint64_t v18 = (unint64_t)[v45 count];
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) += v18;
  if (v18)
  {
    unint64_t v42 = v18;
    id v43 = v6;
    id v51 = v10;
    id v44 = v5;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v7 resources]);
    id v19 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = 0LL;
      uint64_t v22 = *(void *)v53;
      do
      {
        uint64_t v23 = 0LL;
        id v48 = v20;
        do
        {
          if (*(void *)v53 != v22) {
            objc_enumerationMutation(obj);
          }
          uint64_t v24 = *(void **)(*((void *)&v52 + 1) + 8LL * (void)v23);
          if ((+[CPLResource shouldIgnoreResourceTypeOnUpload:]( CPLResource,  "shouldIgnoreResourceTypeOnUpload:",  [v24 resourceType]) & 1) == 0)
          {
            id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 identity]);
            id v26 = [v25 fileSize];
            *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) += v26;
            double v27 = (void *)objc_claimAutoreleasedReturnValue([v7 resourceCopyFromScopedIdentifier]);
            id v28 = v21;
            if (v27 && [v24 sourceResourceType])
            {
              id v29 = (void *)objc_claimAutoreleasedReturnValue([v25 fileURL]);
              BOOL v30 = v29 == 0LL;
            }

            else
            {
              BOOL v30 = 0;
            }

            if (*(_BYTE *)(a1 + 72))
            {
              id v31 = objc_alloc(&OBJC_CLASS___NSString);
              id v32 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( CPLResource,  "shortDescriptionForResourceType:",  [v24 resourceType]));
              id v33 = (void *)objc_claimAutoreleasedReturnValue([v25 fileUTI]);
              uint64_t v34 = objc_claimAutoreleasedReturnValue( +[NSByteCountFormatter stringFromByteCount:countStyle:]( &OBJC_CLASS___NSByteCountFormatter,  "stringFromByteCount:countStyle:",  v26,  3LL));
              uint64_t v35 = (void *)v34;
              id v36 = &stru_1002482B0;
              if (v30) {
                id v36 = @"(server-copy)";
              }
              id v37 = -[NSString initWithFormat:](v31, "initWithFormat:", @"\t\t%@ (%@) %@ %@", v32, v33, v34, v36);

              unint64_t v7 = v47;
              a1 = v46;

              [*(id *)(v46 + 40) addObject:v37];
              id v51 = v37;
            }

            id v20 = v48;
            uint64_t v21 = &v28[(void)v26];
          }

          uint64_t v23 = (char *)v23 + 1;
        }

        while (v20 != v23);
        id v20 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    if (v42 < 2)
    {
      id v6 = v43;
      id v5 = v44;
      int v10 = v51;
    }

    else
    {
      id v6 = v43;
      id v5 = v44;
      int v10 = v51;
      if (*(_BYTE *)(a1 + 72))
      {
        id v38 = objc_alloc(&OBJC_CLASS___NSString);
        id v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSByteCountFormatter stringFromByteCount:countStyle:]( &OBJC_CLASS___NSByteCountFormatter,  "stringFromByteCount:countStyle:",  v21,  3LL));
        id v40 = -[NSString initWithFormat:]( v38,  "initWithFormat:",  @"\t\t\tTotal for %lu resources in record: %@",  v42,  v39);

        [*(id *)(a1 + 40) addObject:v40];
        int v10 = v40;
      }
    }
  }

LABEL_43:
}

__CFString *sub_100040C48(int a1)
{
  id v2 = sub_100040CA8(a1);
  uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue(v2);
  if (!v3)
  {
    if (a1) {
      uint64_t v3 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"Unkown #%lu", a1);
    }
    else {
      uint64_t v3 = @"Unknown";
    }
  }

  return v3;
}

id sub_100040CA8(int a1)
{
  if (a1 == 1) {
    return CPLFeatureNameMomentShare;
  }
  else {
    return 0LL;
  }
}

id sub_100040CD8(void *a1)
{
  id v1 = a1;
  if (qword_100296040 != -1) {
    dispatch_once(&qword_100296040, &stru_10023F980);
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_100296038 objectForKeyedSubscript:v1]);
  uint64_t v3 = v2;
  if (v2) {
    id v4 = [v2 intValue];
  }
  else {
    id v4 = 0LL;
  }

  return v4;
}

void sub_100040D64(id a1)
{
  uint64_t v3 = CPLFeatureNameMomentShare;
  id v4 = &off_10025A098;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v4,  &v3,  1LL));
  id v2 = (void *)qword_100296038;
  qword_100296038 = v1;
}

BOOL CPLRemappedRecordReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 8LL;
LABEL_21:
        uint64_t v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t v15 = PBReaderReadString(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v15);
    uint64_t v14 = 16LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10004126C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100041280(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

void sub_100041ED0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100041EF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  char v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v6 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([WeakRetained feedbackCompletionBlock]);

  if (v6)
  {
    ((void (**)(void, id))v6)[2](v6, v8);
    id v7 = objc_loadWeakRetained(v4);
    [v7 setFeedbackCompletionBlock:0];
  }
}

void sub_1000421A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000421CC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CPLCKFeatureAvailabilityRequest);
  id v2 = (void *)qword_100296048;
  qword_100296048 = (uint64_t)v1;

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___CPLCKAvailabilityRequest);
  -[CPLCKAvailabilityRequest setFeature:](v3, "setFeature:", 1LL);
  [(id)qword_100296048 addFeatures:v3];
}

void sub_100042230(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( [WeakRetained featureCheckAvailabilityCompletionBlock]);
  if (v8)
  {
    if (v6)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
      if ([v9 isEqualToString:CKErrorDomain])
      {
        id v10 = [v6 code];

        if (v10 == (id)15)
        {

          goto LABEL_6;
        }
      }

      else
      {
      }

      ((void (**)(void, void, id))v8)[2](v8, 0LL, v6);
LABEL_22:
      [WeakRetained setFeatureCheckAvailabilityCompletionBlock:0];
      goto LABEL_23;
    }

LABEL_23:
}

      goto LABEL_24;
    }

    outputType = v5->_outputType;
    v5->_outputType = (NSString *)v8;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:2]);
  [v11 doubleValue];
  uint64_t v13 = v12;

  if (v13 <= 1000.0)
  {
    if (_CPLSilentLogging) {
      goto LABEL_24;
    }
    __int128 v22 = __CPLGenericOSLogDomain(v14);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:2]);
      *(_DWORD *)buf = 138412290;
      id v26 = v18;
      id v19 = "Invalid max pixel count '%@'";
      id v20 = (os_log_s *)v8;
      goto LABEL_21;
    }

    goto LABEL_23;
  }

  v5->_maxPixelCount = v13;
LABEL_9:
  id v15 = [(id)objc_opt_class(v5) destinationresourceTypeFromShortDescription:v7];
  v5->_resourceType = (unint64_t)v15;
  if (!v15)
  {
    if (!_CPLSilentLogging)
    {
      uint64_t v21 = __CPLGenericOSLogDomain(0LL);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v26 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "Invalid dynamic resource type '%@'",  buf,  0xCu);
      }

      goto LABEL_23;
    }

  double v27 = 0u;
  id v28 = 0u;
  __int128 v25 = 0u;
  id v26 = 0u;
  unint64_t v18 = *((id *)*v2 + 1);
  id v19 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v20; i = (char *)i + 1)
      {
        if (*(void *)v26 != v21) {
          objc_enumerationMutation(v18);
        }
        __int128 v23 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)*v2 + 25), "operationTracker", (void)v25));
        [v24 operationHasBeenCancelled:v23];

        [v23 cancel];
      }

      id v20 = [v18 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v20);
  }

  return (char *)[*v2 _cancelCallbackProgress];
}

  -[NSMutableArray addObject:](v3, "addObject:", @"lowDataMode");
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
    }

    a4 = 0LL;
LABEL_25:

    goto LABEL_26;
  }

        id v14 = 0;
      }
    }
  }

  return v14 & 1;
}

    id v15 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    double v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    id v29 = *v27;
    id v28 = v27[1];
    BOOL v30 = *(void *)(v43 + 72);
    id v31 = *(void *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_1000CEC9C(v31, (uint64_t)v8, type metadata accessor for ResponseItem);
    }

    else
    {
      sub_1000CEC58(v31, (uint64_t)v8, type metadata accessor for ResponseItem);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v45, *(void *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    uint64_t result = Hasher._finalize()();
    id v32 = -1LL << *(_BYTE *)(v11 + 32);
    id v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        id v38 = *(void *)(v16 + 8 * v34);
      }

      while (v38 == -1);
      id v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    *id v20 = v29;
    v20[1] = v28;
    uint64_t result = sub_1000CEC9C((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19, type metadata accessor for ResponseItem);
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  uint64_t v3 = v40;
  __int128 v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v39 = 1LL << *(_BYTE *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v24 = -1LL << v39;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v9);
  CPLCKAvailabilityRequest *v3 = v11;
  return result;
}

        id v28 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString itemScopedIdentifier](v21, "itemScopedIdentifier"));
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 scopeIdentifier]);

        v117 = 0LL;
        BOOL v30 = [v15 addTransportScopeForScopeIdentifier:v29 scopes:v111 useStagingScopeIfNecessary:1 error:&v117];
        id v31 = v117;
        if (v30) {
          -[NSMutableArray addObject:](v108, "addObject:", v21);
        }
        else {
          ((void (*)(void *, __CFString *, uint64_t, const __CFString *))v19[2])( v19,  v21,  2001LL,  @"can't find a valid transport scope");
        }

LABEL_113:
        id v20 = (char *)v20 + 1;
      }

      while (v116 != v20);
      id v90 = [obj countByEnumeratingWithState:&v120 objects:v132 count:16];
      v116 = v90;
    }

    while (v90);
  }

  if (v94) {
    *v94 = v108;
  }

  return v100;
}

  return v13;
}

void sub_100042598(uint64_t a1)
{
  if (a1 && !*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 1;
    id v2 = objc_alloc(&OBJC_CLASS___NSDictionary);
    uint64_t v3 = *(void *)(a1 + 32);
    id v20 = 0LL;
    char v4 = -[NSDictionary initWithContentsOfURL:error:](v2, "initWithContentsOfURL:error:", v3, &v20);
    id v5 = v20;
    if (v4)
    {
      if (!_CPLSilentLogging)
      {
        id v6 = sub_1000427E0();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          __int128 v22 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Operation group mapping: %{public}@",  buf,  0xCu);
        }
      }

      id v15 = _NSConcreteStackBlock;
      uint64_t v16 = 3221225472LL;
      uint64_t v17 = sub_100042820;
      unint64_t v18 = &unk_10023FA00;
      id v8 =  -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  -[NSDictionary count](v4, "count"));
      id v19 = v8;
      -[NSDictionary enumerateKeysAndObjectsUsingBlock:](v4, "enumerateKeysAndObjectsUsingBlock:", &v15);
      if (-[NSMutableDictionary count](v8, "count", v15, v16, v17, v18))
      {
        id v9 = -[NSMutableDictionary copy](v8, "copy");
        id v10 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v9;
      }
    }

    else
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      unsigned __int8 v12 = [v11 cplIsFileDoesNotExistError:v5];

      if ((v12 & 1) != 0 || _CPLSilentLogging) {
        goto LABEL_12;
      }
      id v13 = sub_1000427E0();
      id v8 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
      {
        id v14 = (NSDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) path]);
        *(_DWORD *)buf = 138412546;
        __int128 v22 = v14;
        __int16 v23 = 2112;
        id v24 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "Failed to load group mapping at %@: %@",  buf,  0x16u);
      }
    }

LABEL_12:
  }

id sub_1000427E0()
{
  if (qword_100296058 != -1) {
    dispatch_once(&qword_100296058, &stru_10023FA70);
  }
  return (id)qword_100296060;
}

void sub_100042820(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
  {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }

  else if (!_CPLSilentLogging)
  {
    id v8 = sub_1000427E0();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Invalid value for group '%@': %@",  (uint8_t *)&v10,  0x16u);
    }
  }
}

void sub_100042A38(void *a1)
{
}

void sub_100042A4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100042A6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100042A7C(uint64_t a1)
{
}

void sub_100042A84(uint64_t *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8);
  char v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100042BAC(void *a1)
{
}

void sub_100042BC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100042BE0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result)
  {
    uint64_t v3 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(*(void *)(a1 + 32) + 16) count]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 16LL);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100042C98;
    v8[3] = &unk_10023FA50;
    void v8[4] = v6;
    return [v7 enumerateKeysAndObjectsUsingBlock:v8];
  }

  return result;
}

void sub_100042C98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"'%@' -> '%@'", v6, v5);

  [v4 addObject:v7];
}

void sub_100042D54(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.groupmapping");
  uint64_t v3 = (void *)qword_100296060;
  qword_100296060 = (uint64_t)v2;
}

void sub_100042FEC(void *a1)
{
}

void sub_100043000( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10004302C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004303C(uint64_t a1)
{
}

void sub_100043044(void *a1)
{
  os_log_t v2 = (_CPLCloudKitTaskGroupThrottler *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]]);
  if (!v2)
  {
    os_log_t v2 = -[_CPLCloudKitTaskGroupThrottler initWithGroupName:minimumThrottlingInterval:]( objc_alloc(&OBJC_CLASS____CPLCloudKitTaskGroupThrottler),  "initWithGroupName:minimumThrottlingInterval:",  a1[5],  *(double *)(a1[4] + 24LL));
    [*(id *)(a1[4] + 16) setObject:v2 forKeyedSubscript:a1[5]];
  }

  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(a1[8] + 8LL);
  id obj = *(id *)(v4 + 40);
  unsigned __int8 v5 = -[_CPLCloudKitTaskGroupThrottler shouldRunOperationsNow:error:](v2, "shouldRunOperationsNow:error:", v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = v5;
}

void sub_100043278(void *a1)
{
}

void sub_10004328C(_Unwind_Exception *a1)
{
}

void sub_1000432A0(void *a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors bestErrorForUnderlyingError:]( &OBJC_CLASS___CPLCloudKitErrors,  "bestErrorForUnderlyingError:",  a1[4]));
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 16) objectForKeyedSubscript:a1[6]]);
  [v2 operationDidFinishNow:a1[7] withError:v3];
}

void sub_100043400(void *a1)
{
}

void sub_100043414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100043434(void *a1)
{
  if ([*(id *)(a1[4] + 16) count])
  {
    os_log_t v2 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"\n%@", a1[5]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1[4] + 16) count]);
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) allKeys]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 sortedArrayUsingSelector:"compare:"]);

    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        int v10 = 0LL;
        do
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 16) objectForKeyedSubscript:*(void *)(*((void *)&v16 + 1) + 8 * (void)v10)]);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 statusWithNow:v3]);
          -[NSMutableArray addObject:](v4, "addObject:", v12);

          int v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v8);
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v4, "componentsJoinedByString:", v2));
    uint64_t v14 = *(void *)(a1[6] + 8LL);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }

void sub_1000439A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 64))
  {
    *(_BYTE *)(v1 + 64) = 1;
    dispatch_time_t v3 = dispatch_time(0LL, 30000000000LL);
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned __int8 v5 = *(dispatch_queue_s **)(v4 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100043A3C;
    block[3] = &unk_10023DC70;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }

void sub_100043A3C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 56))
  {
    if (!_CPLSilentLogging)
    {
      if (qword_100296068 != -1) {
        dispatch_once(&qword_100296068, &stru_10023FAE0);
      }
      dispatch_time_t v3 = (os_log_s *)qword_100296070;
      if (os_log_type_enabled((os_log_t)qword_100296070, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(v4 + 56);
        uint64_t v6 = *(void *)(v4 + 72);
        int v7 = 134218498;
        uint64_t v8 = v5;
        __int16 v9 = 2114;
        uint64_t v10 = v6;
        __int16 v11 = 1024;
        int v12 = 30;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Throttled %lu operations for '%{public}@' in the last %ds",  (uint8_t *)&v7,  0x1Cu);
      }

      uint64_t v1 = *(void *)(a1 + 32);
    }

    *(void *)(v1 + 56) = 0LL;
  }

void sub_100044128(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.task.throttling");
  dispatch_time_t v3 = (void *)qword_100296070;
  qword_100296070 = (uint64_t)v2;
}

id sub_100044424()
{
  if (qword_100296078 != -1) {
    dispatch_once(&qword_100296078, &stru_10023FB78);
  }
  return (id)qword_100296080;
}

void sub_100044464(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100044510;
  v10[3] = &unk_10023DE80;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_100044510(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v4)
  {
    os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v4,  v2,  @"Failed to get list of disabled features"));

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }
}

void sub_1000446D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100044780;
  v10[3] = &unk_10023DE80;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_100044780(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v5)
  {
    os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v5,  v2,  @"Failed to get derivatives upload configuration"));

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 280LL), *(id *)(a1 + 48));
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v4 + 296)) {
      [(id)v4 fetchDisabledFeatures];
    }
    else {
      (*(void (**)(void, void, void, void, void))(*(void *)(v4 + 272) + 16LL))( *(void *)(v4 + 272),  *(void *)(v4 + 288),  0LL,  *(void *)(v4 + 280),  0LL);
    }
  }
}

void sub_1000448E8(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 288), a2);
    [*(id *)(a1 + 32) fetchDerivativesFilter];
  }

  else
  {
    (*(void (**)(void))(*(void *)(v5 + 272) + 16LL))();
  }
}

void sub_1000449DC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.setup");
  dispatch_time_t v3 = (void *)qword_100296080;
  qword_100296080 = (uint64_t)v2;
}

void sub_100044C94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100044CB4(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = (id *)(a1 + 40);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  kdebug_trace(721946580, [WeakRetained hash], 0, 0, 0);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100044E58(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _runOperationsWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[34] + 16LL))();
  }
}

void sub_100044F30(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = CPLEnableWorkaroundFor101242629();
  if (v3
    || (v4 & 1) != 0
    || (uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 296LL), v5 != objc_opt_class(&OBJC_CLASS___CPLAssetChange))
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) additionalInfo]),
        v6,
        v6))
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 304) scopeIdentifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainScopeIdentifier]);
    if ([v7 isEqualToString:v8])
    {
      unsigned __int8 v9 = [v7 hasPrefix:CPLMainScopeIdentifierForAppPrefix];

      if ((v9 & 1) == 0)
      {
        if (!_CPLSilentLogging)
        {
          id v10 = sub_100045100();
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 304LL);
            int v13 = 138412290;
            uint64_t v14 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Starting additional query for sparse assets in %@",  (uint8_t *)&v13,  0xCu);
          }
        }

        [*(id *)(a1 + 32) _runQueryWithCurrentUserID:*(void *)(a1 + 40) cursor:0 additionalInfo:@"Sparse" completionHandler:*(void *)(*(void *)(a1 + 32) + 272)];
      }
    }

    else
    {
    }
  }
}

id sub_100045100()
{
  if (qword_1002960A8 != -1) {
    dispatch_once(&qword_1002960A8, &stru_10023FCF0);
  }
  return (id)qword_1002960B0;
}

void sub_1000457B4(_Unwind_Exception *a1)
{
}

void sub_1000457F0(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"TRUEPREDICATE"));
  uint64_t v56 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v1,  "initWithRecordType:predicate:resultsLimit:",  @"CPLAssetAndMasterByAssetDate",  v2,  200LL);

  id v3 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  char v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"TRUEPREDICATE"));
  __int128 v54 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v3,  "initWithRecordType:predicate:resultsLimit:",  @"CPLAssetSparseByCreateTime",  v4,  200LL);

  uint64_t v5 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLAssetChange);
  id v6 = sub_100045CE4(v5, 0LL);
  __int128 v55 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v57[0] = v55;
  v58[0] = v56;
  int v7 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLAssetChange);
  id v8 = sub_100045CE4(v7, @"Sparse");
  __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v57[1] = v53;
  v58[1] = v54;
  unsigned __int8 v9 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLPersonChange);
  id v10 = NSStringFromClass(v9);
  __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v57[2] = v52;
  id v11 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  id v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLPerson"));
  char v50 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v11,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v51,  200LL);
  v58[2] = v50;
  uint64_t v12 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLAlbumChange);
  int v13 = NSStringFromClass(v12);
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v57[3] = v49;
  uint64_t v14 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLAlbum"));
  id v47 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v14,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v48,  5LL);
  v58[3] = v47;
  id v15 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLContainerRelationChange);
  __int128 v16 = NSStringFromClass(v15);
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v57[4] = v46;
  __int128 v17 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLContainerRelation"));
  id v44 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v17,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v45,  200LL);
  v58[4] = v44;
  __int128 v18 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLMemoryChange);
  __int128 v19 = NSStringFromClass(v18);
  id v43 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v57[5] = v43;
  id v20 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  unint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLMemory"));
  uint64_t v41 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v20,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v42,  200LL);
  v58[5] = v41;
  uint64_t v21 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLSocialGroupChange);
  __int128 v22 = NSStringFromClass(v21);
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  v57[6] = v23;
  id v24 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLSocialGroup"));
  id v26 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v24,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v25,  200LL);
  v58[6] = v26;
  double v27 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLSuggestionChange);
  id v28 = NSStringFromClass(v27);
  id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v57[7] = v29;
  BOOL v30 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLSuggestion"));
  id v32 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v30,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v31,  200LL);
  v58[7] = v32;
  id v33 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLFaceCropChange);
  uint64_t v34 = NSStringFromClass(v33);
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  v57[8] = v35;
  id v36 = objc_alloc(&OBJC_CLASS___CPLCloudKitQueryOptions);
  id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"type = %@",  @"CPLFaceCrop"));
  id v38 = -[CPLCloudKitQueryOptions initWithRecordType:predicate:resultsLimit:]( v36,  "initWithRecordType:predicate:resultsLimit:",  @"CPLRecordByType",  v37,  25LL);
  v58[8] = v38;
  uint64_t v39 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v58,  v57,  9LL));
  id v40 = (void *)qword_100296088;
  qword_100296088 = v39;
}

NSString *sub_100045CE4(objc_class *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v5 = NSStringFromClass(a1);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    int v7 = -[NSString initWithFormat:](v4, "initWithFormat:", @"%@_%@", v6, v3);
  }

  else
  {
    id v8 = NSStringFromClass(a1);
    int v7 = (NSString *)objc_claimAutoreleasedReturnValue(v8);
  }

  return v7;
}

uint64_t sub_100045D74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100045D84(uint64_t a1)
{
}

void sub_100045D8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      id v10 = objc_autoreleasePoolPush();
      ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
      id v11 = *(void **)(a1 + 32);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100046198;
      v26[3] = &unk_10023FBE8;
      uint64_t v12 = *(void *)(a1 + 72);
      v26[4] = v11;
      v26[5] = v12;
      v26[6] = *(void *)(a1 + 88);
      [v11 dispatchAsync:v26];
      if (!_CPLSilentLogging)
      {
        id v13 = sub_100045100();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v28 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pulled change (query) %@", buf, 0xCu);
        }
      }

      id v25 = 0LL;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:",  &v25,  *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(void *)(a1 + 48)));
      id v16 = v25;
      if (v15)
      {
        if ([*(id *)(a1 + 56) supportsDownloadOfChange:v15 scopeProvider:*(void *)(a1 + 32)])
        {
          if ([v15 inExpunged])
          {
            __int128 v17 = (void *)objc_opt_class(v15);
            __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v15 scopedIdentifier]);
            id v19 = [v17 newDeleteChangeWithScopedIdentifier:v18];

            id v15 = v19;
          }

          [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) addRecord:v15];
          goto LABEL_24;
        }

        if (_CPLSilentLogging)
        {
LABEL_24:

          objc_autoreleasePoolPop(v10);
          goto LABEL_25;
        }

        id v24 = sub_100045100();
        __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v28 = v15;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Ignoring unsupported %@", buf, 0xCu);
        }
      }

      else
      {
        if (_CPLSilentLogging)
        {
          id v15 = 0LL;
          goto LABEL_24;
        }

        id v22 = sub_100045100();
        __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v28 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to translate CKRecord to CPLRecord: %@",  buf,  0xCu);
        }

        id v15 = 0LL;
      }

      goto LABEL_24;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v20 = sub_100045100();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v28 = v7;
      __int16 v29 = 2112;
      id v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to fetch %@ in query: %@", buf, 0x16u);
    }
  }

LABEL_25:
}
}

  -[CPLBackgroundActivity detachFromCKOperation:](self->_activity, "detachFromCKOperation:", v21);

  return v8;
}

  return v16;
}

  -[NSMutableArray addObject:](v3, "addObject:", @"memory");
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
      }

    uint64_t v12 = (v23 - 1) & v23;
    id v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    id v16 = 16 * v15;
    __int128 v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    __int128 v18 = v17[1];
    id v19 = 8 * v15;
    id v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    os_log_s *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    id result = v20;
  }

  id v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  __int16 v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    id v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int16 v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v25 - 1) & v25;
    id v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    id v16 = 8 * v15;
    __int128 v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    __int128 v18 = 16 * v15;
    id v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    id v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id v22 = (void *)(*(void *)(v4 + 56) + v18);
    *id v22 = v20;
    v22[1] = v21;
    __int16 v23 = v17;
    id result = (void *)swift_bridgeObjectRetain(v21);
  }

  id v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  id v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    id v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
    id v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    __int128 v17 = 16 * v16;
    __int128 v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    id v19 = *v18;
    id v20 = v18[1];
    uint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_1000CEC58(*(void *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for ResponseItem);
    id v22 = (void *)(*(void *)(v7 + 48) + v17);
    *id v22 = v19;
    v22[1] = v20;
    sub_1000CEC9C((uint64_t)v4, *(void *)(v7 + 56) + v21, type metadata accessor for ResponseItem);
    id result = (void *)swift_bridgeObjectRetain(v20);
  }

  id v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    uint64_t v1 = v26;
    goto LABEL_28;
  }

  id v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    id v11 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    id v11 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v11 >= v28) {
      goto LABEL_26;
    }
    id v24 = *(void *)(v27 + 8 * v11);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    id v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    id v16 = 16 * v15;
    __int128 v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    __int128 v18 = v17[1];
    id v20 = 32 * v15;
    sub_1000CE838(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    os_log_s *v21 = v19;
    v21[1] = v18;
    sub_10011C5EC(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain(v18);
  }

  id v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  __int16 v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    id v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int16 v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

          LOBYTE(v5) = 1;
          break;
      }
    }
  }

  return v5;
}

id sub_100046198(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:(double)*(unint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) / (double)*(uint64_t *)(a1 + 48)];
}

void sub_1000461BC(void *a1, void *a2)
{
  id v3 = a2;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_100045100();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138412290;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Updated cursor: %@", (uint8_t *)&v12, 0xCu);
    }
  }

  id v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  id v8 = -[CPLCKQueryCursor initWithQueryCursor:additionalInfo:]( objc_alloc(&OBJC_CLASS___CPLCKQueryCursor),  "initWithQueryCursor:additionalInfo:",  v3,  a1[5]);
  [v6 sendProgressBatch:v7 updatedCursor:v8];

  *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = 0LL;
  id v9 = objc_alloc_init(&OBJC_CLASS___CPLChangeBatch);
  uint64_t v10 = *(void *)(a1[6] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1000462F4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_100045100();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v10 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ignoring cursor fetch %@", buf, 0xCu);
      }
    }
  }

  else
  {
    uint64_t v7 = (void *)a1[4];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100046428;
    v8[3] = &unk_10023DC70;
    void v8[4] = v7;
    [v7 dispatchAsync:v8];
    (*(void (**)(void))(a1[5] + 16LL))();
  }

  objc_autoreleasePoolPop(v4);
}

id sub_100046428(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateOneBatch];
}

void sub_100046430(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8LL);
  if (!*(_BYTE *)(v8 + 24))
  {
    *(_BYTE *)(v8 + 24) = 1;
    id v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_100046534;
    v12[3] = &unk_10023FC88;
    void v12[4] = v9;
    id v10 = v6;
    uint64_t v11 = *(void *)(a1 + 72);
    id v13 = v10;
    uint64_t v18 = v11;
    id v16 = *(id *)(a1 + 48);
    id v14 = v5;
    id v15 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 56);
    [v9 dispatchAsync:v12];
  }
}

void sub_100046534(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (+[CPLCloudKitErrors isCloudKitOperationCancelledError:]( &OBJC_CLASS___CPLCloudKitErrors,  "isCloudKitOperationCancelledError:",  v2)
      || ([v2 isCPLOperationCancelledError] & 1) != 0)
    {
      if (_CPLSilentLogging)
      {
LABEL_9:
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors realErrorForError:]( &OBJC_CLASS___CPLCloudKitErrors,  "realErrorForError:",  v2));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedDescription]);
        int v12 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v9,  v10,  @"Error downloading batch: %@",  v11));

        goto LABEL_13;
      }

      id v3 = sub_100045100();
      id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      if (!os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEBUG))
      {
LABEL_8:

        goto LABEL_9;
      }

      *(_WORD *)buf = 0;
      id v5 = "Query was cancelled";
      id v6 = (os_log_s *)v4;
      os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
      uint32_t v8 = 2;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, buf, v8);
      goto LABEL_8;
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v2 domain]);
    if ([v13 isEqual:CKErrorDomain])
    {
      if ([v2 code] == (id)11 || objc_msgSend(v2, "code") == (id)12)
      {

LABEL_18:
        if (!_CPLSilentLogging)
        {
          id v14 = sub_100045100();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 296LL);
            *(_DWORD *)buf = 138412546;
            uint64_t v22 = v16;
            __int16 v23 = 2048;
            id v24 = [v2 code];
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Query for %@ failed because it is not supported (CloudKit error: %ld)",  buf,  0x16u);
          }
        }

        id v17 = *(const __CFString **)(a1 + 56);
        if (!v17) {
          id v17 = @"Regular";
        }
        int v12 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  255LL,  @"Query for %@ - %@ is not supported for this user",  *(void *)(*(void *)(a1 + 32) + 296LL),  v17));
        goto LABEL_13;
      }

      id v20 = [v2 code];

      if (v20 == (id)1) {
        goto LABEL_18;
      }
    }

    else
    {
    }

    if (_CPLSilentLogging) {
      goto LABEL_9;
    }
    id v18 = sub_100045100();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 296LL);
    *(_DWORD *)buf = 138412546;
    uint64_t v22 = v19;
    __int16 v23 = 2112;
    id v24 = v2;
    id v5 = "Query for %@ failed with error: %@";
    id v6 = (os_log_s *)v4;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
    uint32_t v8 = 22;
    goto LABEL_7;
  }

  if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count]) {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
  int v12 = 0LL;
LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100046ABC(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CKQueryCursor);
  id v3 = -[NSSet initWithObjects:](v1, "initWithObjects:", v2, objc_opt_class(&OBJC_CLASS___CPLCKQueryCursor), 0LL);
  id v4 = (void *)qword_100296098;
  qword_100296098 = (uint64_t)v3;
}

void sub_100046CB8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.query");
  id v3 = (void *)qword_1002960B0;
  qword_1002960B0 = (uint64_t)v2;
}

id CPLFuzziedFileUTI(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (qword_1002960C0 != -1) {
      dispatch_once(&qword_1002960C0, &stru_10023FD10);
    }
    if ([(id)qword_1002960B8 containsObject:v1])
    {
      id v2 = v1;
    }

    else
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue(+[UTType typeWithIdentifier:](&OBJC_CLASS___UTType, "typeWithIdentifier:", v1));
      id v4 = v3;
      if (v3)
      {
        id v5 = UTTypeImage;
        if (([v3 conformsToType:UTTypeImage] & 1) == 0)
        {
          id v5 = UTTypeAudio;
          if (([v4 conformsToType:UTTypeAudio] & 1) == 0)
          {
            id v5 = UTTypeMovie;
            if (([v4 conformsToType:UTTypeMovie] & 1) == 0)
            {
              id v5 = UTTypeText;
            }
          }
        }
      }

      else
      {
        id v5 = UTTypeItem;
      }

      id v2 = (id)objc_claimAutoreleasedReturnValue(-[UTType identifier](v5, "identifier"));
    }
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

void sub_100046E28(id a1)
{
  id v1 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  @"public.jpeg",  @"com.apple.quicktime-movie",  @"public.heic",  @"public.mpeg-4",  @"com.apple.photos.apple-adjustment-envelope",  @"public.png",  @"com.canon.cr2-raw-image",  @"public.archive",  0LL);
  id v2 = (void *)qword_1002960B8;
  qword_1002960B8 = (uint64_t)v1;
}

void sub_100046EAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 176), 8) = v5;

      id v4 = *(void **)(a1 + 8);
    }

    [v4 addObject:v7];
    id v3 = v7;
  }
}

uint64_t CPLRemappedByReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      int v12 = objc_alloc_init(&OBJC_CLASS___CPLRemappedRecord);
      sub_100046EAC(a1, v12);
      if (!PBReaderPlaceMark(a2, v14) || !CPLRemappedRecordReadFrom((uint64_t)v12, a2))
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000475BC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_100047870(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), 0LL, a4);
    return;
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  if (v5)
  {
    id v61 = 0LL;
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopedIdentifier]);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 scopeIdentifier]);
    char v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v5,  "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:",  &v61,  v7,  *(void *)(a1 + 48),  *(void *)(a1 + 56)));
    id v9 = v61;

    if (v8)
    {
      if (([v8 inExpunged] & 1) != 0 || objc_msgSend(v8, "isDelete"))
      {
        uint64_t v11 = *(void *)(a1 + 64);
        uint64_t v10 = *(void *)(a1 + 72);
        uint64_t v12 = *(void *)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cpl_zoneName"));
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"%@ %@ is deleted or sparse in %@",  v10,  v12,  v14));
        (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v15);
      }

      else
      {
        if ((objc_opt_isKindOfClass(v8, *(void *)(a1 + 72)) & 1) != 0)
        {
          if ([v8 supportsResources] && *(void *)(*(void *)(a1 + 48) + 288))
          {
            __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
            __int128 v57 = 0u;
            __int128 v58 = 0u;
            __int128 v59 = 0u;
            __int128 v60 = 0u;
            id obj = (id)objc_claimAutoreleasedReturnValue([v8 resources]);
            id v55 = [obj countByEnumeratingWithState:&v57 objects:v64 count:16];
            if (v55)
            {
              uint64_t v54 = *(void *)v58;
              __int128 v52 = v5;
              while (2)
              {
                for (i = 0LL; i != v55; i = (char *)i + 1)
                {
                  if (*(void *)v58 != v54) {
                    objc_enumerationMutation(obj);
                  }
                  __int16 v29 = *(void **)(*((void *)&v57 + 1) + 8LL * (void)i);
                  id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 identity]);
                  id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 fileURL]);

                  if (v31)
                  {
                    id v32 = v9;
                    id v33 = objc_alloc(&OBJC_CLASS___NSString);
                    uint64_t v34 = *(void *)(a1 + 72);
                    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( CPLResource,  "shortDescriptionForResourceType:",  [v29 resourceType]));
                    id v36 = -[NSString initWithFormat:](v33, "initWithFormat:", @"resource-%@-%@", v34, v35);

                    id v37 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 288) URLByAppendingPathComponent:v36 isDirectory:0]);
                    id v56 = 0LL;
                    LODWORD(v34) = [v53 moveItemAtURL:v31 toURL:v37 error:&v56];
                    id v38 = v56;
                    if (!(_DWORD)v34)
                    {
                      uint64_t v46 = *(void *)(a1 + 64);
                      id v47 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( CPLResource,  "shortDescriptionForResourceType:",  [v29 resourceType]));
                      uint64_t v48 = objc_opt_class(v8);
                      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v8 scopedIdentifier]);
                      char v50 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  150LL,  v38,  @"Failed to move %@ of %@ %@ to its destination",  v47,  v48,  v49));
                      (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0LL, v50);

                      return;
                    }

                    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v29 identity]);
                    [v39 setFileURL:v37];

                    id v9 = v32;
                    unsigned int v5 = v52;
                  }
                }

                id v55 = [obj countByEnumeratingWithState:&v57 objects:v64 count:16];
                if (v55) {
                  continue;
                }
                break;
              }
            }
          }

          (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
          goto LABEL_16;
        }

        uint64_t v40 = *(void *)(a1 + 64);
        uint64_t v41 = objc_opt_class(v8);
        uint64_t v42 = *(void *)(a1 + 72);
        uint64_t v43 = *(void *)(a1 + 40);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
        id v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cpl_zoneName"));
        __int16 v45 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"%@ %@ is not the expected %@ in %@",  v41,  v43,  v42,  v44));
        (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0LL, v45);
      }
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        if (qword_1002960C8 != -1) {
          dispatch_once(&qword_1002960C8, &stru_10023FDA8);
        }
        uint64_t v22 = (os_log_s *)qword_1002960D0;
        if (os_log_type_enabled((os_log_t)qword_1002960D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v63 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed to translate CKRecord to CPLRecord: %@",  buf,  0xCu);
        }
      }

      uint64_t v23 = *(void *)(a1 + 64);
      uint64_t v24 = *(void *)(a1 + 40);
      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneID]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "cpl_zoneName"));
      double v27 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failed to translate record %@ in %@ to %@",  v24,  v26,  *(void *)(a1 + 72)));
      (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0LL, v27);
    }

void sub_100047F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(void **)(a1 + 32);
  if (v3)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopedIdentifier]);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___CPLAssetChange);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10004802C;
    v8[3] = &unk_10023FD88;
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v3;
    [v4 _fetchRecordWithIdentifier:v6 expectedClass:v7 currentUserRecordID:v9 completionHandler:v8];
  }

  else
  {
    (*(void (**)(void))(v4[37] + 16LL))();
  }
}

void sub_10004802C(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (v3)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 masterIdentifier]);
    unint64_t v6 = *(void **)(a1 + 32);
    if (v5)
    {
      uint64_t v7 = objc_opt_class(&OBJC_CLASS___CPLMasterChange);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_100048198;
      v13[3] = &unk_10023FD60;
      uint64_t v8 = *(void *)(a1 + 40);
      void v13[4] = *(void *)(a1 + 32);
      id v14 = v4;
      [v6 _fetchRecordWithIdentifier:v5 expectedClass:v7 currentUserRecordID:v8 completionHandler:v13];
    }

    else
    {
      uint64_t v9 = v6[37];
      uint64_t v10 = objc_opt_class(v4);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 scopedIdentifier]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"%@ %@ has no master",  v10,  v11));
      (*(void (**)(uint64_t, void, void, void *))(v9 + 16))(v9, 0LL, 0LL, v12);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 296LL) + 16LL))();
  }
}

uint64_t sub_100048198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 296LL);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v4 + 16))(v4, a2, *(void *)(a1 + 40), 0LL);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(v4 + 16))(v4, 0LL, 0LL, a3);
  }
}

void sub_100048488(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.fetch-asset-master");
  id v3 = (void *)qword_1002960D0;
  qword_1002960D0 = (uint64_t)v2;
}

uint64_t CPLCKFeatureAvailabilityRequestReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___CPLCKAvailabilityRequest);
      [a1 addFeatures:v12];
      if (!PBReaderPlaceMark(a2, v14) || (CPLCKAvailabilityRequestReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_24:
      }
    }
  }

  else
  {
    byte_1002960E1 = 0;
    uint64_t v21 = (void *)qword_1002960D8;
    qword_1002960D8 = 0LL;
  }

  byte_1002960E0 = a3;
}

    uint64_t v16 = 0LL;
    goto LABEL_25;
  }

LABEL_11:
  uint64_t v16 = v5;
LABEL_25:

  return v16;
}
  }

  return v12;
}

LABEL_25:
  uint64_t v17 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  v8,  v13);
  id v32 = [v6 targetState];
  if ((unint64_t)v32 <= 3
    && v32 != (id)2
    && (![v5 isFullRecord] || objc_msgSend(v5, "isSparseFullChange")))
  {
    -[CKRecord setKnownToServer:](v17, "setKnownToServer:", 1LL);
    -[CKRecord setEtag:](v17, "setEtag:", @"-gateon");
  }

        self = 0LL;
        goto LABEL_25;
      }

      id v30 = v23 == 0LL;
      id v25 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord objectForKey:](self, "objectForKey:", @"linkedShareRecordName"));
      if (!v25)
      {
        id v26 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](self, "recordID"));
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v26 recordName]);
      }

      self = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:",  v22,  v25);
    }

    else
    {
      if (_CPLSilentLogging) {
        goto LABEL_21;
      }
      id v30 = v23 == 0LL;
      double v27 = sub_10006C678();
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        self = (CKRecord *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](self, "recordID"));
        *(_DWORD *)buf = 138412546;
        id v32 = self;
        id v33 = 2112;
        uint64_t v34 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@ record points to unknown zone %@",  buf,  0x16u);
      }
    }

    uint64_t v24 = v30;
LABEL_21:

    goto LABEL_23;
  }

  self = 0LL;
LABEL_26:

  return self;
}

  -[NSMutableArray addObject:](v3, "addObject:", @"cpu");
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }

        v64 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _interpretedChangeFromCKRecord:scopedIdentifier:userRecordID:]( self,  "_interpretedChangeFromCKRecord:scopedIdentifier:userRecordID:",  v27,  v23,  v181));
        uint64_t v65 = v64;
        if (v64)
        {
          id v66 = (void *)objc_claimAutoreleasedReturnValue([v64 scopedIdentifier]);
          v67 = [v66 isEqual:v23];

          if ((v67 & 1) == 0)
          {
            [v65 setScopedIdentifier:v23];
            [v65 awakeFromStorage];
          }

          [v171 setObject:v65 forKeyedSubscript:v23];
        }

        [v173 removeObject:v23];

        uint64_t v21 = v182;
LABEL_58:

        uint64_t v22 = (char *)v22 + 1;
      }

      while (v174 != v22);
      v155 = [obj countByEnumeratingWithState:&v191 objects:v195 count:16];
      v174 = v155;
    }

    while (v155);
  }

  return 1;
}
}

        uint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      id v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10011C5EC(v25, v38);
      }

      else
      {
        sub_1000CE838((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      id v26 = -1LL << *(_BYTE *)(v8 + 32);
      double v27 = result & ~v26;
      id v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        id v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int16 v29 = 0;
        id v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          id v31 = v28 == v30;
          if (v28 == v30) {
            id v28 = 0LL;
          }
          v29 |= v31;
          id v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        id v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_10011C5EC(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    LOBYTE(v5) = 1;
    return v5;
  }

  if (a3 != 53) {
    return v5;
  }
  if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
    goto LABEL_24;
  }
  unsigned int v5 = -[CPLPrequeliteStorage dropIndexWithName:error:](self, "dropIndexWithName:error:", @"identifier", 0LL);
  if (v5)
  {
    unsigned int v5 = -[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"relatedIdentifier",  0LL);
    if (v5)
    {
      unsigned int v5 = -[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"secondaryIdentifier",  0LL);
      if (v5)
      {
        unsigned int v5 = -[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"relatedIdentifier.class",  0LL);
        if (v5)
        {
          unsigned int v5 = -[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"secondaryIdentifier.class",  0LL);
          if (v5)
          {
            unint64_t v6 = -[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"scopedIdentifier",  @"identifier, scopeIndex",  0LL,  0LL);
            LOBYTE(v5) = 0;
            if (v6)
            {
              unint64_t v7 = -[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"relatedScopedIdentifier",  @"relatedIdentifier, scopeIndex",  0LL,  0LL);
              LOBYTE(v5) = 0;
              if (v7)
              {
                char v8 = -[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"secondaryScopedIdentifier",  @"secondaryIdentifier, scopeIndex",  0LL,  0LL);
                LOBYTE(v5) = 0;
                if (v8)
                {
                  uint64_t v9 = -[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"relatedScopedIdentifier.class",  @"relatedIdentifier, scopeIndex, class",  0LL,  0LL);
                  LOBYTE(v5) = 0;
                  if (v9) {
                    LOBYTE(v5) = -[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"secondaryScopedIdentifier.class",  @"secondaryIdentifier, scopeIndex, class",  0LL,  0LL);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return v5;
}

        double v27 = 1;
        goto LABEL_51;
      }

      if ((v44 & 1) != 0) {
        goto LABEL_24;
      }
    }

    uint64_t v34 = v26;
LABEL_38:
    a8 = v54;
    goto LABEL_39;
  }

  uint64_t v17 = v15;
  uint64_t v18 = v11;
  if (self->_trackAllStoresAndDeletes && _CPLSilentLogging == 0)
  {
    id v20 = sub_1001892A0();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = a8;
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v16 lastPathComponent]);
      *(_DWORD *)buf = 138412546;
      id v63 = v14;
      v64 = 2112;
      uint64_t v65 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "STORING %@ to %@: already in storage",  buf,  0x16u);

      a8 = v22;
    }
  }

  id v61 = 0LL;
  uint64_t v24 = -[CPLBucketFileStorage _fixupStoredDestinationURL:isOriginal:needsCommit:error:]( self,  "_fixupStoredDestinationURL:isOriginal:needsCommit:error:",  v16,  v18,  a6,  &v61);
  id v25 = v61;
  id v26 = v25;
  if ((v24 & 1) != 0)
  {
    double v27 = 1;
    id v15 = v17;
    goto LABEL_51;
  }

  uint64_t v34 = v25;
  id v15 = v17;
LABEL_39:
  if (-[NSFileManager cplIsFileExistsError:](self->_fileManager, "cplIsFileExistsError:", v34))
  {
    if (_CPLSilentLogging) {
      goto LABEL_48;
    }
    __int16 v45 = sub_1001892A0();
    uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v16 path]);
    *(_DWORD *)buf = 138412546;
    id v63 = v14;
    v64 = 2112;
    uint64_t v65 = v47;
    uint64_t v48 = "Tried to store %@ at %@ but file appeared miraculously!";
    uint64_t v49 = v46;
    char v50 = 22;
    goto LABEL_46;
  }

  if (_CPLSilentLogging) {
    goto LABEL_48;
  }
  id v51 = sub_1001892A0();
  uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v16 path]);
    *(_DWORD *)buf = 138412802;
    id v63 = v14;
    v64 = 2112;
    uint64_t v65 = v47;
    id v66 = 2112;
    v67 = v34;
    uint64_t v48 = "Failed to store %@ to %@: %@";
    uint64_t v49 = v46;
    char v50 = 32;
LABEL_46:
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, v48, buf, v50);
  }

void sub_100049F08(id a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100049FA4;
  v4[3] = &unk_10023FDF0;
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unsigned int v5 = v1;
  +[CPLResource enumerateResourceTypesWithBlock:](&OBJC_CLASS___CPLResource, "enumerateResourceTypesWithBlock:", v4);
  os_log_t v2 = (void *)qword_1002960E8;
  qword_1002960E8 = (uint64_t)v1;
  id v3 = v1;
}

void sub_100049FA4(uint64_t a1, uint64_t a2)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  char v4 = *(void **)(a1 + 32);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  a2));
  [v4 setObject:v6 forKeyedSubscript:v5];
}

void sub_10004AACC(id a1)
{
  id v1 = (void *)qword_100296108;
  qword_100296108 = (uint64_t)&off_10025C748;
}

void sub_10004AD98(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  char v8 = v7;
  if (!v6)
  {
    if ([v7 isCPLErrorWithCode:23])
    {
      if (*(void *)(a1 + 32) && !_CPLSilentLogging)
      {
        id v10 = sub_10004AF90();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *(void *)(a1 + 32);
          int v19 = 138412290;
          uint64_t v20 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Zone is not present even though the delete failed: %@",  (uint8_t *)&v19,  0xCu);
        }
      }

      id v13 = *(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 272LL) + 16LL);
      goto LABEL_18;
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 272LL);
LABEL_17:
    id v13 = *(void (**)(void))(v9 + 16);
LABEL_18:
    v13();
    goto LABEL_19;
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 272LL);
    goto LABEL_17;
  }

  if (!_CPLSilentLogging)
  {
    id v14 = sub_10004AF90();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 288LL);
      int v19 = 138412290;
      uint64_t v20 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Even though the delete completed successfully, %@ is still present",  (uint8_t *)&v19,  0xCu);
    }
  }

  uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 272LL);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
  (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v18);

LABEL_19:
}

id sub_10004AF90()
{
  if (qword_100296118 != -1) {
    dispatch_once(&qword_100296118, &stru_10023FE80);
  }
  return (id)qword_100296120;
}

void sub_10004B66C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10004B718;
  v11[3] = &unk_10023DE80;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = v6;
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_10004B718(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  id v2 = [*(id *)(a1 + 48) count];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 _didFinishDeleteWithError:0];
  }

  else
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _errorForDeleteError:v5]);
    [v3 _didFinishDeleteWithError:v4];
  }
}

void sub_10004B798(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10004B844;
  v11[3] = &unk_10023DE80;
  void v11[4] = v8;
  id v12 = v7;
  id v13 = v6;
  id v9 = v6;
  id v10 = v7;
  [v8 dispatchAsync:v11];
}

void sub_10004B844(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  id v2 = [*(id *)(a1 + 48) count];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 _didFinishDeleteWithError:0];
  }

  else
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _errorForDeleteError:v5]);
    [v3 _didFinishDeleteWithError:v4];
  }
}

void sub_10004B958(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.deletezone");
  id v3 = (void *)qword_100296120;
  qword_100296120 = (uint64_t)v2;
}

id sub_10004BC14()
{
  if (qword_100296128 != -1) {
    dispatch_once(&qword_100296128, &stru_100240148);
  }
  return (id)qword_100296130;
}

void sub_10004C3E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

id sub_10004C404(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userIdentity]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 lookupInfo]);
  if (!v5)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10004BC14();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        id v13 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Fetched a CK participant with no lookup info: %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    goto LABEL_8;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  if (!v6)
  {
LABEL_8:
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 userRecordID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordName]);

    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v10]);
  }

  return v6;
}

uint64_t sub_10004C54C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004C55C(uint64_t a1)
{
}

void sub_10004C564(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v12 = v11;
    if (v11)
    {
      [v11 updateCKShareParticipant:v8];
    }

    else if (!_CPLSilentLogging)
    {
      id v14 = sub_10004BC14();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412290;
        id v17 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Fetched unidentified participant %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];
LABEL_12:

    goto LABEL_13;
  }

  if (!_CPLSilentLogging)
  {
    id v13 = sub_10004BC14();
    int v12 = (void *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412546;
      id v17 = v7;
      __int16 v18 = 2112;
      id v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "Failed to fetch some participant with lookup info %@: %@",  (uint8_t *)&v16,  0x16u);
    }

    goto LABEL_12;
  }

void sub_10004C704(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10004C7B4;
  v8[3] = &unk_10023FEF8;
  char v4 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  id v10 = v3;
  id v11 = v4;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v12 = v5;
  uint64_t v13 = v6;
  id v7 = v3;
  [v9 dispatchAsync:v8];
}

void sub_10004C7B4(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10004BC14();
      char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v5 = *(void **)(a1 + 48);
        int v11 = 138412546;
        id v12 = v5;
        __int16 v13 = 2112;
        id v14 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to fetch share participant for %@: %@",  (uint8_t *)&v11,  0x16u);
      }
    }

    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_10004BC14();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
        id v10 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        int v11 = 138412546;
        id v12 = v9;
        __int16 v13 = 2112;
        id v14 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Fetched participants for %@: %@",  (uint8_t *)&v11,  0x16u);
      }
    }

    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  v6();
}

void sub_10004CCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_10004BC14();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v13 = 138543618;
        uint64_t v14 = v6;
        __int16 v15 = 2112;
        id v16 = v3;
        id v7 = "Failed to delete partially created zone %{public}@: %@";
        id v8 = v5;
        os_log_type_t v9 = OS_LOG_TYPE_ERROR;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v13, v10);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v11 = sub_10004BC14();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138543362;
      uint64_t v14 = v12;
      id v7 = "Successfully deleted partially created zone %{public}@";
      id v8 = v5;
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
      uint32_t v10 = 12;
      goto LABEL_8;
    }

id sub_10004CE04(uint64_t a1)
{
  return [*(id *)(a1 + 32) runWithNoSyncSession];
}

void sub_10004CE5C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 312), a2);
    [*(id *)(a1 + 32) _runOperations];
  }

  else
  {
    (*(void (**)(void))(*(void *)(v5 + 304) + 16LL))();
  }
}

void sub_10004D13C(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    (*(void (**)(void))(v3[38] + 16LL))();
    return;
  }

  id v4 = [v3 scopeType];
  if (v4 == (id)1)
  {
    id v7 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 scope]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10004D4DC;
    v13[3] = &unk_10023FF70;
    void v13[4] = *(void *)(a1 + 32);
    [v7 _createLibraryWithScopeChange:v6 completionHandler:v13];
    goto LABEL_9;
  }

  if (v4 == (id)4)
  {
    id v8 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 scope]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10004D41C;
    v14[3] = &unk_10023FF70;
    v14[4] = *(void *)(a1 + 32);
    [v8 _createLibraryShareWithScopeChange:v6 completionHandler:v14];
    goto LABEL_9;
  }

  if (v4 == (id)2)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 scope]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10004D35C;
    v15[3] = &unk_10023FF70;
    void v15[4] = *(void *)(a1 + 32);
    [v5 _createMomentShareWithScopeChange:v6 completionHandler:v15];
LABEL_9:

    return;
  }

  os_log_type_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = v9[38];
  id v12 = (id)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( CPLScopeChange,  "descriptionForScopeType:",  [v9 scopeType]));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  38LL,  @"%@ is an unsupported scope type to create",  v12));
  (*(void (**)(uint64_t, void, void, void *))(v10 + 16))(v10, 0LL, 0LL, v11);
}

void sub_10004D35C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    [v6 _clearPartiallyCreatedZoneIfNecessary];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 304LL) + 16LL))();
  }

  else
  {
    uint64_t v7 = v6[38];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudKitScope]);
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 transportScope]);
    (*(void (**)(uint64_t, id, void *, void))(v7 + 16))(v7, v10, v9, 0LL);
  }
}

void sub_10004D41C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    [v6 _clearPartiallyCreatedZoneIfNecessary];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 304LL) + 16LL))();
  }

  else
  {
    uint64_t v7 = v6[38];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudKitScope]);
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 transportScope]);
    (*(void (**)(uint64_t, id, void *, void))(v7 + 16))(v7, v10, v9, 0LL);
  }
}

void sub_10004D4DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v9 = a2;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = v5[38];
  if (a3)
  {
    (*(void (**)(void, void, void, uint64_t))(v6 + 16))(v5[38], 0LL, 0LL, a3);
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 cloudKitScope]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 transportScope]);
    (*(void (**)(uint64_t, id, void *, void))(v6 + 16))(v6, v9, v8, 0LL);
  }
}

void sub_10004D784(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10004D890;
  v11[3] = &unk_10023FF98;
  id v8 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = v8;
  id v19 = *(id *)(a1 + 72);
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v9 = v6;
  id v10 = v7;
  [v12 dispatchAsync:v11];
}

void sub_10004D890(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10004BC14();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v5 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        uint64_t v23 = v5;
        __int16 v24 = 2112;
        id v25 = v2;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to save records %@: %@", buf, 0x16u);
      }
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 domain]);
    if ([v6 isEqualToString:CKUnderlyingErrorDomain])
    {
      if ([v2 code] == (id)7)
      {

LABEL_23:
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  35LL,  v2,  @"Rate limited or throttled: %@",  v2));
        goto LABEL_24;
      }

      id v21 = [v2 code];

      if (v21 == (id)2008) {
        goto LABEL_23;
      }
    }

    else
    {
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v2,  v20,  @"Failed to save records %@: %@",  *(void *)(a1 + 48),  v2));

LABEL_24:
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
    goto LABEL_25;
  }

  if (!_CPLSilentLogging)
  {
    id v7 = sub_10004BC14();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Saved records %@", buf, 0xCu);
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) URL]);
  if (!_CPLSilentLogging)
  {
    id v11 = sub_10004BC14();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "cpl_redactedShareURL"));
      *(_DWORD *)buf = 138412546;
      uint64_t v23 = v13;
      __int16 v24 = 2114;
      id v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Share URL for %@ after publishing: %{public}@",  buf,  0x16u);
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
  id v16 = [v15 copy];

  [v16 updateWithCKShare:*(void *)(a1 + 64) currentUserID:*(void *)(a1 + 72)];
  if (*(void *)(a1 + 80)) {
    objc_msgSend(v16, "updateWithRootCKRecord:");
  }
  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = *(void **)(v17 + 288);
  *(void *)(v17 + 28_Block_object_dispose((const void *)(v1 - 176), 8) = v16;
  id v19 = v16;

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
LABEL_25:
}

void sub_10004DC44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v8 = (id *)(a1 + 32);
    id v7 = *(void **)(a1 + 32);
    id v41 = 0LL;
    unsigned __int8 v9 = [v7 shouldRunOperationsWithError:&v41];
    id v10 = v41;
    if ((v9 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_17:

      goto LABEL_18;
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*v8 identification]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 shareRecordName]);
    if (!v12) {
      sub_1001917B8((id *)(a1 + 32), a1);
    }
    uint64_t v34 = v12;
    if ([v12 isEqualToString:CKRecordNameZoneWideShare])
    {
      id v13 = objc_alloc(&OBJC_CLASS___CKShare);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*v8 cloudKitScope]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneID]);
      id v16 = -[CKShare initWithRecordZoneID:](v13, "initWithRecordZoneID:", v15);

      uint64_t v17 = 0LL;
    }

    else
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([*v8 scope]);
      uint64_t v19 = *((void *)*v8 + 39);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*v8 cloudKitScope]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zone]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v18 rootRecordUsingTempCKAssetURL:v19 inZone:v21]);

      if (!v17)
      {
        uint64_t v32 = *(void *)(a1 + 40);
        id v16 = (CKShare *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
        (*(void (**)(uint64_t, void, CKShare *))(v32 + 16))(v32, 0LL, v16);
LABEL_16:

        goto LABEL_17;
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*v8 cloudKitScope]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v22 recordIDWithRecordName:v34]);

      id v16 = -[CKShare initWithRootRecord:shareID:]( objc_alloc(&OBJC_CLASS___CKShare),  "initWithRootRecord:shareID:",  v17,  v14);
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*v8 scope]);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v11 shareTypeForScopeChange:v23]);

    if (!v24) {
      sub_1001918C0((id *)(a1 + 32), a1);
    }
    id v33 = v11;
    -[CKShare setObject:forKeyedSubscript:](v16, "setObject:forKeyedSubscript:", v24, CKShareTypeKey);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*v8 scope]);
    [v25 updateCKShare:v16];

    id v26 = (void *)objc_claimAutoreleasedReturnValue([*v8 scope]);
    double v27 = (void *)objc_claimAutoreleasedReturnValue([v26 share]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 participants]);

    if ((id)-[CKShare publicPermission](v16, "publicPermission") == (id)1 && [v28 count])
    {
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472LL;
      v35[2] = sub_10004DFD8;
      v35[3] = &unk_10023FFE8;
      __int16 v29 = *(void **)(a1 + 32);
      id v40 = *(id *)(a1 + 40);
      id v30 = v16;
      uint64_t v31 = *(void *)(a1 + 32);
      id v36 = v30;
      uint64_t v37 = v31;
      id v38 = v17;
      id v39 = v5;
      [v29 fetchShareParticipantsForParticipants:v28 completionBlock:v35];
    }

    else
    {
      [*(id *)(a1 + 32) _createCKShare:v16 andRootRecord:v17 currentUserID:v5 withCompletionHandler:*(void *)(a1 + 40)];
    }

    id v11 = v33;
    goto LABEL_16;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_18:
}

void sub_10004DFD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v7 = v6;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        id v11 = 0LL;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(a1 + 32) addParticipant:*(void *)(*((void *)&v12 + 1) + 8 * (void)v11)];
          id v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v9);
    }

    [*(id *)(a1 + 40) _createCKShare:*(void *)(a1 + 32) andRootRecord:*(void *)(a1 + 48) currentUserID:*(void *)(a1 + 56) withCompletionHandler:*(void *)(a1 + 64)];
  }
}

void sub_10004E33C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10004E414;
  v13[3] = &unk_100240038;
  void v13[4] = v8;
  id v14 = v7;
  id v9 = *(id *)(a1 + 48);
  id v15 = v6;
  uint64_t v10 = *(void *)(a1 + 56);
  id v17 = v9;
  uint64_t v18 = v10;
  id v16 = *(id *)(a1 + 40);
  id v11 = v6;
  id v12 = v7;
  [v8 dispatchAsync:v13];
}

void sub_10004E414(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identification]);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 296);
  *(void *)(v4 + 296) = v3;

  if (!v2)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) firstObject]);
    __int128 v13 = v12;
    if (v12)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
      id v15 = [v14 databaseScope];

      if (!v15 || v15 == *(id *)(a1 + 72))
      {
        if (!_CPLSilentLogging)
        {
          id v16 = sub_10004BC14();
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) zone]);
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) zone]);
            id v41 = (void *)objc_claimAutoreleasedReturnValue([v42 zoneID]);
            id v19 = [v41 databaseScope];
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v13 zoneID]);
            id v21 = [v20 databaseScope];
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
            *(_DWORD *)buf = 138413314;
            id v44 = v18;
            __int16 v45 = 2048;
            id v46 = v19;
            __int16 v47 = 2112;
            id v48 = v13;
            __int16 v49 = 2048;
            id v50 = v21;
            __int16 v51 = 2112;
            __int128 v52 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Created from %@ (%ld) to new zone %@ (%ld) for %@",  buf,  0x34u);
          }
        }

        uint64_t v23 = -[CPLCloudKitScope initWithZone:options:]( [CPLCloudKitScope alloc],  "initWithZone:options:",  v13,  [*(id *)(a1 + 56) options]);
        [*(id *)(a1 + 32) resetCloudKitScope:v23];
        uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identification]);
        uint64_t v25 = *(void *)(a1 + 32);
        id v26 = *(void **)(v25 + 296);
        *(void *)(v25 + 296) = v24;

        (*(void (**)(void, void))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), 0LL);
        goto LABEL_33;
      }

      if (!_CPLSilentLogging)
      {
        id v37 = sub_10004BC14();
        id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
          id v40 = *(void **)(a1 + 72);
          *(_DWORD *)buf = 138412802;
          id v44 = v39;
          __int16 v45 = 2048;
          id v46 = v40;
          __int16 v47 = 2048;
          id v48 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "While trying to create zone for %@, expected database scope was %ld and CloudKit returned %ld",  buf,  0x20u);
        }
      }

      uint64_t v35 = *(void *)(a1 + 64);
      id v36 = @"CloudKit returned a wrong database scope";
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v32 = sub_10004BC14();
        id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
          *(_DWORD *)buf = 138412290;
          id v44 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "While trying to create zone for %@, CloudKit returned no errors but also returned no saved zones",  buf,  0xCu);
        }
      }

      uint64_t v35 = *(void *)(a1 + 64);
      id v36 = @"CloudKit returned no zones with no errors";
    }

    uint64_t v23 = (CPLCloudKitScope *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  v36));
    (*(void (**)(uint64_t, CPLCloudKitScope *))(v35 + 16))(v35, v23);
LABEL_33:

    goto LABEL_34;
  }

  if (!_CPLSilentLogging)
  {
    id v6 = sub_10004BC14();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitScope]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
      *(_DWORD *)buf = 138412802;
      id v44 = v9;
      __int16 v45 = 2112;
      id v46 = v10;
      __int16 v47 = 2112;
      id v48 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to create zone %@ for %@: %@",  buf,  0x20u);
    }
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v2 domain]);
  if ([v11 isEqualToString:CKUnderlyingErrorDomain])
  {
    if ([v2 code] == (id)7)
    {

LABEL_20:
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  35LL,  v2,  @"Rate limited or throttled: %@",  v2));
      goto LABEL_21;
    }

    id v31 = [v2 code];

    if (v31 == (id)2008) {
      goto LABEL_20;
    }
  }

  else
  {
  }

  double v27 = (void *)objc_claimAutoreleasedReturnValue(+[CPLCloudKitErrors realErrorForError:](&OBJC_CLASS___CPLCloudKitErrors, "realErrorForError:", v2));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudKitScope]);
  id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 zoneID]);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v27,  v28,  @"Failed to create zone %@: %@",  v30,  v2));

LABEL_21:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_34:
}

void sub_10004EB00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v3 = [*(id *)(a1 + 32) copy];
    [v3 setShare:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

id sub_10004EBE8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  else {
    return _[*(id *)(a1 + 32) _createCKShareWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

void sub_10004EF8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v19 = a3;
  id v7 = a4;
  if (!v7)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
    if (v12)
    {
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___CKShare);
      char isKindOfClass = objc_opt_isKindOfClass(v12, v14);
      uint64_t v16 = *(void *)(a1 + 48);
      if ((isKindOfClass & 1) != 0)
      {
        __int128 v13 = *(void (**)(void))(v16 + 16);
        goto LABEL_3;
      }

      id v17 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  38LL,  @"%@ is not a CKShare",  *(void *)(a1 + 32));
    }

    else
    {
      uint64_t v16 = *(void *)(a1 + 48);
      id v17 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  38LL,  @"Scope has no %@ CKShare to update",  *(void *)(a1 + 32));
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0LL, v18);

    goto LABEL_10;
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudKitScope]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "cpl_zoneName"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v7,  v19,  @"Error fetching %@ from %@",  v8,  v11));

  __int128 v13 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_3:
  v13();
LABEL_10:
}

void sub_10004F1BC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    id v19 = 0LL;
    unsigned __int8 v7 = [v6 shouldRunOperationsWithError:&v19];
    id v8 = v19;
    if ((v7 & 1) != 0)
    {
      id v9 = objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));
      id v11 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( v9,  "initWithRecordsToSave:recordIDsToDelete:",  v10,  0LL);

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_10004F37C;
      v15[3] = &unk_1002400B0;
      id v12 = *(void **)(a1 + 40);
      void v15[4] = *(void *)(a1 + 32);
      id v16 = v12;
      id v18 = *(id *)(a1 + 48);
      id v17 = v5;
      -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v11, "setModifyRecordsCompletionBlock:", v15);
      __int128 v13 = *(void **)(a1 + 32);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 cloudKitScope]);
      [v13 launchOperation:v11 type:CPLCloudKitOperationTypeForScope(v14) withContext:0];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }
}

void sub_10004F37C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10004F460;
  v11[3] = &unk_10023F7A0;
  id v8 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = v8;
  id v17 = *(id *)(a1 + 56);
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v7;
  [v12 dispatchAsync:v11];
}

void sub_10004F460(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10004BC14();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v5 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        uint64_t v20 = v5;
        __int16 v21 = 2112;
        uint64_t v22 = v2;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to save record %@: %@", buf, 0x16u);
      }
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 domain]);
    if ([v6 isEqualToString:CKUnderlyingErrorDomain])
    {
      if ([v2 code] == (id)7)
      {

LABEL_21:
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  35LL,  v2,  @"Rate limited or throttled: %@",  v2));
        goto LABEL_22;
      }

      id v18 = [v2 code];

      if (v18 == (id)2008) {
        goto LABEL_21;
      }
    }

    else
    {
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v2,  v17,  @"Failed to save recor %@: %@",  *(void *)(a1 + 48),  v2));

LABEL_22:
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    goto LABEL_23;
  }

  if (!_CPLSilentLogging)
  {
    id v7 = sub_10004BC14();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Saved records %@", buf, 0xCu);
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) URL]);
  if (!_CPLSilentLogging)
  {
    id v11 = sub_10004BC14();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "cpl_redactedShareURL"));
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v13;
      __int16 v21 = 2114;
      uint64_t v22 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Share URL for %@ after publishing: %{public}@",  buf,  0x16u);
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scope]);
  id v16 = [v15 copy];

  [v16 updateWithCKShare:*(void *)(a1 + 48) currentUserID:*(void *)(a1 + 64)];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();

LABEL_23:
}

id sub_100050420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
  [*(id *)(a1 + 32) _modifyParticipantsOfCKShare:*(void *)(a1 + 40) newParticipants:a2];
  return [*(id *)(a1 + 32) _uploadCKShare:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_1000504C0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[36];
  if (!v9 || v5)
  {
    if (v5)
    {
      (*(void (**)(void, void, id))(v7 + 16))(v6[36], 0LL, v5);
    }

    else
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
    }
  }

  else
  {
    [v6 _updateCKShare:v9 completionHandler:v6[36]];
  }
}

void sub_1000505BC(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.scopecreation");
  id v3 = (void *)qword_100296130;
  qword_100296130 = (uint64_t)v2;
}

void sub_1000505E8(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10005061C( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

void sub_1000508EC(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    id v5 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000509AC;
    v8[3] = &unk_10023DEF8;
    id v6 = v5;
    uint64_t v7 = *(void *)(a1 + 32);
    id v9 = v6;
    uint64_t v10 = v7;
    [v2 _acceptShareWithURL:v6 currentUserID:a2 completionHandler:v8];
  }

  else
  {
    (*(void (**)(void))(v2[39] + 16LL))();
  }

void sub_1000509AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_100050D54();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cpl_redactedShareURL"));
        *(_DWORD *)buf = 138543618;
        uint64_t v25 = v6;
        __int16 v26 = 2112;
        id v27 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to accept share at %{public}@: %@",  buf,  0x16u);
      }
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
    if ([v7 isEqualToString:CKUnderlyingErrorDomain])
    {
      if ([v3 code] == (id)7)
      {

LABEL_23:
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
        uint64_t v16 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  35LL,  v3,  @"Rate limited or throttled: %@",  v15));
        goto LABEL_24;
      }

      id v23 = [v3 code];

      if (v23 == (id)2008) {
        goto LABEL_23;
      }
    }

    else
    {
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastOperationRequestUUIDs]);
    uint64_t v16 = objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v3,  v15,  @"Failed to accept share URL"));
LABEL_24:
    id v14 = (void *)v16;

    (*(void (**)(void, void, void, void, void *))(*(void *)(*(void *)(a1 + 40) + 312LL) + 16LL))( *(void *)(*(void *)(a1 + 40) + 312LL),  0LL,  0LL,  0LL,  v14);
    goto LABEL_25;
  }

  if ([*(id *)(*(void *)(a1 + 40) + 280) isCoherent])
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_100050D54();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cpl_redactedShareURL"));
        *(_DWORD *)buf = 138543362;
        uint64_t v25 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Accepted share from shareURL %{public}@",  buf,  0xCu);
      }
    }

    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(v11 + 312);
    uint64_t v13 = *(void *)(v11 + 272);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 280) transportScope]);
    (*(void (**)(uint64_t, uint64_t, void *, void, void))(v12 + 16))( v12,  v13,  v14,  *(void *)(*(void *)(a1 + 40) + 304LL),  0LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v17 = sub_100050D54();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cpl_redactedShareURL"));
        *(_DWORD *)buf = 138543362;
        uint64_t v25 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Accepted share from shareURL %{public}@ is incoherent (CloudKit bug)",  buf,  0xCu);
      }
    }

    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(v20 + 312);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v20 + 272) scopeIdentifier]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  38LL,  @"CloudKit scope for %@ is incoherent",  v14));
    (*(void (**)(uint64_t, void, void, void, void *))(v21 + 16))(v21, 0LL, 0LL, 0LL, v22);
  }

id sub_100050D54()
{
  if (qword_100296138 != -1) {
    dispatch_once(&qword_100296138, &stru_1002402A8);
  }
  return (id)qword_100296140;
}

void sub_100050FF4(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    if (([*(id *)(*(void *)(a1 + 32) + 280) options] & 2) != 0)
    {
      [*(id *)(a1 + 32) _acceptShareWithMetadata:v6 currentUserID:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
      goto LABEL_7;
    }

    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v5();
LABEL_7:
}

void sub_1000512D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

uint64_t sub_100051304(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100051314(uint64_t a1)
{
}

void sub_10005131C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  [*(id *)(a1 + 32) processErrorIfNeeded:v9];
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_100050D54();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cpl_redactedShareURL"));
        int v15 = 138543618;
        uint64_t v16 = v12;
        __int16 v17 = 2112;
        id v18 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to fetch share metadata for %{public}@: %@",  (uint8_t *)&v15,  0x16u);
      }
    }

    uint64_t v13 = (id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v14 = a4;
  }

  else
  {
    uint64_t v13 = (id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    id v14 = a3;
  }

  objc_storeStrong(v13, v14);
}

void sub_100051468(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100051540;
  v8[3] = &unk_1002401C0;
  void v8[4] = v4;
  id v9 = v3;
  uint64_t v13 = *(void *)(a1 + 72);
  __int128 v7 = *(_OWORD *)(a1 + 56);
  id v5 = (id)v7;
  __int128 v12 = v7;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  [v4 dispatchAsync:v8];
}

void sub_100051540(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  id v3 = (void *)v2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  if (!v4) {
    id v4 = (void *)v2;
  }
  id v5 = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) share]);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 recordID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);

  if (!v5)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
    unsigned int v12 = [v11 shouldIgnoreZoneWithZoneID:v8];

    if (v12)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cpl_zoneName"));
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  38LL,  @"Zone %@ is not supported by this engine",  v13));

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      goto LABEL_48;
    }

    if (!_CPLSilentLogging)
    {
      id v15 = sub_100050D54();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL"));
        *(_DWORD *)buf = 138412546;
        id v77 = v17;
        __int16 v78 = 2114;
        id v79 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Fetched share metadata root record %@ for %{public}@",  buf,  0x16u);
      }
    }

    id v19 = -[CKRecordZone initWithZoneID:](objc_alloc(&OBJC_CLASS___CKRecordZone), "initWithZoneID:", v8);
    uint64_t v20 = -[CPLCloudKitScope initWithZone:](objc_alloc(&OBJC_CLASS___CPLCloudKitScope), "initWithZone:", v19);
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void **)(v21 + 280);
    *(void *)(v21 + 280) = v20;

    if (([*(id *)(*(void *)(a1 + 32) + 280) isCoherent] & 1) == 0
      && !_CPLSilentLogging)
    {
      id v23 = sub_100050D54();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
        id v26 = [v8 databaseScope];
        id v27 = [*(id *)(*(void *)(a1 + 32) + 280) databaseScope];
        *(_DWORD *)buf = 138412802;
        id v77 = v25;
        __int16 v78 = 2048;
        id v79 = v26;
        __int16 v80 = 2048;
        id v81 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%@ database scope is %ld but we expected %ld",  buf,  0x20u);
      }
    }

    id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) share]);
    if (v28)
    {
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) rootRecord]);
      uint64_t v30 = objc_claimAutoreleasedReturnValue([v28 recordID]);
      id v31 = (void *)v30;
      if (v29)
      {
        v74[0] = v30;
        v75[0] = v28;
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v29 recordID]);
        v74[1] = v32;
        v75[1] = v29;
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v75,  v74,  2LL));
      }

      else
      {
        uint64_t v72 = v30;
        v73 = v28;
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v73,  &v72,  1LL));
      }

      __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
      id v53 = [v52 scopeTypeForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 280) proposedScopeType:0 fetchedRecords:v33 currentUserID:*(void *)(a1 + 56)];

      if (v53)
      {
        id v71 = v19;
        if (v53 == [*(id *)(*(void *)(a1 + 32) + 272) scopeType])
        {
          if (v53 == (id)3)
          {
            if (!_CPLSilentLogging)
            {
              id v54 = sub_100050D54();
              id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "Moment shares are not supported on this platform",  buf,  2u);
              }
            }

            id v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 272) scopeIdentifier]);
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  v56));

            id v19 = v71;
          }

          else
          {
            uint64_t v34 = 0LL;
          }
        }

        else
        {
          v68 = v29;
          id v70 = v33;
          if (!_CPLSilentLogging)
          {
            id v61 = sub_100050D54();
            id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              v67 = *(void **)(*(void *)(a1 + 32) + 272LL);
              id v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL"));
              v64 = (void *)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( &OBJC_CLASS___CPLScopeChange,  "descriptionForScopeType:",  v53));
              *(_DWORD *)buf = 138412802;
              id v77 = v67;
              __int16 v78 = 2112;
              id v79 = v63;
              __int16 v80 = 2112;
              id v81 = v64;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "Trying to accept %@ but the metadata at %@ is for a scope with scope type %@",  buf,  0x20u);
            }
          }

          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( &OBJC_CLASS___CPLScopeChange,  "descriptionForScopeType:",  v53));
          id v66 = (void *)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( CPLScopeChange,  "descriptionForScopeType:",  [*(id *)(*(void *)(a1 + 32) + 272) scopeType]));
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  50LL,  @"Accepting a %@ share with a %@ scope",  v65,  v66));

          id v33 = v70;
          id v19 = v71;
          __int16 v29 = v68;
        }
      }

      else
      {
        if (!_CPLSilentLogging)
        {
          id v57 = sub_100050D54();
          __int128 v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            v69 = v33;
            __int128 v59 = *(void **)(*(void *)(a1 + 32) + 272LL);
            __int128 v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_redactedShareURL"));
            *(_DWORD *)buf = 138412546;
            id v77 = v59;
            id v33 = v69;
            __int16 v78 = 2112;
            id v79 = v60;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "Trying to accept %@ but the metadata at %@ does not have sufficient information to accept it",  buf,  0x16u);
          }
        }

        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  38LL,  @"Failed to identify share scope type"));
      }

      if (v34) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failed to get share from URL"));
      if (v34)
      {
LABEL_46:
        __int16 v51 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
        goto LABEL_47;
      }
    }

    uint64_t v35 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
    id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 272) scopeIdentifier]);
    id v37 = -[CPLEngineScope initWithScopeIdentifier:scopeType:]( v35,  "initWithScopeIdentifier:scopeType:",  v36,  [*(id *)(*(void *)(a1 + 32) + 272) scopeType]);
    uint64_t v38 = *(void *)(a1 + 32);
    id v39 = *(void **)(v38 + 288);
    *(void *)(v38 + 28_Block_object_dispose((const void *)(v26 - 168), 8) = v37;

    id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
    uint64_t v41 = objc_claimAutoreleasedReturnValue( [v40 zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 280) engineScope:*(void *)(*(void *)(a1 + 32) + 288)]);
    uint64_t v42 = *(void *)(a1 + 32);
    uint64_t v43 = *(void **)(v42 + 296);
    *(void *)(v42 + 296) = v41;

    uint64_t v44 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) cloudKitScope]);
    uint64_t v45 = *(void *)(a1 + 32);
    id v46 = *(void **)(v45 + 280);
    *(void *)(v45 + 280) = v44;

    __int16 v47 = *(void **)(a1 + 32);
    id v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) share]);
    [v47 _updateScopeAndFlagsWithCKRecord:v48 currentUserID:*(void *)(a1 + 56)];

    __int16 v49 = *(void **)(a1 + 32);
    id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) rootRecord]);
    [v49 _updateScopeAndFlagsWithCKRecord:v50 currentUserID:*(void *)(a1 + 56)];

    __int16 v51 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
LABEL_47:
    v51();

    goto LABEL_48;
  }

  if (!_CPLSilentLogging)
  {
    id v9 = sub_100050D54();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v77 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch share metadata: %@", buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_48:
}

void sub_100051F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v4 = *(void **)(a1 + 32);
    id v19 = 0LL;
    unsigned __int8 v5 = [v4 shouldRunOperationsWithError:&v19];
    id v6 = v19;
    if ((v5 & 1) != 0)
    {
      __int128 v7 = objc_alloc(&OBJC_CLASS___CKAcceptSharesOperation);
      uint64_t v20 = *(void *)(a1 + 40);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));
      id v9 = -[CKAcceptSharesOperation initWithShareMetadatas:](v7, "initWithShareMetadatas:", v8);

      v17[0] = 0LL;
      v17[1] = v17;
      v17[2] = 0x3032000000LL;
      v17[3] = sub_100051304;
      void v17[4] = sub_100051314;
      id v18 = 0LL;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100052150;
      v14[3] = &unk_100240210;
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v16 = v17;
      v14[4] = v10;
      id v15 = *(id *)(a1 + 48);
      -[CKAcceptSharesOperation setPerShareCompletionBlock:](v9, "setPerShareCompletionBlock:", v14);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1000523E0;
      v11[3] = &unk_100240260;
      void v11[4] = *(void *)(a1 + 32);
      uint64_t v13 = v17;
      id v12 = *(id *)(a1 + 56);
      -[CKAcceptSharesOperation setAcceptSharesCompletionBlock:](v9, "setAcceptSharesCompletionBlock:", v11);
      [*(id *)(a1 + 32) launchOperation:v9 type:0 withContext:0];

      _Block_object_dispose(v17, 8);
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }
  }
}

void sub_100052130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_100052150(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a4);
    if (!_CPLSilentLogging)
    {
      id v10 = sub_100050D54();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v23 = 138412290;
        id v24 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to accept share %@",  (uint8_t *)&v23,  0xCu);
      }
    }

    goto LABEL_15;
  }

  if (!_CPLSilentLogging)
  {
    id v12 = sub_100050D54();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 272LL);
      int v23 = 138412546;
      id v24 = v8;
      __int16 v25 = 2112;
      uint64_t v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Accepted share %@ for %@",  (uint8_t *)&v23,  0x16u);
    }
  }

  id v15 = [(id)objc_opt_class(*(void *)(*(void *)(a1 + 32) + 296)) shareTypes];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (![v16 count]) {
    goto LABEL_13;
  }
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:CKShareTypeKey]);
  if (v17)
  {

LABEL_13:
LABEL_14:
    [*(id *)(a1 + 32) _updateScopeAndFlagsWithCKRecord:v8 currentUserID:*(void *)(a1 + 40)];
    goto LABEL_15;
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned __int8 v19 = [v18 BOOLForKey:@"CPLDisableWorkaroundFor94171958"];

  if ((v19 & 1) != 0) {
    goto LABEL_14;
  }
  if (!_CPLSilentLogging)
  {
    id v20 = sub_100050D54();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
      int v23 = 138412290;
      id v24 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Share type is missing on %@ - will just use it to update participants",  (uint8_t *)&v23,  0xCu);
    }
  }

  [*(id *)(a1 + 32) _updateScopeParticipantsWithCKShare:v8 currentUserID:*(void *)(a1 + 40)];
LABEL_15:
}

void sub_1000523E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100052488;
  v8[3] = &unk_100240238;
  void v8[4] = v4;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  __int128 v10 = v7;
  id v6 = v3;
  [v4 dispatchAsync:v8];
}

void sub_100052488(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  id v3 = (void *)v2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (!v4) {
    id v4 = (void *)v2;
  }
  id v5 = v4;
  if (v5)
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_100050D54();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = 138412290;
        id v10 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to accept shares %@",  (uint8_t *)&v9,  0xCu);
      }
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v8();
}

void sub_1000526A8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.share");
  id v3 = (void *)qword_100296140;
  qword_100296140 = (uint64_t)v2;
}

void sub_1000528E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_100052908(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = (id *)(a1 + 40);
  id v9 = a5;
  id v10 = a3;
  id v12 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  kdebug_trace(721946580, [WeakRetained hash], 0, 0, 0);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100052C30()
{
  if (qword_100296150 != -1) {
    dispatch_once(&qword_100296150, &stru_100240408);
  }
  return (id)qword_100296158;
}

LABEL_4:
  progressHandler = (void (**)(id, id, id, void *, void *))self->_progressHandler;
  id v18 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitDownloadBatchTask _partnerScopesNeedingToPullChangesFromZoneIDsWithSyncObligations:]( self,  "_partnerScopesNeedingToPullChangesFromZoneIDsWithSyncObligations:",  v15));
  progressHandler[2](progressHandler, v19, v13, v16, v18);
}

  id v15 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess(v15 + 96, v7, 1LL, 0LL);
  *(void *)(v15 + 96) = v4;
  *(_BYTE *)(v15 + 104) = v5;
  free((void *)v3);
}

  uint64_t v16 = (_DWORD *)(*(void *)(*(void *)(v5 + 72) + *(int *)(v5 + 84)) + *a3);
  swift_beginAccess(v16, v8, 1LL, 0LL);
  *uint64_t v16 = v6;
  free((void *)v5);
}

  swift_beginAccess(v14, v6, 1LL, 0LL);
  *uint64_t v14 = v4;
  free((void *)v3);
}

  if (a5) {
    id v11 = _convertErrorToNSError(_:)(a5);
  }
  else {
    id v11 = 0LL;
  }
  id v12 = (id)v11;
  (*(void (**)(uint64_t, void, NSString, Class))(a6 + 16))(a6, a1 & 1, v10, isa);
}

  v38[0] = kCFUserNotificationAlertHeaderKey;
  v38[1] = kCFUserNotificationAlertMessageKey;
  v39[0] = @"iCloud Photo Library";
  v39[1] = v5;
  v38[2] = kCFUserNotificationAlertTopMostKey;
  v39[2] = &__kCFBooleanTrue;
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v39,  v38,  3LL));
  id v8 = [v7 mutableCopy];

  if (v3)
  {
    v36[0] = kCFUserNotificationDefaultButtonTitleKey;
    v36[1] = kCFUserNotificationAlternateButtonTitleKey;
    v37[0] = @"Create Radar";
    v37[1] = @"OK";
    v36[2] = kCFUserNotificationOtherButtonTitleKey;
    v37[2] = @"Not Now";
    id v9 = v37;
    id v10 = v36;
  }

  else
  {
    v34[0] = kCFUserNotificationDefaultButtonTitleKey;
    v34[1] = kCFUserNotificationAlternateButtonTitleKey;
    v35[0] = @"Not now";
    v35[1] = @"Wipe Local Sync State";
    v34[2] = kCFUserNotificationOtherButtonTitleKey;
    v35[2] = @"Ignore for 1 hour";
    id v9 = v35;
    id v10 = v34;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v10,  3LL));
  [v8 addEntriesFromDictionary:v11];

  error = 0;
  id v12 = CFUserNotificationCreate(0LL, 60.0, 3uLL, &error, (CFDictionaryRef)v8);
  if (v12)
  {
    uint64_t v13 = v12;
    if (!_CPLSilentLogging)
    {
      uint64_t v14 = __CPLGenericOSLogDomain(v12);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v33 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Waiting for response to message: %@",  buf,  0xCu);
      }
    }

    responseFlags = 0LL;
    CFUserNotificationReceiveResponse(v13, 60.0, &responseFlags);
    CFRelease(v13);
    __int16 v17 = responseFlags & 3;
    if (!_CPLSilentLogging)
    {
      id v18 = __CPLGenericOSLogDomain(v16);
      unsigned __int8 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v17));
        *(_DWORD *)buf = 138412290;
        id v33 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Button pressed is %@", buf, 0xCu);
      }
    }

    ignoreBeforeDate = self->_ignoreBeforeDate;
    self->_ignoreBeforeDate = 0LL;

    if (v3)
    {
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequelitePreventWipeNotification createRadarURL](self, "createRadarURL"));
          int v23 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
          [v23 openURL:v22 configuration:0 completionHandler:0];
        }

        goto LABEL_29;
      }
    }

    else if (v17 == 2)
    {
      id v27 = (NSDate *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  3600.0));
      id v28 = self->_ignoreBeforeDate;
      self->_ignoreBeforeDate = v27;
    }

    else if (v17 == 1)
    {
LABEL_29:
      uint64_t v26 = 0;
LABEL_32:
      -[CPLPrequelitePreventWipeNotification _save](self, "_save");
      goto LABEL_33;
    }

    uint64_t v26 = 1;
    goto LABEL_32;
  }

  if (!_CPLSilentLogging)
  {
    id v24 = __CPLGenericOSLogDomain(0LL);
    __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v33) = error;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Could not create user notification to prevent wiping database: %d",  buf,  8u);
    }
  }

  uint64_t v26 = 0;
LABEL_33:

  return v26;
}

id sub_100053004(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _downloadBatchWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[34] + 16LL))();
  }
}

void sub_1000538F8(_Unwind_Exception *a1)
{
}

uint64_t sub_100053984(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100053994(uint64_t a1)
{
}

void sub_10005399C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      id v10 = objc_autoreleasePoolPush();
      uint64_t v11 = ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
      id v12 = *(void **)(a1 + 32);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_100053DE0;
      v28[3] = &unk_10023DC98;
      void v28[4] = v12;
      v28[5] = v11;
      [v12 dispatchAsync:v28];
      if (!_CPLSilentLogging)
      {
        id v13 = sub_100052C30();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          id v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pulled change %@", buf, 0xCu);
        }
      }

      id v27 = 0LL;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "cpl_recordChangeMissingResourceProperties:scopeIdentifier:scopeProvider:currentUserRecordID:",  &v27,  *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(void *)(a1 + 48)));
      id v16 = v27;
      if (v15)
      {
        if ([*(id *)(a1 + 56) supportsDownloadOfChange:v15 scopeProvider:*(void *)(a1 + 32)])
        {
          if ([v15 inExpunged])
          {
            __int16 v17 = (void *)objc_opt_class(v15);
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 scopedIdentifier]);
            id v19 = [v17 newDeleteChangeWithScopedIdentifier:v18];

            id v15 = v19;
          }

          [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) addRecord:v15];
          goto LABEL_27;
        }

        if (_CPLSilentLogging)
        {
LABEL_27:

          objc_autoreleasePoolPop(v10);
          goto LABEL_28;
        }

        id v26 = sub_100052C30();
        int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v30 = v15;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Ignoring unsupported %@", buf, 0xCu);
        }
      }

      else
      {
        uint64_t v22 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
        if (!v22) {
          uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 320LL);
        }
        int v23 = v22;
        id v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) updatedScopeChangeFromScopeChange:v23 currentUserID:*(void *)(a1 + 48) withCKRecord:v8]);
        if (v24) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), v24);
        }
        __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) updatedFlagsFromCKRecord:v8]);
        if (v25) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL), v25);
        }

        id v15 = 0LL;
      }

      goto LABEL_27;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v20 = sub_100052C30();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v30 = v7;
      __int16 v31 = 2112;
      id v32 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to get record %@ when fetching changes: %@",  buf,  0x16u);
    }
  }

void sub_100053D1C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(a1);
    if (!*v17)
    {
      id v19 = sub_100052C30();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v18 reason]);
        LODWORD(buf) = 138412546;
        *(void *)((char *)&buf + 4) = v21;
        WORD6(buf) = 2112;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Translating CKRecord to record raised an exception: %@\nCKRecord = %@",  (uint8_t *)&buf,  0x16u);
      }
    }

    objc_end_catch();
    JUMPOUT(0x100053CCCLL);
  }

  _Unwind_Resume(a1);
}

id sub_100053DE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:(double)*(unint64_t *)(a1 + 40) / 200.0];
}

void sub_100053E00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    id v7 = objc_autoreleasePoolPush();
    uint64_t v8 = ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
    id v9 = *(void **)(a1 + 32);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_100054010;
    v20[3] = &unk_10023DC98;
    void v20[4] = v9;
    v20[5] = v8;
    [v9 dispatchAsync:v20];
    id v10 = +[CKRecord cpl_recordChangeClassForRecordType:]( &OBJC_CLASS___CKRecord,  "cpl_recordChangeClassForRecordType:",  v6);
    if (v10) {
      goto LABEL_12;
    }
    uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    if (!v11) {
      uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 320LL);
    }
    id v12 = v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) updatedScopeChangeFromScopeChange:v12 currentUserID:*(void *)(a1 + 48) withDeletedCKRecordID:v5 recordType:v6]);
    if (v13) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL), v13);
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) updatedFlagsFromDeletedCKRecordID:v5 recordType:v6]);
    if (v14)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), v14);
    }

    else if (!v13)
    {
      id v10 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLRecordChange);
LABEL_11:

      if (!v10)
      {
LABEL_13:
        objc_autoreleasePoolPop(v7);
        goto LABEL_14;
      }

id sub_100054010(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateProgress:(double)*(unint64_t *)(a1 + 40) / 200.0];
}

void sub_100054030(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (!*(_BYTE *)(v5 + 24))
  {
    *(_BYTE *)(v5 + 24) = 1;
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000540E0;
    v7[3] = &unk_100240348;
    void v7[4] = v6;
    id v8 = v3;
    __int128 v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    [v6 dispatchAsync:v7];
  }
}

void sub_1000540E0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v13 = (id)v2;
  if (v3)
  {
    id v4 = v3;
LABEL_4:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v4,  v5,  @"Error downloading batch: %@",  v6,  v13));

    goto LABEL_5;
  }

  id v4 = (id)objc_claimAutoreleasedReturnValue(+[CPLCloudKitErrors realErrorForError:](&OBJC_CLASS___CPLCloudKitErrors, "realErrorForError:", v2));
  if (v4) {
    goto LABEL_4;
  }
  id v7 = 0LL;
LABEL_5:
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver cpl_archivedDataWithRootObject:]( &OBJC_CLASS___NSKeyedArchiver,  "cpl_archivedDataWithRootObject:"));
    if (v7) {
      goto LABEL_7;
    }
  }

  else
  {
    id v8 = 0LL;
    if (v7) {
      goto LABEL_7;
    }
  }

  if ([*(id *)(*(void *)(a1 + 32) + 296) count])
  {
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 currentFetchRecordZoneChangesOperation]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 recordZoneIDsWithSyncObligations]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v10 _processFinalSyncObligationsWithZoneIDs:v12]);

    goto LABEL_11;
  }

void sub_1000542B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    if (v5[36])
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 currentFetchRecordZoneChangesOperation]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 recordZoneIDsWithSyncObligations]);
    }

    else
    {
      id v7 = 0LL;
    }

    id v8 = objc_autoreleasePoolPush();
    if (!_CPLSilentLogging)
    {
      id v9 = sub_100052C30();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        int v21 = 134218240;
        id v22 = v11;
        __int16 v23 = 2048;
        id v24 = [v7 count];
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Fetch operation got a batch and counted %lu change events (%lu sync obligations)",  (uint8_t *)&v21,  0x16u);
      }
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
    [*(id *)(a1 + 32) sendProgressBatch:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) updatedScopeChange:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) updatedFlags:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) updatedSyncAnchor:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) zoneIDsWithSyncObligations:v7];
    id v12 = objc_alloc_init(&OBJC_CLASS___CPLChangeBatch);
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = 0LL;

    uint64_t v17 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = 0LL;

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0LL;
    if (!_CPLSilentLogging)
    {
      id v19 = sub_100052C30();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 138412290;
        id v22 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Updated sync anchor: %@",  (uint8_t *)&v21,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v8);
  }
}

void sub_1000544F8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL))
  {
    if ([v5 isEqual:a1[4]])
    {
      id v7 = (void *)a1[5];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_10005464C;
      v11[3] = &unk_10023DC70;
      void v11[4] = v7;
      [v7 dispatchAsync:v11];
      (*(void (**)(void))(a1[6] + 16LL))();
    }

    else if (!_CPLSilentLogging)
    {
      id v8 = sub_100052C30();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = a1[4];
        *(_DWORD *)buf = 138412546;
        id v13 = v5;
        __int16 v14 = 2112;
        uint64_t v15 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Received zoneID %@ expected zoneID %@",  buf,  0x16u);
      }
    }
  }
}

id sub_10005464C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateOneBatch];
}

void sub_100054654(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  if (!*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL))
  {
    if ([v11 isEqual:a1[4]])
    {
      if (v14)
      {
        objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), a6);
      }

      else
      {
        if (a5) {
          sub_100191D60((uint64_t)a1);
        }
        id v18 = (void *)a1[5];
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        v19[2] = sub_100054810;
        v19[3] = &unk_10023DC70;
        v19[4] = v18;
        [v18 dispatchAsync:v19];
        (*(void (**)(void))(a1[6] + 16LL))();
      }

      *(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL) = a5;
    }

    else if (!_CPLSilentLogging)
    {
      id v15 = sub_100052C30();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = a1[4];
        *(_DWORD *)buf = 138412546;
        id v21 = v11;
        __int16 v22 = 2112;
        uint64_t v23 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Received zoneID %@ expected zoneID %@",  buf,  0x16u);
      }
    }
  }
}

id sub_100054810(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateOneBatch];
}

void sub_100054924(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.downloadbatch");
  id v3 = (void *)qword_100296158;
  qword_100296158 = (uint64_t)v2;
}

void sub_100054990(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitCoordinator);
  os_log_t v2 = (void *)qword_100296160;
  qword_100296160 = (uint64_t)v1;
}

void sub_100054B90(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_100296170 = [v1 BOOLForKey:@"CPLUsesSandboxEnvironment"];
}

id sub_100054E18()
{
  if (qword_100296190 != -1) {
    dispatch_once(&qword_100296190, &stru_1002405D0);
  }
  return (id)qword_100296198;
}

void sub_100054E58(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) container]);
  [v1 unregisterFromUploadRequestsWithMachServiceName:@"com.apple.aps.photos.cloud.datarepair"];
}

id sub_100054E90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopWaitingForPushNotifications];
}

void sub_1000550D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id location)
{
}

void sub_1000550F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 recordID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 fieldName]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 fileSignature]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100055208;
    v11[3] = &unk_100240470;
    id v12 = v6;
    [WeakRetained provideCKAssetWithRecordID:v8 fieldName:v9 recordType:0 signature:v10 completionHandler:v11];
  }

  else
  {
    (*((void (**)(id, void, uint64_t))v6 + 2))(v6, 0LL, 2LL);
  }
}

void sub_100055208(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  switch(a3)
  {
    case 2LL:
      id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      id v7 = v5;
      goto LABEL_7;
    case 1LL:
      id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      id v7 = v5;
      goto LABEL_7;
    case 0LL:
      id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      id v7 = v5;
LABEL_7:
      v6();
      id v5 = v7;
      break;
  }
}

id sub_100055294(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 104) registerForAssetUploadRequests:*(void *)(a1 + 40) machServiceName:@"com.apple.aps.photos.cloud.datarepair"];
}

id sub_1000552A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startWaitingForPushNotifications];
}

void *sub_100055340(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 16) == result[5])
  {
    os_log_t v2 = result;
    uint64_t result = [*(id *)(v1 + 24) count];
    if (!result)
    {
      if (!_CPLSilentLogging)
      {
        id v3 = sub_100054E18();
        id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v5 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "No CloudKit clients registered - unregistering coordinator from system",  v5,  2u);
        }
      }

      return [(id)v2[4] _coordinatorWontBeUsed];
    }
  }

  return result;
}

id sub_100055494(uint64_t a1)
{
  return [*(id *)(a1 + 32) _waitForClientsIfNecessaryLocked];
}

id sub_1000554F4(uint64_t a1)
{
  id result = [(id)objc_opt_class(*(void *)(a1 + 32)) shouldRegisterClient];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _coordinatorWontBeUsed];
  }
  return result;
}

void sub_100055A58(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 containsObject:*(void *)(a1 + 32)])
  {
    if ([v5 count] == (id)1) {
      [*(id *)(a1 + 40) addObject:v6];
    }
    else {
      [v5 removeObject:*(void *)(a1 + 32)];
    }
  }
}

id sub_100055C80(uint64_t a1)
{
  id result = [(id)objc_opt_class(*(void *)(a1 + 32)) shouldRegisterClient];
  if ((_DWORD)result)
  {
    [*(id *)(a1 + 32) _addClientToInterestingZones:*(void *)(a1 + 40)];
    return _[*(id *)(a1 + 32) _coordinatorWillBeUsed];
  }

  return result;
}

id sub_100055DB0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if (result)
  {
    [*(id *)(a1 + 32) _removeClientFromInterestingZones:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(void *)(v4 + 64) == v3)
    {
      id v5 = objc_alloc(&OBJC_CLASS____CPLCloudKitUnregisteredClient);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudKitClientIdentifier]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) defaultSourceBundleIdentifier]);
      id v8 = -[_CPLCloudKitUnregisteredClient initWithCloudKitClientIdentifier:defaultSourceBundleIdentifier:]( v5,  "initWithCloudKitClientIdentifier:defaultSourceBundleIdentifier:",  v6,  v7);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void **)(v9 + 64);
      *(void *)(v9 + 64) = v8;

      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
    }

    [*(id *)(v4 + 24) removeObject:v3];
    [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _waitForClientsIfNecessaryLocked];
    return _[*(id *)(a1 + 32) _moveToBackgroundIfNecessary];
  }

  return result;
}

id sub_100055F80(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) containsObject:*(void *)(a1 + 40)];
  if ((_DWORD)result)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    id result = [*(id *)(*(void *)(a1 + 32) + 32) containsObject:*(void *)(a1 + 40)];
    if (v3)
    {
      if ((result & 1) == 0)
      {
        [*(id *)(*(void *)(a1 + 32) + 32) addObject:*(void *)(a1 + 40)];
        return _[*(id *)(a1 + 32) _moveToForeground];
      }
    }

    else if ((_DWORD)result)
    {
      [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
      return _[*(id *)(a1 + 32) _moveToBackgroundIfNecessary];
    }
  }

  return result;
}

void sub_100056700(void *a1)
{
  if ([*(id *)(a1[4] + 24) containsObject:a1[5]])
  {
    os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 104) containerID]);
    id v3 = [v2 environment];

    uint64_t v4 = objc_alloc(&OBJC_CLASS___NSMutableString);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 104) containerIdentifier]);
    id v6 = (void *)v5;
    id v7 = @"Production";
    if (v3 == (id)2) {
      id v7 = @"Sandbox";
    }
    id v8 = -[NSMutableString initWithFormat:](v4, "initWithFormat:", @"Container: %@ Environment: %@", v5, v7);

    if ((unint64_t)[*(id *)(a1[4] + 24) count] >= 2) {
      -[NSMutableString appendFormat:]( v8,  "appendFormat:",  @" (%lu clients)",  [*(id *)(a1[4] + 24) count]);
    }
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    (*(void (**)(void))(a1[6] + 16LL))();
  }

uint64_t sub_100056900(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 64LL));
}

void sub_100056AC0(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3 == 2)
  {
    uint64_t v5 = 2LL;
LABEL_6:
    objc_msgSend( *(id *)(a1 + 32),  "_askNextClient:toProvideCKAssetWithRecordID:fieldName:recordType:signature:bestResponseYet:completionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v5,  *(void *)(a1 + 80),  v6);
    goto LABEL_7;
  }

  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    goto LABEL_6;
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
LABEL_7:
}

void sub_100056CB4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
    id v3 = (id)objc_claimAutoreleasedReturnValue([v2 objectEnumerator]);

    [*(id *)(a1 + 32) _askNextClient:v3 toProvideCKAssetWithRecordID:*(void *)(a1 + 40) fieldName:*(void *)(a1 + 48) recordType:*(void *)(a1 + 56) signature:*(void *)(a1 + 64) bestResponseYet:1 completionHandler:*(void *)(a1 + 72)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

void sub_1000571E4(void *a1)
{
  uint64_t v3 = a1[4];
  id v2 = (void *)a1[5];
  if (v3 == v2[8])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _clientsInterestedToReceiveAPushNotificationForZoneID:a1[6]]);
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v17 objects:v25 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v18;
      *(void *)&__int128 v6 = 138543618LL;
      __int128 v16 = v6;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v4);
          }
          uint64_t v10 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
          uint64_t v11 = a1[5];
          if (v10 != *(void **)(v11 + 64))
          {
            if (!_CPLSilentLogging)
            {
              id v12 = sub_100054E18();
              id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 cloudKitClientIdentifier]);
                uint64_t v15 = a1[6];
                *(_DWORD *)buf = v16;
                __int16 v22 = v14;
                __int16 v23 = 2114;
                uint64_t v24 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Notifying client %{public}@ that %{public}@ has changes",  buf,  0x16u);
              }

              uint64_t v11 = a1[5];
            }

            objc_msgSend(v10, "coordinatorDidReceiveAPushNotification:", v11, v16);
          }
        }

        id v7 = [v4 countByEnumeratingWithState:&v17 objects:v25 count:16];
      }

      while (v7);
    }
  }

void sub_10005765C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000576FC;
  v8[3] = &unk_100240588;
  id v9 = v3;
  id v6 = v4;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v6;
  id v7 = v3;
  [v5 accountStatusWithCompletionHandler:v8];
}

void sub_1000576FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) callDidFinish];
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = *(void **)(a1 + 48);
    uint64_t v8 = *(void *)(v6 + 104);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100057810;
    v11[3] = &unk_100240560;
    void v11[4] = v6;
    id v12 = v7;
    uint64_t v13 = a2;
    +[CPLCallObserver observeAsyncCallOn:selector:block:]( &OBJC_CLASS___CPLCallObserver,  "observeAsyncCallOn:selector:block:",  v8,  "accountInfoWithCompletionHandler:",  v11);
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (v5)
    {
      (*(void (**)(void, void, void, id))(v9 + 16))(*(void *)(a1 + 48), 0LL, 0LL, v5);
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
      (*(void (**)(uint64_t, void, void, void *))(v9 + 16))(v9, 0LL, 0LL, v10);
    }
  }
}

void sub_100057810(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[5];
  id v5 = *(void **)(a1[4] + 104LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000578B0;
  v9[3] = &unk_100240538;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = a1[6];
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  [v5 accountInfoWithCompletionHandler:v9];
}

void sub_1000578B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 callDidFinish];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100057DA0(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.coordinator");
  id v3 = (void *)qword_100296198;
  qword_100296198 = (uint64_t)v2;
}

void sub_100057DCC(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

BOOL CPLCloudKitResourceInfoImageDimensionsReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            __int128 v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__height;
            goto LABEL_37;
          }

          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0LL;
            __int128 v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__height;
            goto LABEL_40;
          }
        }

        __int128 v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__height;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0LL;
        }
LABEL_40:
        *(void *)(a1 + *v1_Block_object_dispose((const void *)(v1 - 216), 8) = v14;
        goto LABEL_41;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0LL;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        __int128 v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__width;
        goto LABEL_38;
      }

      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        uint64_t v14 = 0LL;
        __int128 v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__width;
        goto LABEL_40;
      }
    }

    __int128 v18 = &OBJC_IVAR___CPLCloudKitResourceInfoImageDimensions__width;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id CPLSimplifiedStringFromClass(uint64_t a1)
{
  if (qword_1002961B0 != -1) {
    dispatch_once(&qword_1002961B0, &stru_1002405F0);
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  char v8 = sub_100058514;
  uint64_t v9 = sub_100058524;
  id v10 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10005852C;
  v4[3] = &unk_100240618;
  void v4[4] = &v5;
  void v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1002961A0, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1000584B4(id a1)
{
  uint64_t v1 = CPLCopyDefaultSerialQueueAttributes(a1);
  id v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.cpl.cloudkit.classnames", v2);
  char v4 = (void *)qword_1002961A0;
  qword_1002961A0 = (uint64_t)v3;

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unint64_t v6 = (void *)qword_1002961A8;
  qword_1002961A8 = (uint64_t)v5;
}

uint64_t sub_100058514(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100058524(uint64_t a1)
{
}

void sub_10005852C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([(id)qword_1002961A8 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    uint64_t v5 = NSStringFromClass(*(Class *)(a1 + 40));
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v13 = [v6 mutableCopy];

    objc_msgSend( v13,  "replaceOccurrencesOfString:withString:options:range:",  @"CPL",  &stru_1002482B0,  0,  0,  objc_msgSend(v13, "length"));
    objc_msgSend( v13,  "replaceOccurrencesOfString:withString:options:range:",  @"CK",  &stru_1002482B0,  0,  0,  objc_msgSend(v13, "length"));
    objc_msgSend( v13,  "replaceOccurrencesOfString:withString:options:range:",  @"Operation",  &stru_1002482B0,  0,  0,  objc_msgSend(v13, "length"));
    objc_msgSend( v13,  "replaceOccurrencesOfString:withString:options:range:",  @"Task",  &stru_1002482B0,  0,  0,  objc_msgSend(v13, "length"));
    objc_msgSend( v13,  "replaceOccurrencesOfString:withString:options:range:",  @"CloudKit",  &stru_1002482B0,  0,  0,  objc_msgSend(v13, "length"));
    if ([v13 length])
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
      id v8 = v13;
      uint64_t v9 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v8;
    }

    else
    {
      id v10 = NSStringFromClass(*(Class *)(a1 + 40));
      uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v9 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    [(id)qword_1002961A8 setObject:v13 forKeyedSubscript:*(void *)(a1 + 40)];
  }

void sub_100058984(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  unint64_t v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
  if (!v6)
  {
    unint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];
  }

  -[NSMutableArray addObject:](v6, "addObject:", v5);
}

void sub_100058A14(uint64_t a1, void *a2, void *a3)
{
  char v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 componentsJoinedByString:@"\n    "]);
  [v4 appendFormat:@"\n  %@:\n    %@", v5, v6];
}

id sub_100058B6C()
{
  if (qword_1002961B8 != -1) {
    dispatch_once(&qword_1002961B8, &stru_1002406E0);
  }
  return (id)qword_1002961C0;
}

#error "100058D5C: call analysis failed (funcsize=36)"
id __cdecl -[CPLCloudKitOperationsTracker _bundleIdentifiersFromCKOperation:]( CPLCloudKitOperationsTracker *self,  SEL a2,  id a3)
{
  id v3;
  NSMutableSet *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v3 = a3;
  char v4 = -[NSMutableSet initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithCapacity:", 2LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 configuration]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 applicationBundleIdentifierOverrideForNetworkAttribution]);

  if (v6) {
    -[NSMutableSet addObject:](v4, "addObject:", v6);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 configuration]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 applicationBundleIdentifierOverrideForContainerAccess]);

  if (v8) {
    -[NSMutableSet addObject:](v4, "addObject:", v8);
  }
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v4, "allObjects"));

  return v9;
}

void sub_100059084(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) trackingContext]);
  if (!v3) {
    sub_100192608(a1, v2);
  }
  char v4 = (void *)v3;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v5 = *(id *)(a1 + 56);
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        +[CPLNetworkIndicator showNetworkIndicatorForBundleWithIdentifier:]( &OBJC_CLASS___CPLNetworkIndicator,  "showNetworkIndicatorForBundleWithIdentifier:",  *(void *)(*((void *)&v10 + 1) + 8LL * (void)v9),  (void)v10);
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }

  [v4 operationWillStart:*(void *)(a1 + 40) context:*(void *)(a1 + 64)];
  [*(id *)(a1 + 48) _emitLogForCurrentTasks];
}

#error "100059238: call analysis failed (funcsize=31)"
void __cdecl -[CPLCloudKitOperationsTracker operationDidProgressOneBatch:]( CPLCloudKitOperationsTracker *self,  SEL a2,  id a3)
{
  id v5;
  void *v6;
  OS_dispatch_queue *queue;
  void *v8;
  dispatch_queue_s *v9;
  id v10;
  id v11;
  dispatch_block_t v12;
  void v13[5];
  id v14;
  id v15;
  SEL v16;
  void block[4];
  id v18;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  queue = self->_queue;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100059354;
  v13[3] = &unk_10023DA98;
  void v13[4] = self;
  uint64_t v14 = v5;
  unint64_t v15 = v6;
  char v16 = a2;
  uint64_t v8 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005B664;
  block[3] = &unk_10023DBC8;
  __int128 v18 = v8;
  uint64_t v9 = queue;
  __int128 v10 = v6;
  __int128 v11 = v5;
  __int128 v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v9, v12);
}

#error "1000593B8: call analysis failed (funcsize=26)"
BOOL __cdecl -[CPLCloudKitOperationsTracker isOperationBlocked:](CPLCloudKitOperationsTracker *self, SEL a2, id a3)
{
  id v5;
  OS_dispatch_queue *queue;
  id v7;
  void v9[5];
  id v10;
  uint64_t *v11;
  SEL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  id v5 = a3;
  __int128 v13 = 0LL;
  uint64_t v14 = &v13;
  unint64_t v15 = 0x2020000000LL;
  char v16 = 0;
  queue = self->_queue;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100059478;
  v9[3] = &unk_10023F228;
  void v9[4] = self;
  __int128 v10 = v5;
  __int128 v11 = &v13;
  __int128 v12 = a2;
  id v7 = v5;
  dispatch_sync((dispatch_queue_t)queue, v9);
  LOBYTE(self) = *((_BYTE *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return (char)self;
}

#error "1000594E4: call analysis failed (funcsize=28)"
void __cdecl -[CPLCloudKitOperationsTracker operation:updateProgress:]( CPLCloudKitOperationsTracker *self,  SEL a2,  id a3,  double a4)
{
  id v7;
  void *v8;
  double v9;
  OS_dispatch_queue *queue;
  void *v11;
  dispatch_queue_s *v12;
  id v13;
  dispatch_block_t v14;
  void v15[5];
  id v16;
  SEL v17;
  double v18;
  void block[4];
  id v20;
  id v7 = a3;
  uint64_t v8 = v7;
  uint64_t v9 = 100.0;
  if (a4 <= 100.0) {
    uint64_t v9 = a4;
  }
  queue = self->_queue;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000595F8;
  v15[3] = &unk_100240690;
  void v15[4] = self;
  char v16 = v7;
  BOOL v17 = a2;
  __int128 v18 = fmax(v9, 0.0);
  __int128 v11 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005B664;
  block[3] = &unk_10023DBC8;
  unsigned int v20 = v11;
  __int128 v12 = queue;
  __int128 v13 = v8;
  uint64_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v14);
}

#error "10005965C: call analysis failed (funcsize=26)"
void __cdecl -[CPLCloudKitOperationsTracker operation:updateContextWithBlock:]( CPLCloudKitOperationsTracker *self,  SEL a2,  id a3,  id a4)
{
  id v5;
  OS_dispatch_queue *queue;
  id v7;
  dispatch_queue_s *v8;
  dispatch_block_t v9;
  void block[4];
  id v11;
  id v5 = a4;
  queue = self->_queue;
  id v7 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005B664;
  block[3] = &unk_10023DBC8;
  __int128 v11 = v7;
  uint64_t v8 = queue;
  uint64_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v9);
}

void sub_100059790(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cpl_task"));
  if (!v3) {
    sub_100192B8C( a1,  (uint64_t)v2,  v4,  v5,  v6,  v7,  v8,  v9,  v32,  *((uint64_t *)&v32 + 1),  v33,  *((uint64_t *)&v33 + 1),  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36,  v37,  v38,  v39,  v40,  v41);
  }
  __int128 v10 = v3;
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 trackingContext]);
  if (!v11) {
    sub_100192C9C( a1,  (uint64_t)v10,  v12,  v13,  v14,  v15,  v16,  v17,  v32,  *((uint64_t *)&v32 + 1),  v33,  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36,  v37,  v38,  v39,  v40,  v41);
  }
  __int128 v18 = v11;
  char v19 = (void *)objc_claimAutoreleasedReturnValue([v11 contextForOperation:*v2]);
  if (!v19) {
    sub_100192DAC( (uint64_t)v2,  a1,  v20,  v21,  v22,  v23,  v24,  v25,  v32,  *((uint64_t *)&v32 + 1),  v33,  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36,  v37,  v38,  v39,  v40,  v41);
  }
  id v26 = v19;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "bundleIdentifiers", 0));
  id v28 = [v27 countByEnumeratingWithState:&v32 objects:&v37 count:16];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = *(void *)v33;
    do
    {
      __int16 v31 = 0LL;
      do
      {
        if (*(void *)v33 != v30) {
          objc_enumerationMutation(v27);
        }
        +[CPLNetworkIndicator hideNetworkIndicatorForBundleWithIdentifier:]( &OBJC_CLASS___CPLNetworkIndicator,  "hideNetworkIndicatorForBundleWithIdentifier:",  *(void *)(*((void *)&v32 + 1) + 8LL * (void)v31));
        __int16 v31 = (char *)v31 + 1;
      }

      while (v29 != v31);
      id v29 = [v27 countByEnumeratingWithState:&v32 objects:&v37 count:16];
    }

    while (v29);
  }

  [v18 operationDidFinish:*v2];
}

#error "100059A68: call analysis failed (funcsize=28)"
void __cdecl -[CPLCloudKitOperationsTracker taskHasBeenCancelled:](CPLCloudKitOperationsTracker *self, SEL a2, id a3)
{
  id v5;
  OS_dispatch_queue *queue;
  void *v7;
  dispatch_queue_s *v8;
  id v9;
  dispatch_block_t v10;
  void v11[4];
  id v12;
  CPLCloudKitOperationsTracker *v13;
  SEL v14;
  void block[4];
  id v16;
  uint64_t v5 = a3;
  queue = self->_queue;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100059B5C;
  v11[3] = &unk_10023EFC8;
  uint64_t v13 = self;
  uint64_t v14 = a2;
  uint64_t v12 = v5;
  uint64_t v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005B664;
  block[3] = &unk_10023DBC8;
  uint64_t v16 = v7;
  uint64_t v8 = queue;
  uint64_t v9 = v5;
  __int128 v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

#error "100059BB4: call analysis failed (funcsize=23)"
void __cdecl -[CPLCloudKitOperationsTracker taskDidFinish:](CPLCloudKitOperationsTracker *self, SEL a2, id a3)
{
  id v5;
  OS_dispatch_queue *queue;
  void *v7;
  dispatch_queue_s *v8;
  id v9;
  dispatch_block_t v10;
  void v11[4];
  id v12;
  CPLCloudKitOperationsTracker *v13;
  SEL v14;
  void block[4];
  id v16;
  uint64_t v5 = a3;
  queue = self->_queue;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100059CA8;
  v11[3] = &unk_10023EFC8;
  uint64_t v13 = self;
  uint64_t v14 = a2;
  uint64_t v12 = v5;
  uint64_t v7 = v11;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005B664;
  block[3] = &unk_10023DBC8;
  uint64_t v16 = v7;
  uint64_t v8 = queue;
  uint64_t v9 = v5;
  __int128 v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v8, v10);
}

void sub_100059CA8(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) trackingContext]);
  if (!v3) {
    sub_1001930C4( a1,  v2,  v4,  v5,  v6,  v7,  v8,  v9,  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  *((uint64_t *)&v26 + 1),  v27,  v28[0],  v28[1],  v28[2],  v28[3],  v28[4]);
  }
  __int128 v10 = v3;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(*(void *)(a1 + 40) + 24LL);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 countOfOperationClasses]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 countOfOperationWithCellularAccessClasses]);
  [v12 endTask:v11 withOperationClasses:v13 operationsAllowingCellular:v14];

  [*(id *)(a1 + 32) setTrackingContext:0];
  [*(id *)(*(void *)(a1 + 40) + 16) removeObject:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _emitLogForCurrentTasks];
  uint64_t v15 = *(void *)(a1 + 40);
  if (*(void *)(v15 + 32) && ![*(id *)(v15 + 16) count])
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v16 = *(id *)(*(void *)(a1 + 40) + 32LL);
    id v17 = [v16 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v24;
      do
      {
        uint64_t v20 = 0LL;
        do
        {
          if (*(void *)v24 != v19) {
            objc_enumerationMutation(v16);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v23 + 1) + 8LL * (void)v20) + 16LL))(*(void *)(*((void *)&v23 + 1) + 8LL * (void)v20));
          uint64_t v20 = (char *)v20 + 1;
        }

        while (v18 != v20);
        id v18 = [v16 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }

      while (v18);
    }

    uint64_t v21 = *(void *)(a1 + 40);
    uint64_t v22 = *(void **)(v21 + 32);
    *(void *)(v21 + 32) = 0LL;
  }
}

uint64_t sub_100059F34(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_100058B6C();
      uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = [*(id *)(*(void *)(a1 + 32) + 16) count];
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pendingTaskStatus]);
        *(_DWORD *)buf = 134218242;
        id v19 = v4;
        __int16 v20 = 2112;
        uint64_t v21 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cancelling all operations for %lu tasks:\n%@",  buf,  0x16u);
      }
    }

    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v6 = *(id *)(*(void *)(a1 + 32) + 16LL);
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        __int128 v10 = 0LL;
        do
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v13 + 1) + 8 * (void)v10),  "trackingContext",  (void)v13));
          [v11 cancelAllOperations];

          __int128 v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v8);
    }

    [*(id *)(a1 + 32) _emitLogForCurrentTasks];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10005A1B0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 32) + 16LL);
    id v4 = [v3 countByEnumeratingWithState:&v13 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = 0LL;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v3);
          }
          uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          if (objc_msgSend(v9, "isBoostable", (void)v13))
          {
            __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 trackingContext]);
            if ([v10 hasBlockedOperationsIncludingBackground:*(unsigned __int8 *)(a1 + 40)])
            {
              [v10 cancelAllOperations];
              ++v6;
            }
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v13 objects:v19 count:16];
      }

      while (v5);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    if (!_CPLSilentLogging)
    {
      id v11 = sub_100058B6C();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Cancelling %lu blocked tasks", buf, 0xCu);
      }
    }

    return objc_msgSend(*(id *)(a1 + 32), "_emitLogForCurrentTasks", (void)v13);
  }

  return result;
}

void sub_10005A414(uint64_t a1)
{
  id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pendingTaskStatus]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned int v3 = [v2 BOOLForKey:@"CPLUseCompactCloudKitStatus"];

  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v5 = v12;
    uint64_t v6 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v5;
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) status]);
    if (v6)
    {
      uint64_t v7 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@\n%@",  v6,  v12);
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
    }

    else
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v11 = v12;
      uint64_t v9 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v11;
    }
  }
}

void sub_10005A5BC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * (void)i), "trackingContext", (void)v18));
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 operationStatusDictionaries]);
        -[NSMutableArray addObjectsFromArray:](v2, "addObjectsFromArray:", v9);
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }

    while (v5);
  }

  uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) statusObject]);
  id v11 = (void *)v10;
  if (v10)
  {
    v24[0] = @"operations";
    v24[1] = @"sessions";
    v25[0] = v2;
    v25[1] = v10;
    id v12 = (NSMutableArray **)v25;
    __int128 v13 = (const __CFString **)v24;
    uint64_t v14 = 2LL;
  }

  else
  {
    uint64_t v22 = @"operations";
    __int128 v23 = v2;
    id v12 = &v23;
    __int128 v13 = &v22;
    uint64_t v14 = 1LL;
  }

  uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v13,  v14,  (void)v18));
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;
}

void sub_10005A858(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
    if (!v2)
    {
      id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = *(void **)(v4 + 32);
      *(void *)(v4 + 32) = v3;

      id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
    }

    id v6 = objc_retainBlock(*(id *)(a1 + 40));
    [v2 addObject:v6];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10005B638(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.operations");
  id v3 = (void *)qword_1002961C0;
  qword_1002961C0 = (uint64_t)v2;
}

void sub_10005B664(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10005B698(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t sub_10005B6BC()
{
  return v0;
}

void sub_10005CD44(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectAtIndexedSubscript:a3]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 recordID]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 recordName]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[5] recordName]);
  unsigned int v10 = [v8 isEqualToString:v9];

  if (v10)
  {
    id v11 = (NSString *)v5;
  }

  else
  {
    id v12 = objc_alloc(&OBJC_CLASS___NSString);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 recordName]);
    id v11 = -[NSString initWithFormat:](v12, "initWithFormat:", @"%@#%@", v5, v13);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1[6] objectAtIndexedSubscript:a3]);
  uint64_t v15 = -[CKServerChangeToken initWithData:](objc_alloc(&OBJC_CLASS___CKServerChangeToken), "initWithData:", v14);
  uint64_t v16 = v15;
  if (v15)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver cpl_archivedDataWithRootObject:]( &OBJC_CLASS___NSKeyedArchiver,  "cpl_archivedDataWithRootObject:",  v15));
    [a1[7] setObject:v17 forKeyedSubscript:v11];
  }

  else if (!_CPLSilentLogging)
  {
    uint64_t v18 = __CPLGenericOSLogDomain(0LL);
    __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      __int128 v21 = v11;
      __int16 v22 = 2112;
      __int128 v23 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed to interpret server change token for %@: %@",  buf,  0x16u);
    }
  }
}

CKRecordID *CPLLibraryShareSettingsRecordID(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc(&OBJC_CLASS___NSString);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 recordName]);

  uint64_t v7 = -[NSString initWithFormat:](v5, "initWithFormat:", @"%@%@", @"PerUserScopeUserSettings-", v6);
  uint64_t v8 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v7,  v4);

  return v8;
}

void sub_10005D550(_Unwind_Exception *a1)
{
}

void sub_10005D568(id a1)
{
  v3[0] = &off_10025A0B0;
  v3[1] = &off_10025A0C8;
  v4[0] = @"query";
  v4[1] = @"shared";
  v3[2] = &off_10025A0E0;
  v4[2] = @"zoneish";
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL));
  os_log_t v2 = (void *)qword_1002961C8;
  qword_1002961C8 = v1;
}

void sub_10005D618(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  unint64_t v5 = (unint64_t)[a2 integerValue];
  if ((v5 & ~*(void *)(a1 + 48)) == 0)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) &= ~v5;
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_10005DB84(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CPLCloudKitScope);
  id v3 = -[NSSet initWithObjects:](v1, "initWithObjects:", v2, objc_opt_class(&OBJC_CLASS___CKRecordZone), 0LL);
  id v4 = (void *)qword_1002961D8;
  qword_1002961D8 = (uint64_t)v3;
}

id CPLSharingScopeUUID()
{
  return (id)qword_1002961E8;
}

id CPLStagedZoneNameFromStagingZoneName(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 recordName]);
  if (([v3 hasSuffix:v5] & 1) == 0)
  {

    goto LABEL_6;
  }

  id v6 = (char *)[v3 length];
  id v7 = [@"Exit-" length];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 recordName]);
  uint64_t v9 = (char *)[v8 length] + (void)v7 + 2;

  if (v6 <= v9)
  {
LABEL_6:
    __int128 v13 = 0LL;
    goto LABEL_7;
  }

  id v10 = [@"Exit-" length];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v4 recordName]);
  unint64_t v12 = ~(unint64_t)[v11 length];

  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "substringWithRange:", v10, (char *)objc_msgSend(v3, "length") + v12 - (void)v10));
LABEL_7:

  return v13;
}

NSString *CPLStagingZoneNameFromZoneName(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  unint64_t v5 = objc_alloc(&OBJC_CLASS___NSString);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 recordName]);

  id v7 = -[NSString initWithFormat:](v5, "initWithFormat:", @"%@%@-%@", @"Exit-", v4, v6);
  return v7;
}

id CPLIsStagedZoneName(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"Exit-"];
}

uint64_t CPLCloudKitOperationTypeForScope(void *a1)
{
  id v1 = a1;
  id v2 = [v1 databaseScope];
  id v3 = [v1 databaseScope];
  if (v3 == (id)3)
  {
    else {
      uint64_t v4 = 2LL;
    }
  }

  else
  {
    if (v3 != (id)2) {
      sub_1001933F0((uint64_t)v1, (uint64_t)v2);
    }
    else {
      uint64_t v4 = 1LL;
    }
  }

  return v4;
}

uint64_t CPLCKDatabaseScopeForCPLCloudKitOperationType(uint64_t a1)
{
  if (a1 == 2 || a1 == 4) {
    return 3LL;
  }
  if (!a1) {
    sub_100193488();
  }
  return 2LL;
}

uint64_t CPLCloudKitUseGateKeeper()
{
  if (qword_100296200 != -1) {
    dispatch_once(&qword_100296200, &stru_100240AF0);
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E210;
  block[3] = &unk_10023DD30;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1002961F0, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_10005E210(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = _CPLCloudKitUseGateKeeper;
  return result;
}

uint64_t CPLCloudKitGateKeeperDisabledByServer()
{
  if (qword_100296200 != -1) {
    dispatch_once(&qword_100296200, &stru_100240AF0);
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E2E0;
  block[3] = &unk_10023DD30;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1002961F0, block);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_10005E2E0(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = _CPLCloudKitGateKeeperDisabledByServer;
  return result;
}

void CPLDisableCloudKitUseGateKeeper()
{
  if (qword_100296200 != -1) {
    dispatch_once(&qword_100296200, &stru_100240AF0);
  }
  dispatch_sync((dispatch_queue_t)qword_1002961F0, &stru_1002407B0);
}

void sub_10005E340(id a1)
{
  if (!_CPLSilentLogging)
  {
    id v1 = sub_10005E3FC();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Server is disabling DDC", v4, 2u);
    }
  }

  _CPLCloudKitUseGateKeeper = 0;
  _CPLCloudKitGateKeeperDisabledByServer = 1;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v3 setObject:&__kCFBooleanTrue forKey:@"_CPLCloudKitAutoDisableGateKeeper"];
  [v3 synchronize];
}

id sub_10005E3FC()
{
  if (qword_100296208 != -1) {
    dispatch_once(&qword_100296208, &stru_100240B10);
  }
  return (id)qword_100296210;
}

#error "10005E5FC: call analysis failed (funcsize=28)"
void __cdecl -[CPLCloudKitTransportTask setTransportGroup:](CPLCloudKitTransportTask *self, SEL a2, id a3)
{
  CPLEngineTransportGroup *v5;
  uint64_t v6;
  CPLEngineTransportGroup *transportGroup;
  CPLCloudKitTransportTask *v8;
  SEL v9;
  uint64_t v5 = (CPLEngineTransportGroup *)a3;
  id v6 = objc_opt_class(&OBJC_CLASS___CKOperationGroup);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    transportGroup = self->_transportGroup;
    self->_transportGroup = v5;
  }

  else
  {
    uint64_t v8 = (CPLCloudKitTransportTask *)sub_100193604(v5, self, a2);
    -[CPLCloudKitTransportTask operationGroup](v8, v9);
  }

void sub_10005E7D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10005E86C;
  v6[3] = &unk_10023DE80;
  uint64_t v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v9 = v4;
  id v5 = v3;
  [v7 dispatchAsync:v6];
}

id sub_10005E86C(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 104))
  {
    id v2 = result;
    id v3 = (void *)*((void *)result + 5);
    if (v3)
    {
      objc_storeStrong((id *)(v1 + 112), v3);
    }

    else
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue([*((id *)result + 6) currentActivity]);
      uint64_t v5 = *((void *)v2 + 4);
      id v6 = *(void **)(v5 + 120);
      *(void *)(v5 + 120) = v4;

      [*((id *)v2 + 4) setHasBackgroundActivity:*(void *)(*((void *)v2 + 4) + 120) != 0];
    }

    uint64_t v7 = *((void *)v2 + 4);
    id v8 = *(void **)(v7 + 104);
    *(void *)(v7 + 104) = 0LL;

    [*((id *)v2 + 4) setIdleDescription:0];
    return [*((id *)v2 + 4) _reallyStartOperation];
  }

  return result;
}

void sub_10005EAE8(uint64_t a1)
{
  if (__CPLShouldLogQOS() && !_CPLSilentLogging)
  {
    uint64_t v2 = __CPLQOSOSLogDomain();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)objc_opt_class(*(void *)(a1 + 32));
      id v5 = v4;
      uint64_t v6 = CPLCurrentQOS();
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      int v14 = 138412546;
      uint64_t v15 = v4;
      __int16 v16 = 2112;
      id v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Running %@ with %@ QOS",  (uint8_t *)&v14,  0x16u);
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 216) cloudKitRescheduler]);
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v8)
  {
    if (!*(void *)(v9 + 120))
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(v9 + 216) detachedActivity]);
      uint64_t v12 = *(void *)(a1 + 32);
      __int128 v13 = *(void **)(v12 + 120);
      *(void *)(v12 + 120) = v11;

      uint64_t v9 = *(void *)(a1 + 32);
    }

    goto LABEL_11;
  }

  unsigned int v10 = [(id)v9 _operationsShouldBeDiscretionary];
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v10)
  {
LABEL_11:
    [(id)v9 _reallyStartOperation];
    goto LABEL_12;
  }

  [(id)v9 _acquireActivityAndLaunchOperation];
LABEL_12:
}

void sub_10005EC48(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10005ECF8;
  void v3[3] = &unk_10023E850;
  objc_copyWeak(&v4, &location);
  [v2 setCancellationHandler:v3];
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_10005ECDC(_Unwind_Exception *a1)
{
}

void sub_10005ECF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_10005E3FC();
      id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 138412290;
        id v5 = WeakRetained;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@ was cancelled by client through progress cancellation handler",  (uint8_t *)&v4,  0xCu);
      }
    }

    [WeakRetained cancel];
  }
}

char *sub_10005EEC4(char *result)
{
  id v2 = (id *)(result + 32);
  uint64_t v1 = (_BYTE *)*((void *)result + 4);
  if (v1[128]) {
    return result;
  }
  id v3 = result;
  if (!_CPLSilentLogging)
  {
    id v4 = sub_10005E3FC();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id v6 = *v2;
      *(_DWORD *)buf = 138412290;
      id v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Cancelling operations for %@", buf, 0xCu);
    }

    uint64_t v1 = *v2;
  }

  v1[128] = 1;
  uint64_t v7 = (id *)*v2;
  if (*((void *)*v2 + 13))
  {
    if ([v7[1] count] || *((void *)*v2 + 8)) {
      sub_1001936E4(v2, v3);
    }
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v2 + 27) cloudKitRescheduler]);
    [v8 dropBackgroundActivityRequest:*((void *)*v2 + 13)];

    [*v2 setIdleDescription:0];
    uint64_t v9 = (void *)*((void *)*v2 + 13);
    *((void *)*v2 + 13) = 0LL;

    return (char *)[*v2 _reallyStartOperation];
  }

  if (!v7[27])
  {
    if (![v7[1] count])
    {
      if (*((void *)*v2 + 18)) {
        BOOL v14 = _CPLSilentLogging == 0;
      }
      else {
        BOOL v14 = 0;
      }
      if (!v14) {
        goto LABEL_23;
      }
      id v15 = sub_10005E3FC();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*v2 idleDescription]);
        id v17 = *v2;
        *(_DWORD *)buf = 138412546;
        id v31 = v16;
        __int16 v32 = 2112;
        id v33 = v17;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Cancelling '%@' for %@", buf, 0x16u);
      }

      goto LABEL_22;
    }

    if (!_CPLSilentLogging)
    {
      id v10 = sub_10005E3FC();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [*((id *)*v2 + 1) count];
        id v13 = *v2;
        *(_DWORD *)buf = 134218242;
        id v31 = v12;
        __int16 v32 = 2112;
        id v33 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Cancelling %lu operations for %@",  buf,  0x16u);
      }

id sub_10005F488(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelAllOperationsIfBlocked];
}

id sub_10005F588(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_10005E3FC();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Cancelling operations for %@ it not blocked",  (uint8_t *)&v10,  0xCu);
    }
  }

  id v6 = (id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  if (!*(void *)(v5 + 104)) {
    return [(id)v5 _cancelAllOperationsIfBlocked];
  }
  *(_BYTE *)(v5 + 12_Block_object_dispose((const void *)(v1 - 64), 8) = 1;
  if ([*((id *)*v6 + 1) count]) {
    sub_1001937D0(a1 + 32, a1);
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*((id *)*v6 + 27) cloudKitRescheduler]);
  [v7 dropBackgroundActivityRequest:*((void *)*v6 + 13)];

  [*v6 setIdleDescription:0];
  id v8 = (void *)*((void *)*v6 + 13);
  *((void *)*v6 + 13) = 0LL;

  return [*v6 _reallyStartOperation];
}

void *sub_10005F828(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) count]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(void *)(*(void *)(a1 + 32) + 64LL) == 0LL;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (!result)
  {
    id result = *(void **)(a1 + 32);
    if (result[8]) {
      char v4 = 1;
    }
    else {
      char v4 = v2;
    }
    if ((v4 & 1) == 0)
    {
      if (*((_BYTE *)result + 56)) {
        return _[result taskDidFinish];
      }
    }
  }

  return result;
}

void *sub_10005F968(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) count]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(void *)(*(void *)(a1 + 32) + 64LL) == 0LL;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (!result)
  {
    id result = *(void **)(a1 + 32);
    if (result[8]) {
      char v4 = 1;
    }
    else {
      char v4 = v2;
    }
    if ((v4 & 1) == 0)
    {
      if (*((_BYTE *)result + 56)) {
        return _[result taskDidFinish];
      }
    }
  }

  return result;
}

void sub_1000601B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000601D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 requestUUID]);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1000602E8;
    v12[3] = &unk_10023DDE8;
    void v12[4] = v6;
    id v13 = v4;
    id v8 = v12;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100064A80;
    block[3] = &unk_10023DBC8;
    id v15 = v8;
    uint64_t v9 = v7;
    dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
    dispatch_async(v9, v10);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v3);
  }
}

id sub_1000602E8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_100060330(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100060340(uint64_t a1)
{
}

void sub_100060348(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000603D8;
  v5[3] = &unk_100240800;
  BOOL v2 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  id v3 = (id)v4;
  __int128 v7 = v4;
  [v2 dispatchAsync:v5];
}

void sub_1000603D8(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(*((void *)&v10 + 1) + 8 * (void)v6),  "associatedOperationDidComplete:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  (void)v10);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = 0LL;
}

void *sub_10006097C(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[18]) {
    return [result _cancelCallbackProgress];
  }
  return result;
}

void sub_100060990(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100060A28;
  v6[3] = &unk_10023DDE8;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = v3;
  id v4 = v3;
  id v5 = WeakRetained;
  [v5 dispatchAsync:v6];
}

id *sub_100060A28(id *result)
{
  if (*((void *)result[4] + 18))
  {
    uint64_t v1 = result;
    id result = (id *)[result[5] shouldDefer];
    if ((_DWORD)result)
    {
      if (!_CPLSilentLogging)
      {
        id v2 = sub_10005E3FC();
        id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          id v4 = v1[4];
          uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 idleDescription]);
          id v6 = (void *)v5;
          uint64_t v7 = @"running some operation";
          if (v5) {
            uint64_t v7 = (const __CFString *)v5;
          }
          int v8 = 138412546;
          uint64_t v9 = v4;
          __int16 v10 = 2112;
          __int128 v11 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@ has been marked as deferred while %@",  (uint8_t *)&v8,  0x16u);
        }
      }

      return (id *)[v1[4] _cancelCallbackProgress];
    }
  }

  return result;
}

void sub_100060C98(uint64_t a1)
{
  if (a1)
  {
    if (!*(void *)(a1 + 48))
    {
      uint64_t v2 = CPLCopyDefaultSerialQueueAttributes(a1);
      uint64_t v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
      dispatch_queue_t v3 = dispatch_queue_create("com.apple.cpl.cloudkit.task.synchronouswork", v5);
      id v4 = *(void **)(a1 + 48);
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 64), 8) = v3;
    }
  }

uint64_t sub_100060E20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100060F68(uint64_t a1)
{
  uint64_t v21 = 0LL;
  __int16 v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  uint64_t v15 = 0LL;
  __int16 v16 = &v15;
  uint64_t v17 = 0x3032000000LL;
  id v18 = sub_100060330;
  id v19 = sub_100060340;
  id v20 = 0LL;
  uint64_t v2 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100061124;
  v11[3] = &unk_100240850;
  __int128 v13 = &v21;
  id v12 = *(id *)(a1 + 48);
  BOOL v14 = &v15;
  [v2 performAsCurrentWithPendingUnitCount:1 usingBlock:v11];
  dispatch_queue_t v3 = (void *)v16[5];
  if (*((_BYTE *)v22 + 24))
  {
    v16[5] = 0LL;
  }

  else
  {
    if (v3) {
      goto LABEL_5;
    }
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
    dispatch_queue_t v3 = (void *)v16[5];
    v16[5] = v5;
  }

LABEL_5:
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10006118C;
  v6[3] = &unk_10023E6A8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  __int16 v10 = &v15;
  id v8 = v4;
  id v9 = *(id *)(a1 + 56);
  [v7 dispatchAsync:v6];

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);
}

void sub_100061100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100061124(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v3 + 40);
  char v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = v4;
}

void sub_10006118C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)]);
  objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 40), "totalUnitCount"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000611F4(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (a1)
  {
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v12 nextObject]);
    if (v16)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_100061344;
      v17[3] = &unk_1002408A0;
      id v18 = v14;
      id v19 = v13;
      id v20 = a1;
      id v23 = v11;
      id v21 = v16;
      id v22 = v12;
      id v24 = v15;
      [a1 dispatchSynchronousWork:v17];
    }

    else
    {
      (*((void (**)(id, void))v15 + 2))(v15, 0LL);
    }
  }
}

void sub_100061344(uint64_t a1)
{
  uint64_t v19 = 0LL;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000LL;
  __int16 v16 = sub_100060330;
  uint64_t v17 = sub_100060340;
  id v18 = 0LL;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    *((_BYTE *)v20 + 24) = 0;
    uint64_t v2 = objc_claimAutoreleasedReturnValue(+[CPLErrors operationCancelledError](&OBJC_CLASS___CPLErrors, "operationCancelledError"));
    uint64_t v3 = (NSString *)v14[5];
    void v14[5] = v2;
  }

  else
  {
    char v4 = (char *)[*(id *)(a1 + 32) completedUnitCount];
    uint64_t v3 = -[NSString initWithFormat:]( [NSString alloc],  "initWithFormat:",  @"%@ (%lu/%lu)",  *(void *)(a1 + 40),  v4,  [*(id *)(a1 + 32) totalUnitCount]);
    [*(id *)(a1 + 48) setIdleDescription:v3];
    uint64_t v5 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100061568;
    v8[3] = &unk_100240878;
    id v11 = &v19;
    id v10 = *(id *)(a1 + 72);
    id v9 = *(id *)(a1 + 56);
    id v12 = &v13;
    [v5 performAsCurrentWithPendingUnitCount:1 usingBlock:v8];
    [*(id *)(a1 + 32) setCompletedUnitCount:v4 + 1];
  }

  if (*((_BYTE *)v20 + 24))
  {
    sub_1000611F4( *(void *)(a1 + 48),  *(void *)(a1 + 72),  *(void *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(void *)(a1 + 80));
  }

  else
  {
    if (!v14[5])
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
      id v7 = (void *)v14[5];
      void v14[5] = v6;
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  _Block_object_dispose(&v13, 8);

  _Block_object_dispose(&v19, 8);
}

void sub_10006153C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100061568(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v3 + 40);
  char v4 = (*(uint64_t (**)(void))(v2 + 16))();
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v4;
}

void sub_10006171C(void *a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000617CC;
  v9[3] = &unk_1002408C8;
  char v4 = (void *)a1[5];
  id v10 = (id)a1[4];
  id v11 = v3;
  id v5 = v4;
  id v7 = (void *)a1[6];
  uint64_t v6 = a1[7];
  id v12 = v5;
  uint64_t v14 = v6;
  id v13 = v7;
  id v8 = v3;
  [v10 dispatchAsync:v9];
}

void sub_1000617CC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 48) setCompletedUnitCount:*(void *)(a1 + 64)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000619A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(void **)(v2 + 200);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100061A3C;
  v5[3] = &unk_100240940;
  void v5[4] = v2;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v4 acquireHelperWithIdentifier:v3 completionHandler:v5];
}

void sub_100061A3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100061B08;
  v11[3] = &unk_100240918;
  id v7 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v6;
  id v14 = v7;
  id v8 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = v8;
  id v9 = v5;
  id v10 = v6;
  [v12 dispatchAsync:v11];
}

void sub_100061B08(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(a1 + 40)]);
  objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
  if (v4)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = *(void *)(a1 + 40);
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v2 = *(void *)(a1 + 56);
  }

  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), v2, v3);
}

void sub_100061C9C(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v3 = objc_opt_class(*(void *)(a1 + 32));
  id v4 = CPLSimplifiedStringFromClass(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v7 = -[NSString initWithFormat:](v2, "initWithFormat:", @"%@-%@", v5, v6);

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = *(void **)(v8 + 200);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100061D90;
  v11[3] = &unk_100240968;
  void v11[4] = v8;
  id v12 = v9;
  id v13 = *(id *)(a1 + 48);
  [v10 getTemporaryFolderWithName:v7 completionHandler:v11];
}

void sub_100061D90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100061E5C;
  v11[3] = &unk_100240918;
  id v7 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v6;
  id v14 = v7;
  id v8 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = v8;
  id v9 = v5;
  id v10 = v6;
  [v12 dispatchAsync:v11];
}

void sub_100061E5C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callbackOperationDidFinishWithError:*(void *)(a1 + 40)]);
  objc_msgSend(*(id *)(a1 + 48), "setCompletedUnitCount:", objc_msgSend(*(id *)(a1 + 48), "totalUnitCount"));
  if (!v2) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 136LL), *(id *)(a1 + 56));
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10006272C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0LL;

  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) operationTracker]);
  [v4 taskDidFinish:*(void *)(a1 + 32)];
}

id sub_100062AB8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = 0LL;
  if (a1 && v3)
  {
    unsigned int v6 = [v3 allowsCellularAccess];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "_stringForQoS:", objc_msgSend(v4, "qualityOfService")));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1 _networkBehaviorForConfiguration:v4]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(Cell: %d QoS: %@ %@)",  v6,  v7,  v8));
  }

  return v5;
}

void sub_100063088(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (v7) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 176LL), a2);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000631F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000632A8;
  v10[3] = &unk_1002409B8;
  id v7 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v5;
  id v14 = v7;
  id v8 = v5;
  id v9 = v6;
  [v11 dispatchAsync:v10];
}

void sub_1000632A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_10005E3FC();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v14 = 138412290;
        id v15 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "failed to fetch user record: %@",  (uint8_t *)&v14,  0xCu);
      }
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v2,  v5,  @"Failed to get user record"));

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allValues]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);

    if (v6)
    {
      if (!_CPLSilentLogging)
      {
        id v8 = sub_10005E3FC();
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          int v14 = 138412290;
          id v15 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Active Apple Account, userRecord: %@",  (uint8_t *)&v14,  0xCu);
        }
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 recordID]);
      id v11 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v12 = sub_10005E3FC();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v14) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "No active Apple Account",  (uint8_t *)&v14,  2u);
        }
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  28LL,  @"No active Apple Account"));
      id v11 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
    }

    v11();
  }
}

void sub_1000636C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location, char a26)
{
}

void sub_1000636F8(uint64_t a1)
{
}

void sub_10006375C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10006380C;
  v10[3] = &unk_100240A30;
  void v10[4] = v6;
  id v11 = v5;
  char v13 = *(_BYTE *)(a1 + 56);
  __int128 v9 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v9;
  __int128 v12 = v9;
  id v8 = v5;
  [v6 dispatchAsync:v10];
}

void sub_10006380C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)
    && (+[CPLCloudKitErrors isCloudKitOperationCancelledError:]( &OBJC_CLASS___CPLCloudKitErrors,  "isCloudKitOperationCancelledError:",  v2)
     || [v2 isCPLOperationCancelledError]))
  {

LABEL_10:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    return;
  }

  if (!v2) {
    goto LABEL_10;
  }
  id v3 = *(void **)(a1 + 32);
  id v7 = v2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastOperationRequestUUIDs]);
  if (*(_BYTE *)(a1 + 64)) {
    id v5 = "shared";
  }
  else {
    id v5 = "private";
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v7,  v4,  @"failed to fetch %s database changes",  v5));

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000639EC(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100063A84;
    void v4[3] = &unk_10023EB88;
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 48);
    id v5 = *(id *)(a1 + 40);
    [v2 _enumerateAllZonesForSharedDatabase:1 block:v3 completionHandler:v4];
  }

uint64_t sub_100063A84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100063C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 264) setObject:a3 forKeyedSubscript:a2];
}

void sub_100063DA4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 zoneID]);
  if (v5) {
    [*(id *)(*(void *)(a1 + 32) + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

void CPLTaskLogCKCodeRequestAndResponse(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  __int128 v9 = a3;
  uint64_t v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "componentsJoinedByString:", @", "));
  id v11 = (void *)v10;
  __int128 v12 = @"unknown";
  if (v10) {
    __int128 v12 = (__CFString *)v10;
  }
  char v13 = v12;

  if (v9)
  {
    if (v8)
    {
      if (!_CPLSilentLogging)
      {
        id v14 = sub_100064724();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v23 = 138413058;
          id v24 = v7;
          __int16 v25 = 2112;
          __int128 v26 = v8;
          __int16 v27 = 2112;
          __int128 v28 = v9;
          __int16 v29 = 2114;
          uint64_t v30 = v13;
          id v16 = "Error for %@\nresponse: %@\nerror: %@\n\nrequest UUIDs: (%{public}@)";
          uint64_t v17 = v15;
          os_log_type_t v18 = OS_LOG_TYPE_ERROR;
          uint32_t v19 = 42;
LABEL_19:
          _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, (uint8_t *)&v23, v19);
        }

id sub_100064724()
{
  if (qword_100296218 != -1) {
    dispatch_once(&qword_100296218, &stru_100240B30);
  }
  return (id)qword_100296220;
}

void sub_100064764(id a1)
{
  uint64_t v1 = CPLCopyDefaultSerialQueueAttributes(a1);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.cpl.gatekeepercheck", v2);
  id v4 = (void *)qword_1002961F0;
  qword_1002961F0 = (uint64_t)v3;

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"CPLCloudKitUseGateKeeper"]);

  if (v6 && (objc_opt_respondsToSelector(v6, "BOOLValue") & 1) != 0)
  {
    _CPLCloudKitUseGateKeeper = [v6 BOOLValue];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    unsigned int v8 = [v7 BOOLForKey:@"_CPLCloudKitAutoDisableGateKeeper"];

    if (v8 && !_CPLSilentLogging)
    {
      id v9 = sub_10005E3FC();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v23) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "DDC has been disabled by server but enabled through defaults",  (uint8_t *)&v23,  2u);
      }
    }

    if (!_CPLCloudKitUseGateKeeper) {
      goto LABEL_29;
    }
LABEL_18:
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stringForKey:@"CPLCloudKitGateKeeperTranscodeType"]);
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 lowercaseString]);

    if (v18)
    {
      if ([v18 isEqualToString:@"mmcs"])
      {
        uint32_t v19 = (void *)&unk_1002A3000;
        uint64_t v20 = 1LL;
      }

      else
      {
        if (![v18 isEqualToString:@"transcode"])
        {
          if (!_CPLSilentLogging)
          {
            id v21 = sub_10005E3FC();
            id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              int v23 = 138412290;
              id v24 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Invalid value for transcode type: '%@'",  (uint8_t *)&v23,  0xCu);
            }
          }

          goto LABEL_28;
        }

        uint32_t v19 = &unk_1002A3000;
        uint64_t v20 = 2LL;
      }

      v19[394] = v20;
    }

void sub_100064A54(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.task");
  dispatch_queue_t v3 = (void *)qword_100296210;
  qword_100296210 = (uint64_t)v2;
}

void sub_100064A80(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100064AB4(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.task.ckcode");
  dispatch_queue_t v3 = (void *)qword_100296220;
  qword_100296220 = (uint64_t)v2;
}

  ;
}

void sub_100064B04( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_100064B18( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
}

id sub_100064B2C()
{
  return [*v0 count];
}

id sub_100064B34(id a1)
{
  return a1;
}

uint64_t sub_100064B40()
{
  return objc_opt_class(*v0);
}

  ;
}

void sub_100064DFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100064E90;
  v6[3] = &unk_10023DDE8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_100064E90(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_100064E9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100064F34;
  v8[3] = &unk_10023DE80;
  id v6 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  id v10 = v5;
  id v11 = v6;
  id v7 = v5;
  [v9 dispatchAsync:v8];
}

void sub_100064F34(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_1000650DC();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        unsigned int v12 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to delete source records: %@",  buf,  0xCu);
      }
    }

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 344LL);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10006511C;
    v9[3] = &unk_10023F778;
    id v10 = *(id *)(a1 + 48);
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lastOperationRequestUUIDs]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:",  v2,  v9,  v6,  v7,  @"delete"));
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 344LL) + 16LL))();
  }
}

id sub_1000650DC()
{
  if (qword_100296228 != -1) {
    dispatch_once(&qword_100296228, &stru_100240C08);
  }
  return (id)qword_100296230;
}

id sub_10006511C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10006551C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 272LL);
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v14 = (id)objc_claimAutoreleasedReturnValue([v5 recordIDWithRecordName:v7]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 scopedIdentifier]);
  id v9 = *(void **)(*(void *)(a1 + 32) + 280LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 recordIDWithRecordName:v10]);

  LODWORD(v10) = [v6 isDelete];
  if ((_DWORD)v10)
  {
    unsigned int v12 = (id *)(a1 + 40);
    id v13 = v14;
  }

  else
  {
    [*(id *)(a1 + 48) addObject:v14];
    unsigned int v12 = (id *)(a1 + 56);
    id v13 = v11;
  }

  [*v12 addObject:v13];
  [*(id *)(*(void *)(a1 + 32) + 328) setObject:v8 forKeyedSubscript:v14];
  [*(id *)(*(void *)(a1 + 32) + 328) setObject:v8 forKeyedSubscript:v11];
}

void sub_100065650(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5 || ![*(id *)(a1 + 32) count]) {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 344LL) + 16LL))();
  }
  else {
    [*(id *)(a1 + 40) _deleteSourceRecordIDs:*(void *)(a1 + 32)];
  }
}

void sub_100065D18( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  if (a2)
  {
    id v13 = objc_begin_catch(a1);
    if (a2 == 2)
    {
      id v14 = v13;
      if (!_CPLSilentLogging)
      {
        id v15 = sub_1000650DC();
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Error deserializing base CKRecord: %@",  (uint8_t *)&buf,  0xCu);
        }
      }

      objc_end_catch();
      if (!v11) {
        JUMPOUT(0x100065BBCLL);
      }
      JUMPOUT(0x100065C10LL);
    }

    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x100065DCCLL);
  }

  _Unwind_Resume(a1);
}

void sub_100066198(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resharerecords");
  id v3 = (void *)qword_100296230;
  qword_100296230 = (uint64_t)v2;
}

void sub_100066204(id a1)
{
  id v1 = -[CPLCKRecordPropertyMapping initSharedInstance]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyMapping),  "initSharedInstance");
  os_log_t v2 = (void *)qword_100296238;
  qword_100296238 = (uint64_t)v1;
}

id sub_100066234()
{
  if (qword_100296270 != -1) {
    dispatch_once(&qword_100296270, &stru_100240E40);
  }
  return (id)qword_100296268;
}

id sub_1000662B8()
{
  if (qword_100296290 != -1) {
    dispatch_once(&qword_100296290, &stru_100240E80);
  }
  return (id)qword_100296288;
}

void sub_100066338(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLContainerRelationChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLAlbumChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLMemoryChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLFaceCropChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLPersonChange));
  +[CPLPersonChange serverSupportsAssetSortOrder](&OBJC_CLASS___CPLPersonChange, "serverSupportsAssetSortOrder");
  +[CPLPersonChange serverSupportsDetectionType](&OBJC_CLASS___CPLPersonChange, "serverSupportsDetectionType");
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLSuggestionChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLSocialGroupChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLMasterChange));
  -[NSMutableSet addObject:](v1, "addObject:", objc_opt_class(&OBJC_CLASS___CPLAssetChange));
  +[CPLAssetChange serverSupportsSharedLibrarySharingState]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsSharedLibrarySharingState");
  +[CPLAssetChange serverSupportsLastViewedDate](&OBJC_CLASS___CPLAssetChange, "serverSupportsLastViewedDate");
  +[CPLAssetChange serverSupportsDeletedByUserIdentifier]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsDeletedByUserIdentifier");
  os_log_t v2 = (void *)qword_100296248;
  qword_100296248 = (uint64_t)v1;
}

void sub_100068D28(_Unwind_Exception *a1)
{
}

uint64_t sub_100068DCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100068DDC(uint64_t a1)
{
}

id sub_100068DE4(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) forKeyedSubscript:a2];
  [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forKeyedSubscript:a2];
  objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
  objc_storeStrong( (id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v11 = *(void *)(*(void *)(a1 + 96) + 8LL);
  unsigned int v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  return [*(id *)(a1 + 48) setObject:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) forKeyedSubscript:a2];
}

void sub_100068EF0(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) supportsResources])
  {
    os_log_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    uint64_t v8 = sub_100068FC8;
    id v9 = &unk_100240C98;
    uint64_t v3 = *(void *)(a1 + 40);
    id v10 = v2;
    uint64_t v11 = v3;
    id v4 = v2;
    +[CPLResource enumerateResourceTypesWithBlock:](&OBJC_CLASS___CPLResource, "enumerateResourceTypesWithBlock:", &v6);
    id v5 = -[NSMutableSet copy](v4, "copy", v6, v7, v8, v9);
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
}

void sub_100068FC8(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) supportsResourceType:a2])
  {
    id v4 = sub_1000896D4((uint64_t)&OBJC_CLASS___CPLCloudKitResourceKeys, a2);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v5 = *(void **)(a1 + 32);
    id v6 = sub_100089B64(v8, *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [v5 addObjectsFromArray:v7];
  }

uint64_t sub_10006905C(void *a1)
{
  uint64_t v2 = *(void *)(a1[5] + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  uint64_t v4 = *(void *)(a1[6] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;

  uint64_t v6 = *(void *)(a1[7] + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;

  return (*(uint64_t (**)(void))(a1[4] + 16LL))();
}

uint64_t sub_1000690C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  [*(id *)(a1 + 32) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKeyedSubscript:a2];
  [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) forKeyedSubscript:a2];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_100069164(void *a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1[4] + 8LL) + 40LL);
  id v4 = a2;
  [v3 addObjectsFromArray:v4];
  uint64_t v5 = -[CPLCKRecordPropertyPairing initWithProperties:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperties:",  v4);

  uint64_t v6 = *(void *)(a1[5] + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return [*(id *)(*(void *)(a1[6] + 8) + 40) addObject:*(void *)(*(void *)(a1[5] + 8) + 40)];
}

void sub_1000691EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

uint64_t sub_100069200(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100069230(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (!v4) {
    sub_100194970(v3, a1);
  }
  id v9 = v3;
  [v4 addCKKeys:v3];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObjectsFromArray:v9];
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
  {
    uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    if (!v5)
    {
      uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      [*(id *)(a1 + 40) setObject:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
      uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    }

    [v5 addObjectsFromArray:v9];
  }
}

void sub_10006930C(void *a1, uint64_t a2)
{
  id v4 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
  if (!v4) {
    sub_100194A94(a1);
  }
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  uint64_t v7 = *(void **)(v5 + 40);
  uint64_t v6 = (id *)(v5 + 40);
  if (v7 == v4) {
    sub_100194B94(a2, a1);
  }
  objc_storeStrong(v6, v4);
  objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), *(id *)(*(void *)(a1[9] + 8LL) + 40LL));
  *(_BYTE *)(*(void *)(a1[10] + 8LL) + 24LL) = a2;
}

void sub_10006938C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1[5] + 8LL);
  *(_BYTE *)(v3 + 24) = 0;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), *(id *)(*(void *)(a1[7] + 8LL) + 40LL));
  objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), *(id *)(*(void *)(a1[9] + 8LL) + 40LL));
}

uint64_t sub_1000693F8(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a2;
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) == 8LL) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

uint64_t sub_10006942C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8LL);
  if (*(void *)(v1 + 24) == 8LL)
  {
    uint64_t v2 = result;
    id result = (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
    uint64_t v1 = *(void *)(*(void *)(v2 + 40) + 8LL);
  }

  *(void *)(v1 + 24) = 0LL;
  return result;
}

void sub_1000698D4(id a1)
{
  uint64_t v1 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  @"dateExpunged",  @"remappedRef",  @"contributors",  0LL);
  uint64_t v2 = (void *)qword_100296258;
  qword_100296258 = (uint64_t)v1;
}

void sub_100069F7C(id a1)
{
  uint64_t v1 = -[CPLCKRecordPropertyPairing initWithProperties:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperties:",  &__NSArray0__struct);
  -[CPLCKRecordPropertyPairing addCKKeys:](v1, "addCKKeys:", &off_10025C540);
  id v13 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"inTrash",  &off_10025C558);
  v15[0] = v13;
  uint64_t v2 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"inExpunged",  &off_10025C570);
  v15[1] = v2;
  uint64_t v3 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"recordModificationDate",  &off_10025C588);
  v15[2] = v3;
  id v4 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"realIdentifier",  &off_10025C5A0);
  v15[3] = v4;
  uint64_t v5 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"resourceCopyFromScopedIdentifier",  &__NSArray0__struct);
  void v15[4] = v5;
  uint64_t v6 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"scopedIdentifier",  &off_10025C5B8);
  void v15[5] = v6;
  uint64_t v7 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing),  "initWithProperty:andKeys:",  @"sharingScopeIdentifier",  &off_10025C5D0);
  v15[6] = v7;
  uint64_t v8 = objc_alloc(&OBJC_CLASS___CPLCKRecordPropertyPairing);
  id v14 = @"linkedShareRecordName";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
  id v10 = -[CPLCKRecordPropertyPairing initWithProperty:andKeys:]( v8,  "initWithProperty:andKeys:",  @"sharingRecordIdentifier",  v9);
  v15[7] = v10;
  v15[8] = v1;
  uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v15, 9LL));
  unsigned int v12 = (void *)qword_100296268;
  qword_100296268 = v11;
}

void sub_10006A1AC(id a1)
{
  id v1 = sub_100066234();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [v2 count]);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v8), "properties", (void)v11));
        -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v9);

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }

  id v10 = (void *)qword_100296278;
  qword_100296278 = (uint64_t)v3;
}

void sub_10006A2F8(id a1)
{
  id v1 = sub_100066234();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [v2 count]);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v8), "ckKeys", (void)v11));
        -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v9);

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }

  id v10 = (void *)qword_100296288;
  qword_100296288 = (uint64_t)v3;
}

uint64_t sub_10006A650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10006A8EC(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_100296298 = [v1 BOOLForKey:@"CPLSkipRampingRequest"];
}

void sub_10006AC9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10006AD48;
  v10[3] = &unk_10023DE80;
  void v10[4] = v7;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  [v7 dispatchAsync:v10];
}

void sub_10006AD48(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  id v11 = v2;
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 domain]);
    if ([v3 isEqualToString:CKErrorDomain])
    {
      if ([v11 code] == (id)7)
      {
      }

      else
      {
        id v7 = [v11 code];

        if (v7 != (id)6) {
          goto LABEL_10;
        }
      }

      id v8 = (void *)objc_claimAutoreleasedReturnValue([v11 userInfo]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:CKErrorRetryAfterKey]);

      if (v6)
      {
        [v6 doubleValue];
        id v9 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 288LL) + 16LL);
LABEL_11:
        v9();
        goto LABEL_12;
      }
    }

    else
    {
    }

void sub_10006AF54(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.ramping");
  uint64_t v3 = (void *)qword_1002962B0;
  qword_1002962B0 = (uint64_t)v2;
}

void CPLCloudKitConfigurePhotosCapabilitiesOnContainerOptions(void *a1)
{
  id v1 = a1;
  if (+[CPLFingerprintScheme supportsEPP](&OBJC_CLASS___CPLFingerprintScheme, "supportsEPP"))
  {
    id v2 = [[CKDeviceCapability alloc] initWithLevel:2 name:@"epp" value:@"1"];
    id v4 = v2;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
    [v1 setSupportedDeviceCapabilities:v3];
  }
}

id CPLRecordChangeClassForCKRecordType(void *a1)
{
  uint64_t v1 = qword_1002962D8;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1002962D8, &stru_100240FC8);
  }
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002962B8 objectForKeyedSubscript:v2]);

  return v3;
}

id CKRecordTypeForCPLRecordChangeClass(uint64_t a1)
{
  if (qword_1002962D8 != -1) {
    dispatch_once(&qword_1002962D8, &stru_100240FC8);
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002962C0 objectForKeyedSubscript:a1]);
  if (!v2) {
    sub_100194EC4(a1);
  }
  return v2;
}

CKRecord *CPLCKRecord(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = CKRecordTypeForCPLRecordChangeClass(a1);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  v7,  v5);

  if (a3)
  {
    -[CKRecord setKnownToServer:](v8, "setKnownToServer:", 1LL);
    -[CKRecord setEtag:](v8, "setEtag:", @"-gateon");
  }

  return v8;
}

CKRecord *CPLBaseCKRecordFromCPLRecordChange(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v34 = a2;
  id v6 = a3;
  id v7 = CKRecordTypeForCPLRecordChangeClass((uint64_t)[v5 recordClass]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v34 zoneID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 scopedIdentifier]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  if (v11)
  {
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 scopedIdentifier]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);

    if (!v11) {
      sub_100194FB8((uint64_t)v5);
    }
  }

  unint64_t v13 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v11,  v9);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v5 recordChangeData]);
  if (!v14) {
    goto LABEL_25;
  }
  id v15 = +[CPLArchiver unarchiveObjectWithData:ofClass:]( &OBJC_CLASS___CPLArchiver,  "unarchiveObjectWithData:ofClass:",  v14,  objc_opt_class(&OBJC_CLASS___CKRecord));
  id v16 = (CKRecord *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v17 = v16;
  if (!v16) {
    goto LABEL_25;
  }
  os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordType](v16, "recordType"));
  unint64_t v19 = (unint64_t)v18;
  if (v18 && v8)
  {
    unsigned __int8 v20 = [v18 isEqual:v8];

    if ((v20 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](v17, "recordID"));
    unint64_t v26 = (unint64_t)v25;
    if (v25 && v13)
    {
      unsigned __int8 v27 = [v25 isEqual:v13];

      if ((v27 & 1) != 0) {
        goto LABEL_30;
      }
    }

    else
    {

      if (!(v26 | v13)) {
        goto LABEL_30;
      }
    }

    if (!_CPLSilentLogging)
    {
      uint64_t v29 = __CPLGenericOSLogDomain(v28);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        id v31 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](v17, "recordID"));
        *(_DWORD *)buf = 138412546;
        uint64_t v36 = v31;
        __int16 v37 = 2112;
        uint64_t v38 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Error deserializing base CKRecord, unarchived recordID: %@ not equal to expected recordID: %@",  buf,  0x16u);
      }
    }

    goto LABEL_24;
  }

  if (!(v19 | v8)) {
    goto LABEL_15;
  }
LABEL_9:
  if (!_CPLSilentLogging)
  {
    uint64_t v22 = __CPLGenericOSLogDomain(v21);
    int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordType](v17, "recordType"));
      *(_DWORD *)buf = 138412546;
      uint64_t v36 = v24;
      __int16 v37 = 2112;
      uint64_t v38 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Error deserializing base CKRecord, unarchived recordType: %@ not equal to expected recordType: %@",  buf,  0x16u);
    }
  }

void sub_10006B5D0(_Unwind_Exception *a1)
{
}

void sub_10006B5DC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10006B5E8LL);
}

CKRecord *CPLBaseSharedCKRecordFromCPLRecordChange(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v32 = a2;
  id v6 = a3;
  id v7 = CKRecordTypeForCPLRecordChangeClass((uint64_t)[v5 recordClass]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 otherScopedIdentifier]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);

  if (!v11) {
    sub_1001950B4((uint64_t)v5);
  }
  id v12 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v11,  v9);
  unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 sharingRecordChangeData]);
  if (!v13) {
    goto LABEL_23;
  }
  id v14 = +[CPLArchiver unarchiveObjectWithData:ofClass:]( &OBJC_CLASS___CPLArchiver,  "unarchiveObjectWithData:ofClass:",  v13,  objc_opt_class(&OBJC_CLASS___CKRecord));
  id v15 = (CKRecord *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v15;
  if (!v15) {
    goto LABEL_23;
  }
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordType](v15, "recordType"));
  unint64_t v18 = (unint64_t)v17;
  if (v17 && v8)
  {
    unsigned __int8 v19 = [v17 isEqual:v8];

    if ((v19 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](v16, "recordID"));
    unint64_t v25 = (unint64_t)v24;
    if (v24 && v12)
    {
      unsigned __int8 v26 = [v24 isEqual:v12];

      if ((v26 & 1) != 0) {
        goto LABEL_25;
      }
    }

    else
    {
    }

    if (!_CPLSilentLogging)
    {
      uint64_t v28 = __CPLGenericOSLogDomain(v27);
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordID](v16, "recordID"));
        *(_DWORD *)buf = 138412546;
        id v34 = v30;
        __int16 v35 = 2112;
        uint64_t v36 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Error deserializing base shared CKRecord, unarchived recordID: %@ not equal to expected recordID: %@",  buf,  0x16u);
      }
    }

    goto LABEL_22;
  }

  if (!(v18 | v8)) {
    goto LABEL_13;
  }
LABEL_7:
  if (!_CPLSilentLogging)
  {
    uint64_t v21 = __CPLGenericOSLogDomain(v20);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v23 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord recordType](v16, "recordType"));
      *(_DWORD *)buf = 138412546;
      id v34 = v23;
      __int16 v35 = 2112;
      uint64_t v36 = (CKRecordID *)v8;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Error deserializing base shared CKRecord, unarchived recordType: %@ not equal to expected recordType: %@",  buf,  0x16u);
    }
  }

void sub_10006B9D8(_Unwind_Exception *a1)
{
}

void sub_10006B9E4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10006B9F0LL);
}

CKReference *CPLCKReferenceToUser(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && ![v3 isEqualToString:CKCurrentUserDefaultName])
  {
    id v6 = objc_alloc(&OBJC_CLASS___CKReference);
    id v7 = -[CKRecordID initWithRecordName:](objc_alloc(&OBJC_CLASS___CKRecordID), "initWithRecordName:", v3);
    id v5 = -[CKReference initWithRecordID:action:](v6, "initWithRecordID:action:", v7, 0LL);
  }

  else
  {
    id v5 = -[CKReference initWithRecordID:action:]( objc_alloc(&OBJC_CLASS___CKReference),  "initWithRecordID:action:",  v4,  0LL);
  }

  return v5;
}

id sub_10006C678()
{
  if (qword_1002962E0 != -1) {
    dispatch_once(&qword_1002962E0, &stru_100240FE8);
  }
  return (id)qword_1002962E8;
}

void sub_10006D5C8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, id a15)
{
  if (a2 == 1)
  {
    id v16 = objc_begin_catch(a1);
    if (!_CPLSilentLogging)
    {
      id v17 = sub_10006D6C8();
      unint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = (id)objc_claimAutoreleasedReturnValue([v15 recordType]);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v15 recordID]);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 recordName]);
        LODWORD(buf) = 138543874;
        *(void *)((char *)&buf + 4) = v19;
        WORD6(buf) = 2114;
        *(void *)((char *)&buf + 14) = v21;
        a14 = 2112;
        a15 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Exception while converting to property list for %{public}@.%{public}@, ignoring: %@",  (uint8_t *)&buf,  0x20u);
      }
    }

    objc_end_catch();
    JUMPOUT(0x10006D388LL);
  }

  _Unwind_Resume(a1);
}

id sub_10006D6C8()
{
  if (qword_1002962F0 != -1) {
    dispatch_once(&qword_1002962F0, &stru_100241008);
  }
  return (id)qword_1002962F8;
}

void sub_10006DA08(_Unwind_Exception *a1)
{
}

LABEL_64:
  uint64_t v42 = -[CPLResource initWithResourceIdentity:itemScopedIdentifier:resourceType:]( objc_alloc(&OBJC_CLASS___CPLResource),  "initWithResourceIdentity:itemScopedIdentifier:resourceType:",  v68,  v12,  v105);
  v87 = (void *)objc_claimAutoreleasedReturnValue([v41 fileURL]);

  if (v87)
  {
    id v88 = (void *)objc_claimAutoreleasedReturnValue([v41 fileURL]);
    __int16 v89 = v41;
    id v90 = (void *)objc_claimAutoreleasedReturnValue(-[CPLResource identity](v42, "identity"));
    [v90 setFileURL:v88];

    uint64_t v41 = v89;
  }

  uint64_t v40 = v103;
LABEL_67:

  if (!v39) {
LABEL_68:
  }
    uint64_t v42 = 0LL;

  return v42;
}

            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"fullSizeJPEGSource" changeType:2])
            {
              goto LABEL_71;
            }

            uint64_t v30 = 0;
LABEL_67:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"fullSizeJPEGSource")))
            {
              id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[CPLMasterChange fullSizeJPEGSource](v7, "fullSizeJPEGSource")));
              [v44 setObject:v31 forKey:@"fullSizeJPEGSource"];

              if ((v30 & 1) != 0)
              {
LABEL_69:
                id v32 = 1;
                goto LABEL_74;
              }
            }

            else if ((v30 & 1) != 0)
            {
              goto LABEL_69;
            }

id CPLDynamicFingerPrintFromCloudKitFingerPrint(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([@"#" stringByAppendingString:a1]);
  }
  return a1;
}

void sub_10006EA98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10006EAB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006EAC0(uint64_t a1)
{
}

void sub_10006EAC8(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) supportsResourceType:a2])
  {
    char v9 = 1;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) cplResourceWithType:a2 scopedIdentifier:*(void *)(a1 + 48) forRecord:*(void *)(a1 + 32) isCoherent:&v9 scopeProvider:*(void *)(a1 + 56)]);
    if (v4)
    {
      id v5 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      if (!v5)
      {
        id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
        uint64_t v8 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = v6;

        id v5 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      }

      [v5 addObject:v4];
      if (!v9) {
        **(_BYTE **)(a1 + 72) = 0;
      }
    }
  }

void sub_10006F058(id a1)
{
  if (qword_1002962D8 != -1) {
    dispatch_once(&qword_1002962D8, &stru_100240FC8);
  }
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v2 = (void *)qword_1002962C0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10006F11C;
  v6[3] = &unk_100240F58;
  id v3 = v1;
  uint64_t v7 = v3;
  [v2 enumerateKeysAndObjectsUsingBlock:v6];
  id v4 = (void *)qword_1002962D0;
  qword_1002962D0 = (uint64_t)v3;
  id v5 = v3;
}

void sub_10006F11C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 ckAssetProperties]);
  if ([v6 count])
  {
    uint64_t v7 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v6 count]);
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v5];
    id v8 = objc_alloc_init(&OBJC_CLASS___CKAssetTransferOptions);
    [v8 setShouldFetchAssetContent:&__kCFBooleanTrue];
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v9 = v6;
    id v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        unint64_t v13 = 0LL;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v8,  *(void *)(*((void *)&v14 + 1) + 8LL * (void)v13),  (void)v14);
          unint64_t v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v11);
    }
  }
}

LABEL_67:
    if (v23 == (id)++v28)
    {
      id v86 = [v21 countByEnumeratingWithState:&v138 objects:v149 count:16];
      int v23 = v86;
      if (!v86)
      {
        id v54 = 0;
LABEL_89:
        __int128 v17 = v107;
        uint64_t v12 = v114;
        unint64_t v13 = (id)v110;
        goto LABEL_91;
      }

      goto LABEL_9;
    }
  }

  id v31 = sub_1000896D4((uint64_t)&OBJC_CLASS___CPLCloudKitResourceKeys, v30);
  id v32 = objc_claimAutoreleasedReturnValue(v31);
  v125 = v24;
  if (v32)
  {
    id v33 = (void *)v32;
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v29 identity]);
    [v34 imageDimensions];
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v39 = [v34 fileSize];
    v123 = (void *)objc_claimAutoreleasedReturnValue([v34 fileUTI]);
    v124 = (void *)objc_claimAutoreleasedReturnValue([v34 fingerPrint]);
    uint64_t v40 = -[CPLRecordChange requiresStableHashForResourceType:]( self,  "requiresStableHashForResourceType:",  v30);
    v119 = (unint64_t)v39;
    if ((v126 & 1) != 0)
    {
      uint64_t v41 = objc_claimAutoreleasedReturnValue([v34 stableHash]);
      v127 = (void *)v41;
      if (v41) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = v40;
      }
      if (v42 != 1)
      {
LABEL_30:
        id v46 = objc_claimAutoreleasedReturnValue([v34 fileURL]);
        __int16 v47 = [v34 isAvailable];
        if (v46) {
          id v48 = v47;
        }
        else {
          id v48 = 0;
        }
        if ((v118 | v48) == 1)
        {
          __int16 v49 = v47;
          id v50 = 0LL;
          if (!v113
            || v46
            || (__int16 v51 = [v29 sourceResourceType],
                __int128 v52 = sub_1000896D4((uint64_t)&OBJC_CLASS___CPLCloudKitResourceKeys, (uint64_t)v51),
                (id v50 = objc_claimAutoreleasedReturnValue(v52)) != 0))
          {
            if (v49)
            {
              v116 = (id)v50;
              id v53 = (v46 | v50) != 0;
            }

            else
            {
              id v56 = (void *)v50;

              v116 = 0LL;
              id v46 = 0LL;
              id v53 = !-[CPLRecordChange shouldProtectResourceTypeFromClearing:]( v122,  "shouldProtectResourceTypeFromClearing:",  v30);
            }

            id v55 = v33;
            if (v112) {
              v150[v30] = 1;
            }
            id v57 = sub_1000A7488( (id *)objc_alloc(&OBJC_CLASS___CPLCloudKitResourceRecordProperties),  v33,  -[CPLRecordChange recordClass](v122, "recordClass"),  v125);
            __int128 v58 = v57;
            if (v46) {
              __int128 v59 = 0;
            }
            else {
              __int128 v59 = v53;
            }
            if (v123) {
              __int128 v60 = 1;
            }
            else {
              __int128 v60 = v59;
            }
            sub_1000A7530((uint64_t)v57, v114, v124, v127, v40, v119, v123, v60, v36, v38);
            v115 = v58;
            if (v53)
            {
              self = v122;
              if (!v46)
              {
                uint64_t v21 = v117;
                if (v116)
                {
                  if (v124)
                  {
                    if (v110)
                    {
                      id v77 = sub_100031F10(v110);
                      sub_100031F1C(v110, v77 + 1);
                      __int16 v78 = [v34 fileSize];
                      id v79 = sub_100031F28(v110);
                      id v61 = sub_100031F34(v110, (uint64_t)v78 + v79);
                    }

                    if (!v108)
                    {
                      if (!_CPLSilentLogging)
                      {
                        v94 = __CPLGenericOSLogDomain(v61);
                        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
                        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
                        {
                          id v96 = sub_100089C34((uint64_t)v116);
                          v97 = (void *)objc_claimAutoreleasedReturnValue(v96);
                          v98 = sub_100089C34((uint64_t)v55);
                          v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
                          *(_DWORD *)buf = 138412802;
                          v144 = (CPLRecordChange *)v107;
                          v145 = 2112;
                          v146 = v97;
                          v147 = 2112;
                          v148 = v99;
                          _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "No source scope for %@ to find asset reference %@ for %@",  buf,  0x20u);
                        }
                      }

                      v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSAssertionHandler currentHandler]( &OBJC_CLASS___NSAssertionHandler,  "currentHandler"));
                      v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Imple mentations/CloudKit/CKRecord+CPL_base.m"));
                      v102 = sub_100089C34((uint64_t)v116);
                      v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
                      v104 = sub_100089C34((uint64_t)v55);
                      v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
                      [v100 handleFailureInMethod:a2, v122, v101, 1031, @"No source scope for %@ to find asset reference %@ for %@", v107, v103, v105 object file lineNumber description];

                      abort();
                    }

                    __int16 v80 = sub_100089C34((uint64_t)v55);
                    id v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
                    v131[0] = _NSConcreteStackBlock;
                    v131[1] = 3221225472LL;
                    v131[2] = sub_10006FFB8;
                    v131[3] = &unk_100240F80;
                    v82 = v107;
                    v132 = v82;
                    v116 = v116;
                    v133 = v116;
                    v134 = v124;
                    v135 = v55;
                    uint64_t v83 = v108;
                    v136 = v83;
                    v137 = v111;
                    [v114 requestRecordWithID:v82 cloudKitScope:v83 forKey:v81 completionHandler:v131];

                    id v54 = 0;
                    self = v122;
                  }

                  else
                  {
                    if (v109) {
                      *v109 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Trying to copy a resource with no fingerprint"));
                    }
                    id v54 = 1;
                  }
                }

                else
                {
                  v84 = sub_100089C34((uint64_t)v55);
                  v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
                  [v114 setObject:0 forKey:v85];

                  id v54 = 0;
                }

                uint64_t v27 = &_s10Foundation17URLResourceValuesV8fileSizeSiSgvg_ptr;
                goto LABEL_62;
              }

              if (v110)
              {
                id v62 = [v34 fileSize];
                id v63 = sub_100031EF8(v110);
                sub_100031F04(v110, (uint64_t)v62 + v63);
              }

              v64 = -[CKAsset initWithFileURL:](objc_alloc(&OBJC_CLASS___CKAsset), "initWithFileURL:", v46);
              -[CKAsset setItemTypeHint:](v64, "setItemTypeHint:", @"fxd");
              uint64_t v65 = [v125 configureAssetTransferOptionsForCKAsset:v64 scopeProvider:v111];
              if (!_CPLSilentLogging)
              {
                id v66 = __CPLGenericOSLogDomain(v65);
                v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
                if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
                {
                  v68 = (CPLRecordChange *)objc_claimAutoreleasedReturnValue(-[CPLRecordChange scopedIdentifier](v122, "scopedIdentifier"));
                  v69 = (void *)objc_claimAutoreleasedReturnValue(-[CKAsset assetTransferOptions](v64, "assetTransferOptions"));
                  *(_DWORD *)buf = 138412546;
                  v144 = v68;
                  v145 = 2112;
                  v146 = v69;
                  _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "Setting asset transfer options for %@ to %@",  buf,  0x16u);

                  id v55 = v33;
                  self = v122;
                }
              }

              -[CKAsset setStorageGroupingPolicy:](v64, "setStorageGroupingPolicy:", 1LL);
              id v70 = sub_100089C34((uint64_t)v55);
              id v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
              [v114 setCKAsset:v64 forKey:v71];

              id v54 = 0;
            }

            else
            {
              id v54 = 0;
              self = v122;
            }

            uint64_t v27 = &_s10Foundation17URLResourceValuesV8fileSizeSiSgvg_ptr;
LABEL_61:
            uint64_t v21 = v117;
LABEL_62:

LABEL_63:
            if (v54 == 3)
            {
              id v24 = v125;
              unint64_t v25 = &OBJC_METACLASS___CPLCloudKitComputeStateEncryptionHelper;
            }

            else
            {
              id v24 = v125;
              unint64_t v25 = &OBJC_METACLASS___CPLCloudKitComputeStateEncryptionHelper;
              if (v54) {
                goto LABEL_89;
              }
            }

            goto LABEL_67;
          }

          self = v122;
          if (!_CPLSilentLogging)
          {
            uint64_t v72 = __CPLGenericOSLogDomain(0LL);
            v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              v74 = (CPLRecordChange *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v51));
              v75 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v30));
              *(_DWORD *)buf = 138412546;
              v144 = v74;
              v145 = 2112;
              v146 = v75;
              _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_ERROR,  "Trying to copy an unsupported resource type %@ to %@",  buf,  0x16u);

              self = v122;
            }
          }

          if (v109)
          {
            v76 = objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v51));
            v115 = (id *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v30));
            v116 = (id)v76;
            id v46 = 0LL;
            *v109 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Trying to copy an unsupported resource type %@ to %@",  v76,  v115));
            uint64_t v27 = &_s10Foundation17URLResourceValuesV8fileSizeSiSgvg_ptr;
            id v54 = 1;
            id v55 = v33;
            goto LABEL_61;
          }

          id v46 = 0LL;
          id v54 = 1;
        }

        else
        {
          id v54 = 3;
          self = v122;
        }

        uint64_t v27 = &_s10Foundation17URLResourceValuesV8fileSizeSiSgvg_ptr;
        id v55 = v33;
        uint64_t v21 = v117;
        goto LABEL_63;
      }

      if (!_CPLSilentLogging)
      {
        uint64_t v43 = __CPLGenericOSLogDomain(v41);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v30));
          *(_DWORD *)buf = 138412546;
          v144 = v122;
          v145 = 2112;
          v146 = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "Trying to upload resource type %@ on %@ without a stable hash",  buf,  0x16u);
        }
      }

      if ((v121 & 1) != 0)
      {
        if (v109)
        {
          v92 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( &OBJC_CLASS___CPLResource,  "shortDescriptionForResourceType:",  v30));
          *v109 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Trying to upload resource %@ without a stable hash",  v92));
        }

        __int128 v17 = v107;
        uint64_t v12 = v114;
        unint64_t v13 = (id)v110;
        __int16 v91 = v33;
        uint64_t v21 = v117;
        goto LABEL_104;
      }
    }

    v127 = 0LL;
    goto LABEL_30;
  }

  __int128 v17 = v107;
  uint64_t v12 = v114;
  unint64_t v13 = (id)v110;
  uint64_t v21 = v117;
  if (!_CPLSilentLogging)
  {
    id v88 = __CPLGenericOSLogDomain(0LL);
    __int16 v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      id v90 = (CPLRecordChange *)objc_claimAutoreleasedReturnValue([v27[485] shortDescriptionForResourceType:v30]);
      *(_DWORD *)buf = 138412290;
      v144 = v90;
      _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_ERROR,  "Trying to upload an unsupported resource type %@",  buf,  0xCu);
    }
  }

  if (v109)
  {
    __int16 v91 = (void *)objc_claimAutoreleasedReturnValue([v27[485] shortDescriptionForResourceType:v30]);
    *v109 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Trying to upload an unsupported resource type %@",  v91));
LABEL_104:
  }

  id v19 = 0;
  id v24 = v125;
LABEL_106:

  __int128 v14 = v111;
  __int128 v15 = v113;
  unint64_t v18 = v108;
LABEL_107:

  return v19;
}

                if (v48 == 80) {
                  break;
                }
                goto LABEL_73;
              }

              __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v51 domain]);
              id v61 = [v60 isEqualToString:@"sharedLibrary"];

              if (v61)
              {
                id v62 = (char *)[v51 code];
                if ((unint64_t)(v62 - 14) <= 3)
                {
                  id v48 = qword_1002123B0[(void)(v62 - 14)];
                  goto LABEL_72;
                }
              }

uint64_t CPLIsDynamicResource(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 identity]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 fingerPrint]);
  uint64_t v3 = CPLIsDynamicResourceFingerprint();

  return v3;
}

BOOL sub_10006FFB8(uint64_t a1, void *a2, void *a3, NSString **a4)
{
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([a2 cachedRecordWithID:*(void *)(a1 + 32)]);
  if (v8)
  {
    uint64_t v9 = sub_100089BF8(*(void *)(a1 + 40));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v10]);

    if (v11)
    {
      if ([*(id *)(a1 + 48) isEqualToString:v11])
      {
        uint64_t v12 = sub_100089C34(*(void *)(a1 + 40));
        unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v13]);

        BOOL v15 = v14 != 0LL;
        if (v14)
        {
          __int16 v35 = objc_alloc(&OBJC_CLASS___CKAssetReference);
          uint64_t v16 = *(void *)(a1 + 32);
          id v17 = [*(id *)(a1 + 64) databaseScope];
          uint64_t v18 = sub_100089C34(*(void *)(a1 + 40));
          id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v14 signature]);
          uint64_t v21 = -[CKAssetReference initWithExistingRecordID:databaseScope:fieldName:fileSignature:]( v35,  "initWithExistingRecordID:databaseScope:fieldName:fileSignature:",  v16,  v17,  v19,  v20);

          uint64_t v22 = -[CKAsset initWithAssetReference:](objc_alloc(&OBJC_CLASS___CKAsset), "initWithAssetReference:", v21);
          +[CPLFingerprintScheme configureAssetTransferOptionsForCKAsset:fromReference:scopeProvider:]( &OBJC_CLASS___CPLFingerprintScheme,  "configureAssetTransferOptionsForCKAsset:fromReference:scopeProvider:",  v22,  v21,  *(void *)(a1 + 72));
          uint64_t v23 = sub_100089C34(*(void *)(a1 + 56));
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          [v7 setCKAsset:v22 forKey:v24];
        }

        else
        {
          id v32 = objc_alloc(&OBJC_CLASS___NSString);
          uint64_t v33 = sub_100089C34(*(void *)(a1 + 40));
          uint64_t v21 = (CKAssetReference *)objc_claimAutoreleasedReturnValue(v33);
          *a4 = -[NSString initWithFormat:](v32, "initWithFormat:", @"%@ not found on source record", v21);
        }
      }

      else
      {
        uint64_t v28 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v29 = sub_100089BF8(*(void *)(a1 + 40));
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(v29);
        uint64_t v30 = sub_100089BF8(*(void *)(a1 + 56));
        id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        *a4 =  -[NSString initWithFormat:]( v28,  "initWithFormat:",  @"%@ on source record does not match %@ on destination record",  v14,  v31);

        BOOL v15 = 0LL;
      }
    }

    else
    {
      unint64_t v25 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v26 = sub_100089BF8(*(void *)(a1 + 40));
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v27 = -[NSString initWithFormat:](v25, "initWithFormat:", @"%@ not found on source record", v14);
      BOOL v15 = 0LL;
      *a4 = v27;
    }
  }

  else
  {
    BOOL v15 = 0LL;
    *a4 = (NSString *)@"source record not found on server";
  }

  return v15;
}

void sub_100070258(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(*(void *)(a1 + 48) + a2)
    && ([*(id *)(a1 + 32) shouldProtectResourceTypeFromClearing:a2] & 1) == 0
    && (+[CPLResource shouldIgnoreResourceTypeOnUpload:]( CPLResource,  "shouldIgnoreResourceTypeOnUpload:",  a2) & 1) == 0 && [*(id *)(a1 + 32) supportsResourceType:a2])
  {
    id v4 = sub_1000896D4((uint64_t)&OBJC_CLASS___CPLCloudKitResourceKeys, a2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      id v6 = (void *)objc_opt_class(*(void *)(a1 + 32));
      id v7 = sub_100089B64(v5, v6);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      id v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v14;
        do
        {
          for (i = 0LL; i != v10; i = (char *)i + 1)
          {
            if (*(void *)v14 != v11) {
              objc_enumerationMutation(v8);
            }
            objc_msgSend( *(id *)(a1 + 40),  "setObject:forKey:",  0,  *(void *)(*((void *)&v13 + 1) + 8 * (void)i),  (void)v13);
          }

          id v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }

        while (v10);
      }
    }
  }

id CPLCloudKitFingerPrintFromDynamicFingerPrint(void *a1)
{
  id v1 = a1;
  else {
    id v2 = v1;
  }
  uint64_t v3 = v2;

  return v3;
}

void sub_1000712A4(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLPersonChange),  @"CPLPerson");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLPerson",  objc_opt_class(&OBJC_CLASS___CPLPersonChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLMasterChange),  @"CPLMaster");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLMaster",  objc_opt_class(&OBJC_CLASS___CPLMasterChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLAssetChange),  @"CPLAsset");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLAsset",  objc_opt_class(&OBJC_CLASS___CPLAssetChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLAlbumChange),  @"CPLAlbum");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLAlbum",  objc_opt_class(&OBJC_CLASS___CPLAlbumChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLMemoryChange),  @"CPLMemory");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLMemory",  objc_opt_class(&OBJC_CLASS___CPLMemoryChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLSocialGroupChange),  @"CPLSocialGroup");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLSocialGroup",  objc_opt_class(&OBJC_CLASS___CPLSocialGroupChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLSuggestionChange),  @"CPLSuggestion");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLSuggestion",  objc_opt_class(&OBJC_CLASS___CPLSuggestionChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLFaceCropChange),  @"CPLFaceCrop");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLFaceCrop",  objc_opt_class(&OBJC_CLASS___CPLFaceCropChange));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  objc_opt_class(&OBJC_CLASS___CPLContainerRelationChange),  @"CPLContainerRelation");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  @"CPLContainerRelation",  objc_opt_class(&OBJC_CLASS___CPLContainerRelationChange));
  uint64_t v3 = (void *)qword_1002962B8;
  qword_1002962B8 = (uint64_t)v1;
  id v5 = v1;

  id v4 = (void *)qword_1002962C0;
  qword_1002962C0 = (uint64_t)v2;
}

void sub_100071530(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.translate");
  uint64_t v3 = (void *)qword_1002962E8;
  qword_1002962E8 = (uint64_t)v2;
}

void sub_10007155C(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.encrypt");
  uint64_t v3 = (void *)qword_1002962F8;
  qword_1002962F8 = (uint64_t)v2;
}

void sub_100071588(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_100296308 = [v1 BOOLForKey:@"CPLDontAddBoundaryKeyToCKAssetReferences"] ^ 1;
}

uint64_t sub_1000715D0()
{
  return objc_opt_class(v0);
}

void sub_100071734(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  if (a3)
  {
    (*(void (**)(void))(v6[34] + 16LL))();
  }

  else
  {
    id v21 = 0LL;
    unsigned __int8 v7 = [v6 shouldRunOperationsWithError:&v21];
    id v8 = v21;
    id v9 = *(void **)(a1 + 32);
    if ((v7 & 1) != 0)
    {
      if (!v9[35])
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 controller]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) scopeIdentifier]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneIDFromScopeIdentifier:v11]);

        __int128 v13 = -[CPLCloudKitScope initWithZoneID:options:]( objc_alloc(&OBJC_CLASS___CPLCloudKitScope),  "initWithZoneID:options:",  v12,  0LL);
        uint64_t v14 = *(void *)(a1 + 32);
        __int128 v15 = *(void **)(v14 + 280);
        *(void *)(v14 + 280) = v13;

        id v9 = *(void **)(a1 + 32);
      }

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v9 controller]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue( [v16 zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 280) engineScope:*(void *)(*(void *)(a1 + 32) + 288)]);

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( [v17 recordsToUpdateFromScopeChange:*(void *)(*(void *)(a1 + 32) + 296) currentUserID:v5]);
      id v19 = [v18 count];
      uint64_t v20 = *(void **)(a1 + 32);
      if (v19) {
        [v20 updateRecords:v18 cloudKitScope:v20[35] completionHandler:v20[34]];
      }
      else {
        (*(void (**)(void))(v20[34] + 16LL))();
      }
    }

    else
    {
      (*(void (**)(void))(v9[34] + 16LL))();
    }
  }
}

void sub_1000719E0(id a1)
{
  id v1 = -[CPLDuetTicketProvider initWithClientBundlerIdentifier:]( objc_alloc(&OBJC_CLASS___CPLDuetTicketProvider),  "initWithClientBundlerIdentifier:",  @"com.apple.TVPhotos");
  os_log_t v2 = (void *)qword_100296310;
  qword_100296310 = (uint64_t)v1;
}

id sub_100071BB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) overrideHasSignificantWork:1];
}

id sub_100071C78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) overrideHasSignificantWork:0];
}

void sub_100071D64(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isBlocked];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v4 = (unint64_t)[v3 _blockedReason];
    v19[0] = CPLStatusHasCellularBudgetKey;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 & 1) == 0));
    v20[0] = v5;
    v19[1] = CPLStatusHasBatteryBudgetKey;
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 & 2) == 0));
    v20[1] = v16;
    v19[2] = CPLStatusHasLowBatteryLevelKey;
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 >> 3) & 1));
    void v20[2] = v15;
    v19[3] = CPLStatusHasConstrainedNetworkKey;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 >> 4) & 1));
    v20[3] = v14;
    v19[4] = CPLStatusHasHeavyResourceUsageKey;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 & 0xC0) != 0));
    void v20[4] = v6;
    void v19[5] = CPLStatusHasPoorNetworkQualityKey;
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 >> 8) & 1));
    v20[5] = v7;
    v19[6] = CPLStatusHasModerateThermalPressureKey;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 >> 11) & 1));
    void v20[6] = v8;
    v19[7] = CPLStatusHasThermalPressureKey;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 >> 12) & 1));
    v20[7] = v9;
    v19[8] = CPLStatusHasPoorSystemConditionsKey;
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (v4 & 0xA604) != 0));
    v20[8] = v10;
    v19[9] = CPLStatusBlockedReasonKey;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v4));
    v19[10] = CPLStatusUnBlockedReasonKey;
    v20[9] = v11;
    v20[10] = &__kCFBooleanFalse;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  11LL));
  }

  else
  {
    id v13 = [v3 _unBlockedReason];
    v17[0] = CPLStatusHasCellularBudgetKey;
    v17[1] = CPLStatusHasBatteryBudgetKey;
    v18[0] = &__kCFBooleanTrue;
    v18[1] = &__kCFBooleanTrue;
    v17[2] = CPLStatusHasLowBatteryLevelKey;
    v17[3] = CPLStatusHasConstrainedNetworkKey;
    v18[2] = &__kCFBooleanFalse;
    v18[3] = &__kCFBooleanFalse;
    void v17[4] = CPLStatusHasHeavyResourceUsageKey;
    void v17[5] = CPLStatusHasPoorNetworkQualityKey;
    v18[4] = &__kCFBooleanFalse;
    void v18[5] = &__kCFBooleanFalse;
    v17[6] = CPLStatusHasModerateThermalPressureKey;
    v17[7] = CPLStatusHasThermalPressureKey;
    v18[6] = &__kCFBooleanFalse;
    v18[7] = &__kCFBooleanFalse;
    v17[8] = CPLStatusHasPoorSystemConditionsKey;
    v17[9] = CPLStatusBlockedReasonKey;
    v18[8] = &__kCFBooleanFalse;
    v18[9] = &__kCFBooleanFalse;
    v17[10] = CPLStatusUnBlockedReasonKey;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v13));
    v18[10] = v5;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  11LL));
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

unint64_t -[CPLDuetTicketProvider _blockedReason](CPLDuetTicketProvider *self, SEL a2)
{
  duetOverrideContext = self->_duetOverrideContext;
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[CPLDuetTicketProvider _isBlockedKeyPath](self, "_isBlockedKeyPath"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[_CDClientContext objectForKeyedSubscript:](duetOverrideContext, "objectForKeyedSubscript:", v4));
  unint64_t v6 = (unint64_t)[v5 integerValue];

  unsigned __int8 v7 = self->_duetOverrideContext;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[CPLDuetTicketProvider _budgetOverrideKeyPath](self, "_budgetOverrideKeyPath"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[_CDClientContext objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", v8));
  unsigned __int16 v10 = (unsigned __int16)[v9 integerValue];

  unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v10 & 1) == 0) {
    unint64_t v11 = v6;
  }
  if ((v10 & 2) != 0) {
    v11 &= ~2uLL;
  }
  if ((v10 & 4) != 0) {
    v11 &= ~4uLL;
  }
  if ((v10 & 0x10) != 0) {
    v11 &= ~0x10uLL;
  }
  if ((v10 & 0x20) != 0) {
    v11 &= ~0x20uLL;
  }
  if ((v10 & 0x800) != 0) {
    v11 &= ~0x800uLL;
  }
  if ((v10 & 0x4000) != 0) {
    return v11 & 0xFFFFFFFFFFFF183FLL;
  }
  else {
    return v11;
  }
}

id -[CPLDuetTicketProvider _blockedReasonStatus](CPLDuetTicketProvider *self, SEL a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  unsigned __int16 v4 = (unsigned __int16)-[CPLDuetTicketProvider _blockedReason](self, "_blockedReason");
  unsigned __int16 v5 = v4;
  if ((v4 & 1) != 0)
  {
    -[NSMutableArray addObject:](v3, "addObject:", @"data");
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  -[NSMutableArray addObject:](v3, "addObject:", @"energy");
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

LABEL_26:
  -[NSMutableArray addObject:](v3, "addObject:", @"networkQuality");
  if ((v5 & 0x800) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

      id v13 = 0LL;
LABEL_27:

      goto LABEL_28;
    }

    if (v11)
    {
      if (_CPLSilentLogging) {
        goto LABEL_19;
      }
      id v21 = sub_1000733A0();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      uint64_t v23 = (void *)objc_opt_class(v13);
      *(_DWORD *)buf = 138412546;
      id v34 = v23;
      __int16 v35 = 2112;
      uint64_t v36 = v9;
      id v24 = v23;
      unint64_t v25 = "Fetched <%@ %@> from server, it is expunged but not expired on server - keeping";
      uint64_t v26 = v22;
      uint64_t v27 = OS_LOG_TYPE_DEFAULT;
    }

    else
    {
      if (_CPLSilentLogging) {
        goto LABEL_19;
      }
      uint64_t v28 = sub_1000733A0();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
LABEL_18:

LABEL_19:
        goto LABEL_25;
      }

      uint64_t v29 = (void *)objc_opt_class(v13);
      *(_DWORD *)buf = 138412546;
      id v34 = v29;
      __int16 v35 = 2112;
      uint64_t v36 = v9;
      id v24 = v29;
      unint64_t v25 = "Fetched <%@ %@> from server";
      uint64_t v26 = v22;
      uint64_t v27 = OS_LOG_TYPE_DEBUG;
    }

    _os_log_impl((void *)&_mh_execute_header, v26, v27, v25, buf, 0x16u);

    goto LABEL_18;
  }

  id v13 = 0LL;
LABEL_28:

  return v13;
}
}

        unint64_t v11 = (v18 - 1) & v18;
        __int128 v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      id result = Hasher._finalize()();
      id v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  id result = swift_release(v3);
  void *v2 = v6;
  return result;
}

        id v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      id result = Hasher._finalize()();
      id v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      __int128 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      void *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  id result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    unint64_t v11 = (v18 - 1) & v18;
    __int128 v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    id result = Hasher._finalize()();
    id v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  id v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    id result = swift_release(v3);
    unsigned int v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    unsigned __int8 v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    unsigned __int8 v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    unsigned __int16 v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    id result = Hasher._finalize()();
    id v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    __int128 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    void *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    id result = swift_release_n(v3, 2LL);
    unsigned int v2 = v31;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    id v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

      if (!_CPLSilentLogging)
      {
        uint64_t v26 = sub_10011CDF4();
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v19 localizedDescription]);
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Won't do a forced sync for %{public}@ because %@",  buf,  0x16u);

          unsigned __int16 v10 = v53;
        }
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v19, v15);

LABEL_31:
      uint64_t v14 = (char *)v14 + 1;
    }

    while (v12 != v14);
    id v31 = [obj countByEnumeratingWithState:&v61 objects:v65 count:16];
    uint64_t v12 = v31;
  }

  while (v31);
LABEL_42:

  id v32 = -[NSMutableArray count](v51, "count");
  uint64_t v33 = *(id **)(v50 + 32);
  if (v32)
  {
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33[12] syncManager]);
    __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v9 filterForIncludedScopeIdentifiers:v51]);
    if ((v52 & 1) != 0 || *(_BYTE *)(v50 + 64) || [v9 doScopesNeedMetadataSync:v35])
    {
      uint64_t v36 = [[CPLEngineForceSyncTask alloc] initWithScopeIdentifiers:*(void *)(v50 + 40) engineLibrary:*(void *)(*(void *)(v50 + 32) + 96) filter:v35 delegate:v34];
      __int16 v37 = v36;
      if (v52) {
        [v36 setBypassForceSyncLimitations:1];
      }
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 UUIDString]);
      [v37 setTaskIdentifier:v39];

      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472LL;
      v58[2] = sub_10012E198;
      v58[3] = &unk_100246608;
      v58[4] = *(void *)(v50 + 32);
      __int128 v59 = v51;
      __int128 v60 = v53;
      [v37 setTaskDidFinishWithErrorBlock:v58];
      uint64_t v40 = *(void **)(*(void *)(v50 + 32) + 104LL);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472LL;
      v55[2] = sub_10012E3D0;
      v55[3] = &unk_10023DFE0;
      uint64_t v41 = *(id *)(v50 + 56);
      id v56 = v37;
      id v57 = v41;
      uint64_t v42 = v55;
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10013AA68;
      v67 = &unk_10023DBC8;
      v68 = v42;
      uint64_t v43 = v40;
      uint64_t v44 = v37;
      uint64_t v45 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, buf);
      dispatch_async(v43, v45);

      unsigned __int16 v10 = v53;
      [v44 launchTask];

      uint64_t v3 = v49;
    }

    else
    {
      uint64_t v3 = v49;
      if (!_CPLSilentLogging)
      {
        id v46 = sub_10011CDF4();
        __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          id v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v51, "componentsJoinedByString:", @", "));
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Nothing is planned for %@ so we won't dispatch a forced sync",  buf,  0xCu);

          unsigned __int16 v10 = v53;
        }
      }

      [*(id *)(v50 + 32) _dispatchForceSyncForScopeIdentifiers:*(void *)(v50 + 40) errors:v10 completionHandler:*(void *)(v50 + 56)];
    }
  }

  else
  {
    [v33 _dispatchForceSyncForScopeIdentifiers:*(void *)(v50 + 40) errors:v10 completionHandler:*(void *)(v50 + 56)];
    uint64_t v3 = v49;
  }

LABEL_52:
}

        id v9 = v36;
        if (*((_BYTE *)v52 + 24)) {
          id v32 = _CPLSilentLogging == 0;
        }
        else {
          id v32 = 0;
        }
        if (v32)
        {
          uint64_t v33 = sub_100140908();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            id v57 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Upgrading to support inactive scope sync will force updating scope info for %lu inactive scopes",  buf,  0xCu);
          }
        }
      }
    }

    _Block_object_dispose(&v47, 8);
    unsigned __int16 v4 = *((_BYTE *)v52 + 24) != 0;
  }

  _Block_object_dispose(&v51, 8);
  return v4;
}
}

LABEL_27:
  -[NSMutableArray addObject:](v3, "addObject:", @"thermalModerate");
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }

  return a4;
}

    uint64_t v12 = (v17 - 1) & v17;
    __int128 v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  id v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    id v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    __int128 v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    __int128 v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    id v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    -[CPLPrequeliteStore _closeUpgradeJournal](self, "_closeUpgradeJournal");
    postUpgradeMigrations = self->_postUpgradeMigrations;
    self->_postUpgradeMigrations = 0LL;

    if (a3 && !v29)
    {
      unsigned __int16 v5 = v5;
      uint64_t v29 = 0;
      *a3 = v5;
    }
  }

  else
  {
    unsigned __int16 v5 = 0LL;
    uint64_t v29 = 1;
  }

  return v29;
}

      if ((*((void *)v11 + 6) | 0x400LL) == 0x400)
      {
LABEL_38:
        *((_DWORD *)v11 + 3) = 2 * v55;
        goto LABEL_39;
      }

      id v54 = a2;
      if (v13)
      {
        uint64_t v33 = v13[6];
        if (v33 == 1024)
        {
          sub_10019C754(v11, self, v54);
          goto LABEL_42;
        }
      }

      else
      {
        uint64_t v33 = 0LL;
      }

      id v34 = sub_10017CDD4((uint64_t)v11, self);
      __int16 v35 = objc_claimAutoreleasedReturnValue(v34);
      if (v35)
      {
        uint64_t v36 = (void *)v35;
        __int16 v37 = sub_10017CDD4((uint64_t)v13, self);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        uint64_t v39 = [v38 copy];

        if (v39)
        {
          [v39 applyChange:v36];
          sub_10017D034((uint64_t)v11, v39);
          sub_10017D0F0((uint64_t)v11, 0LL);
          uint64_t v40 = *((void *)v11 + 6);
          if (v40) {
            uint64_t v41 = v33 == 0;
          }
          else {
            uint64_t v41 = 1;
          }
          uint64_t v42 = v40 | v33;
          if (v41) {
            uint64_t v42 = 0LL;
          }
          *((void *)v11 + 6) = v42;

          goto LABEL_38;
        }

uint64_t sub_100072840(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isBlocked])
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_1000729B4();
      uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int16 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _isBlockedKeyPath]);
        unsigned __int16 v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _blockedReasonStatus]);
        int v8 = 138543618;
        id v9 = v4;
        __int16 v10 = 2114;
        unint64_t v11 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "DAS (%{public}@) is reporting that CPL is blocked by %{public}@",  (uint8_t *)&v8,  0x16u);

LABEL_8:
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v6 = sub_1000729B4();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int16 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _isBlockedKeyPath]);
      int v8 = 138543362;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "DAS (%{public}@) is reporting that CPL is not blocked any more",  (uint8_t *)&v8,  0xCu);
      goto LABEL_8;
    }

id sub_1000729B4()
{
  if (qword_100296320 != -1) {
    dispatch_once(&qword_100296320, &stru_1002410C8);
  }
  return (id)qword_100296328;
}

void sub_1000729F4(id a1, CPLDuetTicketProviderBudgetDelegate *a2, BOOL *a3)
{
}

void sub_100072D5C(id a1, CPLDuetTicketProviderBudgetDelegate *a2, BOOL *a3)
{
}

void sub_100072DC4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100072DF8(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.duet");
  uint64_t v3 = (void *)qword_100296328;
  qword_100296328 = (uint64_t)v2;
}

void sub_10007337C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

id sub_1000733A0()
{
  if (qword_100296330 != -1) {
    dispatch_once(&qword_100296330, &stru_100241480);
  }
  return (id)qword_100296338;
}

void sub_1000733E0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10007349C;
  v10[3] = &unk_10023EFF0;
  int v8 = (void *)a1[4];
  unsigned __int8 v7 = (void *)a1[5];
  uint64_t v12 = a1[7];
  void v10[4] = v8;
  id v11 = v7;
  [v8 dispatchAsync:v10];
  if (v5)
  {
    uint64_t v9 = a1[6];
    if (v9) {
      (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v6, v5);
    }
  }
}

id sub_10007349C(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "updateProgress:",  (double)*(unint64_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
         / (double)(unint64_t)[*(id *)(a1 + 40) count]);
}

void sub_1000734F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000735F0;
  v10[3] = &unk_100241168;
  unsigned __int8 v7 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v7;
  char v18 = *(_BYTE *)(a1 + 72);
  id v14 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v8 = v5;
  id v9 = v6;
  [v11 dispatchAsync:v10];
}

void sub_1000735F0(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (!_CPLSilentLogging)
  {
    id v3 = sub_1000733A0();
    unsigned __int16 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Finished fetching %@ with error %@", buf, 0x16u);
    }
  }

  if (!v2) {
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 88)
    || !+[CPLCloudKitErrors isPartialFailureError:](&OBJC_CLASS___CPLCloudKitErrors, "isPartialFailureError:", v2))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v2,  v9,  @"Failed to fetch some records"));
  }

  else
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000LL;
    id v21 = sub_100073940;
    uint64_t v22 = sub_100073950;
    id v23 = 0LL;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors errorsPerRecordIDForPartialFailureError:]( &OBJC_CLASS___CPLCloudKitErrors,  "errorsPerRecordIDForPartialFailureError:",  v2));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100073958;
    v19[3] = &unk_100241118;
    v19[4] = *(void *)(a1 + 32);
    void v19[5] = buf;
    [v6 enumerateKeysAndObjectsUsingBlock:v19];
    unsigned __int8 v7 = *(void **)(*(void *)&buf[8] + 40LL);
    if (v7)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
      unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v7,  v8,  @"Failed to fetch some records"));

      os_log_t v2 = (void *)v8;
    }

    _Block_object_dispose(buf, 8);
  }

  if (v7)
  {
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
LABEL_14:
    id v11 = *(void **)(a1 + 56);
    if (v11)
    {
      id v12 = *(void **)(a1 + 64);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_100073AD0;
      v16[3] = &unk_100241140;
      id v17 = v11;
      id v18 = *(id *)(a1 + 72);
      [v12 enumerateKeysAndObjectsUsingBlock:v16];
    }

    id v13 = *(void **)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    if (v13)
    {
      id v15 = [v13 copy];
      (*(void (**)(uint64_t, id, void, void))(v14 + 16))(v14, v15, 0LL, 0LL);
    }

    else
    {
      (*(void (**)(void, void, void, void))(v14 + 16))( *(void *)(a1 + 80),  *(void *)(a1 + 64),  0LL,  0LL);
    }
  }

void sub_100073920( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100073940(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100073950(uint64_t a1)
{
}

void sub_100073958(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!+[CPLCloudKitErrors isRecordNotFoundError:](&OBJC_CLASS___CPLCloudKitErrors, "isRecordNotFoundError:", v8))
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_1000733A0();
      __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 recordName]);
        id v12 = *(void **)(a1 + 32);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 scopeIdentifierFromZoneID:v13]);
        int v15 = 138412802;
        id v16 = v11;
        __int16 v17 = 2112;
        id v18 = v14;
        __int16 v19 = 2112;
        id v20 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to fetch %@ in %@: %@",  (uint8_t *)&v15,  0x20u);
      }
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

void sub_100073AD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 didFetchRecordWithID:v7 record:v6];
  [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v7];
}

void sub_100073DA8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  if (v13)
  {
    id v7 = a4;
    id v8 = a3;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100073ECC;
    v14[3] = &unk_1002411B8;
    int v15 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v13 count]);
    id v9 = v15;
    [v13 enumerateKeysAndObjectsUsingBlock:v14];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();

    __int16 v10 = v15;
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void (**)(uint64_t, void, NSMutableDictionary *, NSMutableDictionary *))(v11 + 16);
    __int16 v10 = a4;
    id v9 = a3;
    v12(v11, 0LL, v9, v10);
  }
}

void sub_100073ECC(uint64_t a1, void *a2, void *a3)
{
  unsigned __int16 v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 recordName]);
  [v4 setObject:v5 forKeyedSubscript:v6];
}

uint64_t sub_10007402C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100074214(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v8 = a2;
  id v7 = a4;
  [*(id *)(a1 + 32) addObjectsFromArray:a3];
  if (v8)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100074304;
    v9[3] = &unk_100241140;
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    [v8 enumerateKeysAndObjectsUsingBlock:v9];
    [*(id *)(a1 + 56) removeObjectForKey:*(void *)(a1 + 64)];
    [*(id *)(a1 + 72) _fetchNextOperationType:*(void *)(a1 + 56) followRemapping:*(unsigned __int8 *)(a1 + 88) recordIDMapping:*(void *)(a1 + 48) inResult:*(void *)(a1 + 40) storeRequestUUIDsIn:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 80)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }
}

void sub_100074304(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int16 v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:a2]);
  [v4 setObject:v6 forKeyedSubscript:v7];
}

uint64_t sub_100074740(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[6];
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(v3 + 16))(v3, 0LL, a1[4], a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(v3, a1[5], a1[4]);
  }
}

LABEL_69:
                if ([v81 inExpunged]) {
LABEL_70:
                }
                  v163[2](v163, v37, v72, 1LL);
LABEL_71:

                id v21 = v182;
                id v24 = v176;
                __int16 v35 = v163;
LABEL_57:

                unint64_t v25 = v184;
                goto LABEL_58;
              }

              id v96 = v70;
              if (v69)
              {
                v97 = (void *)objc_claimAutoreleasedReturnValue([v69 recordID]);
                v98 = (void *)objc_claimAutoreleasedReturnValue([v97 recordName]);
                v99 = (void *)objc_claimAutoreleasedReturnValue([v71 identifier]);
                v100 = [v98 isEqual:v99];

                id v21 = v182;
                id v96 = v71;
                if ((v100 & 1) == 0)
                {
                  v101 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                  v102 = (void *)objc_claimAutoreleasedReturnValue([v69 recordID]);
                  v103 = (void *)objc_claimAutoreleasedReturnValue([v102 recordName]);
                  v104 = v101;
                  id v21 = v182;
                  id v96 = -[CPLScopedIdentifier initRelativeToScopedIdentifier:identifier:]( v104,  "initRelativeToScopedIdentifier:identifier:",  v71,  v103);
                }
              }

              v105 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:]( v180,  "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:",  v69,  v71,  v181));
              v106 = v105;
              if (v105)
              {
                if (([v105 inExpunged] & 1) == 0)
                {
                  v107 = 3LL;
                  goto LABEL_74;
                }

    id v5 = 0;
    goto LABEL_70;
  }

  if (a3 > 62)
  {
    if (a3 == 63)
    {
      if (-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema"))
      {
        if (!_CPLSilentLogging)
        {
          id v23 = sub_1001615D8();
          id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
            *(_DWORD *)buf = 138412546;
            id v70 = v25;
            id v71 = 2048;
            uint64_t v72 = 63LL;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Upgrading %@ to version %llu: adding localScopeIndex column",  buf,  0x16u);
          }
        }

        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 pqlConnection]);

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        uint64_t v29 = [v27 cplExecute:@"ALTER TABLE %@ ADD COLUMN localScopeIndex INTEGER DEFAULT 0", v28];

        if (v29
          && -[CPLPrequeliteStorage createIndexOnColumn:error:]( self,  "createIndexOnColumn:error:",  @"localScopeIndex",  0LL))
        {
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteCloudCache abstractObject](self, "abstractObject"));
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 engineStore]);
          id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 scopes]);

          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteCloudCache abstractObject](self, "abstractObject"));
          id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 engineStore]);
          __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 idMapping]);
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 platformObject]);
          id v62 = (void *)objc_claimAutoreleasedReturnValue([v36 mainTable]);

          __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 clientCache]);
          id v61 = (void *)objc_claimAutoreleasedReturnValue([v38 mainTable]);

          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
          id v63 = 0u;
          v64 = 0u;
          uint64_t v65 = 0u;
          id v66 = 0u;
          id obj = (id)objc_claimAutoreleasedReturnValue([v32 enumeratorForScopesIncludeInactive:0]);
          uint64_t v40 = [obj countByEnumeratingWithState:&v63 objects:v68 count:16];
          if (v40)
          {
            uint64_t v41 = v40;
            __int128 v59 = v32;
            uint64_t v42 = *(void *)v64;
            while (2)
            {
              for (i = 0LL; i != v41; i = (char *)i + 1)
              {
                if (*(void *)v64 != v42) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v44 = *(void **)(*((void *)&v63 + 1) + 8LL * (void)i);
                uint64_t v45 = objc_autoreleasePoolPush();
                id v46 = [v44 localIndex];
                if (![v27 execute:@"UPDATE %@ SET localScopeIndex = %ld WHERE identifier IN (SELECT cloudIdentifier FROM %@, %@ WHERE scopeIndex = %ld AND localIdentifier = identifier AND stableScopeIndex = %ld) AND scopeIndex = %ld", v39, v46, v62, v61, v46, objc_msgSend(v44, "stableIndex"), objc_msgSend(v44, "cloudIndex")])
                {
                  objc_autoreleasePoolPop(v45);
                  __int16 v51 = 0;
                  goto LABEL_74;
                }

                __int16 v47 = (uint64_t)[v27 changes];
                if (v47 >= 1)
                {
                  id v48 = v47;
                  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
                  id v50 = (void *)objc_claimAutoreleasedReturnValue([v44 scopeIdentifier]);
                  [v49 recordUpgradeEvent:@"Acknowledged %lld records in cloud cache for %@", v48, v50];
                }

                objc_autoreleasePoolPop(v45);
              }

              uint64_t v41 = [obj countByEnumeratingWithState:&v63 objects:v68 count:16];
              if (v41) {
                continue;
              }
              break;
            }

            __int16 v51 = 1;
LABEL_74:
            id v32 = v59;
          }

          else
          {
            __int16 v51 = 1;
          }
        }

        else
        {
          __int16 v51 = 0;
        }

        return v51 != 0;
      }

      return v5;
    }

    if (a3 != 72 || !-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
      return v5;
    }
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1001615D8();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        *(_DWORD *)buf = 138412546;
        id v70 = v15;
        id v71 = 2048;
        uint64_t v72 = 72LL;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Upgrading %@ to version %llu: adding otherScopeIndex and stagedOtherScopeIndex columns",  buf,  0x16u);
      }
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v16 pqlConnection]);

    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
    id v18 = [v11 cplExecute:@"ALTER TABLE %@ ADD COLUMN otherScopeIndex INTEGER DEFAULT 0", v17];

    if (v18)
    {
      if (-[CPLPrequeliteStorage createIndexOnColumn:error:]( self,  "createIndexOnColumn:error:",  @"otherScopeIndex",  0LL))
      {
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        id v20 = [v11 cplExecute:@"ALTER TABLE %@ ADD COLUMN stagedOtherScopeIndex INTEGER DEFAULT 0", v19];

        if (v20)
        {
          id v21 = @"stagedOtherScopeIndex";
LABEL_68:
          id v5 = -[CPLPrequeliteStorage createIndexOnColumn:error:](self, "createIndexOnColumn:error:", v21, 0LL);
          goto LABEL_70;
        }
      }
    }

    goto LABEL_69;
  }

  if (a3 == 52)
  {
    if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
      return v5;
    }
    uint64_t v22 = @"scopeIndex";
    return -[CPLPrequeliteStorage createIndexOnColumn:error:](self, "createIndexOnColumn:error:", v22, 0LL);
  }

  if (a3 != 53 || !-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
    return v5;
  }
  if (!-[CPLPrequeliteStorage dropIndexWithName:error:](self, "dropIndexWithName:error:", @"identifier", 0LL)
    || !-[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"relatedIdentifier",  0LL)
    || !-[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"secondaryIdentifier",  0LL)
    || !-[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"stagedRelatedIdentifier",  0LL)
    || !-[CPLPrequeliteStorage dropIndexWithName:error:]( self,  "dropIndexWithName:error:",  @"stagedSecondaryIdentifier",  0LL)
    || !-[CPLPrequeliteStorage dropIndexWithName:error:](self, "dropIndexWithName:error:", @"state", 0LL))
  {
    return 0;
  }

  id v5 = 0;
  if (-[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"scopedIdentifier",  @"identifier, scopeIndex",  0LL,  0LL))
  {
    id v5 = 0;
    if (-[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"relatedScopedIdentifier",  @"relatedIdentifier, scopeIndex",  0LL,  0LL))
    {
      id v5 = 0;
      if (-[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"secondaryScopedIdentifier",  @"secondaryIdentifier, scopeIndex",  0LL,  0LL))
      {
        id v5 = 0;
        if (-[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"stagedRelatedScopedIdentifier",  @"stagedRelatedIdentifier, scopeIndex",  0LL,  0LL))
        {
          return -[CPLPrequeliteStorage createIndexWithName:withDefinition:unique:error:]( self,  "createIndexWithName:withDefinition:unique:error:",  @"scopedState",  @"state, scopeIndex",  0LL,  0LL);
        }
      }
    }
  }

  return v5;
}

LABEL_75:
                self = v180;
                if ([v106 inExpunged])
                {
                  v107 = 1LL;
                  goto LABEL_77;
                }
              }

              else
              {
                v107 = 1LL;
LABEL_74:
                self = v180;
LABEL_77:
                ((void (*)(void *, void *, id, uint64_t))v35[2])(v35, v37, v96, v107);
              }

              id v24 = v176;
              goto LABEL_57;
            }

            if ([v37 supportsSharingScopedIdentifier])
            {
              if (![v37 inExpunged])
              {
                v108 = (void *)objc_claimAutoreleasedReturnValue([v37 sharingRecordScopedIdentifier]);
                if (v108)
                {
                  v170 = v27;
                  v109 = v182;
                  v110 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKeyedSubscript:v108]);
                  v161 = v108;
                  v111 = v108;
                  v112 = v111;
                  if (v110)
                  {
                    v113 = (void *)objc_claimAutoreleasedReturnValue([v110 recordID]);
                    v178 = v24;
                    v114 = (void *)objc_claimAutoreleasedReturnValue([v113 recordName]);
                    v165 = v35;
                    v115 = (void *)objc_claimAutoreleasedReturnValue([v111 identifier]);
                    v159 = [v114 isEqual:v115];

                    __int16 v35 = v165;
                    v109 = v182;

                    id v24 = v178;
                    v112 = v111;
                    if ((v159 & 1) == 0)
                    {
                      v116 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                      v117 = (void *)objc_claimAutoreleasedReturnValue([v110 recordID]);
                      v118 = (void *)objc_claimAutoreleasedReturnValue([v117 recordName]);
                      v112 = -[CPLScopedIdentifier initRelativeToScopedIdentifier:identifier:]( v116,  "initRelativeToScopedIdentifier:identifier:",  v111,  v118);

                      __int16 v35 = v165;
                      v109 = v182;

                      id v24 = v178;
                    }
                  }

                  v160 = v112;
                  v166 = v110;
                  v119 = (void *)objc_claimAutoreleasedReturnValue([v109 objectForKeyedSubscript:v111]);
                  v120 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:]( v180,  "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:",  v119,  v184,  v181));

                  v121 = v120;
                  if (v120)
                  {
                    v122 = [v120 inExpunged];
                    uint64_t v27 = v170;
                    v123 = v166;
                    if (v122)
                    {
                      v124 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                      v125 = objc_claimAutoreleasedReturnValue([v111 scopeIdentifier]);
                      v126 = v121;
                      v127 = (void *)v125;
                      v128 = objc_claimAutoreleasedReturnValue([v23 identifier]);
                      v129 = v24;
                      v130 = (void *)v128;
                      v131 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( v124,  "initWithScopeIdentifier:identifier:",  v127,  v128);
                      ((void (*)(void *, void, CPLScopedIdentifier *, uint64_t))v35[2])( v35,  0LL,  v131,  1LL);

                      id v24 = v129;
                      v121 = v126;
                      self = v180;
                      v132 = v160;
                    }

                    else
                    {
                      self = v180;
                      -[CPLCloudKitTransportTask _mergePrivateRecord:withSharedRecord:merger:]( v180,  "_mergePrivateRecord:withSharedRecord:merger:",  v37,  v121,  v158);
                      v132 = v160;
                      ((void (*)(void *, void *, id, uint64_t))v35[2])(v35, v37, v160, 3LL);
                    }
                  }

                  else
                  {
                    uint64_t v27 = v170;
                    v123 = v166;
                    if ([v162 containsObject:v111])
                    {
                      v147 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                      v148 = (CPLRecordTarget *)objc_claimAutoreleasedReturnValue([v111 scopeIdentifier]);
                      v149 = objc_claimAutoreleasedReturnValue([v23 identifier]);
                      v150 = v24;
                      v151 = (void *)v149;
                      v152 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( v147,  "initWithScopeIdentifier:identifier:",  v148,  v149);
                      ((void (*)(void *, void, CPLScopedIdentifier *, void))v35[2])( v35,  0LL,  v152,  0LL);

                      id v24 = v150;
                    }

                    else
                    {
                      v148 = -[CPLRecordTarget initWithScopedIdentifier:otherScopedIdentifier:targetState:]( objc_alloc(&OBJC_CLASS___CPLRecordTarget),  "initWithScopedIdentifier:otherScopedIdentifier:targetState:",  v23,  v111,  0LL);
                      [v34 setTarget:v148 forRecordWithScopedIdentifier:v23];
                    }

                    self = v180;
                    v121 = 0LL;
                    v132 = v160;
                  }

                  id v21 = v182;
                  v108 = v161;
                }

                else if ([v37 inExpunged])
                {
                  v167 = (void (**)(void, void *, id, uint64_t))v35;
                  v179 = v24;
                  v135 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKeyedSubscript:v184]);
                  v136 = v184;
                  v137 = v136;
                  if (v135)
                  {
                    v138 = (void *)objc_claimAutoreleasedReturnValue([v135 recordID]);
                    v139 = (void *)objc_claimAutoreleasedReturnValue([v138 recordName]);
                    v140 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
                    v141 = [v139 isEqual:v140];

                    v137 = v136;
                    if ((v141 & 1) == 0)
                    {
                      v142 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                      v143 = (void *)objc_claimAutoreleasedReturnValue([v135 recordID]);
                      v144 = (void *)objc_claimAutoreleasedReturnValue([v143 recordName]);
                      v137 = -[CPLScopedIdentifier initRelativeToScopedIdentifier:identifier:]( v142,  "initRelativeToScopedIdentifier:identifier:",  v136,  v144);
                    }
                  }

                  v145 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKeyedSubscript:v136]);
                  v146 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:]( v180,  "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:",  v145,  v136,  v181));

                  if (v146)
                  {
                    __int16 v35 = v167;
                    if ([v146 inExpunged])
                    {
                      v167[2](v167, v37, v137, 1LL);
                      self = v180;
                    }

                    else
                    {
                      self = v180;
                      v154 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _sharedRecordToPrivateRecord:scopedIdentifier:]( v180,  "_sharedRecordToPrivateRecord:scopedIdentifier:",  v146,  v23));
                      v167[2](v167, v154, v137, 2LL);
                    }

                    v108 = 0LL;
                  }

                  else
                  {
                    v153 = [v162 containsObject:v136];
                    self = v180;
                    __int16 v35 = v167;
                    v108 = 0LL;
                    if (v153) {
                      v167[2](v167, v37, v137, 1LL);
                    }
                  }

                  id v24 = v179;
                  id v21 = v182;
                }

                else
                {
                  ((void (*)(void *, void *, void *, uint64_t))v35[2])(v35, v37, v184, 1LL);
                  id v21 = v182;
                }

                goto LABEL_57;
              }

              v164 = (void (**)(void, void *, id, uint64_t))v35;
              v177 = v24;
              uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKeyedSubscript:v184]);
              v84 = v184;
              v85 = v84;
              if (v83)
              {
                id v86 = (void *)objc_claimAutoreleasedReturnValue([v83 recordID]);
                v87 = (void *)objc_claimAutoreleasedReturnValue([v86 recordName]);
                id v88 = (void *)objc_claimAutoreleasedReturnValue([v84 identifier]);
                __int16 v89 = [v87 isEqual:v88];

                v85 = v84;
                if ((v89 & 1) == 0)
                {
                  id v90 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                  __int16 v91 = (void *)objc_claimAutoreleasedReturnValue([v83 recordID]);
                  v92 = (void *)objc_claimAutoreleasedReturnValue([v91 recordName]);
                  v85 = -[CPLScopedIdentifier initRelativeToScopedIdentifier:identifier:]( v90,  "initRelativeToScopedIdentifier:identifier:",  v84,  v92);
                }
              }

              v93 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:]( v180,  "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:",  v83,  v84,  v181));
              v94 = v93;
              if (v93)
              {
                id v24 = v177;
                __int16 v35 = v164;
                if (([v93 inExpunged] & 1) == 0)
                {
                  v95 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _sharedRecordToPrivateRecord:scopedIdentifier:]( v180,  "_sharedRecordToPrivateRecord:scopedIdentifier:",  v94,  v23));
                  v164[2](v164, v95, v85, 2LL);

LABEL_82:
                  id v21 = v182;
                  self = v180;
                  goto LABEL_57;
                }

            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"viewPresentation" changeType:2])
            {
              goto LABEL_82;
            }

            uint64_t v33 = 0;
LABEL_78:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"viewPresentation")))
            {
              id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  -[CPLAssetChange viewPresentation](v9, "viewPresentation")));
              [v7 setLegacyEncryptedObject:v34 forKey:@"viewPresentationTypeEnc"];
            }

            if ((v33 & 1) != 0)
            {
              -[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"computeStateVersion"));
              __int16 v35 = 1;
              goto LABEL_88;
            }

LABEL_80:
              }

              else
              {
                v134 = [v162 containsObject:v84];
                id v24 = v177;
                __int16 v35 = v164;
                if ((v134 & 1) == 0) {
                  goto LABEL_80;
                }
              }

              ((void (*)(void *, void *, id, uint64_t))v35[2])(v35, v37, v85, 1LL);
              goto LABEL_82;
            }

            ((void (*)(void *, void *, void *, uint64_t))v35[2])(v35, v37, v184, 1LL);
          }

          else
          {
LABEL_15:
            v169 = v27;
            v175 = v24;
            __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKeyedSubscript:v184]);
            uint64_t v41 = v184;
            uint64_t v42 = v41;
            if (v37)
            {
              uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v37 recordID]);
              uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 recordName]);
              uint64_t v45 = v35;
              id v46 = (void *)objc_claimAutoreleasedReturnValue([v41 identifier]);
              __int16 v47 = [v44 isEqual:v46];

              __int16 v35 = v45;
              self = v180;

              uint64_t v42 = v41;
              if ((v47 & 1) == 0)
              {
                id v48 = objc_alloc(&OBJC_CLASS___CPLScopedIdentifier);
                __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v37 recordID]);
                id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 recordName]);
                uint64_t v42 = -[CPLScopedIdentifier initRelativeToScopedIdentifier:identifier:]( v48,  "initRelativeToScopedIdentifier:identifier:",  v41,  v50);

                __int16 v35 = v45;
                self = v180;
              }
            }

            __int16 v51 = objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:]( self,  "_interpretedSharedChangeFromCKRecord:scopedIdentifier:userRecordID:",  v37,  v41,  v181));
            __int128 v52 = self;
            id v53 = (void *)v51;
            if (v51)
            {
              id v54 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCloudKitTransportTask _sharedRecordToPrivateRecord:scopedIdentifier:]( v52,  "_sharedRecordToPrivateRecord:scopedIdentifier:",  v51,  v23));
              ((void (*)(void *, void *, id, uint64_t))v35[2])(v35, v54, v42, 2LL);
            }

            else if ([v162 containsObject:v41])
            {
              ((void (*)(void *, void, id, void))v35[2])(v35, 0LL, v42, 0LL);
            }

            id v24 = v175;
            self = v180;
            uint64_t v27 = v169;
          }

          id v21 = v182;
          goto LABEL_57;
        }

void sub_100075CC0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a2;
  id v7 = a3;
  if (v13)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v13 scopedIdentifier]);
    unsigned __int8 v9 = [v8 isEqual:*(void *)(a1 + 32)];

    if ((v9 & 1) == 0)
    {
      [v13 setScopedIdentifier:*(void *)(a1 + 32)];
      [v13 awakeFromStorage];
    }

    [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:*(void *)(a1 + 32)];
  }

  id v10 = objc_alloc(&OBJC_CLASS___CPLRecordTarget);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) scopedIdentifier]);
  id v12 = -[CPLRecordTarget initWithScopedIdentifier:otherScopedIdentifier:targetState:]( v10,  "initWithScopedIdentifier:otherScopedIdentifier:targetState:",  v11,  v7,  a4);

  [*(id *)(a1 + 56) setTarget:v12 forRecordWithScopedIdentifier:*(void *)(a1 + 32)];
  [*(id *)(a1 + 64) removeObject:*(void *)(a1 + 32)];
}

void sub_100076198(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    unsigned __int16 v4 = (void *)objc_claimAutoreleasedReturnValue([v6 scopeIdentifier]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 cloudKitScopeForScopeIdentifier:v4]);

    if (v5) {
      [*(id *)(a1 + 48) addObject:v6];
    }
  }
}

void sub_100076220(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = *(void **)(a1 + 32);
    if (v10)
    {
      id v11 = v10;
      [v11 addEntriesFromDictionary:v7];
    }

    else
    {
      id v11 = [v7 mutableCopy];
    }

    id v12 = *(void **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 80);
    id v20 = 0LL;
    unsigned __int8 v18 = [v12 _mergeFoundCKRecords:v11 updateFoundCPLRecords:v13 remainingScopedIdentifiers:v14 fetchedScopedIdentifi ers:v15 userRecordID:v16 targetMapping:v17 error:&v20];
    id v19 = v20;
    if ((v18 & 1) != 0) {
      [*(id *)(a1 + 40) _fetchRecordsForRemainingScopedIdentifiers:*(void *)(a1 + 56) alreadyFetchedScopedIdentifiers:*(void *)(a1 + 64) userRecordID:*(void *)(a1 + 72) foundCPLRecords:*(void *)(a1 + 48) foundCKR ecords:v11 targetMapping:*(void *)(a1 + 80) completionHandler:*(void *)(a1 + 88)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }
}

void sub_1000763FC(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6)
  {
    uint64_t v3 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", *(void *)(a1 + 32));
    unsigned __int16 v4 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
    id v5 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
    [*(id *)(a1 + 40) _fetchRecordsForRemainingScopedIdentifiers:v3 alreadyFetchedScopedIdentifiers:v5 userRecordID:v6 foundCPLRecords:v4 foundCKRec ords:0 targetMapping:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100076608(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!_CPLSilentLogging)
  {
    id v5 = sub_1000733A0();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      if (*(_BYTE *)(a1 + 56)) {
        id v8 = "";
      }
      else {
        id v8 = " unknown";
      }
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 134218498;
      uint64_t v11 = v7;
      __int16 v12 = 2080;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated target mapping for %lu %stargets:\n%@",  (uint8_t *)&v10,  0x20u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000767F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) count])
  {
    id v4 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v5 = *(id *)(a1 + 32);
    id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v20;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v20 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) targetForRecordWithScopedIdentifier:v10]);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 resourceScopedIdentifier]);

          if (!v4) {
            sub_1001959C8(v10, a1);
          }
          -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v10, v12);
        }

        id v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }

      while (v7);
    }

    uint64_t v13 = *(void **)(a1 + 48);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v4, "allKeys"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100076A10;
    v16[3] = &unk_100241348;
    uint64_t v17 = v4;
    id v18 = *(id *)(a1 + 56);
    uint64_t v15 = v4;
    [v13 fetchRecordWithScopedIdentifiers:v14 completionHandler:v16];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100076A10(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    id v3 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v5 count]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100076AFC;
    v6[3] = &unk_100241320;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = v3;
    id v4 = v3;
    [v5 enumerateKeysAndObjectsUsingBlock:v6];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100076AFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:a2]);
  id v7 = -[CPLPlaceholderRecord initWithCKRecord:scopedIdentifier:]( objc_alloc(&OBJC_CLASS___CPLPlaceholderRecord),  "initWithCKRecord:scopedIdentifier:",  v6,  v8);

  if (v7) {
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v8];
  }
}

void sub_100076D30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100076E10;
  v10[3] = &unk_100240510;
  id v7 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v7;
  id v14 = v5;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v8 = v5;
  id v9 = v6;
  [v11 dispatchAsync:v10];
}

void sub_100076E10(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[CPLCloudKitErrors realErrorForError:](&OBJC_CLASS___CPLCloudKitErrors, "realErrorForError:", v2));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cpl_zoneName"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v3,  v4,  @"Error fetching zone %@",  v5));
  }

  else
  {
    id v6 = 0LL;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:*(void *)(a1 + 48)]);
  if (v7)
  {
    if (v6)
    {

      id v6 = 0LL;
    }
  }

  else if (!v6)
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_1000733A0();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a1 + 56);
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v12 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        uint64_t v15 = v12;
        __int16 v16 = 2112;
        uint64_t v17 = v10;
        __int16 v18 = 2112;
        uint64_t v19 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to fetch %@ yet CloudKit returned no error, operation %@ returned %@",  buf,  0x20u);
      }
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) zoneName]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failed to fetch zone %@ for unknown reasons",  v13));
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10007713C(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 || !a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v4 = objc_alloc(&OBJC_CLASS___CKRecordZoneID);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ownerName]);
    id v7 = -[CKRecordZoneID initWithZoneName:ownerName:](v4, "initWithZoneName:ownerName:", v5, v6);

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100077238;
    v10[3] = &unk_1002413C0;
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 56);
    id v11 = *(id *)(a1 + 48);
    [v8 _fetchZoneForZoneID:v7 operationType:v9 completionHandler:v10];
  }

uint64_t sub_100077238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000773B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  [*(id *)(a1 + 32) addObjectsFromArray:v8];
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(a1 + 48)];
    uint64_t v17 = 0LL;
    __int16 v18 = &v17;
    uint64_t v19 = 0x3032000000LL;
    __int128 v20 = sub_100073940;
    __int128 v21 = sub_100073950;
    id v22 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10007756C;
    v12[3] = &unk_100241410;
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 40);
    __int16 v16 = &v17;
    id v15 = *(id *)(a1 + 64);
    [v7 enumerateKeysAndObjectsUsingBlock:v12];
    if ([(id)v18[5] count])
    {
      uint64_t v10 = *(void **)(a1 + 72);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([(id)v18[5] allObjects]);
      [v10 _fetchRecordsFollowRemappingWithIDs:v11 alreadyFetchRecordIDs:*(void *)(a1 + 40) remappedRecordIDs:*(void *)(a1 + 56) realRecords:*(void *)(a1 + 64) type:*(void *)(a1 + 88) storeRequestUUIDsIn :*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 80)];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
    }

    _Block_object_dispose(&v17, 8);
  }
}

void sub_100077554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10007756C(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"remappedRef"]);
  id v7 = v6;
  if (v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 recordID]);
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v13];
    if (([*(id *)(a1 + 40) containsObject:v8] & 1) == 0)
    {
      id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      if (!v9)
      {
        uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
        uint64_t v12 = *(void **)(v11 + 40);
        *(void *)(v11 + 40) = v10;

        id v9 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      }

      [v9 addObject:v8];
    }
  }

  else
  {
    [*(id *)(a1 + 48) setObject:v5 forKeyedSubscript:v13];
  }
}

void sub_100077B44(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void, void, void, uint64_t))(*(void *)(a1 + 72) + 16LL))( *(void *)(a1 + 72),  0LL,  *(void *)(a1 + 32),  a2);
    return;
  }

  if ([*(id *)(a1 + 40) count])
  {
    id v3 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 48) count]);
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id v4 = *(id *)(a1 + 48);
    id v5 = [v4 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v33;
      char v8 = 1;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v33 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v10 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)i);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) _recordWithRecordID:v10 usingRealRecords:*(void *)(a1 + 56) remappedRecordIDs:*(void *)(a1 + 40) wantsAllRecords:*(unsigned __int8 *)(a1 + 80)]);
          if (v11) {
            -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v11, v10);
          }
          else {
            char v8 = 0;
          }
        }

        id v6 = [v4 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }

      while (v6);

      if (!((*(_BYTE *)(a1 + 80) == 0) | v8 & 1))
      {
        uint64_t v12 = *(void *)(a1 + 72);
        uint64_t v13 = *(void *)(a1 + 32);
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"Record not found"));
        (*(void (**)(uint64_t, void, uint64_t, void *))(v12 + 16))(v12, 0LL, v13, v14);

LABEL_21:
        return;
      }
    }

    else
    {
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    goto LABEL_21;
  }

  if (*(_BYTE *)(a1 + 80)
    && (id v15 = [*(id *)(a1 + 48) count], v15 != objc_msgSend(*(id *)(a1 + 56), "count")))
  {
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v17 = *(id *)(a1 + 48);
    id v18 = [v17 countByEnumeratingWithState:&v36 objects:v43 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v37;
      uint64_t v31 = 138543362LL;
      do
      {
        for (j = 0LL; j != v19; j = (char *)j + 1)
        {
          if (*(void *)v37 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)j);
          id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v22, v31));

          if (v23) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = _CPLSilentLogging == 0;
          }
          if (v24)
          {
            id v25 = sub_1000733A0();
            uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v31;
              uint64_t v42 = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%{public}@ record not found on server",  buf,  0xCu);
            }
          }
        }

        id v19 = [v17 countByEnumeratingWithState:&v36 objects:v43 count:16];
      }

      while (v19);
    }

    uint64_t v27 = *(void *)(a1 + 72);
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"Record not found"));
    (*(void (**)(uint64_t, void, uint64_t, void *))(v27 + 16))(v27, 0LL, v28, v29);
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 72);
    id v30 = [*(id *)(a1 + 56) copy];
    (*(void (**)(uint64_t))(v16 + 16))(v16);
  }

void sub_100077F64(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.recordfetch");
  id v3 = (void *)qword_100296338;
  qword_100296338 = (uint64_t)v2;
}

void sub_1000784B4(id a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v1 = [v3 integerForKey:@"CPLDefaultServerFeatureVersion"];
  else {
    uint64_t v2 = (uint64_t)v1;
  }
  qword_100290C18 = v2;
}

uint64_t sub_100078774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100078FF0()
{
  if (qword_100296348 != -1) {
    dispatch_once(&qword_100296348, &stru_1002414E8);
  }
  return (id)qword_100296350;
}

void sub_100079030(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000790E4;
  v8[3] = &unk_1002408C8;
  uint64_t v13 = *(void *)(a1 + 56);
  id v6 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  id v10 = v5;
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v5;
  [v9 dispatchAsync:v8];
}

void sub_1000790E4(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v3)
  {
    id v4 = *v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 lastOperationRequestUUIDs]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:scopeProvider:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:scopeProvider:withRequestUUIDs:description:",  v3,  v4,  v5,  @"Error uploading records"));

    if (!v6) {
      sub_100195D70((uint64_t)v3, a1, (uint64_t *)v2);
    }
    if (([v6 isCPLOperationCancelledError] & 1) == 0)
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_100078FF0();
        char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v12 = 138412290;
          uint64_t v13 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to fix-up records: %@",  (uint8_t *)&v12,  0xCu);
        }
      }

      if ([v6 isCPLErrorWithCode:18] && !_CPLSilentLogging)
      {
        id v9 = sub_100078FF0();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          id v11 = *(void **)(a1 + 48);
          int v12 = 138412290;
          uint64_t v13 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Rejected CK updates: %@",  (uint8_t *)&v12,  0xCu);
        }
      }
    }
  }

  else
  {
    id v6 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100079344(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = *(void **)(a1 + 32);
  if (v3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1000793F0;
    v6[3] = &unk_100240BE8;
    void v6[4] = v5;
    id v7 = v3;
    [v5 _fetchSparseRecordsWithCompletionHandler:v6];
  }

  else
  {
    (*(void (**)(void))(v5[35] + 16LL))();
  }
}

id sub_1000793F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a3) {
    return (id)(*(uint64_t (**)(void))(v4[35] + 16LL))();
  }
  uint64_t v6 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100079474;
  v7[3] = &unk_10023E430;
  void v7[4] = v4;
  return [v4 _updateSparseRecords:a2 currentUserRecordID:v6 completionHandler:v7];
}

uint64_t sub_100079474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 280LL) + 16LL))();
}

void sub_1000794EC(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.sparserecordsfixup");
  id v3 = (void *)qword_100296350;
  qword_100296350 = (uint64_t)v2;
}

id sub_10007961C(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _fetchSharedScopeWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[35] + 16LL))();
  }
}

void sub_1000798B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_1000798DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000798EC(uint64_t a1)
{
}

void sub_1000798F4(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    if (!_CPLSilentLogging)
    {
      id v12 = sub_100079AD8();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 rootRecord]);
        *(_DWORD *)buf = 138412290;
        id v23 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Fetched share metadata root record: %@",  buf,  0xCu);
      }
    }

    id v15 = (void *)a1[4];
    uint64_t v16 = a1[5];
    id v21 = 0LL;
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v15 _scopeChangeFromShareMetadata:v8 currentUserID:v16 error:&v21]);
    id v18 = v21;
    id v11 = (os_log_s *)v21;
    uint64_t v19 = *(void *)(a1[7] + 8LL);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v17;

    if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
      objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v18);
    }
    goto LABEL_11;
  }

  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a4);
  if (!_CPLSilentLogging)
  {
    id v10 = sub_100079AD8();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error fetching metadata: %@", buf, 0xCu);
    }

id sub_100079AD8()
{
  if (qword_100296358 != -1) {
    dispatch_once(&qword_100296358, &stru_100241580);
  }
  return (id)qword_100296360;
}

void sub_100079B18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100079BA4;
  v6[3] = &unk_100241538;
  id v7 = v3;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_100079BA4(uint64_t a1)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void *)(v3 + 40);
    id v4 = (id *)(v3 + 40);
    if (!v5) {
      objc_storeStrong(v4, v2);
    }
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) operationDidFinishWithError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int128 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v9)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_100079AD8();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 272), "cpl_redactedShareURL"));
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        *(_DWORD *)buf = 138543618;
        uint64_t v28 = v12;
        __int16 v29 = 2112;
        uint64_t v30 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Error fetching share metadata for %{public}@: %@",  buf,  0x16u);
      }

      uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    uint64_t v15 = CKUnderlyingErrorDomain;
    if ([v14 isEqualToString:CKUnderlyingErrorDomain])
    {
      id v16 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code];

      if (v16 == (id)1017)
      {
        uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 272), "cpl_redactedShareURL"));
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  34LL,  v17,  @"Share url not found %@: %@",  v18,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
LABEL_23:

LABEL_26:
        (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 280LL) + 16LL))();

        return;
      }
    }

    else
    {
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) domain]);
    if ([v23 isEqualToString:v15])
    {
      if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code] == (id)7)
      {

LABEL_25:
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  35LL,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
        goto LABEL_26;
      }

      id v26 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code];

      if (v26 == (id)2008) {
        goto LABEL_25;
      }
    }

    else
    {
    }

    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastOperationRequestUUIDs]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 272), "cpl_redactedShareURL"));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v24,  v18,  @"Error fetching metadata for %@: %@",  v25,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));

    goto LABEL_23;
  }

  if (!_CPLSilentLogging)
  {
    id v20 = sub_100079AD8();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Fetched shared scope: %@", buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 280LL) + 16LL))();
}

void sub_10007A478(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.share");
  uint64_t v3 = (void *)qword_100296360;
  qword_100296360 = (uint64_t)v2;
}

void *sub_10007A4A4(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)a1[8];
    if (v4) {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupNameForGroupName:v3]);
    }
    else {
      uint64_t v5 = v3;
    }
    a1 = v5;
  }

  return a1;
}

void sub_10007A858(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v36 = v5;
  if (a3)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
    LODWORD(v32) = 0;
    objc_msgSend( v6,  "setHasCellularBudget:hasBatteryBudget:hasLowBatteryLevel:isConstrainedNetwork:hasHeavyResourceUsage:hasPoorNetwork Quality:hasModerateThermalPressure:hasThermalPressure:hasPoorSystemConditions:isBudgetValid:blockedReason:unBlockedReason:",  0,  0,  0,  1,  0,  0,  v32,  0,  0);
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:CPLStatusHasCellularBudgetKey]);
    unsigned int v35 = [v7 BOOLValue];

    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasBatteryBudgetKey]);
    unsigned __int8 v9 = [v8 BOOLValue];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasLowBatteryLevelKey]);
    unsigned int v34 = [v10 BOOLValue];

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasConstrainedNetworkKey]);
    unsigned int v33 = [v11 BOOLValue];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasHeavyResourceUsageKey]);
    id v13 = [v12 BOOLValue];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasPoorNetworkQualityKey]);
    id v15 = [v14 BOOLValue];

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasModerateThermalPressureKey]);
    unsigned __int8 v17 = [v16 BOOLValue];

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasThermalPressureKey]);
    unsigned __int8 v19 = [v18 BOOLValue];

    id v20 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusHasPoorSystemConditionsKey]);
    unsigned __int8 v21 = [v20 BOOLValue];

    uint64_t v22 = 1LL;
    if ((v9 & 1) == 0)
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 systemMonitor]);
      unsigned int v25 = [v24 hasEnoughPowerForAutomaticOverride];

      if (v25)
      {
        id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 systemMonitor]);
        [v27 startAutomaticOverridingSystemBudgets:2];

        uint64_t v22 = 1LL;
      }

      else
      {
        uint64_t v22 = 0LL;
      }
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusBlockedReasonKey]);
    id v29 = [v28 integerValue];

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKey:CPLStatusUnBlockedReasonKey]);
    id v31 = [v30 integerValue];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
    BYTE3(v32) = 1;
    BYTE2(v32) = v21;
    BYTE1(v32) = v19;
    LOBYTE(v32) = v17;
    objc_msgSend( v6,  "setHasCellularBudget:hasBatteryBudget:hasLowBatteryLevel:isConstrainedNetwork:hasHeavyResourceUsage:hasPoorNetwork Quality:hasModerateThermalPressure:hasThermalPressure:hasPoorSystemConditions:isBudgetValid:blockedReason:unBlockedReason:",  v35,  v22,  v34,  v33,  v13,  v15,  v32,  v29,  v31);
  }
}

id sub_10007AC0C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) opened];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _updateBudgets];
  }
  return result;
}

void sub_10007AD30(uint64_t a1)
{
  if (os_variant_has_internal_content("com.apple.cpl.allow-fake-derivatives")) {
    +[CPLCloudKitFakeDynamicDerivatives setAllowsFakeDerivatives:]( &OBJC_CLASS___CPLCloudKitFakeDynamicDerivatives,  "setAllowsFakeDerivatives:",  1LL);
  }
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472LL;
  v65[2] = sub_10007B420;
  v65[3] = &unk_1002415D0;
  v65[4] = v3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 addObserverForName:CKIdentityUpdateNotification object:0 queue:v4 usingBlock:v65]);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 engineLibrary]);
  unsigned int v10 = [v9 containerHasBeenWiped];

  if (v10) {
    [*(id *)(a1 + 32) _failAllFutureOperationsWithContainerHasBeenWipedError];
  }
  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(result[4] + 32LL) = 0;
  if (os_variant_has_internal_content("com.apple.cpl.operationgroups"))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 stringForKey:@"CPLRejectVideoStreamingIntents"]);

    if (v12)
    {
      uint64_t v56 = a1;
      __int128 v58 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
      id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v61 = 0u;
      __int128 v62 = 0u;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v12 componentsSeparatedByString:@","]);
      id v15 = [obj countByEnumeratingWithState:&v61 objects:v66 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v62;
        do
        {
          for (i = 0LL; i != v16; i = (char *)i + 1)
          {
            if (*(void *)v62 != v17) {
              objc_enumerationMutation(obj);
            }
            unsigned __int8 v19 = *(void **)(*((void *)&v61 + 1) + 8LL * (void)i);
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 stringByTrimmingCharactersInSet:v13]);
            unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([&off_10025C770 objectForKeyedSubscript:v20]);
            uint64_t v22 = v21;
            if (v21)
            {
              -[NSMutableIndexSet addIndex:](v58, "addIndex:", [v21 unsignedIntegerValue]);
              -[NSMutableArray addObject:](v14, "addObject:", v20);
            }

            else if (!_CPLSilentLogging)
            {
              id v23 = v14;
              id v24 = sub_10007B4F8();
              unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf) = 138412290;
                *(void *)((char *)&buf + 4) = v19;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Invalid intent name: %@",  (uint8_t *)&buf,  0xCu);
              }

              id v14 = v23;
            }
          }

          id v16 = [obj countByEnumeratingWithState:&v61 objects:v66 count:16];
        }

        while (v16);
      }

      a1 = v56;
      if (-[NSMutableArray count](v14, "count"))
      {
        objc_storeStrong((id *)(*(void *)(v56 + 32) + 56LL), v14);
        *(_BYTE *)(*(void *)(v56 + 32) + ++*(void *)(result[4] + 32LL) = 1;
        objc_storeStrong((id *)(*(void *)(v56 + 32) + 40LL), v58);
        id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
        *(_BYTE *)(*(void *)(v56 + 32) + 48) = [v26 BOOLForKey:@"CPLRejectVideoStreamingAtContentLevel"];

        if (!_CPLSilentLogging)
        {
          id v27 = sub_10007B4F8();
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            id v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v14, "componentsJoinedByString:", @", "));
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Will automatically reject video streaming for the following intents: %@",  (uint8_t *)&buf,  0xCu);
          }
        }
      }
    }

    if (!*(void *)(*(void *)(a1 + 32) + 64LL))
    {
      uint64_t v30 = objc_alloc(&OBJC_CLASS___CPLCloudKitOperationGroupMapper);
      id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 clientLibraryBaseURL]);
      unsigned int v33 = -[CPLCloudKitOperationGroupMapper initWithMappingInFolderWithURL:]( v30,  "initWithMappingInFolderWithURL:",  v32);
      uint64_t v34 = *(void *)(a1 + 32);
      unsigned int v35 = *(void **)(v34 + 64);
      *(void *)(v34 + 64) = v33;
    }
  }

  id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
  __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 cloudLibraryResourceStorageURL]);

  uint64_t v38 = objc_claimAutoreleasedReturnValue([v37 URLByAppendingPathComponent:@"CloudKit" isDirectory:1]);
  uint64_t v39 = *(void *)(a1 + 32);
  uint64_t v40 = *(void **)(v39 + 184);
  *(void *)(v39 + 184) = v38;

  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v41 removeItemAtURL:*(void *)(*(void *)(a1 + 32) + 184) error:0];

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v43 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472LL;
  v59[2] = sub_10007B538;
  v59[3] = &unk_10023DC70;
  id v44 = v37;
  id v60 = v44;
  uint64_t v45 = v59;
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472LL;
  v68 = sub_10008551C;
  v69 = &unk_10023DBC8;
  id v70 = v45;
  dispatch_block_t v46 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &buf);
  dispatch_async(v43, v46);

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "registerClient:");
  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) duetTicketProvider]);
  [v47 addBudgetDelegate:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) _updateBudgets];
  id v48 = *(void **)(a1 + 32);
  if (!v48[27])
  {
    uint64_t v49 = objc_claimAutoreleasedReturnValue(+[CPLFingerprintContext sharedContext](&OBJC_CLASS___CPLFingerprintContext, "sharedContext"));
    uint64_t v50 = *(void *)(a1 + 32);
    __int16 v51 = *(void **)(v50 + 216);
    *(void *)(v50 + 216) = v49;

    id v48 = *(void **)(a1 + 32);
  }

  if (!v48[28])
  {
    uint64_t v52 = objc_claimAutoreleasedReturnValue( +[CPLCloudKitDefaultZoneManager sharedInstance]( &OBJC_CLASS___CPLCloudKitDefaultZoneManager,  "sharedInstance"));
    uint64_t v53 = *(void *)(a1 + 32);
    id v54 = *(void **)(v53 + 224);
    *(void *)(v53 + 224) = v52;

    id v48 = *(void **)(a1 + 32);
  }

  [v48 setOpened:1];
  +[CPLCallObserver observeAsyncCallOn:selector:block:]( &OBJC_CLASS___CPLCallObserver,  "observeAsyncCallOn:selector:block:");
  uint64_t v55 = *(void *)(a1 + 40);
  if (v55) {
    (*(void (**)(uint64_t, void))(v55 + 16))(v55, 0LL);
  }
}

void sub_10007B420(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4[13])
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10007B4F8();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned int v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CloudKit identity has changed - informing scheduler",  v10,  2u);
      }

      uint64_t v4 = *(void **)(a1 + 32);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 abstractObject]);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 engineLibrary]);
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 scheduler]);
    [v9 noteServerMightBeAvailableNow];
  }
}

id sub_10007B4F8()
{
  if (qword_1002963B0 != -1) {
    dispatch_once(&qword_1002963B0, &stru_100241900);
  }
  return (id)qword_1002963B8;
}

void sub_10007B538(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) URLByAppendingPathComponent:@"TempCKAssetsForUpload" isDirectory:1]);
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v1 removeItemAtURL:v2 error:0];
}

void sub_10007B59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10007B618;
  v6[3] = &unk_10023DDE8;
  uint64_t v4 = *(void **)(a1 + 32);
  id v7 = v3;
  __int128 v8 = v4;
  id v5 = v3;
  [v4 _startWatchingAccountInfoChangesWithCompletionHandler:v6];
}

id sub_10007B618(uint64_t a1)
{
  return [*(id *)(a1 + 40) opened];
}

void sub_10007B738(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0LL;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "unregisterClient:");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) duetTicketProvider]);
  [v4 removeBudgetDelegate:*(void *)(a1 + 32)];

  if (*(_BYTE *)(a1 + 48)) {
    [*(id *)(*(void *)(a1 + 32) + 200) unregister];
  }
  [*(id *)(a1 + 32) setOpened:0];
  id v5 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(*(void *)(a1 + 32) + 176) count]);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v6 = *(id *)(*(void *)(a1 + 32) + 176LL);
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:*(void *)(*((void *)&v22 + 1) + 8 * (void)i)]);
        -[NSMutableArray addObject:](v5, "addObject:", v11);
      }

      id v8 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v8);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 168);
  *(void *)(v12 + 16_Block_object_dispose((const void *)(v16 - 152), 8) = 0LL;

  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 176);
  *(void *)(v14 + 176) = 0LL;

  id v16 = *(void **)(a1 + 40);
  uint64_t v17 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10007B9A0;
  v19[3] = &unk_10023E058;
  id v20 = v5;
  id v21 = v16;
  id v18 = v5;
  [v17 cancelAllOperationsWithCompletionHandler:v19];
}

uint64_t sub_10007B9A0(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "shutdown", (void)v8);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_10007D4A8(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CKServerChangeToken);
  id v3 = -[NSSet initWithObjects:](v1, "initWithObjects:", v2, objc_opt_class(&OBJC_CLASS___CKQueryCursor), 0LL);
  id v4 = (void *)qword_100296370;
  qword_100296370 = (uint64_t)v3;
}

void sub_10007D73C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 248LL);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v2)
    {
      if (_CPLSilentLogging) {
        return;
      }
      id v3 = sub_10007B4F8();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      LOWORD(v17) = 0;
      uint64_t v5 = "Attempting to set significant work pending, when we were already marked as pending significant work";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v17, 2u);
LABEL_21:

      return;
    }

    if (!_CPLSilentLogging)
    {
      id v11 = sub_10007B4F8();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Setting significant work pending",  (uint8_t *)&v17,  2u);
      }
    }

    id v13 = objc_alloc_init(&OBJC_CLASS___NSDate);
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = *(void **)(v14 + 248);
    *(void *)(v14 + 24_Block_object_dispose((const void *)(v16 - 152), 8) = v13;

    [*(id *)(a1 + 40) pushSignificantWorkIsPending];
  }

  else
  {
    if (!v2)
    {
      if (_CPLSilentLogging) {
        return;
      }
      id v16 = sub_10007B4F8();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      LOWORD(v17) = 0;
      uint64_t v5 = "Attempting to set not pending significant work when we were already marked as not pending significant work";
      goto LABEL_20;
    }

    if (!_CPLSilentLogging)
    {
      id v6 = sub_10007B4F8();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        [*(id *)(*(void *)(a1 + 32) + 248) timeIntervalSinceNow];
        int v17 = 134217984;
        double v18 = -v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Setting significant work not pending, had been set for %.02fs",  (uint8_t *)&v17,  0xCu);
      }
    }

    [*(id *)(a1 + 40) popSignificantWorkIsPending];
    uint64_t v9 = *(void *)(a1 + 32);
    __int128 v10 = *(void **)(v9 + 248);
    *(void *)(v9 + 24_Block_object_dispose((const void *)(v16 - 152), 8) = 0LL;
  }

void sub_10007DA38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors notImplementedError](&OBJC_CLASS___CPLErrors, "notImplementedError"));
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
}

uint64_t sub_10007FC3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007FD9C(id a1)
{
  uint64_t v1 = _CPLArrayFromColonSeparatedList(@"cloudd:nsurlsessiond");
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)qword_100296378;
  qword_100296378 = v2;
}

void sub_10007FE1C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"CPLAllowsSyncOverCellular"]);

  uint64_t v2 = v4;
  if (v4)
  {
    unsigned __int8 v3 = [v4 BOOLValue];
    uint64_t v2 = v4;
  }

  else
  {
    unsigned __int8 v3 = byte_100290CE0 != 0;
  }

  byte_100290CE0 = v3;
}

void sub_10007FED4(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"CPLAllowsSyncOverExpensiveNetwork"]);

  uint64_t v2 = v4;
  if (v4)
  {
    unsigned __int8 v3 = [v4 BOOLValue];
    uint64_t v2 = v4;
  }

  else
  {
    unsigned __int8 v3 = byte_100290CE1 != 0;
  }

  byte_100290CE1 = v3;
}

void sub_10007FF8C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"CPLAllowsOperationsOverExpensiveNetwork"]);

  uint64_t v2 = v4;
  if (v4)
  {
    unsigned __int8 v3 = [v4 BOOLValue];
    uint64_t v2 = v4;
  }

  else
  {
    unsigned __int8 v3 = byte_100290CE2 != 0;
  }

  byte_100290CE2 = v3;
}

void sub_1000800E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4[14])
  {
    if (!_CPLSilentLogging)
    {
      id v5 = sub_10007B4F8();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v7 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received account change notification",  v7,  2u);
      }

      id v4 = *(void **)(a1 + 32);
    }

    [v4 _updateAccountInfoWithCompletionHandler:0];
  }
}

void sub_1000803E4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = a1[4];
  __int128 v10 = (void *)a1[5];
  id v11 = *(void **)(v9 + 8);
  v18[2] = sub_100080518;
  v18[3] = &unk_100241708;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  uint64_t v12 = a1[6];
  v18[4] = v9;
  id v19 = v8;
  uint64_t v22 = v12;
  uint64_t v23 = a2;
  id v20 = v7;
  id v21 = v10;
  id v13 = v18;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008551C;
  block[3] = &unk_10023DBC8;
  id v25 = v13;
  uint64_t v14 = v11;
  id v15 = v7;
  id v16 = v8;
  dispatch_block_t v17 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v14, v17);
}

uint64_t sub_100080518(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    if (_CPLSilentLogging) {
      goto LABEL_18;
    }
    id v4 = sub_10007B4F8();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    uint64_t v6 = *(void *)(a1 + 40);
    int v18 = 138412290;
    uint64_t v19 = v6;
    id v7 = "Fetching account info failed: %@";
    id v8 = v5;
    uint32_t v9 = 12;
    goto LABEL_8;
  }

  if (*(void *)(a1 + 48))
  {
    if (os_variant_has_internal_content("com.apple.cpl.walrus"))
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"CPLWalrusEnabled"]);
    }

    else
    {
      id v5 = 0LL;
    }

    [*(id *)(a1 + 32) _updateStateWithAccountInfo:*(void *)(a1 + 48) walrusEnabledDefault:v5];
    [*(id *)(a1 + 32) _updateStateWithAccountStatus:*(void *)(a1 + 72)];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 engineLibrary]);
    objc_msgSend( v13,  "setICloudLibraryClientIsNotAuthenticated:",  objc_msgSend(*(id *)(a1 + 48), "hasValidCredentials") ^ 1);

    uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 160);
    *(void *)(v15 + 160) = v14;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144LL), *(id *)(a1 + 48));
    *(void *)(*(void *)(a1 + 32) + 152LL) = *(void *)(a1 + 72);
    goto LABEL_17;
  }

  if (_CPLSilentLogging) {
    goto LABEL_18;
  }
  id v11 = sub_10007B4F8();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v1_Block_object_dispose((const void *)(v16 - 152), 8) = 0;
    id v7 = "Fetching account info returned no info";
    id v8 = v5;
    uint32_t v9 = 2;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v18, v9);
  }

void sub_1000811EC(id *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:v8]);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] _betterErrorForRecordId:v8 recordError:v5]);
    [a1[5] setObject:v7 forKey:v6];
  }
}

void sub_100081318(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8LL);
  void v10[2] = sub_100081418;
  v10[3] = &unk_10023EA48;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  id v11 = v3;
  id v12 = v4;
  void v10[4] = *(void *)(a1 + 32);
  uint64_t v6 = v10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008551C;
  block[3] = &unk_10023DBC8;
  id v14 = v6;
  id v7 = v5;
  id v8 = v3;
  dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v7, v9);
}

void sub_100081418(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  unsigned int v3 = [v2 BOOLForKey:@"CPLUseCompactCloudKitStatus"];

  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v60 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) status]);
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v60, 0LL);
  }

  else
  {
    id v60 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v5 = -[NSMutableArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithObjects:",  *(void *)(a1 + 40),  0LL);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errorForAllOperations]);
    if (v6)
    {
      id v7 = objc_alloc(&OBJC_CLASS___NSString);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      dispatch_block_t v9 = -[NSString initWithFormat:](v7, "initWithFormat:", @"Failing all operations with error: %@", v8);
      -[NSMutableArray addObject:](v5, "addObject:", v9);
    }

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fingerprintContext]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 fingerprintSchemeForNewMasterAsset]);

    uint64_t v56 = v11;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 fingerprintSchemeDescription]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Default fingerprint scheme: %@",  v12));
    -[NSMutableArray addObject:](v5, "addObject:", v13);

    else {
      id v14 = @"NO";
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"EPP capable: %@",  v14));
    -[NSMutableArray addObject:](v5, "addObject:", v15);

    -[NSMutableArray addObject:](v5, "addObject:", @"Account status:");
    if (*(void *)(*(void *)(a1 + 32) + 144LL))
    {
      id v16 = objc_alloc(&OBJC_CLASS___NSString);
      else {
        dispatch_block_t v17 = @"NO";
      }
      int v18 = -[NSString initWithFormat:](v16, "initWithFormat:", @"  has valid credentials: %@", v17);
      -[NSMutableArray addObject:](v5, "addObject:", v18);

      uint64_t v19 = objc_alloc(&OBJC_CLASS___NSString);
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringFromDateAgo:now:]( &OBJC_CLASS___CPLDateFormatter,  "stringFromDateAgo:now:",  *(void *)(*(void *)(a1 + 32) + 160LL),  v60));
      id v21 = -[NSString initWithFormat:](v19, "initWithFormat:", @"  last account info update request: %@", v20);
      -[NSMutableArray addObject:](v5, "addObject:", v21);
    }

    else
    {
      -[NSMutableArray addObject:](v5, "addObject:", @"  Waiting for Account Info");
    }

    uint64_t v22 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) reschedulerDescription]);
    if (v22)
    {
      uint64_t v23 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Background scheduling: %@",  v22);
      -[NSMutableArray addObject:](v5, "addObject:", v23);
    }

    __int128 v58 = (void *)v22;
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) taskStatusesWithNow:v60]);
    if ([v24 count])
    {
      id v25 = objc_alloc(&OBJC_CLASS___NSString);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v24 componentsJoinedByString:@"\n  "]);
      id v27 = -[NSString initWithFormat:](v25, "initWithFormat:", @"Tasks:\n  %@", v26);
      -[NSMutableArray addObject:](v5, "addObject:", v27);
    }

    __int128 v59 = v6;
    id v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) duetTicketProvider]);
    if (v57)
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) duetTicketProvider]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 duetStatuses]);

      if ([v29 count])
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 componentsJoinedByString:@"\n  "]);
        id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"CoreDuet State:\n  %@",  v30));
        -[NSMutableArray addObject:](v5, "addObject:", v31);
      }
    }

    else
    {
      -[NSMutableArray addObject:](v5, "addObject:", @"CoreDuet State: not supported for this engine");
    }

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) status]);
    -[NSMutableArray addObject:](v5, "addObject:", v32);

    unsigned int v33 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitFakeDynamicDerivatives fakeDerivativesDescription]( &OBJC_CLASS___CPLCloudKitFakeDynamicDerivatives,  "fakeDerivativesDescription"));
    if (v33)
    {
      uint64_t v34 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Fake derivatives: %@",  v33);
      -[NSMutableArray addObject:](v5, "addObject:", v34);
    }

    if (CPLCloudKitUseGateKeeper())
    {
      else {
        unsigned int v35 = off_100241950[CPLCloudKitGateKeeperDefaultDownloadType];
      }
    }

    else if (CPLCloudKitGateKeeperDisabledByServer())
    {
      unsigned int v35 = @"DDC: Off (disabled by server)";
    }

    else
    {
      unsigned int v35 = @"DDC: Off";
    }

    -[NSMutableArray addObject:](v5, "addObject:", v35);
    id v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) statusWithIndent:@"  "]);
    if (v36)
    {
      __int128 v37 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Resource downloads:\n  %@",  v36);
      -[NSMutableArray addObject:](v5, "addObject:", v37);
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) statusWithIndent:@"  "]);
    if (v38)
    {
      uint64_t v39 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Compute state operations:\n  %@",  v38);
      -[NSMutableArray addObject:](v5, "addObject:", v39);
    }

    uint64_t v40 = *(void **)(*(void *)(a1 + 32) + 64LL);
    if (v40)
    {
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 mappingList]);
      if ([v41 count])
      {
        uint64_t v42 = objc_alloc(&OBJC_CLASS___NSString);
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v41 componentsJoinedByString:@"\n  "]);
        id v44 = -[NSString initWithFormat:](v42, "initWithFormat:", @"Group mapping:\n  %@", v43);
        -[NSMutableArray addObject:](v5, "addObject:", v44);
      }
    }

    -[NSMutableArray addObject:](v5, "addObject:", @"Video streaming:");
    uint64_t v45 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v45 + 32))
    {
      dispatch_block_t v46 = objc_alloc(&OBJC_CLASS___NSString);
      __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "componentsJoinedByString:", @", "));
      id v48 = -[NSString initWithFormat:](v46, "initWithFormat:", @"  automatically reject %@", v47);
      -[NSMutableArray addObject:](v5, "addObject:", v48);

      uint64_t v45 = *(void *)(a1 + 32);
    }

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v45 + 72) status]);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) statusWithIndent:@"    "]);
    __int16 v51 = objc_alloc(&OBJC_CLASS___NSString);
    if (v50) {
      uint64_t v52 = -[NSString initWithFormat:](v51, "initWithFormat:", @"  cache: %@\n  requests:\n    %@", v49, v50);
    }
    else {
      uint64_t v52 = -[NSString initWithFormat:](v51, "initWithFormat:", @"  cache: %@", v49, v55);
    }
    uint64_t v53 = v52;
    -[NSMutableArray addObject:](v5, "addObject:", v52);

    id v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v5, "componentsJoinedByString:", @"\n"));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100081C9C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) statusDictionary]);
  id v2 = [v5 mutableCopy];
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) duetTicketProvider]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 duetStatuses]);

  if ([v4 count]) {
    [v2 setObject:v4 forKeyedSubscript:@"duet"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100081F40(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100081FAC;
  v2[3] = &unk_10023DBC8;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _updateAccountInfoWithCompletionHandler:v2];
}

uint64_t sub_100081FAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000820DC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"CPLDelayRecoveredDataClean"]);

  id v2 = v4;
  if (v4)
  {
    if ((objc_opt_respondsToSelector(v4, "BOOLValue") & 1) != 0) {
      unsigned __int8 v3 = [v4 BOOLValue];
    }
    else {
      unsigned __int8 v3 = 1;
    }
    id v2 = v4;
  }

  else
  {
    unsigned __int8 v3 = 1;
  }

  byte_1002963A0 = v3;
}

void sub_100082168(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v2 removeItemAtURL:*(void *)(a1 + 32) error:0];
}

void sub_100082588(uint64_t a1)
{
  if ([*(id *)(a1 + 32) opened])
  {
    if (!_CPLSilentLogging)
    {
      id v2 = sub_10007B4F8();
      unsigned __int8 v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(objc_class **)(a1 + 40);
        uint64_t v5 = *(void *)(a1 + 48);
        uint64_t v6 = @"Unknown record type";
        if (*(void *)(a1 + 56)) {
          uint64_t v6 = *(const __CFString **)(a1 + 56);
        }
        *(_DWORD *)__int128 buf = 138412802;
        v75 = v4;
        __int16 v76 = 2112;
        uint64_t v77 = v5;
        __int16 v78 = 2112;
        id v79 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CloudKit Data Recovery is looking for CKAsset stored in %@.%@ (%@)",  buf,  0x20u);
      }
    }

    if ([*(id *)(a1 + 48) isEqualToString:@"previewData"])
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordName]);
      unsigned int v8 = [v7 isEqualToString:@"cmm-root"];

      if (v8)
      {
        dispatch_block_t v9 = *(void **)(a1 + 32);
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeIdentifierFromZoneID:v10]);

        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472LL;
        v70[2] = sub_100082D44;
        v70[3] = &unk_1002417F0;
        v70[4] = *(void *)(a1 + 32);
        id v73 = *(id *)(a1 + 80);
        id v71 = *(id *)(a1 + 64);
        id v72 = v11;
        id v13 = v11;
        [v12 provideScopeChangeForScopeWithIdentifier:v13 completionHandler:v70];

        return;
      }
    }

    if (([*(id *)(a1 + 48) isEqualToString:@"resFaceCropRes"] & 1) != 0
      || [*(id *)(a1 + 48) isEqualToString:@"resCustomUserAssetList"])
    {
      unsigned int v18 = [*(id *)(a1 + 48) isEqualToString:@"resFaceCropRes"];
      uint64_t v19 = *(void *)(a1 + 56);
      if (v18)
      {
        if (v19) {
          id v20 = +[CKRecord cpl_recordChangeClassForRecordType:]( &OBJC_CLASS___CKRecord,  "cpl_recordChangeClassForRecordType:");
        }
        else {
          id v20 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLFaceCropChange);
        }
        __int128 v37 = v20;
        id v38 = -[objc_class isSubclassOfClass:]( v20,  "isSubclassOfClass:",  objc_opt_class(&OBJC_CLASS___CPLFaceCropChange));
        if ((v38 & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            uint64_t v39 = __CPLGenericOSLogDomain(v38);
            uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              uint64_t v41 = *(void *)(a1 + 56);
              *(_DWORD *)__int128 buf = 138412546;
              v75 = v37;
              __int16 v76 = 2112;
              uint64_t v77 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "Invalid record class %@ for record type %@",  buf,  0x16u);
            }
          }

          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
          uint64_t v43 = *(void *)(a1 + 88);
          uint64_t v44 = *(void *)(a1 + 32);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Cl oudKit/CPLCloudKitTransport.m"));
          [v42 handleFailureInMethod:v43, v44, v45, 2034, @"Invalid record class %@ for record type %@", v37, *(void *)(a1 + 56) object file lineNumber description];
          goto LABEL_45;
        }
      }

      else
      {
        if (v19) {
          id v21 = +[CKRecord cpl_recordChangeClassForRecordType:]( &OBJC_CLASS___CKRecord,  "cpl_recordChangeClassForRecordType:");
        }
        else {
          id v21 = (objc_class *)objc_opt_class(&OBJC_CLASS___CPLMemoryChange);
        }
        __int128 v37 = v21;
        id v46 = -[objc_class isSubclassOfClass:](v21, "isSubclassOfClass:", objc_opt_class(&OBJC_CLASS___CPLMemoryChange));
        if ((v46 & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            uint64_t v56 = __CPLGenericOSLogDomain(v46);
            id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
              uint64_t v58 = *(void *)(a1 + 56);
              *(_DWORD *)__int128 buf = 138412546;
              v75 = v37;
              __int16 v76 = 2112;
              uint64_t v77 = v58;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "Invalid record class %@ for record type %@",  buf,  0x16u);
            }
          }

          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
          uint64_t v59 = *(void *)(a1 + 88);
          uint64_t v60 = *(void *)(a1 + 32);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "/Library/Caches/com.apple.xbs/Sources/Photos/workspaces/cloudphotolibrary/Implementations/Cl oudKit/CPLCloudKitTransport.m"));
          [v42 handleFailureInMethod:v59, v60, v45, 2039, @"Invalid record class %@ for record type %@", v37, *(void *)(a1 + 56) object file lineNumber description];
LABEL_45:

          abort();
        }
      }

      __int16 v47 = *(void **)(a1 + 32);
      id v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v47 scopeIdentifierFromZoneID:v48]);

      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordName]);
      __int16 v51 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:",  v49,  v50);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472LL;
      v65[2] = sub_100083170;
      v65[3] = &unk_100241840;
      v65[4] = *(void *)(a1 + 32);
      id v68 = *(id *)(a1 + 80);
      v69 = v37;
      id v66 = *(id *)(a1 + 56);
      id v67 = *(id *)(a1 + 64);
      [v52 provideRecordWithCloudScopeIdentifier:v51 completionHandler:v65];
    }

    else
    {
      uint64_t v22 = sub_100089740((uint64_t)&OBJC_CLASS___CPLCloudKitResourceKeys, *(void **)(a1 + 48));
      if (v22)
      {
        uint64_t v23 = v22;
        __int128 v24 = *(void **)(a1 + 32);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue([v24 scopeIdentifierFromZoneID:v25]);

        id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordName]);
        uint64_t v28 = -[CPLScopedIdentifier initWithScopeIdentifier:identifier:]( objc_alloc(&OBJC_CLASS___CPLScopedIdentifier),  "initWithScopeIdentifier:identifier:",  v26,  v27);
        id v29 = objc_alloc_init(&OBJC_CLASS___CPLResourceIdentity);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[CKAsset cplFingerPrintForSignature:]( &OBJC_CLASS___CKAsset,  "cplFingerPrintForSignature:",  *(void *)(a1 + 72)));
        -[CPLResourceIdentity setFingerPrint:](v29, "setFingerPrint:", v30);

        id v31 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _tempDestinationURLForRecoveredDataWithTempFolderURL:*(void *)(a1 + 64)]);
        -[CPLResourceIdentity setFileURL:](v29, "setFileURL:", v31);
        uint64_t v32 = -[CPLResource initWithResourceIdentity:itemScopedIdentifier:resourceType:]( objc_alloc(&OBJC_CLASS___CPLResource),  "initWithResourceIdentity:itemScopedIdentifier:resourceType:",  v29,  v28,  v23);
        unsigned int v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineLibrary]);
        v61[0] = _NSConcreteStackBlock;
        v61[1] = 3221225472LL;
        v61[2] = sub_100083658;
        v61[3] = &unk_100241890;
        v61[4] = *(void *)(a1 + 32);
        id v34 = *(id *)(a1 + 80);
        uint64_t v35 = *(void *)(a1 + 88);
        id v63 = v34;
        uint64_t v64 = v35;
        id v62 = v31;
        id v36 = v31;
        [v33 provideCloudResource:v32 completionHandler:v61];
      }

      else
      {
        if (_CPLSilentLogging) {
          return;
        }
        id v53 = sub_10007B4F8();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          id v54 = *(objc_class **)(a1 + 40);
          uint64_t v55 = *(void *)(a1 + 56);
          *(_DWORD *)__int128 buf = 138412546;
          v75 = v54;
          __int16 v76 = 2112;
          uint64_t v77 = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "CloudKit asked to recover %@.%@ but CPL does not know how to recover this kind of data",  buf,  0x16u);
        }
      }
    }
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v14 = sub_10007B4F8();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *(objc_class **)(a1 + 40);
        uint64_t v17 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412546;
        v75 = v16;
        __int16 v76 = 2112;
        uint64_t v77 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CloudKit requested CKAsset for %@.%@ but transport is closed. Should try later",  buf,  0x16u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

void sub_100082D44(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100082E7C;
  v13[3] = &unk_1002417C8;
  uint64_t v19 = a3;
  id v18 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  unsigned int v8 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  dispatch_block_t v9 = v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008551C;
  block[3] = &unk_10023DBC8;
  id v21 = v9;
  __int128 v10 = v6;
  id v11 = v5;
  dispatch_block_t v12 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v12);
}

void sub_100082E7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    if (v2 == 2)
    {
      unsigned __int8 v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
    }

    else
    {
      if (v2 != 1) {
        return;
      }
      unsigned __int8 v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
    }

    v3();
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___CPLMomentShareScopeChange);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0
      && (uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) previewImageData])) != 0)
    {
      uint64_t v7 = (void *)v6;
      unsigned int v8 = *(void **)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100083070;
      v14[3] = &unk_1002417A0;
      id v15 = *(id *)(a1 + 64);
      [v8 _withTempCKAssetForData:v7 tempFolderURL:v9 block:v14];
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v10 = sub_10007B4F8();
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *(void *)(a1 + 56);
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v17 = v12;
          __int16 v18 = 2112;
          uint64_t v19 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to find preview data in %@'s scope change: %@",  buf,  0x16u);
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }

void sub_100083070(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_10007B4F8();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = 138412290;
        id v11 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to create CMM preview data on disk for recovery: %@",  (uint8_t *)&v10,  0xCu);
      }
    }

    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
}

void sub_100083170(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000832B4;
  v14[3] = &unk_100241818;
  uint64_t v20 = a3;
  id v7 = *(id *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  id v19 = v7;
  id v15 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v16 = v8;
  uint64_t v17 = v9;
  id v18 = *(id *)(a1 + 48);
  int v10 = v14;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008551C;
  block[3] = &unk_10023DBC8;
  id v23 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v11, v13);
}

void sub_1000832B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  switch(v2)
  {
    case 0LL:
      uint64_t v4 = *(void *)(a1 + 80);
      if (v4)
      {
        if ((objc_opt_isKindOfClass(*(void *)(a1 + 32), v4) & 1) == 0)
        {
          if (!_CPLSilentLogging)
          {
            id v12 = sub_10007B4F8();
            dispatch_block_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              uint64_t v15 = *(void *)(a1 + 32);
              uint64_t v14 = *(void *)(a1 + 40);
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v22 = v14;
              __int16 v23 = 2112;
              uint64_t v24 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "CloudKit asked for a field for a record of type %@ but received %@",  buf,  0x16u);
            }
          }

          (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
          return;
        }

        uint64_t v5 = *(void *)(a1 + 80);
      }

      else
      {
        uint64_t v5 = 0LL;
      }

      uint64_t v6 = objc_opt_class(&OBJC_CLASS___CPLFaceCropChange);
      id v7 = *(void **)(a1 + 32);
      if (v5 == v6)
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 resourceData]);
        if (v9) {
          goto LABEL_13;
        }
      }

      else
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 customUserAssetList]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 data]);

        if (v9)
        {
LABEL_13:
          int v10 = *(void **)(a1 + 48);
          uint64_t v11 = *(void *)(a1 + 56);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472LL;
          v19[2] = sub_100083558;
          v19[3] = &unk_1002417A0;
          id v20 = *(id *)(a1 + 64);
          [v10 _withTempCKAssetForData:v9 tempFolderURL:v11 block:v19];

LABEL_25:
          return;
        }
      }

      if (!_CPLSilentLogging)
      {
        id v16 = sub_10007B4F8();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v22 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to find resource data in %@",  buf,  0xCu);
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      goto LABEL_25;
    case 2LL:
      unsigned __int8 v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
      break;
    case 1LL:
      unsigned __int8 v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
      break;
    default:
      return;
  }

  v3();
}

void sub_100083558(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v8 = sub_10007B4F8();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = 138412290;
        id v11 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to create resource data on disk for recovery: %@",  (uint8_t *)&v10,  0xCu);
      }
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
}

void sub_100083658(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100083784;
  v15[3] = &unk_100241868;
  uint64_t v20 = a3;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v19 = v7;
  uint64_t v21 = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(void **)(a1 + 40);
  id v16 = v5;
  uint64_t v17 = v9;
  id v18 = v10;
  id v11 = v15;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008551C;
  block[3] = &unk_10023DBC8;
  id v23 = v11;
  id v12 = v6;
  id v13 = v5;
  dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v12, v14);
}

id sub_100083784(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    if (v2 == 2)
    {
      unsigned __int8 v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
      goto LABEL_8;
    }

    if (v2 == 1)
    {
      unsigned __int8 v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
LABEL_8:
      v3();
    }
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identity]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 fileURL]);

    if (!v5) {
      sub_100196034((void *)(a1 + 32), a1);
    }
    id v6 = -[CKAsset initWithFileURL:](objc_alloc(&OBJC_CLASS___CKAsset), "initWithFileURL:", v5);
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  return [*(id *)(a1 + 40) _cleanTempRecoveredDataURL:*(void *)(a1 + 48)];
}

void sub_10008399C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned __int8 v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100083A78;
    v9[3] = &unk_100240470;
    id v10 = *(id *)(a1 + 80);
    [v3 _coordinator:v4 provideCKAssetWithRecordID:v5 fieldName:v6 recordType:v7 signature:v8 tempFolderURL:a2 completionHandler:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

uint64_t sub_100083A78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100083B44(uint64_t a1)
{
  if ([*(id *)(a1 + 32) opened])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    id v6 = (id)objc_claimAutoreleasedReturnValue([v2 engineLibrary]);

    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v6 scheduler]);
    [v3 noteServerHasChanges];

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 supervisor]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
    [v4 transportNotedServerHasChanges:v5];
  }

id sub_100084244(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([v2 engineLibrary]);
  [v3 setContainerHasBeenWiped:1];

  return [*(id *)(a1 + 32) _failAllFutureOperationsWithContainerHasBeenWipedError];
}

void sub_1000846B8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) abstractObject]);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v2 engineLibrary]);
  [v1 setICloudLibraryClientVersionTooOld:1];
}

void *sub_100084704(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[14]) {
    return _[result _forceUpdateAccountInfoWithReason:@"Walrus has been enabled"];
  }
  return result;
}

id sub_100084A88(void *a1)
{
  id v2 = a1 + 4;
  unsigned __int8 v3 = *(void **)(a1[4] + 168LL);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:a1[5]]);

    if (v4) {
      sub_100196124(a1 + 5, (uint64_t)a1, v2);
    }
  }

  else
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v6 = *(void **)(*v2 + 168);
    *(void *)(*v2 + 16_Block_object_dispose((const void *)(v16 - 152), 8) = v5;
  }

  return [*(id *)(a1[4] + 168) setObject:a1[6] forKeyedSubscript:a1[5]];
}

void sub_100084C34(uint64_t a1)
{
  if ([*(id *)(a1 + 32) opened])
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    if (v9)
    {
      id v2 = *(void **)(*(void *)(a1 + 32) + 176LL);
      if (!v2)
      {
        unsigned __int8 v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void **)(v4 + 176);
        *(void *)(v4 + 176) = v3;

        id v2 = *(void **)(*(void *)(a1 + 32) + 176LL);
      }

      if (([v2 containsObject:*(void *)(a1 + 40)] & 1) == 0)
      {
        [*(id *)(*(void *)(a1 + 32) + 176) addObject:*(void *)(a1 + 40)];
        [v9 start];
      }

      (*(void (**)(void, id, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v9, 0LL);
    }

    else
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors notImplementedError](&OBJC_CLASS___CPLErrors, "notImplementedError"));
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectMachineStateErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "incorrectMachineStateErrorWithReason:",  @"Engine is closed"));
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v9);
  }
}

void sub_100084E70(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned __int8 v3 = v2;
  uint64_t v4 = a1[4];
  if (!*(_BYTE *)(v4 + 192))
  {
    uint64_t v5 = *(void *)(v4 + 184);
    id v28 = 0LL;
    unsigned __int8 v6 = [v2 createDirectoryAtURL:v5 withIntermediateDirectories:0 attributes:0 error:&v28];
    id v7 = v28;
    uint64_t v8 = v7;
    if ((v6 & 1) == 0)
    {
      if (!_CPLSilentLogging)
      {
        id v20 = sub_10007B4F8();
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 184) path]);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v30 = v22;
          __int16 v31 = 2112;
          id v32 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to create temp folder %@: %@",  buf,  0x16u);
        }
      }

      id v18 = *(void (**)(void))(a1[6] + 16LL);
      goto LABEL_22;
    }

    *(_BYTE *)(a1[4] + 192LL) = 1;

    uint64_t v4 = a1[4];
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 184) URLByAppendingPathComponent:a1[5] isDirectory:1]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
  unsigned int v10 = [v3 fileExistsAtPath:v9 isDirectory:&v27];

  if (v10) {
    BOOL v11 = v27 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    id v18 = *(void (**)(void))(a1[6] + 16LL);
LABEL_22:
    v18();
    goto LABEL_29;
  }

  if (v10)
  {
    if (!_CPLSilentLogging)
    {
      id v12 = sub_10007B4F8();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        dispatch_block_t v14 = (void *)a1[5];
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v30 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Temp destination %{public}@ already exists and is not a folder",  buf,  0xCu);
      }
    }

    uint64_t v15 = a1[6];
    id v16 = (id)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
    uint64_t v17 = *(void (**)(void))(v15 + 16);
  }

  else
  {
    id v26 = 0LL;
    unsigned int v19 = [v3 createDirectoryAtURL:v8 withIntermediateDirectories:0 attributes:0 error:&v26];
    id v16 = v26;
    if (v19)
    {
      uint64_t v17 = *(void (**)(void))(a1[6] + 16LL);
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v23 = sub_10007B4F8();
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v25 = (void *)a1[5];
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v30 = v25;
          __int16 v31 = 2112;
          id v32 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Failed to create temp destination %{public}@: %@",  buf,  0x16u);
        }
      }

      uint64_t v17 = *(void (**)(void))(a1[6] + 16LL);
    }
  }

  v17();

LABEL_29:
}

void sub_10008551C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100085550(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit");
  unsigned __int8 v3 = (void *)qword_1002963B8;
  qword_1002963B8 = (uint64_t)v2;
}

id sub_10008595C()
{
  if (qword_1002963C0 != -1) {
    dispatch_once(&qword_1002963C0, &stru_100241B20);
  }
  return (id)qword_1002963C8;
}

void sub_100085A14(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 272) cancelDownloadTask:*(void *)(a1 + 40)])
  {
    if (([*(id *)(*(void *)(a1 + 32) + 272) hasDownloadTasks] & 1) == 0)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentOperation]);
      [v7 cancel];
    }
  }

  else
  {
    unsigned __int8 v6 = (void (**)(id, void, void *))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completionHandler]);
    uint64_t v2 = *(void *)(a1 + 40);
    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors operationCancelledError](&OBJC_CLASS___CPLErrors, "operationCancelledError"));
    v6[2](v6, v2, v3);

    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 288LL);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100085B30;
    v8[3] = &unk_100241970;
    id v9 = v4;
    [v5 enumerateKeysAndObjectsUsingBlock:v8];
  }

id sub_100085B30(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 removeObject:*(void *)(a1 + 32)];
}

void sub_100085BF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        unsigned int v10 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v9 completionHandler]);
        ((void (**)(void, void *, void))v10)[2](v10, v9, *(void *)(a1 + 32));
      }

      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_100086078(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v16 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100086130(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100086180(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[4];
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v8]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:a1[5]]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:a1[6]]);

  (*(void (**)(uint64_t, id, void *, void *, id, void, id))(v7 + 16))(v7, v14, v12, v13, v10, 0LL, v9);
}

uint64_t sub_100086250(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100086BB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 cloudResource]);
  [*(id *)(a1 + 32) addResource:v7];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _recordIDForResourcesWithItemScopedIdentifier:v6]);
  [*(id *)(a1 + 48) setObject:v6 forKeyedSubscript:v8];

  [*(id *)(a1 + 56) setObject:v5 forKeyedSubscript:v8];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 cloudRecord]);

  if (!v9)
  {
    id v10 = *(void **)(*(void *)(a1 + 40) + 320LL);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 itemScopedIdentifier]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);

    if (v12) {
      [v5 associateCloudResource:v7 ofRecord:v12];
    }
  }

  if (!_CPLSilentLogging)
  {
    id v13 = sub_10008595C();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = sub_100089C34(*(void *)(a1 + 64));
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v5 cloudRecord]);
      id v18 = (void *)v17;
      unsigned int v19 = @"unknown record";
      int v20 = 138412802;
      uint64_t v21 = v7;
      if (v17) {
        unsigned int v19 = (const __CFString *)v17;
      }
      __int16 v22 = 2112;
      id v23 = v16;
      __int16 v24 = 2112;
      id v25 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Downloading %@ from %@ (from %@)",  (uint8_t *)&v20,  0x20u);
    }
  }
}

void sub_100086D9C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100086E5C;
  v8[3] = &unk_10023F338;
  id v6 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  uint64_t v11 = *(void *)(a1 + 32);
  double v13 = a3;
  id v12 = *(id *)(a1 + 48);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100086E5C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 48) + 272) resourceWithRecordScopedIdentifier:v2 didProgress:*(double *)(a1 + 64)];
  id v3 = *(id **)(a1 + 48);
  [v3[34] downloadProgress];
  objc_msgSend(v3, "updateProgress:");
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 272) cloudResourceForRecordWithScopedIdentifier:v2]);
  if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100086F54;
    v6[3] = &unk_10023EFC8;
    id v5 = *(void **)(a1 + 48);
    id v7 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    id v8 = v4;
    [v5 updateContextWithBlock:v6];
  }
}

id sub_100086F54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateProgress:*(void *)(a1 + 40) forResource:*(double *)(a1 + 48)];
}

void sub_100086F64(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a7;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_1000870C4;
  v24[3] = &unk_100241A38;
  id v18 = *(void **)(a1 + 32);
  id v25 = *(id *)(a1 + 40);
  id v26 = v16;
  uint64_t v27 = *(void *)(a1 + 32);
  id v28 = *(id *)(a1 + 48);
  id v29 = v17;
  id v30 = v13;
  id v31 = *(id *)(a1 + 56);
  id v32 = v14;
  id v33 = v15;
  uint64_t v34 = a6;
  id v19 = v15;
  id v20 = v14;
  id v21 = v13;
  id v22 = v17;
  id v23 = v16;
  [v18 dispatchAsync:v24];
}

void sub_1000870C4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 272) cloudResourceForRecordWithScopedIdentifier:v2]);
  if (v3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100087340;
    v13[3] = &unk_10023DE80;
    id v4 = *(void **)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    id v15 = v3;
    id v16 = *(id *)(a1 + 64);
    [v4 updateContextWithBlock:v13];
  }

  if (!_CPLSilentLogging)
  {
    id v5 = sub_10008595C();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 72);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got asset %@ - %@", buf, 0x16u);
    }
  }

  uint64_t v9 = *(void *)(a1 + 64);
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 272) resourceTypeDescription]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v9,  &__NSArray0__struct,  @"Failed to download %@ for %@",  v10,  v2));

    [*(id *)(*(void *)(a1 + 48) + 272) resourceWithRecordScopedIdentifier:v2 didFailToDownloadWithError:v11];
  }

  else
  {
    objc_msgSend( *(id *)(a1 + 80),  "setDownloadedItemCount:",  (char *)objc_msgSend(*(id *)(a1 + 80), "downloadedItemCount") + 1);
    objc_msgSend( *(id *)(a1 + 80),  "setDownloadedSize:",  (char *)objc_msgSend(*(id *)(a1 + 72), "size") + (void)objc_msgSend(*(id *)(a1 + 80), "downloadedSize"));
    if (*(void *)(a1 + 104))
    {
      objc_msgSend( *(id *)(a1 + 80),  "setTranscodedItemCount:",  (char *)objc_msgSend(*(id *)(a1 + 80), "transcodedItemCount") + 1);
      uint64_t v12 = *(void *)(a1 + 104);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    [*(id *)(*(void *)(a1 + 48) + 272) resourceWithRecordScopedIdentifier:v2 didDownloadCKAsset:*(void *)(a1 + 72) withOperationType:*(void *)(*(void *)(a1 + 48) + 280) transcoderVersion:v12 withFingerPrint:*(void *)(a1 + 88) andFileUTI:*(void *)(a1 + 96)];
  }
}

id sub_100087340(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recordCompletionForResource:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_100087350(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000873E8;
  v6[3] = &unk_10023DE80;
  id v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v9 = v4;
  id v5 = v3;
  [v7 dispatchAsync:v6];
}

void sub_1000873E8(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v8)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 272) resourceTypeDescription]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v8,  v2,  @"Failed to download %@",  v3));
  }

  else
  {
    id v4 = 0LL;
  }

  id v5 = [*(id *)(a1 + 48) downloadedItemCount];
  if (v5 != [*(id *)(a1 + 48) requestedItemCount]) {
    [*(id *)(a1 + 48) setError:v4];
  }
  if (![*(id *)(*(void *)(a1 + 32) + 272) hasDownloadTasks])
  {

LABEL_13:
    [*(id *)(a1 + 32) _downloadNextGroup];
    goto LABEL_14;
  }

  if (v4) {
    id v6 = v4;
  }
  else {
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"Record not found"));
  }
  id v7 = v6;
  [*(id *)(*(void *)(a1 + 32) + 272) allDownloadsDidFailWithError:v6];

  if (!v4) {
    goto LABEL_13;
  }
  [*(id *)(a1 + 32) _finishRemainingTasksWithError:v4];

LABEL_14:
}

void sub_100087A60(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (v6)
  {
    id v33 = v7;
    id v34 = v6;
    uint64_t v32 = a1;
    id v9 = (id *)(a1 + 32);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 320LL), a2);
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 288LL);
    *(void *)(*(void *)(a1 + 32) + 288LL) = v10;

    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id obj = *(id *)(*(void *)(a1 + 32) + 328LL);
    id v12 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v36 = *(void *)v42;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v42 != v36) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v41 + 1) + 8LL * (void)i);
          id v16 = objc_autoreleasePoolPush();
          id v17 = (void *)objc_claimAutoreleasedReturnValue([*v9 _cloudKitScopeForTask:v15]);
          if (!v17) {
            sub_10019643C(v32, (uint64_t *)v9);
          }
          uint64_t v18 = v17;
          uint64_t v19 = CPLCloudKitOperationTypeForScope(v17);
          uint64_t v20 = (void *)*((void *)*v9 + 36);
          id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v19));
          id v22 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v21]);

          if (!v22)
          {
            id v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            id v23 = (void *)*((void *)*v9 + 36);
            __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v19));
            [v23 setObject:v22 forKeyedSubscript:v24];
          }

          -[NSMutableArray addObject:](v22, "addObject:", v15);

          objc_autoreleasePoolPop(v16);
        }

        id v13 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
      }

      while (v13);
    }

    [*v9 _downloadNextOperationType];
    id v8 = v33;
    id v6 = v34;
  }

  else
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    id v25 = *(id *)(*(void *)(a1 + 32) + 328LL);
    id v26 = [v25 countByEnumeratingWithState:&v37 objects:v45 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v38;
      do
      {
        for (j = 0LL; j != v27; j = (char *)j + 1)
        {
          if (*(void *)v38 != v28) {
            objc_enumerationMutation(v25);
          }
          id v30 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)j);
          id v31 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v30 completionHandler]);
          ((void (**)(void, void *, void *))v31)[2](v31, v30, v8);
        }

        id v27 = [v25 countByEnumeratingWithState:&v37 objects:v45 count:16];
      }

      while (v27);
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 336LL) + 16LL))();
  }
}

LABEL_49:
            uint64_t v18 = &OBJC_METACLASS___CPLCloudKitComputeStateEncryptionHelper;
          }

          id v86 = [v17 countByEnumeratingWithState:&v91 objects:v103 count:16];
          if (!v86)
          {

            id v12 = v73;
            id v13 = v74;
            self = v79;
            if ((v76 & 1) != 0) {
              goto LABEL_66;
            }
            goto LABEL_56;
          }
        }
      }

LABEL_56:
      if (!_CPLSilentLogging)
      {
        uint64_t v65 = sub_10008595C();
        id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          id v67 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup resourceTypeDescription](self, "resourceTypeDescription"));
          *(_DWORD *)__int128 buf = 138412802;
          id v96 = v82;
          v97 = 2112;
          v98 = v67;
          v99 = 2112;
          v100 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "No download task moved %@ (resource %@ for %@) away from CloudKit. Removing now",  buf,  0x20u);
        }
      }

      v87 = 0LL;
      id v68 = [v81 removeItemAtURL:v82 error:&v87];
      v69 = v87;
      if ((v68 & 1) == 0 && !_CPLSilentLogging)
      {
        id v70 = sub_10008595C();
        id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412546;
          id v96 = v82;
          v97 = 2112;
          v98 = v69;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "Failed to remove %@: %@", buf, 0x16u);
        }
      }

LABEL_66:
      -[NSMutableDictionary removeObjectForKey:](self->_tasks, "removeObjectForKey:", v12);
      id v72 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_resourceSizes,  "objectForKeyedSubscript:",  v12));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_downloadedSizes,  "setObject:forKeyedSubscript:",  v72,  v12);
    }

    else
    {
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup propertyKeys](self, "propertyKeys"));
      __int128 v61 = sub_100089C34((uint64_t)v60);
      id v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      id v63 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup resourceTypeDescription](self, "resourceTypeDescription"));
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  27LL,  @"Fetching %@ (%@) for %@ succeeded but did not return the resource",  v62,  v63,  v12));

      -[_CPLCloudKitDownloadGroup resourceWithRecordScopedIdentifier:didFailToDownloadWithError:]( self,  "resourceWithRecordScopedIdentifier:didFailToDownloadWithError:",  v12,  v64);
    }
  }

  else
  {
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup propertyKeys](self, "propertyKeys"));
    uint64_t v56 = sub_100089BF8((uint64_t)v55);
    id v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(-[_CPLCloudKitDownloadGroup resourceTypeDescription](self, "resourceTypeDescription"));
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  26LL,  @"Fetching %@ (%@) for %@ succeeded but did not return the fingerprint",  v57,  v58,  v12));

    -[_CPLCloudKitDownloadGroup resourceWithRecordScopedIdentifier:didFailToDownloadWithError:]( self,  "resourceWithRecordScopedIdentifier:didFailToDownloadWithError:",  v12,  v59);
  }
}

        __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
        (*((void (**)(id, void, void *))v37 + 2))(v37, 0LL, v42);

        id v4 = 0LL;
        goto LABEL_77;
      }

      if (exitType)
      {
        if (self->_participantIDsToRemove)
        {
          id v30 = v7;
          id v4 = 0LL;
          goto LABEL_34;
        }

        __int128 v37 = self->_completionHandler;
        goto LABEL_49;
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[CPLShare currentUserParticipant](self->_share, "currentUserParticipant"));
      uint64_t v20 = objc_claimAutoreleasedReturnValue(-[CPLShare owner](self->_share, "owner"));
      id v21 = (void *)v20;
      if (v19)
      {
        if (v19 != (void *)v20)
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v19 userIdentifier]);
          __int16 v89 = v22;
          id v23 = &v89;
LABEL_51:
          id v29 = (NSArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v23,  1LL));

          id v4 = 0LL;
          goto LABEL_58;
        }

        if (!_CPLSilentLogging)
        {
          __int128 v43 = sub_1000B20D0();
          id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            __int128 v44 = self->_scope;
            *(_DWORD *)__int128 buf = 138412290;
            v75 = v44;
            uint64_t v28 = "Trying to remove current user from %@ but current user is the owner and can only dismantle the shared library";
            goto LABEL_55;
          }

  return v29 & 1;
}

void sub_10008904C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        id v10 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v9 completionHandler]);
        ((void (**)(void, void *, void))v10)[2](v10, v9, *(void *)(a1 + 32));
      }

      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_10008936C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

double sub_100089384(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  double result = v5 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = result;
  return result;
}

void sub_100089464(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 firstObject]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000896A8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resourcesdownload");
  id v3 = (void *)qword_1002963C8;
  qword_1002963C8 = (uint64_t)v2;
}

id sub_1000896D4(uint64_t a1, uint64_t a2)
{
  if (qword_1002964C0 != -1) {
    dispatch_once(&qword_1002964C0, &stru_100241B40);
  }
  else {
    id v3 = qword_1002963D0[a2];
  }
  return v3;
}

uint64_t sub_100089740(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (qword_1002964C0 != -1) {
    dispatch_once(&qword_1002964C0, &stru_100241B40);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1002964B8 objectForKeyedSubscript:v3]);

  if (v4) {
    uint64_t v5 = v4[1];
  }
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void *sub_100089B64(void *a1, void *a2)
{
  os_log_t v2 = a1;
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 _allKeys]);
    else {
      uint64_t v5 = v4;
    }
    os_log_t v2 = v5;
  }

  return v2;
}

uint64_t sub_100089BD4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t sub_100089BE0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_100089BEC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t sub_100089BF8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t sub_100089C04(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t sub_100089C10(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

uint64_t sub_100089C1C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t sub_100089C28(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t sub_100089C34(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

uint64_t sub_100089C40(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

void sub_100089CF4(id a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100089D98;
  void v4[3] = &unk_10023FDF0;
  uint64_t v1 =  -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  29LL);
  uint64_t v5 = v1;
  +[CPLResource enumerateResourceTypesWithBlock:](&OBJC_CLASS___CPLResource, "enumerateResourceTypesWithBlock:", v4);
  os_log_t v2 = (void *)qword_1002964B8;
  qword_1002964B8 = (uint64_t)v1;
  id v3 = v1;
}

void sub_100089D98(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x1C)
  {
    switch(a2)
    {
      case 0uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = 0LL;
        uint64_t v6 = 0LL;
        goto LABEL_33;
      case 1uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resOriginal";
        uint64_t v6 = 1LL;
        goto LABEL_33;
      case 2uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resJPEGFull";
        uint64_t v6 = 2LL;
        goto LABEL_33;
      case 3uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resJPEGLarge";
        uint64_t v6 = 3LL;
        goto LABEL_33;
      case 4uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resJPEGMed";
        uint64_t v6 = 4LL;
        goto LABEL_33;
      case 5uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resJPEGThumb";
        uint64_t v6 = 5LL;
        goto LABEL_33;
      case 6uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVidMed";
        uint64_t v6 = 6LL;
        goto LABEL_33;
      case 7uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVidSmall";
        uint64_t v6 = 7LL;
        goto LABEL_33;
      case 8uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAudio";
        uint64_t v6 = 8LL;
        goto LABEL_33;
      case 9uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resSidecar";
        uint64_t v6 = 9LL;
        goto LABEL_33;
      case 0xAuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resMediaMetaData";
        uint64_t v6 = 10LL;
        goto LABEL_33;
      case 0xBuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = 0LL;
        uint64_t v6 = 11LL;
        goto LABEL_33;
      case 0xCuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = 0LL;
        uint64_t v6 = 12LL;
        goto LABEL_33;
      case 0xDuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAdjData";
        uint64_t v6 = 13LL;
        goto LABEL_33;
      case 0xEuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAdjSecondData";
        uint64_t v6 = 14LL;
        goto LABEL_33;
      case 0xFuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAdjBaseJPEG";
        uint64_t v6 = 15LL;
        goto LABEL_33;
      case 0x10uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVidFull";
        uint64_t v6 = 16LL;
        goto LABEL_33;
      case 0x11uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resOriginalAlt";
        uint64_t v6 = 17LL;
        goto LABEL_33;
      case 0x12uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resOriginalVidCompl";
        uint64_t v6 = 18LL;
        goto LABEL_33;
      case 0x13uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVidCompl";
        uint64_t v6 = 19LL;
        goto LABEL_33;
      case 0x14uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAdjBaseVid";
        uint64_t v6 = 20LL;
        goto LABEL_33;
      case 0x15uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVidLarge";
        uint64_t v6 = 21LL;
        goto LABEL_33;
      case 0x16uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resSidecarOther";
        uint64_t v6 = 22LL;
        goto LABEL_33;
      case 0x17uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resOriginalSpatialOverCapture";
        uint64_t v6 = 23LL;
        goto LABEL_33;
      case 0x18uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resOriginalVidComplOverCapture";
        uint64_t v6 = 24LL;
        goto LABEL_33;
      case 0x19uLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAdjBaseNormalVid";
        uint64_t v6 = 25LL;
        goto LABEL_33;
      case 0x1AuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVideoMediaMetaData";
        uint64_t v6 = 26LL;
        goto LABEL_33;
      case 0x1BuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resAdjustedMediaMetaData";
        uint64_t v6 = 27LL;
        goto LABEL_33;
      case 0x1CuLL:
        uint64_t v4 = objc_alloc(&OBJC_CLASS___CPLCloudKitResourceKeys);
        uint64_t v5 = @"resVidHDRMed";
        uint64_t v6 = 28LL;
LABEL_33:
        uint64_t v7 = -[CPLCloudKitResourceKeys initWithPrefix:resourceType:](v4, "initWithPrefix:resourceType:", v5, v6);
        break;
      default:
        uint64_t v7 = 0LL;
        break;
    }

    id obj = v7;
    objc_storeStrong(&qword_1002963D0[a2], v7);
    id v8 = obj;
    if (obj)
    {
      if (obj->_resourceKey)
      {
        objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:");
        id v8 = obj;
      }
    }
  }

id sub_10008A55C()
{
  if (qword_1002964C8 != -1) {
    dispatch_once(&qword_1002964C8, &stru_100241CC8);
  }
  return (id)qword_1002964D0;
}

void sub_10008A59C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    id v10 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
    uint64_t v34 = 0LL;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2020000000LL;
    char v37 = 1;
    uint64_t v28 = 0LL;
    id v29 = &v28;
    uint64_t v30 = 0x3032000000LL;
    id v31 = sub_10008A7E4;
    uint64_t v32 = sub_10008A7F4;
    id v33 = 0LL;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10008A7FC;
    v17[3] = &unk_100241B68;
    id v18 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 48);
    __int128 v13 = *(void **)(a1 + 56);
    id v19 = v11;
    uint64_t v20 = v12;
    __int128 v27 = *(_OWORD *)(a1 + 88);
    id v21 = v13;
    id v22 = *(id *)(a1 + 64);
    id v25 = &v28;
    id v26 = &v34;
    id v23 = *(id *)(a1 + 72);
    __int128 v14 = v10;
    __int16 v24 = v14;
    [v7 enumerateKeysAndObjectsUsingBlock:v17];
    uint64_t v15 = *(void *)(a1 + 80);
    if (*((_BYTE *)v35 + 24))
    {
      id v16 = -[NSMutableDictionary copy](v14, "copy");
      (*(void (**)(uint64_t, id, void))(v15 + 16))(v15, v16, 0LL);
    }

    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 16))(v15, 0LL, v29[5]);
    }

    _Block_object_dispose(&v28, 8);
    _Block_object_dispose(&v34, 8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }
}

void sub_10008A7C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_10008A7E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008A7F4(uint64_t a1)
{
}

void sub_10008A7FC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 recordType]);
  unsigned __int8 v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if ((v10 & 1) != 0)
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v7]);
    if (!v11) {
      sub_1001968C8((uint64_t)v7, a1);
    }
    uint64_t v12 = (void *)v11;
    __int128 v13 = -[CPLCKSplitCopyHelper initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:]( [CPLCKSplitCopyHelper alloc],  "initWithBaseCKRecord:sourceRecordID:fromPrivateRecord:recordClass:sourceDatabaseScope:destinationRecordID:planner:",  0,  v7,  0,  *(void *)(a1 + 112),  [*(id *)(a1 + 56) databaseScope],  v11,  *(void *)(a1 + 64));
    uint64_t v14 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id obj = *(id *)(v14 + 40);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( -[CPLCKSplitCopyHelper copiedRecordFromSourceRecord:action:error:]( v13,  "copiedRecordFromSourceRecord:action:error:",  v8,  @"Copy (pseudo sparse record)",  &obj));
    objc_storeStrong((id *)(v14 + 40), obj);
    if (v15)
    {
      objc_msgSend( v15,  "cpl_updatePrivateRecordSharedToRecordWithID:currentUserRecordID:setSparseRecordFlag:force:",  v7,  *(void *)(a1 + 72),  1,  0);
      [*(id *)(a1 + 80) setObject:v15 forKeyedSubscript:v12];
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = 0;
      *a4 = 1;
    }

LABEL_10:
    goto LABEL_11;
  }

  if (!_CPLSilentLogging)
  {
    id v16 = sub_10008A55C();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 recordType]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v21 = v17;
      __int16 v22 = 2112;
      id v23 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "Unexpected record type for shared record. Expected %@ and got %@",  buf,  0x16u);
    }

    goto LABEL_10;
  }

void sub_10008ACF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = objc_alloc(&OBJC_CLASS____CPLCloudKitSimpleRecordUpdatePlanner);
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v20 = v3;
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([v5 controller]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 propertyMapping]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fingerprintContext]);
    uint64_t v13 = v7;
    id v3 = v20;
    uint64_t v14 = -[_CPLCloudKitSimpleRecordUpdatePlanner initWithTask:scopedIdentifiers:destinationZoneIdentification:sharedZoneIdentification:targetMapping:propertyMapping:fingerprintContext:]( v4,  "initWithTask:scopedIdentifiers:destinationZoneIdentification:sharedZoneIdentification:targetMapping:property Mapping:fingerprintContext:",  v5,  v6,  v13,  v8,  v9,  v11,  v12);

    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = objc_opt_class(&OBJC_CLASS___CPLAssetChange);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10008AF10;
    v21[3] = &unk_100241C30;
    id v30 = *(id *)(a1 + 88);
    __int16 v22 = v14;
    id v23 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    id v24 = v17;
    uint64_t v25 = v18;
    id v26 = *(id *)(a1 + 80);
    id v31 = *(id *)(a1 + 96);
    id v27 = v20;
    id v28 = *(id *)(a1 + 64);
    id v32 = *(id *)(a1 + 104);
    id v29 = *(id *)(a1 + 40);
    id v19 = v14;
    [v15 _createSparsePrivateRecordsIfNecessary:v19 recordClass:v16 userRecordID:v27 completionHandler:v21];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }
}

void sub_10008AF10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  id v33 = v5;
  if (v5)
  {
    id v32 = v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) privateRecordIDs]);
    uint64_t v9 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v8 count]);
    uint64_t v34 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id obj = v8;
    id v10 = [obj countByEnumeratingWithState:&v48 objects:v52 count:16];
    if (v10)
    {
      uint64_t v12 = *(void *)v49;
      *(void *)&__int128 v11 = 138412290LL;
      __int128 v30 = v11;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v49 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
          uint64_t v15 = *(void **)(a1 + 48);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "recordName", v30));
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 scopedIdentifierWithIdentifier:v16]);

          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v17]);
          id v19 = v18;
          if (v18
            && (uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 recordChangeData]),
                BOOL v21 = v20 == 0LL,
                v20,
                !v21)
            && (__int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v19 recordChangeData]),
                id v23 = +[CPLArchiver unarchiveObjectWithData:ofClass:]( &OBJC_CLASS___CPLArchiver,  "unarchiveObjectWithData:ofClass:",  v22,  objc_opt_class(&OBJC_CLASS___CKRecord)),  v24 = (void *)objc_claimAutoreleasedReturnValue(v23),  v22,  v24))
          {
            -[NSMutableDictionary setObject:forKeyedSubscript:](v34, "setObject:forKeyedSubscript:", v24, v14);
          }

          else
          {
            -[NSMutableArray addObject:](v9, "addObject:", v14);
          }
        }

        id v10 = [obj countByEnumeratingWithState:&v48 objects:v52 count:16];
      }

      while (v10);
    }

    uint64_t v25 = *(void **)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 64);
    id v27 = [*(id *)(a1 + 48) operationType];
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_10008B3DC;
    v36[3] = &unk_100241C08;
    id v45 = *(id *)(a1 + 96);
    id v37 = v33;
    id v38 = *(id *)(a1 + 40);
    int8x16_t v31 = *(int8x16_t *)(a1 + 48);
    id v28 = (id)v31.i64[0];
    int8x16_t v39 = vextq_s8(v31, v31, 8uLL);
    __int128 v40 = v34;
    id v46 = *(id *)(a1 + 104);
    id v41 = *(id *)(a1 + 32);
    id v42 = *(id *)(a1 + 72);
    id v43 = *(id *)(a1 + 80);
    id v47 = *(id *)(a1 + 112);
    id v44 = *(id *)(a1 + 88);
    id v29 = v34;
    [v25 fetchRecordsWithIDs:v9 fetchResources:0 desiredKeys:v26 wantsAllRecords:0 type:v27 completionHandler:v36];

    uint64_t v7 = v32;
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
  }
}

void sub_10008B3A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x10008B3ACLL);
  }

  _Unwind_Resume(a1);
}

void sub_10008B3BC(_Unwind_Exception *a1)
{
}

void sub_10008B3C8(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10008B3D4LL);
}

void sub_10008B3DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  (char *)[*(id *)(a1 + 32) count]
         + (void)[v3 count]
         + (unint64_t)[*(id *)(a1 + 40) count]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10008B5FC;
    v14[3] = &unk_100241BB8;
    id v5 = *(void **)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 32);
    id v17 = v3;
    id v18 = *(id *)(a1 + 64);
    id v23 = *(id *)(a1 + 112);
    id v19 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 80);
    id v21 = *(id *)(a1 + 88);
    id v24 = *(id *)(a1 + 120);
    __int16 v22 = v4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10008B774;
    v9[3] = &unk_100241BE0;
    uint64_t v6 = *(void *)(a1 + 96);
    id v13 = *(id *)(a1 + 104);
    uint64_t v7 = *(void **)(a1 + 56);
    void v9[4] = *(void *)(a1 + 48);
    id v10 = v22;
    id v11 = v7;
    id v12 = *(id *)(a1 + 72);
    uint64_t v8 = v22;
    [v5 executeSynchronousWork:v14 onItems:v6 description:@"Preparing record updates" completionHandler:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 104) + 16LL))();
  }
}

uint64_t sub_10008B5FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 recordIDWithRecordName:v7]);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v8]);
  if (!v9
    && (uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v8])) == 0
    && (uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v8])) == 0
    || !(*(unsigned int (**)(void))(*(void *)(a1 + 96) + 16LL))())
  {
    id v13 = 0LL;
    goto LABEL_8;
  }

  id v10 = -[CPLSimpleCKRecordBuilder initWithBaseCKRecord:scopeProvider:currentUserRecordID:targetMapping:]( objc_alloc(&OBJC_CLASS___CPLSimpleCKRecordBuilder),  "initWithBaseCKRecord:scopeProvider:currentUserRecordID:targetMapping:",  v9,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80));
  uint64_t v11 = *(void *)(a1 + 104);
  id v16 = 0LL;
  int v12 = (*(uint64_t (**)(void))(v11 + 16))();
  id v13 = v16;
  if (v12)
  {
    [*(id *)(a1 + 88) addObject:v9];

LABEL_8:
    uint64_t v14 = 1LL;
    goto LABEL_9;
  }

  if (a3)
  {
    id v13 = v13;
    uint64_t v14 = 0LL;
    *a3 = v13;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

void sub_10008B774(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cloudKitScope]);
    [v3 uploadRecords:v4 cloudKitScope:v5 scopeProvider:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
  }

void sub_10008BA38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = *(void **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10008BAE8;
    v6[3] = &unk_1002411B8;
    id v7 = v3;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6, v5);
    [*(id *)(a1 + 48) uploadRecords:*(void *)(a1 + 32) cloudKitScope:*(void *)(a1 + 56) scopeProvider:0 completionHandler:*(void *)(a1 + 64)];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64));
  }
}

void sub_10008BAE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  if (v5)
  {
    [v7 setKnownToServer:1];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 etag]);
    [v7 setEtag:v6];
  }
}

void sub_10008BCDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10008BD8C;
  v8[3] = &unk_1002409B8;
  void v8[4] = v6;
  id v9 = v5;
  id v11 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_10008BD8C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = (id)v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _errorForUpdateError:v2 scopeProvider:*(void *)(a1 + 48)]);
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0LL);
  }
}

void sub_10008C5C8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.recordupdate");
  uint64_t v3 = (void *)qword_1002964D0;
  qword_1002964D0 = (uint64_t)v2;
}

void sub_10008C848(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 280), a2);
    [*(id *)(a1 + 32) _getTemporaryFolder];
  }

  else
  {
    (*(void (**)(void))(*(void *)(v5 + 288) + 16LL))();
  }
}

id sub_10008C91C(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _uploadComputeStatesWithTemporaryFolderURL:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[36] + 16LL))();
  }
}

id sub_10008CDF4()
{
  if (qword_1002964D8 != -1) {
    dispatch_once(&qword_1002964D8, &stru_100241D60);
  }
  return (id)qword_1002964E0;
}

BOOL sub_10008CE34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 etag]);

  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) objectForKeyedSubscript:v5]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v5]);
    id v10 = objc_alloc(&OBJC_CLASS___CPLRecordComputeStateVersion);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 version]);
    id v12 = [v10 initWithString:v11];

    id v13 = objc_alloc(&OBJC_CLASS___CPLRecordComputeStateVersion);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 computeStateVersion]);
    if (v14)
    {
      id v15 = [v13 initWithString:v14];
    }

    else
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"computeStateVersion"]);
      id v15 = [v13 initWithString:v17];
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 adjustmentFingerprint]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v8 computeStateAdjustmentFingerprint]);
    id v20 = v19;
    if (v19)
    {
      id v21 = v19;
    }

    else
    {
      id v22 = objc_msgSend( v6,  "cpl_decryptedObjectForKey:validateClass:",  @"computeStateAdjustmentFingerprintEnc",  objc_opt_class(NSString));
      id v21 = (id)objc_claimAutoreleasedReturnValue(v22);
    }

    id v33 = v21;

    id v23 = [v12 compare:v15];
    if (v23 == (id)-1LL)
    {
      if (_CPLSilentLogging)
      {
        id v24 = v18;
      }

      else
      {
        id v24 = v18;
        id v25 = sub_10008CDF4();
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v35 = v9;
          __int16 v36 = 2112;
          id v37 = v12;
          __int16 v38 = 2112;
          id v39 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[CCSS] Dropping compute state %@ because %@(local) < %@(cloud)",  buf,  0x20u);
        }
      }
    }

    else if (v23)
    {
      id v24 = v18;
      if (v23 == (id)1)
      {
        BOOL v16 = 1LL;
LABEL_28:

        goto LABEL_29;
      }
    }

    else
    {
      id v24 = v18;
      unint64_t v27 = v18;
      id v28 = v33;
      unint64_t v29 = (unint64_t)v28;
      BOOL v16 = (!v27 || !v28 || ([(id)v27 isEqual:v28] & 1) == 0) && (v27 | v29) != 0;

      if (v16 || _CPLSilentLogging) {
        goto LABEL_28;
      }
      id v30 = sub_10008CDF4();
      int8x16_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138413314;
        uint64_t v35 = v9;
        __int16 v36 = 2112;
        id v37 = v12;
        __int16 v38 = 2112;
        id v39 = v15;
        __int16 v40 = 2112;
        unint64_t v41 = v27;
        __int16 v42 = 2112;
        unint64_t v43 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "[CCSS] Dropping compute state %@ because %@(local) == %@(cloud) and %@(local) == %@(cloud)",  buf,  0x34u);
      }
    }

    BOOL v16 = 0LL;
    goto LABEL_28;
  }

  BOOL v16 = 1LL;
LABEL_29:

  return v16;
}

id sub_10008D1A8(uint64_t a1, void *a2, void *a3, CKAsset **a4)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v6]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fileURL]);
  id v10 = *(void **)(a1 + 40);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 safeFilename]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 lastPathComponent]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@:%@%@",  v11,  v12,  @".photoscomputestate"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 URLByAppendingPathComponent:v13 isDirectory:0]);

  id v15 = *(void **)(*(void *)(a1 + 48) + 280LL);
  id v35 = 0LL;
  id v16 = [v15 encryptFileAtURL:v9 outputFileURL:v14 error:&v35];
  id v34 = v35;
  if ((v16 & 1) != 0)
  {
    id v17 = -[CKAsset initWithFileURL:](objc_alloc(&OBJC_CLASS___CKAsset), "initWithFileURL:", v14);
    -[CKAsset setItemTypeHint:](v17, "setItemTypeHint:", @"fxd");
    [v7 setCKAsset:v17 forKey:@"resComputeStateData"];
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v8 version]);
    [v7 setObject:v33 forKey:@"computeStateVersion"];
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 adjustmentFingerprint]);
    [v7 setEncryptedObject:v18 forKey:@"computeStateAdjustmentFingerprintEnc" validateClass:objc_opt_class(NSString)];
    id v19 = v14;
    id v20 = v9;
    id v21 = v6;
    id v22 = v16;
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v8 lastUpdatedDate]);
    [v7 setEncryptedObject:v23 forKey:@"computeStateLastUpdatedDateEnc" validateClass:objc_opt_class(NSDate)];
    [*(id *)(a1 + 56) addObject:v8];

    id v16 = v22;
    id v6 = v21;
    id v9 = v20;
    uint64_t v14 = v19;
    id v24 = v34;
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v25 = sub_10008CDF4();
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v9 path]);
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v14 path]);
        *(_DWORD *)__int128 buf = 138413058;
        id v37 = v6;
        __int16 v38 = 2112;
        id v39 = v27;
        __int16 v40 = 2112;
        unint64_t v41 = v28;
        __int16 v42 = 2112;
        id v43 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[CCSS] Failed to encrypt compute state %@ from %@ to %@: %@",  buf,  0x2Au);
      }
    }

    unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v9 path]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v14 path]);
    id v24 = v34;
    id v17 = (CKAsset *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  70LL,  v34,  @"Failed to encrypt compute state %@ from %@ to %@",  v6,  v29,  v30));

    if (a4)
    {
      id v17 = v17;
      *a4 = v17;
    }
  }

  return v16;
}

uint64_t sub_10008D548(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 288LL) + 16LL))();
}

void sub_10008D648(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.uploadcomputestates");
  uint64_t v3 = (void *)qword_1002964E0;
  qword_1002964E0 = (uint64_t)v2;
}

void sub_10008D9D8(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___CKRecordZoneID);
  os_log_t v2 = -[CKRecordZoneID initWithZoneName:ownerName:databaseScope:]( v1,  "initWithZoneName:ownerName:databaseScope:",  CPLPrimaryScopeIdentifier,  CKCurrentUserDefaultName,  2LL);
  uint64_t v3 = (void *)qword_1002964E8;
  qword_1002964E8 = (uint64_t)v2;
}

uint64_t CPLCKAvailabilityRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v17 - 96), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_19:
  return a4;
}

    __int16 v36 = 0;
  }

  return v36 & 1;
}

    id v21 = 0LL;
    goto LABEL_27;
  }

  if (([v4 isEqual:*(void *)(a1 + 40)] & 1) == 0)
  {
    if (!_CPLSilentLogging)
    {
      unint64_t v6 = sub_10013AF3C();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        char v8 = NSStringFromSelector(*(SEL *)(a1 + 56));
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 42) summaryDescription]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) summaryDescription]);
        *(_DWORD *)__int128 buf = 138412802;
        __int128 v50 = v9;
        __int128 v51 = 2112;
        uint64_t v52 = v10;
        id v53 = 2112;
        id v54 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Wrong batch passed in %@ - expected: %@ - ack: %@",  buf,  0x20u);
      }
    }

    char v12 = objc_autoreleasePoolPush();
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 42) records]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) records]);
    unint64_t v15 = [v13 count];
    if (v15 == [v14 count])
    {
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      v47[2] = sub_10013CA38;
      v47[3] = &unk_100246E48;
      __int128 v48 = v14;
      [v13 enumerateObjectsUsingBlock:v47];
    }

    objc_autoreleasePoolPop(v12);
    unsigned int v5 = &selRef_fileManager_shouldRemoveItemAtURL_;
    if (byte_1002A37B0)
    {
      if (a2)
      {
        char v16 = @"Client acknowledged an incorrect batch";
LABEL_18:
        id v21 = 0LL;
        *a2 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectMachineStateErrorWithReason:]( &OBJC_CLASS___CPLErrors,  "incorrectMachineStateErrorWithReason:",  v16));
        goto LABEL_27;
      }

      goto LABEL_19;
    }
  }

  id v17 = *(void *)(a1 + 32);
  if (*(void *)(v17 + 66))
  {
    id v18 = objc_alloc(&OBJC_CLASS___CPLPullSessionScopesAcknowledgement);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
    id v20 = [v18 initWithStore:WeakRetained scopesChangeBatch:*(void *)(*(void *)(a1 + 32) + 66)];
  }

  else if (*(void *)(v17 + 74))
  {
    id v22 = objc_alloc(&OBJC_CLASS___CPLPullSessionRevertRecords);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
    id v20 = [v22 initWithStore:WeakRetained revertedChangesBatch:*(void *)(*(void *)(a1 + 32) + 74)];
  }

  else
  {
    if (!*(void *)(v17 + 50))
    {
      id v43 = objc_loadWeakRetained((id *)(v17 + 98));
      id v44 = objc_claimAutoreleasedReturnValue([v43 libraryVersion]);
      id v45 = *(void *)(*(void *)(a1 + 48) + 8LL);
      id v46 = *(void **)(v45 + 40);
      *(void *)(v45 + 40) = v44;

      id v21 = 1LL;
      goto LABEL_27;
    }

    id v23 = objc_alloc(&OBJC_CLASS___CPLPullSessionUpdate);
    id v24 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
    id v25 = v5;
    id WeakRetained = v24;
    id v20 = [v23 initWithStore:v24 expandedClientBatch:*(void *)(*(void *)(a1 + 32) + *((int *)v25 + 884)) expandedCloudBatch:*(void *)(*(void *)(a1 + 32) + 50)];
  }

  uint64_t v26 = v20;

  unint64_t v27 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 98LL));
  id v21 = (uint64_t)[v27 storeChangeSessionUpdate:v26 error:a2];

  if ((_DWORD)v21)
  {
    id v28 = objc_claimAutoreleasedReturnValue([v26 libraryVersion]);
    unint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 82LL), *(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }

  unsigned int v5 = &selRef_fileManager_shouldRemoveItemAtURL_;
LABEL_27:
  int8x16_t v31 = *(void *)(a1 + 32);
  id v32 = *(void **)(v31 + 42);
  *(void *)(v31 + 42) = 0LL;

  id v33 = *(void *)(a1 + 32);
  id v34 = *(void **)(v33 + 50);
  *(void *)(v33 + 50) = 0LL;

  id v35 = *(void *)(a1 + 32);
  __int16 v36 = *((int *)v5 + 884);
  id v37 = *(void **)(v35 + v36);
  *(void *)(v35 + v36) = 0LL;

  __int16 v38 = *(void *)(a1 + 32);
  id v39 = *(void **)(v38 + 66);
  *(void *)(v38 + 66) = 0LL;

  __int16 v40 = *(void *)(a1 + 32);
  unint64_t v41 = *(void **)(v40 + 74);
  *(void *)(v40 + 74) = 0LL;

  return v21;
}

  objc_destroyWeak(&to);
}
      }

      return v5;
    case 'N':
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v5;
      }
      id v21 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 pqlConnection]);

      id v23 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      id v24 = [v22 cplExecute:@"ALTER TABLE %@ ADD COLUMN otherScopeIndex INTEGER DEFAULT 0", v23];

      if (!v24
        || !-[CPLPrequeliteStorage createIndexOnColumn:error:]( self,  "createIndexOnColumn:error:",  @"otherScopeIndex",  0LL))
      {
        id v25 = 0;
        goto LABEL_21;
      }

      if (-[CPLPrequeliteIgnoredRecords _isEmpty](self, "_isEmpty"))
      {
        id v25 = 1;
        goto LABEL_21;
      }

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 abstractObject]);
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 scopes]);

      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 primaryScope]);
      if (!v29)
      {
        id v25 = 1;
        goto LABEL_49;
      }

      id v30 = (void *)objc_claimAutoreleasedReturnValue([v28 sharingScopeForScope:v29]);
      if (v30)
      {
        int8x16_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        id v32 = [v22 cplExecute:@"UPDATE %@ SET otherScopeIndex = %ld WHERE scopeIndex = %ld", v31, objc_msgSend(v29, "cloudIndex"), objc_msgSend(v30, "cloudIndex")];

        if (!v32
          || (id v33 = [v22 changes],
              id v34 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable")),
              id v35 = [v22 cplExecute:@"UPDATE %@ SET otherScopeIndex = %ld WHERE scopeIndex = %ld", v34, objc_msgSend(v30, "cloudIndex"), objc_msgSend(v29, "cloudIndex")],  v34,  !v35))
        {
          id v25 = 0;
          goto LABEL_48;
        }

        __int16 v36 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
        objc_msgSend( v36,  "recordUpgradeEvent:",  @"Updated other scope index for %lld shared records and %lld private records",  v33,  objc_msgSend(v22, "changes"));

        goto LABEL_30;
      }

      if ([v28 valueForFlag:16 forScope:v29])
      {
LABEL_30:
        id v25 = 1;
        goto LABEL_48;
      }

      id v53 = v28;
      context = objc_autoreleasePoolPush();
      id v37 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v54 = (void *)objc_claimAutoreleasedReturnValue([v37 transientPullRepository]);

      __int16 v38 = [v29 cloudIndex];
      id v39 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      __int128 v51 = v38;
      __int16 v40 = [v22 cplFetch:@"SELECT serializedRecord FROM %@ WHERE scopeIndex = %ld", v39, v38];

      unint64_t v41 = objc_alloc_init(&OBJC_CLASS___CPLChangeBatch);
      __int16 v42 = 0LL;
      id v25 = 1;
      while ([v40 next])
      {
        id v43 = objc_autoreleasePoolPush();
        id v44 = (void *)objc_claimAutoreleasedReturnValue([v40 cplChangeAtIndex:0]);
        if (v44)
        {
          ++v42;
          -[CPLChangeBatch addRecord:](v41, "addRecord:", v44);
          if ((unint64_t)-[CPLChangeBatch count](v41, "count") >= 0xC9)
          {
            id v25 = [v54 appendBatch:v41 alreadyMingled:0 error:0];
            id v45 = objc_alloc_init(&OBJC_CLASS___CPLChangeBatch);

            unint64_t v41 = v45;
          }
        }

        objc_autoreleasePoolPop(v43);
        if ((v25 & 1) == 0) {
          goto LABEL_47;
        }
      }

      if ((v25 & 1) != 0)
      {
        if ((!-[CPLChangeBatch count](v41, "count")
           || [v54 appendBatch:v41 alreadyMingled:0 error:0])
          && (id v46 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable")),
              id v47 = [v22 cplExecute:@"DELETE FROM %@ WHERE scopeIndex = %ld", v46, v51],  v46,  v47))
        {
          __int128 v48 = (char *)[v22 changes];
          __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
          if (v42 == v48) {
            objc_msgSend( v49,  "recordUpgradeEvent:",  @"Transferred %lu private records to transient pull repository",  v42,  v50);
          }
          else {
            objc_msgSend( v49,  "recordUpgradeEvent:",  @"Transferred %lu private records to transient pull repository (deleted %lld)",  v42,  objc_msgSend(v22, "changes"));
          }

          id v25 = 1;
        }

        else
        {
          id v25 = 0;
        }
      }

id sub_100090938()
{
  if (qword_100296520 != -1) {
    dispatch_once(&qword_100296520, &stru_100241DE0);
  }
  return (id)qword_100296518;
}

void sub_1000922EC(id a1)
{
  v3[0] = objc_opt_class(&OBJC_CLASS___CPLCloudKitLibraryZoneIdentification);
  v3[1] = objc_opt_class(&OBJC_CLASS___CPLCloudKitLibraryShareZoneIdentification);
  v3[2] = objc_opt_class(&OBJC_CLASS___CPLCloudKitStagingZoneIdentification);
  void v3[3] = objc_opt_class(&OBJC_CLASS___CPLCloudKitIgnoredZoneIdentification);
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 4LL));
  os_log_t v2 = (void *)qword_1002964F8;
  qword_1002964F8 = v1;
}

void sub_1000923D8(id a1)
{
  uint64_t v1 = -[CPLCloudKitDefaultZoneManager init](objc_alloc(&OBJC_CLASS___CPLCloudKitDefaultZoneManager), "init");
  os_log_t v2 = (void *)qword_100296508;
  qword_100296508 = (uint64_t)v1;
}

void sub_1000930B8(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CPLMasterChange);
  uint64_t v3 = -[NSSet initWithObjects:](v1, "initWithObjects:", v2, objc_opt_class(&OBJC_CLASS___CPLAssetChange), 0LL);
  char v4 = (void *)qword_100296518;
  qword_100296518 = (uint64_t)v3;
}

id sub_100093120(id a1)
{
  return a1;
}

void sub_1000933B4(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = v4;
  if (v4)
  {
    objc_storeStrong((id *)(v5 + 280), a2);
    [*(id *)(a1 + 32) _downloadComputeStates];
  }

  else
  {
    (*(void (**)(void))(*(void *)(v5 + 288) + 16LL))();
  }
}

void sub_100093524(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100093594;
  v2[3] = &unk_10023E058;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 dispatchAsync:v2];
}

void sub_100093594(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callbackOperationDidFinishWithError:0]);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100093B90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_100093BBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100093BCC(uint64_t a1)
{
}

void sub_100093BD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100093CF4;
  v11[3] = &unk_100241E08;
  uint64_t v20 = *(void *)(a1 + 80);
  unint64_t v7 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  id v13 = v5;
  uint64_t v21 = *(void *)(a1 + 88);
  char v8 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = v6;
  id v16 = v8;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v19 = *(id *)(a1 + 72);
  id v9 = v6;
  id v10 = v5;
  [v7 dispatchSynchronousWork:v11];
}

void sub_100093CF4(uint64_t a1)
{
  id v2 = (void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  if (!v4) {
    sub_100197244(v2, a1);
  }
  id v5 = (__CFString *)v4;
  if (!v3)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:@"isExpunged"]);
    unsigned int v7 = [v6 BOOLValue];

    if (!v7)
    {
      int v10 = 1;
      goto LABEL_9;
    }

    if (!_CPLSilentLogging)
    {
      id v8 = sub_100094394();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v58 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[CCSS] Ignoring expunged record %@",  buf,  0xCu);
      }
    }
  }

  int v10 = 0;
LABEL_9:
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:@"resComputeStateData"]);
  id v12 = v11;
  if (v10 && !v11)
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_100094394();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v58 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[CCSS] %@ has no record compute state",  buf,  0xCu);
      }
    }

    goto LABEL_20;
  }

  if ((v10 & 1) != 0)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 fileURL]);
    if (v15)
    {
      [*(id *)(a1 + 72) setObject:v15 forKeyedSubscript:v5];
      if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString scopeIdentifier](v5, "scopeIdentifier"));
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) controller]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 mainScopeIdentifier]);
        unsigned int v19 = [v16 isEqualToString:v18];

        if (v19)
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v5, "identifier"));
          id v21 = [v20 mutableCopy];

          objc_msgSend( v21,  "replaceOccurrencesOfString:withString:options:range:",  @"/",  @":",  0,  0,  objc_msgSend(v21, "length"));
        }

        else
        {
          id v21 = (id)objc_claimAutoreleasedReturnValue(-[__CFString safeFilename](v5, "safeFilename"));
        }

        id v28 = objc_alloc(&OBJC_CLASS___NSString);
        unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        id v30 = -[NSString initWithFormat:](v28, "initWithFormat:", @"%@:%@.photoscomputestate", v21, v29);

        unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 320) URLByAppendingPathComponent:v30 isDirectory:0]);
        [*(id *)(a1 + 80) addObject:v27];
        int8x16_t v31 = *(void **)(*(void *)(a1 + 48) + 280LL);
        uint64_t v32 = *(void *)(*(void *)(a1 + 96) + 8LL);
        id obj = *(id *)(v32 + 40);
        unsigned __int8 v33 = [v31 decryptFileAtURL:v15 outputFileURL:v27 error:&obj];
        objc_storeStrong((id *)(v32 + 40), obj);
        if ((v33 & 1) != 0) {
          goto LABEL_42;
        }
        if (!_CPLSilentLogging)
        {
          id v34 = sub_100094394();
          id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            __int16 v36 = (__CFString *)objc_claimAutoreleasedReturnValue([v15 path]);
            id v37 = (void *)objc_claimAutoreleasedReturnValue([v27 path]);
            uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
            *(_DWORD *)__int128 buf = 138413058;
            uint64_t v58 = v5;
            __int16 v59 = 2112;
            uint64_t v60 = v36;
            __int16 v61 = 2112;
            id v62 = v37;
            __int16 v63 = 2112;
            uint64_t v64 = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "[CCSS] Failed to decrypt downloaded compute state %@ from %@ to %@: %@",  buf,  0x2Au);
          }
        }

        unsigned int v40 = [v39 isEqualToString:@"CPLComputeStateEncryptionError"];

        if (!v40) {
          goto LABEL_42;
        }
        id v41 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) code];
        if (v41 == (id)1)
        {
          uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
          id v44 = (void *)objc_claimAutoreleasedReturnValue([v15 path]);
          id v43 = (void *)objc_claimAutoreleasedReturnValue([v27 path]);
          uint64_t v46 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:description:",  70LL,  v45,  @"Failed to decrypt downloaded compute state %@ from %@ to %@",  v5,  v44,  v43));
          uint64_t v47 = *(void *)(*(void *)(a1 + 96) + 8LL);
          __int128 v48 = *(void **)(v47 + 40);
          *(void *)(v47 + 40) = v46;
        }

        else
        {
          if (v41 != (id)3)
          {
LABEL_42:

            if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL) && v27)
            {
              id v49 = objc_msgSend( *(id *)(a1 + 56),  "cpl_decryptedObjectForKey:validateClass:",  @"computeStateAdjustmentFingerprintEnc",  objc_opt_class(NSString));
              __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
              id v51 = objc_msgSend( *(id *)(a1 + 56),  "cpl_decryptedObjectForKey:validateClass:",  @"computeStateLastUpdatedDateEnc",  objc_opt_class(NSDate));
              uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
              id v53 = objc_alloc(&OBJC_CLASS___CPLRecordComputeState);
              id v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:@"computeStateVersion"]);
              id v55 = [v53 initWithItemScopedIdentifier:v5 fileStorageIdentifier:0 version:v54 fileURL:v27 adjustmentFingerprint:v50 lastUpdatedDate:v52];

              [*(id *)(a1 + 88) setObject:v55 forKeyedSubscript:v5];
            }

            goto LABEL_28;
          }

          uint64_t v42 = *(void *)(*(void *)(a1 + 96) + 8LL);
          id v43 = *(void **)(v42 + 40);
          *(void *)(v42 + 40) = 0LL;
          id v44 = v27;
          unint64_t v27 = 0LL;
        }

        goto LABEL_42;
      }
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v22 = sub_100094394();
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v58 = @"resComputeStateData";
          __int16 v59 = 2112;
          uint64_t v60 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[CCSS] %@ for %@ did not provide a file URL",  buf,  0x16u);
        }
      }

      uint64_t v24 = objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
      uint64_t v25 = *(void *)(*(void *)(a1 + 96) + 8LL);
      uint64_t v26 = *(void **)(v25 + 40);
      *(void *)(v25 + 40) = v24;

      if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) {
        sub_10019732C((uint64_t)v5, a1);
      }
    }

    unint64_t v27 = 0LL;
LABEL_28:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

    goto LABEL_29;
  }

id sub_100094394()
{
  if (qword_100296528 != -1) {
    dispatch_once(&qword_100296528, &stru_100241EC8);
  }
  return (id)qword_100296530;
}

void sub_1000943D4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000944D0;
  v10[3] = &unk_100241E80;
  id v11 = a2;
  id v12 = a4;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 72);
  id v13 = *(id *)(a1 + 32);
  uint64_t v17 = v7;
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v8 = v12;
  id v9 = v11;
  [v13 _group:v6 dispatchWhenFinished:v10];
}

void sub_1000944D0(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    BOOL v2 = *(void *)(a1 + 40) == 0LL;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 288LL);
    if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL))
    {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0LL);
    }

    else
    {
      id v22 = [*(id *)(a1 + 56) copy];
      (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v22, 0LL);
    }
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(*(void *)(a1 + 48) + 288LL) + 16LL))( *(void *)(*(void *)(a1 + 48) + 288LL),  0LL);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v5 = *(void **)(a1 + 64);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_1000947FC;
  void v29[3] = &unk_100241E58;
  id v6 = v4;
  id v30 = v6;
  [v5 enumerateKeysAndObjectsUsingBlock:v29];
  if (!*(void *)(a1 + 32) || *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL))
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v7 = *(id *)(a1 + 72);
    id v8 = [v7 countByEnumeratingWithState:&v25 objects:v35 count:16];
    if (v8)
    {
      id v10 = v8;
      uint64_t v11 = *(void *)v26;
      *(void *)&__int128 v9 = 138412546LL;
      __int128 v23 = v9;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v26 != v11) {
            objc_enumerationMutation(v7);
          }
          id v13 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
          if (!_CPLSilentLogging)
          {
            id v14 = sub_100094394();
            id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 path]);
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v32 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[CCSS] Removing discarded decrypted payload at %@",  buf,  0xCu);
            }
          }

          id v24 = 0LL;
          unsigned __int8 v17 = objc_msgSend(v6, "removeItemAtURL:error:", v13, &v24, v23);
          id v18 = v24;
          if ((v17 & 1) == 0
            && ([v6 cplIsFileDoesNotExistError:v18] & 1) == 0
            && !_CPLSilentLogging)
          {
            id v19 = sub_100094394();
            uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              id v21 = (void *)objc_claimAutoreleasedReturnValue([v13 path]);
              *(_DWORD *)__int128 buf = v23;
              uint64_t v32 = v21;
              __int16 v33 = 2112;
              id v34 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[CCSS] Failed to delete discarded decrypted at %@: %@",  buf,  0x16u);
            }
          }
        }

        id v10 = [v7 countByEnumeratingWithState:&v25 objects:v35 count:16];
      }

      while (v10);
    }
  }
}

void sub_1000947FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  id v13 = 0LL;
  unsigned __int8 v8 = [v7 removeItemAtURL:v6 error:&v13];
  id v9 = v13;
  if ((v8 & 1) == 0
    && ([*(id *)(a1 + 32) cplIsFileDoesNotExistError:v9] & 1) == 0
    && !_CPLSilentLogging)
  {
    id v10 = sub_100094394();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 path]);
      *(_DWORD *)__int128 buf = 138412802;
      id v15 = v5;
      __int16 v16 = 2112;
      unsigned __int8 v17 = v12;
      __int16 v18 = 2112;
      id v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[CCSS] Failed to delete downloaded compute state %@ at %@: %@",  buf,  0x20u);
    }
  }
}

void sub_100094A1C(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.downloadcomputestates");
  uint64_t v3 = (void *)qword_100296530;
  qword_100296530 = (uint64_t)v2;
}

void sub_100094B14(id a1)
{
  uint64_t v1 = -[NSRegularExpression initWithPattern:options:error:]( objc_alloc(&OBJC_CLASS___NSRegularExpression),  "initWithPattern:options:error:",  @"0x[0-9a-fA-F]*",  0LL,  0LL);
  os_log_t v2 = (void *)qword_100296540;
  qword_100296540 = (uint64_t)v1;
}

LABEL_50:
  }

  uint64_t v45 = objc_msgSend(v61, "copy", v54);
  progressHandler = v16->_progressHandler;
  v16->_progressHandler = v45;

  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  __int128 v48 = [v47 BOOLForKey:@"CPLRejectOnUploadError"];

  if (v48)
  {
    objc_initWeak(&location, v16);
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472LL;
    v62[2] = sub_1000952EC;
    v62[3] = &unk_10023FBA0;
    objc_copyWeak(&v64, &location);
    __int16 v63 = v60;
    id v49 = [v62 copy];
    completionHandler = v16->_completionHandler;
    v16->_completionHandler = v49;

    objc_destroyWeak(&v64);
    objc_destroyWeak(&location);
  }

  else
  {
    id v51 = [v60 copy];
    uint64_t v52 = v16->_completionHandler;
    v16->_completionHandler = v51;
  }

  -[CPLCloudKitTransportTask setIsUpload:](v16, "setIsUpload:", 1LL);
  -[CPLCloudKitTransportTask setTransportScopeMapping:](v16, "setTransportScopeMapping:", v59);
LABEL_55:

  return v16;
}

            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"mediaMetaData" changeType:2])
            {
              goto LABEL_57;
            }

            __int128 v26 = 0;
LABEL_53:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"mediaMetaData")))
            {
              __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange mediaMetaData](v7, "mediaMetaData"));
              [v44 setLegacyEncryptedObject:v27 forKey:@"mediaMetaDataEnc"];

              if ((v26 & 1) != 0)
              {
LABEL_55:
                __int128 v28 = 1;
                goto LABEL_60;
              }
            }

            else if ((v26 & 1) != 0)
            {
              goto LABEL_55;
            }

  v94 = sub_1000CE8E0(v37);
  __chkstk_darwin(v94);
  *(&v135 - 2) = (uint64_t)&v172;
  sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
  v95 = v148;
  static Message.with(_:)(sub_1000CE8E8, &v135 - 4);
  swift_bridgeObjectRelease(v171);
  id v19 = sub_1000C0BB4(v95);
  id v43 = swift_allocObject(&unk_1002440C8, 24LL, 7LL);
  *(void *)(v43 + 16) = 0LL;
  if (qword_100291710 != -1) {
LABEL_55:
  }
    swift_once(&qword_100291710, sub_1000C0ED0);
  if (byte_100291E58 == 1)
  {
    *(void *)(v43 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0LL);
    aBlock[4] = sub_1000CE1C8;
    v170 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000C1A04;
    aBlock[3] = &unk_100244388;
    id v96 = _Block_copy(aBlock);
    v97 = v170;
    v98 = (id)v19;
    swift_retain(v43);
    swift_release(v97);
    [v98 setRequestCompletedBlock:v96];
    _Block_release(v96);
  }

  v99 = (void *)swift_allocObject(&unk_1002442F8, 72LL, 7LL);
  v100 = v159;
  v101 = v160;
  v102 = v145;
  v99[2] = v159;
  v99[3] = v102;
  v103 = v102;
  v104 = v146;
  v106 = v157;
  v105 = v158;
  v99[4] = v146;
  v99[5] = v105;
  v99[6] = v106;
  v99[7] = v101;
  v107 = v144;
  v99[8] = v144;
  v108 = v100;
  swift_retain(v100);
  swift_retain(v104);
  swift_bridgeObjectRetain(v106);
  swift_retain(v101);
  swift_retain(v107);
  dispatch thunk of CodeOperation.incompleteResponsePreviewBlock.setter(sub_1000CE978, v99);
  v109 = (void *)swift_allocObject(&unk_100244320, 40LL, 7LL);
  v110 = v138;
  v109[2] = v101;
  v109[3] = v110;
  v167 = v43;
  v111 = v139;
  v109[4] = v139;
  swift_retain(v101);
  swift_retain(v111);
  dispatch thunk of CodeOperation.perRecordProgressBlock.setter(sub_1000CE9B8, v109);
  v112 = (void *)swift_allocObject(&unk_100244348, 64LL, 7LL);
  v112[2] = v101;
  v112[3] = v108;
  v112[4] = v103;
  v112[5] = v104;
  v112[6] = v107;
  v113 = v147;
  v112[7] = v147;
  swift_bridgeObjectRetain(v113);
  swift_retain(v108);
  swift_retain(v104);
  swift_retain(v101);
  swift_retain(v107);
  dispatch thunk of CodeOperation.perRecordCompletionBlock.setter(sub_1000CEA08, v112);
  v114 = v142;
  sub_1000CEC58(v148, v142, type metadata accessor for ResourceDownloadRequest);
  v115 = *(unsigned __int8 *)(v140 + 80);
  v116 = (v115 + 16) & ~v115;
  v117 = (v141 + v116 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v118 = (v117 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  v119 = (v118 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  v120 = (v119 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  v121 = (v120 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  v122 = (v121 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  v123 = swift_allocObject(&unk_100244370, v122 + 16, v115 | 7);
  sub_1000CEC9C(v114, v123 + v116, type metadata accessor for ResourceDownloadRequest);
  v124 = v167;
  *(void *)(v123 + v117) = v167;
  v125 = (void *)(v123 + v118);
  v126 = v137;
  *v125 = v143;
  v125[1] = v126;
  v127 = v159;
  v128 = v160;
  *(void *)(v123 + v119) = v160;
  *(void *)(v123 + v120) = v127;
  v129 = (uint64_t *)(v123 + v121);
  v130 = v157;
  *v129 = v158;
  v129[1] = v130;
  v131 = (void *)(v123 + v122);
  v132 = v146;
  *v131 = v145;
  v131[1] = v132;
  v133 = v124;
  swift_retain(v124);
  swift_retain(v127);
  swift_retain(v132);
  swift_retain(v128);
  swift_retain(v126);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_1000CEB5C, v123);
  sub_1000CECE0(v148, type metadata accessor for ResourceDownloadRequest);
  swift_release(v133);
  v134 = v172;
  swift_release(v128);
  swift_release(v127);
  swift_release(v144);
  swift_bridgeObjectRelease(v134);
}

void sub_100095254( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

void sub_100095278(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_100296548 = [v1 BOOLForKey:@"CPLSimulateRejection"];

  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  byte_100296549 = [v2 BOOLForKey:@"CPLSimulateOverQuota"];
}

void sub_1000952EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (v3 && WeakRetained && ([v3 isCPLErrorWithCode:18] & 1) == 0)
  {
    id v6 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 batch]);
    unsigned __int8 v8 = -[NSMutableDictionary initWithCapacity:](v6, "initWithCapacity:", [v7 count]);

    id v9 = objc_alloc(&OBJC_CLASS___NSString);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
    uint64_t v11 = -[NSString initWithFormat:]( v9,  "initWithFormat:",  @"record is rejected because of upload error (%@)",  v10);

    if (!_CPLSilentLogging)
    {
      id v12 = sub_1000955C4();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 batch]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 summaryDescription]);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v32 = v15;
        __int16 v33 = 2112;
        id v34 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Replacing error uploading %@ with rejection error: %@",  buf,  0x16u);
      }
    }

    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 batch]);
    id v17 = [v16 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v25;
      do
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v25 != v19) {
            objc_enumerationMutation(v16);
          }
          id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v24 + 1) + 8 * (void)i) scopedIdentifier]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v11, v21);
        }

        id v18 = [v16 countByEnumeratingWithState:&v24 objects:v30 count:16];
      }

      while (v18);
    }

    uint64_t v28 = CPLErrorRejectedRecordIdentifiersAndReasonsKey;
    unint64_t v29 = v8;
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
    uint64_t v23 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:userInfo:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:userInfo:description:",  18LL,  0LL,  v22,  @"Some records are rejected for testing purpose"));

    id v3 = (id)v23;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000955C4()
{
  if (qword_100296558 != -1) {
    dispatch_once(&qword_100296558, &stru_100242160);
  }
  return (id)qword_100296560;
}

id sub_100095654(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 _runModernOperationsWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[34] + 16LL))();
  }
}

void sub_100096280(_Unwind_Exception *a1)
{
}

void sub_100096298(uint64_t a1, void *a2)
{
  id v6 = a2;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  [*(id *)(a1 + 32) didFinishExecutingPlanWithError:v6];
  [*(id *)(a1 + 32) uploadedSize];
  double v4 = v3;
  [*(id *)(a1 + 40) setUploadedSize:(unint64_t)v3];
  if (v4 > 102400.0)
  {
    [*(id *)(a1 + 32) totalDurationOfUpload];
    if (v5 < 1.0) {
      double v5 = 1.0;
    }
    *(double *)(*(void *)(a1 + 48) + 320LL) = fmin(v4 / v5, 1073741820.0);
  }

  [*(id *)(a1 + 40) setError:v6];
  [*(id *)(a1 + 40) end];
}

id sub_100096434(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
  else {
    return [*(id *)(a1 + 32) _fetchSharedRecordsFromPlanner:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_10009660C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v16 = 0LL;
    id v17 = &v16;
    uint64_t v18 = 0x2020000000LL;
    char v19 = 1;
    v14[0] = 0LL;
    v14[1] = v14;
    v14[2] = 0x3032000000LL;
    v14[3] = sub_100096794;
    void v14[4] = sub_1000967A4;
    id v15 = 0LL;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1000967AC;
    v10[3] = &unk_100241F30;
    id v12 = &v16;
    id v11 = *(id *)(a1 + 32);
    id v13 = v14;
    [v7 enumerateKeysAndObjectsUsingBlock:v10];
    if (*((_BYTE *)v17 + 24)) {
      [*(id *)(a1 + 40) _uploadBatchFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    _Block_object_dispose(v14, 8);
    _Block_object_dispose(&v16, 8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100096770( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100096794(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000967A4(uint64_t a1)
{
}

void sub_1000967AC(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)a1[4];
  id v15 = 0LL;
  unsigned __int8 v10 = [v9 didFetchSharedCKRecord:v8 forRecordWithRecordID:v7 error:&v15];
  id v11 = v15;
  id v12 = v15;
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = v10;
  if (!*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1000955C4();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412802;
        id v17 = v8;
        __int16 v18 = 2112;
        id v19 = v7;
        __int16 v20 = 2112;
        id v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Planner failed to ingest fetched shared record %@ for %@: %@",  buf,  0x20u);
      }
    }

    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v11);
    *a4 = 1;
  }
}

void sub_100096AC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v16 = 0LL;
    id v17 = &v16;
    uint64_t v18 = 0x2020000000LL;
    char v19 = 1;
    v14[0] = 0LL;
    v14[1] = v14;
    v14[2] = 0x3032000000LL;
    v14[3] = sub_100096794;
    void v14[4] = sub_1000967A4;
    id v15 = 0LL;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100096C4C;
    v10[3] = &unk_100241F30;
    id v12 = &v16;
    id v11 = *(id *)(a1 + 32);
    id v13 = v14;
    [v7 enumerateKeysAndObjectsUsingBlock:v10];
    if (*((_BYTE *)v17 + 24)) {
      [*(id *)(a1 + 40) _uploadSharedBatchFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    _Block_object_dispose(v14, 8);
    _Block_object_dispose(&v16, 8);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100096C28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100096C4C(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)a1[4];
  id v15 = 0LL;
  unsigned __int8 v10 = [v9 didFetchPrivateCKRecord:v8 forRecordWithRecordID:v7 error:&v15];
  id v11 = v15;
  id v12 = v15;
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = v10;
  if (!*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1000955C4();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412802;
        id v17 = v8;
        __int16 v18 = 2112;
        id v19 = v7;
        __int16 v20 = 2112;
        id v21 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Planner failed to ingest fetched private record %@ for %@: %@",  buf,  0x20u);
      }
    }

    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v11);
    *a4 = 1;
  }
}

void sub_1000970D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000955C4();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v25 = v8;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Upload for record %@ completed", buf, 0xCu);
      }
    }

    id v12 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1000972C4;
    v17[3] = &unk_100240510;
    id v18 = v8;
    id v13 = *(id *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 32);
    id v19 = v13;
    uint64_t v20 = v14;
    id v21 = *(id *)(a1 + 48);
    id v22 = v9;
    id v23 = *(id *)(a1 + 56);
    [v12 dispatchAsync:v17];

    id v15 = v18;
LABEL_10:

    goto LABEL_11;
  }

  if (!_CPLSilentLogging)
  {
    id v16 = sub_1000955C4();
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v25 = v7;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v15, OS_LOG_TYPE_ERROR, "Failed to save %@: %@", buf, 0x16u);
    }

    goto LABEL_10;
  }

void sub_1000972C4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
  [*(id *)(a1 + 40) didModifyRecordWithID:v2];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10009739C;
  v6[3] = &unk_10023DE80;
  double v3 = *(void **)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v4 = v2;
  id v8 = v4;
  id v9 = *(id *)(a1 + 64);
  [v3 updateContextWithBlock:v6];
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    (*(void (**)(uint64_t, id, double))(v5 + 16))(v5, v4, 1.0);
  }
}

id sub_10009739C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recordCompletionForRecordID:*(void *)(a1 + 40) withError:*(void *)(a1 + 48)];
}

void sub_1000973AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100097440;
  v6[3] = &unk_10023DDE8;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

id sub_100097440(uint64_t a1)
{
  return [*(id *)(a1 + 32) didModifyRecordWithID:*(void *)(a1 + 40)];
}

void sub_10009744C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100097508;
  v9[3] = &unk_1002408C8;
  id v7 = *(void **)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v5;
  id v11 = v7;
  id v12 = v6;
  double v14 = a3;
  id v13 = *(id *)(a1 + 48);
  id v8 = v5;
  [v7 dispatchAsync:v9];
}

void sub_100097508(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000975C8;
  v6[3] = &unk_10023EFC8;
  id v3 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 64);
  id v4 = v2;
  id v8 = v4;
  [v3 updateContextWithBlock:v6];
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, id, double))(v5 + 16))(v5, v4, *(double *)(a1 + 64));
  }
}

id sub_1000975C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateProgress:*(void *)(a1 + 40) forRecordID:*(double *)(a1 + 48)];
}

void sub_1000975D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100097700;
  v16[3] = &unk_100241FF8;
  id v10 = *(void **)(a1 + 40);
  id v17 = *(id *)(a1 + 32);
  id v18 = v9;
  id v19 = v10;
  id v20 = v7;
  id v21 = *(id *)(a1 + 48);
  id v22 = v8;
  id v23 = *(id *)(a1 + 56);
  __int128 v15 = *(_OWORD *)(a1 + 64);
  id v11 = (id)v15;
  __int128 v24 = v15;
  id v12 = v8;
  id v13 = v7;
  id v14 = v9;
  [v17 dispatchAsync:v16];
}

void sub_100097700(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v3)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100097B38;
    v31[3] = &unk_100241FD0;
    id v32 = *(id *)(a1 + 48);
    id v33 = *(id *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "lastOperationRequestUUIDs",  _NSConcreteStackBlock,  3221225472,  sub_100097B38,  &unk_100241FD0));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:",  v3,  v31,  v4,  v5,  @"upload"));

    if (!v6) {
      sub_1001975C4((uint64_t)v3, a1, v2);
    }
    if (([v6 isCPLOperationCancelledError] & 1) == 0)
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_1000955C4();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v35 = v3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to upload batch: %@", buf, 0xCu);
        }
      }

      if ([v6 isCPLErrorWithCode:18] && !_CPLSilentLogging)
      {
        id v9 = sub_1000955C4();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          id v11 = *(void **)(*v2 + 344);
          *(_DWORD *)__int128 buf = 138412290;
          id v35 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Rejected high level batch:\n%@",  buf,  0xCu);
        }

        if (!_CPLSilentLogging)
        {
          id v12 = sub_1000955C4();
          id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
            __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( [v14 objectForKeyedSubscript:CPLErrorRejectedRecordIdentifiersAndReasonsKey]);
            *(_DWORD *)__int128 buf = 138412290;
            id v35 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Rejected scoped identifiers:\n%@",  buf,  0xCu);
          }

          if (!_CPLSilentLogging)
          {
            id v16 = sub_1000955C4();
            id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              id v18 = *(void **)(a1 + 48);
              uint64_t v19 = *(void *)(a1 + 64);
              *(_DWORD *)__int128 buf = 138412546;
              id v35 = v18;
              __int16 v36 = 2112;
              uint64_t v37 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Rejected CK updates: %@\nDeletes: %@",  buf,  0x16u);
            }
          }
        }
      }
    }

    id v20 = v32;
LABEL_33:

    goto LABEL_34;
  }

  id v21 = [*(id *)(a1 + 48) count];
  if (v21 != [*(id *)(a1 + 56) count] && _CPLSilentLogging == 0)
  {
    id v23 = sub_1000955C4();
    __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = *(void **)(a1 + 48);
      uint64_t v26 = *(void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412546;
      id v35 = v25;
      __int16 v36 = 2112;
      uint64_t v37 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Requested updates: %@. Saved records by CloudKit: %@",  buf,  0x16u);
    }
  }

  id v27 = [*(id *)(a1 + 64) count];
  id v6 = 0LL;
  if (v27 != [*(id *)(a1 + 72) count] && !_CPLSilentLogging)
  {
    id v28 = sub_1000955C4();
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
    {
      unint64_t v29 = *(void **)(a1 + 64);
      uint64_t v30 = *(void *)(a1 + 72);
      *(_DWORD *)__int128 buf = 138412546;
      id v35 = v29;
      __int16 v36 = 2112;
      uint64_t v37 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_ERROR,  "Requested deletions: %@. Deleted records by CloudKit: %@",  buf,  0x16u);
    }

    id v6 = 0LL;
    goto LABEL_33;
  }

NSMutableArray *sub_100097B38(uint64_t a1)
{
  id v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  (char *)[*(id *)(a1 + 32) count] + (void)objc_msgSend(*(id *)(a1 + 40), "count"));
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "recordID", (void)v10));
        -[NSMutableArray addObject:](v2, "addObject:", v8);

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  -[NSMutableArray addObjectsFromArray:](v2, "addObjectsFromArray:", *(void *)(a1 + 40));
  return v2;
}

void sub_100097E50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = sub_100097E98(1LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);
}

id sub_100097E98(uint64_t a1)
{
  if (!_CPLSilentLogging)
  {
    id v2 = sub_1000955C4();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      else {
        id v4 = off_100242180[a1 - 1];
      }
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Simulating over quota for phase: %@",  buf,  0xCu);
    }
  }

  else {
    id v5 = off_100242180[a1 - 1];
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  30LL,  @"Simulated over-quota error for phase %@",  v5));
  if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorCausedBySharedSyncForError:]( &OBJC_CLASS___CPLErrors,  "cplErrorCausedBySharedSyncForError:",  v6));

    uint64_t v6 = (void *)v7;
  }

  return v6;
}

id sub_100097FE8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  [*(id *)(a1 + 32) planProgess];
  return objc_msgSend(v3, "updateProgress:");
}

void sub_10009801C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) didFinishUploadOfRecordsWithError:v3];
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 32) updateTargetMappingAfterUpload];
    [*(id *)(a1 + 40) _fetchPrivateRecordsFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_10009824C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = sub_100097E98(2LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);
}

id sub_100098294(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  [*(id *)(a1 + 32) planProgess];
  return objc_msgSend(v3, "updateProgress:");
}

void sub_1000982C8(uint64_t a1, void *a2)
{
  id v5 = a2;
  [*(id *)(a1 + 32) didFinishUploadOfSharedRecordsWithError:v5];
  if (v5)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorCausedBySharedSyncForError:]( &OBJC_CLASS___CPLErrors,  "cplErrorCausedBySharedSyncForError:",  v5));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }

  else
  {
    [*(id *)(a1 + 40) _executeSharePlanFromPlanner:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_100098514(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = sub_100097E98(3LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);
}

void sub_10009855C(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  if (a3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorCausedBySharedSyncForError:]( &OBJC_CLASS___CPLErrors,  "cplErrorCausedBySharedSyncForError:",  a3));
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    [*(id *)(a1 + 32) didFinishUploadOfRecordsWithError:0];
    [*(id *)(a1 + 32) updateTargetMappingAfterUploadWithRealSourceRecordIDs:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1000987B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = sub_100097E98(4LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);
}

uint64_t sub_100098800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  [*(id *)(a1 + 32) updateTargetMappingAfterUploadWithRealSourceRecordIDs:a2];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100098D94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100098E2C;
  v8[3] = &unk_10023DE80;
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  id v10 = v5;
  id v11 = v6;
  id v7 = v5;
  [v9 dispatchAsync:v8];
}

void sub_100098E2C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100098FD8;
    v9[3] = &unk_10023F778;
    id v10 = *(id *)(a1 + 48);
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastOperationRequestUUIDs]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitUploadError:getDestinationRecordIDs:scopeProvider:withRequestUUIDs:uploadAction:",  v2,  v9,  v3,  v4,  @"update contributors"));

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_1000955C4();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = [*(id *)(a1 + 48) count];
        *(_DWORD *)__int128 buf = 134217984;
        id v12 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Updated contributors on %lu records",  buf,  0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }
}

NSMutableArray *sub_100098FD8(uint64_t a1)
{
  id v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 32) count]);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "recordID", (void)v10));
        -[NSMutableArray addObject:](v2, "addObject:", v8);

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  return v2;
}

void sub_1000992C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000992E0(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
  __int128 v10 = v9;
  if (v9)
  {
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 sharingRecordChangeData]);
    if (v11)
    {
      id v12 = +[CPLArchiver unarchiveObjectWithData:ofClass:]( &OBJC_CLASS___CPLArchiver,  "unarchiveObjectWithData:ofClass:",  v11,  objc_opt_class(&OBJC_CLASS___CKRecord));
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = v13;
      if (v13)
      {
        __int128 v15 = *(void **)(a1 + 40);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 recordID]);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v16]);

        id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 updateSharingContributorUserIdentifiers]);
        if (v17)
        {
          objc_msgSend(v17, "cpl_updateContributorsOnSharedRecord:", v18);
        }

        else
        {
          objc_msgSend(v14, "cpl_updateContributorsOnSharedRecord:", v18);
          id v27 = *(void **)(a1 + 40);
          id v28 = (void *)objc_claimAutoreleasedReturnValue([v14 recordID]);
          [v27 setObject:v14 forKeyedSubscript:v28];

          unint64_t v29 = *(void **)(a1 + 48);
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v14 recordID]);
          [v29 setObject:v7 forKeyedSubscript:v30];
        }
      }

      else
      {
        if (!_CPLSilentLogging)
        {
          id v22 = sub_1000955C4();
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to prepare CK record: record change data returned nil",  buf,  2u);
          }
        }

        uint64_t v24 = objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
        uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8LL);
        uint64_t v26 = *(void **)(v25 + 40);
        *(void *)(v25 + 40) = v24;

        *a4 = 1;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v20 = sub_1000955C4();
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v32 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Won't update contributors for %@ as the record is not shared",  buf,  0xCu);
      }
    }

void sub_1000995D8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10, __int128 buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v12 = objc_begin_catch(a1);
      if (!_CPLSilentLogging)
      {
        id v13 = sub_1000955C4();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to prepare CK record: %@",  (uint8_t *)&buf,  0xCu);
        }
      }

      uint64_t v15 = objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
      uint64_t v16 = *(void *)(*(void *)(v11 + 56) + 8LL);
      id v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      *a10 = 1;
      objc_end_catch();
      JUMPOUT(0x10009958CLL);
    }

    objc_begin_catch(a1);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x1000996C8LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000999DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a3)
  {
    (*(void (**)(void))(v4[34] + 16LL))();
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v9 = 0LL;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 _computeUpdatedSharedCKRecordsFromFoundRecord:a2 usingUpdates:v5 error:&v9]);
    id v7 = v9;
    id v8 = *(void **)(a1 + 32);
    if (v6) {
      [v8 _updateCKRecordsInSharedScope:v6];
    }
    else {
      (*(void (**)(void))(v8[34] + 16LL))();
    }
  }

BOOL sub_100099F44(id a1, CPLScopedIdentifier *a2, CKRecord *a3)
{
  return 1;
}

BOOL sub_100099F4C(id a1, CPLScopedIdentifier *a2, CPLCKRecordBuilder *a3, id *a4)
{
  return 1;
}

void sub_10009A010(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.uploadbatch");
  id v3 = (void *)qword_100296560;
  qword_100296560 = (uint64_t)v2;
}

id *sub_10009A258(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)&OBJC_CLASS___CPLCKRecordRequest;
    uint64_t v11 = (id *)objc_msgSendSuper2(&v15, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      id v12 = [v10 copy];
      id v13 = a1[3];
      a1[3] = v12;
    }
  }

  return a1;
}

void sub_10009A478(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    if (![*(id *)(a1 + 32) allowsFetchCache]
      || (id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fetchCache]),
          id v4 = *(void **)(*(void *)(a1 + 40) + 32LL),
          v3,
          v3 != v4))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      v6[2] = sub_10009A548;
      v6[3] = &unk_1002411B8;
      void v6[4] = *(void *)(a1 + 40);
      objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v6, v5);
    }

    objc_msgSend( *(id *)(a1 + 40),  "_fetchRecordsForNextOperationTypeInEnumerator:task:completionHandler:",  *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 56),  v5);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

id sub_10009A548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) didFetchRecordWithID:a2 record:a3];
}

void sub_10009A610(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    id v5 = *(void **)(a1 + 32);
    id v9 = 0LL;
    unsigned __int8 v6 = [v5 processedFetchedRequestedRecordsWithError:&v9];
    id v7 = v9;
    id v8 = v7;
    if ((v6 & 1) == 0) {
      id v4 = v7;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10009ADB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10009ADC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009ADD8(uint64_t a1)
{
}

void sub_10009ADE0(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceForType:a2]);

  if (v4)
  {
    id v5 = sub_1000896D4((uint64_t)&OBJC_CLASS___CPLCloudKitResourceKeys, a2);
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      uint64_t v23 = (uint64_t)v6;
      unsigned int v7 = +[CPLResource resourceTypeSupportsResourceExpunge:]( &OBJC_CLASS___CPLResource,  "resourceTypeSupportsResourceExpunge:",  a2);
      unsigned __int8 v6 = (void *)v23;
      if (v7)
      {
        id v8 = *(void **)(a1 + 40);
        uint64_t v9 = sub_100089C1C(v23);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v10]);

        id v12 = *(void **)(a1 + 40);
        uint64_t v13 = sub_100089C28(v23);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        objc_super v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v14]);

        id v16 = objc_alloc_init(&OBJC_CLASS___CPLExpungeableResourceState);
        [v16 setResourceType:a2];
        if (v11) {
          id v17 = [v11 unsignedIntegerValue];
        }
        else {
          id v17 = 0LL;
        }
        [v16 setExpungedState:v17];
        if (v15) {
          id v18 = v15;
        }
        else {
          id v18 = 0LL;
        }
        [v16 setExpungedDate:v18];
        id v19 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        if (!v19)
        {
          uint64_t v20 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
          uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8LL);
          id v22 = *(void **)(v21 + 40);
          *(void *)(v21 + 40) = v20;

          id v19 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        }

        [v19 addObject:v16];

        unsigned __int8 v6 = (void *)v23;
      }
    }
  }

NSDate *sub_10009B354(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v2 = v1;
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v3 timeIntervalSinceReferenceDate];
    double v5 = v4;
    [v2 timeIntervalSinceReferenceDate];
    double v7 = v6;

    double v8 = round(v7) + 1.0;
    uint32_t v9 = arc4random_uniform(0x3Bu);
    uint64_t v11 = -[NSDate initWithTimeIntervalSinceReferenceDate:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSinceReferenceDate:",  v5);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}

void sub_10009B4A4(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_10025C648));
  id v2 = (void *)qword_100296570;
  qword_100296570 = v1;
}

void sub_10009B698(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"resFaceCropRes"));
  id v2 = (void *)qword_100296580;
  qword_100296580 = v1;
}

void sub_10009B83C(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"resCustomUserAssetList"));
  id v2 = (void *)qword_100296590;
  qword_100296590 = v1;
}

void sub_10009C0B4(_Unwind_Exception *a1)
{
}

void sub_10009C0D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10009C160()
{
  if (qword_100296598 != -1) {
    dispatch_once(&qword_100296598, &stru_100242340);
  }
  return (id)qword_1002965A0;
}

void sub_10009C1A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (!*(_BYTE *)(v14 + 24))
  {
    *(_BYTE *)(v14 + 24) = 1;
    if (v12)
    {
      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  80LL,  @"Failed to publish asset. Error: %@",  v12));
      (*(void (**)(uint64_t, void, void, void, void, void *))(v15 + 16))(v15, 0LL, 0LL, 0LL, 0LL, v16);
    }

    else
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v11 downloadURL]);
      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v11 downloadURLExpiration]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 mediaItemMaker]);
      if (v18)
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v11 mediaItemMaker]);
        id v30 = 0LL;
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 dataRepresentationWithError:&v30]);
        id v28 = v30;

        if (!v20)
        {
          if (!_CPLSilentLogging)
          {
            id v21 = sub_10009C160();
            id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordID]);
              uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) filename]);
              *(_DWORD *)__int128 buf = 138412802;
              id v32 = v23;
              __int16 v33 = 2112;
              id v34 = v24;
              __int16 v35 = 2112;
              id v36 = v28;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Unable to serialize media item maker for %@/%@: %@",  buf,  0x20u);
            }
          }

          uint64_t v20 = 0LL;
        }

        uint64_t v25 = v28;
      }

      else
      {
        uint64_t v20 = 0LL;
        uint64_t v25 = 0LL;
      }

      uint64_t v26 = *(void *)(a1 + 40);
      id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fingerPrint]);
      (*(void (**)(uint64_t, void *, void *, void *, void *, void))(v26 + 16))(v26, v17, v20, v29, v27, 0LL);
    }
  }
}

void sub_10009C428(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (!*(_BYTE *)(v4 + 24))
  {
    *(_BYTE *)(v4 + 24) = 1;
    uint64_t v5 = *(void *)(a1 + 32);
    id v9 = v3;
    if (v3) {
      id v6 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  80LL,  @"Failed to publish asset. Error: %@",  v3);
    }
    else {
      id v6 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failed to publish asset with no error",  v8);
    }
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, void, void, void, void, void *))(v5 + 16))(v5, 0LL, 0LL, 0LL, 0LL, v7);

    id v3 = v9;
  }
}

id sub_10009C57C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return (id)(*(uint64_t (**)(void))(v2[38] + 16LL))();
  }
  else {
    return _[v2 _fetchStreamingURL];
  }
}

void sub_10009CCB4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10009CDE4;
  v22[3] = &unk_1002422F8;
  id v16 = *(void **)(a1 + 40);
  id v23 = *(id *)(a1 + 32);
  id v24 = v15;
  id v25 = v11;
  id v26 = v13;
  id v27 = v12;
  id v28 = v16;
  id v29 = v14;
  id v17 = v14;
  id v18 = v12;
  id v19 = v13;
  id v20 = v11;
  id v21 = v15;
  [v23 dispatchAsync:v22];
}

void sub_10009CDE4(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v10)
  {
    id v2 = (CPLStreamingContentItem *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CPLResource shortDescriptionForResourceType:]( CPLResource,  "shortDescriptionForResourceType:",  [*(id *)(*(void *)(a1 + 32) + 280) resourceType]));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v10,  v2,  @"Failed to get streaming url for %@",  v3));
  }

  else
  {
    if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56))
    {
      uint64_t v4 = 0LL;
      goto LABEL_8;
    }

    id v2 = objc_opt_new(&OBJC_CLASS___CPLStreamingContentItem);
    -[CPLStreamingContentItem setStreamingURL:](v2, "setStreamingURL:", *(void *)(a1 + 48));
    -[CPLStreamingContentItem setMediaItemMakerData:](v2, "setMediaItemMakerData:", *(void *)(a1 + 64));
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 296LL);
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 56);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v5 setObject:v2 forKey:v6 expirationDate:v7 date:v3];
    uint64_t v4 = 0LL;
  }

LABEL_8:
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 304LL) + 16LL))();
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 304);
  *(void *)(v8 + 304) = 0LL;
}

void sub_10009D3B8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resourcepublish");
  id v3 = (void *)qword_1002965A0;
  qword_1002965A0 = (uint64_t)v2;
}

id sub_10009DD4C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) encodeSystemFieldsWithCoder:a2];
}

LABEL_36:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"importGroupIdentifier" changeType:2])
            {
              goto LABEL_43;
            }

            id v22 = 0;
LABEL_39:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"importGroupIdentifier")))
            {
              id v23 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange importGroupIdentifier](v7, "importGroupIdentifier"));
              [v44 setObject:v23 forKey:@"importGroupId"];

              if ((v22 & 1) != 0)
              {
LABEL_41:
                id v24 = 1;
                goto LABEL_46;
              }
            }

            else if ((v22 & 1) != 0)
            {
              goto LABEL_41;
            }
    }

    __int16 v35 = *(void *)(a1 + 48);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
    (*(void (**)(uint64_t, void, void, void, void *))(v35 + 16))(v35, 0LL, 0LL, 0LL, v10);
LABEL_47:

    goto LABEL_48;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_48:
}

    id v24 = 0;
  }

  return v24 & 1;
}

  if (-[NSFileManager cplIsFileExistsError:](self->_fileManager, "cplIsFileExistsError:", v30))
  {
    if (_CPLSilentLogging) {
      goto LABEL_45;
    }
    id v44 = sub_1001892A0();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      goto LABEL_44;
    }
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v17 path]);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v65 = v46;
    uint64_t v47 = "Tried to store %@ but file appeared miraculously!";
    __int128 v48 = v45;
    id v49 = 12;
    goto LABEL_43;
  }

  if (_CPLSilentLogging) {
    goto LABEL_45;
  }
  __int128 v50 = sub_1001892A0();
  uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v17 path]);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v65 = v15;
    id v66 = 2112;
    id v67 = v46;
    id v68 = 2112;
    v69 = v30;
    uint64_t v47 = "Failed to store %@ to %@: %@";
    __int128 v48 = v45;
    id v49 = 32;
LABEL_43:
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, v47, buf, v49);
  }

LABEL_57:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"originalOrientation" changeType:2])
            {
              goto LABEL_64;
            }

            id v28 = 0;
LABEL_60:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"originalOrientation")))
            {
              id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLMasterChange originalOrientation](v7, "originalOrientation")));
              [v44 setObject:v29 forKey:@"originalOrientation"];

              if ((v28 & 1) != 0)
              {
LABEL_62:
                id v30 = 1;
                goto LABEL_67;
              }
            }

            else if ((v28 & 1) != 0)
            {
              goto LABEL_62;
            }

        uint64_t v4 = (id)objc_claimAutoreleasedReturnValue( +[CPLErrors incorrectParametersErrorForParameter:]( &OBJC_CLASS___CPLErrors,  "incorrectParametersErrorForParameter:",  @"currentUserParticipant"));
        id v29 = 0LL;
LABEL_58:

        if (v29) {
          goto LABEL_59;
        }
        goto LABEL_30;
      }

      if (_CPLSilentLogging) {
        goto LABEL_57;
      }
      unsigned int v40 = sub_1000B20D0();
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      id v41 = self->_scope;
      *(_DWORD *)__int128 buf = 138412290;
      v75 = v41;
      id v28 = "Trying to remove current user from %@ but current user is not a participant";
    }

          if (!_CPLSilentLogging)
          {
            __int16 v80 = sub_100140908();
            id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              v82 = (void *)objc_claimAutoreleasedReturnValue([v72 scopeIdentifier]);
              uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringFromDateAgo:now:]( &OBJC_CLASS___CPLDateFormatter,  "stringFromDateAgo:now:",  v79,  0LL));
              *(_DWORD *)__int128 buf = 138412546;
              v127 = v82;
              v128 = 2112;
              v129 = v83;
              _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "Setting delete date for %@ to %@",  buf,  0x16u);
            }
          }

          [v74 setValue:1 forFlag:8];
          if (!-[CPLPrequeliteScopeStorage setDeleteDate:forScope:error:]( self,  "setDeleteDate:forScope:error:",  v79,  v72,  0LL))
          {
            id v70 = 0;
            goto LABEL_66;
          }

          v84 = (void *)objc_claimAutoreleasedReturnValue([v79 dateByAddingTimeInterval:-2592000.0]);
          id v70 = -[CPLPrequeliteScopeStorage setDisabledDate:forScope:error:]( self,  "setDisabledDate:forScope:error:",  v84,  v72,  0LL);

          if ((v70 & 1) == 0) {
            goto LABEL_66;
          }
          goto LABEL_63;
        }

        id v79 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage transportScopeForScope:](self, "transportScopeForScope:", v72));
        if (v79) {
          [v115 upgradeFlags:v74 fromTransportScope:v79];
        }
LABEL_66:

        if ((v70 & 1) != 0 && [v74 updatedFlagsMask])
        {
          if (!_CPLSilentLogging)
          {
            v85 = sub_100140908();
            id v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
            {
              v87 = (void *)objc_claimAutoreleasedReturnValue([v72 scopeIdentifier]);
              *(_DWORD *)__int128 buf = 138412546;
              v127 = v87;
              v128 = 2112;
              v129 = v74;
              _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "Upgrading flags for %@ with %@",  buf,  0x16u);
            }
          }

          id v70 = -[CPLPrequeliteScopeStorage updateFlags:forScope:error:]( self,  "updateFlags:forScope:error:",  v74,  v72,  0LL);
        }

        if ((v70 & 1) != 0)
        {
          if (v119 == (id)++v71)
          {
            v119 = [obj countByEnumeratingWithState:&v120 objects:v130 count:16];
            if (!v119) {
              break;
            }
            continue;
          }

          goto LABEL_45;
        }

        break;
      }

LABEL_71:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"originatingFingerprint" changeType:2])
            {
              goto LABEL_78;
            }

            id v32 = 0;
LABEL_74:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"originatingFingerprint")))
            {
              __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange originatingFingerprint](v7, "originatingFingerprint"));
              [v44 setObject:v33 forKey:@"originatingFingerprint"];

              if ((v32 & 1) != 0)
              {
LABEL_76:
                id v34 = 1;
                goto LABEL_81;
              }
            }

            else if ((v32 & 1) != 0)
            {
              goto LABEL_76;
            }

                  if (!_CPLSilentLogging)
                  {
                    id v62 = sub_10011CDF4();
                    id v36 = (__CFString *)objc_claimAutoreleasedReturnValue(v62);
                    if (os_log_type_enabled((os_log_t)v36, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__int128 buf = 138412290;
                      v129 = v21;
                      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v36,  OS_LOG_TYPE_DEFAULT,  "Client is asking to delete %@ but the record is not even in the cloud",  buf,  0xCu);
                    }

                    uint64_t v60 = 0;
                    id v25 = @"record is not in the cloud";
                    id v26 = 25LL;
                    __int16 v63 = v114;
                    goto LABEL_107;
                  }

                  uint64_t v60 = 0;
                  id v25 = @"record is not in the cloud";
                  id v26 = 25LL;
                  __int16 v63 = v114;
LABEL_108:

                  if ((v63 & 1) == 0 && v60)
                  {
                    -[NSMutableArray addObject:](v100, "addObject:", v21);
                    id v15 = v104;
                    goto LABEL_113;
                  }

                  id v15 = v104;
                  if (!v63) {
                    goto LABEL_112;
                  }
                  goto LABEL_23;
                }
              }
            }
          }

          else
          {
            id v25 = @"scope is unknown";
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:](v107, "setObject:forKeyedSubscript:", v25, v32);
        }

        if (!_CPLSilentLogging)
        {
          id v51 = sub_10011CDF4();
          uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            v129 = v21;
            v130 = 2112;
            v131 = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Client is asking to delete %@ but it's not safe because of its scope: %@",  buf,  0x16u);
          }
        }

        if (!v114)
        {
          id v26 = 33LL;
LABEL_112:
          ((void (*)(void *, __CFString *, uint64_t, __CFString *))v19[2])(v19, v21, v26, v25);
          goto LABEL_113;
        }

LABEL_78:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"importedBy" changeType:2])
            {
              goto LABEL_85;
            }

            id v34 = 0;
LABEL_81:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"importedBy")))
            {
              __int16 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  -[CPLMasterChange importedBy](v7, "importedBy")));
              [v44 setObject:v35 forKey:@"importedBy"];

              if ((v34 & 1) != 0)
              {
LABEL_83:
                id v36 = 1;
                goto LABEL_88;
              }
            }

            else if ((v34 & 1) != 0)
            {
              goto LABEL_83;
            }

LABEL_85:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"importedByBundleIdentifier" changeType:2])
            {
              goto LABEL_92;
            }

            id v36 = 0;
LABEL_88:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"importedByBundleIdentifier")))
            {
              uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange importedByBundleIdentifier](v7, "importedByBundleIdentifier"));
              [v44 setLegacyEncryptedObject:v37 forKey:@"importedByBundleIdentifierEnc"];

              if ((v36 & 1) != 0)
              {
LABEL_90:
                uint64_t v38 = 1;
                goto LABEL_95;
              }
            }

            else if ((v36 & 1) != 0)
            {
              goto LABEL_90;
            }

LABEL_92:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"importedByDisplayName" changeType:2])
            {
              goto LABEL_99;
            }

            uint64_t v38 = 0;
LABEL_95:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"importedByDisplayName")))
            {
              id v39 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange importedByDisplayName](v7, "importedByDisplayName"));
              [v44 setLegacyEncryptedObject:v39 forKey:@"importedByDisplayNameEnc"];

              if ((v38 & 1) != 0)
              {
LABEL_97:
                unsigned int v40 = 1;
                goto LABEL_102;
              }
            }

            else if ((v38 & 1) != 0)
            {
              goto LABEL_97;
            }

LABEL_99:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"videoFrameRate" changeType:2])
            {
              goto LABEL_106;
            }

            unsigned int v40 = 0;
LABEL_102:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"videoFrameRate")))
            {
              id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  -[CPLMasterChange videoFrameRate](v7, "videoFrameRate")));
              [v44 setObject:v41 forKey:@"videoFrameRate"];

              if ((v40 & 1) != 0)
              {
LABEL_104:
                uint64_t v42 = 1;
                goto LABEL_109;
              }
            }

            else if ((v40 & 1) != 0)
            {
              goto LABEL_104;
            }

  if ((CMTimeRange.isValid.getter(v94) & 1) != 0)
  {
    v208 = v213;
    sub_1000C0804(v64, v213);
    RequestItem.timeRange.setter(v208);
  }
}

LABEL_106:
            if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
              && ![v9 areObjectsDifferentOnProperty:@"codec" changeType:2])
            {
LABEL_112:
              if ((-[CPLMasterChange isFullRecord](v7, "isFullRecord") & 1) == 0
                && ![v9 areObjectsDifferentOnProperty:@"expungeableResourceStates" changeType:2])
              {
LABEL_116:

                goto LABEL_117;
              }

LABEL_114:
              if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"expungeableResourceStates"))) {
                -[CPLMasterChange addExpungeableResourceStateToCKRecord:]( v7,  "addExpungeableResourceStateToCKRecord:",  v44);
              }
              goto LABEL_116;
            }

            uint64_t v42 = 0;
LABEL_109:
            if (-[CPLMasterChange shouldApplyPropertiesWithSelector:]( v7,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"codec")))
            {
              id v43 = (void *)objc_claimAutoreleasedReturnValue(-[CPLMasterChange codec](v7, "codec"));
              [v44 setObject:v43 forKey:@"codec"];
            }

            if ((v42 & 1) != 0) {
              goto LABEL_114;
            }
            goto LABEL_112;
          }

          id v18 = 1;
          goto LABEL_25;
        }

        id v14 = 1;
        goto LABEL_17;
      }
    }

    id v10 = 1;
    goto LABEL_9;
  }

LABEL_117:
}

    [v49 doubleValue];
    id v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:"));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v42,  "setObject:forKeyedSubscript:",  v66,  CPLErrorRetryAfterDateKey);

    goto LABEL_118;
  }

  id v16 = -[NSString initWithFormat:arguments:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:arguments:", v15, a7);
  id v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary userInfo](v12, "userInfo"));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:NSLocalizedDescriptionKey]);
  id v19 = v13;
  if (v18)
  {
    id v20 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@ (%@)", v16, v18);

    id v16 = v20;
  }

  id v21 = [v17 mutableCopy];
  id v22 = v21;
  if (v21) {
    id v23 = (NSMutableDictionary *)v21;
  }
  else {
    id v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  id v36 = v23;

  -[NSMutableDictionary setObject:forKey:](v36, "setObject:forKey:", v16, NSLocalizedDescriptionKey);
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary domain](v12, "domain"));
  __int16 v35 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v37,  -[NSMutableDictionary code](v12, "code"),  v36));

  id v13 = v19;
LABEL_127:
  id v73 = (char *)[v14 count];
  if (v73 && v35)
  {
    v74 = v73;
    if ((unint64_t)v73 < 6)
    {
      __int16 v78 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "componentsJoinedByString:", @", "));
    }

    else
    {
      v75 = objc_alloc(&OBJC_CLASS___NSString);
      __int16 v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subarrayWithRange:", v74 - 5, 5));
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "componentsJoinedByString:", @", "));
      __int16 v78 = -[NSString initWithFormat:](v75, "initWithFormat:", @"..., %@", v77);
    }

    id v79 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary userInfo](v35, "userInfo"));
    __int16 v80 = [v79 mutableCopy];
    id v81 = v80;
    if (v80) {
      v82 = (NSMutableDictionary *)v80;
    }
    else {
      v82 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    uint64_t v83 = v82;

    -[NSMutableDictionary setObject:forKey:](v83, "setObject:forKey:", v78, CPLErrorRequestUUIDs);
    v84 = objc_alloc(&OBJC_CLASS___NSError);
    v85 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary domain](v35, "domain"));
    id v86 = -[NSError initWithDomain:code:userInfo:]( v84,  "initWithDomain:code:userInfo:",  v85,  -[NSMutableDictionary code](v35, "code"),  v83);

    __int16 v35 = (NSMutableDictionary *)v86;
  }

  if (!v35) {
    __int16 v35 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
  }

  return v35;
}

LABEL_54:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"viewCount" changeType:2])
            {
              goto LABEL_61;
            }

            id v27 = 0;
LABEL_57:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"viewCount")))
            {
              id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[CPLAssetChange viewCount](v9, "viewCount")));
              [v7 setObject:v28 forKey:@"viewCount"];
            }

            if ((v27 & 1) != 0)
            {
              id v29 = 1;
              goto LABEL_64;
            }

LABEL_61:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"lastSharedDate" changeType:2])
            {
              goto LABEL_68;
            }

            id v29 = 0;
LABEL_64:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"lastSharedDate")))
            {
              id v30 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange lastSharedDate](v9, "lastSharedDate"));
              [v7 setObject:v30 forKey:@"lastSharedDate"];
            }

            if ((v29 & 1) != 0)
            {
              int8x16_t v31 = 1;
              goto LABEL_71;
            }

LABEL_68:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"shareCount" changeType:2])
            {
              goto LABEL_75;
            }

            int8x16_t v31 = 0;
LABEL_71:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"shareCount")))
            {
              id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[CPLAssetChange shareCount](v9, "shareCount")));
              [v7 setObject:v32 forKey:@"shareCount"];
            }

            if ((v31 & 1) != 0)
            {
              __int16 v33 = 1;
              goto LABEL_78;
            }

                          uint64_t v60 = 0;
                          id v25 = @"resource is stale";
LABEL_69:
                          id v26 = 27LL;
                          goto LABEL_89;
                        }
                      }

                      else
                      {

                        if (v72 | v74) {
                          goto LABEL_98;
                        }
                      }

                      __int16 v76 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s identity](v106, "identity"));
                      uint64_t v77 = objc_claimAutoreleasedReturnValue([v76 fileUTI]);

                      __int16 v78 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identity](v21, "identity"));
                      id v79 = objc_claimAutoreleasedReturnValue([v78 fileUTI]);

                      if (v77 && v79)
                      {
                        __int16 v80 = [(id)v77 isEqual:v79];

                        if ((v80 & 1) == 0) {
                          goto LABEL_98;
                        }
                      }

                      else
                      {

                        if (v77 | v79) {
                          goto LABEL_98;
                        }
                      }

                      if (-[NSMutableSet containsObject:](v97, "containsObject:", v110))
                      {
                        if (_CPLSilentLogging)
                        {
                          id v25 = 0LL;
                          id v26 = 0LL;
                          uint64_t v60 = 1;
                          goto LABEL_89;
                        }

                        v84 = sub_10011CDF4();
                        v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
                        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)__int128 buf = 138412290;
                          v129 = v21;
                          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "Client is asking to delete %@ and it seems safe to do so",  buf,  0xCu);
                        }

                        uint64_t v83 = v85;
                        id v25 = 0LL;
                        id v26 = 0LL;
                        uint64_t v60 = 1;
                        goto LABEL_103;
                      }

                      if (v95)
                      {
                        if (_CPLSilentLogging)
                        {
                          id v25 = 0LL;
                          id v26 = 0LL;
                          uint64_t v60 = 0;
                          __int16 v63 = 1;
                          goto LABEL_105;
                        }

                        id v86 = sub_10011CDF4();
                        v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
                        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)__int128 buf = 138412290;
                          v129 = v21;
                          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "Client is asking to delete %@ and we need to confirm with server",  buf,  0xCu);
                        }

                        uint64_t v83 = v87;
                        id v25 = 0LL;
                        id v26 = 0LL;
                        uint64_t v60 = 0;
                        __int16 v63 = 1;
                      }

                      else
                      {
                        if (_CPLSilentLogging)
                        {
                          uint64_t v60 = 0;
                          id v25 = @"resource is not confirmed";
                          goto LABEL_69;
                        }

                        id v88 = sub_10011CDF4();
                        __int16 v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
                        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)__int128 buf = 138412546;
                          v129 = v21;
                          v130 = 2112;
                          v131 = (__CFString *)v106;
                          _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "Client is asking to delete %@ but it has not been confirmed yet: %@",  buf,  0x16u);
                        }

                        uint64_t v60 = 0;
                        uint64_t v83 = v89;
                        id v25 = @"resource is not confirmed";
LABEL_102:
                        id v26 = 27LL;
LABEL_103:
                        __int16 v63 = v114;
                      }

                      goto LABEL_105;
                    }

                    buf[0] = 0;
                    v118 = 0;
                    unsigned int v40 = objc_claimAutoreleasedReturnValue([v99 recordWithScopedIdentifier:v34 isConfirmed:buf isStaged:&v118]);
                    if (v40)
                    {
                      id v36 = (__CFString *)v40;
                      -[NSMutableDictionary setObject:forKey:](v103, "setObject:forKey:", v40, v34);
                      if (buf[0] || v96) {
                        -[NSMutableSet addObject:](v97, "addObject:", v34);
                      }
                      goto LABEL_42;
                    }

                    __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    -[NSMutableDictionary setObject:forKey:](v103, "setObject:forKey:", v61, v34);
                  }

LABEL_82:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) != 0
              || [v11 areObjectsDifferentOnProperty:@"computeStateVersion" changeType:2])
            {
              -[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"computeStateVersion"));
            }

            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ([v11 areObjectsDifferentOnProperty:@"computeStateAdjustmentFingerprint" changeType:2] & 1) == 0)
            {
              goto LABEL_90;
            }

            __int16 v35 = 0;
LABEL_88:
            -[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"computeStateAdjustmentFingerprint"));
            if ((v35 & 1) != 0)
            {
              -[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"computeStateLastUpdatedDate"));
              id v36 = 1;
              goto LABEL_96;
            }

    id v11 = *(void *)(a1 + 88);
    id v12 = objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
    goto LABEL_83;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeChangeForScope:v7]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 share]);
  id v15 = v14;
  if (!v14)
  {
    if (!_CPLSilentLogging)
    {
      id v67 = sub_10011CDF4();
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v140 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "Trying to remove participants from %@ but we have no share",  buf,  0xCu);
      }
    }

    v69 = *(void *)(a1 + 88);
    id v70 = objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
    goto LABEL_96;
  }

  if (([v14 ownerIsCurrentUser] & 1) == 0)
  {
    if (!_CPLSilentLogging)
    {
      id v71 = sub_10011CDF4();
      id v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v140 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "Non-owner trying to remove users from %@",  buf,  0xCu);
      }
    }

    v69 = *(void *)(a1 + 88);
    id v70 = objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  52LL,  @"Permission denied: not an owner"));
LABEL_96:
    id v17 = (void *)v70;
    (*(void (**)(uint64_t, void, uint64_t))(v69 + 16))(v69, 0LL, v70);
    goto LABEL_129;
  }

  id v16 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportScopeForScope:v7]);
  id v17 = (void *)v16;
  if (!v16)
  {
    id v73 = *(void *)(a1 + 88);
    v74 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors invalidScopeErrorWithScopeIdentifier:]( &OBJC_CLASS___CPLErrors,  "invalidScopeErrorWithScopeIdentifier:",  *(void *)(a1 + 40)));
    (*(void (**)(uint64_t, void, void *))(v73 + 16))(v73, 0LL, v74);

    goto LABEL_129;
  }

  v103 = (void *)v16;
  v108 = v15;
  v106 = v3;
  id v18 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [*(id *)(a1 + 48) count]);
  v114 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [*(id *)(a1 + 48) count]);
  v110 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 48) count]);
  id v19 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  id v20 = [*(id *)(a1 + 48) count];
  id v21 = v19;
  id v22 = v18;
  v109 = -[NSMutableArray initWithCapacity:](v21, "initWithCapacity:", v20);
  v105 = v13;
  v111 = (void *)objc_claimAutoreleasedReturnValue([v13 exitingUserIdentifiers]);
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  v137 = 0u;
  v104 = a1;
  id v23 = *(id *)(a1 + 48);
  id v24 = [v23 countByEnumeratingWithState:&v134 objects:v143 count:16];
  v115 = v22;
  if (v24)
  {
    id v25 = v24;
    id v26 = *(void *)v135;
    do
    {
      for (i = 0LL; i != v25; i = (char *)i + 1)
      {
        if (*(void *)v135 != v26) {
          objc_enumerationMutation(v23);
        }
        id v28 = *(void **)(*((void *)&v134 + 1) + 8LL * (void)i);
        if (((unint64_t)[v28 acceptanceStatus] & 0xFFFFFFFFFFFFFFFDLL) == 0)
        {
          int8x16_t v31 = objc_claimAutoreleasedReturnValue([v28 userIdentifier]);
          if (v31)
          {
            id v29 = (void *)v31;
            id v30 = v114;
            goto LABEL_23;
          }
        }

        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 participantID]);
        if (v29)
        {
          id v30 = v22;
LABEL_23:
          -[NSMutableSet addObject:](v30, "addObject:", v29);
          goto LABEL_28;
        }

        if (!_CPLSilentLogging)
        {
          id v32 = sub_10011CDF4();
          __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412546;
            v140 = v28;
            v141 = 2112;
            v142 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "Trying to remove %@ from %@ but there is no user identifier or participant ID attached to this participant",  buf,  0x16u);
          }

          id v22 = v115;
        }

LABEL_90:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) != 0
              || [v11 areObjectsDifferentOnProperty:@"computeStateLastUpdatedDate" changeType:2])
            {
              -[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"computeStateLastUpdatedDate"));
            }

            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ([v11 areObjectsDifferentOnProperty:@"assetDate" changeType:2] & 1) == 0)
            {
              goto LABEL_111;
            }

            id v36 = 0;
LABEL_96:
            if (!-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"assetDate"))) {
              goto LABEL_109;
            }
            uint64_t v37 = (id)objc_claimAutoreleasedReturnValue(-[CPLAssetChange assetDate](v9, "assetDate"));
            if (v37)
            {
              if (-[CPLAssetChange shouldUseEncryptedPropertiesIfPossibleWithContext:]( v9,  "shouldUseEncryptedPropertiesIfPossibleWithContext:",  v10))
              {
                uint64_t v38 = v37;
                id v39 = v8;
                unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
                [v40 timeIntervalSinceReferenceDate];
                uint64_t v42 = v41;
                [v38 timeIntervalSinceReferenceDate];
                id v44 = v43;
                uint64_t v45 = round(v43) + 1.0;
                uint64_t v46 = arc4random_uniform(0x3Bu);
                __int128 v48 = v11;
                id v49 = v10;
                __int128 v50 = -[NSDate initWithTimeIntervalSinceReferenceDate:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSinceReferenceDate:",  v42);

                uint64_t v8 = v39;
                [v7 setObject:v50 forKey:@"assetDate"];

                id v10 = v49;
                id v11 = v48;
                id v51 = objc_opt_class(&OBJC_CLASS___NSDate);
                uint64_t v52 = v7;
                id v53 = v38;
                goto LABEL_108;
              }

              [v7 setObject:v37 forKey:@"assetDate"];
            }

            else
            {
              [v7 setObject:0 forKey:@"assetDate"];
            }

            id v51 = objc_opt_class(&OBJC_CLASS___NSDate);
            uint64_t v52 = v7;
            id v53 = 0LL;
LABEL_108:
            [v52 setEncryptedObject:v53 forKey:@"assetDateEnc" validateClass:v51];

LABEL_109:
            if ((v36 & 1) != 0)
            {
              id v54 = 1;
              goto LABEL_114;
            }

LABEL_111:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"hidden" changeType:2])
            {
              goto LABEL_118;
            }

            id v54 = 0;
LABEL_114:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"hidden")))
            {
              id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[CPLAssetChange isHidden](v9, "isHidden")));
              [v7 setObject:v55 forKey:@"isHidden"];
            }

            if ((v54 & 1) != 0)
            {
              uint64_t v56 = 1;
              goto LABEL_121;
            }

LABEL_118:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"favorite" changeType:2])
            {
              goto LABEL_125;
            }

            uint64_t v56 = 0;
LABEL_121:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"favorite")))
            {
              id v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[CPLAssetChange isFavorite](v9, "isFavorite")));
              [v7 setObject:v57 forKey:@"isFavorite"];
            }

            if ((v56 & 1) != 0)
            {
              uint64_t v58 = 1;
              goto LABEL_128;
            }

LABEL_125:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"caption" changeType:2])
            {
              goto LABEL_132;
            }

            uint64_t v58 = 0;
LABEL_128:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"caption")))
            {
              __int16 v59 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange caption](v9, "caption"));
              [v7 setLegacyEncryptedObject:v59 forKey:@"captionEnc"];
            }

            if ((v58 & 1) != 0)
            {
              uint64_t v60 = 1;
              goto LABEL_135;
            }

  if (-[NSMutableArray count](v109, "count") || -[NSMutableArray count](v110, "count"))
  {
    v97 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v58 + 56) engineLibrary]);
    v116[0] = _NSConcreteStackBlock;
    v116[1] = 3221225472LL;
    v116[2] = sub_10012BBF4;
    v116[3] = &unk_1002464F0;
    v128 = *(id *)(v58 + 88);
    v117 = *(id *)(v58 + 64);
    v118 = v7;
    id v17 = v103;
    v119 = v103;
    v120 = v15;
    v129 = *(_OWORD *)(v58 + 96);
    v121 = v109;
    uint64_t v83 = v110;
    v122 = v110;
    v123 = *(id *)(v58 + 72);
    v124 = *(id *)(v58 + 32);
    v84 = v102;
    v125 = v102;
    v98 = *(id *)(v58 + 80);
    v99 = *(void *)(v58 + 56);
    v126 = v98;
    v127 = v99;
    [v97 blockEngineWithReason:@"Removing shared library participant" onlyIfBlocked:0 block:v116];

    v82 = v109;
  }

  else
  {
    id v17 = v103;
    if (!_CPLSilentLogging)
    {
      v100 = sub_10011CDF4();
      v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "Trying to remove participants that are all already removed or not participating",  buf,  2u);
      }
    }

    (*(void (**)(void))(*(void *)(v58 + 88) + 16LL))();
LABEL_109:
    v82 = v109;
    uint64_t v83 = v110;
    v84 = v102;
  }

LABEL_129:
LABEL_84:

LABEL_85:
}

LABEL_132:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"keywords" changeType:2])
            {
              goto LABEL_139;
            }

            uint64_t v60 = 0;
LABEL_135:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"keywords")))
            {
              __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange keywords](v9, "keywords"));
              [v7 setLegacyEncryptedObject:v61 forKey:@"keywordsEnc"];
            }

            if ((v60 & 1) != 0)
            {
              id v62 = 1;
              goto LABEL_142;
            }
      }

      return v4;
    case '>':
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v4;
      }
      id v9 = objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_transportScopeVar + 4) lastClearedPushVar]);
LABEL_97:
      v99 = (void *)v9;
      v100 = -[CPLPrequeliteStorage addColumnVariable:error:](self, "addColumnVariable:error:", v9, 0LL);

      return v100;
    case '@':
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v4;
      }
      id v10 = 100LL;
      return -[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(void *)&self->super.CPLPlatformObject_opaque[v10],  0LL);
    default:
      switch(a3)
      {
        case 'F':
          if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
            return v4;
          }
          if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteTodoVar **)((char *)&self->_uploadComputeStateTodoVar + 4),  0LL)) {
            goto LABEL_110;
          }
          uint64_t result = -[CPLPrequeliteStorage createIndexOnColumnVariable:error:]( self,  "createIndexOnColumnVariable:error:",  *(CPLPrequeliteTodoVar **)((char *)&self->_uploadComputeStateTodoVar + 4),  0LL);
          break;
        case 'G':
          if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
            return v4;
          }
          id v9 = objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_transportScopeVar + 4) rewindSyncAnchorsVar]);
          goto LABEL_97;
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'N':
          return v4;
        case 'M':
          if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
            return v4;
          }
          id v9 = objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_transportScopeVar + 4) busyStateVar]);
          goto LABEL_97;
        case 'O':
          if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
            return v4;
          }
          id v10 = 196LL;
          return -[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(void *)&self->super.CPLPlatformObject_opaque[v10],  0LL);
        default:
          switch(a3)
          {
            case 'U':
              uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteScopeStorage abstractObject](self, "abstractObject"));
              uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 engineStore]);
              uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 engineLibrary]);

              [v8 setUpgradeSuggestedToAccessAllPhotos:0];
              return v4;
            case 'X':
              if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
                return v4;
              }
              return -[CPLPrequeliteStorage addColumnVariableGroup:error:]( self,  "addColumnVariableGroup:error:",  *(CPLPrequeliteTodoVar **)((char *)&self->_updateTransportTodoVar + 4),  0LL);
            case 'Z':
              if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
                return v4;
              }
              id v10 = 156LL;
              return -[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(void *)&self->super.CPLPlatformObject_opaque[v10],  0LL);
            case '\\':
              if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
                return v4;
              }
              if (!-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_initialDownloadDateVar + 4),  0LL)
                || !-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_initialMetadataDownloadDateVar + 4),  0LL)
                || !-[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(CPLPrequeliteVariable **)((char *)&self->_activationDateVar + 4),  0LL))
              {
                goto LABEL_110;
              }

              id v10 = 188LL;
              break;
            default:
              return v4;
          }

          return -[CPLPrequeliteStorage addColumnVariable:error:]( self,  "addColumnVariable:error:",  *(void *)&self->super.CPLPlatformObject_opaque[v10],  0LL);
      }

      return result;
  }

LABEL_139:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"extendedDescription" changeType:2])
            {
              goto LABEL_146;
            }

            id v62 = 0;
LABEL_142:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"extendedDescription")))
            {
              __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange extendedDescription](v9, "extendedDescription"));
              [v7 setLegacyEncryptedObject:v63 forKey:@"extendedDescEnc"];
            }

            if ((v62 & 1) != 0)
            {
              uint64_t v64 = 1;
              goto LABEL_149;
            }

LABEL_146:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"accessibilityDescription" changeType:2])
            {
              goto LABEL_153;
            }

            uint64_t v64 = 0;
LABEL_149:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"accessibilityDescription")))
            {
              uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange accessibilityDescription](v9, "accessibilityDescription"));
              [v7 setLegacyEncryptedObject:v65 forKey:@"accessibilityDescEnc"];
            }

            if ((v64 & 1) != 0)
            {
              id v66 = 1;
              goto LABEL_156;
            }

LABEL_153:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"masterIdentifier" changeType:2])
            {
              goto LABEL_161;
            }

            id v66 = 0;
LABEL_156:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"masterIdentifier")))
            {
              id v67 = objc_claimAutoreleasedReturnValue(-[CPLAssetChange masterScopedIdentifier](v9, "masterScopedIdentifier"));
              if (!v67) {
                sub_100197944((uint64_t)v9, (uint64_t)v142);
              }
              id v68 = (void *)v67;
              [v7 setCKReferenceWithScopedIdentifier:v67 forKey:@"masterRef" referenceAction:1];
            }

            if ((v66 & 1) != 0)
            {
              v69 = 1;
              goto LABEL_164;
            }

LABEL_161:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"addedDate" changeType:2])
            {
              goto LABEL_168;
            }

            v69 = 0;
LABEL_164:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"addedDate")))
            {
              id v70 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange addedDate](v9, "addedDate"));
              [v7 setObject:v70 forKey:@"addedDate"];
            }

            if ((v69 & 1) != 0)
            {
              id v71 = 1;
              goto LABEL_171;
            }

LABEL_168:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"location" changeType:2])
            {
              if ((+[CPLAssetChange serverSupportsDeletedByUserIdentifier]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsDeletedByUserIdentifier") & 1) == 0) {
                goto LABEL_184;
              }
              goto LABEL_179;
            }

            id v71 = 0;
LABEL_171:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"location")))
            {
              id v72 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange location](v9, "location"));
              id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 cplLocationDictionary]);
              [v7 setLegacyEncryptedObject:v73 forKey:@"locationEnc"];
            }

            if ((+[CPLAssetChange serverSupportsDeletedByUserIdentifier]( &OBJC_CLASS___CPLAssetChange,  "serverSupportsDeletedByUserIdentifier") & 1) == 0)
            {
              if ((v71 & 1) != 0)
              {
LABEL_183:
                v75 = 1;
                goto LABEL_187;
              }

LABEL_184:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"placeAnnotation" changeType:2])
              {
                goto LABEL_191;
              }

              v75 = 0;
LABEL_187:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"placeAnnotation")))
              {
                __int16 v76 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange placeAnnotation](v9, "placeAnnotation"));
                uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 cplPlaceAnnotationDictionary]);
                [v7 setLegacyEncryptedObject:v77 forKey:@"placeInfoEnc"];
              }

              if ((v75 & 1) != 0)
              {
                __int16 v78 = 1;
                goto LABEL_194;
              }

LABEL_191:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"timeZoneName" changeType:2])
              {
                goto LABEL_198;
              }

              __int16 v78 = 0;
LABEL_194:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"timeZoneName")))
              {
                id v79 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange timeZoneName](v9, "timeZoneName"));
                [v7 setLegacyEncryptedObject:v79 forKey:@"timeZoneNameEnc"];
              }

              if ((v78 & 1) != 0)
              {
                __int16 v80 = 1;
                goto LABEL_201;
              }

LABEL_198:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"burstIdentifier" changeType:2])
              {
                goto LABEL_205;
              }

              __int16 v80 = 0;
LABEL_201:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"burstIdentifier")))
              {
                id v81 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange burstIdentifier](v9, "burstIdentifier"));
                [v7 setObject:v81 forKey:@"burstId"];
              }

              if ((v80 & 1) != 0)
              {
                v82 = 1;
                goto LABEL_208;
              }

LABEL_205:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"mediaGroupIdentifier" changeType:2])
              {
                goto LABEL_212;
              }

              v82 = 0;
LABEL_208:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"mediaGroupIdentifier")))
              {
                uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange mediaGroupIdentifier](v9, "mediaGroupIdentifier"));
                [v7 setObject:v83 forKey:@"mediaGroupId"];
              }

              if ((v82 & 1) != 0)
              {
                v84 = 1;
                goto LABEL_215;
              }

LABEL_212:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"videoComplementDurationValue" changeType:2])
              {
                goto LABEL_219;
              }

              v84 = 0;
LABEL_215:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"videoComplementDurationValue")))
              {
                v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLAssetChange videoComplementDurationValue](v9, "videoComplementDurationValue")));
                [v7 setObject:v85 forKey:@"vidComplDurValue"];
              }

              if ((v84 & 1) != 0)
              {
                id v86 = 1;
                goto LABEL_222;
              }

LABEL_219:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"videoComplementDurationTimescale" changeType:2])
              {
                goto LABEL_226;
              }

              id v86 = 0;
LABEL_222:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"videoComplementDurationTimescale")))
              {
                v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLAssetChange videoComplementDurationTimescale]( v9,  "videoComplementDurationTimescale")));
                [v7 setObject:v87 forKey:@"vidComplDurScale"];
              }

              if ((v86 & 1) != 0)
              {
                id v88 = 1;
                goto LABEL_229;
              }

LABEL_226:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"videoComplementImageDisplayValue" changeType:2])
              {
                goto LABEL_233;
              }

              id v88 = 0;
LABEL_229:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"videoComplementImageDisplayValue")))
              {
                __int16 v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLAssetChange videoComplementImageDisplayValue]( v9,  "videoComplementImageDisplayValue")));
                [v7 setObject:v89 forKey:@"vidComplDispValue"];
              }

              if ((v88 & 1) != 0)
              {
                id v90 = 1;
                goto LABEL_236;
              }

LABEL_233:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"videoComplementImageDisplayTimescale" changeType:2])
              {
                goto LABEL_240;
              }

              id v90 = 0;
LABEL_236:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"videoComplementImageDisplayTimescale")))
              {
                __int16 v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLAssetChange videoComplementImageDisplayTimescale]( v9,  "videoComplementImageDisplayTimescale")));
                [v7 setObject:v91 forKey:@"vidComplDispScale"];
              }

              if ((v90 & 1) != 0)
              {
                v92 = 1;
                goto LABEL_243;
              }

LABEL_240:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"videoComplementVisibilityState" changeType:2])
              {
                goto LABEL_247;
              }

              v92 = 0;
LABEL_243:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"videoComplementVisibilityState")))
              {
                v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[CPLAssetChange videoComplementVisibilityState](v9, "videoComplementVisibilityState")));
                [v7 setObject:v93 forKey:@"vidComplVisibilityState"];
              }

              if ((v92 & 1) != 0)
              {
                v94 = 1;
                goto LABEL_250;
              }

LABEL_247:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"assetSubtype" changeType:2])
              {
                goto LABEL_259;
              }

              v94 = 0;
LABEL_250:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"assetSubtype")))
              {
                v95 = (char *)-[CPLAssetChange assetSubtype](v9, "assetSubtype");
                if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  "assetSubtype"))
                {
                  id v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v95));
                  [v7 setObject:v96 forKey:@"assetSubtypeV2"];
                }

                if ((unint64_t)(v95 - 100) >= 2 && (unint64_t)v95 > 1)
                {
                  [v7 setObject:&off_10025A1E8 forKey:@"assetSubtype"];
                  if ((v94 & 1) != 0) {
                    goto LABEL_257;
                  }
                  goto LABEL_259;
                }

                v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v95));
                [v7 setObject:v97 forKey:@"assetSubtype"];
              }

              if ((v94 & 1) != 0)
              {
LABEL_257:
                v98 = 1;
                goto LABEL_262;
              }

LABEL_259:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"burstFlags" changeType:2])
              {
                goto LABEL_269;
              }

              v98 = 0;
LABEL_262:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"burstFlags")))
              {
                v99 = (unint64_t)-[CPLAssetChange burstFlags](v9, "burstFlags");
                v100 = v99 & 0xFFFFFFFFFFFFFFE0LL;
                if ((v99 & 0xFFFFFFFFFFFFFFE0LL) != 0)
                {
                  v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v99 & 0x1F));
                  [v7 setObject:v101 forKey:@"burstFlags"];

                  v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v100));
                  v103 = @"burstFlagsExt";
                }

                else
                {
                  v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v99));
                  v103 = @"burstFlags";
                }

                [v7 setObject:v102 forKey:v103];
              }

              if ((v98 & 1) != 0)
              {
                v104 = 1;
                goto LABEL_272;
              }

LABEL_269:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"timeZoneOffset" changeType:2])
              {
                goto LABEL_276;
              }

              v104 = 0;
LABEL_272:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"timeZoneOffset")))
              {
                v105 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange timeZoneOffset](v9, "timeZoneOffset"));
                [v7 setObject:v105 forKey:@"timeZoneOffset"];
              }

              if ((v104 & 1) != 0)
              {
                v106 = 1;
                goto LABEL_279;
              }

LABEL_276:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"assetHDRType" changeType:2])
              {
                goto LABEL_283;
              }

              v106 = 0;
LABEL_279:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"assetHDRType")))
              {
                v107 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[CPLAssetChange assetHDRType](v9, "assetHDRType")));
                [v7 setObject:v107 forKey:@"assetHDRType"];
              }

              if ((v106 & 1) != 0)
              {
                v108 = 1;
                goto LABEL_286;
              }

LABEL_283:
              if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                && ![v11 areObjectsDifferentOnProperty:@"customRenderedValue" changeType:2])
              {
LABEL_289:
                if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
                  && ![v11 areObjectsDifferentOnProperty:@"trashedReason" changeType:2])
                {
LABEL_293:

                  goto LABEL_294;
                }

LABEL_291:
                if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"trashedReason")))
                {
                  v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  -[CPLAssetChange trashedReason](v9, "trashedReason")));
                  [v7 setObject:v110 forKey:@"trashReason"];
                }

                goto LABEL_293;
              }

              v108 = 0;
LABEL_286:
              if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"customRenderedValue")))
              {
                v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[CPLAssetChange customRenderedValue](v9, "customRenderedValue")));
                [v7 setObject:v109 forKey:@"customRenderedValue"];
              }

              if ((v108 & 1) != 0) {
                goto LABEL_291;
              }
              goto LABEL_289;
            }

            if ((v71 & 1) != 0)
            {
              v74 = 1;
LABEL_182:
              -[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"deletedByUserIdentifier"));
              if ((v74 & 1) != 0) {
                goto LABEL_183;
              }
              goto LABEL_184;
            }

LABEL_179:
            if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
              && ![v11 areObjectsDifferentOnProperty:@"deletedByUserIdentifier" changeType:2])
            {
              goto LABEL_184;
            }

            v74 = 0;
            goto LABEL_182;
          }

          if ((v24 & 1) != 0)
          {
            id v24 = 1;
LABEL_50:
            if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"lastViewedDate")))
            {
              id v26 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange lastViewedDate](v9, "lastViewedDate"));
              [v7 setLegacyEncryptedObject:v26 forKey:@"lastViewedDateEnc"];
            }

            goto LABEL_52;
          }

LABEL_47:
          if ((-[CPLAssetChange isFullRecord](v9, "isFullRecord") & 1) == 0
            && ![v11 areObjectsDifferentOnProperty:@"lastViewedDate" changeType:2])
          {
            goto LABEL_54;
          }

          id v24 = 0;
          goto LABEL_50;
        }

        if ((v21 & 1) != 0)
        {
          id v21 = 1;
LABEL_34:
          if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"sharedLibrarySharingState")))
          {
            id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[CPLAssetChange sharedLibrarySharingState](v9, "sharedLibrarySharingState")));
            [v7 setLegacyEncryptedObject:v23 forKey:@"sharedSyncSharingStateEnc"];
          }

          goto LABEL_36;
        }

    id v88 = *(int *)(v105 + 24);
    __int16 v89 = (uint64_t)v120;
    id v90 = (char *)v120 + v88;
    id v25 = v113;
    __int16 v91 = (char *)v113 + v88;
    v92 = type metadata accessor for UnknownStorage(0LL);
    v93 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v94 = dispatch thunk of static Equatable.== infix(_:_:)(v90, v91, v92, v93);
    sub_1000CECE0((uint64_t)v25, type metadata accessor for Goldilocks_DuplicateState);
    sub_1000CECE0(v89, type metadata accessor for Goldilocks_DuplicateState);
    if ((v94 & 1) != 0)
    {
      id v30 = v104 + 1;
      uint64_t v4 = v109;
      id v32 = v100;
      __int16 v33 = v99;
      id v34 = v98;
      if (v104 + 1 != v101) {
        continue;
      }
    }

    return v94 & 1;
  }

  id v53 = 0LL;
  id v54 = (*(unsigned __int8 *)(v97 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  v106 = *(void *)(v97 + 72);
  v102 = v15;
  while (1)
  {
    uint64_t result = sub_1000CEC58(v114 + v54, (uint64_t)v15, type metadata accessor for Goldilocks_FoundDuplicate);
    if (v53 >= *(void *)(v52 + 16)) {
      break;
    }
    sub_1000CEC58(v52 + v54, (uint64_t)v13, type metadata accessor for Goldilocks_FoundDuplicate);
    uint64_t v56 = *((void *)v15 + 1);
    id v57 = *((void *)v13 + 1);
    uint64_t v58 = *(void *)v15 == *(void *)v13 && v56 == v57;
    if (!v58 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v15, v56, *(void *)v13, v57, 0LL) & 1) == 0) {
      goto LABEL_56;
    }
    __int16 v59 = *(int *)(found + 28);
    uint64_t v60 = (uint64_t)&v13[v59];
    __int16 v61 = (uint64_t)&v9[*(int *)(v117 + 48)];
    sub_1000CE7B4((uint64_t)&v15[v59], (uint64_t)v9, &qword_100295030);
    sub_1000CE7B4(v60, v61, &qword_100295030);
    id v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
    if (v62((uint64_t)v9, 1LL, v4) == 1)
    {
      if (v62(v61, 1LL, v4) != 1)
      {
        v95 = &qword_100294DF0;
        goto LABEL_55;
      }

      sub_1000CEDAC((uint64_t)v9, &qword_100295030);
    }

    else
    {
      sub_1000CE7B4((uint64_t)v9, (uint64_t)v122, &qword_100295030);
      if (v62(v61, 1LL, v4) == 1)
      {
        v95 = &qword_100294DF0;
        goto LABEL_54;
      }

      __int16 v63 = v61;
      uint64_t v64 = v119;
      sub_1000CEC9C(v63, (uint64_t)v119, type metadata accessor for Goldilocks_ZoneID);
      uint64_t v65 = v122[1];
      id v66 = v64[1];
      if ((*v122 != *v64 || v65 != v66)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v122, v65, *v64, v66, 0LL) & 1) == 0
        || ((v67 = v122[2], v68 = v122[3], v69 = v119[2], id v70 = v119[3], v67 != v69) || v68 != v70)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v69, v70, 0LL) & 1) == 0)
      {
        sub_1000CECE0((uint64_t)v119, type metadata accessor for Goldilocks_ZoneID);
        v95 = &qword_100295030;
LABEL_54:
        sub_1000CECE0((uint64_t)v122, type metadata accessor for Goldilocks_ZoneID);
LABEL_55:
        sub_1000CEDAC((uint64_t)v9, v95);
LABEL_56:
        sub_1000CECE0((uint64_t)v13, type metadata accessor for Goldilocks_FoundDuplicate);
        sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_FoundDuplicate);
        goto LABEL_57;
      }

      id v71 = *(int *)(v4 + 24);
      id v72 = (char *)v122 + v71;
      id v73 = (uint64_t)v9;
      v74 = v122;
      v75 = (uint64_t)v119;
      __int16 v76 = (char *)v119 + v71;
      uint64_t v77 = type metadata accessor for UnknownStorage(0LL);
      __int16 v78 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      LOBYTE(v72) = dispatch thunk of static Equatable.== infix(_:_:)(v72, v76, v77, v78);
      id v79 = (uint64_t)v74;
      id v9 = (char *)v73;
      id v15 = v102;
      sub_1000CECE0(v75, type metadata accessor for Goldilocks_ZoneID);
      sub_1000CECE0(v79, type metadata accessor for Goldilocks_ZoneID);
      sub_1000CEDAC(v73, &qword_100295030);
    }

    __int16 v80 = *((void *)v15 + 2);
    id v81 = *((void *)v13 + 2);
    if (v15[24]) {
      __int16 v80 = v80 != 0;
    }
    if (v13[24] == 1)
    {
      if (v81)
      {
        if (v80 != 1) {
          goto LABEL_56;
        }
      }

      else if (v80)
      {
        goto LABEL_56;
      }
    }

    else if (v80 != v81)
    {
      goto LABEL_56;
    }

    v82 = *(int *)(found + 24);
    uint64_t v83 = &v15[v82];
    v84 = &v13[v82];
    v85 = type metadata accessor for UnknownStorage(0LL);
    id v86 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    v87 = v85;
    uint64_t v4 = v109;
    LOBYTE(v83) = dispatch thunk of static Equatable.== infix(_:_:)(v83, v84, v87, v86);
    sub_1000CECE0((uint64_t)v13, type metadata accessor for Goldilocks_FoundDuplicate);
    sub_1000CECE0((uint64_t)v15, type metadata accessor for Goldilocks_FoundDuplicate);
    ++v53;
    v54 += v106;
    uint64_t v52 = v116;
    if (v115 == v53) {
      goto LABEL_47;
    }
  }

  __break(1u);
  return result;
}

  objc_autoreleasePoolPop(v34);
  id v62 = a1[6];
  if (!*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) && !*(void *)(*(void *)(v62 + 8) + 40LL) && *(_BYTE *)(*v4 + 34))
  {
    if (!_CPLSilentLogging)
    {
      __int16 v63 = sub_10013AF3C();
      uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "Sending an empty batch so the client can know the current library version",  buf,  2u);
      }
    }

    uint64_t v65 = objc_alloc_init(&OBJC_CLASS___CPLChangeBatch);
    id v66 = *(void *)(a1[6] + 8LL);
    id v67 = *(void **)(v66 + 40);
    *(void *)(v66 + 40) = v65;

    id v68 = objc_loadWeakRetained((id *)(a1[4] + 98LL));
    id v73 = 0LL;
    v69 = [v68 storeClientIsInSyncWithClientCacheWithError:&v73];
    id v49 = v73;

    if (!v69)
    {

      goto LABEL_44;
    }

    id v62 = a1[6];
  }

  objc_storeStrong((id *)(*v4 + 42), *(id *)(*(void *)(v62 + 8) + 40LL));
  id v19 = 1LL;
LABEL_50:

LABEL_51:
  if (v70 && (v19 & 1) == 0)
  {
    id v18 = v18;
    id v19 = 0LL;
    *id v70 = v18;
  }

      objc_autoreleasePoolPop(context);
      id v30 = 0LL;
      id v28 = v53;
LABEL_48:

LABEL_49:
LABEL_21:

      uint64_t v5 = v25 & 1;
      break;
    default:
      return v5;
  }

  return v5;
}

LABEL_48:
  if (a8)
  {
    id v26 = v34;
    id v27 = 0;
    *a8 = v26;
  }

  else
  {
    id v27 = 0;
    id v26 = v34;
  }

          __int16 v33 = 1;
          goto LABEL_36;
        }

LABEL_294:
  if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"orientation")))
  {
    v111 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLAssetChange orientation](v9, "orientation")));
    [v7 setObject:v111 forKey:@"orientation"];
  }

  if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"adjustments")))
  {
    v112 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange adjustments](v9, "adjustments"));
    v113 = (void *)objc_claimAutoreleasedReturnValue([v112 adjustmentType]);
    [v7 setObject:v113 forKey:@"adjustmentType"];

    v114 = (void *)objc_claimAutoreleasedReturnValue([v112 adjustmentCompoundVersion]);
    [v7 setObject:v114 forKey:@"adjustmentCompoundVersion"];

    v115 = (void *)objc_claimAutoreleasedReturnValue([v112 adjustmentCreatorCode]);
    [v7 setObject:v115 forKey:@"adjustmentCreatorCode"];

    v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v112 adjustmentSourceType]));
    [v7 setObject:v116 forKey:@"adjustmentSourceType"];

    v117 = (void *)objc_claimAutoreleasedReturnValue([v112 similarToOriginalAdjustmentsFingerprint]);
    [v7 setObject:v117 forKey:@"similarToOriginalAdjustmentsFingerprint"];

    v118 = (void *)objc_claimAutoreleasedReturnValue([v112 otherAdjustmentsFingerprint]);
    [v7 setObject:v118 forKey:@"otherAdjustmentsFingerprint"];

    v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v112 adjustmentRenderTypes]));
    [v7 setObject:v119 forKey:@"adjustmentRenderType"];

    v120 = (void *)objc_claimAutoreleasedReturnValue([v112 adjustmentTimestamp]);
    [v7 setLegacyEncryptedObject:v120 forKey:@"adjustmentTimestampEnc"];

    v121 = (void *)objc_claimAutoreleasedReturnValue([v112 simpleAdjustmentData]);
    [v7 setLegacyEncryptedObject:v121 forKey:@"adjustmentSimpleDataEnc"];
  }

  if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"duration")))
  {
    v122 = -[CPLAssetChange duration](v9, "duration");
    v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v122));
    if (v123)
    {
      if (-[CPLAssetChange shouldUseEncryptedPropertiesIfPossibleWithContext:]( v9,  "shouldUseEncryptedPropertiesIfPossibleWithContext:",  v10))
      {
        v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v122));
        [v7 setObject:v124 forKey:@"duration"];

        v125 = objc_opt_class(&OBJC_CLASS___NSNumber);
        v126 = v7;
        v127 = v123;
LABEL_306:
        [v126 setEncryptedObject:v127 forKey:@"durationEnc" validateClass:v125];

        goto LABEL_307;
      }

      v128 = v7;
      v129 = v123;
    }

    else
    {
      v128 = v7;
      v129 = 0LL;
    }

    [v128 setObject:v129 forKey:@"duration"];
    v125 = objc_opt_class(&OBJC_CLASS___NSNumber);
    v126 = v7;
    v127 = 0LL;
    goto LABEL_306;
  }

LABEL_307:
  if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"originalChoice")))
  {
    v130 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[CPLAssetChange originalChoice](v9, "originalChoice")));
    [v7 setObject:v130 forKey:@"originalChoice"];
  }

  if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"adjustedMediaMetaDataType")))
  {
    v131 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange adjustedMediaMetaDataType](v9, "adjustedMediaMetaDataType"));
    [v7 setObject:v131 forKey:@"adjustedMediaMetaDataStrType"];
  }

  if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v9,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(@"adjustedMediaMetaData")))
  {
    v132 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange adjustedMediaMetaData](v9, "adjustedMediaMetaData"));
    [v7 setLegacyEncryptedObject:v132 forKey:@"adjustedMediaMetaDataEnc"];
  }

LABEL_313:
  if (-[CPLAssetChange hasChangeType:](v9, "hasChangeType:", 32LL))
  {
    v133 = v9;
    if ([&off_10025C660 count])
    {
      v149 = 0u;
      v150 = 0u;
      v147 = 0u;
      v148 = 0u;
      v134 = [&off_10025C660 countByEnumeratingWithState:&v147 objects:v152 count:16];
      if (!v134)
      {
LABEL_326:

        goto LABEL_327;
      }

      v135 = v134;
      v136 = *(void *)v148;
LABEL_317:
      v137 = 0LL;
      while (1)
      {
        if (*(void *)v148 != v136) {
          objc_enumerationMutation(&off_10025C660);
        }
        if ((-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v133,  "shouldApplyPropertiesWithSelector:",  NSSelectorFromString(*(NSString **)(*((void *)&v147 + 1) + 8 * v137))) & 1) != 0) {
          break;
        }
        if (v135 == (id)++v137)
        {
          v135 = [&off_10025C660 countByEnumeratingWithState:&v147 objects:v152 count:16];
          if (v135) {
            goto LABEL_317;
          }
          goto LABEL_326;
        }
      }
    }

    if (-[CPLAssetChange shouldApplyPropertiesWithSelector:]( v133,  "shouldApplyPropertiesWithSelector:",  "facesData"))
    {
      v138 = (void *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange facesData](v133, "facesData"));
      [v7 setLegacyEncryptedObject:v138 forKey:@"faces"];

      v139 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[CPLAssetChange facesVersion](v133, "facesVersion")));
      [v7 setObject:v139 forKey:@"facesVersion"];

      v133 = (CPLAssetChange *)objc_claimAutoreleasedReturnValue(-[CPLAssetChange facesAdjustmentsFingerprint](v133, "facesAdjustmentsFingerprint"));
      [v7 setObject:v133 forKey:@"facesAdjustmentsFingerprint"];
      goto LABEL_326;
    }
  }

LABEL_327:
}

void sub_1000A5574( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

uint64_t sub_1000A55BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A55CC(uint64_t a1)
{
}

void sub_1000A55D4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  unsigned int v10 = [v9 isEqual:CKErrorDomain];

  if (v10)
  {
    if ([v8 code] == (id)22) {
      goto LABEL_18;
    }
    if ((objc_opt_isKindOfClass(v7, *(void *)(a1 + 64)) & 1) != 0
      && [*(id *)(a1 + 72) _isCKErrorForRejectedRecord:v8])
    {
      id v11 = *(void **)(a1 + 32);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 scopeIdentifierFromZoneID:v12]);

      if (v13)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
        if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
        {
          id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
          id v16 = *(void **)(v15 + 40);
          *(void *)(v15 + 40) = v14;
        }

        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rejectedScopedIdentifierForRejectedCKRecordID:v7]);
        id v18 = v17;
        if (v17)
        {
          id v19 = *(void **)(a1 + 72);
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 _rejectionReasonFromPartialError:v8 identifier:v20]);
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v21 forKeyedSubscript:v18];
        }

        else if (!_CPLSilentLogging)
        {
          uint64_t v22 = __CPLGenericOSLogDomain(0LL);
          id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            int v27 = 138543362;
            id v28 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to find a scoped identifier for %{public}@",  (uint8_t *)&v27,  0xCu);
          }
        }
      }
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _betterErrorForRecordId:v7 recordError:v8]);
    uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v26 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v24;

    *a4 = 1;
  }

LABEL_74:
              break;
          }
        }
      }
    }

    uint64_t v47 = 0LL;
    __int128 v48 = 80LL;
    if (v33 <= 110)
    {
      uint64_t v46 = 0LL;
      switch(v33)
      {
        case 2LL:
        case 4LL:
        case 22LL:
        case 23LL:
          uint64_t v47 = 0LL;
          uint64_t v46 = 0LL;
          __int128 v48 = 81LL;
          goto LABEL_115;
        case 3LL:
          uint64_t v47 = 0LL;
          uint64_t v46 = 0LL;
          __int128 v48 = 82LL;
          goto LABEL_115;
        case 5LL:
        case 8LL:
        case 10LL:
        case 12LL:
        case 13LL:
        case 14LL:
        case 15LL:
        case 17LL:
        case 19LL:
        case 24LL:
          goto LABEL_115;
        case 6LL:
        case 7LL:
          goto LABEL_83;
        case 9LL:
          goto LABEL_82;
        case 11LL:
          uint64_t v47 = 0LL;
          uint64_t v46 = 0LL;
          __int128 v48 = 25LL;
          goto LABEL_115;
        case 16LL:
          uint64_t v47 = 0LL;
          uint64_t v46 = 0LL;
          __int128 v48 = 26LL;
          goto LABEL_115;
        case 18LL:
          goto LABEL_88;
        case 20LL:
          id v30 = v90;
          __int16 v35 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([a1 _errorForCancelledError:v90]);
          id v49 = v88;
          id v13 = v89;
          break;
        case 21LL:
          uint64_t v47 = 0LL;
          uint64_t v46 = 0LL;
          __int128 v48 = 22LL;
          goto LABEL_115;
        case 25LL:
          goto LABEL_91;
        case 26LL:
          goto LABEL_92;
        case 27LL:
          goto LABEL_96;
        case 28LL:
          goto LABEL_97;
        case 29LL:
          goto LABEL_95;
        default:
          uint64_t v46 = 0LL;
          goto LABEL_115;
      }

      goto LABEL_125;
    }

    if (v33 <= 114)
    {
      if (v33 == 111)
      {

        uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v49 = v88;
        if (v88)
        {
          [v88 doubleValue];
          __int128 v48 = 1010LL;
          if (v65 >= 3600.0)
          {
LABEL_110:
            uint64_t v46 = 0LL;
            uint64_t v47 = 0LL;
            goto LABEL_117;
          }

          uint64_t v64 = &off_10025C728;
        }

        else
        {
          uint64_t v64 = &off_10025C728;
          __int128 v48 = 1010LL;
        }

LABEL_113:
        uint64_t v46 = 0LL;
        uint64_t v47 = 0LL;
        id v49 = v64;
        goto LABEL_117;
      }

      uint64_t v47 = 0LL;
      uint64_t v46 = 0LL;
      if (v33 == 112) {
        __int128 v48 = 1009LL;
      }
      goto LABEL_115;
    }

    if (v33 == 2008)
    {
      uint64_t v47 = 0LL;
      uint64_t v46 = 0LL;
      if (v88) {
        __int128 v48 = 1000LL;
      }
      else {
        __int128 v48 = 81LL;
      }
      goto LABEL_115;
    }

    if (v33 == 132)
    {
      uint64_t v47 = 0LL;
      uint64_t v46 = 0LL;
      __int128 v48 = 257LL;
      goto LABEL_115;
    }

    uint64_t v46 = 0LL;
    if (v33 == 115) {
      goto LABEL_82;
    }
LABEL_115:

    id v49 = v88;
LABEL_116:
    uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (!v49)
    {
LABEL_118:
      if (v46)
      {
        id v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v46));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v42,  "setObject:forKeyedSubscript:",  v67,  CPLErrorScopeBusyKey);
      }

      if (v47) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v42,  "setObject:forKeyedSubscript:",  v47,  CPLErrorResetReason);
      }
      id v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary cplUnderlyingError](v90, "cplUnderlyingError"));
      v69 = -[NSString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:arguments:",  v15,  a7);
      if (!-[NSMutableDictionary count](v42, "count"))
      {

        uint64_t v42 = 0LL;
      }

      id v70 = -[NSMutableDictionary copy](v42, "copy");
      id v71 = (void *)objc_claimAutoreleasedReturnValue([v68 localizedDescription]);
      id v72 = v48;
      id v30 = v90;
      __int16 v35 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:underlyingError:userInfo:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:underlyingError:userInfo:description:",  v72,  v90,  v70,  @"%@ (%@)",  v69,  v71));

      id v13 = v89;
      goto LABEL_125;
    }

      v101 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v101 pqlConnection]);

      if (!v89) {
        goto LABEL_118;
      }
      v102 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
      v103 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_supervisorInfoVar + 4) setHasSomethingTodo]);
      uint64_t v4 = [v11 cplExecute:@"UPDATE %@ SET %@", v102, v103];

      if (v4)
      {
        v104 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        v105 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_modifiedVariables + 4) scopeTypeVar]);
        v106 = objc_alloc(&OBJC_CLASS____CPLPrequeliteScopeIsEqual);
        v107 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainScopeIdentifier](self, "mainScopeIdentifier"));
        v108 = -[_CPLPrequeliteScopeIsEqual initWithIdentifier:](v106, "initWithIdentifier:", v107);
        v109 = [v11 cplExecute:@"UPDATE %@ SET %@ = %ld WHERE %@", v104, v105, 1, v108];

        if (v109)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
          id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)&self->_pullFromTransportTodoVar
                                                                             + 4), "setHasSomethingTodo"));
          uint64_t v64 = [v11 cplExecute:@"UPDATE %@ SET %@ WHERE %@ & %ld = %ld", v12, v13, *(_CPLPrequeliteScopeBase **)((char *)&self->_base + 4), 4, 4];
LABEL_117:
          LOBYTE(v4) = v64;
LABEL_130:

LABEL_131:
        }

        else
        {
LABEL_118:
          LOBYTE(v4) = 0;
        }
      }

      goto LABEL_132;
    case '/':
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v4;
      }
      return -[CPLPrequeliteStorage createVariable:defaultValue:error:]( self,  "createVariable:defaultValue:error:",  *(CPLPrequeliteVariable **)((char *)&self->_nextIndexVar + 4),  0LL,  0LL);
    case '6':
      if (!-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")) {
        return v4;
      }
      return -[CPLPrequeliteScopeStorage bumpPullFromTransportExpirationIntervalWithError:]( self,  "bumpPullFromTransportExpirationIntervalWithError:",  0LL);
    case '<':
      if (-[CPLPrequeliteStorage shouldUpgradeSchema](self, "shouldUpgradeSchema")
        && (id v90 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)((char *)&self->_transportScopeVar + 4) hasFetchedInitialSyncAnchorVar]),  v91 = -[CPLPrequeliteStorage addColumnVariable:error:](self, "addColumnVariable:error:", v90, 0),  v90,  !v91))
      {
LABEL_110:
        LOBYTE(v4) = 0;
      }

      else
      {
        v92 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage pqStore](self, "pqStore"));
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v92 pqlConnection]);

        v93 = (void *)objc_claimAutoreleasedReturnValue(-[CPLPrequeliteStorage mainTable](self, "mainTable"));
        v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_transportScopeVar + 4) hasFetchedInitialSyncAnchorVar]);
        uint64_t v4 = [v11 cplExecute:@"UPDATE %@ SET %@ = %d", v93, v94, 1];

        if (v4)
        {
          v95 = [v11 changes];
          if (v95)
          {
            if (!_CPLSilentLogging)
            {
              id v96 = v95;
              v97 = sub_100140908();
              v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
              if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 134217984;
                v127 = v96;
                _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "On upgrade, automatically marked %ld scopes have already fetched their initial sync anchor",  buf,  0xCu);
              }
            }
          }
        }

void sub_1000A6B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1000A6B68(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 56) getCloudKitErrorCode:*(void *)(*(void *)(a1 + 32) + 8) + 24 internalCode:*(void *)(*(void *)(a1 + 40) + 8) + 24 fromError:a3];
  if ((_DWORD)result)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) != 22LL)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      *a4 = 1;
    }
  }

  return result;
}

void sub_1000A6D78(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ((objc_opt_isKindOfClass(v8, *(void *)(a1 + 48)) & 1) == 0) {
    sub_100197BD0((void *)(a1 + 48), (void *)a1);
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) domain]);
  if ([v6 isEqualToString:CKErrorDomain])
  {
    id v7 = [*(id *)(a1 + 32) code];

    if (v7 == (id)22) {
      goto LABEL_7;
    }
  }

  else
  {
  }

  [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v8];
LABEL_7:
}

void sub_1000A7008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A7024(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) domain]);
  if ([v7 isEqualToString:CKErrorDomain])
  {
    id v8 = [*(id *)(a1 + 32) code];

    if (v8 == (id)22) {
      goto LABEL_6;
    }
  }

  else
  {
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  *a4 = 1;
LABEL_6:
}

id *sub_1000A7488(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)&OBJC_CLASS___CPLCloudKitResourceRecordProperties;
    unsigned int v10 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeStrong(v10 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

void sub_1000A7530( uint64_t a1, void *a2, void *a3, void *a4, int a5, unint64_t a6, void *a7, int a8, double a9, double a10)
{
  id v18 = a2;
  id v19 = a3;
  id v20 = a4;
  id v21 = a7;
  if (a1)
  {
    uint64_t v22 = sub_100089BF8(*(void *)(a1 + 8));
    id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    [v18 setObject:v19 forKey:v23];

    if ([*(id *)(a1 + 24) shouldUseEncryptedPropertiesIfPossible])
    {
      if (a5)
      {
        uint64_t v24 = sub_100089C04(*(void *)(a1 + 8));
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        [v18 setEncryptedObject:v20 forKey:v25 validateClass:objc_opt_class(NSString)];
      }

      uint64_t v92 = 0LL;
      v93 = &v92;
      uint64_t v94 = 0x3032000000LL;
      v95 = sub_1000A7CF0;
      id v96 = sub_1000A7D00;
      id v97 = 0LL;
      v91[0] = _NSConcreteStackBlock;
      v91[1] = 3221225472LL;
      v91[2] = sub_1000A7D08;
      v91[3] = &unk_100242430;
      v91[4] = &v92;
      uint64_t v26 = objc_retainBlock(v91);
      if (v20 && (a5 & 1) == 0)
      {
        v88[0] = _NSConcreteStackBlock;
        v88[1] = 3221225472LL;
        v88[2] = sub_1000A7D74;
        v88[3] = &unk_10023DD58;
        id v90 = &v92;
        id v89 = v20;
        ((void (*)(void *, void *))v26[2])(v26, v88);
      }

      if ((qword_1002911C8 & 1) != 0)
      {
        uint64_t v45 = 1024LL;
        uint64_t v46 = 10240LL;
        unint64_t v47 = a6 & 0xFFFFFFFFFFF00000LL;
        if (a6 < 0x19000) {
          unint64_t v47 = 102400LL;
        }
        if (a6 >> 11 >= 5) {
          uint64_t v46 = v47;
        }
        if (a6 >= 0x400) {
          uint64_t v45 = v46;
        }
        if (a6) {
          uint64_t v48 = v45;
        }
        else {
          uint64_t v48 = 0LL;
        }
        id v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v48));
        uint64_t v50 = sub_100031F28(*(void *)(a1 + 8));
        id v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        [v18 setObject:v49 forKey:v51];

        if (v48 != a6)
        {
          v87[0] = _NSConcreteStackBlock;
          v87[1] = 3221225472LL;
          v87[2] = sub_1000A7D84;
          v87[3] = &unk_10023F140;
          uint8_t v87[4] = &v92;
          v87[5] = a6;
          ((void (*)(void *, void *))v26[2])(v26, v87);
        }
      }

      else
      {
        int v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a6));
        uint64_t v28 = sub_100031F28(*(void *)(a1 + 8));
        id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        [v18 setObject:v27 forKey:v29];
      }

      if ((qword_1002911C8 & 2) != 0)
      {
        double v58 = a9;
        double v59 = a10;
        if (a9 != 0.0)
        {
          double v58 = a9;
          double v59 = a10;
          if (a10 != 0.0)
          {
            uint64_t v60 = 0LL;
            do
            {
              double v61 = *(double *)&qword_1002123D0[v60];
              if (a9 == v61 && a10 == *(double *)&qword_1002123D0[v60 + 1]
                || a10 == v61 && a9 == *(double *)&qword_1002123D0[v60 + 1])
              {
                double v58 = a9;
                double v59 = a10;
                goto LABEL_42;
              }

              v60 += 2LL;
            }

            while ((_DWORD)(v60 * 8) != 320);
            double v62 = ceil(a9 / 100.0) * 100.0;
            double v63 = ceil(a10 / 100.0) * 100.0;
            double v64 = a9 / a10 * v63;
            if (v64 <= v62) {
              double v58 = v62;
            }
            else {
              double v58 = a9 / a10 * v63;
            }
            if (v64 <= v62) {
              double v59 = v62 / (a9 / a10);
            }
            else {
              double v59 = v63;
            }
          }
        }

void sub_1000A7CC8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A7CF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A7D00(uint64_t a1)
{
}

void sub_1000A7D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitResourceInfo);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v3 = v7;
  }

  (*((void (**)(void))v3 + 2))();
}

id sub_1000A7D74(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setStableHash:*(void *)(a1 + 32)];
}

id sub_1000A7D84(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setFileSize:*(void *)(a1 + 40)];
}

void sub_1000A7D94(uint64_t a1)
{
  os_log_t v2 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitResourceInfoImageDimensions);
  -[CPLCloudKitResourceInfoImageDimensions setWidth:](v2, "setWidth:", (uint64_t)*(double *)(a1 + 40));
  -[CPLCloudKitResourceInfoImageDimensions setHeight:](v2, "setHeight:", (uint64_t)*(double *)(a1 + 48));
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setImageDimensions:v2];
}

id sub_1000A7DFC(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setFileUTI:*(void *)(a1 + 32)];
}

void sub_1000A7E0C(uint64_t a1, void *a2, void *a3, double *a4, void *a5, void *a6)
{
  id v11 = a6;
  if (a1)
  {
    id v40 = v11;
    uint64_t v12 = sub_100089C10(*(void *)(a1 + 8));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = objc_msgSend(v40, "cpl_decryptedObjectForKey:validateClass:", v13, objc_opt_class(NSData));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    if (v15)
    {
      id v16 = -[CPLCloudKitResourceInfo initWithData:]( objc_alloc(&OBJC_CLASS___CPLCloudKitResourceInfo),  "initWithData:",  v15);
      id v17 = v16;
      if (v16)
      {
        if (-[CPLCloudKitResourceInfo hasStableHash](v16, "hasStableHash"))
        {
          *a2 = (id)objc_claimAutoreleasedReturnValue(-[CPLCloudKitResourceInfo stableHash](v17, "stableHash"));
          goto LABEL_11;
        }

        char v18 = 0;
LABEL_9:
        uint64_t v19 = sub_100089C04(*(void *)(a1 + 8));
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        id v21 = objc_msgSend(v40, "cpl_decryptedObjectForKey:validateClass:", v20, objc_opt_class(NSString));
        *a2 = (id)objc_claimAutoreleasedReturnValue(v21);

        if ((v18 & 1) != 0)
        {
          char v22 = 1;
          goto LABEL_14;
        }

void sub_1000A854C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000A856C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v10 = a2;
  id v8 = a3;
  id v9 = a5;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000A85F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A8604(uint64_t a1)
{
}

void sub_1000A860C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a4);
  }

  else if (!_CPLSilentLogging)
  {
    id v10 = sub_1000A8714();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 138412290;
      id v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "FetchedRecord: %@", (uint8_t *)&v12, 0xCu);
    }
  }
}

id sub_1000A8714()
{
  if (qword_1002965A8 != -1) {
    dispatch_once(&qword_1002965A8, &stru_100242540);
  }
  return (id)qword_1002965B0;
}

void sub_1000A8754(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  id v7 = *(void **)(*(void *)(a1[8] + 8LL) + 40LL);
  if (!v7) {
    id v7 = v5;
  }
  id v8 = v7;
  if (!v8)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:a1[4]]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:a1[5]]);
    uint64_t v15 = v14;
    if (v14)
    {
      uint64_t v16 = objc_claimAutoreleasedReturnValue([v14 assetContent]);
      if (v16)
      {
        int v12 = (void *)v16;
        uint64_t v17 = sub_100089BD4(a1[6]);
        char v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:v18]);

        id v10 = 0LL;
LABEL_19:

        goto LABEL_20;
      }

      if (!_CPLSilentLogging)
      {
        id v23 = sub_1000A8714();
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = a1[4];
          uint64_t v25 = a1[5];
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v29 = v25;
          __int16 v30 = 2112;
          uint64_t v31 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Fetching %@ for %@ succeeded but did not return the resource",  buf,  0x16u);
        }
      }

      id v22 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Fetching %@ for %@ succeeded but did not return the resource",  a1[5],  a1[4]);
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v19 = sub_1000A8714();
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = a1[4];
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v29 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to fetch %@", buf, 0xCu);
        }
      }

      id v22 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  150LL,  @"Failed to fetch %@",  a1[4],  v27);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue(v22);
    id v11 = 0LL;
    int v12 = 0LL;
    goto LABEL_19;
  }

  id v9 = v8;
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  80LL,  @"Error fetching record: %@ Error: %@",  a1[4],  v8));

  id v11 = 0LL;
  int v12 = 0LL;
LABEL_20:
  (*(void (**)(void))(a1[7] + 16LL))();
}

id sub_1000A8ADC(uint64_t a1, uint64_t a2)
{
  os_log_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return (id)(*(uint64_t (**)(void))(v2[37] + 16LL))();
  }
  else {
    return [v2 _startDownload];
  }
}

void sub_1000A8BFC(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (v12)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:*(void *)(a1 + 40)]);
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 288);
    *(void *)(v7 + 28_Block_object_dispose(va, 8) = v6;

    id v9 = *(void **)(a1 + 32);
    if (v9[36])
    {
      [v9 _startDownload];
    }

    else
    {
      uint64_t v10 = v9[37];
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  25LL,  @"Record not found"));
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 296LL) + 16LL))();
  }
}

void sub_1000A9114(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000A9214;
  v17[3] = &unk_1002424F8;
  id v13 = *(void **)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v18 = v9;
  id v19 = v13;
  id v20 = v11;
  char v24 = a4;
  id v21 = v12;
  id v22 = v10;
  id v23 = *(id *)(a1 + 48);
  id v14 = v10;
  id v15 = v11;
  id v16 = v9;
  [v13 dispatchAsync:v17];
}

void sub_1000A9214(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) operationDidFinishWithError:*(void *)(a1 + 48)]);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastOperationRequestUUIDs]);
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v4,  v5,  @"Error fetching %@ in memory",  *(void *)(*(void *)(a1 + 40) + 280LL)));

    [*(id *)(a1 + 56) setError:v6];
    if (!v6) {
      goto LABEL_13;
    }
LABEL_8:
    if (!_CPLSilentLogging)
    {
      id v10 = sub_1000A8714();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a1 + 72);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v15 = v12;
        __int16 v16 = 2112;
        id v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch asset %@ : %@", buf, 0x16u);
      }
    }

    goto LABEL_13;
  }

  objc_msgSend(*(id *)(a1 + 56), "setDownloadedSize:", objc_msgSend(*(id *)(a1 + 32), "length"));
  [*(id *)(a1 + 56) setDownloadedItemCount:1];
  if (*(_BYTE *)(a1 + 80)) {
    [*(id *)(a1 + 56) setTranscodedItemCount:1];
  }
  if (!+[CPLCloudKitFakeDynamicDerivatives isFakeDerivative:]( &OBJC_CLASS___CPLCloudKitFakeDynamicDerivatives,  "isFakeDerivative:",  *(void *)(*(void *)(a1 + 40) + 280LL)))
  {
    id v6 = 0LL;
    goto LABEL_13;
  }

  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 280LL);
  id v13 = 0LL;
  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[CPLCloudKitFakeDynamicDerivatives transformData:fileType:matchingResource:error:]( &OBJC_CLASS___CPLCloudKitFakeDynamicDerivatives,  "transformData:fileType:matchingResource:error:",  v2,  v7,  v8,  &v13));
  id v6 = v13;

  id v2 = (id)v9;
  if (v6) {
    goto LABEL_8;
  }
LABEL_13:
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 296LL) + 16LL))();
}

void sub_1000A94C8(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.inmemorydownload");
  uint64_t v3 = (void *)qword_1002965B0;
  qword_1002965B0 = (uint64_t)v2;
}

id sub_1000A9650(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000A973C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1000A9754(void *a1, uint64_t a2, void *a3)
{
  id result = [a3 isExpiredForNow:a1[4] withLeeway:*(double *)(a1[5] + 48)];
  if ((_DWORD)result) {
    ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
  }
  return result;
}

id sub_1000A9848(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _expiredCountLockedWithDate:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000A9908(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 32LL);
  return result;
}

uint64_t sub_1000A99A8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 40LL);
  return result;
}

void sub_1000A9BB4(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    *a4 = 1;
  }

  else
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
    id v5 = (id)objc_claimAutoreleasedReturnValue([a2 key]);
    [v4 removeObjectForKey:v5];
  }

uint64_t sub_1000A9D64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A9D74(uint64_t a1)
{
}

void sub_1000A9D7C(void *a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v12 = v2;
    unsigned __int8 v4 = [v2 isExpiredForNow:a1[6] withLeeway:*(double *)(a1[4] + 48)];
    uint64_t v3 = v12;
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v12 object]);
      uint64_t v6 = *(void *)(a1[7] + 8LL);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;

      uint64_t v8 = objc_claimAutoreleasedReturnValue([v12 expirationDate]);
      uint64_t v9 = *(void *)(a1[8] + 8LL);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t v3 = v12;
    }
  }

  uint64_t v11 = 32LL;
  if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
    uint64_t v11 = 40LL;
  }
  ++*(void *)(a1[4] + v11);
}

void sub_1000A9F40(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) copyWithZone:0];
  os_log_t v2 = -[_CPLCloudKitSimpleCacheEntry initWithKey:object:expirationDate:]( objc_alloc(&OBJC_CLASS____CPLCloudKitSimpleCacheEntry),  "initWithKey:object:expirationDate:",  v10,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  if (!-[_CPLCloudKitSimpleCacheEntry isExpiredForNow:withLeeway:]( v2,  "isExpiredForNow:withLeeway:",  *(void *)(a1 + 56),  *(double *)(*(void *)(a1 + 64) + 48LL)))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 16) objectForKeyedSubscript:v10]);
    if (v3)
    {
      if ((id)-[_CPLCloudKitSimpleCacheEntry compare:](v2, "compare:", v3) != (id)1)
      {

        os_log_t v2 = 0LL;
LABEL_12:

        goto LABEL_13;
      }

      id v4 = [*(id *)(*(void *)(a1 + 64) + 24) indexOfObjectIdenticalTo:v3];
      if (v4 != (id)0x7FFFFFFFFFFFFFFFLL) {
        [*(id *)(*(void *)(a1 + 64) + 24) removeObjectAtIndex:v4];
      }
    }

    else
    {
      id v5 = [*(id *)(*(void *)(a1 + 64) + 16) count];
      uint64_t v6 = *(void **)(a1 + 64);
      if ((unint64_t)v5 >= v6[7])
      {
        [v6 _removeExpiredEntriesLockedForNow:*(void *)(a1 + 56)];
        id v7 = [*(id *)(*(void *)(a1 + 64) + 16) count];
        uint64_t v8 = *(void **)(a1 + 64);
        unint64_t v9 = v8[7];
      }
    }

    if (v2)
    {
      [*(id *)(*(void *)(a1 + 64) + 16) setObject:v2 forKeyedSubscript:v10];
      objc_msgSend( *(id *)(*(void *)(a1 + 64) + 24),  "insertObject:atIndex:",  v2,  objc_msgSend( *(id *)(*(void *)(a1 + 64) + 24),  "indexOfObject:inSortedRange:options:usingComparator:",  v2,  0,  objc_msgSend(*(id *)(*(void *)(a1 + 64) + 24), "count"),  1024,  &stru_1002425F8));
    }

    goto LABEL_12;
  }

int64_t sub_1000AA0D0(id a1, _CPLCloudKitSimpleCacheEntry *a2, _CPLCloudKitSimpleCacheEntry *a3)
{
  return -[_CPLCloudKitSimpleCacheEntry compare:](a2, "compare:", a3);
}

id sub_1000AA130(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeAllObjects];
}

void sub_1000AA214(uint64_t a1)
{
  os_log_t v2 = objc_alloc(&OBJC_CLASS___NSString);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[7];
  id v14 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v6 = [v4 _expiredCountLockedWithDate:v14];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[CPLDateFormatter stringForTimeInterval:]( &OBJC_CLASS___CPLDateFormatter,  "stringForTimeInterval:",  *(double *)(v7 + 48)));
  uint64_t v11 = -[NSString initWithFormat:]( v2,  "initWithFormat:",  @"%lu/%lu - expired: %lu - hit: %lu - miss: %lu - leeway: %@",  v3,  v5,  v6,  v8,  v9,  v10);
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1000AAFA8(uint64_t a1, void *a2, void *a3)
{
  id v16 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  id v6 = [v5 unsignedIntegerValue];

  if (v6)
  {
    uint64_t v7 = [v16 unsignedIntegerValue];
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a2 cplOperationClassDescription]);
    if (v6 == v7)
    {
      id v13 = v9;
      id v14 = v16;
      id v10 = @"%@ x %@";
    }

    else
    {
      id v14 = v16;
      uint64_t v15 = (char *)((_BYTE *)[v16 unsignedIntegerValue] - v6);
      id v13 = v9;
      id v10 = @"%@ x %@ [%lu no cell]";
    }

    uint64_t v11 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v10, v13, v14, v15);
  }

  else
  {
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a2 cplOperationClassDescription]);
    uint64_t v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ x %@ [no cell]",  v9,  v16,  v15);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v8 addObject:v12];
}

id sub_1000AB2B8(uint64_t a1)
{
  os_log_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS____CPLCloudKitOperationSession);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(*(void *)(a1 + 32) + 16)];
    os_log_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  id result = [v2 beginTask:*(void *)(a1 + 40)];
  if ((result & 1) == 0)
  {
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS____CPLCloudKitOperationSession);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 16);
    *(void *)(v8 + 16) = v7;

    if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 8) count] >= 3)
    {
      do
        [*(id *)(*(void *)(a1 + 32) + 8) removeObjectAtIndex:0];
      while ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 8) count] > 2);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(*(void *)(a1 + 32) + 16)];
    return [*(id *)(*(void *)(a1 + 32) + 16) beginTask:*(void *)(a1 + 40)];
  }

  return result;
}

id sub_1000AB4E8(void *a1)
{
  return [*(id *)(a1[4] + 16) endTask:a1[5] withOperationClasses:a1[6] operationsAllowingCellular:a1[7]];
}

uint64_t sub_1000AB5E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000AB5F0(uint64_t a1)
{
}

void sub_1000AB5F8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) count])
  {
    os_log_t v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(*(void *)(a1 + 32) + 8) count]);
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 32) + 8LL);
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v7), "statusObject", (void)v11));
          if (v8) {
            -[NSMutableArray addObject:](v2, "addObject:", v8);
          }

          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v5);
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v2;
  }

void sub_1000AB840(uint64_t a1)
{
  os_log_t v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(*(void *)(a1 + 32) + 8) count]);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v13 + 1) + 8 * (void)v7) status]);
        if (v8) {
          -[NSMutableArray addObject:](v2, "addObject:", v8);
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }

  if (-[NSMutableArray count](v2, "count"))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v2, "componentsJoinedByString:", @"\n"));
    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Sessions:\n%@", v9));
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int128 v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_1000ABA10(id a1)
{
  uint64_t v1 = CPLCopyDefaultSerialQueueAttributes(a1);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.cpl.ckoperationcounter", v4);
  id v3 = (void *)qword_1002965B8;
  qword_1002965B8 = (uint64_t)v2;
}

void sub_1000ABA58(uint64_t a1)
{
  dispatch_queue_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

id sub_1000ABB90(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return _[v2 queryUserDetailsWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v2[35] + 16LL))();
  }
}

void sub_1000AC040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

id sub_1000AC060()
{
  if (qword_1002965C8 != -1) {
    dispatch_once(&qword_1002965C8, &stru_1002426B0);
  }
  return (id)qword_1002965D0;
}

uint64_t sub_1000AC0A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000AC0B0(uint64_t a1)
{
}

void sub_1000AC0B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    uint64_t v10 = -[CPLShareParticipant initWithCKShareParticipant:currentUserID:]( objc_alloc(&OBJC_CLASS___CPLShareParticipant),  "initWithCKShareParticipant:currentUserID:",  v8,  *(void *)(a1 + 32));
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
  }

  else if (!_CPLSilentLogging)
  {
    id v11 = sub_1000AC060();
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412546;
      id v14 = v7;
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Failed to fetch some participant with lookup info %@: %@",  (uint8_t *)&v13,  0x16u);
    }
  }
}

void sub_1000AC1EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000AC26C;
  v6[3] = &unk_10023FAC0;
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  id v5 = v3;
  [v7 dispatchAsync:v6];
}

void sub_1000AC26C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280LL) + 16LL))();
}

void sub_1000AC310(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.share");
  id v3 = (void *)qword_1002965D0;
  qword_1002965D0 = (uint64_t)v2;
}

uint64_t CPLCloudKitResourceInfoReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_34;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            uint64_t v14 = 0LL;
            goto LABEL_36;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0LL;
        }
LABEL_36:
        *(void *)(a1 + _Block_object_dispose(va, 8) = v14;
        goto LABEL_37;
      case 2u:
        id v18 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitResourceInfoImageDimensions);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (PBReaderPlaceMark(a2, v24)
          && CPLCloudKitResourceInfoImageDimensionsReadFrom((uint64_t)v18, a2))
        {
          PBReaderRecallMark(a2, v24);

LABEL_37:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v20 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v21 = 16LL;
        goto LABEL_32;
      case 4u:
        uint64_t v22 = PBReaderReadString(a2);
        uint64_t v20 = objc_claimAutoreleasedReturnValue(v22);
        uint64_t v21 = 32LL;
LABEL_32:
        id v23 = *(void **)(a1 + v21);
        *(void *)(a1 + v21) = v20;

        goto LABEL_37;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_37;
    }
  }

void sub_1000ACF28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000AD1A8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_1000AD2D4();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        char v8 = *(void **)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        int v15 = 138412546;
        id v16 = v8;
        __int16 v17 = 2112;
        uint64_t v18 = v9;
        int v10 = "Sent exit feedback for batch ID: %@, operation ID: %@";
        id v11 = v7;
        os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
        uint32_t v13 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v15, v13);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (!_CPLSilentLogging)
  {
    id v14 = sub_1000AD2D4();
    unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138412290;
      id v16 = v5;
      int v10 = "Failed to send exit feedback with error: %@";
      id v11 = v7;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 12;
      goto LABEL_8;
    }

id sub_1000AD2D4()
{
  if (qword_1002965D8 != -1) {
    dispatch_once(&qword_1002965D8, &stru_100242798);
  }
  return (id)qword_1002965E0;
}

id sub_1000AD314(uint64_t a1)
{
  return [*(id *)(a1 + 32) runWithNoSyncSession];
}

void sub_1000AD60C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000AD2D4();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        int v16 = 138412802;
        uint64_t v17 = v9;
        __int16 v18 = 2112;
        uint64_t v19 = v10;
        __int16 v20 = 2112;
        id v21 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to move %@ to %@: %@",  (uint8_t *)&v16,  0x20u);
      }
    }

    if (([v6 isCPLOperationCancelledError] & 1) == 0) {
      [*(id *)(a1 + 48) _sendExitFeedbackWithSourceRecordIDs:*(void *)(a1 + 32) destinationRecordIDs:*(void *)(a1 + 40) moveError:v6 operationID:*(void *)(a1 + 56) moveBatchID:*(void *)(a1 + 64)];
    }
    id v11 = *(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 280LL) + 16LL);
    goto LABEL_9;
  }

  if (!*(_BYTE *)(a1 + 80))
  {
    id v11 = *(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 280LL) + 16LL);
LABEL_9:
    v11();
    goto LABEL_16;
  }

  if (!_CPLSilentLogging)
  {
    id v12 = sub_1000AD2D4();
    uint32_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      int v16 = 138412546;
      uint64_t v17 = v14;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Successfully moved %@ back to %@",  (uint8_t *)&v16,  0x16u);
    }
  }

  [*(id *)(a1 + 48) _fetchAndMoveNextBatchWithUserRecordID:*(void *)(a1 + 72)];
LABEL_16:
}

void sub_1000AD914(uint64_t a1, void *a2, void *a3, void *a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_1000ADA2C;
  v20[3] = &unk_1002424F8;
  uint64_t v15 = *(void **)(a1 + 40);
  id v21 = *(id *)(a1 + 32);
  id v22 = v14;
  id v23 = v11;
  id v24 = v15;
  id v25 = v12;
  id v26 = v13;
  char v27 = a5;
  id v16 = v13;
  id v17 = v12;
  id v18 = v11;
  id v19 = v14;
  [v21 dispatchAsync:v20];
}

void sub_1000ADA2C(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    char v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v2,  v3,  @"Failed to get next batch to move"));

    if (!_CPLSilentLogging)
    {
      id v5 = sub_1000AD2D4();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412290;
        id v16 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to get next batch to move: %@",  (uint8_t *)&v15,  0xCu);
      }
    }

    if ([v4 isCPLErrorWithCode:23])
    {
      if (!_CPLSilentLogging)
      {
        id v7 = sub_1000AD2D4();
        char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) zoneID]);
          int v15 = 138412290;
          id v16 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Zone %@ has been deleted when getting next batch to move, assuming Exit has already completed",  (uint8_t *)&v15,  0xCu);
        }
      }

      uint64_t v10 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280LL) + 16LL);
    }

    else
    {
      uint64_t v10 = *(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 280LL) + 16LL);
    }

    v10();
  }

  else if ([*(id *)(a1 + 48) count])
  {
    if (!_CPLSilentLogging)
    {
      id v11 = sub_1000AD2D4();
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(void **)(a1 + 48);
        int v15 = 138543362;
        id v16 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Moving records with names: %{public}@",  (uint8_t *)&v15,  0xCu);
      }
    }

    [*(id *)(a1 + 32) _moveBatchRecordWithNames:*(void *)(a1 + 48) userRecordID:*(void *)(a1 + 56) operationID:*(void *)(a1 + 64) moveBatchID:*(void *)(a1 + 72) hasMore:*(unsigned __int8 *)(a1 + 80)];
  }

  else
  {
    id v14 = *(void **)(a1 + 32);
    if (*(_BYTE *)(a1 + 80)) {
      [v14 _fetchAndMoveNextBatchWithUserRecordID:*(void *)(a1 + 56)];
    }
    else {
      (*(void (**)(void))(v14[35] + 16LL))();
    }
  }
}

void sub_1000ADE5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000ADF18;
  v10[3] = &unk_10023EDE8;
  id v7 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v5;
  id v14 = v7;
  id v8 = v5;
  id v9 = v6;
  [v11 dispatchAsync:v10];
}

void sub_1000ADF18(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) auxiliaryOperationDidFinishWithError:*(void *)(a1 + 40)]);
  if ([*(id *)(a1 + 32) isAuxiliaryOperationResultRelevant])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(a1 + 56)]);
    if (v3)
    {
      char v4 = objc_alloc(&OBJC_CLASS___CPLLibraryInfo);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 312) zone]);
      id v6 = -[CPLLibraryInfo initWithCKRecord:zone:](v4, "initWithCKRecord:zone:", v3, v5);

      id v7 = (void *)objc_claimAutoreleasedReturnValue(-[CPLLibraryInfo assetCounts](v6, "assetCounts"));
      v9[0] = 0LL;
      v9[1] = v9;
      void v9[2] = 0x2020000000LL;
      v9[3] = 0LL;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1000AE078;
      v8[3] = &unk_100242778;
      void v8[4] = v9;
      [v7 enumerateKeysAndObjectsUsingBlock:v8];
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
      _Block_object_dispose(v9, 8);
    }
  }
}

void sub_1000AE060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000AE078(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 unsignedIntegerValue];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

id sub_1000AE334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    return (id)(*(uint64_t (**)(void))(v3[35] + 16LL))();
  }
  else {
    return [v3 _fetchAndMoveNextBatchWithUserRecordID:a2];
  }
}

id sub_1000AE3EC(uint64_t a1)
{
  id result = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(void *)(v3 + 344))
  {
    id result = *(id *)(v3 + 352);
    if (result)
    {
      if (!_CPLSilentLogging)
      {
        id v4 = sub_1000AD2D4();
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 352LL);
          int v7 = 138412290;
          uint64_t v8 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@ has become irrelevant - cancelling",  (uint8_t *)&v7,  0xCu);
        }

        id result = *(id *)(*(void *)(a1 + 32) + 352LL);
      }

      return [result cancel];
    }
  }

  return result;
}

#error "1000AE5C0: call analysis failed (funcsize=55)"
id __cdecl -[CPLCloudKitCleanupStagedScopeTask operationDidFinish:error:]( CPLCloudKitCleanupStagedScopeTask *self,  SEL a2,  id a3,  id a4)
{
  CKOperation *v6;
  id v7;
  void *v8;
  objc_super v10;
  uint64_t v6 = (CKOperation *)a3;
  v10.receiver = self;
  v10.super_class = (Class)&OBJC_CLASS___CPLCloudKitCleanupStagedScopeTask;
  int v7 = -[CPLCloudKitTransportTask operationDidFinish:error:](&v10, "operationDidFinish:error:", v6, a4);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (self->_mainOperation == v6)
  {
    self->_mainOperation = 0LL;
  }

  return v8;
}

void sub_1000AF004(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.cleanupstagedscope");
  uint64_t v3 = (void *)qword_1002965E0;
  qword_1002965E0 = (uint64_t)v2;
}

void sub_1000AF030(uint64_t a1)
{
  os_log_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

uint64_t CPLCloudKitFeatureVersionReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
      uint64_t v20 = 16LL;
    }

    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0LL;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_33;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              uint64_t v15 = 0LL;
              goto LABEL_35;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v15 = 0LL;
          }
LABEL_35:
          *(void *)(a1 + _Block_object_dispose(va, 8) = v15;
        }

        else
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
        }

        continue;
      }

      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v20 = 24LL;
    }

    id v22 = *(void **)(a1 + v20);
    *(void *)(a1 + v20) = v19;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000AFB28()
{
  uint64_t v3 = 0LL;
  char v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000B0C8C;
  block[3] = &unk_10023DD30;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1002965F0, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

id sub_1000AFBB4()
{
  if (qword_100296600 != -1) {
    dispatch_once(&qword_100296600, &stru_1002427B8);
  }
  return (id)qword_100296608;
}

uint64_t sub_1000B0C8C(uint64_t result)
{
  uint64_t v1 = qword_1002965F8;
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = qword_1002965F8;
  qword_1002965F8 = v1 + 1;
  return result;
}

void sub_1000B0CAC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.metrics");
  uint64_t v3 = (void *)qword_100296608;
  qword_100296608 = (uint64_t)v2;
}

uint64_t CPLCloudKitFeatureVersionHistoryReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v12 = objc_alloc_init(&OBJC_CLASS___CPLCloudKitFeatureVersion);
      [a1 addFeatureVersion:v12];
      if (!PBReaderPlaceMark(a2, v14) || (CPLCloudKitFeatureVersionReadFrom((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B171C(id a1)
{
  v3[0] = &off_10025A200;
  v3[1] = &off_10025A218;
  v4[0] = @"none";
  v4[1] = @"initiateCopyInProgress";
  v3[2] = &off_10025A230;
  void v3[3] = &off_10025A248;
  v4[2] = @"recordCopyComplete";
  void v4[3] = @"addedParticipantToExitShare";
  void v3[4] = &off_10025A260;
  void v3[5] = &off_10025A278;
  void v4[4] = @"removeParticipantFromSharedLibrary";
  void v4[5] = @"removeParticipantFromExitState";
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  6LL));
  os_log_t v2 = (void *)qword_100296610;
  qword_100296610 = v1;
}

void sub_1000B1B10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v48 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v5 count]);
    id v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentUserID]);
    if (!v49) {
      sub_100198670(a1, (uint64_t *)(a1 + 32));
    }
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v50 objects:v58 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v45 = (id *)(a1 + 32);
      id v46 = v5;
      uint64_t v47 = a1;
      int v10 = 0LL;
      uint64_t v11 = *(void *)v51;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v51 != v11) {
            objc_enumerationMutation(v7);
          }
          char v13 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
          unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "participantUserID", v45));
          if (v14)
          {
            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v49 recordName]);
            unsigned int v16 = [v15 isEqualToString:v14];

            if (v16)
            {
              id v17 = v13;

              int v10 = v17;
            }

            id v18 = (void *)objc_claimAutoreleasedReturnValue([v13 error]);

            if (v18)
            {
              if (!_CPLSilentLogging)
              {
                id v19 = sub_1000B20D0();
                uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                {
                  id v21 = (void *)objc_claimAutoreleasedReturnValue([v13 participantUserID]);
                  id v22 = (void *)objc_claimAutoreleasedReturnValue([v13 error]);
                  *(_DWORD *)__int128 buf = 138543618;
                  id v55 = v21;
                  __int16 v56 = 2112;
                  id v57 = v22;
                  _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to start exiting %{public}@: %@",  buf,  0x16u);
                }
              }
            }

            else
            {
              -[NSMutableArray addObject:](v48, "addObject:", v14);
            }
          }

          else if (!_CPLSilentLogging)
          {
            id v23 = sub_1000B20D0();
            id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Received an exit response without a user identifier",  buf,  2u);
            }
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v50 objects:v58 count:16];
      }

      while (v9);

      id v6 = 0LL;
      id v5 = v46;
      a1 = v47;
      if (v10)
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v10 error]);
        if (v25)
        {
          uint64_t v26 = *(void *)(v47 + 48);
          char v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v47 + 32) _exitErrorFromError:v25]);
          (*(void (**)(uint64_t, void, void, void, void *))(v26 + 16))(v26, 0LL, 0LL, 0LL, v27);
        }

        else
        {
          char v27 = (void *)objc_claimAutoreleasedReturnValue([v10 stagingZoneID]);
          if (v27)
          {
            uint64_t v36 = objc_claimAutoreleasedReturnValue([*v45 scopeIdentifierFromZoneID:v27]);
            if (!v36) {
              sub_100198744((uint64_t)v27, v47, (uint64_t *)v45);
            }
            id v37 = (void *)v36;
            uint64_t v38 = -[CPLCloudKitScope initWithZoneID:options:]( [CPLCloudKitScope alloc],  "initWithZoneID:options:",  v27,  [*(id *)(*(void *)(v47 + 32) + 280) options]);
            uint64_t v39 = *(void *)(v47 + 48);
            id v40 = (void *)objc_claimAutoreleasedReturnValue(-[CPLCloudKitScope transportScope](v38, "transportScope"));
            (*(void (**)(uint64_t, void *, void *, NSMutableArray *, void))(v39 + 16))( v39,  v37,  v40,  v48,  0LL);
          }

          else
          {
            if (!_CPLSilentLogging)
            {
              id v41 = sub_1000B20D0();
              uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Trying to self exit succeeded but got no staging zone ID",  buf,  2u);
              }
            }

            uint64_t v43 = *(void *)(v47 + 48);
            id v44 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
            (*(void (**)(uint64_t, void, void, void, void *))(v43 + 16))(v43, 0LL, 0LL, 0LL, v44);
          }
        }

        goto LABEL_47;
      }
    }

    else
    {
    }

    if (*(void *)(a1 + 64))
    {
      if (!_CPLSilentLogging)
      {
        id v28 = sub_1000B20D0();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          __int16 v30 = *(void **)(a1 + 40);
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v49 recordName]);
          *(_DWORD *)__int128 buf = 138412546;
          id v55 = v30;
          __int16 v56 = 2114;
          id v57 = v31;
          id v32 = "Trying to dismantle %@ but %{public}@ was not marked as an exiting user";
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v32, buf, 0x16u);

          goto LABEL_36;
        }

        goto LABEL_36;
      }
    }

    else if (!_CPLSilentLogging)
    {
      id v33 = sub_1000B20D0();
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = *(void **)(a1 + 40);
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v49 recordName]);
        *(_DWORD *)__int128 buf = 138412546;
        id v55 = v34;
        __int16 v56 = 2114;
        id v57 = v31;
        id v32 = "Trying to self exit from %@ but %{public}@ was not marked as an exiting user";
        goto LABEL_35;
      }

id sub_1000B20D0()
{
  if (qword_100296620 != -1) {
    dispatch_once(&qword_100296620, &stru_100242860);
  }
  return (id)qword_100296628;
}

void sub_1000B21F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    uint64_t v20 = a1;
    id v6 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v5 count]);
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v21 = v5;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (!v8) {
      goto LABEL_20;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v23;
    while (1)
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v7);
        }
        unint64_t v12 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        char v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "participantUserID", v20));
        if (!v13)
        {
          if (_CPLSilentLogging) {
            goto LABEL_18;
          }
          id v19 = sub_1000B20D0();
          unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Received an exit response without a user identifier",  buf,  2u);
          }

          goto LABEL_16;
        }

        unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 error]);

        if (v14)
        {
          if (_CPLSilentLogging) {
            goto LABEL_18;
          }
          id v15 = sub_1000B20D0();
          unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 participantUserID]);
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 error]);
            *(_DWORD *)__int128 buf = 138543618;
            char v27 = v17;
            __int16 v28 = 2112;
            uint64_t v29 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to start exiting %{public}@: %@",  buf,  0x16u);
          }

LABEL_56:
        }

  uint64_t v65 = v221;
LABEL_57:
  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD00000000000001ALL, 0x80000001001D1CD0LL);
    if ((v128 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      v129 = sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v129, 6LL);
      if ((v94 & 1) != 0)
      {
        v130 = (id)v228;
        v131 = v65;
        v132 = [(id)v228 unsignedIntValue];
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v79 + v131)) & 1) == 0)
        {
          v133 = *(void *)(v79 + v131);
          v134 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v134, *(unsigned int *)(v134 + 48), *(unsigned __int16 *)(v134 + 52));
          v135 = swift_retain(v133);
          v136 = sub_1000E5C5C(v135);
          swift_release(v133);
          v137 = *(void *)(v79 + v131);
          *(void *)(v79 + v131) = v136;
          swift_release(v137);
        }

        swift_beginAccess(v138, &v223, 1LL, 0LL);
        *v138 = v132;

        uint64_t v65 = v131;
        uint64_t v66 = v219;
      }
    }
  }

  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD00000000000001DLL, 0x80000001001D1CF0LL);
    if ((v139 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      v140 = sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v140, 6LL);
      if ((v94 & 1) != 0)
      {
        v141 = (id)v228;
        v142 = v65;
        v143 = [(id)v228 unsignedIntValue];
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v79 + v142)) & 1) == 0)
        {
          v144 = *(void *)(v79 + v142);
          v145 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v145, *(unsigned int *)(v145 + 48), *(unsigned __int16 *)(v145 + 52));
          v146 = swift_retain(v144);
          v147 = sub_1000E5C5C(v146);
          swift_release(v144);
          v148 = *(void *)(v79 + v142);
          *(void *)(v79 + v142) = v147;
          swift_release(v148);
        }

        swift_beginAccess(v149, &v224, 1LL, 0LL);
        *v149 = v143;

        uint64_t v65 = v142;
        uint64_t v66 = v219;
      }
    }
  }

  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD00000000000001DLL, 0x80000001001D1D10LL);
    if ((v150 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      v151 = sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v151, 6LL);
      if ((v94 & 1) != 0)
      {
        v152 = (id)v228;
        v153 = v65;
        v154 = [(id)v228 unsignedIntValue];
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v79 + v153)) & 1) == 0)
        {
          v155 = *(void *)(v79 + v153);
          v156 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v156, *(unsigned int *)(v156 + 48), *(unsigned __int16 *)(v156 + 52));
          v157 = swift_retain(v155);
          v158 = sub_1000E5C5C(v157);
          swift_release(v155);
          v159 = *(void *)(v79 + v153);
          *(void *)(v79 + v153) = v158;
          swift_release(v159);
        }

        swift_beginAccess(v160, &v225, 1LL, 0LL);
        *v160 = v154;

        uint64_t v65 = v153;
        uint64_t v66 = v219;
      }
    }
  }

  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD00000000000002ALL, 0x80000001001D1D30LL);
    if ((v161 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      uint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
      if ((v94 & 1) != 0)
      {
        v162 = v65;
        v163 = v79;
        v164 = v228;
        v165 = v229;
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v163 + v162)) & 1) == 0)
        {
          v166 = *(void *)(v163 + v162);
          v167 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v167, *(unsigned int *)(v167 + 48), *(unsigned __int16 *)(v167 + 52));
          v168 = swift_retain(v166);
          v169 = sub_1000E5C5C(v168);
          swift_release(v166);
          v170 = *(void *)(v163 + v162);
          *(void *)(v163 + v162) = v169;
          swift_release(v170);
        }

        swift_beginAccess(v171, &v226, 1LL, 0LL);
        v172 = v171[1];
        *v171 = v164;
        v171[1] = v165;
        uint64_t v94 = swift_bridgeObjectRelease(v172);
        id v79 = v163;
        uint64_t v65 = v162;
        uint64_t v66 = v219;
      }
    }
  }

  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD000000000000017LL, 0x80000001001D1D60LL);
    if ((v173 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      uint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
      if ((v94 & 1) != 0)
      {
        v174 = v65;
        v175 = v79;
        v176 = v228;
        v177 = v229;
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v175 + v174)) & 1) == 0)
        {
          v178 = *(void *)(v175 + v174);
          v179 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v179, *(unsigned int *)(v179 + 48), *(unsigned __int16 *)(v179 + 52));
          v180 = swift_retain(v178);
          v181 = sub_1000E5C5C(v180);
          swift_release(v178);
          v182 = *(void *)(v175 + v174);
          *(void *)(v175 + v174) = v181;
          swift_release(v182);
        }

        swift_beginAccess(v183, &v227, 1LL, 0LL);
        v184 = v183[1];
        *v183 = v176;
        v183[1] = v177;
        uint64_t v94 = swift_bridgeObjectRelease(v184);
        id v79 = v175;
        uint64_t v65 = v174;
        uint64_t v66 = v219;
      }
    }
  }

  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD000000000000018LL, 0x80000001001D1D80LL);
    if ((v185 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      uint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
      if ((v94 & 1) != 0)
      {
        v186 = v65;
        v187 = v79;
        v188 = v228;
        v189 = v229;
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v187 + v186)) & 1) == 0)
        {
          v190 = *(void *)(v187 + v186);
          v191 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v191, *(unsigned int *)(v191 + 48), *(unsigned __int16 *)(v191 + 52));
          v192 = swift_retain(v190);
          v193 = sub_1000E5C5C(v192);
          swift_release(v190);
          v194 = *(void *)(v187 + v186);
          *(void *)(v187 + v186) = v193;
          swift_release(v194);
        }

        swift_beginAccess(v195, &v228, 1LL, 0LL);
        v196 = v195[1];
        *v195 = v188;
        v195[1] = v189;
        uint64_t v94 = swift_bridgeObjectRelease(v196);
        id v79 = v187;
        uint64_t v65 = v186;
        uint64_t v66 = v219;
      }
    }
  }

  if (*(void *)(v66 + 16))
  {
    uint64_t v94 = sub_100119098(0xD00000000000001ELL, 0x80000001001D1DA0LL);
    if ((v197 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      v198 = sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v94 = swift_dynamicCast(&v237, v230, (char *)&type metadata for Any + 8, v198, 6LL);
      if ((v94 & 1) != 0)
      {
        v199 = v237;
        v200 = v65;
        v201 = [v237 BOOLValue];
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v79 + v200)) & 1) == 0)
        {
          v202 = *(void *)(v79 + v200);
          v203 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v203, *(unsigned int *)(v203 + 48), *(unsigned __int16 *)(v203 + 52));
          v204 = swift_retain(v202);
          v205 = sub_1000E5C5C(v204);
          swift_release(v202);
          v206 = *(void *)(v79 + v200);
          *(void *)(v79 + v200) = v205;
          swift_release(v206);
        }

        swift_beginAccess(v207, v230, 1LL, 0LL);
        *v207 = v201;
      }
    }
  }

void sub_1000B2E04(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = *(void **)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000B2ED0;
  v15[3] = &unk_10023EDE8;
  void v15[4] = v11;
  id v16 = v10;
  id v17 = v9;
  id v18 = v8;
  id v12 = v8;
  id v13 = v9;
  id v14 = v10;
  [v11 dispatchAsync:v15];
}

void sub_1000B2ED0(uint64_t a1)
{
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v1 = *(id *)(a1 + 48);
  id v2 = [v1 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v24;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v24 != v4) {
          objc_enumerationMutation(v1);
        }
        if (!_CPLSilentLogging)
        {
          id v6 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
          id v7 = sub_1000B20D0();
          id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 participantUserID]);
            id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 stagingZoneID]);
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
            *(_DWORD *)__int128 buf = 138412802;
            __int16 v28 = v9;
            __int16 v29 = 2112;
            __int16 v30 = v10;
            __int16 v31 = 2112;
            id v32 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "ParticipantUserID: %@ StagingZoneID: %@ error %@",  buf,  0x20u);
          }
        }
      }

      id v3 = [v1 countByEnumeratingWithState:&v23 objects:v33 count:16];
    }

    while (v3);
  }

  if (v22)
  {
    uint64_t v12 = a1;
    if (!_CPLSilentLogging)
    {
      id v13 = sub_1000B20D0();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v15 = *(void **)(a1 + 56);
        *(_DWORD *)__int128 buf = 138412546;
        __int16 v28 = v15;
        __int16 v29 = 2112;
        __int16 v30 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Exit shared library operation %@ failed: %@",  buf,  0x16u);
      }
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastOperationRequestUUIDs", a1));
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v22,  v16,  @"Failed to request exit from shared library"));

    (*(void (**)(void))(*(void *)(*(void *)(v12 + 32) + 272LL) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v18 = sub_1000B20D0();
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void **)(a1 + 56);
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v28 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Exit shared library operation %@ succeeded",  buf,  0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }
}

id sub_1000B323C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3) {
    return (id)(*(uint64_t (**)(void))(v3[34] + 16LL))();
  }
  else {
    return _[v3 _reallyExit];
  }
}

void sub_1000B3370(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.exitsharedlibrary");
  id v3 = (void *)qword_100296628;
  qword_100296628 = (uint64_t)v2;
}

id sub_1000B350C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a2) {
    return _[v3 getScopeInfoWithCurrentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void, void, void, void, void, uint64_t))(v3[34] + 16LL))( v3[34],  v3[35],  0LL,  0LL,  0LL,  a3);
  }
}

void sub_1000B3754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1000B376C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B377C(uint64_t a1)
{
}

void sub_1000B3784(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v6)
  {
    id v8 = -[CPLCloudKitScope initWithZone:options:]( [CPLCloudKitScope alloc],  "initWithZone:options:",  v6,  [*(id *)(*(void *)(a1 + 32) + 288) options]);
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 288);
    *(void *)(v9 + 28_Block_object_dispose(va, 8) = v8;

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue( [v11 zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 288) engineScope:*(void *)(*(void *)(a1 + 32) + 296)]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  id v15 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v16 = v15[34];
    uint64_t v17 = v15[35];
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) cloudKitScope]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 transportScope]);
    (*(void (**)(uint64_t, uint64_t, void, void, void *, id))(v16 + 16))(v16, v17, 0LL, 0LL, v19, v7);
  }

  else if (v15[35])
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) recordsToFetchForScopeInfoWithCurrentUserID:*(void *)(a1 + 40)]);
    id v21 = [v20 count];
    __int128 v22 = *(void **)(a1 + 32);
    if (v21)
    {
      uint64_t v23 = v22[36];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_1000B39F0;
      v30[3] = &unk_100242888;
      void v30[4] = v22;
      __int128 v29 = *(_OWORD *)(a1 + 40);
      id v24 = (id)v29;
      __int128 v31 = v29;
      [v22 fetchRecordsWithIDs:v20 fetchResources:1 inScope:v23 completionHandler:v30];
    }

    else
    {
      uint64_t v25 = v22[34];
      uint64_t v26 = v22[35];
      char v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) cloudKitScope]);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 transportScope]);
      (*(void (**)(uint64_t, uint64_t, void, void, void *, void))(v25 + 16))( v25,  v26,  0LL,  0LL,  v28,  0LL);
    }
  }

  else
  {
    [v15 _determineScopeTypeAndFetchLibraryInfoWithCurrentUserID:*(void *)(a1 + 40)];
  }
}

void sub_1000B39F0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v18 = v7;
  if (a4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  a4,  a3,  @"Error fetching scope-level info records"));
    uint64_t v9 = a1[4];
    uint64_t v10 = *(void *)(v9 + 272);
    uint64_t v11 = *(void *)(v9 + 280);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) cloudKitScope]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 transportScope]);
    (*(void (**)(uint64_t, uint64_t, void, void, void *, void *))(v10 + 16))(v10, v11, 0LL, 0LL, v13, v8);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1[6] + 8) + 40) scopeChangeFromCKRecords:v7 currentUserID:a1[5] previousScopeChange:*(void *)(a1[4] + 304)]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) scopeFlagsUpdateFromCKRecords:v18]);
    uint64_t v14 = a1[4];
    uint64_t v15 = *(void *)(v14 + 272);
    uint64_t v16 = *(void *)(v14 + 280);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) cloudKitScope]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 transportScope]);
    (*(void (**)(uint64_t, uint64_t, void *, void *, void *, void))(v15 + 16))(v15, v16, v8, v12, v17, 0LL);
  }
}

id sub_1000B3D6C()
{
  if (qword_100296630 != -1) {
    dispatch_once(&qword_100296630, &stru_1002429C0);
  }
  return (id)qword_100296638;
}

void sub_1000B3DAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (a4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  a4,  a3,  @"Error fetching scope-level info records"));
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    id v9 = [*(id *)(a1 + 40) scopeTypeForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 288) proposedScopeType:*(void *)(*(void *)(a1 + 32) + 280) fetchedRecords:v7 currentUserID:*(void *)(a1 + 48)];
    if (v9)
    {
      id v10 = v9;
      if (!_CPLSilentLogging)
      {
        id v11 = sub_1000B3D6C();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) scopeIdentifier]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( &OBJC_CLASS___CPLScopeChange,  "descriptionForScopeType:",  v10));
          int v27 = 138412546;
          __int16 v28 = v13;
          __int16 v29 = 2112;
          __int16 v30 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Determined scope type for %@: %@",  (uint8_t *)&v27,  0x16u);
        }
      }

      uint64_t v15 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) scopeIdentifier]);
      uint64_t v17 = -[CPLEngineScope initWithScopeIdentifier:scopeType:](v15, "initWithScopeIdentifier:scopeType:", v16, v10);

      id v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) zoneIdentificationForCloudKitScope:*(void *)(*(void *)(a1 + 32) + 288) engineScope:v17]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue( [v18 scopeChangeFromCKRecords:v7 currentUserID:*(void *)(a1 + 48) previousScopeChange:0]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 scopeFlagsUpdateFromCKRecords:v7]);
      uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 272LL);
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v18 cloudKitScope]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 transportScope]);
      (*(void (**)(uint64_t, id, void *, void *, void *, void))(v21 + 16))(v21, v10, v19, v20, v23, 0LL);
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v24 = sub_1000B3D6C();
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) scopeIdentifier]);
          int v27 = 138412290;
          __int16 v28 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Still unable to determine scope type for %@",  (uint8_t *)&v27,  0xCu);
        }
      }

      (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
    }
  }
}

id sub_1000B4314(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2) {
    return _[v3 _fetchLibraryInfoAndStateWithCurrentSyncAnchor:*(void *)(a1 + 40) currentUserID:a2];
  }
  else {
    return (id)(*(uint64_t (**)(void))(v3[34] + 16LL))();
  }
}

void sub_1000B44A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  a4,  a3,  @"Error fetching scope-level info records"));
  }
  else {
    uint64_t v5 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) scopeChangeFromCKRecords:a2 currentUserID:*(void *)(a1 + 48) previousScopeChange:*(void *)(*(void *)(a1 + 32) + 304)]);
  }
  id v6 = (id)v5;
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
}

void sub_1000B46B0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v7)
  {
    if (a3 && !_CPLSilentLogging)
    {
      id v9 = sub_1000B3D6C();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 288LL);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
        int v21 = 138412546;
        uint64_t v22 = v11;
        __int16 v23 = 2112;
        id v24 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Zone ID for %@ was wrong. Updating it to %@",  (uint8_t *)&v21,  0x16u);
      }
    }

    uint64_t v13 = -[CPLCloudKitScope initWithZone:options:]( [CPLCloudKitScope alloc],  "initWithZone:options:",  v7,  [*(id *)(*(void *)(a1 + 32) + 288) options]);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 288);
    *(void *)(v14 + 28_Block_object_dispose(va, 8) = v13;

    uint64_t v16 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) transportScope]);
    uint64_t v17 = *(void *)(a1 + 32);
    id v18 = *(void **)(v17 + 280);
    *(void *)(v17 + 280) = v16;

    id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 currentServerChangeToken]);
    if (v19) {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver cpl_archivedDataWithRootObject:]( &OBJC_CLASS___NSKeyedArchiver,  "cpl_archivedDataWithRootObject:",  v19));
    }
    else {
      uint64_t v20 = 0LL;
    }
    [*(id *)(a1 + 32) _fetchLibraryInfoAndStateWithCurrentSyncAnchor:v20];
  }

  else
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }
}

void sub_1000B4D58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (!a4)
  {
    id v9 = [*(id *)(a1 + 40) scopeTypeForCloudKitScope:*(void *)(a1 + 48) proposedScopeType:0 fetchedRecords:v7 currentUserID:*(void *)(a1 + 56)];
    if (v9)
    {
      unint64_t v10 = (unint64_t)v9;
      if (!_CPLSilentLogging)
      {
        id v11 = sub_1000B3D6C();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "cpl_zoneName"));
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[CPLScopeChange descriptionForScopeType:]( &OBJC_CLASS___CPLScopeChange,  "descriptionForScopeType:",  v10));
          *(_DWORD *)__int128 buf = 138543618;
          __int16 v29 = v13;
          __int16 v30 = 2112;
          __int128 v31 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Determined scope type for %{public}@: %@",  buf,  0x16u);
        }
      }

      uint64_t v15 = *(void **)(a1 + 32);
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_1000B5004;
        v22[3] = &unk_100242950;
        void v22[4] = v15;
        id v23 = *(id *)(a1 + 64);
        unint64_t v27 = v10;
        id v24 = *(id *)(a1 + 40);
        id v25 = *(id *)(a1 + 48);
        id v26 = v7;
        [v15 getUserRecordIDFetchIfNecessaryWithCompletionHandler:v22];

        goto LABEL_17;
      }

      uint64_t v20 = *(void *)(a1 + 72);
      uint64_t v21 = *(void *)(a1 + 56);
      id v19 = *(void **)(a1 + 32);
    }

    else
    {
      if (!_CPLSilentLogging)
      {
        id v16 = sub_1000B3D6C();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "cpl_zoneName"));
          *(_DWORD *)__int128 buf = 138543362;
          __int16 v29 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Unable to determine scope type for %{public}@",  buf,  0xCu);
        }
      }

      id v19 = *(void **)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 72);
      uint64_t v21 = *(void *)(a1 + 56);
    }

    [v19 _validateLastZoneIDInArray:v20 currentUserID:v21];
    goto LABEL_17;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  a4,  a3,  @"Error fetching scope-level info records"));
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();

LABEL_17:
}

void sub_1000B5004(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  if (v17)
  {
    id v6 = objc_alloc(&OBJC_CLASS___CPLEngineScope);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scopeIdentifierFromZoneID:*(void *)(a1 + 40)]);
    id v8 = -[CPLEngineScope initWithScopeIdentifier:scopeType:]( v6,  "initWithScopeIdentifier:scopeType:",  v7,  *(void *)(a1 + 72));

    id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) zoneIdentificationForCloudKitScope:*(void *)(a1 + 56) engineScope:v8]);
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [v9 scopeChangeFromCKRecords:*(void *)(a1 + 64) currentUserID:v17 previousScopeChange:0]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 scopeFlagsUpdateFromCKRecords:*(void *)(a1 + 64)]);
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 272LL);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 cloudKitScope]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 transportScope]);
    (*(void (**)(uint64_t, void *, void *, void *, void))(v12 + 16))(v12, v10, v14, v11, 0LL);
  }

  else
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 272LL);
    if (v5)
    {
      (*(void (**)(uint64_t, void, void, void, id))(v15 + 16))(v15, 0LL, 0LL, 0LL, v5);
    }

    else
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[CPLErrors unknownError](&OBJC_CLASS___CPLErrors, "unknownError"));
      (*(void (**)(uint64_t, void, void, void, void *))(v15 + 16))(v15, 0LL, 0LL, 0LL, v16);
    }
  }
}

id sub_1000B51A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _validateLastZoneIDInArray:*(void *)(a1 + 40) currentUserID:*(void *)(a1 + 48)];
}

void sub_1000B526C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainScopeIdentifier]);
    uint64_t v9 = CPLSharingScopePrefixForScopeWithIdentifier(v7, v8);
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    id v11 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1000B53CC;
    v17[3] = &unk_1002429A0;
    id v18 = v10;
    id v19 = v6;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1000B5430;
    v14[3] = &unk_10023DE58;
    void v14[4] = *(void *)(a1 + 32);
    uint64_t v15 = v19;
    id v16 = v5;
    uint64_t v12 = v19;
    id v13 = v10;
    [v11 enumerateAllZonesWithBlock:v17 completionHandler:v14];
  }
}

void sub_1000B53CC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneName]);
  unsigned int v4 = [v3 hasPrefix:*(void *)(a1 + 32)];

  if (v4) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_1000B5430(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void, void, void, void, uint64_t))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 272LL),  0LL,  0LL,  0LL,  a2);
  }

  else if ([*(id *)(a1 + 40) count])
  {
    if (!_CPLSilentLogging)
    {
      id v3 = sub_1000B3D6C();
      unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = [*(id *)(a1 + 40) count];
        int v10 = 134217984;
        id v11 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Found %lu potential candidates for a shared zone",  (uint8_t *)&v10,  0xCu);
      }
    }

    [*(id *)(a1 + 32) _validateLastZoneIDInArray:*(void *)(a1 + 40) currentUserID:*(void *)(a1 + 48)];
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v6 = sub_1000B3D6C();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "No valid zones for a shared zone",  (uint8_t *)&v10,  2u);
      }
    }

    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 272LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  39LL,  @"No Shared Zone available"));
    (*(void (**)(uint64_t, void, void, void, void *))(v8 + 16))(v8, 0LL, 0LL, 0LL, v9);
  }

void sub_1000B5600(id a1)
{
  id v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.getlibraryinfo");
  id v3 = (void *)qword_100296638;
  qword_100296638 = (uint64_t)v2;
}

void sub_1000B5A4C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B5A7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B5A8C(uint64_t a1)
{
}

void sub_1000B5A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) shouldIgnoreZoneWithZoneID:v3])
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_1000B5CC4();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpl_zoneName"));
        int v15 = 138412290;
        id v16 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Ignoring new or changed %@",  (uint8_t *)&v15,  0xCu);
      }
    }

    [*(id *)(a1 + 32) noteZoneIDChangeWasIgnored:v3];
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifierFromZoneID:v3]);
    uint64_t v8 = 2LL * *(unsigned __int8 *)(a1 + 56);
    if (+[CPLCloudKitZoneIdentification isSupportedZoneID:]( &OBJC_CLASS___CPLCloudKitLibraryShareZoneIdentification,  "isSupportedZoneID:",  v3))
    {
      v8 |= 4uLL;
    }

    if (!_CPLSilentLogging)
    {
      id v9 = sub_1000B5CC4();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpl_zoneName"));
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitScope descriptionForCloudKitScopeOptions:]( &OBJC_CLASS___CPLCloudKitScope,  "descriptionForCloudKitScopeOptions:",  v8));
        int v15 = 138412546;
        id v16 = v11;
        __int16 v17 = 2112;
        id v18 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Found new or changed zone %@ (%@)",  (uint8_t *)&v15,  0x16u);
      }
    }

    id v13 = -[CPLCloudKitScope initWithZoneID:options:]( objc_alloc(&OBJC_CLASS___CPLCloudKitScope),  "initWithZoneID:options:",  v3,  v8);
    uint64_t v14 = -[CPLCloudKitScopeUpdate initWithCloudKitScope:]( objc_alloc(&OBJC_CLASS___CPLCloudKitScopeUpdate),  "initWithCloudKitScope:",  v13);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v14 forKeyedSubscript:v7];
  }
}

id sub_1000B5CC4()
{
  if (qword_100296640 != -1) {
    dispatch_once(&qword_100296640, &stru_100242AA8);
  }
  return (id)qword_100296648;
}

void sub_1000B5D04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) shouldIgnoreZoneWithZoneID:v3])
  {
    if (!_CPLSilentLogging)
    {
      id v4 = sub_1000B5CC4();
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpl_zoneName"));
        int v11 = 138412290;
        uint64_t v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ignoring deleted %@", (uint8_t *)&v11, 0xCu);
      }
    }

    [*(id *)(a1 + 32) noteZoneIDChangeWasIgnored:v3];
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000B5CC4();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cpl_zoneName"));
        int v11 = 138412290;
        uint64_t v12 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Found deleted zone %@",  (uint8_t *)&v11,  0xCu);
      }
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scopeIdentifierFromZoneID:v3]);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v10];
  }
}

CPLCloudKitScopeListSyncAnchor *sub_1000B5E90(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  id v4 = a2;
  id v5 = objc_alloc(&OBJC_CLASS___CPLCloudKitScopeListSyncAnchor);
  id v6 = *(void **)(*(void *)(a1 + 32) + 272LL);
  if (v3)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 privateChangeToken]);
    uint64_t v8 = v5;
    id v9 = v7;
    id v10 = v4;
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedChangeToken]);
    uint64_t v8 = v5;
    id v9 = v4;
    id v10 = v7;
  }

  int v11 = -[CPLCloudKitScopeListSyncAnchor initWithPrivateChangeToken:sharedChangeToken:]( v8,  "initWithPrivateChangeToken:sharedChangeToken:",  v9,  v10);

  return v11;
}

void sub_1000B5F30(void *a1, void *a2)
{
  id v19 = a2;
  int v3 = objc_autoreleasePoolPush();
  uint64_t v4 = (*(uint64_t (**)(void))(a1[5] + 16LL))();
  uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = a1[4];
  id v7 = *(void **)(v6 + 272);
  *(void *)(v6 + 272) = v5;

  uint64_t v8 = a1[4];
  uint64_t v9 = *(void *)(v8 + 280);
  uint64_t v10 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  uint64_t v11 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 272) scopeListSyncAnchor]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v9 + 16))(v9, v10, v11, v12);

  id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v14 = *(void *)(a1[6] + 8LL);
  int v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  id v16 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v17 = *(void *)(a1[7] + 8LL);
  id v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  objc_autoreleasePoolPop(v3);
}

void sub_1000B603C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000B60FC;
  v11[3] = &unk_10023E200;
  uint64_t v8 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  char v16 = *(_BYTE *)(a1 + 48);
  id v14 = v6;
  id v15 = v8;
  id v9 = v6;
  id v10 = v7;
  [v12 dispatchAsync:v11];
}

void sub_1000B60FC(uint64_t a1)
{
  id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (v13)
  {
    os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastOperationRequestUUIDs]);
    if (*(_BYTE *)(a1 + 64)) {
      int v3 = "shared";
    }
    else {
      int v3 = "private";
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CPLCloudKitErrors CPLErrorForCloudKitError:withRequestUUIDs:description:]( &OBJC_CLASS___CPLCloudKitErrors,  "CPLErrorForCloudKitError:withRequestUUIDs:description:",  v13,  v2,  @"failed to fetch %s database changes",  v3));

    (*(void (**)(void, void, void *))(*(void *)(*(void *)(a1 + 32) + 288LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 288LL),  0LL,  v4);
    goto LABEL_10;
  }

  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 272);
  *(void *)(v7 + 272) = v6;

  if (*(_BYTE *)(a1 + 64)
    || (id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]),
        unsigned __int8 v10 = [v9 supportsSharedDatabase],
        v9,
        (v10 & 1) == 0))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(v11 + 288);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 272) scopeListSyncAnchor]);
    (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v4, 0LL);
LABEL_10:

    goto LABEL_11;
  }

  [*(id *)(a1 + 32) _launchOperationForSharedDatabase:1];
LABEL_11:
}

void sub_1000B6698(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.getscopelistchangees");
  int v3 = (void *)qword_100296648;
  qword_100296648 = (uint64_t)v2;
}

void sub_1000B6AF4(uint64_t a1, void *a2, uint64_t a3)
{
  id v21 = a2;
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem);
  id v6 = *(id *)(*(void *)(a1 + 32) + 296LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) userInfo]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:NSUnderlyingErrorKey]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
    unsigned int v10 = [v9 isEqualToString:CKErrorDomain];

    if (v10)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _itemErrorFromError:v8 forID:v21]);
      uint64_t v12 = (void *)v11;
      if (v11) {
        id v13 = (void *)v11;
      }
      else {
        id v13 = v8;
      }
      id v14 = v13;

      id v6 = v14;
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
  -[CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem setErrorMessage:](v5, "setErrorMessage:", v15);

  char v16 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  -[CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem setErrorDomain:](v5, "setErrorDomain:", v16);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v6 code]));
  -[CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem setErrorCode:](v5, "setErrorCode:", v17);

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v21 recordName]);
  -[CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem setOriginRecordID:](v5, "setOriginRecordID:", v18);

  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) objectAtIndex:a3]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 recordName]);
  -[CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem setDestinationRecordID:](v5, "setDestinationRecordID:", v20);

  [*(id *)(a1 + 40) addObject:v5];
}

void sub_1000B6CE8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000B6D6C;
  v8[3] = &unk_10023F530;
  void v8[4] = v6;
  id v9 = v5;
  char v10 = a2;
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_1000B6D6C(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = _CPLSilentLogging == 0;
  }
  if (v4)
  {
    if (qword_100296650 != -1) {
      dispatch_once(&qword_100296650, &stru_100242AF0);
    }
    id v5 = (os_log_s *)qword_100296658;
    if (os_log_type_enabled((os_log_t)qword_100296658, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(v6 + 280);
      uint64_t v8 = *(void *)(v6 + 288);
      int v9 = 138412802;
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to send feedback about move batch (%@ to %@) with error: %@",  (uint8_t *)&v9,  0x20u);
    }

    int v3 = *(unsigned __int8 *)(a1 + 48);
  }

  (*(void (**)(void, BOOL, void *))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 272LL),  v3 != 0,  v2);
}

void sub_1000B6FEC(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.exitfeedback");
  int v3 = (void *)qword_100296658;
  qword_100296658 = (uint64_t)v2;
}

void sub_1000B7170( uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, char a10, char a11, void *a12)
{
  id v14 = a3;
  id v15 = a12;
  char v16 = *(void **)(a1 + 32);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000B7234;
  v19[3] = &unk_100242B18;
  void v19[4] = v16;
  id v20 = v15;
  char v22 = a2;
  id v21 = v14;
  char v23 = a11;
  id v17 = v14;
  id v18 = v15;
  [v16 dispatchAsync:v19];
}

void sub_1000B7234(uint64_t a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationDidFinishWithError:*(void *)(a1 + 40)]);
  if (!(*(unsigned __int8 *)(a1 + 56) | _CPLSilentLogging))
  {
    if (qword_100296660 != -1) {
      dispatch_once(&qword_100296660, &stru_100242B60);
    }
    int v3 = (os_log_s *)qword_100296668;
    if (os_log_type_enabled((os_log_t)qword_100296668, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 138412546;
      uint64_t v6 = v4;
      __int16 v7 = 2112;
      uint64_t v8 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Failed to request ramp information with operationID: %@ error: %@",  (uint8_t *)&v5,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
}

void sub_1000B7374(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.sharedlibraryserverramp");
  int v3 = (void *)qword_100296668;
  qword_100296668 = (uint64_t)v2;
}

uint64_t CPLCKAvailabilityResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0LL;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0LL;
          goto LABEL_42;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0LL;
      }
LABEL_42:
      *(_BYTE *)(a1 + 12) = v19 != 0;
    }

    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000B8008()
{
  if (qword_100296670 != -1) {
    dispatch_once(&qword_100296670, &stru_100242BA8);
  }
  return (id)qword_100296678;
}

void sub_1000B8048(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if (v6)
  {
    if (!_CPLSilentLogging)
    {
      id v7 = sub_1000B8008();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v25 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error checking resources: %@", buf, 0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 272LL) + 16LL))();
  }

  else
  {
    if (!_CPLSilentLogging)
    {
      id v9 = sub_1000B8008();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Finished checking resources", buf, 2u);
      }
    }

    __int16 v11 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(*(void *)(a1 + 32) + 280) count]);
    char v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    unsigned int v13 = *(void **)(a1 + 40);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1000B82EC;
    v19[3] = &unk_100242B88;
    id v20 = v5;
    uint64_t v14 = v12;
    uint64_t v15 = *(void *)(a1 + 32);
    char v21 = v14;
    uint64_t v22 = v15;
    char v16 = v11;
    char v23 = v16;
    [v13 enumerateKeysAndObjectsUsingBlock:v19];
    if (!_CPLSilentLogging)
    {
      id v17 = sub_1000B8008();
      unsigned int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v25 = v16;
        __int16 v26 = 2112;
        unint64_t v27 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Matched resources %@ Mismatched resources %@",  buf,  0x16u);
      }
    }

    (*(void (**)(void, NSMutableArray *, NSMutableDictionary *, void))(*(void *)(*(void *)(a1 + 32)
                                                                                                + 272LL)
                                                                                    + 16LL))( *(void *)(*(void *)(a1 + 32) + 272LL),  v16,  v14,  0LL);
  }
}

void sub_1000B82EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      __int16 v11 = 0LL;
      do
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)v11);
        if (!v6)
        {
          id v13 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  26LL,  @"Unable to find cloud record for resource %@",  *(void *)(*((void *)&v19 + 1) + 8LL * (void)v11));
          goto LABEL_10;
        }

        if ([v6 inExpunged])
        {
          id v13 = +[CPLErrors cplErrorWithCode:description:]( &OBJC_CLASS___CPLErrors,  "cplErrorWithCode:description:",  26LL,  @"Record for %@ is expunged",  v12);
LABEL_10:
          id v14 = (id)objc_claimAutoreleasedReturnValue(v13);
LABEL_11:
          [*(id *)(a1 + 40) setObject:v14 forKey:v12];
          goto LABEL_12;
        }

        uint64_t v15 = *(void **)(a1 + 48);
        id v18 = 0LL;
        unsigned __int8 v16 = [v15 _checkResource:v12 record:v6 error:&v18];
        id v14 = v18;
        if ((v16 & 1) == 0) {
          goto LABEL_11;
        }
        [*(id *)(a1 + 56) addObject:v12];
LABEL_12:

        __int16 v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v17 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      id v9 = v17;
    }

    while (v17);
  }
}

void sub_1000B8764(id a1)
{
  uint64_t v1 = (const char *)_CPLOSLogSubsystem(a1);
  os_log_t v2 = os_log_create(v1, "engine.transport.cloudkit.resourcescheck");
  int v3 = (void *)qword_100296678;
  qword_100296678 = (uint64_t)v2;
}

uint64_t variable initialization expression of CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.destinationRecordID()
{
  return 0LL;
}

uint64_t (*CMTime.value.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.cloudDbErrorName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t Rpcproto_ErrorInfo.cloudDbErrorName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Goldilocks_SilentMoverRampingResponse.retryAfterSec.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t variable initialization expression of Goldilocks_ExitStatusFeedbackRequest.status()
{
  return 0LL;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.clientCode.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.clientCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.retentionPolicy.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.serverCode.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t Goldilocks_ErrorInfo.DatabaseFailure.serverCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*Goldilocks_ExitMoveBatchResponse.movesComplete.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.ResultError.localizedErrorDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 72));
  return v1;
}

uint64_t Goldilocks_ErrorInfo.ResultError.localizedErrorDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 72));
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.zoneTtlForIcplexit.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t variable initialization expression of CMTime.timescale()
{
  return 0LL;
}

uint64_t Rpcproto_ErrorInfo.retryAfterSeconds.getter()
{
  return *(unsigned int *)(v0 + 80);
}

uint64_t Rpcproto_ErrorInfo.retryAfterSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*Goldilocks_ErrorInfo.ResultError.learnMoreLink.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

void *variable initialization expression of Goldilocks_ExitMoveBatchErrorFeedbackRequest.items()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t Rpcproto_ErrorInfo.loggingDetails.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 88));
}

uint64_t Rpcproto_ErrorInfo.loggingDetails.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 88));
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.stopAtStage.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo(0LL) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100291AF0, (uint64_t)&nominal type descriptor for Rpcproto_ErrorInfo);
}

uint64_t Rpcproto_ErrorInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo(0LL) + 44);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Rpcproto_ErrorInfo.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_OperationControl.optionalUnshareOperationPercentage.getter()
{
  return *(void *)v0;
}

uint64_t Goldilocks_OperationControl.optionalUnshareOperationPercentage.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + _Block_object_dispose((const void *)(v1 - 152), 8) = a2 & 1;
  return result;
}

uint64_t Rpcproto_ErrorInfo.Client.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for Rpcproto_ErrorInfo.Client, a1);
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo.Client(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100291B98, (uint64_t)&nominal type descriptor for Rpcproto_ErrorInfo.Client);
}

uint64_t Rpcproto_ErrorInfo.Client.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for Rpcproto_ErrorInfo.Client);
}

uint64_t (*Rpcproto_ErrorInfo.Client.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.Client.Code.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000BCBCC);
}

uint64_t Rpcproto_ErrorInfo.Client.Code.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_100213188[result];
  }
  return result;
}

void sub_1000B8AC8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
}

uint64_t sub_1000B8AD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000BCBCC, a1);
}

uint64_t sub_1000B8AE4()
{
  return Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_1000B8AF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, sub_1000BCBCC, a2);
}

uint64_t sub_1000B8AFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t sub_1000B8B2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000BD010();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000B8B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)a1, *(_BYTE *)(a1 + 8));
  return v4 == Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v2, v3);
}

BOOL sub_1000B8BBC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0) {
    a1 = qword_100213440[a1];
  }
  if ((a4 & 1) != 0) {
    a3 = qword_100213440[a3];
  }
  return a1 == a3;
}

BOOL sub_1000B8BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL sub_1000B8BEC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0) {
    a1 = qword_1002134C8[a1];
  }
  if ((a4 & 1) != 0) {
    a3 = qword_1002134C8[a3];
  }
  return a1 == a3;
}

BOOL sub_1000B8C10(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0) {
    a1 = qword_100213488[a1];
  }
  if ((a4 & 1) != 0) {
    a3 = qword_100213488[a3];
  }
  return a1 == a3;
}

uint64_t Rpcproto_ErrorInfo.Client.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8F40((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.Client, a1);
}

uint64_t Rpcproto_ErrorInfo.Server.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for Rpcproto_ErrorInfo.Server, a1);
}

uint64_t sub_1000B8C4C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t Rpcproto_ErrorInfo.Server.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000B8CA4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*Rpcproto_ErrorInfo.Server.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.Server.Code.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000BCE88);
}

uint64_t sub_1000B8D20(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t Rpcproto_ErrorInfo.Server.Code.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_1002134C8[result];
  }
  return result;
}

uint64_t sub_1000B8D54@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000BCE88, a1);
}

uint64_t sub_1000B8D60@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_1000B8D90()
{
  uint64_t result = *v0;
  if (*((_BYTE *)v0 + 8) == 1) {
    return qword_1002134C8[result];
  }
  return result;
}

uint64_t sub_1000B8DB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, sub_1000BCE88, a2);
}

uint64_t sub_1000B8DBC@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

void sub_1000B8DF0(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1) {
    uint64_t v2 = qword_1002134C8[v2];
  }
  *a1 = v2;
}

Swift::Int sub_1000B8E14(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(v2 + 8);
  v7[9] = *(void *)v2;
  char v8 = v5;
  Hasher.init(_seed:)(v7, 0LL);
  dispatch thunk of Hashable.hash(into:)(v7, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_1000B8E7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000BCFCC();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000B8EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(_BYTE *)(v3 + 8);
  v8[9] = *(void *)v3;
  char v9 = v6;
  Hasher.init(_seed:)(v8, a1);
  dispatch thunk of Hashable.hash(into:)(v8, a2, a3);
  return Hasher._finalize()();
}

BOOL sub_1000B8F18(uint64_t a1, uint64_t a2)
{
  return sub_1000B8BEC(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t Rpcproto_ErrorInfo.Server.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8F40((void (*)(void))type metadata accessor for Rpcproto_ErrorInfo.Server, a1);
}

uint64_t sub_1000B8F40@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  a1(0LL);
  return UnknownStorage.init()();
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Rpcproto_ErrorInfo.LoggingDetail.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL);
  return UnknownStorage.init()();
}

uint64_t Rpcproto_ErrorInfo.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  type metadata accessor for Rpcproto_ErrorInfo(0LL);
  return UnknownStorage.init()();
}

void sub_1000B9138()
{
  static Rpcproto_ErrorInfo.Client.Code.allCases = (uint64_t)&off_100242C90;
}

uint64_t *Rpcproto_ErrorInfo.Client.Code.allCases.unsafeMutableAddressor()
{
  if (qword_1002916B0 != -1) {
    swift_once(&qword_1002916B0, sub_1000B9138);
  }
  return &static Rpcproto_ErrorInfo.Client.Code.allCases;
}

uint64_t static Rpcproto_ErrorInfo.Client.Code.allCases.getter()
{
  return sub_1000B92C0(&qword_1002916B0, &static Rpcproto_ErrorInfo.Client.Code.allCases);
}

uint64_t static Rpcproto_ErrorInfo.Client.Code.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002916B0, &static Rpcproto_ErrorInfo.Client.Code.allCases, (uint64_t)sub_1000B9138);
}

void *static Rpcproto_ErrorInfo.Client.Code.allCases.modify(uint64_t a1)
{
  if (qword_1002916B0 != -1) {
    swift_once(&qword_1002916B0, sub_1000B9138);
  }
  swift_beginAccess(&static Rpcproto_ErrorInfo.Client.Code.allCases, a1, 33LL, 0LL);
  return &j__swift_endAccess;
}

uint64_t sub_1000B9234@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002916B0, &static Rpcproto_ErrorInfo.Client.Code.allCases, (uint64_t)sub_1000B9138, a1);
}

void sub_1000B9250()
{
  static Rpcproto_ErrorInfo.Server.Code.allCases = (uint64_t)&off_100243220;
}

uint64_t *Rpcproto_ErrorInfo.Server.Code.allCases.unsafeMutableAddressor()
{
  if (qword_1002916B8 != -1) {
    swift_once(&qword_1002916B8, sub_1000B9250);
  }
  return &static Rpcproto_ErrorInfo.Server.Code.allCases;
}

uint64_t static Rpcproto_ErrorInfo.Server.Code.allCases.getter()
{
  return sub_1000B92C0(&qword_1002916B8, &static Rpcproto_ErrorInfo.Server.Code.allCases);
}

uint64_t sub_1000B92C0(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  swift_beginAccess(a2, v4, 0LL, 0LL);
  return swift_bridgeObjectRetain(*a2);
}

uint64_t static Rpcproto_ErrorInfo.Server.Code.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002916B8, &static Rpcproto_ErrorInfo.Server.Code.allCases, (uint64_t)sub_1000B9250);
}

uint64_t sub_1000B9334(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  swift_beginAccess(a3, v8, 1LL, 0LL);
  uint64_t v6 = *a3;
  *a3 = a1;
  return swift_bridgeObjectRelease(v6);
}

void *static Rpcproto_ErrorInfo.Server.Code.allCases.modify(uint64_t a1)
{
  if (qword_1002916B8 != -1) {
    swift_once(&qword_1002916B8, sub_1000B9250);
  }
  swift_beginAccess(&static Rpcproto_ErrorInfo.Server.Code.allCases, a1, 33LL, 0LL);
  return &j_j__swift_endAccess;
}

uint64_t sub_1000B9404@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002916B8, &static Rpcproto_ErrorInfo.Server.Code.allCases, (uint64_t)sub_1000B9250, a1);
}

uint64_t sub_1000B9420@<X0>(void *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  swift_beginAccess(a2, v8, 0LL, 0LL);
  uint64_t v6 = *a2;
  *a4 = *a2;
  return swift_bridgeObjectRetain(v6);
}

void *Rpcproto_ErrorInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static Rpcproto_ErrorInfo.protoMessageName;
}

unint64_t static Rpcproto_ErrorInfo.protoMessageName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000B94AC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Rpcproto_ErrorInfo._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212530;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "message";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  __int16 v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v6 + v4) = 6LL;
  *(void *)uint64_t v12 = "cloudDbErrorName";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 16LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  id v13 = (void *)(v7 + v6 + 2 * v4);
  id v14 = (char *)v13 + *(int *)(v2 + 48);
  *id v13 = 3LL;
  *(void *)id v14 = "clientCode";
  *((void *)v14 + 1) = 10LL;
  _BYTE v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + v6 + 3 * v4);
  unsigned __int8 v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)unsigned __int8 v16 = "serverCode";
  *((void *)v16 + 1) = 10LL;
  v16[16] = 2;
  v11();
  id v17 = (void *)(v7 + v6 + 4 * v4);
  id v18 = (char *)v17 + *(int *)(v2 + 48);
  *id v17 = 5LL;
  *(void *)id v18 = "stackTrace";
  *((void *)v18 + 1) = 10LL;
  v18[16] = 2;
  v11();
  __int128 v19 = (void *)(v7 + v6 + 5 * v4);
  __int128 v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 7LL;
  *(void *)__int128 v20 = "retryAfterSeconds";
  *((void *)v20 + 1) = 17LL;
  v20[16] = 2;
  v11();
  __int128 v21 = (void *)(v7 + v6 + 6 * v4);
  __int128 v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 8LL;
  *(void *)__int128 v22 = "loggingDetails";
  *((void *)v22 + 1) = 14LL;
  v22[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Rpcproto_ErrorInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002916C0, (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap, (uint64_t)sub_1000B94AC);
}

uint64_t static Rpcproto_ErrorInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002916C0,  (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap,  (uint64_t)sub_1000B94AC,  a1);
}

uint64_t Rpcproto_ErrorInfo.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_11;
        case 3LL:
          unint64_t v10 = sub_1000BD010();
          uint64_t v11 = v3 + 32;
          uint64_t v12 = &type metadata for Rpcproto_ErrorInfo.Client.Code;
          goto LABEL_8;
        case 4LL:
          unint64_t v10 = sub_1000BCFCC();
          uint64_t v11 = v3 + 48;
          uint64_t v12 = &type metadata for Rpcproto_ErrorInfo.Server.Code;
LABEL_8:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        case 5LL:
          uint64_t v9 = v3 + 64;
          goto LABEL_11;
        case 6LL:
          uint64_t v9 = v3 + 16;
LABEL_11:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        case 7LL:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + 80, a2, a3);
          break;
        case 8LL:
          uint64_t v13 = type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL);
          uint64_t v14 = sub_1000BD35C( &qword_1002919B8,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3 + 88, v13, v14, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Rpcproto_ErrorInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v12 = *(void *)(v5 + 32);
    char v13 = *(_BYTE *)(v5 + 40);
    if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v12, v13)
      || (uint64_t v25 = v12,
          char v26 = v13,
          unint64_t v14 = sub_1000BD010(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v25,  3LL,  &type metadata for Rpcproto_ErrorInfo.Client.Code,  v14,  a2,  a3),  !v4))
    {
      if (!*(void *)(v5 + 48)
        || (char v15 = *(_BYTE *)(v5 + 56),
            uint64_t v25 = *(void *)(v5 + 48),
            char v26 = v15,
            unint64_t v16 = sub_1000BCFCC(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v25,  4LL,  &type metadata for Rpcproto_ErrorInfo.Server.Code,  v16,  a2,  a3),  !v4))
      {
        unint64_t v17 = *(void *)(v5 + 72);
        uint64_t v18 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000LL) == 0) {
          uint64_t v18 = *(void *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
        }
        if (!v18 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
        {
          unint64_t v19 = *(void *)(v5 + 24);
          uint64_t v20 = HIBYTE(v19) & 0xF;
          if ((v19 & 0x2000000000000000LL) == 0) {
            uint64_t v20 = *(void *)(v5 + 16) & 0xFFFFFFFFFFFFLL;
          }
          if (!v20 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
          {
            uint64_t v21 = *(unsigned int *)(v5 + 80);
            if (!(_DWORD)v21
              || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v21, 7LL, a2, a3), !v4))
            {
              uint64_t v22 = *(void *)(v5 + 88);
              if (!*(void *)(v22 + 16)
                || (uint64_t v23 = type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL),
                    v24 = sub_1000BD35C( &qword_1002919B8,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail),  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v22,  8LL,  v23,  v24,  a2,  a3),  !v4))
              {
                type metadata accessor for Rpcproto_ErrorInfo(0LL);
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int Rpcproto_ErrorInfo.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Rpcproto_ErrorInfo,  &qword_1002919D0,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000B9B54@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xE000000000000000LL;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000B9BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000B9BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000B9C2C())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000B9C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000B9C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000B9C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291D70,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000B9CC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002916C0,  (uint64_t)static Rpcproto_ErrorInfo._protobuf_nameMap,  (uint64_t)sub_1000B94AC,  a1);
}

uint64_t sub_1000B9CDC(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291A48,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B9D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291A48,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_1000B9D74(int a1)
{
  v1._countAndFlagsBits = 0x746E65696C432ELL;
  v1._object = (void *)0xE700000000000000LL;
  sub_1000BBF40( a1,  v1,  static Rpcproto_ErrorInfo.Client.protoMessageName,  &static Rpcproto_ErrorInfo.Client.protoMessageName[1]);
}

void *Rpcproto_ErrorInfo.Client.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002916C8 != -1) {
    swift_once(&qword_1002916C8, sub_1000B9D74);
  }
  return static Rpcproto_ErrorInfo.Client.protoMessageName;
}

uint64_t static Rpcproto_ErrorInfo.Client.protoMessageName.getter()
{
  return sub_1000BB594( &qword_1002916C8,  static Rpcproto_ErrorInfo.Client.protoMessageName,  &static Rpcproto_ErrorInfo.Client.protoMessageName[1],  (uint64_t)sub_1000B9D74);
}

uint64_t sub_1000B9DF8(uint64_t a1)
{
  return sub_1000BB5F0(a1, static Rpcproto_ErrorInfo.Client._protobuf_nameMap);
}

uint64_t Rpcproto_ErrorInfo.Client._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002916D0,  (uint64_t)static Rpcproto_ErrorInfo.Client._protobuf_nameMap,  (uint64_t)sub_1000B9DF8);
}

uint64_t sub_1000B9E20(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for _NameMap(0LL);
  return sub_1000BCFB4(v4, a2);
}

uint64_t static Rpcproto_ErrorInfo.Client._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002916D0,  (uint64_t)static Rpcproto_ErrorInfo.Client._protobuf_nameMap,  (uint64_t)sub_1000B9DF8,  a1);
}

uint64_t sub_1000B9E7C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_1000BCFB4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t Rpcproto_ErrorInfo.Client.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB74C( a1,  a2,  a3,  (uint64_t (*)(void))sub_1000BD010,  (uint64_t)&type metadata for Rpcproto_ErrorInfo.Client.Code);
}

uint64_t Rpcproto_ErrorInfo.Client.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)v3;
  char v9 = *(_BYTE *)(v3 + 8);
  if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)v3, v9)
    || (uint64_t v12 = v8,
        char v13 = v9,
        unint64_t v10 = sub_1000BD010(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v12,  1LL,  &type metadata for Rpcproto_ErrorInfo.Client.Code,  v10,  a2,  a3),  !v4))
  {
    type metadata accessor for Rpcproto_ErrorInfo.Client(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int Rpcproto_ErrorInfo.Client.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Rpcproto_ErrorInfo.Client,  &qword_1002919D8,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000B9FF4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000BA01C(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_1002916C8,  static Rpcproto_ErrorInfo.Client.protoMessageName,  &static Rpcproto_ErrorInfo.Client.protoMessageName[1],  (uint64_t)sub_1000B9D74);
}

uint64_t (*sub_1000BA044())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000BA058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.Client.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000BA06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.Client.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000BA080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291D68,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000BA0D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002916D0,  (uint64_t)static Rpcproto_ErrorInfo.Client._protobuf_nameMap,  (uint64_t)sub_1000B9DF8,  a1);
}

uint64_t sub_1000BA0EC@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_1000BCFB4(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_1000BA158(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291A60,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BA198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291A60,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BA1E8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v180 = swift_allocObject(v1, v6 + 87 * v4, v5 | 7);
  *(_OWORD *)(v180 + 16) = xmmword_100212540;
  uint64_t v7 = v180 + v6;
  uint64_t v8 = v180 + v6 + *(int *)(v2 + 48);
  *(void *)(v180 + v6) = 0LL;
  *(void *)uint64_t v8 = "noerror";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v180 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "unknown";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  char v13 = (void *)(v180 + v6 + 2 * v4);
  unint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *char v13 = 2LL;
  *(void *)unint64_t v14 = "expiredAppConfig";
  *((void *)v14 + 1) = 16LL;
  _BYTE v14[16] = 2;
  v11();
  char v15 = (void *)(v180 + v6 + 3 * v4);
  unint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 3LL;
  *(void *)unint64_t v16 = "expiredGlobalConfig";
  *((void *)v16 + 1) = 19LL;
  v16[16] = 2;
  v11();
  unint64_t v17 = (void *)(v180 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *unint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "badSyntax";
  *((void *)v18 + 1) = 9LL;
  v18[16] = 2;
  v11();
  unint64_t v19 = (void *)(v180 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 5LL;
  *(void *)uint64_t v20 = "forbidden";
  *((void *)v20 + 1) = 9LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v180 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "throttled";
  *((void *)v22 + 1) = 9LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v180 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "refused";
  *((void *)v24 + 1) = 7LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v180 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "notSupported";
  *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 152), 8) = 12LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  char v26 = (void *)(v180 + v6 + 9 * v4);
  unint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *char v26 = 9LL;
  *(void *)unint64_t v27 = "exists";
  *((void *)v27 + 1) = 6LL;
  v27[16] = 2;
  v11();
  __int16 v28 = (void *)(v180 + v6 + 10 * v4);
  __int16 v29 = (char *)v28 + *(int *)(v2 + 48);
  *__int16 v28 = 10LL;
  *(void *)__int16 v29 = "requestAlreadyProcessed";
  *((void *)v29 + 1) = 23LL;
  v29[16] = 2;
  v11();
  __int16 v30 = (void *)(v180 + v6 + 11 * v4);
  __int128 v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)__int128 v31 = "badAuthToken";
  *((void *)v31 + 1) = 12LL;
  v31[16] = 2;
  v11();
  id v32 = (void *)(v180 + v6 + 12 * v4);
  id v33 = (char *)v32 + *(int *)(v2 + 48);
  *id v32 = 12LL;
  *(void *)id v33 = "needsAuthentication";
  *((void *)v33 + 1) = 19LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v180 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 13LL;
  *(void *)uint64_t v35 = "mescalSignatureMissing";
  *((void *)v35 + 1) = 22LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v180 + v6 + 14 * v4);
  id v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 14LL;
  *(void *)id v37 = "invalidMescalSignature";
  *((void *)v37 + 1) = 22LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v180 + v6 + 15 * v4);
  uint64_t v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 15LL;
  *(void *)uint64_t v39 = "opLockFailure";
  *((void *)v39 + 1) = 13LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v180 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 16LL;
  *(void *)uint64_t v40 = "atomicFailure";
  *(void *)(v40 + _Block_object_dispose((const void *)(v1 - 152), 8) = 13LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  id v41 = (void *)(v180 + v6 + 17 * v4);
  uint64_t v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 17LL;
  *(void *)uint64_t v42 = "resetNeeded";
  *((void *)v42 + 1) = 11LL;
  v42[16] = 2;
  v11();
  uint64_t v43 = (void *)(v180 + v6 + 18 * v4);
  id v44 = (char *)v43 + *(int *)(v2 + 48);
  *uint64_t v43 = 18LL;
  *(void *)id v44 = "fieldsPerTypeLimitExceeded";
  *((void *)v44 + 1) = 26LL;
  uint64_t v44[16] = 2;
  v11();
  uint64_t v45 = (void *)(v180 + v6 + 19 * v4);
  id v46 = (char *)v45 + *(int *)(v2 + 48);
  *uint64_t v45 = 19LL;
  *(void *)id v46 = "typeBusy";
  *((void *)v46 + 1) = 8LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v180 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 20LL;
  *(void *)uint64_t v48 = "numRecordTypesLimitExceeded";
  *((void *)v48 + 1) = 27LL;
  v48[16] = 2;
  v11();
  id v49 = (void *)(v180 + v6 + 21 * v4);
  __int128 v50 = (char *)v49 + *(int *)(v2 + 48);
  *id v49 = 21LL;
  *(void *)__int128 v50 = "invalidContainer";
  *((void *)v50 + 1) = 16LL;
  v50[16] = 2;
  v11();
  __int128 v51 = (void *)(v180 + v6 + 22 * v4);
  __int128 v52 = (char *)v51 + *(int *)(v2 + 48);
  *__int128 v51 = 22LL;
  *(void *)__int128 v52 = "invalidRecordTypeName";
  *((void *)v52 + 1) = 21LL;
  v52[16] = 2;
  v11();
  __int128 v53 = (void *)(v180 + v6 + 23 * v4);
  id v54 = (char *)v53 + *(int *)(v2 + 48);
  *__int128 v53 = 23LL;
  *(void *)id v54 = "invalidFieldName";
  *((void *)v54 + 1) = 16LL;
  v54[16] = 2;
  v11();
  id v55 = (void *)(v180 + v6 + 24 * v4);
  __int16 v56 = (char *)v55 + *(int *)(v2 + 48);
  *id v55 = 24LL;
  *(void *)__int16 v56 = "invalidFieldValue";
  *((void *)v56 + 1) = 17LL;
  v56[16] = 2;
  v11();
  id v57 = (void *)(v180 + v6 + 25 * v4);
  double v58 = (char *)v57 + *(int *)(v2 + 48);
  void *v57 = 25LL;
  *(void *)double v58 = "invalidIdentifier";
  *((void *)v58 + 1) = 17LL;
  v58[16] = 2;
  v11();
  double v59 = (void *)(v180 + v6 + 26 * v4);
  uint64_t v60 = (char *)v59 + *(int *)(v2 + 48);
  void *v59 = 26LL;
  *(void *)uint64_t v60 = "fieldNotQueryable";
  *((void *)v60 + 1) = 17LL;
  v60[16] = 2;
  v11();
  double v61 = (void *)(v180 + v6 + 27 * v4);
  double v62 = (char *)v61 + *(int *)(v2 + 48);
  *double v61 = 27LL;
  *(void *)double v62 = "fieldNotSortable";
  *((void *)v62 + 1) = 16LL;
  v62[16] = 2;
  v11();
  double v63 = (void *)(v180 + v6 + 28 * v4);
  double v64 = (char *)v63 + *(int *)(v2 + 48);
  *double v63 = 28LL;
  *(void *)double v64 = "queryFilterLimitExceeded";
  *((void *)v64 + 1) = 24LL;
  v64[16] = 2;
  v11();
  uint64_t v65 = (void *)(v180 + v6 + 29 * v4);
  uint64_t v66 = (char *)v65 + *(int *)(v2 + 48);
  *uint64_t v65 = 29LL;
  *(void *)uint64_t v66 = "queryFilterValuesLimitExceeded";
  *((void *)v66 + 1) = 30LL;
  v66[16] = 2;
  v11();
  id v67 = (void *)(v180 + v6 + 30 * v4);
  id v68 = (char *)v67 + *(int *)(v2 + 48);
  void *v67 = 30LL;
  *(void *)id v68 = "membershipQueryLimitExceeded";
  *((void *)v68 + 1) = 28LL;
  v68[16] = 2;
  v11();
  uint64_t v69 = (void *)(v180 + v6 + 31 * v4);
  id v70 = (char *)v69 + *(int *)(v2 + 48);
  void *v69 = 31LL;
  *(void *)id v70 = "notificationAdditionalFieldLimitExceeded";
  *((void *)v70 + 1) = 40LL;
  v70[16] = 2;
  v11();
  uint64_t v71 = v180 + v6 + 32 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 32 * v4) = 32LL;
  *(void *)uint64_t v71 = "notificationAdditionalFieldInvalidType";
  *(void *)(v71 + _Block_object_dispose((const void *)(v1 - 152), 8) = 38LL;
  *(_BYTE *)(v71 + 16) = 2;
  v11();
  id v72 = (void *)(v180 + v6 + 33 * v4);
  uint64_t v73 = (char *)v72 + *(int *)(v2 + 48);
  *id v72 = 33LL;
  *(void *)uint64_t v73 = "subscriptionLimitExceeded";
  *((void *)v73 + 1) = 25LL;
  v73[16] = 2;
  v11();
  v74 = (void *)(v180 + v6 + 34 * v4);
  id v75 = (char *)v74 + *(int *)(v2 + 48);
  void *v74 = 34LL;
  *(void *)id v75 = "uniqueTriggerLimitExceeded";
  *((void *)v75 + 1) = 26LL;
  v75[16] = 2;
  v11();
  id v76 = (void *)(v180 + v6 + 35 * v4);
  uint64_t v77 = (char *)v76 + *(int *)(v2 + 48);
  *id v76 = 35LL;
  *(void *)uint64_t v77 = "triggerSubscriptionBindingTypeMismatch";
  *((void *)v77 + 1) = 38LL;
  v77[16] = 2;
  v11();
  uint64_t v78 = (void *)(v180 + v6 + 36 * v4);
  id v79 = (char *)v78 + *(int *)(v2 + 48);
  *uint64_t v78 = 36LL;
  *(void *)id v79 = "zoneSizeLimitExceeded";
  *((void *)v79 + 1) = 21LL;
  v79[16] = 2;
  v11();
  uint64_t v80 = (void *)(v180 + v6 + 37 * v4);
  id v81 = (char *)v80 + *(int *)(v2 + 48);
  void *v80 = 37LL;
  *(void *)id v81 = "zoneCountLimitExceeded";
  *((void *)v81 + 1) = 22LL;
  v81[16] = 2;
  v11();
  v82 = (void *)(v180 + v6 + 38 * v4);
  uint64_t v83 = (char *)v82 + *(int *)(v2 + 48);
  void *v82 = 38LL;
  *(void *)uint64_t v83 = "uniqueFieldFailure";
  *((void *)v83 + 1) = 18LL;
  v83[16] = 2;
  v11();
  id v84 = (void *)(v180 + v6 + 39 * v4);
  v85 = (char *)v84 + *(int *)(v2 + 48);
  *id v84 = 39LL;
  *(void *)v85 = "validatingReferenceError";
  *((void *)v85 + 1) = 24LL;
  v85[16] = 2;
  v11();
  id v86 = (void *)(v180 + v6 + 40 * v4);
  v87 = (char *)v86 + *(int *)(v2 + 48);
  *id v86 = 40LL;
  *(void *)v87 = "fullResetNeeded";
  *((void *)v87 + 1) = 15LL;
  v87[16] = 2;
  v11();
  id v88 = (void *)(v180 + v6 + 41 * v4);
  id v89 = (char *)v88 + *(int *)(v2 + 48);
  *id v88 = 41LL;
  *(void *)id v89 = "alreadyShared";
  *((void *)v89 + 1) = 13LL;
  v89[16] = 2;
  v11();
  id v90 = (void *)(v180 + v6 + 42 * v4);
  __int16 v91 = (char *)v90 + *(int *)(v2 + 48);
  *id v90 = 42LL;
  *(void *)__int16 v91 = "emailOutOfNetwork";
  *((void *)v91 + 1) = 17LL;
  v91[16] = 2;
  v11();
  uint64_t v92 = (void *)(v180 + v6 + 43 * v4);
  v93 = (char *)v92 + *(int *)(v2 + 48);
  void *v92 = 43LL;
  *(void *)v93 = "duplicateSubscription";
  *((void *)v93 + 1) = 21LL;
  v93[16] = 2;
  v11();
  uint64_t v94 = (void *)(v180 + v6 + 44 * v4);
  v95 = (char *)v94 + *(int *)(v2 + 48);
  *uint64_t v94 = 46LL;
  *(void *)v95 = "expiredPutReceipt";
  *((void *)v95 + 1) = 17LL;
  v95[16] = 2;
  v11();
  id v96 = (void *)(v180 + v6 + 45 * v4);
  id v97 = (char *)v96 + *(int *)(v2 + 48);
  *id v96 = 47LL;
  *(void *)id v97 = "quotaExceeded";
  *((void *)v97 + 1) = 13LL;
  v97[16] = 2;
  v11();
  v98 = (void *)(v180 + v6 + 46 * v4);
  v99 = (char *)v98 + *(int *)(v2 + 48);
  void *v98 = 48LL;
  *(void *)v99 = "zoneNotFound";
  *((void *)v99 + 1) = 12LL;
  v99[16] = 2;
  v11();
  v100 = (void *)(v180 + v6 + 47 * v4);
  v101 = (char *)v100 + *(int *)(v2 + 48);
  void *v100 = 49LL;
  *(void *)v101 = "invalidBundleId";
  *((void *)v101 + 1) = 15LL;
  v101[16] = 2;
  v11();
  v102 = (void *)(v180 + v6 + 48 * v4);
  v103 = (char *)v102 + *(int *)(v2 + 48);
  void *v102 = 50LL;
  *(void *)v103 = "unsupportedDevice";
  *((void *)v103 + 1) = 17LL;
  v103[16] = 2;
  v11();
  v104 = (void *)(v180 + v6 + 49 * v4);
  v105 = (char *)v104 + *(int *)(v2 + 48);
  void *v104 = 51LL;
  *(void *)v105 = "blacklisted";
  *((void *)v105 + 1) = 11LL;
  v105[16] = 2;
  v11();
  v106 = (void *)(v180 + v6 + 50 * v4);
  v107 = (char *)v106 + *(int *)(v2 + 48);
  void *v106 = 52LL;
  *(void *)v107 = "recordProtectionInfoTagMismatch";
  *((void *)v107 + 1) = 31LL;
  v107[16] = 2;
  v11();
  v108 = (void *)(v180 + v6 + 51 * v4);
  v109 = (char *)v108 + *(int *)(v2 + 48);
  void *v108 = 53LL;
  *(void *)v109 = "zoneProtectionInfoTagMismatch";
  *((void *)v109 + 1) = 29LL;
  v109[16] = 2;
  v11();
  v110 = (void *)(v180 + v6 + 52 * v4);
  v111 = (char *)v110 + *(int *)(v2 + 48);
  void *v110 = 54LL;
  *(void *)v111 = "assetSizeLimitExceeded";
  *((void *)v111 + 1) = 22LL;
  v111[16] = 2;
  v11();
  v112 = (void *)(v180 + v6 + 53 * v4);
  v113 = (char *)v112 + *(int *)(v2 + 48);
  void *v112 = 55LL;
  *(void *)v113 = "batchOperationLimitExceeded";
  *((void *)v113 + 1) = 27LL;
  v113[16] = 2;
  v11();
  v114 = (void *)(v180 + v6 + 54 * v4);
  v115 = (char *)v114 + *(int *)(v2 + 48);
  void *v114 = 56LL;
  *(void *)v115 = "requestSizeLimitExceeded";
  *((void *)v115 + 1) = 24LL;
  v115[16] = 2;
  v11();
  v116 = (void *)(v180 + v6 + 55 * v4);
  v117 = (char *)v116 + *(int *)(v2 + 48);
  void *v116 = 57LL;
  *(void *)v117 = "recordSizeLimitExceeded";
  *((void *)v117 + 1) = 23LL;
  v117[16] = 2;
  v11();
  v118 = (void *)(v180 + v6 + 56 * v4);
  v119 = (char *)v118 + *(int *)(v2 + 48);
  void *v118 = 58LL;
  *(void *)v119 = "databaseCommitSizeExceeded";
  *((void *)v119 + 1) = 26LL;
  v119[16] = 2;
  v11();
  v120 = (void *)(v180 + v6 + 57 * v4);
  v121 = (char *)v120 + *(int *)(v2 + 48);
  void *v120 = 59LL;
  *(void *)v121 = "userDeletedDataForZone";
  *((void *)v121 + 1) = 22LL;
  v121[16] = 2;
  v11();
  v122 = (void *)(v180 + v6 + 58 * v4);
  v123 = (char *)v122 + *(int *)(v2 + 48);
  void *v122 = 60LL;
  *(void *)v123 = "staleRecordUpdate";
  *((void *)v123 + 1) = 17LL;
  v123[16] = 2;
  v11();
  v124 = (void *)(v180 + v6 + 59 * v4);
  v125 = (char *)v124 + *(int *)(v2 + 48);
  void *v124 = 61LL;
  *(void *)v125 = "shareParticipantLimitExceeded";
  *((void *)v125 + 1) = 29LL;
  v125[16] = 2;
  v11();
  v126 = (void *)(v180 + v6 + 60 * v4);
  v127 = (char *)v126 + *(int *)(v2 + 48);
  void *v126 = 62LL;
  *(void *)v127 = "shareParticipantError";
  *((void *)v127 + 1) = 21LL;
  v127[16] = 2;
  v11();
  v128 = (void *)(v180 + v6 + 61 * v4);
  v129 = (char *)v128 + *(int *)(v2 + 48);
  void *v128 = 64LL;
  *(void *)v129 = "pcsChainingError";
  *((void *)v129 + 1) = 16LL;
  v129[16] = 2;
  v11();
  v130 = (void *)(v180 + v6 + 62 * v4);
  v131 = (char *)v130 + *(int *)(v2 + 48);
  void *v130 = 65LL;
  *(void *)v131 = "hierarchyAlreadyHasShare";
  *((void *)v131 + 1) = 24LL;
  v131[16] = 2;
  v11();
  v132 = (void *)(v180 + v6 + 63 * v4);
  v133 = (char *)v132 + *(int *)(v2 + 48);
  void *v132 = 66LL;
  *(void *)v133 = "u13Restricted";
  *((void *)v133 + 1) = 13LL;
  v133[16] = 2;
  v11();
  uint64_t v134 = v180 + v6 + (v4 << 6) + *(int *)(v2 + 48);
  *(void *)(v7 + (v4 << 6)) = 67LL;
  *(void *)uint64_t v134 = "managedAppleIdRestricted";
  *(void *)(v134 + _Block_object_dispose((const void *)(v1 - 152), 8) = 24LL;
  *(_BYTE *)(v134 + 16) = 2;
  v11();
  v135 = (void *)(v180 + v6 + 65 * v4);
  v136 = (char *)v135 + *(int *)(v2 + 48);
  void *v135 = 68LL;
  *(void *)v136 = "shareParticipantContactError";
  *((void *)v136 + 1) = 28LL;
  v136[16] = 2;
  v11();
  v137 = (void *)(v180 + v6 + 66 * v4);
  v138 = (char *)v137 + *(int *)(v2 + 48);
  void *v137 = 69LL;
  *(void *)v138 = "recordArchived";
  *((void *)v138 + 1) = 14LL;
  v138[16] = 2;
  v11();
  v139 = (void *)(v180 + v6 + 67 * v4);
  v140 = (char *)v139 + *(int *)(v2 + 48);
  void *v139 = 70LL;
  *(void *)v140 = "databaseAccessDenied";
  *((void *)v140 + 1) = 20LL;
  v140[16] = 2;
  v11();
  v141 = (void *)(v180 + v6 + 68 * v4);
  v142 = (char *)v141 + *(int *)(v2 + 48);
  void *v141 = 71LL;
  *(void *)v142 = "parentHierarchyDepthLimitExceeded";
  *((void *)v142 + 1) = 33LL;
  v142[16] = 2;
  v11();
  v143 = (void *)(v180 + v6 + 69 * v4);
  v144 = (char *)v143 + *(int *)(v2 + 48);
  void *v143 = 72LL;
  *(void *)v144 = "zonePcsUserIdentityUnknown";
  *((void *)v144 + 1) = 26LL;
  v144[16] = 2;
  v11();
  v145 = (void *)(v180 + v6 + 70 * v4);
  v146 = (char *)v145 + *(int *)(v2 + 48);
  void *v145 = 73LL;
  *(void *)v146 = "managedAppleIdBackupBlocked";
  *((void *)v146 + 1) = 27LL;
  v146[16] = 2;
  v11();
  v147 = (void *)(v180 + v6 + 71 * v4);
  v148 = (char *)v147 + *(int *)(v2 + 48);
  void *v147 = 74LL;
  *(void *)v148 = "assetReuploadNeeded";
  *((void *)v148 + 1) = 19LL;
  v148[16] = 2;
  v11();
  v149 = (void *)(v180 + v6 + 72 * v4);
  v150 = (char *)v149 + *(int *)(v2 + 48);
  void *v149 = 75LL;
  *(void *)v150 = "outOfNetworkUsersUnsupported";
  *((void *)v150 + 1) = 28LL;
  v150[16] = 2;
  v11();
  v151 = (void *)(v180 + v6 + 73 * v4);
  v152 = (char *)v151 + *(int *)(v2 + 48);
  void *v151 = 76LL;
  *(void *)v152 = "gameAssignmentNotFound";
  *((void *)v152 + 1) = 22LL;
  v152[16] = 2;
  v11();
  v153 = (void *)(v180 + v6 + 74 * v4);
  v154 = (char *)v153 + *(int *)(v2 + 48);
  void *v153 = 10011LL;
  *(void *)v154 = "containerQuotaGraced";
  *((void *)v154 + 1) = 20LL;
  v154[16] = 2;
  v11();
  v155 = (void *)(v180 + v6 + 75 * v4);
  v156 = (char *)v155 + *(int *)(v2 + 48);
  void *v155 = 100000LL;
  *(void *)v156 = "sessionContextOperationNotCalled";
  *((void *)v156 + 1) = 32LL;
  v156[16] = 2;
  v11();
  v157 = (void *)(v180 + v6 + 76 * v4);
  v158 = (char *)v157 + *(int *)(v2 + 48);
  void *v157 = 100001LL;
  *(void *)v158 = "invalidPartition";
  *((void *)v158 + 1) = 16LL;
  v158[16] = 2;
  v11();
  v159 = (void *)(v180 + v6 + 77 * v4);
  v160 = (char *)v159 + *(int *)(v2 + 48);
  void *v159 = 100002LL;
  *(void *)v160 = "containerDoesNotExist";
  *((void *)v160 + 1) = 21LL;
  v160[16] = 2;
  v11();
  v161 = (void *)(v180 + v6 + 78 * v4);
  v162 = (char *)v161 + *(int *)(v2 + 48);
  void *v161 = 100003LL;
  *(void *)v162 = "requestedAndCurrentContainerVersionsDiffer";
  *((void *)v162 + 1) = 42LL;
  v162[16] = 2;
  v11();
  v163 = (void *)(v180 + v6 + 79 * v4);
  v164 = (char *)v163 + *(int *)(v2 + 48);
  void *v163 = 100004LL;
  *(void *)v164 = "certificateDoesNotHaveContainerAccess";
  *((void *)v164 + 1) = 37LL;
  v164[16] = 2;
  v11();
  v165 = (void *)(v180 + v6 + 80 * v4);
  v166 = (char *)v165 + *(int *)(v2 + 48);
  void *v165 = 100005LL;
  *(void *)v166 = "earlierRequestIncomplete";
  *((void *)v166 + 1) = 24LL;
  v166[16] = 2;
  v11();
  v167 = (void *)(v180 + v6 + 81 * v4);
  v168 = (char *)v167 + *(int *)(v2 + 48);
  void *v167 = 100006LL;
  *(void *)v168 = "fdbStoreTransactionSizeLimitExceeded";
  *((void *)v168 + 1) = 36LL;
  v168[16] = 2;
  v11();
  v169 = (void *)(v180 + v6 + 82 * v4);
  v170 = (char *)v169 + *(int *)(v2 + 48);
  void *v169 = 100007LL;
  *(void *)v170 = "fdbStoreKeySizeLimitExceeded";
  *((void *)v170 + 1) = 28LL;
  v170[16] = 2;
  v11();
  v171 = (void *)(v180 + v6 + 83 * v4);
  v172 = (char *)v171 + *(int *)(v2 + 48);
  void *v171 = 100008LL;
  *(void *)v172 = "fdbStoreValueSizeLimitExceeded";
  *((void *)v172 + 1) = 30LL;
  v172[16] = 2;
  v11();
  v173 = (void *)(v180 + v6 + 84 * v4);
  v174 = (char *)v173 + *(int *)(v2 + 48);
  void *v173 = 100009LL;
  *(void *)v174 = "authorizeGetFailed";
  *((void *)v174 + 1) = 18LL;
  v174[16] = 2;
  v11();
  v175 = (void *)(v180 + v6 + 85 * v4);
  v176 = (char *)v175 + *(int *)(v2 + 48);
  void *v175 = 100010LL;
  *(void *)v176 = "queueInvalidLeaseUuid";
  *((void *)v176 + 1) = 21LL;
  v176[16] = 2;
  v11();
  v177 = (void *)(v180 + v6 + 86 * v4);
  v178 = (char *)v177 + *(int *)(v2 + 48);
  void *v177 = 100012LL;
  *(void *)v178 = "userThrottled";
  *((void *)v178 + 1) = 13LL;
  v178[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v180);
}

uint64_t Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002916D8,  (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap,  (uint64_t)sub_1000BA1E8);
}

uint64_t static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002916D8,  (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap,  (uint64_t)sub_1000BA1E8,  a1);
}

uint64_t sub_1000BB4F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002916D8,  (uint64_t)static Rpcproto_ErrorInfo.Client.Code._protobuf_nameMap,  (uint64_t)sub_1000BA1E8,  a1);
}

void sub_1000BB510(int a1)
{
  v1._countAndFlagsBits = 0x7265767265532ELL;
  v1._object = (void *)0xE700000000000000LL;
  sub_1000BBF40( a1,  v1,  static Rpcproto_ErrorInfo.Server.protoMessageName,  &static Rpcproto_ErrorInfo.Server.protoMessageName[1]);
}

void *Rpcproto_ErrorInfo.Server.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002916E0 != -1) {
    swift_once(&qword_1002916E0, sub_1000BB510);
  }
  return static Rpcproto_ErrorInfo.Server.protoMessageName;
}

uint64_t static Rpcproto_ErrorInfo.Server.protoMessageName.getter()
{
  return sub_1000BB594( &qword_1002916E0,  static Rpcproto_ErrorInfo.Server.protoMessageName,  &static Rpcproto_ErrorInfo.Server.protoMessageName[1],  (uint64_t)sub_1000BB510);
}

uint64_t sub_1000BB594(void *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v6 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v6;
}

uint64_t sub_1000BB5E4(uint64_t a1)
{
  return sub_1000BB5F0(a1, static Rpcproto_ErrorInfo.Server._protobuf_nameMap);
}

uint64_t sub_1000BB5F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v3, a2);
  sub_1000BCFB4(v3, (uint64_t)a2);
  uint64_t v4 = sub_1000BED3C(&qword_100291D80);
  uint64_t v5 = sub_1000BED3C(&qword_100291D88);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v4, v9 + v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100212550;
  uint64_t v11 = v10 + v9 + *(int *)(v5 + 48);
  *(void *)(v10 + v9) = 1LL;
  *(void *)uint64_t v11 = "type";
  *(void *)(v11 + _Block_object_dispose((const void *)(v1 - 152), 8) = 4LL;
  *(_BYTE *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104LL))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)(v10);
}

uint64_t Rpcproto_ErrorInfo.Server._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002916E8,  (uint64_t)static Rpcproto_ErrorInfo.Server._protobuf_nameMap,  (uint64_t)sub_1000BB5E4);
}

uint64_t static Rpcproto_ErrorInfo.Server._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002916E8,  (uint64_t)static Rpcproto_ErrorInfo.Server._protobuf_nameMap,  (uint64_t)sub_1000BB5E4,  a1);
}

uint64_t Rpcproto_ErrorInfo.Server.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB74C( a1,  a2,  a3,  (uint64_t (*)(void))sub_1000BCFCC,  (uint64_t)&type metadata for Rpcproto_ErrorInfo.Server.Code);
}

uint64_t sub_1000BB74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v11 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v11, i);
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v15 = a4();
      dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v5, a5, v15, a2, a3);
    }

    uint64_t v6 = 0LL;
    uint64_t v11 = a2;
  }

  return result;
}

uint64_t Rpcproto_ErrorInfo.Server.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3
    || (char v8 = *((_BYTE *)v3 + 8),
        uint64_t v11 = *v3,
        char v12 = v8,
        unint64_t v9 = sub_1000BCFCC(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v11,  1LL,  &type metadata for Rpcproto_ErrorInfo.Server.Code,  v9,  a2,  a3),  !v4))
  {
    type metadata accessor for Rpcproto_ErrorInfo.Server(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int Rpcproto_ErrorInfo.Server.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Rpcproto_ErrorInfo.Server,  &qword_1002919E0,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000BB8C8(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_1002916E0,  static Rpcproto_ErrorInfo.Server.protoMessageName,  &static Rpcproto_ErrorInfo.Server.protoMessageName[1],  (uint64_t)sub_1000BB510);
}

uint64_t sub_1000BB8E8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  uint64_t v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t sub_1000BB93C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000BB97C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1000BB9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.Server.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000BB9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.Server.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000BB9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291D60,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000BBA34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002916E8,  (uint64_t)static Rpcproto_ErrorInfo.Server._protobuf_nameMap,  (uint64_t)sub_1000BB5E4,  a1);
}

uint64_t sub_1000BBA50(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291A78,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BBA90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291A78,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000BBAE0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v37 = swift_allocObject(v1, v6 + 14 * v4, v5 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_100212560;
  uint64_t v7 = v37 + v6;
  uint64_t v8 = v37 + v6 + *(int *)(v2 + 48);
  *(void *)(v37 + v6) = 0LL;
  *(void *)uint64_t v8 = "noerror";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v37 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "unknown";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v37 + v6 + 2 * v4);
  char v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)char v14 = "overloaded";
  *((void *)v14 + 1) = 10LL;
  _BYTE v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v37 + v6 + 3 * v4);
  unint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 3LL;
  *(void *)unint64_t v16 = "notFound";
  *((void *)v16 + 1) = 8LL;
  v16[16] = 2;
  v11();
  unint64_t v17 = (void *)(v37 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *unint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "containerUnavailable";
  *((void *)v18 + 1) = 20LL;
  v18[16] = 2;
  v11();
  unint64_t v19 = (void *)(v37 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "mescalSignatureParseError";
  *((void *)v20 + 1) = 25LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v37 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "zoneBusy";
  *((void *)v22 + 1) = 8LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v37 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "zoneUnavailable";
  *((void *)v24 + 1) = 15LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v37 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "transactionTimeout";
  *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 152), 8) = 18LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  char v26 = (void *)(v37 + v6 + 9 * v4);
  unint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *char v26 = 200001LL;
  *(void *)unint64_t v27 = "partitionLookupFailed";
  *((void *)v27 + 1) = 21LL;
  v27[16] = 2;
  v11();
  __int16 v28 = (void *)(v37 + v6 + 10 * v4);
  __int16 v29 = (char *)v28 + *(int *)(v2 + 48);
  *__int16 v28 = 200002LL;
  *(void *)__int16 v29 = "timeoutOnInternalBackends";
  *((void *)v29 + 1) = 25LL;
  v29[16] = 2;
  v11();
  __int16 v30 = (void *)(v37 + v6 + 11 * v4);
  __int128 v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 200003LL;
  *(void *)__int128 v31 = "solrError";
  *((void *)v31 + 1) = 9LL;
  v31[16] = 2;
  v11();
  id v32 = (void *)(v37 + v6 + 12 * v4);
  id v33 = (char *)v32 + *(int *)(v2 + 48);
  *id v32 = 200004LL;
  *(void *)id v33 = "userAssignmentLocked";
  *((void *)v33 + 1) = 20LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v37 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 200005LL;
  *(void *)uint64_t v35 = "quotaServiceUnavaible";
  *((void *)v35 + 1) = 21LL;
  v35[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v37);
}

uint64_t Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002916F0,  (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap,  (uint64_t)sub_1000BBAE0);
}

uint64_t static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002916F0,  (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap,  (uint64_t)sub_1000BBAE0,  a1);
}

uint64_t sub_1000BBEF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002916F0,  (uint64_t)static Rpcproto_ErrorInfo.Server.Code._protobuf_nameMap,  (uint64_t)sub_1000BBAE0,  a1);
}

void sub_1000BBF10(int a1)
{
  v1._countAndFlagsBits = 0x676E6967676F4C2ELL;
  v1._object = (void *)0xEE006C6961746544LL;
  sub_1000BBF40( a1,  v1,  static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName,  &static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName[1]);
}

void sub_1000BBF40(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000012LL;
  *a4 = 0x80000001001D0AF0LL;
}

void *Rpcproto_ErrorInfo.LoggingDetail.protoMessageName.unsafeMutableAddressor()
{
  if (qword_1002916F8 != -1) {
    swift_once(&qword_1002916F8, sub_1000BBF10);
  }
  return static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName;
}

uint64_t static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName.getter()
{
  return sub_1000BB594( &qword_1002916F8,  static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName,  &static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName[1],  (uint64_t)sub_1000BBF10);
}

uint64_t sub_1000BC008()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212570;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "key";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 3LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "value";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291700,  (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap,  (uint64_t)sub_1000BC008);
}

uint64_t static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291700,  (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap,  (uint64_t)sub_1000BC008,  a1);
}

uint64_t Rpcproto_ErrorInfo.LoggingDetail.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v9 = v3;
        goto LABEL_5;
      }

uint64_t Rpcproto_ErrorInfo.LoggingDetail.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    unint64_t v11 = v3[3];
    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000LL) == 0) {
      uint64_t v12 = v3[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v12 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int Rpcproto_ErrorInfo.LoggingDetail.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  &qword_1002919E8,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
}

Swift::Int sub_1000BC318(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1(0LL);
  uint64_t v7 = sub_1000BD35C(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_1000BC394@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  a1[3] = 0xE000000000000000LL;
  return UnknownStorage.init()();
}

uint64_t sub_1000BC3BC(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_1002916F8,  static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName,  &static Rpcproto_ErrorInfo.LoggingDetail.protoMessageName[1],  (uint64_t)sub_1000BBF10);
}

uint64_t sub_1000BC3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000BC41C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000BC45C())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000BC470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.LoggingDetail.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000BC484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Rpcproto_ErrorInfo.LoggingDetail.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000BC498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291D58,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000BC4E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291700,  (uint64_t)static Rpcproto_ErrorInfo.LoggingDetail._protobuf_nameMap,  (uint64_t)sub_1000BC008,  a1);
}

uint64_t sub_1000BC504(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_1002919B8,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000BC544(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t sub_1000BC598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002919B8,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000BC5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

uint64_t variable initialization expression of Utility_DeleteZoneResponse._error@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for Utility_ErrorInfo.ResultError, a1);
}

uint64_t variable initialization expression of Utility_ErrorInfo.ResultError._databaseFailure@<X0>( uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for Utility_ErrorInfo.DatabaseFailure, a1);
}

uint64_t variable initialization expression of CMTime.value()
{
  return 0LL;
}

uint64_t variable initialization expression of RequestItem._storage()
{
  if (qword_100291830 != -1) {
    swift_once(&qword_100291830, sub_1000DF930);
  }
  return swift_retain(qword_100292868);
}

uint64_t variable initialization expression of ResponseItem._assetRecord@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC6E0((uint64_t (*)(void))&type metadata accessor for Ckcode_RecordTransport, a1);
}

uint64_t variable initialization expression of CMTimeRange._duration@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for CMTime, a1);
}

uint64_t variable initialization expression of Goldilocks_ExitMoveBatchErrorFeedbackRequest._exitZoneID@<X0>( uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for Goldilocks_ZoneID, a1);
}

uint64_t variable initialization expression of Goldilocks_ExitMoveBatchErrorFeedbackResponse._serviceError@<X0>( uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for Goldilocks_ErrorInfo.ResultError, a1);
}

uint64_t variable initialization expression of Goldilocks_SilentMoverRampingResponse._operationControl@<X0>( uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for Goldilocks_OperationControl, a1);
}

uint64_t variable initialization expression of Goldilocks_ErrorInfo.ResultError._databaseFailure@<X0>( uint64_t a1@<X8>)
{
  return sub_1000BC6E0(type metadata accessor for Goldilocks_ErrorInfo.DatabaseFailure, a1);
}

uint64_t sub_1000BC6E0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

id variable initialization expression of CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItem.errorCode()
{
  return [objc_allocWithZone(NSNumber) init];
}

Swift::Int sub_1000BC744()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000BC788()
{
}

Swift::Int sub_1000BC7B0(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000BC7F0(uint64_t a1, uint64_t a2)
{
  return sub_1000BC938(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000BC7FC(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_1000BC870(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000BC8EC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_1000BC92C(uint64_t a1, uint64_t a2)
{
  return sub_1000BC938(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000BC938(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000BC974(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000BC9B4(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

BOOL sub_1000BCA24(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_1000BCA38@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  return result;
}

void sub_1000BCA48(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000BCA54(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BCADC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BCB20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000BCB48(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291DD8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1002130B4);
  uint64_t v3 = sub_1000BD35C( (unint64_t *)&unk_100291DE0,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100213054);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000BCBCC(uint64_t result)
{
  switch(result)
  {
    case 0LL:
    case 1LL:
    case 2LL:
    case 3LL:
    case 4LL:
    case 5LL:
    case 6LL:
    case 7LL:
    case 8LL:
    case 9LL:
    case 10LL:
    case 11LL:
    case 12LL:
    case 13LL:
    case 14LL:
    case 15LL:
    case 16LL:
    case 17LL:
    case 18LL:
    case 19LL:
    case 20LL:
    case 21LL:
    case 22LL:
    case 23LL:
    case 24LL:
    case 25LL:
    case 26LL:
    case 27LL:
    case 28LL:
    case 29LL:
    case 30LL:
    case 31LL:
    case 32LL:
    case 33LL:
    case 34LL:
    case 35LL:
    case 36LL:
    case 37LL:
    case 38LL:
    case 39LL:
    case 40LL:
    case 41LL:
    case 42LL:
    case 43LL:
    case 44LL:
    case 45LL:
    case 63LL:
      return result;
    case 46LL:
      uint64_t result = 44LL;
      break;
    case 47LL:
      uint64_t result = 45LL;
      break;
    case 48LL:
      uint64_t result = 46LL;
      break;
    case 49LL:
      uint64_t result = 47LL;
      break;
    case 50LL:
      uint64_t result = 48LL;
      break;
    case 51LL:
      uint64_t result = 49LL;
      break;
    case 52LL:
      uint64_t result = 50LL;
      break;
    case 53LL:
      uint64_t result = 51LL;
      break;
    case 54LL:
      uint64_t result = 52LL;
      break;
    case 55LL:
      uint64_t result = 53LL;
      break;
    case 56LL:
      uint64_t result = 54LL;
      break;
    case 57LL:
      uint64_t result = 55LL;
      break;
    case 58LL:
      uint64_t result = 56LL;
      break;
    case 59LL:
      uint64_t result = 57LL;
      break;
    case 60LL:
      uint64_t result = 58LL;
      break;
    case 61LL:
      uint64_t result = 59LL;
      break;
    case 62LL:
      uint64_t result = 60LL;
      break;
    case 64LL:
      uint64_t result = 61LL;
      break;
    case 65LL:
      uint64_t result = 62LL;
      break;
    case 66LL:
      uint64_t result = 63LL;
      break;
    case 67LL:
      uint64_t result = 64LL;
      break;
    case 68LL:
      uint64_t result = 65LL;
      break;
    case 69LL:
      uint64_t result = 66LL;
      break;
    case 70LL:
      uint64_t result = 67LL;
      break;
    case 71LL:
      uint64_t result = 68LL;
      break;
    case 72LL:
      uint64_t result = 69LL;
      break;
    case 73LL:
      uint64_t result = 70LL;
      break;
    case 74LL:
      uint64_t result = 71LL;
      break;
    case 75LL:
      uint64_t result = 72LL;
      break;
    case 76LL:
      uint64_t result = 73LL;
      break;
    default:
      switch(result)
      {
        case 100000LL:
          uint64_t result = 74LL;
          break;
        case 100001LL:
          uint64_t result = 75LL;
          break;
        case 100002LL:
          uint64_t result = 76LL;
          break;
        case 100003LL:
          uint64_t result = 77LL;
          break;
        case 100004LL:
          uint64_t result = 78LL;
          break;
        case 100005LL:
          uint64_t result = 79LL;
          break;
        case 100006LL:
          uint64_t result = 80LL;
          break;
        case 100007LL:
          uint64_t result = 81LL;
          break;
        case 100008LL:
          uint64_t result = 82LL;
          break;
        case 100009LL:
          uint64_t result = 83LL;
          break;
        case 100010LL:
          uint64_t result = 84LL;
          break;
        case 100011LL:
          return result;
        case 100012LL:
          uint64_t result = 86LL;
          break;
        default:
          if (result == 10011) {
            uint64_t result = 85LL;
          }
          break;
      }

      break;
  }

  return result;
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo.Server(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100291C28, (uint64_t)&nominal type descriptor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000BCE88(uint64_t result)
{
  switch(result)
  {
    case 0LL:
    case 1LL:
    case 2LL:
    case 3LL:
    case 4LL:
    case 5LL:
      return result;
    case 6LL:
      uint64_t result = 5LL;
      break;
    case 7LL:
      uint64_t result = 6LL;
      break;
    case 8LL:
      uint64_t result = 7LL;
      break;
    case 9LL:
      uint64_t result = 8LL;
      break;
    default:
      switch(result)
      {
        case 200001LL:
          uint64_t result = 9LL;
          break;
        case 200002LL:
          uint64_t result = 10LL;
          break;
        case 200003LL:
          uint64_t result = 11LL;
          break;
        case 200004LL:
          uint64_t result = 12LL;
          break;
        case 200005LL:
          uint64_t result = 13LL;
          break;
        default:
          return result;
      }

      break;
  }

  return result;
}

uint64_t type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100291CB8, (uint64_t)&nominal type descriptor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000BCF80(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_1000BCFB4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_1000BCFCC()
{
  unint64_t result = qword_1002919C0;
  if (!qword_1002919C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Server.Code,  &type metadata for Rpcproto_ErrorInfo.Server.Code);
    atomic_store(result, (unint64_t *)&qword_1002919C0);
  }

  return result;
}

unint64_t sub_1000BD010()
{
  unint64_t result = qword_1002919C8;
  if (!qword_1002919C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Client.Code,  &type metadata for Rpcproto_ErrorInfo.Client.Code);
    atomic_store(result, (unint64_t *)&qword_1002919C8);
  }

  return result;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v35 - v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v13 = *(void *)a1 == *(void *)a2 && v11 == v12;
  if (v13
    || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      uint64_t v20 = *(void *)(a2 + 32);
      char v21 = *(_BYTE *)(a2 + 40);
      uint64_t v22 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(a1 + 32), *(_BYTE *)(a1 + 40));
      if (v22 != Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v20, v21)) {
        goto LABEL_23;
      }
      uint64_t v23 = *(void *)(a1 + 48);
      if (*(_BYTE *)(a1 + 56) == 1) {
        uint64_t v23 = qword_1002134C8[v23];
      }
      uint64_t v24 = *(void *)(a2 + 48);
      if (*(_BYTE *)(a2 + 56)) {
        __asm { BR              X11 }
      }

      if (v23 != v24) {
        goto LABEL_23;
      }
      uint64_t v25 = *(void *)(a1 + 64);
      uint64_t v26 = *(void *)(a1 + 72);
      uint64_t v27 = *(void *)(a2 + 64);
      uint64_t v28 = *(void *)(a2 + 72);
      if (v25 == v27 && v26 == v28
        || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL) & 1) != 0))
      {
        if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
          && (sub_1000FFF5C(*(void *)(a1 + 88), *(void *)(a2 + 88)) & 1) != 0)
        {
          uint64_t v29 = type metadata accessor for Rpcproto_ErrorInfo(0LL);
          uint64_t v30 = a1 + *(int *)(v29 + 44);
          __int128 v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
          v31(v10, v30, v4);
          v31(v8, a2 + *(int *)(v29 + 44), v4);
          uint64_t v32 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v32);
          id v33 = *(void (**)(char *, uint64_t))(v5 + 8);
          v33(v8, v4);
          v33(v10, v4);
          return v14 & 1;
        }

uint64_t sub_1000BD35C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ServerV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v20 - v9;
  uint64_t v11 = *a1;
  if (*((_BYTE *)a1 + 8) == 1) {
    uint64_t v11 = qword_1002134C8[v11];
  }
  uint64_t v12 = *a2;
  if (*((_BYTE *)a2 + 8)) {
    __asm { BR              X11 }
  }

  if (v11 == v12)
  {
    uint64_t v14 = type metadata accessor for Rpcproto_ErrorInfo.Server(0LL);
    uint64_t v15 = (uint64_t)a1 + *(int *)(v14 + 20);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (uint64_t)a2 + *(int *)(v14 + 20), v4);
    uint64_t v17 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v17);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v13 = 0;
  }

  return v13 & 1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)a2;
  char v12 = *(_BYTE *)(a2 + 8);
  uint64_t v13 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)a1, *(_BYTE *)(a1 + 8));
  if (v13 == Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v11, v12))
  {
    uint64_t v14 = type metadata accessor for Rpcproto_ErrorInfo.Client(0LL);
    uint64_t v15 = a1 + *(int *)(v14 + 20);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, a2 + *(int *)(v14 + 20), v4);
    uint64_t v17 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v17);
    BOOL v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV13LoggingDetailV2eeoiySbAE_AEtFZ_0( void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v26 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((void *)a2 + 1);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = a1[2];
    uint64_t v16 = a1[3];
    uint64_t v17 = *((void *)a2 + 2);
    uint64_t v18 = *((void *)a2 + 3);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      uint64_t v20 = type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail(0LL);
      uint64_t v21 = (char *)a1 + *(int *)(v20 + 24);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v22(v10, v21, v4);
      v22(v8, &a2[*(int *)(v20 + 24)], v4);
      uint64_t v23 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v23);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v8, v4);
      v24(v10, v4);
    }
  }

  return v14 & 1;
}

unint64_t sub_1000BD8A0()
{
  unint64_t result = qword_1002919F0;
  if (!qword_1002919F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Client.Code,  &type metadata for Rpcproto_ErrorInfo.Client.Code);
    atomic_store(result, (unint64_t *)&qword_1002919F0);
  }

  return result;
}

unint64_t sub_1000BD8E8()
{
  unint64_t result = qword_1002919F8;
  if (!qword_1002919F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Client.Code,  &type metadata for Rpcproto_ErrorInfo.Client.Code);
    atomic_store(result, (unint64_t *)&qword_1002919F8);
  }

  return result;
}

unint64_t sub_1000BD930()
{
  unint64_t result = qword_100291A00;
  if (!qword_100291A00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Client.Code,  &type metadata for Rpcproto_ErrorInfo.Client.Code);
    atomic_store(result, (unint64_t *)&qword_100291A00);
  }

  return result;
}

unint64_t sub_1000BD978()
{
  unint64_t result = qword_100291A08;
  if (!qword_100291A08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Server.Code,  &type metadata for Rpcproto_ErrorInfo.Server.Code);
    atomic_store(result, (unint64_t *)&qword_100291A08);
  }

  return result;
}

unint64_t sub_1000BD9C0()
{
  unint64_t result = qword_100291A10;
  if (!qword_100291A10)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Server.Code,  &type metadata for Rpcproto_ErrorInfo.Server.Code);
    atomic_store(result, (unint64_t *)&qword_100291A10);
  }

  return result;
}

unint64_t sub_1000BDA08()
{
  unint64_t result = qword_100291A18;
  if (!qword_100291A18)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Rpcproto_ErrorInfo.Server.Code,  &type metadata for Rpcproto_ErrorInfo.Server.Code);
    atomic_store(result, (unint64_t *)&qword_100291A18);
  }

  return result;
}

uint64_t sub_1000BDA4C()
{
  return sub_1000BDAD8(&qword_100291A20, &qword_100291A28);
}

uint64_t sub_1000BDA70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000BDAB4()
{
  return sub_1000BDAD8(&qword_100291A30, &qword_100291A38);
}

uint64_t sub_1000BDAD8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000BDA70(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000BDB18()
{
  return sub_1000BD35C( &qword_100291A40,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000BDB44()
{
  return sub_1000BD35C( &qword_100291A48,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000BDB70()
{
  return sub_1000BD35C( &qword_1002919D0,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000BDB9C()
{
  return sub_1000BD35C( &qword_100291A50,  type metadata accessor for Rpcproto_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo);
}

uint64_t sub_1000BDBC8()
{
  return sub_1000BD35C( &qword_100291A58,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000BDBF4()
{
  return sub_1000BD35C( &qword_100291A60,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000BDC20()
{
  return sub_1000BD35C( &qword_1002919D8,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000BDC4C()
{
  return sub_1000BD35C( &qword_100291A68,  type metadata accessor for Rpcproto_ErrorInfo.Client,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Client);
}

uint64_t sub_1000BDC78()
{
  return sub_1000BD35C( &qword_100291A70,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000BDCA4()
{
  return sub_1000BD35C( &qword_100291A78,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000BDCD0()
{
  return sub_1000BD35C( &qword_1002919E0,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000BDCFC()
{
  return sub_1000BD35C( &qword_100291A80,  type metadata accessor for Rpcproto_ErrorInfo.Server,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.Server);
}

uint64_t sub_1000BDD28()
{
  return sub_1000BD35C( &qword_100291A88,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000BDD54()
{
  return sub_1000BD35C( &qword_1002919B8,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000BDD80()
{
  return sub_1000BD35C( &qword_1002919E8,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
}

uint64_t sub_1000BDDAC()
{
  return sub_1000BD35C( &qword_100291A90,  type metadata accessor for Rpcproto_ErrorInfo.LoggingDetail,  (uint64_t)&protocol conformance descriptor for Rpcproto_ErrorInfo.LoggingDetail);
}

void *initializeBufferWithCopyOfBuffer for Rpcproto_ErrorInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v14 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    uint64_t v7 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v7;
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    uint64_t v8 = a2[11];
    uint64_t v9 = *(int *)(a3 + 44);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    BOOL v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
  }

  return v3;
}

uint64_t destroy for Rpcproto_ErrorInfo(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  uint64_t v11 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v11;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 88);
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE274);
}

uint64_t sub_1000BE274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 44),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE2FC);
}

uint64_t sub_1000BE2FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 44),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000BE370(uint64_t a1)
{
  v4[0] = &unk_100212E88;
  v4[1] = &unk_100212E88;
  v4[2] = &unk_100212EA0;
  void v4[3] = &unk_100212EA0;
  void v4[4] = &unk_100212E88;
  void v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
  void v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.Client(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE434);
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.Client( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE444);
}

uint64_t initializeBufferWithCopyOfBuffer for Rpcproto_ErrorInfo.Client.Code(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.Client.Code(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.Client.Code(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000BE4B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000BE4D0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for Rpcproto_ErrorInfo.Client.Code()
{
  return &type metadata for Rpcproto_ErrorInfo.Client.Code;
}

void *_s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    char v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_BYTE *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwca_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24LL))(v6, v7, v8);
  return a1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t _s22CloudKitImplementation18Rpcproto_ErrorInfoV6ClientVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.Server(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE764);
}

uint64_t sub_1000BE768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.Server( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE7B4);
}

uint64_t sub_1000BE7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000BE7FC(uint64_t a1)
{
  v4[0] = &unk_100212EA0;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for Rpcproto_ErrorInfo.Server.Code()
{
  return &type metadata for Rpcproto_ErrorInfo.Server.Code;
}

uint64_t *initializeBufferWithCopyOfBuffer for Rpcproto_ErrorInfo.LoggingDetail( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t destroy for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *initializeWithCopy for Rpcproto_ErrorInfo.LoggingDetail(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for Rpcproto_ErrorInfo.LoggingDetail(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for Rpcproto_ErrorInfo.LoggingDetail(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *assignWithTake for Rpcproto_ErrorInfo.LoggingDetail(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Rpcproto_ErrorInfo.LoggingDetail(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BEB8C);
}

uint64_t sub_1000BEB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Rpcproto_ErrorInfo.LoggingDetail( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BEC14);
}

uint64_t sub_1000BEC14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000BEC88(uint64_t a1)
{
  v4[0] = &unk_100212E88;
  v4[1] = &unk_100212E88;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000BECFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_1000BED3C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CPLResourceType(uint64_t a1)
{
}

void type metadata accessor for CPLCKResourceDownloadType(uint64_t a1)
{
}

void type metadata accessor for CPLCKSharedLibraryExitStage(uint64_t a1)
{
}

void type metadata accessor for CPLCKSharedLibraryExitStatus(uint64_t a1)
{
}

void sub_1000BEDE0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_1000BEE24()
{
  return sub_1000BD35C( &qword_100291DB8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100213018);
}

uint64_t sub_1000BEE50()
{
  return sub_1000BD35C( &qword_100291DC0,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100212FEC);
}

uint64_t sub_1000BEE7C()
{
  return sub_1000BD35C( &qword_100291DC8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100213088);
}

uint64_t sub_1000BEEA8()
{
  return sub_1000BD35C( &qword_100291DD0,  (uint64_t (*)(uint64_t))type metadata accessor for CPLResourceType,  (uint64_t)&unk_100212F80);
}

Swift::Int sub_1000BEF0C()
{
  Swift::Int result = sub_1000BEF28();
  qword_100291E50 = result;
  return result;
}

Swift::Int sub_1000BEF28()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (!v2) {
    return sub_1000CBE20((uint64_t)&off_100243320);
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  uint64_t v21 = v3;
  uint64_t v22 = v5;
  uint64_t v19 = 44LL;
  unint64_t v20 = 0xE100000000000000LL;
  unint64_t v6 = sub_1000CDFC0();
  uint64_t v7 = StringProtocol.components<A>(separatedBy:)(&v19, &type metadata for String, &type metadata for String, v6, v6);
  swift_bridgeObjectRelease(v5);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___CPLResource);
    swift_bridgeObjectRetain(v7);
    uint64_t v10 = (void *)(v7 + 40);
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      uint64_t v12 = *v10;
      swift_bridgeObjectRetain(*v10);
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      id v14 = objc_msgSend(v9, "resourceTypeFromShortDescription:", v13, v19, v20, v21, v22);

      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
          uint64_t v11 = sub_1000CB40C(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
        }
        unint64_t v16 = *((void *)v11 + 2);
        unint64_t v15 = *((void *)v11 + 3);
        if (v16 >= v15 >> 1) {
          uint64_t v11 = sub_1000CB40C((char *)(v15 > 1), v16 + 1, 1, v11);
        }
        *((void *)v11 + 2) = v16 + 1;
        *(void *)&v11[8 * v16 + 32] = v14;
      }

      v10 += 2;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v7);
  uint64_t v18 = sub_1000CBD90((uint64_t)v11);
  swift_bridgeObjectRelease(v11);
  return v18;
}

BOOL sub_1000BF170(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v13, *(void *)(a2 + 40));
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000BF25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

id sub_1000BF390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v6;
  uint64_t v8 = sub_1000BED3C(&qword_100291F40);
  uint64_t inited = swift_initStackObject(v8, &v17);
  *(_OWORD *)(inited + 16) = xmmword_100212550;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  unint64_t v11 = sub_100113E94(inited);
  id v12 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  id v15 = [v12 initWithDomain:v13 code:a3 userInfo:isa];

  return v15;
}

id sub_1000BF4C8(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!String.count.getter(v5, v4))
  {
    uint64_t v6 = *(void *)(a1 + 96);
    if (*(_BYTE *)(a1 + 104) != 1) {
      goto LABEL_7;
    }
LABEL_6:
    __asm { BR              X9 }
  }

  uint64_t v6 = *(void *)(a1 + 96);
  char v7 = *(_BYTE *)(a1 + 104);
  swift_bridgeObjectRetain(v4);
  if ((v7 & 1) != 0) {
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_7:
    uint64_t v23 = 0LL;
    uint64_t v24 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(51LL);
    v12._object = (void *)0x80000001001D1930LL;
    v12._countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    v15._countAndFlagsBits = 0xD00000000000001CLL;
    v15._object = (void *)0x80000001001D1950LL;
    String.append(_:)(v15);
    id v16 = [a2 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    BOOL v19 = v18;

    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    unint64_t v11 = v19;
    goto LABEL_8;
  }

  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v23 = v5;
  uint64_t v24 = v4;
  v8._countAndFlagsBits = 0xD000000000000015LL;
  v8._object = (void *)0x80000001001D1970LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v10 = v9._object;
  String.append(_:)(v9);
  unint64_t v11 = v10;
LABEL_8:
  swift_bridgeObjectRelease(v11);
  id v21 = sub_1000BF390(v23, v24, 150LL);
  swift_bridgeObjectRelease(v24);
  return v21;
}

uint64_t sub_1000C0138(uint64_t a1, __n128 a2)
{
  if (a1 < 1)
  {
    id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 doubleForKey:v3];
    double v5 = v4;

    a2.n128_u64[0] = 0x40AC200000000000LL;
    if (v5 >= 1.0) {
      a2.n128_f64[0] = v5;
    }
  }

  else
  {
    a2.n128_f64[0] = (double)a1 / 1000.0;
  }

  return Date.init(timeIntervalSinceNow:)(a2);
}

id sub_1000C0204(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    __asm { BR              X9 }
  }

  swift_bridgeObjectRetain(a4);
  if ((a2 & 1) != 0) {
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_8:
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v17 = 0xD000000000000013LL;
    uint64_t v18 = 0x80000001001D1930LL;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    v14._countAndFlagsBits = 0xD000000000000017LL;
    v14._object = (void *)0x80000001001D1A30LL;
    String.append(_:)(v14);
    goto LABEL_9;
  }

  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  v9._countAndFlagsBits = 0xD000000000000015LL;
  v9._object = (void *)0x80000001001D1970LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  unint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
LABEL_9:
  id v15 = sub_1000BF390(v17, v18, 150LL);
  swift_bridgeObjectRelease(v18);
  return v15;
}

uint64_t sub_1000C0804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CMTime(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v23 - v10;
  __chkstk_darwin(v9);
  Swift::String v13 = (char *)&v23 - v12;
  uint64_t v14 = ((uint64_t (*)(void))UnknownStorage.init())();
  int v15 = *(_DWORD *)(a1 + 8);
  *(void *)Swift::String v13 = *(void *)a1;
  *((_DWORD *)v13 + 2) = v15;
  uint64_t v16 = UnknownStorage.init()(v14);
  int v17 = *(_DWORD *)(a1 + 32);
  *(void *)unint64_t v11 = *(void *)(a1 + 24);
  *((_DWORD *)v11 + 2) = v17;
  UnknownStorage.init()(v16);
  uint64_t v18 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v19 = a2 + *(int *)(v18 + 20);
  Swift::String v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v20(v19, 1LL, 1LL, v4);
  uint64_t v21 = a2 + *(int *)(v18 + 24);
  v20(v21, 1LL, 1LL, v4);
  sub_1000CEC58((uint64_t)v13, (uint64_t)v8, type metadata accessor for CMTime);
  sub_1000CEDAC(v19, &qword_100291FB0);
  sub_1000CEC9C((uint64_t)v8, v19, type metadata accessor for CMTime);
  v20(v19, 0LL, 1LL, v4);
  sub_1000CEC58((uint64_t)v11, (uint64_t)v8, type metadata accessor for CMTime);
  sub_1000CEDAC(v21, &qword_100291FB0);
  sub_1000CEC9C((uint64_t)v8, v21, type metadata accessor for CMTime);
  v20(v21, 0LL, 1LL, v4);
  sub_1000CECE0((uint64_t)v11, type metadata accessor for CMTime);
  return sub_1000CECE0((uint64_t)v13, type metadata accessor for CMTime);
}

uint64_t sub_1000C09E8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    swift_bridgeObjectRetain(a2);
  }

  else
  {
    uint64_t v12 = UUID.init()(v8);
    a1 = UUID.uuidString.getter(v12);
    a2 = v13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  uint64_t v14 = *a3;
  if ((sub_1000BF25C(a1, a2, *a3) & 1) != 0)
  {
    uint64_t v15 = 2LL;
    while (1)
    {
      uint64_t v24 = a1;
      unint64_t v25 = a2;
      swift_bridgeObjectRetain(a2);
      v16._countAndFlagsBits = 95LL;
      v16._object = (void *)0xE100000000000000LL;
      String.append(_:)(v16);
      v23[1] = v15;
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      uint64_t v20 = v24;
      uint64_t v19 = v25;
      if ((sub_1000BF25C(v24, v25, v14) & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease(v19);
      if (__OFADD__(v15++, 1LL))
      {
        __break(1u);
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRetain(v19);
    sub_1000CA190(&v24, v20, v19);
    swift_bridgeObjectRelease(v25);
    return v20;
  }

  else
  {
LABEL_12:
    swift_bridgeObjectRetain(a2);
    sub_1000CA190(&v24, a1, a2);
    swift_bridgeObjectRelease(v25);
  }

  return a1;
}

uint64_t sub_1000C0BB4(uint64_t a1)
{
  uint64_t v2 = sub_1000BED3C(&qword_100291F80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1000BED3C(&qword_100291F88);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000BED3C(&qword_100291F90);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CEC58(a1, (uint64_t)v12, type metadata accessor for ResourceDownloadRequest);
  uint64_t v13 = type metadata accessor for ResourceDownloadRequest(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 0LL, 1LL, v13);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v6);
  id v14 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100291F98));
  uint64_t v15 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D17A0LL,  0xD000000000000010LL,  0x80000001001D1B20LL,  v12,  v9);
  dispatch thunk of CodeOperation.shouldSendRecordPCSKeys.setter(1LL);
  strcpy(v5, "cmp.icloud.com");
  v5[15] = -18;
  *((void *)v5 + 2) = 0x2E342E332E322E31LL;
  *((void *)v5 + 3) = 0xEB00000000362E35LL;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for CodeOperation.DataProtectionType.trustedTarget<A, B>(_:),  v2);
  dispatch thunk of CodeOperation.dataProtectionType.setter(v5);
  return v15;
}

id sub_1000C0DC4()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v1 = [v0 dataForKey:CPLDropDerivativesTestRulesKey];

  if (v1)
  {
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    unint64_t v4 = v3;

    uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___CPLDropDerivativesRecipe);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v7 = [v5 unarchiveArrayOfCPLDropDerivativeRecipesFrom:isa];

    uint64_t v8 = sub_1000CE284(0LL, &qword_100291FC8, &OBJC_CLASS___CPLDropDerivativesRecipe_ptr);
    id v1 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    sub_1000CE2BC(v2, v4);
  }

  return v1;
}

void sub_1000C0ED0(uint64_t a1)
{
}

void sub_1000C0EF4(uint64_t a1)
{
}

void sub_1000C0F18(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned __int8 v7 = [v5 BOOLForKey:v6];

  *a4 = v7;
}

void static CPLCKResourceDownloadOperation.downloadOperation(withRecordIDsAndTasks:keys:downloadType:perRecordProgressBlock:perRecordCompletionBlock:completionBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000C0FA8( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, int a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  v119 = a8;
  int v118 = a7;
  id v117 = a6;
  uint64_t v16 = type metadata accessor for CMTimeRange(0LL);
  __chkstk_darwin(v16);
  uint64_t v116 = (uint64_t)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  swift_bridgeObjectRetain(a3);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
  {
    uint64_t v19 = *(void *)(a1 + v18);
    uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    uint64_t v21 = swift_retain(v19);
    uint64_t v22 = sub_1000E5C5C(v21);
    swift_release(v19);
    uint64_t v23 = *(void *)(a1 + v18);
    *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v22;
    swift_release(v23);
  }

  uint64_t v24 = *(void *)(a1 + v18);
  swift_beginAccess(v24 + 16, v128, 1LL, 0LL);
  uint64_t v25 = *(void *)(v24 + 24);
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  swift_bridgeObjectRelease(v25);
  id v26 = [a4 recordName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
  {
    uint64_t v30 = *(void *)(a1 + v18);
    uint64_t v31 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    uint64_t v32 = swift_retain(v30);
    uint64_t v33 = sub_1000E5C5C(v32);
    swift_release(v30);
    uint64_t v34 = *(void *)(a1 + v18);
    *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v33;
    swift_release(v34);
  }

  uint64_t v35 = *(void *)(a1 + v18);
  swift_beginAccess(v35 + 32, &v127, 1LL, 0LL);
  uint64_t v36 = *(void *)(v35 + 40);
  *(void *)(v35 + 32) = v27;
  *(void *)(v35 + 40) = v29;
  swift_bridgeObjectRelease(v36);
  v115 = a4;
  id v131 = [a4 zoneID];
  id v37 = [v131 zoneName];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v40 = v39;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
  {
    uint64_t v41 = *(void *)(a1 + v18);
    uint64_t v42 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    uint64_t v43 = swift_retain(v41);
    uint64_t v44 = sub_1000E5C5C(v43);
    swift_release(v41);
    uint64_t v45 = *(void *)(a1 + v18);
    *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v44;
    swift_release(v45);
  }

  uint64_t v46 = *(void *)(a1 + v18);
  swift_beginAccess(v46 + 64, &v126, 1LL, 0LL);
  uint64_t v47 = *(void *)(v46 + 72);
  *(void *)(v46 + 64) = v38;
  *(void *)(v46 + 72) = v40;
  swift_bridgeObjectRelease(v47);
  id v48 = [v131 ownerName];
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  uint64_t v51 = v50;

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  uint64_t v54 = v52;
  if (v49 == v53 && v51 == v52)
  {
    swift_bridgeObjectRelease(v51);
  }

  else
  {
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v53, v52, 0LL);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v54);
    if ((v55 & 1) != 0) {
      goto LABEL_15;
    }
    id v56 = [v131 ownerName];
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    uint64_t v59 = v58;

    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
    {
      uint64_t v60 = *(void *)(a1 + v18);
      uint64_t v61 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
      uint64_t v62 = swift_retain(v60);
      uint64_t v63 = sub_1000E5C5C(v62);
      swift_release(v60);
      uint64_t v64 = *(void *)(a1 + v18);
      *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v63;
      swift_release(v64);
    }

    uint64_t v65 = *(void *)(a1 + v18);
    swift_beginAccess(v65 + 80, &v125, 1LL, 0LL);
    uint64_t v51 = *(void *)(v65 + 88);
    *(void *)(v65 + 80) = v57;
    *(void *)(v65 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v59;
  }

  swift_bridgeObjectRelease(v51);
LABEL_15:
  NSString v66 = String._bridgeToObjectiveC()();
  id v67 = CPLCloudKitFingerPrintFromDynamicFingerPrint(v66);

  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  uint64_t v70 = v69;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
  {
    uint64_t v71 = *(void *)(a1 + v18);
    uint64_t v72 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
    uint64_t v73 = swift_retain(v71);
    uint64_t v74 = sub_1000E5C5C(v73);
    swift_release(v71);
    uint64_t v75 = *(void *)(a1 + v18);
    *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v74;
    swift_release(v75);
  }

  id v117 = a12;
  uint64_t v76 = a11;
  uint64_t v77 = *(void *)(a1 + v18);
  swift_beginAccess(v77 + 112, &v124, 1LL, 0LL);
  uint64_t v78 = *(void *)(v77 + 120);
  *(void *)(v77 + 112) = v68;
  *(void *)(v77 + 120) = v70;
  swift_bridgeObjectRelease(v78);
  if ((v118 & 1) != 0)
  {
    id v79 = v119;
    if (qword_100291718 != -1) {
      swift_once(&qword_100291718, sub_1000C0EF4);
    }
    uint64_t v80 = v115;
    if ((byte_100291E59 & 1) == 0)
    {
      id v81 = [v79 cloudRecord];
      if (v81)
      {
        v82 = v81;
        id v83 = [v80 recordName];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
        uint64_t v85 = v84;

        uint64_t v86 = v120;
        v87 = sub_1000C17A4((uint64_t)v131);
        if (v86)
        {
          swift_errorRelease(v86);

          uint64_t v120 = 0LL;
        }

        else
        {
          id v88 = v87;
          uint64_t v120 = 0LL;

          swift_bridgeObjectRelease(v85);
          if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
          {
            uint64_t v89 = *(void *)(a1 + v18);
            uint64_t v90 = type metadata accessor for RequestItem._StorageClass(0LL);
            swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
            uint64_t v91 = swift_retain(v89);
            uint64_t v92 = sub_1000E5C5C(v91);
            swift_release(v89);
            uint64_t v93 = *(void *)(a1 + v18);
            *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v92;
            swift_release(v93);
          }

          uint64_t v94 = *(void *)(a1 + v18);
          swift_beginAccess(v94 + 128, &v121, 1LL, 0LL);
          uint64_t v85 = *(void *)(v94 + 128);
          *(void *)(v94 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = v88;
        }

        id v79 = v119;
        swift_bridgeObjectRelease(v85);
      }
    }
  }

  else
  {
    id v79 = v119;
  }

  swift_bridgeObjectRetain(a10);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
  {
    uint64_t v95 = *(void *)(a1 + v18);
    uint64_t v96 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
    uint64_t v97 = swift_retain(v95);
    uint64_t v98 = sub_1000E5C5C(v97);
    swift_release(v95);
    uint64_t v99 = *(void *)(a1 + v18);
    *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v98;
    swift_release(v99);
  }

  uint64_t v100 = *(void *)(a1 + v18);
  swift_beginAccess(v100 + 48, &v123, 1LL, 0LL);
  uint64_t v101 = *(void *)(v100 + 56);
  *(void *)(v100 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a9;
  *(void *)(v100 + 56) = a10;
  swift_bridgeObjectRelease(v101);
  id v102 = [v117 resourceType];
  if (a11)
  {
    if (a11 == 2)
    {
      Swift::UInt v103 = (Swift::UInt)v102;
      if (qword_100291708 != -1) {
        swift_once(&qword_100291708, sub_1000BEF0C);
      }
      if (sub_1000BF170(v103, qword_100291E50)) {
        uint64_t v76 = 2LL;
      }
      else {
        uint64_t v76 = 0LL;
      }
    }

    else if (a11 != 1)
    {
      type metadata accessor for CPLCKResourceDownloadType(0LL);
      uint64_t v130 = a11;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v113, &v130, v113, &type metadata for Int);
      __break(1u);
      return;
    }
  }

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v18)) & 1) == 0)
  {
    uint64_t v104 = *(void *)(a1 + v18);
    uint64_t v105 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
    uint64_t v106 = swift_retain(v104);
    uint64_t v107 = sub_1000E5C5C(v106);
    swift_release(v104);
    uint64_t v108 = *(void *)(a1 + v18);
    *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 152), 8) = v107;
    swift_release(v108);
  }

  uint64_t v109 = *(void *)(a1 + v18);
  swift_beginAccess(v109 + 96, &v122, 1LL, 0LL);
  *(void *)(v109 + 96) = v76;
  *(_BYTE *)(v109 + 104) = 1;
  id v110 = [v79 options];
  [v110 timeRange];

  if ((CMTimeRange.isValid.getter() & 1) != 0)
  {
    id v111 = [v79 options];
    [v111 timeRange];

    uint64_t v112 = v116;
    sub_1000C0804((uint64_t)&v129, v116);
    RequestItem.timeRange.setter(v112);
  }
}

void *sub_1000C17A4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v22 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unsigned __int8 v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v1 allRelatedCKRecordsInZoneID:a1 identifier:v8];

  uint64_t v10 = sub_1000CE284(0LL, &qword_100291F68, &OBJC_CLASS___CKRecord_ptr);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v12)
  {
    while (1)
    {
      uint64_t v23 = &_swiftEmptyArrayStorage;
      uint64_t result = (void *)sub_10011AB80(0LL, v12 & ~(v12 >> 63), 0);
      if (v12 < 0) {
        break;
      }
      uint64_t v14 = 0LL;
      uint64_t v15 = v23;
      unint64_t v21 = v11 & 0xC000000000000001LL;
      while (v12 != v14)
      {
        if (v21) {
          id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v11);
        }
        else {
          id v16 = *(id *)(v11 + 8 * v14 + 32);
        }
        id v17 = v16;
        Ckcode_RecordTransport.init(_:)();
        if (v3)
        {
          swift_bridgeObjectRelease(v11);
          swift_release(v15);

          return v15;
        }

        uint64_t v23 = v15;
        unint64_t v19 = v15[2];
        unint64_t v18 = v15[3];
        if (v19 >= v18 >> 1)
        {
          sub_10011AB80(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v23;
        }

        ++v14;
        v15[2] = v19 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( (unint64_t)v15 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v19,
          v7,
          v22);
        if (v12 == v14)
        {
          swift_bridgeObjectRelease(v11);
          return v15;
        }
      }

      __break(1u);
LABEL_16:
      if (v11 < 0) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v20);
      swift_bridgeObjectRelease(v11);
      if (!v12) {
        goto LABEL_20;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_20:
    swift_bridgeObjectRelease(v11);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void sub_1000C1A04(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_1000C1A58( uint64_t a1, uint64_t a2, void (*a3)(void, void, void, void, void, id, void, id), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v84 = a8;
  uint64_t v80 = a5;
  uint64_t v81 = a6;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v11 = type metadata accessor for ResponseItem(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v85 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v16 = (uint64_t *)((char *)&v75 - v15);
  uint64_t v17 = sub_1000BED3C(&qword_100291F60);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for ResourceDownloadResponse(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v19, &qword_100291F60);
  sub_1000CEC9C((uint64_t)v19, (uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
  uint64_t v25 = *(void *)v23;
  uint64_t v26 = *(void *)(*(void *)v23 + 16LL);
  if (!v26) {
    return sub_1000CECE0((uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
  }
  uint64_t v76 = *(void *)v23;
  uint64_t v77 = v23;
  uint64_t v86 = (uint64_t *)(a2 + 16);
  uint64_t v27 = (uint64_t *)(a7 + 16);
  uint64_t v28 = v84 + 2;
  uint64_t v29 = v25 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v30 = *(void *)(v12 + 72);
  swift_bridgeObjectRetain(v25);
  uint64_t v83 = v30;
  uint64_t v84 = (uint64_t *)(a7 + 16);
  while (1)
  {
    sub_1000CEC58(v29, (uint64_t)v16, type metadata accessor for ResponseItem);
    uint64_t v32 = *v16;
    uint64_t v31 = v16[1];
    if (v16[12])
    {
      uint64_t v33 = v86;
      swift_beginAccess(v86, v88, 32LL, 0LL);
      uint64_t v34 = *v33;
      uint64_t v35 = *(void *)(v34 + 16);
      swift_bridgeObjectRetain(v31);
      if (v35 && (unint64_t v36 = sub_100119098(v32, v31), (v37 & 1) != 0))
      {
        uint64_t v38 = *(void **)(*(void *)(v34 + 56) + 8 * v36);
        swift_endAccess(v88);
        id v39 = v38;
        id v40 = sub_1000BF4C8((uint64_t)v16, v39);
        v78(0LL, 0LL, 0LL, 0LL, 0LL, v39, 0LL, v40);
        swift_errorRelease(v40);
        swift_beginAccess(v27, v88, 33LL, 0LL);
        uint64_t v41 = *v27;
        swift_bridgeObjectRetain(*v27);
        id v82 = v39;
        unint64_t v42 = sub_1001190FC((uint64_t)v39);
        char v44 = v43;
        swift_bridgeObjectRelease(v41);
        uint64_t v45 = 0LL;
        if ((v44 & 1) != 0)
        {
          uint64_t v46 = v84;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v84);
          uint64_t v48 = *v46;
          v87 = (void *)*v46;
          uint64_t *v46 = 0x8000000000000000LL;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_10011A5A4();
            uint64_t v48 = (uint64_t)v87;
          }

          uint64_t v45 = *(void *)(*(void *)(v48 + 56) + 16 * v42 + 8);
          sub_1000CBBE0(v42, v48);
          uint64_t v49 = *v46;
          uint64_t *v46 = v48;
          swift_bridgeObjectRelease(v49);
        }

        swift_endAccess(v88);
        swift_bridgeObjectRelease(v45);
        uint64_t v50 = v86;
        swift_beginAccess(v86, v88, 33LL, 0LL);
        uint64_t v51 = *v50;
        swift_bridgeObjectRetain(*v50);
        unint64_t v52 = sub_100119098(v32, v31);
        char v54 = v53;
        swift_bridgeObjectRelease(v51);
        char v55 = 0LL;
        if ((v54 & 1) != 0)
        {
          int v56 = swift_isUniquelyReferenced_nonNull_native(*v50);
          uint64_t v57 = *v50;
          v87 = (void *)*v50;
          *uint64_t v50 = 0x8000000000000000LL;
          if (!v56)
          {
            sub_10011A3F4();
            uint64_t v57 = (uint64_t)v87;
          }

          swift_bridgeObjectRelease(*(void *)(*(void *)(v57 + 48) + 16 * v52 + 8));
          char v55 = *(void **)(*(void *)(v57 + 56) + 8 * v52);
          sub_1000CBA0C(v52, v57);
          uint64_t v58 = *v50;
          *uint64_t v50 = v57;
          swift_bridgeObjectRelease(v58);
        }

        swift_endAccess(v88);

        sub_1000CECE0((uint64_t)v16, type metadata accessor for ResponseItem);
        swift_bridgeObjectRelease(v31);
        uint64_t v30 = v83;
        uint64_t v27 = v84;
      }

      else
      {
        swift_endAccess(v88);
        swift_bridgeObjectRelease(v31);
        sub_1000CECE0((uint64_t)v16, type metadata accessor for ResponseItem);
      }

      goto LABEL_6;
    }

    swift_beginAccess(v28, v88, 33LL, 0LL);
    sub_1000CEC58((uint64_t)v16, v85, type metadata accessor for ResponseItem);
    swift_bridgeObjectRetain(v31);
    uint64_t v59 = swift_isUniquelyReferenced_nonNull_native(*v28);
    v87 = (void *)*v28;
    uint64_t v60 = v87;
    *uint64_t v28 = 0x8000000000000000LL;
    unint64_t v62 = sub_100119098(v32, v31);
    uint64_t v63 = v60[2];
    BOOL v64 = (v61 & 1) == 0;
    uint64_t v65 = v63 + v64;
    if (__OFADD__(v63, v64)) {
      break;
    }
    char v66 = v61;
    if (v60[3] >= v65)
    {
      if ((v59 & 1) != 0)
      {
        uint64_t v69 = v87;
        if ((v61 & 1) == 0) {
          goto LABEL_28;
        }
      }

      else
      {
        sub_10011A758();
        uint64_t v69 = v87;
        if ((v66 & 1) == 0) {
          goto LABEL_28;
        }
      }
    }

    else
    {
      sub_100119914(v65, v59);
      unint64_t v67 = sub_100119098(v32, v31);
      if ((v66 & 1) != (v68 & 1)) {
        goto LABEL_35;
      }
      unint64_t v62 = v67;
      uint64_t v69 = v87;
      if ((v66 & 1) == 0)
      {
LABEL_28:
        v69[(v62 >> 6) + 8] |= 1LL << v62;
        uint64_t v70 = (uint64_t *)(v69[6] + 16 * v62);
        *uint64_t v70 = v32;
        v70[1] = v31;
        uint64_t v30 = v83;
        sub_1000CEC9C(v85, v69[7] + v62 * v83, type metadata accessor for ResponseItem);
        uint64_t v71 = v69[2];
        BOOL v72 = __OFADD__(v71, 1LL);
        uint64_t v73 = v71 + 1;
        if (v72) {
          goto LABEL_34;
        }
        v69[2] = v73;
        swift_bridgeObjectRetain(v31);
        goto LABEL_30;
      }
    }

    uint64_t v30 = v83;
    sub_1000CEDE8(v85, v69[7] + v62 * v83, type metadata accessor for ResponseItem);
LABEL_30:
    uint64_t v74 = *v28;
    *uint64_t v28 = v69;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v74);
    swift_endAccess(v88);
    sub_1000CECE0((uint64_t)v16, type metadata accessor for ResponseItem);
    uint64_t v27 = v84;
LABEL_6:
    v29 += v30;
    if (!--v26)
    {
      swift_bridgeObjectRelease(v76);
      uint64_t v23 = v77;
      return sub_1000CECE0((uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
    }
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void *sub_1000C2058(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v7 = sub_1001190FC((uint64_t)a1);
      if ((v8 & 1) != 0)
      {
        uint64_t v6 = *(void **)(*(void *)(a2 + 56) + 8 * v7);
        id v9 = v6;
        return v6;
      }
    }

    return 0LL;
  }

  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0LL;
  }
  uint64_t v11 = v4;
  uint64_t v5 = sub_1000CE284(0LL, &qword_100291F08, &OBJC_CLASS___CPLEngineResourceDownloadTask_ptr);
  swift_unknownObjectRetain(v4);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v5, 7LL);
  uint64_t v6 = v12;
  swift_unknownObjectRelease(v4);
  return v6;
}

uint64_t sub_1000C212C(void *a1, uint64_t a2, uint64_t (*a3)(id, double), double a4)
{
  if (*(void *)(*(void *)(a2 + 16) + 16LL))
  {
    id v8 = a1;
    sub_1001190FC((uint64_t)v8);
    if ((v9 & 1) != 0)
    {
      swift_endAccess(v11);

      return a3(v8, a4);
    }
  }

  return swift_endAccess(v11);
}

void sub_1000C21CC( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, id), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v156 = a8;
  uint64_t v161 = a7;
  v162 = (void (*)(id, uint64_t, uint64_t, uint64_t, uint64_t, id, uint64_t, id))a6;
  uint64_t v14 = sub_1000BED3C(&qword_100291FD0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v153 = (uint64_t)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v146 - v17;
  uint64_t v19 = type metadata accessor for ResponseItem(0LL);
  uint64_t v154 = *(void *)(v19 - 8);
  uint64_t v155 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v152 = (uint64_t)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v151 = (uint64_t)&v146 - v22;
  uint64_t v23 = sub_1000BED3C(&qword_100292058);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_1000BED3C(&qword_100291EF8);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v158 = v29;
  uint64_t v159 = v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v146 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  v157 = (char *)&v146 - v34;
  uint64_t v160 = a4 + 16;
  swift_beginAccess(a4 + 16, &v164, 32LL, 0LL);
  uint64_t v35 = *(void *)(a4 + 16);
  if (!*(void *)(v35 + 16)) {
    goto LABEL_6;
  }
  id v36 = a2;
  unint64_t v37 = sub_1001190FC((uint64_t)v36);
  if ((v38 & 1) == 0)
  {

LABEL_6:
    swift_endAccess(&v164);
    return;
  }

  uint64_t v39 = a5 + 16;
  id v40 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v37);
  uint64_t v41 = v36;
  uint64_t v42 = *v40;
  uint64_t v43 = v40[1];
  swift_endAccess(&v164);
  swift_bridgeObjectRetain(v43);

  if (!a3)
  {
    uint64_t v149 = v42;
    uint64_t v150 = v43;
    id v148 = v41;
    if (a1)
    {
      uint64_t v47 = sub_1000CE284(0LL, &qword_100291F68, &OBJC_CLASS___CKRecord_ptr);
      uint64_t v48 = sub_1000CE284(0LL, &qword_100291F70, &OBJC_CLASS___CKAsset_ptr);
      id v49 = a1;
      CKRecordKeyValueSetting.subscript.getter( &v164,  0x7465737361LL,  0xE500000000000000LL,  v47,  v48,  &protocol witness table for CKAsset);
      if (v164)
      {
        id v147 = v164;
        id v50 = [v164 fileURL];
        if (v50)
        {
          uint64_t v51 = v50;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v52 = v159;
          char v53 = *(void (**)(char *, char *, uint64_t))(v159 + 32);
          char v54 = v33;
          uint64_t v55 = v158;
          v53(v28, v54, v158);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v28, 0LL, 1LL, v55);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v28, 1LL, v55) != 1)
          {
            id v146 = v49;
            int v56 = (uint64_t *)(v156 + 16);
            v53(v157, v28, v55);
            uint64_t v57 = sub_1000BED3C(&qword_100292060);
            uint64_t inited = swift_initStackObject(v57, v163);
            *(_OWORD *)(inited + 16) = xmmword_100212550;
            *(void *)(inited + 32) = NSURLFileSizeKey;
            uint64_t v59 = NSURLFileSizeKey;
            uint64_t v60 = sub_1000CCC98(inited);
            swift_setDeallocating(inited);
            type metadata accessor for URLResourceKey(0LL);
            swift_arrayDestroy(inited + 32, 1LL, v61);
            URL.resourceValues(forKeys:)(v60);
            swift_bridgeObjectRelease(v60);
            uint64_t v73 = type metadata accessor for URLResourceValues(0LL);
            uint64_t v74 = *(void *)(v73 - 8);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v25, 0LL, 1LL, v73);
            int v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v25, 1LL, v73);
            if (v75 == 1)
            {
              sub_1000CEDAC((uint64_t)v25, &qword_100292058);
              id v76 = v146;
              uint64_t v77 = v150;
              goto LABEL_23;
            }

            uint64_t v116 = URLResourceValues.fileSize.getter();
            char v118 = v117;
            (*(void (**)(char *, uint64_t))(v74 + 8))(v25, v73);
            id v76 = v146;
            uint64_t v77 = v150;
            if ((v118 & 1) != 0 || v116) {
              goto LABEL_23;
            }
            swift_beginAccess(v56, &v164, 32LL, 0LL);
            uint64_t v119 = *v56;
            if (*(void *)(*v56 + 16))
            {
              swift_bridgeObjectRetain(v77);
              unint64_t v120 = sub_100119098(v149, v77);
              if ((v121 & 1) != 0)
              {
                uint64_t v122 = *(void *)(v119 + 56);
                uint64_t v123 = v154;
                sub_1000CEC58( v122 + *(void *)(v154 + 72) * v120,  (uint64_t)v18,  type metadata accessor for ResponseItem);
                uint64_t v124 = 0LL;
              }

              else
              {
                uint64_t v124 = 1LL;
                uint64_t v123 = v154;
              }

              uint64_t v130 = v155;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v18, v124, 1LL, v155);
              swift_bridgeObjectRelease(v77);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v18, 1LL, v130) != 1)
              {
                uint64_t v131 = v151;
                sub_1000CEC9C((uint64_t)v18, v151, type metadata accessor for ResponseItem);
                swift_endAccess(&v164);
                if (*(uint64_t *)(v131 + 88) >= 1)
                {
                  id v132 = sub_1000BF390(0xD000000000000021LL, 0x80000001001D1F70LL, 150LL);
                  v162(0LL, 0LL, 0LL, 0LL, 0LL, v148, 0LL, v132);
                  swift_errorRelease(v132);
                  id v133 = [(id)objc_opt_self(NSFileManager) defaultManager];
                  URL._bridgeToObjectiveC()(v134);
                  v136 = v135;
                  id v164 = 0LL;
                  unsigned int v137 = [v133 removeItemAtURL:v135 error:&v164];

                  id v138 = v164;
                  if (v137)
                  {
                    id v139 = v164;
                  }

                  else
                  {
                    id v140 = v164;
                    uint64_t v141 = _convertNSErrorToError(_:)(v138);

                    swift_willThrow();
                    swift_errorRelease(v141);
                    id v76 = v147;
                  }

                  uint64_t v142 = v149;
                  uint64_t v143 = v160;

                  sub_1000CECE0(v131, type metadata accessor for ResponseItem);
                  (*(void (**)(char *, uint64_t))(v159 + 8))(v157, v55);
                  swift_beginAccess(v143, &v164, 33LL, 0LL);
                  sub_1000CB938((uint64_t)v148);
                  uint64_t v145 = v144;
                  swift_endAccess(&v164);
                  swift_bridgeObjectRelease(v145);
                  swift_beginAccess(v39, &v164, 33LL, 0LL);
                  uint64_t v100 = v142;
                  uint64_t v101 = v77;
                  goto LABEL_28;
                }

                sub_1000CECE0(v131, type metadata accessor for ResponseItem);
LABEL_23:
                uint64_t v78 = v56;
                uint64_t v156 = v39;
                id v79 = v148;
                uint64_t v80 = sub_1000C2058(v79, a9);

                if (v80)
                {
                  id v81 = [v80 resource];
                  id v82 = [v81 identity];

                  swift_beginAccess(v78, &v164, 32LL, 0LL);
                  uint64_t v83 = *v78;
                  if (!*(void *)(v83 + 16))
                  {
                    uint64_t v88 = v153;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56))(v153, 1LL, 1LL, v155);
LABEL_32:
                    sub_1000CEDAC(v88, &qword_100291FD0);
                    swift_endAccess(&v164);
LABEL_33:
                    uint64_t v103 = 0LL;
LABEL_34:
                    id v104 = v147;
                    if (v82)
                    {
                      id v105 = [v82 fingerPrint];
                      if (v105)
                      {
                        uint64_t v106 = v105;
                        uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
                        uint64_t v109 = v108;
                      }

                      else
                      {
                        uint64_t v107 = 0LL;
                        uint64_t v109 = 0LL;
                      }

                      id v125 = [v82 fileUTI];
                      if (v125)
                      {
                        uint64_t v126 = v125;
                        uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
                        uint64_t v111 = v127;
                      }

                      else
                      {
                        uint64_t v110 = 0LL;
                        uint64_t v111 = 0LL;
                      }
                    }

                    else
                    {
                      uint64_t v110 = 0LL;
                      uint64_t v111 = 0LL;
                      uint64_t v107 = 0LL;
                      uint64_t v109 = 0LL;
                    }

                    v162(v147, v107, v109, v110, v111, v79, v103, 0LL);

                    swift_bridgeObjectRelease(v111);
                    swift_bridgeObjectRelease(v109);
                    (*(void (**)(char *, uint64_t))(v159 + 8))(v157, v158);
                    swift_beginAccess(v160, &v164, 33LL, 0LL);
                    sub_1000CB938((uint64_t)v79);
                    uint64_t v129 = v128;
                    swift_endAccess(&v164);
                    swift_bridgeObjectRelease(v129);
                    swift_beginAccess(v156, &v164, 33LL, 0LL);
                    uint64_t v46 = v149;
                    uint64_t v43 = v150;
                    uint64_t v70 = v150;
                    goto LABEL_19;
                  }

                  uint64_t v84 = v150;
                  swift_bridgeObjectRetain(v150);
                  unint64_t v85 = sub_100119098(v149, v84);
                  uint64_t v86 = v154;
                  if ((v87 & 1) != 0)
                  {
                    uint64_t v88 = v153;
                    sub_1000CEC58( *(void *)(v83 + 56) + *(void *)(v154 + 72) * v85,  v153,  type metadata accessor for ResponseItem);
                    uint64_t v89 = 0LL;
                  }

                  else
                  {
                    uint64_t v89 = 1LL;
                    uint64_t v88 = v153;
                  }

                  uint64_t v102 = v155;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v88, v89, 1LL, v155);
                  swift_bridgeObjectRelease(v150);
                  uint64_t v112 = v88;
                  uint64_t v113 = v152;
                  sub_1000CEC9C(v112, v152, type metadata accessor for ResponseItem);
                  swift_endAccess(&v164);
                  unint64_t v114 = *(void *)(v113 + 72);
                  if (*(_BYTE *)(v113 + 80) == 1)
                  {
                    if (v114 >= 2)
                    {
LABEL_40:
                      uint64_t v115 = v113;
                      uint64_t v103 = *(void *)(v113 + 64);
                      sub_1000CECE0(v115, type metadata accessor for ResponseItem);
                      goto LABEL_34;
                    }
                  }

                  else if (v114 == 2)
                  {
                    goto LABEL_40;
                  }

                  sub_1000CECE0(v113, type metadata accessor for ResponseItem);
                  goto LABEL_33;
                }

                id v164 = 0LL;
                uint64_t v165 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(30LL);
                swift_bridgeObjectRelease(v165);
                id v164 = (id)0xD00000000000001CLL;
                uint64_t v165 = 0x80000001001D1F50LL;
                id v90 = [v79 description];
                uint64_t v91 = v76;
                uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
                uint64_t v94 = v93;

                v95._countAndFlagsBits = v92;
                v95._object = v94;
                String.append(_:)(v95);
                swift_bridgeObjectRelease(v94);
                uint64_t v96 = v165;
                id v97 = sub_1000BF390((uint64_t)v164, v165, 27LL);
                swift_bridgeObjectRelease(v96);
                v162(0LL, 0LL, 0LL, 0LL, 0LL, v79, 0LL, v97);

                swift_errorRelease(v97);
                (*(void (**)(char *, uint64_t))(v159 + 8))(v157, v55);
                swift_beginAccess(v160, &v164, 33LL, 0LL);
                sub_1000CB938((uint64_t)v79);
                uint64_t v99 = v98;
                swift_endAccess(&v164);
                swift_bridgeObjectRelease(v99);
                swift_beginAccess(v156, &v164, 33LL, 0LL);
                uint64_t v100 = v149;
                uint64_t v101 = v77;
LABEL_28:
                uint64_t v71 = (void *)sub_1000CB86C(v100, v101);
                swift_endAccess(&v164);
                uint64_t v72 = v77;
                goto LABEL_20;
              }
            }

            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v154 + 56))(v18, 1LL, 1LL, v155);
            }

            sub_1000CEDAC((uint64_t)v18, &qword_100291FD0);
            swift_endAccess(&v164);
            goto LABEL_23;
          }
        }

        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v159 + 56))(v28, 1LL, 1LL, v158);
        }

        sub_1000CEDAC((uint64_t)v28, &qword_100291EF8);
        id v67 = sub_1000BF390(0xD000000000000020LL, 0x80000001001D1F20LL, 27LL);
        uint64_t v66 = (uint64_t)v148;
        v162(0LL, 0LL, 0LL, 0LL, 0LL, v148, 0LL, v67);
        swift_errorRelease(v67);
      }

      else
      {
        id v65 = sub_1000BF390(0xD00000000000001ELL, 0x80000001001D1F00LL, 27LL);
        uint64_t v66 = (uint64_t)v148;
        v162(0LL, 0LL, 0LL, 0LL, 0LL, v148, 0LL, v65);
        swift_errorRelease(v65);
      }

      swift_beginAccess(v160, &v164, 33LL, 0LL);
      uint64_t v64 = v66;
    }

    else
    {
      id v62 = sub_1000BF390(0xD000000000000022LL, 0x80000001001D1ED0LL, 150LL);
      uint64_t v63 = (uint64_t)v148;
      v162(0LL, 0LL, 0LL, 0LL, 0LL, v148, 0LL, v62);
      swift_errorRelease(v62);
      swift_beginAccess(v160, &v164, 33LL, 0LL);
      uint64_t v64 = v63;
    }

    sub_1000CB938(v64);
    uint64_t v69 = v68;
    swift_endAccess(&v164);
    swift_bridgeObjectRelease(v69);
    swift_beginAccess(v39, &v164, 33LL, 0LL);
    uint64_t v46 = v149;
    uint64_t v43 = v150;
    goto LABEL_18;
  }

  swift_errorRetain(a3);
  v162(0LL, 0LL, 0LL, 0LL, 0LL, v41, 0LL, a3);
  swift_errorRelease(a3);
  swift_beginAccess(v160, &v164, 33LL, 0LL);
  sub_1000CB938((uint64_t)v41);
  uint64_t v45 = v44;
  swift_endAccess(&v164);
  swift_bridgeObjectRelease(v45);
  swift_beginAccess(v39, &v164, 33LL, 0LL);
  uint64_t v46 = v42;
LABEL_18:
  uint64_t v70 = v43;
LABEL_19:
  uint64_t v71 = (void *)sub_1000CB86C(v46, v70);
  swift_endAccess(&v164);
  uint64_t v72 = v43;
LABEL_20:
  swift_bridgeObjectRelease(v72);
}

uint64_t sub_1000C30A0( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void, void, void, void, void, id, void, id))
{
  uint64_t v114 = a7;
  uint64_t v117 = a3;
  uint64_t v121 = a1;
  uint64_t v16 = type metadata accessor for ResponseItem(0LL);
  uint64_t v115 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v105 - v20;
  uint64_t v22 = sub_1000BED3C(&qword_100291F60);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v118 = (uint64_t)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v105 - v25;
  uint64_t v27 = type metadata accessor for ResourceDownloadResponse(0LL);
  uint64_t v119 = *(void *)(v27 - 8);
  unint64_t v120 = (void (*)(void, void, void, void, void, id, void, id))v27;
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v105 - v31;
  if (qword_100291710 != -1)
  {
    id v104 = (char *)&v105 - v31;
    swift_once(&qword_100291710, sub_1000C0ED0);
    uint64_t v32 = v104;
  }

  if (byte_100291E58 == 1)
  {
    uint64_t v116 = v32;
    uint64_t v113 = (void *)(a4 + 16);
    sub_1000CE7B4(v121, (uint64_t)v26, &qword_100291F60);
    if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void, id, void, id)))(v119 + 48))( v26,  1LL,  v120) == 1)
    {
      sub_1000CEDAC((uint64_t)v26, &qword_100291F60);
      uint64_t v33 = type metadata accessor for ResourceDownloadRequest(0LL);
      uint64_t v34 = sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
      Message.debugDescription.getter(v33, v34);
      uint64_t v36 = v35;
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      uint64_t v38 = a8;
      if (a2) {
        uint64_t v39 = (void *)_convertErrorToNSError(_:)(a2);
      }
      else {
        uint64_t v39 = 0LL;
      }
      int v75 = v113;
      swift_beginAccess(v113, v123, 0LL, 0LL);
      uint64_t v76 = *v75;
      if (*v75)
      {
        swift_bridgeObjectRetain(*v75);
        v77.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v76);
      }

      else
      {
        v77.super.Class isa = 0LL;
      }

      a8 = v38;
      CPLTaskLogCKCodeRequestAndResponse(v37, 0LL, v39, v77.super.isa);
    }

    else
    {
      uint64_t v111 = a8;
      uint64_t v112 = v30;
      uint64_t v40 = (uint64_t)v116;
      sub_1000CEC9C((uint64_t)v26, (uint64_t)v116, type metadata accessor for ResourceDownloadResponse);
      uint64_t v41 = *(void *)v40;
      int64_t v42 = *(void *)(*(void *)v40 + 16LL);
      uint64_t v43 = &_swiftEmptyArrayStorage;
      if (v42)
      {
        uint64_t v107 = v19;
        uint64_t v108 = a2;
        uint64_t v109 = a6;
        uint64_t v110 = a5;
        uint64_t v126 = &_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v41);
        sub_10011ABAC(0LL, v42, 0);
        unint64_t v44 = (*(unsigned __int8 *)(v115 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
        uint64_t v106 = v41;
        uint64_t v45 = v41 + v44;
        uint64_t v122 = *(void *)(v115 + 72);
        uint64_t v43 = v126;
        do
        {
          sub_1000CEC58(v45, (uint64_t)v21, type metadata accessor for ResponseItem);
          Swift::Int v46 = sub_1000C39D8();
          uint64_t v48 = v47;
          sub_1000CECE0((uint64_t)v21, type metadata accessor for ResponseItem);
          if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
          {
            sub_10011ABAC(0LL, v43[2] + 1LL, 1);
            uint64_t v43 = v126;
          }

          unint64_t v50 = v43[2];
          unint64_t v49 = v43[3];
          if (v50 >= v49 >> 1)
          {
            sub_10011ABAC((char *)(v49 > 1), v50 + 1, 1);
            uint64_t v43 = v126;
          }

          v43[2] = v50 + 1;
          uint64_t v51 = (char *)&v43[2 * v50];
          *((void *)v51 + 4) = v46;
          *((void *)v51 + 5) = v48;
          v45 += v122;
          --v42;
        }

        while (v42);
        swift_bridgeObjectRelease(v106);
        a5 = v110;
        a6 = v109;
        a2 = v108;
        uint64_t v19 = v107;
      }

      uint64_t v126 = v43;
      uint64_t v52 = sub_1000BED3C(&qword_100292040);
      unint64_t v53 = sub_1000CED1C();
      uint64_t v54 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v52, v53);
      int v56 = v55;
      swift_bridgeObjectRelease(v43);
      uint64_t v57 = *((void *)v116 + 1);
      if (v57)
      {
        char v58 = v116[16];
        uint64_t v59 = (uint64_t)v116;
        swift_bridgeObjectRelease(v56);
        uint64_t v126 = 0LL;
        unint64_t v127 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(30LL);
        v60._countAndFlagsBits = 0x646F43726F727265LL;
        v60._object = (void *)0xEB00000000203A65LL;
        String.append(_:)(v60);
        uint64_t v124 = v57;
        char v125 = v58;
        _print_unlocked<A, B>(_:_:)( &v124,  &v126,  &type metadata for BatchErrorCode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v61._countAndFlagsBits = 0x654D726F7272650ALL;
        v61._object = (void *)0xEF203A6567617373LL;
        String.append(_:)(v61);
        uint64_t v62 = *(void *)(v59 + 24);
        uint64_t v63 = *(void **)(v59 + 32);
        swift_bridgeObjectRetain(v63);
        v64._countAndFlagsBits = v62;
        v64._object = v63;
        String.append(_:)(v64);
        swift_bridgeObjectRelease(v63);
        uint64_t v54 = (uint64_t)v126;
        int v56 = (void *)v127;
      }

      uint64_t v30 = v112;
      uint64_t v65 = type metadata accessor for ResourceDownloadRequest(0LL);
      uint64_t v66 = sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
      Message.debugDescription.getter(v65, v66);
      uint64_t v68 = v67;
      NSString v69 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v68);
      uint64_t v126 = (void *)0xD00000000000001ALL;
      unint64_t v127 = 0x80000001001D1DC0LL;
      v70._countAndFlagsBits = v54;
      v70._object = v56;
      String.append(_:)(v70);
      swift_bridgeObjectRelease(v56);
      unint64_t v71 = v127;
      NSString v72 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v71);
      uint64_t v73 = v19;
      if (a2) {
        uint64_t v74 = (void *)_convertErrorToNSError(_:)(a2);
      }
      else {
        uint64_t v74 = 0LL;
      }
      uint64_t v78 = v113;
      swift_beginAccess(v113, v123, 0LL, 0LL);
      uint64_t v79 = *v78;
      if (*v78)
      {
        swift_bridgeObjectRetain(*v78);
        v80.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v79);
      }

      else
      {
        v80.super.Class isa = 0LL;
      }

      uint64_t v19 = v73;
      CPLTaskLogCKCodeRequestAndResponse(v69, v72, v74, v80.super.isa);

      sub_1000CECE0((uint64_t)v116, type metadata accessor for ResourceDownloadResponse);
      a8 = v111;
    }
  }

  uint64_t v81 = v118;
  sub_1000CE7B4(v121, v118, &qword_100291F60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(void, void, void, void, void, id, void, id)))(v119 + 48))( v81,  1LL,  v120) != 1)
  {
    sub_1000CEC9C(v81, (uint64_t)v30, type metadata accessor for ResourceDownloadResponse);
    uint64_t v83 = *((void *)v30 + 1);
    if (v83)
    {
      char v84 = v30[16];
      uint64_t v85 = *((void *)v30 + 3);
      unint64_t v86 = *((void *)v30 + 4);
      swift_bridgeObjectRetain(v86);
      id v87 = sub_1000C0204(v83, v84, v85, v86);
      swift_bridgeObjectRelease(v86);
      a5(v87);
      swift_errorRelease(v87);
      return sub_1000CECE0((uint64_t)v30, type metadata accessor for ResourceDownloadResponse);
    }

    uint64_t v89 = v114 + 16;
    swift_beginAccess(v114 + 16, &v126, 0LL, 0LL);
    if (!*(void *)(*(void *)v89 + 16LL) || (uint64_t v90 = *(void *)v30, (v91 = *(void *)(*(void *)v30 + 16LL)) == 0))
    {
LABEL_46:
      a5(a2);
      return sub_1000CECE0((uint64_t)v30, type metadata accessor for ResourceDownloadResponse);
    }

    uint64_t v112 = v30;
    uint64_t v108 = a2;
    uint64_t v109 = a6;
    uint64_t v110 = a5;
    uint64_t v121 = a9;
    uint64_t v122 = a10;
    uint64_t v119 = v90;
    unint64_t v120 = a11;
    uint64_t v92 = (uint64_t *)(a8 + 16);
    uint64_t v93 = v90 + ((*(unsigned __int8 *)(v115 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
    uint64_t v94 = *(void *)(v115 + 72);
    swift_bridgeObjectRetain(v90);
    while (1)
    {
      sub_1000CEC58(v93, (uint64_t)v19, type metadata accessor for ResponseItem);
      uint64_t v95 = (uint64_t)v19;
      uint64_t v96 = *v19;
      uint64_t v97 = v19[1];
      swift_beginAccess(v92, &v124, 32LL, 0LL);
      uint64_t v98 = *v92;
      if (*(void *)(*v92 + 16))
      {
        swift_bridgeObjectRetain(v97);
        unint64_t v99 = sub_100119098(v96, v97);
        if ((v100 & 1) != 0)
        {
          uint64_t v101 = *(void **)(*(void *)(v98 + 56) + 8 * v99);
          swift_endAccess(&v124);
          id v102 = v101;
          swift_bridgeObjectRelease(v97);
          id v103 = sub_1000BF4C8(v95, v102);
          v120(0LL, 0LL, 0LL, 0LL, 0LL, v102, 0LL, v103);

          swift_errorRelease(v103);
          goto LABEL_41;
        }

        swift_bridgeObjectRelease(v97);
      }

      swift_endAccess(&v124);
LABEL_41:
      uint64_t v19 = (uint64_t *)v95;
      sub_1000CECE0(v95, type metadata accessor for ResponseItem);
      v93 += v94;
      if (!--v91)
      {
        swift_bridgeObjectRelease(v119);
        a5 = v110;
        a2 = v108;
        uint64_t v30 = v112;
        goto LABEL_46;
      }
    }
  }

  sub_1000CEDAC(v81, &qword_100291F60);
  if (a2) {
    id v82 = a2;
  }
  else {
    id v82 = sub_1000BF390(0xD000000000000022LL, 0x80000001001D1860LL, 150LL);
  }
  swift_errorRetain(a2);
  a5(v82);
  return swift_errorRelease(v82);
}

Swift::Int sub_1000C39D8()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v109 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v108 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_1000BED3C(&qword_100291F58);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v9 = (char *)&v107 - v8;
  uint64_t v11 = *v0;
  unint64_t v10 = v0[1];
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v13 = 0xE700000000000000LL;
  if (v12)
  {
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease(v111[1]);
    v111[0] = 0xD000000000000010LL;
    v111[1] = 0x80000001001D1DE0LL;
    swift_bridgeObjectRetain(v10);
    v14._countAndFlagsBits = v11;
    v14._object = (void *)v10;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v10);
    v15._countAndFlagsBits = v111[0];
    uint64_t v16 = (void *)v111[1];
    strcpy((char *)v111, "items {");
    v111[1] = 0xE700000000000000LL;
    v15._object = v16;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    uint64_t v17 = v111[0];
    unint64_t v13 = v111[1];
  }

  else
  {
    uint64_t v17 = 0x7B20736D657469LL;
  }

  uint64_t v110 = v17;
  uint64_t v19 = v0[2];
  unint64_t v18 = v0[3];
  uint64_t v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000LL) == 0) {
    uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    strcpy((char *)v111, "\n  recordID: ");
    HIWORD(v111[1]) = -4864;
    swift_bridgeObjectRetain(v18);
    v21._countAndFlagsBits = v19;
    v21._object = (void *)v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v18);
    uint64_t v22 = v111[0];
    uint64_t v23 = (void *)v111[1];
    v111[0] = v110;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v24._countAndFlagsBits = v22;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v23);
    unint64_t v13 = v111[1];
    uint64_t v110 = v111[0];
  }

  uint64_t v25 = v109;
  uint64_t v27 = v0[4];
  unint64_t v26 = v0[5];
  uint64_t v28 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000LL) == 0) {
    uint64_t v28 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v28)
  {
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease(v111[1]);
    v111[0] = 0xD000000000000011LL;
    v111[1] = 0x80000001001D1E00LL;
    swift_bridgeObjectRetain(v26);
    v29._countAndFlagsBits = v27;
    v29._object = (void *)v26;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v26);
    uint64_t v30 = v111[0];
    uint64_t v31 = (void *)v111[1];
    v111[0] = v110;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v32._countAndFlagsBits = v30;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v31);
    unint64_t v13 = v111[1];
    uint64_t v110 = v111[0];
  }

  uint64_t v33 = (uint64_t)v0 + *(int *)(type metadata accessor for ResponseItem(0LL) + 52);
  sub_1000CE7B4(v33, (uint64_t)v9, &qword_100291F58);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v35 = v34(v9, 1LL, v2);
  sub_1000CEDAC((uint64_t)v9, &qword_100291F58);
  if (v35 != 1)
  {
    sub_1000CE7B4(v33, (uint64_t)v7, &qword_100291F58);
    if (v34(v7, 1LL, v2) == 1)
    {
      NSString v37 = v108;
      Ckcode_RecordTransport.init()();
      uint64_t v38 = sub_1000CEDAC((uint64_t)v7, &qword_100291F58);
    }

    else
    {
      NSString v37 = v108;
      uint64_t v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v108, v7, v2);
    }

    uint64_t v39 = Ckcode_RecordTransport.localSerialization.getter(v38);
    unint64_t v41 = v40;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v37, v2);
    uint64_t v42 = Data.debugDescription.getter(v39, v41);
    unint64_t v44 = v43;
    sub_1000CE2BC(v39, v41);
    if (String.count.getter(v42, v44) < 21) {
      goto LABEL_28;
    }
    if ((v44 & 0x2000000000000000LL) != 0) {
      uint64_t v45 = HIBYTE(v44) & 0xF;
    }
    else {
      uint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v46 = 7LL;
    if (((v44 >> 60) & ((v42 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v46 = 11LL;
    }
    uint64_t v109 = v45;
    uint64_t v47 = (char *)(v46 | (v45 << 16));
    uint64_t v48 = String.index(_:offsetBy:)(15LL, 10LL, v42, v44);
    uint64_t v108 = v47;
    unint64_t v49 = String.index(_:offsetBy:)(v47, -10LL, v42, v44);
    uint64_t v50 = String.subscript.getter(15LL, v48, v42, v44);
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v114 = 0LL;
    unint64_t v115 = 0xE000000000000000LL;
    uint64_t v57 = String.count.getter(3026478LL, 0xE300000000000000LL);
    uint64_t v58 = Substring.distance(from:to:)(v50, v52, v50, v52, v54, v56);
    BOOL v59 = __OFADD__(v57, v58);
    Swift::Int result = v57 + v58;
    if (v59)
    {
      __break(1u);
    }

    else
    {
      String.reserveCapacity(_:)(result);
      v111[0] = v50;
      v111[1] = v52;
      uint64_t v112 = v54;
      uint64_t v113 = v56;
      unint64_t v61 = sub_1000CED68();
      String.append<A>(contentsOf:)(v111, &type metadata for Substring, v61);
      v111[0] = 3026478LL;
      v111[1] = 0xE300000000000000LL;
      String.append<A>(contentsOf:)(v111, &type metadata for String, &protocol witness table for String);
      Swift::Int result = swift_bridgeObjectRelease(v56);
      if (4 * v109 >= v49 >> 14)
      {
        uint64_t v63 = v114;
        unint64_t v62 = v115;
        uint64_t v64 = String.subscript.getter(v49, v108, v42, v44);
        uint64_t v66 = v65;
        uint64_t v68 = v67;
        uint64_t v70 = v69;
        swift_bridgeObjectRelease(v44);
        uint64_t v114 = v63;
        unint64_t v115 = v62;
        v111[0] = v64;
        v111[1] = v66;
        uint64_t v112 = v68;
        uint64_t v113 = v70;
        swift_bridgeObjectRetain(v62);
        String.append<A>(contentsOf:)(v111, &type metadata for Substring, v61);
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v70);
        uint64_t v42 = v114;
        unint64_t v44 = v115;
LABEL_28:
        v111[0] = 0LL;
        v111[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(39LL);
        swift_bridgeObjectRelease(v111[1]);
        v111[0] = 0xD000000000000025LL;
        v111[1] = 0x80000001001D1EA0LL;
        v71._countAndFlagsBits = v42;
        v71._object = (void *)v44;
        String.append(_:)(v71);
        swift_bridgeObjectRelease(v44);
        uint64_t v72 = v111[0];
        uint64_t v73 = (void *)v111[1];
        v111[0] = v110;
        v111[1] = v13;
        swift_bridgeObjectRetain(v13);
        v74._countAndFlagsBits = v72;
        v74._object = v73;
        String.append(_:)(v74);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v73);
        uint64_t v36 = v111[0];
        unint64_t v13 = v111[1];
        goto LABEL_29;
      }
    }

    __break(1u);
    return result;
  }

  uint64_t v36 = v110;
LABEL_29:
  uint64_t v76 = v1[6];
  unint64_t v75 = v1[7];
  uint64_t v77 = HIBYTE(v75) & 0xF;
  if ((v75 & 0x2000000000000000LL) == 0) {
    uint64_t v77 = v76 & 0xFFFFFFFFFFFFLL;
  }
  if (v77)
  {
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease(v111[1]);
    v111[0] = 0xD000000000000011LL;
    v111[1] = 0x80000001001D1E20LL;
    swift_bridgeObjectRetain(v75);
    v78._countAndFlagsBits = v76;
    v78._object = (void *)v75;
    String.append(_:)(v78);
    swift_bridgeObjectRelease(v75);
    uint64_t v79 = v111[0];
    NSArray v80 = (void *)v111[1];
    v111[0] = v36;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v81._countAndFlagsBits = v79;
    v81._object = v80;
    String.append(_:)(v81);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v80);
    uint64_t v36 = v111[0];
    unint64_t v13 = v111[1];
  }

  uint64_t v82 = v1[8];
  if (v82)
  {
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease(v111[1]);
    v111[0] = 0xD000000000000016LL;
    v111[1] = 0x80000001001D1E40LL;
    uint64_t v114 = v82;
    v83._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    object = v83._object;
    String.append(_:)(v83);
    swift_bridgeObjectRelease(object);
    uint64_t v85 = v111[0];
    unint64_t v86 = (void *)v111[1];
    v111[0] = v36;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v87._countAndFlagsBits = v85;
    v87._object = v86;
    String.append(_:)(v87);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v86);
    uint64_t v36 = v111[0];
    unint64_t v13 = v111[1];
  }

  uint64_t v88 = v1[9];
  if (v88)
  {
    char v89 = *((_BYTE *)v1 + 80);
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    v90._object = (void *)0x80000001001D1E60LL;
    v90._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v90);
    uint64_t v114 = v88;
    LOBYTE(v115) = v89;
    _print_unlocked<A, B>(_:_:)( &v114,  v111,  &type metadata for DownloadType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v91 = v111[0];
    uint64_t v92 = (void *)v111[1];
    v111[0] = v36;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v93._countAndFlagsBits = v91;
    v93._object = v92;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v92);
    uint64_t v36 = v111[0];
    unint64_t v13 = v111[1];
  }

  uint64_t v94 = v1[11];
  if (v94)
  {
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    swift_bridgeObjectRelease(v111[1]);
    v111[0] = 0xD00000000000001ALL;
    v111[1] = 0x80000001001D1E80LL;
    uint64_t v114 = v94;
    v95._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    uint64_t v96 = v95._object;
    String.append(_:)(v95);
    swift_bridgeObjectRelease(v96);
    uint64_t v97 = v111[0];
    uint64_t v98 = (void *)v111[1];
    v111[0] = v36;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v99._countAndFlagsBits = v97;
    v99._object = v98;
    String.append(_:)(v99);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v98);
    uint64_t v36 = v111[0];
    unint64_t v13 = v111[1];
  }

  uint64_t v100 = v1[12];
  if (v100)
  {
    char v101 = *((_BYTE *)v1 + 104);
    v111[0] = 0LL;
    v111[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    v102._countAndFlagsBits = 0x726F72726520200ALL;
    v102._object = (void *)0xEE00203A65646F43LL;
    String.append(_:)(v102);
    uint64_t v114 = v100;
    LOBYTE(v115) = v101;
    _print_unlocked<A, B>(_:_:)( &v114,  v111,  &type metadata for ItemErrorCode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v103 = v111[0];
    id v104 = (void *)v111[1];
    v111[0] = v36;
    v111[1] = v13;
    swift_bridgeObjectRetain(v13);
    v105._countAndFlagsBits = v103;
    v105._object = v104;
    String.append(_:)(v105);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v104);
    uint64_t v36 = v111[0];
    unint64_t v13 = v111[1];
  }

  v111[0] = v36;
  v111[1] = v13;
  swift_bridgeObjectRetain(v13);
  v106._countAndFlagsBits = 32010LL;
  v106._object = (void *)0xE200000000000000LL;
  String.append(_:)(v106);
  swift_bridgeObjectRelease(v13);
  return v111[0];
}

void sub_1000C44B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v12 = a5;
  if (a3)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  NSString v14 = 0LL;
  if (a5) {
LABEL_3:
  }
    NSString v12 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a8) {
    uint64_t v15 = _convertErrorToNSError(_:)(a8);
  }
  else {
    uint64_t v15 = 0LL;
  }
  id v16 = (id)v15;
  (*(void (**)(uint64_t, uint64_t, NSString, NSString, uint64_t, uint64_t))(a9 + 16))(a9, a1, v14, v12, a6, a7);
}

void sub_1000C4584(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void *static CPLCKResourceDownloadOperation.streamOperation(for:key:downloadType:filename:timeRange:mediaRequestHints:completionBlock:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000CCEC4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000C45DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_1000BED3C(&qword_100291FA0);
  uint64_t v14 = type metadata accessor for RequestItem(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_100212550;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
  static Message.with(_:)(sub_1000CE7F8, v18);
  uint64_t result = swift_bridgeObjectRelease(*a1);
  *a1 = v15;
  return result;
}

void sub_1000C46F0( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v217 = a7;
  uint64_t v219 = a6;
  uint64_t v214 = a3;
  unint64_t v215 = a5;
  uint64_t v10 = type metadata accessor for CMTimeRange(0LL);
  __chkstk_darwin(v10);
  uint64_t v213 = (uint64_t)&v210 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v212 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  __chkstk_darwin(v212);
  v211 = (char *)&v210 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v210 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = UUID.init()(v15);
  uint64_t v19 = UUID.uuidString.getter(v18);
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v22 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v22));
  uint64_t v221 = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = *(void *)(a1 + v221);
    uint64_t v25 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    uint64_t v26 = swift_retain(v24);
    uint64_t v27 = sub_1000E5C5C(v26);
    uint64_t v28 = v24;
    uint64_t v22 = v221;
    swift_release(v28);
    uint64_t v29 = *(void *)(a1 + v22);
    *(void *)(a1 + v22) = v27;
    swift_release(v29);
  }

  uint64_t v30 = *(void *)(a1 + v22);
  swift_beginAccess(v30 + 16, v236, 1LL, 0LL);
  uint64_t v31 = *(void *)(v30 + 24);
  *(void *)(v30 + 16) = v19;
  *(void *)(v30 + 24) = v21;
  swift_bridgeObjectRelease(v31);
  id v32 = [a2 recordName];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v22)) & 1) == 0)
  {
    uint64_t v36 = *(void *)(a1 + v221);
    uint64_t v37 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    uint64_t v38 = swift_retain(v36);
    uint64_t v39 = sub_1000E5C5C(v38);
    uint64_t v40 = v36;
    uint64_t v22 = v221;
    swift_release(v40);
    uint64_t v41 = *(void *)(a1 + v22);
    *(void *)(a1 + v22) = v39;
    swift_release(v41);
  }

  uint64_t v42 = *(void *)(a1 + v22);
  swift_beginAccess(v42 + 32, v235, 1LL, 0LL);
  uint64_t v43 = *(void *)(v42 + 40);
  *(void *)(v42 + 32) = v33;
  *(void *)(v42 + 40) = v35;
  swift_bridgeObjectRelease(v43);
  id v220 = [a2 zoneID];
  id v44 = [v220 zoneName];
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  uint64_t v47 = v46;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v22)) & 1) == 0)
  {
    uint64_t v48 = *(void *)(a1 + v221);
    uint64_t v49 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    uint64_t v50 = swift_retain(v48);
    uint64_t v51 = sub_1000E5C5C(v50);
    uint64_t v52 = v48;
    uint64_t v22 = v221;
    swift_release(v52);
    uint64_t v53 = *(void *)(a1 + v22);
    *(void *)(a1 + v22) = v51;
    swift_release(v53);
  }

  uint64_t v218 = a1;
  uint64_t v54 = *(void *)(a1 + v22);
  swift_beginAccess(v54 + 64, v234, 1LL, 0LL);
  uint64_t v55 = *(void *)(v54 + 72);
  *(void *)(v54 + 64) = v45;
  *(void *)(v54 + 72) = v47;
  swift_bridgeObjectRelease(v55);
  id v56 = [v220 ownerName];
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  uint64_t v59 = v58;

  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  uint64_t v62 = v60;
  if (v57 == v61 && v59 == v60)
  {
    swift_bridgeObjectRelease(v59);
  }

  else
  {
    char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v59, v61, v60, 0LL);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v62);
    uint64_t v64 = v217;
    uint64_t v65 = v221;
    uint64_t v66 = v219;
    if ((v63 & 1) != 0) {
      goto LABEL_15;
    }
    id v67 = [v220 ownerName];
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    uint64_t v70 = v69;

    uint64_t v71 = v218;
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v218 + v65)) & 1) == 0)
    {
      uint64_t v72 = *(void *)(v71 + v221);
      uint64_t v73 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
      uint64_t v74 = swift_retain(v72);
      uint64_t v75 = sub_1000E5C5C(v74);
      uint64_t v76 = v72;
      uint64_t v65 = v221;
      swift_release(v76);
      uint64_t v77 = *(void *)(v71 + v65);
      *(void *)(v71 + v65) = v75;
      swift_release(v77);
    }

    uint64_t v78 = *(void *)(v71 + v65);
    swift_beginAccess(v78 + 80, v233, 1LL, 0LL);
    uint64_t v59 = *(void *)(v78 + 88);
    *(void *)(v78 + 80) = v68;
    *(void *)(v78 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v70;
  }

  uint64_t v64 = v217;
  uint64_t v66 = v219;
  swift_bridgeObjectRelease(v59);
  uint64_t v65 = v221;
LABEL_15:
  swift_bridgeObjectRetain(a4);
  uint64_t v79 = v218;
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v218 + v65)) & 1) == 0)
  {
    uint64_t v80 = *(void *)(v79 + v65);
    uint64_t v81 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
    uint64_t v82 = swift_retain(v80);
    uint64_t v83 = sub_1000E5C5C(v82);
    swift_release(v80);
    uint64_t v84 = *(void *)(v79 + v65);
    *(void *)(v79 + v65) = v83;
    swift_release(v84);
  }

  uint64_t v85 = *(void *)(v79 + v65);
  swift_beginAccess(v85 + 48, v232, 1LL, 0LL);
  uint64_t v86 = *(void *)(v85 + 56);
  *(void *)(v85 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v214;
  *(void *)(v85 + 56) = a4;
  swift_bridgeObjectRelease(v86);
  uint64_t v87 = v215;
  if (v215 >= 3) {
    goto LABEL_104;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v79 + v65)) & 1) == 0)
  {
    uint64_t v88 = *(void *)(v79 + v65);
    uint64_t v89 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
    uint64_t v90 = swift_retain(v88);
    uint64_t v91 = sub_1000E5C5C(v90);
    swift_release(v88);
    uint64_t v92 = *(void *)(v79 + v65);
    *(void *)(v79 + v65) = v91;
    swift_release(v92);
  }

  uint64_t v93 = *(void *)(v79 + v65);
  unint64_t v94 = swift_beginAccess(v93 + 96, v231, 1LL, 0LL);
  *(void *)(v93 + 96) = v87;
  *(_BYTE *)(v93 + 104) = 1;
  if (!v66) {
    goto LABEL_99;
  }
  if (*(void *)(v66 + 16))
  {
    unint64_t v94 = sub_100119098(0x707954616964656DLL, 0xEA00000000007365LL);
    if ((v95 & 1) != 0)
    {
      sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
      uint64_t v96 = sub_1000BED3C(&qword_100292028);
      unint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v96, 6LL);
      if ((v94 & 1) != 0)
      {
        uint64_t v97 = v228;
        if ((unint64_t)v228 >> 62)
        {
          if (v228 < 0) {
            unint64_t v106 = v228;
          }
          else {
            unint64_t v106 = v228 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v228);
          uint64_t v87 = _CocoaArrayWrapper.endIndex.getter(v106);
          if (v87) {
            goto LABEL_26;
          }
        }

        else
        {
          uint64_t v87 = *(void *)((v228 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          swift_bridgeObjectRetain(v228);
          if (v87)
          {
LABEL_26:
            if (v87 >= 1)
            {
              uint64_t v98 = 0LL;
              Swift::String v99 = (char *)&_swiftEmptyArrayStorage;
              do
              {
                if ((v97 & 0xC000000000000001LL) != 0) {
                  id v100 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v98, v97);
                }
                else {
                  id v100 = *(id *)(v97 + 8 * v98 + 32);
                }
                char v101 = v100;
                id v102 = [v100 integerValue];

                if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0) {
                  Swift::String v99 = sub_1000CB604(0LL, *((void *)v99 + 2) + 1LL, 1, v99);
                }
                unint64_t v104 = *((void *)v99 + 2);
                unint64_t v103 = *((void *)v99 + 3);
                if (v104 >= v103 >> 1) {
                  Swift::String v99 = sub_1000CB604((char *)(v103 > 1), v104 + 1, 1, v99);
                }
                ++v98;
                *((void *)v99 + 2) = v104 + 1;
                Swift::String v105 = &v99[16 * v104];
                *((void *)v105 + 4) = v102;
                v105[40] = (unint64_t)v102 < 3;
              }

              while (v87 != v98);
              goto LABEL_42;
            }

            __break(1u);
LABEL_104:
            type metadata accessor for CPLCKResourceDownloadType(0LL);
            v230[0] = v87;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v209, v230, v209, &type metadata for Int);
            __break(1u);
            return;
          }
        }

        Swift::String v99 = (char *)&_swiftEmptyArrayStorage;
LABEL_42:
        swift_bridgeObjectRelease_n(v97, 2LL);
        uint64_t v79 = v218;
        uint64_t v107 = v221;
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v218 + v221)) & 1) == 0)
        {
          uint64_t v108 = *(void *)(v79 + v107);
          uint64_t v109 = type metadata accessor for RequestItem._StorageClass(0LL);
          swift_allocObject(v109, *(unsigned int *)(v109 + 48), *(unsigned __int16 *)(v109 + 52));
          uint64_t v110 = swift_retain(v108);
          uint64_t v111 = sub_1000E5C5C(v110);
          swift_release(v108);
          uint64_t v112 = *(void *)(v79 + v107);
          *(void *)(v79 + v107) = v111;
          swift_release(v112);
        }

        swift_beginAccess(v113, &v222, 1LL, 0LL);
        uint64_t v114 = *v113;
        void *v113 = v99;
        unint64_t v94 = swift_bridgeObjectRelease(v114);
        uint64_t v64 = v217;
        uint64_t v65 = v107;
        uint64_t v66 = v219;
      }
    }
  }

  if (!*(void *)(v66 + 16)) {
    goto LABEL_57;
  }
  unint64_t v94 = sub_100119098(0x666F725063766568LL, 0xEB00000000656C69LL);
  if ((v115 & 1) == 0) {
    goto LABEL_57;
  }
  sub_1000CE838(*(void *)(v66 + 56) + 32 * v94, (uint64_t)v230);
  uint64_t v116 = sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
  unint64_t v94 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v116, 6LL);
  if ((v94 & 1) != 0)
  {
    id v117 = (id)v228;
    if (*(void *)(v66 + 16))
    {
      unint64_t v118 = sub_100119098(0x7265695463766568LL, 0xE800000000000000LL);
      if ((v119 & 1) != 0)
      {
        sub_1000CE838(*(void *)(v66 + 56) + 32 * v118, (uint64_t)v230);
        if ((swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v116, 6LL) & 1) != 0)
        {
          id v120 = (id)v228;
          if (!*(void *)(v66 + 16)
            || (unint64_t v121 = sub_100119098(0x6576654C63766568LL, 0xE90000000000006CLL), (v122 & 1) == 0)
            || (sub_1000CE838(*(void *)(v66 + 56) + 32 * v121, (uint64_t)v230),
                uint64_t v123 = swift_dynamicCast(&v228, v230, (char *)&type metadata for Any + 8, v116, 6LL),
                (v123 & 1) == 0))
          {

            uint64_t v79 = v218;
            goto LABEL_56;
          }

          id v124 = (id)v228;
          __chkstk_darwin(v123);
          *(&v210 - 4) = (uint64_t)v117;
          *(&v210 - 3) = (uint64_t)v120;
          *(&v210 - 2) = (uint64_t)v124;
          sub_1000BD35C( &qword_100292020,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
          uint64_t v125 = (uint64_t)v211;
          uint64_t v126 = v216;
          static Message.with(_:)(sub_1000CE874, &v210 - 6);
          uint64_t v216 = v126;
          uint64_t v127 = v218;
          RequestItem.videoProfileTierLevelInformation.setter(v125);

          uint64_t v79 = v127;
        }
      }
    }
  }

uint64_t sub_1000C57D4( void (*a1)(char *, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, char *a4, void (*a5)(void, void, void), uint64_t a6, void *a7, uint64_t a8)
{
  id v130 = a7;
  uint64_t v131 = a8;
  uint64_t v136 = a4;
  uint64_t v137 = a1;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v140 = *(void *)(v11 - 8);
  uint64_t v141 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v118 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  unint64_t v121 = (char *)&v117 - v14;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v138 = v15;
  uint64_t v139 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v120 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  char v122 = (char *)&v117 - v19;
  uint64_t v20 = sub_1000BED3C(&qword_100291F58);
  __chkstk_darwin(v20);
  uint64_t v129 = (uint64_t)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v127 = *(void *)(v22 - 8);
  uint64_t v128 = v22;
  __chkstk_darwin(v22);
  uint64_t v125 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for ResponseItem(0LL);
  uint64_t v133 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v134 = (uint64_t)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_1000BED3C(&qword_100291EF0);
  uint64_t v26 = __chkstk_darwin(v25);
  char v119 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v117 - v28;
  uint64_t v30 = sub_1000BED3C(&qword_100291EF8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v123 = (char *)&v117 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v117 - v33;
  uint64_t v35 = type metadata accessor for ResourceStreamResponse(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v135 = (uint64_t)&v117 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = sub_1000BED3C(&qword_100292010);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v117 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v117 - v42;
  if (qword_100291710 != -1) {
    swift_once(&qword_100291710, sub_1000C0ED0);
  }
  if (byte_100291E58 == 1)
  {
    unsigned int v132 = v29;
    uint64_t v117 = a6;
    id v124 = v34;
    uint64_t v44 = type metadata accessor for ResourceStreamRequest(0LL);
    uint64_t v45 = sub_1000BD35C( &qword_100292000,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
    Message.debugDescription.getter(v44, v45);
    uint64_t v47 = v46;
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    sub_1000CE7B4((uint64_t)v137, (uint64_t)v43, &qword_100292010);
    uint64_t v49 = a5;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v43, 1LL, v35) == 1)
    {
      sub_1000CEDAC((uint64_t)v43, &qword_100292010);
      NSString v50 = 0LL;
    }

    else
    {
      uint64_t v51 = sub_1000BD35C( &qword_100292018,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
      Message.debugDescription.getter(v35, v51);
      uint64_t v53 = v52;
      sub_1000CECE0((uint64_t)v43, type metadata accessor for ResourceStreamResponse);
      NSString v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v53);
    }

    uint64_t v54 = v136 + 16;
    if (a2) {
      uint64_t v55 = (void *)_convertErrorToNSError(_:)(a2);
    }
    else {
      uint64_t v55 = 0LL;
    }
    swift_beginAccess(v54, v142, 0LL, 0LL);
    uint64_t v56 = *v54;
    if (*v54)
    {
      swift_bridgeObjectRetain(*v54);
      v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v56);
    }

    else
    {
      v57.super.Class isa = 0LL;
    }

    a5 = v49;
    CPLTaskLogCKCodeRequestAndResponse(v48, v50, v55, v57.super.isa);

    uint64_t v34 = v124;
    uint64_t v29 = v132;
  }

  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v29, 1LL, 1LL, v141);
    swift_errorRetain(a2);
    a5(v34, v29, a2);
    id v58 = a2;
LABEL_18:
    swift_errorRelease(v58);
    sub_1000CEDAC((uint64_t)v29, &qword_100291EF0);
    return sub_1000CEDAC((uint64_t)v34, &qword_100291EF8);
  }

  sub_1000CE7B4((uint64_t)v137, (uint64_t)v41, &qword_100292010);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v41, 1LL, v35) == 1)
  {
    sub_1000CEDAC((uint64_t)v41, &qword_100292010);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v29, 1LL, 1LL, v141);
    id v59 = sub_1000BF390(0xD000000000000020LL, 0x80000001001D1C50LL, 150LL);
    a5(v34, v29, v59);
    id v58 = v59;
    goto LABEL_18;
  }

  uint64_t v61 = v135;
  sub_1000CEC9C((uint64_t)v41, v135, type metadata accessor for ResourceStreamResponse);
  uint64_t v62 = *(void *)(v61 + 8);
  if (!v62)
  {
    if (!*(void *)(*(void *)v61 + 16LL))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v29, 1LL, 1LL, v141);
      id v72 = sub_1000BF390(0xD00000000000001CLL, 0x80000001001D1CB0LL, 150LL);
      a5(v34, v29, v72);
      swift_errorRelease(v72);
      uint64_t v68 = (uint64_t)v29;
      goto LABEL_21;
    }

    uint64_t v69 = v134;
    sub_1000CEC58( *(void *)v61 + ((*(unsigned __int8 *)(v133 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80)),  v134,  type metadata accessor for ResponseItem);
    if (*(void *)(v69 + 96))
    {
      id v70 = sub_1000BF4C8(v69, v130);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v29, 1LL, 1LL, v141);
      a5(v34, v29, v70);
      swift_errorRelease(v70);
      uint64_t v71 = (uint64_t)v29;
LABEL_37:
      sub_1000CEDAC(v71, &qword_100291EF0);
      sub_1000CEDAC((uint64_t)v34, &qword_100291EF8);
      uint64_t v98 = v69;
LABEL_38:
      sub_1000CECE0(v98, type metadata accessor for ResponseItem);
      return sub_1000CECE0(v61, type metadata accessor for ResourceStreamResponse);
    }

    uint64_t v73 = v129;
    sub_1000CE7B4(v69 + *(int *)(v126 + 52), v129, &qword_100291F58);
    uint64_t v75 = v127;
    uint64_t v74 = v128;
    int v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v73, 1LL, v128);
    unsigned int v132 = v29;
    if (v76 == 1)
    {
      uint64_t v77 = v125;
      Ckcode_RecordTransport.init()();
      sub_1000CEDAC(v73, &qword_100291F58);
    }

    else
    {
      uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 32);
      uint64_t v77 = v125;
      v78(v125, v73, v74);
    }

    uint64_t v79 = v141;
    uint64_t v80 = sub_1000CE284(0LL, &qword_100291F68, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v81 = CKRecord.init(_:)(v77);
    if (v81)
    {
      uint64_t v82 = (void *)v81;
      uint64_t v83 = sub_1000CE284(0LL, &qword_100291F70, &OBJC_CLASS___CKAsset_ptr);
      CKRecordKeyValueSetting.subscript.getter( &v143,  0x7465737361LL,  0xE500000000000000LL,  v80,  v83,  &protocol witness table for CKAsset);
      uint64_t v84 = v143;
      if (v143)
      {
        id v124 = v34;
        NSString v85 = String._bridgeToObjectiveC()();
        id v86 = [v84 downloadURLWithFileName:v85];

        if (!v86)
        {
          uint64_t v94 = v138;
          uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56);
          uint64_t v90 = (uint64_t)v123;
          v93(v123, 1LL, 1LL, v138);
          goto LABEL_41;
        }

        uint64_t v87 = v120;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v86);

        uint64_t v88 = v139;
        uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v139 + 32);
        uint64_t v90 = (uint64_t)v123;
        uint64_t v91 = v87;
        uint64_t v92 = v138;
        v89(v123, v91, v138);
        uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
        v93((char *)v90, 0LL, 1LL, v92);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v90, 1LL, v92) == 1)
        {
          uint64_t v94 = v92;
LABEL_41:
          sub_1000CEDAC(v90, &qword_100291EF8);
          uint64_t v99 = (uint64_t)v124;
          v93(v124, 1LL, 1LL, v94);
          uint64_t v100 = (uint64_t)v132;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v132, 1LL, 1LL, v141);
          id v101 = sub_1000BF390(0xD000000000000024LL, 0x80000001001D1C80LL, 27LL);
          a5(v99, v100, v101);

          swift_errorRelease(v101);
          sub_1000CEDAC(v100, &qword_100291EF0);
          sub_1000CEDAC(v99, &qword_100291EF8);
LABEL_49:
          uint64_t v98 = v134;
          goto LABEL_38;
        }

        v89(v122, (char *)v90, v92);
        id v102 = [v84 downloadURLExpiration];
        if (v102)
        {
          unint64_t v103 = v102;
          unint64_t v104 = v118;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v106 = v140;
          uint64_t v105 = v141;
          uint64_t v107 = (uint64_t)v119;
          uint64_t v136 = *(char **)(v140 + 32);
          ((void (*)(char *, char *, uint64_t))v136)(v119, v104, v141);
          uint64_t v137 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
          v137((char *)v107, 0LL, 1LL, v105);
          int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1LL, v105);
          uint64_t v110 = v121;
          if (v108 != 1)
          {
            ((void (*)(char *, uint64_t, uint64_t))v136)(v121, v107, v105);
            uint64_t v111 = v137;
            goto LABEL_48;
          }

          uint64_t v111 = v137;
        }

        else
        {
          uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56);
          uint64_t v107 = (uint64_t)v119;
          v111(v119, 1LL, 1LL, v141);
          uint64_t v110 = v121;
        }

        v109.n128_u64[0] = 0x4082C00000000000LL;
        Date.init(timeIntervalSinceNow:)(v109);
        sub_1000CEDAC(v107, &qword_100291EF0);
LABEL_48:
        uint64_t v112 = v138;
        uint64_t v113 = (uint64_t)v124;
        (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v124, v122, v138);
        v93((char *)v113, 0LL, 1LL, v112);
        uint64_t v114 = (uint64_t)v132;
        char v115 = v110;
        uint64_t v116 = v141;
        (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v132, v115, v141);
        v111((char *)v114, 0LL, 1LL, v116);
        a5(v113, v114, 0LL);

        sub_1000CEDAC(v114, &qword_100291EF0);
        sub_1000CEDAC(v113, &qword_100291EF8);
        (*(void (**)(char *, uint64_t))(v140 + 8))(v121, v116);
        (*(void (**)(char *, uint64_t))(v139 + 8))(v122, v112);
        goto LABEL_49;
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
      uint64_t v95 = (uint64_t)v132;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v132, 1LL, 1LL, v141);
      id v97 = sub_1000BF390(0xD000000000000020LL, 0x80000001001D18C0LL, 27LL);
      a5(v34, v95, v97);
      swift_errorRelease(v97);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
      uint64_t v95 = (uint64_t)v132;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v132, 1LL, 1LL, v79);
      id v96 = sub_1000BF390(0xD000000000000022LL, 0x80000001001D1890LL, 25LL);
      a5(v34, v95, v96);
      swift_errorRelease(v96);
    }

    uint64_t v71 = v95;
    goto LABEL_37;
  }

  char v63 = *(_BYTE *)(v61 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v34, 1LL, 1LL, v138);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v29, 1LL, 1LL, v141);
  uint64_t v64 = v29;
  uint64_t v65 = *(void *)(v61 + 24);
  unint64_t v66 = *(void *)(v61 + 32);
  swift_bridgeObjectRetain(v66);
  id v67 = sub_1000C0204(v62, v63, v65, v66);
  swift_bridgeObjectRelease(v66);
  a5(v34, v64, v67);
  swift_errorRelease(v67);
  uint64_t v68 = (uint64_t)v64;
LABEL_21:
  sub_1000CEDAC(v68, &qword_100291EF0);
  sub_1000CEDAC((uint64_t)v34, &qword_100291EF8);
  return sub_1000CECE0(v61, type metadata accessor for ResourceStreamResponse);
}

void sub_1000C670C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_1000BED3C(&qword_100291EF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_100291EF8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v13, &qword_100291EF8);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    uint64_t v17 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }

  sub_1000CE7B4(a2, (uint64_t)v10, &qword_100291EF0);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1LL, v19) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v19);
  }

  if (a3) {
    a3 = (void *)_convertErrorToNSError(_:)(a3);
  }
  (*(void (**)(uint64_t, void *, Class, void *))(a4 + 16))(a4, v17, isa, a3);
}

uint64_t sub_1000C68B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1000BED3C(&qword_100291FA0);
  uint64_t v13 = type metadata accessor for RequestItem(0LL);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
        + *(void *)(*(void *)(v13 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_100212550;
  v16[2] = a2;
  v16[3] = a3;
  void v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
  static Message.with(_:)(sub_1000CE5AC, v16);
  uint64_t result = swift_bridgeObjectRelease(*a1);
  *a1 = v14;
  return result;
}

void sub_1000C69C0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v113 = a6;
  uint64_t v112 = a5;
  v111[1] = a4;
  id v123 = a3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = UUID.init()(v10);
  uint64_t v14 = UUID.uuidString.getter(v13);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v17 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
  {
    uint64_t v18 = *(void *)(a1 + v17);
    uint64_t v19 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    uint64_t v20 = swift_retain(v18);
    uint64_t v21 = sub_1000E5C5C(v20);
    swift_release(v18);
    uint64_t v22 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = v21;
    swift_release(v22);
  }

  uint64_t v23 = *(void *)(a1 + v17);
  swift_beginAccess(v23 + 16, v122, 1LL, 0LL);
  uint64_t v24 = *(void *)(v23 + 24);
  *(void *)(v23 + 16) = v14;
  *(void *)(v23 + 24) = v16;
  swift_bridgeObjectRelease(v24);
  id v25 = [a2 recordName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
  {
    uint64_t v29 = *(void *)(a1 + v17);
    uint64_t v30 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    uint64_t v31 = swift_retain(v29);
    uint64_t v32 = sub_1000E5C5C(v31);
    swift_release(v29);
    uint64_t v33 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = v32;
    swift_release(v33);
  }

  uint64_t v34 = *(void *)(a1 + v17);
  swift_beginAccess(v34 + 32, v121, 1LL, 0LL);
  uint64_t v35 = *(void *)(v34 + 40);
  *(void *)(v34 + 32) = v26;
  *(void *)(v34 + 40) = v28;
  swift_bridgeObjectRelease(v35);
  id v36 = [a2 zoneID];
  id v37 = [v36 zoneName];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v40 = v39;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
  {
    uint64_t v41 = *(void *)(a1 + v17);
    uint64_t v42 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    uint64_t v43 = swift_retain(v41);
    uint64_t v44 = sub_1000E5C5C(v43);
    swift_release(v41);
    uint64_t v45 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = v44;
    swift_release(v45);
  }

  uint64_t v46 = *(void *)(a1 + v17);
  swift_beginAccess(v46 + 64, v120, 1LL, 0LL);
  uint64_t v47 = *(void *)(v46 + 72);
  *(void *)(v46 + 64) = v38;
  *(void *)(v46 + 72) = v40;
  swift_bridgeObjectRelease(v47);
  id v48 = [v36 ownerName];
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  uint64_t v51 = v50;

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  uint64_t v54 = v52;
  if (v49 == v53 && v51 == v52)
  {
    swift_bridgeObjectRelease(v51);
  }

  else
  {
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v53, v52, 0LL);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v54);
    if ((v55 & 1) != 0) {
      goto LABEL_15;
    }
    id v56 = [v36 ownerName];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    uint64_t v58 = v57;

    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
    {
      uint64_t v59 = *(void *)(a1 + v17);
      uint64_t v60 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
      uint64_t v61 = swift_retain(v59);
      uint64_t v62 = sub_1000E5C5C(v61);
      swift_release(v59);
      uint64_t v63 = *(void *)(a1 + v17);
      *(void *)(a1 + v17) = v62;
      swift_release(v63);
    }

    uint64_t v64 = *(void *)(a1 + v17);
    swift_beginAccess(v64 + 80, v119, 1LL, 0LL);
    uint64_t v51 = *(void *)(v64 + 88);
    *(void *)(v64 + 80) = v40;
    *(void *)(v64 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v58;
  }

  swift_bridgeObjectRelease(v51);
LABEL_15:
  id v65 = [v123 identity];
  if (!v65)
  {
    __break(1u);
    goto LABEL_43;
  }

  unint64_t v66 = v65;
  id v67 = [v65 fingerPrint];

  if (!v67) {
    goto LABEL_22;
  }
  id v68 = CPLCloudKitFingerPrintFromDynamicFingerPrint(v67);
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  uint64_t v71 = v70;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
  {
    uint64_t v72 = *(void *)(a1 + v17);
    uint64_t v73 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    uint64_t v74 = swift_retain(v72);
    uint64_t v75 = sub_1000E5C5C(v74);
    swift_release(v72);
    uint64_t v76 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = v75;
    swift_release(v76);
  }

  uint64_t v77 = *(void *)(a1 + v17);
  swift_beginAccess(v77 + 112, v116, 1LL, 0LL);
  uint64_t v78 = *(void *)(v77 + 120);
  *(void *)(v77 + 112) = v69;
  *(void *)(v77 + 120) = v71;

  swift_bridgeObjectRelease(v78);
  if (qword_100291718 != -1) {
    swift_once(&qword_100291718, sub_1000C0EF4);
  }
  if ((byte_100291E59 & 1) == 0)
  {
    id v79 = [a2 recordName];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    uint64_t v81 = v80;

    uint64_t v82 = v114;
    uint64_t v83 = sub_1000C17A4((uint64_t)v36);
    if (v82)
    {
      swift_errorRelease(v82);
    }

    else
    {
      uint64_t v84 = v83;
      swift_bridgeObjectRelease(v81);
      if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
      {
        uint64_t v85 = *(void *)(a1 + v17);
        uint64_t v86 = type metadata accessor for RequestItem._StorageClass(0LL);
        swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
        uint64_t v87 = swift_retain(v85);
        uint64_t v88 = sub_1000E5C5C(v87);
        swift_release(v85);
        uint64_t v89 = *(void *)(a1 + v17);
        *(void *)(a1 + v17) = v88;
        swift_release(v89);
      }

      uint64_t v90 = *(void *)(a1 + v17);
      swift_beginAccess(v90 + 128, v115, 1LL, 0LL);
      uint64_t v81 = *(void *)(v90 + 128);
      *(void *)(v90 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = v84;
    }

    uint64_t v40 = v113;
    swift_bridgeObjectRelease(v81);
  }

  else
  {
LABEL_22:
    uint64_t v40 = v113;
  }

  id v91 = (id)sub_100089C34(v112);
  uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
  uint64_t v94 = v93;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v17)) & 1) == 0)
  {
    uint64_t v95 = *(void *)(a1 + v17);
    uint64_t v96 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
    uint64_t v97 = swift_retain(v95);
    uint64_t v98 = sub_1000E5C5C(v97);
    swift_release(v95);
    uint64_t v99 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = v98;
    swift_release(v99);
  }

  uint64_t v100 = *(void *)(a1 + v17);
  swift_beginAccess(v100 + 48, v118, 1LL, 0LL);
  uint64_t v101 = *(void *)(v100 + 56);
  *(void *)(v100 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v92;
  *(void *)(v100 + 56) = v94;
  swift_bridgeObjectRelease(v101);
  id v102 = [v123 resourceType];
  if (!v40) {
    goto LABEL_39;
  }
  if (v40 == 2)
  {
    Swift::UInt v103 = (Swift::UInt)v102;
    if (qword_100291708 != -1) {
      swift_once(&qword_100291708, sub_1000BEF0C);
    }
    if (sub_1000BF170(v103, qword_100291E50)) {
      uint64_t v40 = 2LL;
    }
    else {
      uint64_t v40 = 0LL;
    }
    goto LABEL_39;
  }

  if (v40 != 1)
  {
LABEL_43:
    type metadata accessor for CPLCKResourceDownloadType(0LL);
    v117[0] = v40;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v110, v117, v110, &type metadata for Int);
    __break(1u);
    return;
  }

uint64_t sub_1000C7134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BED3C(&qword_100291F60);
  __chkstk_darwin(v4);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = sub_1000BED3C(&qword_100291FD0);
  __chkstk_darwin(v7);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = type metadata accessor for ResponseItem(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000CE7B4(a1, (uint64_t)v6, &qword_100291F60);
  uint64_t v14 = type metadata accessor for ResourceDownloadResponse(0LL);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v6, 1LL, v14) == 1)
  {
    sub_1000CEDAC((uint64_t)v6, &qword_100291F60);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1LL, 1LL, v10);
    return sub_1000CEDAC((uint64_t)v9, &qword_100291FD0);
  }

  uint64_t v15 = *v6;
  swift_bridgeObjectRetain(*v6);
  sub_1000CECE0((uint64_t)v6, type metadata accessor for ResourceDownloadResponse);
  if (*(void *)(v15 + 16))
  {
    sub_1000CEC58( v15 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)),  (uint64_t)v9,  type metadata accessor for ResponseItem);
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v16, 1LL, v10);
  swift_bridgeObjectRelease(v15);
  uint64_t v18 = (BOOL *)(a2 + 16);
  sub_1000CEC9C((uint64_t)v9, (uint64_t)v13, type metadata accessor for ResponseItem);
  BOOL v19 = *((void *)v13 + 9) == 2LL;
  sub_1000CECE0((uint64_t)v13, type metadata accessor for ResponseItem);
  uint64_t result = swift_beginAccess(v18, v21, 1LL, 0LL);
  *uint64_t v18 = v19;
  return result;
}

void sub_1000C736C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, unint64_t, uint64_t, uint64_t, void, void), uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v15 = (_BYTE *)(a4 + 16);
  swift_beginAccess(a4 + 16, v39, 0LL, 0LL);
  if ((*(_BYTE *)(a4 + 16) & 1) == 0)
  {
    uint64_t v16 = (uint64_t *)(a5 + 16);
    swift_beginAccess(a5 + 16, v38, 0LL, 0LL);
    if (!*(void *)(a5 + 16))
    {
      if (a3)
      {
        swift_beginAccess(a5 + 16, v37, 1LL, 0LL);
        uint64_t v17 = *v16;
        *uint64_t v16 = a3;
        swift_errorRetain(a3);
        uint64_t v18 = v17;
LABEL_5:
        swift_errorRelease(v18);
        return;
      }

      if (a1)
      {
        uint64_t v19 = sub_1000CE284(0LL, &qword_100291F68, &OBJC_CLASS___CKRecord_ptr);
        uint64_t v20 = sub_1000CE284(0LL, &qword_100291F70, &OBJC_CLASS___CKAsset_ptr);
        id v21 = a1;
        CKRecordKeyValueSetting.subscript.getter( v37,  0x7465737361LL,  0xE500000000000000LL,  v19,  v20,  &protocol witness table for CKAsset);
        id v22 = v37[0];
        if (v37[0])
        {
          id v23 = [v37[0] assetContent];
          if (v23)
          {
            uint64_t v24 = v23;
            uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v27 = v26;

            swift_beginAccess(v15, v37, 1LL, 0LL);
            _BYTE *v15 = 1;
            sub_1000CE568(v25, v27);
            id v28 = [a8 identity];
            if (v28)
            {
              uint64_t v29 = v28;
              uint64_t v30 = (unsigned __int8 *)(a9 + 16);
              id v31 = [v28 fileUTI];

              if (v31)
              {
                uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
                uint64_t v34 = v33;
              }

              else
              {
                uint64_t v32 = 0LL;
                uint64_t v34 = 0LL;
              }

              swift_beginAccess(v30, &v36, 0LL, 0LL);
              a6(v25, v27, v32, v34, *v30, 0LL);
              swift_bridgeObjectRelease(v34);
              sub_1000CE2BC(v25, v27);
              sub_1000CE2BC(v25, v27);
            }

            else
            {
              __break(1u);
            }

            return;
          }

          id v35 = sub_1000BF390(0xD00000000000001CLL, 0x80000001001D1BC0LL, 27LL);
        }

        else
        {
          id v35 = sub_1000BF390(0xD000000000000020LL, 0x80000001001D18C0LL, 27LL);
        }

        swift_beginAccess(v16, v37, 1LL, 0LL);
        uint64_t v18 = *v16;
        *uint64_t v16 = (uint64_t)v35;
        goto LABEL_5;
      }
    }
  }

uint64_t sub_1000C764C( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void, void, void, void, void, void), uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v71 = a8;
  uint64_t v72 = a2;
  uint64_t v73 = a1;
  uint64_t v14 = type metadata accessor for ResponseItem(0LL);
  uint64_t v69 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v70 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for ResourceDownloadResponse(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_1000BED3C(&qword_100291F60);
  uint64_t v21 = __chkstk_darwin(v20);
  id v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v65 - v24;
  if (qword_100291710 != -1) {
    swift_once(&qword_100291710, sub_1000C0ED0);
  }
  unint64_t v26 = (_BYTE *)(a5 + 16);
  if (byte_100291E58 == 1)
  {
    uint64_t v66 = a4;
    uint64_t v68 = a7;
    uint64_t v27 = type metadata accessor for ResourceDownloadRequest(0LL);
    uint64_t v28 = sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
    Message.debugDescription.getter(v27, v28);
    uint64_t v30 = v29;
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    sub_1000CE7B4(v73, (uint64_t)v25, &qword_100291F60);
    int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v25, 1LL, v16);
    id v67 = v19;
    if (v32 == 1)
    {
      sub_1000CEDAC((uint64_t)v25, &qword_100291F60);
      NSString v33 = 0LL;
    }

    else
    {
      uint64_t v34 = sub_1000BD35C( &qword_100291F78,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
      Message.debugDescription.getter(v16, v34);
      id v35 = a6;
      uint64_t v37 = v36;
      sub_1000CECE0((uint64_t)v25, type metadata accessor for ResourceDownloadResponse);
      NSString v33 = String._bridgeToObjectiveC()();
      uint64_t v38 = v37;
      a6 = v35;
      swift_bridgeObjectRelease(v38);
    }

    uint64_t v39 = (void *)(v66 + 16);
    if (v72) {
      uint64_t v40 = (void *)_convertErrorToNSError(_:)(v72);
    }
    else {
      uint64_t v40 = 0LL;
    }
    swift_beginAccess(v39, v74, 0LL, 0LL);
    uint64_t v41 = *v39;
    if (*v39)
    {
      swift_bridgeObjectRetain(*v39);
      v42.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v41);
    }

    else
    {
      v42.super.Class isa = 0LL;
    }

    CPLTaskLogCKCodeRequestAndResponse(v31, v33, v40, v42.super.isa);

    uint64_t v19 = v67;
  }

  uint64_t result = swift_beginAccess(v26, v76, 0LL, 0LL);
  if ((*v26 & 1) == 0)
  {
    sub_1000CE7B4(v73, (uint64_t)v23, &qword_100291F60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v23, 1LL, v16) == 1)
    {
      sub_1000CEDAC((uint64_t)v23, &qword_100291F60);
      uint64_t v44 = v72;
      if (v72) {
        id v45 = v72;
      }
      else {
        id v45 = sub_1000BF390(0xD00000000000002CLL, 0x80000001001D1B40LL, 150LL);
      }
      swift_errorRetain(v44);
      a6(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, v45);
      return swift_errorRelease(v45);
    }

    else
    {
      uint64_t v46 = (void (*)(void, unint64_t, void, void, void, id))a6;
      sub_1000CEC9C((uint64_t)v23, (uint64_t)v19, type metadata accessor for ResourceDownloadResponse);
      uint64_t v47 = *((void *)v19 + 1);
      if (v47)
      {
        char v48 = v19[16];
        uint64_t v49 = (uint64_t)v19;
        uint64_t v50 = *((void *)v19 + 3);
        unint64_t v51 = *(void *)(v49 + 32);
        swift_bridgeObjectRetain(v51);
        id v52 = sub_1000C0204(v47, v48, v50, v51);
        swift_bridgeObjectRelease(v51);
        v46(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, v52);
        swift_errorRelease(v52);
        return sub_1000CECE0(v49, type metadata accessor for ResourceDownloadResponse);
      }

      uint64_t v53 = (id *)(v71 + 16);
      if (*(void *)(*(void *)v19 + 16LL))
      {
        uint64_t v54 = v70;
        sub_1000CEC58( *(void *)v19 + ((*(unsigned __int8 *)(v69 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80)),  v70,  type metadata accessor for ResponseItem);
        if (*(void *)(v54 + 96))
        {
          id v55 = (id)sub_100089C34(a10);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
          uint64_t v57 = v56;

          id v58 = sub_1000BF4C8(v54, a9);
          swift_bridgeObjectRelease(v57);
          swift_errorRetain(v58);
          v46(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, v58);
          swift_errorRelease(v58);
          swift_errorRelease(v58);
          sub_1000CECE0(v54, type metadata accessor for ResponseItem);
          return sub_1000CECE0((uint64_t)v19, type metadata accessor for ResourceDownloadResponse);
        }

        swift_beginAccess(v53, v75, 0LL, 0LL);
        id v61 = *v53;
        if (*v53)
        {
          id v62 = *v53;
        }

        else
        {
          uint64_t v64 = v72;
          if (v72) {
            id v62 = v72;
          }
          else {
            id v62 = sub_1000BF390(0xD00000000000001BLL, 0x80000001001D1B70LL, 150LL);
          }
          swift_errorRetain(v64);
          id v61 = 0LL;
        }

        swift_errorRetain(v61);
        a6(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, v62);
        swift_errorRelease(v62);
        sub_1000CECE0(v54, type metadata accessor for ResponseItem);
      }

      else
      {
        swift_beginAccess(v71 + 16, v75, 0LL, 0LL);
        id v59 = *v53;
        if (*v53)
        {
          id v60 = *v53;
        }

        else
        {
          uint64_t v63 = v72;
          if (v72) {
            id v60 = v72;
          }
          else {
            id v60 = sub_1000BF390(0xD000000000000028LL, 0x80000001001D1B90LL, 150LL);
          }
          swift_errorRetain(v63);
          id v59 = 0LL;
        }

        swift_errorRetain(v59);
        a6(0LL, 0xF000000000000000LL, 0LL, 0LL, 0LL, v60);
        swift_errorRelease(v60);
      }

      return sub_1000CECE0((uint64_t)v19, type metadata accessor for ResourceDownloadResponse);
    }
  }

  return result;
}

void sub_1000C7D94(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, uint64_t a7)
{
  NSString v10 = a4;
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  Class isa = 0LL;
  if (a4) {
LABEL_5:
  }
    NSString v10 = String._bridgeToObjectiveC()();
LABEL_6:
  if (a6) {
    uint64_t v12 = _convertErrorToNSError(_:)(a6);
  }
  else {
    uint64_t v12 = 0LL;
  }
  id v13 = (id)v12;
  (*(void (**)(uint64_t, Class, NSString, void))(a7 + 16))(a7, isa, v10, a5 & 1);
}

uint64_t sub_1000C7E50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UploadResource(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  NSString v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for UploadResourcesRequest(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *a2 = &_swiftEmptyArrayStorage;
  uint64_t v15 = UnknownStorage.init()(v12);
  *uint64_t v14 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()(v15);
  uint64_t v27 = a2;
  uint64_t result = sub_1000CEDE8((uint64_t)v14, (uint64_t)a2, type metadata accessor for UploadResourcesRequest);
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v17) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v19 = &_swiftEmptyArrayStorage;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    uint64_t v25 = v27;
    uint64_t result = swift_bridgeObjectRelease(*v27);
    void *v25 = v19;
    return result;
  }

  if (a1 < 0) {
    uint64_t v24 = a1;
  }
  else {
    uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v24);
  uint64_t result = swift_bridgeObjectRelease(a1);
  if (!v17) {
    goto LABEL_18;
  }
LABEL_3:
  if (v17 >= 1)
  {
    uint64_t v18 = 0LL;
    unint64_t v28 = a1 & 0xC000000000000001LL;
    uint64_t v19 = &_swiftEmptyArrayStorage;
    uint64_t v29 = a1;
    do
    {
      if (v28) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
      }
      else {
        id v20 = *(id *)(a1 + 8 * v18 + 32);
      }
      id v21 = v20;
      sub_1000C9D40(v21, (uint64_t)v10);
      sub_1000CEC58((uint64_t)v10, (uint64_t)v8, type metadata accessor for UploadResource);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0) {
        uint64_t v19 = (void *)sub_1000CB6F8( 0LL,  v19[2] + 1LL,  1,  v19,  &qword_100291FB8,  type metadata accessor for UploadResource);
      }
      unint64_t v23 = v19[2];
      unint64_t v22 = v19[3];
      if (v23 >= v22 >> 1) {
        uint64_t v19 = (void *)sub_1000CB6F8( v22 > 1,  v23 + 1,  1,  v19,  &qword_100291FB8,  type metadata accessor for UploadResource);
      }
      ++v18;
      v19[2] = v23 + 1;
      sub_1000CEC9C( (uint64_t)v8,  (uint64_t)v19 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v23,
        type metadata accessor for UploadResource);

      sub_1000CECE0((uint64_t)v10, type metadata accessor for UploadResource);
      a1 = v29;
    }

    while (v17 != v18);
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000C80F8(uint64_t a1, void *a2, void (*a3)(id, id))
{
  uint64_t v6 = sub_1000BED3C(&qword_100291F30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UploadResourcesResponse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CE7B4(a1, (uint64_t)v8, &qword_100291F30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
  {
    sub_1000CEC9C((uint64_t)v8, (uint64_t)v12, type metadata accessor for UploadResourcesResponse);
    id v14 = [objc_allocWithZone(CPLDerivativesFilter) init];
    uint64_t result = sub_1000C8348();
    uint64_t v16 = result;
    if ((unint64_t)result >> 62)
    {
      if (result >= 0) {
        result &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
      uint64_t v17 = result;
      if (result) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v17 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v17)
      {
LABEL_6:
        if (v17 < 1)
        {
          __break(1u);
          return result;
        }

        for (uint64_t i = 0LL; i != v17; ++i)
        {
          if ((v16 & 0xC000000000000001LL) != 0) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v16);
          }
          else {
            id v19 = *(id *)(v16 + 8 * i + 32);
          }
          id v20 = v19;
          [v14 addServerDropDerivativesRecipe:v19];
        }
      }
    }

    swift_bridgeObjectRelease(v16);
    id v21 = v14;
    a3(v14, 0LL);

    return sub_1000CECE0((uint64_t)v12, type metadata accessor for UploadResourcesResponse);
  }

  sub_1000CEDAC((uint64_t)v8, &qword_100291F30);
  if (a2) {
    id v13 = a2;
  }
  else {
    id v13 = sub_1000BF390(0xD000000000000038LL, 0x80000001001D17E0LL, 150LL);
  }
  swift_errorRetain(a2);
  a3(0LL, v13);
  return swift_errorRelease(v13);
}

uint64_t sub_1000C8348()
{
  uint64_t v1 = type metadata accessor for UploadResource(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(v0 + 8);
  uint64_t v6 = &_swiftEmptyArrayStorage;
  unint64_t v34 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v30 = *(void *)(v5 + 16);
  if (!v30) {
    return (uint64_t)v6;
  }
  uint64_t v29 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t result = swift_bridgeObjectRetain(v5);
  unint64_t v8 = 0LL;
  uint64_t v27 = v2;
  uint64_t v28 = v5;
  while (v8 < *(void *)(v5 + 16))
  {
    uint64_t result = sub_1000CEC58(v29 + *(void *)(v2 + 72) * v8, (uint64_t)v4, type metadata accessor for UploadResource);
    if ((v4[8] & 1) == 0 && (*(void *)v4 & 0x8000000000000000LL) != 0) {
      goto LABEL_19;
    }
    uint64_t v9 = *((void *)v4 + 2);
    uint64_t v10 = *((void *)v4 + 3);
    uint64_t v11 = *((void *)v4 + 4);
    if ((v4[40] & 1) == 0 && v11 < 0) {
      goto LABEL_20;
    }
    uint64_t v32 = *(void *)v4;
    uint64_t v12 = *((void *)v4 + 6);
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v31 = v9;
      NSString v33 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v10);
      specialized ContiguousArray.reserveCapacity(_:)(v13);
      sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
      id v14 = (Swift::Int *)(v12 + 32);
      do
      {
        Swift::Int v15 = *v14;
        v14 += 2;
        Class isa = NSNumber.init(integerLiteral:)(v15).super.super.isa;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v17 = v33[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, isa);
        specialized ContiguousArray._endMutation()(v18);
        --v13;
      }

      while (v13);
      uint64_t v6 = v33;
      uint64_t v2 = v27;
    }

    else
    {
      swift_bridgeObjectRetain(v10);
    }

    id v19 = objc_allocWithZone(&OBJC_CLASS___CPLDropDerivativesRecipe);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
    Class v21 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v6);
    id v22 = [v19 initWithSourceResourceType:v11 uti:v20 changeType:v32 droppingDerivativeTypes:v21];

    id v23 = v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v25 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v24 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    uint64_t v5 = v28;
    if (v25 >= v24 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1LL);
    }
    ++v8;
    uint64_t v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    specialized Array._endMutation()(v26);

    uint64_t result = sub_1000CECE0((uint64_t)v4, type metadata accessor for UploadResource);
    uint64_t v6 = &_swiftEmptyArrayStorage;
    if (v8 == v30)
    {
      swift_bridgeObjectRelease(v5);
      return v34;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void *static CPLCKResourceDownloadOperation.assetDownloadOperation(for:key:fingerPrint:downloadType:timeRange:completionBlock:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000CD988(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000C863C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = sub_1000BED3C(&qword_100291FA0);
  uint64_t v15 = type metadata accessor for RequestItem(0LL);
  uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
        + *(void *)(*(void *)(v15 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_100212550;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
  static Message.with(_:)(sub_1000CE238, v20);
  uint64_t result = swift_bridgeObjectRelease(*a1);
  *a1 = v16;
  return result;
}

void sub_1000C8758( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v104 = a8;
  unint64_t v103 = a7;
  uint64_t v102 = a5;
  v101[2] = a4;
  v101[1] = a3;
  uint64_t v11 = type metadata accessor for CMTimeRange(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = UUID.init()(v16);
  uint64_t v20 = UUID.uuidString.getter(v19);
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  uint64_t v23 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
  {
    uint64_t v24 = *(void *)(a1 + v23);
    uint64_t v25 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    uint64_t v26 = swift_retain(v24);
    uint64_t v27 = sub_1000E5C5C(v26);
    swift_release(v24);
    uint64_t v28 = *(void *)(a1 + v23);
    *(void *)(a1 + v23) = v27;
    swift_release(v28);
  }

  uint64_t v29 = *(void *)(a1 + v23);
  swift_beginAccess(v29 + 16, v111, 1LL, 0LL);
  uint64_t v30 = *(void *)(v29 + 24);
  *(void *)(v29 + 16) = v20;
  *(void *)(v29 + 24) = v22;
  swift_bridgeObjectRelease(v30);
  id v31 = [a2 recordName];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v34 = v33;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
  {
    uint64_t v35 = *(void *)(a1 + v23);
    uint64_t v36 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    uint64_t v37 = swift_retain(v35);
    uint64_t v38 = sub_1000E5C5C(v37);
    swift_release(v35);
    uint64_t v39 = *(void *)(a1 + v23);
    *(void *)(a1 + v23) = v38;
    swift_release(v39);
  }

  uint64_t v40 = *(void *)(a1 + v23);
  swift_beginAccess(v40 + 32, v110, 1LL, 0LL);
  uint64_t v41 = *(void *)(v40 + 40);
  *(void *)(v40 + 32) = v32;
  *(void *)(v40 + 40) = v34;
  swift_bridgeObjectRelease(v41);
  id v42 = [a2 zoneID];
  id v43 = [v42 zoneName];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  uint64_t v46 = v45;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
  {
    uint64_t v47 = *(void *)(a1 + v23);
    uint64_t v48 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    uint64_t v49 = swift_retain(v47);
    uint64_t v50 = sub_1000E5C5C(v49);
    swift_release(v47);
    uint64_t v51 = *(void *)(a1 + v23);
    *(void *)(a1 + v23) = v50;
    swift_release(v51);
  }

  uint64_t v52 = *(void *)(a1 + v23);
  swift_beginAccess(v52 + 64, v109, 1LL, 0LL);
  uint64_t v53 = *(void *)(v52 + 72);
  *(void *)(v52 + 64) = v44;
  *(void *)(v52 + 72) = v46;
  swift_bridgeObjectRelease(v53);
  id v54 = [v42 ownerName];
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  uint64_t v57 = v56;

  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  uint64_t v60 = v58;
  if (v55 == v59 && v57 == v58)
  {
    swift_bridgeObjectRelease(v57);
  }

  else
  {
    char v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v59, v58, 0LL);
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v60);
    if ((v61 & 1) != 0) {
      goto LABEL_15;
    }
    id v62 = [v42 ownerName];
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    uint64_t v65 = v64;

    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
    {
      uint64_t v66 = *(void *)(a1 + v23);
      uint64_t v67 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
      uint64_t v68 = swift_retain(v66);
      uint64_t v69 = sub_1000E5C5C(v68);
      swift_release(v66);
      uint64_t v70 = *(void *)(a1 + v23);
      *(void *)(a1 + v23) = v69;
      swift_release(v70);
    }

    uint64_t v71 = *(void *)(a1 + v23);
    swift_beginAccess(v71 + 80, v108, 1LL, 0LL);
    uint64_t v57 = *(void *)(v71 + 88);
    *(void *)(v71 + 80) = v63;
    *(void *)(v71 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v65;
  }

  swift_bridgeObjectRelease(v57);
LABEL_15:
  NSString v72 = String._bridgeToObjectiveC()();
  id v73 = CPLCloudKitFingerPrintFromDynamicFingerPrint(v72);

  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  uint64_t v76 = v75;

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
  {
    uint64_t v77 = *(void *)(a1 + v23);
    uint64_t v78 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
    uint64_t v79 = swift_retain(v77);
    uint64_t v80 = sub_1000E5C5C(v79);
    swift_release(v77);
    uint64_t v81 = *(void *)(a1 + v23);
    *(void *)(a1 + v23) = v80;
    swift_release(v81);
  }

  uint64_t v82 = *(void *)(a1 + v23);
  swift_beginAccess(v82 + 112, v107, 1LL, 0LL);
  uint64_t v83 = *(void *)(v82 + 120);
  *(void *)(v82 + 112) = v74;
  *(void *)(v82 + 120) = v76;
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRetain(a6);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
  {
    uint64_t v84 = *(void *)(a1 + v23);
    uint64_t v85 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
    uint64_t v86 = swift_retain(v84);
    uint64_t v87 = sub_1000E5C5C(v86);
    swift_release(v84);
    uint64_t v88 = *(void *)(a1 + v23);
    *(void *)(a1 + v23) = v87;
    swift_release(v88);
  }

  uint64_t v89 = *(void *)(a1 + v23);
  swift_beginAccess(v89 + 48, v106, 1LL, 0LL);
  uint64_t v90 = *(void *)(v89 + 56);
  *(void *)(v89 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v102;
  *(void *)(v89 + 56) = a6;
  swift_bridgeObjectRelease(v90);
  unint64_t v91 = v103;
  if (v103 >= 3)
  {
    type metadata accessor for CPLCKResourceDownloadType(0LL);
    v105[0] = v91;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v100, v105, v100, &type metadata for Int);
    __break(1u);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + v23)) & 1) == 0)
    {
      uint64_t v92 = *(void *)(a1 + v23);
      uint64_t v93 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
      uint64_t v94 = swift_retain(v92);
      uint64_t v95 = sub_1000E5C5C(v94);
      swift_release(v92);
      uint64_t v96 = *(void *)(a1 + v23);
      *(void *)(a1 + v23) = v95;
      swift_release(v96);
    }

    uint64_t v97 = *(void *)(a1 + v23);
    uint64_t v98 = swift_beginAccess(v97 + 96, v105, 1LL, 0LL);
    *(void *)(v97 + 96) = v91;
    *(_BYTE *)(v97 + 104) = 1;
    uint64_t v99 = v104;
    if ((CMTimeRange.isValid.getter(v98) & 1) != 0)
    {
      sub_1000C0804(v99, (uint64_t)v13);
      RequestItem.timeRange.setter((uint64_t)v13);
    }
  }

void *sub_1000C8D58(void *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (char **)(a2 + 16);
    id v3 = [result requestUUID];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v6 = v5;

    swift_beginAccess(v2, v12, 1LL, 0LL);
    uint64_t v7 = *v2;
    if (*v2)
    {
      swift_bridgeObjectRetain(v6);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      void *v2 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v7 = sub_1000CB504(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
        void *v2 = v7;
      }

      unint64_t v10 = *((void *)v7 + 2);
      unint64_t v9 = *((void *)v7 + 3);
      if (v10 >= v9 >> 1)
      {
        uint64_t v7 = sub_1000CB504((char *)(v9 > 1), v10 + 1, 1, v7);
        void *v2 = v7;
      }

      *((void *)v7 + 2) = v10 + 1;
      uint64_t v11 = &v7[16 * v10];
      *((void *)v11 + 4) = v4;
      *((void *)v11 + 5) = v6;
    }

    return (void *)swift_bridgeObjectRelease(v6);
  }

  return result;
}

uint64_t sub_1000C8E58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void), uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v90 = a7;
  uint64_t v91 = a8;
  uint64_t v93 = a4;
  uint64_t v94 = a1;
  uint64_t v84 = type metadata accessor for URL(0LL);
  uint64_t v82 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v81 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000BED3C(&qword_100291EF8);
  __chkstk_darwin(v12);
  uint64_t v83 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100291F58);
  __chkstk_darwin(v14);
  uint64_t v89 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v87 = *(void *)(v16 - 8);
  uint64_t v88 = v16;
  __chkstk_darwin(v16);
  uint64_t v85 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for ResponseItem(0LL);
  uint64_t v92 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for ResourceDownloadResponse(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_1000BED3C(&qword_100291F60);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v78 - v28;
  if (qword_100291710 != -1) {
    swift_once(&qword_100291710, sub_1000C0ED0);
  }
  if (byte_100291E58 == 1)
  {
    uint64_t v78 = a6;
    uint64_t v80 = a5;
    uint64_t v30 = type metadata accessor for ResourceDownloadRequest(0LL);
    uint64_t v31 = sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
    Message.debugDescription.getter(v30, v31);
    uint64_t v33 = v32;
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    sub_1000CE7B4(v94, (uint64_t)v29, &qword_100291F60);
    int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v29, 1LL, v20);
    uint64_t v79 = v19;
    if (v35 == 1)
    {
      sub_1000CEDAC((uint64_t)v29, &qword_100291F60);
      NSString v36 = 0LL;
    }

    else
    {
      uint64_t v37 = sub_1000BD35C( &qword_100291F78,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
      Message.debugDescription.getter(v20, v37);
      uint64_t v38 = v23;
      uint64_t v40 = v39;
      sub_1000CECE0((uint64_t)v29, type metadata accessor for ResourceDownloadResponse);
      NSString v36 = String._bridgeToObjectiveC()();
      uint64_t v41 = v40;
      uint64_t v23 = v38;
      swift_bridgeObjectRelease(v41);
    }

    id v42 = (void *)(v93 + 16);
    if (a2) {
      id v43 = (void *)_convertErrorToNSError(_:)(a2);
    }
    else {
      id v43 = 0LL;
    }
    swift_beginAccess(v42, v95, 0LL, 0LL);
    uint64_t v44 = *v42;
    if (*v42)
    {
      swift_bridgeObjectRetain(*v42);
      v45.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v44);
    }

    else
    {
      v45.super.Class isa = 0LL;
    }

    CPLTaskLogCKCodeRequestAndResponse(v34, v36, v43, v45.super.isa);

    uint64_t v19 = v79;
    a5 = v80;
  }

  if (a2) {
    return a5(0LL, a2);
  }
  sub_1000CE7B4(v94, (uint64_t)v27, &qword_100291F60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v27, 1LL, v20) == 1)
  {
    sub_1000CEDAC((uint64_t)v27, &qword_100291F60);
    id v47 = sub_1000BF390(0xD000000000000022LL, 0x80000001001D1860LL, 150LL);
    a5(0LL, v47);
    return swift_errorRelease(v47);
  }

  sub_1000CEC9C((uint64_t)v27, (uint64_t)v23, type metadata accessor for ResourceDownloadResponse);
  uint64_t v48 = *((void *)v23 + 1);
  if (!v48)
  {
    if (!*(void *)(*(void *)v23 + 16LL))
    {
      uint64_t v55 = v23;
      id v57 = sub_1000BF390(0xD00000000000001ELL, 0x80000001001D1910LL, 150LL);
      a5(0LL, v57);
      swift_errorRelease(v57);
      goto LABEL_24;
    }

    sub_1000CEC58( *(void *)v23 + ((*(unsigned __int8 *)(v92 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80)),  (uint64_t)v19,  type metadata accessor for ResponseItem);
    if (*((void *)v19 + 12))
    {
      uint64_t v55 = v23;
      id v56 = sub_1000BF4C8((uint64_t)v19, v90);
      a5(0LL, v56);
      swift_errorRelease(v56);
      sub_1000CECE0((uint64_t)v19, type metadata accessor for ResponseItem);
LABEL_24:
      uint64_t v54 = (uint64_t)v55;
      return sub_1000CECE0(v54, type metadata accessor for ResourceDownloadResponse);
    }

    uint64_t v58 = v89;
    sub_1000CE7B4((uint64_t)&v19[*(int *)(v86 + 52)], v89, &qword_100291F58);
    uint64_t v60 = v87;
    uint64_t v59 = v88;
    char v61 = v23;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v58, 1LL, v88) == 1)
    {
      id v62 = v85;
      Ckcode_RecordTransport.init()();
      sub_1000CEDAC(v58, &qword_100291F58);
    }

    else
    {
      id v62 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v85, v58, v59);
    }

    uint64_t v63 = sub_1000CE284(0LL, &qword_100291F68, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v64 = CKRecord.init(_:)(v62);
    if (!v64)
    {
      id v75 = sub_1000BF390(0xD000000000000022LL, 0x80000001001D1890LL, 25LL);
      a5(0LL, v75);
      swift_errorRelease(v75);
LABEL_38:
      sub_1000CECE0((uint64_t)v19, type metadata accessor for ResponseItem);
      uint64_t v54 = (uint64_t)v61;
      return sub_1000CECE0(v54, type metadata accessor for ResourceDownloadResponse);
    }

    uint64_t v65 = (void *)v64;
    uint64_t v66 = sub_1000CE284(0LL, &qword_100291F70, &OBJC_CLASS___CKAsset_ptr);
    CKRecordKeyValueSetting.subscript.getter( v96,  0x7465737361LL,  0xE500000000000000LL,  v63,  v66,  &protocol witness table for CKAsset);
    id v67 = v96[0];
    if (v96[0])
    {
      id v68 = [v96[0] fileURL];
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = v81;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v68);

        uint64_t v72 = v82;
        uint64_t v71 = (uint64_t)v83;
        uint64_t v73 = v84;
        (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v83, v70, v84);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v71, 0LL, 1LL, v73);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v71, 1LL, v73) != 1)
        {
          sub_1000CEDAC(v71, &qword_100291EF8);
          id v74 = v67;
          a5(v67, 0LL);

LABEL_35:
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t v71 = (uint64_t)v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v83, 1LL, 1LL, v84);
      }

      sub_1000CEDAC(v71, &qword_100291EF8);
      id v77 = sub_1000BF390(0xD00000000000001DLL, 0x80000001001D18F0LL, 27LL);
      a5(0LL, v77);

      swift_errorRelease(v77);
      goto LABEL_38;
    }

    id v76 = sub_1000BF390(0xD000000000000020LL, 0x80000001001D18C0LL, 27LL);
    a5(0LL, v76);
    swift_errorRelease(v76);
    goto LABEL_35;
  }

  uint64_t v49 = v23;
  char v50 = v23[16];
  uint64_t v51 = *((void *)v49 + 3);
  unint64_t v52 = *((void *)v49 + 4);
  swift_bridgeObjectRetain(v52);
  id v53 = sub_1000C0204(v48, v50, v51, v52);
  swift_bridgeObjectRelease(v52);
  a5(0LL, v53);
  swift_errorRelease(v53);
  uint64_t v54 = (uint64_t)v49;
  return sub_1000CECE0(v54, type metadata accessor for ResourceDownloadResponse);
}

void sub_1000C97EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000C9848(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, id))
{
  uint64_t v6 = sub_1000BED3C(&qword_100291F30);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UploadResourcesResponse(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v25 - v14;
  sub_1000CE7B4(a1, (uint64_t)v8, &qword_100291F30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_1000CEDAC((uint64_t)v8, &qword_100291F30);
    if (a2) {
      id v16 = a2;
    }
    else {
      id v16 = sub_1000BF390(0xD000000000000038LL, 0x80000001001D17E0LL, 150LL);
    }
    swift_errorRetain(a2);
    a3(0LL, 0LL, v16);
    return swift_errorRelease(v16);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v8, (uint64_t)v15, type metadata accessor for UploadResourcesResponse);
    sub_1000CEC58((uint64_t)v15, (uint64_t)v13, type metadata accessor for UploadResourcesResponse);
    uint64_t v17 = String.init<A>(describing:)(v13, v9);
    uint64_t v19 = v18;
    v26[2] = v17;
    v26[3] = v18;
    v26[0] = 0xD000000000000017LL;
    v26[1] = 0x80000001001D1820LL;
    v25[0] = 0LL;
    v25[1] = 0xE000000000000000LL;
    unint64_t v20 = sub_1000CDFC0();
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v26,  v25,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v20,  v20,  v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease(v19);
    a3(v21, v23, 0LL);
    swift_bridgeObjectRelease(v23);
    return sub_1000CECE0((uint64_t)v15, type metadata accessor for UploadResourcesResponse);
  }

id sub_1000C9AB4( int a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v10 + 16) = v9;
  uint64_t v11 = (void *)a6(a5, v10);
  swift_release(v10);
  return v11;
}

void sub_1000C9B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0LL;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  NSString v6 = String._bridgeToObjectiveC()();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

id CPLCKResourceDownloadOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPLCKResourceDownloadOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t static CKOperation.cplOperationClassDescription()()
{
  uint64_t v0 = sub_1000BED3C(&qword_100291E60);
  return String.init<A>(describing:)(&v2, v0);
}

Swift::String __swiftcall CKOperation.cplOperationClassDescription()()
{
  uint64_t v4 = ((uint64_t (*)())swift_getObjectType)();
  uint64_t v0 = sub_1000BED3C(&qword_100291E60);
  uint64_t v1 = String.init<A>(describing:)(&v4, v0);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

unint64_t sub_1000C9D40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UploadResource(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(void *)(a2 + 32) = 0LL;
  *(_BYTE *)(a2 + 40) = 1;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  uint64_t v8 = UnknownStorage.init()(v5);
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  *((void *)v7 + 2) = 0LL;
  *((void *)v7 + 3) = 0xE000000000000000LL;
  *((void *)v7 + 4) = 0LL;
  v7[40] = 1;
  *((void *)v7 + 6) = &_swiftEmptyArrayStorage;
  UnknownStorage.init()(v8);
  sub_1000CEDE8((uint64_t)v7, a2, type metadata accessor for UploadResource);
  unint64_t result = (unint64_t)[a1 changeType];
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = result < 3;
  id v10 = [a1 uti];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v14 = v13;

    swift_bridgeObjectRelease(*(void *)(a2 + 24));
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v14;
  }

  unint64_t result = (unint64_t)[a1 sourceResourceType];
  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_30;
  }
  sub_1000E64DC();
  if ((v16 & 0x100) == 0)
  {
    *(void *)(a2 + 32) = v15;
    *(_BYTE *)(a2 + 40) = v16 & 1;
  }

  id v17 = [a1 derivativeTypes];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = sub_1000CE284(0LL, &qword_100291FC0, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);
  }

  else
  {
    uint64_t v20 = (uint64_t)&_swiftEmptyArrayStorage;
    if (!((unint64_t)&_swiftEmptyArrayStorage >> 62))
    {
LABEL_9:
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v21) {
        goto LABEL_10;
      }
LABEL_27:
      swift_bridgeObjectRelease(v20);

      uint64_t v23 = &_swiftEmptyArrayStorage;
LABEL_28:
      unint64_t result = swift_bridgeObjectRelease(*(void *)(a2 + 48));
      *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v23;
      return result;
    }
  }

  if (v20 < 0) {
    uint64_t v34 = v20;
  }
  else {
    uint64_t v34 = v20 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v20);
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v20);
  if (!v21) {
    goto LABEL_27;
  }
LABEL_10:
  uint64_t v38 = &_swiftEmptyArrayStorage;
  unint64_t result = (unint64_t)sub_10011ABC8(0LL, v21 & ~(v21 >> 63), 0);
  if ((v21 & 0x8000000000000000LL) == 0)
  {
    id v36 = a1;
    uint64_t v37 = a2;
    uint64_t v22 = 0LL;
    uint64_t v23 = v38;
    do
    {
      if ((v20 & 0xC000000000000001LL) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
      }
      else {
        id v24 = *(id *)(v20 + 8 * v22 + 32);
      }
      uint64_t v25 = v24;
      [v24 integerValue];
      sub_1000E64DC();
      uint64_t v27 = v26;
      __int16 v29 = v28;

      if ((v29 & 0x100) != 0) {
        uint64_t v30 = 0LL;
      }
      else {
        uint64_t v30 = v27;
      }
      uint64_t v38 = v23;
      unint64_t v32 = v23[2];
      unint64_t v31 = v23[3];
      if (v32 >= v31 >> 1)
      {
        sub_10011ABC8((char *)(v31 > 1), v32 + 1, 1);
        uint64_t v23 = v38;
      }

      ++v22;
      void v23[2] = v32 + 1;
      uint64_t v33 = &v23[2 * v32];
      v33[4] = v30;
      *((_BYTE *)v33 + 40) = (v29 & 0x101) != 0;
    }

    while (v21 != v22);
    swift_bridgeObjectRelease(v20);

    a2 = v37;
    goto LABEL_28;
  }

uint64_t sub_1000CA074(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v14, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    void *v2 = 0x8000000000000000LL;
    sub_1000CA8C0(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v2;
    void *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v9 + 8 * v8) != a2);
  }

  uint64_t result = 0LL;
  a2 = *(void *)(*(void *)(*v2 + 48LL) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000CA190(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000CAA0C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  void *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

Swift::Int sub_1000CA33C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000BED3C(&qword_100291FE0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    __int16 v29 = v2;
    int64_t v7 = 0LL;
    Swift::Int v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *Swift::Int v8 = -1LL << v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

Swift::Int sub_1000CA5E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000BED3C(&qword_100292038);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    unint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_1000CA8C0(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CA33C(v8);
  }

  else
  {
    if (v7 > v6)
    {
      Swift::Int result = (uint64_t)sub_1000CABA4();
      goto LABEL_14;
    }

    sub_1000CAEE8(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  Swift::Int result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for CPLResourceType(0LL);
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_1000CAA0C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  Swift::UInt v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000CA5E4(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_1000CAD38();
      goto LABEL_22;
    }

    sub_1000CB160(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    BOOL v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *sub_1000CABA4()
{
  uint64_t v1 = v0;
  sub_1000BED3C(&qword_100291FE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1000CAD38()
{
  uint64_t v1 = v0;
  sub_1000BED3C(&qword_100292038);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1000CAEE8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000BED3C(&qword_100291FE0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    Swift::Int *v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        BOOL v29 = [v54 commitStagedChangesForScopeWithIdentifier:v33 error:v30];

        char v24 = v53;
        if (!v29) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
  }

  uint64_t v10 = 0LL;
LABEL_42:
  if (!_CPLSilentLogging)
  {
    uint64_t v40 = sub_10015409C();
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      id v42 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v49 = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "End of %@ initialization", buf, 0xCu);
    }
  }

Swift::Int sub_1000CB160(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000BED3C(&qword_100292038);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

char *sub_1000CB40C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000BED3C(&qword_100291FE8);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000CB504(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000BED3C(&qword_100291F50);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000CB604(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000BED3C(&qword_100292030);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  size_t v16 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, v16);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_1000CB6F8( size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    int64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_1000BED3C(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  int64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  Swift::Int result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_29;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  uint64_t v20 = a6(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (char *)v18 + v22;
  uint64_t v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }

  swift_bridgeObjectRelease(a4);
  return (size_t)v18;
}

uint64_t sub_1000CB86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100119098(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10011A3F4();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_1000CBA0C(v7, v10);
  uint64_t v12 = *v3;
  uint64_t *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1000CB938(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_1001190FC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10011A5A4();
    uint64_t v8 = v12;
  }

  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 16 * v5);
  sub_1000CBBE0(v5, v8);
  uint64_t v10 = *v2;
  uint64_t *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

unint64_t sub_1000CBA0C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            _OWORD *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          int64_t v18 = (void *)(v17 + 8 * v3);
          unint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *int64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void sub_1000CBBE0(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            int64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

uint64_t sub_1000CBD90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for CPLResourceType(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000BD35C( &qword_100291FD8,  (uint64_t (*)(uint64_t))type metadata accessor for CPLResourceType,  (uint64_t)&unk_100213144);
  uint64_t result = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v7 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v8 = *v7++;
      sub_1000CA074(&v9, v8);
      --v2;
    }

    while (v2);
    return v10;
  }

  return result;
}

Swift::Int sub_1000CBE20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000BED3C(&qword_100291FE0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v19, *(void *)(v3 + 40));
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1LL << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1LL << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1LL << v10;
          if ((v12 & (1LL << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }

      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1LL);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1000CBF60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v143 = a8;
  uint64_t v146 = a7;
  uint64_t v145 = a6;
  uint64_t v139 = a5;
  uint64_t v138 = a4;
  uint64_t v156 = a3;
  uint64_t v136 = type metadata accessor for ResourceDownloadRequest(0LL);
  uint64_t v140 = *(void *)(v136 - 8);
  uint64_t v11 = __chkstk_darwin(v136);
  uint64_t v142 = (uint64_t)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = v12;
  __chkstk_darwin(v11);
  uint64_t v148 = (uint64_t)&v135 - v13;
  uint64_t v155 = type metadata accessor for RequestItem(0LL);
  uint64_t v154 = *(void *)(v155 - 8);
  uint64_t v14 = __chkstk_darwin(v155);
  uint64_t v164 = (uint64_t)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v163 = (uint64_t)&v135 - v16;
  unint64_t v17 = a1 & 0xC000000000000001LL;
  uint64_t v147 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v19 = __CocoaDictionary.count.getter(v18);
  }

  else
  {
    uint64_t v19 = *(void *)(a1 + 16);
  }

  uint64_t v20 = swift_allocObject(&unk_100244280, 24LL, 7LL);
  uint64_t v21 = sub_1000CE284(0LL, &qword_100291F00, &OBJC_CLASS___CKRecordID_ptr);
  unint64_t v22 = sub_1000CDF00();
  uint64_t v23 = Dictionary.init(minimumCapacity:)(v19, v21, &type metadata for String, v22);
  uint64_t v160 = v20;
  *(void *)(v20 + 16) = v23;
  uint64_t v24 = swift_allocObject(&unk_1002442A8, 24LL, 7LL);
  uint64_t v150 = v21;
  uint64_t v25 = Dictionary.init(minimumCapacity:)(v19, &type metadata for String, v21, &protocol witness table for String);
  uint64_t v159 = v24;
  *(void *)(v24 + 16) = v25;
  uint64_t v26 = swift_allocObject(&unk_1002442D0, 24LL, 7LL);
  uint64_t v27 = type metadata accessor for ResponseItem(0LL);
  uint64_t v28 = Dictionary.init(minimumCapacity:)(v19, &type metadata for String, v27, &protocol witness table for String);
  uint64_t v144 = v26;
  *(void *)(v26 + 16) = v28;
  size_t v172 = sub_1000CB6F8( 0LL,  v19 & ~(v19 >> 63),  0,  &_swiftEmptyArrayStorage,  &qword_100291FA0,  type metadata accessor for RequestItem);
  id v29 = (id)sub_100089C34(a2);
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v157 = v31;
  uint64_t v158 = v30;

  uint64_t v171 = Set.init(minimumCapacity:)(v19, &type metadata for String, &protocol witness table for String);
  if (v17)
  {
    uint64_t v32 = v147;
    if (v147 < 0) {
      uint64_t v33 = v147;
    }
    else {
      uint64_t v33 = v147 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v34 = __CocoaDictionary.makeIterator()(v33);
    uint64_t v153 = 0LL;
    uint64_t v35 = 0LL;
    unint64_t v36 = 0LL;
    unint64_t v37 = v34 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v32 = v147;
    uint64_t v38 = -1LL << *(_BYTE *)(v147 + 32);
    uint64_t v35 = ~v38;
    uint64_t v39 = *(void *)(v147 + 64);
    uint64_t v153 = v147 + 64;
    uint64_t v40 = -v38;
    if (v40 < 64) {
      uint64_t v41 = ~(-1LL << v40);
    }
    else {
      uint64_t v41 = -1LL;
    }
    unint64_t v36 = v41 & v39;
    unint64_t v37 = v147;
  }

  uint64_t v137 = a9;
  uint64_t v42 = swift_bridgeObjectRetain(v32);
  uint64_t v43 = 0LL;
  uint64_t v165 = 0LL;
  uint64_t v151 = v37 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v152 = (unint64_t)(v35 + 64) >> 6;
  uint64_t v149 = (char *)&type metadata for Swift.AnyObject + 8;
  unint64_t v161 = v37;
  uint64_t v162 = v35;
  if ((v37 & 0x8000000000000000LL) == 0) {
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v44 = __CocoaDictionary.Iterator.next()(v42);
  if (!v44) {
    goto LABEL_50;
  }
  uint64_t v46 = v44;
  uint64_t v47 = v45;
  uint64_t v168 = v44;
  swift_unknownObjectRetain(v44);
  uint64_t v48 = v149;
  swift_dynamicCast(aBlock, &v168, v149, v150, 7LL);
  id v49 = (id)aBlock[0];
  swift_unknownObjectRelease(v46);
  uint64_t v168 = v47;
  uint64_t v50 = sub_1000CE284(0LL, &qword_100291F08, &OBJC_CLASS___CPLEngineResourceDownloadTask_ptr);
  swift_unknownObjectRetain(v47);
  swift_dynamicCast(aBlock, &v168, v48, v50, 7LL);
  id v51 = (id)aBlock[0];
  swift_unknownObjectRelease(v47);
  int64_t v52 = v43;
  uint64_t v53 = v36;
  if (!v49) {
    goto LABEL_50;
  }
  while (1)
  {
    unint64_t v167 = v53;
    id v59 = v51;
    uint64_t v19 = (uint64_t)v49;
    id v60 = [v59 taskIdentifier];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    unint64_t v63 = v62;

    uint64_t v64 = sub_1000C09E8(v61, v63, &v171);
    uint64_t v66 = v65;
    swift_bridgeObjectRelease(v63);
    id v67 = [v59 cloudResource];
    if (!v67)
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      return;
    }

    id v68 = v67;
    id v69 = [v67 identity];
    if (!v69) {
      goto LABEL_57;
    }
    uint64_t v70 = v69;
    uint64_t v166 = v52;
    id v71 = [v69 fingerPrint];

    if (!v71) {
      goto LABEL_58;
    }
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    uint64_t v74 = v73;

    id v75 = [v59 cloudRecord];
    if (v75)
    {
      id v76 = (id)v19;
      swift_bridgeObjectRetain(v66);
      uint64_t v77 = v160;
      uint64_t v78 = *(void *)(v160 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v78);
      aBlock[0] = v78;
      *(void *)(v77 + 16) = 0x8000000000000000LL;
      sub_10011A0EC(v64, v66, v76, isUniquelyReferenced_nonNull_native);
      uint64_t v80 = *(void *)(v77 + 16);
      *(void *)(v77 + 16) = aBlock[0];

      swift_bridgeObjectRelease(v80);
      id v81 = v76;
      swift_bridgeObjectRetain(v66);
      uint64_t v82 = v159;
      uint64_t v83 = *(void *)(v159 + 16);
      char v84 = swift_isUniquelyReferenced_nonNull_native(v83);
      aBlock[0] = v83;
      *(void *)(v82 + 16) = 0x8000000000000000LL;
      sub_100119F90((uint64_t)v81, v64, v66, v84);
      uint64_t v85 = *(void *)(v82 + 16);
      *(void *)(v82 + 16) = aBlock[0];
      swift_bridgeObjectRelease(v66);
      uint64_t v86 = swift_bridgeObjectRelease(v85);
      __chkstk_darwin(v86);
      *(&v135 - 12) = v64;
      *(&v135 - 11) = v66;
      *(&v135 - 10) = (uint64_t)v81;
      *(&v135 - 9) = v72;
      *(&v135 - _Block_object_dispose((const void *)(v1 - 152), 8) = v74;
      *((_BYTE *)&v135 - 56) = 1;
      uint64_t v87 = v158;
      *(&v135 - 6) = (uint64_t)v59;
      *(&v135 - 5) = v87;
      uint64_t v88 = v156;
      *(&v135 - 4) = v157;
      *(&v135 - 3) = v88;
      *(&v135 - 2) = (uint64_t)v68;
      sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
      uint64_t v89 = v163;
      uint64_t v90 = v165;
      static Message.with(_:)(sub_1000CEC18, &v135 - 14);
      uint64_t v165 = v90;
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(v66);
      sub_1000CEC58(v89, v164, type metadata accessor for RequestItem);
      uint64_t v19 = v172;
      if ((swift_isUniquelyReferenced_nonNull_native(v172) & 1) == 0) {
        uint64_t v19 = sub_1000CB6F8( 0LL,  *(void *)(v19 + 16) + 1LL,  1,  (void *)v19,  &qword_100291FA0,  type metadata accessor for RequestItem);
      }
      unint64_t v37 = v161;
      unint64_t v92 = *(void *)(v19 + 16);
      unint64_t v91 = *(void *)(v19 + 24);
      if (v92 >= v91 >> 1) {
        uint64_t v19 = sub_1000CB6F8( v91 > 1,  v92 + 1,  1,  (void *)v19,  &qword_100291FA0,  type metadata accessor for RequestItem);
      }
      *(void *)(v19 + 16) = v92 + 1;
      sub_1000CEC9C( v164,  v19 + ((*(unsigned __int8 *)(v154 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))
      + *(void *)(v154 + 72) * v92,
        type metadata accessor for RequestItem);

      size_t v172 = v19;
      uint64_t v42 = sub_1000CECE0(v163, type metadata accessor for RequestItem);
      uint64_t v43 = v166;
      unint64_t v36 = v167;
      if ((v37 & 0x8000000000000000LL) != 0) {
        goto LABEL_17;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(v66);

      uint64_t v43 = v166;
      unint64_t v36 = v167;
      unint64_t v37 = v161;
      if ((v161 & 0x8000000000000000LL) != 0) {
        goto LABEL_17;
      }
    }

void *sub_1000CCC98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000BED3C(&qword_100292068);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v38 = v1;
    uint64_t v39 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v39 + 8 * v4);
      uint64_t v7 = *(void *)(v3 + 40);
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v10 = v9;
      Hasher.init(_seed:)(v40, v7);
      id v11 = v6;
      String.hash(into:)(v40, v8, v10);
      Swift::Int v12 = Hasher._finalize()();
      Swift::Int result = (void *)swift_bridgeObjectRelease(v10);
      uint64_t v14 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v15 = v12 & ~v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
      uint64_t v18 = 1LL << v15;
      if (((1LL << v15) & v17) != 0)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v15));
        uint64_t v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v19 == v22 && v21 == v23)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_4:

          goto LABEL_5;
        }

        uint64_t v25 = v23;
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0LL);
        swift_bridgeObjectRelease(v21);
        Swift::Int result = (void *)swift_bridgeObjectRelease(v25);
        if ((v26 & 1) != 0) {
          goto LABEL_4;
        }
        uint64_t v27 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v27;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v15));
          uint64_t v21 = v29;
          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v28 == v30 && v21 == v31) {
            goto LABEL_3;
          }
          uint64_t v33 = v31;
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v21, v30, v31, 0LL);
          swift_bridgeObjectRelease(v21);
          Swift::Int result = (void *)swift_bridgeObjectRelease(v33);
          if ((v34 & 1) != 0) {
            goto LABEL_4;
          }
        }
      }

      *(void *)(v5 + 8 * v16) = v18 | v17;
      *(void *)(*(void *)(v3 + 48) + 8 * v15) = v11;
      uint64_t v35 = *(void *)(v3 + 16);
      BOOL v36 = __OFADD__(v35, 1LL);
      uint64_t v37 = v35 + 1;
      if (v36)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v37;
LABEL_5:
      if (++v4 == v38) {
        return (void *)v3;
      }
    }
  }

  return &_swiftEmptySetSingleton;
}

void *sub_1000CCEC4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v58 = a8;
  uint64_t v60 = a7;
  uint64_t v66 = a6;
  uint64_t v63 = a5;
  uint64_t v14 = sub_1000BED3C(&qword_100291FF0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_1000BED3C(&qword_100291FF8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ResourceStreamRequest(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v61 = (uint64_t)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = v24;
  __chkstk_darwin(v23);
  uint64_t v64 = a1;
  uint64_t v65 = a3;
  id v68 = a1;
  uint64_t v69 = a2;
  uint64_t v62 = a2;
  char v26 = (char *)&v55 - v25;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v72 = v58;
  uint64_t v73 = v60;
  uint64_t v28 = v27;
  sub_1000BD35C(&qword_100292000, v27, (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
  static Message.with(_:)(sub_1000CE5EC, v67);
  uint64_t v29 = (uint64_t)v26;
  sub_1000CEC58((uint64_t)v26, (uint64_t)v20, v28);
  uint64_t v60 = v22;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v20, 0LL, 1LL, v21);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v14);
  id v30 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100292008));
  uint64_t v31 = (void *)CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D17A0LL,  0x656372756F736572LL,  0xEE006D6165727453LL,  v20,  v17);
  uint64_t v32 = swift_allocObject(&unk_1002440C8, 24LL, 7LL);
  *(void *)(v32 + 16) = 0LL;
  if (qword_100291710 != -1) {
    swift_once(&qword_100291710, sub_1000C0ED0);
  }
  uint64_t v58 = a10;
  uint64_t v57 = a9;
  if (byte_100291E58 == 1)
  {
    *(void *)(v32 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0LL);
    aBlock[4] = sub_1000CE1C8;
    uint64_t v75 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000C1A04;
    aBlock[3] = &unk_100244248;
    uint64_t v33 = _Block_copy(aBlock);
    uint64_t v34 = v75;
    id v35 = v31;
    swift_retain(v32);
    swift_release(v34);
    [v35 setRequestCompletedBlock:v33];
    _Block_release(v33);
  }

  uint64_t v36 = v29;
  uint64_t v56 = v29;
  uint64_t v37 = v61;
  sub_1000CEC58(v36, v61, type metadata accessor for ResourceStreamRequest);
  uint64_t v38 = *(unsigned __int8 *)(v60 + 80);
  uint64_t v39 = (v38 + 16) & ~v38;
  unint64_t v40 = (v59 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v44 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v45 = swift_allocObject(&unk_100244230, v44 + 16, v38 | 7);
  sub_1000CEC9C(v37, v45 + v39, type metadata accessor for ResourceStreamRequest);
  *(void *)(v45 + v40) = v32;
  uint64_t v46 = (void *)(v45 + v41);
  uint64_t v47 = v58;
  void *v46 = v57;
  v46[1] = v47;
  uint64_t v48 = v64;
  *(void *)(v45 + v42) = v64;
  id v49 = (void *)(v45 + v43);
  uint64_t v50 = v65;
  *id v49 = v62;
  v49[1] = v50;
  id v51 = (void *)(v45 + v44);
  uint64_t v52 = v66;
  *id v51 = v63;
  v51[1] = v52;
  swift_retain(v32);
  swift_retain(v47);
  id v53 = v48;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v52);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_1000CE704, v45);
  sub_1000CECE0(v56, type metadata accessor for ResourceStreamRequest);
  swift_release(v32);
  return v31;
}

void *_s22CloudKitImplementation30CPLCKResourceDownloadOperationC08inMemoryeF03for8resource6record4keys12downloadType15completionBlockSo010CKDatabaseF0CSo10CKRecordIDC_So11CPLResourceCSo20CPLPlaceholderRecordCSo08CPLCloudB12ResourceKeysCSo0deN0Vy10Foundation4DataVSg_SSSgSbs5Error_pSgtctFZ_0( void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v62 = a6;
  uint64_t v13 = type metadata accessor for ResourceDownloadRequest(0LL);
  uint64_t v57 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v57 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v58 = (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v53 - v16;
  uint64_t v59 = a1;
  uint64_t v60 = a4;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v66 = a3;
  id v67 = a4;
  uint64_t v68 = a5;
  sub_1000BD35C(&qword_100291F48, v18, (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
  static Message.with(_:)(sub_1000CE300, v63);
  uint64_t v61 = v17;
  uint64_t v19 = (void *)sub_1000C0BB4((uint64_t)v17);
  uint64_t v20 = swift_allocObject(&unk_1002440C8, 24LL, 7LL);
  *(void *)(v20 + 16) = 0LL;
  if (qword_100291710 != -1) {
    swift_once(&qword_100291710, sub_1000C0ED0);
  }
  if (byte_100291E58 == 1)
  {
    *(void *)(v20 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0LL);
    aBlock[4] = sub_1000CE1C8;
    uint64_t v70 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000C1A04;
    aBlock[3] = &unk_1002441F8;
    uint64_t v21 = _Block_copy(aBlock);
    uint64_t v22 = v70;
    id v23 = v19;
    swift_retain(v20);
    swift_release(v22);
    [v23 setRequestCompletedBlock:v21];
    _Block_release(v21);
  }

  uint64_t v24 = v19;
  dispatch thunk of CodeOperation.shouldFetchAssetContentInMemory.setter(1LL);
  uint64_t v25 = swift_allocObject(&unk_100244168, 17LL, 7LL);
  *(_BYTE *)(v25 + 16) = 0;
  uint64_t v26 = v25;
  uint64_t v27 = swift_allocObject(&unk_100244190, 24LL, 7LL);
  *(void *)(v27 + 16) = 0LL;
  uint64_t v28 = swift_allocObject(&unk_100244168, 17LL, 7LL);
  *(_BYTE *)(v28 + 16) = 0;
  swift_retain(v28);
  uint64_t v55 = v24;
  dispatch thunk of CodeOperation.incompleteResponsePreviewBlock.setter(sub_1000CE350, v28);
  uint64_t v29 = (void *)swift_allocObject(&unk_1002441B8, 64LL, 7LL);
  uint64_t v54 = v26;
  v29[2] = v26;
  void v29[3] = v27;
  uint64_t v53 = v27;
  void v29[4] = v62;
  v29[5] = a7;
  v29[6] = a2;
  uint64_t v56 = v28;
  v29[7] = v28;
  swift_retain(v28);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(a7);
  id v30 = a2;
  dispatch thunk of CodeOperation.perRecordCompletionBlock.setter(sub_1000CE39C, v29);
  uint64_t v31 = v58;
  sub_1000CEC58((uint64_t)v61, v58, type metadata accessor for ResourceDownloadRequest);
  uint64_t v32 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v57 = v20;
  uint64_t v33 = (v32 + 16) & ~v32;
  unint64_t v34 = (v14 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = a7;
  unint64_t v36 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v41 = swift_allocObject(&unk_1002441E0, v40 + 8, v32 | 7);
  sub_1000CEC9C(v31, v41 + v33, type metadata accessor for ResourceDownloadRequest);
  uint64_t v42 = v57;
  *(void *)(v41 + v34) = v57;
  uint64_t v43 = v54;
  *(void *)(v41 + v36) = v54;
  unint64_t v44 = (void *)(v41 + v37);
  *unint64_t v44 = v62;
  v44[1] = v35;
  uint64_t v45 = v53;
  *(void *)(v41 + v3_Block_object_dispose((const void *)(v1 - 152), 8) = v53;
  uint64_t v47 = v59;
  uint64_t v46 = v60;
  *(void *)(v41 + v39) = v59;
  *(void *)(v41 + v40) = v46;
  uint64_t v48 = v42;
  swift_retain(v42);
  swift_retain(v43);
  swift_retain(v45);
  swift_retain(v35);
  id v49 = v47;
  id v50 = v46;
  id v51 = v55;
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_1000CE4B8, v41);
  sub_1000CECE0((uint64_t)v61, type metadata accessor for ResourceDownloadRequest);
  swift_release(v48);
  swift_release(v43);
  swift_release(v45);
  swift_release(v56);
  return v51;
}

uint64_t _s22CloudKitImplementation30CPLCKResourceDownloadOperationC35fetchDerivativesUploadConfiguration15completionBlockSo010CKDatabaseF0CySo20CPLDerivativesFilterCSg_s5Error_pSgtc_tFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BED3C(&qword_100291F18);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000BED3C(&qword_100291F20);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UploadResourcesRequest(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v15 = sub_1000C0DC4();
  if (v15)
  {
    sub_1000C7E50((uint64_t)v15, v14);
  }

  else
  {
    *uint64_t v14 = &_swiftEmptyArrayStorage;
    UnknownStorage.init()(0LL);
  }

  sub_1000CEC58((uint64_t)v14, (uint64_t)v10, type metadata accessor for UploadResourcesRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v4);
  id v16 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100291F28));
  uint64_t v17 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D17A0LL,  0xD000000000000011LL,  0x80000001001D17C0LL,  v10,  v7);
  uint64_t v18 = swift_allocObject(&unk_100244140, 32LL, 7LL);
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  swift_retain(a2);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_1000CE27C, v18);
  sub_1000CECE0((uint64_t)v14, type metadata accessor for UploadResourcesRequest);
  return v17;
}

void *sub_1000CD988( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v47 = a8;
  uint64_t v16 = type metadata accessor for ResourceDownloadRequest(0LL);
  uint64_t v44 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v44 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v45 = (uint64_t)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t v48 = a1;
  uint64_t v49 = a3;
  id v51 = a1;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v54 = a2;
  uint64_t v46 = a2;
  uint64_t v55 = a3;
  uint64_t v56 = a6;
  uint64_t v57 = a7;
  sub_1000BD35C(&qword_100291F48, v21, (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
  static Message.with(_:)(sub_1000CE004, v50);
  uint64_t v22 = (void *)sub_1000C0BB4((uint64_t)v20);
  uint64_t v23 = swift_allocObject(&unk_1002440C8, 24LL, 7LL);
  *(void *)(v23 + 16) = 0LL;
  if (qword_100291710 != -1) {
    swift_once(&qword_100291710, sub_1000C0ED0);
  }
  uint64_t v43 = a9;
  if (byte_100291E58 == 1)
  {
    *(void *)(v23 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0LL);
    aBlock[4] = sub_1000CE1C8;
    uint64_t v59 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000C1A04;
    aBlock[3] = &unk_100244108;
    uint64_t v24 = _Block_copy(aBlock);
    uint64_t v25 = v59;
    id v26 = v22;
    swift_retain(v23);
    swift_release(v25);
    [v26 setRequestCompletedBlock:v24];
    _Block_release(v24);
  }

  uint64_t v27 = v45;
  sub_1000CEC58((uint64_t)v20, v45, type metadata accessor for ResourceDownloadRequest);
  uint64_t v28 = *(unsigned __int8 *)(v44 + 80);
  uint64_t v29 = (v28 + 16) & ~v28;
  unint64_t v30 = (v17 + v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v34 = swift_allocObject(&unk_1002440F0, v33 + 16, v28 | 7);
  sub_1000CEC9C(v27, v34 + v29, type metadata accessor for ResourceDownloadRequest);
  *(void *)(v34 + v30) = v23;
  uint64_t v35 = (void *)(v34 + v31);
  unint64_t v36 = v48;
  uint64_t v37 = v43;
  *uint64_t v35 = v47;
  v35[1] = v37;
  *(void *)(v34 + v32) = v36;
  unint64_t v38 = (void *)(v34 + v33);
  uint64_t v39 = v49;
  *unint64_t v38 = v46;
  v38[1] = v39;
  swift_retain(v23);
  swift_retain(v37);
  id v40 = v36;
  swift_bridgeObjectRetain(v39);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_1000CE12C, v34);
  sub_1000CECE0((uint64_t)v20, type metadata accessor for ResourceDownloadRequest);
  swift_release(v23);
  return v22;
}

uint64_t _s22CloudKitImplementation30CPLCKResourceDownloadOperationC38fetchRawDerivativesUploadConfiguration15completionBlockSo010CKDatabaseF0CySSSg_s5Error_pSgtc_tFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BED3C(&qword_100291F18);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000BED3C(&qword_100291F20);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UploadResourcesRequest(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  void *v15 = &_swiftEmptyArrayStorage;
  UnknownStorage.init()(v13);
  sub_1000CEC58((uint64_t)v15, (uint64_t)v10, type metadata accessor for UploadResourcesRequest);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for CodeOperation.DestinationServer.default<A, B>(_:),  v4);
  id v16 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100291F28));
  uint64_t v17 = CodeOperation.init(service:functionName:request:destinationServer:)( 0xD000000000000015LL,  0x80000001001D17A0LL,  0xD000000000000011LL,  0x80000001001D17C0LL,  v10,  v7);
  uint64_t v18 = swift_allocObject(&unk_1002440A0, 32LL, 7LL);
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  swift_retain(a2);
  dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter(sub_1000CDFB8, v18);
  sub_1000CECE0((uint64_t)v15, type metadata accessor for UploadResourcesRequest);
  return v17;
}

uint64_t type metadata accessor for CPLCKResourceDownloadOperation()
{
  return objc_opt_self(&OBJC_CLASS___CPLCKResourceDownloadOperation);
}

uint64_t sub_1000CDEAC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000CDED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000CDED8(uint64_t a1, uint64_t a2)
{
}

void sub_1000CDEF0(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6)
{
}

void sub_1000CDEF8(uint64_t a1, uint64_t a2, void *a3)
{
}

unint64_t sub_1000CDF00()
{
  unint64_t result = qword_100291F10;
  if (!qword_100291F10)
  {
    uint64_t v1 = sub_1000CE284(255LL, &qword_100291F00, &OBJC_CLASS___CKRecordID_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100291F10);
  }

  return result;
}

uint64_t sub_1000CDF58()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_1000CDF68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000CDF8C(uint64_t a1)
{
}

uint64_t sub_1000CDF94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000CDFB8(uint64_t a1, void *a2)
{
  return sub_1000C9848(a1, a2, *(void (**)(uint64_t, uint64_t, id))(v2 + 16));
}

unint64_t sub_1000CDFC0()
{
  unint64_t result = qword_100291F38;
  if (!qword_100291F38)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100291F38);
  }

  return result;
}

uint64_t sub_1000CE004(uint64_t a1)
{
  return sub_1000CE254( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000C863C);
}

uint64_t sub_1000CE020()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000CE044()
{
  uint64_t v1 = type metadata accessor for ResourceDownloadRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v11 = v10 + *(int *)(v1 + 20);
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));

  swift_bridgeObjectRelease(*(void *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v5);
}

uint64_t sub_1000CE12C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceDownloadRequest(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000C8E58( a1,  a2,  v2 + v6,  *(void *)(v2 + v7),  *(uint64_t (**)(void, void))(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void **)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)));
}

void *sub_1000CE1C8(void *a1)
{
  return sub_1000C8D58(a1, v1);
}

uint64_t sub_1000CE1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CE1F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_1000CE1FC(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_1000CE238(uint64_t a1)
{
  return sub_1000CE254( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000C8758);
}

uint64_t sub_1000CE254( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_1000CE27C(uint64_t a1, void *a2)
{
  return sub_1000C80F8(a1, a2, *(void (**)(id, id))(v2 + 16));
}

uint64_t sub_1000CE284(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_1000CE2BC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000CE300(uint64_t a1)
{
  return sub_1000CE5C8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000C68B4);
}

uint64_t sub_1000CE31C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000CE32C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000CE350(uint64_t a1)
{
  return sub_1000C7134(a1, v1);
}

uint64_t sub_1000CE358()
{
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000CE39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CEA14( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1000C736C);
}

uint64_t sub_1000CE3A8()
{
  uint64_t v1 = type metadata accessor for ResourceDownloadRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v15 = v3 | 7;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v12 = v11 + *(int *)(v1 + 20);
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_release(*(void *)(v0 + v5));
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));
  swift_release(*(void *)(v0 + v8));

  return swift_deallocObject(v0, v10 + 8, v15);
}

uint64_t sub_1000CE4B8(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceDownloadRequest(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000C764C( a1,  a2,  v2 + v6,  *(void *)(v2 + v7),  *(void *)(v2 + v8),  *(void (**)(void, void, void, void, void, void))(v2 + v9),  *(void *)(v2 + v9 + 8),  *(void *)(v2 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void **)(v2 + ((((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((((((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000CE568(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000CE5AC(uint64_t a1)
{
  return sub_1000CE5C8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000C69C0);
}

uint64_t sub_1000CE5C8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1000CE5EC(uint64_t a1)
{
  return sub_1000CE814( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1000C45DC);
}

uint64_t sub_1000CE608()
{
  uint64_t v1 = type metadata accessor for ResourceStreamRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v12 = v11 + *(int *)(v1 + 20);
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));

  swift_bridgeObjectRelease(*(void *)(v0 + v9 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v5);
}

uint64_t sub_1000CE704(void (*a1)(char *, uint64_t, uint64_t, uint64_t), void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceStreamRequest(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000C57D4( a1,  a2,  v2 + v6,  *(char **)(v2 + v7),  *(void (**)(void, void, void))(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void **)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000CE7B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000BED3C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CE7F8(uint64_t a1)
{
  return sub_1000CE814( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1000C46F0);
}

uint64_t sub_1000CE814( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1000CE838(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1000CE874(_DWORD *a1)
{
  uint64_t v3 = (void *)v1[2];
  uint64_t v4 = (void *)v1[3];
  uint64_t v5 = (void *)v1[4];
  *a1 = [v3 unsignedIntValue];
  a1[1] = [v4 unsignedIntValue];
  id result = [v5 unsignedIntValue];
  a1[2] = (_DWORD)result;
  return result;
}

uint64_t sub_1000CE8E0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000CE8E8(uint64_t *a1)
{
  uint64_t v3 = **(void **)(v1 + 16);
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain(v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a1 = v3;
  return result;
}

uint64_t sub_1000CE934()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000CE978(uint64_t a1)
{
  return sub_1000C1A58( a1,  *(void *)(v1 + 16),  *(void (**)(void, void, void, void, void, id, void, id))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(uint64_t **)(v1 + 64));
}

uint64_t sub_1000CE98C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000CE9B8(void *a1, double a2)
{
  return sub_1000C212C(a1, *(void *)(v2 + 16), *(uint64_t (**)(id, double))(v2 + 24), a2);
}

uint64_t sub_1000CE9C4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000CEA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CEA14( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))sub_1000C21CC);
}

uint64_t sub_1000CEA14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a4(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t sub_1000CEA44()
{
  uint64_t v1 = type metadata accessor for ResourceDownloadRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v15 = v3 | 7;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4));
  uint64_t v12 = v11 + *(int *)(v1 + 20);
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_release(*(void *)(v0 + v5));
  swift_release(*(void *)(v0 + v6 + 8));
  swift_release(*(void *)(v0 + v7));
  swift_release(*(void *)(v0 + v8));
  swift_bridgeObjectRelease(*(void *)(v0 + v9 + 8));
  swift_release(*(void *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v15);
}

uint64_t sub_1000CEB5C(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ResourceDownloadRequest(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000C30A0( a1,  a2,  v2 + v6,  *(void *)(v2 + v7),  *(void (**)(void))(v2 + v8),  *(void *)(v2 + v8 + 8),  *(void *)(v2 + v9),  *(void *)(v2 + v10),  *(void *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void (**)(void, void, void, void, void, id, void, id))(v2 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL)
                                                                                           + 23) & 0xFFFFFFFFFFFFFFF8LL)));
}

void sub_1000CEC18(uint64_t a1)
{
}

uint64_t sub_1000CEC58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CEC9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CECE0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_1000CED1C()
{
  unint64_t result = qword_100292048;
  if (!qword_100292048)
  {
    uint64_t v1 = sub_1000BDA70(&qword_100292040);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100292048);
  }

  return result;
}

unint64_t sub_1000CED68()
{
  unint64_t result = qword_100292050;
  if (!qword_100292050)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100292050);
  }

  return result;
}

uint64_t sub_1000CEDAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000BED3C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000CEDE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.items.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t Goldilocks_ExitMoveBatchErrorFeedbackRequest.items.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  void *v1 = a1;
  return result;
}

uint64_t Utility_DeleteAllZonesResponse.batchError.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Utility_DeleteAllZonesResponse.batchError.setter(uint64_t result, char a2)
{
  *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 152), 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*CMTime.timescale.modify())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteAllZonesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Utility_DeleteAllZonesResponse, a1);
}

uint64_t type metadata accessor for Utility_DeleteAllZonesResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002922C8, (uint64_t)&nominal type descriptor for Utility_DeleteAllZonesResponse);
}

uint64_t Utility_DeleteAllZonesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Utility_DeleteAllZonesResponse);
}

uint64_t (*Utility_DeleteAllZonesResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteAllZonesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 1;
  uint64_t v1 = type metadata accessor for Utility_DeleteAllZonesResponse(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Utility_DeleteZoneRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for Utility_DeleteZoneRequest, a1);
}

uint64_t type metadata accessor for Utility_DeleteZoneRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292360, (uint64_t)&nominal type descriptor for Utility_DeleteZoneRequest);
}

uint64_t Utility_DeleteZoneRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t (*Utility_DeleteZoneRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteZoneRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v1 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Utility_DeleteZoneResponse.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100292070);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 24), (uint64_t)v5, &qword_100292070);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Utility_ErrorInfo.ResultError);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  UnknownStorage.init()(v8);
  uint64_t v9 = a1 + *(int *)(v7 + 28);
  uint64_t v10 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return sub_1000CEDAC((uint64_t)v5, &qword_100292070);
}

uint64_t Utility_ErrorInfo.ResultError.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  uint64_t v2 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t type metadata accessor for Utility_DeleteZoneResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, (uint64_t *)&unk_1002923F0, (uint64_t)&nominal type descriptor for Utility_DeleteZoneResponse);
}

uint64_t type metadata accessor for Utility_ErrorInfo.ResultError(uint64_t a1)
{
  return sub_1000BCF80( a1,  (uint64_t *)&unk_1002925C0,  (uint64_t)&nominal type descriptor for Utility_ErrorInfo.ResultError);
}

uint64_t type metadata accessor for Utility_ErrorInfo.DatabaseFailure(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292520, (uint64_t)&nominal type descriptor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t Utility_DeleteZoneResponse.error.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0LL) + 24);
  sub_1000CEDAC(v3, &qword_100292070);
  sub_1000CEC9C(a1, v3, type metadata accessor for Utility_ErrorInfo.ResultError);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*Utility_DeleteZoneResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100292070);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100292070);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    void *v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    void v9[2] = 0LL;
    *((_BYTE *)v9 + 24) = 1;
    UnknownStorage.init()(v11);
    uint64_t v12 = (char *)v9 + *(int *)(v6 + 28);
    uint64_t v13 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100292070);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Utility_ErrorInfo.ResultError);
  }

  return sub_1000CF398;
}

void sub_1000CF398(uint64_t a1, char a2)
{
}

BOOL Utility_DeleteZoneResponse.hasError.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100292070);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 24), (uint64_t)v3, &qword_100292070);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100292070);
  return v6;
}

Swift::Void __swiftcall Utility_DeleteZoneResponse.clearError()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0LL) + 24);
  sub_1000CEDAC(v1, &qword_100292070);
  uint64_t v2 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Utility_DeleteZoneResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for Utility_DeleteZoneResponse, a1);
}

uint64_t Utility_DeleteZoneResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for Utility_DeleteZoneResponse);
}

uint64_t (*Utility_DeleteZoneResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_DeleteZoneResponse.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  uint64_t v2 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t RequestItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t RequestItem.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL))(v1, a1, v3);
}

uint64_t Utility_ErrorInfo.ResultErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000D3DD4);
}

uint64_t sub_1000CF5D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000D3DD4, a1);
}

uint64_t sub_1000CF5E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, (uint64_t (*)(void))sub_1000D3DD4, a2);
}

uint64_t sub_1000CF5F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000D3E7C();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000CF628(uint64_t a1, uint64_t *a2)
{
  return sub_1000BEEE4(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t Utility_ErrorInfo.BatchErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000D3DE8);
}

uint64_t sub_1000CF650@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000D3DE8, a1);
}

uint64_t CMTime.value.getter()
{
  return *(void *)v0;
}

uint64_t sub_1000CF664@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, (uint64_t (*)(void))sub_1000D3DE8, a2);
}

uint64_t sub_1000CF670(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000D3E24();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t Utility_ErrorInfo.DatabaseFailure.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Utility_ErrorInfo.DatabaseFailure.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*Utility_ErrorInfo.DatabaseFailure.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_ErrorInfo.DatabaseFailure.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  uint64_t v1 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Utility_ErrorInfo.ResultError.databaseFailure.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100292078);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100292078);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100292078);
}

uint64_t Utility_ErrorInfo.ResultError.databaseFailure.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0LL) + 28);
  sub_1000CEDAC(v3, &qword_100292078);
  sub_1000CEC9C(a1, v3, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*Utility_ErrorInfo.ResultError.databaseFailure.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100292078);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100292078);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    void *v9 = 0LL;
    v9[1] = 0xE000000000000000LL;
    void v9[2] = 0LL;
    v9[3] = 0xE000000000000000LL;
    void v9[4] = 0LL;
    *((_BYTE *)v9 + 40) = 1;
    v9[6] = 0LL;
    *((_BYTE *)v9 + 56) = 1;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100292078);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
  }

  return sub_1000CFA60;
}

void sub_1000CFA60(uint64_t a1, char a2)
{
}

void sub_1000CFA74(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v11 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v12 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v13 = **(void **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    sub_1000CEC58(*(void *)(*(void *)a1 + 40LL), (uint64_t)v8, a4);
    sub_1000CEDAC(v13, a3);
    sub_1000CEC9C((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
    sub_1000CECE0((uint64_t)v9, a4);
  }

  else
  {
    sub_1000CEDAC(**(void **)a1 + v7, a3);
    sub_1000CEC9C((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
  }

  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL Utility_ErrorInfo.ResultError.hasDatabaseFailure.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100292078);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_100292078);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100292078);
  return v6;
}

Swift::Void __swiftcall Utility_ErrorInfo.ResultError.clearDatabaseFailure()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Utility_ErrorInfo.ResultError(0LL) + 28);
  sub_1000CEDAC(v1, &qword_100292078);
  uint64_t v2 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t Utility_ErrorInfo.ResultError.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Utility_ErrorInfo.ResultError, a1);
}

uint64_t sub_1000CFC8C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t Utility_ErrorInfo.ResultError.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000CFCE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*Utility_ErrorInfo.ResultError.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Goldilocks_ErrorInfo.ResultError.resultErrorCode.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Goldilocks_ErrorInfo.ResultError.resultErrorCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t Utility_ErrorInfo.BatchError.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFC8C(type metadata accessor for Utility_ErrorInfo.BatchError, a1);
}

uint64_t Utility_ErrorInfo.BatchError.unknownFields.setter(uint64_t a1)
{
  return sub_1000CFCE4(a1, type metadata accessor for Utility_ErrorInfo.BatchError);
}

uint64_t (*Utility_ErrorInfo.BatchError.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t Utility_ErrorInfo.BatchError.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  uint64_t v1 = type metadata accessor for Utility_ErrorInfo.BatchError(0LL);
  return UnknownStorage.init()(v1);
}

void sub_1000CFDF4()
{
  static Utility_ErrorInfo.ResultErrorCode.allCases = (uint64_t)&off_100243378;
}

uint64_t *Utility_ErrorInfo.ResultErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_100291720 != -1) {
    swift_once(&qword_100291720, sub_1000CFDF4);
  }
  return &static Utility_ErrorInfo.ResultErrorCode.allCases;
}

uint64_t static Utility_ErrorInfo.ResultErrorCode.allCases.getter()
{
  return sub_1000B92C0(&qword_100291720, &static Utility_ErrorInfo.ResultErrorCode.allCases);
}

uint64_t static Utility_ErrorInfo.ResultErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_100291720, &static Utility_ErrorInfo.ResultErrorCode.allCases, (uint64_t)sub_1000CFDF4);
}

uint64_t (*static Utility_ErrorInfo.ResultErrorCode.allCases.modify(uint64_t a1))(void)
{
  if (qword_100291720 != -1) {
    swift_once(&qword_100291720, sub_1000CFDF4);
  }
  swift_beginAccess(&static Utility_ErrorInfo.ResultErrorCode.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000CFEEC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_100291720, &static Utility_ErrorInfo.ResultErrorCode.allCases, (uint64_t)sub_1000CFDF4, a1);
}

void sub_1000CFF08()
{
  static Utility_ErrorInfo.BatchErrorCode.allCases = (uint64_t)&off_100243428;
}

uint64_t *Utility_ErrorInfo.BatchErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_100291728 != -1) {
    swift_once(&qword_100291728, sub_1000CFF08);
  }
  return &static Utility_ErrorInfo.BatchErrorCode.allCases;
}

uint64_t static Utility_ErrorInfo.BatchErrorCode.allCases.getter()
{
  return sub_1000B92C0(&qword_100291728, &static Utility_ErrorInfo.BatchErrorCode.allCases);
}

uint64_t static Utility_ErrorInfo.BatchErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_100291728, &static Utility_ErrorInfo.BatchErrorCode.allCases, (uint64_t)sub_1000CFF08);
}

uint64_t (*static Utility_ErrorInfo.BatchErrorCode.allCases.modify(uint64_t a1))(void)
{
  if (qword_100291728 != -1) {
    swift_once(&qword_100291728, sub_1000CFF08);
  }
  swift_beginAccess(&static Utility_ErrorInfo.BatchErrorCode.allCases, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

uint64_t sub_1000D0000@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_100291728, &static Utility_ErrorInfo.BatchErrorCode.allCases, (uint64_t)sub_1000CFF08, a1);
}

void *Utility_DeleteAllZonesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteAllZonesRequest.protoMessageName;
}

unint64_t static Utility_DeleteAllZonesRequest.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1000D0044(uint64_t a1)
{
  return sub_1000D106C(a1, static Utility_DeleteAllZonesRequest._protobuf_nameMap);
}

uint64_t Utility_DeleteAllZonesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291730,  (uint64_t)static Utility_DeleteAllZonesRequest._protobuf_nameMap,  (uint64_t)sub_1000D0044);
}

uint64_t static Utility_DeleteAllZonesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291730,  (uint64_t)static Utility_DeleteAllZonesRequest._protobuf_nameMap,  (uint64_t)sub_1000D0044,  a1);
}

uint64_t Goldilocks_ExitStatusFeedbackResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D10E8(a1, a2, a3);
}

Swift::Int Utility_DeleteAllZonesRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_DeleteAllZonesRequest,  &qword_100292080,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000D00BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_ExitStatusFeedbackResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t Goldilocks_ExitStatusFeedbackResponse.traverse<A>(visitor:)()
{
  return Goldilocks_ErrorInfo.traverse<A>(visitor:)();
}

uint64_t sub_1000D00E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926D8,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D0134@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291730,  (uint64_t)static Utility_DeleteAllZonesRequest._protobuf_nameMap,  (uint64_t)sub_1000D0044,  a1);
}

uint64_t sub_1000D0150(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292140,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292140,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Utility_DeleteAllZonesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteAllZonesResponse.protoMessageName;
}

unint64_t static Utility_DeleteAllZonesResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000D0208(uint64_t a1)
{
  return sub_1000D28F4( a1,  static Utility_DeleteAllZonesResponse._protobuf_nameMap,  (uint64_t)"deleteZoneResponses",  19LL);
}

uint64_t Utility_DeleteAllZonesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291738,  (uint64_t)static Utility_DeleteAllZonesResponse._protobuf_nameMap,  (uint64_t)sub_1000D0208);
}

uint64_t static Utility_DeleteAllZonesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291738,  (uint64_t)static Utility_DeleteAllZonesResponse._protobuf_nameMap,  (uint64_t)sub_1000D0208,  a1);
}

uint64_t Utility_DeleteAllZonesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        unint64_t v9 = sub_1000D3E24();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 8,  &type metadata for Utility_ErrorInfo.BatchErrorCode,  v9,  a2,  a3);
      }

      else if (result == 1)
      {
        uint64_t v10 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
        uint64_t v11 = sub_1000BD35C( &qword_100292090,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Utility_DeleteAllZonesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  if (!*(void *)(*v3 + 16)
    || (uint64_t v9 = type metadata accessor for Utility_DeleteZoneResponse(0LL),
        uint64_t v10 = sub_1000BD35C( &qword_100292090,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v8, 1LL, v9, v10, a2, a3),  !v4))
  {
    if (!v3[1]
      || (char v12 = *((_BYTE *)v3 + 16),
          uint64_t v14 = v3[1],
          char v15 = v12,
          unint64_t v13 = sub_1000D3E24(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  2LL,  &type metadata for Utility_ErrorInfo.BatchErrorCode,  v13,  a2,  a3),  !v4))
    {
      type metadata accessor for Utility_DeleteAllZonesResponse(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int Utility_DeleteAllZonesResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_DeleteAllZonesResponse,  &qword_100292098,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000D04B4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000D04EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_DeleteAllZonesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000D0500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_DeleteAllZonesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D0514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926D0,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D0564@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291738,  (uint64_t)static Utility_DeleteAllZonesResponse._protobuf_nameMap,  (uint64_t)sub_1000D0208,  a1);
}

uint64_t sub_1000D0580(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292158,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D05C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292158,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Utility_DeleteZoneRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteZoneRequest.protoMessageName;
}

unint64_t static Utility_DeleteZoneRequest.protoMessageName.getter()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1000D0638()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Utility_DeleteZoneRequest._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212550;
  uint64_t v8 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v8 = "zoneName";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104LL))(v8, v9, v10);
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Utility_DeleteZoneRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291740,  (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap,  (uint64_t)sub_1000D0638);
}

uint64_t static Utility_DeleteZoneRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291740,  (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap,  (uint64_t)sub_1000D0638,  a1);
}

uint64_t Goldilocks_SilentMoverRampingRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
    }
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t Utility_DeleteZoneRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    type metadata accessor for Utility_DeleteZoneRequest(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int Utility_DeleteZoneRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_DeleteZoneRequest,  &qword_1002920A0,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000D08A0@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  return UnknownStorage.init()();
}

uint64_t sub_1000D08C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Goldilocks_SilentMoverRampingRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000D08D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_DeleteZoneRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D08EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926C8,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D093C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291740,  (uint64_t)static Utility_DeleteZoneRequest._protobuf_nameMap,  (uint64_t)sub_1000D0638,  a1);
}

uint64_t sub_1000D0958(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( (unint64_t *)&qword_100292170,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( (unint64_t *)&qword_100292170,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *Utility_DeleteZoneResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_DeleteZoneResponse.protoMessageName;
}

unint64_t static Utility_DeleteZoneResponse.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1000D0A10()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Utility_DeleteZoneResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100212570;
  unint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *unint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "error";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  char v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  unint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)unint64_t v13 = "zoneName";
  *((void *)v13 + 1) = 8LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Utility_DeleteZoneResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291748,  (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap,  (uint64_t)sub_1000D0A10);
}

uint64_t static Utility_DeleteZoneResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291748,  (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap,  (uint64_t)sub_1000D0A10,  a1);
}

uint64_t Utility_DeleteZoneResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
      }

      else if (result == 1)
      {
        uint64_t v9 = v3 + *(int *)(type metadata accessor for Utility_DeleteZoneResponse(0LL) + 24);
        uint64_t v10 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
        uint64_t v11 = sub_1000BD35C( &qword_1002920A8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v9, v10, v11, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Utility_DeleteZoneResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v23 = a1;
  uint64_t v8 = sub_1000BED3C(&qword_100292070);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  sub_1000CE7B4((uint64_t)v5 + *(int *)(v22 + 24), (uint64_t)v10, &qword_100292070);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_1000CEDAC((uint64_t)v10, &qword_100292070);
    uint64_t v15 = v23;
  }

  else
  {
    sub_1000CEC9C((uint64_t)v10, (uint64_t)v14, type metadata accessor for Utility_ErrorInfo.ResultError);
    uint64_t v16 = sub_1000BD35C( &qword_1002920A8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
    uint64_t v17 = v23;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v14, 1LL, v11, v16, a2, a3);
    uint64_t result = sub_1000CECE0((uint64_t)v14, type metadata accessor for Utility_ErrorInfo.ResultError);
    uint64_t v15 = v17;
    if (v4) {
      return result;
    }
  }

  unint64_t v19 = v5[1];
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v20 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20) {
    return UnknownStorage.traverse<A>(visitor:)(v15, a2, a3);
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(v15, a2, a3);
  }
  return result;
}

Swift::Int Utility_DeleteZoneResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_DeleteZoneResponse,  &qword_1002920B0,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000D0EB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000D0F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_DeleteZoneResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000D0F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_DeleteZoneResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D0F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926C0,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D0F8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291748,  (uint64_t)static Utility_DeleteZoneResponse._protobuf_nameMap,  (uint64_t)sub_1000D0A10,  a1);
}

uint64_t sub_1000D0FA8(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292090,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D0FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292090,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *Utility_ErrorInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static Utility_ErrorInfo.protoMessageName;
}

unint64_t static Utility_ErrorInfo.protoMessageName.getter()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000D1060(uint64_t a1)
{
  return sub_1000D106C(a1, static Utility_ErrorInfo._protobuf_nameMap);
}

uint64_t sub_1000D106C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v3, a2);
  sub_1000BCFB4(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t Utility_ErrorInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291750, (uint64_t)static Utility_ErrorInfo._protobuf_nameMap, (uint64_t)sub_1000D1060);
}

uint64_t static Utility_ErrorInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291750,  (uint64_t)static Utility_ErrorInfo._protobuf_nameMap,  (uint64_t)sub_1000D1060,  a1);
}

uint64_t sub_1000D10E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  while (!v3 && (v7 & 1) == 0);
  return result;
}

uint64_t Goldilocks_ErrorInfo.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t _s22CloudKitImplementation37Goldilocks_ExitStatusFeedbackResponseV2eeoiySbAC_ACtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v15 - v9, a1, v4);
  v11(v8, a2, v4);
  uint64_t v12 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v12);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return a2 & 1;
}

Swift::Int Utility_ErrorInfo.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_ErrorInfo,  &qword_1002920B8,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
}

uint64_t sub_1000D1264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926B8,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D12B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291750,  (uint64_t)static Utility_ErrorInfo._protobuf_nameMap,  (uint64_t)sub_1000D1060,  a1);
}

uint64_t sub_1000D12D0(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292198,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D1310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292198,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D1360()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002135A0;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 0LL;
  *(void *)uint64_t v8 = "NO_ERROR";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 8LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "UNKNOWN";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "SERVER_ERROR";
  *((void *)v14 + 1) = 12LL;
  _BYTE v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 3LL;
  *(void *)uint64_t v16 = "FAILED_CK_CALL";
  *((void *)v16 + 1) = 14LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "MISSING_ARGUMENTS";
  *((void *)v18 + 1) = 17LL;
  _BYTE v18[16] = 2;
  v11();
  unint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 5LL;
  *(void *)uint64_t v20 = "INVALID_ARGUMENTS";
  *((void *)v20 + 1) = 17LL;
  _BYTE v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "ZONE_NOT_FOUND";
  *((void *)v22 + 1) = 14LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "RECORD_NOT_FOUND";
  *((void *)v24 + 1) = 16LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "PERMISSION_DENIED";
  *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 152), 8) = 17LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291758,  (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap,  (uint64_t)sub_1000D1360);
}

uint64_t static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291758,  (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap,  (uint64_t)sub_1000D1360,  a1);
}

uint64_t sub_1000D1668@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291758,  (uint64_t)static Utility_ErrorInfo.ResultErrorCode._protobuf_nameMap,  (uint64_t)sub_1000D1360,  a1);
}

uint64_t sub_1000D1684()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135B0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "NO_BATCH_ERROR";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "BATCH_SERVER_ERROR";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 18LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 2LL;
  *(void *)uint64_t v15 = "MULTI_STATUS";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "INCOMPLETE_BATCH_REQUEST";
  *((void *)v17 + 1) = 24LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  unint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 4LL;
  *(void *)unint64_t v19 = "INVALID_BATCHING";
  *((void *)v19 + 1) = 16LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 5LL;
  *(void *)uint64_t v21 = "FORBIDDEN_BATCH_REQUEST";
  *((void *)v21 + 1) = 23LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291760,  (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap,  (uint64_t)sub_1000D1684);
}

uint64_t static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291760,  (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap,  (uint64_t)sub_1000D1684,  a1);
}

uint64_t sub_1000D18EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291760,  (uint64_t)static Utility_ErrorInfo.BatchErrorCode._protobuf_nameMap,  (uint64_t)sub_1000D1684,  a1);
}

void sub_1000D1908(int a1)
{
  v1._object = (void *)0x80000001001D2070LL;
  v1._countAndFlagsBits = 0xD000000000000010LL;
  sub_1000D2814( a1,  v1,  static Utility_ErrorInfo.DatabaseFailure.protoMessageName,  &static Utility_ErrorInfo.DatabaseFailure.protoMessageName[1]);
}

void *Utility_ErrorInfo.DatabaseFailure.protoMessageName.unsafeMutableAddressor()
{
  if (qword_100291768 != -1) {
    swift_once(&qword_100291768, sub_1000D1908);
  }
  return static Utility_ErrorInfo.DatabaseFailure.protoMessageName;
}

uint64_t static Utility_ErrorInfo.DatabaseFailure.protoMessageName.getter()
{
  return sub_1000BB594( &qword_100291768,  static Utility_ErrorInfo.DatabaseFailure.protoMessageName,  &static Utility_ErrorInfo.DatabaseFailure.protoMessageName[1],  (uint64_t)sub_1000D1908);
}

uint64_t sub_1000D1990()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "ckOperation";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "description";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 11LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "clientCode";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "serverCode";
  *((void *)v17 + 1) = 10LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291770,  (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap,  (uint64_t)sub_1000D1990);
}

uint64_t static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291770,  (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap,  (uint64_t)sub_1000D1990,  a1);
}

uint64_t Utility_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = v3 + 16;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        case 3LL:
          unint64_t v10 = sub_1000BD010();
          uint64_t v11 = v3 + 32;
          uint64_t v12 = &type metadata for Rpcproto_ErrorInfo.Client.Code;
          goto LABEL_11;
        case 4LL:
          unint64_t v10 = sub_1000BCFCC();
          uint64_t v11 = v3 + 48;
          uint64_t v12 = &type metadata for Rpcproto_ErrorInfo.Server.Code;
LABEL_11:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Utility_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    unint64_t v12 = *(void *)(v5 + 24);
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = *(void *)(v5 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      uint64_t v14 = *(void *)(v5 + 32);
      char v15 = *(_BYTE *)(v5 + 40);
      if (!Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v14, v15)
        || (uint64_t v19 = v14,
            char v20 = v15,
            unint64_t v16 = sub_1000BD010(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v19,  3LL,  &type metadata for Rpcproto_ErrorInfo.Client.Code,  v16,  a2,  a3),  !v4))
      {
        if (!*(void *)(v5 + 48)
          || (char v17 = *(_BYTE *)(v5 + 56),
              uint64_t v19 = *(void *)(v5 + 48),
              char v20 = v17,
              unint64_t v18 = sub_1000BCFCC(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v19,  4LL,  &type metadata for Rpcproto_ErrorInfo.Server.Code,  v18,  a2,  a3),  !v4))
        {
          type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

Swift::Int Utility_ErrorInfo.DatabaseFailure.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  &qword_1002920C0,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000D1E40@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000D1E7C(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_100291768,  static Utility_ErrorInfo.DatabaseFailure.protoMessageName,  &static Utility_ErrorInfo.DatabaseFailure.protoMessageName[1],  (uint64_t)sub_1000D1908);
}

uint64_t sub_1000D1E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000D1EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000D1F1C())()
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000D1F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_ErrorInfo.DatabaseFailure.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000D1F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_ErrorInfo.DatabaseFailure.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D1F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926B0,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D1FA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291770,  (uint64_t)static Utility_ErrorInfo.DatabaseFailure._protobuf_nameMap,  (uint64_t)sub_1000D1990,  a1);
}

uint64_t sub_1000D1FC4(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_1002920C8,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002920C8,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_1000D2058(int a1)
{
  v1._countAndFlagsBits = 0x45746C757365522ELL;
  v1._object = (void *)0xEC000000726F7272LL;
  sub_1000D2814( a1,  v1,  static Utility_ErrorInfo.ResultError.protoMessageName,  &static Utility_ErrorInfo.ResultError.protoMessageName[1]);
}

void *Utility_ErrorInfo.ResultError.protoMessageName.unsafeMutableAddressor()
{
  if (qword_100291778 != -1) {
    swift_once(&qword_100291778, sub_1000D2058);
  }
  return static Utility_ErrorInfo.ResultError.protoMessageName;
}

uint64_t static Utility_ErrorInfo.ResultError.protoMessageName.getter()
{
  return sub_1000BB594( &qword_100291778,  static Utility_ErrorInfo.ResultError.protoMessageName,  &static Utility_ErrorInfo.ResultError.protoMessageName[1],  (uint64_t)sub_1000D2058);
}

uint64_t sub_1000D20E4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static Utility_ErrorInfo.ResultError._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "errorMessage";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 12LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "resultErrorCode";
  *((void *)v13 + 1) = 15LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "databaseFailure";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 15LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t Utility_ErrorInfo.ResultError._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291780,  (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap,  (uint64_t)sub_1000D20E4);
}

uint64_t static Utility_ErrorInfo.ResultError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291780,  (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap,  (uint64_t)sub_1000D20E4,  a1);
}

uint64_t Utility_ErrorInfo.ResultError.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        unint64_t v14 = sub_1000D3E7C();
        uint64_t v13 = v9;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 16,  &type metadata for Utility_ErrorInfo.ResultErrorCode,  v14,  a2,  a3);
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v13 = v9;
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
        goto LABEL_5;
      }

uint64_t Utility_ErrorInfo.ResultError.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100292078);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)(v5 + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v25 = a3;
  if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v5 + 16)
      || (char v19 = *(_BYTE *)(v5 + 24),
          uint64_t v23 = *(void *)(v5 + 16),
          char v24 = v19,
          unint64_t v20 = sub_1000D3E7C(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v23,  2LL,  &type metadata for Utility_ErrorInfo.ResultErrorCode,  v20,  a2,  v25),  !v4))
    {
      uint64_t v21 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
      sub_1000CE7B4(v5 + *(int *)(v21 + 28), (uint64_t)v11, &qword_100292078);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
      {
        sub_1000CEDAC((uint64_t)v11, &qword_100292078);
      }

      else
      {
        sub_1000CEC9C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
        uint64_t v22 = sub_1000BD35C( &qword_1002920C8,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 3LL, v12, v22, a2, v25);
        uint64_t result = sub_1000CECE0((uint64_t)v15, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
        if (v4) {
          return result;
        }
      }

      return UnknownStorage.traverse<A>(visitor:)(a1, a2, v25);
    }
  }

  return result;
}

Swift::Int Utility_ErrorInfo.ResultError.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_ErrorInfo.ResultError,  &qword_1002920D8,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000D263C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(_BYTE *)(a2 + 24) = 1;
  UnknownStorage.init()(a1);
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000D26A4(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_100291778,  static Utility_ErrorInfo.ResultError.protoMessageName,  &static Utility_ErrorInfo.ResultError.protoMessageName[1],  (uint64_t)sub_1000D2058);
}

uint64_t sub_1000D26C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_ErrorInfo.ResultError.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000D26D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_ErrorInfo.ResultError.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D26EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926A8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D273C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291780,  (uint64_t)static Utility_ErrorInfo.ResultError._protobuf_nameMap,  (uint64_t)sub_1000D20E4,  a1);
}

uint64_t sub_1000D2758(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_1002920A8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002920A8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
  return Message.hash(into:)(a1, a2, v4);
}

void sub_1000D27E8(int a1)
{
  v1._countAndFlagsBits = 0x724568637461422ELL;
  v1._object = (void *)0xEB00000000726F72LL;
  sub_1000D2814( a1,  v1,  static Utility_ErrorInfo.BatchError.protoMessageName,  &static Utility_ErrorInfo.BatchError.protoMessageName[1]);
}

void sub_1000D2814(int a1, Swift::String a2, void *a3, void *a4)
{
  *a3 = 0xD000000000000011LL;
  *a4 = 0x80000001001D2020LL;
}

void *Utility_ErrorInfo.BatchError.protoMessageName.unsafeMutableAddressor()
{
  if (qword_100291788 != -1) {
    swift_once(&qword_100291788, sub_1000D27E8);
  }
  return static Utility_ErrorInfo.BatchError.protoMessageName;
}

uint64_t static Utility_ErrorInfo.BatchError.protoMessageName.getter()
{
  return sub_1000BB594( &qword_100291788,  static Utility_ErrorInfo.BatchError.protoMessageName,  &static Utility_ErrorInfo.BatchError.protoMessageName[1],  (uint64_t)sub_1000D27E8);
}

uint64_t sub_1000D28DC(uint64_t a1)
{
  return sub_1000D28F4(a1, static Utility_ErrorInfo.BatchError._protobuf_nameMap, (uint64_t)"errorMessage", 12LL);
}

uint64_t sub_1000D28F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v7, a2);
  sub_1000BCFB4(v7, (uint64_t)a2);
  uint64_t v8 = sub_1000BED3C(&qword_100291D80);
  uint64_t v9 = sub_1000BED3C(&qword_100291D88);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100212570;
  char v15 = (void *)(v14 + v13);
  uint64_t v16 = v14 + v13 + *(int *)(v9 + 48);
  void *v15 = 1LL;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + _Block_object_dispose((const void *)(v1 - 152), 8) = a4;
  *(_BYTE *)(v16 + 16) = 2;
  uint64_t v17 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v18 = type metadata accessor for _NameMap.NameDescription(0LL);
  char v19 = *(void (**)(void))(*(void *)(v18 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v17, v18);
  unint64_t v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + v11) = 2LL;
  *(void *)unint64_t v20 = "batchError";
  *((void *)v20 + 1) = 10LL;
  _BYTE v20[16] = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t Utility_ErrorInfo.BatchError._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291790,  (uint64_t)static Utility_ErrorInfo.BatchError._protobuf_nameMap,  (uint64_t)sub_1000D28DC);
}

uint64_t static Utility_ErrorInfo.BatchError._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291790,  (uint64_t)static Utility_ErrorInfo.BatchError._protobuf_nameMap,  (uint64_t)sub_1000D28DC,  a1);
}

uint64_t Utility_ErrorInfo.BatchError.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        unint64_t v9 = sub_1000D3E24();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 16,  &type metadata for Utility_ErrorInfo.BatchErrorCode,  v9,  a2,  a3);
      }

      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t Utility_ErrorInfo.BatchError.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = *(void *)(v3 + 8);
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v3 + 16)
      || (char v11 = *(_BYTE *)(v3 + 24),
          uint64_t v13 = *(void *)(v3 + 16),
          char v14 = v11,
          unint64_t v12 = sub_1000D3E24(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v13,  2LL,  &type metadata for Utility_ErrorInfo.BatchErrorCode,  v12,  a2,  a3),  !v4))
    {
      type metadata accessor for Utility_ErrorInfo.BatchError(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int Utility_ErrorInfo.BatchError.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for Utility_ErrorInfo.BatchError,  &qword_1002920E0,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000D2C64@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_1000D2C94(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8E8( a1,  a2,  &qword_100291788,  static Utility_ErrorInfo.BatchError.protoMessageName,  &static Utility_ErrorInfo.BatchError.protoMessageName[1],  (uint64_t)sub_1000D27E8);
}

uint64_t sub_1000D2CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_ErrorInfo.BatchError.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000D2CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Utility_ErrorInfo.BatchError.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000D2CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002926A0,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000D2D2C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291790,  (uint64_t)static Utility_ErrorInfo.BatchError._protobuf_nameMap,  (uint64_t)sub_1000D28DC,  a1);
}

uint64_t sub_1000D2D48(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_1002921D0,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002921D0,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t _s22CloudKitImplementation30Utility_DeleteAllZonesResponseV2eeoiySbAC_ACtFZ_0( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  if ((sub_1000FEF80(*a1, *(void *)a2) & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16) == 1) {
    __asm { BR              X11 }
  }

  if (a1[1] == v11)
  {
    uint64_t v13 = type metadata accessor for Utility_DeleteAllZonesResponse(0LL);
    char v14 = (char *)a1 + *(int *)(v13 + 24);
    char v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)(a2 + *(int *)(v13 + 24)), v4);
    uint64_t v16 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }

  else
  {
LABEL_4:
    char v12 = 0;
  }

  return v12 & 1;
}

uint64_t _s22CloudKitImplementation26Utility_DeleteZoneResponseV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v46 - v7;
  uint64_t v8 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_1002926E8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100292070);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v46 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v23 = type metadata accessor for Utility_DeleteZoneResponse(0LL);
  uint64_t v24 = *(int *)(v23 + 24);
  uint64_t v52 = a1;
  uint64_t v25 = (uint64_t)a1 + v24;
  uint64_t v26 = v23;
  sub_1000CE7B4(v25, (uint64_t)v22, &qword_100292070);
  uint64_t v27 = *(int *)(v26 + 24);
  uint64_t v53 = a2;
  sub_1000CE7B4((uint64_t)&a2[v27], (uint64_t)v20, &qword_100292070);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_1000CE7B4((uint64_t)v22, (uint64_t)v13, &qword_100292070);
  sub_1000CE7B4((uint64_t)v20, v28, &qword_100292070);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v20, &qword_100292070);
    sub_1000CEDAC((uint64_t)v22, &qword_100292070);
    if (v29(v28, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v13, &qword_100292070);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_1000CE7B4((uint64_t)v13, (uint64_t)v17, &qword_100292070);
  if (v29(v28, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v20, &qword_100292070);
    sub_1000CEDAC((uint64_t)v22, &qword_100292070);
    sub_1000CECE0((uint64_t)v17, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_6:
    sub_1000CEDAC((uint64_t)v13, &qword_1002926E8);
LABEL_12:
    char v36 = 0;
    return v36 & 1;
  }

  uint64_t v30 = v47;
  sub_1000CEC9C(v28, v47, type metadata accessor for Utility_ErrorInfo.ResultError);
  char v31 = _s22CloudKitImplementation17Utility_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(v17, v30);
  sub_1000CECE0(v30, type metadata accessor for Utility_ErrorInfo.ResultError);
  sub_1000CEDAC((uint64_t)v20, &qword_100292070);
  sub_1000CEDAC((uint64_t)v22, &qword_100292070);
  sub_1000CECE0((uint64_t)v17, type metadata accessor for Utility_ErrorInfo.ResultError);
  sub_1000CEDAC((uint64_t)v13, &qword_100292070);
  if ((v31 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  unint64_t v33 = v52;
  unint64_t v32 = v53;
  uint64_t v34 = v52[1];
  uint64_t v35 = *((void *)v53 + 1);
  if (*v52 == *(void *)v53 && v34 == v35
    || (char v36 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*v52, v34, *(void *)v53, v35, 0LL) & 1) != 0))
  {
    uint64_t v37 = (char *)v33 + *(int *)(v26 + 20);
    uint64_t v39 = v50;
    uint64_t v38 = v51;
    id v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    uint64_t v41 = v48;
    v40(v48, v37, v51);
    uint64_t v42 = v49;
    v40(v49, &v32[*(int *)(v26 + 20)], v38);
    uint64_t v43 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v42, v38, v43);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
    v44(v42, v38);
    v44(v41, v38);
  }

  return v36 & 1;
}

uint64_t _s22CloudKitImplementation25Utility_DeleteZoneRequestV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *((void *)a2 + 1);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
    uint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, &a2[*(int *)(v15 + 20)], v4);
    uint64_t v18 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v18);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }

  return v14 & 1;
}

uint64_t _s22CloudKitImplementation17Utility_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v13 = *(void *)a1 == *(void *)a2 && v11 == v12;
  if (v13
    || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      uint64_t v20 = *(void *)(a2 + 32);
      char v21 = *(_BYTE *)(a2 + 40);
      uint64_t v22 = Rpcproto_ErrorInfo.Client.Code.rawValue.getter(*(void *)(a1 + 32), *(_BYTE *)(a1 + 40));
      if (v22 != Rpcproto_ErrorInfo.Client.Code.rawValue.getter(v20, v21)) {
        goto LABEL_16;
      }
      uint64_t v23 = *(void *)(a1 + 48);
      if (*(_BYTE *)(a1 + 56) == 1) {
        uint64_t v23 = qword_100214500[v23];
      }
      uint64_t v24 = *(void *)(a2 + 48);
      if (*(_BYTE *)(a2 + 56)) {
        __asm { BR              X11 }
      }

      if (v23 == v24)
      {
        uint64_t v25 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
        uint64_t v26 = a1 + *(int *)(v25 + 32);
        uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v27(v10, v26, v4);
        v27(v8, a2 + *(int *)(v25 + 32), v4);
        uint64_t v28 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v28);
        uint64_t v29 = *(void (**)(char *, uint64_t))(v5 + 8);
        v29(v8, v4);
        v29(v10, v4);
      }

      else
      {
LABEL_16:
        char v14 = 0;
      }
    }
  }

  return v14 & 1;
}

uint64_t _s22CloudKitImplementation17Utility_ErrorInfoV06ResultE0V2eeoiySbAE_AEtFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000BED3C(&qword_1002926E0);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000BED3C(&qword_100292078);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v44 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = a1[1];
  uint64_t v24 = *(void *)(a2 + 8);
  if (*a1 == *(void *)a2 && v23 == v24
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v23, *(void *)a2, v24, 0LL) & 1) != 0))
  {
    uint64_t v26 = *(void *)(a2 + 16);
    if (*(_BYTE *)(a2 + 24) == 1) {
      __asm { BR              X11 }
    }

    if (a1[2] == v26)
    {
      uint64_t v46 = v17;
      uint64_t v27 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
      sub_1000CE7B4((uint64_t)a1 + *(int *)(v27 + 28), (uint64_t)v22, &qword_100292078);
      uint64_t v45 = v27;
      sub_1000CE7B4(a2 + *(int *)(v27 + 28), (uint64_t)v20, &qword_100292078);
      uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
      sub_1000CE7B4((uint64_t)v22, (uint64_t)v13, &qword_100292078);
      sub_1000CE7B4((uint64_t)v20, v28, &qword_100292078);
      uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v29((uint64_t)v13, 1LL, v8) == 1)
      {
        sub_1000CEDAC((uint64_t)v20, &qword_100292078);
        sub_1000CEDAC((uint64_t)v22, &qword_100292078);
        if (v29(v28, 1LL, v8) == 1)
        {
          sub_1000CEDAC((uint64_t)v13, &qword_100292078);
LABEL_16:
          uint64_t v34 = v45;
          uint64_t v35 = (char *)a1 + *(int *)(v45 + 24);
          uint64_t v37 = v50;
          uint64_t v36 = v51;
          uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
          uint64_t v39 = v48;
          v38(v48, v35, v51);
          id v40 = (char *)(a2 + *(int *)(v34 + 24));
          uint64_t v41 = v49;
          v38(v49, v40, v36);
          uint64_t v42 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v41, v36, v42);
          uint64_t v43 = *(void (**)(char *, uint64_t))(v37 + 8);
          v43(v41, v36);
          v43(v39, v36);
          return v25 & 1;
        }
      }

      else
      {
        uint64_t v30 = (uint64_t)v46;
        sub_1000CE7B4((uint64_t)v13, (uint64_t)v46, &qword_100292078);
        if (v29(v28, 1LL, v8) != 1)
        {
          uint64_t v32 = v47;
          sub_1000CEC9C(v28, v47, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
          char v33 = _s22CloudKitImplementation17Utility_ErrorInfoV15DatabaseFailureV2eeoiySbAE_AEtFZ_0(v30, v32);
          sub_1000CECE0(v32, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
          sub_1000CEDAC((uint64_t)v20, &qword_100292078);
          sub_1000CEDAC((uint64_t)v22, &qword_100292078);
          sub_1000CECE0(v30, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
          sub_1000CEDAC((uint64_t)v13, &qword_100292078);
          if ((v33 & 1) != 0) {
            goto LABEL_16;
          }
          goto LABEL_13;
        }

        sub_1000CEDAC((uint64_t)v20, &qword_100292078);
        sub_1000CEDAC((uint64_t)v22, &qword_100292078);
        sub_1000CECE0(v30, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
      }

      sub_1000CEDAC((uint64_t)v13, &qword_1002926E0);
    }

uint64_t _s22CloudKitImplementation17Utility_ErrorInfoV05BatchE0V2eeoiySbAE_AEtFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v13 = *a1 == *(void *)a2 && v11 == v12;
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = *(void *)(a2 + 16);
    if (*(_BYTE *)(a2 + 24) == 1) {
      __asm { BR              X11 }
    }

    if (a1[2] == v15)
    {
      uint64_t v16 = type metadata accessor for Utility_ErrorInfo.BatchError(0LL);
      uint64_t v17 = (char *)a1 + *(int *)(v16 + 24);
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v18(v10, v17, v4);
      v18(v8, (char *)(a2 + *(int *)(v16 + 24)), v4);
      uint64_t v19 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v19);
      uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
      v20(v8, v4);
      v20(v10, v4);
    }

    else
    {
      char v14 = 0;
    }
  }

  return v14 & 1;
}

  ;
}

  ;
}

uint64_t type metadata accessor for Utility_ErrorInfo.BatchError(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292660, (uint64_t)&nominal type descriptor for Utility_ErrorInfo.BatchError);
}

uint64_t type metadata accessor for Utility_DeleteAllZonesRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292238, (uint64_t)&nominal type descriptor for Utility_DeleteAllZonesRequest);
}

unint64_t sub_1000D3E24()
{
  unint64_t result = qword_100292088;
  if (!qword_100292088)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.BatchErrorCode,  &type metadata for Utility_ErrorInfo.BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_100292088);
  }

  return result;
}

uint64_t type metadata accessor for Utility_ErrorInfo(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292490, (uint64_t)&nominal type descriptor for Utility_ErrorInfo);
}

unint64_t sub_1000D3E7C()
{
  unint64_t result = qword_1002920D0;
  if (!qword_1002920D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.ResultErrorCode,  &type metadata for Utility_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002920D0);
  }

  return result;
}

unint64_t sub_1000D3EC4()
{
  unint64_t result = qword_1002920E8;
  if (!qword_1002920E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.ResultErrorCode,  &type metadata for Utility_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002920E8);
  }

  return result;
}

unint64_t sub_1000D3F0C()
{
  unint64_t result = qword_1002920F0;
  if (!qword_1002920F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.ResultErrorCode,  &type metadata for Utility_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002920F0);
  }

  return result;
}

unint64_t sub_1000D3F54()
{
  unint64_t result = qword_1002920F8;
  if (!qword_1002920F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.ResultErrorCode,  &type metadata for Utility_ErrorInfo.ResultErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002920F8);
  }

  return result;
}

unint64_t sub_1000D3F9C()
{
  unint64_t result = qword_100292100;
  if (!qword_100292100)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.BatchErrorCode,  &type metadata for Utility_ErrorInfo.BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_100292100);
  }

  return result;
}

unint64_t sub_1000D3FE4()
{
  unint64_t result = qword_100292108;
  if (!qword_100292108)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.BatchErrorCode,  &type metadata for Utility_ErrorInfo.BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_100292108);
  }

  return result;
}

unint64_t sub_1000D402C()
{
  unint64_t result = qword_100292110;
  if (!qword_100292110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for Utility_ErrorInfo.BatchErrorCode,  &type metadata for Utility_ErrorInfo.BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_100292110);
  }

  return result;
}

uint64_t sub_1000D4070()
{
  return sub_1000BDAD8(&qword_100292118, &qword_100292120);
}

uint64_t sub_1000D4094()
{
  return sub_1000BDAD8(&qword_100292128, &qword_100292130);
}

uint64_t sub_1000D40B8()
{
  return sub_1000BD35C( &qword_100292138,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000D40E4()
{
  return sub_1000BD35C( &qword_100292140,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000D4110()
{
  return sub_1000BD35C( &qword_100292080,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000D413C()
{
  return sub_1000BD35C( &qword_100292148,  type metadata accessor for Utility_DeleteAllZonesRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesRequest);
}

uint64_t sub_1000D4168()
{
  return sub_1000BD35C( &qword_100292150,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000D4194()
{
  return sub_1000BD35C( &qword_100292158,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000D41C0()
{
  return sub_1000BD35C( &qword_100292098,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000D41EC()
{
  return sub_1000BD35C( &qword_100292160,  type metadata accessor for Utility_DeleteAllZonesResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteAllZonesResponse);
}

uint64_t sub_1000D4218()
{
  return sub_1000BD35C( &qword_100292168,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000D4244()
{
  return sub_1000BD35C( (unint64_t *)&qword_100292170,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000D4270()
{
  return sub_1000BD35C( &qword_1002920A0,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000D429C()
{
  return sub_1000BD35C( &qword_100292178,  type metadata accessor for Utility_DeleteZoneRequest,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000D42C8()
{
  return sub_1000BD35C( &qword_100292180,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000D42F4()
{
  return sub_1000BD35C( &qword_100292090,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000D4320()
{
  return sub_1000BD35C( &qword_1002920B0,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000D434C()
{
  return sub_1000BD35C( &qword_100292188,  type metadata accessor for Utility_DeleteZoneResponse,  (uint64_t)&protocol conformance descriptor for Utility_DeleteZoneResponse);
}

uint64_t sub_1000D4378()
{
  return sub_1000BD35C( &qword_100292190,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
}

uint64_t sub_1000D43A4()
{
  return sub_1000BD35C( &qword_100292198,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
}

uint64_t sub_1000D43D0()
{
  return sub_1000BD35C( &qword_1002920B8,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
}

uint64_t sub_1000D43FC()
{
  return sub_1000BD35C( &qword_1002921A0,  type metadata accessor for Utility_ErrorInfo,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo);
}

uint64_t sub_1000D4428()
{
  return sub_1000BD35C( &qword_1002921A8,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000D4454()
{
  return sub_1000BD35C( &qword_1002920C8,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000D4480()
{
  return sub_1000BD35C( &qword_1002920C0,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000D44AC()
{
  return sub_1000BD35C( &qword_1002921B0,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.DatabaseFailure);
}

uint64_t sub_1000D44D8()
{
  return sub_1000BD35C( &qword_1002921B8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000D4504()
{
  return sub_1000BD35C( &qword_1002920A8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000D4530()
{
  return sub_1000BD35C( &qword_1002920D8,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000D455C()
{
  return sub_1000BD35C( &qword_1002921C0,  type metadata accessor for Utility_ErrorInfo.ResultError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.ResultError);
}

uint64_t sub_1000D4588()
{
  return sub_1000BD35C( &qword_1002921C8,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000D45B4()
{
  return sub_1000BD35C( &qword_1002921D0,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000D45E0()
{
  return sub_1000BD35C( &qword_1002920E0,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
}

uint64_t sub_1000D460C()
{
  return sub_1000BD35C( &qword_1002921D8,  type metadata accessor for Utility_ErrorInfo.BatchError,  (uint64_t)&protocol conformance descriptor for Utility_ErrorInfo.BatchError);
}

uint64_t getEnumTagSinglePayload for Utility_DeleteAllZonesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D465C);
}

uint64_t storeEnumTagSinglePayload for Utility_DeleteAllZonesRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D466C);
}

uint64_t initializeBufferWithCopyOfBuffer for Utility_DeleteAllZonesResponse( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t destroy for Utility_DeleteAllZonesResponse(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = (uint64_t)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t *assignWithCopy for Utility_DeleteAllZonesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for Utility_DeleteAllZonesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_DeleteAllZonesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D494C);
}

uint64_t sub_1000D494C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Utility_DeleteAllZonesResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D49D4);
}

char *sub_1000D49D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000D4A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D75F8(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t *initializeBufferWithCopyOfBuffer for Utility_DeleteZoneRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    int v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for Utility_DeleteZoneRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *initializeWithCopy for Utility_DeleteZoneRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for Utility_DeleteZoneRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for Utility_DeleteZoneRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *assignWithTake for Utility_DeleteZoneRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_DeleteZoneRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D4CFC);
}

uint64_t sub_1000D4CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Utility_DeleteZoneRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D4D84);
}

uint64_t sub_1000D4D84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000D4DF8(uint64_t a1)
{
  v4[0] = &unk_100214460;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Utility_DeleteZoneResponse( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    char v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_1000BED3C(&qword_100292070);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v20 = v15[1];
      *char v14 = *v15;
      v14[1] = v20;
      v14[2] = v15[2];
      *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
      uint64_t v21 = *(int *)(v16 + 24);
      uint64_t v22 = (char *)v14 + v21;
      uint64_t v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain(v20);
      v12(v22, v23, v11);
      uint64_t v24 = *(int *)(v16 + 28);
      char v25 = (void *)((char *)v14 + v24);
      uint64_t v26 = (void *)((char *)v15 + v24);
      uint64_t v27 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
      {
        uint64_t v29 = sub_1000BED3C(&qword_100292078);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
      }

      else
      {
        uint64_t v30 = v26[1];
        void *v25 = *v26;
        v25[1] = v30;
        uint64_t v35 = v26[3];
        void v25[2] = v26[2];
        v25[3] = v35;
        v25[4] = v26[4];
        *((_BYTE *)v25 + 40) = *((_BYTE *)v26 + 40);
        v25[6] = v26[6];
        *((_BYTE *)v25 + 56) = *((_BYTE *)v26 + 56);
        uint64_t v31 = *(int *)(v27 + 32);
        uint64_t v34 = (char *)v25 + v31;
        uint64_t v32 = (char *)v26 + v31;
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v35);
        v12(v34, v32, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v4;
}

uint64_t destroy for Utility_DeleteZoneResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v11(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    v11(v6 + *(int *)(v7 + 24), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    uint64_t v10 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease(*(void *)(v9 + 8));
      swift_bridgeObjectRelease(*(void *)(v9 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 32), v5);
    }
  }

  return result;
}

void *initializeWithCopy for Utility_DeleteZoneResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  char v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100292070);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
    uint64_t v19 = *(int *)(v15 + 24);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain(v18);
    v11(v20, v21, v10);
    uint64_t v22 = *(int *)(v15 + 28);
    uint64_t v23 = (void *)((char *)v13 + v22);
    uint64_t v24 = (void *)((char *)v14 + v22);
    uint64_t v25 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
    {
      uint64_t v27 = sub_1000BED3C(&qword_100292078);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      uint64_t v28 = v24[1];
      void *v23 = *v24;
      v23[1] = v28;
      uint64_t v33 = v24[3];
      void v23[2] = v24[2];
      v23[3] = v33;
      v23[4] = v24[4];
      *((_BYTE *)v23 + 40) = *((_BYTE *)v24 + 40);
      v23[6] = v24[6];
      *((_BYTE *)v23 + 56) = *((_BYTE *)v24 + 56);
      uint64_t v29 = *(int *)(v25 + 32);
      uint64_t v32 = (char *)v23 + v29;
      uint64_t v30 = (char *)v24 + v29;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v33);
      v11(v32, v30, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

void *assignWithCopy for Utility_DeleteZoneResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19((uint64_t)v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      uint64_t v36 = *((void *)v16 + 1);
      uint64_t v37 = *(void *)(v15 + 8);
      *(void *)(v15 + _Block_object_dispose((const void *)(v1 - 152), 8) = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v37);
      uint64_t v38 = *((void *)v16 + 2);
      *(_BYTE *)(v15 + 24) = v16[24];
      *(void *)(v15 + 16) = v38;
      v13((char *)(v15 + *(int *)(v17 + 24)), &v16[*(int *)(v17 + 24)], v11);
      uint64_t v39 = *(int *)(v17 + 28);
      uint64_t v40 = v15 + v39;
      uint64_t v41 = &v16[v39];
      uint64_t v42 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v43 = *(void *)(v42 - 8);
      uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      LODWORD(v37) = v44(v40, 1LL, v42);
      int v45 = v44((uint64_t)v41, 1LL, v42);
      if ((_DWORD)v37)
      {
        if (!v45)
        {
          *(void *)uint64_t v40 = *(void *)v41;
          uint64_t v46 = *((void *)v41 + 1);
          *(void *)(v40 + _Block_object_dispose((const void *)(v1 - 152), 8) = v46;
          *(void *)(v40 + 16) = *((void *)v41 + 2);
          uint64_t v47 = *((void *)v41 + 3);
          *(void *)(v40 + 24) = v47;
          uint64_t v48 = *((void *)v41 + 4);
          *(_BYTE *)(v40 + 40) = v41[40];
          *(void *)(v40 + 32) = v48;
          uint64_t v49 = *((void *)v41 + 6);
          *(_BYTE *)(v40 + 56) = v41[56];
          *(void *)(v40 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v49;
          uint64_t v50 = *(int *)(v42 + 32);
          uint64_t v51 = v40 + v50;
          uint64_t v52 = &v41[v50];
          uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
          swift_bridgeObjectRetain(v46);
          swift_bridgeObjectRetain(v47);
          v53(v51, v52, v11);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
          return a1;
        }
      }

      else
      {
        if (!v45)
        {
          *(void *)uint64_t v40 = *(void *)v41;
          uint64_t v61 = *((void *)v41 + 1);
          uint64_t v62 = *(void *)(v40 + 8);
          *(void *)(v40 + _Block_object_dispose((const void *)(v1 - 152), 8) = v61;
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRelease(v62);
          *(void *)(v40 + 16) = *((void *)v41 + 2);
          uint64_t v63 = *((void *)v41 + 3);
          uint64_t v64 = *(void *)(v40 + 24);
          *(void *)(v40 + 24) = v63;
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRelease(v64);
          uint64_t v65 = *((void *)v41 + 4);
          *(_BYTE *)(v40 + 40) = v41[40];
          *(void *)(v40 + 32) = v65;
          uint64_t v66 = *((void *)v41 + 6);
          *(_BYTE *)(v40 + 56) = v41[56];
          *(void *)(v40 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v66;
          v13((char *)(v40 + *(int *)(v42 + 32)), &v41[*(int *)(v42 + 32)], v11);
          return a1;
        }

        sub_1000CECE0(v40, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
      }

      size_t v33 = *(void *)(*(void *)(sub_1000BED3C(&qword_100292078) - 8) + 64LL);
      uint64_t v34 = (void *)v40;
      uint64_t v35 = v41;
      goto LABEL_8;
    }

    sub_1000CECE0(v15, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_7:
    size_t v33 = *(void *)(*(void *)(sub_1000BED3C(&qword_100292070) - 8) + 64LL);
    uint64_t v34 = (void *)v15;
    uint64_t v35 = v16;
LABEL_8:
    memcpy(v34, v35, v33);
    return a1;
  }

  if (v20) {
    goto LABEL_7;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  uint64_t v21 = *((void *)v16 + 1);
  *(void *)(v15 + _Block_object_dispose((const void *)(v1 - 152), 8) = v21;
  uint64_t v22 = *((void *)v16 + 2);
  *(_BYTE *)(v15 + 24) = v16[24];
  *(void *)(v15 + 16) = v22;
  uint64_t v23 = *(int *)(v17 + 24);
  uint64_t v24 = v15 + v23;
  uint64_t v25 = &v16[v23];
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain(v21);
  v26(v24, v25, v11);
  uint64_t v27 = *(int *)(v17 + 28);
  uint64_t v28 = (void *)(v15 + v27);
  uint64_t v29 = &v16[v27];
  uint64_t v30 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
  {
    uint64_t v32 = sub_1000BED3C(&qword_100292078);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    *uint64_t v28 = *(void *)v29;
    uint64_t v54 = *((void *)v29 + 1);
    v28[1] = v54;
    v28[2] = *((void *)v29 + 2);
    uint64_t v68 = (void (*)(char *, char *, uint64_t))v26;
    uint64_t v55 = *((void *)v29 + 3);
    v28[3] = v55;
    uint64_t v56 = *((void *)v29 + 4);
    *((_BYTE *)v28 + 40) = v29[40];
    void v28[4] = v56;
    uint64_t v57 = *((void *)v29 + 6);
    *((_BYTE *)v28 + 56) = v29[56];
    void v28[6] = v57;
    uint64_t v58 = *(int *)(v30 + 32);
    id v67 = (char *)v28 + v58;
    uint64_t v59 = &v29[v58];
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    v68(v67, v59, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

_OWORD *initializeWithTake for Utility_DeleteZoneResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100292070);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    uint64_t v17 = *(int *)(v14 + 28);
    uint64_t v18 = (_OWORD *)((char *)v12 + v17);
    uint64_t v19 = (_OWORD *)((char *)v13 + v17);
    uint64_t v20 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
    {
      uint64_t v22 = sub_1000BED3C(&qword_100292078);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      __int128 v23 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v23;
      *((void *)v18 + 4) = *((void *)v19 + 4);
      *((_BYTE *)v18 + 40) = *((_BYTE *)v19 + 40);
      *((void *)v18 + 6) = *((void *)v19 + 6);
      *((_BYTE *)v18 + 56) = *((_BYTE *)v19 + 56);
      v10((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
    }

    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

void *assignWithTake for Utility_DeleteZoneResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Utility_ErrorInfo.ResultError(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19((uint64_t)v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      uint64_t v31 = *((void *)v16 + 1);
      uint64_t v32 = *(void *)(v15 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + _Block_object_dispose((const void *)(v1 - 152), 8) = v31;
      swift_bridgeObjectRelease(v32);
      *(void *)(v15 + 16) = *((void *)v16 + 2);
      *(_BYTE *)(v15 + 24) = v16[24];
      v13((char *)(v15 + *(int *)(v17 + 24)), &v16[*(int *)(v17 + 24)], v11);
      uint64_t v33 = *(int *)(v17 + 28);
      uint64_t v34 = v15 + v33;
      uint64_t v35 = &v16[v33];
      uint64_t v36 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v34, 1LL, v36);
      int v40 = v38((uint64_t)v35, 1LL, v36);
      if (v39)
      {
        if (!v40)
        {
          __int128 v41 = *((_OWORD *)v35 + 1);
          *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
          *(_OWORD *)(v34 + 16) = v41;
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(_BYTE *)(v34 + 40) = v35[40];
          *(void *)(v34 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *((void *)v35 + 6);
          *(_BYTE *)(v34 + 56) = v35[56];
          (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))( v34 + *(int *)(v36 + 32),  &v35[*(int *)(v36 + 32)],  v11);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
          return a1;
        }
      }

      else
      {
        if (!v40)
        {
          uint64_t v44 = *((void *)v35 + 1);
          uint64_t v45 = *(void *)(v34 + 8);
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + _Block_object_dispose((const void *)(v1 - 152), 8) = v44;
          swift_bridgeObjectRelease(v45);
          uint64_t v46 = *((void *)v35 + 3);
          uint64_t v47 = *(void *)(v34 + 24);
          *(void *)(v34 + 16) = *((void *)v35 + 2);
          *(void *)(v34 + 24) = v46;
          swift_bridgeObjectRelease(v47);
          *(void *)(v34 + 32) = *((void *)v35 + 4);
          *(_BYTE *)(v34 + 40) = v35[40];
          *(void *)(v34 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *((void *)v35 + 6);
          *(_BYTE *)(v34 + 56) = v35[56];
          v13((char *)(v34 + *(int *)(v36 + 32)), &v35[*(int *)(v36 + 32)], v11);
          return a1;
        }

        sub_1000CECE0(v34, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
      }

      size_t v28 = *(void *)(*(void *)(sub_1000BED3C(&qword_100292078) - 8) + 64LL);
      uint64_t v29 = (void *)v34;
      uint64_t v30 = v35;
      goto LABEL_8;
    }

    sub_1000CECE0(v15, type metadata accessor for Utility_ErrorInfo.ResultError);
LABEL_7:
    size_t v28 = *(void *)(*(void *)(sub_1000BED3C(&qword_100292070) - 8) + 64LL);
    uint64_t v29 = (void *)v15;
    uint64_t v30 = v16;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }

  if (v20) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(void *)(v15 + 16) = *((void *)v16 + 2);
  *(_BYTE *)(v15 + 24) = v16[24];
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v21(v15 + *(int *)(v17 + 24), &v16[*(int *)(v17 + 24)], v11);
  uint64_t v22 = *(int *)(v17 + 28);
  __int128 v23 = (_OWORD *)(v15 + v22);
  uint64_t v24 = &v16[v22];
  uint64_t v25 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, v25))
  {
    uint64_t v27 = sub_1000BED3C(&qword_100292078);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    __int128 v42 = *((_OWORD *)v24 + 1);
    _OWORD *v23 = *(_OWORD *)v24;
    v23[1] = v42;
    *((void *)v23 + 4) = *((void *)v24 + 4);
    *((_BYTE *)v23 + 40) = v24[40];
    *((void *)v23 + 6) = *((void *)v24 + 6);
    *((_BYTE *)v23 + 56) = v24[56];
    v21((uint64_t)v23 + *(int *)(v25 + 32), &v24[*(int *)(v25 + 32)], v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
  }

  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_DeleteZoneResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D5D14);
}

uint64_t sub_1000D5D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100292070);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Utility_DeleteZoneResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D5DC4);
}

uint64_t sub_1000D5DC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100292070);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D5E64(uint64_t a1)
{
  v6[0] = &unk_100214460;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0(319LL, (unint64_t *)&unk_100292400, type metadata accessor for Utility_ErrorInfo.ResultError);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwxx_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t _s22CloudKitImplementation29Utility_DeleteAllZonesRequestVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6090);
}

uint64_t sub_1000D6094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D60DC);
}

uint64_t sub_1000D60E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1000D6120(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for Utility_ErrorInfo.ResultErrorCode()
{
  return &type metadata for Utility_ErrorInfo.ResultErrorCode;
}

ValueMetadata *type metadata accessor for Utility_ErrorInfo.BatchErrorCode()
{
  return &type metadata for Utility_ErrorInfo.BatchErrorCode;
}

void *initializeBufferWithCopyOfBuffer for Utility_ErrorInfo.DatabaseFailure( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v12);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a2[6];
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v9, v8, v10);
  }

  return v3;
}

uint64_t destroy for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v10;
  uint64_t v11 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v11;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo.DatabaseFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6554);
}

uint64_t sub_1000D6554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo.DatabaseFailure( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D65DC);
}

uint64_t sub_1000D65DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000D6650(uint64_t a1)
{
  v4[0] = &unk_100214460;
  v4[1] = &unk_100214460;
  void v4[2] = "\t";
  void v4[3] = "\t";
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Utility_ErrorInfo.ResultError( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
    {
      uint64_t v18 = sub_1000BED3C(&qword_100292078);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v20 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v20;
      uint64_t v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      void v14[4] = v15[4];
      *((_BYTE *)v14 + 40) = *((_BYTE *)v15 + 40);
      v14[6] = v15[6];
      *((_BYTE *)v14 + 56) = *((_BYTE *)v15 + 56);
      uint64_t v22 = *(int *)(v16 + 32);
      __int128 v23 = (char *)v14 + v22;
      uint64_t v24 = (char *)v15 + v22;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      v12((uint64_t)v23, (uint64_t)v24, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }
  }

  return v4;
}

uint64_t destroy for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 32), v5);
  }

  return result;
}

uint64_t initializeWithCopy for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
  {
    uint64_t v17 = sub_1000BED3C(&qword_100292078);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    uint64_t v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    uint64_t v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    void v13[4] = v14[4];
    *((_BYTE *)v13 + 40) = *((_BYTE *)v14 + 40);
    v13[6] = v14[6];
    *((_BYTE *)v13 + 56) = *((_BYTE *)v14 + 56);
    uint64_t v20 = *(int *)(v15 + 32);
    uint64_t v21 = (char *)v13 + v20;
    uint64_t v22 = (char *)v14 + v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    v11((uint64_t)v21, (uint64_t)v22, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  return a1;
}

uint64_t assignWithCopy for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v11) = v20(v16, 1LL, v18);
  int v21 = v20(v17, 1LL, v18);
  if (!(_DWORD)v11)
  {
    if (!v21)
    {
      *(void *)uint64_t v16 = *(void *)v17;
      uint64_t v32 = *(void *)(v17 + 8);
      uint64_t v33 = *(void *)(v16 + 8);
      *(void *)(v16 + _Block_object_dispose((const void *)(v1 - 152), 8) = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      uint64_t v34 = *(void *)(v17 + 24);
      uint64_t v35 = *(void *)(v16 + 24);
      *(void *)(v16 + 24) = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
      uint64_t v36 = *(void *)(v17 + 32);
      *(_BYTE *)(v16 + 40) = *(_BYTE *)(v17 + 40);
      *(void *)(v16 + 32) = v36;
      uint64_t v37 = *(void *)(v17 + 48);
      *(_BYTE *)(v16 + 56) = *(_BYTE *)(v17 + 56);
      *(void *)(v16 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v37;
      v14(v16 + *(int *)(v18 + 32), v17 + *(int *)(v18 + 32), v12);
      return a1;
    }

    sub_1000CECE0(v16, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v30 = sub_1000BED3C(&qword_100292078);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v30 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v22 = *(void *)(v17 + 8);
  *(void *)(v16 + _Block_object_dispose((const void *)(v1 - 152), 8) = v22;
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  uint64_t v23 = *(void *)(v17 + 24);
  *(void *)(v16 + 24) = v23;
  uint64_t v24 = *(void *)(v17 + 32);
  *(_BYTE *)(v16 + 40) = *(_BYTE *)(v17 + 40);
  *(void *)(v16 + 32) = v24;
  uint64_t v25 = *(void *)(v17 + 48);
  *(_BYTE *)(v16 + 56) = *(_BYTE *)(v17 + 56);
  *(void *)(v16 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v25;
  uint64_t v26 = *(int *)(v18 + 32);
  uint64_t v27 = v16 + v26;
  uint64_t v28 = v17 + v26;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v29(v27, v28, v12);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  return a1;
}

uint64_t initializeWithTake for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_1000BED3C(&qword_100292078);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    __int128 v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((void *)v12 + 4) = *((void *)v13 + 4);
    *((_BYTE *)v12 + 40) = *((_BYTE *)v13 + 40);
    *((void *)v12 + 6) = *((void *)v13 + 6);
    *((_BYTE *)v12 + 56) = *((_BYTE *)v13 + 56);
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t assignWithTake for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Utility_ErrorInfo.DatabaseFailure(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1LL, v17);
  int v20 = v19(v16, 1LL, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      uint64_t v24 = *(void *)(v16 + 8);
      uint64_t v25 = *(void *)(v15 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + _Block_object_dispose((const void *)(v1 - 152), 8) = v24;
      swift_bridgeObjectRelease(v25);
      uint64_t v26 = *(void *)(v16 + 24);
      uint64_t v27 = *(void *)(v15 + 24);
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(void *)(v15 + 24) = v26;
      swift_bridgeObjectRelease(v27);
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
      *(_BYTE *)(v15 + 40) = *(_BYTE *)(v16 + 40);
      *(void *)(v15 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(v16 + 48);
      *(_BYTE *)(v15 + 56) = *(_BYTE *)(v16 + 56);
      v13(v15 + *(int *)(v17 + 32), v16 + *(int *)(v17 + 32), v11);
      return a1;
    }

    sub_1000CECE0(v15, type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v22 = sub_1000BED3C(&qword_100292078);
    memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    return a1;
  }

  __int128 v21 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v21;
  *(void *)(v15 + 32) = *(void *)(v16 + 32);
  *(_BYTE *)(v15 + 40) = *(_BYTE *)(v16 + 40);
  *(void *)(v15 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(v16 + 48);
  *(_BYTE *)(v15 + 56) = *(_BYTE *)(v16 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))( v15 + *(int *)(v17 + 32),  v16 + *(int *)(v17 + 32),  v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo.ResultError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6FB8);
}

uint64_t sub_1000D6FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100292078);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo.ResultError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7068);
}

uint64_t sub_1000D7068(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100292078);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000D7108(uint64_t a1)
{
  v6[0] = &unk_100214460;
  v6[1] = "\t";
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_1002925D0,  type metadata accessor for Utility_ErrorInfo.DatabaseFailure);
    if (v5 <= 0x3F)
    {
      void v6[3] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

void sub_1000D71B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void *initializeBufferWithCopyOfBuffer for Utility_ErrorInfo.BatchError( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Utility_ErrorInfo.BatchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D74F0);
}

uint64_t sub_1000D74F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Utility_ErrorInfo.BatchError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7578);
}

uint64_t sub_1000D7578(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000D75EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D75F8(a1, a2, a3, (uint64_t)&unk_100214460);
}

uint64_t sub_1000D75F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a4;
  v7[1] = "\t";
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v6 <= 0x3F)
  {
    v7[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v7, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t Utility_PhotosUtilityAPIAsync.deleteZone(zoneName:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  sub_1000D7788();
  static Message.with(_:)(sub_1000D7774, v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  return sub_1000CECE0((uint64_t)v14, type metadata accessor for Utility_DeleteZoneRequest);
}

uint64_t sub_1000D7774(uint64_t a1)
{
  return sub_1000D7CC0(a1);
}

unint64_t sub_1000D7788()
{
  unint64_t result = qword_100292170;
  if (!qword_100292170)
  {
    uint64_t v1 = type metadata accessor for Utility_DeleteZoneRequest(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Utility_DeleteZoneRequest, v1);
    atomic_store(result, (unint64_t *)&qword_100292170);
  }

  return result;
}

uint64_t Utility_PhotosUtilityAPIAsync.deleteAllZones(completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Utility_DeleteAllZonesRequest(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UnknownStorage.init()(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v11, a1, a2, a3, a4);
  return sub_1000CECE0((uint64_t)v11, type metadata accessor for Utility_DeleteAllZonesRequest);
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.__allocating_init(codeService:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.init(codeService:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void Utility_PhotosUtilityAPIAsyncClient.deleteZone(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_1002926F0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_1002926F8));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0x6F5A6574656C6564LL, 0xEA0000000000656ELL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Utility_DeleteZoneRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

void Utility_PhotosUtilityAPIAsyncClient.deleteAllZones(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100292700);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Utility_DeleteAllZonesRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100292708));
  uint64_t v12 = (void *)CKCodeOperation.init(functionName:request:)(0x6C416574656C6564LL, 0xEE0073656E6F5A6CLL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Utility_DeleteAllZonesRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  CKCodeService.add<A, B>(_:)(v12);
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.deinit()
{
  return v0;
}

uint64_t Utility_PhotosUtilityAPIAsyncClient.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void sub_1000D7B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D7BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t Utility_PhotosUtilityAPIAsyncOperation.deleteZone(zoneName:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  sub_1000D7788();
  static Message.with(_:)(sub_1000D7774, v17);
  uint64_t v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(v14, a3, a4, a5, a6);
  sub_1000CECE0((uint64_t)v14, type metadata accessor for Utility_DeleteZoneRequest);
  return v15;
}

uint64_t sub_1000D7CC0(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    unint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(v1 + 16);
    uint64_t v5 = *(void *)(result + 8);
    swift_bridgeObjectRetain(v2);
    uint64_t result = swift_bridgeObjectRelease(v5);
    void *v3 = v4;
    v3[1] = v2;
  }

  return result;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperation.deleteAllZones(completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Utility_DeleteAllZonesRequest(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UnknownStorage.init()(v9);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v11, a1, a2, a3, a4);
  sub_1000CECE0((uint64_t)v11, type metadata accessor for Utility_DeleteAllZonesRequest);
  return v12;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.__allocating_init()()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.deinit()
{
  return v0;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.deleteZone(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_1002926F0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Utility_DeleteZoneRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_1002926F8));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x6F5A6574656C6564LL, 0xEA0000000000656ELL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Utility_DeleteZoneRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.deleteAllZones(_:completion:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000BED3C(&qword_100292700);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Utility_DeleteAllZonesRequest(0LL);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  v10(v8, 1LL, 1LL, v9);
  id v11 = objc_allocWithZone((Class)sub_1000BED3C(&qword_100292708));
  uint64_t v12 = CKCodeOperation.init(functionName:request:)(0x6C416574656C6564LL, 0xEE0073656E6F5A6CLL, v8);
  sub_1000CEC58(a1, (uint64_t)v8, type metadata accessor for Utility_DeleteAllZonesRequest);
  v10(v8, 0LL, 1LL, v9);
  dispatch thunk of CKCodeOperation.request.setter(v8);
  swift_retain(a3);
  dispatch thunk of CKCodeOperation.codeOperationResultBlock.setter(a2, a3);
  return v12;
}

uint64_t Utility_PhotosUtilityAPIAsyncOperationClient.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

ValueMetadata *type metadata accessor for Utility_PhotosUtilityAPI()
{
  return &type metadata for Utility_PhotosUtilityAPI;
}

uint64_t type metadata accessor for Utility_PhotosUtilityAPIAsyncClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC22CloudKitImplementation35Utility_PhotosUtilityAPIAsyncClient);
}

uint64_t type metadata accessor for Utility_PhotosUtilityAPIAsyncOperationClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC22CloudKitImplementation44Utility_PhotosUtilityAPIAsyncOperationClient);
}

uint64_t RequestItem.operationID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 16, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 24);
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  return swift_bridgeObjectRelease(v13);
}

uint64_t type metadata accessor for RequestItem(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293040, (uint64_t)&nominal type descriptor for RequestItem);
}

uint64_t type metadata accessor for RequestItem._StorageClass(uint64_t a1)
{
  return sub_1000BCF80(a1, (uint64_t *)&unk_100293580, (uint64_t)&nominal type descriptor for RequestItem._StorageClass);
}

uint64_t RequestItem.recordID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 32, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 40);
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  return swift_bridgeObjectRelease(v13);
}

uint64_t RequestItem.zoneName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 64, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 72);
  *(void *)(v12 + 64) = a1;
  *(void *)(v12 + 72) = a2;
  return swift_bridgeObjectRelease(v13);
}

uint64_t RequestItem.ownerID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 80, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 88);
  *(void *)(v12 + 80) = a1;
  *(void *)(v12 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = a2;
  return swift_bridgeObjectRelease(v13);
}

uint64_t RequestItem.resourceFingerprint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 112, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 120);
  *(void *)(v12 + 112) = a1;
  *(void *)(v12 + 120) = a2;
  return swift_bridgeObjectRelease(v13);
}

uint64_t RequestItem.records.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v7 = swift_retain(v5);
    uint64_t v8 = sub_1000E5C5C(v7);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v8;
    swift_release(v9);
  }

  uint64_t v10 = *(void *)(v2 + v4);
  swift_beginAccess(v10 + 128, v13, 1LL, 0LL);
  uint64_t v11 = *(void *)(v10 + 128);
  *(void *)(v10 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  return swift_bridgeObjectRelease(v11);
}

uint64_t RequestItem.srcFieldName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  swift_beginAccess(v12 + 48, v15, 1LL, 0LL);
  uint64_t v13 = *(void *)(v12 + 56);
  *(void *)(v12 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  *(void *)(v12 + 56) = a2;
  return swift_bridgeObjectRelease(v13);
}

uint64_t RequestItem.downloadType.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v3 + v6);
    *(void *)(v3 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = *(void *)(v3 + v6);
  uint64_t result = swift_beginAccess(v12 + 96, v14, 1LL, 0LL);
  *(void *)(v12 + 96) = a1;
  *(_BYTE *)(v12 + 104) = a2 & 1;
  return result;
}

uint64_t RequestItem.timeRange.setter(uint64_t a1)
{
  return sub_1000D8780( a1,  &qword_100292870,  type metadata accessor for CMTimeRange,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange);
}

  ;
}

uint64_t RequestItem.mediaTypeHint.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v7 = swift_retain(v5);
    uint64_t v8 = sub_1000E5C5C(v7);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v8;
    swift_release(v9);
  }

  swift_beginAccess(v10, v13, 1LL, 0LL);
  uint64_t v11 = *v10;
  uint64_t *v10 = a1;
  return swift_bridgeObjectRelease(v11);
}

uint64_t RequestItem.videoProfileTierLevelInformation.setter(uint64_t a1)
{
  return sub_1000D8780( a1,  &qword_100292888,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation);
}

uint64_t sub_1000D8780(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v8 = v4;
  uint64_t v10 = sub_1000BED3C(a2);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v11);
  uint64_t v15 = &v27[-v14 - 8];
  uint64_t v16 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v4 + v16)) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v4 + v16);
    uint64_t v18 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    uint64_t v19 = swift_retain(v17);
    uint64_t v20 = sub_1000E5C5C(v19);
    swift_release(v17);
    uint64_t v21 = *(void *)(v8 + v16);
    *(void *)(v8 + v16) = v20;
    swift_release(v21);
  }

  uint64_t v22 = *(void *)(v8 + v16);
  sub_1000CEC9C(a1, (uint64_t)v15, a3);
  uint64_t v23 = a3(0LL);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v15, 0LL, 1LL, v23);
  sub_1000E6418((uint64_t)v15, (uint64_t)v13, a2);
  uint64_t v24 = v22 + *a4;
  swift_beginAccess(v24, v27, 33LL, 0LL);
  swift_retain(v22);
  sub_1000E645C((uint64_t)v13, v24, a2);
  swift_endAccess(v27);
  return swift_release(v22);
}

uint64_t RequestItem.apacAudioTrackChannelCount.setter(int a1)
{
  return sub_1000D8920( a1,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
}

uint64_t RequestItem.apacAudioTrackHoachannelCount.setter(int a1)
{
  return sub_1000D8920( a1,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
}

uint64_t sub_1000D8920(int a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v2 + v6);
    uint64_t v8 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    uint64_t v9 = swift_retain(v7);
    uint64_t v10 = sub_1000E5C5C(v9);
    swift_release(v7);
    uint64_t v11 = *(void *)(v4 + v6);
    *(void *)(v4 + v6) = v10;
    swift_release(v11);
  }

  uint64_t v12 = (_DWORD *)(*(void *)(v4 + v6) + *a2);
  uint64_t result = swift_beginAccess(v12, v14, 1LL, 0LL);
  *uint64_t v12 = a1;
  return result;
}

uint64_t RequestItem.apacAudioTrackBedchannelCount.setter(int a1)
{
  return sub_1000D8920( a1,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
}

uint64_t RequestItem.apacAudioTrackCodecProfileLevelDescription.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000D89FC( a1,  a2,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
}

uint64_t RequestItem.cameraMake.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000D89FC( a1,  a2,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
}

uint64_t sub_1000D89FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_1000E5C5C(v11);
    swift_release(v9);
    uint64_t v13 = *(void *)(v5 + v8);
    *(void *)(v5 + v_Block_object_dispose((const void *)(v1 - 152), 8) = v12;
    swift_release(v13);
  }

  uint64_t v14 = (void *)(*(void *)(v5 + v8) + *a3);
  swift_beginAccess(v14, v17, 1LL, 0LL);
  uint64_t v15 = v14[1];
  *uint64_t v14 = a1;
  v14[1] = a2;
  return swift_bridgeObjectRelease(v15);
}

uint64_t RequestItem.cameraModel.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000D89FC( a1,  a2,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
}

uint64_t RequestItem.clientSupportsProMotionDisplay.setter(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + v4)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v4);
    uint64_t v6 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v7 = swift_retain(v5);
    uint64_t v8 = sub_1000E5C5C(v7);
    swift_release(v5);
    uint64_t v9 = *(void *)(v2 + v4);
    *(void *)(v2 + v4) = v8;
    swift_release(v9);
  }

  uint64_t v10 = (_BYTE *)(*(void *)(v2 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  uint64_t result = swift_beginAccess(v10, v12, 1LL, 0LL);
  _BYTE *v10 = a1 & 1;
  return result;
}

uint64_t ResponseItem.assetRecord.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100291F58);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ResponseItem(0LL);
  sub_1000CE7B4(v1 + *(int *)(v6 + 52), (uint64_t)v5, &qword_100291F58);
  uint64_t v7 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  Ckcode_RecordTransport.init()();
  return sub_1000CEDAC((uint64_t)v5, &qword_100291F58);
}

uint64_t UploadResourcesRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000D9610((void (*)(void))type metadata accessor for UploadResourcesRequest, a1);
}

uint64_t UploadResource.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  uint64_t v1 = type metadata accessor for UploadResource(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t ResourceType.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000E64DC);
}

BOOL ResponseItem.hasAssetRecord.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100291F58);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for ResponseItem(0LL);
  sub_1000CE7B4(v0 + *(int *)(v4 + 52), (uint64_t)v3, &qword_100291F58);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100291F58);
  return v6;
}

uint64_t sub_1000D8D90(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E677C();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000D8DC8()
{
  static DownloadType.allCases = (uint64_t)&off_1002434A8;
}

uint64_t *DownloadType.allCases.unsafeMutableAddressor()
{
  if (qword_100291798 != -1) {
    swift_once(&qword_100291798, sub_1000D8DC8);
  }
  return &static DownloadType.allCases;
}

uint64_t static DownloadType.allCases.getter()
{
  return sub_1000B92C0(&qword_100291798, &static DownloadType.allCases);
}

uint64_t static DownloadType.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_100291798, &static DownloadType.allCases, (uint64_t)sub_1000D8DC8);
}

uint64_t (*static DownloadType.allCases.modify(uint64_t a1))(void)
{
  if (qword_100291798 != -1) {
    swift_once(&qword_100291798, sub_1000D8DC8);
  }
  swift_beginAccess(&static DownloadType.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000D8EC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_100291798, &static DownloadType.allCases, (uint64_t)sub_1000D8DC8, a1);
}

uint64_t ItemErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000E64F0);
}

uint64_t ItemErrorCode.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_100216898[result];
  }
  return result;
}

uint64_t sub_1000D8EFC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000E64F0, a1);
}

uint64_t sub_1000D8F08()
{
  uint64_t result = *v0;
  if (*((_BYTE *)v0 + 8) == 1) {
    return qword_100216898[result];
  }
  return result;
}

uint64_t sub_1000D8F28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, sub_1000E64F0, a2);
}

void sub_1000D8F34(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1) {
    uint64_t v2 = qword_100216898[v2];
  }
  *a1 = v2;
}

uint64_t sub_1000D8F58(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E6738();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000D8F90(uint64_t a1, uint64_t a2)
{
  return sub_1000B8C10(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

void sub_1000D8FAC()
{
  static ItemErrorCode.allCases = (uint64_t)&off_1002434F8;
}

uint64_t *ItemErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002917A0 != -1) {
    swift_once(&qword_1002917A0, sub_1000D8FAC);
  }
  return &static ItemErrorCode.allCases;
}

uint64_t static ItemErrorCode.allCases.getter()
{
  return sub_1000B92C0(&qword_1002917A0, &static ItemErrorCode.allCases);
}

uint64_t static ItemErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002917A0, &static ItemErrorCode.allCases, (uint64_t)sub_1000D8FAC);
}

uint64_t (*static ItemErrorCode.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002917A0 != -1) {
    swift_once(&qword_1002917A0, sub_1000D8FAC);
  }
  swift_beginAccess(&static ItemErrorCode.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000D90A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002917A0, &static ItemErrorCode.allCases, (uint64_t)sub_1000D8FAC, a1);
}

uint64_t BatchErrorCode.init(rawValue:)(uint64_t a1)
{
  return sub_1000B8D20(a1, (uint64_t (*)(void))sub_1000E65B4);
}

uint64_t BatchErrorCode.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return qword_100216878[result];
  }
  return result;
}

uint64_t sub_1000D90E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000E65B4, a1);
}

uint64_t sub_1000D90EC()
{
  uint64_t result = *v0;
  if (*((_BYTE *)v0 + 8) == 1) {
    return qword_100216878[result];
  }
  return result;
}

uint64_t sub_1000D910C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, sub_1000E65B4, a2);
}

void sub_1000D9118(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((_BYTE *)v1 + 8) == 1) {
    uint64_t v2 = qword_100216878[v2];
  }
  *a1 = v2;
}

uint64_t sub_1000D913C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E66F4();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000D9174(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 8) == 1) {
    uint64_t v2 = qword_100216878[v2];
  }
  uint64_t v3 = *a2;
  if (*((_BYTE *)a2 + 8)) {
    uint64_t v3 = qword_100216878[v3];
  }
  return v2 == v3;
}

void sub_1000D91AC()
{
  static BatchErrorCode.allCases = (uint64_t)&off_100243598;
}

uint64_t *BatchErrorCode.allCases.unsafeMutableAddressor()
{
  if (qword_1002917A8 != -1) {
    swift_once(&qword_1002917A8, sub_1000D91AC);
  }
  return &static BatchErrorCode.allCases;
}

uint64_t static BatchErrorCode.allCases.getter()
{
  return sub_1000B92C0(&qword_1002917A8, &static BatchErrorCode.allCases);
}

uint64_t static BatchErrorCode.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002917A8, &static BatchErrorCode.allCases, (uint64_t)sub_1000D91AC);
}

uint64_t (*static BatchErrorCode.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002917A8 != -1) {
    swift_once(&qword_1002917A8, sub_1000D91AC);
  }
  swift_beginAccess(&static BatchErrorCode.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000D92A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002917A8, &static BatchErrorCode.allCases, (uint64_t)sub_1000D91AC, a1);
}

uint64_t sub_1000D92C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8D60((uint64_t (*)(void))sub_1000E64DC, a1);
}

uint64_t sub_1000D92CC()
{
  return Goldilocks_ExitType.rawValue.getter(*(void *)v0, *(unsigned __int8 *)(v0 + 8));
}

uint64_t sub_1000D92D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B8DBC(a1, (uint64_t (*)(void))sub_1000E64DC, a2);
}

uint64_t sub_1000D92E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Goldilocks_ExitType.rawValue.getter(*(void *)v1, *(unsigned __int8 *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t sub_1000D9310(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E67C0();
  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_1000D9348(uint64_t a1, uint64_t *a2)
{
  return sub_1000B8BE0(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void sub_1000D9364()
{
  static ResourceType.allCases = (uint64_t)&off_1002435F8;
}

uint64_t *ResourceType.allCases.unsafeMutableAddressor()
{
  if (qword_1002917B0 != -1) {
    swift_once(&qword_1002917B0, sub_1000D9364);
  }
  return &static ResourceType.allCases;
}

uint64_t static ResourceType.allCases.getter()
{
  return sub_1000B92C0(&qword_1002917B0, &static ResourceType.allCases);
}

uint64_t static ResourceType.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002917B0, &static ResourceType.allCases, (uint64_t)sub_1000D9364);
}

uint64_t (*static ResourceType.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002917B0 != -1) {
    swift_once(&qword_1002917B0, sub_1000D9364);
  }
  swift_beginAccess(&static ResourceType.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000D945C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002917B0, &static ResourceType.allCases, (uint64_t)sub_1000D9364, a1);
}

uint64_t sub_1000D9478(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000E6804();
  return Enum.hash(into:)(a1, a2, v4);
}

void sub_1000D94B0()
{
  static UploadRecordType.allCases = (uint64_t)&off_1002437E8;
}

uint64_t *UploadRecordType.allCases.unsafeMutableAddressor()
{
  if (qword_1002917B8 != -1) {
    swift_once(&qword_1002917B8, sub_1000D94B0);
  }
  return &static UploadRecordType.allCases;
}

uint64_t static UploadRecordType.allCases.getter()
{
  return sub_1000B92C0(&qword_1002917B8, &static UploadRecordType.allCases);
}

uint64_t static UploadRecordType.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002917B8, &static UploadRecordType.allCases, (uint64_t)sub_1000D94B0);
}

uint64_t (*static UploadRecordType.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002917B8 != -1) {
    swift_once(&qword_1002917B8, sub_1000D94B0);
  }
  swift_beginAccess(&static UploadRecordType.allCases, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_1000D95A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002917B8, &static UploadRecordType.allCases, (uint64_t)sub_1000D94B0, a1);
}

uint64_t ResourceAnalyzeRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for ResourceAnalyzeRequest, a1);
}

uint64_t ResourceAnalyzeRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t (*ResourceAnalyzeRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceAnalyzeRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000D9610((void (*)(void))type metadata accessor for ResourceAnalyzeRequest, a1);
}

uint64_t sub_1000D9610@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = &_swiftEmptyArrayStorage;
  a1(0LL);
  return UnknownStorage.init()();
}

uint64_t (*Goldilocks_ExitMoveBatchErrorFeedbackRequest.moveBatchID.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t (*Goldilocks_ExitMoveBatchResponse.recordIdsToMove.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceAnalyzeResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9714(type metadata accessor for ResourceAnalyzeResponse, a1);
}

uint64_t ResourceAnalyzeResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000D976C(a1, type metadata accessor for ResourceAnalyzeResponse);
}

uint64_t (*ResourceAnalyzeResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceAnalyzeResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D97E8((void (*)(void))type metadata accessor for ResourceAnalyzeResponse, a1);
}

uint64_t ResourceDownloadRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for ResourceDownloadRequest, a1);
}

uint64_t ResourceDownloadRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for ResourceDownloadRequest);
}

uint64_t (*ResourceDownloadRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceDownloadRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000D9610((void (*)(void))type metadata accessor for ResourceDownloadRequest, a1);
}

uint64_t ResourceDownloadResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9714(type metadata accessor for ResourceDownloadResponse, a1);
}

uint64_t sub_1000D9714@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t ResourceDownloadResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000D976C(a1, type metadata accessor for ResourceDownloadResponse);
}

uint64_t sub_1000D976C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*ResourceDownloadResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceDownloadResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D97E8((void (*)(void))type metadata accessor for ResourceDownloadResponse, a1);
}

uint64_t sub_1000D97E8@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &_swiftEmptyArrayStorage;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0xE000000000000000LL;
  *(void *)(a2 + 40) = 0LL;
  a1(0LL);
  return UnknownStorage.init()();
}

uint64_t ResourceStreamRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for ResourceStreamRequest, a1);
}

uint64_t ResourceStreamRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for ResourceStreamRequest);
}

uint64_t (*ResourceStreamRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceStreamRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000D9610((void (*)(void))type metadata accessor for ResourceStreamRequest, a1);
}

uint64_t Goldilocks_ExitMoveBatchResponse.batchID.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t Goldilocks_ExitMoveBatchResponse.batchID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t ResourceStreamResponse.retryAfterMillis.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ResourceStreamResponse.retryAfterMillis.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t ResourceStreamResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9714(type metadata accessor for ResourceStreamResponse, a1);
}

uint64_t ResourceStreamResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000D976C(a1, type metadata accessor for ResourceStreamResponse);
}

uint64_t (*ResourceStreamResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResourceStreamResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D97E8((void (*)(void))type metadata accessor for ResourceStreamResponse, a1);
}

uint64_t VideoHEVCProfileTierLevelInformation.profile.getter()
{
  return *v0;
}

uint64_t VideoHEVCProfileTierLevelInformation.profile.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t VideoHEVCProfileTierLevelInformation.tier.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t VideoHEVCProfileTierLevelInformation.tier.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*VideoHEVCProfileTierLevelInformation.tier.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t CMTime.timescale.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t CMTime.timescale.setter(uint64_t result)
{
  *(_DWORD *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = result;
  return result;
}

uint64_t VideoHEVCProfileTierLevelInformation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DC5FC(type metadata accessor for VideoHEVCProfileTierLevelInformation, a1);
}

uint64_t VideoHEVCProfileTierLevelInformation.unknownFields.setter(uint64_t a1)
{
  return sub_1000DC654(a1, type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

uint64_t (*VideoHEVCProfileTierLevelInformation.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t VideoHEVCProfileTierLevelInformation.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  uint64_t v1 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t RequestItem.operationID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 16, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(*(void *)(v1 + 24));
  return v2;
}

void (*RequestItem.operationID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 16, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  void v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000D9AD0;
}

void sub_1000D9AD0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_1000E5C5C(v11);
      swift_release(v9);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 16, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 24);
    *(void *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = sub_1000E5C5C(v21);
      swift_release(v19);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 16, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 24);
    *(void *)(v24 + 16) = v3;
    *(void *)(v24 + 24) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t RequestItem.recordID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 32, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain(*(void *)(v1 + 40));
  return v2;
}

void (*RequestItem.recordID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 32, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 40);
  void v3[9] = *(void *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000D9D08;
}

void sub_1000D9D08(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_1000E5C5C(v11);
      swift_release(v9);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 32, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 40);
    *(void *)(v14 + 32) = v3;
    *(void *)(v14 + 40) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = sub_1000E5C5C(v21);
      swift_release(v19);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 32, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 40);
    *(void *)(v24 + 32) = v3;
    *(void *)(v24 + 40) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t RequestItem.srcFieldName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 48, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain(*(void *)(v1 + 56));
  return v2;
}

void (*RequestItem.srcFieldName.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 48, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 56);
  void v3[9] = *(void *)(v5 + 48);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000D9F40;
}

void sub_1000D9F40(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_1000E5C5C(v11);
      swift_release(v9);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 48, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 56);
    *(void *)(v14 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v3;
    *(void *)(v14 + 56) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = sub_1000E5C5C(v21);
      swift_release(v19);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 48, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 56);
    *(void *)(v24 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v3;
    *(void *)(v24 + 56) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t RequestItem.zoneName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 64, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 64);
  swift_bridgeObjectRetain(*(void *)(v1 + 72));
  return v2;
}

void (*RequestItem.zoneName.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 64, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 72);
  void v3[9] = *(void *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DA178;
}

void sub_1000DA178(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_1000E5C5C(v11);
      swift_release(v9);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 64, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 72);
    *(void *)(v14 + 64) = v3;
    *(void *)(v14 + 72) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = sub_1000E5C5C(v21);
      swift_release(v19);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 64, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 72);
    *(void *)(v24 + 64) = v3;
    *(void *)(v24 + 72) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t RequestItem.ownerID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 80, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 80);
  swift_bridgeObjectRetain(*(void *)(v1 + 88));
  return v2;
}

void (*RequestItem.ownerID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 80, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 88);
  void v3[9] = *(void *)(v5 + 80);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DA3B0;
}

void sub_1000DA3B0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_1000E5C5C(v11);
      swift_release(v9);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 80, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 88);
    *(void *)(v14 + 80) = v3;
    *(void *)(v14 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = sub_1000E5C5C(v21);
      swift_release(v19);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 80, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 88);
    *(void *)(v24 + 80) = v3;
    *(void *)(v24 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t RequestItem.downloadType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 96, v3, 0LL, 0LL);
  return *(void *)(v1 + 96);
}

void (*RequestItem.downloadType.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 96, v3, 0LL, 0LL);
  char v6 = *(_BYTE *)(v5 + 104);
  void v3[9] = *(void *)(v5 + 96);
  *((_BYTE *)v3 + 80) = v6;
  return sub_1000DA5DC;
}

void sub_1000DA5DC(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(_BYTE *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 88)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v7 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v7 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v8 = *(int *)(v3 + 84);
    uint64_t v9 = *(void *)(v3 + 88);
    uint64_t v10 = *(void *)(v9 + v8);
    uint64_t v11 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = swift_retain(v10);
    uint64_t v13 = sub_1000E5C5C(v12);
    swift_release(v10);
    uint64_t v14 = *(void *)(v9 + v8);
    *(void *)(v9 + v_Block_object_dispose((const void *)(v1 - 152), 8) = v13;
    swift_release(v14);
  }

uint64_t RequestItem.resourceFingerprint.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 112, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 112);
  swift_bridgeObjectRetain(*(void *)(v1 + 120));
  return v2;
}

void (*RequestItem.resourceFingerprint.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 112, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 120);
  void v3[9] = *(void *)(v5 + 112);
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DA790;
}

void sub_1000DA790(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 96);
  uint64_t v5 = *(void *)(*a1 + 80);
  uint64_t v6 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v7 = *(int *)(v2 + 96);
      uint64_t v8 = *(void *)(v2 + 88);
      uint64_t v9 = *(void *)(v8 + v7);
      uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      uint64_t v11 = swift_retain(v9);
      uint64_t v12 = sub_1000E5C5C(v11);
      swift_release(v9);
      uint64_t v13 = *(void *)(v8 + v7);
      *(void *)(v8 + v7) = v12;
      swift_release(v13);
    }

    uint64_t v14 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v14 + 112, v2 + 24, 1LL, 0LL);
    uint64_t v15 = *(void *)(v14 + 120);
    *(void *)(v14 + 112) = v3;
    *(void *)(v14 + 120) = v5;
    swift_bridgeObjectRelease(v15);
    uint64_t v16 = *(void *)(v2 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v6 + v4)) & 1) == 0)
    {
      uint64_t v17 = *(int *)(v2 + 96);
      uint64_t v18 = *(void *)(v2 + 88);
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = sub_1000E5C5C(v21);
      swift_release(v19);
      uint64_t v23 = *(void *)(v18 + v17);
      *(void *)(v18 + v17) = v22;
      swift_release(v23);
    }

    uint64_t v24 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess(v24 + 112, v2 + 48, 1LL, 0LL);
    uint64_t v16 = *(void *)(v24 + 120);
    *(void *)(v24 + 112) = v3;
    *(void *)(v24 + 120) = v5;
  }

  swift_bridgeObjectRelease(v16);
  free((void *)v2);
}

uint64_t RequestItem.records.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  swift_beginAccess(v1 + 128, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 128));
}

void (*RequestItem.records.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess(v5 + 128, v3, 0LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 128);
  void v3[9] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DA9BC;
}

void sub_1000DA9BC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 88);
  uint64_t v5 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v6 = *(int *)(v2 + 88);
      uint64_t v7 = *(void *)(v2 + 80);
      uint64_t v8 = *(void *)(v7 + v6);
      uint64_t v9 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      uint64_t v10 = swift_retain(v8);
      uint64_t v11 = sub_1000E5C5C(v10);
      swift_release(v8);
      uint64_t v12 = *(void *)(v7 + v6);
      *(void *)(v7 + v6) = v11;
      swift_release(v12);
    }

    uint64_t v13 = *(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v13 + 128, v2 + 24, 1LL, 0LL);
    uint64_t v14 = *(void *)(v13 + 128);
    *(void *)(v13 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = v3;
    swift_bridgeObjectRelease(v14);
    uint64_t v15 = *(void *)(v2 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v16 = *(int *)(v2 + 88);
      uint64_t v17 = *(void *)(v2 + 80);
      uint64_t v18 = *(void *)(v17 + v16);
      uint64_t v19 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      uint64_t v20 = swift_retain(v18);
      uint64_t v21 = sub_1000E5C5C(v20);
      swift_release(v18);
      uint64_t v22 = *(void *)(v17 + v16);
      *(void *)(v17 + v16) = v21;
      swift_release(v22);
    }

    uint64_t v23 = *(void *)(*(void *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess(v23 + 128, v2 + 48, 1LL, 0LL);
    uint64_t v15 = *(void *)(v23 + 128);
    *(void *)(v23 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = v3;
  }

  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t RequestItem.timeRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100292870);
  __chkstk_darwin(v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v14, 0LL, 0LL);
  sub_1000CE7B4(v6, (uint64_t)v5, &qword_100292870);
  uint64_t v7 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for CMTimeRange);
  }
  UnknownStorage.init()(v8);
  uint64_t v9 = a1 + *(int *)(v7 + 20);
  uint64_t v10 = type metadata accessor for CMTime(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  v11(v9, 1LL, 1LL, v10);
  v11(a1 + *(int *)(v7 + 24), 1LL, 1LL, v10);
  return sub_1000CEDAC((uint64_t)v5, &qword_100292870);
}

void (*RequestItem.timeRange.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100292870);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  void v3[4] = v5;
  uint64_t v6 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  void v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_1000CE7B4(v10, (uint64_t)v5, &qword_100292870);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    UnknownStorage.init()(v11);
    uint64_t v12 = &v9[*(int *)(v6 + 20)];
    uint64_t v13 = type metadata accessor for CMTime(0LL);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
    v14(v12, 1LL, 1LL, v13);
    v14(&v9[*(int *)(v6 + 24)], 1LL, 1LL, v13);
    sub_1000CEDAC((uint64_t)v5, &qword_100292870);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for CMTimeRange);
  }

  return sub_1000DADF0;
}

void sub_1000DADF0(uint64_t a1, char a2)
{
}

BOOL RequestItem.hasTimeRange.getter()
{
  return sub_1000DB3AC( &qword_100292870,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange,  type metadata accessor for CMTimeRange);
}

Swift::Void __swiftcall RequestItem.clearTimeRange()()
{
}

uint64_t RequestItem.mediaTypeHint.getter()
{
  return swift_bridgeObjectRetain(*v1);
}

void (*RequestItem.mediaTypeHint.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 22) = v4;
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = *v5;
  void v3[9] = *v5;
  swift_bridgeObjectRetain(v6);
  return sub_1000DAF1C;
}

void sub_1000DAF1C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(int *)(*a1 + 88);
  uint64_t v5 = *(void *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 72));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v6 = *(int *)(v2 + 88);
      uint64_t v7 = *(void *)(v2 + 80);
      uint64_t v8 = *(void *)(v7 + v6);
      uint64_t v9 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      uint64_t v10 = swift_retain(v8);
      uint64_t v11 = sub_1000E5C5C(v10);
      swift_release(v8);
      uint64_t v12 = *(void *)(v7 + v6);
      *(void *)(v7 + v6) = v11;
      swift_release(v12);
    }

    swift_beginAccess(v13, v2 + 24, 1LL, 0LL);
    uint64_t v14 = *v13;
    *uint64_t v13 = v3;
    swift_bridgeObjectRelease(v14);
    uint64_t v15 = *(void *)(v2 + 72);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + v4)) & 1) == 0)
    {
      uint64_t v16 = *(int *)(v2 + 88);
      uint64_t v17 = *(void *)(v2 + 80);
      uint64_t v18 = *(void *)(v17 + v16);
      uint64_t v19 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      uint64_t v20 = swift_retain(v18);
      uint64_t v21 = sub_1000E5C5C(v20);
      swift_release(v18);
      uint64_t v22 = *(void *)(v17 + v16);
      *(void *)(v17 + v16) = v21;
      swift_release(v22);
    }

    swift_beginAccess(v23, v2 + 48, 1LL, 0LL);
    uint64_t v15 = *v23;
    uint64_t *v23 = v3;
  }

  swift_bridgeObjectRelease(v15);
  free((void *)v2);
}

uint64_t RequestItem.videoProfileTierLevelInformation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100292888);
  __chkstk_darwin(v3);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(v6, v11, 0LL, 0LL);
  sub_1000CE7B4(v6, (uint64_t)v5, &qword_100292888);
  uint64_t v7 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000CEC9C((uint64_t)v5, a1, type metadata accessor for VideoHEVCProfileTierLevelInformation);
  }
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100292888);
}

void (*RequestItem.videoProfileTierLevelInformation.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100292888);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  void v3[4] = v5;
  uint64_t v6 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  void v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[6] = v9;
  swift_beginAccess(v10, v3, 0LL, 0LL);
  sub_1000CE7B4(v10, (uint64_t)v5, &qword_100292888);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    void v9[2] = 0;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100292888);
  }

  else
  {
    sub_1000CEC9C((uint64_t)v5, (uint64_t)v9, type metadata accessor for VideoHEVCProfileTierLevelInformation);
  }

  return sub_1000DB2E8;
}

void sub_1000DB2E8(uint64_t a1, char a2)
{
}

void sub_1000DB2FC(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v7 = *(void **)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    sub_1000CEC58(*(void *)(*(void *)a1 + 48LL), (uint64_t)v6, a4);
    a3(v6);
    sub_1000CECE0((uint64_t)v7, a4);
  }

  else
  {
    a3(*(void **)(*(void *)a1 + 48LL));
  }

  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL RequestItem.hasVideoProfileTierLevelInformation.getter()
{
  return sub_1000DB3AC( &qword_100292888,  &OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation,  type metadata accessor for VideoHEVCProfileTierLevelInformation);
}

BOOL sub_1000DB3AC(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v7 = sub_1000BED3C(a1);
  __chkstk_darwin(v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for RequestItem(0LL) + 20)) + *a2;
  swift_beginAccess(v10, v15, 0LL, 0LL);
  sub_1000CE7B4(v10, (uint64_t)v9, a1);
  uint64_t v11 = a3(0LL);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v9, 1LL, v11) != 1;
  sub_1000CEDAC((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall RequestItem.clearVideoProfileTierLevelInformation()()
{
}

uint64_t sub_1000DB4A8(uint64_t *a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_1000BED3C(a1);
  __chkstk_darwin(v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v11)) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    uint64_t v13 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    uint64_t v14 = swift_retain(v12);
    uint64_t v15 = sub_1000E5C5C(v14);
    swift_release(v12);
    uint64_t v16 = *(void *)(v7 + v11);
    *(void *)(v7 + v11) = v15;
    swift_release(v16);
  }

  uint64_t v17 = *(void *)(v7 + v11);
  uint64_t v18 = a2(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v10, 1LL, 1LL, v18);
  uint64_t v19 = v17 + *a3;
  swift_beginAccess(v19, v22, 33LL, 0LL);
  swift_retain(v17);
  sub_1000E645C((uint64_t)v10, v19, a1);
  swift_endAccess(v22);
  return swift_release(v17);
}

uint64_t RequestItem.apacAudioTrackChannelCount.getter()
{
  return sub_1000DB688(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
}

void (*RequestItem.apacAudioTrackChannelCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1000DB670;
}

void sub_1000DB670(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.apacAudioTrackHoachannelCount.getter()
{
  return sub_1000DB688(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
}

uint64_t sub_1000DB688(void *a1)
{
  uint64_t v2 = (unsigned int *)(*(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0LL) + 20)) + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return *v2;
}

void (*RequestItem.apacAudioTrackHoachannelCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1000DB75C;
}

void sub_1000DB75C(uint64_t *a1, char a2)
{
}

void sub_1000DB768(uint64_t *a1, char a2, void *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 84)));
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = v5 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = v5 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(int *)(v5 + 84);
    uint64_t v10 = *(void *)(v5 + 72);
    uint64_t v11 = *(void *)(v10 + v9);
    uint64_t v12 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    uint64_t v13 = swift_retain(v11);
    uint64_t v14 = sub_1000E5C5C(v13);
    swift_release(v11);
    uint64_t v15 = *(void *)(v10 + v9);
    *(void *)(v10 + v9) = v14;
    swift_release(v15);
  }

uint64_t RequestItem.apacAudioTrackBedchannelCount.getter()
{
  return sub_1000DB688(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
}

void (*RequestItem.apacAudioTrackBedchannelCount.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = (_DWORD *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_DWORD *)v3 + 20) = *v5;
  return sub_1000DB8D8;
}

void sub_1000DB8D8(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.cameraMake.getter()
{
  return sub_1000DB990(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
}

void (*RequestItem.cameraMake.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  void v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DB978;
}

void sub_1000DB978(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.cameraModel.getter()
{
  return sub_1000DB990(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
}

uint64_t sub_1000DB990(void *a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1 + *(int *)(type metadata accessor for RequestItem(0LL) + 20)) + *a1);
  swift_beginAccess(v2, v5, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

void (*RequestItem.cameraModel.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  void v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DBA7C;
}

void sub_1000DBA7C(uint64_t *a1, char a2)
{
}

void sub_1000DBA88(uint64_t *a1, char a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 72);
  uint64_t v6 = *(int *)(*a1 + 96);
  uint64_t v7 = *(void *)(*a1 + 80);
  uint64_t v8 = *(void *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*a1 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 + v6)) & 1) == 0)
    {
      uint64_t v9 = *(int *)(v4 + 96);
      uint64_t v10 = *(void *)(v4 + 88);
      uint64_t v11 = *(void *)(v10 + v9);
      uint64_t v12 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      uint64_t v13 = swift_retain(v11);
      uint64_t v14 = sub_1000E5C5C(v13);
      swift_release(v11);
      uint64_t v15 = *(void *)(v10 + v9);
      *(void *)(v10 + v9) = v14;
      swift_release(v15);
    }

    uint64_t v16 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess(v16, v4 + 24, 1LL, 0LL);
    uint64_t v17 = v16[1];
    *uint64_t v16 = v5;
    v16[1] = v7;
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = *(void *)(v4 + 80);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 + v6)) & 1) == 0)
    {
      uint64_t v19 = *(int *)(v4 + 96);
      uint64_t v20 = *(void *)(v4 + 88);
      uint64_t v21 = *(void *)(v20 + v19);
      uint64_t v22 = type metadata accessor for RequestItem._StorageClass(0LL);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      uint64_t v23 = swift_retain(v21);
      uint64_t v24 = sub_1000E5C5C(v23);
      swift_release(v21);
      uint64_t v25 = *(void *)(v20 + v19);
      *(void *)(v20 + v19) = v24;
      swift_release(v25);
    }

    uint64_t v26 = (void *)(*(void *)(*(void *)(v4 + 88) + *(int *)(v4 + 96)) + *a3);
    swift_beginAccess(v26, v4 + 48, 1LL, 0LL);
    uint64_t v18 = v26[1];
    *uint64_t v26 = v5;
    v26[1] = v7;
  }

  swift_bridgeObjectRelease(v18);
  free((void *)v4);
}

uint64_t RequestItem.apacAudioTrackCodecProfileLevelDescription.getter()
{
  return sub_1000DB990(&OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
}

void (*RequestItem.apacAudioTrackCodecProfileLevelDescription.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4)
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  uint64_t v6 = v5[1];
  void v3[9] = *v5;
  v3[10] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_1000DBC9C;
}

void sub_1000DBC9C(uint64_t *a1, char a2)
{
}

uint64_t RequestItem.clientSupportsProMotionDisplay.getter()
{
  return *v1;
}

void (*RequestItem.clientSupportsProMotionDisplay.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  *((_DWORD *)v3 + 20) = v4;
  uint64_t v5 = (_BYTE *)(*(void *)(v1 + v4)
               + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  swift_beginAccess(v5, v3, 0LL, 0LL);
  *((_BYTE *)v3 + 84) = *v5;
  return sub_1000DBD7C;
}

void sub_1000DBD7C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *(_BYTE *)(*a1 + 84);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*(void *)(*a1 + 72)
                                                                                            + *(int *)(*a1 + 80)));
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = v3 + 48;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v6 = v3 + 24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 80);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *(void *)(v8 + v7);
    uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_1000E5C5C(v11);
    swift_release(v9);
    uint64_t v13 = *(void *)(v8 + v7);
    *(void *)(v8 + v7) = v12;
    swift_release(v13);
  }

unint64_t sub_1000DBE5C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void *sub_1000DBE74@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1000DBE90(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000EA8FC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t RequestItem.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if (qword_100291830 != -1) {
    swift_once(&qword_100291830, sub_1000DF930);
  }
  uint64_t v4 = qword_100292868;
  *(void *)(a2 + v3) = qword_100292868;
  return swift_retain(v4);
}

void sub_1000DBF28()
{
  static RequestItem.MediaTypeHint.allCases = (uint64_t)&off_100243838;
}

uint64_t *RequestItem.MediaTypeHint.allCases.unsafeMutableAddressor()
{
  if (qword_1002917C0 != -1) {
    swift_once(&qword_1002917C0, sub_1000DBF28);
  }
  return &static RequestItem.MediaTypeHint.allCases;
}

uint64_t static RequestItem.MediaTypeHint.allCases.getter()
{
  return sub_1000B92C0(&qword_1002917C0, &static RequestItem.MediaTypeHint.allCases);
}

uint64_t static RequestItem.MediaTypeHint.allCases.setter(uint64_t a1)
{
  return sub_1000B9334(a1, &qword_1002917C0, &static RequestItem.MediaTypeHint.allCases, (uint64_t)sub_1000DBF28);
}

uint64_t (*static RequestItem.MediaTypeHint.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002917C0 != -1) {
    swift_once(&qword_1002917C0, sub_1000DBF28);
  }
  swift_beginAccess(&static RequestItem.MediaTypeHint.allCases, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

uint64_t sub_1000DC020@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B9420(&qword_1002917C0, &static RequestItem.MediaTypeHint.allCases, (uint64_t)sub_1000DBF28, a1);
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorDomain.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t Goldilocks_ErrorInfo.ResultError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t ResponseItem.assetRecord.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseItem(0LL) + 52);
  sub_1000CEDAC(v3, &qword_100291F58);
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, a1, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v3, 0LL, 1LL, v4);
}

void (*ResponseItem.assetRecord.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100291F58);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Ckcode_RecordTransport(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for ResponseItem(0LL) + 52);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000CE7B4(v1 + v10, (uint64_t)v5, &qword_100291F58);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    Ckcode_RecordTransport.init()();
    sub_1000CEDAC((uint64_t)v5, &qword_100291F58);
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v5, v6);
  }

  return sub_1000DC234;
}

void sub_1000DC234(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 24LL);
  size_t v8 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v9 = **(void **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void, void *, uint64_t))(v7 + 16))(*(void *)(*(void *)a1 + 32LL), v5, v6);
    sub_1000CEDAC(v9, &qword_100291F58);
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v9, v4, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }

  else
  {
    sub_1000CEDAC(**(void **)a1 + v3, &qword_100291F58);
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v9, v5, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
  }

  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

Swift::Void __swiftcall ResponseItem.clearAssetRecord()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ResponseItem(0LL) + 52);
  sub_1000CEDAC(v1, &qword_100291F58);
  uint64_t v2 = type metadata accessor for Ckcode_RecordTransport(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t ResponseItem.errorMessage.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t ResponseItem.errorMessage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 56));
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.zoneTtlForIcplexit.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t Goldilocks_InitiateExitRequest.zoneTtlForIcplexit.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t Goldilocks_InitiateExitRequest.exitSource.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t Goldilocks_InitiateExitRequest.exitSource.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.exitSource.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResponseItem.downloadEstimatedSize.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t ResponseItem.downloadEstimatedSize.setter(uint64_t result)
{
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = result;
  return result;
}

uint64_t ResponseItem.errorCode.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ResponseItem.errorCode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 96) = result;
  *(_BYTE *)(v2 + 104) = a2 & 1;
  return result;
}

uint64_t (*ResponseItem.errorCode.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResponseItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseItem(0LL) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t ResponseItem.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResponseItem(0LL) + 48);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*ResponseItem.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResponseItem.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(a1 + 56) = 0xE000000000000000LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(_BYTE *)(a1 + 80) = 1;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(_BYTE *)(a1 + 104) = 1;
  uint64_t v2 = type metadata accessor for ResponseItem(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  uint64_t v4 = type metadata accessor for Ckcode_RecordTransport(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
}

uint64_t CMTime.value.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t ResetInterval.endTimestamp.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ResetInterval.endTimestamp.setter(uint64_t result)
{
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = result;
  return result;
}

uint64_t Goldilocks_DuplicateState.foundDuplicates.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t Goldilocks_DuplicateState.foundDuplicates.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 16));
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t ResetInterval.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DC5FC(type metadata accessor for ResetInterval, a1);
}

uint64_t sub_1000DC5FC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t ResetInterval.unknownFields.setter(uint64_t a1)
{
  return sub_1000DC654(a1, type metadata accessor for ResetInterval);
}

uint64_t sub_1000DC654(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*ResetInterval.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t ResetInterval.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = &_swiftEmptyArrayStorage;
  uint64_t v1 = type metadata accessor for ResetInterval(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Goldilocks_InitiateExitRequest.participantUserIdsToRemove.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

uint64_t Goldilocks_InitiateExitRequest.participantUserIdsToRemove.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 48));
  *(void *)(v1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  return result;
}

uint64_t UploadResource.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9714(type metadata accessor for UploadResource, a1);
}

uint64_t UploadResource.unknownFields.setter(uint64_t a1)
{
  return sub_1000D976C(a1, type metadata accessor for UploadResource);
}

uint64_t (*UploadResource.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for UploadResourcesRequest, a1);
}

uint64_t UploadResourcesRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for UploadResourcesRequest);
}

uint64_t (*UploadResourcesRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalImages.getter()
{
  return *v0;
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalImages.setter(uint64_t result)
{
  _BYTE *v1 = result;
  return result;
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalVideos.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t UploadResourcesResponse.shouldUploadJpegmediumForOriginalVideos.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*UploadResourcesResponse.shouldUploadJpegmediumForOriginalVideos.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesResponse.skipUploadResources.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t UploadResourcesResponse.skipUploadResources.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = a1;
  return result;
}

uint64_t UploadResourcesResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DC5FC(type metadata accessor for UploadResourcesResponse, a1);
}

uint64_t UploadResourcesResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000DC654(a1, type metadata accessor for UploadResourcesResponse);
}

uint64_t (*UploadResourcesResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UploadResourcesResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  uint64_t v1 = type metadata accessor for UploadResourcesResponse(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t Goldilocks_ExitMoveBatchResponse.movesComplete.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Goldilocks_ExitMoveBatchResponse.movesComplete.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = result;
  return result;
}

uint64_t UntranscodableItem.ownerDsid.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

uint64_t UntranscodableItem.ownerDsid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 64));
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*Goldilocks_InitiateExitRequest.participantIdsToRemove.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableItem.referenceChecksumHex.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain(*(void *)(v0 + 80));
  return v1;
}

uint64_t UntranscodableItem.referenceChecksumHex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 80));
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t UntranscodableItem.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UntranscodableItem(0LL) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t UntranscodableItem.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UntranscodableItem(0LL) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*UntranscodableItem.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableItem.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0xE000000000000000LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0xE000000000000000LL;
  uint64_t v1 = type metadata accessor for UntranscodableItem(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t UntranscodableRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for UntranscodableRequest, a1);
}

uint64_t UntranscodableRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for UntranscodableRequest);
}

uint64_t (*UntranscodableRequest.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000D9610((void (*)(void))type metadata accessor for UntranscodableRequest, a1);
}

uint64_t UntranscodableResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B8C4C(type metadata accessor for UntranscodableResponse, a1);
}

uint64_t UntranscodableResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000B8CA4(a1, type metadata accessor for UntranscodableResponse);
}

uint64_t (*UntranscodableResponse.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t UntranscodableResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1000D9610((void (*)(void))type metadata accessor for UntranscodableResponse, a1);
}

uint64_t sub_1000DCB10()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static DownloadType._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static DownloadType._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  size_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *size_t v8 = 0LL;
  *(void *)uint64_t v9 = "DEFAULT";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "MMCS";
  *((void *)v13 + 1) = 4LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "TRANSCODE";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t DownloadType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002917C8, (uint64_t)static DownloadType._protobuf_nameMap, (uint64_t)sub_1000DCB10);
}

uint64_t static DownloadType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_1002917C8, (uint64_t)static DownloadType._protobuf_nameMap, (uint64_t)sub_1000DCB10, a1);
}

uint64_t sub_1000DCCD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_1002917C8, (uint64_t)static DownloadType._protobuf_nameMap, (uint64_t)sub_1000DCB10, a1);
}

uint64_t sub_1000DCCF4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ItemErrorCode._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ItemErrorCode._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100214670;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "NO_ITEM_ERROR";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 101LL;
  *(void *)uint64_t v13 = "ZONE_NOT_FOUND";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 14LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 102LL;
  *(void *)uint64_t v15 = "RECORD_NOT_FOUND";
  *((void *)v15 + 1) = 16LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 103LL;
  *(void *)uint64_t v17 = "RESOURCE_NOT_FOUND";
  *((void *)v17 + 1) = 18LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 104LL;
  *(void *)uint64_t v19 = "STALE_FINGERPRINT";
  *((void *)v19 + 1) = 17LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 105LL;
  *(void *)uint64_t v21 = "INVALID_REQUEST";
  *((void *)v21 + 1) = 15LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  uint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 201LL;
  *(void *)uint64_t v23 = "SERVER_ITEM_ERROR";
  *((void *)v23 + 1) = 17LL;
  v23[16] = 2;
  v12();
  uint64_t v24 = (void *)(v8 + 7 * v4);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 48);
  void *v24 = 301LL;
  *(void *)uint64_t v25 = "NOT_TRANSCODABLE";
  *((void *)v25 + 1) = 16LL;
  v25[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ItemErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002917D0, (uint64_t)static ItemErrorCode._protobuf_nameMap, (uint64_t)sub_1000DCCF4);
}

uint64_t static ItemErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_1002917D0, (uint64_t)static ItemErrorCode._protobuf_nameMap, (uint64_t)sub_1000DCCF4, a1);
}

uint64_t sub_1000DCFDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_1002917D0, (uint64_t)static ItemErrorCode._protobuf_nameMap, (uint64_t)sub_1000DCCF4, a1);
}

uint64_t sub_1000DCFF8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static BatchErrorCode._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static BatchErrorCode._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "NO_BATCH_ERROR";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 101LL;
  *(void *)uint64_t v13 = "FEATURE_DISABLED";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 16LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 102LL;
  *(void *)uint64_t v15 = "THROTTLED";
  *((void *)v15 + 1) = 9LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 201LL;
  *(void *)uint64_t v17 = "SERVER_BATCH_ERROR";
  *((void *)v17 + 1) = 18LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t BatchErrorCode._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002917D8, (uint64_t)static BatchErrorCode._protobuf_nameMap, (uint64_t)sub_1000DCFF8);
}

uint64_t static BatchErrorCode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_1002917D8, (uint64_t)static BatchErrorCode._protobuf_nameMap, (uint64_t)sub_1000DCFF8, a1);
}

uint64_t sub_1000DD1F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_1002917D8, (uint64_t)static BatchErrorCode._protobuf_nameMap, (uint64_t)sub_1000DCFF8, a1);
}

uint64_t sub_1000DD20C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ResourceType._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ResourceType._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v66 = swift_allocObject(v1, v6 + 29 * v4, v5 | 7);
  *(_OWORD *)(v66 + 16) = xmmword_100214680;
  uint64_t v7 = v66 + v6;
  uint64_t v8 = v66 + v6 + *(int *)(v2 + 48);
  *(void *)(v66 + v6) = 0LL;
  *(void *)uint64_t v8 = "CPLResourceTypeUnknown";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 22LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v66 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 1LL;
  *(void *)uint64_t v12 = "CPLResourceTypeOriginal";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 23LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v66 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 2LL;
  *(void *)uint64_t v14 = "CPLResourceTypeJPEGFullSize";
  *((void *)v14 + 1) = 27LL;
  _BYTE v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v66 + v6 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 3LL;
  *(void *)uint64_t v16 = "CPLResourceTypeJPEGLargeSize";
  *((void *)v16 + 1) = 28LL;
  _BYTE v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v66 + v6 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 4LL;
  *(void *)uint64_t v18 = "CPLResourceTypeJPEGMediumSize";
  *((void *)v18 + 1) = 29LL;
  _BYTE v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v66 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 5LL;
  *(void *)uint64_t v20 = "CPLResourceTypeJPEGThumbnail";
  *((void *)v20 + 1) = 28LL;
  _BYTE v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v66 + v6 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 6LL;
  *(void *)uint64_t v22 = "CPLResourceTypeVideoMediumSize";
  *((void *)v22 + 1) = 30LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v66 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 7LL;
  *(void *)uint64_t v24 = "CPLResourceTypeVideoSmallSize";
  *((void *)v24 + 1) = 29LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v66 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 8LL;
  *(void *)uint64_t v25 = "CPLResourceTypeSidecarAudio";
  *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 152), 8) = 27LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v66 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *uint64_t v26 = 9LL;
  *(void *)uint64_t v27 = "CPLResourceTypeSidecarXMP";
  *((void *)v27 + 1) = 25LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v66 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 10LL;
  *(void *)uint64_t v29 = "CPLResourceTypeMediaMetaData";
  *((void *)v29 + 1) = 28LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v66 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 11LL;
  *(void *)uint64_t v31 = "CPLResourceTypeUnused1";
  *((void *)v31 + 1) = 22LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v66 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 12LL;
  *(void *)uint64_t v33 = "CPLResourceTypeUnused2";
  *((void *)v33 + 1) = 22LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v66 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 13LL;
  *(void *)uint64_t v35 = "CPLResourceTypeAdjustmentData";
  *((void *)v35 + 1) = 29LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v66 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 14LL;
  *(void *)uint64_t v37 = "CPLResourceTypeAdjustmentSecondaryData";
  *((void *)v37 + 1) = 38LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v66 + v6 + 15 * v4);
  int v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 15LL;
  *(void *)int v39 = "CPLResourceTypeAdjustmentBaseJPEGFullSize";
  *((void *)v39 + 1) = 41LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v66 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 16LL;
  *(void *)uint64_t v40 = "CPLResourceTypeVideoFullSize";
  *(void *)(v40 + _Block_object_dispose((const void *)(v1 - 152), 8) = 28LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  __int128 v41 = (void *)(v66 + v6 + 17 * v4);
  __int128 v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 17LL;
  *(void *)__int128 v42 = "CPLResourceTypeOriginalAlternate";
  *((void *)v42 + 1) = 32LL;
  v42[16] = 2;
  v11();
  uint64_t v43 = (void *)(v66 + v6 + 18 * v4);
  uint64_t v44 = (char *)v43 + *(int *)(v2 + 48);
  *uint64_t v43 = 18LL;
  *(void *)uint64_t v44 = "CPLResourceTypeOriginalVideoComplement";
  *((void *)v44 + 1) = 38LL;
  uint64_t v44[16] = 2;
  v11();
  uint64_t v45 = (void *)(v66 + v6 + 19 * v4);
  uint64_t v46 = (char *)v45 + *(int *)(v2 + 48);
  *uint64_t v45 = 19LL;
  *(void *)uint64_t v46 = "CPLResourceTypeVideoComplement";
  *((void *)v46 + 1) = 30LL;
  v46[16] = 2;
  v11();
  uint64_t v47 = (void *)(v66 + v6 + 20 * v4);
  uint64_t v48 = (char *)v47 + *(int *)(v2 + 48);
  *uint64_t v47 = 20LL;
  *(void *)uint64_t v48 = "CPLResourceTypeAdjustmentBaseVideoComplement";
  *((void *)v48 + 1) = 44LL;
  v48[16] = 2;
  v11();
  uint64_t v49 = (void *)(v66 + v6 + 21 * v4);
  uint64_t v50 = (char *)v49 + *(int *)(v2 + 48);
  *uint64_t v49 = 21LL;
  *(void *)uint64_t v50 = "CPLResourceTypeVideoLargeSize";
  *((void *)v50 + 1) = 29LL;
  char v50[16] = 2;
  v11();
  uint64_t v51 = (void *)(v66 + v6 + 22 * v4);
  uint64_t v52 = (char *)v51 + *(int *)(v2 + 48);
  *uint64_t v51 = 22LL;
  *(void *)uint64_t v52 = "CPLResourceTypeSidecarOther";
  *((void *)v52 + 1) = 27LL;
  v52[16] = 2;
  v11();
  uint64_t v53 = (void *)(v66 + v6 + 23 * v4);
  uint64_t v54 = (char *)v53 + *(int *)(v2 + 48);
  *uint64_t v53 = 23LL;
  *(void *)uint64_t v54 = "CPLResourceTypeOriginalSpatialOverCapture";
  *((void *)v54 + 1) = 41LL;
  v54[16] = 2;
  v11();
  uint64_t v55 = (void *)(v66 + v6 + 24 * v4);
  uint64_t v56 = (char *)v55 + *(int *)(v2 + 48);
  *uint64_t v55 = 24LL;
  *(void *)uint64_t v56 = "CPLResourceTypeOriginalSpatialOverCaptureVideoComplement";
  *((void *)v56 + 1) = 56LL;
  v56[16] = 2;
  v11();
  uint64_t v57 = (void *)(v66 + v6 + 25 * v4);
  uint64_t v58 = (char *)v57 + *(int *)(v2 + 48);
  void *v57 = 25LL;
  *(void *)uint64_t v58 = "CPLResourceTypeAdjustmentBaseVideo";
  *((void *)v58 + 1) = 34LL;
  v58[16] = 2;
  v11();
  uint64_t v59 = (void *)(v66 + v6 + 26 * v4);
  uint64_t v60 = (char *)v59 + *(int *)(v2 + 48);
  void *v59 = 26LL;
  *(void *)uint64_t v60 = "CPLResourceTypeVideoMetaData";
  *((void *)v60 + 1) = 28LL;
  v60[16] = 2;
  v11();
  uint64_t v61 = (void *)(v66 + v6 + 27 * v4);
  uint64_t v62 = (char *)v61 + *(int *)(v2 + 48);
  *uint64_t v61 = 27LL;
  *(void *)uint64_t v62 = "CPLResourceTypeAdjustedMediaMetaData";
  *((void *)v62 + 1) = 36LL;
  v62[16] = 2;
  v11();
  uint64_t v63 = (void *)(v66 + v6 + 28 * v4);
  uint64_t v64 = (char *)v63 + *(int *)(v2 + 48);
  *uint64_t v63 = 28LL;
  *(void *)uint64_t v64 = "CPLResourceTypeVideoHDRMediumSize";
  *((void *)v64 + 1) = 33LL;
  v64[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v66);
}

uint64_t ResourceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002917E0, (uint64_t)static ResourceType._protobuf_nameMap, (uint64_t)sub_1000DD20C);
}

uint64_t static ResourceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_1002917E0, (uint64_t)static ResourceType._protobuf_nameMap, (uint64_t)sub_1000DD20C, a1);
}

uint64_t sub_1000DD92C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_1002917E0, (uint64_t)static ResourceType._protobuf_nameMap, (uint64_t)sub_1000DD20C, a1);
}

uint64_t sub_1000DD948()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static UploadRecordType._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static UploadRecordType._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "Unknown";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "Master";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "Asset";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UploadRecordType._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_1002917E8, (uint64_t)static UploadRecordType._protobuf_nameMap, (uint64_t)sub_1000DD948);
}

uint64_t static UploadRecordType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_1002917E8, (uint64_t)static UploadRecordType._protobuf_nameMap, (uint64_t)sub_1000DD948, a1);
}

uint64_t sub_1000DDB10@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_1002917E8, (uint64_t)static UploadRecordType._protobuf_nameMap, (uint64_t)sub_1000DD948, a1);
}

void *ResourceAnalyzeRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceAnalyzeRequest.protoMessageName;
}

unint64_t static ResourceAnalyzeRequest.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000DDB54(uint64_t a1)
{
  return sub_1000E4214(a1, static ResourceAnalyzeRequest._protobuf_nameMap, (uint64_t)"items", 5LL);
}

uint64_t ResourceAnalyzeRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002917F0,  (uint64_t)static ResourceAnalyzeRequest._protobuf_nameMap,  (uint64_t)sub_1000DDB54);
}

uint64_t static ResourceAnalyzeRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002917F0,  (uint64_t)static ResourceAnalyzeRequest._protobuf_nameMap,  (uint64_t)sub_1000DDB54,  a1);
}

uint64_t ResourceDownloadRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4350( a1,  a2,  a3,  type metadata accessor for RequestItem,  &qword_100291FA8,  (uint64_t)&protocol conformance descriptor for RequestItem);
}

uint64_t ResourceAnalyzeRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E444C( a1,  a2,  a3,  type metadata accessor for RequestItem,  &qword_100291FA8,  (uint64_t)&protocol conformance descriptor for RequestItem,  (void (*)(void))type metadata accessor for ResourceAnalyzeRequest);
}

uint64_t static ResourceAnalyzeRequest.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000E4EE0(a1, a2, sub_1000FF9D4, type metadata accessor for ResourceAnalyzeRequest) & 1;
}

Swift::Int ResourceAnalyzeRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResourceAnalyzeRequest,  &qword_1002928D0,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
}

uint64_t sub_1000DDC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000DDC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceAnalyzeRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DDC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938D0,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DDCC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002917F0,  (uint64_t)static ResourceAnalyzeRequest._protobuf_nameMap,  (uint64_t)sub_1000DDB54,  a1);
}

uint64_t sub_1000DDCDC(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292A90,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DDD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292A90,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResourceAnalyzeResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceAnalyzeResponse.protoMessageName;
}

unint64_t static ResourceAnalyzeResponse.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1000DDD94()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ResourceAnalyzeResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "items";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "errorCode";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "errorMessage";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "retryAfterMillis";
  *((void *)v17 + 1) = 16LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ResourceAnalyzeResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_1002917F8,  (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap,  (uint64_t)sub_1000DDD94);
}

uint64_t static ResourceAnalyzeResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_1002917F8,  (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap,  (uint64_t)sub_1000DDD94,  a1);
}

uint64_t ResourceDownloadResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEAC0(a1, a2, a3);
}

uint64_t ResourceAnalyzeResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEC34(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceAnalyzeResponse);
}

Swift::Int ResourceAnalyzeResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResourceAnalyzeResponse,  &qword_1002928E8,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
}

uint64_t sub_1000DDFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000DDFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceAnalyzeResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DE010(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938C8,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DE060@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_1002917F8,  (uint64_t)static ResourceAnalyzeResponse._protobuf_nameMap,  (uint64_t)sub_1000DDD94,  a1);
}

uint64_t sub_1000DE07C(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292AA8,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DE0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292AA8,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResourceDownloadRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceDownloadRequest.protoMessageName;
}

unint64_t static ResourceDownloadRequest.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1000DE134(uint64_t a1)
{
  return sub_1000E4214(a1, static ResourceDownloadRequest._protobuf_nameMap, (uint64_t)"items", 5LL);
}

uint64_t ResourceDownloadRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291800,  (uint64_t)static ResourceDownloadRequest._protobuf_nameMap,  (uint64_t)sub_1000DE134);
}

uint64_t static ResourceDownloadRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291800,  (uint64_t)static ResourceDownloadRequest._protobuf_nameMap,  (uint64_t)sub_1000DE134,  a1);
}

uint64_t ResourceDownloadRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E444C( a1,  a2,  a3,  type metadata accessor for RequestItem,  &qword_100291FA8,  (uint64_t)&protocol conformance descriptor for RequestItem,  (void (*)(void))type metadata accessor for ResourceDownloadRequest);
}

uint64_t static ResourceDownloadRequest.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000E4EE0(a1, a2, sub_1000FF9D4, type metadata accessor for ResourceDownloadRequest) & 1;
}

Swift::Int ResourceDownloadRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResourceDownloadRequest,  &qword_1002928F0,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
}

uint64_t sub_1000DE1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DE210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938C0,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DE260@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291800,  (uint64_t)static ResourceDownloadRequest._protobuf_nameMap,  (uint64_t)sub_1000DE134,  a1);
}

uint64_t sub_1000DE27C(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DE2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResourceDownloadResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceDownloadResponse.protoMessageName;
}

unint64_t static ResourceDownloadResponse.protoMessageName.getter()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000DE334()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ResourceDownloadResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ResourceDownloadResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "items";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "errorCode";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "errorMessage";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "retryAfterMillis";
  *((void *)v17 + 1) = 16LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ResourceDownloadResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291808,  (uint64_t)static ResourceDownloadResponse._protobuf_nameMap,  (uint64_t)sub_1000DE334);
}

uint64_t static ResourceDownloadResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291808,  (uint64_t)static ResourceDownloadResponse._protobuf_nameMap,  (uint64_t)sub_1000DE334,  a1);
}

uint64_t ResourceDownloadResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEC34(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceDownloadResponse);
}

Swift::Int ResourceDownloadResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResourceDownloadResponse,  &qword_1002928F8,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
}

uint64_t sub_1000DE568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceDownloadResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DE57C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938B8,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DE5CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291808,  (uint64_t)static ResourceDownloadResponse._protobuf_nameMap,  (uint64_t)sub_1000DE334,  a1);
}

uint64_t sub_1000DE5E8(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291F78,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DE628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291F78,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResourceStreamRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceStreamRequest.protoMessageName;
}

unint64_t static ResourceStreamRequest.protoMessageName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1000DE6A0(uint64_t a1)
{
  return sub_1000E4214(a1, static ResourceStreamRequest._protobuf_nameMap, (uint64_t)"items", 5LL);
}

uint64_t ResourceStreamRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291810,  (uint64_t)static ResourceStreamRequest._protobuf_nameMap,  (uint64_t)sub_1000DE6A0);
}

uint64_t static ResourceStreamRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291810,  (uint64_t)static ResourceStreamRequest._protobuf_nameMap,  (uint64_t)sub_1000DE6A0,  a1);
}

uint64_t ResourceStreamRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E444C( a1,  a2,  a3,  type metadata accessor for RequestItem,  &qword_100291FA8,  (uint64_t)&protocol conformance descriptor for RequestItem,  (void (*)(void))type metadata accessor for ResourceStreamRequest);
}

uint64_t static ResourceStreamRequest.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000E4EE0(a1, a2, sub_1000FF9D4, type metadata accessor for ResourceStreamRequest) & 1;
}

Swift::Int ResourceStreamRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResourceStreamRequest,  &qword_100292900,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
}

uint64_t sub_1000DE768@<X0>(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000DE790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceStreamRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DE7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938B0,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DE7F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291810,  (uint64_t)static ResourceStreamRequest._protobuf_nameMap,  (uint64_t)sub_1000DE6A0,  a1);
}

uint64_t sub_1000DE810(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292000,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DE850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292000,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *ResourceStreamResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static ResourceStreamResponse.protoMessageName;
}

unint64_t static ResourceStreamResponse.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000DE8C8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ResourceStreamResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ResourceStreamResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "items";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "errorCode";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "errorMessage";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "retryAfterMillis";
  *((void *)v17 + 1) = 16LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ResourceStreamResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291818,  (uint64_t)static ResourceStreamResponse._protobuf_nameMap,  (uint64_t)sub_1000DE8C8);
}

uint64_t static ResourceStreamResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291818,  (uint64_t)static ResourceStreamResponse._protobuf_nameMap,  (uint64_t)sub_1000DE8C8,  a1);
}

uint64_t sub_1000DEAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = type metadata accessor for ResponseItem(0LL);
          uint64_t v11 = sub_1000BD35C( &qword_1002928E0,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3, v10, v11, a2, a3);
          goto LABEL_5;
        case 2LL:
          unint64_t v13 = sub_1000E66F4();
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3 + 8,  &type metadata for BatchErrorCode,  v13,  a2,  a3);
          goto LABEL_5;
        case 3LL:
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + 24, a2, a3);
          goto LABEL_5;
        case 4LL:
          uint64_t v12 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 40, a2, a3);
LABEL_5:
          uint64_t v9 = v12;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t ResourceStreamResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DEC34(a1, a2, a3, (void (*)(void))type metadata accessor for ResourceStreamResponse);
}

uint64_t sub_1000DEC34(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t v11 = *v7;
  if (!*(void *)(*v7 + 16)
    || (uint64_t v12 = type metadata accessor for ResponseItem(0LL),
        uint64_t v13 = sub_1000BD35C( &qword_1002928E0,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v11, 1LL, v12, v13, a2, a3),  !v5))
  {
    if (!v7[1]
      || (char v15 = *((_BYTE *)v7 + 16),
          uint64_t v21 = v7[1],
          char v22 = v15,
          unint64_t v16 = sub_1000E66F4(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v21,  2LL,  &type metadata for BatchErrorCode,  v16,  a2,  a3),  !v5))
    {
      uint64_t v17 = v7[3];
      unint64_t v18 = v7[4];
      uint64_t v19 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000LL) == 0) {
        uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (!v19 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v17, v18), !v5))
      {
        uint64_t v20 = v7[5];
        if (!v20
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v20, 4LL, a2, a3), !v5))
        {
          a4(0LL);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

Swift::Int ResourceStreamResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResourceStreamResponse,  &qword_100292908,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
}

uint64_t sub_1000DEDCC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0xE000000000000000LL;
  *(void *)(a1 + 40) = 0LL;
  return UnknownStorage.init()();
}

uint64_t sub_1000DEE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResourceStreamResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DEE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938A8,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DEE6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291818,  (uint64_t)static ResourceStreamResponse._protobuf_nameMap,  (uint64_t)sub_1000DE8C8,  a1);
}

uint64_t sub_1000DEE88(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292018,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292018,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *VideoHEVCProfileTierLevelInformation.protoMessageName.unsafeMutableAddressor()
{
  return &static VideoHEVCProfileTierLevelInformation.protoMessageName;
}

unint64_t static VideoHEVCProfileTierLevelInformation.protoMessageName.getter()
{
  return 0xD000000000000024LL;
}

uint64_t sub_1000DEF40()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static VideoHEVCProfileTierLevelInformation._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "profile";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "tier";
  *((void *)v13 + 1) = 4LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "level";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t VideoHEVCProfileTierLevelInformation._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291820,  (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap,  (uint64_t)sub_1000DEF40);
}

uint64_t static VideoHEVCProfileTierLevelInformation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291820,  (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap,  (uint64_t)sub_1000DEF40,  a1);
}

uint64_t VideoHEVCProfileTierLevelInformation.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v9 = v3 + 4;
        goto LABEL_5;
      }

      if (result == 1)
      {
        uint64_t v9 = v3;
        goto LABEL_5;
      }

uint64_t VideoHEVCProfileTierLevelInformation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  if (!(_DWORD)v8
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v8, 1LL, a2, a3), !v4))
  {
    uint64_t v10 = v3[1];
    if (!(_DWORD)v10
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v10, 2LL, a2, a3), !v4))
    {
      uint64_t v11 = v3[2];
      if (!(_DWORD)v11
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(v11, 3LL, a2, a3), !v4))
      {
        type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

Swift::Int VideoHEVCProfileTierLevelInformation.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for VideoHEVCProfileTierLevelInformation,  &qword_100292910,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000DF2B0@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  return UnknownStorage.init()();
}

uint64_t (*sub_1000DF2DC())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000DF2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VideoHEVCProfileTierLevelInformation.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000DF304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VideoHEVCProfileTierLevelInformation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000DF318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002938A0,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000DF368@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291820,  (uint64_t)static VideoHEVCProfileTierLevelInformation._protobuf_nameMap,  (uint64_t)sub_1000DEF40,  a1);
}

uint64_t sub_1000DF384(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292020,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DF3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292020,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
  return Message.hash(into:)(a1, a2, v4);
}

const char *RequestItem.protoMessageName.unsafeMutableAddressor()
{
  return "RequestItem";
}

uint64_t static RequestItem.protoMessageName.getter()
{
  return 0x4974736575716552LL;
}

uint64_t sub_1000DF440()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static RequestItem._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static RequestItem._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v44 = swift_allocObject(v1, v6 + 18 * v4, v5 | 7);
  *(_OWORD *)(v44 + 16) = xmmword_100214690;
  uint64_t v7 = v44 + v6;
  uint64_t v8 = v44 + v6 + *(int *)(v2 + 48);
  *(void *)(v44 + v6) = 1LL;
  *(void *)uint64_t v8 = "operationId";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 11LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v44 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "recordId";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 8LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v44 + v6 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "srcFieldName";
  *((void *)v14 + 1) = 12LL;
  _BYTE v14[16] = 2;
  v11();
  char v15 = (void *)(v44 + v6 + 3 * v4);
  unint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)unint64_t v16 = "zoneName";
  *((void *)v16 + 1) = 8LL;
  _BYTE v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v44 + v6 + 4 * v4);
  unint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)unint64_t v18 = "ownerId";
  *((void *)v18 + 1) = 7LL;
  _BYTE v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v44 + v6 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "downloadType";
  *((void *)v20 + 1) = 12LL;
  _BYTE v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v44 + v6 + 6 * v4);
  char v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)char v22 = "resourceFingerprint";
  *((void *)v22 + 1) = 19LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v44 + v6 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "records";
  *((void *)v24 + 1) = 7LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v44 + v6 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 101LL;
  *(void *)uint64_t v25 = "timeRange";
  *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  uint64_t v26 = (void *)(v44 + v6 + 9 * v4);
  uint64_t v27 = (char *)v26 + *(int *)(v2 + 48);
  *uint64_t v26 = 102LL;
  *(void *)uint64_t v27 = "mediaTypeHint";
  *((void *)v27 + 1) = 13LL;
  v27[16] = 2;
  v11();
  uint64_t v28 = (void *)(v44 + v6 + 10 * v4);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 48);
  *uint64_t v28 = 104LL;
  *(void *)uint64_t v29 = "videoProfileTierLevelInformation";
  *((void *)v29 + 1) = 32LL;
  v29[16] = 2;
  v11();
  uint64_t v30 = (void *)(v44 + v6 + 11 * v4);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 48);
  void *v30 = 105LL;
  *(void *)uint64_t v31 = "apacAudioTrackChannelCount";
  *((void *)v31 + 1) = 26LL;
  v31[16] = 2;
  v11();
  uint64_t v32 = (void *)(v44 + v6 + 12 * v4);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 48);
  *uint64_t v32 = 106LL;
  *(void *)uint64_t v33 = "apacAudioTrackHOAChannelCount";
  *((void *)v33 + 1) = 29LL;
  v33[16] = 2;
  v11();
  uint64_t v34 = (void *)(v44 + v6 + 13 * v4);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 48);
  *uint64_t v34 = 107LL;
  *(void *)uint64_t v35 = "apacAudioTrackBEDChannelCount";
  *((void *)v35 + 1) = 29LL;
  v35[16] = 2;
  v11();
  uint64_t v36 = (void *)(v44 + v6 + 14 * v4);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 48);
  void *v36 = 108LL;
  *(void *)uint64_t v37 = "cameraMake";
  *((void *)v37 + 1) = 10LL;
  v37[16] = 2;
  v11();
  uint64_t v38 = (void *)(v44 + v6 + 15 * v4);
  int v39 = (char *)v38 + *(int *)(v2 + 48);
  *uint64_t v38 = 109LL;
  *(void *)int v39 = "cameraModel";
  *((void *)v39 + 1) = 11LL;
  v39[16] = 2;
  v11();
  uint64_t v40 = v44 + v6 + 16 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 16 * v4) = 110LL;
  *(void *)uint64_t v40 = "apacAudioTrackCodecProfileLevelDescription";
  *(void *)(v40 + _Block_object_dispose((const void *)(v1 - 152), 8) = 42LL;
  *(_BYTE *)(v40 + 16) = 2;
  v11();
  __int128 v41 = (void *)(v44 + v6 + 17 * v4);
  __int128 v42 = (char *)v41 + *(int *)(v2 + 48);
  void *v41 = 111LL;
  *(void *)__int128 v42 = "clientSupportsProMotionDisplay";
  *((void *)v42 + 1) = 30LL;
  v42[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v44);
}

uint64_t RequestItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291828, (uint64_t)static RequestItem._protobuf_nameMap, (uint64_t)sub_1000DF440);
}

uint64_t static RequestItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_100291828, (uint64_t)static RequestItem._protobuf_nameMap, (uint64_t)sub_1000DF440, a1);
}

uint64_t sub_1000DF930()
{
  uint64_t v0 = type metadata accessor for RequestItem._StorageClass(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = sub_1000DF96C();
  qword_100292868 = result;
  return result;
}

uint64_t sub_1000DF96C()
{
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  *(void *)(v0 + 32) = 0LL;
  *(void *)(v0 + 40) = 0xE000000000000000LL;
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(v0 + 56) = 0xE000000000000000LL;
  *(void *)(v0 + 64) = 0LL;
  *(void *)(v0 + 72) = 0xE000000000000000LL;
  *(void *)(v0 + 80) = 0LL;
  *(void *)(v0 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(v0 + 96) = 0LL;
  *(_BYTE *)(v0 + 104) = 1;
  *(void *)(v0 + 112) = 0LL;
  *(void *)(v0 + 120) = 0xE000000000000000LL;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  *(void *)(v0 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for CMTimeRange(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint) = &_swiftEmptyArrayStorage;
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v4 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount) = 0;
  uint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  *uint64_t v5 = 0LL;
  v5[1] = 0xE000000000000000LL;
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  *uint64_t v6 = 0LL;
  v6[1] = 0xE000000000000000LL;
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  *uint64_t v7 = 0LL;
  v7[1] = 0xE000000000000000LL;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay) = 0;
  return v0;
}

void *sub_1000DFA90()
{
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint));
  sub_1000CEDAC( (uint64_t)v0 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation,  &qword_100292888);
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake
                                      + 8));
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel
                                      + 8));
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription
                                      + 8));
  return v0;
}

uint64_t sub_1000DFB58()
{
  uint64_t v0 = sub_1000DFA90();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t RequestItem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + v8)) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v3 + v8);
    uint64_t v10 = type metadata accessor for RequestItem._StorageClass(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = swift_retain(v9);
    uint64_t v12 = sub_1000E5C5C(v11);
    swift_release(v9);
    uint64_t v13 = *(void *)(v4 + v8);
    *(void *)(v4 + v_Block_object_dispose((const void *)(v1 - 152), 8) = v12;
    swift_release(v13);
  }

  uint64_t v14 = *(void *)(v4 + v8);
  uint64_t v15 = swift_retain(v14);
  sub_1000DFC44(v15, a1, a2, a3);
  return swift_release(v14);
}

uint64_t sub_1000DFC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay;
  uint64_t v7 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription;
  uint64_t v8 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel;
  uint64_t v9 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake;
  uint64_t v10 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount;
  uint64_t v11 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount;
  uint64_t v45 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v47 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount;
  uint64_t v41 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  uint64_t v43 = OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint;
  uint64_t v51 = a4;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, a4);
  if (!v4)
  {
    uint64_t v40 = a1 + v6;
    uint64_t v39 = a1 + v7;
    uint64_t v38 = a1 + v8;
    uint64_t v37 = a1 + v9;
    uint64_t v36 = a1 + v10;
    uint64_t v35 = a1 + v11;
    uint64_t v48 = a1 + v47;
    uint64_t v46 = a1 + v45;
    uint64_t v14 = a1 + v43;
    uint64_t v15 = a1 + v41;
    uint64_t v42 = a1 + 112;
    uint64_t v44 = a1 + 128;
    uint64_t v33 = a1 + 80;
    uint64_t v34 = a1 + 96;
    uint64_t v31 = a1 + 48;
    uint64_t v32 = a1 + 64;
    uint64_t v29 = a1 + 16;
    uint64_t v30 = a1 + 32;
    uint64_t v16 = v51;
    while ((v13 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v17 = v29;
          goto LABEL_5;
        case 2LL:
          uint64_t v17 = v30;
          goto LABEL_5;
        case 3LL:
          uint64_t v17 = v31;
          goto LABEL_5;
        case 4LL:
          uint64_t v17 = v32;
          goto LABEL_5;
        case 5LL:
          uint64_t v17 = v33;
LABEL_5:
          swift_beginAccess(v17, v50, 33LL, 0LL);
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v17, a3, v16);
          swift_endAccess(v50);
          break;
        case 6LL:
          swift_beginAccess(v34, v50, 33LL, 0LL);
          unint64_t v18 = sub_1000E677C();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v34,  &type metadata for DownloadType,  v18,  a3,  v16);
          goto LABEL_19;
        case 7LL:
          swift_beginAccess(v42, v50, 33LL, 0LL);
          uint64_t v19 = v42;
          goto LABEL_28;
        case 8LL:
          swift_beginAccess(v44, v50, 33LL, 0LL);
          uint64_t v20 = type metadata accessor for Ckcode_RecordTransport(0LL);
          uint64_t v21 = sub_1000BD35C( &qword_100292930,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v44, v20, v21, a3, v16);
          goto LABEL_19;
        case 101LL:
          swift_beginAccess(v15, v50, 33LL, 0LL);
          uint64_t v22 = type metadata accessor for CMTimeRange(0LL);
          uint64_t v23 = sub_1000BD35C( &qword_100293900,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v15, v22, v23, a3, v16);
          goto LABEL_19;
        case 102LL:
          swift_beginAccess(v14, v50, 33LL, 0LL);
          unint64_t v24 = sub_1000EA8FC();
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)( v14,  &type metadata for RequestItem.MediaTypeHint,  v24,  a3,  v16);
          goto LABEL_19;
        case 104LL:
          swift_beginAccess(v46, v50, 33LL, 0LL);
          uint64_t v25 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
          uint64_t v26 = sub_1000BD35C( &qword_100292020,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v46, v25, v26, a3, v16);
          goto LABEL_19;
        case 105LL:
          uint64_t v27 = v48;
          goto LABEL_23;
        case 106LL:
          uint64_t v27 = v35;
          goto LABEL_23;
        case 107LL:
          uint64_t v27 = v36;
LABEL_23:
          swift_beginAccess(v27, v50, 33LL, 0LL);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v27, a3, v16);
          goto LABEL_19;
        case 108LL:
          uint64_t v28 = v37;
          goto LABEL_27;
        case 109LL:
          uint64_t v28 = v38;
          goto LABEL_27;
        case 110LL:
          uint64_t v28 = v39;
LABEL_27:
          swift_beginAccess(v28, v50, 33LL, 0LL);
          uint64_t v19 = v28;
LABEL_28:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v19, a3, v16);
          goto LABEL_19;
        case 111LL:
          swift_beginAccess(v40, v50, 33LL, 0LL);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v40, a3, v16);
LABEL_19:
          swift_endAccess(v50);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a3, v16);
    }
  }

  return result;
}

uint64_t RequestItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + *(int *)(type metadata accessor for RequestItem(0LL) + 20));
  uint64_t v9 = swift_retain(v8);
  sub_1000E01B4(v9, a1, a2, a3);
  uint64_t result = swift_release(v8);
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }
  return result;
}

uint64_t sub_1000E01B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_1000BED3C(&qword_100292888);
  __chkstk_darwin(v9);
  id v98 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  uint64_t v75 = *(void *)(v11 - 8);
  uint64_t v76 = v11;
  __chkstk_darwin(v11);
  uint64_t v74 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1000BED3C(&qword_100292870);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v16 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v77 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a1 + 16, v97, 0LL, 0LL);
  uint64_t v18 = *(void *)(a1 + 16);
  unint64_t v19 = *(void *)(a1 + 24);
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 24));
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19);
    if (v5) {
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v19);
  }

  swift_beginAccess(a1 + 32, v96, 0LL, 0LL);
  uint64_t v21 = *(void *)(a1 + 32);
  unint64_t v19 = *(void *)(a1 + 40);
  uint64_t v22 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v22)
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 40));
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v21, v19);
    if (v5) {
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v19);
  }

  swift_beginAccess(a1 + 48, v95, 0LL, 0LL);
  uint64_t v23 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  uint64_t v24 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v24 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 56));
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v23, v19);
    if (v5) {
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v19);
  }

  swift_beginAccess(a1 + 64, v94, 0LL, 0LL);
  uint64_t v25 = *(void *)(a1 + 64);
  unint64_t v19 = *(void *)(a1 + 72);
  uint64_t v26 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v25 & 0xFFFFFFFFFFFFLL;
  }
  if (v26)
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 72));
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v25, v19);
    if (v5) {
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v19);
  }

  swift_beginAccess(a1 + 80, v93, 0LL, 0LL);
  uint64_t v27 = *(void *)(a1 + 80);
  unint64_t v19 = *(void *)(a1 + 88);
  uint64_t v28 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v28 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v28)
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 88));
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v27, v19);
    if (v5) {
      return swift_bridgeObjectRelease(v19);
    }
    swift_bridgeObjectRelease(v19);
  }

  swift_beginAccess(a1 + 96, v92, 0LL, 0LL);
  if (*(void *)(a1 + 96))
  {
    char v29 = *(_BYTE *)(a1 + 104);
    uint64_t v90 = *(void *)(a1 + 96);
    char v91 = v29;
    unint64_t v30 = sub_1000E677C();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v90,  6LL,  &type metadata for DownloadType,  v30,  a3,  a4);
    if (v5) {
      return result;
    }
  }

  swift_beginAccess(a1 + 112, &v90, 0LL, 0LL);
  uint64_t v32 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 120);
  uint64_t v33 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000LL) == 0) {
    uint64_t v33 = v32 & 0xFFFFFFFFFFFFLL;
  }
  if (v33)
  {
    swift_bridgeObjectRetain(*(void *)(a1 + 120));
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v32, v19);
    if (!v5)
    {
      swift_bridgeObjectRelease(v19);
      goto LABEL_33;
    }

    return swift_bridgeObjectRelease(v19);
  }

uint64_t sub_1000E0AB4(void *a1, uint64_t a2)
{
  uint64_t v117 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  uint64_t v115 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v112 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = sub_1000BED3C(&qword_1002938F0);
  __chkstk_darwin(v114);
  uint64_t v6 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000BED3C(&qword_100292888);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v113 = (_DWORD *)((char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v116 = (uint64_t)&v110 - v10;
  uint64_t v119 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v11 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v118 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1000BED3C(&qword_1002938F8);
  __chkstk_darwin(v13);
  uint64_t v120 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000BED3C(&qword_100292870);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v110 - v19;
  swift_beginAccess(a1 + 2, v156, 0LL, 0LL);
  uint64_t v22 = a1[2];
  uint64_t v21 = a1[3];
  swift_beginAccess(a2 + 16, v155, 0LL, 0LL);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 24);
  if (v22 != v23 || v21 != v24)
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, v23, v24, 0LL);
    char v26 = 0;
    if ((v25 & 1) == 0) {
      return v26 & 1;
    }
  }

  swift_beginAccess(a1 + 4, v154, 0LL, 0LL);
  uint64_t v27 = a1[4];
  uint64_t v28 = a1[5];
  swift_beginAccess(a2 + 32, v153, 0LL, 0LL);
  uint64_t v29 = *(void *)(a2 + 32);
  uint64_t v30 = *(void *)(a2 + 40);
  if (v27 != v29 || v28 != v30)
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0LL);
    char v26 = 0;
    if ((v31 & 1) == 0) {
      return v26 & 1;
    }
  }

  swift_beginAccess(a1 + 6, v152, 0LL, 0LL);
  uint64_t v32 = a1[6];
  uint64_t v33 = a1[7];
  swift_beginAccess(a2 + 48, v151, 0LL, 0LL);
  uint64_t v34 = *(void *)(a2 + 48);
  uint64_t v35 = *(void *)(a2 + 56);
  if (v32 != v34 || v33 != v35)
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0LL);
    char v26 = 0;
    if ((v36 & 1) == 0) {
      return v26 & 1;
    }
  }

  swift_beginAccess(a1 + 8, v150, 0LL, 0LL);
  uint64_t v37 = a1[8];
  uint64_t v38 = a1[9];
  swift_beginAccess(a2 + 64, &v149, 0LL, 0LL);
  uint64_t v39 = *(void *)(a2 + 64);
  uint64_t v40 = *(void *)(a2 + 72);
  if (v37 != v39 || v38 != v40)
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0LL);
    char v26 = 0;
    if ((v41 & 1) == 0) {
      return v26 & 1;
    }
  }

  swift_beginAccess(a1 + 10, &v148, 0LL, 0LL);
  uint64_t v42 = a1[10];
  uint64_t v43 = a1[11];
  swift_beginAccess(a2 + 80, &v147, 0LL, 0LL);
  uint64_t v44 = *(void *)(a2 + 80);
  uint64_t v45 = *(void *)(a2 + 88);
  if (v42 != v44 || v43 != v45)
  {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v44, v45, 0LL);
    char v26 = 0;
    if ((v46 & 1) == 0) {
      return v26 & 1;
    }
  }

  swift_beginAccess(a1 + 12, &v146, 0LL, 0LL);
  uint64_t v47 = a1[12];
  swift_beginAccess(a2 + 96, &v145, 0LL, 0LL);
  uint64_t v48 = *(void *)(a2 + 96);
  if (*(_BYTE *)(a2 + 104) != 1)
  {
    if (v47 != v48) {
      goto LABEL_60;
    }
    goto LABEL_26;
  }

  if (!v48)
  {
    if (!v47) {
      goto LABEL_26;
    }
LABEL_60:
    char v26 = 0;
    return v26 & 1;
  }

  if (v48 != 1)
  {
    if (v47 == 2) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }

  if (v47 != 1) {
    goto LABEL_60;
  }
LABEL_26:
  swift_beginAccess(a1 + 14, &v144, 0LL, 0LL);
  uint64_t v49 = a1[14];
  uint64_t v50 = a1[15];
  swift_beginAccess(a2 + 112, &v143, 0LL, 0LL);
  uint64_t v51 = *(void *)(a2 + 112);
  uint64_t v52 = *(void *)(a2 + 120);
  if (v49 == v51 && v50 == v52
    || (v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, v51, v52, 0LL), char v26 = 0, (v53 & 1) != 0))
  {
    uint64_t v111 = v6;
    swift_beginAccess(a1 + 16, &v142, 0LL, 0LL);
    uint64_t v54 = a1[16];
    swift_beginAccess(a2 + 128, &v141, 0LL, 0LL);
    uint64_t v55 = *(void *)(a2 + 128);
    swift_retain(a1);
    swift_retain(a2);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
    char v56 = sub_100100134(v54, v55);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v55);
    if ((v56 & 1) == 0) {
      goto LABEL_59;
    }
    uint64_t v57 = (uint64_t)a1
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
    swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange,  &v140,  0LL,  0LL);
    sub_1000CE7B4(v57, (uint64_t)v20, &qword_100292870);
    uint64_t v58 = a2
        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
    swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange,  &v139,  0LL,  0LL);
    uint64_t v59 = v120;
    uint64_t v60 = v120 + *(int *)(v13 + 48);
    sub_1000CE7B4((uint64_t)v20, v120, &qword_100292870);
    sub_1000CE7B4(v58, v60, &qword_100292870);
    unint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v62 = v119;
    if (v61(v59, 1LL, v119) == 1)
    {
      sub_1000CEDAC((uint64_t)v20, &qword_100292870);
      int v63 = v61(v60, 1LL, v62);
      uint64_t v64 = (uint64_t)v111;
      if (v63 == 1)
      {
        sub_1000CEDAC(v59, &qword_100292870);
LABEL_38:
        uint64_t v71 = (void *)((char *)a1
                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
        swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint,  &v138,  0LL,  0LL);
        uint64_t v72 = *v71;
        uint64_t v73 = (uint64_t *)(a2
                        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
        swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint,  &v137,  0LL,  0LL);
        if ((sub_1001002B8(v72, *v73) & 1) == 0) {
          goto LABEL_59;
        }
        uint64_t v74 = (uint64_t)a1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
        swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation,  &v136,  0LL,  0LL);
        uint64_t v75 = v116;
        sub_1000CE7B4(v74, v116, &qword_100292888);
        uint64_t v76 = a2
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
        swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation,  &v135,  0LL,  0LL);
        uint64_t v77 = v64 + *(int *)(v114 + 48);
        sub_1000CE7B4(v75, v64, &qword_100292888);
        sub_1000CE7B4(v76, v77, &qword_100292888);
        uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        uint64_t v79 = v117;
        if (v78(v64, 1LL, v117) == 1)
        {
          sub_1000CEDAC(v75, &qword_100292888);
          if (v78(v77, 1LL, v79) == 1)
          {
            sub_1000CEDAC(v64, &qword_100292888);
LABEL_46:
            uint64_t v83 = (int *)((char *)a1
                        + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
            swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount,  &v134,  0LL,  0LL);
            int v84 = *v83;
            uint64_t v85 = (_DWORD *)(a2
                           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
            swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount,  &v133,  0LL,  0LL);
            if (v84 == *v85)
            {
              uint64_t v86 = (int *)((char *)a1
                          + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
              swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount,  &v132,  0LL,  0LL);
              int v87 = *v86;
              uint64_t v88 = (_DWORD *)(a2
                             + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
              swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount,  &v131,  0LL,  0LL);
              if (v87 == *v88)
              {
                uint64_t v89 = (int *)((char *)a1
                            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
                swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount,  &v130,  0LL,  0LL);
                int v90 = *v89;
                char v91 = (_DWORD *)(a2
                               + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
                swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount,  &v129,  0LL,  0LL);
                if (v90 == *v91)
                {
                  if ((unint64_t v92 = (void *)((char *)a1
                                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake),
                        swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake,  &v128,  0LL,  0LL),  v93 = *v92,  v94 = v92[1],  v95 = (void *)(a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake),  swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake,  &v127,  0LL,  0LL),  uint64_t v96 = v95[1],  v93 == *v95)
                    && v94 == v96
                    || (_stringCompareWithSmolCheck(_:_:expecting:)(v93, v94, *v95, v96, 0LL) & 1) != 0)
                  {
                    if ((uint64_t v97 = (void *)((char *)a1
                                         + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel),
                          swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel,  &v126,  0LL,  0LL),  uint64_t v98 = *v97,  v99 = v97[1],  v100 = (void *)(a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel),  swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel,  &v125,  0LL,  0LL),  v101 = v100[1],  v98 == *v100)
                      && v99 == v101
                      || (_stringCompareWithSmolCheck(_:_:expecting:)(v98, v99, *v100, v101, 0LL) & 1) != 0)
                    {
                      if ((uint64_t v102 = (void *)((char *)a1
                                            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription),
                            swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription,  &v124,  0LL,  0LL),  uint64_t v103 = *v102,  v104 = v102[1],  v105 = (void *)(a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription),  swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription,  &v123,  0LL,  0LL),  v106 = v105[1],  v103 == *v105)
                        && v104 == v106
                        || (_stringCompareWithSmolCheck(_:_:expecting:)(v103, v104, *v105, v106, 0LL) & 1) != 0)
                      {
                        uint64_t v107 = (char *)a1
                             + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay;
                        swift_beginAccess( (char *)a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay,  &v122,  0LL,  0LL);
                        LOBYTE(v107) = *v107;
                        swift_release(a1);
                        uint64_t v108 = (_BYTE *)(a2
                                       + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
                        swift_beginAccess( a2 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay,  &v121,  0LL,  0LL);
                        LOBYTE(v10_Block_object_dispose((const void *)(v1 - 152), 8) = *v108;
                        swift_release(a2);
                        char v26 = v107 ^ v108 ^ 1;
                        return v26 & 1;
                      }
                    }
                  }
                }
              }
            }

            goto LABEL_59;
          }

          goto LABEL_44;
        }

        uint64_t v80 = v113;
        sub_1000CE7B4(v64, (uint64_t)v113, &qword_100292888);
        if (v78(v77, 1LL, v79) == 1)
        {
          sub_1000CEDAC(v75, &qword_100292888);
          sub_1000CECE0((uint64_t)v80, type metadata accessor for VideoHEVCProfileTierLevelInformation);
LABEL_44:
          uint64_t v66 = &qword_1002938F0;
          uint64_t v67 = v64;
          goto LABEL_36;
        }

        uint64_t v81 = v112;
        sub_1000CEC9C(v77, (uint64_t)v112, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        char v82 = _s22CloudKitImplementation36VideoHEVCProfileTierLevelInformationV2eeoiySbAC_ACtFZ_0(v80, v81);
        sub_1000CECE0((uint64_t)v81, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        sub_1000CEDAC(v75, &qword_100292888);
        sub_1000CECE0((uint64_t)v80, type metadata accessor for VideoHEVCProfileTierLevelInformation);
        sub_1000CEDAC(v64, &qword_100292888);
        if ((v82 & 1) != 0) {
          goto LABEL_46;
        }
LABEL_59:
        swift_release(a1);
        swift_release(a2);
        goto LABEL_60;
      }
    }

    else
    {
      sub_1000CE7B4(v59, (uint64_t)v18, &qword_100292870);
      int v65 = v61(v60, 1LL, v62);
      uint64_t v64 = (uint64_t)v111;
      if (v65 != 1)
      {
        uint64_t v68 = v60;
        uint64_t v69 = v118;
        sub_1000CEC9C(v68, v118, type metadata accessor for CMTimeRange);
        char v70 = static CMTimeRange.== infix(_:_:)(v18, v69);
        sub_1000CECE0(v69, type metadata accessor for CMTimeRange);
        sub_1000CEDAC((uint64_t)v20, &qword_100292870);
        sub_1000CECE0((uint64_t)v18, type metadata accessor for CMTimeRange);
        sub_1000CEDAC(v59, &qword_100292870);
        if ((v70 & 1) == 0) {
          goto LABEL_59;
        }
        goto LABEL_38;
      }

      sub_1000CEDAC((uint64_t)v20, &qword_100292870);
      sub_1000CECE0((uint64_t)v18, type metadata accessor for CMTimeRange);
    }

    uint64_t v66 = &qword_1002938F8;
    uint64_t v67 = v59;
LABEL_36:
    sub_1000CEDAC(v67, v66);
    goto LABEL_59;
  }

  return v26 & 1;
}

Swift::Int RequestItem.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for RequestItem,  &qword_100292918,  (uint64_t)&protocol conformance descriptor for RequestItem);
}

uint64_t sub_1000E15F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_100291830 != -1) {
    swift_once(&qword_100291830, sub_1000DF930);
  }
  uint64_t v5 = qword_100292868;
  *(void *)(a2 + v4) = qword_100292868;
  return swift_retain(v5);
}

uint64_t sub_1000E1654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RequestItem.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E1668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RequestItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E167C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293898,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E16CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_100291828, (uint64_t)static RequestItem._protobuf_nameMap, (uint64_t)sub_1000DF440, a1);
}

uint64_t sub_1000E16E8(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E1728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E1778()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static RequestItem.MediaTypeHint._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 0LL;
  *(void *)uint64_t v9 = "Unknown";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "HDR";
  *((void *)v13 + 1) = 3LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 2LL;
  *(void *)uint64_t v14 = "Spatial";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 7LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t RequestItem.MediaTypeHint._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291838,  (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap,  (uint64_t)sub_1000E1778);
}

uint64_t static RequestItem.MediaTypeHint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291838,  (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap,  (uint64_t)sub_1000E1778,  a1);
}

uint64_t sub_1000E1940@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291838,  (uint64_t)static RequestItem.MediaTypeHint._protobuf_nameMap,  (uint64_t)sub_1000E1778,  a1);
}

const char *ResponseItem.protoMessageName.unsafeMutableAddressor()
{
  return "ResponseItem";
}

uint64_t static ResponseItem.protoMessageName.getter()
{
  return 0x65736E6F70736552LL;
}

uint64_t sub_1000E1988()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ResponseItem._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ResponseItem._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v27 = swift_allocObject(v1, v6 + 9 * v4, v5 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002135A0;
  uint64_t v7 = v27 + v6;
  uint64_t v8 = v27 + v6 + *(int *)(v2 + 48);
  *(void *)(v27 + v6) = 1LL;
  *(void *)uint64_t v8 = "operationId";
  *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 152), 8) = 11LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "recordId";
  *(void *)(v12 + _Block_object_dispose((const void *)(v1 - 152), 8) = 8LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  *uint64_t v13 = 3LL;
  *(void *)uint64_t v14 = "srcFieldName";
  *((void *)v14 + 1) = 12LL;
  _BYTE v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  void *v15 = 4LL;
  *(void *)uint64_t v16 = "assetRecord";
  *((void *)v16 + 1) = 11LL;
  _BYTE v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  *uint64_t v17 = 5LL;
  *(void *)uint64_t v18 = "errorMessage";
  *((void *)v18 + 1) = 12LL;
  _BYTE v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 48);
  void *v19 = 6LL;
  *(void *)uint64_t v20 = "transcoderVersion";
  *((void *)v20 + 1) = 17LL;
  _BYTE v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 48);
  void *v21 = 7LL;
  *(void *)uint64_t v22 = "downloadType";
  *((void *)v22 + 1) = 12LL;
  v22[16] = 2;
  v11();
  uint64_t v23 = (void *)(v7 + 7 * v4);
  uint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)uint64_t v24 = "downloadEstimatedSize";
  *((void *)v24 + 1) = 21LL;
  _BYTE v24[16] = 2;
  v11();
  uint64_t v25 = v7 + 8 * v4 + *(int *)(v2 + 48);
  *(void *)(v7 + 8 * v4) = 9LL;
  *(void *)uint64_t v25 = "errorCode";
  *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v25 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v27);
}

uint64_t ResponseItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291840, (uint64_t)static ResponseItem._protobuf_nameMap, (uint64_t)sub_1000E1988);
}

uint64_t static ResponseItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_100291840, (uint64_t)static ResponseItem._protobuf_nameMap, (uint64_t)sub_1000E1988, a1);
}

uint64_t ResponseItem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_10;
        case 2LL:
          uint64_t v9 = v3 + 16;
          goto LABEL_10;
        case 3LL:
          uint64_t v9 = v3 + 32;
          goto LABEL_10;
        case 4LL:
          uint64_t v10 = v3 + *(int *)(type metadata accessor for ResponseItem(0LL) + 52);
          uint64_t v11 = type metadata accessor for Ckcode_RecordTransport(0LL);
          uint64_t v12 = sub_1000BD35C( &qword_100292930,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v10, v11, v12, a2, a3);
          break;
        case 5LL:
          uint64_t v9 = v3 + 48;
LABEL_10:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        case 6LL:
          uint64_t v13 = v3 + 64;
          goto LABEL_14;
        case 7LL:
          unint64_t v14 = sub_1000E677C();
          uint64_t v15 = v3 + 72;
          uint64_t v16 = &type metadata for DownloadType;
          goto LABEL_16;
        case 8LL:
          uint64_t v13 = v3 + 88;
LABEL_14:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v13, a2, a3);
          break;
        case 9LL:
          unint64_t v14 = sub_1000E6738();
          uint64_t v15 = v3 + 96;
          uint64_t v16 = &type metadata for ItemErrorCode;
LABEL_16:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v15, v16, v14, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t ResponseItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_1000BED3C(&qword_100291F58);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = *(void *)(v5 + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17
    || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v16), !v4))
  {
    uint64_t v19 = *(void *)(v5 + 16);
    unint64_t v20 = *(void *)(v5 + 24);
    uint64_t v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000LL) == 0) {
      uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (!v21 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v19, v20), !v4))
    {
      uint64_t v22 = *(void *)(v5 + 32);
      unint64_t v23 = *(void *)(v5 + 40);
      uint64_t v24 = HIBYTE(v23) & 0xF;
      if ((v23 & 0x2000000000000000LL) == 0) {
        uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
      }
      if (!v24 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v22, v23), !v4))
      {
        uint64_t v37 = type metadata accessor for ResponseItem(0LL);
        sub_1000CE7B4(v5 + *(int *)(v37 + 52), (uint64_t)v11, &qword_100291F58);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
        {
          sub_1000CEDAC((uint64_t)v11, &qword_100291F58);
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
          uint64_t v25 = sub_1000BD35C( &qword_100292930,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport,  (uint64_t)&protocol conformance descriptor for Ckcode_RecordTransport);
          dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v15, 4LL, v12, v25, a2, a3);
          if (v4) {
            return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          }
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        }

        uint64_t v26 = *(void *)(v5 + 48);
        unint64_t v27 = *(void *)(v5 + 56);
        uint64_t v28 = HIBYTE(v27) & 0xF;
        if ((v27 & 0x2000000000000000LL) == 0) {
          uint64_t v28 = v26 & 0xFFFFFFFFFFFFLL;
        }
        if (!v28 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v26, v27), !v4))
        {
          uint64_t v29 = *(void *)(v5 + 64);
          if (!v29
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v29, 6LL, a2, a3), !v4))
          {
            if (!*(void *)(v5 + 72)
              || (char v30 = *(_BYTE *)(v5 + 80),
                  uint64_t v35 = *(void *)(v5 + 72),
                  char v36 = v30,
                  unint64_t v31 = sub_1000E677C(),
                  uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v35,  7LL,  &type metadata for DownloadType,  v31,  a2,  a3),  !v4))
            {
              uint64_t v32 = *(void *)(v5 + 88);
              if (!v32
                || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v32, 8LL, a2, a3), !v4))
              {
                if (!*(void *)(v5 + 96)) {
                  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
                }
                char v33 = *(_BYTE *)(v5 + 104);
                uint64_t v35 = *(void *)(v5 + 96);
                char v36 = v33;
                unint64_t v34 = sub_1000E6738();
                uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v35,  9LL,  &type metadata for ItemErrorCode,  v34,  a2,  a3);
                if (!v4) {
                  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int ResponseItem.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResponseItem,  &qword_100292938,  (uint64_t)&protocol conformance descriptor for ResponseItem);
}

uint64_t sub_1000E21EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0xE000000000000000LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0xE000000000000000LL;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(a2 + 56) = 0xE000000000000000LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(_BYTE *)(a2 + 80) = 1;
  *(_BYTE *)(a2 + 104) = 1;
  *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for Ckcode_RecordTransport(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
}

uint64_t sub_1000E2268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000E22A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000E22E8())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000E22FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResponseItem.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E2310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResponseItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E2324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293890,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E2374@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_100291840, (uint64_t)static ResponseItem._protobuf_nameMap, (uint64_t)sub_1000E1988, a1);
}

uint64_t sub_1000E2390(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_1002928E0,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E23D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_1002928E0,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
  return Message.hash(into:)(a1, a2, v4);
}

const char *ResetInterval.protoMessageName.unsafeMutableAddressor()
{
  return "ResetInterval";
}

uint64_t static ResetInterval.protoMessageName.getter()
{
  return 0x746E497465736552LL;
}

uint64_t sub_1000E2450()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static ResetInterval._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static ResetInterval._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "startTimestamp";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "endTimestamp";
  *((void *)v13 + 1) = 12LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "resources";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t ResetInterval._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291848, (uint64_t)static ResetInterval._protobuf_nameMap, (uint64_t)sub_1000E2450);
}

uint64_t static ResetInterval._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_100291848, (uint64_t)static ResetInterval._protobuf_nameMap, (uint64_t)sub_1000E2450, a1);
}

uint64_t ResetInterval.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      switch(result)
      {
        case 3LL:
          unint64_t v9 = sub_1000E67C0();
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)( v3 + 16,  &type metadata for ResourceType,  v9,  a2,  a3);
          goto LABEL_12;
        case 2LL:
          uint64_t v10 = v3 + 8;
          break;
        case 1LL:
          uint64_t v10 = v3;
          break;
        default:
          goto LABEL_12;
      }

      dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v10, a2, a3);
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t ResetInterval.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*v3, 1LL, a2, a3), !v4))
  {
    uint64_t v9 = v3[1];
    if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v9, 2LL, a2, a3), !v4))
    {
      uint64_t v10 = v3[2];
      if (!*(void *)(v10 + 16)
        || (unint64_t v11 = sub_1000E67C0(),
            uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)( v10,  3LL,  &type metadata for ResourceType,  v11,  a2,  a3),  !v4))
      {
        type metadata accessor for ResetInterval(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

Swift::Int ResetInterval.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for ResetInterval,  &qword_100292948,  (uint64_t)&protocol conformance descriptor for ResetInterval);
}

uint64_t sub_1000E2830@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000E285C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetInterval.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E2870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ResetInterval.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E2884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293888,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E28D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_100291848, (uint64_t)static ResetInterval._protobuf_nameMap, (uint64_t)sub_1000E2450, a1);
}

uint64_t sub_1000E28F0(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292B30,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E2930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292B30,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
  return Message.hash(into:)(a1, a2, v4);
}

const char *UploadResource.protoMessageName.unsafeMutableAddressor()
{
  return "UploadResource";
}

uint64_t static UploadResource.protoMessageName.getter()
{
  return 0x655264616F6C7055LL;
}

uint64_t sub_1000E29B0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static UploadResource._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static UploadResource._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135C0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "type";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "itemType";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "sourceResourceType";
  *((void *)v15 + 1) = 18LL;
  v15[16] = 2;
  v12();
  unint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *unint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "uploadResourceTypes";
  *((void *)v17 + 1) = 19LL;
  _BYTE v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UploadResource._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291850, (uint64_t)static UploadResource._protobuf_nameMap, (uint64_t)sub_1000E29B0);
}

uint64_t static UploadResource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_100291850, (uint64_t)static UploadResource._protobuf_nameMap, (uint64_t)sub_1000E29B0, a1);
}

uint64_t UploadResource.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          unint64_t v10 = sub_1000E6804();
          uint64_t v11 = v3;
          uint64_t v12 = &type metadata for UploadRecordType;
          goto LABEL_5;
        case 2LL:
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3 + 16, a2, a3);
          goto LABEL_6;
        case 3LL:
          unint64_t v10 = sub_1000E67C0();
          uint64_t v11 = v3 + 32;
          uint64_t v12 = &type metadata for ResourceType;
LABEL_5:
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)(v11, v12, v10, a2, a3);
          goto LABEL_6;
        case 4LL:
          unint64_t v14 = sub_1000E67C0();
          uint64_t v13 = v9;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)( v3 + 48,  &type metadata for ResourceType,  v14,  a2,  a3);
LABEL_6:
          uint64_t v9 = v13;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t UploadResource.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*v5
    || (unsigned __int8 v9 = *((_BYTE *)v5 + 8),
        uint64_t v20 = *v5,
        unsigned __int8 v21 = v9,
        unint64_t v10 = sub_1000E6804(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v20,  1LL,  &type metadata for UploadRecordType,  v10,  a2,  a3),  !v4))
  {
    uint64_t v12 = v5[2];
    unint64_t v13 = v5[3];
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v12, v13), !v4))
    {
      uint64_t v15 = v5[4];
      unsigned __int8 v16 = *((_BYTE *)v5 + 40);
      if (!Goldilocks_ExitType.rawValue.getter(v15, v16)
        || (uint64_t v20 = v15,
            unsigned __int8 v21 = v16,
            unint64_t v17 = sub_1000E67C0(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v20,  3LL,  &type metadata for ResourceType,  v17,  a2,  a3),  !v4))
      {
        uint64_t v18 = v5[6];
        if (!*(void *)(v18 + 16)
          || (unint64_t v19 = sub_1000E67C0(),
              uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)( v18,  4LL,  &type metadata for ResourceType,  v19,  a2,  a3),  !v4))
        {
          type metadata accessor for UploadResource(0LL);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

Swift::Int UploadResource.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for UploadResource,  &qword_100292958,  (uint64_t)&protocol conformance descriptor for UploadResource);
}

uint64_t sub_1000E2E80@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 40) = 1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000E2EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResource.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E2ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResource.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E2EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293880,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E2F3C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_100291850, (uint64_t)static UploadResource._protobuf_nameMap, (uint64_t)sub_1000E29B0, a1);
}

uint64_t sub_1000E2F58(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292960,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E2F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292960,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
  return Message.hash(into:)(a1, a2, v4);
}

void *UploadResourcesRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UploadResourcesRequest.protoMessageName;
}

unint64_t static UploadResourcesRequest.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000E3010(uint64_t a1)
{
  return sub_1000E4214(a1, static UploadResourcesRequest._protobuf_nameMap, (uint64_t)"forceSkipUploadResources", 24LL);
}

uint64_t UploadResourcesRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291858,  (uint64_t)static UploadResourcesRequest._protobuf_nameMap,  (uint64_t)sub_1000E3010);
}

uint64_t static UploadResourcesRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291858,  (uint64_t)static UploadResourcesRequest._protobuf_nameMap,  (uint64_t)sub_1000E3010,  a1);
}

uint64_t UploadResourcesRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4350( a1,  a2,  a3,  type metadata accessor for UploadResource,  &qword_100292960,  (uint64_t)&protocol conformance descriptor for UploadResource);
}

uint64_t UploadResourcesRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E444C( a1,  a2,  a3,  type metadata accessor for UploadResource,  &qword_100292960,  (uint64_t)&protocol conformance descriptor for UploadResource,  (void (*)(void))type metadata accessor for UploadResourcesRequest);
}

uint64_t static UploadResourcesRequest.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000E4EE0(a1, a2, sub_1000FF4AC, type metadata accessor for UploadResourcesRequest) & 1;
}

Swift::Int UploadResourcesRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for UploadResourcesRequest,  &qword_100292968,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
}

uint64_t sub_1000E3104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResourcesRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E3118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResourcesRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E312C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293878,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E317C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291858,  (uint64_t)static UploadResourcesRequest._protobuf_nameMap,  (uint64_t)sub_1000E3010,  a1);
}

uint64_t sub_1000E3198(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292B58,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E31D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292B58,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *UploadResourcesResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UploadResourcesResponse.protoMessageName;
}

unint64_t static UploadResourcesResponse.protoMessageName.getter()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1000E3250()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static UploadResourcesResponse._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static UploadResourcesResponse._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135D0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "shouldUploadJPEGMediumForOriginalImages";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 39LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  unint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)unint64_t v13 = "shouldUploadJPEGMediumForOriginalVideos";
  *((void *)v13 + 1) = 39LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "skipUploadResources";
  *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 152), 8) = 19LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UploadResourcesResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291860,  (uint64_t)static UploadResourcesResponse._protobuf_nameMap,  (uint64_t)sub_1000E3250);
}

uint64_t static UploadResourcesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291860,  (uint64_t)static UploadResourcesResponse._protobuf_nameMap,  (uint64_t)sub_1000E3250,  a1);
}

uint64_t UploadResourcesResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      switch(result)
      {
        case 3LL:
          uint64_t v9 = type metadata accessor for UploadResource(0LL);
          uint64_t v10 = sub_1000BD35C( &qword_100292960,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v3 + 8, v9, v10, a2, a3);
          goto LABEL_12;
        case 2LL:
          uint64_t v11 = v3 + 1;
          break;
        case 1LL:
          uint64_t v11 = v3;
          break;
        default:
          goto LABEL_12;
      }

      dispatch thunk of Decoder.decodeSingularBoolField(value:)(v11, a2, a3);
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t UploadResourcesResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)v3 != 1
    || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 1LL, a2, a3), !v4))
  {
    if (*(_BYTE *)(v3 + 1) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 2LL, a2, a3), !v4))
    {
      uint64_t v9 = *(void *)(v3 + 8);
      if (!*(void *)(v9 + 16)
        || (uint64_t v10 = type metadata accessor for UploadResource(0LL),
            uint64_t v11 = sub_1000BD35C( &qword_100292960,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource),  result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)( v9,  3LL,  v10,  v11,  a2,  a3),  !v4))
      {
        type metadata accessor for UploadResourcesResponse(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

Swift::Int UploadResourcesResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for UploadResourcesResponse,  &qword_100292970,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
}

uint64_t sub_1000E3688@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000E36B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000E36F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t sub_1000E3734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResourcesResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E3748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UploadResourcesResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E375C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293870,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E37AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291860,  (uint64_t)static UploadResourcesResponse._protobuf_nameMap,  (uint64_t)sub_1000E3250,  a1);
}

uint64_t sub_1000E37C8(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292B70,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3808(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292B70,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
  return Message.hash(into:)(a1, a2, v4);
}

void *UntranscodableItem.protoMessageName.unsafeMutableAddressor()
{
  return &static UntranscodableItem.protoMessageName;
}

unint64_t static UntranscodableItem.protoMessageName.getter()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000E3880()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v0, static UntranscodableItem._protobuf_nameMap);
  sub_1000BCFB4(v0, (uint64_t)static UntranscodableItem._protobuf_nameMap);
  uint64_t v1 = sub_1000BED3C(&qword_100291D80);
  uint64_t v2 = sub_1000BED3C(&qword_100291D88);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002135B0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "requestorDsid";
  *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 152), 8) = 13LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "fileChecksumHex";
  *(void *)(v13 + _Block_object_dispose((const void *)(v1 - 152), 8) = 15LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 4LL;
  *(void *)uint64_t v15 = "errorMessage";
  *((void *)v15 + 1) = 12LL;
  v15[16] = 2;
  v12();
  unsigned __int8 v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *unsigned __int8 v16 = 5LL;
  *(void *)unint64_t v17 = "isTranscodable";
  *((void *)v17 + 1) = 14LL;
  _BYTE v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  unint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 6LL;
  *(void *)unint64_t v19 = "ownerDsid";
  *((void *)v19 + 1) = 9LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  unsigned __int8 v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 7LL;
  *(void *)unsigned __int8 v21 = "referenceChecksumHex";
  *((void *)v21 + 1) = 20LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t UntranscodableItem._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291868, (uint64_t)static UntranscodableItem._protobuf_nameMap, (uint64_t)sub_1000E3880);
}

uint64_t static UntranscodableItem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291868,  (uint64_t)static UntranscodableItem._protobuf_nameMap,  (uint64_t)sub_1000E3880,  a1);
}

uint64_t UntranscodableItem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = v3;
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = v3 + 16;
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = v3 + 32;
          goto LABEL_5;
        case 5LL:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + 48, a2, a3);
          break;
        case 6LL:
          uint64_t v9 = v3 + 56;
          goto LABEL_5;
        case 7LL:
          uint64_t v9 = v3 + 72;
LABEL_5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t UntranscodableItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*(void *)v5, v9), !v4))
  {
    uint64_t v12 = *(void *)(v5 + 16);
    unint64_t v13 = *(void *)(v5 + 24);
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v12, v13), !v4))
    {
      uint64_t v15 = *(void *)(v5 + 32);
      unint64_t v16 = *(void *)(v5 + 40);
      uint64_t v17 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000LL) == 0) {
        uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
      }
      if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v15, v16), !v4))
      {
        if (*(_BYTE *)(v5 + 48) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 5LL, a2, a3), !v4))
        {
          uint64_t v18 = *(void *)(v5 + 56);
          unint64_t v19 = *(void *)(v5 + 64);
          uint64_t v20 = HIBYTE(v19) & 0xF;
          if ((v19 & 0x2000000000000000LL) == 0) {
            uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (!v20 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v18, v19), !v4))
          {
            uint64_t v21 = *(void *)(v5 + 72);
            unint64_t v22 = *(void *)(v5 + 80);
            uint64_t v23 = HIBYTE(v22) & 0xF;
            if ((v22 & 0x2000000000000000LL) == 0) {
              uint64_t v23 = v21 & 0xFFFFFFFFFFFFLL;
            }
            if (!v23
              || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v21, v22), !v4))
            {
              type metadata accessor for UntranscodableItem(0LL);
              return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
            }
          }
        }
      }
    }
  }

  return result;
}

Swift::Int UntranscodableItem.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for UntranscodableItem,  &qword_100292978,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
}

uint64_t sub_1000E3DA4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0xE000000000000000LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0xE000000000000000LL;
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0xE000000000000000LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0xE000000000000000LL;
  return UnknownStorage.init()();
}

uint64_t sub_1000E3DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000E3E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000E3E5C())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t sub_1000E3E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UntranscodableItem.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E3E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UntranscodableItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E3E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293868,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E3EE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291868,  (uint64_t)static UntranscodableItem._protobuf_nameMap,  (uint64_t)sub_1000E3880,  a1);
}

uint64_t sub_1000E3F04(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292980,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292980,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
  return Message.hash(into:)(a1, a2, v4);
}

void *UntranscodableRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UntranscodableRequest.protoMessageName;
}

unint64_t static UntranscodableRequest.protoMessageName.getter()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1000E3FBC(uint64_t a1)
{
  return sub_1000E4214(a1, static UntranscodableRequest._protobuf_nameMap, (uint64_t)"items", 5LL);
}

uint64_t UntranscodableRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291870,  (uint64_t)static UntranscodableRequest._protobuf_nameMap,  (uint64_t)sub_1000E3FBC);
}

uint64_t static UntranscodableRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291870,  (uint64_t)static UntranscodableRequest._protobuf_nameMap,  (uint64_t)sub_1000E3FBC,  a1);
}

uint64_t UntranscodableResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E4350( a1,  a2,  a3,  type metadata accessor for UntranscodableItem,  &qword_100292980,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
}

uint64_t UntranscodableRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E444C( a1,  a2,  a3,  type metadata accessor for UntranscodableItem,  &qword_100292980,  (uint64_t)&protocol conformance descriptor for UntranscodableItem,  (void (*)(void))type metadata accessor for UntranscodableRequest);
}

uint64_t static UntranscodableRequest.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000E4EE0(a1, a2, sub_1000FFBA8, type metadata accessor for UntranscodableRequest) & 1;
}

Swift::Int UntranscodableRequest.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for UntranscodableRequest,  &qword_100292988,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
}

uint64_t sub_1000E40B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UntranscodableResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000E40C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UntranscodableRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E40D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293860,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E4128@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291870,  (uint64_t)static UntranscodableRequest._protobuf_nameMap,  (uint64_t)sub_1000E3FBC,  a1);
}

uint64_t sub_1000E4144(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292B98,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E4184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292B98,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
  return Message.hash(into:)(a1, a2, v4);
}

void *UntranscodableResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UntranscodableResponse.protoMessageName;
}

unint64_t static UntranscodableResponse.protoMessageName.getter()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000E41FC(uint64_t a1)
{
  return sub_1000E4214(a1, static UntranscodableResponse._protobuf_nameMap, (uint64_t)"items", 5LL);
}

uint64_t sub_1000E4214(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v7, a2);
  sub_1000BCFB4(v7, (uint64_t)a2);
  uint64_t v8 = sub_1000BED3C(&qword_100291D80);
  uint64_t v9 = sub_1000BED3C(&qword_100291D88);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100212550;
  uint64_t v15 = v14 + v13 + *(int *)(v9 + 48);
  *(void *)(v14 + v13) = 1LL;
  *(void *)uint64_t v15 = a3;
  *(void *)(v15 + _Block_object_dispose((const void *)(v1 - 152), 8) = a4;
  *(_BYTE *)(v15 + 16) = 2;
  uint64_t v16 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v17 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v15, v16, v17);
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t UntranscodableResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20( &qword_100291878,  (uint64_t)static UntranscodableResponse._protobuf_nameMap,  (uint64_t)sub_1000E41FC);
}

uint64_t static UntranscodableResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C( &qword_100291878,  (uint64_t)static UntranscodableResponse._protobuf_nameMap,  (uint64_t)sub_1000E41FC,  a1);
}

uint64_t sub_1000E4350( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v13 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v13, i);
    if (v7 || (v16 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v17 = a4(0LL);
      uint64_t v18 = sub_1000BD35C(a5, a4, a6);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v6, v17, v18, a2, a3);
    }

    uint64_t v7 = 0LL;
    uint64_t v13 = a2;
  }

  return result;
}

uint64_t UntranscodableResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E444C( a1,  a2,  a3,  type metadata accessor for UntranscodableItem,  &qword_100292980,  (uint64_t)&protocol conformance descriptor for UntranscodableItem,  (void (*)(void))type metadata accessor for UntranscodableResponse);
}

uint64_t sub_1000E444C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v9 = v7;
  uint64_t v10 = a3;
  uint64_t v13 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v23 = a7;
    uint64_t v17 = a4(0LL);
    uint64_t v18 = sub_1000BD35C(a5, a4, a6);
    uint64_t v19 = v17;
    uint64_t v10 = a3;
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v13, 1LL, v19, v18, a2, a3);
    a7 = v23;
    uint64_t v21 = a1;
    if (v8) {
      return result;
    }
  }

  else
  {
    uint64_t v21 = a1;
  }

  a7(0LL);
  return UnknownStorage.traverse<A>(visitor:)(v21, a2, v10);
}

uint64_t static UntranscodableResponse.== infix(_:_:)(void *a1, char *a2)
{
  return sub_1000E4EE0(a1, a2, sub_1000FFBA8, type metadata accessor for UntranscodableResponse) & 1;
}

Swift::Int UntranscodableResponse.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for UntranscodableResponse,  &qword_100292990,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
}

uint64_t sub_1000E4588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UntranscodableResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000E459C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293858,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E45EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC( &qword_100291878,  (uint64_t)static UntranscodableResponse._protobuf_nameMap,  (uint64_t)sub_1000E41FC,  a1);
}

uint64_t sub_1000E4608(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100292BB0,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E4648(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100292BB0,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t _s22CloudKitImplementation36VideoHEVCProfileTierLevelInformationV2eeoiySbAC_ACtFZ_0( _DWORD *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*a1 == *(_DWORD *)a2 && a1[1] == *((_DWORD *)a2 + 1) && a1[2] == *((_DWORD *)a2 + 2))
  {
    uint64_t v11 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
    uint64_t v12 = (char *)a1 + *(int *)(v11 + 28);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 28)], v4);
    uint64_t v14 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    char v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t _s22CloudKitImplementation24ResourceDownloadResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  if ((sub_1000FF35C(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16) == 1) {
    uint64_t v11 = qword_100216878[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16)) {
    __asm { BR              X11 }
  }

  if (v11 != v12) {
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  if (v13 == v15 && v14 == v16
    || (char v17 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL) & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
    {
      uint64_t v18 = type metadata accessor for ResourceDownloadResponse(0LL);
      uint64_t v19 = a1 + *(int *)(v18 + 32);
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v20(v10, v19, v4);
      v20(v8, a2 + *(int *)(v18 + 32), v4);
      uint64_t v21 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v21);
      unint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v8, v4);
      v22(v10, v4);
      return v17 & 1;
    }

uint64_t _s22CloudKitImplementation23UploadResourcesResponseV2eeoiySbAC_ACtFZ_0( unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*a1 == *a2 && a1[1] == a2[1] && (sub_1000FF4AC(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for UploadResourcesResponse(0LL);
    uint64_t v12 = &a1[*(int *)(v11 + 28)];
    uint64_t v13 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 28)], v4);
    uint64_t v14 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  if ((sub_1000FF35C(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16) == 1) {
    uint64_t v11 = qword_100216878[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16)) {
    __asm { BR              X11 }
  }

  if (v11 != v12) {
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  if (v13 == v15 && v14 == v16
    || (char v17 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL) & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
    {
      uint64_t v18 = type metadata accessor for ResourceAnalyzeResponse(0LL);
      uint64_t v19 = a1 + *(int *)(v18 + 32);
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v20(v10, v19, v4);
      v20(v8, a2 + *(int *)(v18 + 32), v4);
      uint64_t v21 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v21);
      unint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v8, v4);
      v22(v10, v4);
      return v17 & 1;
    }

uint64_t _s22CloudKitImplementation22ResourceStreamResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  if ((sub_1000FF35C(*(void *)a1, *(void *)a2) & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(_BYTE *)(a1 + 16) == 1) {
    uint64_t v11 = qword_100216878[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16)) {
    __asm { BR              X11 }
  }

  if (v11 != v12) {
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  if (v13 == v15 && v14 == v16
    || (char v17 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL) & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
    {
      uint64_t v18 = type metadata accessor for ResourceStreamResponse(0LL);
      uint64_t v19 = a1 + *(int *)(v18 + 32);
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v20(v10, v19, v4);
      v20(v8, a2 + *(int *)(v18 + 32), v4);
      uint64_t v21 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v21);
      unint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v8, v4);
      v22(v10, v4);
      return v17 & 1;
    }

uint64_t sub_1000E4EE0( void *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  if ((a3(*a1, *(void *)a2) & 1) != 0)
  {
    uint64_t v15 = a4(0LL);
    uint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
    char v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v17(v14, v16, v8);
    v17(v12, &a2[*(int *)(v15 + 20)], v8);
    uint64_t v18 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v18);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20(v12, v8);
    v20(v14, v8);
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

uint64_t _s22CloudKitImplementation18UntranscodableItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v13 = *(void *)a1 == *(void *)a2 && v11 == v12;
  if (v13
    || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v11, *(void *)a2, v12, 0LL) & 1) != 0))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    BOOL v19 = v15 == v17 && v16 == v18;
    if (v19 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) != 0))
    {
      if ((uint64_t v20 = *(void *)(a1 + 32),
            uint64_t v21 = *(void *)(a1 + 40),
            uint64_t v22 = *(void *)(a2 + 32),
            uint64_t v23 = *(void *)(a2 + 40),
            v20 == v22)
        && v21 == v23
        || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0LL) & 1) != 0))
      {
        if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
        {
          uint64_t v24 = *(void *)(a1 + 56);
          uint64_t v25 = *(void *)(a1 + 64);
          uint64_t v26 = *(void *)(a2 + 56);
          uint64_t v27 = *(void *)(a2 + 64);
          if (v24 == v26 && v25 == v27
            || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0LL) & 1) != 0))
          {
            uint64_t v28 = *(void *)(a1 + 72);
            uint64_t v29 = *(void *)(a1 + 80);
            uint64_t v30 = *(void *)(a2 + 72);
            uint64_t v31 = *(void *)(a2 + 80);
            if (v28 == v30 && v29 == v31
              || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0LL) & 1) != 0))
            {
              uint64_t v32 = type metadata accessor for UntranscodableItem(0LL);
              uint64_t v33 = a1 + *(int *)(v32 + 40);
              unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
              v34(v10, v33, v4);
              v34(v8, a2 + *(int *)(v32 + 40), v4);
              uint64_t v35 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
              char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v35);
              char v36 = *(void (**)(char *, uint64_t))(v5 + 8);
              v36(v8, v4);
              v36(v10, v4);
            }
          }
        }

        else
        {
          char v14 = 0;
        }
      }
    }
  }

  return v14 & 1;
}

uint64_t _s22CloudKitImplementation14UploadResourceV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((_BYTE *)a2 + 8) != 1)
  {
    if (v11 == v12) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  if (!v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
LABEL_19:
    char v18 = 0;
    return v18 & 1;
  }

  if (v12 != 1)
  {
    if (v11 == 2) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

  if (v11 != 1) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v15 = a2[2];
  uint64_t v16 = a2[3];
  BOOL v17 = v13 == v15 && v14 == v16;
  if (v17 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0LL) & 1) != 0))
  {
    uint64_t v19 = a2[4];
    uint64_t v20 = *((unsigned __int8 *)a2 + 40);
    uint64_t v21 = Goldilocks_ExitType.rawValue.getter(a1[4], *((unsigned __int8 *)a1 + 40));
    if (v21 != Goldilocks_ExitType.rawValue.getter(v19, v20) || (sub_1000FF828(a1[6], a2[6]) & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v22 = type metadata accessor for UploadResource(0LL);
    uint64_t v23 = (uint64_t)a1 + *(int *)(v22 + 32);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24(v10, v23, v4);
    v24(v8, (uint64_t)a2 + *(int *)(v22 + 32), v4);
    uint64_t v25 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v25);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v8, v4);
    v26(v10, v4);
  }

  return v18 & 1;
}

uint64_t _s22CloudKitImplementation13ResetIntervalV2eeoiySbAC_ACtFZ_0(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*a1 == *(void *)a2 && a1[1] == *((void *)a2 + 1) && (sub_1000FF828(a1[2], *((void *)a2 + 2)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for ResetInterval(0LL);
    uint64_t v12 = (char *)a1 + *(int *)(v11 + 28);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 28)], v4);
    uint64_t v14 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t _s22CloudKitImplementation12ResponseItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v64 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  int v63 = &v59[-v7];
  uint64_t v8 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v67 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v66 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = sub_1000BED3C(&qword_1002938E0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v59[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = sub_1000BED3C(&qword_100291F58);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = &v59[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v59[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v59[-v20];
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v23 = *(void *)(a2 + 8);
  if (*(void *)a1 != *(void *)a2 || v22 != v23)
  {
    char v24 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)a1, v22, *(void *)a2, v23, 0LL) & 1) == 0) {
      return v24 & 1;
    }
  }

  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v28 = *(void *)(a2 + 24);
  if (v25 != v27 || v26 != v28)
  {
    char v24 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0LL) & 1) == 0) {
      return v24 & 1;
    }
  }

  uint64_t v29 = *(void *)(a1 + 32);
  uint64_t v30 = *(void *)(a1 + 40);
  uint64_t v31 = *(void *)(a2 + 32);
  uint64_t v32 = *(void *)(a2 + 40);
  if (v29 != v31 || v30 != v32)
  {
    char v24 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0LL) & 1) == 0) {
      return v24 & 1;
    }
  }

  uint64_t v62 = v4;
  uint64_t v33 = type metadata accessor for ResponseItem(0LL);
  sub_1000CE7B4(a1 + *(int *)(v33 + 52), (uint64_t)v21, &qword_100291F58);
  uint64_t v61 = v33;
  sub_1000CE7B4(a2 + *(int *)(v33 + 52), (uint64_t)v19, &qword_100291F58);
  uint64_t v34 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1000CE7B4((uint64_t)v21, (uint64_t)v12, &qword_100291F58);
  sub_1000CE7B4((uint64_t)v19, v34, &qword_100291F58);
  uint64_t v35 = v67;
  char v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  if (v36((uint64_t)v12, 1LL, v8) == 1)
  {
    sub_1000CEDAC((uint64_t)v19, &qword_100291F58);
    sub_1000CEDAC((uint64_t)v21, &qword_100291F58);
    if (v36(v34, 1LL, v8) == 1)
    {
      sub_1000CEDAC((uint64_t)v12, &qword_100291F58);
      goto LABEL_17;
    }

uint64_t _s22CloudKitImplementation11RequestItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for RequestItem(0LL) + 20);
  uint64_t v12 = *(void **)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == (void *)v13
    || (swift_retain(*(void *)(a1 + v11)),
        swift_retain(v13),
        char v14 = sub_1000E0AB4(v12, v13),
        swift_release(v13),
        swift_release(v12),
        (v14 & 1) != 0))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    uint64_t v16 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v16);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }

  else
  {
    char v17 = 0;
  }

  return v17 & 1;
}

uint64_t sub_1000E5C5C(uint64_t a1)
{
  uint64_t v3 = sub_1000BED3C(&qword_100292888);
  __chkstk_darwin(v3);
  uint64_t v86 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000BED3C(&qword_100292870);
  __chkstk_darwin(v5);
  uint64_t v80 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0xE000000000000000LL;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0xE000000000000000LL;
  *(void *)(v1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(v1 + 56) = 0xE000000000000000LL;
  *(void *)(v1 + 64) = 0LL;
  *(void *)(v1 + 72) = 0xE000000000000000LL;
  *(void *)(v1 + 80) = 0LL;
  uint64_t v74 = (void *)(v1 + 80);
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = 0xE000000000000000LL;
  *(void *)(v1 + 96) = 0LL;
  uint64_t v75 = (void *)(v1 + 96);
  *(_BYTE *)(v1 + 104) = 1;
  *(void *)(v1 + 112) = 0LL;
  uint64_t v76 = (void *)(v1 + 112);
  *(void *)(v1 + 120) = 0xE000000000000000LL;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  *(void *)(v1 + 12_Block_object_dispose((const void *)(v1 - 152), 8) = &_swiftEmptyArrayStorage;
  uint64_t v77 = (uint64_t *)(v1 + 128);
  uint64_t v78 = v7;
  uint64_t v8 = type metadata accessor for CMTimeRange(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v79 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  *(void *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint) = &_swiftEmptyArrayStorage;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v81 = v1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  uint64_t v10 = type metadata accessor for VideoHEVCProfileTierLevelInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  char v82 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount) = 0;
  uint64_t v83 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount) = 0;
  int v84 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount) = 0;
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  uint64_t v85 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  void *v11 = 0LL;
  v11[1] = 0xE000000000000000LL;
  uint64_t v12 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  int v87 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  *uint64_t v12 = 0LL;
  v12[1] = 0xE000000000000000LL;
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  uint64_t v88 = (void *)(v1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  *uint64_t v13 = 0LL;
  v13[1] = 0xE000000000000000LL;
  uint64_t v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay) = 0;
  swift_beginAccess(a1 + 16, v123, 0LL, 0LL);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  swift_beginAccess(v1 + 16, v122, 1LL, 0LL);
  uint64_t v16 = *(void *)(v1 + 24);
  *(void *)(v1 + 16) = v15;
  *(void *)(v1 + 24) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v16);
  swift_beginAccess(a1 + 32, v121, 0LL, 0LL);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  swift_beginAccess(v1 + 32, v120, 1LL, 0LL);
  uint64_t v19 = *(void *)(v1 + 40);
  *(void *)(v1 + 32) = v18;
  *(void *)(v1 + 40) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v19);
  swift_beginAccess(a1 + 48, v119, 0LL, 0LL);
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  swift_beginAccess(v1 + 48, v118, 1LL, 0LL);
  uint64_t v22 = *(void *)(v1 + 56);
  *(void *)(v1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v21;
  *(void *)(v1 + 56) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v22);
  swift_beginAccess(a1 + 64, v117, 0LL, 0LL);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  swift_beginAccess(v1 + 64, &v116, 1LL, 0LL);
  uint64_t v25 = *(void *)(v1 + 72);
  *(void *)(v1 + 64) = v24;
  *(void *)(v1 + 72) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v25);
  swift_beginAccess(a1 + 80, &v115, 0LL, 0LL);
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v26 = *(void *)(a1 + 88);
  uint64_t v28 = v74;
  swift_beginAccess(v74, &v114, 1LL, 0LL);
  uint64_t v29 = *(void *)(v1 + 88);
  *uint64_t v28 = v27;
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v29);
  swift_beginAccess(a1 + 96, &v113, 0LL, 0LL);
  uint64_t v30 = *(void *)(a1 + 96);
  LOBYTE(v29) = *(_BYTE *)(a1 + 104);
  uint64_t v31 = v75;
  swift_beginAccess(v75, &v112, 1LL, 0LL);
  *uint64_t v31 = v30;
  *(_BYTE *)(v1 + 104) = v29;
  swift_beginAccess(a1 + 112, &v111, 0LL, 0LL);
  uint64_t v33 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v34 = v76;
  swift_beginAccess(v76, &v110, 1LL, 0LL);
  uint64_t v35 = *(void *)(v1 + 120);
  *uint64_t v34 = v33;
  *(void *)(v1 + 120) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v35);
  swift_beginAccess(a1 + 128, &v109, 0LL, 0LL);
  uint64_t v36 = *(void *)(a1 + 128);
  uint64_t v37 = v77;
  swift_beginAccess(v77, &v108, 1LL, 0LL);
  uint64_t v38 = *v37;
  *uint64_t v37 = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = a1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__timeRange,  &v107,  0LL,  0LL);
  uint64_t v40 = v80;
  sub_1000CE7B4(v39, v80, &qword_100292870);
  uint64_t v41 = v78;
  swift_beginAccess(v78, v106, 33LL, 0LL);
  sub_1000E645C(v40, v41, &qword_100292870);
  swift_endAccess(v106);
  uint64_t v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__mediaTypeHint,  v106,  0LL,  0LL);
  uint64_t v43 = *v42;
  uint64_t v44 = v79;
  swift_beginAccess(v79, &v105, 1LL, 0LL);
  uint64_t v45 = *v44;
  *uint64_t v44 = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = a1
      + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation;
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__videoProfileTierLevelInformation,  &v104,  0LL,  0LL);
  uint64_t v47 = v86;
  sub_1000CE7B4(v46, v86, &qword_100292888);
  uint64_t v48 = v81;
  swift_beginAccess(v81, v103, 33LL, 0LL);
  sub_1000E645C(v47, v48, &qword_100292888);
  swift_endAccess(v103);
  uint64_t v49 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackChannelCount,  v103,  0LL,  0LL);
  LODWORD(v49) = *v49;
  uint64_t v50 = v82;
  swift_beginAccess(v82, &v102, 1LL, 0LL);
  *uint64_t v50 = (_DWORD)v49;
  uint64_t v51 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackHoachannelCount,  &v101,  0LL,  0LL);
  LODWORD(v51) = *v51;
  uint64_t v52 = v83;
  swift_beginAccess(v83, &v100, 1LL, 0LL);
  _DWORD *v52 = (_DWORD)v51;
  char v53 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackBedchannelCount,  &v99,  0LL,  0LL);
  LODWORD(v53) = *v53;
  uint64_t v54 = v84;
  swift_beginAccess(v84, &v98, 1LL, 0LL);
  _DWORD *v54 = (_DWORD)v53;
  uint64_t v55 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraMake,  &v97,  0LL,  0LL);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  uint64_t v58 = v85;
  swift_beginAccess(v85, &v96, 1LL, 0LL);
  uint64_t v59 = v58[1];
  *uint64_t v58 = v57;
  v58[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v59);
  int v60 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__cameraModel,  &v95,  0LL,  0LL);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  int v63 = v87;
  swift_beginAccess(v87, &v94, 1LL, 0LL);
  uint64_t v64 = v63[1];
  *int v63 = v62;
  v63[1] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v64);
  uint64_t v65 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription);
  swift_beginAccess( a1 + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__apacAudioTrackCodecProfileLevelDescription,  &v93,  0LL,  0LL);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  uint64_t v68 = v88;
  swift_beginAccess(v88, &v92, 1LL, 0LL);
  uint64_t v69 = v68[1];
  void *v68 = v67;
  v68[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v69);
  char v70 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV22CloudKitImplementation11RequestItemP33_E8150762139FE2BD05EAE09B6F23423B13_StorageClass__clientSupportsProMotionDisplay);
  swift_beginAccess(v70, &v91, 0LL, 0LL);
  LOBYTE(v70) = *v70;
  uint64_t v71 = v89;
  swift_beginAccess(v89, &v90, 1LL, 0LL);
  *uint64_t v71 = (_BYTE)v70;
  return v1;
}

uint64_t type metadata accessor for VideoHEVCProfileTierLevelInformation(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292FA8, (uint64_t)&nominal type descriptor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000E6418(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000BED3C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E645C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000BED3C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ResponseItem(uint64_t a1)
{
  return sub_1000BCF80(a1, (uint64_t *)&unk_1002930D0, (uint64_t)&nominal type descriptor for ResponseItem);
}

uint64_t type metadata accessor for UploadResourcesRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002932C0, (uint64_t)&nominal type descriptor for UploadResourcesRequest);
}

uint64_t type metadata accessor for UploadResource(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293220, (uint64_t)&nominal type descriptor for UploadResource);
}

  ;
}

uint64_t sub_1000E64F0(uint64_t result)
{
  if (result > 200)
  {
    if (result == 201)
    {
      return 6LL;
    }

    else if (result == 301)
    {
      return 7LL;
    }
  }

  else
  {
    switch(result)
    {
      case 'e':
        uint64_t result = 1LL;
        break;
      case 'f':
        uint64_t result = 2LL;
        break;
      case 'g':
        uint64_t result = 3LL;
        break;
      case 'h':
        uint64_t result = 4LL;
        break;
      case 'i':
        uint64_t result = 5LL;
        break;
      default:
        return result;
    }
  }

  return result;
}

uint64_t sub_1000E65B4(uint64_t result)
{
  if (result > 101)
  {
    if (result == 102)
    {
      return 2LL;
    }

    else if (result == 201)
    {
      return 3LL;
    }
  }

  else if (result == 101)
  {
    return 1LL;
  }

  return result;
}

uint64_t type metadata accessor for ResourceAnalyzeRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292C18, (uint64_t)&nominal type descriptor for ResourceAnalyzeRequest);
}

uint64_t type metadata accessor for ResourceAnalyzeResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292CA8, (uint64_t)&nominal type descriptor for ResourceAnalyzeResponse);
}

uint64_t type metadata accessor for ResourceDownloadRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292D48, (uint64_t)&nominal type descriptor for ResourceDownloadRequest);
}

uint64_t type metadata accessor for ResourceDownloadResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292DD8, (uint64_t)&nominal type descriptor for ResourceDownloadResponse);
}

uint64_t type metadata accessor for ResourceStreamRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292E78, (uint64_t)&nominal type descriptor for ResourceStreamRequest);
}

uint64_t type metadata accessor for ResourceStreamResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100292F08, (uint64_t)&nominal type descriptor for ResourceStreamResponse);
}

uint64_t type metadata accessor for ResetInterval(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293188, (uint64_t)&nominal type descriptor for ResetInterval);
}

uint64_t type metadata accessor for UploadResourcesResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293350, (uint64_t)&nominal type descriptor for UploadResourcesResponse);
}

uint64_t type metadata accessor for UntranscodableItem(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_1002933E8, (uint64_t)&nominal type descriptor for UntranscodableItem);
}

uint64_t type metadata accessor for UntranscodableRequest(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293490, (uint64_t)&nominal type descriptor for UntranscodableRequest);
}

uint64_t type metadata accessor for UntranscodableResponse(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293520, (uint64_t)&nominal type descriptor for UntranscodableResponse);
}

unint64_t sub_1000E66F4()
{
  unint64_t result = qword_1002928D8;
  if (!qword_1002928D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BatchErrorCode,  &type metadata for BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002928D8);
  }

  return result;
}

unint64_t sub_1000E6738()
{
  unint64_t result = qword_100292920;
  if (!qword_100292920)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ItemErrorCode, &type metadata for ItemErrorCode);
    atomic_store(result, (unint64_t *)&qword_100292920);
  }

  return result;
}

unint64_t sub_1000E677C()
{
  unint64_t result = qword_100292928;
  if (!qword_100292928)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DownloadType, &type metadata for DownloadType);
    atomic_store(result, (unint64_t *)&qword_100292928);
  }

  return result;
}

unint64_t sub_1000E67C0()
{
  unint64_t result = qword_100292940;
  if (!qword_100292940)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResourceType, &type metadata for ResourceType);
    atomic_store(result, (unint64_t *)&qword_100292940);
  }

  return result;
}

unint64_t sub_1000E6804()
{
  unint64_t result = qword_100292950;
  if (!qword_100292950)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UploadRecordType,  &type metadata for UploadRecordType);
    atomic_store(result, (unint64_t *)&qword_100292950);
  }

  return result;
}

unint64_t sub_1000E684C()
{
  unint64_t result = qword_100292998;
  if (!qword_100292998)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DownloadType, &type metadata for DownloadType);
    atomic_store(result, (unint64_t *)&qword_100292998);
  }

  return result;
}

unint64_t sub_1000E6894()
{
  unint64_t result = qword_1002929A0;
  if (!qword_1002929A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DownloadType, &type metadata for DownloadType);
    atomic_store(result, (unint64_t *)&qword_1002929A0);
  }

  return result;
}

unint64_t sub_1000E68DC()
{
  unint64_t result = qword_1002929A8;
  if (!qword_1002929A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DownloadType, &type metadata for DownloadType);
    atomic_store(result, (unint64_t *)&qword_1002929A8);
  }

  return result;
}

uint64_t sub_1000E6920()
{
  return sub_1000BDAD8(&qword_1002929B0, &qword_1002929B8);
}

unint64_t sub_1000E6948()
{
  unint64_t result = qword_1002929C0;
  if (!qword_1002929C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ItemErrorCode, &type metadata for ItemErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002929C0);
  }

  return result;
}

unint64_t sub_1000E6990()
{
  unint64_t result = qword_1002929C8;
  if (!qword_1002929C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ItemErrorCode, &type metadata for ItemErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002929C8);
  }

  return result;
}

unint64_t sub_1000E69D8()
{
  unint64_t result = qword_1002929D0;
  if (!qword_1002929D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ItemErrorCode, &type metadata for ItemErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002929D0);
  }

  return result;
}

uint64_t sub_1000E6A1C()
{
  return sub_1000BDAD8(&qword_1002929D8, &qword_1002929E0);
}

unint64_t sub_1000E6A44()
{
  unint64_t result = qword_1002929E8;
  if (!qword_1002929E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BatchErrorCode,  &type metadata for BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002929E8);
  }

  return result;
}

unint64_t sub_1000E6A8C()
{
  unint64_t result = qword_1002929F0;
  if (!qword_1002929F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BatchErrorCode,  &type metadata for BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002929F0);
  }

  return result;
}

unint64_t sub_1000E6AD4()
{
  unint64_t result = qword_1002929F8;
  if (!qword_1002929F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BatchErrorCode,  &type metadata for BatchErrorCode);
    atomic_store(result, (unint64_t *)&qword_1002929F8);
  }

  return result;
}

uint64_t sub_1000E6B18()
{
  return sub_1000BDAD8(&qword_100292A00, &qword_100292A08);
}

unint64_t sub_1000E6B40()
{
  unint64_t result = qword_100292A10;
  if (!qword_100292A10)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResourceType, &type metadata for ResourceType);
    atomic_store(result, (unint64_t *)&qword_100292A10);
  }

  return result;
}

unint64_t sub_1000E6B88()
{
  unint64_t result = qword_100292A18;
  if (!qword_100292A18)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResourceType, &type metadata for ResourceType);
    atomic_store(result, (unint64_t *)&qword_100292A18);
  }

  return result;
}

unint64_t sub_1000E6BD0()
{
  unint64_t result = qword_100292A20;
  if (!qword_100292A20)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ResourceType, &type metadata for ResourceType);
    atomic_store(result, (unint64_t *)&qword_100292A20);
  }

  return result;
}

uint64_t sub_1000E6C14()
{
  return sub_1000BDAD8(&qword_100292A28, &qword_100292A30);
}

unint64_t sub_1000E6C3C()
{
  unint64_t result = qword_100292A38;
  if (!qword_100292A38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UploadRecordType,  &type metadata for UploadRecordType);
    atomic_store(result, (unint64_t *)&qword_100292A38);
  }

  return result;
}

unint64_t sub_1000E6C84()
{
  unint64_t result = qword_100292A40;
  if (!qword_100292A40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UploadRecordType,  &type metadata for UploadRecordType);
    atomic_store(result, (unint64_t *)&qword_100292A40);
  }

  return result;
}

unint64_t sub_1000E6CCC()
{
  unint64_t result = qword_100292A48;
  if (!qword_100292A48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UploadRecordType,  &type metadata for UploadRecordType);
    atomic_store(result, (unint64_t *)&qword_100292A48);
  }

  return result;
}

uint64_t sub_1000E6D10()
{
  return sub_1000BDAD8(&qword_100292A50, &qword_100292A58);
}

unint64_t sub_1000E6D38()
{
  unint64_t result = qword_100292A60;
  if (!qword_100292A60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RequestItem.MediaTypeHint,  &type metadata for RequestItem.MediaTypeHint);
    atomic_store(result, (unint64_t *)&qword_100292A60);
  }

  return result;
}

unint64_t sub_1000E6D80()
{
  unint64_t result = qword_100292A68;
  if (!qword_100292A68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RequestItem.MediaTypeHint,  &type metadata for RequestItem.MediaTypeHint);
    atomic_store(result, (unint64_t *)&qword_100292A68);
  }

  return result;
}

unint64_t sub_1000E6DC8()
{
  unint64_t result = qword_100292A70;
  if (!qword_100292A70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RequestItem.MediaTypeHint,  &type metadata for RequestItem.MediaTypeHint);
    atomic_store(result, (unint64_t *)&qword_100292A70);
  }

  return result;
}

uint64_t sub_1000E6E0C()
{
  return sub_1000BDAD8(&qword_100292A78, &qword_100292A80);
}

uint64_t sub_1000E6E30()
{
  return sub_1000BD35C( &qword_100292A88,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
}

uint64_t sub_1000E6E5C()
{
  return sub_1000BD35C( &qword_100292A90,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
}

uint64_t sub_1000E6E88()
{
  return sub_1000BD35C( &qword_1002928D0,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
}

uint64_t sub_1000E6EB4()
{
  return sub_1000BD35C( &qword_100292A98,  type metadata accessor for ResourceAnalyzeRequest,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeRequest);
}

uint64_t sub_1000E6EE0()
{
  return sub_1000BD35C( &qword_100292AA0,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
}

uint64_t sub_1000E6F0C()
{
  return sub_1000BD35C( &qword_100292AA8,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
}

uint64_t sub_1000E6F38()
{
  return sub_1000BD35C( &qword_1002928E8,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
}

uint64_t sub_1000E6F64()
{
  return sub_1000BD35C( &qword_100292AB0,  type metadata accessor for ResourceAnalyzeResponse,  (uint64_t)&protocol conformance descriptor for ResourceAnalyzeResponse);
}

uint64_t sub_1000E6F90()
{
  return sub_1000BD35C( &qword_100292AB8,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
}

uint64_t sub_1000E6FBC()
{
  return sub_1000BD35C( &qword_100291F48,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
}

uint64_t sub_1000E6FE8()
{
  return sub_1000BD35C( &qword_1002928F0,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
}

uint64_t sub_1000E7014()
{
  return sub_1000BD35C( &qword_100292AC0,  type metadata accessor for ResourceDownloadRequest,  (uint64_t)&protocol conformance descriptor for ResourceDownloadRequest);
}

uint64_t sub_1000E7040()
{
  return sub_1000BD35C( &qword_100292AC8,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
}

uint64_t sub_1000E706C()
{
  return sub_1000BD35C( &qword_100291F78,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
}

uint64_t sub_1000E7098()
{
  return sub_1000BD35C( &qword_1002928F8,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
}

uint64_t sub_1000E70C4()
{
  return sub_1000BD35C( &qword_100292AD0,  type metadata accessor for ResourceDownloadResponse,  (uint64_t)&protocol conformance descriptor for ResourceDownloadResponse);
}

uint64_t sub_1000E70F0()
{
  return sub_1000BD35C( &qword_100292AD8,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
}

uint64_t sub_1000E711C()
{
  return sub_1000BD35C( &qword_100292000,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
}

uint64_t sub_1000E7148()
{
  return sub_1000BD35C( &qword_100292900,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
}

uint64_t sub_1000E7174()
{
  return sub_1000BD35C( &qword_100292AE0,  type metadata accessor for ResourceStreamRequest,  (uint64_t)&protocol conformance descriptor for ResourceStreamRequest);
}

uint64_t sub_1000E71A0()
{
  return sub_1000BD35C( &qword_100292AE8,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
}

uint64_t sub_1000E71CC()
{
  return sub_1000BD35C( &qword_100292018,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
}

uint64_t sub_1000E71F8()
{
  return sub_1000BD35C( &qword_100292908,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
}

uint64_t sub_1000E7224()
{
  return sub_1000BD35C( &qword_100292AF0,  type metadata accessor for ResourceStreamResponse,  (uint64_t)&protocol conformance descriptor for ResourceStreamResponse);
}

uint64_t sub_1000E7250()
{
  return sub_1000BD35C( &qword_100292AF8,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000E727C()
{
  return sub_1000BD35C( &qword_100292020,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000E72A8()
{
  return sub_1000BD35C( &qword_100292910,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000E72D4()
{
  return sub_1000BD35C( &qword_100292B00,  type metadata accessor for VideoHEVCProfileTierLevelInformation,  (uint64_t)&protocol conformance descriptor for VideoHEVCProfileTierLevelInformation);
}

uint64_t sub_1000E7300()
{
  return sub_1000BD35C( &qword_100292B08,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
}

uint64_t sub_1000E732C()
{
  return sub_1000BD35C( &qword_100291FA8,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
}

uint64_t sub_1000E7358()
{
  return sub_1000BD35C( &qword_100292918,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
}

uint64_t sub_1000E7384()
{
  return sub_1000BD35C( &qword_100292B10,  type metadata accessor for RequestItem,  (uint64_t)&protocol conformance descriptor for RequestItem);
}

uint64_t sub_1000E73B0()
{
  return sub_1000BD35C( &qword_100292B18,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
}

uint64_t sub_1000E73DC()
{
  return sub_1000BD35C( &qword_1002928E0,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
}

uint64_t sub_1000E7408()
{
  return sub_1000BD35C( &qword_100292938,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
}

uint64_t sub_1000E7434()
{
  return sub_1000BD35C( &qword_100292B20,  type metadata accessor for ResponseItem,  (uint64_t)&protocol conformance descriptor for ResponseItem);
}

uint64_t sub_1000E7460()
{
  return sub_1000BD35C( &qword_100292B28,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
}

uint64_t sub_1000E748C()
{
  return sub_1000BD35C( &qword_100292B30,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
}

uint64_t sub_1000E74B8()
{
  return sub_1000BD35C( &qword_100292948,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
}

uint64_t sub_1000E74E4()
{
  return sub_1000BD35C( &qword_100292B38,  type metadata accessor for ResetInterval,  (uint64_t)&protocol conformance descriptor for ResetInterval);
}

uint64_t sub_1000E7510()
{
  return sub_1000BD35C( &qword_100292B40,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
}

uint64_t sub_1000E753C()
{
  return sub_1000BD35C( &qword_100292960,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
}

uint64_t sub_1000E7568()
{
  return sub_1000BD35C( &qword_100292958,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
}

uint64_t sub_1000E7594()
{
  return sub_1000BD35C( &qword_100292B48,  type metadata accessor for UploadResource,  (uint64_t)&protocol conformance descriptor for UploadResource);
}

uint64_t sub_1000E75C0()
{
  return sub_1000BD35C( &qword_100292B50,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
}

uint64_t sub_1000E75EC()
{
  return sub_1000BD35C( &qword_100292B58,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
}

uint64_t sub_1000E7618()
{
  return sub_1000BD35C( &qword_100292968,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
}

uint64_t sub_1000E7644()
{
  return sub_1000BD35C( &qword_100292B60,  type metadata accessor for UploadResourcesRequest,  (uint64_t)&protocol conformance descriptor for UploadResourcesRequest);
}

uint64_t sub_1000E7670()
{
  return sub_1000BD35C( &qword_100292B68,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
}

uint64_t sub_1000E769C()
{
  return sub_1000BD35C( &qword_100292B70,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
}

uint64_t sub_1000E76C8()
{
  return sub_1000BD35C( &qword_100292970,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
}

uint64_t sub_1000E76F4()
{
  return sub_1000BD35C( &qword_100292B78,  type metadata accessor for UploadResourcesResponse,  (uint64_t)&protocol conformance descriptor for UploadResourcesResponse);
}

uint64_t sub_1000E7720()
{
  return sub_1000BD35C( &qword_100292B80,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
}

uint64_t sub_1000E774C()
{
  return sub_1000BD35C( &qword_100292980,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
}

uint64_t sub_1000E7778()
{
  return sub_1000BD35C( &qword_100292978,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
}

uint64_t sub_1000E77A4()
{
  return sub_1000BD35C( &qword_100292B88,  type metadata accessor for UntranscodableItem,  (uint64_t)&protocol conformance descriptor for UntranscodableItem);
}

uint64_t sub_1000E77D0()
{
  return sub_1000BD35C( &qword_100292B90,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
}

uint64_t sub_1000E77FC()
{
  return sub_1000BD35C( &qword_100292B98,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
}

uint64_t sub_1000E7828()
{
  return sub_1000BD35C( &qword_100292988,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
}

uint64_t sub_1000E7854()
{
  return sub_1000BD35C( &qword_100292BA0,  type metadata accessor for UntranscodableRequest,  (uint64_t)&protocol conformance descriptor for UntranscodableRequest);
}

uint64_t sub_1000E7880()
{
  return sub_1000BD35C( &qword_100292BA8,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
}

uint64_t sub_1000E78AC()
{
  return sub_1000BD35C( &qword_100292BB0,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
}

uint64_t sub_1000E78D8()
{
  return sub_1000BD35C( &qword_100292990,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
}

uint64_t sub_1000E7904()
{
  return sub_1000BD35C( &qword_100292BB8,  type metadata accessor for UntranscodableResponse,  (uint64_t)&protocol conformance descriptor for UntranscodableResponse);
}

ValueMetadata *type metadata accessor for DownloadType()
{
  return &type metadata for DownloadType;
}

ValueMetadata *type metadata accessor for ItemErrorCode()
{
  return &type metadata for ItemErrorCode;
}

ValueMetadata *type metadata accessor for BatchErrorCode()
{
  return &type metadata for BatchErrorCode;
}

ValueMetadata *type metadata accessor for ResourceType()
{
  return &type metadata for ResourceType;
}

ValueMetadata *type metadata accessor for UploadRecordType()
{
  return &type metadata for UploadRecordType;
}

uint64_t getEnumTagSinglePayload for ResourceAnalyzeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E79A4);
}

uint64_t storeEnumTagSinglePayload for ResourceAnalyzeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E79B4);
}

uint64_t getEnumTagSinglePayload for ResourceAnalyzeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E79E0);
}

uint64_t storeEnumTagSinglePayload for ResourceAnalyzeResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E79F0);
}

uint64_t sub_1000E79F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E98FC( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)"\t",  (uint64_t)&unk_1002167B0,  (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t getEnumTagSinglePayload for ResourceDownloadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7A2C);
}

uint64_t storeEnumTagSinglePayload for ResourceDownloadRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7A3C);
}

uint64_t getEnumTagSinglePayload for ResourceDownloadResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7A4C);
}

uint64_t storeEnumTagSinglePayload for ResourceDownloadResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7A5C);
}

uint64_t getEnumTagSinglePayload for ResourceStreamRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7A6C);
}

uint64_t storeEnumTagSinglePayload for ResourceStreamRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7A7C);
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v5;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwxx_0(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwcp_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v6 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (uint64_t)a2 + v7;
  uint64_t v9 = a1 + v7;
  *(void *)(a1 + 40) = a2[5];
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v9, v8, v10);
  return a1;
}

uint64_t *_s22CloudKitImplementation23ResourceAnalyzeResponseVwca_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v8;
  a1[3] = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a1[4];
  a1[4] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  a1[5] = a2[5];
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  return a1;
}

uint64_t _s22CloudKitImplementation23ResourceAnalyzeResponseVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *_s22CloudKitImplementation23ResourceAnalyzeResponseVwta_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  a1[5] = a2[5];
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResourceStreamResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7DF0);
}

uint64_t sub_1000E7DF4(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 32)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for ResourceStreamResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7E7C);
}

char *sub_1000E7E80(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 32)],  a2,  a2,  v7);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for VideoHEVCProfileTierLevelInformation( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t destroy for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t initializeWithCopy for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for VideoHEVCProfileTierLevelInformation(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoHEVCProfileTierLevelInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E8160);
}

uint64_t sub_1000E8160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for VideoHEVCProfileTierLevelInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E81AC);
}

uint64_t sub_1000E81AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000E81F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9D74( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.Int32 + 64,  (uint64_t)&value witness table for Builtin.Int32 + 64);
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v_Block_object_dispose((const void *)(v1 - 152), 8) = v9;
  }

  swift_retain(v9);
  return a1;
}

uint64_t destroy for RequestItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t initializeWithCopy for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t initializeWithTake for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E8468);
}

uint64_t sub_1000E8468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E84F0);
}

uint64_t sub_1000E84F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000E8568(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for RequestItem.MediaTypeHint()
{
  return &type metadata for RequestItem.MediaTypeHint;
}

void *initializeBufferWithCopyOfBuffer for ResponseItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v24);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[6];
    uint64_t v11 = a2[7];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    uint64_t v12 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    uint64_t v13 = a2[12];
    *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = a2[11];
    *(void *)(a1 + 96) = v13;
    uint64_t v14 = *(int *)(a3 + 48);
    uint64_t v26 = a1 + v14;
    uint64_t v15 = (uint64_t)a2 + v14;
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v10;
    *(void *)(a1 + 56) = v11;
    uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v17(v26, v15, v16);
    uint64_t v18 = *(int *)(a3 + 52);
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Ckcode_RecordTransport(0LL);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
    {
      uint64_t v23 = sub_1000BED3C(&qword_100291F58);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
    }
  }

  return v4;
}

uint64_t destroy for ResponseItem(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 52);
  uint64_t v7 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v16(v13, v14, v15);
  uint64_t v17 = *(int *)(a3 + 52);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
  {
    uint64_t v22 = sub_1000BED3C(&qword_100291F58);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  return a1;
}

uint64_t assignWithCopy for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v15;
  uint64_t v16 = *(int *)(a3 + 48);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  uint64_t v20 = *(int *)(a3 + 52);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v1_Block_object_dispose((const void *)(v1 - 152), 8) = v25(v21, 1LL, v23);
  int v26 = v25(v22, 1LL, v23);
  if (!(_DWORD)v18)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }

  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_1000BED3C(&qword_100291F58);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  return a1;
}

uint64_t initializeWithTake for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 32);
  __int128 v8 = *(_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(int *)(a3 + 48);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v8;
  uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 52);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_1000BED3C(&qword_100291F58);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  return a1;
}

uint64_t assignWithTake for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 96);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v15;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  uint64_t v16 = *(int *)(a3 + 48);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  uint64_t v20 = *(int *)(a3 + 52);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Ckcode_RecordTransport(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v1_Block_object_dispose((const void *)(v1 - 152), 8) = v25(v21, 1LL, v23);
  int v26 = v25(v22, 1LL, v23);
  if (!(_DWORD)v18)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }

  if (v26)
  {
LABEL_6:
    uint64_t v27 = sub_1000BED3C(&qword_100291F58);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E8E3C);
}

uint64_t sub_1000E8E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 48);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100291F58);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 52);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for ResponseItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E8EEC);
}

uint64_t sub_1000E8EEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 48);
    }

    else
    {
      uint64_t v10 = sub_1000BED3C(&qword_100291F58);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 52);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000E8F8C(uint64_t a1)
{
  v6[0] = &unk_1002167B0;
  v6[1] = &unk_1002167B0;
  v6[2] = &unk_1002167B0;
  void v6[3] = &unk_1002167B0;
  void v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  void v6[5] = "\t";
  v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[7] = "\t";
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v6[8] = *(void *)(v2 - 8) + 64LL;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_1002930E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Ckcode_RecordTransport);
    if (v5 <= 0x3F)
    {
      void v6[9] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 10LL, v6, a1 + 16);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for ResetInterval(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[2];
    a1[2] = v5;
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for ResetInterval(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for ResetInterval(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9318);
}

uint64_t sub_1000E9318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for ResetInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E93A0);
}

uint64_t sub_1000E93A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000E9414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9D74( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.Int64 + 64,  (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

void *initializeBufferWithCopyOfBuffer for UploadResource(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v12);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_BYTE *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    uint64_t v6 = a2[6];
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v6;
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t destroy for UploadResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v5;
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for UploadResource(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = a2[6];
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E97DC);
}

uint64_t sub_1000E97DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for UploadResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9864);
}

uint64_t sub_1000E9864(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000E98D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E98FC( a1,  a2,  a3,  (uint64_t)"\t",  (uint64_t)&unk_1002167B0,  (uint64_t)"\t",  (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_1000E98FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v10[0] = a4;
  v10[1] = a5;
  void v10[2] = a6;
  v10[3] = a7;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v9 <= 0x3F)
  {
    void v10[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v10, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for UploadResourcesRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9978);
}

uint64_t storeEnumTagSinglePayload for UploadResourcesRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9988);
}

uint64_t *initializeBufferWithCopyOfBuffer for UploadResourcesResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = a2[1];
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for UploadResourcesResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for UploadResourcesResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9C60);
}

uint64_t sub_1000E9C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for UploadResourcesResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9CE8);
}

uint64_t sub_1000E9CE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000E9D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9D74(a1, a2, a3, (uint64_t)&unk_100216810, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_1000E9D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a4;
  v8[1] = a4;
  v8[2] = a5;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v7 <= 0x3F)
  {
    v8[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for UntranscodableItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v3 = *a2;
    unint64_t v3 = (void *)(v15 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v15);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *((_BYTE *)a2 + 48);
    uint64_t v8 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v9 = a2[10];
    uint64_t v10 = *(int *)(a3 + 40);
    uint64_t v11 = (uint64_t)a2 + v10;
    uint64_t v12 = a1 + v10;
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v9;
    uint64_t v13 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v12, v11, v13);
  }

  return v3;
}

uint64_t destroy for UntranscodableItem(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a2 + v9;
  uint64_t v11 = a1 + v9;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v11, v10, v12);
  return a1;
}

uint64_t assignWithCopy for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_BYTE *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA248);
}

uint64_t sub_1000EA248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 40),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for UntranscodableItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA2D0);
}

uint64_t sub_1000EA2D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 152), 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 40),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000EA344(uint64_t a1)
{
  v4[0] = &unk_1002167B0;
  v4[1] = &unk_1002167B0;
  void v4[2] = &unk_1002167B0;
  void v4[3] = &unk_100216810;
  void v4[4] = &unk_1002167B0;
  void v4[5] = &unk_1002167B0;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[6] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for UntranscodableRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA3D4);
}

uint64_t storeEnumTagSinglePayload for UntranscodableRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA3E4);
}

uint64_t *_s22CloudKitImplementation22ResourceAnalyzeRequestVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t _s22CloudKitImplementation22ResourceAnalyzeRequestVwxx_0(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *_s22CloudKitImplementation22ResourceAnalyzeRequestVwcp_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *_s22CloudKitImplementation22ResourceAnalyzeRequestVwca_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

void *_s22CloudKitImplementation22ResourceAnalyzeRequestVwtk_0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *_s22CloudKitImplementation22ResourceAnalyzeRequestVwta_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for UntranscodableResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA680);
}

uint64_t sub_1000EA684(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for UntranscodableResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA70C);
}

char *sub_1000EA710(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000EA784(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000EA7FC()
{
  return type metadata accessor for RequestItem._StorageClass(0LL);
}

void sub_1000EA804(uint64_t a1)
{
  v6[0] = &unk_1002167B0;
  v6[1] = &unk_1002167B0;
  v6[2] = &unk_1002167B0;
  void v6[3] = &unk_1002167B0;
  void v6[4] = &unk_1002167B0;
  void v6[5] = "\t";
  v6[6] = &unk_1002167B0;
  v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000D71B0(319LL, &qword_100293590, type metadata accessor for CMTimeRange);
  if (v3 <= 0x3F)
  {
    v6[8] = *(void *)(v2 - 8) + 64LL;
    void v6[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_1000D71B0( 319LL,  (unint64_t *)&unk_100293598,  type metadata accessor for VideoHEVCProfileTierLevelInformation);
    if (v5 <= 0x3F)
    {
      void v6[10] = *(void *)(v4 - 8) + 64LL;
      v6[11] = (char *)&value witness table for Builtin.Int32 + 64;
      v6[12] = (char *)&value witness table for Builtin.Int32 + 64;
      v6[13] = (char *)&value witness table for Builtin.Int32 + 64;
      v6[14] = &unk_1002167B0;
      v6[15] = &unk_1002167B0;
      v6[16] = &unk_1002167B0;
      v6[17] = &unk_100216810;
      swift_updateClassMetadata2(a1, 256LL, 18LL, v6, a1 + 80);
    }
  }

unint64_t sub_1000EA8FC()
{
  unint64_t result = qword_1002938D8;
  if (!qword_1002938D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RequestItem.MediaTypeHint,  &type metadata for RequestItem.MediaTypeHint);
    atomic_store(result, (unint64_t *)&qword_1002938D8);
  }

  return result;
}

uint64_t CMTime.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  uint64_t v1 = type metadata accessor for CMTime(0LL);
  return UnknownStorage.init()(v1);
}

uint64_t type metadata accessor for CMTime(uint64_t a1)
{
  return sub_1000BCF80(a1, qword_100293998, (uint64_t)&nominal type descriptor for CMTime);
}

uint64_t CMTimeRange.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v4 = a2 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for CMTime(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v7(v4, 1LL, 1LL, v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a2 + *(int *)(v3 + 24), 1LL, 1LL, v5);
}

uint64_t type metadata accessor for CMTimeRange(uint64_t a1)
{
  return sub_1000BCF80(a1, (uint64_t *)&unk_100293A30, (uint64_t)&nominal type descriptor for CMTimeRange);
}

uint64_t CMTimeRange.start.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTimeRange(0LL) + 20);
  sub_1000CEDAC(v3, &qword_100291FB0);
  sub_1000EAAD0(a1, v3);
  uint64_t v4 = type metadata accessor for CMTime(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

uint64_t sub_1000EAAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CMTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t CMTimeRange.duration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTimeRange(0LL) + 24);
  sub_1000CEDAC(v3, &qword_100291FB0);
  sub_1000EAAD0(a1, v3);
  uint64_t v4 = type metadata accessor for CMTime(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

uint64_t CMTime.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTime(0LL) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t CMTime.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CMTime(0LL) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*CMTime.unknownFields.modify())(void, void)
{
  return Goldilocks_ExitType.rawValue.getter;
}

uint64_t CMTimeRange.start.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100291FB0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CMTimeRange(0LL);
  sub_1000EAD0C(v1 + *(int *)(v6 + 20), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for CMTime(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000EAAD0((uint64_t)v5, a1);
  }
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100291FB0);
}

uint64_t sub_1000EAD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BED3C(&qword_100291FB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t (*CMTimeRange.start.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100291FB0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CMTime(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CMTimeRange(0LL) + 20);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000EAD0C(v1 + v10, (uint64_t)v5);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    void v9[2] = 0;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100291FB0);
  }

  else
  {
    sub_1000EAAD0((uint64_t)v5, (uint64_t)v9);
  }

  return sub_1000EAE64;
}

uint64_t sub_1000EAE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CMTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EAEAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CMTime(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL CMTimeRange.hasStart.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100291FB0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CMTimeRange(0LL);
  sub_1000EAD0C(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for CMTime(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100291FB0);
  return v6;
}

Swift::Void __swiftcall CMTimeRange.clearStart()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CMTimeRange(0LL) + 20);
  sub_1000CEDAC(v1, &qword_100291FB0);
  uint64_t v2 = type metadata accessor for CMTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t CMTimeRange.duration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000BED3C(&qword_100291FB0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CMTimeRange(0LL);
  sub_1000EAD0C(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  uint64_t v7 = type metadata accessor for CMTime(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_1000EAAD0((uint64_t)v5, a1);
  }
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  UnknownStorage.init()(v8);
  return sub_1000CEDAC((uint64_t)v5, &qword_100291FB0);
}

uint64_t (*CMTimeRange.duration.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_1000BED3C(&qword_100291FB0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for CMTime(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CMTimeRange(0LL) + 24);
  *((_DWORD *)v3 + 12) = v10;
  sub_1000EAD0C(v1 + v10, (uint64_t)v5);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *(void *)uint64_t v9 = 0LL;
    void v9[2] = 0;
    UnknownStorage.init()(v11);
    sub_1000CEDAC((uint64_t)v5, &qword_100291FB0);
  }

  else
  {
    sub_1000EAAD0((uint64_t)v5, (uint64_t)v9);
  }

  return sub_1000EAE64;
}

void sub_1000EB1D8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 24LL);
  size_t v8 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v9 = **(void **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    sub_1000EAE68(*(void *)(*(void *)a1 + 40LL), (uint64_t)v4);
    sub_1000CEDAC(v9, &qword_100291FB0);
    sub_1000EAAD0((uint64_t)v4, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
    sub_1000EAEAC((uint64_t)v5);
  }

  else
  {
    sub_1000CEDAC(**(void **)a1 + v3, &qword_100291FB0);
    sub_1000EAAD0((uint64_t)v5, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
  }

  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL CMTimeRange.hasDuration.getter()
{
  uint64_t v1 = sub_1000BED3C(&qword_100291FB0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for CMTimeRange(0LL);
  sub_1000EAD0C(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  uint64_t v5 = type metadata accessor for CMTime(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_1000CEDAC((uint64_t)v3, &qword_100291FB0);
  return v6;
}

Swift::Void __swiftcall CMTimeRange.clearDuration()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CMTimeRange(0LL) + 24);
  sub_1000CEDAC(v1, &qword_100291FB0);
  uint64_t v2 = type metadata accessor for CMTime(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

const char *CMTime.protoMessageName.unsafeMutableAddressor()
{
  return "CMTime";
}

uint64_t static CMTime.protoMessageName.getter()
{
  return 0x656D69544D43LL;
}

uint64_t sub_1000EB3E8(uint64_t a1)
{
  return sub_1000EB74C(a1, static CMTime._protobuf_nameMap, (uint64_t)"value", (uint64_t)"timescale", 9LL);
}

uint64_t CMTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291880, (uint64_t)static CMTime._protobuf_nameMap, (uint64_t)sub_1000EB3E8);
}

uint64_t static CMTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_100291880, (uint64_t)static CMTime._protobuf_nameMap, (uint64_t)sub_1000EB3E8, a1);
}

uint64_t CMTime.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)(v3 + 8, a2, a3);
      }

      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3, a2, a3);
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t CMTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)v3
    || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*(void *)v3, 1LL, a2, a3), !v4))
  {
    uint64_t v9 = *(unsigned int *)(v3 + 8);
    if (!(_DWORD)v9
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(v9, 2LL, a2, a3), !v4))
    {
      type metadata accessor for CMTime(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int CMTime.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for CMTime,  &qword_100293908,  (uint64_t)&protocol conformance descriptor for CMTime);
}

uint64_t sub_1000EB5B8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000EB5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMTime.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000EB5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMTime.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000EB604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293A80,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EB654@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_100291880, (uint64_t)static CMTime._protobuf_nameMap, (uint64_t)sub_1000EB3E8, a1);
}

uint64_t sub_1000EB670(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EB6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
  return Message.hash(into:)(a1, a2, v4);
}

const char *CMTimeRange.protoMessageName.unsafeMutableAddressor()
{
  return "CMTimeRange";
}

uint64_t static CMTimeRange.protoMessageName.getter()
{
  return 0x6152656D69544D43LL;
}

uint64_t sub_1000EB72C(uint64_t a1)
{
  return sub_1000EB74C(a1, static CMTimeRange._protobuf_nameMap, (uint64_t)"start", (uint64_t)"duration", 8LL);
}

uint64_t sub_1000EB74C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_1000BECFC(v7, a2);
  sub_1000BCFB4(v7, (uint64_t)a2);
  uint64_t v8 = sub_1000BED3C(&qword_100291D80);
  uint64_t v9 = sub_1000BED3C(&qword_100291D88);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100212570;
  uint64_t v15 = (void *)(v14 + v13);
  uint64_t v16 = v14 + v13 + *(int *)(v9 + 48);
  void *v15 = 1LL;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + _Block_object_dispose((const void *)(v1 - 152), 8) = 5LL;
  *(_BYTE *)(v16 + 16) = 2;
  uint64_t v17 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v18 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v19 = *(void (**)(void))(*(void *)(v18 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v17, v18);
  uint64_t v20 = (char *)v15 + v11 + *(int *)(v9 + 48);
  *(void *)((char *)v15 + v11) = 2LL;
  *(void *)uint64_t v20 = a4;
  *((void *)v20 + 1) = a5;
  _BYTE v20[16] = 2;
  v19();
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t CMTimeRange._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000B9E20(&qword_100291888, (uint64_t)static CMTimeRange._protobuf_nameMap, (uint64_t)sub_1000EB72C);
}

uint64_t static CMTimeRange._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9E7C(&qword_100291888, (uint64_t)static CMTimeRange._protobuf_nameMap, (uint64_t)sub_1000EB72C, a1);
}

uint64_t CMTimeRange.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v14 = v3 + *(int *)(type metadata accessor for CMTimeRange(0LL) + 20);
        uint64_t v15 = type metadata accessor for CMTime(0LL);
        uint64_t v11 = sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
        uint64_t v12 = v14;
        uint64_t v13 = v15;
        goto LABEL_5;
      }

uint64_t CMTimeRange.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v32 = a2;
  uint64_t v6 = sub_1000BED3C(&qword_100291FB0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for CMTime(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v29 = (uint64_t)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v19 = *(int *)(v18 + 20);
  uint64_t v31 = v3;
  sub_1000EAD0C(v3 + v19, (uint64_t)v11);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v21 = v20(v11, 1LL, v12);
  uint64_t v30 = a1;
  if (v21 == 1)
  {
    sub_1000CEDAC((uint64_t)v11, &qword_100291FB0);
    uint64_t v22 = v31;
    uint64_t v23 = v32;
    uint64_t v24 = v33;
  }

  else
  {
    sub_1000EAAD0((uint64_t)v11, (uint64_t)v17);
    uint64_t v25 = sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
    uint64_t v23 = v32;
    uint64_t v24 = v33;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v17, 1LL, v12, v25, v32, v33);
    uint64_t result = sub_1000EAEAC((uint64_t)v17);
    uint64_t v22 = v31;
    if (v4) {
      return result;
    }
  }

  sub_1000EAD0C(v22 + *(int *)(v18 + 24), (uint64_t)v9);
  if (v20(v9, 1LL, v12) == 1)
  {
    sub_1000CEDAC((uint64_t)v9, &qword_100291FB0);
  }

  else
  {
    uint64_t v27 = v29;
    sub_1000EAAD0((uint64_t)v9, v29);
    uint64_t v28 = sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v27, 2LL, v12, v28, v23, v24);
    uint64_t result = sub_1000EAEAC(v27);
    if (v4) {
      return result;
    }
  }

  return UnknownStorage.traverse<A>(visitor:)(v30, v23, v24);
}

Swift::Int CMTimeRange.hashValue.getter()
{
  return sub_1000BC318( type metadata accessor for CMTimeRange,  &qword_100293918,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
}

uint64_t sub_1000EBCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CMTime(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v7(v4, 1LL, 1LL, v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a2 + *(int *)(a1 + 24), 1LL, 1LL, v5);
}

uint64_t sub_1000EBD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMTimeRange.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000EBD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMTimeRange.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000EBD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293A78,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EBDA0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BA0EC(&qword_100291888, (uint64_t)static CMTimeRange._protobuf_nameMap, (uint64_t)sub_1000EB72C, a1);
}

uint64_t sub_1000EBDBC(uint64_t a1)
{
  uint64_t v2 = sub_1000BD35C( &qword_100293900,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EBDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000BD35C( &qword_100293900,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t _s22CloudKitImplementation6CMTimeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    uint64_t v11 = type metadata accessor for CMTime(0LL);
    uint64_t v12 = a1 + *(int *)(v11 + 24);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, a2 + *(int *)(v11 + 24), v4);
    uint64_t v14 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t _s22CloudKitImplementation11CMTimeRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v70 = *(void *)(v72 - 8);
  uint64_t v4 = __chkstk_darwin(v72);
  uint64_t v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v65 - v6;
  uint64_t v7 = type metadata accessor for CMTime(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v67 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v73 = (uint64_t)&v65 - v11;
  uint64_t v12 = sub_1000BED3C(&qword_100293A88);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v76 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v65 - v15;
  uint64_t v17 = sub_1000BED3C(&qword_100291FB0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v71 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v74 = (uint64_t)&v65 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v75 = (uint64_t)&v65 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  int v26 = (char *)&v65 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v65 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v65 - v30;
  uint64_t v32 = type metadata accessor for CMTimeRange(0LL);
  uint64_t v33 = *(int *)(v32 + 20);
  uint64_t v77 = a1;
  sub_1000EAD0C(a1 + v33, (uint64_t)v31);
  uint64_t v34 = *(int *)(v32 + 20);
  uint64_t v78 = a2;
  sub_1000EAD0C(a2 + v34, (uint64_t)v29);
  uint64_t v35 = (uint64_t)&v16[*(int *)(v12 + 48)];
  sub_1000EAD0C((uint64_t)v31, (uint64_t)v16);
  sub_1000EAD0C((uint64_t)v29, v35);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v36((uint64_t)v16, 1LL, v7) == 1)
  {
    sub_1000CEDAC((uint64_t)v29, &qword_100291FB0);
    sub_1000CEDAC((uint64_t)v31, &qword_100291FB0);
    if (v36(v35, 1LL, v7) != 1)
    {
LABEL_18:
      uint64_t v57 = &qword_100293A88;
      uint64_t v56 = (uint64_t)v16;
      goto LABEL_19;
    }

    sub_1000CEDAC((uint64_t)v16, &qword_100291FB0);
  }

  else
  {
    sub_1000EAD0C((uint64_t)v16, (uint64_t)v26);
    if (v36(v35, 1LL, v7) == 1)
    {
      sub_1000CEDAC((uint64_t)v29, &qword_100291FB0);
      sub_1000CEDAC((uint64_t)v31, &qword_100291FB0);
      uint64_t v51 = (uint64_t)v26;
LABEL_17:
      sub_1000EAEAC(v51);
      goto LABEL_18;
    }

    uint64_t v52 = v73;
    sub_1000EAAD0(v35, v73);
    if (*(void *)v26 != *(void *)v52 || *((_DWORD *)v26 + 2) != *(_DWORD *)(v52 + 8))
    {
      sub_1000EAEAC(v52);
      sub_1000CEDAC((uint64_t)v29, &qword_100291FB0);
      sub_1000CEDAC((uint64_t)v31, &qword_100291FB0);
      sub_1000EAEAC((uint64_t)v26);
      uint64_t v56 = (uint64_t)v16;
      uint64_t v57 = &qword_100291FB0;
      goto LABEL_19;
    }

    uint64_t v53 = *(int *)(v7 + 24);
    uint64_t v54 = &v26[v53];
    uint64_t v66 = v52 + v53;
    uint64_t v55 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    LOBYTE(v54) = dispatch thunk of static Equatable.== infix(_:_:)(v54, v66, v72, v55);
    sub_1000EAEAC(v52);
    sub_1000CEDAC((uint64_t)v29, &qword_100291FB0);
    sub_1000CEDAC((uint64_t)v31, &qword_100291FB0);
    sub_1000EAEAC((uint64_t)v26);
    sub_1000CEDAC((uint64_t)v16, &qword_100291FB0);
  }

  uint64_t v37 = v77;
  uint64_t v38 = v75;
  sub_1000EAD0C(v77 + *(int *)(v32 + 24), v75);
  uint64_t v39 = v78;
  uint64_t v40 = v78 + *(int *)(v32 + 24);
  uint64_t v41 = v74;
  sub_1000EAD0C(v40, v74);
  uint64_t v16 = v76;
  uint64_t v42 = (uint64_t)&v76[*(int *)(v12 + 48)];
  sub_1000EAD0C(v38, (uint64_t)v76);
  sub_1000EAD0C(v41, v42);
  if (v36((uint64_t)v16, 1LL, v7) != 1)
  {
    uint64_t v58 = v71;
    sub_1000EAD0C((uint64_t)v16, v71);
    if (v36(v42, 1LL, v7) == 1)
    {
      sub_1000CEDAC(v41, &qword_100291FB0);
      sub_1000CEDAC(v38, &qword_100291FB0);
      uint64_t v51 = v58;
      goto LABEL_17;
    }

    uint64_t v60 = v67;
    sub_1000EAAD0(v42, v67);
    if (*(void *)v58 == *(void *)v60 && *(_DWORD *)(v58 + 8) == *(_DWORD *)(v60 + 8))
    {
      uint64_t v61 = *(int *)(v7 + 24);
      uint64_t v62 = v58 + v61;
      uint64_t v63 = v60 + v61;
      uint64_t v64 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      LOBYTE(v62) = dispatch thunk of static Equatable.== infix(_:_:)(v62, v63, v72, v64);
      sub_1000EAEAC(v60);
      sub_1000CEDAC(v41, &qword_100291FB0);
      sub_1000CEDAC(v38, &qword_100291FB0);
      sub_1000EAEAC(v58);
      sub_1000CEDAC((uint64_t)v16, &qword_100291FB0);
      if ((v62 & 1) != 0) {
        goto LABEL_7;
      }
LABEL_20:
      char v49 = 0;
      return v49 & 1;
    }

    sub_1000EAEAC(v60);
    sub_1000CEDAC(v41, &qword_100291FB0);
    sub_1000CEDAC(v38, &qword_100291FB0);
    sub_1000EAEAC(v58);
    uint64_t v56 = (uint64_t)v16;
    uint64_t v57 = &qword_100291FB0;
LABEL_19:
    sub_1000CEDAC(v56, v57);
    goto LABEL_20;
  }

  sub_1000CEDAC(v41, &qword_100291FB0);
  sub_1000CEDAC(v38, &qword_100291FB0);
  if (v36(v42, 1LL, v7) != 1) {
    goto LABEL_18;
  }
  sub_1000CEDAC((uint64_t)v16, &qword_100291FB0);
LABEL_7:
  uint64_t v43 = v70;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v45 = v68;
  uint64_t v46 = v72;
  v44(v68, v37, v72);
  uint64_t v47 = v69;
  v44(v69, v39, v46);
  uint64_t v48 = sub_1000BD35C( &qword_100291D78,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v47, v46, v48);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v47, v46);
  v50(v45, v46);
  return v49 & 1;
}

uint64_t sub_1000EC65C()
{
  return sub_1000BD35C( &qword_100293920,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
}

uint64_t sub_1000EC688()
{
  return sub_1000BD35C( &qword_100293910,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
}

uint64_t sub_1000EC6B4()
{
  return sub_1000BD35C( &qword_100293908,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
}

uint64_t sub_1000EC6E0()
{
  return sub_1000BD35C( &qword_100293928,  type metadata accessor for CMTime,  (uint64_t)&protocol conformance descriptor for CMTime);
}

uint64_t sub_1000EC70C()
{
  return sub_1000BD35C( &qword_100293930,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
}

uint64_t sub_1000EC738()
{
  return sub_1000BD35C( &qword_100293900,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
}

uint64_t sub_1000EC764()
{
  return sub_1000BD35C( &qword_100293918,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
}

uint64_t sub_1000EC790()
{
  return sub_1000BD35C( &qword_100293938,  type metadata accessor for CMTimeRange,  (uint64_t)&protocol conformance descriptor for CMTimeRange);
}

void *initializeBufferWithCopyOfBuffer for CMTime(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t destroy for CMTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t initializeWithCopy for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CMTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ECA20);
}

uint64_t sub_1000ECA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CMTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ECA6C);
}

uint64_t sub_1000ECA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000ECAB0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CMTimeRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (_DWORD *)((char *)a1 + v9);
    uint64_t v11 = (_DWORD *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for CMTime(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v13 + 48);
    if (v14(v11, 1LL, v12))
    {
      uint64_t v15 = sub_1000BED3C(&qword_100291FB0);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      *(void *)uint64_t v10 = *(void *)v11;
      void v10[2] = v11[2];
      v8((uint64_t *)((char *)v10 + *(int *)(v12 + 24)), (uint64_t *)((char *)v11 + *(int *)(v12 + 24)), v7);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v17 = *(int *)(a3 + 24);
    uint64_t v18 = (_DWORD *)((char *)a1 + v17);
    uint64_t v19 = (_DWORD *)((char *)a2 + v17);
    if (v14(v19, 1LL, v12))
    {
      uint64_t v20 = sub_1000BED3C(&qword_100291FB0);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      *(void *)uint64_t v18 = *(void *)v19;
      v18[2] = v19[2];
      v8((uint64_t *)((char *)v18 + *(int *)(v12 + 24)), (uint64_t *)((char *)v19 + *(int *)(v12 + 24)), v7);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0LL, 1LL, v12);
    }
  }

  return a1;
}

uint64_t destroy for CMTimeRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v10(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CMTime(0LL);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
  if (!v7(v5, 1LL, v6)) {
    v10(v5 + *(int *)(v6 + 24), v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1LL, v6);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8 + *(int *)(v6 + 24), v4);
  }
  return result;
}

char *initializeWithCopy for CMTimeRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for CMTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1LL, v11))
  {
    uint64_t v14 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 24)], &v10[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if (v13(v17, 1LL, v11))
  {
    uint64_t v18 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    *(void *)uint64_t v16 = *(void *)v17;
    *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
    v7(&v16[*(int *)(v11 + 24)], &v17[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t assignWithCopy for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 24);
  v23(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CMTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_1000EAEAC((uint64_t)v8);
LABEL_6:
    uint64_t v15 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  *(void *)uint64_t v8 = *(void *)v9;
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  v23((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (_DWORD *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  int v19 = v12((char *)(a1 + v16), 1LL, v10);
  int v20 = v12(v18, 1LL, v10);
  if (!v19)
  {
    if (!v20)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      v17[2] = *((_DWORD *)v18 + 2);
      v23((uint64_t)v17 + *(int *)(v10 + 24), (uint64_t)&v18[*(int *)(v10 + 24)], v6);
      return a1;
    }

    sub_1000EAEAC((uint64_t)v17);
    goto LABEL_12;
  }

  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v17 = *(void *)v18;
  v17[2] = *((_DWORD *)v18 + 2);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))( (char *)v17 + *(int *)(v10 + 24),  &v18[*(int *)(v10 + 24)],  v6);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
  return a1;
}

char *initializeWithTake for CMTimeRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for CMTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1LL, v11))
  {
    uint64_t v14 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    *(void *)uint64_t v9 = *(void *)v10;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 24)], &v10[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if (v13(v17, 1LL, v11))
  {
    uint64_t v18 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    *(void *)uint64_t v16 = *(void *)v17;
    *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
    v7(&v16[*(int *)(v11 + 24)], &v17[*(int *)(v11 + 24)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0LL, 1LL, v11);
  }

  return a1;
}

uint64_t assignWithTake for CMTimeRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v23(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for CMTime(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    sub_1000EAEAC((uint64_t)v8);
LABEL_6:
    uint64_t v15 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  *(void *)uint64_t v8 = *(void *)v9;
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  v23((uint64_t)&v8[*(int *)(v10 + 24)], (uint64_t)&v9[*(int *)(v10 + 24)], v6);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (_DWORD *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  int v19 = v12((char *)(a1 + v16), 1LL, v10);
  int v20 = v12(v18, 1LL, v10);
  if (!v19)
  {
    if (!v20)
    {
      *(void *)uint64_t v17 = *(void *)v18;
      v17[2] = *((_DWORD *)v18 + 2);
      v23((uint64_t)v17 + *(int *)(v10 + 24), (uint64_t)&v18[*(int *)(v10 + 24)], v6);
      return a1;
    }

    sub_1000EAEAC((uint64_t)v17);
    goto LABEL_12;
  }

  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_1000BED3C(&qword_100291FB0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v17 = *(void *)v18;
  v17[2] = *((_DWORD *)v18 + 2);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))( (char *)v17 + *(int *)(v10 + 24),  &v18[*(int *)(v10 + 24)],  v6);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0LL, 1LL, v10);
  return a1;
}