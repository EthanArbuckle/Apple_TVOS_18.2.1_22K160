LABEL_42:
            v19 = 0;
LABEL_60:

            goto LABEL_61;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        v19 = 0;
LABEL_61:

        goto LABEL_62;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    v19 = 0;
LABEL_62:

    goto LABEL_63;
  }

  v19 = 0;
LABEL_63:

  return v19;
}

                  sub_10002EB74(a1);
                  return;
                }
              }
            }
          }
        }

  __break(1u);
LABEL_43:
  __break(1u);
}

  __break(1u);
LABEL_43:
  __break(1u);
}

void sub_100006F4C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

LABEL_36:
            v19 = 0;
LABEL_48:

            goto LABEL_49;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        v19 = 0;
LABEL_49:

        goto LABEL_50;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    v19 = 0;
LABEL_50:

    goto LABEL_51;
  }

  v19 = 0;
LABEL_51:

  return v19;
}

            v19 = 0;
LABEL_48:

            goto LABEL_49;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        v19 = 0;
LABEL_49:

        goto LABEL_50;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    v19 = 0;
LABEL_50:

    goto LABEL_51;
  }

  v19 = 0;
LABEL_51:

  return v19;
}

  __break(1u);
  return result;
}

    v9 = 0;
    goto LABEL_37;
  }

  v7 = sub_100050890();
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

void sub_100007CF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.AppStoreComponents", "ASCAppLaunchTrampoline");
  v2 = (void *)qword_1001407B8;
  qword_1001407B8 = (uint64_t)v1;
}

void sub_100008638(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL));
  [*(id *)(a1 + 32) finishWithResult:v2];
}

void sub_100008684(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCAppLaunchTrampoline log](&OBJC_CLASS___ASCAppLaunchTrampoline, "log"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    id v19 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Unable to open application, reason %{public}@. Attempting to open product page URL",  buf,  0xCu);
  }

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) value]);
  v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) value]);
  v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) value]);
  v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) value]);
  v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) value]);
  v11 = (void *)objc_claimAutoreleasedReturnValue( [v5 productPageURLForAdamId:v6 deeplink:v7 eventId:v8 encodedMetrics:v9 sourceApplication:v10]);

  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) openProductURL:v11]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_1000088C0;
    v14[3] = &unk_10011EED8;
    id v15 = *(id *)(a1 + 80);
    [v12 addFinishBlock:v14];
  }

  else
  {
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    v17 = @"Failed to construct product page URL.";
    v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
    v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"ASCAppLaunchTrampolineErrorDomain",  3LL,  v13));

    [*(id *)(a1 + 80) finishWithError:v12];
  }
}

void sub_1000088C0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL));
    [*(id *)(a1 + 32) finishWithResult:v6];
  }

  else
  {
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCAppLaunchTrampoline log](&OBJC_CLASS___ASCAppLaunchTrampoline, "log"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000E09BC((uint64_t)v5, v7);
    }

    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    v10 = @"Failed to open product page.";
    v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"ASCAppLaunchTrampolineErrorDomain",  4LL,  v8));

    [*(id *)(a1 + 32) finishWithError:v6];
  }
}

void sub_100008B3C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL));
  [*(id *)(a1 + 32) finishWithResult:v2];
}

void sub_100008B88(uint64_t a1)
{
  NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
  id v5 = @"Failed to open app.";
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"ASCAppLaunchTrampolineErrorDomain",  5LL,  v2));

  [*(id *)(a1 + 32) finishWithError:v3];
}

void sub_100008D94(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL));
  [*(id *)(a1 + 32) finishWithResult:v2];
}

void sub_100008DE0(uint64_t a1)
{
  NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
  id v5 = @"Failed to open app.";
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"ASCAppLaunchTrampolineErrorDomain",  5LL,  v2));

  [*(id *)(a1 + 32) finishWithError:v3];
}

LABEL_54:
            id v19 = 0;
LABEL_84:

            goto LABEL_85;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        id v19 = 0;
LABEL_85:

        goto LABEL_86;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    id v19 = 0;
LABEL_86:

    goto LABEL_87;
  }

  id v19 = 0;
LABEL_87:

  return v19;
}

    v35 = (v40 - 1) & v40;
    v64 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_55:
    v62 = v38;
    v43 = *(void *)(v4 + 40);
    v44 = *(id *)(*(void *)(v5 + 48) + 8 * v38);
    v45 = NSObject._rawHashValue(seed:)(v43);
    v46 = -1LL << *(_BYTE *)(v4 + 32);
    v47 = v45 & ~v46;
    if (((*(void *)(v36 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v47) & 1) == 0) {
      goto LABEL_38;
    }
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    v48 = *(id *)(*(void *)(v4 + 48) + 8 * v47);
    v49 = static NSObject.== infix(_:_:)();

    if ((v49 & 1) != 0)
    {
LABEL_60:

      v32 = v64;
      *(unint64_t *)((char *)a1 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v62;
      v31 = __OFADD__(v58++, 1LL);
      NSErrorUserInfoKey v4 = a4;
      if (v31)
      {
        __break(1u);
LABEL_63:
        swift_retain(v5);
        sub_100090A7C(a1, a2, v58, v5);
        return;
      }
    }

    else
    {
      v50 = ~v46;
      while (1)
      {
        v47 = (v47 + 1) & v50;
        NSErrorUserInfoKey v4 = a4;
        if (((*(void *)(v36 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v47) & 1) == 0) {
          break;
        }
        v51 = *(id *)(*(void *)(a4 + 48) + 8 * v47);
        v52 = static NSObject.== infix(_:_:)();

        if ((v52 & 1) != 0) {
          goto LABEL_60;
        }
      }

void sub_10000BEF4(uint64_t a1, void *a2, void *a3)
{
  NSErrorUserInfoKey v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  objc_msgSend(v4, "replaceOccurrencesOfString:withString:options:range:", v6, v5, 0, 0, objc_msgSend(v4, "length"));
}

void sub_10000C0B8(id a1)
{
  int has_internal_content = os_variant_has_internal_content("com.apple.appstorecomponentsd");
  id v2 = @"production";
  id v3 = (void *)qword_1001407C8;
  qword_1001407C8 = (uint64_t)v2;
}

LABEL_29:
            NSErrorUserInfoKey v9 = 0;
LABEL_32:

            goto LABEL_33;
          }
        }

        else if (v14 == (void *)v15)
        {
          goto LABEL_15;
        }

        NSErrorUserInfoKey v9 = 0;
LABEL_33:

        goto LABEL_34;
      }
    }

    else if (v11 == (void *)v12)
    {
      goto LABEL_12;
    }

    NSErrorUserInfoKey v9 = 0;
LABEL_34:

    goto LABEL_35;
  }

  NSErrorUserInfoKey v9 = 1;
LABEL_36:

  return v9;
}

LABEL_49:
            id v19 = 0;
LABEL_74:

            goto LABEL_75;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        id v19 = 0;
LABEL_75:

        goto LABEL_76;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    id v19 = 0;
LABEL_76:

    goto LABEL_77;
  }

  id v19 = 0;
LABEL_77:

  return v19;
}

void sub_10000DDE0(id a1)
{
  os_log_t v1 = -[ASCDefaults initWithBundleID:]( objc_alloc(&OBJC_CLASS___ASCDefaults),  "initWithBundleID:",  @"com.apple.AppStoreComponents");
  id v2 = (void *)qword_1001407D8;
  qword_1001407D8 = (uint64_t)v1;
}
}

void sub_10000F4AC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_1000E107C();
  }
}

void sub_10000F4DC(uint64_t a1)
{
  uint64_t v1 = objc_opt_self(a1);
  if ((sub_10000F514(v1) & 1) == 0) {
    sub_10000F4AC(v1);
  }
}

uint64_t sub_10000F514(uint64_t a1)
{
  uint64_t v1 = objc_opt_self(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);
  if ((sub_10000F5C0(v1, v3) & 1) != 0)
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 processName]);
    uint64_t v4 = (uint64_t)sub_10000F608(v1, v6);
  }

  return v4;
}

id sub_10000F5C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = [v3 hasPrefix:@"com.apple."];

  return v4;
}

id sub_10000F608(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = [v3 isEqualToString:@"Clip"];

  return v4;
}

void sub_10000FC2C(id a1)
{
}

uint64_t sub_100010338()
{
  return os_variant_has_internal_content("com.apple.appstorecomponentsd");
}

uint64_t sub_1000114C8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = objc_opt_class(v2);
  LOBYTE(v2) = objc_opt_isKindOfClass(v3, v4);

  return v2 & 1;
}

void sub_100015AF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  v7 = objc_alloc(&OBJC_CLASS___ASCLockupBatchRequest);
  v8 = (void *)objc_claimAutoreleasedReturnValue([v6 first]);
  NSErrorUserInfoKey v9 = (void *)objc_claimAutoreleasedReturnValue([v6 second]);

  id v10 = -[ASCLockupBatchRequest _initWithIDs:kind:context:clientID:enableAppDistribution:mediaQueryParams:platformOverride:]( v7,  "_initWithIDs:kind:context:clientID:enableAppDistribution:mediaQueryParams:platformOverride:",  v5,  v8,  v9,  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  [*(id *)(a1 + 56) addObject:v10];
}

NSSet *sub_100016DCC()
{
  id v15 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureAd);
  uint64_t v13 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureBundleID);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureBuyParams);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureDeveloperName);
  uint64_t v0 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureDisplayContext);
  uint64_t v1 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureExtendedAttributes);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureGenre);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureShortName);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureMedia);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureMiniProductPage);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureProductVariants);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureSafariExtension);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureSingleSignOn);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___ASCLockupFeatureSignpostTags);
  return  -[NSSet initWithObjects:]( v15,  "initWithObjects:",  v14,  v13,  v12,  v11,  v0,  v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  objc_opt_class(&OBJC_CLASS___NSArray),  0LL);
}

id sub_100016F40(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = sub_100016DCC();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 decodeObjectOfClasses:v6 forKey:v3]);

  return v7;
}

void sub_1000172E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  a2,  a3));
  [v3 addObject:v4];
}

uint64_t sub_10001788C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000193D8(id a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle asc_realMainBundle](&OBJC_CLASS___NSBundle, "asc_realMainBundle"));
  uint64_t v2 = objc_alloc(&OBJC_CLASS___AMSProcessInfo);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 bundleIdentifier]);
  id v4 = -[AMSProcessInfo initWithBundleIdentifier:](v2, "initWithBundleIdentifier:", v3);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[AMSProcessInfo bundleIdentifier](v4, "bundleIdentifier"));
  if (v5)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v5, @"hostApp");
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v5, @"pageContext");
  }

  id v6 = -[NSMutableDictionary copy](v8, "copy");
  uint64_t v7 = (void *)qword_1001407F8;
  qword_1001407F8 = (uint64_t)v6;
}

NSString *__cdecl sub_100019554(id a1, NSString *a2, NSString *a3, NSString *a4)
{
  return a4;
}

NSSet *sub_100019A20()
{
  uint64_t v0 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v1 = objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNull);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNumber);
  return  -[NSSet initWithObjects:]( v0,  "initWithObjects:",  v1,  v2,  v3,  v4,  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
}

id sub_100019AC4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = sub_100019A20();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 decodeObjectOfClasses:v6 forKey:v3]);

  return v7;
}

id sub_100019B2C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___ASCMetricsData);
  uint64_t v7 = -[NSSet initWithObjects:](v5, "initWithObjects:", v6, objc_opt_class(&OBJC_CLASS___NSArray), 0LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 decodeObjectOfClasses:v7 forKey:v3]);

  return v8;
}

void sub_10001A878()
{
  uint64_t v0 = (objc_class *)objc_opt_class(&OBJC_CLASS___NSURLSessionConfiguration);
  ClassMethod = class_getClassMethod(v0, "defaultSessionConfiguration");
  if (ClassMethod)
  {
    uint64_t v2 = ClassMethod;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10001A958;
    v5[3] = &unk_10011F258;
    v5[4] = method_getImplementation(ClassMethod);
    v5[5] = "defaultSessionConfiguration";
    id v3 = objc_retainBlock(v5);
    id v4 = imp_implementationWithBlock(v3);

    method_setImplementation(v2, v4);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000E13E8();
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000E1368("defaultSessionConfiguration");
  }

id sub_10001A958(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v3, "set_sourceApplicationBundleIdentifier:", @"com.apple.TVAppStore");
  return v3;
}

id ASCOfferFlagsGetDescription(__int16 a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = v2;
  if ((a1 & 1) != 0)
  {
    -[NSMutableArray addObject:](v2, "addObject:", @"ASCOfferHasMessagesExtension");
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }

  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferCreatesJobs");
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

LABEL_18:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsArcadeApp");
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

        return 0xD000000000000014LL;
      }
    }

    swift_bridgeObjectRelease_n(v15, 2LL);
    goto LABEL_18;
  }

  uint64_t v12 = v8;
  sub_1000CB97C(a2, a3);

  swift_bridgeObjectRelease(a3);
  return (unint64_t)v9;
}

LABEL_19:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsPreorder");
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }

    uint64_t v13 = v75;
    uint64_t v11 = v76;
  }

  if (v13)
  {
    v75 = (v13 - 1) & v13;
    v76 = v11;
    v21 = __clz(__rbit64(v13)) | (v11 << 6);
    goto LABEL_42;
  }

  v26 = v11 + 1;
  if (__OFADD__(v11, 1LL)) {
    goto LABEL_86;
  }
  if (v26 < v70)
  {
    v27 = *(void *)(v71 + 8 * v26);
    v28 = v11 + 1;
    if (!v27)
    {
      v28 = v11 + 2;
      if (v11 + 2 >= v70) {
        goto LABEL_84;
      }
      v27 = *(void *)(v71 + 8 * v28);
      if (!v27)
      {
        v28 = v11 + 3;
        if (v11 + 3 >= v70) {
          goto LABEL_84;
        }
        v27 = *(void *)(v71 + 8 * v28);
        if (!v27)
        {
          v28 = v11 + 4;
          if (v11 + 4 >= v70) {
            goto LABEL_84;
          }
          v27 = *(void *)(v71 + 8 * v28);
          if (!v27)
          {
            v28 = v11 + 5;
            if (v11 + 5 >= v70) {
              goto LABEL_84;
            }
            v27 = *(void *)(v71 + 8 * v28);
            if (!v27)
            {
              v29 = v11 + 6;
              do
              {
                if (v70 == v29) {
                  goto LABEL_84;
                }
                v27 = *(void *)(v71 + 8 * v29++);
              }

              while (!v27);
              v28 = v29 - 1;
            }
          }
        }
      }
    }

    v75 = (v27 - 1) & v27;
    v76 = v28;
    v21 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_42:
    v25 = *(id *)(*(void *)(v2 + 48) + 8 * v21);
    if (!v25) {
      goto LABEL_84;
    }
    goto LABEL_43;
  }

  __break(1u);
  return result;
}

  v28 = a4;
  if (qword_10013BC48 != -1) {
    swift_once(&qword_10013BC48, sub_1000D1558);
  }
  v29 = sub_10002A768(v13, (uint64_t)qword_100148618);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v29, v13);
  v30 = sub_100029E18(&qword_10013EA00);
  v31 = type metadata accessor for LogMessage(0LL);
  v32 = swift_allocObject( v30,  ((*(unsigned __int8 *)(*(void *)(v31 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v31 - 8) + 80LL))
        + *(void *)(*(void *)(v31 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v31 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v32 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(73LL, 3LL);
  v33._countAndFlagsBits = 0LL;
  v33._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v33);
  LogMessage.StringInterpolation.appendInterpolation(identity:)(v5);
  v34._object = (void *)0x8000000100101110LL;
  v34._countAndFlagsBits = 0xD000000000000018LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v34);
  *((void *)&v45 + 1) = &type metadata for String;
  *(void *)&v44 = v40;
  *((void *)&v44 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v44);
  sub_10004C810((uint64_t)&v44);
  v35._countAndFlagsBits = 0x646E612079656B20LL;
  v35._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v35);
  *((void *)&v45 + 1) = &type metadata for String;
  *(void *)&v44 = v41;
  *((void *)&v44 + 1) = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v44);
  sub_10004C810((uint64_t)&v44);
  v36._countAndFlagsBits = 0xD000000000000028LL;
  v36._object = (void *)0x8000000100101130LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v36);
  LogMessage.init(stringInterpolation:)(v12);
  Logger.error(_:)(v32, v13, &protocol witness table for OSLogger);
  v37 = swift_bridgeObjectRelease(v32);
  (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v16, v13, v37);
  return 0LL;
}

LABEL_20:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsDisabled");
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }

    id v19 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_5:
    [(id)objc_opt_self(ASCViewRender) requestDidBeginWithTag:*(void *)(*((void *)a3 + 6) + 8 * v23)];
  }

  v26 = v24 + 3;
  if (v26 < v20)
  {
    v25 = v16[v26];
    if (!v25)
    {
      while (1)
      {
        v21 = v26 + 1;
        if (__OFADD__(v26, 1LL)) {
          break;
        }
        if (v21 >= v20) {
          goto LABEL_21;
        }
        v25 = v16[v21];
        ++v26;
        if (v25) {
          goto LABEL_20;
        }
      }

    uint64_t v6 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    result = [(id)objc_opt_self(ASCViewRender) requestDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v11)];
  }

  uint64_t v14 = v12 + 3;
  if (v14 >= v7) {
    return (id)swift_release(a2);
  }
  uint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    uint64_t v9 = v14;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      return (id)swift_release(a2);
    }
    uint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }

    v17 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    result = [(id)objc_opt_self(ASCViewRender) requestDidBeginWithTag:*(void *)(*(void *)(a4 + 48) + 8 * v22)];
  }

  v25 = v23 + 3;
  if (v25 < v18)
  {
    v24 = *(void *)(v14 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        v20 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_29;
        }
        if (v20 >= v18) {
          goto LABEL_21;
        }
        v24 = *(void *)(v14 + 8 * v20);
        ++v25;
        if (v24) {
          goto LABEL_20;
        }
      }
    }

    v20 = v25;
    goto LABEL_20;
  }

    uint64_t v5 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_5:
    sub_10006C7AC( (Swift::Int *)v13,  [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*(void *)(*(void *)(a1 + 48) + 8 * v9)],  (unint64_t *)&qword_10013CB50,  NSNumber_ptr,  &qword_10013D978);
  }

  uint64_t v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_21:
    swift_release(a1);
    return;
  }

  uint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    uint64_t v7 = v12;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_5:
    v18 = *(void *)(*(void *)(a2 + 48) + 8 * v17);
    id v19 = (void *)objc_opt_self(&OBJC_CLASS___ASCViewRender);
    [v19 jsCallDidEndWithTag:v18];
    result = [v19 rootViewModelParseDidBeginWithTag:v18];
  }

  v22 = v20 + 3;
  if (v22 < v13)
  {
    v21 = *(void *)(v9 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        id v15 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          break;
        }
        if (v15 >= v13) {
          goto LABEL_21;
        }
        v21 = *(void *)(v9 + 8 * v15);
        ++v22;
        if (v21) {
          goto LABEL_20;
        }
      }

    uint64_t v14 = (v23 - 1) & v23;
    id v19 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_5:
    v20 = *(void *)(*(void *)(a2 + 48) + 8 * v19);
    v21 = (void *)objc_opt_self(&OBJC_CLASS___ASCViewRender);
    [v21 jsCallDidEndWithTag:v20];
    result = [v21 rootViewModelParseDidBeginWithTag:v20];
  }

  v24 = v22 + 3;
  if (v24 < v15)
  {
    v23 = *(void *)(v11 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          break;
        }
        if (v17 >= v15) {
          goto LABEL_21;
        }
        v23 = *(void *)(v11 + 8 * v17);
        ++v24;
        if (v23) {
          goto LABEL_20;
        }
      }

    uint64_t v13 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_5:
    id v19 = *(void *)(*(void *)(a2 + 48) + 8 * v18);
    v20 = (void *)objc_opt_self(&OBJC_CLASS___ASCViewRender);
    [v20 jsCallDidEndWithTag:v19];
    result = [v20 rootViewModelParseDidBeginWithTag:v19];
  }

  v23 = v21 + 3;
  if (v23 < v14)
  {
    v22 = *(void *)(v10 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        NSErrorUserInfoKey v16 = v23 + 1;
        if (__OFADD__(v23, 1LL)) {
          break;
        }
        if (v16 >= v14) {
          goto LABEL_21;
        }
        v22 = *(void *)(v10 + 8 * v16);
        ++v23;
        if (v22) {
          goto LABEL_20;
        }
      }

    v17 = (v26 - 1) & v26;
  }

  v27 = v25 + 3;
  if (v27 >= v53)
  {
LABEL_34:
    v43 = *(void **)(v48 + 304);
    swift_release(v11);

    (*(void (**)(void *))(v48 + 8))(v51);
    return;
  }

  v26 = *(void *)(v52 + 8 * v27);
  if (v26)
  {
    uint64_t v13 = v27;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v13 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v13 >= v53) {
      goto LABEL_34;
    }
    v26 = *(void *)(v52 + 8 * v13);
    ++v27;
    if (v26) {
      goto LABEL_20;
    }
  }

LABEL_21:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferForceWatchInstall");
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }

  swift_release(a3);
  v27 = (char *)v7 + *(int *)(type metadata accessor for AMSMediaFetcher(0LL) + 28);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v27;
  if (*(void *)v27)
  {
    v29 = *((void *)v27 + 1);
    v30 = swift_retain(v29);
    v31 = Bag.amsBag.getter(v30);
    v32 = v60;
    a3 = (char *)v28(v60, v66, v67, v68, v69, v31);
    sub_10002E968((uint64_t)v28, v29);
  }

  else
  {
    v33 = v67;
    swift_bridgeObjectRetain(v67);
    v34 = v69;
    v35 = swift_bridgeObjectRetain(v69);
    v31 = Bag.amsBag.getter(v35);
    v36 = objc_allocWithZone(&OBJC_CLASS___AMSMediaTask);
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v38 = String._bridgeToObjectiveC()();
    *(void *)&v39 = swift_bridgeObjectRelease(v34).n128_u64[0];
    v32 = v60;
    a3 = (char *)objc_msgSend(v36, "initWithType:clientIdentifier:clientVersion:bag:", v60, v37, v38, v31, v39);
  }

  swift_unknownObjectRelease(v31);
  [a3 setClientInfo:*v8];
  v40 = sub_10002E580(v32);
  if (v40)
  {
    v42 = v40;
    type metadata accessor for AMSMediaTaskPlatform(0LL);
    v43.super.isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)&v41 = swift_bridgeObjectRelease(v42).n128_u64[0];
  }

  else
  {
    v43.super.isa = 0LL;
  }

  objc_msgSend(a3, "setAdditionalPlatforms:", v43.super.isa, v41, v60);

  v44 = sub_10002CFDC(v61, v62);
  if (v44)
  {
    v46 = v44;
    v47.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(void *)&v45 = swift_bridgeObjectRelease(v46).n128_u64[0];
  }

  else
  {
    v47.super.isa = 0LL;
  }

  NSErrorUserInfoKey v16 = &type metadata for String;
  objc_msgSend(a3, "setAdditionalQueryParams:", v47.super.isa, v45);

  if (qword_10013BC48 != -1) {
    goto LABEL_34;
  }
LABEL_31:
  v48 = v65;
  v49 = sub_10002A768(v65, (uint64_t)qword_100148618);
  v50 = v63;
  v51 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v49, v48);
  v52 = sub_100029E18(&qword_10013EA00);
  v53 = type metadata accessor for LogMessage(0LL);
  v54 = swift_allocObject( v52,  ((*(unsigned __int8 *)(*(void *)(v53 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v53 - 8) + 80LL))
        + *(void *)(*(void *)(v53 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v53 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v54 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(49LL, 2LL);
  v55._object = (void *)0x80000001000FA880LL;
  v55._countAndFlagsBits = 0xD000000000000026LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v55);
  v72 = v16;
  v70 = v66;
  v71 = v67;
  swift_bridgeObjectRetain(v67);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
  sub_10002E92C((uint64_t)&v70, &qword_10013C6F0);
  v56._countAndFlagsBits = 0x6F6973726576202CLL;
  v56._object = (void *)0xEB00000000203A6ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v56);
  v72 = v16;
  v70 = v68;
  v71 = v69;
  swift_bridgeObjectRetain(v69);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
  sub_10002E92C((uint64_t)&v70, &qword_10013C6F0);
  v57._countAndFlagsBits = 0LL;
  v57._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v57);
  LogMessage.init(stringInterpolation:)(v13);
  Logger.info(_:)(v54, v48, &protocol witness table for OSLogger);
  v58 = swift_bridgeObjectRelease(v54);
  (*(void (**)(char *, uint64_t, __n128))(v51 + 8))(v50, v48, v58);
  return a3;
}

  swift_release(a4);
  v26 = v52;
  v27 = sub_10002CA8C(v45, v46, (char *)a4, v47, v48, v49, v50);
  v28 = swift_bridgeObjectRetain(a1);
  v29 = sub_100047618(v28);
  swift_bridgeObjectRelease(a1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v29);
  [v27 setBundleIdentifiers:isa];

  if ((v51 & 1) != 0)
  {
    v31 = (void *)(v26 + *(int *)(type metadata accessor for AMSMediaFetcher(0LL) + 24));
    v32 = v31[3];
    v33 = v31[4];
    sub_100029EE0(v31, v32);
    dispatch thunk of AccountProvider.activeAccount.getter(v32, v33);
    v34 = type metadata accessor for Account(0LL);
    v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v13, 1LL, v34) == 1)
    {
      sub_10002E92C((uint64_t)v13, &qword_10013C6D0);
      v36 = 0LL;
    }

    else
    {
      v36 = (void *)Account.acAccountCopy.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v34);
    }

    [v27 setAccount:v36];
  }

  else
  {
    [v27 setAccount:0];
  }

  sub_100029E18(&qword_10013C6D8);
  v37 = Promise<A>.init(_:)([v27 perform]);
  v38 = swift_allocObject(&unk_100120290, 24LL, 7LL);
  *(void *)(v38 + 16) = a4;
  v39 = type metadata accessor for SyncTaskScheduler(0LL);
  v54 = v39;
  v55 = &protocol witness table for SyncTaskScheduler;
  sub_10002C328(v53);
  v40 = swift_bridgeObjectRetain(a4);
  SyncTaskScheduler.init()(v40);
  Promise.then(perform:orCatchError:on:)(sub_10002E448, v38, MetricsIdStore.init(accountStore:amsBag:), 0LL, v53);
  swift_release(v38);
  sub_100029F4C(v53);
  v54 = v39;
  v55 = &protocol witness table for SyncTaskScheduler;
  v41 = sub_10002C328(v53);
  SyncTaskScheduler.init()(v41);
  v42 = sub_100029E18((uint64_t *)&unk_10013C6E0);
  v43 = Promise.map<A>(on:_:)(v53, sub_10002D27C, 0LL, v42);
  swift_release(v37);
  sub_100029F4C(v53);

  return (id)v43;
}

    if (v25) {
      v40 = v28;
    }
    else {
      v40 = 1;
    }
    if ((v40 & 1) != 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }

  v31(v10, (uint64_t)v20, v6);
  (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
  if (v25) {
    v33 = v28;
  }
  else {
    v33 = 1;
  }
  if ((v33 & 1) != 0)
  {
    v34 = type metadata accessor for AppInstallationType(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8LL))(v10, v34);
LABEL_25:
    sub_100067CA8((uint64_t)v20);
    return 0LL;
  }

  v37 = [(id)objc_opt_self(ASCOfferMetadata) indeterminateProgressMetadata];
  v38 = type metadata accessor for AppInstallationType(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8LL))(v10, v38);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  return v37;
}

  v23 = swift_release(a2);
  v24 = v43;
  JSResponse.body.getter(v23);
  v25 = (uint64_t)v48;
  v26 = v45;
  CoarselyTimed.contained.getter(v45);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v26);
  v28 = v51;
  v27 = v52;
  v29 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v49, v47, v52);
  type metadata accessor for ASCLockupContainer();
  v30 = v50;
  v31 = sub_1000548AC(v25, v29);
  if (v30)
  {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v25, v54);
    return (id)v31;
  }

  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v25, v54);
  v32 = 1LL << *(_BYTE *)(a2 + 32);
  v33 = -1LL;
  if (v32 < 64) {
    v33 = ~(-1LL << v32);
  }
  v34 = v33 & *(void *)(a2 + 56);
  v35 = (unint64_t)(v32 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain(a2);
  v36 = 0LL;
  while (2)
  {
    if (v34)
    {
      v37 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v38 = v37 | (v36 << 6);
LABEL_27:
      result = [(id)objc_opt_self(ASCViewRender) rootViewModelParseDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v38)];
      continue;
    }

    break;
  }

  v39 = v36 + 1;
  if (__OFADD__(v36, 1LL)) {
    goto LABEL_46;
  }
  if (v39 >= v35)
  {
LABEL_43:
    swift_release(a2);
    return (id)v31;
  }

  v40 = *(void *)(v9 + 8 * v39);
  ++v36;
  if (v40) {
    goto LABEL_42;
  }
  v36 = v39 + 1;
  if (v39 + 1 >= v35) {
    goto LABEL_43;
  }
  v40 = *(void *)(v9 + 8 * v36);
  if (v40) {
    goto LABEL_42;
  }
  v36 = v39 + 2;
  if (v39 + 2 >= v35) {
    goto LABEL_43;
  }
  v40 = *(void *)(v9 + 8 * v36);
  if (v40)
  {
LABEL_42:
    v34 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v36 << 6);
    goto LABEL_27;
  }

  v41 = v39 + 3;
  if (v41 >= v35) {
    goto LABEL_43;
  }
  v40 = *(void *)(v9 + 8 * v41);
  if (v40)
  {
    v36 = v41;
    goto LABEL_42;
  }

  while (1)
  {
    v36 = v41 + 1;
    if (__OFADD__(v41, 1LL)) {
      break;
    }
    if (v36 >= v35) {
      goto LABEL_43;
    }
    v40 = *(void *)(v9 + 8 * v36);
    ++v41;
    if (v40) {
      goto LABEL_42;
    }
  }

  v25 = swift_release(a2);
  v26 = v44;
  JSResponse.body.getter(v25);
  v27 = v49;
  v28 = v46;
  CoarselyTimed.contained.getter(v46);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v28);
  v29 = v54;
  v30 = v52;
  v31 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, v48, v56);
  sub_10002A030(0LL, v50, v51);
  v32 = v53;
  v33 = v55(v27, v30);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v58);
    return (id)v33;
  }

  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v58);
  v34 = 1LL << *(_BYTE *)(a2 + 32);
  v35 = -1LL;
  if (v34 < 64) {
    v35 = ~(-1LL << v34);
  }
  v36 = v35 & *(void *)(a2 + 56);
  v37 = (unint64_t)(v34 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain(a2);
  v38 = 0LL;
  while (2)
  {
    if (v36)
    {
      v39 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v40 = v39 | (v38 << 6);
LABEL_27:
      result = [(id)objc_opt_self(ASCViewRender) rootViewModelParseDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v40)];
      continue;
    }

    break;
  }

  v41 = v38 + 1;
  if (__OFADD__(v38, 1LL)) {
    goto LABEL_46;
  }
  if (v41 >= v37)
  {
LABEL_43:
    swift_release(a2);
    return (id)v33;
  }

  v42 = *(void *)(v11 + 8 * v41);
  ++v38;
  if (v42) {
    goto LABEL_42;
  }
  v38 = v41 + 1;
  if (v41 + 1 >= v37) {
    goto LABEL_43;
  }
  v42 = *(void *)(v11 + 8 * v38);
  if (v42) {
    goto LABEL_42;
  }
  v38 = v41 + 2;
  if (v41 + 2 >= v37) {
    goto LABEL_43;
  }
  v42 = *(void *)(v11 + 8 * v38);
  if (v42)
  {
LABEL_42:
    v36 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v38 << 6);
    goto LABEL_27;
  }

  v43 = v41 + 3;
  if (v43 >= v37) {
    goto LABEL_43;
  }
  v42 = *(void *)(v11 + 8 * v43);
  if (v42)
  {
    v38 = v43;
    goto LABEL_42;
  }

  while (1)
  {
    v38 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v38 >= v37) {
      goto LABEL_43;
    }
    v42 = *(void *)(v11 + 8 * v38);
    ++v43;
    if (v42) {
      goto LABEL_42;
    }
  }

  swift_release(a2);
  v24 = type metadata accessor for LintedMetricsEvent(0LL);
  v25 = v40;
  JSResponse.body.getter(v24);
  v27 = v42;
  v26 = v43;
  CoarselyTimed.contained.getter(v42);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v27);
  v28 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v48, v47);
  v29 = v50;
  result = (id)dispatch thunk of ExpressibleByJSON.init(deserializing:using:)( v26,  v28,  v24,  &protocol witness table for LintedMetricsEvent);
  if (v29) {
    return result;
  }
  v30 = 1LL << *(_BYTE *)(a2 + 32);
  v31 = -1LL;
  if (v30 < 64) {
    v31 = ~(-1LL << v30);
  }
  v32 = v31 & *(void *)(a2 + 56);
  v33 = (unint64_t)(v30 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain(a2);
  v34 = 0LL;
  while (2)
  {
    if (v32)
    {
      v35 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v36 = v35 | (v34 << 6);
LABEL_26:
      result = [(id)objc_opt_self(ASCViewRender) rootViewModelParseDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v36)];
      continue;
    }

    break;
  }

  v37 = v34 + 1;
  if (__OFADD__(v34, 1LL)) {
    goto LABEL_45;
  }
  if (v37 >= v33) {
    return (id)swift_release(a2);
  }
  v38 = *(void *)(v10 + 8 * v37);
  ++v34;
  if (v38) {
    goto LABEL_41;
  }
  v34 = v37 + 1;
  if (v37 + 1 >= v33) {
    return (id)swift_release(a2);
  }
  v38 = *(void *)(v10 + 8 * v34);
  if (v38) {
    goto LABEL_41;
  }
  v34 = v37 + 2;
  if (v37 + 2 >= v33) {
    return (id)swift_release(a2);
  }
  v38 = *(void *)(v10 + 8 * v34);
  if (v38)
  {
LABEL_41:
    v32 = (v38 - 1) & v38;
    v36 = __clz(__rbit64(v38)) + (v34 << 6);
    goto LABEL_26;
  }

  v39 = v37 + 3;
  if (v39 >= v33) {
    return (id)swift_release(a2);
  }
  v38 = *(void *)(v10 + 8 * v39);
  if (v38)
  {
    v34 = v39;
    goto LABEL_41;
  }

  while (1)
  {
    v34 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      break;
    }
    if (v34 >= v33) {
      return (id)swift_release(a2);
    }
    v38 = *(void *)(v10 + 8 * v34);
    ++v39;
    if (v38) {
      goto LABEL_41;
    }
  }

LABEL_22:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsDeletableSystemApp");
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }

    v49 = (v16 - 1) & v16;
    v51 = v17;
    uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_23:
    id v19 = *(void *)(*(void *)(v45 + 56) + 8 * v14);
    v48 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB60, &OBJC_CLASS___NSObject_ptr);
    v20 = *(void **)(v19 + 24);
    swift_retain(v19);
    v47 = [v20 id];
    v21 = *(int *)(v40 + 48);
    v22 = &v13[v21];
    v23 = v44;
    v24 = v44 + v21;
    v25 = type metadata accessor for App(0LL);
    v26 = *(void *)(v25 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v13, v23, v25);
    v27 = type metadata accessor for State(0LL);
    v28 = *(void *)(v27 - 8);
    v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16);
    v46 = v24;
    v30 = v29(v22, v24, v27);
    v31 = v41;
    v32 = App.id.getter(v30);
    v33 = AdamID.int64Value.getter(v32);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v43);
    v34 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v33];
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v25);
    v35 = v47;
    LOBYTE(v33) = static NSObject.== infix(_:_:)(v47);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v27);
    if ((v33 & 1) != 0) {
      sub_100039D60(*(void **)(v19 + 24), v46, 0LL);
    }
    swift_release(v19);
    uint64_t v12 = v51;
    uint64_t v11 = v49;
  }

  v18 = v12 + 5;
  if (v12 + 5 >= v38)
  {
LABEL_25:
    swift_release(v45);
    return;
  }

  NSErrorUserInfoKey v16 = *(void *)(v37 + 8 * v18);
  if (v16)
  {
    v17 = v12 + 5;
    goto LABEL_22;
  }

  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v17 >= v38) {
      goto LABEL_25;
    }
    NSErrorUserInfoKey v16 = *(void *)(v37 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_22;
    }
  }

    id v10 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    sub_10006BE0C((Swift::Int *)v17, *(id *)(*(void *)(a1 + 48) + 8 * v13));
  }

  NSErrorUserInfoKey v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  id v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    uint64_t v6 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_23;
    }
    id v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

  v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(void *)(v23 + 16);
  v26 = __OFADD__(v25, 1LL);
  v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_10006BE0C((Swift::Int *)&v13, *(id *)(*(void *)(a1 + 48) + 8 * v9));
  }

  uint64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    uint64_t v2 = v12;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    uint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }

    v24 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    v25 = -1LL << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(void *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
      goto LABEL_13;
    }
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    v27 = *(id *)(*(void *)(v2 + 48) + 8 * v26);
    v28 = static NSObject.== infix(_:_:)(v27);

    if ((v28 & 1) != 0) {
      break;
    }
    v29 = ~v25;
    while (1)
    {
      v26 = (v26 + 1) & v29;
      if (((*(void *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v26) & 1) == 0) {
        break;
      }
      v30 = *(id *)(*(void *)(v2 + 48) + 8 * v26);
      v31 = static NSObject.== infix(_:_:)(v30);

      if ((v31 & 1) != 0) {
        goto LABEL_50;
      }
    }

          v59 = (v13 - 1) & v13;
          v61 = v14;
          id v10 = __clz(__rbit64(v13)) + (v14 << 6);
        }

        NSErrorUserInfoKey v16 = *(void *)(v5 + 40);
        v17 = *(id *)(*(void *)(v11 + 48) + 8 * v10);
        v18 = NSObject._rawHashValue(seed:)(v16);
        id v19 = v5;
        v20 = -1LL << *(_BYTE *)(v5 + 32);
        v21 = v18 & ~v20;
        v22 = v21 >> 6;
        v23 = 1LL << v21;
        if (((1LL << v21) & *(void *)(v63 + 8 * (v21 >> 6))) != 0) {
          break;
        }
LABEL_6:

        uint64_t v5 = v19;
        uint64_t v9 = v59;
        uint64_t v6 = v61;
      }

      sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
      v24 = *(id *)(*(void *)(v19 + 48) + 8 * v21);
      v25 = static NSObject.== infix(_:_:)();

      if ((v25 & 1) == 0)
      {
        v26 = ~v20;
        for (i = v21 + 1; ; i = v28 + 1)
        {
          v28 = i & v26;
          uint64_t v5 = v19;
          v29 = *(id *)(*(void *)(v19 + 48) + 8 * v28);
          v30 = static NSObject.== infix(_:_:)();

          if ((v30 & 1) != 0)
          {

            v22 = v28 >> 6;
            v23 = 1LL << v28;
            goto LABEL_30;
          }
        }

        goto LABEL_6;
      }

      uint64_t v5 = v19;
LABEL_30:
      uint64_t v9 = v59;
      uint64_t v6 = v61;
      a1[v22] |= v23;
      v31 = __OFADD__(v58++, 1LL);
      if (v31) {
        goto LABEL_66;
      }
    }
  }

  v32 = 0LL;
  v57 = a3 + 56;
  v58 = 0LL;
  v33 = 1LL << *(_BYTE *)(a3 + 32);
  if (v33 < 64) {
    v34 = ~(-1LL << v33);
  }
  else {
    v34 = -1LL;
  }
  v35 = v34 & *(void *)(a3 + 56);
  v60 = (unint64_t)(v33 + 63) >> 6;
  v36 = a4 + 56;
  while (1)
  {
    if (v35)
    {
      v37 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      v64 = v32;
      v38 = v37 | (v32 << 6);
      goto LABEL_55;
    }

    v39 = v32 + 1;
    if (__OFADD__(v32, 1LL))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v39 >= v60) {
      goto LABEL_63;
    }
    v40 = *(void *)(v57 + 8 * v39);
    v41 = v32 + 1;
    if (!v40)
    {
      v41 = v32 + 2;
      if (v32 + 2 >= v60) {
        goto LABEL_63;
      }
      v40 = *(void *)(v57 + 8 * v41);
      if (!v40)
      {
        v41 = v32 + 3;
        if (v32 + 3 >= v60) {
          goto LABEL_63;
        }
        v40 = *(void *)(v57 + 8 * v41);
        if (!v40) {
          break;
        }
      }
    }

    v17 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    result = [(id)objc_opt_self(ASCViewRender) jsCallDidBeginWithTag:*(void *)(*((void *)v13 + 6) + 8 * v22)];
  }

  v25 = v23 + 4;
  if (v25 >= v18)
  {
LABEL_23:
    v26 = swift_release(v13);
    JSONContext.init()(v26);
    v27 = v47 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics;
    v54 = type metadata accessor for JSInitFailureObserver(0LL);
    v55 = (void *)sub_1000A76A0();
    v28 = sub_10002C328(v53);
    v29 = sub_1000A76E8(v27, (uint64_t)v28);
    v30 = v42;
    static JSONContext.initFailureObserver.getter(v29);
    v31 = sub_100029E18(&qword_10013D140);
    v32 = v49;
    JSONContext.addingValue<A>(_:forProperty:)(v53, v30, v31);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
    v33 = *(void (**)(char *, uint64_t))(v7 + 8);
    v34 = v50;
    v33(v10, v50);
    sub_100029F4C(v53);
    v35 = sub_1000B5430(v46);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v32, v34);
    v36 = *(unsigned __int8 *)(v7 + 80);
    v37 = (v36 + 24) & ~v36;
    v38 = swift_allocObject(v48, v37 + v45, v36 | 7);
    *(void *)(v38 + 16) = v13;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v38 + v37, v10, v34);
    v54 = type metadata accessor for SyncTaskScheduler(0LL);
    v55 = &protocol witness table for SyncTaskScheduler;
    v39 = sub_10002C328(v53);
    SyncTaskScheduler.init()(v39);
    v40 = sub_100029E18(v51);
    v41 = Promise.map<A>(on:_:)(v53, v52, v38, v40);
    swift_release(v35);
    swift_release(v38);
    sub_100029F4C(v53);
    v33(v32, v34);
    return (id)v41;
  }

  v24 = *(void *)&v14[8 * v25];
  if (v24)
  {
    v20 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v20 >= v18) {
      goto LABEL_23;
    }
    v24 = *(void *)&v14[8 * v20];
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    id v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_5:
    result = [(id)objc_opt_self(ASCViewRender) jsCallDidBeginWithTag:*(void *)(*((void *)v10 + 6) + 8 * v19)];
  }

  v22 = v20 + 4;
  if (v22 >= v15)
  {
LABEL_23:
    v23 = swift_release(v10);
    JSONContext.init()(v23);
    v24 = v45 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics;
    v49 = type metadata accessor for JSInitFailureObserver(0LL);
    v50 = (void *)sub_1000A76A0();
    v25 = sub_10002C328(v48);
    v26 = sub_1000A76E8(v24, (uint64_t)v25);
    v27 = v40;
    static JSONContext.initFailureObserver.getter(v26);
    v28 = sub_100029E18(&qword_10013D140);
    v29 = v46;
    JSONContext.addingValue<A>(_:forProperty:)(v48, v27, v28);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v42);
    v30 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31 = v47;
    v30(v7, v47);
    sub_100029F4C(v48);
    v32 = sub_1000B5430(v44);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v29, v31);
    v33 = *(unsigned __int8 *)(v4 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = swift_allocObject(&unk_100123D50, v34 + v43, v33 | 7);
    *(void *)(v35 + 16) = v10;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v35 + v34, v7, v31);
    v49 = type metadata accessor for SyncTaskScheduler(0LL);
    v50 = &protocol witness table for SyncTaskScheduler;
    v36 = sub_10002C328(v48);
    SyncTaskScheduler.init()(v36);
    v37 = type metadata accessor for LintedMetricsEvent(0LL);
    v38 = Promise.map<A>(on:_:)(v48, sub_1000A7924, v35, v37);
    swift_release(v32);
    swift_release(v35);
    sub_100029F4C(v48);
    v30(v29, v31);
    return (id)v38;
  }

  v21 = *(void *)&v11[8 * v22];
  if (v21)
  {
    v17 = v22;
    goto LABEL_22;
  }

  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v15) {
      goto LABEL_23;
    }
    v21 = *(void *)&v11[8 * v17];
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }

  a3 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_23:
  swift_bridgeObjectRelease(v5);
  *v29 = a3;
}

LABEL_23:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsIOSAppOnMacOS");
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  id v10 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

  __break(1u);
}

    id v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1LL << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v26 = v22 == v25;
        if (v22 == v25) {
          v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  NSErrorUserInfoKey v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    NSErrorUserInfoKey v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    uint64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    id v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1LL << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v26 = v22 == v25;
        if (v22 == v25) {
          v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  NSErrorUserInfoKey v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  id v15 = a1[v16];
  if (v15)
  {
    id v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    id v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    id v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    v44 = 0LL;
    memset(v154, 0, sizeof(v154));
    v153 = 0u;
  }

  swift_release(a2);
  v59 = v129;
  *(void *)&v153 = v129;
  swift_errorRetain(v129);
  v60 = sub_100029E18((uint64_t *)&unk_10013E900);
  v61 = v127;
  v62 = v128;
  if (swift_dynamicCast(v127, &v153, v60, v128, 0LL))
  {
    v63 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v135, v138, v134);
    v64 = type metadata accessor for MetricsLogger(0LL);
    swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
    id v3 = MetricsLogger.init(loggerName:configuration:)(1852797802LL, 0xE400000000000000LL, v63);
    swift_getErrorValue(v59, v150, v147);
    v65 = Error.localizedDescription.getter(v148, v149);
    *((void *)&v157 + 1) = &type metadata for String;
    v155 = (char *)v65;
    v156 = v66;
    v67 = v136;
    static LogMessage.safe(_:)(&v155);
    sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
    v68 = (uint64_t)v137;
    (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v137, v67, v145);
    sub_1000A0B60(0LL, 0LL, v68);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v61, v62);
  }

  else
  {
    swift_errorRelease(v153);
    *(void *)&v153 = v59;
    swift_errorRetain(v59);
    v69 = v123;
    uint64_t v2 = (void (*)(size_t, char *, uint64_t))v125;
    if (!swift_dynamicCast(v123, &v153, v60, v125, 0LL))
    {
      swift_errorRelease(v153);
      v103 = v135;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v135, v138, v134);
      v104 = type metadata accessor for MetricsLogger(0LL);
      swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
      id v3 = MetricsLogger.init(loggerName:configuration:)(0x74736F6E67616964LL, 0xEB00000000736369LL, v103);
      swift_getErrorValue(v59, v152, v151);
      v105 = Error.localizedDescription.getter(v151[1], v151[2]);
      *((void *)&v157 + 1) = &type metadata for String;
      v155 = (char *)v105;
      v156 = v106;
      v107 = v136;
      static LogMessage.safe(_:)(&v155);
      sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
      v108 = (uint64_t)v137;
      (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v137, v107, v145);
      sub_1000A0B60(0LL, 0LL, v108);
      goto LABEL_70;
    }

    v45 = v121;
    v33 = v126;
    (*(void (**)(char *, char *, void))(v121 + 32))(v126, v69, v2);
    v70 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v135, v138, v134);
    v71 = type metadata accessor for MetricsLogger(0LL);
    swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
    id v3 = MetricsLogger.init(loggerName:configuration:)(29546LL, 0xE200000000000000LL, v70);
    v72 = JSError.message.getter();
    *((void *)&v157 + 1) = &type metadata for String;
    v155 = (char *)v72;
    v156 = v73;
    v74 = v136;
    static LogMessage.safe(_:)(&v155);
    sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
    v40 = *(void *)(v142 + 32);
    v75 = (uint64_t)v137;
    ((void (*)(char *, char *, uint64_t))v40)(v137, v74, v145);
    v76 = sub_1000A0B60(0LL, 0LL, v75);
    v77 = JSError.line.getter(v76);
    if ((v78 & 1) == 0)
    {
      v79 = v77;
      LogMessage.init(stringLiteral:)(0x6E694C726F727265LL, 0xE900000000000065LL);
      v80 = v160;
      if ((swift_isUniquelyReferenced_nonNull_native(v160) & 1) == 0) {
        v80 = (void *)sub_10005118C(0LL, v80[2] + 1LL, 1, v80);
      }
      v82 = v80[2];
      v81 = v80[3];
      if (v82 >= v81 >> 1) {
        v80 = (void *)sub_10005118C(v81 > 1, v82 + 1, 1, v80);
      }
      v80[2] = v82 + 1;
      ((void (*)(char *, char *, uint64_t))v40)((char *)v80 + v143 + v82 * v144, v118, v145);
      v160 = v80;
      v83 = (char *)[objc_allocWithZone(NSNumber) initWithInteger:v79];
      *((void *)&v157 + 1) = sub_10006A178();
      v155 = v83;
      static LogMessage.safe(_:)(&v155);
      sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
      if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0) {
        v80 = (void *)sub_10005118C(0LL, v80[2] + 1LL, 1, v80);
      }
      v33 = v126;
      v85 = v80[2];
      v84 = v80[3];
      if (v85 >= v84 >> 1) {
        v80 = (void *)sub_10005118C(v84 > 1, v85 + 1, 1, v80);
      }
      v80[2] = v85 + 1;
      v77 = ((uint64_t (*)(char *, char *, uint64_t))v40)((char *)v80 + v143 + v85 * v144, v119, v145);
      v160 = v80;
    }

    v86 = JSError.column.getter(v77);
    if ((v87 & 1) == 0)
    {
      v88 = v86;
      LogMessage.init(stringLiteral:)(0x6C6F43726F727265LL, 0xEB000000006E6D75LL);
      v89 = v160;
      if ((swift_isUniquelyReferenced_nonNull_native(v160) & 1) == 0) {
        v89 = (void *)sub_10005118C(0LL, v89[2] + 1LL, 1, v89);
      }
      v91 = v89[2];
      v90 = v89[3];
      if (v91 >= v90 >> 1) {
        v89 = (void *)sub_10005118C(v90 > 1, v91 + 1, 1, v89);
      }
      v89[2] = v91 + 1;
      ((void (*)(char *, char *, uint64_t))v40)((char *)v89 + v143 + v91 * v144, v120, v145);
      v160 = v89;
      v92 = (char *)[objc_allocWithZone(NSNumber) initWithInteger:v88];
      *((void *)&v157 + 1) = sub_10006A178();
      v155 = v92;
      v93 = v116;
      static LogMessage.safe(_:)(&v155);
      sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
      if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0) {
        v89 = (void *)sub_10005118C(0LL, v89[2] + 1LL, 1, v89);
      }
      v33 = v126;
      v95 = v89[2];
      v94 = v89[3];
      if (v95 >= v94 >> 1) {
        v89 = (void *)sub_10005118C(v94 > 1, v95 + 1, 1, v89);
      }
      v89[2] = v95 + 1;
      v86 = ((uint64_t (*)(char *, char *, uint64_t))v40)((char *)v89 + v143 + v95 * v144, v93, v145);
      v160 = v89;
    }

    v96 = JSError.sourceURL.getter(v86);
    if (v97)
    {
      v31 = (char *)v96;
      v38 = v97;
      LogMessage.init(stringLiteral:)(0x5255656372756F73LL, 0xE90000000000004CLL);
      a2 = (size_t)v160;
      if ((swift_isUniquelyReferenced_nonNull_native(v160) & 1) == 0) {
        goto LABEL_73;
      }
      goto LABEL_60;
    }

LABEL_24:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsFree");
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

        __break(1u);
        goto LABEL_25;
      }

        uint64_t v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_1000445E4(v25, v38);
      }

      else
      {
        sub_100060108((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1LL << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        id v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          v31 = v28 == v30;
          if (v28 == v30) {
            v28 = 0LL;
          }
          v29 |= v31;
          v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        id v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      NSErrorUserInfoKey v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *NSErrorUserInfoKey v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_1000445E4(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  result = swift_release(v5);
  *id v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_25:
    v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(void *)(v5 + 56) + 40 * v21;
    if ((v43 & 1) != 0)
    {
      v30 = *(_OWORD *)v29;
      v31 = *(_OWORD *)(v29 + 16);
      v47 = *(void *)(v29 + 32);
      v45 = v30;
      v46 = v31;
    }

    else
    {
      sub_1000602DC(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain(v27);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v28, v27);
    result = Hasher._finalize()();
    v32 = -1LL << *(_BYTE *)(v8 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      id v15 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        v37 = v34 == v36;
        if (v34 == v36) {
          v34 = 0LL;
        }
        v35 |= v37;
        v38 = *(void *)(v12 + 8 * v34);
      }

      while (v38 == -1);
      id v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    NSErrorUserInfoKey v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    *NSErrorUserInfoKey v16 = v28;
    v16[1] = v27;
    v17 = *(void *)(v8 + 56) + 40 * v15;
    v18 = v45;
    id v19 = v46;
    *(void *)(v17 + 32) = v47;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v40;
  v23 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *v23 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  result = swift_release(v5);
  *id v3 = v8;
  return result;
}

LABEL_25:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsDSIDLess");
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferShouldInstallParentApp");
    if ((a1 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  __break(1u);
}

    uint64_t v12 = (v23 - 1) & v23;
    id v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 16 * v15;
    v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100060108(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (void *)(*(void *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000445E4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }

  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    id v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 16 * v15;
    v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (void *)(*(void *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (void *)(*(void *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }

  v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    id v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 16 * v15;
    v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_1000602DC(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (void *)(*(void *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(void *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain(v18);
  }

  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    id v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 8 * v15;
    v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    id v19 = *(void *)(v2 + 56) + v18;
    v20 = *(void *)v19;
    v21 = *(void *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    v23 = *(void *)(v4 + 56) + v18;
    *(void *)v23 = v20;
    *(void *)(v23 + 8) = v21;
    *(_BYTE *)(v23 + 16) = v22;
    v24 = v17;
    result = (void *)sub_100048494(v20, v21, v22);
  }

  v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    id v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 8 * v15;
    v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain(v17);
  }

  v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v25 - 1) & v25;
    id v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 8 * v15;
    v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    id v19 = *(void *)(v2 + 56) + v18;
    v20 = *(void *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(void *)(v22 + 16) = v20;
    v23 = v17;
    result = (void *)swift_bridgeObjectRetain(v20);
  }

  v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    uint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    id v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    id v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *id v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain(v17);
  }

  v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    id v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 8 * v15;
    v17 = *(void **)(*(void *)(v2 + 48) + v16);
    v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    result = v18;
  }

  v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

        sub_100029EE0(v75, v76);
        v50._countAndFlagsBits = 0xD000000000000016LL;
        v50._object = (void *)0x80000001000FC4F0LL;
        v45 = Localizer.string(forKey:)(v50)._object;
        goto LABEL_26;
      }
    }

    swift_bridgeObjectRelease(v41);
    sub_1000388F0((uint64_t)v74, (uint64_t)v75);
    goto LABEL_25;
  }

  v46 = v73;
  if (v17 != enum case for State.buyable(_:))
  {
    if (v17 == enum case for State.installed(_:))
    {
      v47 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
      sub_100029EE0(v74, v74[3]);
      v48._object = (void *)0x80000001000FC4D0LL;
      v48._countAndFlagsBits = 0xD00000000000001BLL;
      v49 = Localizer.string(forKey:)(v48)._object;
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v49);
      v30 = objc_msgSend(v47, "textMetadataWithTitle:subtitle:", v29, 0, v72);
      goto LABEL_8;
    }

    if (v17 != enum case for State.unknown(_:)) {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
  }

  if ((objc_msgSend(v46, "flags", v72) & 0x40) != 0)
  {
    v33 = [(id)objc_opt_self(ASCOfferMetadata) redownloadMetadata];
    return v33;
  }

  v53 = [v46 titles];
  type metadata accessor for ASCOfferTitleVariant(0LL);
  v55 = v54;
  v56 = sub_100067C60();
  v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v53, v55, &type metadata for String, v56);

  if (!*(void *)(v57 + 16)) {
    goto LABEL_36;
  }
  v58 = v72;
  v59 = sub_10008D56C(v58);
  if ((v60 & 1) == 0)
  {

LABEL_36:
    swift_bridgeObjectRelease(v57);
    sub_1000388F0((uint64_t)v74, (uint64_t)v75);
LABEL_37:
    sub_100029EE0(v75, v76);
    v62._countAndFlagsBits = 0xD000000000000015LL;
    v62._object = (void *)0x80000001000FC440LL;
    v61 = Localizer.string(forKey:)(v62)._object;
    goto LABEL_38;
  }

  v61 = *(void **)(*(void *)(v57 + 56) + 16 * v59 + 8);
  swift_bridgeObjectRetain(v61);

  swift_bridgeObjectRelease(v57);
  sub_1000388F0((uint64_t)v74, (uint64_t)v75);
  if (!v61) {
    goto LABEL_37;
  }
LABEL_38:
  sub_100029F4C(v75);
  v63 = [v46 subtitles];
  v64 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v63, v55, &type metadata for String, v56);

  if (*(void *)(v64 + 16))
  {
    v65 = v72;
    v66 = sub_10008D56C(v65);
    if ((v67 & 1) != 0)
    {
      v68 = *(void *)(*(void *)(v64 + 56) + 16 * v66 + 8);
      swift_bridgeObjectRetain(v68);
    }

    else
    {
      v68 = 0LL;
    }
  }

  else
  {
    v68 = 0LL;
  }

  swift_bridgeObjectRelease(v64);
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  if (v68)
  {
    v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v68);
  }

  else
  {
    v70 = 0LL;
  }

  v71 = [(id)objc_opt_self(ASCOfferMetadata) textMetadataWithTitle:v69 subtitle:v70];

  return v71;
}

    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(void *)(v12 + 48);
    v30 = *(void *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(void *)(v14 + 40);
    v33 = sub_100027978(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1LL << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        v39 = v36 == v38;
        if (v36 == v38) {
          v36 = 0LL;
        }
        v37 |= v39;
        v40 = *(void *)(v19 + 8 * v36);
      }

      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)( *(void *)(v14 + 48) + v22 * v30,  v11,  v9);
    ++*(void *)(v14 + 16);
    uint64_t v12 = v28;
  }

  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_41;
        }
        if (v21 >= v44) {
          goto LABEL_35;
        }
        v26 = v45[v21];
        ++v27;
        if (v26) {
          goto LABEL_25;
        }
      }
    }

    v21 = v27;
    goto LABEL_25;
  }

    id v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(void *)(v13 + 48) + v29 * v25, v9);
    v30 = *(void *)(v15 + 40);
    v31 = sub_100027978(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1LL << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v37 = v34 == v36;
        if (v34 == v36) {
          v34 = 0LL;
        }
        v35 |= v37;
        v38 = *(void *)(v20 + 8 * v34);
      }

      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))( *(void *)(v15 + 48) + v23 * v29,  v12,  v9);
    ++*(void *)(v15 + 16);
  }

  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2LL);
    uint64_t v7 = v39;
    goto LABEL_37;
  }

  v27 = *(void *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v22 >= v41) {
      goto LABEL_35;
    }
    v27 = *(void *)(v40 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

        v17 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }

      v26 = *(unsigned __int16 *)(*(void *)(v10 + 48) + 2 * v22);
      v27 = *(void *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + v41))(v9, *(void *)(v10 + 56) + v27 * v22, v6);
      result = static Hasher._hash(seed:bytes:count:)(*(void *)(v12 + 40), v26, 2LL);
      v28 = -1LL << *(_BYTE *)(v12 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1LL << v29) & ~*(void *)(v18 + 8 * (v29 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          v33 = v30 == v32;
          if (v30 == v32) {
            v30 = 0LL;
          }
          v31 |= v33;
          v34 = *(void *)(v18 + 8 * v30);
        }

        while (v34 == -1);
        v20 = __clz(__rbit64(~v34)) + (v30 << 6);
      }

      *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      *(_WORD *)(*(void *)(v12 + 48) + 2 * v20) = v26;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 56) + v27 * v20,  v9,  v6);
      ++*(void *)(v12 + 16);
    }
  }

  result = swift_release(v10);
LABEL_42:
  *id v3 = v12;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_26:
  -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsContingentOffer");
  if ((a1 & 0x800) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((a1 & 0x1000) != 0) {
LABEL_14:
  }
    -[NSMutableArray addObject:](v3, "addObject:", @"ASCOfferIsAppDistributionOffer");
LABEL_15:
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v3, "componentsJoinedByString:", @" | "));

  return v4;
}

      v116 = v113;
      return swift_errorRelease(v116);
    }

    result = static os_signpost_type_t.event.getter(v43);
    if (result == a1)
    {
      v90 = [v182 attributes];
      v57 = v179;
      if (v90)
      {
        v92 = v90;
        v93 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v90,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

        if (*(void *)(v93 + 16))
        {
          v94 = sub_10008D45C(1734437958LL, 0xE400000000000000LL);
          if ((v95 & 1) != 0)
          {
            v96 = (uint64_t *)(*(void *)(v93 + 56) + 16 * v94);
            v98 = *v96;
            v97 = v96[1];
            swift_bridgeObjectRetain(v97);
            swift_bridgeObjectRelease(v93);
            if (v98 == 1702195828 && v97 == 0xE400000000000000LL)
            {
              v99 = swift_bridgeObjectRelease(0xE400000000000000LL).n128_u64[0];
              v100 = 1;
              v101 = v182;
            }

            else
            {
              v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v97, 1702195828LL, 0xE400000000000000LL, 0LL);
              v101 = v182;
              if ((v158 & 1) != 0)
              {
                v99 = swift_bridgeObjectRelease(v97).n128_u64[0];
                v100 = 1;
              }

              else
              {
                if (v98 == 0x65736C6166LL && v97 == 0xE500000000000000LL)
                {
                  v159 = 0xE500000000000000LL;
                }

                else
                {
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v98, v97, 0x65736C6166LL, 0xE500000000000000LL, 0LL) & 1) == 0)
                  {
                    v165 = [v101 name];
                    v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
                    v168 = v167;

                    v169 = sub_10006A070();
                    v113 = swift_allocError(&type metadata for ASCSignpostGroupError, v169, 0LL, 0LL);
                    *(void *)v170 = v166;
                    *(void *)(v170 + 8) = v168;
                    *(void *)(v170 + 16) = v98;
                    *(void *)(v170 + 24) = v97;
                    *(_BYTE *)(v170 + 32) = 4;
                    v181();
                    goto LABEL_26;
                  }

                  v159 = v97;
                }

                v99 = swift_bridgeObjectRelease(v159).n128_u64[0];
                v100 = 0;
              }
            }

            v160 = objc_msgSend(v101, "name", *(double *)&v99);
            v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
            v163 = v162;

            v164 = (uint64_t)v175;
            *v175 = v161;
            *(void *)(v164 + 8) = v163;
            *(_BYTE *)(v164 + 16) = v100;
            swift_storeEnumTagMultiPayload(v164, v173, 2LL);
            v176((uint64_t *)v164, v174);
            return sub_10006A0B4(v164);
          }
        }

        *(void *)&v91 = swift_bridgeObjectRelease(v93).n128_u64[0];
      }

      v124 = objc_msgSend(v182, "attributes", v91);
      if (v124)
      {
        v126 = v124;
        v127 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v124,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

        if (*(void *)(v127 + 16))
        {
          v128 = sub_10008D45C(0x676E69727453LL, 0xE600000000000000LL);
          if ((v129 & 1) != 0)
          {
            v130 = (uint64_t *)(*(void *)(v127 + 56) + 16 * v128);
            v132 = *v130;
            v131 = v130[1];
            swift_bridgeObjectRetain(v131);
            *(void *)&v133 = swift_bridgeObjectRelease(v127).n128_u64[0];
            v134 = objc_msgSend(v182, "name", v133);
            v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
            v137 = v136;

            v138 = v175;
            *v175 = v135;
            v138[1] = v137;
            v138[2] = v132;
            v138[3] = v131;
            swift_storeEnumTagMultiPayload(v138, v173, 3LL);
            v176(v138, v174);
            return sub_10006A0B4((uint64_t)v138);
          }
        }

        *(void *)&v125 = swift_bridgeObjectRelease(v127).n128_u64[0];
      }

      v139 = objc_msgSend(v182, "beginDate", v125);
      if (v139)
      {
        v140 = v139;
        v141 = v177;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v139);

        v142 = v178;
        v143 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
        v143(v15, v141, v57);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56))(v15, 0LL, 1LL, v57);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(v15, 1LL, v57) != 1)
        {
          v144 = v172;
          v143(v172, v15, v57);
          v145 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
          v171 = a9;
          v146 = v175;
          v147 = (char *)v175 + v145;
          v148 = objc_msgSend(v182, "name", a9);
          v149 = v142;
          v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
          v152 = v151;

          *v146 = v150;
          v146[1] = v152;
          (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v147, v144, v57);
          swift_storeEnumTagMultiPayload(v146, v173, 4LL);
          v176(v146, v174);
          sub_10006A0B4((uint64_t)v146);
          v66 = *(uint64_t (**)(char *, uint64_t))(v149 + 8);
          v67 = v144;
          return v66(v67, v57);
        }
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v178 + 56))(v15, 1LL, 1LL, v57);
      }

      sub_10002E92C((uint64_t)v15, (uint64_t *)&unk_10013F9B0);
      v153 = [v182 name];
      v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
      v156 = v155;

      v157 = sub_10006A070();
      v73 = swift_allocError(&type metadata for ASCSignpostGroupError, v157, 0LL, 0LL);
      *(void *)v122 = v154;
      *(void *)(v122 + 8) = v156;
      *(void *)(v122 + 16) = 0LL;
      *(void *)(v122 + 24) = 0LL;
      v123 = 5;
LABEL_42:
      *(_BYTE *)(v122 + 32) = v123;
      v181();
      goto LABEL_43;
    }
  }

  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1LL << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          v29 = v26 == v28;
          if (v26 == v28) {
            v26 = 0LL;
          }
          v27 |= v29;
          v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *id v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  result = swift_release(v3);
  NSMutableArray *v2 = v6;
  return result;
}

        uint64_t v9 = (v16 - 1) & v16;
        uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }

      v18 = *(void *)(*(void *)(v3 + 48) + 8 * v14);
      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v19, v21);
      v22 = Hasher._finalize()();
      swift_bridgeObjectRelease(v21);
      v23 = -1LL << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          v28 = v25 == v27;
          if (v25 == v27) {
            v25 = 0LL;
          }
          v26 |= v28;
          v29 = *(void *)(v10 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
      ++*(void *)(v6 + 16);
    }
  }

  swift_release(v3);
  NSMutableArray *v2 = v6;
}

        uint64_t v11 = (v18 - 1) & v18;
        NSErrorUserInfoKey v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      v21 = -1LL << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          v26 = v23 == v25;
          if (v23 == v25) {
            v23 = 0LL;
          }
          v24 |= v26;
          v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  result = swift_release(v3);
  NSMutableArray *v2 = v6;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      v23 = -1LL << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        NSErrorUserInfoKey v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          v28 = v25 == v27;
          if (v25 == v27) {
            v25 = 0LL;
          }
          v26 |= v28;
          v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        NSErrorUserInfoKey v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  result = swift_release(v4);
  *id v3 = v7;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        NSErrorUserInfoKey v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      v21 = -1LL << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          v26 = v23 == v25;
          if (v23 == v25) {
            v23 = 0LL;
          }
          v24 |= v26;
          v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  result = swift_release(v3);
  NSMutableArray *v2 = v6;
  return result;
}

  type metadata accessor for ASCMetricsInvocationPoint(0LL);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v34);
  __break(1u);
}

    id v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1LL << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v29 = v26 == v28;
        if (v26 == v28) {
          v26 = 0LL;
        }
        v27 |= v29;
        v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *id v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(void **)(*(void *)(v3 + 48) + 8 * v14);
    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;
    Hasher.init(_seed:)(v34);
    v22 = v18;
    String.hash(into:)(v34, v19, v21);
    v23 = Hasher._finalize()();
    swift_bridgeObjectRelease(v21);
    v24 = -1LL << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v29 = v26 == v28;
        if (v26 == v28) {
          v26 = 0LL;
        }
        v27 |= v29;
        v30 = *(void *)(v10 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v12 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(void *)(*(void *)(v6 + 48) + 8 * v12) = v22;
    ++*(void *)(v6 + 16);
  }

  v17 = v15 + 3;
  if (v17 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  NSErrorUserInfoKey v16 = *(void *)(v32 + 8 * v17);
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_36;
    }
    NSErrorUserInfoKey v16 = *(void *)(v32 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    NSErrorUserInfoKey v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    v21 = -1LL << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v26 = v23 == v25;
        if (v23 == v25) {
          v23 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  id v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(void *)(v7 + 40);
    v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1LL << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      NSErrorUserInfoKey v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v29 = v26 == v28;
        if (v26 == v28) {
          v26 = 0LL;
        }
        v27 |= v29;
        v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      NSErrorUserInfoKey v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
    ++*(void *)(v7 + 16);
  }

  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2LL);
    id v3 = v31;
    goto LABEL_38;
  }

  v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    id v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    id v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    NSErrorUserInfoKey v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    v21 = -1LL << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v26 = v23 == v25;
        if (v23 == v25) {
          v23 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  id v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

      uint64_t v11 = (v15 - 1) & v15;
      uint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }

    sub_1000602DC(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_100060108(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_1000602DC((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      v27 = 0LL;
      v28 = 0LL;
      sub_10002E92C((uint64_t)v34, (uint64_t *)&unk_10013FB70);
      swift_bridgeObjectRelease(v28);
      sub_10002EB74(a1);
      swift_release(v3);
      return 0LL;
    }

    v17 = v27;
    v18 = v28;
    sub_100060108((uint64_t)v35 + 8, (uint64_t)v29);
    sub_10002E92C((uint64_t)v34, (uint64_t *)&unk_10013FB70);
    sub_1000445E4(v29, v30);
    *(void *)&v31 = v17;
    *((void *)&v31 + 1) = v18;
    sub_1000445E4(v30, v32);
    id v19 = v31;
    sub_1000445E4(v32, v33);
    sub_1000445E4(v33, &v31);
    result = sub_10008D45C(v19, *((uint64_t *)&v19 + 1));
    v20 = result;
    if ((v21 & 1) != 0)
    {
      uint64_t v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v9 + 8));
      *(_OWORD *)uint64_t v9 = v19;
      id v10 = (void *)(v3[7] + 32 * v20);
      sub_100029F4C(v10);
      result = (unint64_t)sub_1000445E4(&v31, v10);
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    result = (unint64_t)sub_1000445E4(&v31, (_OWORD *)(v3[7] + 32 * result));
    v22 = v3[2];
    v23 = __OFADD__(v22, 1LL);
    v24 = v22 + 1;
    if (v23) {
      goto LABEL_36;
    }
    v3[2] = v24;
LABEL_8:
    uint64_t v8 = v13;
    uint64_t v6 = v11;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

    swift_retain(a3);
    sub_100090CD8(a1, a2, v27, a3);
    return;
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

id sub_10001AB28(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v7 = -[NSSet initWithObjects:](v5, "initWithObjects:", v6, objc_opt_class(&OBJC_CLASS___NSString), 0LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 decodeObjectOfClasses:v7 forKey:v3]);

  return v8;
}

id sub_10001ABD0()
{
  if (qword_100140800 != -1) {
    dispatch_once(&qword_100140800, &stru_10011F2C8);
  }
  return (id)qword_100140808;
}

void sub_10001AC10(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___ASCAlertOffer);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___ASCAppOffer);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___ASCArcadeOffer);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___ASCOfferAlertOffer);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___ASCStatefulOffer);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___ASCURLOffer);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___ASCContingentOffer);
  uint64_t v9 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  v2,  v3,  v4,  v5,  v6,  v7,  v8,  objc_opt_class(&OBJC_CLASS___ASCAppDistributionOffer),  0LL);
  id v10 = (void *)qword_100140808;
  qword_100140808 = (uint64_t)v9;
}

id sub_10001ACFC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = sub_10001ABD0();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 decodeObjectOfClasses:v6 forKey:v3]);

  return v7;
}

LABEL_66:
                              id v19 = 0;
LABEL_67:

                              v18 = v61;
                              NSErrorUserInfoKey v16 = v74;
                              goto LABEL_68;
                            }
                          }

                          else if (v39 == v40)
                          {
                            goto LABEL_36;
                          }

                          id v19 = 0;
LABEL_70:

                          v36 = v66;
                          goto LABEL_71;
                        }
                      }

                      else if (v34 == v35)
                      {
                        goto LABEL_33;
                      }

                      id v19 = 0;
LABEL_71:

                      v31 = v68;
                      goto LABEL_72;
                    }
                  }

                  else if (v29 == v30)
                  {
                    goto LABEL_30;
                  }

                  id v19 = 0;
LABEL_72:

                  v23 = v70;
                  v21 = v71;
                  goto LABEL_73;
                }
              }

              else if (v21 == (void *)v22)
              {
                goto LABEL_27;
              }

              id v19 = 0;
LABEL_73:

              goto LABEL_74;
            }

LABEL_40:
            id v19 = 0;
LABEL_74:

            goto LABEL_75;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        id v19 = 0;
LABEL_75:

        goto LABEL_76;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    id v19 = 0;
LABEL_76:

    goto LABEL_77;
  }

  id v19 = 0;
LABEL_77:

  return v19;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_41:
  __break(1u);
}

LABEL_27:
                uint64_t v12 = 0;
LABEL_33:

                goto LABEL_34;
              }
            }

            else if (v17 == (void *)v18)
            {
              goto LABEL_17;
            }

            uint64_t v12 = 0;
LABEL_34:

            goto LABEL_35;
          }
        }

        else if (v14 == (void *)v15)
        {
          goto LABEL_14;
        }

        uint64_t v12 = 0;
LABEL_35:

        goto LABEL_10;
      }
    }
  }

  uint64_t v12 = 0;
LABEL_10:

  return v12;
}

  __break(1u);
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    id v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 16 * v15;
    v17 = (void *)(*(void *)(v2 + 48) + v16);
    v18 = v17[1];
    id v19 = (void *)(*(void *)(v4 + 48) + v16);
    *id v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }

  v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    id v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    NSErrorUserInfoKey v16 = 8 * v15;
    v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    result = v17;
  }

  v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    id v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(void *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v11 + 48) + v23,  v8,  v5);
  }

  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    id v4 = v28;
    goto LABEL_30;
  }

  v25 = *(void *)(v13 + 8 * v26);
  if (v25)
  {
    NSErrorUserInfoKey v16 = v26;
    goto LABEL_27;
  }

  while (1)
  {
    NSErrorUserInfoKey v16 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_28;
    }
    v25 = *(void *)(v13 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    id v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v13 = (v20 - 1) & v20;
    NSErrorUserInfoKey v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    result = v18;
  }

  v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    id v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    id v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    id v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v6 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    v18 = 16 * v13;
    id v19 = (void *)(*(void *)(a1 + 48) + 16 * v13);
    v20 = v19[1];
    v21 = (uint64_t *)(*(void *)(a1 + 56) + v18);
    v23 = *v21;
    v22 = v21[1];
    *(void *)&v42[0] = *v19;
    *((void *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_1000445E4(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_1000445E4(v41, v42);
    sub_1000445E4(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1LL << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)]) != 0)
    {
      id v10 = __clz(__rbit64((-1LL << v25) & ~*(void *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v29 = v26 == v28;
        if (v26 == v28) {
          v26 = 0LL;
        }
        v27 |= v29;
        v30 = *(void *)&v7[8 * v26];
      }

      while (v30 == -1);
      id v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(void *)(v11 + 32) = v36;
    result = (uint64_t)sub_1000445E4(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_10002EB74(a1);
    return (uint64_t)v3;
  }

  id v15 = *(void *)(v32 + 8 * v17);
  if (v15)
  {
    NSErrorUserInfoKey v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    NSErrorUserInfoKey v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v31) {
      goto LABEL_37;
    }
    id v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_10002EB74(v52);
    return swift_release(v58);
  }

  sub_10008DBE0(v21, a4 & 1);
  v23 = sub_10008D45C(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v22 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_100060108((uint64_t)v49, (uint64_t)v48);
    sub_100029F4C(v49);
    swift_bridgeObjectRelease(v14);
    v25 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v18);
    sub_100029F4C(v25);
    sub_1000445E4(v48, v25);
    goto LABEL_16;
  }

uint64_t sub_10001E2C8()
{
  if (qword_100140810 != -1) {
    dispatch_once(&qword_100140810, &stru_10011F318);
  }
  int v0 = dword_100140818;
  uint64_t state64 = 0LL;
  uint64_t state = notify_get_state(dword_100140818, &state64);
  if ((_DWORD)state)
  {
    uint64_t v2 = state;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000E1620(v2);
    }
  }

  else
  {
    uint64_t v3 = notify_set_state(v0, ++state64);
    if ((_DWORD)v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000E1598(v4);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Incremented re-bootstrap counter",  v6,  2u);
    }
  }

  return notify_post("com.apple.appstorecomponentsd.rebootstrap");
}

uint64_t sub_10001E3D8(void *a1)
{
  id v1 = a1;
  if (os_variant_has_internal_content("com.apple.appstorecomponentsd"))
  {
    int out_token = 0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10001E4B4;
    v6[3] = &unk_10011F2F8;
    id v7 = v1;
    uint64_t v2 = notify_register_dispatch("com.apple.appstorecomponentsd.rebootstrap-for-qa", &out_token, &_dispatch_main_q, v6);
    if ((_DWORD)v2)
    {
      uint64_t v3 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000E16A8(v3);
      }
      uint64_t v4 = 0xFFFFFFFFLL;
      int out_token = -1;
    }

    else
    {
      uint64_t v4 = out_token;
    }
  }

  else
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t sub_10001E4B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001E4C0(int a1)
{
  if (a1 != -1)
  {
    uint64_t v1 = notify_cancel(a1);
    if ((_DWORD)v1)
    {
      uint64_t v2 = v1;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000E1730(v2);
      }
    }
  }

void sub_10001E50C(id a1)
{
  uint64_t v1 = notify_register_check("com.apple.appstorecomponentsd.rebootstrap", &dword_100140818);
  if ((_DWORD)v1)
  {
    uint64_t v2 = v1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000E17B8(v2);
    }
    dword_100140818 = -1;
  }

void sub_10001E56C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

uint64_t sub_10001E59C()
{
  uint64_t result = _set_user_dir_suffix("com.apple.appstorecomponentsd");
  if ((result & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000E1840();
    }
    exit(1);
  }

  return result;
}

void sub_10001E5DC(uint64_t a1)
{
  if (os_variant_has_internal_content("com.apple.appstorecomponentsd"))
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Environment variables (%{public}s):",  buf,  0xCu);
    }

    context = objc_autoreleasePoolPush();
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 environment]);

    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v9]);
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138543618;
            uint64_t v18 = v9;
            __int16 v19 = 2114;
            v20 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%{public}@=%{public}@",  buf,  0x16u);
          }
        }

        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
      }

      while (v6);
    }

    int v11 = malloc_engaged_nano();
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v18) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "malloc_engaged_nano=%{public}d",  buf,  8u);
    }

    if (v11)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000E18C4();
      }
    }

    objc_autoreleasePoolPop(context);
  }

unint64_t ASCSignpostTagCreateForProcess(unint64_t a1, int a2)
{
  if (!(a1 >> 47)) {
    return a2 | (a1 << 17);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001FE98;
  block[3] = &unk_10011F338;
  block[4] = a1;
  if (qword_100140820 != -1) {
    dispatch_once(&qword_100140820, block);
  }
  return a1 + a2;
}

void sub_10001FE98(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_1000E1A74(a1);
  }
}

unint64_t ASCSignpostTagCreate(unint64_t a1)
{
  pid_t v2 = getpid();
  return ASCSignpostTagCreateForProcess(a1, v2);
}

unint64_t ASCSignpostTagUnique()
{
  do
    unint64_t v0 = __ldxr(&qword_10013BB78);
  while (__stxr(v0 + 1, &qword_10013BB78));
  pid_t v1 = getpid();
  return ASCSignpostTagCreateForProcess(v0, v1);
}

unint64_t ASCSignpostTagFromIDInProcess(void *a1, int a2)
{
  return ASCSignpostTagCreateForProcess((unint64_t)[a1 int64value], a2);
}

LABEL_39:
            __int16 v19 = 0;
LABEL_54:

            goto LABEL_55;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        __int16 v19 = 0;
LABEL_55:

        goto LABEL_56;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    __int16 v19 = 0;
LABEL_56:

    goto LABEL_57;
  }

  __int16 v19 = 0;
LABEL_57:

  return v19;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          __int128 v13 = 0LL;
          uint64_t v8 = 1LL;
          goto LABEL_52;
        }

        __break(1u);
        goto LABEL_71;
      }

      __int128 v13 = (v8 - 48);
      if (v9 != 1)
      {
        __int128 v13 = 10LL * (v8 - 48) + (BYTE1(v8) - 48);
        v25 = v9 - 2;
        if (v9 != 2)
        {
          v26 = (unsigned __int8 *)&v37 + 2;
          while (1)
          {
            v27 = *v26 - 48;
            if (v27 > 9) {
              goto LABEL_39;
            }
            v28 = 10 * v13;
            __int128 v13 = v28 + v27;
            uint64_t v8 = 0LL;
            ++v26;
            if (!--v25) {
              goto LABEL_52;
            }
          }
        }
      }
    }

    sub_10002EB74(a1);
    return;
  }

    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

ASCURLOffer *sub_100021328( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, BOOL a10)
{
  id v11 = a1;
  id v12 = a2;
  __int128 v13 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ does not have case with value %@",  v11,  v12);
  __int128 v14 = objc_alloc(&OBJC_CLASS___NSException);
  v26[0] = @"enumName";
  v26[1] = @"enumValue";
  v27[0] = v11;
  v27[1] = v12;
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v27,  v26,  2LL));
  __int128 v16 =  -[NSException initWithName:reason:userInfo:]( v14,  "initWithName:reason:userInfo:",  @"ASCUnknownEnumCaseException",  v13,  v15);

  objc_exception_throw(v16);
  return -[ASCURLOffer initWithID:titles:subtitles:flags:ageRating:metrics:url:isSensitive:]( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  a9,  a10);
}

LABEL_34:
            id v19 = 0;
LABEL_44:

            goto LABEL_45;
          }
        }

        else if (v13 == (void *)v14)
        {
          goto LABEL_13;
        }

        id v19 = 0;
LABEL_45:

        goto LABEL_46;
      }
    }

    else if (v10 == (void *)v11)
    {
      goto LABEL_10;
    }

    id v19 = 0;
LABEL_46:

    goto LABEL_47;
  }

  id v19 = 0;
LABEL_47:

  return v19;
}

              sub_10002EB74(v1);
              return;
            }
          }
        }
      }
    }

    id v12 = (v24 - 1) & v24;
    SEL v18 = __clz(__rbit64(v24)) + (v11 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

          uint64_t v7 = 0LL;
          uint64_t v9 = 1;
          goto LABEL_37;
        }

        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v7 = (result - 48);
      SEL v18 = v3 - 1;
      if (v18)
      {
        id v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          id v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          id v21 = 10 * v7;
          uint64_t v7 = v21 + v20;
          uint64_t v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

void sub_1000231C8(uint64_t a1)
{
  id v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subsystem]);
  pid_t v2 = (const char *)[v6 UTF8String];
  id v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) category]);
  os_log_t v4 = os_log_create(v2, (const char *)[v3 UTF8String]);
  id v5 = (void *)qword_100140830;
  qword_100140830 = (uint64_t)v4;
}

void sub_100023FF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    id v27 = v6;
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCWorkspace log](&OBJC_CLASS___ASCWorkspace, "log"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_1000E1FC0(v5, v8);
    }

    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v36;
LABEL_6:
      uint64_t v13 = 0LL;
      while (1)
      {
        if (*(void *)v36 != v12) {
          objc_enumerationMutation(v9);
        }
        __int128 v14 = *(void **)(*((void *)&v35 + 1) + 8 * v13);
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 targetApplicationRecord]);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleIdentifier]);
        unsigned __int8 v17 = [v16 isEqualToString:*(void *)(a1 + 32)];

        if ((v17 & 1) != 0) {
          break;
        }
        if (v11 == (id)++v13)
        {
          id v11 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
          if (v11) {
            goto LABEL_6;
          }
          goto LABEL_12;
        }
      }

      id v18 = v14;

      if (!v18) {
        goto LABEL_17;
      }
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCWorkspace log](&OBJC_CLASS___ASCWorkspace, "log"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Found valid universal link, attempting to open",  buf,  2u);
      }

      id v20 = objc_alloc_init(&OBJC_CLASS____LSOpenConfiguration);
      [v20 setFrontBoardOptions:*(void *)(a1 + 40)];
      [v20 setIgnoreAppLinkEnabledProperty:1];
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_1000243A0;
      v28[3] = &unk_10011F360;
      id v21 = *(id *)(a1 + 48);
      uint64_t v22 = *(void *)(a1 + 56);
      id v29 = v21;
      uint64_t v30 = v22;
      id v31 = *(id *)(a1 + 32);
      id v32 = *(id *)(a1 + 64);
      id v33 = *(id *)(a1 + 40);
      [v18 openWithConfiguration:v20 completionHandler:v28];
    }

    else
    {
LABEL_12:

LABEL_17:
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCWorkspace log](&OBJC_CLASS___ASCWorkspace, "log"));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_1000E1F00(a1, v23);
      }

      id v18 = objc_alloc_init(&OBJC_CLASS____LSOpenConfiguration);
      [v18 setFrontBoardOptions:*(void *)(a1 + 40)];
      [*(id *)(a1 + 56) openApplicationWithBundleIdentifier:*(void *)(a1 + 32) configuration:v18 pendingResult:*(void *)(a1 + 48)];
    }

    uint64_t v7 = v27;
    goto LABEL_25;
  }

  int v24 = *(unsigned __int8 *)(a1 + 72);
  v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCWorkspace log](&OBJC_CLASS___ASCWorkspace, "log"));
  v26 = v25;
  if (v24)
  {
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_1000E1EC0(v26);
    }

    id v18 = objc_alloc_init(&OBJC_CLASS____LSOpenConfiguration);
    [v18 setFrontBoardOptions:*(void *)(a1 + 40)];
    [*(id *)(a1 + 56) openApplicationWithBundleIdentifier:*(void *)(a1 + 32) configuration:v18 pendingResult:*(void *)(a1 + 48)];
LABEL_25:

    goto LABEL_26;
  }

  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Found non-universal link, opening via open resource operation",  buf,  2u);
  }

  [*(id *)(a1 + 56) openApplicationWithBundleIdentifier:*(void *)(a1 + 32) usingOpenResourceOperationWithPayloadURL:*(void *)(a1 + 64) options:*(void *)(a1 + 40) pendingResult:*(void *)(a1 + 48)];
LABEL_26:
}

void sub_1000243A0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCWorkspace log](&OBJC_CLASS___ASCWorkspace, "log"));
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Successfully opened universal link", v8, 2u);
    }

    [*(id *)(a1 + 32) finishWithSuccess];
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000E2044();
    }

    [*(id *)(a1 + 40) openApplicationWithBundleIdentifier:*(void *)(a1 + 48) usingOpenResourceOperationWithPayloadURL:*(void *)(a1 + 56) options:*(void *)(a1 + 64) pendingResult:*(void *)(a1 + 32)];
  }
}

void sub_100024648(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ASCWorkspace log](&OBJC_CLASS___ASCWorkspace, "log"));
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Open application with bundle ID succeeded.",  v8,  2u);
    }

    [*(id *)(a1 + 32) finishWithSuccess];
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000E20A4();
    }

    [*(id *)(a1 + 32) finishWithError:v5];
  }
}

void sub_100024880( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1000248E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.AppStoreComponents", "ASCWorkspace");
  pid_t v2 = (void *)qword_100140848;
  qword_100140848 = (uint64_t)v1;
}

void sub_100024964(id a1)
{
  id v1 = -[ASCWorkspace _init](objc_alloc(&OBJC_CLASS___ASCWorkspace), "_init");
  pid_t v2 = (void *)qword_100140858;
  qword_100140858 = (uint64_t)v1;
}

void sub_100024A7C(void *a1)
{
}

void sub_100024A98(_Unwind_Exception *a1)
{
}

id sub_100024B98(uint64_t a1, uint64_t a2)
{
  pid_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 finishWithSuccess];
  }
  else {
    return objc_msgSend(v2, "finishWithError:");
  }
}

id sub_100024CA0(uint64_t a1, uint64_t a2)
{
  pid_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 finishWithSuccess];
  }
  else {
    return objc_msgSend(v2, "finishWithError:");
  }
}

id sub_100024F30()
{
  if (qword_100140860 != -1) {
    dispatch_once(&qword_100140860, &stru_10011F410);
  }
  return (id)qword_100140868;
}

void sub_100024F70(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ASCAppOfferStateDelegate));
  pid_t v2 = (void *)qword_100140868;
  qword_100140868 = v1;

  id v3 = (void *)qword_100140868;
  id v4 = sub_10001ABD0();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v3 setClasses:v5 forSelector:"offer:didChangeState:withMetadata:flags:" argumentIndex:0 ofReply:0];

  id v6 = (void *)qword_100140868;
  uint64_t v7 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v6 setClasses:v7 forSelector:"offer:didChangeState:withMetadata:flags:" argumentIndex:1 ofReply:0];

  uint64_t v8 = (void *)qword_100140868;
  id v9 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCOfferMetadata),  0LL);
  [v8 setClasses:v9 forSelector:"offer:didChangeState:withMetadata:flags:" argumentIndex:2 ofReply:0];

  id v10 = (void *)qword_100140868;
  id v11 = sub_10001ABD0();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v10 setClasses:v12 forSelector:"offer:didChangeStatusText:" argumentIndex:0 ofReply:0];

  uint64_t v13 = (void *)qword_100140868;
  __int128 v14 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v13 setClasses:v14 forSelector:"offer:didChangeStatusText:" argumentIndex:1 ofReply:0];
}

id sub_100025114()
{
  if (qword_100140870 != -1) {
    dispatch_once(&qword_100140870, &stru_10011F430);
  }
  return (id)qword_100140878;
}

void sub_100025154(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ASCAppOfferStateService));
  pid_t v2 = (void *)qword_100140878;
  qword_100140878 = v1;

  id v3 = (void *)qword_100140878;
  id v4 = sub_10001ABD0();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = [v5 setByAddingObject:objc_opt_class(NSArray)];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v3 setClasses:v7 forSelector:"startObservingStateOfOffers:" argumentIndex:0 ofReply:0];

  uint64_t v8 = (void *)qword_100140878;
  id v9 = sub_10001ABD0();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = [v10 setByAddingObject:objc_opt_class(NSArray)];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v8 setClasses:v12 forSelector:"stopObservingStateOfOffers:" argumentIndex:0 ofReply:0];

  uint64_t v13 = (void *)qword_100140878;
  id v14 = sub_10001ABD0();
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  [v13 setClasses:v15 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:0 ofReply:0];

  __int128 v16 = (void *)qword_100140878;
  unsigned __int8 v17 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCMetricsActivity),  0LL);
  [v16 setClasses:v17 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:1 ofReply:0];

  id v18 = (void *)qword_100140878;
  id v19 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCOfferContext),  0LL);
  [v18 setClasses:v19 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:2 ofReply:0];

  id v20 = (void *)qword_100140878;
  id v21 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v20 setClasses:v21 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v22 = (void *)qword_100140878;
  id v23 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCAdamID),  0LL);
  [v22 setClasses:v23 forSelector:"reinstallWatchAppWithID:withReplyHandler:" argumentIndex:0 ofReply:0];

  int v24 = (void *)qword_100140878;
  v25 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v24 setClasses:v25 forSelector:"reinstallWatchAppWithID:withReplyHandler:" argumentIndex:0 ofReply:1];

  v26 = (void *)qword_100140878;
  id v27 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v26 setClasses:v27 forSelector:"reinstallWatchSystemAppWithBundleID:withReplyHandler:" argumentIndex:0 ofReply:0];

  v28 = (void *)qword_100140878;
  id v29 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v28 setClasses:v29 forSelector:"reinstallWatchSystemAppWithBundleID:withReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v30 = (void *)qword_100140878;
  id v31 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCAppDistributionOffer),  0LL);
  [v30 setClasses:v31 forSelector:"viewAppForAppDistributionOffer:" argumentIndex:0 ofReply:0];

  id v32 = (void *)qword_100140878;
  id v33 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCAppOffer),  0LL);
  [v32 setClasses:v33 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:0 ofReply:0];

  v34 = (void *)qword_100140878;
  __int128 v35 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCMetricsActivity),  0LL);
  [v34 setClasses:v35 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:1 ofReply:0];

  __int128 v36 = (void *)qword_100140878;
  __int128 v37 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v36 setClasses:v37 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:0 ofReply:1];

  __int128 v38 = (void *)qword_100140878;
  v39 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v38 setClasses:v39 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:1 ofReply:1];
}

id sub_100025628()
{
  if (qword_100140880 != -1) {
    dispatch_once(&qword_100140880, &stru_10011F450);
  }
  return (id)qword_100140888;
}

void sub_100025668(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ASCUtilityService));
  pid_t v2 = (void *)qword_100140888;
  qword_100140888 = v1;

  id v3 = (void *)qword_100140888;
  id v4 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSURL),  0LL);
  [v3 setClasses:v4 forSelector:"openURL:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_100140888;
  id v6 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v5 setClasses:v6 forSelector:"openURL:withReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v7 = (void *)qword_100140888;
  uint64_t v8 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v7 setClasses:v8 forSelector:"restoreAppStoreWithReplyHandler:" argumentIndex:0 ofReply:1];
}

id sub_1000257B0()
{
  if (qword_100140890 != -1) {
    dispatch_once(&qword_100140890, &stru_10011F470);
  }
  return (id)qword_100140898;
}

void sub_1000257F0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ASCLockupFetcherService));
  pid_t v2 = (void *)qword_100140898;
  qword_100140898 = v1;

  id v3 = (void *)qword_100140898;
  id v4 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCLockupRequest),  0LL);
  [v3 setClasses:v4 forSelector:"getLockupWithRequest:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_100140898;
  id v6 = sub_100016DCC();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = [v7 setByAddingObject:objc_opt_class(ASCLockup)];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  [v5 setClasses:v9 forSelector:"getLockupWithRequest:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v10 = (void *)qword_100140898;
  id v11 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v10 setClasses:v11 forSelector:"getLockupWithRequest:withReplyHandler:" argumentIndex:1 ofReply:1];

  uint64_t v12 = (void *)qword_100140898;
  uint64_t v13 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCLockupBatchRequest),  0LL);
  [v12 setClasses:v13 forSelector:"getLockupsWithRequest:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v14 = (void *)qword_100140898;
  __int128 v15 = sub_100016DCC();
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v41 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v42 = objc_opt_class(&OBJC_CLASS___ASCLockupRequest);
  uint64_t v43 = objc_opt_class(&OBJC_CLASS___ASCLockup);
  unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v41, 3LL));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 setByAddingObjectsFromArray:v17]);
  [v14 setClasses:v18 forSelector:"getLockupsWithRequest:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v19 = (void *)qword_100140898;
  id v20 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v19 setClasses:v20 forSelector:"getLockupsWithRequest:withReplyHandler:" argumentIndex:1 ofReply:1];

  id v21 = (void *)qword_100140898;
  uint64_t v22 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCCollectionRequest),  0LL);
  [v21 setClasses:v22 forSelector:"getLockupCollectionWithRequest:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v23 = (void *)qword_100140898;
  int v24 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v26 = objc_opt_class(&OBJC_CLASS___ASCLockup);
  id v27 = -[NSSet initWithObjects:](v24, "initWithObjects:", v25, v26, 0LL, v41, v42);
  [v23 setClasses:v27 forSelector:"getLockupCollectionWithRequest:withReplyHandler:" argumentIndex:0 ofReply:1];

  v28 = (void *)qword_100140898;
  id v29 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v28 setClasses:v29 forSelector:"getLockupCollectionWithRequest:withReplyHandler:" argumentIndex:1 ofReply:1];

  uint64_t v30 = (void *)qword_100140898;
  id v31 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v30 setClasses:v31 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v32 = (void *)qword_100140898;
  id v33 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v32 setClasses:v33 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:1 ofReply:0];

  v34 = (void *)qword_100140898;
  __int128 v35 = sub_100016DCC();
  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  id v37 = [v36 setByAddingObject:objc_opt_class(ASCLockup)];
  __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  [v34 setClasses:v38 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:0 ofReply:1];

  v39 = (void *)qword_100140898;
  v40 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v39 setClasses:v40 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:1 ofReply:1];
}

id sub_100025CC0()
{
  if (qword_1001408A0 != -1) {
    dispatch_once(&qword_1001408A0, &stru_10011F490);
  }
  return (id)qword_1001408A8;
}

void sub_100025D00(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ASCMetricsService));
  pid_t v2 = (void *)qword_1001408A8;
  qword_1001408A8 = v1;

  id v3 = (void *)qword_1001408A8;
  id v4 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCMetricsData),  0LL);
  [v3 setClasses:v4 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_1001408A8;
  id v6 = sub_100019A20();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v5 setClasses:v7 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:1 ofReply:0];

  id v8 = (void *)qword_1001408A8;
  id v9 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCMetricsActivity),  0LL);
  [v8 setClasses:v9 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:2 ofReply:0];

  id v10 = (void *)qword_1001408A8;
  id v11 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v10 setClasses:v11 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v12 = (void *)qword_1001408A8;
  uint64_t v13 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCSignpostPredicate),  0LL);
  [v12 setClasses:v13 forSelector:"processViewRenderWithPredicate:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v14 = (void *)qword_1001408A8;
  __int128 v15 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v14 setClasses:v15 forSelector:"processViewRenderWithPredicate:withReplyHandler:" argumentIndex:0 ofReply:1];

  __int128 v16 = (void *)qword_1001408A8;
  unsigned __int8 v17 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v16 setClasses:v17 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v18 = (void *)qword_1001408A8;
  id v19 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v18 setClasses:v19 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:1 ofReply:0];

  id v20 = (void *)qword_1001408A8;
  id v21 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
  [v20 setClasses:v21 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:2 ofReply:0];

  uint64_t v22 = (void *)qword_1001408A8;
  id v23 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___ASCLockup),  0LL);
  [v22 setClasses:v23 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:3 ofReply:0];

  int v24 = (void *)qword_1001408A8;
  uint64_t v25 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v24 setClasses:v25 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v26 = sub_100019A20();
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  v30[0] = objc_opt_class(&OBJC_CLASS___NSError);
  v30[1] = objc_opt_class(&OBJC_CLASS___NSURL);
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 2LL));
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v27 setByAddingObjectsFromArray:v28]);

  [(id)qword_1001408A8 setClasses:v29 forSelector:"logErrorMessage:" argumentIndex:0 ofReply:0];
}

id sub_10002613C()
{
  if (qword_1001408B0 != -1) {
    dispatch_once(&qword_1001408B0, &stru_10011F4B0);
  }
  return (id)qword_1001408B8;
}

void sub_10002617C(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ASCServiceBroker));
  pid_t v2 = (void *)qword_1001408B8;
  qword_1001408B8 = v1;

  id v3 = (void *)qword_1001408B8;
  id v4 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v3 setClasses:v4 forSelector:"testConnectionWithReplyHandler:" argumentIndex:0 ofReply:1];

  id v5 = (void *)qword_1001408B8;
  id v6 = sub_100024F30();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v5 setInterface:v7 forSelector:"getAppOfferStateServiceForDelegate:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v8 = (void *)qword_1001408B8;
  id v9 = sub_100025114();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  [v8 setInterface:v10 forSelector:"getAppOfferStateServiceForDelegate:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v11 = (void *)qword_1001408B8;
  uint64_t v12 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v11 setClasses:v12 forSelector:"getAppOfferStateServiceForDelegate:withReplyHandler:" argumentIndex:1 ofReply:1];

  uint64_t v13 = (void *)qword_1001408B8;
  id v14 = sub_100025628();
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  [v13 setInterface:v15 forSelector:"getUtilityServiceWithReplyHandler:" argumentIndex:0 ofReply:1];

  __int128 v16 = (void *)qword_1001408B8;
  unsigned __int8 v17 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v16 setClasses:v17 forSelector:"getUtilityServiceWithReplyHandler:" argumentIndex:1 ofReply:1];

  id v18 = (void *)qword_1001408B8;
  id v19 = sub_1000257B0();
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  [v18 setInterface:v20 forSelector:"getLockupFetcherServiceWithReplyHandler:" argumentIndex:0 ofReply:1];

  id v21 = (void *)qword_1001408B8;
  uint64_t v22 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v21 setClasses:v22 forSelector:"getLockupFetcherServiceWithReplyHandler:" argumentIndex:1 ofReply:1];

  id v23 = (void *)qword_1001408B8;
  id v24 = sub_100025CC0();
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  [v23 setInterface:v25 forSelector:"getMetricsServiceWithReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v26 = (void *)qword_1001408B8;
  id v27 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  objc_opt_class(&OBJC_CLASS___NSError),  0LL);
  [v26 setClasses:v27 forSelector:"getMetricsServiceWithReplyHandler:" argumentIndex:1 ofReply:1];
}

__CFString *sub_100026444(uint64_t a1)
{
  int v2 = a1;
  id v3 = @"NOTIFY_STATUS_OK";
  switch(v2)
  {
    case 0:
      return v3;
    case 1:
      id v3 = @"NOTIFY_STATUS_INVALID_NAME";
      break;
    case 2:
      id v3 = @"NOTIFY_STATUS_INVALID_TOKEN";
      break;
    case 3:
      id v3 = @"NOTIFY_STATUS_INVALID_PORT";
      break;
    case 4:
      id v3 = @"NOTIFY_STATUS_INVALID_FILE";
      break;
    case 5:
      id v3 = @"NOTIFY_STATUS_INVALID_SIGNAL";
      break;
    case 6:
      id v3 = @"NOTIFY_STATUS_INVALID_REQUEST";
      break;
    case 7:
      id v3 = @"NOTIFY_STATUS_NOT_AUTHORIZED";
      break;
    case 8:
      id v3 = @"NOTIFY_STATUS_OPT_DISABLE";
      break;
    case 9:
      id v3 = @"NOTIFY_STATUS_SERVER_NOT_FOUND";
      break;
    case 10:
      id v3 = @"NOTIFY_STATUS_NULL_INPUT";
      break;
    default:
      if ((_DWORD)a1 == 1000000) {
        id v3 = @"NOTIFY_STATUS_FAILED";
      }
      else {
        id v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"NOTIFY_STATUS_UNKNOWN (%u)",  a1);
      }
      break;
  }

  return v3;
}

void sub_100026590(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithPath:]( &OBJC_CLASS___NSBundle,  "bundleWithPath:",  @"/System/Library/PrivateFrameworks/AppStoreComponents.framework"));
  int v2 = (void *)qword_1001408C8;
  qword_1001408C8 = v1;

  if (!qword_1001408C8)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  NSInternalInconsistencyException,  @"Could not find AppStoreComponents framework bundle",  0LL));
    objc_exception_throw(v3);
    +[NSBundle asc_localizedStringKeyPlatformSuffix](v4, v5);
  }

void sub_1000266D8(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v11]);
  if (!v6
    || (id v7 = v5) != 0 && (v8 = [v6 isEqual:v7], v7, v8))
  {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v11];
  }

  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v11];
  }
}

int main(int argc, const char **argv, const char **envp)
{
  id v3 = objc_autoreleasePoolPush();
  id v4 = [objc_allocWithZone((Class)type metadata accessor for Daemon()) init];
  objc_autoreleasePoolPop(v3);
  qword_1001484E0 = (uint64_t)v4;
  sub_1000886E8();
  return 0;
}

void type metadata accessor for ASDPurchaseHistoryContext(uint64_t a1)
{
}

void type metadata accessor for ASCAppState(uint64_t a1)
{
}

uint64_t sub_100026968(uint64_t a1, uint64_t a2)
{
  return sub_100028420(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100026984()
{
  return UInt64.hashValue.getter(*v0);
}

void sub_10002698C()
{
}

uint64_t sub_1000269B4(uint64_t a1)
{
  return static Hasher._hash(seed:_:)(a1, *v1);
}

NSNumber sub_1000269BC()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t sub_1000269C4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  char v7 = 1;
  uint64_t result = static UInt64._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  uint64_t v4 = v6;
  char v5 = v7;
  if (v7) {
    uint64_t v4 = 0LL;
  }
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_100026A14(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0LL;
  char v8 = 1;
  char v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v4 = v7;
  char v5 = v8;
  if (v8) {
    uint64_t v4 = 0LL;
  }
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_100026A68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

void *sub_100026A90@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100026A9C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C080,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ECA84);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100026ADC(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C080,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ECA84);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100026B20(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100026B60@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100026B70(uint64_t a1, uint64_t a2)
{
  return sub_100028420(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void *sub_100026B7C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100026B8C(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100026B98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100026BAC(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C248,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED848);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100026BEC(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C248,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED848);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100026C2C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100026C6C()
{
  return *v0;
}

void sub_100026C74(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100026C80(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100026CF4(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100026D70@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100026DB0(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC16C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100026DF0(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC16C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100026E30(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_100026E70(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_100026E78@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100026E8C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100026EA0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100026EB4(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100026EE4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100026F10@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100026F34(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100026F48(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100026F5C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100026F70@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100026F84(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_100026F98(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_100026FAC(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_100026FC0()
{
  return *v0 == 0LL;
}

uint64_t sub_100026FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100026FE8(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100026FFC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASCAppOfferActionErrorDomain");
}

uint64_t sub_10002700C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002704C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002708C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000270F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

unsigned __int8 *sub_100027144@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100027154()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASCOpenAppErrorDomain");
}

uint64_t sub_100027164(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000271A4(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000271E4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100027248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100027298()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(ASDServerErrorDomain);
}

uint64_t sub_1000272A8(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000272E8(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100027328(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10002738C()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000273C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100027410()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASCMetricsErrorDomain");
}

uint64_t sub_10002741C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002745C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002749C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100027500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100027550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1000275AC(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C1A8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaTaskPlatform,  (uint64_t)&unk_1000EC7DC);
  uint64_t v3 = sub_100027978( &qword_10013C1B0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaTaskPlatform,  (uint64_t)&unk_1000EC77C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027630(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C1C8,  (uint64_t (*)(uint64_t))type metadata accessor for Kind,  (uint64_t)&unk_1000EC3D8);
  uint64_t v3 = sub_100027978( &qword_10013C1D0,  (uint64_t (*)(uint64_t))type metadata accessor for Kind,  (uint64_t)&unk_1000EC380);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000276B4(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C1D8,  (uint64_t (*)(uint64_t))type metadata accessor for Context,  (uint64_t)&unk_1000EC2D0);
  uint64_t v3 = sub_100027978( &qword_10013C1E0,  (uint64_t (*)(uint64_t))type metadata accessor for Context,  (uint64_t)&unk_1000EC278);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027738(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C1E8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCSignpostTag,  (uint64_t)&unk_1000EC00C);
  uint64_t v3 = sub_100027978( &qword_10013C1F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCSignpostTag,  (uint64_t)&unk_1000EBFB4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for UInt64);
}

BOOL sub_1000277CC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000277E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100028F08(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10002781C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100027874@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002789C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013BCA0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState,  (uint64_t)&unk_1000EBA14);
  uint64_t v3 = sub_100027978( &qword_10013BCA8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState,  (uint64_t)&unk_1000EB9BC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027920()
{
  return sub_100027978( &qword_10013BC88,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState,  (uint64_t)&unk_1000EB984);
}

uint64_t sub_10002794C()
{
  return sub_100027978( &qword_10013BC90,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState,  (uint64_t)&unk_1000EB95C);
}

uint64_t sub_100027978(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000279B8()
{
  return sub_100027978( &qword_10013BC98,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState,  (uint64_t)&unk_1000EB9EC);
}

void type metadata accessor for ASCContingentOfferType(uint64_t a1)
{
}

void type metadata accessor for ASCControllerRequirement(uint64_t a1)
{
}

void type metadata accessor for Format(uint64_t a1)
{
}

void type metadata accessor for Crop(uint64_t a1)
{
}

void type metadata accessor for Decoration(uint64_t a1)
{
}

void type metadata accessor for ASCMetricsInvocationPoint(uint64_t a1)
{
}

void type metadata accessor for ASCAppOfferActionError(uint64_t a1)
{
}

void type metadata accessor for Platform(uint64_t a1)
{
}

void type metadata accessor for AMSMediaTaskPlatform(uint64_t a1)
{
}

void type metadata accessor for ASCOfferFlags(uint64_t a1)
{
}

void type metadata accessor for HeadingKind(uint64_t a1)
{
}

void type metadata accessor for Kind(uint64_t a1)
{
}

void type metadata accessor for Context(uint64_t a1)
{
}

void type metadata accessor for OSSignpostType(uint64_t a1)
{
}

void type metadata accessor for ASCMetricsError(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for ASCSignpostTag(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for ASCOfferTitleVariant(uint64_t a1)
{
}

uint64_t sub_100027B60(uint64_t a1)
{
  uint64_t v2 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  uint64_t v3 = sub_100027978( &qword_10013C200,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000EBE4C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027BE4()
{
  return sub_100027978( &qword_10013BF28,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000EBE14);
}

uint64_t sub_100027C10()
{
  return sub_100027978( &qword_10013BF30,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000EBDEC);
}

uint64_t sub_100027C3C()
{
  return sub_100027978( &qword_10013BF38,  (uint64_t (*)(uint64_t))type metadata accessor for ASCSignpostTag,  (uint64_t)&unk_1000EBF7C);
}

uint64_t sub_100027C68()
{
  return sub_100027978( &qword_10013BF40,  (uint64_t (*)(uint64_t))type metadata accessor for ASCSignpostTag,  (uint64_t)&unk_1000EBF54);
}

uint64_t sub_100027C94()
{
  return sub_100027978( &qword_10013BF48,  (uint64_t (*)(uint64_t))type metadata accessor for ASCSignpostTag,  (uint64_t)&unk_1000EBFE4);
}

uint64_t sub_100027CC0(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C178,  (uint64_t (*)(uint64_t))type metadata accessor for Decoration,  (uint64_t)&unk_1000ECC0C);
  uint64_t v3 = sub_100027978( &qword_10013C180,  (uint64_t (*)(uint64_t))type metadata accessor for Decoration,  (uint64_t)&unk_1000ECBB4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027D44(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C168,  (uint64_t (*)(uint64_t))type metadata accessor for Crop,  (uint64_t)&unk_1000ECD14);
  uint64_t v3 = sub_100027978( &qword_10013C170,  (uint64_t (*)(uint64_t))type metadata accessor for Crop,  (uint64_t)&unk_1000ECCBC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027DC8(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C158,  (uint64_t (*)(uint64_t))type metadata accessor for Format,  (uint64_t)&unk_1000ECE1C);
  uint64_t v3 = sub_100027978( &qword_10013C160,  (uint64_t (*)(uint64_t))type metadata accessor for Format,  (uint64_t)&unk_1000ECDC4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027E4C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C1B8,  (uint64_t (*)(uint64_t))type metadata accessor for HeadingKind,  (uint64_t)&unk_1000EC4E0);
  uint64_t v3 = sub_100027978( &qword_10013C1C0,  (uint64_t (*)(uint64_t))type metadata accessor for HeadingKind,  (uint64_t)&unk_1000EC488);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027ED0(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C148,  (uint64_t (*)(uint64_t))type metadata accessor for ASCControllerRequirement,  (uint64_t)&unk_1000ECF24);
  uint64_t v3 = sub_100027978( &qword_10013C150,  (uint64_t (*)(uint64_t))type metadata accessor for ASCControllerRequirement,  (uint64_t)&unk_1000ECECC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027F54(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C188,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ED0FC);
  uint64_t v3 = sub_100027978( &qword_10013C190,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ECAEC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100027FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100028030(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C108,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED53C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100028070(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C108,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED53C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000280B0(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000280F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100028148@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10002818C(uint64_t a1)
{
  uint64_t v2 = sub_100027978( &qword_10013C198,  (uint64_t (*)(uint64_t))type metadata accessor for Platform,  (uint64_t)&unk_1000EC924);
  uint64_t v3 = sub_100027978( &qword_10013C1A0,  (uint64_t (*)(uint64_t))type metadata accessor for Platform,  (uint64_t)&unk_1000EC8CC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100028210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100028268()
{
  return sub_100027978( &qword_10013BF50,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC094);
}

uint64_t sub_100028294()
{
  return sub_100027978( &qword_10013BF58,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC0BC);
}

uint64_t sub_1000282C0()
{
  return sub_100027978( &qword_10013BF60,  (uint64_t (*)(uint64_t))type metadata accessor for Context,  (uint64_t)&unk_1000EC240);
}

uint64_t sub_1000282EC()
{
  return sub_100027978( &qword_10013BF68,  (uint64_t (*)(uint64_t))type metadata accessor for Context,  (uint64_t)&unk_1000EC218);
}

uint64_t sub_100028318()
{
  return sub_100027978( (unint64_t *)&unk_10013BF70,  (uint64_t (*)(uint64_t))type metadata accessor for Context,  (uint64_t)&unk_1000EC2A8);
}

uint64_t sub_100028344()
{
  return sub_100027978( (unint64_t *)&qword_10013CFE0,  (uint64_t (*)(uint64_t))type metadata accessor for Kind,  (uint64_t)&unk_1000ED274);
}

uint64_t sub_100028370()
{
  return sub_100027978( &qword_10013BF80,  (uint64_t (*)(uint64_t))type metadata accessor for Kind,  (uint64_t)&unk_1000EC358);
}

uint64_t sub_10002839C()
{
  return sub_100027978( &qword_10013BF88,  (uint64_t (*)(uint64_t))type metadata accessor for Kind,  (uint64_t)&unk_1000EC3B0);
}

uint64_t sub_1000283C8()
{
  return sub_100027978( (unint64_t *)&qword_10013BF90,  (uint64_t (*)(uint64_t))type metadata accessor for HeadingKind,  (uint64_t)&unk_1000ED23C);
}

uint64_t sub_1000283F4()
{
  return sub_100027978( &qword_10013BF98,  (uint64_t (*)(uint64_t))type metadata accessor for HeadingKind,  (uint64_t)&unk_1000EC460);
}

uint64_t sub_100028420(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10002845C(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002849C()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  uint64_t v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  Swift::Int v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_10002850C()
{
  return sub_100027978( &qword_10013BFA0,  (uint64_t (*)(uint64_t))type metadata accessor for HeadingKind,  (uint64_t)&unk_1000EC4B8);
}

uint64_t sub_100028538()
{
  return sub_100027978( &qword_10013BFA8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferFlags,  (uint64_t)&unk_1000EC598);
}

uint64_t sub_100028564()
{
  return sub_100027978( &qword_10013BFB0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferFlags,  (uint64_t)&unk_1000EC568);
}

uint64_t sub_100028590()
{
  return sub_100027978( &qword_10013BFB8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferFlags,  (uint64_t)&unk_1000EC5C0);
}

uint64_t sub_1000285BC()
{
  return sub_100027978( &qword_10013BFC0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferFlags,  (uint64_t)&unk_1000EC5F8);
}

uint64_t sub_1000285E8()
{
  return sub_100027978( &qword_10013BFC8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaTaskPlatform,  (uint64_t)&unk_1000EC740);
}

uint64_t sub_100028614()
{
  return sub_100027978( &qword_10013BFD0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaTaskPlatform,  (uint64_t)&unk_1000EC714);
}

uint64_t sub_100028640()
{
  return sub_100027978( &qword_10013BFD8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSMediaTaskPlatform,  (uint64_t)&unk_1000EC7B0);
}

uint64_t sub_10002866C()
{
  return sub_100027978( &qword_10013BFE0,  (uint64_t (*)(uint64_t))type metadata accessor for Platform,  (uint64_t)&unk_1000EC894);
}

uint64_t sub_100028698()
{
  return sub_100027978( &qword_10013BFE8,  (uint64_t (*)(uint64_t))type metadata accessor for Platform,  (uint64_t)&unk_1000EC86C);
}

uint64_t sub_1000286C4(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10002874C()
{
  return sub_100027978( &qword_10013BFF0,  (uint64_t (*)(uint64_t))type metadata accessor for Platform,  (uint64_t)&unk_1000EC8FC);
}

uint64_t sub_100028778()
{
  return sub_100027978( &qword_10013BFF8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000EC9AC);
}

uint64_t sub_1000287A4()
{
  return sub_100027978( &qword_10013C000,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000EC9D4);
}

uint64_t sub_1000287D0()
{
  return sub_100027978( &qword_10013C008,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ED0C4);
}

uint64_t sub_1000287FC()
{
  return sub_100027978( &qword_10013C010,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ECAC4);
}

uint64_t sub_100028828()
{
  return sub_100027978( &qword_10013C018,  (uint64_t (*)(uint64_t))type metadata accessor for Decoration,  (uint64_t)&unk_1000ED08C);
}

uint64_t sub_100028854()
{
  return sub_100027978( &qword_10013C020,  (uint64_t (*)(uint64_t))type metadata accessor for Decoration,  (uint64_t)&unk_1000ECB8C);
}

uint64_t sub_100028880()
{
  return sub_100027978( &qword_10013C028,  (uint64_t (*)(uint64_t))type metadata accessor for Decoration,  (uint64_t)&unk_1000ECBE4);
}

uint64_t sub_1000288AC()
{
  return sub_100027978( &qword_10013C030,  (uint64_t (*)(uint64_t))type metadata accessor for Crop,  (uint64_t)&unk_1000ED054);
}

uint64_t sub_1000288D8()
{
  return sub_100027978( &qword_10013C038,  (uint64_t (*)(uint64_t))type metadata accessor for Crop,  (uint64_t)&unk_1000ECC94);
}

uint64_t sub_100028904()
{
  return sub_100027978( &qword_10013C040,  (uint64_t (*)(uint64_t))type metadata accessor for Crop,  (uint64_t)&unk_1000ECCEC);
}

uint64_t sub_100028930()
{
  return sub_100027978( &qword_10013C048,  (uint64_t (*)(uint64_t))type metadata accessor for Format,  (uint64_t)&unk_1000ED01C);
}

uint64_t sub_10002895C()
{
  return sub_100027978( &qword_10013C050,  (uint64_t (*)(uint64_t))type metadata accessor for Format,  (uint64_t)&unk_1000ECD9C);
}

uint64_t sub_100028988()
{
  return sub_100027978( &qword_10013C058,  (uint64_t (*)(uint64_t))type metadata accessor for Format,  (uint64_t)&unk_1000ECDF4);
}

uint64_t sub_1000289B4()
{
  return sub_100027978( &qword_10013C060,  (uint64_t (*)(uint64_t))type metadata accessor for ASCControllerRequirement,  (uint64_t)&unk_1000ECFE4);
}

uint64_t sub_1000289E0()
{
  return sub_100027978( &qword_10013C068,  (uint64_t (*)(uint64_t))type metadata accessor for ASCControllerRequirement,  (uint64_t)&unk_1000ECEA4);
}

uint64_t sub_100028A0C()
{
  return sub_100027978( &qword_10013C070,  (uint64_t (*)(uint64_t))type metadata accessor for ASCControllerRequirement,  (uint64_t)&unk_1000ECEFC);
}

uint64_t sub_100028A38()
{
  return sub_100027978( &qword_10013C078,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ECB1C);
}

uint64_t sub_100028A64()
{
  return sub_100027978( &qword_10013C080,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ECA84);
}

uint64_t sub_100028A90()
{
  return sub_100027978( &qword_10013C088,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ECA54);
}

uint64_t sub_100028ABC()
{
  return sub_100027978( &qword_10013C090,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ECA14);
}

uint64_t sub_100028AE8()
{
  return sub_100027978(&qword_10013C098, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1000ED1DC);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_100028B28()
{
  return sub_100027978(&qword_10013C0A0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1000ED1A4);
}

unint64_t sub_100028B58()
{
  unint64_t result = qword_10013C0A8;
  if (!qword_10013C0A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10013C0A8);
  }

  return result;
}

uint64_t sub_100028B9C()
{
  return sub_100027978( (unint64_t *)&unk_10013C0B0,  (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2,  (uint64_t)&unk_1000ED214);
}

uint64_t sub_100028BC8()
{
  return sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
}

uint64_t sub_100028BF4()
{
  return sub_100027978( &qword_10013C0C0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC16C);
}

uint64_t sub_100028C20()
{
  return sub_100027978( &qword_10013C0C8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC13C);
}

uint64_t sub_100028C4C()
{
  return sub_100027978( &qword_10013C0D0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000EC0FC);
}

uint64_t sub_100028C78()
{
  return sub_100027978(&qword_10013C0D8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1000ED34C);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_100028CB8()
{
  return sub_100027978(&qword_10013C0E0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1000ED314);
}

uint64_t sub_100028CE4()
{
  return sub_100027978(&qword_10013C0E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1000ED384);
}

uint64_t sub_100028D10()
{
  return sub_100027978( (unint64_t *)&qword_10013C0F0,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsError,  (uint64_t)&unk_1000ED2AC);
}

uint64_t sub_100028D3C()
{
  return sub_100027978( &qword_10013C0F8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000EBEEC);
}

uint64_t sub_100028D68()
{
  return sub_100027978( &qword_10013C100,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED3E8);
}

void type metadata accessor for ASDServerError(uint64_t a1)
{
}

uint64_t sub_100028DA8()
{
  return sub_100027978( &qword_10013C108,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED53C);
}

uint64_t sub_100028DD4()
{
  return sub_100027978( &qword_10013C110,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED4C4);
}

uint64_t sub_100028E00()
{
  return sub_100027978( &qword_10013C118,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED454);
}

uint64_t sub_100028E2C()
{
  return sub_100027978( (unint64_t *)&qword_10013C120,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000ED3AC);
}

uint64_t sub_100028E58()
{
  return sub_100027978( &qword_10013C128,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1000EBF18);
}

uint64_t sub_100028E84()
{
  return sub_100027978( &qword_10013C130,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED498);
}

uint64_t sub_100028EB0()
{
  return sub_100027978( &qword_10013C138,  (uint64_t (*)(uint64_t))type metadata accessor for ASDServerError,  (uint64_t)&unk_1000ED4F8);
}

uint64_t sub_100028EDC()
{
  return sub_100027978( &qword_10013C140,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000EBE7C);
}

uint64_t sub_100028F08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

void type metadata accessor for ASCOpenAppError(uint64_t a1)
{
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void type metadata accessor for AMSMediaTaskType(uint64_t a1)
{
}

void sub_100028F7C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_100028FC0()
{
  return sub_100027978( &qword_10013C238,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED770);
}

uint64_t sub_100028FEC()
{
  return sub_100027978( &qword_10013C240,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED798);
}

uint64_t sub_100029018()
{
  return sub_100027978( &qword_10013C248,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED848);
}

uint64_t sub_100029044()
{
  return sub_100027978( &qword_10013C250,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED818);
}

uint64_t sub_100029070()
{
  return sub_100027978( &qword_10013C258,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED7D8);
}

uint64_t sub_10002909C()
{
  return sub_100027978(&qword_10013C260, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1000ED8F0);
}

uint64_t sub_1000290C8()
{
  return sub_100027978(&qword_10013C268, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1000ED738);
}

uint64_t sub_1000290F4()
{
  return sub_100027978(&qword_10013C270, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1000ED710);
}

uint64_t sub_100029120()
{
  return sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
}

double sub_100029170@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = objc_opt_self(&OBJC_CLASS___ASCAlertOffer);
  uint64_t v5 = swift_dynamicCastObjCClass(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = &qword_10013C518;
    uint64_t v8 = off_10011E490;
    *(void *)(a2 + 24) = sub_10002A030(0LL, (unint64_t *)&qword_10013C518, off_10011E490);
    uint64_t v9 = (uint64_t *)&unk_10013C520;
    char v10 = &protocol conformance descriptor for ASCAlertOffer;
LABEL_17:
    *(void *)(a2 + 32) = sub_100029FF0((unint64_t *)v9, (unint64_t *)v7, v8, (uint64_t)v10);
    *(void *)a2 = v6;
    swift_unknownObjectRetain(a1);
    return result;
  }

  uint64_t v11 = objc_opt_self(&OBJC_CLASS___ASCAppDistributionOffer);
  uint64_t v12 = swift_dynamicCastObjCClass(a1, v11);
  if (v12)
  {
    uint64_t v6 = v12;
    uint64_t v7 = (uint64_t *)&qword_10013C508;
    uint64_t v8 = off_10011E498;
    *(void *)(a2 + 24) = sub_10002A030(0LL, &qword_10013C508, off_10011E498);
    uint64_t v9 = &qword_10013C510;
    char v10 = &protocol conformance descriptor for ASCAppDistributionOffer;
    goto LABEL_17;
  }

  uint64_t v13 = objc_opt_self(&OBJC_CLASS___ASCAppOffer);
  uint64_t v14 = swift_dynamicCastObjCClass(a1, v13);
  if (v14)
  {
    uint64_t v6 = v14;
    uint64_t v7 = &qword_10013C4F8;
    uint64_t v8 = off_10011E4A0;
    *(void *)(a2 + 24) = sub_10002A030(0LL, (unint64_t *)&qword_10013C4F8, off_10011E4A0);
    uint64_t v9 = &qword_10013C500;
    char v10 = &protocol conformance descriptor for ASCAppOffer;
    goto LABEL_17;
  }

  uint64_t v15 = objc_opt_self(&OBJC_CLASS___ASCArcadeOffer);
  uint64_t v16 = swift_dynamicCastObjCClass(a1, v15);
  if (v16)
  {
    uint64_t v6 = v16;
    uint64_t v7 = (uint64_t *)&qword_10013C4E8;
    uint64_t v8 = off_10011E4A8;
    *(void *)(a2 + 24) = sub_10002A030(0LL, &qword_10013C4E8, off_10011E4A8);
    uint64_t v9 = &qword_10013C4F0;
    char v10 = &protocol conformance descriptor for ASCArcadeOffer;
    goto LABEL_17;
  }

  uint64_t v17 = objc_opt_self(&OBJC_CLASS___ASCContingentOffer);
  uint64_t v18 = swift_dynamicCastObjCClass(a1, v17);
  if (v18)
  {
    uint64_t v6 = v18;
    uint64_t v7 = (uint64_t *)&qword_10013C4D8;
    uint64_t v8 = off_10011E4B8;
    *(void *)(a2 + 24) = sub_10002A030(0LL, &qword_10013C4D8, off_10011E4B8);
    uint64_t v9 = (uint64_t *)&unk_10013C4E0;
    char v10 = &protocol conformance descriptor for ASCContingentOffer;
    goto LABEL_17;
  }

  uint64_t v19 = objc_opt_self(&OBJC_CLASS___ASCOfferAlertOffer);
  uint64_t v20 = swift_dynamicCastObjCClass(a1, v19);
  if (v20)
  {
    uint64_t v6 = v20;
    uint64_t v7 = (uint64_t *)&qword_10013C4C8;
    uint64_t v8 = off_10011E558;
    *(void *)(a2 + 24) = sub_10002A030(0LL, &qword_10013C4C8, off_10011E558);
    uint64_t v9 = &qword_10013C4D0;
    char v10 = &protocol conformance descriptor for ASCOfferAlertOffer;
    goto LABEL_17;
  }

  uint64_t v21 = objc_opt_self(&OBJC_CLASS___ASCStatefulOffer);
  uint64_t v22 = swift_dynamicCastObjCClass(a1, v21);
  if (v22)
  {
    uint64_t v6 = v22;
    uint64_t v7 = (uint64_t *)&qword_10013C4B8;
    uint64_t v8 = off_10011E570;
    *(void *)(a2 + 24) = sub_10002A030(0LL, &qword_10013C4B8, off_10011E570);
    uint64_t v9 = &qword_10013C4C0;
    char v10 = &protocol conformance descriptor for ASCStatefulOffer;
    goto LABEL_17;
  }

  uint64_t v23 = objc_opt_self(&OBJC_CLASS___ASCURLOffer);
  uint64_t v24 = swift_dynamicCastObjCClass(a1, v23);
  if (v24)
  {
    uint64_t v6 = v24;
    uint64_t v7 = &qword_10013C4A8;
    uint64_t v8 = off_10011E578;
    *(void *)(a2 + 24) = sub_10002A030(0LL, (unint64_t *)&qword_10013C4A8, off_10011E578);
    uint64_t v9 = &qword_10013C4B0;
    char v10 = &protocol conformance descriptor for ASCURLOffer;
    goto LABEL_17;
  }

  *(void *)(a2 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_100029494(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a2;
  uint64_t v3 = type metadata accessor for JSONError(0LL);
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v4);
  v59 = (uint64_t *)((char *)&v58 - v7);
  uint64_t v8 = sub_100029E18((uint64_t *)&unk_10013C3A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for JSONContext(0LL);
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v63 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for JSONObject(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  v64 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v58 - v20;
  char v22 = JSONObject.isNull.getter(v19);
  uint64_t result = 0LL;
  if ((v22 & 1) == 0)
  {
    v58 = v14;
    uint64_t v24 = JSONObject.subscript.getter(0x646E696B24LL, 0xE500000000000000LL);
    uint64_t v25 = JSONObject.string.getter(v24);
    uint64_t v27 = v26;
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
    if (v27)
    {
      BOOL v29 = v25 == 0x66664F7472656C61LL && v27 == 0xEA00000000007265LL;
      if (v29
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x66664F7472656C61LL, 0xEA00000000007265LL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C498;
        uint64_t v31 = sub_100029E18(&qword_10013C498);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C4A0;
LABEL_9:
        uint64_t v35 = sub_100029FB0(v34, v30);
        ExpressibleByJSON.init(tryDeserializing:using:)(v69, v32, v33, v31, v35);
        return v69[0];
      }

      if (v25 == 0xD000000000000014LL && v27 == 0x80000001000FA740LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000FA740LL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C488;
        uint64_t v31 = sub_100029E18(&qword_10013C488);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C490;
        goto LABEL_9;
      }

      if (v25 == 0x726566664F707061LL && v27 == 0xE800000000000000LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x726566664F707061LL, 0xE800000000000000LL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C478;
        uint64_t v31 = sub_100029E18(&qword_10013C478);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C480;
        goto LABEL_9;
      }

      if (v25 == 0x664F656461637261LL && v27 == 0xEB00000000726566LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x664F656461637261LL, 0xEB00000000726566LL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C468;
        uint64_t v31 = sub_100029E18(&qword_10013C468);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C470;
        goto LABEL_9;
      }

      uint64_t v49 = v25;
      if (v25 == 0x65676E69746E6F63LL && v27 == 0xEF726566664F746ELL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E69746E6F63LL, 0xEF726566664F746ELL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C458;
        uint64_t v31 = sub_100029E18(&qword_10013C458);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C460;
        goto LABEL_9;
      }

      if (v25 == 0x656C41726566666FLL && v27 == 0xEF726566664F7472LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C41726566666FLL, 0xEF726566664F7472LL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C448;
        uint64_t v31 = sub_100029E18(&qword_10013C448);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C450;
        goto LABEL_9;
      }

      if (v25 == 0x6C75666574617473LL && v27 == 0xED0000726566664FLL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C75666574617473LL, 0xED0000726566664FLL, v25, v27, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C438;
        uint64_t v31 = sub_100029E18(&qword_10013C438);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C440;
        goto LABEL_9;
      }

      if (v25 == 0x726566664F6C7275LL && v27 == 0xE800000000000000LL
        || (uint64_t v50 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726566664F6C7275LL, 0xE800000000000000LL, v25, v27, 0LL),
            (v50 & 1) != 0))
      {
        swift_bridgeObjectRelease(v27);
        uint64_t v30 = &qword_10013C428;
        uint64_t v31 = sub_100029E18(&qword_10013C428);
        id v32 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v64, a1, v15);
        id v33 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
        v34 = (unint64_t *)&unk_10013C430;
        goto LABEL_9;
      }

      static JSONContext.initFailureObserver.getter(v50);
      uint64_t v51 = sub_100029E18(&qword_10013D140);
      JSONContext.subscript.getter(v69, v11, v51);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v52 = sub_100029E18(&qword_10013C410);
      v53 = v59;
      uint64_t *v59 = v49;
      v53[1] = v27;
      v53[2] = v52;
      (*(void (**)(void))(v60 + 104))();
      sub_100029E58((uint64_t)v69, (uint64_t)v66);
      uint64_t v54 = v67;
      if (v67)
      {
        uint64_t v55 = v68;
        sub_100029EE0(v66, v67);
        unint64_t v56 = sub_100029F04();
        uint64_t v38 = v61;
        uint64_t v43 = swift_allocError(v61, v56, 0LL, 0LL);
        uint64_t v6 = v59;
        uint64_t v39 = v60;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v60 + 16))(v57, v59, v38);
        uint64_t v45 = v52;
        uint64_t v46 = v43;
        uint64_t v47 = v54;
        uint64_t v48 = v55;
        goto LABEL_12;
      }

      (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v59, v61);
    }

    else
    {
      static JSONContext.initFailureObserver.getter(v28);
      uint64_t v36 = sub_100029E18(&qword_10013D140);
      JSONContext.subscript.getter(v69, v11, v36);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v37 = sub_100029E18(&qword_10013C410);
      uint64_t *v6 = 0x646E696B24LL;
      v6[1] = 0xE500000000000000LL;
      v6[2] = v37;
      uint64_t v39 = v60;
      uint64_t v38 = v61;
      (*(void (**)(uint64_t *, void, uint64_t))(v60 + 104))( v6,  enum case for JSONError.missingProperty(_:),  v61);
      sub_100029E58((uint64_t)v69, (uint64_t)v66);
      uint64_t v40 = v67;
      if (v67)
      {
        uint64_t v41 = v68;
        sub_100029EE0(v66, v67);
        unint64_t v42 = sub_100029F04();
        uint64_t v43 = swift_allocError(v38, v42, 0LL, 0LL);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v39 + 16))(v44, v6, v38);
        uint64_t v45 = v37;
        uint64_t v46 = v43;
        uint64_t v47 = v40;
        uint64_t v48 = v41;
LABEL_12:
        dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(v45, v46, v47, v48);
        (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v6, v38);
        sub_100029EA0((uint64_t)v69);
        swift_errorRelease(v43);
        sub_100029F4C(v66);
        return 0LL;
      }

      (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v6, v38);
    }

    sub_100029EA0((uint64_t)v69);
    sub_100029EA0((uint64_t)v66);
    return 0LL;
  }

  return result;
}

uint64_t sub_100029E18(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100029E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013C418);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100029EA0(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013C418);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100029EE0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100029F04()
{
  unint64_t result = qword_10013C420;
  if (!qword_10013C420)
  {
    uint64_t v1 = type metadata accessor for JSONError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for JSONError, v1);
    atomic_store(result, (unint64_t *)&qword_10013C420);
  }

  return result;
}

uint64_t sub_100029F4C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100029F6C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100029FB0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100029F6C(a2);
    uint64_t result = swift_getWitnessTable(&unk_1000F0D98, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100029FF0(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10002A030(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10002A030(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

void *sub_10002A068(void *a1, void *a2)
{
  uint64_t v3 = v2;
  v3[5] = 0LL;
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v6 = sub_100029E18(&qword_10013C600);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = AsyncEvent.init()();
  unint64_t v10 = sub_10002A604();
  v3[6] = v9;
  v3[7] = v10;
  v3[4] = [objc_allocWithZone(JEUnfairLock) init];
  id v11 = objc_msgSend(v7, "ams_activeiTunesAccount");
  uint64_t v12 = (void *)v3[5];
  v3[5] = v11;

  uint64_t v13 = qword_10013BB80;
  swift_retain(v3);
  if (v13 != -1) {
    swift_once(&qword_10013BB80, sub_10002A24C);
  }
  [v8 addObserver:v3 selector:"accountStoreDidChange:" name:qword_10013C530 object:0];
  swift_release(v3);
  uint64_t v14 = qword_10013BB88;
  swift_retain(v3);
  if (v14 != -1) {
    swift_once(&qword_10013BB88, sub_10002A264);
  }
  [v8 addObserver:v3 selector:"accountCookiesDidChange:" name:qword_10013C538 object:0];
  swift_release(v3);

  return v3;
}

uint64_t sub_10002A1F4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

id sub_10002A24C()
{
  qword_10013C530 = ACDAccountStoreDidChangeNotification;
  return ACDAccountStoreDidChangeNotification;
}

id sub_10002A264()
{
  qword_10013C538 = AMSAccountCookiesChangedNotificationName;
  return AMSAccountCookiesChangedNotificationName;
}

uint64_t sub_10002A35C()
{
  uint64_t v1 = type metadata accessor for AccountProviderActiveAccountChange(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void **)(v0 + 32);
  [v5 lock];
  id v6 = objc_msgSend(*(id *)(v0 + 16), "ams_activeiTunesAccount");
  id v7 = *(void **)(v0 + 40);
  *(void *)(v0 + 40) = v6;

  [v5 unlock];
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v0 + 48));
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for AccountProviderActiveAccountChange.account(_:),  v1);
  dispatch thunk of EventEmitter.post(_:)(v4, ObjectType, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t type metadata accessor for ActiveITunesAccountProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd27ActiveITunesAccountProvider);
}

id sub_10002A520@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 32);
  [v3 lock];
  uint64_t v4 = *(void **)(v1 + 40);
  if (v4)
  {
    Account.init(wrapping:)(v4);
    uint64_t v5 = type metadata accessor for Account(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(a1, 0LL, 1LL, v5);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Account(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, 1LL, 1LL, v6);
  }

  return [v3 unlock];
}

id sub_10002A5BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A520(a1);
}

uint64_t sub_10002A5DC()
{
  return swift_unknownObjectRetain(*(void *)(*(void *)v0 + 48LL));
}

unint64_t sub_10002A604()
{
  unint64_t result = qword_10013C608;
  if (!qword_10013C608)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013C600);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AsyncEvent<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C608);
  }

  return result;
}

uint64_t sub_10002A650()
{
  uint64_t v0 = sub_100029E18((uint64_t *)&unk_10013F9D0);
  sub_10002A728(v0, qword_1001484E8);
  sub_10002A768(v0, (uint64_t)qword_1001484E8);
  unint64_t v1 = sub_10002A780();
  return MetricsFieldsContext.Property.init(_:)(0xD00000000000001BLL, 0x80000001000FA800LL, v1);
}

uint64_t sub_10002A6C4()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  sub_10002A728(v0, qword_100148500);
  sub_10002A768(v0, (uint64_t)qword_100148500);
  return MetricsFieldExclusionRequest.init(rawValue:)(0x746E6F4365676170LL, 0xEB00000000747865LL);
}

uint64_t *sub_10002A728(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_10002A768(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_10002A780()
{
  unint64_t result = qword_10013FD90;
  if (!qword_10013FD90)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCMetricsActivity);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013FD90);
  }

  return result;
}

ValueMetadata *type metadata accessor for ActivityMetricsFieldsProvider()
{
  return &type metadata for ActivityMetricsFieldsProvider;
}

uint64_t sub_10002A7CC()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t sub_10002A7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)[1]);
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10002A858;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_10002A858()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002A8A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsFieldsProviderCategory.expensive(_:);
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t sub_10002A8E4(uint64_t a1)
{
  return sub_10002A8F8(a1);
}

uint64_t sub_10002A8F8(uint64_t a1)
{
  if (qword_10013BB90 != -1) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v3 = sub_100029E18((uint64_t *)&unk_10013F9D0);
    uint64_t v4 = sub_10002A768(v3, (uint64_t)qword_1001484E8);
    unint64_t v5 = sub_10002A780();
    MetricsFieldsContext.subscript.getter(v35, v4, v5);
    if (!v35[0]) {
      break;
    }
    id v32 = v35[0];
    id v6 = [v35[0] fields];
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v8 = 0LL;
    uint64_t v9 = *(void *)(v7 + 64);
    uint64_t v33 = v7 + 64;
    uint64_t v36 = v7;
    uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
    uint64_t v11 = -1LL;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    unint64_t v12 = v11 & v9;
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    if ((v11 & v9) != 0)
    {
LABEL_6:
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_18;
    }

    while (1)
    {
      if (__OFADD__(v8++, 1LL))
      {
        __break(1u);
        goto LABEL_31;
      }

      if (v8 >= v34) {
        goto LABEL_29;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v8);
      if (!v16) {
        break;
      }
LABEL_17:
      unint64_t v12 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_18:
      uint64_t v18 = 16 * v14;
      uint64_t v19 = (uint64_t *)(*(void *)(v36 + 48) + v18);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = *(void *)(v36 + 56) + v18;
      uint64_t v23 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      v35[3] = &type metadata for String;
      v35[0] = v23;
      v35[1] = v24;
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v25 = *(void *)(a1 + 32);
      sub_10002ACB8(a1, v26);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v24);
      dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(v35, v20, v21, v26, v25);
      swift_bridgeObjectRelease(v21);
      if (v1)
      {

        swift_release(v36);
        return sub_100029F4C(v35);
      }

      sub_100029F4C(v35);
      if (v12) {
        goto LABEL_6;
      }
    }

    int64_t v17 = v8 + 1;
    if (v8 + 1 >= v34) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v17);
    if (v16) {
      goto LABEL_16;
    }
    int64_t v17 = v8 + 2;
    if (v8 + 2 >= v34) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v17);
    if (v16) {
      goto LABEL_16;
    }
    int64_t v17 = v8 + 3;
    if (v8 + 3 >= v34)
    {
LABEL_29:

      return swift_release(v36);
    }

    unint64_t v16 = *(void *)(v33 + 8 * v17);
    if (v16)
    {
LABEL_16:
      int64_t v8 = v17;
      goto LABEL_17;
    }

    while (1)
    {
      int64_t v8 = v17 + 1;
      if (__OFADD__(v17, 1LL)) {
        break;
      }
      if (v8 >= v34) {
        goto LABEL_29;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v8);
      ++v17;
      if (v16) {
        goto LABEL_17;
      }
    }

LABEL_31:
    __break(1u);
LABEL_32:
    swift_once(&qword_10013BB90, sub_10002A650);
  }

  if (qword_10013BC50 != -1) {
    swift_once(&qword_10013BC50, sub_1000D1578);
  }
  uint64_t v27 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v27, (uint64_t)qword_100148630);
  uint64_t v28 = sub_100029E18(&qword_10013EA00);
  uint64_t v29 = type metadata accessor for LogMessage(0LL);
  uint64_t v30 = swift_allocObject( v28,  ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v29 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v30 + 16) = xmmword_1000EDA10;
  LogMessage.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001000FA820LL);
  LogMessage.init(stringLiteral:)(0xD000000000000027LL, 0x80000001000FA850LL);
  Logger.error(_:)(v30, v27, &protocol witness table for OSLogger);
  return swift_bridgeObjectRelease(v30);
}

    uint64_t v22 = 0LL;
    uint64_t v15 = 1LL;
    goto LABEL_44;
  }

    uint64_t v22 = 0LL;
    memset(v118, 0, sizeof(v118));
    v117 = 0u;
LABEL_32:
    sub_100098B64((uint64_t)&v117, (uint64_t)&v119);
    uint64_t v35 = v120;
    if (!v120)
    {
      swift_release(v25);
      v84 = v98;
      v85 = -[objc_class domain](v98, "domain");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      v86 = v24;
      v88 = v87;

      v89 = -[objc_class code](v84, "code");
      v90 = objc_allocWithZone(&OBJC_CLASS___NSError);
      v91 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v88);
      v92.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v86);
      v93 = [v90 initWithDomain:v91 code:v89 userInfo:v92.super.isa];

      goto LABEL_87;
    }

    uint64_t v36 = v119;
    sub_1000445E4(v23, &v117);
    sub_100060108((uint64_t)&v117, (uint64_t)v116);
    uint64_t v37 = sub_100029E18((uint64_t *)&unk_10013E900);
    if (swift_dynamicCast(&v115, v116, v104, v37, 0LL))
    {
      v102 = v22;
      uint64_t v38 = v25;
      uint64_t v39 = v115;
      swift_getErrorValue(v115, &v112, v111);
      uint64_t v40 = sub_100098160(v111[1], v111[2]);
      swift_getErrorValue(v40, &v110, &v108);
      uint64_t v41 = v24;
      unint64_t v42 = v108;
      uint64_t v43 = v109;
      *((void *)&v114 + 1) = v109;
      uint64_t v44 = sub_10002C328(&v113);
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16LL))(v44, v42, v43);
      swift_errorRelease(v40);
      sub_1000445E4(&v113, v107);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      v106 = v41;
      uint64_t v47 = sub_10008D45C(v36, v35);
      uint64_t v48 = v41[2];
      uint64_t v49 = (v46 & 1) == 0;
      uint64_t v50 = v48 + v49;
      if (__OFADD__(v48, v49))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }

      uint64_t v51 = v46;
      if (v41[3] >= v50)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v24 = v106;
          if ((v46 & 1) == 0) {
            goto LABEL_50;
          }
        }

        else
        {
          sub_10005CA74();
          uint64_t v24 = v106;
          if ((v51 & 1) == 0) {
            goto LABEL_50;
          }
        }
      }

      else
      {
        sub_10008DBE0(v50, isUniquelyReferenced_nonNull_native);
        uint64_t v52 = sub_10008D45C(v36, v35);
        if ((v51 & 1) != (v53 & 1)) {
          goto LABEL_93;
        }
        uint64_t v47 = v52;
        uint64_t v24 = v106;
        if ((v51 & 1) == 0)
        {
LABEL_50:
          v24[(v47 >> 6) + 8] |= 1LL << v47;
          v64 = (uint64_t *)(v24[6] + 16 * v47);
          char *v64 = v36;
          v64[1] = v35;
          sub_1000445E4(v107, (_OWORD *)(v24[7] + 32 * v47));
          uint64_t v65 = v24[2];
          v66 = __OFADD__(v65, 1LL);
          uint64_t v67 = v65 + 1;
          if (v66) {
            goto LABEL_90;
          }
          v24[2] = v67;
          swift_bridgeObjectRetain(v35);
          goto LABEL_9;
        }
      }

      uint64_t v26 = (void *)(v24[7] + 32 * v47);
      sub_100029F4C(v26);
      sub_1000445E4(v107, v26);
LABEL_9:
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      swift_errorRelease(v39);
      sub_100029F4C(&v117);
      uint64_t v25 = v38;
      uint64_t v22 = v102;
      uint64_t v23 = v103;
      goto LABEL_10;
    }

    uint64_t v54 = v24;
    if (qword_10013BC00 != -1) {
      swift_once(&qword_10013BC00, sub_100098AD4);
    }
    uint64_t v55 = off_10013E8F0;
    unint64_t v56 = *((void *)off_10013E8F0 + 2);
    if (!v56) {
      goto LABEL_60;
    }
    uint64_t v57 = v22;
    v58 = *((void *)off_10013E8F0 + 4);
    v59 = *((void *)off_10013E8F0 + 5);
    if ((v58 != v36 || v59 != v35) && (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v36, v35, 0LL) & 1) == 0)
    {
      if (v56 == 1) {
        goto LABEL_60;
      }
      v76 = v55[6];
      v77 = v55[7];
      if ((v76 != v36 || v77 != v35) && (_stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v36, v35, 0LL) & 1) == 0)
      {
        if (v56 != 2)
        {
          v78 = v55 + 9;
          v79 = 2LL;
          do
          {
            v80 = v79 + 1;
            if (__OFADD__(v79, 1LL)) {
              goto LABEL_91;
            }
            v81 = *(v78 - 1);
            v82 = *v78;
            v83 = v81 == v36 && v82 == v35;
            if (v83 || (_stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v36, v35, 0LL) & 1) != 0) {
              goto LABEL_45;
            }
            v78 += 2;
            ++v79;
            v83 = v80 == v56;
            uint64_t v22 = v57;
          }

          while (!v83);
        }

uint64_t sub_10002ACB8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_10002ACE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ActionMetrics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t initializeBufferWithCopyOfBuffer for AlertAction.Button(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for AlertAction.Button(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease(a1[1]);
  if (a1[5]) {
    return sub_100029F4C(a1 + 2);
  }
  return result;
}

uint64_t initializeWithCopy for AlertAction.Button(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = a2 + 2;
  uint64_t v6 = a2[5];
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    (**(void (***)(uint64_t, void *, uint64_t))(v6 - 8))(a1 + 16, v5, v6);
  }

  else
  {
    __int128 v8 = *((_OWORD *)v5 + 1);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(void *)(a1 + 48) = v5[4];
  }

  return a1;
}

uint64_t assignWithCopy for AlertAction.Button(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)(a1 + 40) = v6;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
      return a1;
    }

LABEL_7:
    __int128 v7 = *(_OWORD *)(a2 + 16);
    __int128 v8 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = v8;
    return a1;
  }

  if (!v6)
  {
    sub_100029F4C((void *)(a1 + 16));
    goto LABEL_7;
  }

  sub_10002AEBC((void *)(a1 + 16), (void *)(a2 + 16));
  return a1;
}

    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    return a1;
  }

  if (!v17)
  {
    swift_release(v14[1]);
    goto LABEL_7;
  }

  uint64_t v18 = *((void *)v15 + 1);
  uint64_t v19 = v14[1];
  *unint64_t v14 = v17;
  v14[1] = v18;
  swift_retain(v18);
  swift_release(v19);
  return a1;
}

    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    return a1;
  }

  if (!v19)
  {
    swift_release(v16[1]);
    goto LABEL_7;
  }

  uint64_t v20 = v17[1];
  uint64_t v21 = v16[1];
  *unint64_t v16 = v19;
  v16[1] = v20;
  swift_release(v21);
  return a1;
}

  __break(1u);
  return result;
}

  unint64_t v12 = sub_100050978(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

      if (v8 == ++v10)
      {
        swift_bridgeObjectRelease(v11);
        v95 = (unint64_t)v103;
        a4 = v84;
        __int128 v7 = (uint64_t)&_swiftEmptySetSingleton;
        uint64_t v9 = (void *)&unk_10013E000;
        goto LABEL_21;
      }
    }
  }

  swift_bridgeObjectRelease(v87);
  v95 = (unint64_t)&_swiftEmptySetSingleton;
LABEL_21:
  uint64_t v5 = (void *)(a2 + v9[252]);
  swift_beginAccess(v5, v101, 33LL, 0LL);
  v100 = v7;
  uint64_t v40 = swift_bridgeObjectRetain(*v5);
  sub_100057FC4(v40);
  uint64_t v41 = a1;
  if (a4)
  {
    unint64_t v42 = swift_bridgeObjectRetain(a4);
    uint64_t v41 = sub_100096DB0(v42, v41);
    a1 = swift_bridgeObjectRelease(a4);
  }

  v91 = v5;
  if ((v41 & 0xC000000000000001LL) != 0)
  {
    if (v41 < 0) {
      uint64_t v43 = v41;
    }
    else {
      uint64_t v43 = v41 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v5 = (void *)__CocoaSet.makeIterator()(v43);
    a4 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    uint64_t v44 = sub_1000445F4();
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v102, v5, a4, v44);
    uint64_t v41 = (Swift::Int)v102[0];
    v89 = v102[1];
    uint64_t v45 = (uint64_t)v102[2];
    uint64_t v46 = (uint64_t)v102[3];
    uint64_t v47 = (unint64_t)v102[4];
  }

  else
  {
    uint64_t v46 = 0LL;
    uint64_t v48 = -1LL << *(_BYTE *)(v41 + 32);
    v89 = (void *)(v41 + 56);
    uint64_t v45 = ~v48;
    uint64_t v49 = -v48;
    if (v49 < 64) {
      uint64_t v50 = ~(-1LL << v49);
    }
    else {
      uint64_t v50 = -1LL;
    }
    uint64_t v47 = v50 & *(void *)(v41 + 56);
  }

  v82 = v45;
  v87 = (unint64_t)(v45 + 64) >> 6;
  uint64_t v51 = v95 & 0xC000000000000001LL;
  v86 = (char *)(v95 + 56);
  while (1)
  {
    if (v41 < 0)
    {
      v58 = __CocoaSet.Iterator.next()(a1);
      if (!v58) {
        goto LABEL_71;
      }
      v59 = v58;
      v98 = v58;
      uint64_t v60 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
      swift_unknownObjectRetain(v59);
      swift_dynamicCast(&v99, &v98, (char *)&type metadata for Swift.AnyObject + 8, v60, 7LL);
      uint64_t v61 = v99;
      swift_unknownObjectRelease(v59);
      __int128 v7 = v46;
      unint64_t v56 = v47;
      if (!v61) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }

    if (v47)
    {
      unint64_t v56 = (v47 - 1) & v47;
      uint64_t v57 = __clz(__rbit64(v47)) | (v46 << 6);
      __int128 v7 = v46;
      goto LABEL_57;
    }

    uint64_t v62 = v46 + 1;
    if (__OFADD__(v46, 1LL))
    {
      __break(1u);
      goto LABEL_76;
    }

    if (v62 >= v87) {
      goto LABEL_71;
    }
    uint64_t v63 = v89[v62];
    __int128 v7 = v46 + 1;
    if (!v63)
    {
      __int128 v7 = v46 + 2;
      if (v46 + 2 >= v87) {
        goto LABEL_71;
      }
      uint64_t v63 = v89[v7];
      if (!v63)
      {
        __int128 v7 = v46 + 3;
        if (v46 + 3 >= v87) {
          goto LABEL_71;
        }
        uint64_t v63 = v89[v7];
        if (!v63)
        {
          __int128 v7 = v46 + 4;
          if (v46 + 4 >= v87) {
            goto LABEL_71;
          }
          uint64_t v63 = v89[v7];
          if (!v63)
          {
            __int128 v7 = v46 + 5;
            if (v46 + 5 >= v87) {
              goto LABEL_71;
            }
            uint64_t v63 = v89[v7];
            if (!v63) {
              break;
            }
          }
        }
      }
    }

          uint64_t v15 = __clz(__rbit64(v13));
          v13 &= v13 - 1;
        }
      }

      uint64_t v20 = i + 5;
      if (i + 5 < v42)
      {
        uint64_t v18 = *(void *)(v43 + 8 * v20);
        if (v18)
        {
          uint64_t v19 = i + 5;
          goto LABEL_23;
        }

        while (1)
        {
          uint64_t v19 = v20 + 1;
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_41;
          }
          if (v19 >= v42) {
            break;
          }
          uint64_t v18 = *(void *)(v43 + 8 * v19);
          ++v20;
          if (v18) {
            goto LABEL_23;
          }
        }
      }
    }

          unint64_t v13 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }

      int64_t v17 = v15 + 3;
      if (v17 < v11)
      {
        unint64_t v16 = *(void *)(v7 + 8 * v17);
        if (v16)
        {
          uint64_t v6 = v17;
          goto LABEL_21;
        }

        while (1)
        {
          uint64_t v6 = v17 + 1;
          if (__OFADD__(v17, 1LL)) {
            goto LABEL_28;
          }
          if (v6 >= v11) {
            break;
          }
          unint64_t v16 = *(void *)(v7 + 8 * v6);
          ++v17;
          if (v16) {
            goto LABEL_21;
          }
        }
      }
    }

void *sub_10002AEBC(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 initializeWithTake for AlertAction.Button(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AlertAction.Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  if (*(void *)(a1 + 40)) {
    sub_100029F4C((void *)(a1 + 16));
  }
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertAction.Button(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertAction.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AlertAction.Button()
{
  return &type metadata for AlertAction.Button;
}

uint64_t *sub_10002B144(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = v17;
    ((void (*)(void))swift_bridgeObjectRetain)();
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
  }

  return a1;
}

uint64_t sub_10002B204(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
}

uint64_t sub_10002B268(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void *)(a2 + v15);
  *(void *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10002B2FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  void *v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = *(void *)(a2 + v17);
  uint64_t v19 = *(void *)(a1 + v17);
  *(void *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t sub_10002B3C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10002B430(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[7];
  uint64_t v20 = *(void *)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_10002B4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B4D8);
}

uint64_t sub_10002B4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10002B554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B560);
}

uint64_t sub_10002B560(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AlertAction(uint64_t a1)
{
  uint64_t result = qword_10013C670;
  if (!qword_10013C670) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlertAction);
  }
  return result;
}

uint64_t sub_10002B614(uint64_t a1)
{
  uint64_t result = type metadata accessor for ActionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1000EDAC0;
    v4[2] = &unk_1000EDAC0;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AlertActionImplementation()
{
  return &type metadata for AlertActionImplementation;
}

unint64_t sub_10002B6A8()
{
  unint64_t result = qword_10013FDC0;
  if (!qword_10013FDC0)
  {
    uint64_t v1 = type metadata accessor for AlertAction(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000EDA80, v1);
    atomic_store(result, (unint64_t *)&qword_10013FDC0);
  }

  return result;
}

uint64_t sub_10002B6F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ActionOutcome.performed(_:);
  uint64_t v3 = type metadata accessor for ActionOutcome(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

void sub_10002B748(id *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v46 = a2;
  uint64_t v44 = *a3;
  uint64_t v5 = type metadata accessor for ActionOutcome(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_100029E18(&qword_10013C6C8);
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013CBA0);
  uint64_t v42 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v14 = [*a1 selectedActionIdentifier];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  unint64_t v17 = v16;

  uint64_t v18 = HIBYTE(v17) & 0xF;
  uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000LL) != 0) {
    uint64_t v20 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v20 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20)
  {
    swift_bridgeObjectRelease(v17);
LABEL_50:
    sub_100029E18((uint64_t *)&unk_10013CC30);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for ActionOutcome.performed(_:), v5);
    Promise.__allocating_init(value:)(v8);
    return;
  }

  if ((v17 & 0x1000000000000000LL) != 0)
  {
    uint64_t v22 = sub_100050890(v15, v17, 10LL);
    uint64_t v15 = v41;
    goto LABEL_44;
  }

  if ((v17 & 0x2000000000000000LL) == 0)
  {
    if ((v15 & 0x1000000000000000LL) == 0) {
      goto LABEL_60;
    }
    for (i = (unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          i = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v15, v17))
    {
      uint64_t v22 = (uint64_t)sub_10005087C(i, v19, 10LL);
      uint64_t v15 = v23 & 1;
LABEL_44:
      swift_bridgeObjectRelease(v17);
      if ((v15 & 1) != 0) {
        break;
      }
      uint64_t v34 = type metadata accessor for AlertAction(0LL);
      if ((v22 & 0x8000000000000000LL) == 0)
      {
        uint64_t v35 = *(void *)(v46 + *(int *)(v34 + 28));
        if ((unint64_t)v22 >= *(void *)(v35 + 16))
        {
          __break(1u);
          goto LABEL_62;
        }

        sub_10002C3B0(v35 + 56 * v22 + 48, (uint64_t)&v47);
        if (v48)
        {
          sub_10002C438(&v47, (uint64_t)v49);
          inject<A, B>(_:from:)(v13, v11, a3, v11, v44);
          uint64_t v36 = v43;
          uint64_t v37 = v45;
          (*(void (**)(char *, void, uint64_t))(v43 + 104))( v10,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v45);
          ActionDispatcher.perform(_:withMetrics:asPartOf:)(v49, v10, a3, v11);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
          (*(void (**)(void *, uint64_t))(v42 + 8))(v13, v11);
          sub_100029F4C(v49);
          return;
        }

        sub_10002C3F8((uint64_t)&v47);
        goto LABEL_50;
      }

      __break(1u);
LABEL_60:
      ;
    }

    goto LABEL_50;
  }

  v49[0] = v15;
  v49[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  if (v15 == 43)
  {
    if (!v18) {
      goto LABEL_63;
    }
    uint64_t v22 = (BYTE1(v15) - 48);
    if (v18 != 2)
    {
      uint64_t v22 = 10LL * (BYTE1(v15) - 48) + (BYTE2(v15) - 48);
      uint64_t v25 = v18 - 3;
      if (v25)
      {
        uint64_t v26 = (unsigned __int8 *)v49 + 3;
        while (1)
        {
          unsigned int v27 = *v26 - 48;
          if (v27 > 9) {
            goto LABEL_31;
          }
          uint64_t v28 = 10 * v22;
          uint64_t v22 = v28 + v27;
          uint64_t v15 = 0LL;
          ++v26;
          if (!--v25) {
            goto LABEL_44;
          }
        }
      }
    }

LABEL_43:
    uint64_t v15 = 0LL;
    goto LABEL_44;
  }

  if (v15 != 45)
  {
    uint64_t v22 = (v15 - 48);
    if (v18 != 1)
    {
      uint64_t v22 = 10LL * (v15 - 48) + (BYTE1(v15) - 48);
      uint64_t v29 = v18 - 2;
      if (v29)
      {
        uint64_t v30 = (unsigned __int8 *)v49 + 2;
        while (1)
        {
          unsigned int v31 = *v30 - 48;
          if (v31 > 9) {
            goto LABEL_31;
          }
          uint64_t v32 = 10 * v22;
          uint64_t v22 = v32 + v31;
          uint64_t v15 = 0LL;
          ++v30;
          if (!--v29) {
            goto LABEL_44;
          }
        }
      }
    }

    goto LABEL_43;
  }

  if (v18)
  {
    if (v18 != 1 && (BYTE1(v15) - 48) <= 9u)
    {
      uint64_t v24 = (BYTE1(v15) - 48);
      if (v18 == 2)
      {
        uint64_t v15 = 0LL;
        uint64_t v22 = -v24;
        goto LABEL_44;
      }

      if ((BYTE2(v15) - 48) <= 9u)
      {
        uint64_t v22 = -10LL * (BYTE1(v15) - 48) - (BYTE2(v15) - 48);
        uint64_t v33 = v18 - 3;
        if (!v33) {
          goto LABEL_43;
        }
        uint64_t v38 = (unsigned __int8 *)v49 + 3;
        while (1)
        {
          unsigned int v39 = *v38 - 48;
          if (v39 > 9) {
            break;
          }
          uint64_t v40 = 10 * v22;
          uint64_t v22 = v40 - v39;
          uint64_t v15 = 0LL;
          ++v38;
          if (!--v33) {
            goto LABEL_44;
          }
        }
      }
    }

      v116 = v73;
      return swift_errorRelease(v116);
    }

    uint64_t v43 = static os_signpost_type_t.end.getter(v34);
    if (v43 == a1)
    {
      uint64_t v44 = v182;
      uint64_t v45 = objc_msgSend(v182, "name", a9);
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t v48 = v47;

      sub_100090F6C(v46, v48);
      uint64_t v50 = v49;
      swift_bridgeObjectRelease(v48);
      *(void *)&uint64_t v51 = swift_bridgeObjectRelease(v50).n128_u64[0];
      if (v50)
      {
LABEL_7:
        uint64_t v52 = objc_msgSend(v182, "endDate", v51);
        v53 = v178;
        if (v52)
        {
          uint64_t v54 = v52;
          uint64_t v55 = v177;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

          unint64_t v56 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
          uint64_t v57 = v179;
          v56(v18, v55, v179);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v18, 0LL, 1LL, v57);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v18, 1LL, v57) != 1)
          {
            v56(v26, v18, v57);
            v58 = sub_100029E18((uint64_t *)&unk_10013D850);
            v59 = v175;
            uint64_t v60 = (char *)v175 + *(int *)(v58 + 48);
            uint64_t v61 = [v182 name];
            uint64_t v62 = v53;
            uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            uint64_t v65 = v64;

            uint64_t *v59 = v63;
            v59[1] = v65;
            (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v60, v26, v57);
            swift_storeEnumTagMultiPayload(v59, v173, 1LL);
            v176(v59, v174);
            sub_10006A0B4((uint64_t)v59);
            v66 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
            uint64_t v67 = v26;
            return v66(v67, v57);
          }
        }

        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v178 + 56))(v18, 1LL, 1LL, v179);
        }

        sub_10002E92C((uint64_t)v18, (uint64_t *)&unk_10013F9B0);
        v117 = [v182 name];
        v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
        v120 = v119;

        v121 = sub_10006A070();
        v73 = swift_allocError(&type metadata for ASCSignpostGroupError, v121, 0LL, 0LL);
        *(void *)v122 = v118;
        *(void *)(v122 + 8) = v120;
        *(void *)(v122 + 16) = 0LL;
        *(void *)(v122 + 24) = 0LL;
        v123 = 2;
        goto LABEL_42;
      }

      v108 = objc_msgSend(v44, "name", v51);
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      v111 = v110;

      v112 = sub_10006A070();
      v113 = swift_allocError(&type metadata for ASCSignpostGroupError, v112, 0LL, 0LL);
      *(void *)v114 = v109;
      *(void *)(v114 + 8) = v111;
      *(void *)(v114 + 16) = 0LL;
      *(void *)(v114 + 24) = 0LL;
      *(_BYTE *)(v114 + 32) = 3;
      v115 = v184;
      v181();
      if (!v115)
      {
        swift_errorRelease(v113);
        goto LABEL_7;
      }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
}

void sub_10002BC40(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (int *)type metadata accessor for AlertAction(0LL);
  uint64_t v49 = *((void *)v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v50 = v6;
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100029E18(&qword_10013C6B0);
  inject<A, B>(_:from:)(v57, v8, a2, v8, v4);
  uint64_t v9 = *(void *)(a1 + v5[5] + 8);
  uint64_t v10 = a1 + v5[6];
  uint64_t v11 = *(void *)(v10 + 8);
  if (v9)
  {
    swift_bridgeObjectRetain(*(void *)(v10 + 8));
    swift_bridgeObjectRetain(v9);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    if (v11)
    {
LABEL_3:
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      goto LABEL_6;
    }
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v10 + 8));
    NSString v12 = 0LL;
    if (v11) {
      goto LABEL_3;
    }
  }

  NSString v13 = 0LL;
LABEL_6:
  id v14 = [objc_allocWithZone(AMSDialogRequest) initWithTitle:v12 message:v13];

  uint64_t v15 = *(void *)(a1 + v5[7]);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v46 = a1;
    __int128 v47 = v7;
    uint64_t v48 = a2;
    unint64_t v17 = (void *)(v15 + 32);
    swift_bridgeObjectRetain(v15);
    unint64_t v18 = 0LL;
    while (v18 < *(void *)(v15 + 16))
    {
      unint64_t v19 = v18 + 1;
      unint64_t v52 = v18;
      sub_10002C124(v17, (uint64_t)&v53);
      uint64_t v20 = v54;
      swift_bridgeObjectRetain(v54);
      sub_10002C160(&v53);
      unint64_t v51 = v18;
      dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v22 = v21;
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v22);
      id v25 = [(id)objc_opt_self(AMSDialogAction) actionWithTitle:v23 identifier:v24];

      [v14 addButtonAction:v25];
      v17 += 7;
      unint64_t v18 = v19;
      if (v16 == v19)
      {
        swift_bridgeObjectRelease(v15);
        id v26 = [objc_allocWithZone(AMSSystemAlertDialogTask) initWithRequest:v14];
        sub_100029E18(&qword_10013C6B8);
        uint64_t v27 = Promise<A>.init(_:)([v26 present]);
        uint64_t v28 = (uint64_t)v47;
        sub_10002C194(v46, (uint64_t)v47);
        uint64_t v29 = *(unsigned __int8 *)(v49 + 80);
        uint64_t v30 = (v29 + 16) & ~v29;
        unint64_t v31 = (v50 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v32 = swift_allocObject(&unk_1001201E8, v31 + 8, v29 | 7);
        sub_10002C294(v28, v32 + v30);
        uint64_t v33 = v48;
        *(void *)(v32 + v31) = v48;
        uint64_t v55 = type metadata accessor for SyncTaskScheduler(0LL);
        unint64_t v56 = &protocol witness table for SyncTaskScheduler;
        sub_10002C328(&v52);
        uint64_t v34 = swift_retain(v33);
        SyncTaskScheduler.init()(v34);
        uint64_t v35 = sub_100029E18((uint64_t *)&unk_10013CC30);
        unint64_t v36 = sub_10002C364();
        Promise.flatMap<A>(on:_:)(&v52, sub_10002C2D8, v32, v35, v36);

        swift_release(v27);
        uint64_t v37 = v32;
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
    sub_100029EE0(v57, v57[3]);
    v38._countAndFlagsBits = 0x4F2E6E6F69746341LL;
    v38._object = (void *)0xE90000000000004BLL;
    object = Localizer.string(forKey:)(v38)._object;
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    id v41 = [(id)objc_opt_self(AMSDialogAction) actionWithTitle:v40];

    [v14 addButtonAction:v41];
    id v42 = [objc_allocWithZone(AMSSystemAlertDialogTask) initWithRequest:v14];
    sub_100029E18(&qword_10013C6B8);
    uint64_t v43 = Promise<A>.init(_:)([v42 present]);
    uint64_t v55 = type metadata accessor for SyncTaskScheduler(0LL);
    unint64_t v56 = &protocol witness table for SyncTaskScheduler;
    uint64_t v44 = sub_10002C328(&v52);
    SyncTaskScheduler.init()(v44);
    uint64_t v45 = type metadata accessor for ActionOutcome(0LL);
    Promise.map<A>(on:_:)(&v52, sub_10002B6F0, 0LL, v45);

    uint64_t v37 = v43;
LABEL_12:
    swift_release(v37);
    sub_100029F4C(&v52);
    sub_100029F4C(v57);
  }

uint64_t sub_10002C124(void *a1, uint64_t a2)
{
  return a2;
}

void *sub_10002C160(void *a1)
{
  return a1;
}

uint64_t sub_10002C194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlertAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C1D8()
{
  uint64_t v1 = (int *)type metadata accessor for AlertAction(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease(*(void *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[7]));
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10002C294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlertAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10002C2D8(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AlertAction(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10002B748(a1, v1 + v4, *(uint64_t **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

void *sub_10002C328(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t sub_10002C364()
{
  unint64_t result = qword_10013C6C0;
  if (!qword_10013C6C0)
  {
    uint64_t v1 = sub_100029F6C((uint64_t *)&unk_10013CC30);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C6C0);
  }

  return result;
}

uint64_t sub_10002C3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013CBC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C3F8(uint64_t a1)
{
  uint64_t v2 = sub_100029E18((uint64_t *)&unk_10013CBC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002C438(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10002C450()
{
  return ASCOffer.actionMetrics.getter();
}

ValueMetadata *type metadata accessor for AlertOfferActionImplementation()
{
  return &type metadata for AlertOfferActionImplementation;
}

uint64_t sub_10002C480()
{
  return sub_100027978( (unint64_t *)&unk_10013C520,  (uint64_t (*)(uint64_t))sub_10002C4AC,  (uint64_t)&protocol conformance descriptor for ASCAlertOffer);
}

unint64_t sub_10002C4AC()
{
  unint64_t result = qword_10013C518;
  if (!qword_10013C518)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCAlertOffer);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013C518);
  }

  return result;
}

uint64_t sub_10002C4E8(void **a1, void *a2)
{
  return sub_10002C4F0(*a1, a2);
}

uint64_t sub_10002C4F0(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v38 = sub_100029E18(&qword_10013C6C8);
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v35 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for AlertAction(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100029E18(&qword_10013CBA0);
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = inject<A, B>(_:from:)(v15, v13, a2, v13, v4);
  static ActionMetrics.notInstrumented.getter(v16);
  id v17 = [a1 alertTitle];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v19 = v18;

  id v20 = [a1 alertMessage];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v22 = v21;

  uint64_t v37 = a2;
  NSString v23 = sub_10004CD58((uint64_t)a2);
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v11, v8, v40);
  NSString v24 = (uint64_t *)&v11[v9[5]];
  *NSString v24 = v34;
  v24[1] = v19;
  id v25 = (uint64_t *)&v11[v9[6]];
  uint64_t *v25 = v33;
  v25[1] = v22;
  *(void *)&v11[v9[7]] = v23;
  v42[3] = v9;
  v42[4] = sub_100027978( (unint64_t *)&qword_10013FDC0,  type metadata accessor for AlertAction,  (uint64_t)&unk_1000EDA80);
  id v26 = sub_10002C328(v42);
  sub_10002C194((uint64_t)v11, (uint64_t)v26);
  uint64_t v28 = v35;
  uint64_t v27 = v36;
  uint64_t v29 = v38;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))( v35,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v38);
  uint64_t v30 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v42, v28, v37, v12);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  sub_10002C7FC((uint64_t)v11);
  (*(void (**)(void *, uint64_t))(v41 + 8))(v15, v12);
  sub_100029F4C(v42);
  return v30;
}

uint64_t sub_10002C7FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AlertAction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10002C838(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 32));
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    uint64_t v13 = 0LL;
LABEL_17:
    swift_bridgeObjectRelease_n(v7, 2LL);
    return v13;
  }

  uint64_t v11 = v9;
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v11);
  uint64_t v13 = 0LL;
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = v2 - 1;
    while (1)
    {
      if (v14 == v13) {
        return 0LL;
      }
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 40 + 8 * v13));
      uint64_t v7 = v16;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v15 == v17 && v7 == v18) {
        break;
      }
      uint64_t v20 = v18;
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v7, v17, v18, 0LL);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v20);
      ++v13;
      if ((v21 & 1) != 0) {
        return v13;
      }
    }

    ++v13;
    goto LABEL_17;
  }

  return v13;
}

uint64_t sub_10002C980(unint64_t a1)
{
  __int128 v3 = (void *)*v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10002E188(v3);
    __int128 v3 = (void *)result;
  }

  unint64_t v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = &v3[a1];
    uint64_t v8 = v7[4];
    memmove(v7 + 4, v7 + 5, 8 * (v5 - 1 - a1));
    v3[2] = v6;
    *uint64_t v1 = v3;
    return v8;
  }

  return result;
}

char *sub_10002CA04(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_10002E19C(v3);
    uint64_t v3 = (uint64_t)result;
  }

  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 16 * a1;
    uint64_t v8 = *(void *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(void *)(v3 + 16) = v6;
    *uint64_t v1 = v3;
    return (char *)v8;
  }

  return result;
}

char *sub_10002CA8C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v68 = a6;
  uint64_t v69 = a7;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v61 = a2;
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OSLogger(0LL);
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v65 = v14;
  __chkstk_darwin(v14);
  uint64_t v62 = a1;
  uint64_t v63 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_10002E6F0(a1);
  uint64_t v16 = a3 + 56;
  uint64_t v17 = 1LL << a3[32];
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *((void *)a3 + 7);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  int64_t v21 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_5;
    }

    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v24 >= v20) {
      goto LABEL_21;
    }
    unint64_t v25 = v16[v24];
    ++v21;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_21;
      }
      unint64_t v25 = v16[v21];
      if (!v25)
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_21;
        }
        unint64_t v25 = v16[v21];
        if (!v25) {
          break;
        }
      }
    }

LABEL_33:
      __break(1u);
LABEL_34:
      swift_once(&qword_10013BC48, sub_1000D1558);
      goto LABEL_31;
    }

    int64_t v21 = v26;
    goto LABEL_20;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    id v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    NSString v37 = *v36;
    NSString v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = 16 * v18;
    int64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    void *v20 = v35;
    v20[1] = v34;
    int64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    *int64_t v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  unint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint64_t *v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v11 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }

      uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
      uint64_t v30 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v31 = *(void *)v30;
      uint64_t v32 = *(void *)(v30 + 8);
      uint64_t v33 = *(_BYTE *)(v30 + 16);
      if ((v39 & 1) == 0)
      {
        uint64_t v34 = v29;
        sub_100048494(v31, v32, v33);
      }

      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(void *)(*(void *)(v8 + 48) + 8 * v18) = v29;
      unint64_t v19 = *(void *)(v8 + 56) + 24 * v18;
      *(void *)unint64_t v19 = v31;
      *(void *)(v19 + 8) = v32;
      *(_BYTE *)(v19 + 16) = v33;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        uint64_t v13 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(v5 + 56);
      uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v29);
      uint64_t v32 = *(void *)(v30 + v29);
      if ((a2 & 1) == 0) {
        swift_retain(*(void *)(v30 + v29));
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v31);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        int64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      unint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v31;
      *(void *)(*(void *)(v8 + 56) + v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + 8 * v22);
    uint64_t v32 = *(void *)(v5 + 56) + 24 * v22;
    double v39 = *(_OWORD *)v32;
    uint64_t v33 = *(void *)(v32 + 16);
    if ((v38 & 1) == 0)
    {
      uint64_t v34 = v31;
      swift_bridgeObjectRetain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(void *)(*(void *)(v8 + 48) + 8 * v19) = v31;
    int64_t v20 = *(void *)(v8 + 56) + 24 * v19;
    *(_OWORD *)int64_t v20 = v39;
    *(void *)(v20 + 16) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  int64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(_BYTE *)(*(void *)(v5 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(void *)(v8 + 56) + v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v32;
      uint64_t v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  int64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  __break(1u);
}

unint64_t sub_10002CFDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_100053BE8(a1);
  if (!v3) {
    unint64_t v3 = sub_100045094((uint64_t)_swiftEmptyArrayStorage);
  }
  unint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"appDistributionApp");
  if (v5 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  else
  {
    uint64_t v11 = v9;
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0) {
      return v4;
    }
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  sub_10008F810( 0xD000000000000015LL,  0x80000001000FA8B0LL,  0x646E65747865LL,  0xE600000000000000LL,  isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v14 = swift_isUniquelyReferenced_nonNull_native(v4);
  sub_10008F810(0xD000000000000012LL, 0x80000001000FA8D0LL, 1752459639LL, 0xE400000000000000LL, v14);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v4;
}

id sub_10002D12C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain(a2);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v12 >= v7) {
      return (id)swift_release(a2);
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        return (id)swift_release(a2);
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v7) {
          return (id)swift_release(a2);
        }
        unint64_t v13 = *(void *)(v3 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }

void sub_10002D27C(id *a1@<X0>, unint64_t *a2@<X8>)
{
  id v3 = [*a1 responseDictionary];
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  else
  {
    unint64_t v5 = sub_1000451B4((uint64_t)_swiftEmptyArrayStorage);
  }

  *a2 = v5;
}

uint64_t sub_10002D308(unint64_t a1)
{
  if (a1 > 2)
  {
    sub_100029E18(&qword_10013C710);
    v6[0] = sub_100045094((uint64_t)_swiftEmptyArrayStorage);
    return Promise.__allocating_init(value:)(v6);
  }

  else
  {
    sub_100029E18(&qword_10013C718);
    LOBYTE(v6[0]) = 0;
    uint64_t v1 = Promise.__allocating_init(value:)(v6);
    v6[3] = type metadata accessor for SyncTaskScheduler(0LL);
    void v6[4] = &protocol witness table for SyncTaskScheduler;
    uint64_t v2 = sub_10002C328(v6);
    SyncTaskScheduler.init()(v2);
    uint64_t v3 = sub_100029E18(&qword_10013C720);
    uint64_t v4 = Promise.map<A>(on:_:)(v6, sub_10002D3E0, 0LL, v3);
    swift_release(v1);
    sub_100029F4C(v6);
  }

  return v4;
}

void sub_10002D3E0(unsigned __int8 *a1@<X0>, unint64_t *a2@<X8>)
{
  int v3 = *a1;
  unint64_t v4 = sub_100045094((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v5 = v4;
  if (v3 == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    sub_10008F810( 0x72416D6F74737563LL,  0xED00006B726F7774LL,  0x615B646E65747865LL,  0xEC0000005D737070LL,  isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    char v7 = swift_isUniquelyReferenced_nonNull_native(v5);
    sub_10008F810(0x6B726F77747261LL, 0xE700000000000000LL, 0xD00000000000001ELL, 0x80000001000FA960LL, v7);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  *a2 = v5;
}

uint64_t sub_10002D4E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  int v59 = a10;
  uint64_t v55 = type metadata accessor for AMSMediaFetcher(0LL);
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v58 = v19;
  uint64_t v60 = (uint64_t)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100029E18(&qword_10013C6D0);
  __chkstk_darwin(v20);
  Swift::String v56 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a2;
  unint64_t v23 = a5;
  uint64_t v24 = v10;
  unint64_t v25 = sub_10002CA8C(v22, a3, v23, a6, a7, a8, a9);
  uint64_t v26 = sub_10002D8BC(a1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setItemIdentifiers:", isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    id v28 = [v25 additionalQueryParams];
    if (v28)
    {
      uint64_t v29 = v28;
      unint64_t v30 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v28,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    }

    else
    {
      unint64_t v30 = sub_100045094((uint64_t)_swiftEmptyArrayStorage);
    }

    uint64_t v31 = sub_10002E10C(a4, v30);
    Class v32 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v25, "setAdditionalQueryParams:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);
  }

  if ((v59 & 1) != 0)
  {
    uint64_t v33 = (void *)(v24 + *(int *)(v55 + 24));
    uint64_t v34 = v33[3];
    uint64_t v35 = v33[4];
    sub_100029EE0(v33, v34);
    uint64_t v36 = (uint64_t)v56;
    dispatch thunk of AccountProvider.activeAccount.getter(v34, v35);
    uint64_t v37 = type metadata accessor for Account(0LL);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37) == 1)
    {
      sub_10002E92C(v36, &qword_10013C6D0);
      double v39 = 0LL;
    }

    else
    {
      double v39 = (void *)Account.acAccountCopy.getter();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    }

    uint64_t v40 = v57;
    uint64_t v41 = v58;
    [v25 setAccount:v39];
  }

  else
  {
    [v25 setAccount:0];
    uint64_t v40 = v57;
    uint64_t v41 = v58;
  }

  uint64_t v42 = sub_10002D308((unint64_t)[v25 type]);
  uint64_t v43 = v60;
  sub_10002E978(v24, v60);
  uint64_t v44 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v45 = (v44 + 24) & ~v44;
  unint64_t v46 = (v41 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v47 = swift_allocObject(&unk_1001202B8, v46 + 8, v44 | 7);
  *(void *)(v47 + 16) = v25;
  sub_10002EA90(v43, v47 + v45);
  *(void *)(v47 + v46) = v23;
  v61[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v61[4] = &protocol witness table for SyncTaskScheduler;
  sub_10002C328(v61);
  uint64_t v48 = v25;
  uint64_t v49 = swift_bridgeObjectRetain(v23);
  SyncTaskScheduler.init()(v49);
  uint64_t v50 = sub_100029E18(&qword_10013C700);
  unint64_t v51 = sub_10002EB28();
  uint64_t v52 = Promise.flatMap<A>(on:_:)(v61, sub_10002EAD4, v47, v50, v51);

  swift_release(v42);
  swift_release(v47);
  sub_100029F4C(v61);
  return v52;
}

uint64_t sub_10002D8BC(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v34 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 16);
  }

  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    double v39 = _swiftEmptyArrayStorage;
    sub_100090128(0LL, v2 & ~(v2 >> 63), 0);
    if (v34)
    {
      if (v1 < 0) {
        uint64_t v4 = v1;
      }
      else {
        uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t result = __CocoaSet.startIndex.getter(v4);
      unsigned __int8 v6 = 1;
    }

    else
    {
      uint64_t result = sub_100047F60(v1);
      unsigned __int8 v6 = v7 & 1;
    }

    uint64_t v36 = result;
    uint64_t v37 = v5;
    unsigned __int8 v38 = v6;
    if (v2 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
    }

    else
    {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
      if (v1 < 0) {
        uint64_t v8 = v1;
      }
      uint64_t v32 = v8;
      uint64_t v33 = v1;
      do
      {
        while (1)
        {
          uint64_t v15 = v36;
          uint64_t v14 = v37;
          uint64_t v16 = v38;
          sub_100047CF8(v36, v37, v38, v1);
          uint64_t v18 = v17;
          id v19 = [v17 stringValue];
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          uint64_t v22 = v21;

          unint64_t v23 = v39;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v39);
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_100090128(0LL, v23[2] + 1LL, 1);
            unint64_t v23 = v39;
          }

          unint64_t v25 = v23[2];
          unint64_t v24 = v23[3];
          if (v25 >= v24 >> 1)
          {
            uint64_t result = (uint64_t)sub_100090128((char *)(v24 > 1), v25 + 1, 1);
            unint64_t v23 = v39;
          }

          v23[2] = v25 + 1;
          uint64_t v26 = &v23[2 * v25];
          v26[4] = v20;
          v26[5] = v22;
          if (v34) {
            break;
          }
          uint64_t v1 = v33;
          uint64_t v9 = sub_10005DA24(v15, v14, v16, v33);
          uint64_t v11 = v10;
          char v13 = v12;
          sub_10002EB7C(v15, v14, v16);
          uint64_t v36 = v9;
          uint64_t v37 = v11;
          unsigned __int8 v38 = v13 & 1;
          if (!--v2) {
            goto LABEL_28;
          }
        }

        uint64_t v1 = v33;
        if ((v16 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v27 = __CocoaSet.Index.handleBitPattern.getter(v15, v14);
        if (v27) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v29 = sub_100029E18(&qword_10013C728);
        unint64_t v30 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v35, v29);
        __CocoaSet.formIndex(after:isUnique:)(v31, isUniquelyReferenced_nonNull_native, v32);
        v30(v35, 0LL);
        --v2;
      }

      while (v2);
LABEL_28:
      sub_10002EB7C(v36, v37, v38);
      return (uint64_t)v39;
    }
  }

  return result;
}

uint64_t sub_10002DB34(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain(*a1);
  id v7 = [a2 additionalQueryParams];
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  }

  else
  {
    unint64_t v9 = sub_100045094((uint64_t)_swiftEmptyArrayStorage);
  }

  uint64_t v10 = sub_10002E10C(v6, v9);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, "setAdditionalQueryParams:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

  sub_100029E18(&qword_10013C6D8);
  uint64_t v12 = Promise<A>.init(_:)([a2 perform]);
  uint64_t v13 = swift_allocObject(&unk_1001202E0, 24LL, 7LL);
  *(void *)(v13 + 16) = a4;
  uint64_t v14 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v21 = v14;
  uint64_t v22 = &protocol witness table for SyncTaskScheduler;
  sub_10002C328(v20);
  uint64_t v15 = swift_bridgeObjectRetain(a4);
  SyncTaskScheduler.init()(v15);
  Promise.then(perform:orCatchError:on:)(sub_10002F1D8, v13, MetricsIdStore.init(accountStore:amsBag:), 0LL, v20);
  swift_release(v13);
  sub_100029F4C(v20);
  uint64_t v21 = v14;
  uint64_t v22 = &protocol witness table for SyncTaskScheduler;
  uint64_t v16 = sub_10002C328(v20);
  SyncTaskScheduler.init()(v16);
  uint64_t v17 = sub_100029E18((uint64_t *)&unk_10013C6E0);
  uint64_t v18 = Promise.map<A>(on:_:)(v20, sub_10002D27C, 0LL, v17);
  swift_release(v12);
  sub_100029F4C(v20);
  return v18;
}

id sub_10002DD20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  int v51 = a9;
  uint64_t v11 = sub_100029E18(&qword_10013C6D0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a4 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(a4 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain(a4);
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }

    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }

    if (v23 >= v18) {
      goto LABEL_21;
    }
    unint64_t v24 = *(void *)(v14 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v18) {
        goto LABEL_21;
      }
      unint64_t v24 = *(void *)(v14 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v18) {
          goto LABEL_21;
        }
        unint64_t v24 = *(void *)(v14 + 8 * v20);
        if (!v24) {
          break;
        }
      }
    }

uint64_t sub_10002E10C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_10002E1B0(a1, (uint64_t)sub_10002E48C, 0LL, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

void *sub_10002E188(void *a1)
{
  return sub_100051300(0LL, a1[2], 0, a1);
}

char *sub_10002E19C(uint64_t a1)
{
  return sub_100051764(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10002E1B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = sub_1000C46B8();
  if (v9)
  {
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    uint64_t v41 = a5;
    while (1)
    {
      int64_t v23 = (void *)*a5;
      unint64_t v25 = sub_10008D45C(v12, v13);
      uint64_t v26 = v23[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        break;
      }
      char v29 = v24;
      uint64_t v45 = v14;
      if (v23[3] >= v28)
      {
        if ((a4 & 1) == 0) {
          sub_10005CC58();
        }
      }

      else
      {
        sub_10008DEDC(v28, a4 & 1);
        unint64_t v30 = sub_10008D45C(v12, v13);
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_17;
        }
        unint64_t v25 = v30;
      }

      uint64_t v32 = (void *)*a5;
      uint64_t v33 = 16 * v25;
      if ((v29 & 1) != 0)
      {
        uint64_t v16 = (uint64_t *)(v32[7] + v33);
        uint64_t v42 = *v16;
        uint64_t v43 = v16[1];
        swift_bridgeObjectRetain_n(v43, 2LL);
        v17._countAndFlagsBits = 44LL;
        v17._object = (void *)0xE100000000000000LL;
        String.append(_:)(v17);
        v18._countAndFlagsBits = v45;
        v18._object = v15;
        String.append(_:)(v18);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v43);
        id v19 = (void *)(v32[7] + v33);
        swift_bridgeObjectRelease(v19[1]);
        *id v19 = v42;
        v19[1] = v43;
      }

      else
      {
        v32[(v25 >> 6) + 8] |= 1LL << v25;
        uint64_t v34 = (uint64_t *)(v32[6] + v33);
        uint64_t *v34 = v12;
        v34[1] = v13;
        uint64_t v35 = (uint64_t *)(v32[7] + v33);
        *uint64_t v35 = v45;
        v35[1] = (uint64_t)v15;
        uint64_t v36 = v32[2];
        BOOL v37 = __OFADD__(v36, 1LL);
        uint64_t v38 = v36 + 1;
        if (v37) {
          goto LABEL_16;
        }
        v32[2] = v38;
      }

      uint64_t v12 = sub_1000C46B8();
      uint64_t v13 = v20;
      uint64_t v14 = v21;
      uint64_t v15 = v22;
      a4 = 1;
      a5 = v41;
      if (!v20) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_14:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_10002EB74(a1);
    return swift_release(a3);
  }

  return result;
}

uint64_t sub_10002E424()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_10002E448(uint64_t a1)
{
  return sub_10002D12C(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for AMSMediaFetcher(uint64_t a1)
{
  uint64_t result = qword_10013C788;
  if (!qword_10013C788) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AMSMediaFetcher);
  }
  return result;
}

uint64_t sub_10002E48C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10002E4C0()
{
  uint64_t v0 = sub_100029E18(&qword_10013C6F8);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1000EDBF0;
  uint64_t v2 = (void *)AMSMediaTaskPlatformiPad;
  uint64_t v3 = (void *)AMSMediaTaskPlatformiPhone;
  *(void *)(v1 + 32) = AMSMediaTaskPlatformiPad;
  *(void *)(v1 + 40) = v3;
  uint64_t v4 = (void *)AMSMediaTaskPlatformMac;
  uint64_t v5 = (void *)AMSMediaTaskPlatformAppleTV;
  *(void *)(v1 + 48) = AMSMediaTaskPlatformMac;
  *(void *)(v1 + 56) = v5;
  uint64_t v6 = (void *)AMSMediaTaskPlatformAppleWatch;
  id v7 = (void *)AMSMediaTaskPlatformReality;
  *(void *)(v1 + 64) = AMSMediaTaskPlatformAppleWatch;
  *(void *)(v1 + 72) = v7;
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  id v13 = v7;
  return v1;
}

uint64_t sub_10002E580(uint64_t a1)
{
  if (a1 == 7) {
    return 0LL;
  }
  uint64_t v1 = sub_10002E4C0();
  uint64_t v2 = (void *)AMSMediaTaskPlatformAppleTV;
  swift_bridgeObjectRetain(v1);
  id v3 = v2;
  unint64_t v4 = sub_10002C838((uint64_t)v3, v1);
  char v6 = v5;
  swift_bridgeObjectRelease(v1);

  if ((v6 & 1) != 0)
  {
    if (qword_10013BC48 != -1) {
      swift_once(&qword_10013BC48, sub_1000D1558);
    }
    uint64_t v7 = type metadata accessor for OSLogger(0LL);
    sub_10002A768(v7, (uint64_t)qword_100148618);
    uint64_t v8 = sub_100029E18(&qword_10013EA00);
    uint64_t v9 = type metadata accessor for LogMessage(0LL);
    uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
          + *(void *)(*(void *)(v9 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1000EDBE0;
    LogMessage.init(stringLiteral:)(0xD00000000000003BLL, 0x80000001000FA8F0LL);
    Logger.error(_:)(v10, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v10);
  }

  else
  {
  }

  return v1;
}

uint64_t sub_10002E6F0(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"app");
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
  {
    uint64_t v10 = 0LL;
LABEL_8:
    swift_bridgeObjectRelease_n(v4, 2LL);
    return v10;
  }

  uint64_t v8 = v6;
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"appDistributionApp");
  uint64_t v4 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v16 = v14;
  if (v12 == v15 && v4 == v14)
  {
    uint64_t v10 = 7LL;
    goto LABEL_8;
  }

  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v4, v15, v14, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0) {
    return 7LL;
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"appBundle");
  uint64_t v4 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v22 = v20;
  if (v18 == v21 && v4 == v20)
  {
    uint64_t v10 = 1LL;
    goto LABEL_8;
  }

  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0) {
    return 1LL;
  }
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"inAppPurchase");
  uint64_t v4 = v25;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v28 = v26;
  if (v24 == v27 && v4 == v26)
  {
    uint64_t v10 = 2LL;
    goto LABEL_8;
  }

  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v4, v27, v26, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v28);
  if ((v29 & 1) != 0) {
    return 2LL;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "appstorecomponentsd/AMSMediaFetcher.swift",  41LL,  2LL,  292LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10002E92C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100029E18(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10002E968(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10002E978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMSMediaFetcher(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E9BC()
{
  uint64_t v1 = (int *)type metadata accessor for AMSMediaFetcher(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for Bag(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  sub_100029F4C((void *)(v0 + v4 + v1[6]));
  uint64_t v8 = (void *)(v0 + v4 + v1[7]);
  if (*v8) {
    swift_release(v8[1]);
  }
  unint64_t v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = v9 + 8;
  swift_bridgeObjectRelease(*(void *)(v0 + v9));
  return swift_deallocObject(v0, v10, v3 | 7);
}

uint64_t sub_10002EA90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMSMediaFetcher(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002EAD4(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AMSMediaFetcher(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10002DB34( a1,  *(void **)(v1 + 16),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

unint64_t sub_10002EB28()
{
  unint64_t result = qword_10013C708;
  if (!qword_10013C708)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013C700);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013C708);
  }

  return result;
}

uint64_t sub_10002EB74(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002EB7C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void **sub_10002EB88(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  unint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Bag(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = a3[6];
    __int128 v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)v7 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    uint64_t v16 = a3[7];
    char v17 = (void **)((char *)v7 + v16);
    uint64_t v18 = (void **)((char *)a2 + v16);
    if (*v18)
    {
      uint64_t v19 = v18[1];
      void *v17 = *v18;
      v17[1] = v19;
      swift_retain(v19);
    }

    else
    {
      *(_OWORD *)char v17 = *(_OWORD *)v18;
    }
  }

  return v7;
}

uint64_t sub_10002EC7C(id *a1, int *a2)
{
  unint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Bag(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t result = sub_100029F4C((id *)((char *)a1 + a2[6]));
  uint64_t v7 = (id *)((char *)a1 + a2[7]);
  if (*v7) {
    return swift_release(v7[1]);
  }
  return result;
}

void **sub_10002ED00(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Bag(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = a3[6];
  __int128 v14 = *(_OWORD *)((char *)a2 + v13 + 24);
  *(_OWORD *)((char *)a1 + v13 + 24) = v14;
  (**(void (***)(void))(v14 - 8))();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void **)((char *)a1 + v15);
  char v17 = (void **)((char *)a2 + v15);
  if (*v17)
  {
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_retain(v18);
  }

  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }

  return a1;
}

void **sub_10002EDCC(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Bag(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  sub_10002AEBC((void **)((char *)a1 + a3[6]), (void **)((char *)a2 + a3[6]));
  uint64_t v13 = a3[7];
  __int128 v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(uint64_t *)((char *)a1 + v13);
  uint64_t v17 = *(uint64_t *)((char *)a2 + v13);
  if (!v16)
  {
    if (v17)
    {
      uint64_t v20 = *((void *)v15 + 1);
      *__int128 v14 = v17;
      v14[1] = v20;
      swift_retain(v20);
      return a1;
    }

void *sub_10002EEB0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Bag(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  __int128 v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((void *)v12 + 4) = *((void *)v13 + 4);
  uint64_t v15 = (void *)((char *)a1 + v11);
  uint64_t v16 = (void *)((char *)a2 + v11);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = v16[1];
    *uint64_t v15 = v17;
    v15[1] = v18;
  }

  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }

  return a1;
}

void **sub_10002EF5C(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Bag(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  sub_100029F4C((void **)((char *)a1 + v11));
  *((void *)v12 + 4) = *((void *)v13 + 4);
  __int128 v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void **)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = *(uint64_t *)((char *)a1 + v15);
  uint64_t v19 = *v17;
  if (!v18)
  {
    if (v19)
    {
      uint64_t v22 = v17[1];
      *uint64_t v16 = v19;
      v16[1] = v22;
      return a1;
    }

uint64_t sub_10002F044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002F050);
}

uint64_t sub_10002F050(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Bag(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_10002F0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002F0D8);
}

char *sub_10002F0D8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Bag(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10002F14C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Bag(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = "(";
    v4[3] = &unk_1000EDC30;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_10002F1E0(void *a1)
{
  unint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___JSValue);
  if (![v3 valueWithNewObjectInContext:a1])
  {
    __break(1u);
    goto LABEL_10;
  }

  __int128 v17 = *v1;
  __int128 v18 = v17;
  sub_10002F3FC((uint64_t)&v17);
  id v4 = a1;
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v18, &type metadata for String);
  id v6 = [v3 valueWithObject:v5 inContext:v4];
  swift_unknownObjectRelease(v5);

  if (!v6)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  JSValue.subscript.setter(v6, 25705LL, 0xE200000000000000LL);
  sub_10002F424((uint64_t)(v1 + 1), (uint64_t)v16);
  sub_10002F424((uint64_t)v16, (uint64_t)&v18);
  if (*((void *)&v18 + 1))
  {
    __int128 v15 = v18;
    id v7 = v4;
    sub_10002F3FC((uint64_t)v16);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)(&v15, &type metadata for String);
    sub_10002F46C((uint64_t)&v15);
  }

  else
  {
    id v9 = v4;
    uint64_t v8 = 0LL;
  }

  id v10 = [v3 valueWithObject:v8 inContext:v4];
  swift_unknownObjectRelease(v8);

  if (!v10) {
    goto LABEL_11;
  }
  JSValue.subscript.setter(v10, 1701667182LL, 0xE400000000000000LL);
  __int128 v14 = v1[2];
  __int128 v15 = v14;
  id v11 = v4;
  sub_10002F3FC((uint64_t)&v15);
  uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v14, &type metadata for String);
  id v13 = [v3 valueWithObject:v12 inContext:v11];
  swift_unknownObjectRelease(v12);

  if (v13)
  {
    JSValue.subscript.setter(v13, 0x6973726556707061LL, 0xEC00000064496E6FLL);
    return;
  }

LABEL_12:
  __break(1u);
}

  char v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  char v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  char v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

        __int128 v17 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        __int128 v18 = -1LL << *(_BYTE *)(a3 + 32);
        uint64_t v19 = v17 & ~v18;
        uint64_t v20 = v19 >> 6;
        uint64_t v21 = 1LL << v19;
        if (((1LL << v19) & *(void *)(v39 + 8 * (v19 >> 6))) == 0) {
          goto LABEL_3;
        }
        sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
        uint64_t v22 = *(id *)(*(void *)(a3 + 48) + 8 * v19);
        char v23 = static NSObject.== infix(_:_:)(v22);

        if ((v23 & 1) != 0) {
          break;
        }
        uint64_t v24 = ~v18;
        for (i = v19 + 1; ; i = v26 + 1)
        {
          uint64_t v26 = i & v24;
          uint64_t v27 = *(id *)(*(void *)(a3 + 48) + 8 * v26);
          uint64_t v28 = static NSObject.== infix(_:_:)(v27);

          if ((v28 & 1) != 0)
          {

            uint64_t v20 = v26 >> 6;
            uint64_t v21 = 1LL << v26;
            goto LABEL_25;
          }
        }

      uint64_t v16 = v11;
      id v4 = v45;
      __int128 v17 = v12;
    }
  }

  if (v17)
  {
    uint64_t v12 = (v17 - 1) & v17;
    __int128 v18 = __clz(__rbit64(v17)) | (v16 << 6);
    id v11 = v16;
LABEL_35:
    uint64_t v22 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    if (!v22) {
      goto LABEL_48;
    }
    goto LABEL_36;
  }

  char v23 = v16 + 1;
  if (!__OFADD__(v16, 1LL))
  {
    if (v23 >= v42) {
      goto LABEL_48;
    }
    uint64_t v24 = *(void *)(v43 + 8 * v23);
    id v11 = v16 + 1;
    if (!v24)
    {
      id v11 = v16 + 2;
      if (v16 + 2 >= v42) {
        goto LABEL_48;
      }
      uint64_t v24 = *(void *)(v43 + 8 * v11);
      if (!v24)
      {
        id v11 = v16 + 3;
        if (v16 + 3 >= v42) {
          goto LABEL_48;
        }
        uint64_t v24 = *(void *)(v43 + 8 * v11);
        if (!v24)
        {
          id v11 = v16 + 4;
          if (v16 + 4 >= v42) {
            goto LABEL_48;
          }
          uint64_t v24 = *(void *)(v43 + 8 * v11);
          if (!v24)
          {
            id v11 = v16 + 5;
            if (v16 + 5 >= v42) {
              goto LABEL_48;
            }
            uint64_t v24 = *(void *)(v43 + 8 * v11);
            if (!v24)
            {
              uint64_t v25 = v16 + 6;
              while (v42 != v25)
              {
                uint64_t v24 = *(void *)(v43 + 8 * v25++);
                if (v24)
                {
                  id v11 = v25 - 1;
                  goto LABEL_34;
                }
              }

            int v51 = v53;
LABEL_9:
            uint64_t v44 = (v52 - 1) & v52;
            uint64_t v47 = __clz(__rbit64(v52)) + (v51 << 6);
            uint64_t v45 = v51;
            goto LABEL_5;
          }
        }
      }
    }

uint64_t sub_10002F3FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002F424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013C7C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F46C(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AppDistributionAppAvailability(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *_s19appstorecomponentsd30AppDistributionAppAvailabilityVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for AppDistributionAppAvailability(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AppDistributionAppAvailability(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for AppDistributionAppAvailability(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistributionAppAvailability(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistributionAppAvailability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppDistributionAppAvailability()
{
  return &type metadata for AppDistributionAppAvailability;
}

uint64_t destroy for AppDistributionAppAvailability.Distributor(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for AppDistributionAppAvailability.Distributor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for AppDistributionAppAvailability.Distributor(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for AppDistributionAppAvailability.Distributor(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for AppDistributionAppAvailability.Distributor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistributionAppAvailability.Distributor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistributionAppAvailability.Distributor( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppDistributionAppAvailability.Distributor()
{
  return &type metadata for AppDistributionAppAvailability.Distributor;
}

ValueMetadata *type metadata accessor for AppDistributionOfferActionImplementation()
{
  return &type metadata for AppDistributionOfferActionImplementation;
}

unint64_t sub_10002F88C()
{
  unint64_t result = qword_10013C510;
  if (!qword_10013C510)
  {
    uint64_t v1 = sub_10002A030(255LL, &qword_10013C508, off_10011E498);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ASCAppDistributionOffer, v1);
    atomic_store(result, (unint64_t *)&qword_10013C510);
  }

  return result;
}

uint64_t sub_10002F8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[22] = a2;
  v3[23] = a3;
  v3[21] = a1;
  uint64_t v4 = sub_100029E18(&qword_10013C6C8);
  v3[24] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[25] = v5;
  v3[26] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ScalarDictionary(0LL);
  v3[27] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ActionMetrics(0LL);
  v3[28] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[29] = v8;
  v3[30] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OpenAppAction(0LL);
  v3[31] = v9;
  v3[32] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100029E18(&qword_10013CBA0);
  v3[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[34] = v11;
  v3[35] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AppOpenableDestination(0LL);
  v3[36] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[37] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[38] = swift_task_alloc(v14);
  v3[39] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for AppOffer(0LL);
  v3[40] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[41] = v16;
  v3[42] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for App.Kind(0LL);
  v3[43] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[44] = v18;
  v3[45] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for AdamID(0LL);
  v3[46] = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for App(0LL);
  v3[47] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v3[48] = v21;
  v3[49] = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for State(0LL);
  v3[50] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v3[51] = v23;
  unint64_t v24 = (*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[52] = swift_task_alloc(v24);
  v3[53] = swift_task_alloc(v24);
  return swift_task_switch(sub_10002FAEC, 0LL, 0LL);
}

uint64_t sub_10002FAEC()
{
  uint64_t v1 = *(void *)(v0 + 176) + qword_10013FCF0;
  swift_beginAccess(v1, v0 + 136, 0LL, 0LL);
  sub_100030628(v1, v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    sub_100030670(v0 + 56);
    uint64_t v6 = sub_100029E18((uint64_t *)&unk_10013DD40);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v6, v6);
  }

  unint64_t v2 = *(void **)(v0 + 184);
  sub_10002C438((__int128 *)(v0 + 56), v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v3);
  id v5 = [v2 id];
  AdamID.init(value:)([v5 int64value]);
  uint64_t v8 = *(void *)(v0 + 424);
  uint64_t v9 = *(void *)(v0 + 392);
  uint64_t v65 = *(void *)(v0 + 400);
  uint64_t v68 = *(void *)(v0 + 416);
  uint64_t v60 = *(void *)(v0 + 376);
  uint64_t v62 = *(void *)(v0 + 408);
  uint64_t v56 = v4;
  uint64_t v10 = *(void *)(v0 + 360);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v55 = *(void *)(v0 + 328);
  uint64_t v57 = *(void *)(v0 + 320);
  uint64_t v58 = *(void *)(v0 + 384);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 352) + 104LL))( v10,  enum case for App.Kind.store(_:),  *(void *)(v0 + 344));
  App.init(id:kind:)(v11, v10);

  sub_10003908C();
  AppStateController.state(forApp:applying:)(v9, v12, v3, v56);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v12, v57);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v9, v60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v68, v8, v65);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 88))(v68, v65);
  uint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 408);
  if (v13 != enum case for State.openable(_:))
  {
    uint64_t v34 = *(void *)(v0 + 168);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v35(*(void *)(v0 + 424), v14);
    uint64_t v36 = enum case for ActionOutcome.unsupported(_:);
    uint64_t v37 = type metadata accessor for ActionOutcome(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104LL))(v34, v36, v37);
    uint64_t v38 = *(void *)(v0 + 416);
    uint64_t v39 = *(void *)(v0 + 424);
    uint64_t v40 = *(void *)(v0 + 392);
    uint64_t v42 = *(void *)(v0 + 360);
    uint64_t v41 = *(void *)(v0 + 368);
    uint64_t v43 = *(void *)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 304);
    uint64_t v45 = *(void *)(v0 + 312);
    uint64_t v59 = *(void *)(v0 + 280);
    uint64_t v61 = *(void *)(v0 + 256);
    uint64_t v63 = *(void *)(v0 + 240);
    uint64_t v67 = *(void *)(v0 + 216);
    uint64_t v70 = *(void *)(v0 + 208);
    v35(v38, *(void *)(v0 + 400));
    sub_100029F4C((void *)(v0 + 16));
    swift_task_dealloc(v39);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v44);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v67);
    swift_task_dealloc(v70);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v16 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 312);
  uint64_t v69 = *(void *)(v0 + 304);
  uint64_t v18 = *(void *)(v0 + 288);
  uint64_t v19 = *(void *)(v0 + 296);
  uint64_t v20 = *(void **)(v0 + 280);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 176);
  uint64_t v23 = *(void **)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t))(v15 + 96))(v16, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v16, v18);
  uint64_t v25 = type metadata accessor for ObjectGraph(0LL);
  inject<A, B>(_:from:)(v20, v21, v24, v21, v25);
  id v26 = [v23 metrics];
  uint64_t v27 = sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

  size_t v29 = sub_100067DF8(v28);
  uint64_t v30 = swift_bridgeObjectRelease(v28);
  ScalarDictionary.init()(v30);
  ActionMetrics.init(data:custom:)(v29, v22);
  id v31 = [v23 id];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v69, v17, v18);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v69, v18);
  id v66 = v31;
  if (v32 == enum case for AppOpenableDestination.app(_:)) {
    goto LABEL_10;
  }
  if (v32 != enum case for AppOpenableDestination.messages(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 288));
LABEL_10:
    char v33 = 0;
    goto LABEL_11;
  }

  char v33 = 1;
LABEL_11:
  uint64_t v47 = *(int **)(v0 + 248);
  uint64_t v46 = *(void *)(v0 + 256);
  uint64_t v49 = *(void *)(v0 + 232);
  uint64_t v48 = *(void *)(v0 + 240);
  uint64_t v50 = *(void *)(v0 + 224);
  uint64_t v51 = *(void *)(v0 + 200);
  uint64_t v71 = *(void *)(v0 + 208);
  uint64_t v64 = *(void *)(v0 + 192);
  unsigned __int16 v52 = (unsigned __int16)[*(id *)(v0 + 184) flags];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v46, v48, v50);
  *(void *)(v46 + v47[5]) = v66;
  *(_BYTE *)(v46 + v47[6]) = v33;
  *(_BYTE *)(v46 + v47[7]) = (v52 & 0x2000) != 0;
  *(void *)(v0 + 120) = v47;
  *(void *)(v0 + 128) = sub_1000306B0();
  uint64_t v53 = sub_10002C328((void *)(v0 + 96));
  sub_1000306F8(v46, (uint64_t)v53);
  (*(void (**)(uint64_t, void, uint64_t))(v51 + 104))( v71,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v64);
  uint64_t v54 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
  *(void *)(v0 + 432) = v54;
  *uint64_t v54 = v0;
  v54[1] = sub_10003011C;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)( *(void *)(v0 + 168),  v0 + 96,  *(void *)(v0 + 208),  *(void *)(v0 + 176),  *(void *)(v0 + 264));
}

uint64_t sub_10003011C()
{
  unint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 432LL);
  *(void *)(*(void *)v1 + 440LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[25] + 8LL))(v2[26], v2[24]);
  if (v0)
  {
    uint64_t v4 = sub_1000302E4;
  }

  else
  {
    sub_100029F4C(v2 + 12);
    uint64_t v4 = sub_1000301AC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000301AC()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 264);
  sub_10003073C(*(void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v8 = *(void (**)(uint64_t, void))(v1 + 8);
  uint64_t v10 = *(void *)(v0 + 416);
  uint64_t v9 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v13 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 312);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 208);
  v8(v9, *(void *)(v0 + 400));
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000302E4()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 264);
  sub_10003073C(*(void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100029F4C((void *)(v0 + 96));
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v10 = *(void *)(v0 + 424);
  uint64_t v12 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 312);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v20 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 216);
  uint64_t v23 = *(void *)(v0 + 208);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003043C(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject(&unk_100120460, 32LL, 7LL);
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_100029E18((uint64_t *)&unk_10013CC30);
  swift_retain(a2);
  uint64_t v9 = Promise.__allocating_init()(v7);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v6, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_100120488, 56LL, 7LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = &unk_10013C7D8;
  v11[5] = v8;
  v11[6] = v9;
  swift_retain(v9);
  uint64_t v12 = sub_1000B3448((uint64_t)v6, (uint64_t)&unk_10013CE60, (uint64_t)v11);
  swift_release(v12);
  return v9;
}

uint64_t sub_100030564()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100030590(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013C7D4);
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002A858;
  return sub_10002F8E4(a1, v5, v4);
}

uint64_t sub_1000305F4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100030628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013C7E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030670(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013C7E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000306B0()
{
  unint64_t result = qword_10013C7F0;
  if (!qword_10013C7F0)
  {
    uint64_t v1 = type metadata accessor for OpenAppAction(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000F0FC0, v1);
    atomic_store(result, (unint64_t *)&qword_10013C7F0);
  }

  return result;
}

uint64_t sub_1000306F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenAppAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003073C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenAppAction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_100030778(char *a1)
{
}

void sub_100030784()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_1000307D0()
{
  return Hasher._finalize()();
}

void sub_100030840()
{
  __asm { BR              X10 }

uint64_t sub_10003087C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE800000000000000LL);
}

void sub_1000308D8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_100030920()
{
  return Hasher._finalize()();
}

unint64_t sub_100030990@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100030C04(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000309BC()
{
  return ((uint64_t (*)(void))((char *)sub_1000309EC + 4 * byte_1000EDD7C[*v0]))();
}

void sub_1000309EC(void *a1@<X8>)
{
  *a1 = 0x6573616863727570LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_100030A08(void *a1@<X8>)
{
  *a1 = 0x657461647075LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_100030A20(void *a1@<X8>)
{
  *a1 = 0x6F6C6E776F646572LL;
  a1[1] = 0xEA00000000006461LL;
}

_BYTE *initializeBufferWithCopyOfBuffer for AppInstallationType(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AppInstallationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v6 >= 0x7C) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

        return v84;
      }

      swift_bridgeObjectRelease(v31);
    }

    [v30 unlock];
    goto LABEL_17;
  }

  if (qword_10013BBF0 != -1) {
    swift_once(&qword_10013BBF0, sub_100093A84);
  }
  uint64_t v54 = sub_10002A768(v5, (uint64_t)qword_100148580);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v54, v5);
  uint64_t v55 = sub_100029E18(&qword_10013EA00);
  uint64_t v56 = type metadata accessor for LogMessage(0LL);
  uint64_t v57 = swift_allocObject( v55,  ((*(unsigned __int8 *)(*(void *)(v56 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v56 - 8) + 80LL))
        + *(void *)(*(void *)(v56 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v56 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v57 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(37LL, 1LL);
  v58._countAndFlagsBits = 0xD000000000000025LL;
  v58._object = (void *)0x80000001000FD990LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v58);
  v90 = (ValueMetadata *)sub_10002A030(0LL, (unint64_t *)&unk_10013DBC0, &OBJC_CLASS___ASDApp_ptr);
  v87 = (uint64_t)v10;
  uint64_t v59 = v10;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
  sub_10004C810((uint64_t)&v87);
  v60._countAndFlagsBits = 0LL;
  v60._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v60);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.info(_:)(v57, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v57);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100029EE0( &v83[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry],  *(void *)&v83[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry + 24]);
  sub_100092C60(v9);

  return v84;
}

uint64_t storeEnumTagSinglePayload for AppInstallationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100030B2C + 4 * byte_1000EDD85[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100030B60 + 4 * byte_1000EDD80[v4]))();
}

uint64_t sub_100030B60(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100030B70LL);
  }
  return result;
}

uint64_t sub_100030B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100030B84LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100030B88(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030B90(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030B9C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100030BA4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppInstallationType()
{
  return &type metadata for AppInstallationType;
}

unint64_t sub_100030BC0()
{
  unint64_t result = qword_10013C7F8;
  if (!qword_10013C7F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EDE1C, &type metadata for AppInstallationType);
    atomic_store(result, (unint64_t *)&qword_10013C7F8);
  }

  return result;
}

unint64_t sub_100030C04(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F790, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100030C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for ActionMetrics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

void *sub_100030C8C(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_100029E18(&qword_10013EE90);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = *(void *)((char *)a2 + v16 + 24);
    if (v19)
    {
      uint64_t v20 = *((void *)v18 + 4);
      *((void *)v17 + 3) = v19;
      *((void *)v17 + 4) = v20;
      (**(void (***)(void))(v19 - 8))();
    }

    else
    {
      __int128 v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v21;
      *((void *)v17 + 4) = *((void *)v18 + 4);
    }

    uint64_t v22 = a3[8];
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for ActionMetrics(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
  }

  return v4;
}

uint64_t sub_100030E04(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (void *)(a1 + a2[7]);
  if (v7[3]) {
    sub_100029F4C(v7);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for ActionMetrics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
}

void *sub_100030EB0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_100029E18(&qword_10013EE90);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
  if (v17)
  {
    uint64_t v18 = *((void *)v16 + 4);
    *((void *)v15 + 3) = v17;
    *((void *)v15 + 4) = v18;
    (**(void (***)(void))(v17 - 8))();
  }

  else
  {
    __int128 v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
    *((void *)v15 + 4) = *((void *)v16 + 4);
  }

  uint64_t v20 = a3[8];
  __int128 v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
  return a1;
}

void *sub_100030FFC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100029E18(&qword_10013EE90);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v17;
  __int128 v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)((char *)a2 + v17 + 24);
  if (!*(void *)((char *)a1 + v17 + 24))
  {
    if (v20)
    {
      *((void *)v18 + 3) = v20;
      *((void *)v18 + 4) = *((void *)v19 + 4);
      (**(void (***)(char *, char *))(v20 - 8))(v18, v19);
      goto LABEL_14;
    }

LABEL_13:
    __int128 v21 = *(_OWORD *)v19;
    __int128 v22 = *((_OWORD *)v19 + 1);
    *((void *)v18 + 4) = *((void *)v19 + 4);
    *(_OWORD *)uint64_t v18 = v21;
    *((_OWORD *)v18 + 1) = v22;
    goto LABEL_14;
  }

  if (!v20)
  {
    sub_100029F4C(v18);
    goto LABEL_13;
  }

  sub_10002AEBC(v18, v19);
LABEL_14:
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24LL))(v24, v25, v26);
  return a1;
}

  sub_1000917C8(v3);
  return (void *)v2;
}

    unint64_t v3 = v50;
    uint64_t v11 = v52;
    uint64_t v10 = v53;
    uint64_t v12 = v54;
  }

    sub_1000D7ABC((uint64_t)aBlock, v52);
    goto LABEL_19;
  }

  if (v52) {
    goto LABEL_13;
  }
LABEL_14:
  sub_1000D7ABC((uint64_t)aBlock, v52);
  if (((v21 ^ v23) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v28 = sub_100032130();
  size_t v29 = (void *)static OS_dispatch_queue.main.getter(v28);
  uint64_t v30 = *(void *)(v1 + 80);
  uint64_t v55 = sub_1000D7AD0;
  uint64_t v56 = v30;
  aBlock = _NSConcreteStackBlock;
  unsigned __int16 v52 = 1107296256LL;
  uint64_t v53 = sub_10008A71C;
  uint64_t v54 = &unk_100125F80;
  id v31 = _Block_copy(&aBlock);
  int v32 = v56;
  swift_retain(v30);
  char v33 = swift_release(v32);
  static DispatchQoS.unspecified.getter(v33);
  aBlock = (void **)_swiftEmptyArrayStorage;
  uint64_t v34 = sub_100078B04();
  uint64_t v35 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v36 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v37 = v48;
  uint64_t v38 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v35, v36, v50, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v37, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
  uint64_t v39 = *(void *)(v1 + 64);
  uint64_t v40 = *(_BYTE *)(v1 + 72);
  aBlock = *(void ***)(v1 + 56);
  unsigned __int16 v52 = v39;
  LOBYTE(v53) = v40;
  uint64_t v57 = 0xD000000000000023LL;
  uint64_t v58 = v45 | 0x8000000000000000LL;
  swift_bridgeObjectRetain(v39);
  Preferences.subscript.setter(&aBlock, &v57, v43, v42, v44, v41);
}

_OWORD *sub_1000311D0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100029E18(&qword_10013EE90);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v13 = (char *)a1 + v12;
  int v14 = (char *)a2 + v12;
  __int128 v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((void *)v13 + 4) = *((void *)v14 + 4);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  return a1;
}

void *sub_1000312EC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100029E18(&qword_10013EE90);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  uint64_t v18 = (char *)a1 + v17;
  __int128 v19 = *(_OWORD *)((char *)a2 + v17 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)((char *)a2 + v17);
  *((_OWORD *)v18 + 1) = v19;
  *((void *)v18 + 4) = *(void *)((char *)a2 + v17 + 32);
  uint64_t v20 = a3[8];
  __int128 v21 = (char *)a1 + v20;
  __int128 v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40LL))(v21, v22, v23);
  return a1;
}

uint64_t sub_10003146C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031478);
}

uint64_t sub_100031478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100029E18(&qword_10013EE90);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for ActionMetrics(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_10003151C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100031528);
}

uint64_t sub_100031528(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_100029E18(&qword_10013EE90);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for ActionMetrics(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for AppLaunchTrampolineAction(uint64_t a1)
{
  uint64_t result = qword_10013C858;
  if (!qword_10013C858) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppLaunchTrampolineAction);
  }
  return result;
}

void sub_100031604(uint64_t a1)
{
  v6[0] = &unk_1000EDEA0;
  sub_1000316A8(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    v6[2] = &unk_1000EDEB8;
    v6[3] = &unk_1000EDED0;
    uint64_t v4 = type metadata accessor for ActionMetrics(319LL);
    if (v5 <= 0x3F)
    {
      void v6[4] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v6, a1 + 16);
    }
  }

void sub_1000316A8(uint64_t a1)
{
  if (!qword_10013C868)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10013C868);
    }
  }

ValueMetadata *type metadata accessor for AppLaunchTrampolineActionImplementation()
{
  return &type metadata for AppLaunchTrampolineActionImplementation;
}

unint64_t sub_100031710()
{
  unint64_t result = qword_10013C8A8;
  if (!qword_10013C8A8)
  {
    uint64_t v1 = type metadata accessor for AppLaunchTrampolineAction(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000EDE50, v1);
    atomic_store(result, &qword_10013C8A8);
  }

  return result;
}

uint64_t sub_100031758()
{
  uint64_t v0 = type metadata accessor for ActionOutcome(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  unint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ActionOutcome.performed(_:), v0);
  Promise.resolve(_:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_1000317EC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_10003183C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a2;
  uint64_t v36 = a4;
  uint64_t v32 = a3;
  uint64_t v37 = a1;
  uint64_t v33 = sub_100029E18(&qword_10013C6C8);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  id v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100029E18(&qword_10013CBA0);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for OSLogger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC40 != -1) {
    swift_once(&qword_10013BC40, sub_1000D1538);
  }
  uint64_t v13 = sub_10002A768(v9, (uint64_t)qword_100148600);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = sub_100029E18(&qword_10013EA00);
  uint64_t v15 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
        + 2LL * *(void *)(v15 + 72),
          *(unsigned __int8 *)(v15 + 80) | 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1000EDA10;
  LogMessage.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001000FA9C0LL);
  swift_getErrorValue(v37, v44, &v42);
  uint64_t v18 = v42;
  uint64_t v17 = v43;
  v41[3] = v43;
  __int128 v19 = sub_10002C328(v41);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v19, v18, v17);
  static LogMessage.sensitive(_:)(v41);
  sub_10002E92C((uint64_t)v41, &qword_10013C6F0);
  Logger.error(_:)(v16, v9, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v20 = type metadata accessor for AppLaunchTrampolineAction(0LL);
  sub_1000320E4(v35 + *(int *)(v20 + 28), (uint64_t)&v38, (uint64_t *)&unk_10013CBC0);
  if (v39)
  {
    sub_10002C438(&v38, (uint64_t)v41);
    uint64_t v21 = type metadata accessor for ObjectGraph(0LL);
    uint64_t v22 = v32;
    inject<A, B>(_:from:)(v8, v6, v32, v6, v21);
    uint64_t v23 = v31;
    uint64_t v24 = v33;
    (*(void (**)(char *, void, uint64_t))(v31 + 104))( v5,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v33);
    uint64_t v25 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v41, v5, v22, v6);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v24);
    unint64_t v26 = sub_100032130();
    uint64_t v27 = v36;
    uint64_t v28 = swift_retain_n(v36, 2LL);
    uint64_t v29 = static OS_dispatch_queue.main.getter(v28);
    unint64_t v39 = v26;
    uint64_t v40 = &protocol witness table for OS_dispatch_queue;
    *(void *)&__int128 v38 = v29;
    Promise.then(perform:orCatchError:on:)( j___s9JetEngine7PromiseC7resolveyyxF,  v27,  j___s9JetEngine7PromiseC6rejectyys5Error_pF,  v27,  &v38);
    swift_release(v25);
    swift_release_n(v27, 2LL);
    sub_100029F4C(&v38);
    (*(void (**)(void *, uint64_t))(v34 + 8))(v8, v6);
    return sub_100029F4C(v41);
  }

  else
  {
    sub_10002E92C((uint64_t)&v38, (uint64_t *)&unk_10013CBC0);
    return Promise.reject(_:)(v37);
  }

uint64_t sub_100031BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for AppLaunchTrampolineAction(0LL);
  uint64_t v31 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v32 = v4;
  uint64_t v33 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100029E18((uint64_t *)&unk_10013CC30);
  uint64_t v9 = Promise.__allocating_init()(v8);
  id v10 = [objc_allocWithZone((Class)ASCAppLaunchTrampoline) init];
  NSString v11 = String._bridgeToObjectiveC()();
  sub_1000320E4(a1 + *(int *)(v3 + 20), (uint64_t)v7, &qword_10013EE90);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1LL, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    uint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
  }

  uint64_t v17 = v10;
  id v18 =  objc_msgSend( v10,  "openApplicationWithBundleIdentifier:payloadURL:universalLinkRequired:",  v11,  v15,  *(unsigned __int8 *)(a1 + *(int *)(v3 + 24)),  v31);

  unint64_t v39 = sub_100031ECC;
  uint64_t v40 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256LL;
  uint64_t v37 = sub_1000317EC;
  __int128 v38 = &unk_1001205E0;
  __int128 v19 = _Block_copy(&aBlock);
  uint64_t v20 = v40;
  swift_retain(v9);
  swift_release(v20);
  [v18 addSuccessBlock:v19];
  _Block_release(v19);
  uint64_t v21 = v33;
  sub_100031EEC(a1, v33);
  uint64_t v22 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  unint64_t v24 = (v32 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = swift_allocObject(&unk_100120618, v25 + 8, v22 | 7);
  sub_100032044(v21, v26 + v23);
  uint64_t v27 = v34;
  *(void *)(v26 + v24) = v34;
  *(void *)(v26 + v25) = v9;
  unint64_t v39 = sub_100032088;
  uint64_t v40 = v26;
  aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256LL;
  uint64_t v37 = sub_1000C75AC;
  __int128 v38 = &unk_100120630;
  uint64_t v28 = _Block_copy(&aBlock);
  uint64_t v29 = v40;
  swift_retain(v9);
  swift_retain(v27);
  swift_release(v29);
  [v18 addErrorBlock:v28];
  _Block_release(v28);

  return v9;
}

uint64_t sub_100031ECC()
{
  return sub_100031758();
}

uint64_t sub_100031ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100031EE4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100031EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppLaunchTrampolineAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031F30()
{
  uint64_t v1 = (int *)type metadata accessor for AppLaunchTrampolineAction(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  id v10 = (void *)(v6 + v1[7]);
  if (v10[3]) {
    sub_100029F4C(v10);
  }
  unint64_t v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = v6 + v1[8];
  uint64_t v14 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_release(*(void *)(v0 + v11));
  swift_release(*(void *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

uint64_t sub_100032044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppLaunchTrampolineAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100032088(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AppLaunchTrampolineAction(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10003183C(a1, v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000320E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100029E18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_100032130()
{
  unint64_t result = qword_10013CBB0;
  if (!qword_10013CBB0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013CBB0);
  }

  return result;
}

ValueMetadata *type metadata accessor for AppOfferActionImplementation()
{
  return &type metadata for AppOfferActionImplementation;
}

unint64_t sub_100032188()
{
  unint64_t result = qword_10013C500;
  if (!qword_10013C500)
  {
    uint64_t v1 = sub_10002A030(255LL, (unint64_t *)&qword_10013C4F8, off_10011E4A0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ASCAppOffer, v1);
    atomic_store(result, (unint64_t *)&qword_10013C500);
  }

  return result;
}

uint64_t sub_1000321E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 697) = a5;
  *(void *)(v5 + 384) = a3;
  *(void *)(v5 + 392) = a4;
  *(void *)(v5 + 368) = a1;
  *(void *)(v5 + 376) = a2;
  uint64_t v6 = type metadata accessor for ActionOutcome(0LL);
  *(void *)(v5 + 400) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 408) = v7;
  *(void *)(v5 + 416) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100029E18(&qword_10013CE40);
  *(void *)(v5 + 424) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  *(void *)(v5 + 432) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 440) = v10;
  *(void *)(v5 + 448) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v5 + 456) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OSLogger(0LL);
  *(void *)(v5 + 464) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v5 + 472) = v13;
  *(void *)(v5 + 480) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AppInstallationType(0LL);
  *(void *)(v5 + 488) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v5 + 496) = v15;
  *(void *)(v5 + 504) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for AppOffer(0LL);
  *(void *)(v5 + 512) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v5 + 520) = v17;
  *(void *)(v5 + 528) = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for State(0LL);
  *(void *)(v5 + 536) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v5 + 544) = v19;
  uint64_t v20 = *(void *)(v19 + 64);
  *(void *)(v5 + 552) = v20;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 560) = swift_task_alloc(v21);
  *(void *)(v5 + 568) = swift_task_alloc(v21);
  uint64_t v22 = type metadata accessor for App.Kind(0LL);
  *(void *)(v5 + 576) = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  *(void *)(v5 + 584) = v23;
  *(void *)(v5 + 592) = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for AdamID(0LL);
  *(void *)(v5 + 600) = swift_task_alloc((*(void *)(*(void *)(v24 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for App(0LL);
  *(void *)(v5 + 608) = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  *(void *)(v5 + 616) = v26;
  *(void *)(v5 + 624) = swift_task_alloc((*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000323D8, 0LL, 0LL);
}

uint64_t sub_1000323D8()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = sub_10002A030(0LL, (unint64_t *)&qword_10013FD90, off_10011E548);
  uint64_t v3 = type metadata accessor for ObjectGraph(0LL);
  inject<A, B>(_:from:)((void *)(v0 + 352), v2, v1, v2, v3);
  unint64_t v4 = *(void **)(v0 + 352);
  *(void *)(v0 + 632) = v4;
  id v5 = [v4 fields];
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"redirectUrlParameters");
  uint64_t v9 = v8;
  if (*(void *)(v6 + 16) && (unint64_t v10 = sub_10008D45C(v7, v8), (v11 & 1) != 0))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v10);
    uint64_t v13 = v12[1];
    uint64_t v44 = *v12;
    swift_bridgeObjectRetain(v13);
  }

  else
  {
    uint64_t v44 = 0LL;
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = *(void *)(v0 + 376);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  uint64_t v15 = sub_100029E18(&qword_10013DD60);
  inject<A, B>(_:from:)((void *)(v0 + 56), v15, v14, v15, v3);
  uint64_t v16 = v14 + qword_10013FCF0;
  swift_beginAccess(v14 + qword_10013FCF0, v0 + 328, 0LL, 0LL);
  sub_100030628(v16, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    uint64_t v17 = *(void **)(v0 + 384);
    sub_10002C438((__int128 *)(v0 + 136), v0 + 96);
    id v18 = [v17 id];
    AdamID.init(value:)([v18 int64value]);
    uint64_t v20 = *(void *)(v0 + 624);
    uint64_t v21 = *(void *)(v0 + 600);
    uint64_t v22 = *(void *)(v0 + 592);
    uint64_t v23 = *(void *)(v0 + 568);
    uint64_t v39 = *(void *)(v0 + 544);
    uint64_t v40 = *(void *)(v0 + 560);
    uint64_t v24 = *(void *)(v0 + 528);
    uint64_t v35 = *(void *)(v0 + 520);
    uint64_t v36 = *(void *)(v0 + 512);
    uint64_t v41 = *(void *)(v0 + 536);
    uint64_t v42 = *(void *)(v0 + 496);
    uint64_t v43 = *(void *)(v0 + 488);
    uint64_t v37 = *(void *)(v0 + 504);
    id v38 = *(id *)(v0 + 384);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 584) + 104LL))( v22,  enum case for App.Kind.store(_:),  *(void *)(v0 + 576));
    App.init(id:kind:)(v21, v22);

    uint64_t v25 = *(void *)(v0 + 120);
    uint64_t v26 = *(void *)(v0 + 128);
    sub_100029EE0((void *)(v0 + 96), v25);
    sub_10003908C();
    AppStateController.state(forApp:applying:)(v20, v24, v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v24, v36);
    uint64_t v27 = *(void *)(v0 + 120);
    uint64_t v28 = *(void *)(v0 + 128);
    sub_100029EE0((void *)(v0 + 96), v27);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    *(void *)(v0 + 640) = v29;
    v29(v40, v23, v41);
    AppInstallationType.init(_:)(v40);
    dispatch thunk of AppStateController.setWaiting(forApp:installationType:)(v20, v37, v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v37, v43);
    sub_100029EE0((void *)(v0 + 56), *(void *)(v0 + 80));
    id v30 = [v38 id];
    *(void *)(v0 + 648) = sub_1000AED80(v44, v13, v30);

    swift_bridgeObjectRelease(v13);
    uint64_t v31 = sub_100029E18(&qword_10013C718);
    uint64_t v32 = sub_100039030(&qword_10013C8E8, &qword_10013C718);
    uint64_t v33 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    *(void *)(v0 + 656) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_1000328D0;
    return dispatch thunk of Future.then()(v0 + 696, v31, v32);
  }

  else
  {
    sub_10002E92C(v0 + 136, &qword_10013C7E0);
    uint64_t v19 = sub_100029E18((uint64_t *)&unk_10013DD40);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v19, v19);
  }

uint64_t sub_1000328D0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 656);
  *(void *)(*v1 + 664) = v0;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v2 + 648));
  if (v0)
  {
    unint64_t v4 = sub_1000330B4;
  }

  else
  {
    *(_BYTE *)(v2 + 698) = *(_BYTE *)(v2 + 696);
    unint64_t v4 = sub_100032948;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100032948()
{
  if (qword_10013BC48 != -1) {
    swift_once(&qword_10013BC48, sub_1000D1558);
  }
  char v1 = *(_BYTE *)(v0 + 698);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v6 = *(void **)(v0 + 384);
  uint64_t v7 = sub_10002A768(v5, (uint64_t)qword_100148618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v5);
  uint64_t v8 = sub_100029E18(&qword_10013EA00);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 2LL);
  v11._object = (void *)0x80000001000FAA30LL;
  v11._countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  id v12 = [v6 id];
  *(void *)(v0 + 264) = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  *(void *)(v0 + 240) = v12;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 240);
  sub_10002E92C(v0 + 240, &qword_10013C6F0);
  v13._countAndFlagsBits = 0x6572206874697720LL;
  v13._object = (void *)0xEE00203A746C7573LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  *(void *)(v0 + 200) = &type metadata for Bool;
  *(_BYTE *)(v0 + 176) = v1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 176);
  sub_10002E92C(v0 + 176, &qword_10013C6F0);
  v14._countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.info(_:)(v10, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v10);
  uint64_t v35 = *(void *)(v0 + 568);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
  uint64_t v15 = *(void *)(v0 + 560);
  uint64_t v16 = *(void *)(v0 + 544);
  uint64_t v17 = *(void *)(v0 + 536);
  uint64_t v18 = *(void *)(v0 + 440);
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v20 = *(void *)(v0 + 432);
  uint64_t v40 = *(void *)(v0 + 424);
  char v39 = *(_BYTE *)(v0 + 697);
  uint64_t v22 = *(void **)(v0 + 384);
  uint64_t v21 = *(void *)(v0 + 392);
  uint64_t v37 = *(void *)(v0 + 376);
  uint64_t v38 = *(void *)(v0 + 552);
  (*(void (**)(void, void))(*(void *)(v0 + 472) + 8LL))(*(void *)(v0 + 480), *(void *)(v0 + 464));
  sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))( v19,  enum case for DispatchQoS.QoSClass.default(_:),  v20);
  uint64_t v41 = (void *)static OS_dispatch_queue.global(qos:)(v19);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
  v36(v15, v35, v17);
  sub_1000388F0(v21, v0 + 16);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  unint64_t v25 = (v24 + v38) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = swift_allocObject(&unk_100120760, v25 + 48, v23 | 7);
  *(void *)(v26 + 16) = v37;
  *(void *)(v26 + 24) = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v26 + v24, v15, v17);
  *(_BYTE *)(v26 + v24 + v38) = v39;
  sub_10002C438((__int128 *)(v0 + 16), v25 + v26 + 8);
  uint64_t v27 = sub_100029E18((uint64_t *)&unk_10013CC30);
  swift_retain(v37);
  uint64_t v28 = Promise.__allocating_init()(v22);
  *(void *)(v0 + 672) = v28;
  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v40, 1LL, 1LL, v29);
  id v30 = (void *)swift_allocObject(&unk_100120788, 56LL, 7LL);
  void v30[2] = 0LL;
  v30[3] = 0LL;
  v30[4] = &unk_10013C8F8;
  v30[5] = v26;
  v30[6] = v28;
  swift_retain(v28);
  uint64_t v31 = sub_1000B3448(v40, (uint64_t)&unk_10013C900, (uint64_t)v30);
  swift_release(v31);

  uint64_t v32 = sub_100039030((unint64_t *)&qword_10013C6C0, (uint64_t *)&unk_10013CC30);
  uint64_t v33 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  *(void *)(v0 + 680) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_100032D70;
  return dispatch thunk of Future.then()(*(void *)(v0 + 416), v27, v32);
}

uint64_t sub_100032D70()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 680LL);
  *(void *)(*(void *)v1 + 688LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[84];
  if (v0)
  {
    swift_release(v2[84]);
    uint64_t v5 = sub_100032F6C;
  }

  else
  {
    (*(void (**)(void, void))(v2[51] + 8LL))(v2[52], v2[50]);
    swift_release(v4);
    uint64_t v5 = sub_100032E00;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100032E00()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v13 = *(void *)(v0 + 560);
  uint64_t v14 = *(void *)(v0 + 528);
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 480);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v0 + 368);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v9, enum case for ActionOutcome.performed(_:), v8);
  sub_100029F4C((void *)(v0 + 96));
  sub_100029F4C((void *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v4);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100032F6C()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 624);
  uint64_t v8 = *(void *)(v0 + 600);
  uint64_t v9 = *(void *)(v0 + 592);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 560);
  uint64_t v12 = *(void *)(v0 + 528);
  uint64_t v13 = *(void *)(v0 + 504);
  uint64_t v14 = *(void *)(v0 + 480);
  uint64_t v16 = *(void *)(v0 + 456);
  uint64_t v17 = *(void *)(v0 + 448);
  uint64_t v18 = *(void *)(v0 + 424);
  uint64_t v19 = *(void *)(v0 + 416);
  sub_100029F4C((void *)(v0 + 96));
  sub_100029F4C((void *)(v0 + 56));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000330B4()
{
  if (qword_10013BC40 != -1) {
    swift_once(&qword_10013BC40, sub_1000D1538);
  }
  uint64_t v41 = *(void *)(v0 + 664);
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = *(void **)(v0 + 384);
  uint64_t v6 = sub_10002A768(v4, (uint64_t)qword_100148600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v6, v4);
  uint64_t v7 = sub_100029E18(&qword_10013EA00);
  uint64_t v8 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(45LL, 2LL);
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  v10._object = (void *)0x80000001000FA9F0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  id v11 = [v5 id];
  *(void *)(v0 + 296) = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  *(void *)(v0 + 272) = v11;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 272);
  sub_10002E92C(v0 + 272, &qword_10013C6F0);
  v12._object = (void *)0x80000001000FAA10LL;
  v12._countAndFlagsBits = 0xD000000000000011LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue(v41, v0 + 360, v0 + 304);
  uint64_t v14 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 312);
  *(void *)(v0 + 232) = v13;
  uint64_t v15 = sub_10002C328((void *)(v0 + 208));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v15, v14, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 208);
  sub_10002E92C(v0 + 208, &qword_10013C6F0);
  v16._countAndFlagsBits = 0LL;
  v16._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)(v3);
  Logger.error(_:)(v9, v4, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  swift_errorRelease(v41);
  uint64_t v37 = *(void *)(v0 + 568);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
  uint64_t v17 = *(void *)(v0 + 560);
  uint64_t v18 = *(void *)(v0 + 544);
  uint64_t v19 = *(void *)(v0 + 536);
  uint64_t v20 = *(void *)(v0 + 440);
  uint64_t v21 = *(void *)(v0 + 448);
  uint64_t v22 = *(void *)(v0 + 432);
  uint64_t v42 = *(void *)(v0 + 424);
  LOBYTE(v41) = *(_BYTE *)(v0 + 697);
  uint64_t v24 = *(void **)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 392);
  uint64_t v39 = *(void *)(v0 + 376);
  uint64_t v40 = *(void *)(v0 + 552);
  (*(void (**)(void, void))(*(void *)(v0 + 472) + 8LL))(*(void *)(v0 + 480), *(void *)(v0 + 464));
  sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v21,  enum case for DispatchQoS.QoSClass.default(_:),  v22);
  uint64_t v43 = (void *)static OS_dispatch_queue.global(qos:)(v21);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
  v38(v17, v37, v19);
  sub_1000388F0(v23, v0 + 16);
  uint64_t v25 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  unint64_t v27 = (v26 + v40) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = swift_allocObject(&unk_100120760, v27 + 48, v25 | 7);
  *(void *)(v28 + 16) = v39;
  *(void *)(v28 + 24) = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v28 + v26, v17, v19);
  *(_BYTE *)(v28 + v26 + v40) = v41;
  sub_10002C438((__int128 *)(v0 + 16), v27 + v28 + 8);
  uint64_t v29 = sub_100029E18((uint64_t *)&unk_10013CC30);
  swift_retain(v39);
  uint64_t v30 = Promise.__allocating_init()(v24);
  *(void *)(v0 + 672) = v30;
  uint64_t v31 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v42, 1LL, 1LL, v31);
  uint64_t v32 = (void *)swift_allocObject(&unk_100120788, 56LL, 7LL);
  v32[2] = 0LL;
  v32[3] = 0LL;
  v32[4] = &unk_10013C8F8;
  v32[5] = v28;
  v32[6] = v30;
  swift_retain(v30);
  uint64_t v33 = sub_1000B3448(v42, (uint64_t)&unk_10013C900, (uint64_t)v32);

  swift_release(v33);
  uint64_t v34 = sub_100039030((unint64_t *)&qword_10013C6C0, (uint64_t *)&unk_10013CC30);
  uint64_t v35 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  *(void *)(v0 + 680) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100032D70;
  return dispatch thunk of Future.then()(*(void *)(v0 + 416), v29, v34);
}

uint64_t sub_100033514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3;
}

id sub_100033544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v15 = v14;
  v6(v7, v9, v10, v12, v13, v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v15);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  return v18;
}

uint64_t sub_100033604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 728) = a6;
  *(_BYTE *)(v6 + 1108) = a5;
  *(void *)(v6 + 720) = a4;
  *(void *)(v6 + 712) = a3;
  *(void *)(v6 + 704) = a2;
  *(void *)(v6 + 696) = a1;
  uint64_t v7 = type metadata accessor for AppOffer(0LL);
  *(void *)(v6 + 736) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 744) = v8;
  *(void *)(v6 + 752) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for State(0LL);
  *(void *)(v6 + 760) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 768) = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 776) = swift_task_alloc(v11);
  *(void *)(v6 + 784) = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for App.Kind(0LL);
  *(void *)(v6 + 792) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 800) = v13;
  *(void *)(v6 + 808) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AdamID(0LL);
  *(void *)(v6 + 816) = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for App(0LL);
  *(void *)(v6 + 824) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v6 + 832) = v16;
  *(void *)(v6 + 840) = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v6 + 848) = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for OSLogger(0LL);
  *(void *)(v6 + 856) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v6 + 864) = v19;
  *(void *)(v6 + 872) = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100033768, 0LL, 0LL);
}

uint64_t sub_100033768()
{
  uint64_t v1 = *(void *)(v0 + 704) + qword_10013FCF0;
  swift_beginAccess(v1, v0 + 560, 0LL, 0LL);
  sub_100030628(v1, v0 + 96);
  if (*(void *)(v0 + 120))
  {
    uint64_t v18 = *(void *)(v0 + 720);
    uint64_t v2 = *(void *)(v0 + 712);
    uint64_t v3 = *(void *)(v0 + 704);
    sub_10002C438((__int128 *)(v0 + 96), v0 + 16);
    uint64_t v4 = sub_100029E18(&qword_10013CB70);
    uint64_t v5 = type metadata accessor for ObjectGraph(0LL);
    inject<A, B>(_:from:)((void *)(v0 + 136), v4, v3, v4, v5);
    uint64_t v6 = sub_100029E18((uint64_t *)&unk_10013DD10);
    inject<A, B>(_:from:)((void *)(v0 + 56), v6, v3, v6, v5);
    uint64_t v7 = sub_10002A030(0LL, (unint64_t *)&qword_10013FD90, off_10011E548);
    inject<A, B>(_:from:)((void *)(v0 + 632), v7, v3, v7, v5);
    uint64_t v8 = *(void **)(v0 + 632);
    uint64_t v9 = (void *)sub_100038D50(v8);
    *(void *)(v0 + 880) = v9;

    uint64_t v10 = sub_10002A030(0LL, &qword_10013CC10, off_10011E560);
    inject<A, B>(_:from:)((void *)(v0 + 680), v10, v3, v10, v5);
    *(void *)(v0 + 888) = *(void *)(v0 + 680);
    unint64_t v11 = sub_100029EE0((void *)(v0 + 136), *(void *)(v0 + 160));
    inject<A, B>(_:from:)((void *)(v0 + 672), v10, v3, v10, v5);
    uint64_t v12 = *(void **)(v0 + 672);
    *(void *)(v0 + 896) = sub_1000AF228(v2, v18, v9, (uint64_t)v12, *v11);

    uint64_t v13 = sub_100029E18(&qword_10013C908);
    uint64_t v14 = sub_100039030((unint64_t *)&qword_10013CB90, &qword_10013C908);
    uint64_t v15 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    *(void *)(v0 + 904) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1000339E0;
    return dispatch thunk of Future.then()(v0 + 656, v13, v14);
  }

  else
  {
    sub_10002E92C(v0 + 96, &qword_10013C7E0);
    uint64_t v17 = sub_100029E18((uint64_t *)&unk_10013DD40);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v17, v17);
  }

uint64_t sub_1000339E0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 904LL);
  *(void *)(*(void *)v1 + 912LL) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[112]);
  if (v0)
  {
    uint64_t v4 = sub_100033A54;
  }

  else
  {
    v2[115] = v2[82];
    uint64_t v4 = sub_100033B40;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100033A54()
{
  uint64_t v1 = *(void **)(v0 + 880);

  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 848);
  uint64_t v4 = *(void *)(v0 + 840);
  uint64_t v5 = *(void *)(v0 + 816);
  uint64_t v6 = *(void *)(v0 + 808);
  uint64_t v7 = *(void *)(v0 + 784);
  uint64_t v9 = *(void *)(v0 + 776);
  uint64_t v10 = *(void *)(v0 + 752);
  sub_100029F4C((void *)(v0 + 56));
  sub_100029F4C((void *)(v0 + 136));
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100033B40()
{
  id v66 = (void *)(v0 + 16);
  uint64_t v69 = v0 + 368;
  if (qword_10013BC40 != -1) {
    swift_once(&qword_10013BC40, sub_1000D1538);
  }
  uint64_t v1 = *(void **)(v0 + 920);
  uint64_t v74 = *(void *)(v0 + 912);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v67 = v3;
  uint64_t v4 = *(void *)(v0 + 856);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v6 = sub_10002A768(v4, (uint64_t)qword_100148600);
  *(void *)(v0 + 928) = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 936) = v7;
  uint64_t v64 = v7;
  uint64_t v65 = v6;
  ((void (*)(uint64_t))v7)(v2);
  uint64_t v8 = sub_100029E18(&qword_10013EA00);
  *(void *)(v0 + 944) = v8;
  uint64_t v9 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  *(void *)(v0 + 952) = v10;
  LODWORD(v9) = *(_DWORD *)(v9 + 80);
  *(_DWORD *)(v0 + 1104) = v9;
  uint64_t v9 = v9;
  uint64_t v62 = ((v9 + 32) & ~v9) + v10;
  uint64_t v63 = v8;
  uint64_t v61 = v9 | 7LL;
  uint64_t v11 = swift_allocObject(v8, v62, v61);
  *(_OWORD *)(v11 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(37LL, 2LL);
  v12._countAndFlagsBits = 0xD000000000000014LL;
  v12._object = (void *)0x80000001000FAA50LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  id v13 = [v1 id];
  *(void *)(v0 + 360) = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  *(void *)(v0 + 336) = v13;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 336);
  sub_10002E92C(v0 + 336, &qword_10013C6F0);
  v14._object = (void *)0x80000001000FAA70LL;
  v14._countAndFlagsBits = 0xD000000000000011LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v15 = sub_10004E8C0();
  *(void *)(v0 + 392) = &type metadata for String;
  *(void *)(v0 + 368) = v15;
  *(void *)(v0 + 376) = v16;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v69);
  sub_10002E92C(v69, &qword_10013C6F0);
  v17._countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.info(_:)(v11, v4, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v11);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  *(void *)(v0 + 960) = v18;
  v18(v2, v4);
  id v19 = [v1 id];
  AdamID.init(value:)([v19 int64value]);
  uint64_t v20 = *(void **)(v0 + 920);
  uint64_t v21 = *(void **)(v0 + 888);
  if (v74)
  {
    uint64_t v22 = *(void **)(v0 + 880);

LABEL_5:
    uint64_t v23 = *(void *)(v0 + 872);
    uint64_t v24 = *(void *)(v0 + 848);
    uint64_t v25 = *(void *)(v0 + 840);
    uint64_t v26 = *(void *)(v0 + 816);
    uint64_t v27 = *(void *)(v0 + 808);
    uint64_t v28 = *(void *)(v0 + 784);
    uint64_t v29 = *(void *)(v0 + 776);
    uint64_t v30 = *(void *)(v0 + 752);
    sub_100029F4C((void *)(v0 + 56));
    sub_100029F4C((void *)(v0 + 136));
    sub_100029F4C(v66);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v32 = *(void *)(v0 + 816);
  uint64_t v33 = *(void *)(v0 + 808);
  uint64_t v34 = *(char **)(v0 + 784);
  uint64_t v70 = *(void *)(v0 + 768);
  uint64_t v72 = *(void *)(v0 + 760);
  int v75 = *(unsigned __int8 *)(v0 + 1108);
  uint64_t v35 = *(void *)(v0 + 720);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 800) + 104LL))( v33,  enum case for App.Kind.store(_:),  *(void *)(v0 + 792));
  App.init(id:kind:)(v32, v33);

  sub_10002A030(0LL, &qword_10013C910, &OBJC_CLASS___ASDPurchase_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v34, v35, v72);
  id v36 = sub_100076B70(v20, v21, v34, v75);
  *(void *)(v0 + 968) = v36;
  if (!v36)
  {
    uint64_t v51 = *(void **)(v0 + 888);
    unsigned __int16 v52 = *(void **)(v0 + 880);
    uint64_t v53 = *(void *)(v0 + 840);
    uint64_t v68 = *(void *)(v0 + 832);
    uint64_t v71 = *(void *)(v0 + 824);
    v73 = *(void **)(v0 + 920);
    uint64_t v54 = *(void *)(v0 + 40);
    uint64_t v55 = *(void *)(v0 + 48);
    sub_100029EE0(v66, v54);
    dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)(v53, 1LL, v54, v55);
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v57 = v56;
    *(void *)(v0 + 640) = 1LL;
    unint64_t v58 = sub_100043C24((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v59 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
    uint64_t v60 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 648), v0 + 640, v58, v57, v59);
    swift_willThrow(v60);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v53, v71);
    goto LABEL_5;
  }

  uint64_t v37 = v36;
  uint64_t v38 = *(void *)(v0 + 872);
  uint64_t v39 = *(void *)(v0 + 856);
  uint64_t v40 = *(void *)(v0 + 848);
  uint64_t v41 = *(void **)(v0 + 728);
  v64(v38, v65, v39);
  uint64_t v42 = swift_allocObject(v63, v62, v61);
  *(_OWORD *)(v42 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(24LL, 1LL);
  v43._countAndFlagsBits = 0x697474696D627553LL;
  v43._object = (void *)0xEB0000000020676ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v43);
  id v44 = [v37 itemID];
  uint64_t v45 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v0 + 976) = v45;
  *(void *)(v0 + 200) = v45;
  *(void *)(v0 + 176) = v44;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 176);
  sub_10002E92C(v0 + 176, &qword_10013C6F0);
  v46._countAndFlagsBits = 0x73707061206F7420LL;
  v46._object = (void *)0xED00006465726F74LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v46);
  LogMessage.init(stringInterpolation:)(v40);
  Logger.info(_:)(v42, v39, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v42);
  v18(v38, v39);
  uint64_t v47 = v41[3];
  uint64_t v48 = v41[4];
  sub_100029EE0(v41, v47);
  uint64_t v49 = *(void *)(v48 + 8);
  uint64_t v50 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PurchaseManager.start(_:)[1]);
  *(void *)(v0 + 984) = v50;
  *uint64_t v50 = v0;
  v50[1] = sub_1000341C0;
  return dispatch thunk of PurchaseManager.start(_:)(v37, v47, v49);
}

uint64_t sub_1000341C0(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 984);
  *(void *)(*v2 + 992) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10003541C;
  }

  else
  {
    *(_BYTE *)(v4 + 1109) = a1 & 1;
    uint64_t v6 = sub_100034238;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100034238()
{
  int v1 = *(unsigned __int8 *)(v0 + 1109);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1104);
  uint64_t v3 = *(void *)(v0 + 944);
  uint64_t v4 = ((v2 + 32) & ~v2) + *(void *)(v0 + 952);
  uint64_t v5 = v2 | 7;
  (*(void (**)(void, void, void))(v0 + 936))( *(void *)(v0 + 872),  *(void *)(v0 + 928),  *(void *)(v0 + 856));
  uint64_t v6 = swift_allocObject(v3, v4, v5);
  *(_OWORD *)(v6 + 16) = xmmword_1000EDBE0;
  uint64_t v7 = *(void *)(v0 + 976);
  uint64_t v8 = *(void **)(v0 + 968);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  if (v1 == 1)
  {
    uint64_t v10 = *(void *)(v0 + 872);
    uint64_t v11 = *(void *)(v0 + 856);
    uint64_t v12 = *(void *)(v0 + 848);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(23LL, 1LL);
    v13._countAndFlagsBits = 0xD000000000000017LL;
    v13._object = (void *)0x80000001000FAAB0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    id v14 = [v8 itemID];
    *(void *)(v0 + 488) = v7;
    *(void *)(v0 + 464) = v14;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 464);
    sub_10002E92C(v0 + 464, &qword_10013C6F0);
    v15._countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    LogMessage.init(stringInterpolation:)(v12);
    Logger.info(_:)(v6, v11, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v6);
    v9(v10, v11);
    if (sub_10004EAFC())
    {
      uint64_t v52 = *(void *)(v0 + 976);
      uint64_t v16 = *(void **)(v0 + 968);
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
      uint64_t v17 = *(unsigned __int8 *)(v0 + 1104);
      uint64_t v18 = *(void *)(v0 + 944);
      uint64_t v19 = *(void *)(v0 + 872);
      uint64_t v20 = *(void *)(v0 + 856);
      uint64_t v21 = *(void *)(v0 + 848);
      uint64_t v22 = ((v17 + 32) & ~v17) + *(void *)(v0 + 952);
      uint64_t v23 = v17 | 7;
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 936))(v19, *(void *)(v0 + 928), v20);
      uint64_t v24 = swift_allocObject(v18, v22, v23);
      *(_OWORD *)(v24 + 16) = xmmword_1000EDBE0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(24LL, 1LL);
      v25._countAndFlagsBits = 0xD000000000000018LL;
      v25._object = (void *)0x80000001000FAAD0LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      id v26 = [v16 itemID];
      *(void *)(v0 + 456) = v52;
      *(void *)(v0 + 432) = v26;
      LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 432);
      sub_10002E92C(v0 + 432, &qword_10013C6F0);
      v27._countAndFlagsBits = 0LL;
      v27._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      LogMessage.init(stringInterpolation:)(v21);
      Logger.info(_:)(v24, v20, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v24);
      v53(v19, v20);
      uint64_t v29 = *(void *)(v0 + 80);
      uint64_t v28 = *(void *)(v0 + 88);
      sub_100029EE0((void *)(v0 + 56), v29);
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PurchaseHistory.update(in:)[1]);
      *(void *)(v0 + 1000) = v31;
      *uint64_t v31 = v0;
      v31[1] = sub_100034764;
      return dispatch thunk of PurchaseHistory.update(in:)(0LL, v29, v30);
    }
  }

  else
  {
    uint64_t v33 = *(void *)(v0 + 872);
    uint64_t v34 = *(void *)(v0 + 856);
    uint64_t v35 = *(void *)(v0 + 848);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
    v36._countAndFlagsBits = 0x6573616863727550LL;
    v36._object = (void *)0xED000020726F6620LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    id v37 = [v8 itemID];
    *(void *)(v0 + 296) = v7;
    *(void *)(v0 + 272) = v37;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 272);
    sub_10002E92C(v0 + 272, &qword_10013C6F0);
    v38._object = (void *)0x80000001000FAA90LL;
    v38._countAndFlagsBits = 0xD000000000000011LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v38);
    LogMessage.init(stringInterpolation:)(v35);
    Logger.warning(_:)(v6, v34, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v6);
    v9(v33, v34);
  }

  if ([*(id *)(v0 + 888) shouldInstallParentApp])
  {
    uint64_t v39 = (void *)swift_task_alloc(dword_10013E18C);
    *(void *)(v0 + 1040) = v39;
    void *v39 = v0;
    v39[1] = sub_100034ECC;
    return sub_100084DF4(*(void *)(v0 + 840), v0 + 16);
  }

  else
  {
    uint64_t v40 = *(void *)(v0 + 840);
    uint64_t v41 = *(void *)(v0 + 832);
    uint64_t v42 = *(void *)(v0 + 824);
    uint64_t v43 = *(void *)(v0 + 40);
    uint64_t v44 = *(void *)(v0 + 48);
    sub_100029EE0((void *)(v0 + 16), v43);
    uint64_t v45 = sub_100029E18(&qword_10013C918);
    uint64_t v46 = *(unsigned __int8 *)(v41 + 80);
    uint64_t v47 = (v46 + 32) & ~v46;
    uint64_t v48 = swift_allocObject(v45, v47 + *(void *)(v41 + 72), v46 | 7);
    *(_OWORD *)(v48 + 16) = xmmword_1000EDBE0;
    uint64_t v49 = v48 + v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v49, v40, v42);
    uint64_t v50 = sub_1000CA414(v48);
    *(void *)(v0 + 1048) = v50;
    swift_setDeallocating(v48);
    swift_arrayDestroy(v49, 1LL, v42);
    swift_deallocClassInstance(v48, 32LL, 7LL);
    uint64_t v51 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)[1]);
    *(void *)(v0 + 1056) = v51;
    *uint64_t v51 = v0;
    v51[1] = sub_100035060;
    return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v50, 0LL, v43, v44);
  }

uint64_t sub_100034764()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1000LL);
  *(void *)(*(void *)v1 + 1008LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100035708;
  }
  else {
    uint64_t v3 = sub_1000347C8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000347C8()
{
  uint64_t v1 = *(void *)(v0 + 976);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 944);
  uint64_t v5 = *(void *)(v0 + 856);
  uint64_t v6 = *(void *)(v0 + 848);
  uint64_t v7 = ((v3 + 32) & ~v3) + *(void *)(v0 + 952);
  uint64_t v8 = v3 | 7;
  (*(void (**)(void, void, uint64_t))(v0 + 936))(*(void *)(v0 + 872), *(void *)(v0 + 928), v5);
  uint64_t v9 = swift_allocObject(v4, v7, v8);
  *(_OWORD *)(v9 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(23LL, 1LL);
  v10._object = (void *)0x80000001000FAB30LL;
  v10._countAndFlagsBits = 0xD000000000000017LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  id v11 = [v2 itemID];
  *(void *)(v0 + 232) = v1;
  *(void *)(v0 + 208) = v11;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 208);
  sub_10002E92C(v0 + 208, &qword_10013C6F0);
  v12._countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v9, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  uint64_t v13 = *(void *)(v0 + 840);
  uint64_t v14 = *(void *)(v0 + 832);
  uint64_t v15 = *(void *)(v0 + 824);
  (*(void (**)(void, void))(v0 + 960))(*(void *)(v0 + 872), *(void *)(v0 + 856));
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v16);
  uint64_t v18 = sub_100029E18(&qword_10013C918);
  uint64_t v19 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = swift_allocObject(v18, v20 + *(void *)(v14 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_1000EDBE0;
  uint64_t v22 = v21 + v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v22, v13, v15);
  uint64_t v23 = sub_1000CA414(v21);
  *(void *)(v0 + 1016) = v23;
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, 1LL, v15);
  swift_deallocClassInstance(v21, 32LL, 7LL);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)[1]);
  *(void *)(v0 + 1024) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100034A08;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v23, 0LL, v16, v17);
}

uint64_t sub_100034A08()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1024);
  *(void *)(*v1 + 1032) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000359CC;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 1016));
    uint64_t v4 = sub_100034A74;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100034A74()
{
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 784);
  uint64_t v3 = *(void *)(v0 + 776);
  uint64_t v4 = *(void *)(v0 + 768);
  uint64_t v5 = *(void *)(v0 + 752);
  uint64_t v52 = *(void (***)(uint64_t, uint64_t))(v0 + 744);
  uint64_t v56 = *(void *)(v0 + 736);
  uint64_t v60 = *(void *)(v0 + 760);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v6);
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)(v1, 1LL, v6, v7);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v63 = (void *)(v0 + 16);
  sub_100029EE0((void *)(v0 + 16), v8);
  sub_10003908C();
  AppStateController.state(forApp:applying:)(v1, v5, v8, v9);
  v52[1](v5, v56);
  Swift::String v10 = *(void (**)(uint64_t, void, uint64_t))(v4 + 104);
  v10(v2, enum case for State.unknown(_:), v60);
  char v11 = static State.== infix(_:_:)(v3, v2);
  Swift::String v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v12(v2, v60);
  if ((v11 & 1) != 0)
  {
    uint64_t v61 = v10;
    uint64_t v13 = *(void *)(v0 + 976);
    uint64_t v14 = *(void **)(v0 + 968);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
    uint64_t v15 = *(unsigned __int8 *)(v0 + 1104);
    uint64_t v49 = v12;
    uint64_t v16 = *(void *)(v0 + 944);
    id v53 = *(id *)(v0 + 920);
    uint64_t v17 = *(void *)(v0 + 872);
    uint64_t v18 = *(void *)(v0 + 856);
    uint64_t v19 = *(void *)(v0 + 848);
    uint64_t v20 = ((v15 + 32) & ~v15) + *(void *)(v0 + 952);
    uint64_t v21 = v15 | 7;
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 936))(v17, *(void *)(v0 + 928), v18);
    uint64_t v22 = swift_allocObject(v16, v20, v21);
    *(_OWORD *)(v22 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
    v23._object = (void *)0x80000001000FAB10LL;
    v23._countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    *(void *)(v0 + 240) = [v14 itemID];
    *(void *)(v0 + 264) = v13;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 240);
    sub_10002E92C(v0 + 240, &qword_10013C6F0);
    v24._countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v19);
    Logger.info(_:)(v22, v18, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v22);
    v57(v17, v18);
    LOBYTE(v14) = [v53 flags];
    uint64_t v25 = *(void *)(v0 + 40);
    uint64_t v26 = *(void *)(v0 + 48);
    sub_100029EE0(v63, v25);
    uint64_t v27 = type metadata accessor for AppPurchaseType(0LL);
    uint64_t v50 = *(void **)(v0 + 968);
    uint64_t v51 = *(void **)(v0 + 888);
    uint64_t v28 = *(void **)(v0 + 880);
    uint64_t v29 = *(void *)(v0 + 840);
    uint64_t v30 = *(void *)(v0 + 784);
    id v54 = *(id *)(v0 + 920);
    uint64_t v58 = *(void *)(v0 + 776);
    uint64_t v31 = *(void *)(v0 + 760);
    Swift::String v12 = v49;
    else {
      uint64_t v32 = (unsigned int *)&enum case for AppPurchaseType.standard(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104LL))(v30, *v32, v27);
    v61(v30, enum case for State.purchased(_:), v31);
    dispatch thunk of AppStateController.transitionState(forApp:to:)(v29, v30, v25, v26);

    v49(v30, v31);
    uint64_t v38 = v58;
    uint64_t v39 = v31;
  }

  else
  {
    uint64_t v33 = *(void **)(v0 + 968);
    uint64_t v34 = *(void **)(v0 + 920);
    uint64_t v35 = *(void **)(v0 + 888);
    uint64_t v36 = *(void *)(v0 + 776);
    uint64_t v37 = *(void *)(v0 + 760);

    uint64_t v38 = v36;
    uint64_t v39 = v37;
  }

  v12(v38, v39);
  uint64_t v40 = *(void *)(v0 + 872);
  uint64_t v41 = *(void *)(v0 + 848);
  uint64_t v42 = *(void *)(v0 + 840);
  uint64_t v43 = *(void *)(v0 + 816);
  uint64_t v44 = *(void *)(v0 + 808);
  id v55 = *(id *)(v0 + 784);
  uint64_t v59 = *(void *)(v0 + 776);
  uint64_t v62 = *(void *)(v0 + 752);
  uint64_t v45 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 832) + 8LL))(v42, *(void *)(v0 + 824));
  uint64_t v46 = enum case for ActionOutcome.performed(_:);
  uint64_t v47 = type metadata accessor for ActionOutcome(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104LL))(v45, v46, v47);
  sub_100029F4C((void *)(v0 + 56));
  sub_100029F4C((void *)(v0 + 136));
  sub_100029F4C(v63);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v55);
  swift_task_dealloc(v59);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034ECC()
{
  return swift_task_switch(sub_100034F20, 0LL, 0LL);
}

uint64_t sub_100034F20()
{
  uint64_t v1 = *(void **)(v0 + 968);
  uint64_t v2 = *(void **)(v0 + 920);
  uint64_t v3 = *(void **)(v0 + 888);

  uint64_t v4 = *(void *)(v0 + 872);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v6 = *(void *)(v0 + 840);
  uint64_t v7 = *(void *)(v0 + 816);
  uint64_t v8 = *(void *)(v0 + 808);
  uint64_t v9 = *(void *)(v0 + 784);
  uint64_t v14 = *(void *)(v0 + 776);
  uint64_t v15 = *(void *)(v0 + 752);
  uint64_t v10 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 832) + 8LL))(v6, *(void *)(v0 + 824));
  uint64_t v11 = enum case for ActionOutcome.performed(_:);
  uint64_t v12 = type metadata accessor for ActionOutcome(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104LL))(v10, v11, v12);
  sub_100029F4C((void *)(v0 + 56));
  sub_100029F4C((void *)(v0 + 136));
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035060()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1056);
  *(void *)(*v1 + 1064) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100035CBC;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 1048));
    uint64_t v4 = sub_1000350CC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000350CC()
{
  uint64_t v1 = *(void **)(v0 + 968);
  uint64_t v2 = *(void **)(v0 + 920);
  uint64_t v3 = *(void **)(v0 + 888);
  uint64_t v4 = *(void **)(v0 + 880);
  uint64_t v5 = *(void *)(v0 + 840);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v6);
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)(v5, 1LL, v6, v7);

  uint64_t v8 = *(void *)(v0 + 872);
  uint64_t v9 = *(void *)(v0 + 848);
  uint64_t v10 = *(void *)(v0 + 840);
  uint64_t v11 = *(void *)(v0 + 816);
  uint64_t v12 = *(void *)(v0 + 808);
  uint64_t v13 = *(void *)(v0 + 784);
  uint64_t v18 = *(void *)(v0 + 776);
  uint64_t v19 = *(void *)(v0 + 752);
  uint64_t v14 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 832) + 8LL))(v10, *(void *)(v0 + 824));
  uint64_t v15 = enum case for ActionOutcome.performed(_:);
  uint64_t v16 = type metadata accessor for ActionOutcome(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL))(v14, v15, v16);
  sub_100029F4C((void *)(v0 + 56));
  sub_100029F4C((void *)(v0 + 136));
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035238()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1088);
  *(void *)(*v1 + 1096) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 1080));
  if (v0) {
    uint64_t v4 = sub_100035FAC;
  }
  else {
    uint64_t v4 = sub_1000352A4;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000352A4()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v3 = *(void **)(v0 + 920);
  uint64_t v4 = *(void **)(v0 + 888);
  uint64_t v5 = *(void **)(v0 + 880);
  uint64_t v6 = *(void *)(v0 + 840);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v7);
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)(v6, 1LL, v7, v8);

  swift_errorRelease(v1);
  uint64_t v9 = *(void *)(v0 + 872);
  uint64_t v10 = *(void *)(v0 + 848);
  uint64_t v11 = *(void *)(v0 + 840);
  uint64_t v12 = *(void *)(v0 + 816);
  uint64_t v13 = *(void *)(v0 + 808);
  uint64_t v14 = *(void *)(v0 + 784);
  uint64_t v19 = *(void *)(v0 + 776);
  uint64_t v20 = *(void *)(v0 + 752);
  uint64_t v15 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 832) + 8LL))(v11, *(void *)(v0 + 824));
  uint64_t v16 = enum case for ActionOutcome.performed(_:);
  uint64_t v17 = type metadata accessor for ActionOutcome(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v15, v16, v17);
  sub_100029F4C((void *)(v0 + 56));
  sub_100029F4C((void *)(v0 + 136));
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003541C()
{
  uint64_t v1 = *(void *)(v0 + 992);
  *(void *)(v0 + 1072) = v1;
  uint64_t v26 = *(void *)(v0 + 976);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 944);
  uint64_t v27 = *(void *)(v0 + 856);
  uint64_t v28 = *(void *)(v0 + 872);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v32 = *(void *)(v0 + 840);
  uint64_t v30 = *(void *)(v0 + 832);
  uint64_t v31 = *(void *)(v0 + 824);
  uint64_t v6 = ((v3 + 32) & ~v3) + *(void *)(v0 + 952);
  uint64_t v7 = v3 | 7;
  (*(void (**)(void))(v0 + 936))();
  uint64_t v8 = swift_allocObject(v4, v6, v7);
  *(_OWORD *)(v8 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 2LL);
  v9._countAndFlagsBits = 0x6573616863727550LL;
  v9._object = (void *)0xED000020726F6620LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  id v10 = [v2 itemID];
  *(void *)(v0 + 520) = v26;
  *(void *)(v0 + 496) = v10;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 496);
  sub_10002E92C(v0 + 496, &qword_10013C6F0);
  v11._object = (void *)0x80000001000FAA10LL;
  v11._countAndFlagsBits = 0xD000000000000011LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue(v1, v0 + 688, v0 + 584);
  uint64_t v12 = *(void *)(v0 + 584);
  uint64_t v13 = *(void *)(v0 + 592);
  *(void *)(v0 + 552) = v13;
  uint64_t v14 = sub_10002C328((void *)(v0 + 528));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 528);
  sub_10002E92C(v0 + 528, &qword_10013C6F0);
  v15._countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v8, v27, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v8);
  v29(v28, v27);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v16);
  uint64_t v18 = sub_100029E18(&qword_10013C918);
  uint64_t v19 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = swift_allocObject(v18, v20 + *(void *)(v30 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_1000EDBE0;
  uint64_t v22 = v21 + v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v22, v32, v31);
  Swift::String v23 = sub_1000CA414(v21);
  *(void *)(v0 + 1080) = v23;
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, 1LL, v31);
  swift_deallocClassInstance(v21, 32LL, 7LL);
  Swift::String v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)[1]);
  *(void *)(v0 + 1088) = v24;
  *Swift::String v24 = v0;
  v24[1] = sub_100035238;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v23, 0LL, v16, v17);
}

uint64_t sub_100035708()
{
  uint64_t v29 = *(void *)(v0 + 1008);
  uint64_t v1 = *(void *)(v0 + 976);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 944);
  uint64_t v30 = *(void *)(v0 + 856);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v6 = ((v3 + 32) & ~v3) + *(void *)(v0 + 952);
  uint64_t v7 = v3 | 7;
  (*(void (**)(void))(v0 + 936))();
  uint64_t v8 = swift_allocObject(v4, v6, v7);
  *(_OWORD *)(v8 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 2LL);
  v9._object = (void *)0x80000001000FAAF0LL;
  v9._countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  id v10 = [v2 itemID];
  *(void *)(v0 + 424) = v1;
  *(void *)(v0 + 400) = v10;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 400);
  sub_10002E92C(v0 + 400, &qword_10013C6F0);
  v11._countAndFlagsBits = 0x6E6F73616572202CLL;
  v11._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue(v29, v0 + 664, v0 + 608);
  uint64_t v12 = *(void *)(v0 + 608);
  uint64_t v13 = *(void *)(v0 + 616);
  *(void *)(v0 + 328) = v13;
  uint64_t v14 = sub_10002C328((void *)(v0 + 304));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 304);
  sub_10002E92C(v0 + 304, &qword_10013C6F0);
  v15._countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v8, v30, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v8);
  swift_errorRelease(v29);
  uint64_t v16 = *(void *)(v0 + 840);
  uint64_t v17 = *(void *)(v0 + 832);
  uint64_t v18 = *(void *)(v0 + 824);
  (*(void (**)(void, void))(v0 + 960))(*(void *)(v0 + 872), *(void *)(v0 + 856));
  uint64_t v19 = *(void *)(v0 + 40);
  uint64_t v20 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v19);
  uint64_t v21 = sub_100029E18(&qword_10013C918);
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v24 = swift_allocObject(v21, v23 + *(void *)(v17 + 72), v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000EDBE0;
  uint64_t v25 = v24 + v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v25, v16, v18);
  uint64_t v26 = sub_1000CA414(v24);
  *(void *)(v0 + 1016) = v26;
  swift_setDeallocating(v24);
  swift_arrayDestroy(v25, 1LL, v18);
  swift_deallocClassInstance(v24, 32LL, 7LL);
  uint64_t v27 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)[1]);
  *(void *)(v0 + 1024) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_100034A08;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v26, 0LL, v19, v20);
}

uint64_t sub_1000359CC()
{
  uint64_t v1 = *(void *)(v0 + 1032);
  *(void *)(v0 + 1072) = v1;
  uint64_t v26 = *(void *)(v0 + 976);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 944);
  uint64_t v27 = *(void *)(v0 + 856);
  uint64_t v28 = *(void *)(v0 + 872);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v32 = *(void *)(v0 + 840);
  uint64_t v6 = ((v3 + 32) & ~v3) + *(void *)(v0 + 952);
  uint64_t v7 = v3 | 7;
  uint64_t v30 = *(void *)(v0 + 832);
  uint64_t v31 = *(void *)(v0 + 824);
  (*(void (**)(void))(v0 + 936))();
  uint64_t v8 = swift_allocObject(v4, v6, v7);
  *(_OWORD *)(v8 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 2LL);
  v9._countAndFlagsBits = 0x6573616863727550LL;
  v9._object = (void *)0xED000020726F6620LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  id v10 = [v2 itemID];
  *(void *)(v0 + 520) = v26;
  *(void *)(v0 + 496) = v10;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 496);
  sub_10002E92C(v0 + 496, &qword_10013C6F0);
  v11._object = (void *)0x80000001000FAA10LL;
  v11._countAndFlagsBits = 0xD000000000000011LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue(v1, v0 + 688, v0 + 584);
  uint64_t v12 = *(void *)(v0 + 584);
  uint64_t v13 = *(void *)(v0 + 592);
  *(void *)(v0 + 552) = v13;
  uint64_t v14 = sub_10002C328((void *)(v0 + 528));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 528);
  sub_10002E92C(v0 + 528, &qword_10013C6F0);
  v15._countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v8, v27, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v8);
  v29(v28, v27);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v16);
  uint64_t v18 = sub_100029E18(&qword_10013C918);
  uint64_t v19 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = swift_allocObject(v18, v20 + *(void *)(v30 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_1000EDBE0;
  uint64_t v22 = v21 + v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v22, v32, v31);
  uint64_t v23 = sub_1000CA414(v21);
  *(void *)(v0 + 1080) = v23;
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, 1LL, v31);
  swift_deallocClassInstance(v21, 32LL, 7LL);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)[1]);
  *(void *)(v0 + 1088) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100035238;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v23, 0LL, v16, v17);
}

uint64_t sub_100035CBC()
{
  uint64_t v1 = *(void *)(v0 + 1064);
  *(void *)(v0 + 1072) = v1;
  uint64_t v26 = *(void *)(v0 + 976);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 944);
  uint64_t v27 = *(void *)(v0 + 856);
  uint64_t v28 = *(void *)(v0 + 872);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v32 = *(void *)(v0 + 840);
  uint64_t v6 = ((v3 + 32) & ~v3) + *(void *)(v0 + 952);
  uint64_t v7 = v3 | 7;
  uint64_t v30 = *(void *)(v0 + 832);
  uint64_t v31 = *(void *)(v0 + 824);
  (*(void (**)(void))(v0 + 936))();
  uint64_t v8 = swift_allocObject(v4, v6, v7);
  *(_OWORD *)(v8 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 2LL);
  v9._countAndFlagsBits = 0x6573616863727550LL;
  v9._object = (void *)0xED000020726F6620LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  id v10 = [v2 itemID];
  *(void *)(v0 + 520) = v26;
  *(void *)(v0 + 496) = v10;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 496);
  sub_10002E92C(v0 + 496, &qword_10013C6F0);
  v11._object = (void *)0x80000001000FAA10LL;
  v11._countAndFlagsBits = 0xD000000000000011LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue(v1, v0 + 688, v0 + 584);
  uint64_t v12 = *(void *)(v0 + 584);
  uint64_t v13 = *(void *)(v0 + 592);
  *(void *)(v0 + 552) = v13;
  uint64_t v14 = sub_10002C328((void *)(v0 + 528));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 528);
  sub_10002E92C(v0 + 528, &qword_10013C6F0);
  v15._countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v8, v27, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v8);
  v29(v28, v27);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v16);
  uint64_t v18 = sub_100029E18(&qword_10013C918);
  uint64_t v19 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v21 = swift_allocObject(v18, v20 + *(void *)(v30 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_1000EDBE0;
  uint64_t v22 = v21 + v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v22, v32, v31);
  uint64_t v23 = sub_1000CA414(v21);
  *(void *)(v0 + 1080) = v23;
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, 1LL, v31);
  swift_deallocClassInstance(v21, 32LL, 7LL);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)[1]);
  *(void *)(v0 + 1088) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100035238;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v23, 0LL, v16, v17);
}

uint64_t sub_100035FAC()
{
  uint64_t v1 = *(void *)(v0 + 1072);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v3 = *(void **)(v0 + 920);
  uint64_t v4 = *(void **)(v0 + 888);
  uint64_t v5 = *(void *)(v0 + 840);
  uint64_t v6 = *(void *)(v0 + 832);
  uint64_t v7 = *(void *)(v0 + 824);

  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = *(void *)(v0 + 872);
  uint64_t v9 = *(void *)(v0 + 848);
  uint64_t v10 = *(void *)(v0 + 840);
  uint64_t v11 = *(void *)(v0 + 816);
  uint64_t v12 = *(void *)(v0 + 808);
  uint64_t v13 = *(void *)(v0 + 784);
  uint64_t v14 = *(void *)(v0 + 776);
  uint64_t v15 = *(void *)(v0 + 752);
  sub_100029F4C((void *)(v0 + 56));
  sub_100029F4C((void *)(v0 + 136));
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000360D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[44] = a2;
  v3[45] = a3;
  v3[43] = a1;
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  v3[46] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AppLaunchTrampolineAction(0LL);
  v3[47] = v5;
  v3[48] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100029E18(&qword_10013C6C8);
  v3[49] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[50] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[51] = swift_task_alloc(v8);
  v3[52] = swift_task_alloc(v8);
  unint64_t v9 = (*(void *)(*(void *)(sub_100029E18(&qword_10013EE90) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[53] = swift_task_alloc(v9);
  v3[54] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for URL(0LL);
  v3[55] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[56] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[57] = swift_task_alloc(v12);
  v3[58] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for ScalarDictionary(0LL);
  v3[59] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ActionMetrics(0LL);
  v3[60] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[61] = v15;
  v3[62] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OpenAppAction(0LL);
  v3[63] = v16;
  v3[64] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100029E18(&qword_10013CBA0);
  v3[65] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[66] = v18;
  v3[67] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for AppOpenableDestination(0LL);
  v3[68] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[69] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[70] = swift_task_alloc(v21);
  v3[71] = swift_task_alloc(v21);
  uint64_t v22 = type metadata accessor for AppOffer(0LL);
  v3[72] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v3[73] = v23;
  v3[74] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for App.Kind(0LL);
  v3[75] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v3[76] = v25;
  v3[77] = swift_task_alloc((*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for AdamID(0LL);
  v3[78] = swift_task_alloc((*(void *)(*(void *)(v26 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for App(0LL);
  v3[79] = v27;
  uint64_t v28 = *(void *)(v27 - 8);
  v3[80] = v28;
  v3[81] = swift_task_alloc((*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for State(0LL);
  v3[82] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v3[83] = v30;
  unint64_t v31 = (*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[84] = swift_task_alloc(v31);
  v3[85] = swift_task_alloc(v31);
  return swift_task_switch(sub_10003639C, 0LL, 0LL);
}

uint64_t sub_10003639C()
{
  uint64_t v1 = *(void *)(v0 + 352) + qword_10013FCF0;
  swift_beginAccess(v1, v0 + 296, 0LL, 0LL);
  sub_100030628(v1, v0 + 96);
  if (!*(void *)(v0 + 120))
  {
    sub_10002E92C(v0 + 96, &qword_10013C7E0);
    uint64_t v6 = sub_100029E18((uint64_t *)&unk_10013DD40);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v6, v6);
  }

  uint64_t v2 = *(void **)(v0 + 360);
  sub_10002C438((__int128 *)(v0 + 96), v0 + 16);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  sub_100029EE0((void *)(v0 + 16), v3);
  id v5 = [v2 id];
  AdamID.init(value:)([v5 int64value]);
  uint64_t v8 = *(void *)(v0 + 680);
  uint64_t v111 = *(void *)(v0 + 672);
  uint64_t v108 = *(void *)(v0 + 664);
  uint64_t v109 = *(void *)(v0 + 656);
  uint64_t v9 = *(void *)(v0 + 648);
  uint64_t v103 = *(void *)(v0 + 640);
  uint64_t v105 = *(void *)(v0 + 632);
  uint64_t v10 = *(void *)(v0 + 624);
  uint64_t v100 = v4;
  uint64_t v11 = *(void *)(v0 + 616);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v99 = *(void *)(v0 + 584);
  uint64_t v102 = *(void *)(v0 + 576);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 608) + 104LL))( v11,  enum case for App.Kind.store(_:),  *(void *)(v0 + 600));
  App.init(id:kind:)(v10, v11);

  sub_10003908C();
  AppStateController.state(forApp:applying:)(v9, v12, v3, v100);
  (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v12, v102);
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v9, v105);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v111, v8, v109);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 88))(v111, v109);
  if (v13 == enum case for State.waiting(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 664) + 96LL))( *(void *)(v0 + 672),  *(void *)(v0 + 656));
    uint64_t v14 = (void *)swift_task_alloc(dword_10013C8E4);
    uint64_t v15 = sub_100036F3C;
    *(void *)(v0 + 688) = v14;
LABEL_8:
    *uint64_t v14 = v0;
    v14[1] = v15;
    return sub_1000382E0(*(void *)(v0 + 344), *(void *)(v0 + 360), *(void *)(v0 + 352));
  }

  if (v13 == enum case for State.installing(_:))
  {
    uint64_t v16 = *(void *)(v0 + 672);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 664) + 96LL))(v16, *(void *)(v0 + 656));
    uint64_t v17 = type metadata accessor for AppInstallation(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
    uint64_t v14 = (void *)swift_task_alloc(dword_10013C8E4);
    uint64_t v15 = sub_100037138;
    *(void *)(v0 + 704) = v14;
    goto LABEL_8;
  }

  if (v13 != enum case for State.openable(_:))
  {
    uint64_t v37 = *(void **)(v0 + 360);
    uint64_t v36 = *(void *)(v0 + 368);
    uint64_t v38 = *(void *)(v0 + 352);
    uint64_t v39 = sub_100029E18(&qword_10013C8C0);
    uint64_t v40 = type metadata accessor for ObjectGraph(0LL);
    inject<A, B>(_:from:)((void *)(v0 + 136), v39, v38, v39, v40);
    sub_1000388F0(v0 + 136, v0 + 176);
    uint64_t v41 = swift_allocObject(&unk_100120710, 73LL, 7LL);
    *(void *)(v41 + 16) = v38;
    *(void *)(v41 + 24) = v37;
    sub_10002C438((__int128 *)(v0 + 176), v41 + 32);
    *(_BYTE *)(v41 + 72) = 0;
    uint64_t v42 = sub_100029E18((uint64_t *)&unk_10013CC30);
    swift_retain(v38);
    uint64_t v43 = Promise.__allocating_init()(v37);
    *(void *)(v0 + 760) = v43;
    uint64_t v44 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v36, 1LL, 1LL, v44);
    uint64_t v45 = (void *)swift_allocObject(&unk_100120738, 56LL, 7LL);
    v45[2] = 0LL;
    v45[3] = 0LL;
    v45[4] = &unk_10013C8D0;
    v45[5] = v41;
    v45[6] = v43;
    swift_retain(v43);
    uint64_t v46 = sub_1000B3448(v36, (uint64_t)&unk_10013C8D8, (uint64_t)v45);
    swift_release(v46);
    uint64_t v47 = sub_100039030((unint64_t *)&qword_10013C6C0, (uint64_t *)&unk_10013CC30);
    uint64_t v48 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    *(void *)(v0 + 768) = v48;
    *uint64_t v48 = v0;
    v48[1] = sub_100037818;
    return dispatch thunk of Future.then()(*(void *)(v0 + 344), v42, v47);
  }

  uint64_t v18 = *(void *)(v0 + 672);
  uint64_t v19 = *(void *)(v0 + 568);
  uint64_t v20 = *(void *)(v0 + 552);
  uint64_t v21 = *(void *)(v0 + 544);
  uint64_t v22 = *(void **)(v0 + 536);
  uint64_t v23 = *(void *)(v0 + 520);
  uint64_t v112 = *(void *)(v0 + 560);
  uint64_t v106 = *(void *)(v0 + 472);
  uint64_t v24 = *(void *)(v0 + 352);
  uint64_t v25 = *(void **)(v0 + 360);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 664) + 96LL))(v18, *(void *)(v0 + 656));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v18, v21);
  uint64_t v26 = type metadata accessor for ObjectGraph(0LL);
  inject<A, B>(_:from:)(v22, v23, v24, v23, v26);
  uint64_t v27 = sub_10002A030(0LL, &qword_10013CC10, off_10011E560);
  inject<A, B>(_:from:)((void *)(v0 + 336), v27, v24, v27, v26);
  uint64_t v28 = *(void **)(v0 + 336);
  *(void *)(v0 + 720) = v28;
  id v29 = [v25 metrics];
  uint64_t v104 = sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v104);

  size_t v31 = sub_100067DF8(v30);
  uint64_t v32 = swift_bridgeObjectRelease(v30);
  ScalarDictionary.init()(v32);
  ActionMetrics.init(data:custom:)(v31, v106);
  id v33 = [v25 id];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v112, v19, v21);
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v112, v21);
  if (v34 != enum case for AppOpenableDestination.app(_:))
  {
    if (v34 == enum case for AppOpenableDestination.messages(_:))
    {
      char v35 = 1;
      goto LABEL_16;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 552) + 8LL))(*(void *)(v0 + 560), *(void *)(v0 + 544));
  }

  char v35 = 0;
LABEL_16:
  uint64_t v50 = *(int **)(v0 + 504);
  uint64_t v49 = *(void *)(v0 + 512);
  uint64_t v52 = *(void *)(v0 + 488);
  uint64_t v51 = *(void *)(v0 + 496);
  uint64_t v53 = *(void *)(v0 + 480);
  unsigned __int16 v54 = (unsigned __int16)[*(id *)(v0 + 360) flags];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v49, v51, v53);
  *(void *)(v49 + v50[5]) = v33;
  *(_BYTE *)(v49 + v50[6]) = v35;
  *(_BYTE *)(v49 + v50[7]) = (v54 & 0x2000) != 0;
  id v55 = [v28 externalDeepLinkURL];
  if (!v55)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 448) + 56LL))( *(void *)(v0 + 432),  1LL,  1LL,  *(void *)(v0 + 440));
    goto LABEL_20;
  }

  uint64_t v56 = v55;
  uint64_t v58 = *(void *)(v0 + 448);
  uint64_t v57 = *(void *)(v0 + 456);
  uint64_t v60 = *(void *)(v0 + 432);
  uint64_t v59 = *(void *)(v0 + 440);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32);
  v61(v60, v57, v59);
  uint64_t v62 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56);
  v62(v60, 0LL, 1LL, v59);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v60, 1LL, v59) == 1)
  {
LABEL_20:
    uint64_t v87 = *(void *)(v0 + 504);
    uint64_t v86 = *(void *)(v0 + 512);
    uint64_t v88 = *(void *)(v0 + 416);
    uint64_t v89 = *(void *)(v0 + 392);
    uint64_t v90 = *(void *)(v0 + 400);
    sub_10002E92C(*(void *)(v0 + 432), &qword_10013EE90);
    *(void *)(v0 + 280) = v87;
    *(void *)(v0 + 288) = sub_100027978( (unint64_t *)&qword_10013C7F0,  type metadata accessor for OpenAppAction,  (uint64_t)&unk_1000F0FC0);
    v91 = sub_10002C328((void *)(v0 + 256));
    sub_100038AC0(v86, (uint64_t)v91, type metadata accessor for OpenAppAction);
    (*(void (**)(uint64_t, void, uint64_t))(v90 + 104))( v88,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v89);
    v92 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
    *(void *)(v0 + 728) = v92;
    void *v92 = v0;
    v92[1] = sub_100037314;
    uint64_t v81 = *(void *)(v0 + 520);
    uint64_t v82 = *(void *)(v0 + 416);
    uint64_t v83 = *(void *)(v0 + 344);
    uint64_t v84 = *(void *)(v0 + 352);
    uint64_t v85 = v0 + 256;
    return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v83, v85, v82, v84, v81);
  }

  uint64_t v96 = *(void *)(v0 + 512);
  uint64_t v63 = *(void *)(v0 + 464);
  uint64_t v101 = *(void *)(v0 + 472);
  uint64_t v64 = *(void *)(v0 + 440);
  uint64_t v93 = *(void *)(v0 + 448);
  uint64_t v94 = *(void *)(v0 + 504);
  uint64_t v65 = *(void *)(v0 + 424);
  uint64_t v113 = *(void *)(v0 + 408);
  uint64_t v107 = *(void *)(v0 + 400);
  id v66 = *(uint64_t **)(v0 + 384);
  uint64_t v110 = *(void *)(v0 + 392);
  uint64_t v67 = *(int **)(v0 + 376);
  uint64_t v68 = *(void **)(v0 + 360);
  id v95 = v68;
  v61(v63, *(void *)(v0 + 432), v64);
  id v69 = [v68 bundleID];
  uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
  uint64_t v97 = v71;
  uint64_t v98 = v70;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v65, v63, v64);
  uint64_t v72 = v65;
  v62(v65, 0LL, 1LL, v64);
  unsigned __int8 v73 = [v28 universalLinkRequired];
  *(void *)(v0 + 80) = v94;
  *(void *)(v0 + 88) = sub_100027978( (unint64_t *)&qword_10013C7F0,  type metadata accessor for OpenAppAction,  (uint64_t)&unk_1000F0FC0);
  uint64_t v74 = sub_10002C328((void *)(v0 + 56));
  sub_100038AC0(v96, (uint64_t)v74, type metadata accessor for OpenAppAction);
  id v75 = [v95 metrics];
  uint64_t v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v75, v104);

  size_t v77 = sub_100067DF8(v76);
  uint64_t v78 = swift_bridgeObjectRelease(v76);
  ScalarDictionary.init()(v78);
  ActionMetrics.init(data:custom:)(v77, v101);
  *id v66 = v98;
  v66[1] = v97;
  sub_100038A7C(v72, (uint64_t)v66 + v67[5], &qword_10013EE90);
  *((_BYTE *)v66 + v67[6]) = v73;
  sub_100038A7C(v0 + 56, (uint64_t)v66 + v67[7], (uint64_t *)&unk_10013CBC0);
  *(void *)(v0 + 240) = v67;
  *(void *)(v0 + 248) = sub_100027978( &qword_10013C8A8,  type metadata accessor for AppLaunchTrampolineAction,  (uint64_t)&unk_1000EDE50);
  v79 = sub_10002C328((void *)(v0 + 216));
  sub_100038AC0((uint64_t)v66, (uint64_t)v79, type metadata accessor for AppLaunchTrampolineAction);
  (*(void (**)(uint64_t, void, uint64_t))(v107 + 104))( v113,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v110);
  v80 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
  *(void *)(v0 + 744) = v80;
  void *v80 = v0;
  v80[1] = sub_1000373A4;
  uint64_t v81 = *(void *)(v0 + 520);
  uint64_t v82 = *(void *)(v0 + 408);
  uint64_t v83 = *(void *)(v0 + 344);
  uint64_t v84 = *(void *)(v0 + 352);
  uint64_t v85 = v0 + 216;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v83, v85, v82, v84, v81);
}

uint64_t sub_100036F3C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 688LL);
  *(void *)(*(void *)v1 + 696LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100037BB8;
  }
  else {
    uint64_t v3 = sub_100036FA0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100036FA0()
{
  uint64_t v1 = *(void *)(v0 + 672);
  (*(void (**)(void, void))(*(void *)(v0 + 664) + 8LL))(*(void *)(v0 + 680), *(void *)(v0 + 656));
  uint64_t v2 = type metadata accessor for AppInstallationType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v4 = *(void *)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 648);
  uint64_t v6 = *(void *)(v0 + 624);
  uint64_t v7 = *(void *)(v0 + 616);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 568);
  uint64_t v10 = *(void *)(v0 + 560);
  uint64_t v12 = *(void *)(v0 + 536);
  uint64_t v13 = *(void *)(v0 + 512);
  uint64_t v14 = *(void *)(v0 + 496);
  uint64_t v15 = *(void *)(v0 + 472);
  uint64_t v16 = *(void *)(v0 + 464);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v18 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 424);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037138()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 704LL);
  *(void *)(*(void *)v1 + 712LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100037D54;
  }
  else {
    uint64_t v3 = sub_10003719C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10003719C()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  uint64_t v6 = *(void *)(v0 + 592);
  uint64_t v7 = *(void *)(v0 + 568);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v10 = *(void *)(v0 + 536);
  uint64_t v11 = *(void *)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 472);
  uint64_t v14 = *(void *)(v0 + 464);
  uint64_t v15 = *(void *)(v0 + 456);
  uint64_t v16 = *(void *)(v0 + 432);
  uint64_t v17 = *(void *)(v0 + 424);
  uint64_t v18 = *(void *)(v0 + 416);
  uint64_t v19 = *(void *)(v0 + 408);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v21 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037314()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 728LL);
  *(void *)(*(void *)v1 + 736LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[50] + 8LL))(v2[52], v2[49]);
  if (v0)
  {
    uint64_t v4 = sub_1000380F0;
  }

  else
  {
    sub_100029F4C(v2 + 32);
    uint64_t v4 = sub_10003763C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000373A4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 744LL);
  *(void *)(*(void *)v1 + 752LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[50] + 8LL))(v2[51], v2[49]);
  if (v0)
  {
    uint64_t v4 = sub_100037ED0;
  }

  else
  {
    sub_100029F4C(v2 + 27);
    uint64_t v4 = sub_100037434;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100037434()
{
  uint64_t v34 = *(void *)(v0 + 680);
  uint64_t v30 = *(void *)(v0 + 664);
  uint64_t v32 = *(void *)(v0 + 656);
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v28 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 528);
  uint64_t v4 = *(void *)(v0 + 520);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 464);
  uint64_t v7 = *(void *)(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 448);
  uint64_t v9 = *(void *)(v0 + 384);

  sub_100038B04(v9, type metadata accessor for AppLaunchTrampolineAction);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_100038B04(v5, type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v28, v26);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 672);
  uint64_t v12 = *(void *)(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 624);
  uint64_t v14 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v0 + 560);
  uint64_t v18 = *(void *)(v0 + 536);
  uint64_t v20 = *(void *)(v0 + 512);
  uint64_t v21 = *(void *)(v0 + 496);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 432);
  uint64_t v27 = *(void *)(v0 + 424);
  uint64_t v29 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 408);
  uint64_t v33 = *(void *)(v0 + 384);
  uint64_t v35 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003763C()
{
  uint64_t v30 = *(void *)(v0 + 680);
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v7 = *(void *)(v0 + 528);
  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v9 = *(void *)(v0 + 512);

  sub_100038B04(v9, type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v30, v2);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 672);
  uint64_t v12 = *(void *)(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 624);
  uint64_t v14 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v0 + 560);
  uint64_t v18 = *(void *)(v0 + 536);
  uint64_t v20 = *(void *)(v0 + 512);
  uint64_t v21 = *(void *)(v0 + 496);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 432);
  uint64_t v26 = *(void *)(v0 + 424);
  uint64_t v27 = *(void *)(v0 + 416);
  uint64_t v28 = *(void *)(v0 + 408);
  uint64_t v29 = *(void *)(v0 + 384);
  uint64_t v31 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037818()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 768);
  *(void *)(*v1 + 776) = v0;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v2 + 760));
  if (v0) {
    uint64_t v4 = sub_100037A1C;
  }
  else {
    uint64_t v4 = sub_100037884;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100037884()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  sub_100029F4C((void *)(v0 + 136));
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v1, v4);
  v5(v2, v4);
  uint64_t v6 = *(void *)(v0 + 680);
  uint64_t v7 = *(void *)(v0 + 672);
  uint64_t v8 = *(void *)(v0 + 648);
  uint64_t v9 = *(void *)(v0 + 624);
  uint64_t v10 = *(void *)(v0 + 616);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = *(void *)(v0 + 568);
  uint64_t v13 = *(void *)(v0 + 560);
  uint64_t v15 = *(void *)(v0 + 536);
  uint64_t v16 = *(void *)(v0 + 512);
  uint64_t v17 = *(void *)(v0 + 496);
  uint64_t v18 = *(void *)(v0 + 472);
  uint64_t v19 = *(void *)(v0 + 464);
  uint64_t v20 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v22 = *(void *)(v0 + 424);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v24 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037A1C()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  sub_100029F4C((void *)(v0 + 136));
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v1, v4);
  v5(v2, v4);
  uint64_t v6 = *(void *)(v0 + 680);
  uint64_t v7 = *(void *)(v0 + 672);
  uint64_t v8 = *(void *)(v0 + 648);
  uint64_t v9 = *(void *)(v0 + 624);
  uint64_t v10 = *(void *)(v0 + 616);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = *(void *)(v0 + 568);
  uint64_t v13 = *(void *)(v0 + 560);
  uint64_t v15 = *(void *)(v0 + 536);
  uint64_t v16 = *(void *)(v0 + 512);
  uint64_t v17 = *(void *)(v0 + 496);
  uint64_t v18 = *(void *)(v0 + 472);
  uint64_t v19 = *(void *)(v0 + 464);
  uint64_t v20 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v22 = *(void *)(v0 + 424);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v24 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037BB8()
{
  uint64_t v1 = *(void *)(v0 + 672);
  (*(void (**)(void, void))(*(void *)(v0 + 664) + 8LL))(*(void *)(v0 + 680), *(void *)(v0 + 656));
  uint64_t v2 = type metadata accessor for AppInstallationType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v4 = *(void *)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 648);
  uint64_t v6 = *(void *)(v0 + 624);
  uint64_t v7 = *(void *)(v0 + 616);
  uint64_t v8 = *(void *)(v0 + 592);
  uint64_t v9 = *(void *)(v0 + 568);
  uint64_t v10 = *(void *)(v0 + 560);
  uint64_t v12 = *(void *)(v0 + 536);
  uint64_t v13 = *(void *)(v0 + 512);
  uint64_t v14 = *(void *)(v0 + 496);
  uint64_t v15 = *(void *)(v0 + 472);
  uint64_t v16 = *(void *)(v0 + 464);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v18 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 424);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 408);
  uint64_t v22 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037D54()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 616);
  uint64_t v6 = *(void *)(v0 + 592);
  uint64_t v7 = *(void *)(v0 + 568);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v10 = *(void *)(v0 + 536);
  uint64_t v11 = *(void *)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 472);
  uint64_t v14 = *(void *)(v0 + 464);
  uint64_t v15 = *(void *)(v0 + 456);
  uint64_t v16 = *(void *)(v0 + 432);
  uint64_t v17 = *(void *)(v0 + 424);
  uint64_t v18 = *(void *)(v0 + 416);
  uint64_t v19 = *(void *)(v0 + 408);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v21 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037ED0()
{
  uint64_t v34 = *(void *)(v0 + 680);
  uint64_t v30 = *(void *)(v0 + 664);
  uint64_t v32 = *(void *)(v0 + 656);
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v28 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 528);
  uint64_t v4 = *(void *)(v0 + 520);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 464);
  uint64_t v7 = *(void *)(v0 + 440);
  uint64_t v8 = *(void *)(v0 + 448);
  uint64_t v9 = *(void *)(v0 + 384);

  sub_100038B04(v9, type metadata accessor for AppLaunchTrampolineAction);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_100038B04(v5, type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v28, v26);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
  sub_100029F4C((void *)(v0 + 216));
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 672);
  uint64_t v12 = *(void *)(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 624);
  uint64_t v14 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v0 + 560);
  uint64_t v18 = *(void *)(v0 + 536);
  uint64_t v20 = *(void *)(v0 + 512);
  uint64_t v21 = *(void *)(v0 + 496);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 432);
  uint64_t v27 = *(void *)(v0 + 424);
  uint64_t v29 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 408);
  uint64_t v33 = *(void *)(v0 + 384);
  uint64_t v35 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000380F0()
{
  uint64_t v30 = *(void *)(v0 + 680);
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v7 = *(void *)(v0 + 528);
  uint64_t v8 = *(void *)(v0 + 520);
  uint64_t v9 = *(void *)(v0 + 512);

  sub_100038B04(v9, type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v30, v2);
  sub_100029F4C((void *)(v0 + 256));
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 672);
  uint64_t v12 = *(void *)(v0 + 648);
  uint64_t v13 = *(void *)(v0 + 624);
  uint64_t v14 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 592);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v0 + 560);
  uint64_t v18 = *(void *)(v0 + 536);
  uint64_t v20 = *(void *)(v0 + 512);
  uint64_t v21 = *(void *)(v0 + 496);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v24 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 432);
  uint64_t v26 = *(void *)(v0 + 424);
  uint64_t v27 = *(void *)(v0 + 416);
  uint64_t v28 = *(void *)(v0 + 408);
  uint64_t v29 = *(void *)(v0 + 384);
  uint64_t v31 = *(void *)(v0 + 368);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000382E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = sub_100029E18(&qword_10013C6C8);
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ScalarDictionary(0LL);
  v3[14] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CancelOrPauseInstallAction(0LL);
  v3[15] = v7;
  v3[16] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100029E18(&qword_10013CBA0);
  v3[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[18] = v9;
  v3[19] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000383B8, 0LL, 0LL);
}

uint64_t sub_1000383B8()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v17 = v0[12];
  uint64_t v6 = v0[10];
  uint64_t v18 = v0[11];
  uint64_t v19 = v0[13];
  uint64_t v7 = (void *)v0[9];
  uint64_t v8 = type metadata accessor for ObjectGraph(0LL);
  inject<A, B>(_:from:)(v1, v3, v6, v3, v8);
  id v9 = [v7 metrics];
  uint64_t v10 = sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  size_t v12 = sub_100067DF8(v11);
  uint64_t v13 = swift_bridgeObjectRelease(v11);
  ScalarDictionary.init()(v13);
  ActionMetrics.init(data:custom:)(v12, v5);
  *(void *)(v2 + *(int *)(v4 + 20)) = [v7 id];
  v0[5] = v4;
  v0[6] = sub_100027978( (unint64_t *)&qword_10013FDA0,  type metadata accessor for CancelOrPauseInstallAction,  (uint64_t)&unk_1000EF630);
  uint64_t v14 = sub_10002C328(v0 + 2);
  sub_100038AC0(v2, (uint64_t)v14, type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v19,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v18);
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
  v0[20] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100038580;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v0[8], v0 + 2, v0[13], v0[10], v0[17]);
}

uint64_t sub_100038580()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[12] + 8LL))(v2[13], v2[11]);
  if (v0)
  {
    uint64_t v4 = sub_100038698;
  }

  else
  {
    sub_100029F4C(v2 + 2);
    uint64_t v4 = sub_100038610;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100038610()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  sub_100038B04(v4, type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038698()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  sub_100038B04(v4, type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038734(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject(&unk_1001206C0, 32LL, 7LL);
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_100029E18((uint64_t *)&unk_10013CC30);
  swift_retain(a2);
  uint64_t v9 = Promise.__allocating_init()(v7);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v6, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_1001206E8, 56LL, 7LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = &unk_10013C8B8;
  v11[5] = v8;
  v11[6] = v9;
  swift_retain(v9);
  uint64_t v12 = sub_1000B3448((uint64_t)v6, (uint64_t)&unk_10013CE60, (uint64_t)v11);
  swift_release(v12);
  return v9;
}

uint64_t sub_10003885C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100038888(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013C8B4);
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002A858;
  return sub_1000360D0(a1, v5, v4);
}

uint64_t sub_1000388F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100038934()
{
  sub_100029F4C((void *)(v0 + 32));
  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_100038968(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + 32;
  char v7 = *(_BYTE *)(v1 + 72);
  uint64_t v8 = (void *)swift_task_alloc(dword_10013C8CC);
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100039088;
  return sub_1000321E0(a1, v4, v5, v6, v7);
}

uint64_t sub_1000389E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013F404);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10002A858;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_10013F400
                                                                                     + dword_10013F400))( a1,  v4,  v5,  v6,  v7,  v8);
}

uint64_t sub_100038A7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100029E18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100038AC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100038B04(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100038B40()
{
  uint64_t v1 = type metadata accessor for State(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + 48;
  swift_release(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100029F4C((void *)(v7 + 8));
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100038BD8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for State(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8LL) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  char v11 = *(_BYTE *)(v1 + v6);
  uint64_t v12 = v7 + 8;
  uint64_t v13 = (void *)swift_task_alloc(dword_10013C8F4);
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100039088;
  return sub_100033604(a1, v8, v9, v10, v11, v12);
}

uint64_t sub_100038C88()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100038CBC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013F404);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100039088;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_10013F400
                                                                                     + dword_10013F400))( a1,  v4,  v5,  v6,  v7,  v8);
}

uint64_t sub_100038D50(void *a1)
{
  uint64_t v1 = _swiftEmptyDictionarySingleton;
  uint64_t v32 = _swiftEmptyDictionarySingleton;
  id v2 = [a1 fields];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"extRefApp2");
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    sub_10008D45C(v4, v5);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = v6;
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"extRefApp2");
  uint64_t v11 = v10;
  id v12 = [a1 fields];
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"hostApp");
  uint64_t v16 = v15;
  if (*(void *)(v13 + 16))
  {
    unint64_t v17 = sub_10008D45C(v14, v15);
    if ((v18 & 1) != 0)
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v17);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v13);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      aBlock[0] = _swiftEmptyDictionarySingleton;
      uint64_t v32 = (void *)0x8000000000000000LL;
      sub_10008F810(v20, v21, v9, v11, isUniquelyReferenced_nonNull_native);
      uint64_t v1 = _swiftEmptyDictionarySingleton;
      uint64_t v3 = 0x8000000000000000LL;
      uint64_t v8 = v11;
LABEL_7:
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v3);
      if (_swiftEmptyDictionarySingleton[2]) {
        goto LABEL_8;
      }
LABEL_11:
      swift_bridgeObjectRelease(v1);
      return (uint64_t)a1;
    }
  }

  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v13);
  sub_10005BEF8(v9, v11);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v28);
  uint64_t v1 = v32;
  if (!v32[2]) {
    goto LABEL_11;
  }
LABEL_8:
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  aBlock[4] = sub_100033514;
  uint64_t v31 = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100033544;
  aBlock[3] = &unk_1001207A0;
  uint64_t v24 = _Block_copy(aBlock);
  swift_release(v31);
  id v25 = [a1 metricsActivityByMergingFields:isa uniquingFieldsWithBlock:v24];

  _Block_release(v24);
  uint64_t result = swift_isEscapingClosureAtFileLocation(0LL, "", 139LL, 81LL, 78LL, 1LL);
  if ((result & 1) == 0) {
    return (uint64_t)v25;
  }
  __break(1u);
  return result;
}

uint64_t sub_100039030(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100029F6C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100039070(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039080(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100039090()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppOffer.Flags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v35 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v15 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (!v15) {
    uint64_t v0 = 0LL;
  }
  if (!v0) {
    goto LABEL_11;
  }
  uint64_t v17 = swift_getObjectType(v0);
  uint64_t v36 = v8;
  char v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
  swift_unknownObjectRetain(v1);
  uint64_t v19 = v17;
  uint64_t v20 = v11;
  uint64_t v21 = v18(v19, v16);
  uint64_t v8 = v36;
  uint64_t v22 = (void *)v21;

  if (v22)
  {
    unsigned __int16 v23 = (unsigned __int16)[v22 flags];
    uint64_t v24 = static AppOffer.Flags.none.getter();
    if ((v23 & 0x200) != 0)
    {
      uint64_t v25 = (uint64_t)v35;
      static AppOffer.Flags.dsidLess.getter(v24);
      sub_100045D68(v8, v25);
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v26(v25, v2);
      v26((uint64_t)v8, v2);
    }

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v13, v20, v2);
    id v27 = [v22 baseBuyParams];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    id v31 = [v22 metricsBuyParams];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v34 = v33;

    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)(v13, 0LL, 1LL, v28, v30, v32, v34);
  }

  else
  {
LABEL_11:
    static AppOffer.Flags.none.getter();
    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)( v8,  0LL,  1LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }

uint64_t sub_100039304()
{
  uint64_t v0 = type metadata accessor for OSLogger(0LL);
  sub_10002A728(v0, qword_10013C920);
  uint64_t v1 = sub_10002A768(v0, (uint64_t)qword_10013C920);
  if (qword_10013BC60 != -1) {
    swift_once(&qword_10013BC60, sub_1000D15B8);
  }
  uint64_t v2 = sub_10002A768(v0, (uint64_t)qword_100148660);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100039394()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_1000393B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[1] = a3;
  uint64_t v5 = sub_100029E18(&qword_10013CB58);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v12 = (char *)v20 + *(int *)(v11 + 48) - v9;
  uint64_t v13 = type metadata accessor for App(0LL);
  v20[0] = *(void *)(v13 - 8);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v20[0] + 16LL);
  v14(v10, a1, v13);
  uint64_t v15 = type metadata accessor for State(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v12, a2, v15);
  uint64_t v18 = (uint64_t)&v7[*(int *)(v5 + 48)];
  v14(v7, (uint64_t)v10, v13);
  v17((char *)v18, (uint64_t)v12, v15);
  sub_10003951C((uint64_t)v7, v18);
  sub_10002E92C((uint64_t)v10, &qword_10013CB58);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v20[0] + 8LL))(v7, v13);
}

uint64_t sub_10003951C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100029E18(&qword_10013CB58);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v21 - v10;
  v21[0] = (char *)v21 + *(int *)(v12 + 48) - v10;
  uint64_t v13 = v21[0];
  uint64_t v14 = type metadata accessor for App(0LL);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
  v15(v11, a1, v14);
  uint64_t v16 = type metadata accessor for State(0LL);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
  v17(v13, a2, v16);
  uint64_t v18 = *(void **)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  uint64_t v19 = &v8[*(int *)(v6 + 48)];
  v15(v8, (uint64_t)v11, v14);
  v17((uint64_t)v19, v21[0], v16);
  [v18 lock];
  sub_10003A5EC(v3, (uint64_t)v8);
  [v18 unlock];
  sub_10002E92C((uint64_t)v11, &qword_10013CB58);
  return sub_10002E92C((uint64_t)v8, &qword_10013CB58);
}

id sub_100039698(uint64_t a1, uint64_t a2)
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v3 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v3, (uint64_t)qword_10013C920);
  uint64_t v4 = sub_100029E18(&qword_10013EA00);
  uint64_t v5 = type metadata accessor for LogMessage(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000034LL, 0x80000001000FAEF0LL);
  Logger.info(_:)(v6, v3, &protocol witness table for OSLogger);
  *(void *)&double v7 = swift_bridgeObjectRelease(v6).n128_u64[0];
  uint64_t v8 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  objc_msgSend(v8, "lock", v7);
  sub_10003A9A0(a2);
  return [v8 unlock];
}

id sub_1000397D0(uint64_t a1, uint64_t a2)
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v3 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v3, (uint64_t)qword_10013C920);
  uint64_t v4 = sub_100029E18(&qword_10013EA00);
  uint64_t v5 = type metadata accessor for LogMessage(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000027LL, 0x80000001000FAEC0LL);
  Logger.info(_:)(v6, v3, &protocol witness table for OSLogger);
  *(void *)&double v7 = swift_bridgeObjectRelease(v6).n128_u64[0];
  uint64_t v8 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  objc_msgSend(v8, "lock", v7);
  sub_10003AF20(a2);
  return [v8 unlock];
}

id sub_100039908(uint64_t a1, uint64_t a2)
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v4, (uint64_t)qword_10013C920);
  uint64_t v5 = sub_100029E18(&qword_10013EA00);
  uint64_t v6 = type metadata accessor for LogMessage(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD00000000000002FLL, 0x80000001000FAE90LL);
  Logger.info(_:)(v7, v4, &protocol witness table for OSLogger);
  *(void *)&double v8 = swift_bridgeObjectRelease(v7).n128_u64[0];
  uint64_t v9 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  objc_msgSend(v9, "lock", v8);
  sub_10003B4A0(a2, a1);
  return [v9 unlock];
}

id sub_100039A48(uint64_t a1, uint64_t a2)
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v3 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v3, (uint64_t)qword_10013C920);
  uint64_t v4 = sub_100029E18(&qword_10013EA00);
  uint64_t v5 = type metadata accessor for LogMessage(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000032LL, 0x80000001000FADC0LL);
  Logger.info(_:)(v6, v3, &protocol witness table for OSLogger);
  *(void *)&double v7 = swift_bridgeObjectRelease(v6).n128_u64[0];
  double v8 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  objc_msgSend(v8, "lock", v7);
  sub_10003BC30(a2);
  return [v8 unlock];
}

id sub_100039B80()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = &v0[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations];
  swift_beginAccess(v3, v9, 0LL, 0LL);
  if (*(void *)(*(void *)v3 + 16LL))
  {
    uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 24];
    uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 32];
    sub_100029EE0(&v1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager], v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }

  id v6 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v6 removeObserver:v1];

  v8.receiver = v1;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "dealloc");
}

uint64_t sub_100039D60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v100 = a3;
  uint64_t v5 = type metadata accessor for State.Key(0LL);
  uint64_t v102 = *(void *)(v5 - 8);
  uint64_t v103 = v5;
  __chkstk_darwin(v5);
  uint64_t v101 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ArcadeState(0LL);
  uint64_t v108 = *(void *)(v7 - 8);
  uint64_t v109 = v7;
  __chkstk_darwin(v7);
  uint64_t v110 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v105 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v86 - v12;
  uint64_t v14 = type metadata accessor for OSLogger(0LL);
  uint64_t v111 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v104 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v86 - v17;
  uint64_t v19 = type metadata accessor for State(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getObjectType(a1);
  id v23 = [objc_allocWithZone((Class)ASCOfferContext) init];
  uint64_t v99 = v22;
  uint64_t v107 = a2;
  sub_1000680F8(a2, v23, (uint64_t)v22);

  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v24 = sub_10002A768(v14, (uint64_t)qword_10013C920);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
  uint64_t v95 = v24;
  uint64_t v96 = v25;
  ((void (*)(char *))v25)(v18);
  uint64_t v26 = sub_100029E18(&qword_10013EA00);
  uint64_t v27 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v28 = *(void *)(v27 + 72);
  uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v30 = (v29 + 32) & ~v29;
  uint64_t v94 = v26;
  uint64_t v92 = v30 + v28;
  uint64_t v91 = v29 | 7;
  uint64_t v31 = swift_allocObject(v26, v30 + v28, v29 | 7);
  __int128 v90 = xmmword_1000EDBE0;
  *(_OWORD *)(v31 + 16) = xmmword_1000EDBE0;
  uint64_t v93 = v30;
  uint64_t v97 = v31 + v30;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(58LL, 3LL);
  v32._countAndFlagsBits = 0x747320726566664FLL;
  v32._object = (void *)0xEF20666F20657461LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v32);
  uint64_t v98 = a1;
  id v33 = [a1 id];
  uint64_t v89 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  *((void *)&v114 + 1) = v89;
  *(void *)&__int128 v113 = v33;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v113);
  uint64_t v87 = v14;
  sub_10002E92C((uint64_t)&v113, &qword_10013C6F0);
  unint64_t v88 = (unint64_t)"t offer ID to AppState app";
  v34._object = (void *)0x80000001000FAE30LL;
  v34._countAndFlagsBits = 0xD000000000000010LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v34);
  *((void *)&v114 + 1) = v19;
  uint64_t v35 = sub_10002C328(&v113);
  uint64_t v106 = v20;
  uint64_t v36 = *(void (**)(void *, uint64_t, uint64_t))(v20 + 16);
  v36(v35, v107, v19);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v113);
  sub_10002E92C((uint64_t)&v113, &qword_10013C6F0);
  v37._countAndFlagsBits = 0xD00000000000001BLL;
  v37._object = (void *)0x80000001000FAE50LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v37);
  *((void *)&v114 + 1) = v19;
  uint64_t v38 = sub_10002C328(&v113);
  uint64_t v39 = v99;
  uint64_t v107 = v19;
  v36(v38, (uint64_t)v99, v19);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v113);
  sub_10002E92C((uint64_t)&v113, &qword_10013C6F0);
  v40._countAndFlagsBits = 0LL;
  v40._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  LogMessage.init(stringInterpolation:)(v13);
  Logger.info(_:)(v31, v14, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v31);
  uint64_t v111 = *(void *)(v111 + 8);
  ((void (*)(char *, uint64_t))v111)(v18, v14);
  uint64_t v41 = v112;
  uint64_t v42 = *(void *)&v112[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription + 24];
  uint64_t v43 = *(void *)&v112[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription + 32];
  sub_100029EE0(&v112[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription], v42);
  uint64_t v44 = (uint64_t)v110;
  dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter(v42, v43);
  char v45 = *(_BYTE *)(*sub_100029EE0( &v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStoreInstallStateMonitor],  *(void *)&v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStoreInstallStateMonitor + 24])
                 + 16LL);
  uint64_t v46 = *(void *)&v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions + 24];
  uint64_t v47 = *(void *)&v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions + 32];
  sub_100029EE0(&v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions], v46);
  uint64_t v48 = v98;
  LOBYTE(v43) = sub_1000D7CA4(v98, v39, v46, v47);
  uint64_t v49 = *(os_unfair_lock_s **)(*sub_100029EE0( &v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers],  *(void *)&v41[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers + 24])
                             + 16LL);
  uint64_t v50 = (uint64_t *)&v49[4];
  uint64_t v51 = v49 + 6;
  os_unfair_lock_lock(v49 + 6);
  sub_100087038(v50, &v113);
  uint64_t v52 = (uint64_t)v39;
  uint64_t v53 = 2LL;
  if ((v43 & 1) == 0) {
    uint64_t v53 = 0LL;
  }
  unint64_t v54 = v100 & 0xFFFFFFFFFFFFFFFDLL | v53;
  os_unfair_lock_unlock(v51);
  uint64_t v55 = v113;
  uint64_t v56 = v112;
  uint64_t v57 = &v112[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_localizer];
  id v58 = sub_100067830( v52,  v48,  v45,  v44,  v113,  &v112[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_localizer]);
  uint64_t v59 = swift_bridgeObjectRelease(v55);
  uint64_t v60 = *(char **)&v56[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_delegate];
  uint64_t v61 = v101;
  uint64_t v62 = State.key.getter(v59);
  State.Key.rawValue.getter(v62);
  uint64_t v64 = v63;
  (*(void (**)(char *, uint64_t))(v102 + 8))(v61, v103);
  NSString v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v64);
  uint64_t v112 = v60;
  [v60 offer:v48 didChangeState:v65 withMetadata:v58 flags:v54];

  id v66 = (char *)v44;
  if (([v48 flags] & 8) != 0)
  {
    uint64_t v72 = sub_100067920(v52, v48, v44, v57);
    uint64_t v74 = v73;
    uint64_t v75 = v87;
    v96(v104, v95, v87);
    uint64_t v76 = swift_allocObject(v94, v92, v91);
    *(_OWORD *)(v76 + 16) = v90;
    uint64_t v103 = v76 + v93;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(37LL, 2LL);
    v77._countAndFlagsBits = 0xD000000000000015LL;
    v77._object = (void *)0x80000001000FAE70LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v77);
    id v78 = [v48 id];
    *((void *)&v114 + 1) = v89;
    *(void *)&__int128 v113 = v78;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v113);
    sub_10002E92C((uint64_t)&v113, &qword_10013C6F0);
    v79._object = (void *)(v88 | 0x8000000000000000LL);
    v79._countAndFlagsBits = 0xD000000000000010LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v79);
    if (v74)
    {
      *((void *)&v114 + 1) = &type metadata for String;
      *(void *)&__int128 v113 = v72;
      *((void *)&v113 + 1) = v74;
      uint64_t v80 = v74;
    }

    else
    {
      uint64_t v80 = 0LL;
      __int128 v113 = 0u;
      __int128 v114 = 0u;
    }

    uint64_t v67 = v52;
    swift_bridgeObjectRetain(v80);
    uint64_t v81 = v105;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v113);
    sub_10002E92C((uint64_t)&v113, &qword_10013C6F0);
    v82._countAndFlagsBits = 0LL;
    v82._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v82);
    LogMessage.init(stringInterpolation:)(v81);
    uint64_t v83 = v104;
    Logger.info(_:)(v76, v75, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v76);
    ((void (*)(char *, uint64_t))v111)(v83, v75);
    if (v74)
    {
      NSString v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v80);
    }

    else
    {
      NSString v84 = 0LL;
    }

    uint64_t v69 = v108;
    uint64_t v68 = v109;
    uint64_t v70 = v106;
    uint64_t v71 = v107;
    id v66 = v110;
    [v112 offer:v48 didChangeStatusText:v84];

    id v58 = v84;
  }

  else
  {
    uint64_t v67 = v52;
    uint64_t v69 = v108;
    uint64_t v68 = v109;
    uint64_t v70 = v106;
    uint64_t v71 = v107;
  }

  (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v68);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v67, v71);
}

void sub_10003A5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for AdamID(0LL);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v41 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100029E18(&qword_10013CB58);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36[1] = a1;
  uint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(v6, v50, 0LL, 0LL);
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 64);
  uint64_t v37 = *v6 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v45 = v7;
  swift_bridgeObjectRetain(v7);
  int64_t v12 = 0LL;
  uint64_t v13 = v39;
  while (1)
  {
    if (v11)
    {
      uint64_t v49 = (v11 - 1) & v11;
      int64_t v51 = v12;
      unint64_t v14 = __clz(__rbit64(v11)) | (v12 << 6);
      goto LABEL_23;
    }

    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v15 >= v38) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v37 + 8 * v15);
    int64_t v17 = v12 + 1;
    if (!v16)
    {
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v38) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v37 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v12 + 3;
        if (v12 + 3 >= v38) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v37 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v12 + 4;
          if (v12 + 4 >= v38) {
            goto LABEL_25;
          }
          unint64_t v16 = *(void *)(v37 + 8 * v17);
          if (!v16) {
            break;
          }
        }
      }
    }

void sub_10003A9A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AppOffer(0LL);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for State(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v53 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for App.Kind(0LL);
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8);
  uint64_t v50 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v10);
  int64_t v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v48 = type metadata accessor for App(0LL);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  NSString v65 = &v44[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations, v68, 0LL, 0LL);
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(*v14 + 64);
  uint64_t v67 = *v14 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v59 = a1;
  uint64_t v46 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  unsigned int v45 = enum case for App.Kind.store(_:);
  swift_bridgeObjectRetain(v15);
  int64_t v20 = 0LL;
  uint64_t v21 = &selRef_appendBytes_length_;
  __int128 v61 = xmmword_1000EDBE0;
  unint64_t v60 = 0x80000001000FAE00LL;
  uint64_t v66 = v15;
  uint64_t v49 = v12;
  while (1)
  {
    if (v19)
    {
      unint64_t v32 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v33 = v32 | (v20 << 6);
      goto LABEL_22;
    }

    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v20 >= v69) {
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v67 + 8 * v20);
    if (!v35) {
      break;
    }
LABEL_21:
    unint64_t v19 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v20 << 6);
LABEL_22:
    uint64_t v37 = *(void *)(*(void *)(v15 + 56) + 8 * v33);
    int64_t v38 = *(void **)(v37 + 24);
    swift_getObjectType(v38);
    swift_retain(v37);
    if (([v38 v21[101]] & 4) != 0)
    {
      id v39 = [v38 id];
      AdamID.init(value:)([v39 int64value]);
      if (v2)
      {

        if (qword_10013BBA0 != -1) {
          swift_once(&qword_10013BBA0, sub_100039304);
        }
        uint64_t v40 = type metadata accessor for OSLogger(0LL);
        sub_10002A768(v40, (uint64_t)qword_10013C920);
        uint64_t v41 = sub_100029E18(&qword_10013EA00);
        uint64_t v42 = type metadata accessor for LogMessage(0LL);
        uint64_t v43 = swift_allocObject( v41,  ((*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL))
              + *(void *)(*(void *)(v42 - 8) + 72LL),
                *(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) | 7LL);
        *(_OWORD *)(v43 + 16) = v61;
        LogMessage.init(stringLiteral:)(0xD00000000000002ALL, v60);
        Logger.error(_:)(v43, v40, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(v43);
        swift_errorRelease(v2);
        uint64_t v2 = 0LL;
        uint64_t v15 = v66;
      }

      else
      {
        uint64_t v22 = v50;
        (*(void (**)(_BYTE *, void, uint64_t))(v51 + 104))(v50, v45, v52);
        App.init(id:kind:)(v12, v22);

        uint64_t v23 = v46[3];
        uint64_t v63 = v46[4];
        uint64_t v62 = sub_100029EE0(v46, v23);
        uint64_t v64 = 0LL;
        uint64_t v24 = v56;
        sub_100045AF0();
        uint64_t v25 = (uint64_t)v53;
        uint64_t v26 = v65;
        uint64_t v27 = v23;
        uint64_t v28 = v66;
        AppStateController.state(forApp:applying:)(v65, v24, v27, v63);
        uint64_t v29 = v24;
        uint64_t v2 = v64;
        (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v29, v58);
        sub_100039D60(v38, v25, 0LL);
        uint64_t v30 = v25;
        int64_t v12 = v49;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v30, v55);
        uint64_t v31 = v26;
        uint64_t v15 = v28;
        (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v31, v48);
      }

      uint64_t v21 = &selRef_appendBytes_length_;
    }

    swift_release(v37);
  }

  int64_t v36 = v20 + 1;
  if (v20 + 1 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 2;
  if (v20 + 2 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 3;
  if (v20 + 3 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 4;
  if (v20 + 4 >= v69)
  {
LABEL_31:
    swift_release(v15);
    return;
  }

  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35)
  {
LABEL_20:
    int64_t v20 = v36;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v20 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v20 >= v69) {
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v67 + 8 * v20);
    ++v36;
    if (v35) {
      goto LABEL_21;
    }
  }

void sub_10003AF20(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AppOffer(0LL);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for State(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v53 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for App.Kind(0LL);
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8);
  uint64_t v50 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v10);
  int64_t v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v48 = type metadata accessor for App(0LL);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  NSString v65 = &v44[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations, v68, 0LL, 0LL);
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(*v14 + 64);
  uint64_t v67 = *v14 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v59 = a1;
  uint64_t v46 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  unsigned int v45 = enum case for App.Kind.store(_:);
  swift_bridgeObjectRetain(v15);
  int64_t v20 = 0LL;
  uint64_t v21 = &selRef_appendBytes_length_;
  __int128 v61 = xmmword_1000EDBE0;
  unint64_t v60 = 0x80000001000FAE00LL;
  uint64_t v66 = v15;
  uint64_t v49 = v12;
  while (1)
  {
    if (v19)
    {
      unint64_t v32 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v33 = v32 | (v20 << 6);
      goto LABEL_22;
    }

    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v20 >= v69) {
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v67 + 8 * v20);
    if (!v35) {
      break;
    }
LABEL_21:
    unint64_t v19 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v20 << 6);
LABEL_22:
    uint64_t v37 = *(void *)(*(void *)(v15 + 56) + 8 * v33);
    int64_t v38 = *(void **)(v37 + 24);
    swift_getObjectType(v38);
    swift_retain(v37);
    if (([v38 v21[101]] & 0x10) == 0)
    {
      id v39 = [v38 id];
      AdamID.init(value:)([v39 int64value]);
      if (v2)
      {

        if (qword_10013BBA0 != -1) {
          swift_once(&qword_10013BBA0, sub_100039304);
        }
        uint64_t v40 = type metadata accessor for OSLogger(0LL);
        sub_10002A768(v40, (uint64_t)qword_10013C920);
        uint64_t v41 = sub_100029E18(&qword_10013EA00);
        uint64_t v42 = type metadata accessor for LogMessage(0LL);
        uint64_t v43 = swift_allocObject( v41,  ((*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL))
              + *(void *)(*(void *)(v42 - 8) + 72LL),
                *(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) | 7LL);
        *(_OWORD *)(v43 + 16) = v61;
        LogMessage.init(stringLiteral:)(0xD00000000000002ALL, v60);
        Logger.error(_:)(v43, v40, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(v43);
        swift_errorRelease(v2);
        uint64_t v2 = 0LL;
        uint64_t v15 = v66;
      }

      else
      {
        uint64_t v22 = v50;
        (*(void (**)(_BYTE *, void, uint64_t))(v51 + 104))(v50, v45, v52);
        App.init(id:kind:)(v12, v22);

        uint64_t v23 = v46[3];
        uint64_t v63 = v46[4];
        uint64_t v62 = sub_100029EE0(v46, v23);
        uint64_t v64 = 0LL;
        uint64_t v24 = v56;
        sub_100045AF0();
        uint64_t v25 = (uint64_t)v53;
        uint64_t v26 = v65;
        uint64_t v27 = v23;
        uint64_t v28 = v66;
        AppStateController.state(forApp:applying:)(v65, v24, v27, v63);
        uint64_t v29 = v24;
        uint64_t v2 = v64;
        (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v29, v58);
        sub_100039D60(v38, v25, 0LL);
        uint64_t v30 = v25;
        int64_t v12 = v49;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v30, v55);
        uint64_t v31 = v26;
        uint64_t v15 = v28;
        (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v31, v48);
      }

      uint64_t v21 = &selRef_appendBytes_length_;
    }

    swift_release(v37);
  }

  int64_t v36 = v20 + 1;
  if (v20 + 1 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 2;
  if (v20 + 2 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 3;
  if (v20 + 3 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 4;
  if (v20 + 4 >= v69)
  {
LABEL_31:
    swift_release(v15);
    return;
  }

  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35)
  {
LABEL_20:
    int64_t v20 = v36;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v20 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v20 >= v69) {
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v67 + 8 * v20);
    ++v36;
    if (v35) {
      goto LABEL_21;
    }
  }

void sub_10003B4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppOffer(0LL);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4);
  uint64_t v72 = &v61[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v71 = type metadata accessor for State(0LL);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  int64_t v69 = &v61[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v68 = type metadata accessor for App.Kind(0LL);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = &v61[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v8);
  uint64_t v80 = &v61[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v65 = type metadata accessor for App(0LL);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v81 = &v61[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations, v90, 0LL, 0LL);
  uint64_t v12 = *v11;
  uint64_t v13 = *v11 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(*v11 + 32);
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & *(void *)(*v11 + 64);
  uint64_t v75 = a1;
  uint64_t v63 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  unint64_t v91 = a2 & 0xC000000000000001LL;
  if (a2 < 0) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v85 = a2 + 56;
  uint64_t v86 = v18;
  unsigned int v62 = enum case for App.Kind.store(_:);
  swift_bridgeObjectRetain(v12);
  int64_t v19 = 0LL;
  __int128 v77 = xmmword_1000EDBE0;
  unint64_t v76 = 0x80000001000FAE00LL;
  uint64_t v87 = a2;
  int64_t v88 = v17;
  uint64_t v83 = v13;
  uint64_t v84 = v12;
  while (v16)
  {
    unint64_t v20 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v21 = v20 | (v19 << 6);
LABEL_25:
    uint64_t v25 = *(void *)(*(void *)(v12 + 56) + 8 * v21);
    uint64_t v26 = *(void *)(v25 + 24);
    uint64_t v27 = objc_opt_self(&OBJC_CLASS___ASCContingentOffer);
    uint64_t v28 = swift_dynamicCastObjCClass(v26, v27);
    if (v28)
    {
      uint64_t v29 = (void *)v28;
      swift_retain(v25);
      id v30 = [v29 iapItemID];
      if (v30)
      {
        uint64_t v31 = v30;
        if (v91)
        {
          id v32 = v30;
          char v33 = __CocoaSet.contains(_:)();

          if ((v33 & 1) != 0)
          {
            id v34 = v80;
            uint64_t v35 = v89;
            goto LABEL_36;
          }

          swift_release(v25);
          int64_t v17 = v88;
        }

        else
        {
          if (!*(void *)(a2 + 16))
          {

            goto LABEL_9;
          }

          Swift::Int v36 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
          uint64_t v37 = -1LL << *(_BYTE *)(a2 + 32);
          unint64_t v38 = v36 & ~v37;
          if (((*(void *)(v85 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v38) & 1) != 0)
          {
            sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
            id v39 = *(id *)(*(void *)(a2 + 48) + 8 * v38);
            char v40 = static NSObject.== infix(_:_:)(v39);

            if ((v40 & 1) == 0)
            {
              uint64_t v41 = ~v37;
              unint64_t v42 = (v38 + 1) & v41;
              if (((*(void *)(v85 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v42) & 1) == 0) {
                goto LABEL_42;
              }
              id v43 = *(id *)(*(void *)(v87 + 48) + 8 * v42);
              char v44 = static NSObject.== infix(_:_:)(v43);

              if ((v44 & 1) == 0)
              {
                unint64_t v58 = (v42 + 1) & v41;
                if (((*(void *)(v85 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v58) & 1) == 0) {
                  goto LABEL_42;
                }
                a2 = v87;
                while (1)
                {
                  id v59 = *(id *)(*(void *)(a2 + 48) + 8 * v58);
                  char v60 = static NSObject.== infix(_:_:)(v59);

                  if ((v60 & 1) != 0) {
                    break;
                  }
                  unint64_t v58 = (v58 + 1) & v41;
                  a2 = v87;
                  if (((*(void *)(v85 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v58) & 1) == 0)
                  {

                    swift_release(v25);
                    goto LABEL_44;
                  }
                }
              }
            }

            uint64_t v35 = v89;
            id v34 = v80;
LABEL_36:
            unsigned int v45 = *(void **)(v25 + 24);
            uint64_t ObjectType = swift_getObjectType(v45);
            id v46 = [v45 id];
            uint64_t v47 = v35;
            AdamID.init(value:)([v46 int64value]);
            if (v35)
            {

              if (qword_10013BBA0 != -1) {
                swift_once(&qword_10013BBA0, sub_100039304);
              }
              uint64_t v48 = type metadata accessor for OSLogger(0LL);
              sub_10002A768(v48, (uint64_t)qword_10013C920);
              uint64_t v49 = sub_100029E18(&qword_10013EA00);
              uint64_t v50 = type metadata accessor for LogMessage(0LL);
              uint64_t v51 = swift_allocObject( v49,  ((*(unsigned __int8 *)(*(void *)(v50 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v50 - 8) + 80LL))
                    + *(void *)(*(void *)(v50 - 8) + 72LL),
                      *(unsigned __int8 *)(*(void *)(v50 - 8) + 80LL) | 7LL);
              *(_OWORD *)(v51 + 16) = v77;
              LogMessage.init(stringLiteral:)(0xD00000000000002ALL, v76);
              Logger.error(_:)(v51, v48, &protocol witness table for OSLogger);
              swift_bridgeObjectRelease(v51);
              swift_errorRelease(v47);

              swift_release(v25);
              uint64_t v89 = 0LL;
              goto LABEL_43;
            }

            uint64_t v52 = v34;
            uint64_t v53 = v66;
            (*(void (**)(_BYTE *, void, uint64_t))(v67 + 104))(v66, v62, v68);
            App.init(id:kind:)(v52, v53);

            uint64_t v54 = v63[3];
            uint64_t v79 = v63[4];
            uint64_t v55 = sub_100029EE0(v63, v54);
            uint64_t v89 = 0LL;
            id v78 = v55;
            uint64_t v56 = v72;
            sub_100045AF0();
            uint64_t v57 = (uint64_t)v69;
            AppStateController.state(forApp:applying:)(v81, v56, v54, v79);
            (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v56, v74);
            sub_100039D60(v45, v57, 0LL);
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v57, v71);
            (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v81, v65);
LABEL_42:

            swift_release(v25);
LABEL_43:
            a2 = v87;
LABEL_44:
            uint64_t v13 = v83;
            uint64_t v12 = v84;
            int64_t v17 = v88;
          }

          else
          {

            swift_release(v25);
            uint64_t v13 = v83;
            uint64_t v12 = v84;
          }
        }
      }

      else
      {
LABEL_9:
        swift_release(v25);
      }
    }
  }

  if (__OFADD__(v19++, 1LL))
  {
    __break(1u);
    goto LABEL_57;
  }

  if (v19 >= v17) {
    goto LABEL_55;
  }
  unint64_t v23 = *(void *)(v13 + 8 * v19);
  if (v23)
  {
LABEL_24:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
    goto LABEL_25;
  }

  int64_t v24 = v19 + 1;
  if (v19 + 1 >= v17) {
    goto LABEL_55;
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23) {
    goto LABEL_23;
  }
  int64_t v24 = v19 + 2;
  if (v19 + 2 >= v17) {
    goto LABEL_55;
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23) {
    goto LABEL_23;
  }
  int64_t v24 = v19 + 3;
  if (v19 + 3 >= v17) {
    goto LABEL_55;
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23) {
    goto LABEL_23;
  }
  int64_t v24 = v19 + 4;
  if (v19 + 4 >= v17)
  {
LABEL_55:
    swift_release(v12);
    return;
  }

  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23)
  {
LABEL_23:
    int64_t v19 = v24;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v19 >= v17) {
      goto LABEL_55;
    }
    unint64_t v23 = *(void *)(v13 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_24;
    }
  }

LABEL_57:
  __break(1u);
}

void sub_10003BC30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AppOffer(0LL);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for State(0LL);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v53 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for App.Kind(0LL);
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8);
  uint64_t v50 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v48 = type metadata accessor for App(0LL);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v65 = &v44[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations, v68, 0LL, 0LL);
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(*v14 + 64);
  uint64_t v67 = *v14 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v59 = a1;
  id v46 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  unsigned int v45 = enum case for App.Kind.store(_:);
  swift_bridgeObjectRetain(v15);
  int64_t v20 = 0LL;
  unint64_t v21 = &selRef_appendBytes_length_;
  __int128 v61 = xmmword_1000EDBE0;
  unint64_t v60 = 0x80000001000FAE00LL;
  uint64_t v66 = v15;
  uint64_t v49 = v12;
  while (1)
  {
    if (v19)
    {
      unint64_t v32 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v33 = v32 | (v20 << 6);
      goto LABEL_22;
    }

    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v20 >= v69) {
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v67 + 8 * v20);
    if (!v35) {
      break;
    }
LABEL_21:
    unint64_t v19 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v20 << 6);
LABEL_22:
    uint64_t v37 = *(void *)(*(void *)(v15 + 56) + 8 * v33);
    unint64_t v38 = *(void **)(v37 + 24);
    swift_getObjectType(v38);
    swift_retain(v37);
    if (([v38 v21[101]] & 0x1000) == 0)
    {
      id v39 = [v38 id];
      AdamID.init(value:)([v39 int64value]);
      if (v2)
      {

        if (qword_10013BBA0 != -1) {
          swift_once(&qword_10013BBA0, sub_100039304);
        }
        uint64_t v40 = type metadata accessor for OSLogger(0LL);
        sub_10002A768(v40, (uint64_t)qword_10013C920);
        uint64_t v41 = sub_100029E18(&qword_10013EA00);
        uint64_t v42 = type metadata accessor for LogMessage(0LL);
        uint64_t v43 = swift_allocObject( v41,  ((*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL))
              + *(void *)(*(void *)(v42 - 8) + 72LL),
                *(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) | 7LL);
        *(_OWORD *)(v43 + 16) = v61;
        LogMessage.init(stringLiteral:)(0xD00000000000002ALL, v60);
        Logger.error(_:)(v43, v40, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(v43);
        swift_errorRelease(v2);
        uint64_t v2 = 0LL;
        uint64_t v15 = v66;
      }

      else
      {
        uint64_t v22 = v50;
        (*(void (**)(_BYTE *, void, uint64_t))(v51 + 104))(v50, v45, v52);
        App.init(id:kind:)(v12, v22);

        uint64_t v23 = v46[3];
        uint64_t v63 = v46[4];
        unsigned int v62 = sub_100029EE0(v46, v23);
        uint64_t v64 = 0LL;
        int64_t v24 = v56;
        sub_100045AF0();
        uint64_t v25 = (uint64_t)v53;
        uint64_t v26 = v65;
        uint64_t v27 = v23;
        uint64_t v28 = v66;
        AppStateController.state(forApp:applying:)(v65, v24, v27, v63);
        uint64_t v29 = v24;
        uint64_t v2 = v64;
        (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v29, v58);
        sub_100039D60(v38, v25, 0LL);
        uint64_t v30 = v25;
        uint64_t v12 = v49;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v30, v55);
        uint64_t v31 = v26;
        uint64_t v15 = v28;
        (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v31, v48);
      }

      unint64_t v21 = &selRef_appendBytes_length_;
    }

    swift_release(v37);
  }

  int64_t v36 = v20 + 1;
  if (v20 + 1 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 2;
  if (v20 + 2 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 3;
  if (v20 + 3 >= v69) {
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35) {
    goto LABEL_20;
  }
  int64_t v36 = v20 + 4;
  if (v20 + 4 >= v69)
  {
LABEL_31:
    swift_release(v15);
    return;
  }

  unint64_t v35 = *(void *)(v67 + 8 * v36);
  if (v35)
  {
LABEL_20:
    int64_t v20 = v36;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v20 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v20 >= v69) {
      goto LABEL_31;
    }
    unint64_t v35 = *(void *)(v67 + 8 * v20);
    ++v36;
    if (v35) {
      goto LABEL_21;
    }
  }

id sub_10003C1B0()
{
  uint64_t v1 = v0;
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v2 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v2, (uint64_t)qword_10013C920);
  uint64_t v3 = sub_100029E18(&qword_10013EA00);
  uint64_t v4 = type metadata accessor for LogMessage(0LL);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000032LL, 0x80000001000FB3F0LL);
  Logger.info(_:)(v5, v2, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v6 lock];
  sub_10003C2E8(v1);
  return [v6 unlock];
}

uint64_t sub_10003C2E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppOffer(0LL);
  uint64_t v61 = *(void *)(v2 - 8);
  uint64_t v62 = v2;
  __chkstk_darwin(v2);
  unint64_t v60 = &v49[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = type metadata accessor for State(0LL);
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  uint64_t v57 = &v49[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v56 = type metadata accessor for App.Kind(0LL);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v54 = &v49[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v49[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v53 = type metadata accessor for App(0LL);
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v72 = &v49[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations, v74, 0LL, 0LL);
  uint64_t v12 = *v11;
  uint64_t v13 = *v11 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(*v11 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(*v11 + 64);
  uint64_t v63 = a1;
  uint64_t v51 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v75 = (unint64_t)(v14 + 63) >> 6;
  unsigned int v50 = enum case for App.Kind.store(_:);
  uint64_t result = swift_bridgeObjectRetain(v12);
  int64_t v18 = 0LL;
  unint64_t v19 = &selRef_formatDateInSentence_::;
  __int128 v65 = xmmword_1000EDBE0;
  unint64_t v64 = 0x80000001000FAE00LL;
  uint64_t v70 = v12;
  uint64_t v71 = v9;
  uint64_t v69 = v13;
  while (v16)
  {
    unint64_t v20 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v21 = v20 | (v18 << 6);
LABEL_20:
    uint64_t v25 = *(void *)(*(void *)(v12 + 56) + 8 * v21);
    uint64_t v26 = *(void *)(v25 + 24);
    uint64_t v27 = objc_opt_self(v19 + 436);
    uint64_t result = swift_dynamicCastObjCClass(v26, v27);
    if (result)
    {
      uint64_t v28 = (void *)result;
      swift_retain(v25);
      swift_unknownObjectRetain(v26);
      id v29 = [v28 capabilities];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for String);

        uint64_t v32 = *(void *)(v31 + 16);
        swift_bridgeObjectRelease(v31);
        if (v32)
        {
          unint64_t v33 = *(void **)(v25 + 24);
          uint64_t ObjectType = swift_getObjectType(v33);
          id v35 = [v33 id];
          id v36 = [v35 int64value];
          uint64_t v37 = v73;
          AdamID.init(value:)(v36);
          if (v37)
          {

            if (qword_10013BBA0 != -1) {
              swift_once(&qword_10013BBA0, sub_100039304);
            }
            uint64_t v38 = type metadata accessor for OSLogger(0LL);
            sub_10002A768(v38, (uint64_t)qword_10013C920);
            uint64_t v39 = sub_100029E18(&qword_10013EA00);
            uint64_t v40 = type metadata accessor for LogMessage(0LL);
            uint64_t v41 = swift_allocObject( v39,  ((*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL))
                  + *(void *)(*(void *)(v40 - 8) + 72LL),
                    *(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) | 7LL);
            *(_OWORD *)(v41 + 16) = v65;
            LogMessage.init(stringLiteral:)(0xD00000000000002ALL, v64);
            Logger.error(_:)(v41, v38, &protocol witness table for OSLogger);
            swift_bridgeObjectRelease(v41);
            swift_errorRelease(v37);
            swift_release(v25);
            uint64_t result = swift_unknownObjectRelease(v26);
            uint64_t v73 = 0LL;
            uint64_t v12 = v70;
            uint64_t v9 = v71;
          }

          else
          {
            uint64_t v42 = *(void (**)(_BYTE *, void, uint64_t))(v55 + 104);
            uint64_t v43 = v54;
            uint64_t v68 = ObjectType;
            v42(v54, v50, v56);
            App.init(id:kind:)(v9, v43);

            uint64_t v44 = v51[3];
            uint64_t v67 = v51[4];
            unsigned int v45 = sub_100029EE0(v51, v44);
            uint64_t v73 = 0LL;
            uint64_t v66 = v45;
            id v46 = v60;
            sub_100045AF0();
            uint64_t v47 = (uint64_t)v57;
            AppStateController.state(forApp:applying:)(v72, v46, v44, v67);
            uint64_t v48 = v46;
            uint64_t v12 = v70;
            (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v48, v62);
            sub_100039D60(v33, v47, 0LL);
            (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v47, v59);
            (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v72, v53);
            swift_release(v25);
            uint64_t result = swift_unknownObjectRelease(v26);
            uint64_t v9 = v71;
          }

          uint64_t v13 = v69;
          unint64_t v19 = &selRef_formatDateInSentence_::;
        }

        else
        {
          swift_unknownObjectRelease(v26);
          uint64_t result = swift_release(v25);
          unint64_t v19 = &selRef_formatDateInSentence_::;
        }
      }

      else
      {
        swift_unknownObjectRelease(v26);
        uint64_t result = swift_release(v25);
      }
    }
  }

  if (__OFADD__(v18++, 1LL))
  {
    __break(1u);
    goto LABEL_36;
  }

  if (v18 >= v75) {
    return swift_release(v12);
  }
  unint64_t v23 = *(void *)(v13 + 8 * v18);
  if (v23)
  {
LABEL_19:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
    goto LABEL_20;
  }

  int64_t v24 = v18 + 1;
  if (v18 + 1 >= v75) {
    return swift_release(v12);
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v18 + 2;
  if (v18 + 2 >= v75) {
    return swift_release(v12);
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v18 + 3;
  if (v18 + 3 >= v75) {
    return swift_release(v12);
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v18 + 4;
  if (v18 + 4 >= v75) {
    return swift_release(v12);
  }
  unint64_t v23 = *(void *)(v13 + 8 * v24);
  if (v23)
  {
LABEL_18:
    int64_t v18 = v24;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v18 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v18 >= v75) {
      return swift_release(v12);
    }
    unint64_t v23 = *(void *)(v13 + 8 * v18);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }

uint64_t sub_10003C9A4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ArcadeState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v32 - v12;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription) & 1) == 0)
  {
    uint64_t v14 = (void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription);
    uint64_t v15 = ObjectType;
    uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription + 24);
    uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription + 32);
    uint64_t v33 = v1;
    uint64_t v18 = OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription;
    sub_100029EE0(v14, v16);
    uint64_t v19 = v17;
    uint64_t v20 = v18;
    uint64_t v21 = v33;
    dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter(v16, v19);
    char *v10 = 1;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for ArcadeState.unknown(_:), v6);
    char v22 = static ArcadeState.== infix(_:_:)(v13, v10);
    unint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v23(v10, v6);
    uint64_t result = v23(v13, v6);
    if ((v22 & 1) != 0)
    {
      if (qword_10013BBA0 != -1) {
        swift_once(&qword_10013BBA0, sub_100039304);
      }
      uint64_t v24 = type metadata accessor for OSLogger(0LL);
      sub_10002A768(v24, (uint64_t)qword_10013C920);
      uint64_t v25 = sub_100029E18(&qword_10013EA00);
      uint64_t v26 = type metadata accessor for LogMessage(0LL);
      uint64_t v27 = swift_allocObject( v25,  ((*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL))
            + *(void *)(*(void *)(v26 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v27 + 16) = xmmword_1000EDBE0;
      LogMessage.init(stringLiteral:)(0xD000000000000035LL, 0x80000001000FB290LL);
      Logger.info(_:)(v27, v24, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v27);
      *(_BYTE *)(v21 + v20) = 1;
      uint64_t v28 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v5, 1LL, 1LL, v28);
      uint64_t v29 = swift_allocObject(&unk_100120A58, 24LL, 7LL);
      swift_unknownObjectWeakInit(v29 + 16, v21);
      uint64_t v30 = (void *)swift_allocObject(&unk_100120A80, 48LL, 7LL);
      void v30[2] = 0LL;
      v30[3] = 0LL;
      v30[4] = v29;
      v30[5] = v15;
      uint64_t v31 = sub_1000798B8((uint64_t)v5, (uint64_t)&unk_10013CC80, (uint64_t)v30);
      return swift_release(v31);
    }
  }

  return result;
}

uint64_t sub_10003CC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  v4[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[20] = v7;
  v4[21] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t refreshed = type metadata accessor for ArcadeEntitlementRefreshCondition(0LL);
  v4[22] = refreshed;
  uint64_t v9 = *(void *)(refreshed - 8);
  v4[23] = v9;
  v4[24] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ArcadeState(0LL);
  v4[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[26] = v11;
  v4[27] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003CD4C, 0LL, 0LL);
}

uint64_t sub_10003CD4C()
{
  uint64_t v1 = *(void *)(v0 + 136) + 16LL;
  swift_beginAccess(v1, v0 + 80, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(void *)(v0 + 224) = Strong;
  if (Strong)
  {
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v3 = *(_BYTE **)(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v6 = (void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription);
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    sub_100029EE0(v6, v7);
    *uint64_t v3 = 0;
    (*(void (**)(_BYTE *, void, uint64_t))(v4 + 104))( v3,  enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpired(_:),  v5);
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ArcadeSubscriptionManager.updateStateFromEntitlements(refreshingCache:)[1]);
    *(void *)(v0 + 232) = v9;
    void *v9 = v0;
    v9[1] = sub_10003CE74;
    return dispatch thunk of ArcadeSubscriptionManager.updateStateFromEntitlements(refreshingCache:)( *(void *)(v0 + 216),  *(void *)(v0 + 192),  v7,  v8);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003CE74()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 184LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 192LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 240LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = sub_10003D11C;
  }
  else {
    uint64_t v6 = sub_10003CEF8;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10003CEF8()
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v20 = v5;
  uint64_t v21 = *(_BYTE **)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = sub_10002A768(v7, (uint64_t)qword_10013C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v7);
  uint64_t v9 = sub_100029E18(&qword_10013EA00);
  uint64_t v10 = type metadata accessor for LogMessage(0LL);
  uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
        + *(void *)(*(void *)(v10 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(37LL, 1LL);
  v12._object = (void *)0x80000001000FB310LL;
  v12._countAndFlagsBits = 0xD000000000000025LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  *(void *)(v0 + 72) = v2;
  uint64_t v13 = sub_10002C328((void *)(v0 + 48));
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 16))(v13, v1, v2);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 48);
  sub_10002E92C(v0 + 48, &qword_10013C6F0);
  v14._countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v11, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v11);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v7);
  uint64_t v15 = *(void **)&v21[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock];
  [v15 lock];
  v21[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription] = 0;
  [v15 unlock];
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);

  uint64_t v16 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D11C()
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v21 = v1;
  uint64_t v2 = *(_BYTE **)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v22 = v4;
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = sub_10002A768(v6, (uint64_t)qword_10013C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v6);
  uint64_t v8 = sub_100029E18(&qword_10013EA00);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(52LL, 1LL);
  v11._object = (void *)0x80000001000FB2D0LL;
  v11._countAndFlagsBits = 0xD000000000000034LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue(v1, v0 + 128, v0 + 104);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v13 = *(void *)(v0 + 112);
  *(void *)(v0 + 40) = v13;
  Swift::String v14 = sub_10002C328((void *)(v0 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v15._countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v10, v6, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v3, v6);
  id v16 = *(id *)&v2[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock];
  [v16 lock];
  v2[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription] = 0;
  [v16 unlock];
  swift_errorRelease(v21);

  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v18 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D360()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100029E18(&qword_10013CE40);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription) & 1) == 0)
  {
    if (qword_10013BBA0 != -1) {
      swift_once(&qword_10013BBA0, sub_100039304);
    }
    uint64_t v8 = type metadata accessor for OSLogger(0LL);
    sub_10002A768(v8, (uint64_t)qword_10013C920);
    uint64_t v9 = sub_100029E18(&qword_10013EA00);
    uint64_t v10 = type metadata accessor for LogMessage(0LL);
    uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
          + *(void *)(*(void *)(v10 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_1000EDBE0;
    LogMessage.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001000FB340LL);
    Logger.info(_:)(v11, v8, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v11);
    *(_BYTE *)(v1 + v7) = 1;
    uint64_t v12 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
    uint64_t v13 = swift_allocObject(&unk_100120A58, 24LL, 7LL);
    swift_unknownObjectWeakInit(v13 + 16, v1);
    Swift::String v14 = (void *)swift_allocObject(&unk_100120AA8, 48LL, 7LL);
    v14[2] = 0LL;
    v14[3] = 0LL;
    void v14[4] = v13;
    v14[5] = ObjectType;
    uint64_t v15 = sub_1000798B8((uint64_t)v6, (uint64_t)&unk_10013CC90, (uint64_t)v14);
    return swift_release(v15);
  }

  return result;
}

uint64_t sub_10003D540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  v4[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[20] = v7;
  v4[21] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003D5C0, 0LL, 0LL);
}

uint64_t sub_10003D5C0()
{
  uint64_t v1 = *(void *)(v0 + 136) + 16LL;
  swift_beginAccess(v1, v0 + 80, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(void *)(v0 + 176) = Strong;
  if (Strong)
  {
    sub_100029EE0( (void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers),  *(void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers + 24));
    uint64_t v3 = (void *)swift_task_alloc(dword_10013E2DC);
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10003D670;
    return sub_1000875D0();
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 168));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10003D670(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 184);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10003D8D0;
  }
  else {
    uint64_t v5 = sub_10003D6DC;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10003D6DC()
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = sub_10002A768(v4, (uint64_t)qword_10013C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v7, v4);
  uint64_t v8 = sub_100029E18(&qword_10013EA00);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(48LL, 1LL);
  v11._object = (void *)0x80000001000FB3B0LL;
  v11._countAndFlagsBits = 0xD000000000000030LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  *(void *)(v0 + 72) = sub_100029E18(&qword_10013CC98);
  *(void *)(v0 + 48) = v1;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 48);
  sub_10002E92C(v0 + 48, &qword_10013C6F0);
  v12._countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v10, v4, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  id v13 = *(id *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v13 lock];
  *(_BYTE *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription) = 0;
  [v13 unlock];
  Swift::String v14 = *(void **)(v0 + 176);

  uint64_t v15 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D8D0()
{
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v19 = v4;
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = sub_10002A768(v3, (uint64_t)qword_10013C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v3);
  uint64_t v7 = sub_100029E18(&qword_10013EA00);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(63LL, 1LL);
  v10._object = (void *)0x80000001000FB370LL;
  v10._countAndFlagsBits = 0xD00000000000003FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue(v1, v0 + 128, v0 + 104);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  *(void *)(v0 + 40) = v12;
  id v13 = sub_10002C328((void *)(v0 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v14._countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v9, v3, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v3);
  id v15 = *(id *)(v20 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v15 lock];
  *(_BYTE *)(v20 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription) = 0;
  [v15 unlock];
  swift_errorRelease(v1);
  uint64_t v16 = *(void **)(v0 + 176);

  uint64_t v17 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DB04(uint64_t a1, uint64_t ObjectType)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  v148 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSLogger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v149 = v8;
  uint64_t v150 = v9;
  __chkstk_darwin(v8);
  v147 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for AppOffer(0LL);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  v120 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for State(0LL);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = type metadata accessor for App.Kind(0LL);
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for AdamID(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  v128 = (char *)&v116 - v18;
  uint64_t v132 = type metadata accessor for App(0LL);
  uint64_t v131 = *(void *)(v132 - 8);
  uint64_t v19 = __chkstk_darwin(v132);
  v127 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  v126 = (char *)&v116 - v21;
  uint64_t v151 = a1;
  uint64_t v22 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations, v156, 0LL, 0LL);
  unint64_t v23 = (unint64_t *)((unint64_t)ObjectType >> 62);
  if (!*(void *)(*v22 + 16LL))
  {
    if (v23) {
      goto LABEL_63;
    }
    if (*(void *)((ObjectType & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_4:
      uint64_t v24 = *(void *)(v151 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 24);
      uint64_t v25 = *(void *)(v151 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 32);
      sub_100029EE0((void *)(v151 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager), v24);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
      goto LABEL_5;
    }
  }

  while (1)
  {
LABEL_5:
    if (v23) {
      goto LABEL_56;
    }
    uint64_t v26 = *(void *)((ObjectType & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(ObjectType);
LABEL_7:
    uint64_t v27 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    unint64_t v28 = sub_1000445F4();
    uint64_t v139 = v27;
    uint64_t v29 = Set.init(minimumCapacity:)(v26, v27, v28);
    uint64_t v153 = v29;
    if (v23)
    {
      if (ObjectType < 0) {
        uint64_t v34 = ObjectType;
      }
      else {
        uint64_t v34 = ObjectType & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(ObjectType);
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(ObjectType);
      v144 = v17;
      uint64_t v145 = ObjectType;
      if (!v30)
      {
LABEL_20:
        swift_bridgeObjectRelease(ObjectType);
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v30 = *(void *)((ObjectType & 0xFFFFFFFFFFFFF8LL) + 0x10);
      v144 = v17;
      uint64_t v145 = ObjectType;
      if (!v30) {
        goto LABEL_20;
      }
    }

    if (v30 < 1)
    {
      __break(1u);
LABEL_61:
      swift_once(&qword_10013BBA0, sub_100039304);
LABEL_23:
      uint64_t v36 = v149;
      uint64_t v37 = sub_10002A768(v149, (uint64_t)qword_10013C920);
      uint64_t v38 = v150;
      uint64_t v39 = v147;
      (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v147, v37, v36);
      uint64_t v40 = sub_100029E18(&qword_10013EA00);
      uint64_t v41 = type metadata accessor for LogMessage(0LL);
      uint64_t v3 = (char *)swift_allocObject( v40,  ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL))
                   + *(void *)(*(void *)(v41 - 8) + 72LL),
                     *(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) | 7LL);
      *((_OWORD *)v3 + 1) = *(_OWORD *)(ObjectType + 3040);
      uint64_t v42 = v148;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
      uint64_t ObjectType = 0xD000000000000010LL;
      v43._countAndFlagsBits = 0xD00000000000001ALL;
      v43._object = (void *)0x80000001000FB230LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      uint64_t v154 = sub_100029E18(&qword_10013CC70);
      uint64_t v153 = v145;
      swift_bridgeObjectRetain(v145);
      LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v153);
      sub_10002E92C((uint64_t)&v153, &qword_10013C6F0);
      v44._countAndFlagsBits = 0xD000000000000011LL;
      v44._object = (void *)0x80000001000FB250LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      LogMessage.init(stringInterpolation:)(v42);
      Logger.error(_:)(v3, v36, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v3);
      swift_errorRelease(v17);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v36);
      uint64_t v30 = v143;
      unint64_t v23 = &qword_10013C000;
      if (!v143) {
        return result;
      }
      goto LABEL_26;
    }

    uint64_t v31 = 0LL;
    do
    {
      if ((ObjectType & 0xC000000000000001LL) != 0)
      {
        uint64_t v32 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, ObjectType);
      }

      else
      {
        uint64_t v32 = *(void **)(ObjectType + 8 * v31 + 32);
        swift_unknownObjectRetain(v32);
      }

      ++v31;
      id v33 = [v32 id];
      swift_unknownObjectRelease(v32);
      sub_10006BE0C((Swift::Int *)&v157, v33);
    }

    while (v30 != v31);
    swift_bridgeObjectRelease(ObjectType);
    uint64_t v29 = v153;
LABEL_21:
    uint64_t v35 = sub_100045F9C(v29);
    uint64_t ObjectType = (uint64_t)&unk_1000ED000;
    unint64_t v23 = &qword_10013C000;
    uint64_t v143 = v30;
    uint64_t v17 = v3;
    if (v3)
    {
      swift_bridgeObjectRelease(v29);
      if (qword_10013BBA0 == -1) {
        goto LABEL_23;
      }
      goto LABEL_61;
    }

    uint64_t v3 = (char *)v35;
    swift_bridgeObjectRelease(v29);
    uint64_t v46 = *(void *)(v151 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 24);
    uint64_t v47 = *(void *)(v151 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 32);
    sub_100029EE0((void *)(v151 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController), v46);
    dispatch thunk of AppStateController.preloadState(forApps:)(v3, v46, v47);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if (!v30) {
      return result;
    }
LABEL_26:
    if (v30 >= 1)
    {
      uint64_t v152 = 0LL;
      v140 = (void *)(v151 + v23[296]);
      unint64_t v142 = v145 & 0xC000000000000001LL;
      unsigned int v130 = enum case for App.Kind.store(_:);
      swift_bridgeObjectRetain(v145);
      uint64_t v48 = 0LL;
      __int128 v146 = xmmword_1000EDBE0;
      v138 = (void *)0x80000001000FB270LL;
      unint64_t v124 = (unint64_t)" because we never started";
      v137 = (void *)0x80000001000FB1D0LL;
      unint64_t v123 = (unint64_t)"Failed to convert offer: ";
      v136 = (void *)0x80000001000FB1F0LL;
      v141 = v22;
      uint64_t v17 = v144;
      while (1)
      {
        if (v142)
        {
          uint64_t v3 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v145);
        }

        else
        {
          uint64_t v3 = *(char **)(v145 + 8 * v48 + 32);
          swift_unknownObjectRetain(v3);
        }

        uint64_t ObjectType = swift_getObjectType(v3);
        id v58 = [v3 hash];
        swift_beginAccess(v22, &v153, 32LL, 0LL);
        uint64_t v59 = *v22;
        if (*(void *)(*v22 + 16LL) && (unint64_t v60 = sub_10008D53C((uint64_t)v58), (v61 & 1) != 0))
        {
          unint64_t v23 = *(unint64_t **)(*(void *)(v59 + 56) + 8 * v60);
          swift_endAccess(&v153);
          unint64_t v62 = v23[2];
          BOOL v63 = __OFADD__(v62, 1LL);
          unint64_t v64 = v62 + 1;
          if (v63)
          {
            __break(1u);
LABEL_56:
            if (ObjectType < 0) {
              uint64_t v113 = ObjectType;
            }
            else {
              uint64_t v113 = ObjectType & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(ObjectType);
            uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v113);
            goto LABEL_7;
          }

          v23[2] = v64;
          swift_retain(v23);
          id v65 = [v3 id];
          id v66 = [v65 int64value];
          uint64_t v67 = v128;
          uint64_t v68 = v152;
          AdamID.init(value:)(v66);
          uint64_t v152 = v68;
          if (v68)
          {
            uint64_t v129 = ObjectType;
            uint64_t v70 = v147;
            uint64_t v69 = v148;

            if (qword_10013BBA0 != -1) {
              swift_once(&qword_10013BBA0, sub_100039304);
            }
            uint64_t v71 = v149;
            uint64_t v72 = sub_10002A768(v149, (uint64_t)qword_10013C920);
            (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v70, v72, v71);
            uint64_t v73 = sub_100029E18(&qword_10013EA00);
            uint64_t v74 = type metadata accessor for LogMessage(0LL);
            uint64_t v75 = swift_allocObject( v73,  ((*(unsigned __int8 *)(*(void *)(v74 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v74 - 8) + 80LL))
                  + *(void *)(*(void *)(v74 - 8) + 72LL),
                    *(unsigned __int8 *)(*(void *)(v74 - 8) + 80LL) | 7LL);
            *(_OWORD *)(v75 + 16) = v146;
            LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 1LL);
            v76._countAndFlagsBits = 0xD000000000000019LL;
            v76._object = (void *)(v124 | 0x8000000000000000LL);
            LogMessage.StringInterpolation.appendLiteral(_:)(v76);
            uint64_t v154 = v129;
            uint64_t v153 = (uint64_t)v3;
            swift_unknownObjectRetain(v3);
            LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v153);
            sub_10002E92C((uint64_t)&v153, &qword_10013C6F0);
            v77._object = (void *)(v123 | 0x8000000000000000LL);
            v77._countAndFlagsBits = 0xD000000000000010LL;
            LogMessage.StringInterpolation.appendLiteral(_:)(v77);
            LogMessage.init(stringInterpolation:)(v69);
            Logger.error(_:)(v75, v71, &protocol witness table for OSLogger);
            swift_bridgeObjectRelease(v75);
            swift_errorRelease(v152);
            (*(void (**)(char *, uint64_t))(v150 + 8))(v70, v71);
            swift_unknownObjectRelease(v3);
            swift_release(v23);
            uint64_t v152 = 0LL;
          }

          else
          {
            uint64_t v49 = v133;
            (*(void (**)(char *, void, uint64_t))(v134 + 104))(v133, v130, v135);
            unsigned int v50 = v126;
            App.init(id:kind:)(v67, v49);

            uint64_t v51 = v140;
            uint64_t v52 = v140[3];
            uint64_t v129 = v140[4];
            v125 = sub_100029EE0(v140, v52);
            uint64_t v53 = v120;
            sub_100045AF0();
            uint64_t v54 = (uint64_t)v117;
            AppStateController.state(forApp:applying:)(v50, v53, v52, v129);
            (*(void (**)(char *, uint64_t))(v121 + 8))(v53, v122);
            uint64_t v55 = v51[3];
            uint64_t v56 = v51[4];
            sub_100029EE0(v51, v55);
            char v57 = dispatch thunk of AppStateController.isLoaded.getter(v55, v56);
            sub_100039D60(v3, v54, (v57 & 1) == 0);
            (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v54, v119);
            (*(void (**)(char *, uint64_t))(v131 + 8))(v126, v132);
            swift_unknownObjectRelease(v3);
            swift_release(v23);
          }

          uint64_t v17 = v144;
          uint64_t v22 = v141;
        }

        else
        {
          swift_endAccess(&v153);
          id v78 = [v3 hash];
          uint64_t v79 = type metadata accessor for AppOfferStateClient.Observation();
          uint64_t v80 = swift_allocObject(v79, 32LL, 7LL);
          *(void *)(v80 + 16) = 1LL;
          *(void *)(v80 + 24) = v3;
          swift_beginAccess(v22, &v153, 33LL, 0LL);
          swift_unknownObjectRetain(v3);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
          id v157 = (id)*v22;
          *uint64_t v22 = 0x8000000000000000LL;
          sub_10008FAF0(v80, (uint64_t)v78, isUniquelyReferenced_nonNull_native);
          uint64_t v82 = *v22;
          *uint64_t v22 = v157;
          swift_bridgeObjectRelease(v82);
          swift_endAccess(&v153);
          sub_10003EAB4(v3);
          sub_1000388F0((uint64_t)v140, (uint64_t)&v153);
          uint64_t v84 = v154;
          uint64_t v83 = v155;
          sub_100029EE0(&v153, v154);
          id v85 = [v3 id];
          id v86 = [v85 int64value];
          uint64_t v87 = v152;
          AdamID.init(value:)(v86);
          uint64_t v152 = v87;
          if (v87)
          {
            uint64_t v88 = ObjectType;

            sub_100029F4C(&v153);
            if (qword_10013BBA0 != -1) {
              swift_once(&qword_10013BBA0, sub_100039304);
            }
            uint64_t v89 = v149;
            uint64_t v90 = sub_10002A768(v149, (uint64_t)qword_10013C920);
            uint64_t v91 = v150;
            uint64_t v92 = v147;
            (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v147, v90, v89);
            uint64_t v93 = sub_100029E18(&qword_10013EA00);
            uint64_t v94 = type metadata accessor for LogMessage(0LL);
            uint64_t v95 = swift_allocObject( v93,  ((*(unsigned __int8 *)(*(void *)(v94 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v94 - 8) + 80LL))
                  + *(void *)(*(void *)(v94 - 8) + 72LL),
                    *(unsigned __int8 *)(*(void *)(v94 - 8) + 80LL) | 7LL);
            *(_OWORD *)(v95 + 16) = v146;
            uint64_t v96 = v148;
            LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 1LL);
            v97._countAndFlagsBits = 0xD000000000000019LL;
            v97._object = v137;
            LogMessage.StringInterpolation.appendLiteral(_:)(v97);
            uint64_t v154 = v88;
            uint64_t v153 = (uint64_t)v3;
            swift_unknownObjectRetain(v3);
            LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v153);
            sub_10002E92C((uint64_t)&v153, &qword_10013C6F0);
            v98._countAndFlagsBits = 0xD000000000000010LL;
            v98._object = v136;
            LogMessage.StringInterpolation.appendLiteral(_:)(v98);
            LogMessage.init(stringInterpolation:)(v96);
            Logger.error(_:)(v95, v89, &protocol witness table for OSLogger);
            swift_bridgeObjectRelease(v95);
            swift_errorRelease(v152);
            (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v89);
            uint64_t v152 = 0LL;
            uint64_t v22 = v141;
          }

          else
          {
            uint64_t v99 = v133;
            (*(void (**)(char *, void, uint64_t))(v134 + 104))(v133, v130, v135);
            uint64_t v100 = v127;
            uint64_t v101 = v99;
            uint64_t v22 = v141;
            App.init(id:kind:)(v17, v101);

            dispatch thunk of AppStateController.setPostsChanges(_:forApp:)(1LL, v100, v84, v83);
            (*(void (**)(char *, uint64_t))(v131 + 8))(v100, v132);
            sub_100029F4C(&v153);
          }

          if (qword_10013BBA0 != -1) {
            swift_once(&qword_10013BBA0, sub_100039304);
          }
          uint64_t v102 = v149;
          uint64_t v103 = sub_10002A768(v149, (uint64_t)qword_10013C920);
          uint64_t v104 = v150;
          uint64_t v105 = v147;
          (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v147, v103, v102);
          uint64_t v106 = sub_100029E18(&qword_10013EA00);
          uint64_t v107 = type metadata accessor for LogMessage(0LL);
          uint64_t v108 = swift_allocObject( v106,  ((*(unsigned __int8 *)(*(void *)(v107 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v107 - 8) + 80LL))
                 + *(void *)(*(void *)(v107 - 8) + 72LL),
                   *(unsigned __int8 *)(*(void *)(v107 - 8) + 80LL) | 7LL);
          *(_OWORD *)(v108 + 16) = v146;
          uint64_t v109 = v148;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(31LL, 1LL);
          v110._countAndFlagsBits = 0xD00000000000001FLL;
          v110._object = v138;
          LogMessage.StringInterpolation.appendLiteral(_:)(v110);
          id v111 = [v3 id];
          uint64_t v154 = v139;
          uint64_t v153 = (uint64_t)v111;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v153);
          sub_10002E92C((uint64_t)&v153, &qword_10013C6F0);
          v112._countAndFlagsBits = 0LL;
          v112._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v112);
          LogMessage.init(stringInterpolation:)(v109);
          Logger.info(_:)(v108, v102, &protocol witness table for OSLogger);
          swift_unknownObjectRelease(v3);
          swift_bridgeObjectRelease(v108);
          (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v102);
          uint64_t v17 = v144;
        }

        if (v143 == ++v48) {
          return swift_bridgeObjectRelease(v145);
        }
      }
    }

    __break(1u);
LABEL_63:
    if (ObjectType < 0) {
      uint64_t v114 = ObjectType;
    }
    else {
      uint64_t v114 = ObjectType & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(ObjectType);
    uint64_t v115 = _CocoaArrayWrapper.endIndex.getter(v114);
    swift_bridgeObjectRelease(ObjectType);
    if (v115) {
      goto LABEL_4;
    }
  }

uint64_t sub_10003EAB4(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for OSLogger(0LL);
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  __chkstk_darwin(v3);
  uint64_t v38 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AppOffer(0LL);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for State(0LL);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for App.Kind(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for App(0LL);
  uint64_t v30 = *(void *)(v16 - 8);
  uint64_t v31 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getObjectType(a1);
  id v19 = [a1 id];
  AdamID.init(value:)([v19 int64value]);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for App.Kind.store(_:), v9);
  App.init(id:kind:)(v15, v12);

  uint64_t v20 = (void *)(v41 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  uint64_t v21 = *(void *)(v41 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 24);
  uint64_t v22 = *(void *)(v41 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 32);
  sub_100029EE0((void *)(v41 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController), v21);
  unint64_t v23 = v32;
  sub_100045AF0();
  uint64_t v24 = (uint64_t)v35;
  AppStateController.state(forApp:applying:)(v18, v23, v21, v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v34);
  uint64_t v25 = v20[3];
  uint64_t v26 = v20[4];
  sub_100029EE0(v20, v25);
  char v27 = dispatch thunk of AppStateController.isLoaded.getter(v25, v26);
  sub_100039D60(a1, v24, (v27 & 1) == 0);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v24, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v18, v31);
}

uint64_t sub_10003EF30(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = type metadata accessor for App.Kind(0LL);
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  Swift::String v76 = &v70[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v75 = type metadata accessor for App(0LL);
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v73 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for OSLogger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v72 = a1;
  uint64_t v16 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(v16, v101, 0LL, 0LL);
  uint64_t v79 = *(void *)(*v16 + 16LL);
  uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(a2);
  Swift::String v97 = v16;
  if (v17)
  {
    do
    {
      if (v17 < 1)
      {
        __break(1u);
        return result;
      }

      uint64_t v84 = v7;
      uint64_t v19 = 0LL;
      uint64_t v83 = v72 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController;
      unint64_t v95 = a2 & 0xC000000000000001LL;
      unsigned int v71 = enum case for App.Kind.store(_:);
      __int128 v93 = xmmword_1000EDBE0;
      uint64_t v90 = (void *)0x80000001000FB1B0LL;
      uint64_t v91 = (void *)0x80000001000FB190LL;
      uint64_t v82 = (void *)0x80000001000FB210LL;
      uint64_t v81 = (void *)0x80000001000FB1D0LL;
      uint64_t v80 = (void *)0x80000001000FB1F0LL;
      uint64_t v92 = a2;
      uint64_t v87 = v13;
      uint64_t v88 = v15;
      uint64_t v94 = v17;
      while (1)
      {
        if (v95)
        {
          uint64_t v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a2);
        }

        else
        {
          uint64_t v16 = *(void **)(a2 + 8 * v19 + 32);
          swift_unknownObjectRetain(v16);
        }

        uint64_t ObjectType = swift_getObjectType(v16);
        id v28 = [v16 hash];
        uint64_t v29 = v97;
        swift_beginAccess(v97, v98, 32LL, 0LL);
        uint64_t v7 = (_BYTE *)*v29;
        if (!*((void *)v7 + 2) || (unint64_t v30 = sub_10008D53C((uint64_t)v28), (v31 & 1) == 0))
        {
          swift_endAccess(v98);
          if (qword_10013BBA0 != -1) {
            swift_once(&qword_10013BBA0, sub_100039304);
          }
          uint64_t v20 = sub_10002A768(v12, (uint64_t)qword_10013C920);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v20, v12);
          uint64_t v21 = sub_100029E18(&qword_10013EA00);
          uint64_t v22 = type metadata accessor for LogMessage(0LL);
          uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL))
                + *(void *)(*(void *)(v22 - 8) + 72LL),
                  *(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) | 7LL);
          *(_OWORD *)(v23 + 16) = v93;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(50LL, 1LL);
          v24._countAndFlagsBits = 0xD000000000000019LL;
          v24._object = v91;
          LogMessage.StringInterpolation.appendLiteral(_:)(v24);
          id v25 = [v16 id];
          uint64_t v99 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
          v98[0] = v25;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v98);
          sub_10002E92C((uint64_t)v98, &qword_10013C6F0);
          v26._countAndFlagsBits = 0xD000000000000019LL;
          v26._object = v90;
          LogMessage.StringInterpolation.appendLiteral(_:)(v26);
          LogMessage.init(stringInterpolation:)(v11);
          Logger.error(_:)(v23, v12, &protocol witness table for OSLogger);
          swift_unknownObjectRelease(v16);
          uint64_t v27 = v23;
          goto LABEL_8;
        }

        uint64_t v32 = *(void *)(*((void *)v7 + 7) + 8 * v30);
        swift_endAccess(v98);
        uint64_t v33 = *(void *)(v32 + 16);
        BOOL v34 = __OFSUB__(v33, 1LL);
        uint64_t v35 = v33 - 1;
        if (v34) {
          break;
        }
        *(void *)(v32 + 16) = v35;
        if (v35)
        {
          swift_unknownObjectRelease(v16);
          goto LABEL_9;
        }

        swift_retain(v32);
        id v36 = [v16 hash];
        swift_beginAccess(v97, v98, 33LL, 0LL);
        unint64_t v37 = sub_10008D53C((uint64_t)v36);
        uint64_t v38 = 0LL;
        if ((v39 & 1) != 0)
        {
          unint64_t v40 = v37;
          uint64_t v41 = v97;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v97);
          uint64_t v43 = *v41;
          uint64_t v102 = *v41;
          *uint64_t v41 = 0x8000000000000000LL;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10005D1D4();
            uint64_t v43 = v102;
          }

          uint64_t v38 = *(void *)(*(void *)(v43 + 56) + 8 * v40);
          sub_10005C71C(v40, v43);
          uint64_t v44 = *v41;
          *uint64_t v41 = v43;
          swift_bridgeObjectRelease(v44);
          uint64_t v15 = v88;
        }

        swift_endAccess(v98);
        swift_release(v38);
        sub_1000388F0(v83, (uint64_t)v98);
        uint64_t v45 = v99;
        uint64_t v86 = v100;
        id v85 = sub_100029EE0(v98, v99);
        id v46 = [v16 id];
        id v47 = [v46 int64value];
        uint64_t v48 = v84;
        uint64_t v49 = v89;
        AdamID.init(value:)(v47);
        uint64_t v89 = v49;
        if (v49)
        {

          sub_100029F4C(v98);
          if (qword_10013BBA0 != -1) {
            swift_once(&qword_10013BBA0, sub_100039304);
          }
          uint64_t v50 = sub_10002A768(v12, (uint64_t)qword_10013C920);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v87 + 16))(v15, v50, v12);
          uint64_t v51 = sub_100029E18(&qword_10013EA00);
          uint64_t v52 = type metadata accessor for LogMessage(0LL);
          uint64_t v53 = swift_allocObject( v51,  ((*(unsigned __int8 *)(*(void *)(v52 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v52 - 8) + 80LL))
                + *(void *)(*(void *)(v52 - 8) + 72LL),
                  *(unsigned __int8 *)(*(void *)(v52 - 8) + 80LL) | 7LL);
          *(_OWORD *)(v53 + 16) = v93;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 1LL);
          v54._countAndFlagsBits = 0xD000000000000019LL;
          v54._object = v81;
          LogMessage.StringInterpolation.appendLiteral(_:)(v54);
          uint64_t v99 = ObjectType;
          v98[0] = v16;
          swift_unknownObjectRetain(v16);
          LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v98);
          sub_10002E92C((uint64_t)v98, &qword_10013C6F0);
          v55._countAndFlagsBits = 0xD000000000000010LL;
          v55._object = v80;
          LogMessage.StringInterpolation.appendLiteral(_:)(v55);
          uint64_t v13 = v87;
          LogMessage.init(stringInterpolation:)(v11);
          Logger.error(_:)(v53, v12, &protocol witness table for OSLogger);
          swift_bridgeObjectRelease(v53);
          swift_errorRelease(v89);
          (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
          uint64_t v89 = 0LL;
        }

        else
        {
          uint64_t v56 = *(void (**)(_BYTE *, void, uint64_t))(v77 + 104);
          uint64_t ObjectType = v45;
          char v57 = v76;
          v56(v76, v71, v78);
          id v58 = v73;
          App.init(id:kind:)(v48, v57);

          dispatch thunk of AppStateController.setPostsChanges(_:forApp:)(0LL, v58, ObjectType, v86);
          uint64_t v59 = v58;
          uint64_t v15 = v88;
          (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v59, v75);
          sub_100029F4C(v98);
          uint64_t v13 = v87;
        }

        if (qword_10013BBA0 != -1) {
          swift_once(&qword_10013BBA0, sub_100039304);
        }
        uint64_t v60 = sub_10002A768(v12, (uint64_t)qword_10013C920);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v60, v12);
        uint64_t v61 = sub_100029E18(&qword_10013EA00);
        uint64_t v62 = type metadata accessor for LogMessage(0LL);
        uint64_t v63 = swift_allocObject( v61,  ((*(unsigned __int8 *)(*(void *)(v62 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v62 - 8) + 80LL))
              + *(void *)(*(void *)(v62 - 8) + 72LL),
                *(unsigned __int8 *)(*(void *)(v62 - 8) + 80LL) | 7LL);
        *(_OWORD *)(v63 + 16) = v93;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
        v64._countAndFlagsBits = 0xD00000000000001ELL;
        v64._object = v82;
        LogMessage.StringInterpolation.appendLiteral(_:)(v64);
        id v65 = [v16 id];
        uint64_t v99 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
        v98[0] = v65;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v98);
        sub_10002E92C((uint64_t)v98, &qword_10013C6F0);
        v66._countAndFlagsBits = 0LL;
        v66._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v66);
        LogMessage.init(stringInterpolation:)(v11);
        Logger.info(_:)(v63, v12, &protocol witness table for OSLogger);
        swift_unknownObjectRelease(v16);
        swift_release(v32);
        uint64_t v27 = v63;
        uint64_t v15 = v88;
LABEL_8:
        swift_bridgeObjectRelease(v27);
        (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
        a2 = v92;
LABEL_9:
        if (v94 == ++v19) {
          goto LABEL_35;
        }
      }

      __break(1u);
LABEL_31:
      if (a2 < 0) {
        uint64_t v67 = a2;
      }
      else {
        uint64_t v67 = a2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a2);
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(v67);
      uint64_t v17 = result;
      Swift::String v97 = v16;
    }

    while (result);
  }

LABEL_35:
  uint64_t result = swift_bridgeObjectRelease(a2);
  if (v79)
  {
    if (!*(void *)(*v97 + 16LL))
    {
      uint64_t v68 = *(void *)(v72 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 24);
      uint64_t v69 = *(void *)(v72 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 32);
      sub_100029EE0((void *)(v72 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager), v68);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 16))(v68, v69);
    }
  }

  return result;
}

  swift_release(v12);
  uint64_t v7 = v43;
  uint64_t v41 = 1LL << *(_BYTE *)(v12 + 32);
  if (v41 > 63) {
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v45 = -1LL << v41;
  }
  *(void *)(v12 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v12);
  _BYTE *v7 = v14;
  return result;
}

                sub_100049100(v35, v34, v52);
                swift_beginAccess(v23, v148, 33LL, 0LL);
                id v65 = v28;
                Swift::String v66 = v35;
                uint64_t v67 = v65;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
                v145[0] = *v23;
                *uint64_t v23 = 0x8000000000000000LL;
                sub_10008FDAC(v66, v34, v52, v67, isUniquelyReferenced_nonNull_native);
                uint64_t v69 = *v23;
                *uint64_t v23 = v145[0];

                swift_bridgeObjectRelease(v69);
                swift_endAccess(v148);
                uint64_t v70 = v67;
                sub_10006BE0C((Swift::Int *)v148, v70);

                Swift::String v64 = v148[0];
                goto LABEL_36;
              }
            }

            swift_endAccess(v148);
            goto LABEL_35;
          }
        }

        sub_100029F4C(v148);
        swift_beginAccess(v23, v148, 33LL, 0LL);
        id v36 = *v23;
        swift_bridgeObjectRetain(*v23);
        unint64_t v37 = sub_10008D4F0((uint64_t)v28);
        char v39 = v38;
        swift_bridgeObjectRelease(v36);
        if ((v39 & 1) != 0)
        {
          unint64_t v40 = swift_isUniquelyReferenced_nonNull_native(*v23);
          uint64_t v41 = *v23;
          v145[0] = *v23;
          *uint64_t v23 = 0x8000000000000000LL;
          if (!v40)
          {
            sub_10005D004();
            uint64_t v41 = v145[0];
          }

          uint64_t v42 = *(void *)(v41 + 56) + 24 * v37;
          uint64_t v43 = *(void *)v42;
          uint64_t v44 = *(void *)(v42 + 8);
          uint64_t v45 = *(_BYTE *)(v42 + 16);
          sub_10005C54C(v37, v41);
          id v46 = *v23;
          *uint64_t v23 = v41;
          swift_bridgeObjectRelease(v46);
          swift_endAccess(v148);
          sub_1000484C0(v43, v44, v45);
          id v47 = v28;
          sub_10006BE0C((Swift::Int *)v148, v47);

          Swift::String v24 = v136;
          goto LABEL_37;
        }

        swift_endAccess(v148);

LABEL_12:
        if (v141 == ++v22)
        {
          swift_bridgeObjectRelease(v24);
          v138 = (int64_t)v151;
          a1 = v131;
          a4 = v130;
          uint64_t v13 = (void *)&unk_10013F000;
          goto LABEL_45;
        }
      }
    }
  }

  swift_bridgeObjectRelease(v136);
  v138 = (int64_t)&_swiftEmptySetSingleton;
LABEL_45:
  Swift::String v76 = (void *)((char *)a1 + v13[494]);
  swift_beginAccess(v76, v145, 33LL, 0LL);
  v144 = &_swiftEmptySetSingleton;
  uint64_t v77 = swift_bridgeObjectRetain(*v76);
  sub_100057FC4(v77);
  uint64_t v79 = (Swift::Int)v78;
  if (a4)
  {
    uint64_t v80 = swift_bridgeObjectRetain(a4);
    uint64_t v79 = sub_100096DB0(v80, v79);
    uint64_t v78 = (void *)swift_bridgeObjectRelease(a4);
  }

  *(void *)&v137 = v76;
  if ((v79 & 0xC000000000000001LL) != 0)
  {
    if (v79 < 0) {
      uint64_t v81 = v79;
    }
    else {
      uint64_t v81 = v79 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v82 = __CocoaSet.makeIterator()(v81);
    uint64_t v83 = sub_10005462C();
    uint64_t v84 = sub_100027978( (unint64_t *)&qword_10013F740,  (uint64_t (*)(uint64_t))sub_10005462C,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v78 = Set.Iterator.init(_cocoa:)(v148, v82, v83, v84);
    uint64_t v79 = (Swift::Int)v148[0];
    uint64_t v135 = v148[1];
    uint64_t v86 = (uint64_t)v148[2];
    id v85 = v149;
    uint64_t v87 = v150;
  }

  else
  {
    id v85 = 0LL;
    uint64_t v88 = -1LL << *(_BYTE *)(v79 + 32);
    uint64_t v89 = *(void *)(v79 + 56);
    uint64_t v135 = (void *)(v79 + 56);
    uint64_t v86 = ~v88;
    uint64_t v90 = -v88;
    if (v90 < 64) {
      uint64_t v91 = ~(-1LL << v90);
    }
    else {
      uint64_t v91 = -1LL;
    }
    uint64_t v87 = v91 & v89;
  }

  uint64_t v132 = v79 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v134 = (unint64_t)(v86 + 64) >> 6;
  uint64_t v92 = v138 & 0xC000000000000001LL;
  __int128 v93 = v138 & 0xFFFFFFFFFFFFFF8LL;
  if (v138 < 0) {
    __int128 v93 = v138;
  }
  v136 = v93;
  v133 = (char *)(v138 + 56);
  uint64_t v131 = (char *)&type metadata for Swift.AnyObject + 8;
  unsigned int v130 = v138 & 0xC000000000000001LL;
  while (v79 < 0)
  {
    uint64_t v103 = __CocoaSet.Iterator.next()(v78);
    if (!v103) {
      goto LABEL_98;
    }
    uint64_t v104 = v103;
    unint64_t v142 = v103;
    uint64_t v105 = sub_10005462C();
    swift_unknownObjectRetain(v104);
    swift_dynamicCast(&v143, &v142, v131, v105, 7LL);
    uint64_t v106 = v143;
    swift_unknownObjectRelease(v104);
    uint64_t v102 = v85;
    uint64_t v100 = v87;
    if (!v106) {
      goto LABEL_98;
    }
LABEL_85:
    v140 = (char *)v100;
    v141 = v102;
    if (v92)
    {
      Swift::String v110 = v106;
      id v111 = __CocoaSet.contains(_:)();

      if ((v111 & 1) != 0)
      {

        goto LABEL_61;
      }
    }

    else if (*(void *)(v138 + 16))
    {
      Swift::String v112 = v138;
      uint64_t v113 = NSObject._rawHashValue(seed:)(*(void *)(v138 + 40));
      uint64_t v114 = -1LL << *(_BYTE *)(v112 + 32);
      uint64_t v115 = v113 & ~v114;
      if (((*(void *)&v133[(v115 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v115) & 1) != 0)
      {
        sub_10005462C();
        uint64_t v116 = *(id *)(*(void *)(v138 + 48) + 8 * v115);
        v117 = static NSObject.== infix(_:_:)();

        if ((v117 & 1) != 0)
        {
LABEL_94:

          goto LABEL_61;
        }

        uint64_t v118 = ~v114;
        while (1)
        {
          uint64_t v115 = (v115 + 1) & v118;
          if (((*(void *)&v133[(v115 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v115) & 1) == 0) {
            break;
          }
          uint64_t v119 = *(id *)(*(void *)(v138 + 48) + 8 * v115);
          v120 = static NSObject.== infix(_:_:)();

          if ((v120 & 1) != 0) {
            goto LABEL_94;
          }
        }
      }
    }

    uint64_t v121 = *(void *)v137;
    swift_bridgeObjectRetain(*(void *)v137);
    uint64_t v122 = sub_10008D4F0((uint64_t)v106);
    unint64_t v124 = v123;
    swift_bridgeObjectRelease(v121);
    if ((v124 & 1) != 0)
    {
      v125 = v86;
      v126 = v79;
      v127 = (id *)v137;
      v128 = swift_isUniquelyReferenced_nonNull_native(*(void *)v137);
      uint64_t v129 = *v127;
      uint64_t v143 = *v127;
      char *v127 = (id)0x8000000000000000LL;
      if ((v128 & 1) == 0)
      {
        sub_10005D004();
        uint64_t v129 = v143;
      }

      uint64_t v94 = v129[7] + 24 * v122;
      uint64_t v96 = *(void *)v94;
      unint64_t v95 = *(void *)(v94 + 8);
      Swift::String v97 = *(_BYTE *)(v94 + 16);
      sub_10005C54C(v122, (uint64_t)v129);
      Swift::String v98 = *v127;
      char *v127 = v129;
      swift_bridgeObjectRelease(v98);
      sub_1000484C0(v96, v95, v97);
      uint64_t v79 = v126;
      uint64_t v86 = v125;
      uint64_t v92 = v130;
    }

    uint64_t v99 = v106;
    sub_10006BE0C((Swift::Int *)&v143, v99);

    sub_10006BE0C((Swift::Int *)&v143, v99);
LABEL_61:
    uint64_t v87 = (unint64_t)v140;
    id v85 = v141;
  }

  if (v87)
  {
    uint64_t v100 = (v87 - 1) & v87;
    uint64_t v101 = __clz(__rbit64(v87)) | (v85 << 6);
    uint64_t v102 = v85;
LABEL_84:
    uint64_t v106 = *(id *)(*(void *)(v79 + 48) + 8 * v101);
    if (!v106) {
      goto LABEL_98;
    }
    goto LABEL_85;
  }

  uint64_t v107 = v85 + 1;
  if (!__OFADD__(v85, 1LL))
  {
    if (v107 >= v134) {
      goto LABEL_98;
    }
    uint64_t v108 = v135[v107];
    uint64_t v102 = v85 + 1;
    if (!v108)
    {
      uint64_t v102 = v85 + 2;
      if (v85 + 2 >= v134) {
        goto LABEL_98;
      }
      uint64_t v108 = v135[v102];
      if (!v108)
      {
        uint64_t v102 = v85 + 3;
        if (v85 + 3 >= v134) {
          goto LABEL_98;
        }
        uint64_t v108 = v135[v102];
        if (!v108)
        {
          uint64_t v102 = v85 + 4;
          if (v85 + 4 >= v134) {
            goto LABEL_98;
          }
          uint64_t v108 = v135[v102];
          if (!v108)
          {
            uint64_t v102 = v85 + 5;
            if (v85 + 5 >= v134) {
              goto LABEL_98;
            }
            uint64_t v108 = v135[v102];
            if (!v108)
            {
              uint64_t v109 = v85 + 6;
              while (v134 != v109)
              {
                uint64_t v108 = v135[v109++];
                if (v108)
                {
                  uint64_t v102 = v109 - 1;
                  goto LABEL_83;
                }
              }

uint64_t sub_10003F930(char *a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t))
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = sub_100029E18(&qword_10013C410);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v8);
  uint64_t v10 = *(void **)&a1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock];
  uint64_t v11 = a1;
  [v10 lock];
  a4(v11, v9, ObjectType);
  [v10 unlock];

  return swift_bridgeObjectRelease(v9);
}

void sub_10003F9E0(void *a1, void *a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v6 = v5;
  char v57 = a4;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v12 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void **)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v15 lock];
  id v16 = [a1 hash];
  uint64_t v17 = (uint64_t *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess(v17, &v64, 32LL, 0LL);
  uint64_t v18 = *v17;
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_10008D53C((uint64_t)v16), (v20 & 1) != 0))
  {
    uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
    swift_retain(v21);
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  swift_endAccess(&v64);
  swift_release(v21);
  [v15 unlock];
  if (v21)
  {
    sub_100029170((uint64_t)a1, (uint64_t)&v61);
    if (v62)
    {
      sub_10002C438(&v61, (uint64_t)&v64);
      uint64_t v22 = *(void *)(v6 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph);
      uint64_t v23 = v6 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions;
      sub_1000388F0(v6 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController, (uint64_t)&v61);
      sub_1000388F0(v23, (uint64_t)v59);
      sub_1000388F0((uint64_t)&v64, (uint64_t)v58);
      Swift::String v24 = (void *)swift_allocObject(&unk_100120968, 176LL, 7LL);
      v24[2] = v22;
      v24[3] = a1;
      sub_10002C438(&v61, (uint64_t)(v24 + 4));
      sub_10002C438(v59, (uint64_t)(v24 + 9));
      v24[14] = a2;
      v24[15] = a3;
      sub_10002C438(v58, (uint64_t)(v24 + 16));
      v24[21] = ObjectType;
      sub_100029E18(&qword_10013CBE0);
      swift_retain(v22);
      swift_unknownObjectRetain(a1);
      id v25 = a2;
      uint64_t v26 = Promise.__allocating_init()(a3);
      uint64_t v27 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v14, 1LL, 1LL, v27);
      id v28 = (void *)swift_allocObject(&unk_100120990, 56LL, 7LL);
      v28[2] = 0LL;
      v28[3] = 0LL;
      void v28[4] = &unk_10013CBD8;
      v28[5] = v24;
      v28[6] = v26;
      swift_retain(v26);
      uint64_t v29 = sub_1000B3448((uint64_t)v14, (uint64_t)&unk_10013CBE8, (uint64_t)v28);
      swift_release(v29);
      uint64_t v30 = swift_allocObject(&unk_1001209B8, 49LL, 7LL);
      char v31 = v57;
      *(void *)(v30 + 16) = v57;
      *(void *)(v30 + 24) = a5;
      *(void *)(v30 + 32) = "performAction(of:with:in:withReplyHandler:)";
      *(void *)(v30 + 40) = 43LL;
      *(_BYTE *)(v30 + 48) = 2;
      uint64_t v32 = swift_allocObject(&unk_1001209E0, 49LL, 7LL);
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = a5;
      *(void *)(v32 + 32) = "performAction(of:with:in:withReplyHandler:)";
      *(void *)(v32 + 40) = 43LL;
      *(_BYTE *)(v32 + 48) = 2;
      uint64_t v33 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v34 = swift_retain_n(a5, 2LL);
      uint64_t v35 = static OS_dispatch_queue.main.getter(v34);
      uint64_t v62 = v33;
      uint64_t v63 = &protocol witness table for OS_dispatch_queue;
      *(void *)&__int128 v61 = v35;
      Promise.then(perform:orCatchError:on:)(sub_1000442A4, v30, sub_1000442B4, v32, &v61);
      swift_release(v30);
      swift_release(v32);
      sub_100029F4C(&v61);
      swift_release(v26);
      sub_100029F4C(&v64);
      return;
    }

    sub_10002E92C((uint64_t)&v61, (uint64_t *)&unk_10013CBC0);
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v42 = v41;
    *(void *)&__int128 v61 = 2LL;
    uint64_t v43 = sub_100029E18(&qword_10013F670);
    uint64_t inited = swift_initStackObject(v43, v60);
    *(_OWORD *)(inited + 16) = xmmword_1000EDBE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v45;
    id v64 = 0LL;
    unint64_t v65 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    unint64_t v46 = v65;
    uint64_t v47 = swift_getObjectType(a1);
    uint64_t v48 = (void *)_typeName(_:qualified:)(v47, 0LL);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease(v46);
    id v64 = v48;
    unint64_t v65 = v50;
    v51._object = (void *)0x80000001000FB070LL;
    v51._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v51);
    id v52 = v64;
    unint64_t v53 = v65;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v52;
    *(void *)(inited + 56) = v53;
    unint64_t v54 = sub_100044F60(inited);
    uint64_t v55 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
    _BridgedStoredNSError.init(_:userInfo:)(&v64, &v61, v54, v42, v55);
    id v56 = v64;
    id v40 = v64;
    v57(v56);
  }

  else
  {
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v37 = v36;
    *(void *)&__int128 v61 = 0LL;
    unint64_t v38 = sub_100043C24((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v39 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
    _BridgedStoredNSError.init(_:userInfo:)(&v64, &v61, v38, v37, v39);
    id v40 = v64;
    v57(v64);
  }
}

uint64_t sub_10003FF10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[75] = a8;
  v8[74] = a7;
  v8[73] = a6;
  v8[72] = a5;
  v8[71] = a4;
  v8[70] = a3;
  v8[69] = a2;
  uint64_t v9 = sub_100029E18(&qword_10013CE40);
  v8[76] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ActionOutcome(0LL);
  v8[77] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[78] = v11;
  v8[79] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100029E18(&qword_10013C6C8);
  v8[80] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[81] = v13;
  v8[82] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = ((uint64_t (*)(void))type metadata accessor for MetricsFieldsContext)(0LL);
  v8[83] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[84] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[85] = swift_task_alloc(v16);
  v8[86] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v8[87] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for OSLogger(0LL);
  v8[88] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v8[89] = v19;
  v8[90] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for AppOffer(0LL);
  v8[91] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v8[92] = v21;
  v8[93] = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for State(0LL);
  v8[94] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v8[95] = v23;
  v8[96] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for App.Kind(0LL);
  v8[97] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v8[98] = v25;
  v8[99] = swift_task_alloc((*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for AdamID(0LL);
  v8[100] = swift_task_alloc((*(void *)(*(void *)(v26 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for App(0LL);
  v8[101] = v27;
  uint64_t v28 = *(void *)(v27 - 8);
  v8[102] = v28;
  v8[103] = swift_task_alloc((*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100029E18(&qword_10013CBA0);
  v8[104] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v8[105] = v30;
  uint64_t v31 = *(void *)(v30 + 64);
  v8[106] = v31;
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v8[107] = swift_task_alloc(v32);
  v8[108] = swift_task_alloc(v32);
  return swift_task_switch(sub_100040158, 0LL, 0LL);
}

uint64_t sub_100040158()
{
  uint64_t v1 = *(void **)(v0 + 864);
  uint64_t v2 = *(void *)(v0 + 832);
  uint64_t v3 = *(void **)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = type metadata accessor for ObjectGraph(0LL);
  inject<A, B>(_:from:)(v1, v2, v4, v2, v5);
  swift_getObjectType(v3);
  id v6 = [v3 id];
  AdamID.init(value:)([v6 int64value]);
  uint64_t v7 = *(void *)(v0 + 824);
  uint64_t v8 = *(void *)(v0 + 800);
  uint64_t v9 = *(void *)(v0 + 792);
  uint64_t v118 = *(char **)(v0 + 768);
  uint64_t v10 = *(void *)(v0 + 744);
  uint64_t v122 = *(void *)(v0 + 736);
  uint64_t v125 = *(void *)(v0 + 728);
  uint64_t v11 = *(void **)(v0 + 576);
  uint64_t v12 = *(void **)(v0 + 568);
  uint64_t v114 = *(void **)(v0 + 560);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 784) + 104LL))( v9,  enum case for App.Kind.store(_:),  *(void *)(v0 + 776));
  App.init(id:kind:)(v8, v9);

  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  sub_100029EE0(v12, v13);
  sub_100045AF0();
  AppStateController.state(forApp:applying:)(v7, v10, v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v10, v125);
  uint64_t v16 = v11[3];
  uint64_t v15 = v11[4];
  sub_100029EE0(v11, v16);
  if ((sub_1000D7CA4(v114, v118, v16, v15) & 1) != 0)
  {
    if (qword_10013BBA0 != -1) {
      swift_once(&qword_10013BBA0, sub_100039304);
    }
    uint64_t v17 = *(void *)(v0 + 720);
    uint64_t v18 = *(void *)(v0 + 712);
    uint64_t v19 = *(void *)(v0 + 704);
    uint64_t v20 = *(void *)(v0 + 696);
    uint64_t v21 = *(void **)(v0 + 584);
    uint64_t v22 = *(void **)(v0 + 560);
    uint64_t v105 = v22;
    uint64_t v107 = *(void **)(v0 + 592);
    uint64_t v23 = sub_10002A768(v19, (uint64_t)qword_10013C920);
    *(void *)(v0 + 872) = v23;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    *(void *)(v0 + 880) = v24;
    v24(v17, v23, v19);
    uint64_t v25 = sub_100029E18(&qword_10013EA00);
    *(void *)(v0 + 888) = v25;
    uint64_t v26 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v27 = *(void *)(v26 + 72);
    *(void *)(v0 + 896) = v27;
    LODWORD(v26) = *(_DWORD *)(v26 + 80);
    *(_DWORD *)(v0 + 952) = v26;
    uint64_t v28 = swift_allocObject( v25,  ((v26 + 32LL) & ~(unint64_t)v26) + v27,  v26 | 7LL);
    *(_OWORD *)(v28 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 1LL);
    v29._countAndFlagsBits = 0xD00000000000001BLL;
    v29._object = (void *)0x80000001000FB150LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    id v30 = [v22 id];
    uint64_t v31 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    *(void *)(v0 + 904) = v31;
    *(void *)(v0 + 312) = v31;
    *(void *)(v0 + 288) = v30;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 288);
    sub_10002E92C(v0 + 288, &qword_10013C6F0);
    v32._countAndFlagsBits = 0LL;
    v32._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v20);
    Logger.info(_:)(v28, v19, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v28);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    *(void *)(v0 + 912) = v33;
    v33(v17, v19);
    uint64_t v34 = sub_100029E18((uint64_t *)&unk_10013CC00);
    uint64_t v35 = type metadata accessor for Dependency(0LL);
    uint64_t v36 = swift_allocObject( v34,  ((*(unsigned __int8 *)(*(void *)(v35 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v35 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v35 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v35 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v36 + 16) = xmmword_1000EDA10;
    uint64_t v37 = sub_10002A030(0LL, (unint64_t *)&qword_10013FD90, off_10011E548);
    *(void *)(v0 + 536) = v21;
    id v38 = v21;
    uint64_t v109 = v37;
    Dependency.init<A>(satisfying:with:)(v37, v0 + 536, v37);
    uint64_t v39 = sub_10002A030(0LL, &qword_10013CC10, off_10011E560);
    *(void *)(v0 + 520) = v107;
    id v40 = v107;
    Dependency.init<A>(satisfying:with:)(v39, v0 + 520, v39);
    *(void *)(v0 + 504) = v36;
    uint64_t v41 = sub_100029E18(&qword_10013CC18);
    uint64_t v42 = sub_100044410( (unint64_t *)&unk_10013CC20,  &qword_10013CC18,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v119 = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)(v0 + 504, v41, v42);
    *(void *)(v0 + 920) = v119;
    uint64_t v43 = swift_bridgeObjectRelease(v36);
    MetricsFieldsContext.init()(v43);
    *(void *)(v0 + 480) = v105;
    if (qword_10013BBA8 != -1) {
      swift_once(&qword_10013BBA8, sub_10004911C);
    }
    uint64_t v44 = *(void **)(v0 + 584);
    uint64_t v45 = sub_100029E18(qword_10013CD50);
    uint64_t v46 = sub_10002A768(v45, (uint64_t)qword_100148518);
    uint64_t v47 = sub_100029E18(&qword_10013C410);
    MetricsFieldsContext.addValue<A>(_:forProperty:)(v0 + 480, v46, v47);
    *(void *)(v0 + 456) = v44;
    uint64_t v48 = qword_10013BB90;
    id v49 = v44;
    if (v48 != -1) {
      swift_once(&qword_10013BB90, sub_10002A650);
    }
    uint64_t v115 = *(void *)(v0 + 832);
    uint64_t v50 = *(void *)(v0 + 688);
    uint64_t v51 = *(void *)(v0 + 680);
    uint64_t v52 = *(void *)(v0 + 672);
    uint64_t v53 = *(void *)(v0 + 664);
    uint64_t v54 = *(void *)(v0 + 656);
    uint64_t v55 = *(void *)(v0 + 648);
    uint64_t v56 = *(void *)(v0 + 640);
    uint64_t v57 = *(void *)(v0 + 600);
    id v58 = *(void **)(v0 + 584);
    uint64_t v59 = sub_100029E18((uint64_t *)&unk_10013F9D0);
    uint64_t v60 = sub_10002A768(v59, (uint64_t)qword_1001484E8);
    MetricsFieldsContext.addValue<A>(_:forProperty:)(v0 + 456, v60, v109);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v50, v51, v53);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v54, v50, v53);
    (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))( v54,  enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:),  v56);
    *(void *)(v0 + 928) = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v57, v54, v119, v115);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    uint64_t v61 = sub_100029E18((uint64_t *)&unk_10013CC30);
    uint64_t v62 = sub_100044410( (unint64_t *)&qword_10013C6C0,  (uint64_t *)&unk_10013CC30,  (uint64_t)&protocol conformance descriptor for Promise<A>);
    uint64_t v63 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    *(void *)(v0 + 936) = v63;
    *uint64_t v63 = v0;
    v63[1] = sub_100040C8C;
    return dispatch thunk of Future.then()(*(void *)(v0 + 632), v61, v62);
  }

  else
  {
    if (qword_10013BBA0 != -1) {
      swift_once(&qword_10013BBA0, sub_100039304);
    }
    uint64_t v104 = *(void *)(v0 + 856);
    uint64_t v106 = *(void *)(v0 + 864);
    uint64_t v108 = *(void *)(v0 + 848);
    uint64_t v102 = *(void *)(v0 + 840);
    uint64_t v103 = *(void *)(v0 + 832);
    uint64_t v123 = *(void *)(v0 + 824);
    uint64_t v116 = *(void *)(v0 + 816);
    uint64_t v120 = *(void *)(v0 + 808);
    uint64_t v110 = *(void *)(v0 + 760);
    uint64_t v111 = *(void *)(v0 + 752);
    uint64_t v112 = *(void *)(v0 + 768);
    uint64_t v65 = *(void *)(v0 + 720);
    uint64_t v66 = *(void *)(v0 + 712);
    uint64_t v67 = *(void *)(v0 + 704);
    uint64_t v68 = *(void *)(v0 + 696);
    uint64_t v101 = *(void *)(v0 + 608);
    uint64_t v69 = *(void **)(v0 + 560);
    uint64_t v126 = *(void *)(v0 + 552);
    uint64_t v70 = sub_10002A768(v67, (uint64_t)qword_10013C920);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v70, v67);
    uint64_t v71 = sub_100029E18(&qword_10013EA00);
    uint64_t v72 = type metadata accessor for LogMessage(0LL);
    uint64_t v73 = swift_allocObject( v71,  ((*(unsigned __int8 *)(*(void *)(v72 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v72 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v72 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v72 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v73 + 16) = xmmword_1000EDA10;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(34LL, 1LL);
    v74._object = (void *)0x80000001000FB0C0LL;
    v74._countAndFlagsBits = 0xD000000000000022LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v74);
    id v75 = [v69 id];
    *(void *)(v0 + 344) = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    *(void *)(v0 + 320) = v75;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 320);
    sub_10002E92C(v0 + 320, &qword_10013C6F0);
    v76._countAndFlagsBits = 0LL;
    v76._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v76);
    LogMessage.init(stringInterpolation:)(v68);
    LogMessage.init(stringLiteral:)(0xD00000000000002BLL, 0x80000001000FB0F0LL);
    Logger.error(_:)(v73, v67, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v73);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v78 = v77;
    *(void *)(v0 + 464) = 4LL;
    uint64_t v79 = sub_100029E18(&qword_10013F670);
    uint64_t inited = swift_initStackObject(v79, v0 + 144);
    *(_OWORD *)(inited + 16) = xmmword_1000EDBE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v81;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000022LL;
    *(void *)(inited + 56) = 0x80000001000FB120LL;
    unint64_t v82 = sub_100044F60(inited);
    uint64_t v83 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 472), v0 + 464, v82, v78, v83);
    uint64_t v84 = *(void **)(v0 + 472);
    uint64_t v85 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56LL))(v101, 1LL, 1LL, v85);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v104, v106, v103);
    uint64_t v86 = *(unsigned __int8 *)(v102 + 80);
    uint64_t v87 = (v86 + 40) & ~v86;
    unint64_t v88 = (v108 + v87 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v89 = (char *)swift_allocObject(&unk_100120A08, v88 + 8, v86 | 7);
    *((void *)v89 + 2) = 0LL;
    *((void *)v89 + 3) = 0LL;
    *((void *)v89 + 4) = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(&v89[v87], v104, v103);
    *(void *)&v89[v88] = v126;
    v84;
    swift_retain(v126);
    uint64_t v90 = sub_100079A04(v101, (uint64_t)&unk_10013CBF8, (uint64_t)v89);
    uint64_t v91 = swift_release(v90);
    swift_willThrow(v91);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v112, v111);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v123, v120);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v106, v103);
    uint64_t v92 = *(void *)(v0 + 856);
    uint64_t v93 = *(void *)(v0 + 824);
    uint64_t v94 = *(void *)(v0 + 800);
    uint64_t v95 = *(void *)(v0 + 792);
    uint64_t v96 = *(void *)(v0 + 768);
    uint64_t v97 = *(void *)(v0 + 744);
    uint64_t v98 = *(void *)(v0 + 720);
    uint64_t v99 = *(void *)(v0 + 696);
    uint64_t v100 = *(void *)(v0 + 688);
    uint64_t v113 = *(void *)(v0 + 680);
    uint64_t v117 = *(void *)(v0 + 656);
    uint64_t v121 = *(void *)(v0 + 632);
    uint64_t v124 = *(void *)(v0 + 608);
    swift_task_dealloc(*(void *)(v0 + 864));
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v113);
    swift_task_dealloc(v117);
    swift_task_dealloc(v121);
    swift_task_dealloc(v124);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100040C8C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 936LL);
  *(void *)(*(void *)v1 + 944LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[116];
  if (v0)
  {
    swift_release(v2[116]);
    uint64_t v5 = sub_100041000;
  }

  else
  {
    (*(void (**)(void, void))(v2[78] + 8LL))(v2[79], v2[77]);
    swift_release(v4);
    uint64_t v5 = sub_100040D20;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100040D20()
{
  uint64_t v21 = *(void *)(v0 + 920);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  uint64_t v14 = *(void *)(v0 + 904);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 952);
  uint64_t v2 = *(void *)(v0 + 888);
  uint64_t v28 = *(void *)(v0 + 864);
  uint64_t v29 = *(void *)(v0 + 856);
  uint64_t v26 = *(void *)(v0 + 840);
  uint64_t v27 = *(void *)(v0 + 832);
  uint64_t v25 = *(void *)(v0 + 824);
  uint64_t v23 = *(void *)(v0 + 816);
  uint64_t v24 = *(void *)(v0 + 808);
  uint64_t v30 = *(void *)(v0 + 800);
  uint64_t v31 = *(void *)(v0 + 792);
  uint64_t v20 = *(void *)(v0 + 768);
  uint64_t v18 = *(void *)(v0 + 760);
  uint64_t v19 = *(void *)(v0 + 752);
  uint64_t v32 = *(void *)(v0 + 744);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v4 = *(void *)(v0 + 704);
  uint64_t v5 = *(void *)(v0 + 696);
  uint64_t v17 = *(void *)(v0 + 688);
  uint64_t v35 = *(void *)(v0 + 680);
  uint64_t v15 = *(void *)(v0 + 672);
  uint64_t v16 = *(void *)(v0 + 664);
  uint64_t v6 = ((v1 + 32) & ~v1) + *(void *)(v0 + 896);
  uint64_t v7 = v1 | 7;
  uint64_t v33 = *(void *)(v0 + 656);
  uint64_t v34 = *(void *)(v0 + 632);
  uint64_t v36 = *(void *)(v0 + 608);
  uint64_t v8 = *(void **)(v0 + 560);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 880))(v3, *(void *)(v0 + 872), v4);
  uint64_t v9 = swift_allocObject(v2, v6, v7);
  *(_OWORD *)(v9 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
  v10._object = (void *)0x80000001000FB170LL;
  v10._countAndFlagsBits = 0xD000000000000014LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  id v11 = [v8 id];
  *(void *)(v0 + 280) = v14;
  *(void *)(v0 + 256) = v11;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 256);
  sub_10002E92C(v0 + 256, &qword_10013C6F0);
  v12._countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.info(_:)(v9, v4, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  swift_release(v21);
  v22(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v25);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v20);
  swift_task_dealloc(v32);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v17);
  swift_task_dealloc(v35);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041000()
{
  uint64_t v48 = *(void *)(v0 + 944);
  uint64_t v61 = *(void *)(v0 + 920);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  uint64_t v47 = *(void *)(v0 + 904);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 952);
  uint64_t v2 = *(void *)(v0 + 888);
  uint64_t v69 = *(void *)(v0 + 864);
  uint64_t v52 = *(void *)(v0 + 856);
  uint64_t v54 = *(void *)(v0 + 848);
  uint64_t v51 = *(void *)(v0 + 840);
  uint64_t v67 = *(void *)(v0 + 832);
  uint64_t v65 = *(void *)(v0 + 824);
  uint64_t v62 = *(void *)(v0 + 816);
  uint64_t v63 = *(void *)(v0 + 808);
  uint64_t v60 = *(void *)(v0 + 768);
  uint64_t v3 = ((v1 + 32) & ~v1) + *(void *)(v0 + 896);
  uint64_t v4 = v1 | 7;
  uint64_t v58 = *(void *)(v0 + 760);
  uint64_t v59 = *(void *)(v0 + 752);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 704);
  uint64_t v7 = *(void *)(v0 + 696);
  uint64_t v55 = *(void *)(v0 + 672);
  uint64_t v56 = *(void *)(v0 + 664);
  uint64_t v57 = *(void *)(v0 + 688);
  uint64_t v49 = *(void *)(v0 + 608);
  uint64_t v8 = *(void **)(v0 + 560);
  uint64_t v53 = *(void *)(v0 + 552);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 880))(v5, *(void *)(v0 + 872), v6);
  uint64_t v9 = swift_allocObject(v2, v3, v4);
  *(_OWORD *)(v9 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(44LL, 2LL);
  v10._object = (void *)0x80000001000FB0C0LL;
  v10._countAndFlagsBits = 0xD000000000000022LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  id v11 = [v8 id];
  *(void *)(v0 + 376) = v47;
  *(void *)(v0 + 352) = v11;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 352);
  sub_10002E92C(v0 + 352, &qword_10013C6F0);
  v12._countAndFlagsBits = 0x6E6F73616572202CLL;
  v12._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue(v48, v0 + 544, v0 + 408);
  uint64_t v14 = *(void *)(v0 + 408);
  uint64_t v13 = *(void *)(v0 + 416);
  *(void *)(v0 + 248) = v13;
  uint64_t v15 = sub_10002C328((void *)(v0 + 224));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v15, v14, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 224);
  sub_10002E92C(v0 + 224, &qword_10013C6F0);
  v16._countAndFlagsBits = 0LL;
  v16._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)(v7);
  Logger.error(_:)(v9, v6, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  v50(v5, v6);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v49, 1LL, 1LL, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v52, v69, v67);
  uint64_t v18 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v19 = (v18 + 40) & ~v18;
  unint64_t v20 = (v54 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (char *)swift_allocObject(&unk_100120A30, v20 + 8, v18 | 7);
  *((void *)v21 + 2) = 0LL;
  *((void *)v21 + 3) = 0LL;
  *((void *)v21 + 4) = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(&v21[v19], v52, v67);
  *(void *)&v21[v20] = v53;
  swift_retain(v53);
  swift_errorRetain(v48);
  uint64_t v22 = sub_100079A04(v49, (uint64_t)&unk_10013CC48, (uint64_t)v21);
  swift_release(v22);
  type metadata accessor for ASCAppOfferActionError(0LL);
  uint64_t v24 = v23;
  *(void *)(v0 + 496) = 3LL;
  uint64_t v25 = sub_100029E18(&qword_10013F670);
  uint64_t inited = swift_initStackObject(v25, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_1000EDA10;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  *(void *)(inited + 40) = v27;
  swift_getErrorValue(v48, v0 + 512, v0 + 432);
  uint64_t v28 = *(void *)(v0 + 432);
  uint64_t v29 = *(void *)(v0 + 440);
  *(void *)(inited + 72) = v29;
  uint64_t v30 = sub_10002C328((void *)(inited + 48));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v30, v28, v29);
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 88) = v31;
  swift_getErrorValue(v48, v0 + 528, v0 + 384);
  uint64_t v32 = Error.localizedDescription.getter(*(void *)(v0 + 392), *(void *)(v0 + 400));
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v32;
  *(void *)(inited + 104) = v33;
  unint64_t v34 = sub_100044F60(inited);
  uint64_t v35 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
  uint64_t v36 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 488), v0 + 496, v34, v24, v35);
  swift_willThrow(v36);
  swift_release(v61);
  swift_errorRelease(v48);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v65, v63);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v69, v67);
  uint64_t v37 = *(void *)(v0 + 856);
  uint64_t v38 = *(void *)(v0 + 824);
  uint64_t v39 = *(void *)(v0 + 800);
  uint64_t v40 = *(void *)(v0 + 792);
  uint64_t v41 = *(void *)(v0 + 768);
  uint64_t v42 = *(void *)(v0 + 744);
  uint64_t v43 = *(void *)(v0 + 720);
  uint64_t v44 = *(void *)(v0 + 696);
  uint64_t v45 = *(void *)(v0 + 688);
  uint64_t v64 = *(void *)(v0 + 680);
  uint64_t v66 = *(void *)(v0 + 656);
  uint64_t v68 = *(void *)(v0 + 632);
  uint64_t v70 = *(void *)(v0 + 608);
  swift_task_dealloc(*(void *)(v0 + 864));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004158C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint8_t v6[8] = a5;
  void v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = sub_100029E18(&qword_10013C6C8);
  v6[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ActionOutcome(0LL);
  v6[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[14] = v10;
  v6[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PresentErrorAction(0LL);
  v6[16] = v11;
  v6[17] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100041640, 0LL, 0LL);
}

uint64_t sub_100041640(uint64_t a1)
{
  uint64_t v3 = v1[16];
  uint64_t v2 = v1[17];
  uint64_t v5 = v1[11];
  uint64_t v4 = v1[12];
  uint64_t v6 = v1[10];
  uint64_t v7 = (void *)v1[7];
  static ActionMetrics.notInstrumented.getter(a1);
  *(void *)(v2 + *(int *)(v3 + 20)) = v7;
  v1[5] = v3;
  v1[6] = sub_100027978(&qword_10013CC50, type metadata accessor for PresentErrorAction, (uint64_t)&unk_1000F1150);
  uint64_t v8 = sub_10002C328(v1 + 2);
  sub_100038AC0(v2, (uint64_t)v8, type metadata accessor for PresentErrorAction);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v6);
  uint64_t v9 = async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1];
  id v10 = v7;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  v1[18] = v11;
  uint64_t v12 = sub_100029E18(&qword_10013CBA0);
  void *v11 = v1;
  v11[1] = sub_10004174C;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v1[15], v1 + 2, v1[12], v1[9], v12);
}

uint64_t sub_10004174C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    uint64_t v7 = sub_1000447AC;
  }

  else
  {
    (*(void (**)(void, void))(v2[14] + 8LL))(v2[15], v2[13]);
    sub_100029F4C(v2 + 2);
    uint64_t v7 = sub_100044798;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_1000417F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint8_t v6[8] = a5;
  void v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = sub_100029E18(&qword_10013C6C8);
  v6[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ActionOutcome(0LL);
  v6[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[14] = v10;
  v6[15] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PresentErrorAction(0LL);
  v6[16] = v11;
  v6[17] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000418A8, 0LL, 0LL);
}

uint64_t sub_1000418A8(uint64_t a1)
{
  uint64_t v3 = v1[16];
  uint64_t v2 = v1[17];
  uint64_t v5 = v1[11];
  uint64_t v4 = v1[12];
  uint64_t v6 = v1[10];
  uint64_t v7 = v1[7];
  static ActionMetrics.notInstrumented.getter(a1);
  *(void *)(v2 + *(int *)(v3 + 20)) = v7;
  v1[5] = v3;
  v1[6] = sub_100027978(&qword_10013CC50, type metadata accessor for PresentErrorAction, (uint64_t)&unk_1000F1150);
  uint64_t v8 = sub_10002C328(v1 + 2);
  sub_100038AC0(v2, (uint64_t)v8, type metadata accessor for PresentErrorAction);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v6);
  swift_errorRetain(v7);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
  v1[18] = v9;
  uint64_t v10 = sub_100029E18(&qword_10013CBA0);
  void *v9 = v1;
  v9[1] = sub_1000419B4;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v1[15], v1 + 2, v1[12], v1[9], v10);
}

uint64_t sub_1000419B4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 152LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    uint64_t v7 = sub_100041AC4;
  }

  else
  {
    (*(void (**)(void, void))(v2[14] + 8LL))(v2[15], v2[13]);
    sub_100029F4C(v2 + 2);
    uint64_t v7 = sub_100041A5C;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_100041A5C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  sub_100038B04(v1, type metadata accessor for PresentErrorAction);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041AC4()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  sub_100038B04(v1, type metadata accessor for PresentErrorAction);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041BEC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v6 = sub_100029E18(&qword_10013C6C8);
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for WatchReinstallAction(0LL);
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OSLogger(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100029E18(&qword_10013CBA0);
  uint64_t v52 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v20 = (uint64_t *)((char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph);
  uint64_t v22 = type metadata accessor for ObjectGraph(0LL);
  uint64_t v51 = v20;
  uint64_t v48 = v21;
  inject<A, B>(_:from:)(v20, v18, v21, v18, v22);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v23 = sub_10002A768(v14, (uint64_t)qword_10013C920);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v23, v14);
  uint64_t v24 = sub_100029E18(&qword_10013EA00);
  uint64_t v25 = type metadata accessor for LogMessage(0LL);
  uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
        + *(void *)(*(void *)(v25 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v26 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
  v27._object = (void *)0x80000001000FB010LL;
  v27._countAndFlagsBits = 0xD000000000000015LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  uint64_t v58 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  v57[0] = a1;
  id v28 = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
  sub_10002E92C((uint64_t)v57, &qword_10013C6F0);
  v29._countAndFlagsBits = 0LL;
  v29._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  LogMessage.init(stringInterpolation:)(v13);
  Logger.info(_:)(v26, v14, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v26);
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v31 = (uint64_t)v56;
  static ActionMetrics.notInstrumented.getter(v30);
  uint64_t v32 = v31 + *(int *)(v9 + 20);
  *(void *)uint64_t v32 = v28;
  *(void *)(v32 + 8) = 0LL;
  *(_BYTE *)(v32 + 16) = 0;
  uint64_t v58 = v9;
  uint64_t v59 = (void *)sub_100027978( (unint64_t *)&qword_10013CBA8,  type metadata accessor for WatchReinstallAction,  (uint64_t)&unk_1000F1A00);
  uint64_t v33 = sub_10002C328(v57);
  sub_100038AC0(v31, (uint64_t)v33, type metadata accessor for WatchReinstallAction);
  uint64_t v35 = v49;
  uint64_t v34 = v50;
  (*(void (**)(char *, void, uint64_t))(v49 + 104))( v8,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v50);
  id v36 = v28;
  uint64_t v37 = v51;
  uint64_t v38 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v57, v8, v48, v18);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v34);
  sub_100029F4C(v57);
  uint64_t v39 = (void *)swift_allocObject(&unk_1001208F0, 48LL, 7LL);
  uint64_t v40 = v54;
  uint64_t v41 = v55;
  v39[2] = v36;
  v39[3] = v40;
  uint64_t v42 = ObjectType;
  v39[4] = v41;
  v39[5] = v42;
  uint64_t v43 = (void *)swift_allocObject(&unk_100120918, 48LL, 7LL);
  v43[2] = v36;
  v43[3] = v40;
  v43[4] = v41;
  v43[5] = v42;
  uint64_t v44 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v45 = v36;
  swift_retain_n(v41, 2LL);
  uint64_t v46 = static OS_dispatch_queue.main.getter(v45);
  uint64_t v58 = v44;
  uint64_t v59 = &protocol witness table for OS_dispatch_queue;
  v57[0] = v46;
  Promise.then(perform:orCatchError:on:)(sub_100044074, v39, sub_1000440B0, v43, v57);
  swift_release(v38);
  swift_release(v39);
  swift_release(v43);
  sub_100029F4C(v57);
  sub_100038B04(v31, type metadata accessor for WatchReinstallAction);
  return (*(uint64_t (**)(void *, uint64_t))(v52 + 8))(v37, v18);
}

uint64_t sub_1000420A0(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSLogger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v12 = sub_10002A768(v8, (uint64_t)qword_10013C920);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = sub_100029E18(&qword_10013EA00);
  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
  v16._object = (void *)0x80000001000FB050LL;
  v16._countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  void v20[3] = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  v20[0] = a2;
  id v17 = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v20);
  sub_10002E92C((uint64_t)v20, &qword_10013C6F0);
  v18._countAndFlagsBits = 0LL;
  v18._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  LogMessage.init(stringInterpolation:)(v7);
  Logger.info(_:)(v15, v8, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a3(0LL);
}

uint64_t sub_1000422B0(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSLogger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v13 = sub_10002A768(v9, (uint64_t)qword_10013C920);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = sub_100029E18(&qword_10013EA00);
  uint64_t v15 = type metadata accessor for LogMessage(0LL);
  uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
        + *(void *)(*(void *)(v15 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(38LL, 2LL);
  v17._object = (void *)0x80000001000FB030LL;
  v17._countAndFlagsBits = 0xD00000000000001CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v31 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  v30[0] = a2;
  id v18 = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
  sub_10002E92C((uint64_t)v30, &qword_10013C6F0);
  v19._countAndFlagsBits = 0x6E6F73616572202CLL;
  v19._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  swift_getErrorValue(a1, v29, &v27);
  uint64_t v21 = v27;
  uint64_t v20 = v28;
  uint64_t v31 = v28;
  uint64_t v22 = sub_10002C328(v30);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v22, v21, v20);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
  sub_10002E92C((uint64_t)v30, &qword_10013C6F0);
  v23._countAndFlagsBits = 0LL;
  v23._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  LogMessage.init(stringInterpolation:)(v8);
  Logger.info(_:)(v16, v9, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v26(a1);
}

uint64_t sub_1000425A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v59 = a4;
  uint64_t v56 = a1;
  uint64_t v57 = a3;
  uint64_t v52 = a2;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v6 = sub_100029E18(&qword_10013C6C8);
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for WatchReinstallAction(0LL);
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OSLogger(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  Swift::String v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100029E18(&qword_10013CBA0);
  uint64_t v54 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph);
  uint64_t v22 = type metadata accessor for ObjectGraph(0LL);
  uint64_t v53 = v20;
  uint64_t v49 = v21;
  uint64_t v60 = v18;
  inject<A, B>(_:from:)(v20, v18, v21, v18, v22);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v23 = sub_10002A768(v14, (uint64_t)qword_10013C920);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v23, v14);
  uint64_t v24 = sub_100029E18(&qword_10013EA00);
  uint64_t v25 = type metadata accessor for LogMessage(0LL);
  uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
        + *(void *)(*(void *)(v25 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v26 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
  v27._object = (void *)0x80000001000FAF90LL;
  v27._countAndFlagsBits = 0xD00000000000001CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  uint64_t v62 = &type metadata for String;
  uint64_t v28 = v56;
  uint64_t v29 = v52;
  v61[0] = v56;
  v61[1] = v52;
  swift_bridgeObjectRetain(v52);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v61);
  sub_10002E92C((uint64_t)v61, &qword_10013C6F0);
  v30._countAndFlagsBits = 0LL;
  v30._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  LogMessage.init(stringInterpolation:)(v13);
  Logger.info(_:)(v26, v14, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v26);
  uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v32 = (uint64_t)v58;
  static ActionMetrics.notInstrumented.getter(v31);
  uint64_t v33 = v32 + *(int *)(v9 + 20);
  *(void *)uint64_t v33 = v28;
  *(void *)(v33 + 8) = v29;
  *(_BYTE *)(v33 + 16) = 1;
  uint64_t v62 = (void *)v9;
  uint64_t v63 = (void *)sub_100027978( (unint64_t *)&qword_10013CBA8,  type metadata accessor for WatchReinstallAction,  (uint64_t)&unk_1000F1A00);
  uint64_t v34 = sub_10002C328(v61);
  sub_100038AC0(v32, (uint64_t)v34, type metadata accessor for WatchReinstallAction);
  uint64_t v36 = v50;
  uint64_t v35 = v51;
  (*(void (**)(char *, void, uint64_t))(v50 + 104))( v8,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v51);
  swift_bridgeObjectRetain(v29);
  uint64_t v37 = v53;
  uint64_t v38 = ActionDispatcher.perform(_:withMetrics:asPartOf:)(v61, v8, v49, v60);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v35);
  sub_100029F4C(v61);
  uint64_t v39 = (void *)swift_allocObject(&unk_100120878, 56LL, 7LL);
  v39[2] = v28;
  v39[3] = v29;
  uint64_t v40 = v57;
  uint64_t v41 = v59;
  v39[4] = v57;
  v39[5] = v41;
  uint64_t v42 = ObjectType;
  v39[6] = ObjectType;
  uint64_t v43 = (void *)swift_allocObject(&unk_1001208A0, 56LL, 7LL);
  v43[2] = v28;
  v43[3] = v29;
  v43[4] = v40;
  v43[5] = v41;
  v43[6] = v42;
  uint64_t v44 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  swift_bridgeObjectRetain_n(v29, 2LL);
  uint64_t v45 = swift_retain_n(v41, 2LL);
  uint64_t v46 = static OS_dispatch_queue.main.getter(v45);
  uint64_t v62 = (void *)v44;
  uint64_t v63 = &protocol witness table for OS_dispatch_queue;
  v61[0] = v46;
  Promise.then(perform:orCatchError:on:)(sub_100044020, v39, sub_100044060, v43, v61);
  swift_release(v38);
  swift_release(v39);
  swift_release(v43);
  sub_100029F4C(v61);
  sub_100038B04(v32, type metadata accessor for WatchReinstallAction);
  return (*(uint64_t (**)(void *, uint64_t))(v54 + 8))(v37, v60);
}

uint64_t sub_100042A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSLogger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v14 = sub_10002A768(v10, (uint64_t)qword_10013C920);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  uint64_t v15 = sub_100029E18(&qword_10013EA00);
  uint64_t v16 = type metadata accessor for LogMessage(0LL);
  uint64_t v17 = swift_allocObject( v15,  ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL))
        + *(void *)(*(void *)(v16 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(36LL, 1LL);
  v18._object = (void *)0x80000001000FAFE0LL;
  v18._countAndFlagsBits = 0xD000000000000024LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  v21[3] = &type metadata for String;
  v21[0] = a2;
  v21[1] = a3;
  swift_bridgeObjectRetain(a3);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v21);
  sub_10002E92C((uint64_t)v21, &qword_10013C6F0);
  v19._countAndFlagsBits = 0LL;
  v19._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)(v9);
  Logger.info(_:)(v17, v10, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return a4(0LL);
}

uint64_t sub_100042C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v26 = a5;
  Swift::String v27 = a4;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OSLogger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v15 = sub_10002A768(v11, (uint64_t)qword_10013C920);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  uint64_t v16 = sub_100029E18(&qword_10013EA00);
  uint64_t v17 = type metadata accessor for LogMessage(0LL);
  uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL))
        + *(void *)(*(void *)(v17 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(45LL, 2LL);
  v19._object = (void *)0x80000001000FAFB0LL;
  v19._countAndFlagsBits = 0xD000000000000023LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  uint64_t v32 = &type metadata for String;
  v31[0] = a2;
  v31[1] = a3;
  swift_bridgeObjectRetain(a3);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
  sub_10002E92C((uint64_t)v31, &qword_10013C6F0);
  v20._countAndFlagsBits = 0x6E6F73616572202CLL;
  v20._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  swift_getErrorValue(a1, v30, &v28);
  uint64_t v22 = v28;
  uint64_t v21 = v29;
  uint64_t v32 = v29;
  uint64_t v23 = sub_10002C328(v31);
  (*(void (**)(void *, uint64_t, void *))(*(v21 - 1) + 16LL))(v23, v22, v21);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
  sub_10002E92C((uint64_t)v31, &qword_10013C6F0);
  v24._countAndFlagsBits = 0LL;
  v24._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  LogMessage.init(stringInterpolation:)(v10);
  Logger.info(_:)(v18, v11, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v27(a1);
}

uint64_t sub_100043034(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v11 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100029E18(&qword_10013CB70);
  BaseObjectGraph.inject<A>(_:)(v23, v14, v14);
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v13, 1LL, 1LL, v15);
  sub_1000388F0((uint64_t)v23, (uint64_t)v22);
  uint64_t v16 = (void *)swift_allocObject(&unk_100120828, 120LL, 7LL);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = a1;
  v16[5] = v5;
  sub_10002C438(v22, (uint64_t)(v16 + 6));
  v16[11] = a2;
  v16[12] = a3;
  v16[13] = a4;
  v16[14] = ObjectType;
  id v17 = a1;
  id v18 = v5;
  id v19 = a2;
  swift_retain(a4);
  uint64_t v20 = sub_1000798B8((uint64_t)v13, (uint64_t)&unk_10013CB80, (uint64_t)v16);
  swift_release(v20);
  return sub_100029F4C(v23);
}

uint64_t sub_100043180( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a8;
  uint8_t v8[16] = v22;
  v8[13] = a6;
  v8[14] = a7;
  v8[11] = a4;
  v8[12] = a5;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v8[17] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSLogger(0LL);
  v8[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[19] = v11;
  v8[20] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AppOffer(0LL);
  v8[21] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[22] = v13;
  v8[23] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for State(0LL);
  v8[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[25] = v15;
  v8[26] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for App.Kind(0LL);
  v8[27] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[28] = v17;
  v8[29] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for AdamID(0LL);
  v8[30] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for App(0LL);
  v8[31] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v8[32] = v20;
  v8[33] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000432CC, 0LL, 0LL);
}

uint64_t sub_1000432CC()
{
  id v1 = [*(id *)(v0 + 88) id];
  AdamID.init(value:)([v1 int64value]);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 168);
  uint64_t v7 = *(void **)(v0 + 104);
  uint64_t v20 = *(void **)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 224) + 104LL))( v4,  enum case for App.Kind.store(_:),  *(void *)(v0 + 216));
  App.init(id:kind:)(v3, v4);

  uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 24);
  uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 32);
  sub_100029EE0((void *)(v8 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController), v10);
  sub_100039090();
  AppStateController.state(forApp:applying:)(v2, v6, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v6, v19);
  uint64_t v12 = sub_100029EE0(v7, v7[3]);
  id v13 = [objc_allocWithZone((Class)ASCOfferContext) init];
  *(void *)(v0 + 272) = sub_1000AF228(v9, v5, v20, (uint64_t)v13, *v12);

  uint64_t v14 = sub_100029E18(&qword_10013C908);
  uint64_t v15 = sub_100044410( (unint64_t *)&qword_10013CB90,  &qword_10013C908,  (uint64_t)&protocol conformance descriptor for Promise<A>);
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  *(void *)(v0 + 280) = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1000436D0;
  return dispatch thunk of Future.then()(v0 + 80, v14, v15);
}

uint64_t sub_1000436D0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 288LL) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[34]);
  if (v0)
  {
    uint64_t v4 = sub_100043834;
  }

  else
  {
    v2[37] = v2[10];
    uint64_t v4 = sub_100043744;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100043744()
{
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void (**)(uint64_t))(v0 + 120);
  uint64_t v7 = sub_10004E8C0();
  uint64_t v9 = v8;
  v6(v7);
  swift_bridgeObjectRelease(v9);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v17);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043834()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  (*(void (**)(void, void))(*(void *)(v0 + 200) + 8LL))(*(void *)(v0 + 208), *(void *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 288);
  if (qword_10013BBA0 != -1) {
    swift_once(&qword_10013BBA0, sub_100039304);
  }
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v25 = v5;
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v26 = *(void (**)(void, void, uint64_t))(v0 + 120);
  uint64_t v9 = sub_10002A768(v8, (uint64_t)qword_10013C920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v9, v8);
  uint64_t v10 = sub_100029E18(&qword_10013EA00);
  uint64_t v11 = type metadata accessor for LogMessage(0LL);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
        + *(void *)(*(void *)(v11 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(39LL, 1LL);
  v13._object = (void *)0x80000001000FAF60LL;
  v13._countAndFlagsBits = 0xD000000000000027LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  swift_getErrorValue(v4, v0 + 72, v0 + 48);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v15 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v15;
  uint64_t v16 = sub_10002C328((void *)(v0 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v16, v14, v15);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v17._countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)(v7);
  Logger.error(_:)(v12, v8, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v12);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v6, v8);
  swift_errorRetain(v4);
  v26(0LL, 0LL, v4);
  swift_errorRelease(v4);
  swift_errorRelease(v4);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 208);
  uint64_t v21 = *(void *)(v0 + 184);
  uint64_t v22 = *(void *)(v0 + 160);
  uint64_t v23 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100043B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0LL;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  NSString v6 = String._bridgeToObjectiveC()();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

uint64_t type metadata accessor for AppOfferStateClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd19AppOfferStateClient);
}

uint64_t type metadata accessor for AppOfferStateClient.Observation()
{
  return objc_opt_self(&OBJC_CLASS____TtCC19appstorecomponentsd19AppOfferStateClientP33_C3344D69C4521B4ACA82248310E985E011Observation);
}

unint64_t sub_100043C24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CC58);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10004459C(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100043D4C(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1000445E4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100043D4C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_100043DB0(a1, a2, v4);
}

unint64_t sub_100043DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_100043EF4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100043F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100043F20()
{
  sub_100029F4C((void *)(v0 + 48));
  swift_release(*(void *)(v0 + 104));
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_100043F6C(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v11 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[11];
  uint64_t v8 = v1[12];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013CB7C);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100039088;
  return sub_100043180(a1, v11, v4, v5, v6, (uint64_t)(v1 + 6), v7, v8);
}

void sub_100044014(uint64_t a1)
{
}

uint64_t sub_100044020(uint64_t a1)
{
  return sub_100042A6C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void))(v1 + 32));
}

uint64_t sub_100044034()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100044060(uint64_t a1)
{
  return sub_100042C74( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(uint64_t (**)(uint64_t))(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_100044074(uint64_t a1)
{
  return sub_1000420A0(a1, *(void **)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_100044084()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000440B0(uint64_t a1)
{
  return sub_1000422B0(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000440BC()
{
  sub_100029F4C((void *)(v0 + 128));
  return swift_deallocObject(v0, 176LL, 7LL);
}

uint64_t sub_100044110(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[14];
  uint64_t v7 = v1[15];
  uint64_t v8 = (void *)swift_task_alloc(dword_10013CBD4);
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10002A858;
  return sub_10003FF10(a1, v4, v5, (uint64_t)(v1 + 4), (uint64_t)(v1 + 9), v6, v7, (uint64_t)(v1 + 16));
}

uint64_t sub_1000441B8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000441EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013F364);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100039088;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_10013F360
                                                                                     + dword_10013F360))( a1,  v4,  v5,  v6,  v7,  v8);
}

uint64_t sub_100044280()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_1000442A4(uint64_t a1)
{
  return sub_1000DE6D0( a1,  *(void (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_BYTE *)(v1 + 48));
}

uint64_t sub_1000442B4(uint64_t a1)
{
  return sub_1000D2ADC( a1,  *(void (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_1000442C4()
{
  uint64_t v1 = sub_100029E18(&qword_10013CBA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100044360(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100029E18(&qword_10013CBA0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v11 = (void *)swift_task_alloc(dword_10013CBF4);
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100039088;
  return sub_10004158C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100044410(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100029F6C(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100044450()
{
  uint64_t v1 = sub_100029E18(&qword_10013CBA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_errorRelease(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000444EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100029E18(&qword_10013CBA0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v11 = (void *)swift_task_alloc(dword_10013CC44);
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100039088;
  return sub_1000417F4(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10004459C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013CC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1000445E4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1000445F4()
{
  unint64_t result = qword_10013F740;
  if (!qword_10013F740)
  {
    uint64_t v1 = sub_10002A030(255LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10013F740);
  }

  return result;
}

uint64_t sub_10004464C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100044674(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10013CC7C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100039088;
  return sub_10003CC7C(a1, v4, v5, v6);
}

uint64_t sub_1000446F0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004471C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10013CC8C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002A858;
  return sub_10003D540(a1, v4, v5, v6);
}

uint64_t sub_1000447B0(char *a1, char *a2)
{
  return sub_1000487D0(*a1, *a2);
}

Swift::Int sub_1000447BC()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1) {
    uint64_t v2 = 0x736567617373656DLL;
  }
  else {
    uint64_t v2 = 7368801LL;
  }
  if (v1) {
    unint64_t v3 = 0xE800000000000000LL;
  }
  else {
    unint64_t v3 = 0xE300000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100044834(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x736567617373656DLL;
  }
  else {
    uint64_t v2 = 7368801LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE800000000000000LL;
  }
  else {
    unint64_t v3 = 0xE300000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100044888()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1) {
    uint64_t v2 = 0x736567617373656DLL;
  }
  else {
    uint64_t v2 = 7368801LL;
  }
  if (v1) {
    unint64_t v3 = 0xE800000000000000LL;
  }
  else {
    unint64_t v3 = 0xE300000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000448FC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F810, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100044958(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7368801LL;
  if (*v1) {
    uint64_t v2 = 0x736567617373656DLL;
  }
  unint64_t v3 = 0xE300000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for AppOpenableDestination(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for AppOpenableDestination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100044A6C + 4 * byte_1000EE055[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100044AA0 + 4 * byte_1000EE050[v4]))();
}

uint64_t sub_100044AA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044AA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100044AB0LL);
  }
  return result;
}

uint64_t sub_100044ABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100044AC4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100044AC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044AD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100044ADC(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AppOpenableDestination()
{
  return &type metadata for AppOpenableDestination;
}

unint64_t sub_100044AFC()
{
  unint64_t result = qword_10013CCA0;
  if (!qword_10013CCA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE0F0, &type metadata for AppOpenableDestination);
    atomic_store(result, (unint64_t *)&qword_10013CCA0);
  }

  return result;
}

BOOL sub_100044B40(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100044B58()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100044B9C()
{
}

uint64_t storeEnumTagSinglePayload for AppPurchaseType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100044C10 + 4 * byte_1000EE125[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100044C44 + 4 * byte_1000EE120[v4]))();
}

uint64_t sub_100044C44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044C4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100044C54LL);
  }
  return result;
}

uint64_t sub_100044C60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100044C68LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100044C6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100044C74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppPurchaseType()
{
  return &type metadata for AppPurchaseType;
}

unint64_t sub_100044C94()
{
  unint64_t result = qword_10013CCA8;
  if (!qword_10013CCA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE184, &type metadata for AppPurchaseType);
    atomic_store(result, (unint64_t *)&qword_10013CCA8);
  }

  return result;
}

Swift::Int sub_100044CD8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100044D18(void *a1)
{
  if (([a1 isBetaApp] & 1) == 0
    && (![a1 isFamilyShared]
     || ([a1 isOpenable] & 1) != 0
     || ([a1 isUpdateAvailable] & 1) != 0
     || (id v4 = [a1 progress], v4, v4))
    && (([a1 isInstalled] & 1) != 0
     || (id v5 = [a1 progress], v5, v5)))
  {
    id v6 = [a1 progress];
    if (v6)
    {
      BOOL v7 = v6;
      if ([v6 isIndeterminate])
      {

        return 0LL;
      }

      else
      {
        [v7 fractionCompleted];
        uint64_t v11 = v10;

        return v11;
      }
    }

    else if (([a1 isUpdateAvailable] & 1) != 0 {
           && (id v8 = [a1 updateBuyParams]) != 0)
    }
    {
      uint64_t v9 = v8;
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    }

    else if ([a1 hasMessagesExtension] {
           && [a1 isLaunchProhibited])
    }
    {
      [a1 storeExternalVersionID];

      return 1LL;
    }

    else if ([a1 isLaunchProhibited])
    {

      return 1LL;
    }

    else
    {
      [a1 storeExternalVersionID];

      return 0LL;
    }
  }

  else
  {

    return 0LL;
  }

  return v2;
}

unint64_t sub_100044F60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CC58);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000320E4(v7, (uint64_t)&v16, (uint64_t *)&unk_10013CC60);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10008D45C(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1000445E4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100045094(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CD28);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_10008D45C(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000451B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CD18);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000320E4(v7, (uint64_t)v16, &qword_10013CD20);
    unint64_t result = sub_10008D4C0((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_1000445E4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000452F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = _swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v18 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v18);
    return (unint64_t)v4;
  }

  sub_100029E18(&qword_10013CD30);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000320E4(v6, (uint64_t)&v19, &qword_10013CD38);
    uint64_t v7 = v19;
    uint64_t v8 = v20;
    unint64_t result = sub_10008D45C(v19, v20);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    __int128 v11 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    uint64_t v12 = v4[7] + 40 * result;
    __int128 v13 = v21;
    __int128 v14 = v22;
    *(void *)(v12 + 32) = v23;
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_12;
    }
    v4[2] = v17;
    v6 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v18 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10004543C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CCB8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 1);
    uint64_t v8 = *v6;
    id v9 = (id)*(v6 - 2);
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_10008D56C(v9);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v9;
    uint64_t v12 = (void *)(v4[7] + 16 * result);
    void *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100045550(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CCD8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000320E4(v7, (uint64_t)&v14, &qword_10013CCE0);
    uint64_t v8 = v14;
    unint64_t result = sub_10008D56C(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = sub_10002C438(&v15, v4[7] + 40 * result);
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100045680(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CCF0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v17 = v1;
  uint64_t v6 = (uint64_t *)(v1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    id v10 = (id)*(v6 - 3);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_10008D4F0((uint64_t)v10);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v10;
    uint64_t v13 = (void *)(v4[7] + 24 * result);
    void *v13 = v7;
    v13[1] = v8;
    v13[2] = v9;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 4;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v1 = v17;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000457AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100029E18(&qword_10013CCE8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (char *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    char v9 = *v6;
    id v10 = *((id *)v6 - 3);
    sub_100048494(v7, v8, v9);
    unint64_t result = sub_10008D4F0((uint64_t)v10);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v10;
    uint64_t v13 = v4[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v6 += 32;
    v4[2] = v16;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1000458E4(uint64_t a1)
{
  uint64_t v28 = type metadata accessor for AdamID(0LL);
  uint64_t v3 = *(void *)(v28 - 8);
  uint64_t v4 = __chkstk_darwin(v28);
  Swift::String v27 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v26 = (char *)v24 - v6;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v7)
  {
    v24[1] = v1;
    uint64_t v29 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    unint64_t result = (void *)sub_10005D980(a1);
    uint64_t v9 = (uint64_t)result;
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    uint64_t v25 = a1 + 56;
    while ((v9 & 0x8000000000000000LL) == 0 && v9 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v11) {
        goto LABEL_12;
      }
      uint64_t v14 = v26;
      uint64_t v15 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))( v26,  *(void *)(a1 + 48) + *(void *)(v3 + 72) * v9,  v28);
      uint64_t v16 = v27;
      uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v27, v14, v15);
      id v18 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:AdamID.int64Value.getter(v17)];
      uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v16, v15);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      uint64_t v20 = v29[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
      uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
      specialized ContiguousArray._endMutation()(v21);
      unint64_t result = (void *)sub_10005DA24(v9, v11, v13 & 1, a1);
      uint64_t v9 = (uint64_t)result;
      uint64_t v11 = v22;
      char v13 = v23 & 1;
      if (!--v7)
      {
        sub_10002EB7C((uint64_t)result, v22, v23 & 1);
        return v29;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

void sub_100045AF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppOffer.Flags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v35 - v10;
  __chkstk_darwin(v9);
  char v13 = (char *)&v35 - v12;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v15 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (!v15) {
    uint64_t v0 = 0LL;
  }
  if (!v0) {
    goto LABEL_11;
  }
  uint64_t v17 = swift_getObjectType(v0);
  uint64_t v36 = v8;
  id v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
  swift_unknownObjectRetain(v1);
  uint64_t v19 = v17;
  uint64_t v20 = v11;
  uint64_t v21 = v18(v19, v16);
  uint64_t v8 = v36;
  uint64_t v22 = (void *)v21;
  swift_unknownObjectRelease(v1);
  if (v22)
  {
    unsigned __int16 v23 = (unsigned __int16)[v22 flags];
    uint64_t v24 = static AppOffer.Flags.none.getter();
    if ((v23 & 0x200) != 0)
    {
      uint64_t v25 = (uint64_t)v35;
      static AppOffer.Flags.dsidLess.getter(v24);
      sub_100045D68(v8, v25);
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v26(v25, v2);
      v26((uint64_t)v8, v2);
    }

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v13, v20, v2);
    id v27 = [v22 baseBuyParams];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    id v31 = [v22 metricsBuyParams];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v34 = v33;

    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)(v13, 0LL, 1LL, v28, v30, v32, v34);
  }

  else
  {
LABEL_11:
    static AppOffer.Flags.none.getter();
    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)( v8,  0LL,  1LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL);
  }

uint64_t sub_100045D68(char *a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v4 = sub_100029E18(&qword_10013CD00);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for AppOffer.Flags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  char v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v2;
  v16(v13, v2, v9);
  uint64_t v17 = sub_100027978( &qword_10013CCB0,  (uint64_t (*)(uint64_t))&type metadata accessor for AppOffer.Flags,  (uint64_t)&protocol conformance descriptor for AppOffer.Flags);
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9, v17);
  uint64_t v18 = sub_100027978( &qword_10013CD08,  (uint64_t (*)(uint64_t))&type metadata accessor for AppOffer.Flags,  (uint64_t)&protocol conformance descriptor for AppOffer.Flags);
  uint64_t v26 = a2;
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v18) ^ 1;
  uint64_t v29 = v4;
  uint64_t v20 = &v8[*(int *)(v4 + 48)];
  _BYTE *v8 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v22 = v26;
    v16(v20, v26, v9);
    v16(v13, v22, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v17);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }

  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v20, v15, v9);
  }

  unsigned __int16 v23 = &v28[*(int *)(v29 + 48)];
  v21(v23, v20, v9);
  v21(v30, v23, v9);
  return v19 & 1;
}

uint64_t sub_100045F9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v50 = type metadata accessor for App.Kind(0LL);
  uint64_t v4 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v51 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for App(0LL);
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v53 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v11 = __CocoaSet.count.getter(v10);
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
  }

  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v59 = _swiftEmptyArrayStorage;
    sub_100090160(0LL, v11 & ~(v11 >> 63), 0);
    if (v53)
    {
      if (a1 < 0) {
        uint64_t v13 = a1;
      }
      else {
        uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t result = __CocoaSet.startIndex.getter(v13);
      unsigned __int8 v16 = 1;
    }

    else
    {
      uint64_t result = sub_100047F60(a1);
      unsigned __int8 v16 = v17 & 1;
    }

    uint64_t v56 = result;
    uint64_t v57 = v15;
    unsigned __int8 v58 = v16;
    if (v11 < 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      return result;
    }

    unsigned int v47 = enum case for App.Kind.store(_:);
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    uint64_t v44 = v4;
    uint64_t v45 = v18;
    do
    {
      while (1)
      {
        uint64_t v29 = v56;
        uint64_t v28 = v57;
        uint64_t v30 = v58;
        sub_100047CF8(v56, v57, v58, a1);
        uint64_t v32 = v31;
        id v33 = [v31 int64value];
        uint64_t v34 = v52;
        AdamID.init(value:)(v33);
        if (v2)
        {

          sub_10002EB7C(v29, v28, v30);
          swift_release(v59);
          return v30;
        }

        uint64_t v35 = v51;
        (*(void (**)(char *, void, uint64_t))(v4 + 104))(v51, v47, v50);
        App.init(id:kind:)(v34, v35);

        uint64_t v36 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
        {
          sub_100090160(0LL, v36[2] + 1LL, 1);
          uint64_t v36 = v59;
        }

        unint64_t v38 = v36[2];
        unint64_t v37 = v36[3];
        if (v38 >= v37 >> 1)
        {
          sub_100090160(v37 > 1, v38 + 1, 1);
          uint64_t v36 = v59;
        }

        void v36[2] = v38 + 1;
        uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))( (unint64_t)v36 + ((*(unsigned __int8 *)(v48 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
                 + *(void *)(v48 + 72) * v38,
                   v54,
                   v49);
        uint64_t v59 = v36;
        if (v53) {
          break;
        }
        uint64_t v19 = v56;
        uint64_t v20 = v57;
        char v21 = v58;
        uint64_t v22 = sub_10005DA24(v56, v57, v58, a1);
        uint64_t v23 = a1;
        uint64_t v25 = v24;
        uint64_t v46 = 0LL;
        char v27 = v26;
        sub_10002EB7C(v19, v20, v21);
        uint64_t v56 = v22;
        uint64_t v57 = v25;
        a1 = v23;
        uint64_t v4 = v44;
        uint64_t v2 = v46;
        unsigned __int8 v58 = v27 & 1;
        if (!--v11) {
          goto LABEL_32;
        }
      }

      if ((v58 & 1) == 0) {
        goto LABEL_36;
      }
      uint64_t v39 = __CocoaSet.Index.handleBitPattern.getter(v56, v57);
      if (v39) {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
      }
      else {
        uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      }
      uint64_t v41 = sub_100029E18(&qword_10013C728);
      uint64_t v42 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v55, v41);
      __CocoaSet.formIndex(after:isUnique:)(v43, isUniquelyReferenced_nonNull_native, v45);
      v42(v55, 0LL);
      --v11;
    }

    while (v11);
LABEL_32:
    sub_10002EB7C(v56, v57, v58);
    uint64_t v12 = v59;
  }

  uint64_t v30 = sub_10005EFB4((uint64_t)v12);
  swift_bridgeObjectRelease(v12);
  return v30;
}

uint64_t sub_100046364()
{
  uint64_t v0 = type metadata accessor for AppOpenableDestination(0LL);
  uint64_t v45 = *(void *)(v0 - 8);
  uint64_t v46 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v43 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v44 = (char *)&v43 - v3;
  uint64_t v4 = type metadata accessor for AppInstallation.Progress(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AppInstallation(0LL);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin(v6);
  unsigned int v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AppPurchaseType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v53 = (char *)&v43 - v13;
  uint64_t v14 = type metadata accessor for AppInstallationType(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = type metadata accessor for State(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v54, v21);
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v24, v21);
  if (v25 == enum case for State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 96))(v24, v21);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v24, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
    int v26 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v18, v14);
    if (v26 == enum case for AppInstallationType.purchase(_:))
    {
      uint64_t v27 = 1LL;
    }

    else if (v26 == enum case for AppInstallationType.update(_:))
    {
      uint64_t v27 = 2LL;
    }

    else if (v26 == enum case for AppInstallationType.redownload(_:))
    {
      uint64_t v27 = 3LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      uint64_t v27 = 0LL;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    return v27;
  }

  if (v25 == enum case for State.purchased(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 96))(v24, v21);
    uint64_t v28 = v53;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v53, v24, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v28, v8);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
    if (v29 != enum case for AppPurchaseType.standard(_:))
    {
      if (v29 == enum case for AppPurchaseType.preorder(_:))
      {
        uint64_t v27 = 1LL;
LABEL_18:
        (*(void (**)(char *, uint64_t))(v9 + 8))(v28, v8);
        return v27;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }

    uint64_t v27 = 0LL;
    goto LABEL_18;
  }

  if (v25 == enum case for State.updatable(_:) || v25 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 96))(v24, v21);
    return *(void *)v24;
  }

  if (v25 == enum case for State.installing(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 96))(v24, v21);
    uint64_t v32 = v47;
    uint64_t v31 = v48;
    uint64_t v33 = v49;
    uint64_t v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(v47, v24, v49);
    uint64_t v35 = v50;
    uint64_t v36 = AppInstallation.progress.getter(v34);
    double v37 = AppInstallation.Progress.fractionCompleted.getter(v36);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    return *(void *)&v37;
  }

  if (v25 == enum case for State.openable(_:))
  {
    (*(void (**)(char *, uint64_t))(v22 + 96))(v24, v21);
    sub_100029E18(&qword_10013CCC0);
    uint64_t v39 = v44;
    uint64_t v38 = v45;
    uint64_t v40 = v46;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v44, v24, v46);
    uint64_t v41 = v43;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v43, v39, v40);
    int v42 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v41, v40);
    if (v42 != enum case for AppOpenableDestination.app(_:))
    {
      if (v42 == enum case for AppOpenableDestination.messages(_:))
      {
        uint64_t v27 = 1LL;
LABEL_34:
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
        return v27;
      }

      (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v40);
    }

    uint64_t v27 = 0LL;
    goto LABEL_34;
  }

  if (v25 == enum case for State.buyable(_:)) {
    return 0LL;
  }
  if (v25 == enum case for State.installed(_:)) {
    return 1LL;
  }
  if (v25 != enum case for State.unknown(_:)) {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  return 2LL;
}

uint64_t sub_100046970()
{
  uint64_t v1 = v0;
  uint64_t refreshed = type metadata accessor for ArcadeEntitlementRefreshCondition(0LL);
  uint64_t v3 = *(void *)(refreshed - 8);
  __chkstk_darwin();
  uint64_t v5 = (unsigned __int8 *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v3 + 16))(v5, v1, refreshed);
  int v6 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v3 + 88))(v5, refreshed);
  if (v6 == enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpired(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 96))(v5, refreshed);
    return *v5;
  }

  else if (v6 == enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpiredOrSubscribed(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 96))(v5, refreshed);
    return *v5 | 0x40u;
  }

  else if (v6 == enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpiredOrUnsubscribed(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 96))(v5, refreshed);
    return *v5 | 0xFFFFFF80;
  }

  else if (v6 == enum case for ArcadeEntitlementRefreshCondition.never(_:))
  {
    return 192LL;
  }

  else
  {
    if (v6 != enum case for ArcadeEntitlementRefreshCondition.always(_:)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 8))(v5, refreshed);
    }
    return 193LL;
  }

void *sub_100046AC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DeviceAppQuery(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)&v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DeviceAppQuery.storeIDs(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = sub_1000458E4(*v5);
    uint64_t v9 = sub_10005F0DC((uint64_t)v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    uint64_t v10 = sub_1000476FC(v9);
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    if (v6 != enum case for DeviceAppQuery.bundleIDs(_:))
    {
      if (v6 == enum case for DeviceAppQuery.custom(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
      }

      else
      {
        if (v6 == enum case for DeviceAppQuery.allStoreApps(_:)) {
          return 0LL;
        }
        if (v6 != enum case for DeviceAppQuery.betaApps(_:)) {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
        }
      }

      return _swiftEmptyArrayStorage;
    }

    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v11 = *v5;
    uint64_t v10 = sub_100047618(v11);
    swift_bridgeObjectRelease(v11);
  }

  return v10;
}

id sub_100046C84(double a1)
{
  id result = [(id)objc_opt_self(NSProgress) progressWithTotalUnitCount:100];
  double v3 = round(a1 * 100.0);
  if ((~*(void *)&v3 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v3 < 9.22337204e18)
  {
    id v4 = result;
    [result setCompletedUnitCount:(uint64_t)v3];
    return (id)AppInstallation.Progress.init(_:)(v4);
  }

void sub_100046D3C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v12 = a2;
  uint64_t v13 = a4;
  uint64_t v14 = a1;
  uint64_t v5 = type metadata accessor for AppInstallation(0LL);
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = v5;
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for AppInstallation.Phase(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for AppInstallation.Progress(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  __asm { BR              X10 }

uint64_t sub_100046E64()
{
  return ((uint64_t (*)(void))((char *)sub_100046E84 + 4 * byte_1000EE1B3[*(void *)(v0 - 88)]))();
}

void sub_100046E84()
{
  uint64_t v1 = enum case for AppInstallationType.unknown(_:);
  uint64_t v2 = ((uint64_t (*)(void))type metadata accessor for AppInstallationType)(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 104LL))(v0, v1, v2);
  uint64_t v3 = *(void *)(*(void *)(type metadata accessor for State(0LL) - 8) + 104LL);
  __asm { BR              X3 }

void sub_100047184(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000471BC(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = (unsigned int *)&enum case for ArcadeIntroOfferState.available(_:);
    }
    else {
      uint64_t v2 = (unsigned int *)&enum case for ArcadeIntroOfferState.consumed(_:);
    }
  }

  else
  {
    uint64_t v2 = (unsigned int *)&enum case for ArcadeIntroOfferState.unknown(_:);
  }

  uint64_t v3 = *v2;
  uint64_t v4 = ((uint64_t (*)(void))type metadata accessor for ArcadeIntroOfferState)(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104LL))(v1, v3, v4);
  uint64_t v5 = enum case for ArcadeState.notSubscribed(_:);
  uint64_t v6 = ((uint64_t (*)(void))type metadata accessor for ArcadeState)(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104LL))(v1, v5, v6);
}

id sub_10004730C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  v38.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v37.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  v36.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  if (a11)
  {
    v25.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a11);
  }

  else
  {
    v25.super.Class isa = 0LL;
  }

  uint64_t v26 = type metadata accessor for URL(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  int v29 = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(a12, 1LL, v26) != 1)
  {
    URL._bridgeToObjectiveC()(v28);
    int v29 = v30;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a12, v26);
  }

  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a14);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a16);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a18);
  if (a19)
  {
    v34.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a19);
  }

  else
  {
    v34.super.Class isa = 0LL;
  }

  id v41 = [v39 initWithID:a1 titles:v38.super.isa subtitles:v37.super.isa flags:a4 ageRating:a5 metrics:v36.super.isa baseBuyParams:v23 metricsBuyParams:v24 additionalHeaders:v25.super.isa preflight PackageURL:v29 bundleID:v31 itemName:v32 vendorName:v33 capabilities:v34.super.isa];

  return v41;
}

void *sub_100047618(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100029E18(&qword_10013CCD0);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_1000477F4((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10002EB74(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t **sub_1000476FC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return (uint64_t **)_swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaSet.count.getter(a1);
  if (!v2) {
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    uint64_t v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_100029E18(&qword_10013F700);
    uint64_t v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }

  swift_bridgeObjectRetain(v1);
  uint64_t v7 = sub_1000479F0(&v9, v4 + 4, v2, v1);
  id result = (uint64_t **)sub_10002EB74(v9);
  __break(1u);
  return result;
}

uint64_t sub_1000477F4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    id result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

            sub_100029EE0(v62, v62[3]);
            v51._object = (void *)0x80000001000FC510LL;
            v51._countAndFlagsBits = 0xD000000000000016LL;
            object = Localizer.string(forKey:)(v51)._object;
            goto LABEL_42;
          }
        }

        swift_bridgeObjectRelease(v46);
        sub_1000388F0(v59, (uint64_t)v62);
        goto LABEL_41;
      }
    }

              int64_t v12 = 0LL;
              uint64_t v10 = 0LL;
              unint64_t v9 = v29;
              goto LABEL_8;
            }
          }

          int64_t v12 = 0LL;
          uint64_t v10 = 0LL;
          unint64_t v9 = v34;
          goto LABEL_8;
        }

        int64_t v14 = __CocoaSet.Iterator.next()(a1);
        if (!v14
          || (unint64_t v15 = v14,
              id v41 = v14,
              unint64_t v16 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488),
              swift_unknownObjectRetain(v15),
              swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL),
              int64_t v12 = v42,
              swift_unknownObjectRelease(v15),
              !v12))
        {
LABEL_47:
          swift_retain(a3);
          sub_100090A7C(a1, a2, v37, a3);
          return;
        }

            sub_10002EB74(v53);
            uint64_t v43 = v117;
            uint64_t v44 = v99;
            uint64_t v40 = v100;
            goto LABEL_42;
          }
        }
      }
    }

uint64_t *sub_1000479F0(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = __CocoaSet.makeIterator()(v8);
    uint64_t v10 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    unint64_t v11 = sub_1000445F4();
    id result = Set.Iterator.init(_cocoa:)(v36, v9, v10, v11);
    uint64_t v4 = v36[0];
    uint64_t v12 = v36[1];
    uint64_t v13 = v36[2];
    int64_t v14 = v36[3];
    unint64_t v15 = v36[4];
    NSString v32 = v7;
    if (v6) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v16 = 0LL;
LABEL_49:
    *NSString v32 = v4;
    v32[1] = v12;
    v32[2] = v13;
    v32[3] = v14;
    v32[4] = v15;
    return (uint64_t *)v16;
  }

  int64_t v14 = 0LL;
  uint64_t v28 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v12 = a4 + 56;
  uint64_t v13 = ~v28;
  uint64_t v29 = -v28;
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  else {
    uint64_t v30 = -1LL;
  }
  unint64_t v15 = v30 & *(void *)(a4 + 56);
  NSString v32 = result;
  if (!a2) {
    goto LABEL_39;
  }
LABEL_6:
  if (!a3)
  {
    uint64_t v16 = 0LL;
    goto LABEL_49;
  }

  if (a3 < 0) {
    goto LABEL_51;
  }
  uint64_t v16 = 0LL;
  int64_t v33 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v31 = v13;
  while (1)
  {
    if (v4 < 0)
    {
      uint64_t v23 = v12;
      uint64_t v24 = __CocoaSet.Iterator.next()(result);
      if (!v24) {
        goto LABEL_48;
      }
      uint64_t v25 = v24;
      uint64_t v34 = v24;
      uint64_t v26 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
      swift_unknownObjectRetain(v25);
      swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v26, 7LL);
      int64_t v19 = v35;
      id result = (uint64_t *)swift_unknownObjectRelease(v25);
      uint64_t v12 = v23;
      if (!v19) {
        goto LABEL_48;
      }
      goto LABEL_11;
    }

    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_10;
    }

    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v20 >= v33)
    {
      unint64_t v15 = 0LL;
      goto LABEL_48;
    }

    unint64_t v21 = *(void *)(v12 + 8 * v20);
    if (v21) {
      goto LABEL_26;
    }
    int64_t v22 = v14 + 2;
    if (v14 + 2 >= v33)
    {
      unint64_t v15 = 0LL;
      ++v14;
      goto LABEL_48;
    }

    unint64_t v21 = *(void *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v33) {
        goto LABEL_45;
      }
      unint64_t v21 = *(void *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        int64_t v20 = v14 + 3;
        goto LABEL_26;
      }

      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v33)
      {
        unint64_t v15 = 0LL;
        v14 += 3LL;
        goto LABEL_48;
      }

      unint64_t v21 = *(void *)(v12 + 8 * v22);
      if (!v21)
      {
        int64_t v20 = v14 + 5;
        if (v14 + 5 >= v33)
        {
LABEL_45:
          unint64_t v15 = 0LL;
          int64_t v14 = v22;
          goto LABEL_48;
        }

        unint64_t v21 = *(void *)(v12 + 8 * v20);
        if (!v21)
        {
          int64_t v27 = v14 + 6;
          while (v33 != v27)
          {
            unint64_t v21 = *(void *)(v12 + 8 * v27++);
            if (v21)
            {
              int64_t v20 = v27 - 1;
              goto LABEL_26;
            }
          }

          unint64_t v15 = 0LL;
          int64_t v14 = v33 - 1;
          goto LABEL_48;
        }

        goto LABEL_26;
      }
    }

    int64_t v20 = v22;
LABEL_26:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v14 = v20;
LABEL_10:
    id result = (uint64_t *)*(id *)(*(void *)(v4 + 48) + 8 * v18);
    int64_t v19 = result;
    if (!result) {
      goto LABEL_48;
    }
LABEL_11:
    ++v16;
    *v6++ = v19;
    if (v16 == a3)
    {
      uint64_t v16 = a3;
LABEL_48:
      uint64_t v13 = v31;
      goto LABEL_49;
    }
  }

  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_100047CF8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v11 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v21 = v11;
        uint64_t v12 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v4 = v22;
        swift_unknownObjectRelease(v11);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v14 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v13 & ~v14;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            uint64_t v17 = ~v14;
            do
            {
              unint64_t v7 = (v7 + 1) & v17;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v18 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v19 = static NSObject.== infix(_:_:)(v18);
            }

            while ((v19 & 1) == 0);
          }

LABEL_20:
          id v20 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

uint64_t sub_100047F60(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

unint64_t sub_100047FE8(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100029E18(&qword_10013CD10);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_10008D53C(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(v4);
    return (unint64_t)v3;
  }

  unint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    Swift::Int v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain(v4);
    unint64_t result = sub_10008D53C(v5);
    unint64_t v8 = v13;
    uint64_t v4 = v14;
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_1000480E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100029E18(&qword_10013CCF8);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  unsigned __int16 v4 = *(_WORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_10008D5FC(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }

  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_WORD *)(v3[6] + 2 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    void *v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    unsigned __int16 v4 = *((_WORD *)v9 - 8);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain(v5);
    unint64_t result = sub_10008D5FC(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

id sub_1000481F0(uint64_t a1, uint64_t a2)
{
  v29[1] = a2;
  uint64_t v2 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v2);
  unsigned __int16 v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for AppOffer.Flags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v29 - v10;
  uint64_t v12 = type metadata accessor for AdamID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  char v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = App.id.getter(v14);
  uint64_t v18 = AdamID.int64Value.getter(v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  id v19 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v18];
  unint64_t v20 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v21 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = AppOffer.flags.getter();
  static AppOffer.Flags.dsidLess.getter(v22);
  uint64_t v23 = sub_100027978( &qword_10013CCB0,  (uint64_t (*)(uint64_t))&type metadata accessor for AppOffer.Flags,  (uint64_t)&protocol conformance descriptor for AppOffer.Flags);
  LOBYTE(v18) = dispatch thunk of SetAlgebra.isSuperset(of:)(v9, v5, v23);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24(v9, v5);
  v24(v11, v5);
  if ((v18 & 1) != 0) {
    uint64_t v25 = 512LL;
  }
  else {
    uint64_t v25 = 0LL;
  }
  uint64_t v26 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v4, 1LL, 1LL, v26);
  id v27 = objc_allocWithZone((Class)&OBJC_CLASS___ASCAppOffer);
  return sub_10004730C( v19,  v20,  v21,  v25,  0LL,  (uint64_t)_swiftEmptyArrayStorage,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL,  0LL,  (uint64_t)v4,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL,  0LL,  0xE000000000000000LL,  0LL);
}

id sub_100048450(id result, char a2)
{
  if (a2 == 2) {
    return result;
  }
  if (a2 == 1) {
    return (id)swift_retain(result);
  }
  return result;
}

void sub_100048470(void *a1, char a2)
{
  if (a2 == 2)
  {
  }

  else if (a2 == 1)
  {
    swift_release(a1);
  }

uint64_t sub_100048494(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for AppState_V1(uint64_t a1)
{
  return sub_1000484C0(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000484C0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s19appstorecomponentsd11AppState_V1OwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100048494(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppState_V1(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100048494(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_1000484C0(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AppState_V1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppState_V1(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_1000484C0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppState_V1(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppState_V1(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100048658(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_100048670(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)__n128 result = a2 - 6;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 6;
  }

  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppState_V1()
{
  return &type metadata for AppState_V1;
}

uint64_t sub_100048698(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xED0000305F325F65LL;
  unint64_t v3 = 0x746174735F707061LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x325F6E6F6273696CLL;
    }
    else {
      unint64_t v5 = 0xD000000000000013LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000043343230LL;
    }
    else {
      unint64_t v6 = 0x80000001000FA5C0LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  unint64_t v5 = 0x746174735F707061LL;
  unint64_t v6 = 0xED0000305F325F65LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x325F6E6F6273696CLL;
    }
    else {
      unint64_t v3 = 0xD000000000000013LL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEC00000043343230LL;
    }
    else {
      unint64_t v2 = 0x80000001000FA5C0LL;
    }
  }

LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    char v8 = 1;
    unint64_t v2 = v6;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

  uint64_t v28 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
}

  uint64_t v28 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  __n128 result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

  uint64_t v24 = sub_10002A030(0LL, &qword_10013E5F8, off_10011E538);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  uint64_t v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
  uint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  uint64_t v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      uint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      char v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      uint64_t v17 = static NSObject.== infix(_:_:)(v16);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  id v19 = *v2;
  uint64_t v22 = *v2;
  unsigned int *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10006ED88();
    id v19 = v22;
  }

  char v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_100091628(v12);
  unint64_t v20 = *v2;
  unsigned int *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

    swift_once(&qword_10013BC40, sub_1000D1538);
    goto LABEL_11;
  }

  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;

  if ([v8 isLaunchProhibited])
  {
    swift_bridgeObjectRelease(v14);
    if (qword_10013BC40 != -1) {
      swift_once(&qword_10013BC40, sub_1000D1538);
    }
    char v16 = *(void *)(v1 + 144);
    uint64_t v15 = *(void *)(v1 + 152);
    uint64_t v17 = *(void *)(v1 + 128);
    uint64_t v18 = *(void *)(v1 + 136);
    uint64_t v59 = *(void *)(v1 + 120);
    id v19 = sub_10002A768(v18, (uint64_t)qword_100148600);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v19, v18);
    unint64_t v20 = sub_100029E18(&qword_10013EA00);
    unint64_t v21 = type metadata accessor for LogMessage(0LL);
    uint64_t v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
          + *(void *)(*(void *)(v21 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(77LL, 1LL);
    v23._countAndFlagsBits = 0xD00000000000002DLL;
    v23._object = (void *)0x8000000100101570LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t v24 = type metadata accessor for AdamID(0LL);
    *(void *)(v1 + 40) = v24;
    uint64_t v25 = sub_10002C328((void *)(v1 + 16));
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))(v25, v59, v24);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 16);
    sub_10004C810(v1 + 16);
    v26._object = (void *)0x80000001001015A0LL;
    v26._countAndFlagsBits = 0xD000000000000020LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v17);
    Logger.error(_:)(v22, v18, &protocol witness table for OSLogger);
    id v27 = swift_bridgeObjectRelease(v22);
    (*(void (**)(uint64_t, uint64_t, __n128))(v16 + 8))(v15, v18, v27);
    type metadata accessor for ASCOpenAppError(0LL);
    uint64_t v29 = v28;
    *(void *)(v1 + 112) = 1LL;
    uint64_t v30 = sub_100043C24((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v31 = sub_100027978( (unint64_t *)&qword_10013C278,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOpenAppError,  (uint64_t)&unk_1000ED888);
    NSString v32 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v1 + 104), v1 + 112, v30, v29, v31);
    swift_willThrow(v32);

    goto LABEL_12;
  }

  uint64_t v57 = *(void *)(v1 + 152);
  unsigned __int8 v58 = *(void *)(v1 + 128);

  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v12, v14);
}

uint64_t sub_1000487D0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x736567617373656DLL;
  }
  else {
    uint64_t v3 = 7368801LL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x736567617373656DLL;
  }
  else {
    uint64_t v5 = 7368801LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE800000000000000LL;
  }
  else {
    unint64_t v6 = 0xE300000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10004886C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000488BC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100048920 + 4 * byte_1000EE1C4[a2]))(0x6573616863727570LL);
}

uint64_t sub_100048920(uint64_t a1)
{
  if (a1 == 0x6573616863727570LL && v1 == 0xE800000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6573616863727570LL, 0xE800000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  return v2 & 1;
}

void sub_1000489C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_100048A00()
{
  return ((uint64_t (*)())((char *)sub_100048A38 + 4 * byte_1000EE1CF[v0]))();
}

uint64_t sub_100048A38()
{
  return swift_bridgeObjectRelease(0xE800000000000000LL);
}

Swift::Int sub_100048B8C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v5);
  sub_1000489C8((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100048BE4(uint64_t a1)
{
}

Swift::Int sub_100048BF0()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v5);
  sub_1000489C8((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100048C44(uint64_t a1)
{
}

unint64_t sub_100048C64()
{
  unint64_t result = qword_10013CD40;
  if (!qword_10013CD40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE200, &type metadata for AppState_V1);
    atomic_store(result, (unint64_t *)&qword_10013CD40);
  }

  return result;
}

void sub_100048CA8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_100048CE0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a6) {
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t sub_100048EEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100048F38 + 4 * byte_1000EE1DE[a4]))(0x657461647075LL);
}

void sub_100048F00()
{
}

void sub_100048F38(uint64_t a1)
{
  if (a1 == 0x6573616863727570LL && v1 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease_n(0xE800000000000000LL, 2LL);
  }

  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6573616863727570LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(0xE800000000000000LL);
  }

  JUMPOUT(0x100048EA0LL);
}

uint64_t sub_100048FCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = a1 + 56;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 48);
  uint64_t v9 = 1LL;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  int v12 = v8;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  if (v12 == 4) {
    return v10;
  }
  int v12 = 1;
  if (v1 == v9)
  {
LABEL_12:
    if (v12)
    {
      sub_100048494(v5, v6, v8);
      return v5;
    }
  }

  else
  {
    while (1)
    {
      if (__OFADD__(v9, 1LL))
      {
LABEL_23:
        __break(1u);
        return result;
      }

      int v13 = *(unsigned __int8 *)(v7 + 16);
      if ((v12 & 1) == 0) {
        break;
      }
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(v7 + 8);
      v7 += 24LL;
      ++v9;
      int v12 = v13;
      if ((_BYTE)v13) {
        goto LABEL_3;
      }
LABEL_6:
      uint64_t result = v10;
      uint64_t v4 = v11;
      if (v1 == v9) {
        goto LABEL_12;
      }
    }

    if (v13 == 4)
    {
LABEL_19:
      uint64_t v5 = *(void *)v7;
      sub_100049100(result, v4, 0);
      return v5;
    }

    uint64_t v14 = v9 + 1;
    while (v1 != v14)
    {
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_23;
      }
      int v15 = *(unsigned __int8 *)(v7 + 40);
      v7 += 24LL;
      ++v14;
      if (v15 == 4) {
        goto LABEL_19;
      }
    }
  }

  return result;
}

uint64_t sub_100049100(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_1000484C0(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100049114()
{
  return 0LL;
}

uint64_t sub_10004911C()
{
  uint64_t v0 = sub_100029E18(qword_10013CD50);
  sub_10002A728(v0, qword_100148518);
  sub_10002A768(v0, (uint64_t)qword_100148518);
  uint64_t v1 = sub_100029E18(&qword_10013C410);
  return MetricsFieldsContext.Property.init(_:)(0xD00000000000001BLL, 0x80000001000FB430LL, v1);
}

uint64_t sub_100049194()
{
  uint64_t v0 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  sub_10002A728(v0, qword_100148530);
  sub_10002A768(v0, (uint64_t)qword_100148530);
  return MetricsFieldInclusionRequest.init(rawValue:)(0x6574617453707061LL, 0xE800000000000000LL);
}

uint64_t destroy for AppStateMetricsFieldsProvider(void *a1)
{
  return sub_100029F4C(a1 + 5);
}

uint64_t initializeWithCopy for AppStateMetricsFieldsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

void *assignWithCopy for AppStateMetricsFieldsProvider(void *a1, void *a2)
{
  return a1;
}

__n128 initializeWithTake for AppStateMetricsFieldsProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AppStateMetricsFieldsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100029F4C((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStateMetricsFieldsProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppStateMetricsFieldsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppStateMetricsFieldsProvider()
{
  return &type metadata for AppStateMetricsFieldsProvider;
}

uint64_t sub_1000493C8(uint64_t a1)
{
  uint64_t v67 = a1;
  uint64_t v62 = type metadata accessor for AppOffer(0LL);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v60 = (char *)v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for App.Kind(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  __int128 v5 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v6);
  unsigned __int8 v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for App(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for State(0LL);
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v13 = __chkstk_darwin(v65);
  uint64_t v63 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v64 = (char *)v58 - v15;
  if (qword_10013BBA8 != -1) {
    swift_once(&qword_10013BBA8, sub_10004911C);
  }
  uint64_t v16 = sub_100029E18(qword_10013CD50);
  uint64_t v17 = sub_10002A768(v16, (uint64_t)qword_100148518);
  uint64_t v18 = sub_100029E18(&qword_10013C410);
  MetricsFieldsContext.subscript.getter(v71, v17, v18);
  id v19 = (void *)v71[0];
  if (v71[0])
  {
    uint64_t v20 = objc_opt_self(&OBJC_CLASS___ASCContingentOffer);
    uint64_t v21 = swift_dynamicCastObjCClass(v19, v20);
    if (v21)
    {
      uint64_t v22 = (void *)v21;
      swift_unknownObjectRetain(v19);
      sub_100049C28(v22, v67);
      return swift_unknownObjectRelease_n(v19, 2LL);
    }

    sub_1000388F0((uint64_t)v68, (uint64_t)v71);
    uint64_t v59 = v73;
    uint64_t v68 = v72;
    v58[1] = sub_100029EE0(v71, (uint64_t)v72);
    id v28 = objc_msgSend(v19, "id", swift_getObjectType(v19));
    id v29 = [v28 int64value];
    uint64_t v30 = v74;
    AdamID.init(value:)(v29);
    uint64_t v74 = v30;
    if (v30)
    {
      swift_unknownObjectRelease(v19);

      return sub_100029F4C(v71);
    }

    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for App.Kind.store(_:), v2);
    App.init(id:kind:)(v8, v5);

    uint64_t v31 = v60;
    sub_100045AF0();
    NSString v32 = v64;
    AppStateController.state(forApp:applying:)(v12, v31, v68, v59);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v62);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_100029F4C(v71);
    uint64_t v33 = v66;
    uint64_t v34 = v63;
    uint64_t v35 = v65;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v32, v65);
    int v36 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v34, v35);
    if (v36 == enum case for State.updatable(_:))
    {
      (*(void (**)(char *, uint64_t))(v33 + 96))(v34, v35);
      uint64_t v37 = *(void *)v34;
      uint64_t v38 = *((void *)v34 + 1);
      uint64_t v39 = sub_100029E18(&qword_10013F670);
      uint64_t inited = swift_initStackObject(v39, v69);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
      *(void *)(inited + 32) = 0x6D61726150797562LL;
      *(void *)(inited + 40) = 0xE900000000000073LL;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v37;
      *(void *)(inited + 56) = v38;
      unint64_t v41 = sub_100044F60(inited);
      unint64_t v42 = 0xE600000000000000LL;
      uint64_t v43 = 0x657461647075LL;
      uint64_t v44 = v74;
      uint64_t v45 = v67;
    }

    else
    {
      uint64_t v44 = v74;
      uint64_t v45 = v67;
      if (v36 == enum case for State.downloadable(_:))
      {
        (*(void (**)(char *, uint64_t))(v33 + 96))(v34, v35);
        uint64_t v46 = *(void *)v34;
        uint64_t v47 = *((void *)v34 + 1);
        uint64_t v48 = sub_100029E18(&qword_10013F670);
        uint64_t v49 = swift_initStackObject(v48, v70);
        *(_OWORD *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
        *(void *)(v49 + 32) = 0x6D61726150797562LL;
        *(void *)(v49 + 40) = 0xE900000000000073LL;
        *(void *)(v49 + 72) = &type metadata for String;
        *(void *)(v49 + 48) = v46;
        *(void *)(v49 + 56) = v47;
        unint64_t v41 = sub_100044F60(v49);
        unint64_t v42 = 0xE800000000000000LL;
        uint64_t v43 = 0x64616F6C6E776F64LL;
      }

      else if (v36 == enum case for State.installing(_:))
      {
        (*(void (**)(char *, uint64_t))(v33 + 96))(v34, v35);
        uint64_t v50 = type metadata accessor for AppInstallation(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v50 - 8) + 8LL))(v34, v50);
        unint64_t v41 = 0LL;
        unint64_t v42 = 0xE600000000000000LL;
        uint64_t v43 = 0x6C65636E6163LL;
      }

      else if (v36 == enum case for State.openable(_:))
      {
        (*(void (**)(char *, uint64_t))(v33 + 96))(v34, v35);
        uint64_t v51 = type metadata accessor for AppOpenableDestination(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8LL))(v34, v51);
        unint64_t v41 = 0LL;
        unint64_t v42 = 0xE400000000000000LL;
        uint64_t v43 = 1852141679LL;
      }

      else
      {
        unint64_t v41 = 0LL;
        unint64_t v42 = 0xE300000000000000LL;
        uint64_t v43 = 7959906LL;
        if (v36 != enum case for State.buyable(_:) && v36 != enum case for State.unknown(_:))
        {
          swift_unknownObjectRelease(v19);
          uint64_t v52 = *(void (**)(char *, uint64_t))(v33 + 8);
          v52(v34, v35);
          return ((uint64_t (*)(char *, uint64_t))v52)(v32, v35);
        }
      }
    }

    uint64_t v72 = &type metadata for String;
    v71[0] = v43;
    v71[1] = v42;
    uint64_t v53 = *(void *)(v45 + 24);
    uint64_t v54 = *(void *)(v45 + 32);
    sub_10002ACB8(v45, v53);
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)( v71,  0x79546E6F69746361LL,  0xEA00000000006570LL,  v53,  v54);
    if (v44)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v32, v35);
      swift_unknownObjectRelease(v19);
      swift_bridgeObjectRelease(v41);
      return sub_100029F4C(v71);
    }

    sub_100029F4C(v71);
    uint64_t v55 = v66;
    if (v41)
    {
      uint64_t v72 = (void *)sub_100029E18(&qword_10013CD70);
      v71[0] = v41;
      uint64_t v56 = *(void *)(v45 + 24);
      uint64_t v57 = *(void *)(v45 + 32);
      sub_10002ACB8(v45, v56);
      dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)( v71,  0x65446E6F69746361LL,  0xED0000736C696174LL,  v56,  v57);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v35);
      swift_unknownObjectRelease(v19);
      return sub_100029F4C(v71);
    }

    swift_unknownObjectRelease(v19);
    uint64_t v52 = *(void (**)(char *, uint64_t))(v55 + 8);
    return ((uint64_t (*)(char *, uint64_t))v52)(v32, v35);
  }

  if (qword_10013BC50 != -1) {
    swift_once(&qword_10013BC50, sub_1000D1578);
  }
  uint64_t v24 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v24, (uint64_t)qword_100148630);
  uint64_t v25 = sub_100029E18(&qword_10013EA00);
  uint64_t v26 = type metadata accessor for LogMessage(0LL);
  uint64_t v27 = swift_allocObject( v25,  ((*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v26 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDA10;
  LogMessage.init(stringLiteral:)(0xD000000000000029LL, 0x80000001000FB450LL);
  LogMessage.init(stringLiteral:)(0xD000000000000028LL, 0x80000001000FB480LL);
  Logger.error(_:)(v27, v24, &protocol witness table for OSLogger);
  return swift_bridgeObjectRelease(v27);
}

void sub_100049C28(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v72 = a2;
  uint64_t v6 = type metadata accessor for AppOffer(0LL);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for App.Kind(0LL);
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v10);
  int v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for App(0LL);
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for State(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v63 = (char *)&v54 - v20;
  uint64_t v67 = v4;
  sub_1000388F0(v4, (uint64_t)v69);
  uint64_t v21 = v70;
  uint64_t v58 = v71;
  uint64_t v57 = sub_100029EE0(v69, (uint64_t)v70);
  uint64_t v68 = a1;
  id v22 = [a1 id];
  AdamID.init(value:)([v22 int64value]);
  if (v3)
  {

LABEL_33:
    sub_100029F4C(v69);
    return;
  }

  uint64_t v55 = v19;
  uint64_t v56 = v16;
  (*(void (**)(char *, void, uint64_t))(v59 + 104))(v9, enum case for App.Kind.store(_:), v61);
  App.init(id:kind:)(v12, v9);

  uint64_t v23 = v64;
  uint64_t v24 = v68;
  sub_10003908C();
  uint64_t v25 = v63;
  AppStateController.state(forApp:applying:)(v14, v23, v21, v58);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v23, v66);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v14, v62);
  sub_100029F4C(v69);
  uint64_t v26 = *(os_unfair_lock_s **)(*sub_100029EE0((void *)(v67 + 40), *(void *)(v67 + 64)) + 16LL);
  uint64_t v27 = (uint64_t *)&v26[4];
  id v28 = v26 + 6;
  os_unfair_lock_lock(v26 + 6);
  sub_100087038(v27, v69);
  os_unfair_lock_unlock(v28);
  uint64_t v29 = v69[0];
  id v30 = [v24 iapItemID];
  unsigned __int8 v31 = sub_1000C9CEC(v30, v29);

  swift_bridgeObjectRelease(v29);
  id v32 = [v24 streamlinedOffer];
  uint64_t v33 = v56;
  if (v32)
  {
    id v34 = v32;
    uint64_t ObjectType = swift_getObjectType(v32);
    uint64_t v36 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0LL;
    }
    if (v36) {
      id v38 = v34;
    }
    else {
      id v38 = 0LL;
    }
    if (v38)
    {
      uint64_t v39 = swift_getObjectType(v38);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8);
      swift_unknownObjectRetain(v34);
      unint64_t v41 = (void *)v40(v39, v37);
      swift_unknownObjectRelease_n(v34, 2LL);
      if (v41)
      {

        char v42 = 0;
        goto LABEL_15;
      }
    }

    else
    {
      swift_unknownObjectRelease(v34);
    }
  }

  char v42 = 1;
LABEL_15:
  uint64_t v43 = v55;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v55, v25, v15);
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v43, v15);
  if (v44 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v43, v15);
    swift_bridgeObjectRelease(*((void *)v43 + 1));
    unint64_t v45 = 0xE600000000000000LL;
    uint64_t v46 = 0x657461647075LL;
    goto LABEL_31;
  }

  if (v44 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v43, v15);
    swift_bridgeObjectRelease(*((void *)v43 + 1));
    else {
      uint64_t v46 = 7959906LL;
    }
    else {
      unint64_t v45 = 0xE300000000000000LL;
    }
    goto LABEL_31;
  }

  if (v44 == enum case for State.installing(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v43, v15);
    uint64_t v47 = type metadata accessor for AppInstallation(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8LL))(v43, v47);
    unint64_t v45 = 0xE600000000000000LL;
    uint64_t v46 = 0x6C65636E6163LL;
    goto LABEL_31;
  }

  uint64_t v46 = 7959906LL;
  if (v44 == enum case for State.openable(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v43, v15);
    if (((v42 | v31) & 1) != 0)
    {
      uint64_t v46 = 1852141679LL;
      unint64_t v45 = 0xE400000000000000LL;
    }

    else
    {
      unint64_t v45 = 0xE300000000000000LL;
    }

    uint64_t v48 = type metadata accessor for AppOpenableDestination(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8LL))(v43, v48);
    goto LABEL_31;
  }

  unint64_t v45 = 0xE300000000000000LL;
  if (v44 == enum case for State.buyable(_:))
  {
LABEL_31:
    uint64_t v49 = v72;
LABEL_32:
    uint64_t v70 = &type metadata for String;
    v69[0] = v46;
    v69[1] = v45;
    uint64_t v50 = *(void *)(v49 + 24);
    uint64_t v51 = *(void *)(v49 + 32);
    sub_10002ACB8(v49, v50);
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)( v69,  0x79546E6F69746361LL,  0xEA00000000006570LL,  v50,  v51);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v15);
    goto LABEL_33;
  }

  BOOL v52 = v44 == enum case for State.unknown(_:);
  uint64_t v49 = v72;
  if (v52) {
    goto LABEL_32;
  }
  uint64_t v53 = *(void (**)(char *, uint64_t))(v33 + 8);
  v53(v43, v15);
  v53(v25, v15);
}

uint64_t sub_10004A224@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t sub_10004A268(uint64_t a1)
{
  return sub_1000493C8(a1);
}

unint64_t sub_10004A27C()
{
  uint64_t v0 = sub_100029E18(&qword_10013CD78);
  uint64_t inited = swift_initStackObject(v0, &v12);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EE310;
  *(void *)(inited + 32) = @"buyable";
  *(void *)(inited + 64) = &_s7BuyableVN;
  *(void *)(inited + 72) = &off_1001225F8;
  *(void *)(inited + 80) = @"waiting";
  *(void *)(inited + 112) = &_s7WaitingVN;
  *(void *)(inited + 120) = &off_1001268A0;
  *(void *)(inited + 128) = @"installing";
  *(void *)(inited + 160) = &_s10InstallingVN;
  *(void *)(inited + 168) = &off_100123638;
  *(void *)(inited + 176) = @"installed";
  *(void *)(inited + 208) = &_s9InstalledVN;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &off_1001235F8;
  *(void *)(inited + 224) = @"purchased";
  *(void *)(inited + 256) = &_s9PurchasedVN;
  *(void *)(inited + 264) = &off_100125BD0;
  *(void *)(inited + 272) = @"updatable";
  *(void *)(inited + 304) = &_s9UpdatableVN;
  *(void *)(inited + 312) = &off_100126788;
  *(void *)(inited + 320) = @"downloadable";
  *(void *)(inited + 352) = &_s12DownloadableVN;
  *(void *)(inited + 360) = &off_100123208;
  *(void *)(inited + 368) = @"openable";
  *(void *)(inited + 400) = &_s8OpenableVN;
  *(void *)(inited + 408) = &off_1001257E0;
  *(void *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 16) = @"unknown";
  *(void *)(inited + 448) = &_s7UnknownVN;
  *(void *)(inited + 456) = &off_100126748;
  uint64_t v2 = @"buyable";
  uint64_t v3 = @"waiting";
  uint64_t v4 = @"installing";
  __int128 v5 = @"installed";
  uint64_t v6 = @"purchased";
  uint64_t v7 = @"updatable";
  uint64_t v8 = @"downloadable";
  uint64_t v9 = @"openable";
  uint64_t v10 = @"unknown";
  return sub_100045550(inited);
}

uint64_t *sub_10004A450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }

  return a1;
}

void sub_10004A4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t sub_10004A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_10004A580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  id v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  return a1;
}

uint64_t sub_10004A5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10004A644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_10004A6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A6B4);
}

uint64_t sub_10004A6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_10004A73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A748);
}

uint64_t sub_10004A748(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for AppStoreRepairAction(uint64_t a1)
{
  uint64_t result = qword_10013CDD8;
  if (!qword_10013CDD8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppStoreRepairAction);
  }
  return result;
}

uint64_t sub_10004A7FC(uint64_t a1)
{
  uint64_t result = type metadata accessor for ActionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AppStoreRepairActionImplementation()
{
  return &type metadata for AppStoreRepairActionImplementation;
}

unint64_t sub_10004A880()
{
  unint64_t result = qword_10013DE10;
  if (!qword_10013DE10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE3F4, &type metadata for AppStoreRepairActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE10);
  }

  return result;
}

uint64_t sub_10004A8C4(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_10004A8DC, 0LL, 0LL);
}

uint64_t sub_10004A8DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = enum case for ActionOutcome.unsupported(_:);
  uint64_t v3 = type metadata accessor for ActionOutcome(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(v1, v2, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10004A93C()
{
  unint64_t result = qword_10013CE18;
  if (!qword_10013CE18)
  {
    uint64_t v1 = type metadata accessor for AppStoreRepairAction(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000EE340, v1);
    atomic_store(result, (unint64_t *)&qword_10013CE18);
  }

  return result;
}

uint64_t sub_10004A984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10004A9C4();
  return AsyncActionImplementation.perform(_:asPartOf:)(a1, a2, a3, v6);
}

unint64_t sub_10004A9C4()
{
  unint64_t result = qword_10013CE20;
  if (!qword_10013CE20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE3C4, &type metadata for AppStoreRepairActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013CE20);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ArcadeEntitlementRefreshCondition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x7D) {
    goto LABEL_17;
  }
  if (a2 + 131 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 131) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 131;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 131;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 131;
    }
  }

uint64_t storeEnumTagSinglePayload for ArcadeEntitlementRefreshCondition( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 131 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 131) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x7D) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x7C) {
    return ((uint64_t (*)(void))((char *)&loc_10004AAF4 + 4 * byte_1000EE445[v4]))();
  }
  *a1 = a2 - 125;
  return ((uint64_t (*)(void))((char *)sub_10004AB28 + 4 * byte_1000EE440[v4]))();
}

uint64_t sub_10004AB28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004AB30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004AB38LL);
  }
  return result;
}

uint64_t sub_10004AB50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004AB58LL);
  }
  *(_BYTE *)unint64_t result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_10004AB5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004AB64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004AB70(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  unsigned int v2 = v1 >> 6;
  unsigned int v3 = (v1 & 1) + 3;
  if (v2 == 3) {
    return v3;
  }
  else {
    return v2;
  }
}

_BYTE *sub_10004AB8C(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_10004AB9C(_BYTE *result, unsigned int a2)
{
  if (a2 < 3) {
    *unint64_t result = *result & 1 | ((_BYTE)a2 << 6);
  }
  else {
    *unint64_t result = a2 & 1 ^ 0xC1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArcadeEntitlementRefreshCondition()
{
  return &type metadata for ArcadeEntitlementRefreshCondition;
}

void sub_10004ABD8(char a1)
{
  __asm { BR              X10 }

unint64_t sub_10004AC08()
{
  if ((v0 & 1) != 0) {
    uint64_t v1 = 1702195828LL;
  }
  else {
    uint64_t v1 = 0x65736C6166LL;
  }
  if ((v0 & 1) != 0) {
    unint64_t v2 = 0xE400000000000000LL;
  }
  else {
    unint64_t v2 = 0xE500000000000000LL;
  }
  unint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 41LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0xD00000000000002ALL;
}

void sub_10004AD58(uint64_t a1, char a2)
{
  __asm { BR              X10 }

void sub_10004AD84(uint64_t a1, char a2)
{
  Swift::UInt8 v2 = a2 & 1;
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v2);
}

void sub_10004ADDC()
{
}

Swift::Int sub_10004ADE4()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_10004AD58((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10004AE28(uint64_t a1)
{
}

Swift::Int sub_10004AE30()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_10004AD58((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_10004AE70(unsigned __int8 *a1)
{
  return sub_10004AEC4(*a1);
}

unint64_t sub_10004AE80()
{
  unint64_t result = qword_10013CE28;
  if (!qword_10013CE28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE484, &type metadata for ArcadeEntitlementRefreshCondition);
    atomic_store(result, (unint64_t *)&qword_10013CE28);
  }

  return result;
}

uint64_t sub_10004AEC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_10004AEE8 + 4 * byte_1000EE452[a1 >> 6]))();
}

uint64_t sub_10004AEE8@<X0>(unsigned int a1@<W8>)
{
  if (a1 < 0x40) {
    return (((v1 & 1) == 0) ^ a1) & 1;
  }
  else {
    return 0LL;
  }
}

uint64_t getEnumTagSinglePayload for ArcadeIntroOfferState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for ArcadeIntroOfferState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10004B030 + 4 * byte_1000EE525[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10004B064 + 4 * byte_1000EE520[v4]))();
}

uint64_t sub_10004B064(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004B06C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004B074LL);
  }
  return result;
}

uint64_t sub_10004B080(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004B088LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10004B08C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004B094(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArcadeIntroOfferState()
{
  return &type metadata for ArcadeIntroOfferState;
}

unint64_t sub_10004B0B4()
{
  unint64_t result = qword_10013CE30;
  if (!qword_10013CE30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE548, &type metadata for ArcadeIntroOfferState);
    atomic_store(result, (unint64_t *)&qword_10013CE30);
  }

  return result;
}

ValueMetadata *type metadata accessor for ArcadeOfferActionImplementation()
{
  return &type metadata for ArcadeOfferActionImplementation;
}

unint64_t sub_10004B10C()
{
  unint64_t result = qword_10013C4F0;
  if (!qword_10013C4F0)
  {
    uint64_t v1 = sub_10002A030(255LL, &qword_10013C4E8, off_10011E4A8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ASCArcadeOffer, v1);
    atomic_store(result, (unint64_t *)&qword_10013C4F0);
  }

  return result;
}

uint64_t sub_10004B164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[63] = a2;
  v3[64] = a3;
  v3[62] = a1;
  uint64_t v4 = sub_100029E18(&qword_10013C6C8);
  v3[65] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[66] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[67] = swift_task_alloc(v6);
  v3[68] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for ArcadeState(0LL);
  v3[69] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[70] = v8;
  v3[71] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for MetricsFieldsContext(0LL);
  v3[72] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[73] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[74] = swift_task_alloc(v11);
  v3[75] = swift_task_alloc(v11);
  uint64_t v12 = sub_100029E18(&qword_10013CBA0);
  v3[76] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[77] = v13;
  v3[78] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10004B268, 0LL, 0LL);
}

uint64_t sub_10004B268()
{
  uint64_t v1 = *(void **)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 504);
  uint64_t v4 = type metadata accessor for ObjectGraph(0LL);
  inject<A, B>(_:from:)(v1, v2, v3, v2, v4);
  uint64_t v5 = v3 + qword_10013FCF8;
  swift_beginAccess(v3 + qword_10013FCF8, v0 + 416, 0LL, 0LL);
  sub_10004C0C0(v5, v0 + 176);
  if (!*(void *)(v0 + 200))
  {
    sub_10002E92C(v0 + 176, (uint64_t *)&unk_10013DCB0);
    uint64_t v35 = sub_100029E18((uint64_t *)&unk_10013CE70);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v35, v35);
  }

  uint64_t v6 = *(void *)(v0 + 512);
  sub_10002C438((__int128 *)(v0 + 176), v0 + 216);
  uint64_t v7 = sub_10002A030(0LL, (unint64_t *)&qword_10013FD90, off_10011E548);
  uint64_t v8 = BaseObjectGraph.optional<A>(_:)(v7, v7);
  uint64_t v9 = *(void **)(v0 + 480);
  MetricsFieldsContext.init()(v8);
  *(void *)(v0 + 456) = v6;
  if (qword_10013BBA8 != -1) {
    swift_once(&qword_10013BBA8, sub_10004911C);
  }
  uint64_t v10 = sub_100029E18(qword_10013CD50);
  uint64_t v11 = sub_10002A768(v10, (uint64_t)qword_100148518);
  uint64_t v12 = sub_100029E18(&qword_10013C410);
  MetricsFieldsContext.addValue<A>(_:forProperty:)(v0 + 456, v11, v12);
  if (v9)
  {
    *(void *)(v0 + 488) = v9;
    uint64_t v13 = qword_10013BB90;
    id v14 = v9;
    if (v13 != -1) {
      swift_once(&qword_10013BB90, sub_10002A650);
    }
    uint64_t v15 = sub_100029E18((uint64_t *)&unk_10013F9D0);
    uint64_t v16 = sub_10002A768(v15, (uint64_t)qword_1001484E8);
    MetricsFieldsContext.addValue<A>(_:forProperty:)(v0 + 488, v16, v7);
  }

  uint64_t v17 = *(void *)(v0 + 568);
  uint64_t v18 = *(void *)(v0 + 560);
  uint64_t v19 = *(void *)(v0 + 552);
  (*(void (**)(void, void, void))(*(void *)(v0 + 584) + 32LL))( *(void *)(v0 + 600),  *(void *)(v0 + 592),  *(void *)(v0 + 576));

  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 248);
  sub_100029EE0((void *)(v0 + 216), v20);
  dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter(v20, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19) == enum case for ArcadeState.subscribed(_:))
  {
    id v22 = *(id **)(v0 + 568);
    uint64_t v23 = *(void **)(v0 + 512);
    (*(void (**)(id *, void))(*(void *)(v0 + 560) + 96LL))(v22, *(void *)(v0 + 552));

    id v24 = [v23 subscribedOffer];
    sub_100029170((uint64_t)v24, v0 + 376);
    swift_unknownObjectRelease(v24);
    if (*(void *)(v0 + 400))
    {
      uint64_t v25 = v0 + 336;
      uint64_t v26 = *(void *)(v0 + 600);
      uint64_t v27 = *(void *)(v0 + 584);
      uint64_t v28 = *(void *)(v0 + 576);
      uint64_t v29 = *(void *)(v0 + 544);
      uint64_t v30 = *(void *)(v0 + 528);
      uint64_t v31 = *(void *)(v0 + 520);
      sub_10002C438((__int128 *)(v0 + 376), v0 + 336);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v26, v28);
      (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))( v29,  enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:),  v31);
      id v32 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
      *(void *)(v0 + 632) = v32;
      *id v32 = v0;
      v32[1] = sub_10004BA34;
      uint64_t v33 = *(void *)(v0 + 608);
      uint64_t v34 = *(void *)(v0 + 544);
      return ActionDispatcher.perform(_:withMetrics:asPartOf:)( *(void *)(v0 + 496),  v25,  v34,  *(void *)(v0 + 504),  v33);
    }

    uint64_t v92 = *(void *)(v0 + 608);
    uint64_t v94 = *(void *)(v0 + 624);
    uint64_t v88 = *(void *)(v0 + 600);
    uint64_t v90 = *(void *)(v0 + 616);
    uint64_t v45 = *(void *)(v0 + 584);
    uint64_t v86 = *(void *)(v0 + 576);
    uint64_t v46 = *(void **)(v0 + 512);
    sub_10002E92C(v0 + 376, (uint64_t *)&unk_10013CBC0);
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v48 = v47;
    *(void *)(v0 + 472) = 2LL;
    uint64_t v49 = sub_100029E18(&qword_10013F670);
    uint64_t inited = swift_initStackObject(v49, v0 + 96);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v51;
    _StringGuts.grow(_:)(32LL);
    id v52 = [v46 subscribedOffer];
    uint64_t ObjectType = swift_getObjectType(v52);
    swift_unknownObjectRelease(v52);
    uint64_t v54 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v56 = v55;
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v57._object = (void *)0x80000001000FB070LL;
    v57._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v57);
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v54;
    *(void *)(inited + 56) = v56;
    unint64_t v58 = sub_100044F60(inited);
    unint64_t v59 = sub_10004C108();
    uint64_t v60 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 464), v0 + 472, v58, v48, v59);
    swift_willThrow(v60);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v88, v86);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v94, v92);
  }

  else
  {
    id v37 = [*(id *)(v0 + 512) notSubscribedOffer];
    sub_100029170((uint64_t)v37, v0 + 296);
    swift_unknownObjectRelease(v37);
    if (*(void *)(v0 + 320))
    {
      uint64_t v25 = v0 + 256;
      uint64_t v38 = *(void *)(v0 + 600);
      uint64_t v39 = *(void *)(v0 + 584);
      uint64_t v40 = *(void *)(v0 + 576);
      uint64_t v41 = *(void *)(v0 + 536);
      uint64_t v42 = *(void *)(v0 + 528);
      uint64_t v43 = *(void *)(v0 + 520);
      sub_10002C438((__int128 *)(v0 + 296), v0 + 256);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v38, v40);
      (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))( v41,  enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:),  v43);
      int v44 = (void *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
      *(void *)(v0 + 648) = v44;
      *int v44 = v0;
      v44[1] = sub_10004BB84;
      uint64_t v33 = *(void *)(v0 + 608);
      uint64_t v34 = *(void *)(v0 + 536);
      return ActionDispatcher.perform(_:withMetrics:asPartOf:)( *(void *)(v0 + 496),  v25,  v34,  *(void *)(v0 + 504),  v33);
    }

    uint64_t v84 = *(void *)(v0 + 600);
    uint64_t v61 = *(void *)(v0 + 584);
    uint64_t v83 = *(void *)(v0 + 576);
    uint64_t v93 = *(void *)(v0 + 568);
    uint64_t v95 = *(void *)(v0 + 624);
    uint64_t v85 = *(void *)(v0 + 560);
    uint64_t v87 = *(void *)(v0 + 616);
    uint64_t v89 = *(void *)(v0 + 552);
    uint64_t v91 = *(void *)(v0 + 608);
    uint64_t v62 = *(void **)(v0 + 512);
    sub_10002E92C(v0 + 296, (uint64_t *)&unk_10013CBC0);
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v64 = v63;
    *(void *)(v0 + 440) = 2LL;
    uint64_t v65 = sub_100029E18(&qword_10013F670);
    uint64_t v66 = swift_initStackObject(v65, v0 + 16);
    *(_OWORD *)(v66 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    *(void *)(v66 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(v66 + 40) = v67;
    _StringGuts.grow(_:)(32LL);
    id v68 = [v62 notSubscribedOffer];
    uint64_t v69 = swift_getObjectType(v68);
    swift_unknownObjectRelease(v68);
    uint64_t v70 = _typeName(_:qualified:)(v69, 0LL);
    uint64_t v72 = v71;
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v73._object = (void *)0x80000001000FB070LL;
    v73._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v73);
    *(void *)(v66 + 72) = &type metadata for String;
    *(void *)(v66 + 48) = v70;
    *(void *)(v66 + 56) = v72;
    unint64_t v74 = sub_100044F60(v66);
    unint64_t v75 = sub_10004C108();
    Swift::String v76 = _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 448), v0 + 440, v74, v64, v75);
    swift_willThrow(v76);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v84, v83);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v95, v91);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v93, v89);
  }

  uint64_t v77 = *(void *)(v0 + 624);
  uint64_t v78 = *(void *)(v0 + 600);
  uint64_t v79 = *(void *)(v0 + 592);
  uint64_t v80 = *(void *)(v0 + 568);
  uint64_t v81 = *(void *)(v0 + 544);
  uint64_t v82 = *(void *)(v0 + 536);
  sub_100029F4C((void *)(v0 + 216));
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BA34()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 632LL);
  *(void *)(*(void *)v1 + 640LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[66] + 8LL))(v2[68], v2[65]);
  if (v0) {
    uint64_t v4 = sub_10004BCFC;
  }
  else {
    uint64_t v4 = sub_10004BAAC;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10004BAAC()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 576);
  sub_100029F4C((void *)(v0 + 336));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 624);
  uint64_t v8 = *(void *)(v0 + 600);
  uint64_t v9 = *(void *)(v0 + 592);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 544);
  uint64_t v12 = *(void *)(v0 + 536);
  sub_100029F4C((void *)(v0 + 216));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BB84()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 648LL);
  *(void *)(*(void *)v1 + 656LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[66] + 8LL))(v2[67], v2[65]);
  if (v0) {
    uint64_t v4 = sub_10004BDD4;
  }
  else {
    uint64_t v4 = sub_10004BBFC;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10004BBFC()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 576);
  uint64_t v7 = *(void *)(v0 + 568);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v9 = *(void *)(v0 + 552);
  sub_100029F4C((void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v10 = *(void *)(v0 + 624);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 568);
  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void *)(v0 + 536);
  sub_100029F4C((void *)(v0 + 216));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BCFC()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 576);
  sub_100029F4C((void *)(v0 + 336));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 624);
  uint64_t v8 = *(void *)(v0 + 600);
  uint64_t v9 = *(void *)(v0 + 592);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 544);
  uint64_t v12 = *(void *)(v0 + 536);
  sub_100029F4C((void *)(v0 + 216));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BDD4()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 576);
  uint64_t v7 = *(void *)(v0 + 568);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v9 = *(void *)(v0 + 552);
  sub_100029F4C((void *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v10 = *(void *)(v0 + 624);
  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 568);
  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void *)(v0 + 536);
  sub_100029F4C((void *)(v0 + 216));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BED4(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject(&unk_100121030, 32LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_100029E18((uint64_t *)&unk_10013CC30);
  swift_retain(a2);
  uint64_t v9 = Promise.__allocating_init()(v7);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v6, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_100121058, 56LL, 7LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = &unk_10013CE50;
  v11[5] = v8;
  v11[6] = v9;
  swift_retain(v9);
  uint64_t v12 = sub_1000B3448((uint64_t)v6, (uint64_t)&unk_10013CE60, (uint64_t)v11);
  swift_release(v12);
  return v9;
}

uint64_t sub_10004BFFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C028(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013CE4C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002A858;
  return sub_10004B164(a1, v5, v4);
}

uint64_t sub_10004C08C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10004C0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013DCB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004C108()
{
  unint64_t result = qword_10013CE80;
  if (!qword_10013CE80)
  {
    type metadata accessor for ASCAppOfferActionError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000ED13C, v1);
    atomic_store(result, (unint64_t *)&qword_10013CE80);
  }

  return result;
}

uint64_t sub_10004C150@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = sub_100029E18(&qword_10013CF28);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Bag(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_100029E18(&qword_10013DDB0);
  uint64_t v13 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v30, v12, a1, v12, v13);
  inject<A, B>(_:from:)(v11, v8, a1, v8, v13);
  NSString v14 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.currentOrNil()(v29, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v15 = v29[0];
  uint64_t v16 = v29[1];
  id v17 = [(id)objc_opt_self(ASDSubscriptionEntitlements) sharedInstance];
  sub_1000388F0((uint64_t)v30, (uint64_t)v29);
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v19 = v17;
  id v20 = [v18 defaultCenter];
  uint64_t v21 = type metadata accessor for ASDArcadeSubscriptionManager();
  uint64_t v22 = swift_allocObject(v21, 152LL, 7LL);
  uint64_t v23 = sub_10004C850(v15, v16, (uint64_t)v19, v29, v20, v22);

  uint64_t v24 = type metadata accessor for ASCMigrationArcadeSubscriptionManagerImplementation();
  uint64_t v25 = (uint64_t *)swift_allocObject(v24, 40LL, 7LL);
  uint64_t v26 = swift_retain(v23);
  uint64_t v27 = sub_10004C968(v26, v25);
  swift_release(v23);
  a2[3] = (uint64_t *)v24;
  a2[4] = (uint64_t *)sub_10004CAA4();

  swift_release(v23);
  *a2 = v27;
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  return sub_100029F4C(v30);
}

uint64_t sub_10004C3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = &type metadata for Feature;
  unint64_t v30 = sub_10004C76C();
  LOBYTE(v28[0]) = 0;
  char v11 = isFeatureEnabled(_:)(v28);
  sub_100029F4C(v28);
  if ((v11 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v12 = sub_10002A768(v7, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
    uint64_t v13 = sub_100029E18(&qword_10013EA00);
    uint64_t v14 = type metadata accessor for LogMessage(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(53LL, 1LL);
    v16._countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v29 = &type metadata for Feature;
    LOBYTE(v28[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v28);
    sub_10004C810((uint64_t)v28);
    v17._countAndFlagsBits = 0xD000000000000035LL;
    v17._object = (void *)0x80000001000FB620LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.info(_:)(v15, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v18 = type metadata accessor for ASDArcadeSubscriptionManager(0LL);
    uint64_t v19 = swift_retain(a1);
    uint64_t result = ASDArcadeSubscriptionManager.__allocating_init(objectGraph:requestingBundleID:)( v19,  0xD000000000000014LL,  0x80000001000FB660LL);
    *(void *)(a2 + 24) = v18;
    *(void *)(a2 + 32) = &protocol witness table for ASDArcadeSubscriptionManager;
    *(void *)a2 = result;
  }

  else
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v21 = sub_10002A768(v7, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v21, v7);
    uint64_t v22 = sub_100029E18(&qword_10013EA00);
    uint64_t v23 = type metadata accessor for LogMessage(0LL);
    uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL))
          + *(void *)(*(void *)(v23 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(54LL, 1LL);
    v25._countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v29 = &type metadata for Feature;
    LOBYTE(v28[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v28);
    sub_10004C810((uint64_t)v28);
    v26._countAndFlagsBits = 0xD000000000000036LL;
    v26._object = (void *)0x80000001000FB5E0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.info(_:)(v24, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_10004C150(a1, (uint64_t **)a2);
  }

  return result;
}

uint64_t sub_10004C73C()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for ArcadeSubscriptionManagerFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd32ArcadeSubscriptionManagerFactory);
}

unint64_t sub_10004C76C()
{
  unint64_t result = qword_10013CF20;
  if (!qword_10013CF20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EFD9C, &type metadata for Feature);
    atomic_store(result, (unint64_t *)&qword_10013CF20);
  }

  return result;
}

uint64_t (*sub_10004C7B0(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = swift_allocObject(&unk_1001210A8, 32LL, 7LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10004CB38;
  *(void *)(v2 + 24) = a1;
  swift_retain(a1);
  return sub_10004CB64;
}

uint64_t sub_10004C810(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013C6F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004C850(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  v16[3] = sub_10004CB90();
  v16[4] = &off_1001220A0;
  v16[0] = a3;
  *(void *)(a6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  sub_1000388F0((uint64_t)v16, a6 + 32);
  sub_1000388F0((uint64_t)a4, a6 + 72);
  *(void *)(a6 + 112) = a5;
  id v12 = objc_allocWithZone(&OBJC_CLASS___NSRecursiveLock);
  id v13 = a5;
  *(void *)(a6 + 120) = [v12 init];
  *(void *)(a6 + 128) = 0LL;
  *(_BYTE *)(a6 + 136) = 3;
  uint64_t v14 = sub_100029E18(&qword_10013CF48);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(void *)(a6 + 144) = AsyncEvent.init()();
  [v13 addObserver:a6 selector:"entitlementsDidChange:" name:ASDSubscriptionEntitlementsAppStoreDidChangeNotification object:0];
  sub_100029F4C(a4);
  sub_100029F4C(v16);
  return a6;
}

uint64_t *sub_10004C968(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = sub_100029E18(&qword_10013CF38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2[2] = a1;
  a2[3] = (uint64_t)&off_100121AC8;
  uint64_t v9 = sub_100029E18(&qword_10013CF40);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = swift_unknownObjectRetain(a1);
  a2[4] = AsyncEvent.init()(v10);
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v12 = sub_100029E18(&qword_10013CF48);
  unint64_t v13 = sub_10004CAEC();
  swift_retain(v11);
  dispatch thunk of static EventEmitter.defaultScheduler.getter(v16, v12, v13);
  EventEmitter.addObserver<A>(on:target:method:)(v16, a2, sub_10004C7B0, 0LL, v12, v4, v13);
  swift_release(v11);
  sub_100029F4C(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return a2;
}

unint64_t sub_10004CAA4()
{
  unint64_t result = qword_10013CF30;
  if (!qword_10013CF30)
  {
    uint64_t v1 = type metadata accessor for ASCMigrationArcadeSubscriptionManagerImplementation();
    unint64_t result = swift_getWitnessTable(&unk_1000EED24, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF30);
  }

  return result;
}

unint64_t sub_10004CAEC()
{
  unint64_t result = qword_10013CF50;
  if (!qword_10013CF50)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013CF48);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AsyncEvent<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF50);
  }

  return result;
}

uint64_t sub_10004CB38(uint64_t a1, char a2)
{
  return sub_100060320(a1, a2);
}

uint64_t sub_10004CB40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004CB64(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_10004CB90()
{
  unint64_t result = qword_10013CF58;
  if (!qword_10013CF58)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASDSubscriptionEntitlements);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013CF58);
  }

  return result;
}

uint64_t sub_10004CBCC(uint64_t a1)
{
  uint64_t v2 = v1;
  JSONObject.string.getter(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    id v7 = [v5 initWithStringValue:v6];

    return (uint64_t)v7;
  }

  else
  {
    uint64_t v9 = type metadata accessor for JSONError(0LL);
    unint64_t v10 = sub_100029F04();
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v12 = v11;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v1);
    uint64_t v14 = sub_100029E18(&qword_10013CF60);
    uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    *(void *)(v15 + 32) = swift_allocError(v9, v10, 0LL, 0LL);
    *Swift::String v16 = 0x65756C6156776172LL;
    v16[1] = 0xE800000000000000LL;
    _OWORD v16[2] = MetatypeMetadata;
    Swift::String v17 = *(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104LL);
    v17(v16, enum case for JSONError.missingProperty(_:), v9);
    uint64_t *v12 = MetatypeMetadata;
    v12[1] = v15;
    uint64_t v18 = v17(v12, enum case for JSONError.malformedDocument(_:), v9);
    return swift_willThrow(v18);
  }

uint64_t sub_10004CD44(uint64_t a1)
{
  return sub_10004CBCC(a1);
}

void (*sub_10004CD58(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = [v2 alertButtonOffer];
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = sub_100029E18(&qword_10013C6B0);
    uint64_t v7 = type metadata accessor for ObjectGraph(0LL);
    inject<A, B>(_:from:)(v47, v6, a1, v6, v7);
    sub_100029170(v5, (uint64_t)&v43);
    if (v44)
    {
      sub_10002C438(&v43, (uint64_t)&v45);
      uint64_t v8 = sub_100029E18(&qword_10013CF80);
      uint64_t v9 = (void (*)(uint64_t))swift_allocObject(v8, 144LL, 7LL);
      *((_OWORD *)v9 + 1) = xmmword_1000EDA10;
      sub_100029EE0(v47, v47[3]);
      v10._uint64_t countAndFlagsBits = 0x432E6E6F69746341LL;
      v10._object = (void *)0xED00006C65636E61LL;
      Swift::String v11 = Localizer.string(forKey:)(v10);
      *((_OWORD *)v9 + 3) = 0u;
      *((_OWORD *)v9 + 4) = 0u;
      *((void *)v9 + 10) = 0LL;
      *((Swift::String *)v9 + 2) = v11;
      id v12 = [v2 alertButtonTitle];
      if (v12)
      {
        unint64_t v13 = v12;
        uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        object = v15;

        sub_1000388F0((uint64_t)v47, (uint64_t)&v43);
        if (object)
        {
LABEL_11:
          sub_100029F4C(&v43);
          sub_1000388F0((uint64_t)&v45, (uint64_t)v9 + 104);
          *((void *)v9 + 11) = countAndFlagsBits;
          *((void *)v9 + 12) = object;
          swift_unknownObjectRelease(v5);
          sub_100029F4C(&v45);
          sub_100029F4C(v47);
          return v9;
        }
      }

      else
      {
        sub_1000388F0((uint64_t)v47, (uint64_t)&v43);
      }

      sub_100029EE0(&v43, v44);
      v39._uint64_t countAndFlagsBits = 0x4F2E6E6F69746341LL;
      v39._object = (void *)0xE90000000000004BLL;
      Swift::String v40 = Localizer.string(forKey:)(v39);
      uint64_t countAndFlagsBits = v40._countAndFlagsBits;
      object = v40._object;
      goto LABEL_11;
    }

    sub_10002E92C((uint64_t)&v43, (uint64_t *)&unk_10013CBC0);
    type metadata accessor for ASCAppOfferActionError(0LL);
    uint64_t v24 = v23;
    uint64_t v9 = type metadata accessor for ASCAppOfferActionError;
    *(void *)&__int128 v43 = 2LL;
    uint64_t v25 = sub_100029E18(&qword_10013F670);
    uint64_t inited = swift_initStackObject(v25, v42);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v27;
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    unint64_t v28 = v46;
    uint64_t ObjectType = swift_getObjectType(v5);
    uint64_t v30 = _typeName(_:qualified:)(ObjectType, 0LL);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease(v28);
    uint64_t v45 = v30;
    unint64_t v46 = v32;
    v33._object = (void *)0x80000001000FB070LL;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v33);
    uint64_t v34 = v45;
    unint64_t v35 = v46;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v34;
    *(void *)(inited + 56) = v35;
    unint64_t v36 = sub_100044F60(inited);
    uint64_t v37 = sub_100027978( (unint64_t *)&qword_10013CE80,  (uint64_t (*)(uint64_t))type metadata accessor for ASCAppOfferActionError,  (uint64_t)&unk_1000ED13C);
    uint64_t v38 = _BridgedStoredNSError.init(_:userInfo:)(&v45, &v43, v36, v24, v37);
    swift_willThrow(v38);
    swift_unknownObjectRelease(v5);
    sub_100029F4C(v47);
  }

  else
  {
    id v17 = [v2 alertButtonTitle];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v21 = v20;

      uint64_t v22 = sub_100029E18(&qword_10013CF80);
      uint64_t v9 = (void (*)(uint64_t))swift_allocObject(v22, 88LL, 7LL);
      *((_OWORD *)v9 + 1) = xmmword_1000EDBE0;
      *((_OWORD *)v9 + 3) = 0u;
      *((_OWORD *)v9 + 4) = 0u;
      *((void *)v9 + 10) = 0LL;
      *((void *)v9 + 4) = v19;
      *((void *)v9 + 5) = v21;
    }

    else
    {
      return (void (*)(uint64_t))_swiftEmptyArrayStorage;
    }
  }

  return v9;
}

void *sub_10004D100(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    id v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

id sub_10004D1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v118 = a2;
  uint64_t v2 = sub_100029E18(&qword_10013CF68);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v111 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  unint64_t v114 = (unint64_t)&v100 - v5;
  uint64_t v119 = type metadata accessor for JSONContext(0LL);
  unint64_t v116 = *(void *)(v119 - 8);
  uint64_t v6 = __chkstk_darwin(v119);
  uint64_t v109 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v100 - v8;
  uint64_t v10 = type metadata accessor for JSONObject(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v110 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v107 = (char *)&v100 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v112 = (char *)&v100 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v113 = (char *)&v100 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v100 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v100 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v28 = (char *)&v100 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v100 - v29;
  uint64_t v31 = JSONObject.subscript.getter(0x7469547472656C61LL, 0xEA0000000000656CLL);
  uint64_t v108 = JSONObject.string.getter(v31);
  uint64_t v33 = v32;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v11 + 8);
  v34(v30, v10);
  if (!v33)
  {
    uint64_t v44 = type metadata accessor for JSONError(0LL);
    uint64_t v45 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v44, v45, 0LL, 0LL);
    uint64_t v47 = v46;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v120);
    *(void *)uint64_t v47 = 0x7469547472656C61LL;
    *(void *)(v47 + 8) = 0xEA0000000000656CLL;
LABEL_7:
    *(void *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = MetatypeMetadata;
    uint64_t v51 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104LL))( v47,  enum case for JSONError.missingProperty(_:),  v44);
    return (id)swift_willThrow(v51);
  }

  uint64_t v115 = v33;
  uint64_t v35 = JSONObject.subscript.getter(0x73654D7472656C61LL, 0xEC00000065676173LL);
  uint64_t v103 = JSONObject.string.getter(v35);
  uint64_t v37 = v36;
  uint64_t v105 = v34;
  v34(v28, v10);
  if (!v37)
  {
    swift_bridgeObjectRelease(v115);
    uint64_t v44 = type metadata accessor for JSONError(0LL);
    uint64_t v49 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v44, v49, 0LL, 0LL);
    uint64_t v47 = v50;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v120);
    strcpy((char *)v47, "alertMessage");
    *(_BYTE *)(v47 + 13) = 0;
    *(_WORD *)(v47 + 14) = -5120;
    goto LABEL_7;
  }

  uint64_t v106 = v10;
  uint64_t v104 = v37;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v38 = v116;
  Swift::String v39 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 16);
  uint64_t v40 = v119;
  v39(v9, v118, v119);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v41 = v117;
  uint64_t v42 = (void *)sub_10004CBCC((uint64_t)v25);
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v40);
    v105(v25, v106);
    swift_bridgeObjectRelease(v104);
    uint64_t v43 = v115;
    return (id)swift_bridgeObjectRelease(v43);
  }

  uint64_t v101 = v39;
  uint64_t v102 = 0LL;
  uint64_t v117 = v42;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v40);
  uint64_t v54 = v105;
  uint64_t v53 = v106;
  v105(v25, v106);
  uint64_t v55 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v56 = v114;
  JSONObject.dictionary.getter(v55);
  v54(v22, v53);
  uint64_t v57 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v58 = *(void *)(v57 - 8);
  unint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (v59(v56, 1LL, v57) == 1)
  {
    sub_10002E92C(v56, &qword_10013CF68);
    uint64_t v60 = (uint64_t)v111;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v62 = v61;
    uint64_t v63 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    unint64_t v64 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v62, &type metadata for String, v63);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    uint64_t v60 = (uint64_t)v111;
    if (v64) {
      goto LABEL_12;
    }
  }

  unint64_t v64 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_12:
  uint64_t v65 = v113;
  uint64_t v66 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  JSONObject.dictionary.getter(v66);
  v54(v65, v106);
  unsigned int v67 = v59(v60, 1LL, v57);
  unint64_t v116 = v64;
  if (v67 == 1)
  {
    sub_10002E92C(v60, &qword_10013CF68);
    uint64_t v68 = v119;
    uint64_t v69 = v112;
LABEL_15:
    unint64_t v73 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0LL);
    goto LABEL_16;
  }

  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v71 = v70;
  uint64_t v72 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  unint64_t v73 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v71, &type metadata for String, v72);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v57);
  uint64_t v68 = v119;
  uint64_t v69 = v112;
  if (!v73) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v74 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v75 = JSONObject.int.getter(v74);
  if ((v76 & 1) == 0)
  {
    uint64_t v119 = v75;
    uint64_t v77 = (void (*)(uint64_t, uint64_t))v54;
    unint64_t v114 = v73;
    uint64_t v78 = v106;
    v54(v69, v106);
    uint64_t v79 = v107;
    uint64_t v80 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
    uint64_t v113 = (char *)JSONObject.number.getter(v80);
    v54(v79, v78);
    uint64_t v81 = (uint64_t)v110;
    JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
    uint64_t v82 = v109;
    uint64_t v83 = v118;
    v101(v109, v118, v68);
    uint64_t v84 = sub_100029E18(&qword_10013CF70);
    unint64_t v85 = sub_10004DCA0();
    uint64_t v86 = Array<A>.init(tryDeserializing:using:)(v81, v82, v84, v85);
    uint64_t v87 = sub_10004D100(v86);
    swift_bridgeObjectRelease(v86);
    JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FB6A0LL);
    uint64_t v88 = sub_100029494(v81, v83);
    v54((char *)v81, v78);
    uint64_t v89 = JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FB6C0LL);
    uint64_t v90 = JSONObject.string.getter(v89);
    uint64_t v92 = v91;
    v77(v81, v78);
    id v93 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v120));
    return sub_10004DACC(v117, v116, v114, v119, v113, (uint64_t)v87, v108, v115, v103, v104, v88, v90, v92);
  }

  uint64_t v94 = type metadata accessor for JSONError(0LL);
  uint64_t v95 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
  swift_allocError(v94, v95, 0LL, 0LL);
  uint64_t v97 = v96;
  type metadata accessor for ASCOfferFlags(0LL);
  *uint64_t v97 = 0x65756C6156776172LL;
  v97[1] = 0xE800000000000000LL;
  v97[2] = v98;
  v97[3] = _swiftEmptyArrayStorage;
  uint64_t v99 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v94 - 8) + 104LL))( v97,  enum case for JSONError.malformedProperty(_:),  v94);
  swift_willThrow(v99);
  v54(v69, v106);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v115);

  swift_bridgeObjectRelease(v116);
  uint64_t v43 = v73;
  return (id)swift_bridgeObjectRelease(v43);
}

id sub_10004DAB8(uint64_t a1, uint64_t a2)
{
  return sub_10004D1AC(a1, a2);
}

id sub_10004DACC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v18.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  v19.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  if (a13)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a13);
  }

  else
  {
    NSString v22 = 0LL;
  }

  id v23 = [v25 initWithID:a1 titles:v17.super.isa subtitles:v18.super.isa flags:a4 ageRating:a5 metrics:v19.super.isa alertTitle:v20 alertMessage:v21 alertButtonOffer:a11 alertButtonTitle:v22];

  swift_unknownObjectRelease(a11);
  return v23;
}

unint64_t sub_10004DCA0()
{
  unint64_t result = qword_10013CF78;
  if (!qword_10013CF78)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013CF70);
    unint64_t result = swift_getWitnessTable(&unk_1000F0D98, v1);
    atomic_store(result, (unint64_t *)&qword_10013CF78);
  }

  return result;
}

id sub_10004DCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = a2;
  uint64_t v3 = sub_100029E18(&qword_10013CF68);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v104 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v108 = (unint64_t)&v95 - v6;
  uint64_t v113 = type metadata accessor for JSONContext(0LL);
  uint64_t v111 = *(void *)(v113 - 8);
  uint64_t v7 = __chkstk_darwin(v113);
  uint64_t v103 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v95 - v9;
  uint64_t v11 = type metadata accessor for JSONObject(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v102 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v101 = (char *)&v95 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v105 = (char *)&v95 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v107 = (char *)&v95 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v106 = (char *)&v95 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v95 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v28 = (char *)&v95 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v95 - v29;
  uint64_t v31 = a1;
  uint64_t v32 = JSONObject.subscript.getter(0x6973726556707061LL, 0xEC00000064496E6FLL);
  uint64_t v33 = JSONObject.string.getter(v32);
  uint64_t v35 = v34;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v12 + 8);
  v36(v30, v11);
  if (!v35)
  {
    uint64_t v46 = type metadata accessor for JSONError(0LL);
    uint64_t v47 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v46, v47, 0LL, 0LL);
    uint64_t v49 = v48;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v115);
    *uint64_t v49 = 0x6973726556707061LL;
    unint64_t v51 = 0xEC00000064496E6FLL;
LABEL_7:
    v49[1] = v51;
    v49[2] = MetatypeMetadata;
    uint64_t v54 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v46 - 8) + 104LL))( v49,  enum case for JSONError.missingProperty(_:),  v46);
    return (id)swift_willThrow(v54);
  }

  uint64_t v99 = v33;
  uint64_t v109 = v35;
  uint64_t v37 = JSONObject.subscript.getter(0x7562697274736964LL, 0xED00006449726F74LL);
  uint64_t v98 = JSONObject.string.getter(v37);
  uint64_t v39 = v38;
  uint64_t v40 = v11;
  uint64_t v110 = v36;
  v36(v28, v11);
  if (!v39)
  {
    swift_bridgeObjectRelease(v109);
    uint64_t v46 = type metadata accessor for JSONError(0LL);
    uint64_t v52 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v46, v52, 0LL, 0LL);
    uint64_t v49 = v53;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v115);
    *uint64_t v49 = 0x7562697274736964LL;
    unint64_t v51 = 0xED00006449726F74LL;
    goto LABEL_7;
  }

  uint64_t v100 = v39;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v41 = v111;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
  uint64_t v43 = v113;
  v42(v10, v114, v113);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v44 = v112;
  uint64_t v97 = (void *)sub_10004CBCC((uint64_t)v25);
  uint64_t v112 = v44;
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v43);
    v110(v25, v40);
    swift_bridgeObjectRelease(v100);
    return (id)swift_bridgeObjectRelease(v109);
  }

  uint64_t v96 = v42;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v43);
  uint64_t v55 = v110;
  v110(v25, v40);
  uint64_t v56 = v106;
  uint64_t v111 = v31;
  uint64_t v57 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v58 = v108;
  JSONObject.dictionary.getter(v57);
  uint64_t v59 = v40;
  v55(v56, v40);
  uint64_t v60 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  if (v62(v58, 1LL, v60) == 1)
  {
    sub_10004E728(v58);
    uint64_t v63 = (uint64_t)v104;
    unint64_t v64 = v105;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v66 = v65;
    uint64_t v67 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v68 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v66, &type metadata for String, v67);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v58, v60);
    uint64_t v63 = (uint64_t)v104;
    unint64_t v64 = v105;
    unint64_t v108 = v68;
    if (v68) {
      goto LABEL_13;
    }
  }

  unint64_t v108 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_13:
  uint64_t v69 = v107;
  uint64_t v70 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  JSONObject.dictionary.getter(v70);
  v110(v69, v59);
  if (v62(v63, 1LL, v60) == 1)
  {
    sub_10004E728(v63);
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v72 = v71;
    uint64_t v73 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    unint64_t v74 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v72, &type metadata for String, v73);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v60);
    if (v74) {
      goto LABEL_17;
    }
  }

  unint64_t v74 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_17:
  uint64_t v75 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v76 = JSONObject.int.getter(v75);
  if ((v77 & 1) != 0)
  {
    uint64_t v89 = type metadata accessor for JSONError(0LL);
    uint64_t v90 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v89, v90, 0LL, 0LL);
    uint64_t v92 = v91;
    type metadata accessor for ASCOfferFlags(0LL);
    void *v92 = 0x65756C6156776172LL;
    v92[1] = 0xE800000000000000LL;
    v92[2] = v93;
    v92[3] = _swiftEmptyArrayStorage;
    uint64_t v94 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v89 - 8) + 104LL))( v92,  enum case for JSONError.malformedProperty(_:),  v89);
    swift_willThrow(v94);
    v110(v64, v59);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v109);

    swift_bridgeObjectRelease(v108);
    return (id)swift_bridgeObjectRelease(v74);
  }

  else
  {
    uint64_t v78 = v76;
    uint64_t v79 = v110;
    v110(v64, v59);
    uint64_t v80 = v101;
    uint64_t v81 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
    uint64_t v82 = (void *)JSONObject.number.getter(v81);
    v79(v80, v59);
    uint64_t v83 = v102;
    JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
    uint64_t v84 = v103;
    v96(v103, v114, v113);
    uint64_t v85 = sub_100029E18(&qword_10013CF70);
    unint64_t v86 = sub_10004DCA0();
    uint64_t v87 = Array<A>.init(tryDeserializing:using:)(v83, v84, v85, v86);
    uint64_t v88 = sub_10004D100(v87);
    swift_bridgeObjectRelease(v87);
    return sub_10004E574(v97, v108, v74, v78, v82, (uint64_t)v88, v99, v109, v98, v100);
  }

id sub_10004E574( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  id v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11));
  type metadata accessor for ASCOfferTitleVariant(0LL);
  sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  Class v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  id v22 = [v24 initWithID:a1 titles:isa subtitles:v18 flags:a4 ageRating:a5 metrics:v19 appVersionId:v20 distributorId:v21];

  return v22;
}

id sub_10004E714(uint64_t a1, uint64_t a2)
{
  return sub_10004DCEC(a1, a2);
}

uint64_t sub_10004E728(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013CF68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_10004E768(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v12 = _swiftEmptyArrayStorage;
    unint64_t result = sub_100090144(0LL, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0LL;
    uint64_t v3 = v12;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      sub_1000570E8((unint64_t *)v11);

      uint64_t v12 = v3;
      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_100090144((char *)(v8 > 1), v9 + 1, 1);
        uint64_t v3 = v12;
      }

      ++v5;
      v3[2] = v9 + 1;
      sub_1000445E4(v11, &v3[4 * v9 + 4]);
      if (v2 == v5) {
        return (char *)v3;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }

  __break(1u);
  return result;
}

uint64_t sub_10004E8C0()
{
  id v1 = [v0 baseBuyParams];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  unint64_t v4 = v3;

  swift_bridgeObjectRelease(v4);
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    id v6 = [v0 baseBuyParams];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    uint64_t v10 = sub_10005141C(0LL, 1LL, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v12 = *((void *)v10 + 2);
    unint64_t v11 = *((void *)v10 + 3);
    if (v12 >= v11 >> 1) {
      uint64_t v10 = sub_10005141C((char *)(v11 > 1), v12 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v12 + 1;
    uint64_t v13 = &v10[16 * v12];
    *((void *)v13 + 4) = v7;
    *((void *)v13 + 5) = v9;
  }

  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }

  id v14 = [v0 metricsBuyParams];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  unint64_t v17 = v16;

  swift_bridgeObjectRelease(v17);
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    id v19 = [v0 metricsBuyParams];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      uint64_t v10 = sub_10005141C(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    }
    unint64_t v24 = *((void *)v10 + 2);
    unint64_t v23 = *((void *)v10 + 3);
    if (v24 >= v23 >> 1) {
      uint64_t v10 = sub_10005141C((char *)(v23 > 1), v24 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v24 + 1;
    uint64_t v25 = &v10[16 * v24];
    *((void *)v25 + 4) = v20;
    *((void *)v25 + 5) = v22;
  }

  uint64_t v26 = sub_100029E18((uint64_t *)&unk_10013EF60);
  uint64_t v27 = sub_100044410( (unint64_t *)&qword_10013CF88,  (uint64_t *)&unk_10013EF60,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v28 = BidirectionalCollection<>.joined(separator:)(38LL, 0xE100000000000000LL, v26, v27);
  swift_bridgeObjectRelease(v10);
  return v28;
}

BOOL sub_10004EAFC()
{
  return ([v0 flags] & 4) == 0
}

id sub_10004EB64(uint64_t a1, void *a2)
{
  v195 = a2;
  uint64_t v3 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v3);
  v183 = (char *)&v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v5);
  uint64_t v184 = (uint64_t)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100029E18(&qword_10013CF68);
  uint64_t v8 = __chkstk_darwin(v7);
  v181 = (char *)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  v186 = (char *)&v161 - v11;
  __chkstk_darwin(v10);
  uint64_t v189 = (uint64_t)&v161 - v12;
  uint64_t v194 = type metadata accessor for JSONContext(0LL);
  unint64_t v192 = *(void *)(v194 - 8);
  uint64_t v13 = __chkstk_darwin(v194);
  v178 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  v191 = (void (**)(uint64_t, uint64_t))((char *)&v161 - v15);
  uint64_t v16 = type metadata accessor for JSONObject(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v182 = (char *)&v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  v179 = (char *)&v161 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v177 = (char *)&v161 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v176 = (char *)&v161 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v175 = (char *)&v161 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v187 = (char *)&v161 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v185 = (char *)&v161 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v188 = (char *)&v161 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  unint64_t v190 = (unint64_t)&v161 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v161 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v161 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v161 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)&v161 - v46;
  __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v161 - v48;
  uint64_t v50 = JSONObject.subscript.getter(0x5079754265736162LL, 0xED0000736D617261LL);
  uint64_t v180 = JSONObject.string.getter(v50);
  uint64_t v52 = v51;
  uint64_t v53 = *(void (**)(char *, uint64_t))(v17 + 8);
  v53(v49, v16);
  if (!v52)
  {
    uint64_t v78 = type metadata accessor for JSONError(0LL);
    uint64_t v79 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v78, v79, 0LL, 0LL);
    uint64_t v81 = v80;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v197);
    strcpy((char *)v81, "baseBuyParams");
    *(_WORD *)(v81 + 14) = -4864;
LABEL_14:
    *(void *)(v81 + swift_unknownObjectWeakDestroy(v0 + 16) = MetatypeMetadata;
    uint64_t v91 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v78 - 8) + 104LL))( v81,  enum case for JSONError.missingProperty(_:),  v78);
    return (id)swift_willThrow(v91);
  }

  uint64_t v196 = v52;
  uint64_t v54 = JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FB6E0LL);
  uint64_t v173 = JSONObject.string.getter(v54);
  uint64_t v56 = v55;
  v53(v47, v16);
  if (!v56)
  {
    swift_bridgeObjectRelease(v196);
    uint64_t v78 = type metadata accessor for JSONError(0LL);
    uint64_t v83 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v78, v83, 0LL, 0LL);
    uint64_t v81 = v84;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v197);
    *(void *)uint64_t v81 = 0xD000000000000010LL;
    *(void *)(v81 + 8) = 0x80000001000FB6E0LL;
    goto LABEL_14;
  }

  uint64_t v174 = v56;
  uint64_t v57 = JSONObject.subscript.getter(0x4449656C646E7562LL, 0xE800000000000000LL);
  uint64_t v58 = JSONObject.string.getter(v57);
  uint64_t v60 = v59;
  v53(v44, v16);
  if (!v60)
  {
    swift_bridgeObjectRelease(v174);
    swift_bridgeObjectRelease(v196);
    uint64_t v78 = type metadata accessor for JSONError(0LL);
    uint64_t v85 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v78, v85, 0LL, 0LL);
    uint64_t v81 = v86;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v197);
    *(void *)uint64_t v81 = 0x4449656C646E7562LL;
    *(void *)(v81 + 8) = 0xE800000000000000LL;
    goto LABEL_14;
  }

  uint64_t v169 = v58;
  unint64_t v61 = 0xE800000000000000LL;
  uint64_t v62 = JSONObject.subscript.getter(0x656D614E6D657469LL, 0xE800000000000000LL);
  uint64_t v63 = JSONObject.string.getter(v62);
  uint64_t v65 = v64;
  v53(v41, v16);
  if (!v65)
  {
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v174);
    swift_bridgeObjectRelease(v196);
    uint64_t v78 = type metadata accessor for JSONError(0LL);
    uint64_t v87 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v78, v87, 0LL, 0LL);
    uint64_t v81 = v88;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v197);
    *(void *)uint64_t v81 = 0x656D614E6D657469LL;
LABEL_13:
    *(void *)(v81 + 8) = v61;
    goto LABEL_14;
  }

  uint64_t v166 = v63;
  uint64_t v170 = v60;
  unint64_t v61 = 0xEA0000000000656DLL;
  uint64_t v66 = JSONObject.subscript.getter(0x614E726F646E6576LL, 0xEA0000000000656DLL);
  uint64_t v67 = JSONObject.string.getter(v66);
  uint64_t v69 = v68;
  uint64_t v171 = v16;
  v172 = (void (*)(uint64_t, uint64_t))v53;
  v53(v38, v16);
  if (!v69)
  {
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v170);
    swift_bridgeObjectRelease(v174);
    swift_bridgeObjectRelease(v196);
    uint64_t v78 = type metadata accessor for JSONError(0LL);
    uint64_t v89 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v78, v89, 0LL, 0LL);
    uint64_t v81 = v90;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v197);
    *(void *)uint64_t v81 = 0x614E726F646E6576LL;
    goto LABEL_13;
  }

  uint64_t v165 = v67;
  uint64_t v167 = v69;
  uint64_t v168 = v65;
  uint64_t v70 = v190;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v72 = (char *)v191;
  uint64_t v71 = v192;
  uint64_t v73 = *(void (**)(void (**)(uint64_t, uint64_t), void *, uint64_t))(v192 + 16);
  uint64_t v74 = v194;
  v73(v191, v195, v194);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v75 = v193;
  uint64_t v76 = (void *)sub_10004CBCC(v70);
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v74);
    v172(v70, v171);
    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(v170);
    swift_bridgeObjectRelease(v174);
    uint64_t v77 = v196;
    return (id)swift_bridgeObjectRelease(v77);
  }

  id v163 = v76;
  v162 = (void (*)(char *, void *, uint64_t))v73;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v74);
  uint64_t v93 = v171;
  uint64_t v94 = (void (*)(char *, uint64_t))v172;
  v172(v70, v171);
  uint64_t v95 = v188;
  uint64_t v96 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v97 = v189;
  JSONObject.dictionary.getter(v96);
  uint64_t v98 = v97;
  v94(v95, v93);
  uint64_t v99 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v100 = *(char **)(v99 - 8);
  v193 = (uint64_t (*)(void, void, void))*((void *)v100 + 6);
  int v101 = v193(v98, 1LL, v99);
  uint64_t v164 = a1;
  v191 = (void (**)(uint64_t, uint64_t))v100;
  if (v101 == 1)
  {
    uint64_t v102 = v99;
    sub_10002E92C(v98, &qword_10013CF68);
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v104 = v103;
    uint64_t v105 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    unint64_t v106 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v104, &type metadata for String, v105);
    uint64_t v107 = (void (*)(uint64_t, uint64_t))*((void *)v100 + 1);
    uint64_t v102 = v99;
    v107(v98, v99);
    if (v106) {
      goto LABEL_20;
    }
  }

  unint64_t v106 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_20:
  uint64_t v109 = (uint64_t)v186;
  unint64_t v108 = v187;
  uint64_t v110 = v185;
  uint64_t v112 = v194;
  uint64_t v111 = v195;
  uint64_t v113 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  JSONObject.dictionary.getter(v113);
  v172((uint64_t)v110, v171);
  uint64_t v114 = v102;
  int v115 = v193(v109, 1LL, v102);
  unint64_t v192 = v106;
  if (v115 == 1)
  {
    sub_10002E92C(v109, &qword_10013CF68);
LABEL_23:
    unint64_t v119 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0LL);
    goto LABEL_24;
  }

  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v117 = v116;
  uint64_t v118 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  unint64_t v119 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v117, &type metadata for String, v118);
  v191[1](v109, v102);
  if (!v119) {
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v120 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v121 = JSONObject.int.getter(v120);
  if ((v122 & 1) != 0)
  {
    unint64_t v138 = v119;
    uint64_t v139 = type metadata accessor for JSONError(0LL);
    uint64_t v140 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v139, v140, 0LL, 0LL);
    unint64_t v142 = v141;
    type metadata accessor for ASCOfferFlags(0LL);
    *unint64_t v142 = 0x65756C6156776172LL;
    v142[1] = 0xE800000000000000LL;
    v142[2] = v143;
    v142[3] = _swiftEmptyArrayStorage;
    uint64_t v144 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v139 - 8) + 104LL))( v142,  enum case for JSONError.malformedProperty(_:),  v139);
    swift_willThrow(v144);
    v172((uint64_t)v108, v171);
    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v168);
    swift_bridgeObjectRelease(v170);
    swift_bridgeObjectRelease(v174);
    swift_bridgeObjectRelease(v196);

    swift_bridgeObjectRelease(v192);
    uint64_t v77 = v138;
    return (id)swift_bridgeObjectRelease(v77);
  }

  uint64_t v189 = v121;
  unint64_t v190 = v119;
  uint64_t v123 = v171;
  uint64_t v124 = (void (*)(char *, uint64_t))v172;
  v172((uint64_t)v108, v171);
  uint64_t v125 = v175;
  uint64_t v126 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
  v188 = (char *)JSONObject.number.getter(v126);
  v124(v125, v123);
  v127 = v176;
  JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
  uint64_t v128 = v112;
  uint64_t v129 = v178;
  v162(v178, v111, v128);
  uint64_t v130 = sub_100029E18(&qword_10013CF70);
  uint64_t v131 = sub_100044410((unint64_t *)&qword_10013CF78, &qword_10013CF70, (uint64_t)&unk_1000F0D98);
  uint64_t v132 = Array<A>.init(tryDeserializing:using:)(v127, v129, v130, v131);
  v195 = sub_10004D100(v132);
  swift_bridgeObjectRelease(v132);
  uint64_t v133 = v114;
  uint64_t v134 = v177;
  uint64_t v135 = JSONObject.subscript.getter(0xD000000000000011LL, 0x80000001000FB720LL);
  uint64_t v136 = (uint64_t)v181;
  JSONObject.dictionary.getter(v135);
  v124(v134, v123);
  if (v193(v136, 1LL, v133) == 1)
  {
    sub_10002E92C(v136, &qword_10013CF68);
    uint64_t v137 = 0LL;
  }

  else
  {
    uint64_t v137 = JSONDictionary.bridgedPrimitiveValues<A, B>()( &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    v191[1](v136, v133);
  }

  uint64_t v145 = v179;
  uint64_t v146 = JSONObject.subscript.getter(0xD000000000000013LL, 0x80000001000FB700LL);
  JSONObject.url.getter(v146);
  uint64_t v147 = v171;
  v148 = (void (*)(char *, uint64_t))v172;
  v172((uint64_t)v145, v171);
  uint64_t v149 = v182;
  uint64_t v150 = JSONObject.subscript.getter(0x696C696261706163LL, 0xEC00000073656974LL);
  uint64_t v151 = v183;
  JSONObject.array.getter(v150);
  uint64_t v152 = v147;
  id v153 = v163;
  v148(v149, v152);
  uint64_t v154 = (uint64_t)v151;
  uint64_t v155 = type metadata accessor for JSONArray(0LL);
  uint64_t v156 = *(void *)(v155 - 8);
  int v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v154, 1LL, v155);
  uint64_t v158 = v170;
  if (v157 == 1)
  {
    sub_10002E92C(v154, (uint64_t *)&unk_10013CFD0);
    uint64_t v159 = 0LL;
  }

  else
  {
    uint64_t v159 = JSONArray.compactMap<A>(_:)(sub_10004FAF0, 0LL, &type metadata for String);
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v154, v155);
  }

  id v160 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v197));
  return sub_10004730C( v153,  v192,  v190,  v189,  v188,  (uint64_t)v195,  v180,  v196,  v173,  v174,  v137,  v184,  v169,  v158,  v166,  v168,  v165,  v167,  v159);
}

uint64_t sub_10004FAF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = JSONObject.string.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_10004FB28(uint64_t a1, void *a2)
{
  return sub_10004EB64(a1, a2);
}

uint64_t sub_10004FB3C()
{
  uint64_t v1 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100029E18(&qword_10013CF90);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100029E18(&qword_10013CF98);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = 0x2F2F3A7370747468LL;
  uint64_t v66 = 0xE90000000000003FLL;
  id v11 = [v0 baseBuyParams];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  __n128 v16 = swift_bridgeObjectRelease(v14);
  uint64_t v17 = v66;
  URLComponents.init(string:)(v65, v66, v16);
  __n128 v18 = swift_bridgeObjectRelease(v17);
  uint64_t v19 = type metadata accessor for URLComponents(0LL, v18);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1LL, v19) == 1)
  {
    sub_10002E92C((uint64_t)v7, &qword_10013CF90);
    return 0LL;
  }

  uint64_t v21 = URLComponents.queryItems.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
  if (!v21) {
    return 0LL;
  }
  uint64_t v64 = v10;
  uint64_t v23 = *(void *)(v21 + 16);
  if (v23)
  {
    unint64_t v24 = 0xEB00000000644973LL;
    unint64_t v25 = v21 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v26 = *(void *)(v2 + 72);
    uint64_t v27 = v21;
    uint64_t v28 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v2 + 16);
    unint64_t v63 = v27;
    swift_bridgeObjectRetain(v27);
    while (1)
    {
      uint64_t v29 = v28(v4, v25, v1);
      uint64_t v30 = URLQueryItem.name.getter(v29);
      uint64_t v32 = v31;
      if (v30 == 0x7256747845707061LL && v31 == 0xEB00000000644973LL)
      {
        uint64_t v21 = v63;
        swift_bridgeObjectRelease(v63);
        goto LABEL_14;
      }

      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0x7256747845707061LL, 0xEB00000000644973LL, 0LL);
      __n128 v34 = swift_bridgeObjectRelease(v32);
      if ((v33 & 1) != 0) {
        break;
      }
      (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v34);
      v25 += v26;
      if (!--v23)
      {
        uint64_t v21 = v63;
        __n128 v22 = swift_bridgeObjectRelease(v63);
        goto LABEL_11;
      }
    }

    uint64_t v21 = v63;
    unint64_t v24 = v63;
LABEL_14:
    __n128 v37 = swift_bridgeObjectRelease(v24);
    uint64_t v36 = (uint64_t)v64;
    (*(void (**)(char *, char *, uint64_t, __n128))(v2 + 32))(v64, v4, v1, v37);
    uint64_t v35 = 0LL;
  }

  else
  {
LABEL_11:
    uint64_t v35 = 1LL;
    uint64_t v36 = (uint64_t)v64;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v2 + 56))(v36, v35, 1LL, v1, v22);
  __n128 v38 = swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v2 + 48))(v36, 1LL, v1, v38) == 1)
  {
    sub_10002E92C(v36, &qword_10013CF98);
    return 0LL;
  }

  uint64_t v39 = URLQueryItem.value.getter();
  unint64_t v41 = v40;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v36, v1);
  if (!v41) {
    return 0LL;
  }
  uint64_t v43 = HIBYTE(v41) & 0xF;
  uint64_t v44 = v39 & 0xFFFFFFFFFFFFLL;
  if ((v41 & 0x2000000000000000LL) != 0) {
    uint64_t v45 = HIBYTE(v41) & 0xF;
  }
  else {
    uint64_t v45 = v39 & 0xFFFFFFFFFFFFLL;
  }
  if (!v45)
  {
    swift_bridgeObjectRelease(v41);
    return 0LL;
  }

  if ((v41 & 0x1000000000000000LL) == 0)
  {
    if ((v41 & 0x2000000000000000LL) == 0)
    {
      if ((v39 & 0x1000000000000000LL) != 0) {
        uint64_t v46 = (unsigned __int8 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v46 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v39, v41);
      }
      uint64_t v47 = (uint64_t)sub_100050978(v46, v44, 10LL);
      char v49 = v48 & 1;
      goto LABEL_61;
    }

    uint64_t v65 = v39;
    uint64_t v66 = v41 & 0xFFFFFFFFFFFFFFLL;
    if (v39 == 43)
    {
      if (!v43) {
        goto LABEL_75;
      }
      uint64_t v47 = (BYTE1(v39) - 48);
      if (v43 != 2)
      {
        uint64_t v47 = 10LL * (BYTE1(v39) - 48) + (BYTE2(v39) - 48);
        uint64_t v50 = v43 - 3;
        if (v50)
        {
          uint64_t v51 = (unsigned __int8 *)&v65 + 3;
          while (1)
          {
            unsigned int v52 = *v51 - 48;
            if (v52 > 9) {
              goto LABEL_48;
            }
            uint64_t v53 = 10 * v47;
            uint64_t v47 = v53 + v52;
            char v49 = 0;
            ++v51;
            if (!--v50) {
              goto LABEL_61;
            }
          }
        }
      }
    }

    else
    {
      if (v39 == 45)
      {
        if (v43)
        {
          if (v43 != 1 && (BYTE1(v39) - 48) <= 9u)
          {
            if (v43 == 2)
            {
              char v49 = 0;
              uint64_t v47 = -(uint64_t)(BYTE1(v39) - 48);
              goto LABEL_61;
            }

            if ((BYTE2(v39) - 48) <= 9u)
            {
              uint64_t v47 = -10LL * (BYTE1(v39) - 48) - (BYTE2(v39) - 48);
              uint64_t v58 = v43 - 3;
              if (!v58) {
                goto LABEL_60;
              }
              uint64_t v59 = (unsigned __int8 *)&v65 + 3;
              while (1)
              {
                unsigned int v60 = *v59 - 48;
                if (v60 > 9) {
                  break;
                }
                uint64_t v61 = 10 * v47;
                uint64_t v47 = v61 - v60;
                char v49 = 0;
                ++v59;
                if (!--v58) {
                  goto LABEL_61;
                }
              }
            }
          }

LABEL_48:
          uint64_t v47 = 0LL;
          char v49 = 1;
          goto LABEL_61;
        }

        __break(1u);
LABEL_75:
        __break(1u);
        return result;
      }

      uint64_t v47 = (v39 - 48);
      if (v43 != 1)
      {
        uint64_t v47 = 10LL * (v39 - 48) + (BYTE1(v39) - 48);
        uint64_t v54 = v43 - 2;
        if (v54)
        {
          uint64_t v55 = (unsigned __int8 *)&v65 + 2;
          while (1)
          {
            unsigned int v56 = *v55 - 48;
            if (v56 > 9) {
              goto LABEL_48;
            }
            uint64_t v57 = 10 * v47;
            uint64_t v47 = v57 + v56;
            char v49 = 0;
            ++v55;
            if (!--v54) {
              goto LABEL_61;
            }
          }
        }
      }
    }

              sub_10002EB74(v4);
              swift_retain(a4);
              sub_100090A7C(a1, a2, v41, a4);
              return;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_60:
    char v49 = 0;
    goto LABEL_61;
  }

  uint64_t v47 = (uint64_t)sub_100050894(v39, v41, 10LL);
  char v49 = v62;
LABEL_61:
  swift_bridgeObjectRelease(v41);
  if ((v49 & 1) != 0) {
    return 0LL;
  }
  else {
    return v47;
  }
}

        unint64_t v24 = v54;
        swift_bridgeObjectRetain(v54);
        uint64_t v72 = sub_10008D45C(v36, v35);
        uint64_t v74 = v73;
        swift_bridgeObjectRelease(v54);
        if ((v74 & 1) != 0)
        {
          uint64_t v75 = swift_isUniquelyReferenced_nonNull_native(v54);
          *(void *)&v107[0] = v54;
          if ((v75 & 1) == 0)
          {
            sub_10005CA74();
            unint64_t v24 = *(void **)&v107[0];
          }

          swift_bridgeObjectRelease(*(void *)(v24[6] + 16 * v72 + 8));
          sub_1000445E4((_OWORD *)(v24[7] + 32 * v72), &v113);
          sub_10005C1A4(v72, (uint64_t)v24);
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        else
        {
          uint64_t v113 = 0u;
          uint64_t v114 = 0u;
        }

        sub_10004C810((uint64_t)&v113);
        sub_100029F4C(&v117);
        swift_bridgeObjectRelease(v35);
        uint64_t v23 = v103;
        goto LABEL_10;
      }
    }

unint64_t sub_100050130()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v78 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v75 = (char *)&v74 - v9;
  uint64_t v10 = State.overrideBuyParams.getter(v8);
  uint64_t v79 = v5;
  uint64_t v77 = v4;
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    swift_bridgeObjectRelease(v13);
  }

  id v14 = [v0 baseBuyParams];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v13 = v15;

LABEL_5:
  uint64_t v16 = sub_100029E18(&qword_10013F670);
  uint64_t inited = swift_initStackObject(v16, &v84);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EE6E0;
  *(void *)(inited + 32) = 25705LL;
  *(void *)(inited + 40) = 0xE200000000000000LL;
  id v18 = [v1 id];
  id v19 = [v18 stringValue];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v22;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x73656C746974LL;
  *(void *)(inited + 88) = 0xE600000000000000LL;
  id v23 = [v1 titles];
  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v25 = v24;
  uint64_t v26 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v25, &type metadata for String, v26);

  uint64_t v28 = sub_100029E18(&qword_10013CFC0);
  *(void *)(inited + 96) = v27;
  *(void *)(inited + 120) = v28;
  *(void *)(inited + 128) = 0x656C746974627573LL;
  *(void *)(inited + 136) = 0xE900000000000073LL;
  id v29 = [v1 subtitles];
  uint64_t v30 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v29, v25, &type metadata for String, v26);

  *(void *)(inited + 144) = v30;
  *(void *)(inited + 168) = v28;
  *(void *)(inited + 176) = 0x7367616C66LL;
  *(void *)(inited + 184) = 0xE500000000000000LL;
  *(void *)(inited + 192) = [v1 flags];
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
  *(void *)(inited + 224) = 0x7363697274656DLL;
  *(void *)(inited + 232) = 0xE700000000000000LL;
  id v31 = [v1 metrics];
  uint64_t v32 = sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

  __n128 v34 = sub_10004E768(v33);
  swift_bridgeObjectRelease(v33);
  uint64_t v35 = sub_100029E18((uint64_t *)&unk_10013F910);
  *(void *)(inited + 240) = v34;
  *(void *)(inited + 264) = v35;
  strcpy((char *)(inited + 272), "baseBuyParams");
  *(_WORD *)(inited + 286) = -4864;
  *(void *)(inited + 288) = v12;
  *(void *)(inited + 296) = v13;
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 320) = 0xD000000000000010LL;
  *(void *)(inited + 328) = 0x80000001000FB6E0LL;
  id v36 = [v1 metricsBuyParams];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;

  *(void *)(inited + 336) = v37;
  *(void *)(inited + 344) = v39;
  *(void *)(inited + 360) = &type metadata for String;
  *(void *)(inited + 368) = 0x4449656C646E7562LL;
  *(void *)(inited + 376) = 0xE800000000000000LL;
  id v40 = [v1 bundleID];
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v43 = v42;

  *(void *)(inited + 384) = v41;
  *(void *)(inited + 392) = v43;
  *(void *)(inited + 408) = &type metadata for String;
  *(void *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 16) = 0x656D614E6D657469LL;
  *(void *)(inited + 424) = 0xE800000000000000LL;
  id v44 = [v1 itemName];
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  uint64_t v47 = v46;

  *(void *)(inited + 432) = v45;
  *(void *)(inited + 440) = v47;
  *(void *)(inited + 456) = &type metadata for String;
  *(void *)(inited + 464) = 0x614E726F646E6576LL;
  *(void *)(inited + 472) = 0xEA0000000000656DLL;
  id v48 = [v1 vendorName];
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  uint64_t v51 = v50;

  *(void *)(inited + 504) = &type metadata for String;
  *(void *)(inited + 480) = v49;
  *(void *)(inited + 488) = v51;
  unint64_t v52 = sub_100044F60(inited);
  id v53 = [v1 additionalHeaders];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v53,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

    uint64_t v83 = (void *)sub_100029E18(&qword_10013C720);
    *(void *)&__int128 v82 = v55;
    sub_1000445E4(&v82, v81);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
    unint64_t v80 = v52;
    sub_10008F6E0(v81, 0xD000000000000011LL, 0x80000001000FB720LL, isUniquelyReferenced_nonNull_native);
    unint64_t v52 = v80;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v58 = v78;
  uint64_t v57 = v79;
  uint64_t v59 = (uint64_t)v77;
  id v60 = [v1 preflightPackageURL];
  if (v60)
  {
    uint64_t v61 = v60;
    char v62 = v76;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v63 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
    v63(v59, v62, v57);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0LL, 1LL, v57);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1LL, v57) != 1)
    {
      uint64_t v64 = v75;
      uint64_t v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)(v75, v59, v57);
      uint64_t v66 = URL.absoluteString.getter(v65);
      uint64_t v83 = &type metadata for String;
      *(void *)&__int128 v82 = v66;
      *((void *)&v82 + 1) = v67;
      sub_1000445E4(&v82, v81);
      char v68 = swift_isUniquelyReferenced_nonNull_native(v52);
      unint64_t v80 = v52;
      sub_10008F6E0(v81, 0xD000000000000013LL, 0x80000001000FB700LL, v68);
      unint64_t v52 = v80;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
      goto LABEL_12;
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, 1LL, 1LL, v57);
  }

  sub_10002E92C(v59, &qword_10013EE90);
LABEL_12:
  id v69 = [v1 ageRating];
  if (v69)
  {
    uint64_t v70 = v69;
    uint64_t v83 = (void *)sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
    *(void *)&__int128 v82 = v70;
    sub_1000445E4(&v82, v81);
    id v71 = v70;
    char v72 = swift_isUniquelyReferenced_nonNull_native(v52);
    unint64_t v80 = v52;
    sub_10008F6E0(v81, 0x6E69746152656761LL, 0xE900000000000067LL, v72);
    unint64_t v52 = v80;

    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v52;
}

unsigned __int8 *sub_10005087C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_100050978(a1, a2, a3);
}

unsigned __int8 *sub_100050894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_100050BF4(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease(v7);
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

unsigned __int8 *sub_100050978(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  id v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100050BF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_100050C70(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100050C70(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_100050DB4(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_100050EA0(v12, 0LL);
      unint64_t v5 = sub_100050F04((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

LABEL_11:
      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    char *v25 = a3;
    v25[1] = a4;
    unsigned int v26 = (void *)(v20[7] + 16 * v14);
    os_unfair_lock_s *v26 = a1;
    v26[1] = a2;
    char v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    id v29 = v27 + 1;
    if (!v28)
    {
      void v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }

    goto LABEL_14;
  }

  sub_10008DEDC(v17, a5 & 1);
  unsigned __int8 v23 = sub_10008D45C(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    char v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    unsigned int v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    char v20 = v16[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    unsigned __int8 v22 = v20 + 1;
    if (!v21)
    {
      _OWORD v16[2] = v22;
      return result;
    }

    goto LABEL_14;
  }

  sub_10008E828(result, a3 & 1);
  uint64_t result = sub_10008D53C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    uint64_t v10 = result;
    unsigned __int8 v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v19[(v13 >> 6) + 8] |= 1LL << v13;
    *(void *)(v19[6] + 8 * v13) = a4;
    unsigned __int8 v23 = (void *)(v19[7] + 24 * v13);
    *unsigned __int8 v23 = a1;
    v23[1] = a2;
    v23[2] = a3;
    unsigned __int8 v24 = v19[2];
    uint64_t v25 = __OFADD__(v24, 1LL);
    unsigned int v26 = v24 + 1;
    if (!v25)
    {
      v19[2] = v26;
      char v27 = a4;
      return;
    }

    goto LABEL_14;
  }

  sub_10008EADC(v16, a5 & 1);
  uint64_t v21 = sub_10008D4F0((uint64_t)a4);
  if ((v17 & 1) == (v22 & 1))
  {
    uint64_t v13 = v21;
    unsigned int v19 = (void *)*v6;
    if ((v17 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v19[(v13 >> 6) + 8] |= 1LL << v13;
    *(void *)(v19[6] + 8 * v13) = a4;
    unsigned __int8 v24 = v19[7] + 24 * v13;
    *(void *)unsigned __int8 v24 = a1;
    *(void *)(v24 + 8) = a2;
    *(_BYTE *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    uint64_t v25 = v19[2];
    unsigned int v26 = __OFADD__(v25, 1LL);
    char v27 = v25 + 1;
    if (!v26)
    {
      v19[2] = v27;
      return a4;
    }

    goto LABEL_14;
  }

  sub_10008E534(v16, a5 & 1);
  unsigned __int8 v22 = sub_10008D4F0((uint64_t)a4);
  if ((v17 & 1) == (v23 & 1))
  {
    uint64_t v13 = v22;
    unsigned int v19 = (void *)*v6;
    if ((v17 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    unsigned int v19 = 8 * v9;
    *(void *)(v15[6] + v19) = a2;
    *(void *)(v15[7] + v19) = a1;
    char v20 = v15[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    unsigned __int8 v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      unsigned __int8 v23 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_10008F410(v12, a3 & 1);
  unsigned __int8 v17 = sub_10008D630((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    uint64_t v9 = v17;
    unsigned __int8 v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    swift_once(&qword_10013BC48, sub_1000D1558);
    goto LABEL_4;
  }

  if (v11 != -1) {
    swift_once(&qword_10013BC48, sub_1000D1558);
  }
  unsigned int v19 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v19, (uint64_t)qword_100148618);
  char v20 = sub_100029E18(&qword_10013EA00);
  uint64_t v21 = type metadata accessor for LogMessage(0LL);
  unsigned __int8 v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
        + *(void *)(*(void *)(v21 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(38LL, 1LL);
  v23._uint64_t countAndFlagsBits = 0LL;
  v23._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  LogMessage.StringInterpolation.appendInterpolation(identity:)(a1);
  v24._uint64_t countAndFlagsBits = 0xD000000000000026LL;
  v24._object = (void *)0x80000001000FDC80LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  LogMessage.init(stringInterpolation:)(v9);
  Logger.debug(_:)(v22, v19, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v22);
  uint64_t v25 = (char *)a1 + *(void *)(*a1 + 120LL);
  swift_beginAccess(v25, v27, 0LL, 0LL);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v25, v3);
  LODWORD(v25) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v6, 1LL, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((_DWORD)v25 != 1) {
    sub_100098C54();
  }
}

    swift_once(&qword_10013BC48, sub_1000D1558);
    goto LABEL_4;
  }

  if (v6 != -1) {
    swift_once(&qword_10013BC48, sub_1000D1558);
  }
  uint64_t v14 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v14, (uint64_t)qword_100148618);
  unsigned __int8 v15 = sub_100029E18(&qword_10013EA00);
  unsigned __int8 v16 = type metadata accessor for LogMessage(0LL);
  unsigned __int8 v17 = swift_allocObject( v15,  ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL))
        + *(void *)(*(void *)(v16 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(38LL, 1LL);
  v18._uint64_t countAndFlagsBits = 0LL;
  v18._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  LogMessage.StringInterpolation.appendInterpolation(identity:)(a1);
  v19._uint64_t countAndFlagsBits = 0xD000000000000026LL;
  v19._object = (void *)0x80000001000FDC80LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.debug(_:)(v17, v14, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v17);
  swift_beginAccess(a1 + 56, v21, 0LL, 0LL);
  if (*(void *)(a1 + 56)) {
    sub_1000B4AD0();
  }
}

  id v44 = &type metadata for String;
  *(void *)&uint64_t v43 = countAndFlagsBits;
  *((void *)&v43 + 1) = v13;
  sub_1000445E4(&v43, v42);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
  uint64_t v41 = v45;
  uint64_t v45 = (void *)0x8000000000000000LL;
  sub_10008F6E0(v42, 0x707954746E657665LL, 0xE900000000000065LL, isUniquelyReferenced_nonNull_native);
  uint64_t v33 = v45;
  uint64_t v45 = v41;
  swift_bridgeObjectRelease(v33);
}

  uint64_t v10 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t ObjectType = swift_getObjectType(v10);
  v15[0] = v6;
  v15[1] = v5;
  unsigned __int8 v16 = v7;
  v14[0] = 0xD000000000000023LL;
  v14[1] = 0x80000001001019A0LL;
  swift_bridgeObjectRetain(v5);
  unint64_t v12 = sub_100029E18(&qword_100140180);
  uint64_t v13 = sub_100044410(&qword_100140188, &qword_100140180, (uint64_t)&unk_1000EF758);
  return Preferences.subscript.setter(v15, v14, ObjectType, v12, v9, v13);
}

unint64_t sub_100050DB4( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_100051114(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100051114(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

void *sub_100050EA0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100029E18(&qword_10013CFA0);
  unint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_100050F04( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100051114(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_100051114(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_100051114(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

size_t sub_10005118C(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100029E18(&qword_10013EA00);
  uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  uint64_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = type metadata accessor for LogMessage(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  char v20 = (char *)v15 + v19;
  uint64_t v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }

  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

void *sub_100051300(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013C6F8);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    _OWORD v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    type metadata accessor for AMSMediaTaskPlatform(0LL);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005141C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013CCD0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005151C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013CFA8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for AppState_V1);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100051630(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013CFB0);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _OWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100029E18(&qword_10013CFB8);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100051764(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013CFC8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for XPCConnectionOwner.ActiveConnection);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100051864()
{
  id v1 = v0;
  return v0;
}

uint64_t sub_10005187C(uint64_t a1, uint64_t a2)
{
  return sub_1000518AC(a1, a2, (SEL *)&selRef_subscribedOffer);
}

uint64_t sub_100051888(uint64_t a1, uint64_t a2)
{
  return sub_1000518AC(a1, a2, (SEL *)&selRef_buyOffer);
}

uint64_t sub_100051894(uint64_t a1, uint64_t a2)
{
  return sub_1000518AC(a1, a2, (SEL *)&selRef_alertButtonOffer);
}

uint64_t sub_1000518A0(uint64_t a1, uint64_t a2)
{
  return sub_1000518AC(a1, a2, (SEL *)&selRef_completionOffer);
}

uint64_t sub_1000518AC(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [v3 *a3];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v7 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (v7) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v9)
  {
    uint64_t v10 = swift_getObjectType(v9);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    swift_unknownObjectRetain(v5);
    uint64_t v9 = v11(v10, v8);
    swift_unknownObjectRelease(v5);
  }

  swift_unknownObjectRelease(v5);
  return v9;
}

char *sub_100051954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100029E18(&qword_10013CF68);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v109 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v108 = (char *)&v98 - v6;
  uint64_t v7 = type metadata accessor for JSONContext(0LL);
  unint64_t v112 = *(void *)(v7 - 8);
  uint64_t v113 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v104 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v98 - v10;
  uint64_t v12 = type metadata accessor for JSONObject(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v103 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v106 = (char *)&v98 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v105 = (char *)&v98 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v107 = (char *)&v98 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unsigned __int8 v24 = (char *)&v98 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v98 - v25;
  JSONObject.subscript.getter(0xD000000000000012LL, 0x80000001000FB740LL);
  uint64_t v27 = sub_100029494((uint64_t)v26, a2);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v26, v12);
  if (!v27)
  {
    uint64_t v26 = (char *)type metadata accessor for JSONError(0LL);
    uint64_t v35 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    uint64_t v36 = swift_allocError(v26, v35, 0LL, 0LL);
    uint64_t v38 = v37;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v114);
    *uint64_t v38 = 0xD000000000000012LL;
    v38[1] = 0x80000001000FB740LL;
    v38[2] = MetatypeMetadata;
    uint64_t v40 = (*(uint64_t (**)(void *, void, char *))(*((void *)v26 - 1) + 104LL))( v38,  enum case for JSONError.missingProperty(_:),  v26);
    uint64_t v115 = v36;
    swift_willThrow(v40);
    return v26;
  }

  uint64_t v110 = v27;
  JSONObject.subscript.getter(0x6269726373627573LL, 0xEF726566664F6465LL);
  uint64_t v29 = sub_100029494((uint64_t)v26, a2);
  uint64_t v102 = v12;
  uint64_t v111 = v28;
  v28(v26, v12);
  uint64_t v101 = v29;
  if (!v29)
  {
    uint64_t v26 = (char *)type metadata accessor for JSONError(0LL);
    uint64_t v41 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    uint64_t v42 = swift_allocError(v26, v41, 0LL, 0LL);
    id v44 = v43;
    uint64_t v45 = swift_getMetatypeMetadata(v114);
    *id v44 = 0x6269726373627573LL;
    v44[1] = 0xEF726566664F6465LL;
    v44[2] = v45;
    uint64_t v46 = (*(uint64_t (**)(void *, void, char *))(*((void *)v26 - 1) + 104LL))( v44,  enum case for JSONError.missingProperty(_:),  v26);
    uint64_t v115 = v42;
    swift_willThrow(v46);
LABEL_20:
    swift_unknownObjectRelease(v110);
    return v26;
  }

  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  unint64_t v31 = v112;
  uint64_t v30 = v113;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v112 + 16);
  v32(v11, a2, v113);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v33 = v115;
  __n128 v34 = (void *)sub_10004CBCC((uint64_t)v24);
  uint64_t v115 = v33;
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
    v111(v24, v102);
LABEL_19:
    swift_unknownObjectRelease(v101);
    goto LABEL_20;
  }

  uint64_t v98 = a2;
  uint64_t v99 = v32;
  id v100 = v34;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  uint64_t v47 = v102;
  id v48 = v111;
  v111(v24, v102);
  uint64_t v49 = v107;
  uint64_t v50 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v51 = (uint64_t)v108;
  JSONObject.dictionary.getter(v50);
  v48(v49, v47);
  uint64_t v52 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v54(v51, 1LL, v52) == 1)
  {
    sub_10004E728(v51);
    uint64_t v55 = v105;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v57 = v56;
    uint64_t v58 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v59 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v57, &type metadata for String, v58);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
    uint64_t v55 = v105;
    if (v59)
    {
      unint64_t v112 = v59;
      goto LABEL_12;
    }
  }

  unint64_t v112 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_12:
  uint64_t v60 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  uint64_t v61 = (uint64_t)v109;
  JSONObject.dictionary.getter(v60);
  v111(v55, v47);
  if (v54(v61, 1LL, v52) == 1)
  {
    sub_10004E728(v61);
    char v62 = v106;
    unint64_t v63 = v99;
LABEL_15:
    unint64_t v67 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0LL);
    goto LABEL_16;
  }

  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v65 = v64;
  uint64_t v66 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  unint64_t v67 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v65, &type metadata for String, v66);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v61, v52);
  char v62 = v106;
  unint64_t v63 = v99;
  if (!v67) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v68 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v69 = JSONObject.int.getter(v68);
  if ((v70 & 1) != 0)
  {
    uint64_t v26 = (char *)type metadata accessor for JSONError(0LL);
    uint64_t v91 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    uint64_t v92 = swift_allocError(v26, v91, 0LL, 0LL);
    uint64_t v94 = v93;
    type metadata accessor for ASCOfferFlags(0LL);
    *uint64_t v94 = 0x65756C6156776172LL;
    v94[1] = 0xE800000000000000LL;
    v94[2] = v95;
    v94[3] = _swiftEmptyArrayStorage;
    uint64_t v96 = (*(uint64_t (**)(void *, void, char *))(*((void *)v26 - 1) + 104LL))( v94,  enum case for JSONError.malformedProperty(_:),  v26);
    uint64_t v115 = v92;
    swift_willThrow(v96);
    v111(v62, v47);

    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v67);
    goto LABEL_19;
  }

  uint64_t v109 = (char *)v69;
  id v71 = v62;
  char v72 = v111;
  v111(v71, v47);
  uint64_t v73 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
  unint64_t v108 = (char *)JSONObject.number.getter(v73);
  v72(v26, v47);
  uint64_t v74 = v103;
  JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
  uint64_t v75 = v104;
  v63(v104, v98, v113);
  uint64_t v76 = sub_100029E18(&qword_10013CF70);
  unint64_t v77 = sub_10004DCA0();
  uint64_t v78 = Array<A>.init(tryDeserializing:using:)(v74, v75, v76, v77);
  uint64_t v79 = v115;
  unint64_t v80 = sub_10004D100(v78);
  uint64_t v115 = v79;
  swift_bridgeObjectRelease(v78);
  id v81 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v114));
  type metadata accessor for ASCOfferTitleVariant(0LL);
  sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  uint64_t v82 = v101;
  unint64_t v83 = v112;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v83);
  Class v85 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v67);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  Class v86 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v80);
  uint64_t v87 = v110;
  uint64_t v88 = v81;
  id v89 = v100;
  uint64_t v90 = v108;
  uint64_t v26 = (char *)[v88 initWithID:v100 titles:isa subtitles:v85 flags:v109 ageRating:v108 metrics:v86 notSubscribedOffer:v110 subscribedOffer:v82];

  swift_unknownObjectRelease(v87);
  swift_unknownObjectRelease(v82);
  return v26;
}

char *sub_100052290(uint64_t a1, uint64_t a2)
{
  return sub_100051954(a1, a2);
}

void *sub_1000522A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v71 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  char v72 = (char *)&v70 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v70 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v70 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v70 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v70 - v17;
  uint64_t v19 = JSONObject.subscript.getter(0x6C706D65546C7275LL, 0xEB00000000657461LL);
  uint64_t v70 = JSONObject.string.getter(v19);
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v18, v2);
  if (!v21)
  {
    uint64_t v35 = (void *)type metadata accessor for JSONError(0LL);
    uint64_t v38 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v38, 0LL, 0LL);
    uint64_t v40 = v39;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v1);
    uint64_t *v40 = 0x6C706D65546C7275LL;
    unint64_t v42 = 0xEB00000000657461LL;
LABEL_10:
    v40[1] = v42;
LABEL_11:
    v40[2] = MetatypeMetadata;
    uint64_t v45 = (unsigned int *)&enum case for JSONError.missingProperty(_:);
LABEL_14:
    uint64_t v50 = (*(uint64_t (**)(uint64_t *, void, void *))(*(v35 - 1) + 104LL))(v40, *v45, v35);
    swift_willThrow(v50);
    return v35;
  }

  uint64_t v74 = v1;
  uint64_t v75 = v21;
  uint64_t v23 = 0x6874646977LL;
  uint64_t v24 = JSONObject.subscript.getter(0x6874646977LL, 0xE500000000000000LL);
  double v25 = COERCE_DOUBLE(JSONObject.double.getter(v24));
  char v27 = v26;
  v22(v16, v2);
  if ((v27 & 1) != 0)
  {
    swift_bridgeObjectRelease(v75);
    uint64_t v35 = (void *)type metadata accessor for JSONError(0LL);
    uint64_t v43 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v43, 0LL, 0LL);
    uint64_t v40 = v44;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v74);
    uint64_t *v40 = 0x6874646977LL;
    unint64_t v42 = 0xE500000000000000LL;
    goto LABEL_10;
  }

  double v28 = v25;
  if (v25 <= 0.0)
  {
    swift_bridgeObjectRelease(v75);
    uint64_t v35 = (void *)type metadata accessor for JSONError(0LL);
    uint64_t v46 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v46, 0LL, 0LL);
    uint64_t v40 = v47;
    uint64_t v48 = swift_getMetatypeMetadata(v74);
    unint64_t v49 = 0xE500000000000000LL;
LABEL_13:
    uint64_t *v40 = v23;
    v40[1] = v49;
    v40[2] = v48;
    v40[3] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v45 = (unsigned int *)&enum case for JSONError.malformedProperty(_:);
    goto LABEL_14;
  }

  uint64_t v23 = 0x746867696568LL;
  uint64_t v29 = JSONObject.subscript.getter(0x746867696568LL, 0xE600000000000000LL);
  double v30 = COERCE_DOUBLE(JSONObject.double.getter(v29));
  char v32 = v31;
  v22(v13, v2);
  if ((v32 & 1) != 0)
  {
    swift_bridgeObjectRelease(v75);
    uint64_t v35 = (void *)type metadata accessor for JSONError(0LL);
    uint64_t v52 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v52, 0LL, 0LL);
    uint64_t v40 = v53;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v74);
    uint64_t *v40 = 0x746867696568LL;
    v40[1] = 0xE600000000000000LL;
    goto LABEL_11;
  }

  double v33 = v30;
  if (v30 <= 0.0)
  {
    swift_bridgeObjectRelease(v75);
    uint64_t v35 = (void *)type metadata accessor for JSONError(0LL);
    uint64_t v54 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v54, 0LL, 0LL);
    uint64_t v40 = v55;
    uint64_t v48 = swift_getMetatypeMetadata(v74);
    unint64_t v49 = 0xE600000000000000LL;
    goto LABEL_13;
  }

  JSONObject.subscript.getter(0x697461726F636564LL, 0xEA00000000006E6FLL);
  type metadata accessor for Decoration(0LL);
  uint64_t v35 = v34;
  uint64_t v36 = sub_100027978( &qword_10013C018,  (uint64_t (*)(uint64_t))type metadata accessor for Decoration,  (uint64_t)&unk_1000ED08C);
  uint64_t v37 = v73;
  JSONObject.stringEnum<A>()(&v76, v35, v36);
  v22(v10, v2);
  if (v37)
  {
    swift_bridgeObjectRelease(v75);
  }

  else
  {
    uint64_t v56 = v76;
    uint64_t v57 = v72;
    JSONObject.subscript.getter(0x6572726566657270LL, 0xED0000706F724364LL);
    type metadata accessor for Crop(0LL);
    uint64_t v59 = v58;
    uint64_t v60 = sub_100027978( &qword_10013C030,  (uint64_t (*)(uint64_t))type metadata accessor for Crop,  (uint64_t)&unk_1000ED054);
    JSONObject.stringEnum<A>()(&v76, v59, v60);
    v22(v57, v2);
    uint64_t v61 = v76;
    char v62 = v71;
    JSONObject.subscript.getter(0x6572726566657270LL, 0xEF74616D726F4664LL);
    type metadata accessor for Format(0LL);
    uint64_t v64 = v63;
    uint64_t v65 = sub_100027978( &qword_10013C048,  (uint64_t (*)(uint64_t))type metadata accessor for Format,  (uint64_t)&unk_1000ED01C);
    JSONObject.stringEnum<A>()(&v76, v64, v65);
    v22(v62, v2);
    uint64_t v66 = v76;
    id v67 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v74));
    uint64_t v68 = v75;
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v68);
    uint64_t v35 = [v67 initWithURLTemplate:v69 width:v56 height:v61 decoration:v66 preferredCrop:v28 preferredFormat:v33];
  }

  return v35;
}

void *sub_100052928()
{
  return sub_1000522A4();
}

void sub_10005293C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CF68);
  uint64_t v5 = __chkstk_darwin(v4);
  v162 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v165 = (uint64_t)&v148 - v7;
  uint64_t v170 = type metadata accessor for JSONContext(0LL);
  uint64_t v168 = *(void *)(v170 - 8);
  uint64_t v8 = __chkstk_darwin(v170);
  uint64_t v159 = (char *)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v167 = (unint64_t)&v148 - v10;
  uint64_t v11 = type metadata accessor for JSONObject(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v160 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v158 = (char *)&v148 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v161 = (char *)&v148 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v164 = (char *)&v148 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  id v163 = (char *)&v148 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v166 = (char *)&v148 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v171 = (char *)&v148 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v172 = (char *)&v148 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  char v31 = (char *)&v148 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  __n128 v34 = (char *)&v148 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v148 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v148 - v38;
  JSONObject.subscript.getter(0x4F63696E6167726FLL, 0xEC00000072656666LL);
  uint64_t v175 = a2;
  uint64_t v40 = sub_100029494((uint64_t)v39, a2);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v12 + 8);
  v41(v39, v11);
  if (!v40)
  {
    uint64_t v44 = type metadata accessor for JSONError(0LL);
    uint64_t v45 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v44, v45, 0LL, 0LL);
    uint64_t v47 = v46;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v176);
    strcpy((char *)v47, "organicOffer");
    *(_BYTE *)(v47 + 13) = 0;
    *(_WORD *)(v47 + 14) = -5120;
    *(void *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = MetatypeMetadata;
    uint64_t v49 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104LL))( v47,  enum case for JSONError.missingProperty(_:),  v44);
    swift_willThrow(v49);
    return;
  }

  uint64_t v174 = v40;
  uint64_t v42 = JSONObject.subscript.getter(0x6D61657274537369LL, 0xED000064656E696CLL);
  char v43 = JSONObject.BOOL.getter(v42);
  v41(v37, v11);
  if ((v43 & 1) != 0)
  {
    JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FB760LL);
    uint64_t v173 = sub_100029494((uint64_t)v39, v175);
    v41(v39, v11);
  }

  else
  {
    uint64_t v173 = 0LL;
  }

  unint64_t v50 = 0xE700000000000000LL;
  uint64_t v51 = JSONObject.subscript.getter(0x4449726566666FLL, 0xE700000000000000LL);
  uint64_t v52 = JSONObject.string.getter(v51);
  uint64_t v54 = v53;
  v41(v34, v11);
  if (!v54)
  {
    uint64_t v75 = type metadata accessor for JSONError(0LL);
    uint64_t v76 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v75, v76, 0LL, 0LL);
    uint64_t v78 = v77;
    uint64_t v79 = swift_getMetatypeMetadata(v176);
    *uint64_t v78 = 0x4449726566666FLL;
LABEL_14:
    v78[1] = v50;
    v78[2] = v79;
    uint64_t v82 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v75 - 8) + 104LL))( v78,  enum case for JSONError.missingProperty(_:),  v75);
    swift_willThrow(v82);
LABEL_19:
    swift_unknownObjectRelease(v174);
    swift_unknownObjectRelease(v173);
    return;
  }

  uint64_t v157 = v54;
  unint64_t v50 = 0xE900000000000044LL;
  uint64_t v55 = JSONObject.subscript.getter(0x496D657449706169LL, 0xE900000000000044LL);
  uint64_t v56 = (void *)JSONObject.number.getter(v55);
  v41(v31, v11);
  if (!v56)
  {
    swift_bridgeObjectRelease(v157);
    uint64_t v75 = type metadata accessor for JSONError(0LL);
    uint64_t v80 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v75, v80, 0LL, 0LL);
    uint64_t v78 = v81;
    uint64_t v79 = swift_getMetatypeMetadata(v176);
    *uint64_t v78 = 0x496D657449706169LL;
    goto LABEL_14;
  }

  uint64_t v156 = v56;
  uint64_t v154 = v52;
  uint64_t v155 = v39;
  uint64_t v57 = v172;
  uint64_t v58 = JSONObject.subscript.getter(0x4E6D657449706169LL, 0xEB00000000656D61LL);
  uint64_t v59 = JSONObject.string.getter(v58);
  uint64_t v61 = v60;
  v41(v57, v11);
  uint64_t v62 = v176;
  if (!v61)
  {
    swift_bridgeObjectRelease(v157);
    uint64_t v83 = type metadata accessor for JSONError(0LL);
    uint64_t v84 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v83, v84, 0LL, 0LL);
    uint64_t v86 = v85;
    uint64_t v87 = swift_getMetatypeMetadata(v62);
    *(void *)uint64_t v86 = 0x4E6D657449706169LL;
    *(void *)(v86 + 8) = 0xEB00000000656D61LL;
LABEL_17:
    *(void *)(v86 + swift_unknownObjectWeakDestroy(v0 + 16) = v87;
    uint64_t v90 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v83 - 8) + 104LL))( v86,  enum case for JSONError.missingProperty(_:),  v83);
    swift_willThrow(v90);
LABEL_18:

    goto LABEL_19;
  }

  uint64_t v63 = v171;
  uint64_t v64 = JSONObject.subscript.getter(0x75646F7250706169LL, 0xEE00656D614E7463LL);
  uint64_t v151 = JSONObject.string.getter(v64);
  uint64_t v66 = v65;
  uint64_t v171 = (char *)v11;
  v172 = (char *)v41;
  v41(v63, v11);
  if (!v66)
  {
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v157);
    uint64_t v83 = type metadata accessor for JSONError(0LL);
    uint64_t v88 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v83, v88, 0LL, 0LL);
    uint64_t v86 = v89;
    uint64_t v87 = swift_getMetatypeMetadata(v62);
    strcpy((char *)v86, "iapProductName");
    *(_BYTE *)(v86 + 15) = -18;
    goto LABEL_17;
  }

  uint64_t v152 = v66;
  uint64_t v153 = v61;
  uint64_t v67 = (uint64_t)v166;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v69 = v167;
  uint64_t v68 = v168;
  uint64_t v70 = *(void (**)(unint64_t, uint64_t, uint64_t))(v168 + 16);
  uint64_t v71 = v175;
  uint64_t v72 = v170;
  v70(v167, v175, v170);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v73 = v169;
  uint64_t v74 = (void *)sub_10004CBCC(v67);
  uint64_t v169 = v73;
  if (v73)
  {
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v72);
    ((void (*)(uint64_t, char *))v172)(v67, v171);
    swift_bridgeObjectRelease(v152);
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v157);

    swift_unknownObjectRelease(v174);
    swift_unknownObjectRelease(v173);
    return;
  }

  uint64_t v91 = a1;
  id v150 = v74;
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v72);
  uint64_t v92 = v171;
  uint64_t v93 = (void (*)(char *, char *))v172;
  ((void (*)(uint64_t, char *))v172)(v67, v171);
  uint64_t v94 = v163;
  uint64_t v168 = v91;
  uint64_t v95 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v96 = v165;
  JSONObject.dictionary.getter(v95);
  v93(v94, v92);
  uint64_t v97 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  int v100 = v99(v96, 1LL, v97);
  uint64_t v149 = v59;
  if (v100 == 1)
  {
    sub_10004E728(v96);
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v102 = v101;
    uint64_t v103 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    unint64_t v104 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v102, &type metadata for String, v103);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v96, v97);
    if (v104) {
      goto LABEL_25;
    }
  }

  unint64_t v104 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_25:
  uint64_t v105 = (uint64_t)v162;
  unint64_t v106 = v164;
  uint64_t v107 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  JSONObject.dictionary.getter(v107);
  ((void (*)(char *, char *))v172)(v106, v171);
  int v108 = v99(v105, 1LL, v97);
  unint64_t v167 = v104;
  if (v108 == 1)
  {
    sub_10004E728(v105);
    uint64_t v109 = v161;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v111 = v110;
    uint64_t v112 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    unint64_t v113 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v111, &type metadata for String, v112);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v105, v97);
    uint64_t v109 = v161;
    if (v113) {
      goto LABEL_29;
    }
  }

  unint64_t v113 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_29:
  uint64_t v114 = v176;
  uint64_t v115 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v116 = JSONObject.int.getter(v115);
  if ((v117 & 1) != 0)
  {
    uint64_t v136 = type metadata accessor for JSONError(0LL);
    uint64_t v137 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v136, v137, 0LL, 0LL);
    uint64_t v139 = v138;
    type metadata accessor for ASCOfferFlags(0LL);
    *uint64_t v139 = 0x65756C6156776172LL;
    v139[1] = 0xE800000000000000LL;
    v139[2] = v140;
    v139[3] = _swiftEmptyArrayStorage;
    uint64_t v141 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v136 - 8) + 104LL))( v139,  enum case for JSONError.malformedProperty(_:),  v136);
    swift_willThrow(v141);
    ((void (*)(char *, char *))v172)(v109, v171);
    swift_bridgeObjectRelease(v152);
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v157);

    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v113);
    goto LABEL_18;
  }

  uint64_t v165 = v116;
  unint64_t v176 = v113;
  uint64_t v118 = v109;
  uint64_t v120 = v171;
  unint64_t v119 = (void (*)(char *, char *))v172;
  ((void (*)(char *, char *))v172)(v118, v171);
  uint64_t v121 = v158;
  uint64_t v122 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
  uint64_t v166 = (char *)JSONObject.number.getter(v122);
  v119(v121, v120);
  uint64_t v123 = v155;
  JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
  uint64_t v124 = v159;
  v70((unint64_t)v159, v71, v170);
  uint64_t v125 = sub_100029E18(&qword_10013CF70);
  unint64_t v126 = sub_10004DCA0();
  uint64_t v127 = Array<A>.init(tryDeserializing:using:)(v123, v124, v125, v126);
  uint64_t v128 = sub_10004D100(v127);
  swift_bridgeObjectRelease(v127);
  uint64_t v129 = v160;
  uint64_t v130 = JSONObject.subscript.getter(0x707954726566666FLL, 0xE900000000000065LL);
  uint64_t v131 = JSONObject.int.getter(v130);
  id v132 = v150;
  if ((v133 & 1) != 0)
  {
    uint64_t v142 = type metadata accessor for JSONError(0LL);
    uint64_t v143 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v142, v143, 0LL, 0LL);
    uint64_t v145 = v144;
    type metadata accessor for ASCContingentOfferType(0LL);
    *uint64_t v145 = 0x65756C6156776172LL;
    v145[1] = 0xE800000000000000LL;
    v145[2] = v146;
    v145[3] = _swiftEmptyArrayStorage;
    uint64_t v147 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v142 - 8) + 104LL))( v145,  enum case for JSONError.malformedProperty(_:),  v142);
    swift_willThrow(v147);
    v119(v129, v120);
    swift_bridgeObjectRelease(v152);
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v157);
    swift_bridgeObjectRelease(v128);

    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v176);

    swift_unknownObjectRelease(v174);
    swift_unknownObjectRelease(v173);
  }

  else
  {
    uint64_t v134 = v131;
    v119(v129, v120);
    id v135 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v114));
    sub_10005379C( v132,  v167,  v176,  v165,  v166,  (uint64_t)v128,  v174,  v173,  v154,  v157,  v156,  v149,  v153,  v151,  v152,  v134);
  }

void sub_100053788(uint64_t a1, uint64_t a2)
{
}

id sub_10005379C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a13);
  NSString v23 = String._bridgeToObjectiveC()();
  id v32 = objc_msgSend( v30,  "initWithID:titles:subtitles:flags:ageRating:metrics:organicOffer:streamlinedOffer:offerID:iapItemID:iapItemNam e:iapProductName:offerType:",  a1,  isa,  v26,  a4,  a5,  v20,  swift_bridgeObjectRelease(a15).n128_f64[0],  a7,  a8,  v21,  a11,  v22,  v23,  a16);

  swift_unknownObjectRelease(a7);
  swift_unknownObjectRelease(a8);

  return v32;
}

void *sub_1000539A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = JSONObject.subscript.getter(1701667182LL, 0xE400000000000000LL);
  JSONObject.string.getter(v9);
  uint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  if (!v11)
  {
    uint64_t v19 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v20 = sub_100029F04();
    swift_allocError(v19, v20, 0LL, 0LL);
    NSString v22 = v21;
    *NSString v21 = 1701667182LL;
    v21[1] = 0xE400000000000000LL;
LABEL_6:
    void v21[2] = v1;
    uint64_t v24 = (*(uint64_t (**)(void *, void, void *))(*(v19 - 1) + 104LL))( v22,  enum case for JSONError.missingProperty(_:),  v19);
    swift_willThrow(v24);
    return v19;
  }

  uint64_t v13 = JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  JSONObject.string.getter(v13);
  uint64_t v15 = v14;
  v12(v6, v2);
  if (!v15)
  {
    swift_bridgeObjectRelease(v11);
    uint64_t v19 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v23 = sub_100029F04();
    swift_allocError(v19, v23, 0LL, 0LL);
    NSString v22 = v21;
    *NSString v21 = 25705LL;
    v21[1] = 0xE200000000000000LL;
    goto LABEL_6;
  }

  id v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v19 = objc_msgSend(v16, "initWithName:identifier:", v17, v18, swift_bridgeObjectRelease(v15).n128_f64[0]);

  return v19;
}

void *sub_100053BD4()
{
  return sub_1000539A8();
}

unint64_t sub_100053BE8(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"gameCenter");
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6) {
    goto LABEL_15;
  }
  uint64_t v8 = v6;
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
  {
LABEL_6:
    uint64_t v10 = &off_10011F5E0;
    return sub_100045094((uint64_t)v10);
  }

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"gameCenterArcade");
  uint64_t v4 = v12;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v11 == v13 && v4 == v14)
  {
LABEL_15:
    uint64_t v10 = &off_10011F5E0;
    goto LABEL_16;
  }

  uint64_t v16 = v14;
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v4, v13, v14, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"safariExtension");
  uint64_t v4 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v22 = v20;
  if (v18 == v21 && v4 == v20)
  {
    uint64_t v10 = &off_10011F620;
LABEL_16:
    swift_bridgeObjectRelease_n(v4, 2LL);
    return sub_100045094((uint64_t)v10);
  }

  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v21, v20, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v22);
  if ((v24 & 1) != 0)
  {
    uint64_t v10 = &off_10011F620;
    return sub_100045094((uint64_t)v10);
  }

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"signInWithApple");
  uint64_t v4 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v29 = v27;
  if (v25 == v28 && v4 == v27)
  {
    uint64_t v10 = &off_10011F660;
    goto LABEL_16;
  }

  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v4, v28, v27, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v29);
  if ((v30 & 1) != 0)
  {
    uint64_t v10 = &off_10011F660;
    return sub_100045094((uint64_t)v10);
  }

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"singleSignOn");
  uint64_t v4 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v35 = v33;
  if (v31 == v34 && v4 == v33)
  {
    uint64_t v10 = &off_10011F6A0;
    goto LABEL_16;
  }

  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v4, v34, v33, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v35);
  if ((v36 & 1) != 0)
  {
    uint64_t v10 = &off_10011F6A0;
    return sub_100045094((uint64_t)v10);
  }

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"wallet");
  uint64_t v4 = v38;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v41 = v39;
  if (v37 == v40 && v4 == v39)
  {
    uint64_t v10 = &off_10011F700;
    goto LABEL_16;
  }

  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v4, v40, v39, 0LL);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v41);
  if ((v42 & 1) != 0)
  {
    uint64_t v10 = &off_10011F700;
    return sub_100045094((uint64_t)v10);
  }

  return 0LL;
}

void sub_100053EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v4);
  uint64_t v97 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for JSONArray(0LL);
  uint64_t v98 = *(void *)(v6 - 8);
  uint64_t v99 = v6;
  __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)type metadata accessor for JSONContext(0LL);
  uint64_t v9 = *(v8 - 1);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v94 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v82 - v12;
  uint64_t v14 = type metadata accessor for JSONObject(0LL);
  uint64_t v104 = *(void *)(v14 - 8);
  uint64_t v105 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v101 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v96 = (uint64_t)&v82 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v95 = (uint64_t)&v82 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v82 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v82 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v82 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v102 = (char *)&v82 - v31;
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v82 - v32;
  uint64_t v103 = a1;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, void *))(v9 + 16);
  uint64_t v107 = v8;
  uint64_t v35 = v8;
  char v36 = v34;
  v34((uint64_t)v13, a2, v35);
  sub_10005462C();
  uint64_t v37 = v106;
  uint64_t v38 = (void *)sub_10004CBCC((uint64_t)v33);
  if (v37)
  {
    (*(void (**)(char *, void *))(v9 + 8))(v13, v107);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v33, v105);
  }

  else
  {
    uint64_t v89 = v26;
    uint64_t v90 = v23;
    uint64_t v91 = v29;
    uint64_t v92 = a2;
    unint64_t v106 = v38;
    (*(void (**)(char *, void *))(v9 + 8))(v13, v107);
    uint64_t v39 = v105;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v104 + 8);
    v40(v33, v105);
    uint64_t v41 = v102;
    JSONObject.subscript.getter(1684957547LL, 0xE400000000000000LL);
    type metadata accessor for Kind(0LL);
    uint64_t v43 = v42;
    unint64_t v44 = sub_100054668();
    JSONObject.stringEnum<A>()(&v109, v43, v44);
    uint64_t v104 = 0LL;
    v40(v41, v39);
    uint64_t v102 = v109;
    uint64_t v45 = sub_100029E18(&qword_10013CFE8);
    uint64_t v84 = (void (*)(uint64_t, uint64_t))v40;
    uint64_t v46 = v36;
    uint64_t v47 = (uint64_t)v91;
    JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
    uint64_t v48 = v94;
    uint64_t v49 = v92;
    unint64_t v50 = v107;
    v46(v94, v92, v107);
    uint64_t v51 = sub_100029FB0(&qword_10013CFF0, &qword_10013CFE8);
    ExpressibleByJSON.init(tryDeserializing:using:)(v108, v47, v48, v45, v51);
    uint64_t v88 = (void *)v108[0];
    uint64_t v52 = sub_100029E18(&qword_10013CFF8);
    JSONObject.subscript.getter(1852793705LL, 0xE400000000000000LL);
    v46(v48, v49, v50);
    uint64_t v53 = v84;
    uint64_t v54 = sub_100029FB0((unint64_t *)&qword_10013D000, &qword_10013CFF8);
    ExpressibleByJSON.init(tryDeserializing:using:)(v108, v47, v48, v52, v54);
    uint64_t v107 = (void *)v108[0];
    uint64_t v55 = (uint64_t)v89;
    uint64_t v56 = JSONObject.subscript.getter(0x676E6964616568LL, 0xE700000000000000LL);
    uint64_t v94 = JSONObject.string.getter(v56);
    uint64_t v87 = v57;
    v53(v55, v39);
    uint64_t v58 = (uint64_t)v90;
    uint64_t v59 = JSONObject.subscript.getter(0x656C746974LL, 0xE500000000000000LL);
    uint64_t v89 = (char *)JSONObject.string.getter(v59);
    uint64_t v86 = v60;
    v53(v58, v39);
    uint64_t v61 = v95;
    uint64_t v62 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE800000000000000LL);
    uint64_t v90 = (char *)JSONObject.string.getter(v62);
    uint64_t v85 = v63;
    v53(v61, v39);
    uint64_t v64 = v96;
    uint64_t v65 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
    uint64_t v95 = JSONObject.string.getter(v65);
    uint64_t v83 = v66;
    v53(v64, v39);
    JSONObject.subscript.getter(0x726566666FLL, 0xE500000000000000LL);
    uint64_t v96 = sub_100029494(v47, v49);
    v53(v47, v39);
    uint64_t v67 = v101;
    uint64_t v68 = JSONObject.subscript.getter(0x7365727574616566LL, 0xE800000000000000LL);
    uint64_t v69 = (uint64_t)v97;
    JSONObject.array.getter(v68);
    uint64_t v71 = v98;
    uint64_t v70 = v99;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v69, 1LL, v99) == 1)
    {
      sub_100054854(v69);
      uint64_t v72 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v73 = v93;
      uint64_t v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 32))(v93, v69, v70);
      __chkstk_darwin(v74);
      uint64_t v75 = v70;
      _OWORD v81[2] = v49;
      uint64_t v76 = sub_100029E18((uint64_t *)&unk_10013D0C0);
      uint64_t v77 = v104;
      uint64_t v72 = (void *)JSONArray.compactMap<A>(_:)(sub_100054894, v81, v76);
      uint64_t v104 = v77;
      uint64_t v78 = v75;
      uint64_t v67 = v101;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v78);
    }

    uint64_t v79 = v100;
    v53((uint64_t)v67, v39);
    id v80 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v79));
    sub_1000546B0(v106, v102, v88, v107, v94, v87, (uint64_t)v89, v86, (uint64_t)v90, v85, v95, v83, v96, (uint64_t)v72);
  }

void sub_100054618(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10005462C()
{
  unint64_t result = qword_10013CB40;
  if (!qword_10013CB40)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCAdamID);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013CB40);
  }

  return result;
}

unint64_t sub_100054668()
{
  unint64_t result = qword_10013CFE0;
  if (!qword_10013CFE0)
  {
    type metadata accessor for Kind(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000ED274, v1);
    atomic_store(result, (unint64_t *)&qword_10013CFE0);
  }

  return result;
}

id sub_1000546B0( void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  if (a6)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    uint64_t v21 = a10;
    if (a8)
    {
LABEL_3:
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a8);
      goto LABEL_6;
    }
  }

  else
  {
    NSString v29 = 0LL;
    uint64_t v21 = a10;
    if (a8) {
      goto LABEL_3;
    }
  }

  NSString v28 = 0LL;
LABEL_6:
  if (!v21)
  {
    NSString v22 = 0LL;
    uint64_t v23 = a13;
    if (a12) {
      goto LABEL_8;
    }
LABEL_10:
    NSString v24 = 0LL;
    goto LABEL_11;
  }

  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  uint64_t v23 = a13;
  if (!a12) {
    goto LABEL_10;
  }
LABEL_8:
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a12);
LABEL_11:
  sub_100029E18((uint64_t *)&unk_10013D0C0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v26 = objc_msgSend( v15,  "initWithID:kind:metrics:icon:heading:title:subtitle:ageRating:offer:features:",  a1,  a2,  a3,  a4,  v29,  v28,  swift_bridgeObjectRelease(a14).n128_f64[0],  v22,  v24,  v23,  isa);

  swift_unknownObjectRelease(v23);
  return v26;
}

uint64_t sub_100054854(uint64_t a1)
{
  uint64_t v2 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void (**sub_100054894@<X0>( uint64_t a1@<X0>, void (***a2)(char *, uint64_t)@<X8>))(char *, uint64_t)
{
  return sub_100054C40(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1000548AC(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v2 = type metadata accessor for JSONContext(0LL);
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v37 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSONObject(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for JSONArray(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = JSONObject.subscript.getter(0x7370756B636F6CLL, 0xE700000000000000LL);
  JSONObject.array.getter(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1LL, v11) == 1)
  {
    sub_100054854((uint64_t)v6);
    uint64_t v19 = type metadata accessor for JSONError(0LL);
    unint64_t v20 = sub_100029F04();
    swift_allocError(v19, v20, 0LL, 0LL);
    NSString v22 = v21;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v39);
    *NSString v22 = 0x7370756B636F6CLL;
    v22[1] = 0xE700000000000000LL;
    __int128 v22[2] = MetatypeMetadata;
    uint64_t v24 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v22,  enum case for JSONError.missingProperty(_:),  v19);
    return swift_willThrow(v24);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v6, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    id v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v38, v36);
    uint64_t v27 = sub_100029E18(&qword_10013D0A8);
    unint64_t v28 = sub_100054BF4();
    uint64_t v29 = v40;
    uint64_t v30 = Array<A>.init(deserializing:using:)(v15, v26, v27, v28);
    if (v29)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    }

    else
    {
      uint64_t v31 = v30;
      uint64_t v32 = sub_10004D100(v30);
      __n128 v33 = swift_bridgeObjectRelease(v31);
      (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v17, v11, v33);
      uint64_t v34 = type metadata accessor for ASCLockupContainer();
      uint64_t result = swift_allocObject(v34, 24LL, 7LL);
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = v32;
    }
  }

  return result;
}

uint64_t sub_100054B9C()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for ASCLockupContainer()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd18ASCLockupContainer);
}

uint64_t sub_100054BE0(uint64_t a1, uint64_t a2)
{
  return sub_1000548AC(a1, a2);
}

unint64_t sub_100054BF4()
{
  unint64_t result = qword_10013D0B0;
  if (!qword_10013D0B0)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D0A8);
    unint64_t result = swift_getWitnessTable(&unk_1000F0D98, v1);
    atomic_store(result, (unint64_t *)&qword_10013D0B0);
  }

  return result;
}

void (**sub_100054C40@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (***a3)(char *, uint64_t)@<X8>))(char *, uint64_t)
{
  unint64_t result = sub_100054D7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100054C6C(uint64_t a1)
{
  uint64_t v2 = sub_100029E18((uint64_t *)&unk_10013C3A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static JSONContext.initFailureObserver.getter(v4);
  uint64_t v7 = sub_100029E18(&qword_10013D140);
  JSONContext.subscript.getter(v15, v6, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_100029E58((uint64_t)v15, (uint64_t)v12);
  uint64_t v8 = v13;
  if (v13)
  {
    uint64_t v9 = v14;
    sub_100029EE0(v12, v13);
    uint64_t v10 = sub_100029E18((uint64_t *)&unk_10013D0C0);
    dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(v10, a1, v8, v9);
    sub_100029EA0((uint64_t)v15);
    return sub_100029F4C(v12);
  }

  else
  {
    sub_100029EA0((uint64_t)v15);
    return sub_100029EA0((uint64_t)v12);
  }

void (**sub_100054D7C(uint64_t a1, uint64_t a2))(char *, uint64_t)
{
  uint64_t v4 = type metadata accessor for JSONError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for JSONObject(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = JSONObject.isNull.getter(v10);
  unint64_t result = 0LL;
  if ((v13 & 1) == 0)
  {
    uint64_t v28 = a1;
    uint64_t v29 = a2;
    uint64_t v15 = JSONObject.subscript.getter(0x646E696B24LL, 0xE500000000000000LL);
    uint64_t v16 = JSONObject.string.getter(v15);
    uint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    if (v18)
    {
      BOOL v19 = v16 == 0x70756B636F4C6461LL && v18 == 0xEF65727574616546LL;
      if (v19
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x70756B636F4C6461LL, 0xEF65727574616546LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, (unint64_t *)&unk_10013D130, off_10011E4D0);
        return (void (**)(char *, uint64_t))sub_10005560C();
      }

      uint64_t v25 = v29;
      if (v16 == 0xD000000000000014LL && v18 == 0x80000001000FB7C0LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000FB7C0LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D128, off_10011E518);
        return (void (**)(char *, uint64_t))sub_100056A6C();
      }

      if (v16 == 0xD000000000000015LL && v18 == 0x80000001000FB7E0LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001000FB7E0LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D120, off_10011E4F0);
        return (void (**)(char *, uint64_t))sub_100055E48();
      }

      if (v16 == 0x61654665726E6567LL && v18 == 0xEC00000065727574LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x61654665726E6567LL, 0xEC00000065727574LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D118, off_10011E500);
        return (void (**)(char *, uint64_t))sub_100056154(v28, v25);
      }

      if (v16 == 0xD000000000000016LL && v18 == 0x80000001000FB800LL
        || (unint64_t v27 = 0xD000000000000016LL,
            (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001000FB800LL, v16, v18, 0LL) & 1) != 0))
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D110, off_10011E520);
        return (void (**)(char *, uint64_t))sub_100056B88();
      }

      if (v16 == 0xD000000000000013LL && v18 == 0x80000001000FB820LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001000FB820LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D108, off_10011E530);
        return (void (**)(char *, uint64_t))sub_100056EAC();
      }

      if (v16 == 0xD000000000000010LL && v18 == 0x80000001000FB840LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001000FB840LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D100, off_10011E528);
        return (void (**)(char *, uint64_t))sub_100056D14();
      }

      if (v16 == 0x616546616964656DLL && v18 == 0xEC00000065727574LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x616546616964656DLL, 0xEC00000065727574LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D0F8, off_10011E508);
        return (void (**)(char *, uint64_t))sub_1000566C8(v28, v29);
      }

      if (v16 == v27 && v18 == 0x80000001000FB860LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001000FB860LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D0F0, off_10011E510);
        return (void (**)(char *, uint64_t))sub_1000568BC();
      }

      if (v16 == 0x4449656C646E7562LL && v18 == 0xEF65727574616546LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xEF65727574616546LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D0E8, off_10011E4D8);
        return (void (**)(char *, uint64_t))sub_1000559D4();
      }

      if (v16 == 0xD000000000000019LL && v18 == 0x80000001000FB880LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019LL, 0x80000001000FB880LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D0E0, off_10011E4F8);
        return (void (**)(char *, uint64_t))sub_100055FCC();
      }

      if (v16 == 0xD000000000000014LL && v18 == 0x80000001000FB8A0LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001000FB8A0LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D0D8, off_10011E4E8);
        return (void (**)(char *, uint64_t))sub_100055D38();
      }

      if (v16 == 0xD000000000000010LL && v18 == 0x80000001000FB8C0LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001000FB8C0LL, v16, v18, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(v18);
        sub_10002A030(0LL, &qword_10013D0D0, off_10011E4E0);
        return sub_100055B64(v28, v29);
      }

      uint64_t v26 = sub_100029E18((uint64_t *)&unk_10013D0C0);
      uint64_t *v7 = v16;
      v7[1] = v18;
      v7[2] = v26;
      uint64_t v21 = (unsigned int *)&enum case for JSONError.unknownCase(_:);
    }

    else
    {
      uint64_t v20 = sub_100029E18((uint64_t *)&unk_10013D0C0);
      uint64_t *v7 = 0x646E696B24LL;
      v7[1] = 0xE500000000000000LL;
      v7[2] = v20;
      uint64_t v21 = (unsigned int *)&enum case for JSONError.missingProperty(_:);
    }

    (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *v21, v4);
    unint64_t v22 = sub_100029F04();
    uint64_t v23 = swift_allocError(v4, v22, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v5 + 16))(v24, v7, v4);
    sub_100054C6C(v23);
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRelease(v23);
    return 0LL;
  }

  return result;
}

void *sub_10005560C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v44 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = JSONObject.subscript.getter(0x726F746964457369LL, 0xEF6563696F684373LL);
  int v46 = JSONObject.BOOL.getter(v15);
  int v16 = v46;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v14, v2);
  if (v16 == 2)
  {
    uint64_t v18 = type metadata accessor for JSONError(0LL);
    unint64_t v19 = sub_100029F04();
    swift_allocError(v18, v19, 0LL, 0LL);
    uint64_t v21 = v20;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v1);
    *uint64_t v21 = 0x726F746964457369LL;
    unint64_t v23 = 0xEF6563696F684373LL;
LABEL_8:
    v21[1] = v23;
LABEL_9:
    void v21[2] = MetatypeMetadata;
    uint64_t v37 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104LL))( v21,  enum case for JSONError.missingProperty(_:),  v18);
    swift_willThrow(v37);
    return v21;
  }

  uint64_t v45 = v1;
  uint64_t v24 = JSONObject.subscript.getter(0x676E69746172LL, 0xE600000000000000LL);
  uint64_t v25 = JSONObject.float.getter(v24);
  v17(v12, v2);
  if ((v25 & 0x100000000LL) != 0)
  {
    uint64_t v18 = type metadata accessor for JSONError(0LL);
    unint64_t v35 = sub_100029F04();
    swift_allocError(v18, v35, 0LL, 0LL);
    uint64_t v21 = v36;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v45);
    *uint64_t v21 = 0x676E69746172LL;
    unint64_t v23 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  uint64_t v26 = JSONObject.subscript.getter(0x6F43676E69746172LL, 0xEB00000000746E75LL);
  JSONObject.string.getter(v26);
  uint64_t v28 = v27;
  v17(v9, v2);
  if (!v28)
  {
    uint64_t v18 = type metadata accessor for JSONError(0LL);
    unint64_t v39 = sub_100029F04();
    swift_allocError(v18, v39, 0LL, 0LL);
    uint64_t v21 = v40;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v45);
    *uint64_t v21 = 0x6F43676E69746172LL;
    v21[1] = 0xEB00000000746E75LL;
    goto LABEL_9;
  }

  int v29 = v25;
  uint64_t v30 = JSONObject.subscript.getter(0x7470697263736564LL, 0xEB000000006E6F69LL);
  JSONObject.string.getter(v30);
  uint64_t v32 = v31;
  v17(v6, v2);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  if (v32)
  {
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
  }

  else
  {
    NSString v34 = 0LL;
  }

  char v41 = v46;
  id v42 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v45));
  LODWORD(v43) = v29;
  uint64_t v21 = [v42 initWithEditorsChoice:v41 & 1 productRating:v33 productRatingBadge:v34 productDescription:v43];

  return v21;
}

void *sub_1000559C0()
{
  return sub_10005560C();
}

void *sub_1000559D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0x4449656C646E7562LL, 0xE800000000000000LL);
  JSONObject.string.getter(v6);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = objc_msgSend(v9, "initWithBundleID:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);
  }

  else
  {
    uint64_t v11 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v12 = sub_100029F04();
    swift_allocError(v11, v12, 0LL, 0LL);
    void *v13 = 0x4449656C646E7562LL;
    v13[1] = 0xE800000000000000LL;
    v13[2] = v1;
    uint64_t v14 = (*(uint64_t (**)(void *, void, void *))(*(v11 - 1) + 104LL))( v13,  enum case for JSONError.missingProperty(_:),  v11);
    swift_willThrow(v14);
  }

  return v11;
}

void *sub_100055B50()
{
  return sub_1000559D4();
}

void (**sub_100055B64(uint64_t a1, uint64_t a2))(char *, uint64_t)
{
  uint64_t v4 = type metadata accessor for JSONContext(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for JSONObject(0LL);
  id v9 = *(void (***)(char *, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  JSONObject.subscript.getter(0x726566664F707061LL, 0xE800000000000000LL);
  (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  sub_100055CFC();
  id v12 = sub_10004EB64((uint64_t)v11, v7);
  if (v2)
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    v9[1](v11, v8);
  }

  else
  {
    uint64_t v13 = v12;
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    v9[1](v11, v8);
    id v9 = (void (**)(char *, uint64_t))[objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v15[1])) initWithAppOffer:v13];
  }

  return v9;
}

void (**sub_100055CE8(uint64_t a1, uint64_t a2))(char *, uint64_t)
{
  return sub_100055B64(a1, a2);
}

unint64_t sub_100055CFC()
{
  unint64_t result = qword_10013C4F8;
  if (!qword_10013C4F8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCAppOffer);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013C4F8);
  }

  return result;
}

id sub_100055D38()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0x65706F6C65766564LL, 0xED0000656D614E72LL);
  JSONObject.string.getter(v6);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    NSString v9 = 0LL;
  }

  id v10 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithDeveloperName:v9];

  return v10;
}

id sub_100055E48()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  JSONObject.subscript.getter(0x4B676E6964616568LL, 0xEB00000000646E69LL);
  type metadata accessor for HeadingKind(0LL);
  uint64_t v7 = v6;
  unint64_t v8 = sub_100055F84();
  JSONObject.stringEnum<A>(or:)(&v14, sub_100055F74, 0LL, v7, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  NSString v9 = v14;
  id v10 = [objc_allocWithZone((Class)ASCLockupDisplayContext) initWithHeadingKind:v14];

  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithDisplayContext:v10];
  return v11;
}

__CFString *sub_100055F74@<X0>(void *a1@<X8>)
{
  *a1 = @"standard";
  return @"standard";
}

unint64_t sub_100055F84()
{
  unint64_t result = qword_10013BF90;
  if (!qword_10013BF90)
  {
    type metadata accessor for HeadingKind(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000ED23C, v1);
    atomic_store(result, (unint64_t *)&qword_10013BF90);
  }

  return result;
}

id sub_100055FCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FA540LL);
  JSONObject.string.getter(v6);
  uint64_t v8 = v7;
  NSString v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  uint64_t v10 = JSONObject.subscript.getter(1634497893LL, 0xE400000000000000LL);
  JSONObject.string.getter(v10);
  uint64_t v12 = v11;
  v9(v5, v2);
  if (!v8)
  {
    NSString v13 = 0LL;
    if (v12) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v14 = 0LL;
    goto LABEL_6;
  }

  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  if (!v12) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
LABEL_6:
  id v15 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithPrivacyPolicyUrl:v13 eula:v14];

  return v15;
}

id sub_100056140()
{
  return sub_100055FCC();
}

void *sub_100056154(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v2 = type metadata accessor for JSONContext(0LL);
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  __chkstk_darwin(v2);
  uint64_t v57 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSONArray(0LL);
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v54 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v59 = (char *)v53 - v10;
  uint64_t v11 = type metadata accessor for JSONObject(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v53 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v53 - v19;
  uint64_t v21 = JSONObject.subscript.getter(0x6D614E65726E6567LL, 0xE900000000000065LL);
  uint64_t v22 = JSONObject.string.getter(v21);
  uint64_t v24 = v23;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v20, v11);
  if (!v24)
  {
    NSString v33 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v37 = sub_100029F04();
    swift_allocError(v33, v37, 0LL, 0LL);
    uint64_t v36 = v35;
    *unint64_t v35 = 0x6D614E65726E6567LL;
    unint64_t v38 = 0xE900000000000065LL;
LABEL_7:
    v35[1] = v38;
    goto LABEL_8;
  }

  v53[1] = v22;
  uint64_t v26 = JSONObject.subscript.getter(0x444965726E6567LL, 0xE700000000000000LL);
  uint64_t v27 = JSONObject.string.getter(v26);
  uint64_t v29 = v28;
  v25(v18, v11);
  if (!v29)
  {
    swift_bridgeObjectRelease(v24);
    NSString v33 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v39 = sub_100029F04();
    swift_allocError(v33, v39, 0LL, 0LL);
    uint64_t v36 = v35;
    *unint64_t v35 = 0x444965726E6567LL;
    unint64_t v38 = 0xE700000000000000LL;
    goto LABEL_7;
  }

  v53[0] = v27;
  uint64_t v30 = JSONObject.subscript.getter(0x65726E6567627573LL, 0xE900000000000073LL);
  JSONObject.array.getter(v30);
  v25(v15, v11);
  uint64_t v32 = v60;
  uint64_t v31 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v6, 1LL, v61) != 1)
  {
    char v41 = v59;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v59, v6, v31);
    id v42 = v54;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v54, v41, v31);
    double v43 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v57, v58, v56);
    uint64_t v44 = sub_100029E18(&qword_10013D148);
    unint64_t v45 = sub_100056640();
    uint64_t v46 = Array<A>.init(tryDeserializing:using:)(v42, v43, v44, v45);
    uint64_t v47 = sub_10004D100(v46);
    swift_bridgeObjectRelease(v46);
    id v48 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v62));
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    sub_10005668C();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    NSString v33 = objc_msgSend( v48,  "initWithGenreName:genreID:subgenres:",  v49,  v50,  isa,  swift_bridgeObjectRelease(v47).n128_f64[0]);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v31);
    return v33;
  }

  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v24);
  sub_100054854((uint64_t)v6);
  NSString v33 = (void *)type metadata accessor for JSONError(0LL);
  unint64_t v34 = sub_100029F04();
  swift_allocError(v33, v34, 0LL, 0LL);
  uint64_t v36 = v35;
  *unint64_t v35 = 0x65726E6567627573LL;
  v35[1] = 0xE900000000000073LL;
LABEL_8:
  v35[2] = v62;
  uint64_t v40 = (*(uint64_t (**)(void *, void, void *))(*(v33 - 1) + 104LL))( v36,  enum case for JSONError.missingProperty(_:),  v33);
  swift_willThrow(v40);
  return v33;
}

void *sub_10005662C(uint64_t a1, uint64_t a2)
{
  return sub_100056154(a1, a2);
}

unint64_t sub_100056640()
{
  unint64_t result = qword_10013D150;
  if (!qword_10013D150)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D148);
    unint64_t result = swift_getWitnessTable(&unk_1000F0D98, v1);
    atomic_store(result, (unint64_t *)&qword_10013D150);
  }

  return result;
}

unint64_t sub_10005668C()
{
  unint64_t result = qword_10013D158;
  if (!qword_10013D158)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCGenre);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013D158);
  }

  return result;
}

id sub_1000566C8(uint64_t a1, uint64_t a2)
{
  v19[1] = a1;
  uint64_t v3 = type metadata accessor for JSONContext(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSONObject(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100029E18(&qword_10013D160);
  JSONObject.subscript.getter(0x68736E6565726373LL, 0xEB0000000073746FLL);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v11(v6, a2, v3);
  uint64_t v12 = sub_100029FB0(&qword_10013D168, &qword_10013D160);
  ExpressibleByJSON.init(tryDeserializing:using:)(&v20, v9, v6, v10, v12);
  uint64_t v13 = v20;
  uint64_t v14 = sub_100029E18(&qword_10013D170);
  JSONObject.subscript.getter(0x7372656C69617274LL, 0xE800000000000000LL);
  v11(v6, a2, v3);
  uint64_t v15 = sub_100029FB0(&qword_10013D178, &qword_10013D170);
  ExpressibleByJSON.init(tryDeserializing:using:)(&v20, v9, v6, v14, v15);
  uint64_t v16 = v20;
  id v17 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v19[2])) initWithScreenshots:v13 trailers:v20];

  return v17;
}

id sub_1000568A8(uint64_t a1, uint64_t a2)
{
  return sub_1000566C8(a1, a2);
}

id sub_1000568BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = JSONObject.subscript.getter(0x617461646174656DLL, 0xE800000000000000LL);
  JSONObject.string.getter(v9);
  uint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v8, v2);
  uint64_t v13 = JSONObject.subscript.getter(0x7470697263736564LL, 0xEB000000006E6F69LL);
  JSONObject.string.getter(v13);
  uint64_t v15 = v14;
  v12(v6, v2);
  if (!v11)
  {
    NSString v16 = 0LL;
    if (v15) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v17 = 0LL;
    goto LABEL_6;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  if (!v15) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
LABEL_6:
  id v18 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithMetadata:v16 description:v17];

  return v18;
}

id sub_100056A58()
{
  return sub_1000568BC();
}

id sub_100056A6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FB8E0LL);
  JSONObject.string.getter(v6);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    NSString v9 = 0LL;
  }

  id v10 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithProductVariantID:v9];

  return v10;
}

id sub_100056B74()
{
  return sub_100056A6C();
}

void *sub_100056B88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0xD000000000000015LL, 0x80000001000FB900LL);
  JSONObject.string.getter(v6);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = objc_msgSend(v9, "initWithContentProviderTeamID:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);
  }

  else
  {
    uint64_t v11 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v12 = sub_100029F04();
    swift_allocError(v11, v12, 0LL, 0LL);
    void *v13 = 0xD000000000000015LL;
    v13[1] = 0x80000001000FB900LL;
    v13[2] = v1;
    uint64_t v14 = (*(uint64_t (**)(void *, void, void *))(*(v11 - 1) + 104LL))( v13,  enum case for JSONError.missingProperty(_:),  v11);
    swift_willThrow(v14);
  }

  return v11;
}

void *sub_100056D00()
{
  return sub_100056B88();
}

void *sub_100056D14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0x6D614E74726F6873LL, 0xE900000000000065LL);
  JSONObject.string.getter(v6);
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
    NSString v10 = String._bridgeToObjectiveC()();
    uint64_t v11 = objc_msgSend(v9, "initWithShortName:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);
  }

  else
  {
    uint64_t v11 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v12 = sub_100029F04();
    swift_allocError(v11, v12, 0LL, 0LL);
    void *v13 = 0x6D614E74726F6873LL;
    v13[1] = 0xE900000000000065LL;
    v13[2] = v1;
    uint64_t v14 = (*(uint64_t (**)(void *, void, void *))(*(v11 - 1) + 104LL))( v13,  enum case for JSONError.missingProperty(_:),  v11);
    swift_willThrow(v14);
  }

  return v11;
}

void *sub_100056E98()
{
  return sub_100056D14();
}

id sub_100056EAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0xD000000000000016LL, 0x80000001000FB920LL);
  char v7 = JSONObject.BOOL.getter(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7 != 2) {
    return [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithRequiresSSOEntitlement:v7 & 1];
  }
  uint64_t v8 = type metadata accessor for JSONError(0LL);
  unint64_t v9 = sub_100029F04();
  swift_allocError(v8, v9, 0LL, 0LL);
  void *v10 = 0xD000000000000016LL;
  v10[1] = 0x80000001000FB920LL;
  v10[2] = v1;
  uint64_t v11 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  enum case for JSONError.missingProperty(_:),  v8);
  return (id)swift_willThrow(v11);
}

id sub_100056FFC()
{
  return sub_100056EAC();
}

id sub_100057010()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = JSONObject.subscript.getter(0xD000000000000018LL, 0x80000001000FB940LL);
  char v7 = (void *)JSONObject.number.getter(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithDeviceCornerRadiusFactor:v7];

  return v8;
}

id sub_1000570E8@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = sub_100029E18(&qword_10013F670);
  uint64_t inited = swift_initStackObject(v3, v25);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EEB80;
  *(void *)(inited + 32) = 0x6C46646C756F6873LL;
  *(void *)(inited + 40) = 0xEB00000000687375LL;
  *(_BYTE *)(inited + 48) = [v1 shouldFlush];
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 80) = 0x73646C656966LL;
  *(void *)(inited + 88) = 0xE600000000000000LL;
  id v5 = [v1 fields];
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v7 = sub_100029E18(&qword_10013CD70);
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 120) = v7;
  *(void *)(inited + 128) = 0x6E6964756C636E69LL;
  *(void *)(inited + 136) = 0xEF73646C65694667LL;
  id v8 = [v1 includingFields];
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = sub_100047618(v9);
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = sub_100029E18((uint64_t *)&unk_10013EF60);
  *(void *)(inited + 144) = v10;
  *(void *)(inited + 168) = v11;
  *(void *)(inited + 176) = 0x6E6964756C637865LL;
  *(void *)(inited + 184) = 0xEF73646C65694667LL;
  id v12 = [v1 excludingFields];
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = sub_100047618(v13);
  swift_bridgeObjectRelease(v13);
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(void *)(inited + 192) = v14;
  unint64_t v15 = sub_100044F60(inited);
  id result = [v1 topic];
  if (result)
  {
    NSString v17 = result;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v20 = v19;

    uint64_t v24 = &type metadata for String;
    *(void *)&__int128 v23 = v18;
    *((void *)&v23 + 1) = v20;
    sub_1000445E4(&v23, v22);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    sub_10008F6E0(v22, 0x6369706F74LL, 0xE500000000000000LL, isUniquelyReferenced_nonNull_native);
    id result = (id)swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  a1[3] = v7;
  *a1 = v15;
  return result;
}

char *sub_10005736C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSONContext(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JSONObject(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for MetricsData(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  uint64_t v29 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v15 = v30;
  uint64_t v16 = MetricsData.init(deserializing:using:)(v11, v7);
  if (!v15)
  {
    uint64_t v17 = MetricsData.topic.getter(v16);
    uint64_t v19 = v18;
    char v20 = MetricsData.shouldFlush.getter();
    uint64_t v21 = MetricsData.fields.getter();
    uint64_t v22 = MetricsData.includingFields.getter();
    uint64_t v23 = sub_100058178(v22, (uint64_t)sub_100057534, 0LL);
    uint64_t v24 = MetricsData.excludingFields.getter();
    uint64_t v25 = sub_100058184(v24, (uint64_t)sub_10005755C, 0LL);
    uint64_t v11 = (char *)sub_100057584(v17, v19, v20 & 1, v21, v23, v25);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  }

  return v11;
}

uint64_t sub_100057534@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MetricsFieldInclusionRequest.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10005755C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MetricsFieldExclusionRequest.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_100057584(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  if (a2)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v13 = 0LL;
  }

  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  Class v16 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a5);
  Class v17 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  id v18 = [v14 initWithTopic:v13 shouldFlush:a3 & 1 fields:isa includingFields:v16 excludingFields:v17];

  return v18;
}

char *sub_1000576AC(uint64_t a1, uint64_t a2)
{
  return sub_10005736C(a1, a2);
}

uint64_t sub_1000576C0()
{
  uint64_t v1 = v0;
  id v2 = [v0 topic];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    uint64_t v6 = v5;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = 0LL;
  }

  id v7 = [v1 shouldFlush];
  id v8 = [v1 fields];
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v8,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  id v10 = [v1 includingFields];
  uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for String,  &protocol witness table for String);

  uint64_t v12 = sub_100058290(v11, (uint64_t)sub_100057848, 0LL);
  id v13 = [v1 includingFields];
  uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for String,  &protocol witness table for String);

  uint64_t v15 = sub_10005847C(v14, (uint64_t)sub_100057854, 0LL);
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(v4, v6, v7, v9, v12, v15);
}

uint64_t sub_100057848(uint64_t *a1)
{
  return sub_100057860(a1, (uint64_t (*)(uint64_t, uint64_t))&MetricsFieldInclusionRequest.init(rawValue:));
}

uint64_t sub_100057854(uint64_t *a1)
{
  return sub_100057860(a1, (uint64_t (*)(uint64_t, uint64_t))&MetricsFieldExclusionRequest.init(rawValue:));
}

uint64_t sub_100057860(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain(v3);
  return a2(v2, v3);
}

void *sub_1000578AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v34[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v35 = &type metadata for Feature;
  unint64_t v36 = sub_10004C76C();
  LOBYTE(v34[0]) = 0;
  char v11 = isFeatureEnabled(_:)(v34);
  sub_100029F4C(v34);
  if ((v11 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v12 = sub_10002A768(v7, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
    uint64_t v13 = sub_100029E18(&qword_10013EA00);
    uint64_t v14 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + *(void *)(v14 + 72),
            *(unsigned __int8 *)(v14 + 80) | 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(42LL, 1LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    unint64_t v35 = &type metadata for Feature;
    LOBYTE(v34[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10004C810((uint64_t)v34);
    v17._object = (void *)0x80000001000FB990LL;
    v17._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.info(_:)(v15, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unint64_t v18 = sub_100057CA8();
    a2[3] = v18;
    a2[4] = &protocol witness table for ACAccountStore;
    uint64_t v19 = type metadata accessor for BaseObjectGraph(0LL);
    return inject<A, B>(_:from:)(a2, v18, a1, v18, v19);
  }

  else
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v21 = sub_10002A768(v7, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v21, v7);
    uint64_t v22 = sub_100029E18(&qword_10013EA00);
    uint64_t v23 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
          + *(void *)(v23 + 72),
            *(unsigned __int8 *)(v23 + 80) | 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    unint64_t v35 = &type metadata for Feature;
    LOBYTE(v34[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10004C810((uint64_t)v34);
    v26._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v26._object = (void *)0x80000001000FB960LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.info(_:)(v24, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unint64_t v27 = sub_100057CA8();
    uint64_t v28 = type metadata accessor for BaseObjectGraph(0LL);
    inject<A, B>(_:from:)(v34, v27, a1, v27, v28);
    uint64_t v29 = (void *)v34[0];
    id v30 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    uint64_t active = type metadata accessor for ActiveITunesAccountProvider();
    swift_allocObject(active, 64LL, 7LL);
    uint64_t v32 = sub_10002A068(v29, v30);
    a2[3] = active;
    uint64_t result = (void *)sub_100057CE4();
    a2[4] = result;
    *a2 = v32;
  }

  return result;
}

unint64_t sub_100057CA8()
{
  unint64_t result = qword_10013D180;
  if (!qword_10013D180)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ACAccountStore);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013D180);
  }

  return result;
}

unint64_t sub_100057CE4()
{
  unint64_t result = qword_10013D188;
  if (!qword_10013D188)
  {
    uint64_t active = type metadata accessor for ActiveITunesAccountProvider();
    unint64_t result = swift_getWitnessTable(&unk_1000ED9D0, active);
    atomic_store(result, (unint64_t *)&qword_10013D188);
  }

  return result;
}

void *sub_100057D2C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AdamID(0LL);
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v39 = v3;
  __chkstk_darwin(v3);
  unint64_t v37 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for App(0LL);
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v5 = __chkstk_darwin(v36);
  unint64_t v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  NSString v33 = (char *)&v31 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v31 = v1;
    char v41 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    unint64_t result = (void *)sub_10005D984(a1);
    int64_t v10 = (int64_t)result;
    int v12 = v11;
    int v14 = v13 & 1;
    uint64_t v32 = a1 + 56;
    uint64_t v16 = v34;
    uint64_t v15 = v35;
    while ((v10 & 0x8000000000000000LL) == 0 && v10 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != v12) {
        goto LABEL_12;
      }
      int64_t v17 = *(void *)(a1 + 48) + *(void *)(v16 + 72) * v10;
      unint64_t v18 = *(void (**)(char *, int64_t, uint64_t))(v16 + 16);
      uint64_t v19 = v33;
      uint64_t v20 = v36;
      int v40 = v14;
      v18(v33, v17, v36);
      uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v15, v19, v20);
      uint64_t v22 = v37;
      uint64_t v23 = App.id.getter(v21);
      uint64_t v24 = AdamID.int64Value.getter(v23);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v39);
      id v25 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v24];
      uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v15, v20);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      uint64_t v27 = v41[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      specialized ContiguousArray._endMutation()(v28);
      unint64_t result = (void *)sub_10005DA28(v10, v12, v40 & 1, a1);
      int64_t v10 = (int64_t)result;
      int v12 = v29;
      int v14 = v30 & 1;
      if (!--v8)
      {
        sub_10002EB7C((uint64_t)result, v29, v14);
        return v41;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

uint64_t sub_100057FA0()
{
  return dispatch thunk of static EventEmitter.defaultScheduler.getter();
}

void sub_100057FC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v4 = sub_10005FFC4((unint64_t *)&qword_10013F740, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v5 = (void *)Set.init(minimumCapacity:)(v2, v3, v4);
  int64_t v6 = 0LL;
  v17[1] = v5;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v11) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v11) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_100058178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058190(a1, a2, a3, sub_1000C4868);
}

uint64_t sub_100058184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058190(a1, a2, a3, sub_1000C4854);
}

uint64_t sub_100058190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v29 = v8;
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = -v9;
  uint64_t v22 = a1;
  uint64_t v23 = a1 + 56;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v24 = v10;
  uint64_t v25 = 0LL;
  uint64_t v26 = v13 & v11;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v14 = a4();
  if (v15)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    do
    {
      sub_10006BE28(v21, v16, v17);
      __n128 v18 = swift_bridgeObjectRelease(v21[1]);
      uint64_t v16 = ((uint64_t (*)(__n128))a4)(v18);
      uint64_t v17 = v19;
    }

    while (v19);
    uint64_t v8 = v29;
  }

  sub_10002EB74(v22);
  swift_release(a3);
  return v8;
}

uint64_t sub_100058290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v13 = sub_100029E18((uint64_t *)&unk_10013F9E0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = sub_100027978( &qword_10013D328,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  uint64_t v18 = Set.init(minimumCapacity:)(v16, v6, v17);
  uint64_t v28 = a3;
  uint64_t v29 = v18;
  uint64_t v19 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v20 = ~v19;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = -v19;
  v27[0] = a1;
  v27[1] = a1 + 56;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  else {
    uint64_t v23 = -1LL;
  }
  void v27[2] = v20;
  v27[3] = 0LL;
  v27[4] = v23 & v21;
  v27[5] = a2;
  sub_1000C4B4C((uint64_t)v15);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v24(v15, 1LL, v6) != 1)
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    do
    {
      v25(v10, v15, v6);
      sub_10006C458((uint64_t)v12, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      sub_1000C4B4C((uint64_t)v15);
    }

    while (v24(v15, 1LL, v6) != 1);
    uint64_t v18 = v29;
  }

  sub_10002EB74(v27[0]);
  swift_release(v28);
  return v18;
}

uint64_t sub_10005847C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - v11;
  uint64_t v13 = sub_100029E18(&qword_10013D318);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = sub_100027978( &qword_10013D320,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
  uint64_t v18 = Set.init(minimumCapacity:)(v16, v6, v17);
  uint64_t v28 = a3;
  uint64_t v29 = v18;
  uint64_t v19 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v20 = ~v19;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v22 = -v19;
  v27[0] = a1;
  v27[1] = a1 + 56;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  else {
    uint64_t v23 = -1LL;
  }
  void v27[2] = v20;
  v27[3] = 0LL;
  v27[4] = v23 & v21;
  v27[5] = a2;
  sub_1000C4B40((uint64_t)v15);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v24(v15, 1LL, v6) != 1)
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    do
    {
      v25(v10, v15, v6);
      sub_10006C1FC((uint64_t)v12, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      sub_1000C4B40((uint64_t)v15);
    }

    while (v24(v15, 1LL, v6) != 1);
    uint64_t v18 = v29;
  }

  sub_10002EB74(v27[0]);
  swift_release(v28);
  return v18;
}

uint64_t sub_100058668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v6 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
  }

  uint64_t v7 = Set.init(minimumCapacity:)(v6, &type metadata for UInt64, &protocol witness table for UInt64);
  uint64_t v21 = v7;
  uint64_t v8 = sub_10005D880(v5, a2, a3, (uint64_t)v22);
  __int128 v17 = v22[0];
  __int128 v18 = v22[1];
  __int128 v19 = v22[2];
  uint64_t v20 = v23;
  uint64_t v9 = sub_1000C4D08(v8);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = v9;
    do
    {
      uint64_t v12 = sub_10006C6B4(&v16, v11);
      uint64_t v11 = sub_1000C4D08(v12);
    }

    while ((v13 & 1) == 0);
    uint64_t v7 = v21;
  }

  uint64_t v14 = v23;
  sub_10002EB74(v17);
  swift_release(v14);
  return v7;
}

void *sub_10005875C(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v13 = v4 + v2;
  }
  else {
    int64_t v13 = v4;
  }
  unint64_t result = sub_100051630(result, v13, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

LABEL_5:
  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = (uint64_t)&v3[5 * v7 + 4];
  uint64_t v9 = sub_100029E18(&qword_10013CFB8);
  unint64_t result = (void *)swift_arrayInitWithCopy(v8, v6 + 4, v2, v9);
  if (!v2)
  {
LABEL_14:
    unint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v10 = v3[2];
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    v3[2] = v12;
    goto LABEL_14;
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  void *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  __int128 v18 = *(void *)(v3 + 16);
  __int128 v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void *sub_100058858(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v43 = sub_100029E18(&qword_10013D2A8);
  uint64_t v4 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSLogger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v45 = &type metadata for Feature;
  unint64_t v46 = sub_10004C76C();
  LOBYTE(v44[0]) = 0;
  char v14 = isFeatureEnabled(_:)(v44);
  sub_100029F4C(v44);
  if ((v14 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v15 = sub_10002A768(v10, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    uint64_t v16 = sub_100029E18(&qword_10013EA00);
    uint64_t v17 = type metadata accessor for LogMessage(0LL);
    uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL))
          + *(void *)(*(void *)(v17 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(46LL, 1LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    unint64_t v45 = &type metadata for Feature;
    LOBYTE(v44[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10002E92C((uint64_t)v44, &qword_10013C6F0);
    v20._object = (void *)0x80000001000FBB60LL;
    v20._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v9);
    Logger.info(_:)(v18, v10, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v21 = sub_10005F960(a1);
    v2[2] = v21 | 0x8000000000000000LL;
    uint64_t v22 = swift_retain(v21);
    v2[3] = StorefrontAppStateController.onLoad.getter(v22);
    uint64_t v23 = StorefrontAppStateController.onStateChange.getter();
    swift_release(v21);
    swift_release(a1);
    v2[4] = v23;
  }

  else
  {
    uint64_t v42 = a1;
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v24 = sub_10002A768(v10, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, v10);
    uint64_t v25 = sub_100029E18(&qword_10013EA00);
    uint64_t v26 = type metadata accessor for LogMessage(0LL);
    uint64_t v27 = swift_allocObject( v25,  ((*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL))
          + *(void *)(*(void *)(v26 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v26 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(47LL, 1LL);
    v28._uint64_t countAndFlagsBits = 0LL;
    v28._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    unint64_t v45 = &type metadata for Feature;
    LOBYTE(v44[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10002E92C((uint64_t)v44, &qword_10013C6F0);
    v29._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v29._object = (void *)0x80000001000FBB30LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v9);
    Logger.info(_:)(v27, v10, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v30 = v42;
    uint64_t v31 = sub_10005F498(v42);
    v2[2] = v31;
    uint64_t v32 = sub_100029E18(&qword_10013D2B0);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v33 = swift_retain(v31);
    v2[3] = AsyncEvent.init()(v33);
    uint64_t v34 = sub_100029E18(&qword_10013D2B8);
    uint64_t v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v2[4] = AsyncEvent.init()(v35);
    uint64_t v36 = swift_allocObject(&unk_100121430, 24LL, 7LL);
    swift_weakInit(v36 + 16, v2);
    uint64_t v37 = swift_allocObject(&unk_100121458, 32LL, 7LL);
    *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100060168;
    *(void *)(v37 + 24) = v36;
    uint64_t v38 = sub_100029E18(&qword_10013D2C0);
    uint64_t v39 = sub_100044410(&qword_10013D2C8, &qword_10013D2C0, (uint64_t)&protocol conformance descriptor for AsyncEvent<A>);
    dispatch thunk of static EventEmitter.defaultScheduler.getter(v44, v38, v39);
    EventEmitter.addObserver(on:singleUse:_:)(v44, 0LL, sub_100060194, v37, v38, v39);
    swift_release(v30);
    swift_release(v37);
    sub_100029F4C(v44);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v43);
    swift_release(v31);
  }

  return v2;
}

uint64_t sub_100058D68( void (**a1)(char *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v44 = a2;
  uint64_t v45 = a5;
  int v41 = a4;
  uint64_t v40 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  unint64_t v46 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for OSLogger(0LL);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  NSString v49 = (uint64_t (**)(char *, uint64_t))((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v42 = sub_100029E18(&qword_10013CB58);
  __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for State(0LL);
  uint64_t v11 = *(void (***)(char *, uint64_t, uint64_t))(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for App.Kind(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for AdamID(0LL);
  __chkstk_darwin(v18);
  Swift::String v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for App(0LL);
  uint64_t v22 = *(uint64_t (***)(char *, uint64_t))(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v43 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v48 = a1;
  AdamID.init(value:)([a1 int64value]);
  NSString v49 = v22;
  uint64_t v50 = v21;
  uint64_t v24 = (uint64_t)v13;
  uint64_t v47 = v10;
  id v48 = v11;
  uint64_t v25 = v42;
  uint64_t v26 = v44;
  uint64_t v27 = v45 + 16;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for App.Kind.store(_:), v14);
  Swift::String v28 = v43;
  App.init(id:kind:)(v20, v17);
  swift_beginAccess(v27, v51, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v27);
  if (!Strong) {
    return v49[1](v28, v50);
  }
  uint64_t v30 = Strong;
  uint64_t v31 = *(void *)(Strong + 32);
  swift_retain(v31);
  swift_release(v30);
  uint64_t v32 = v24;
  sub_100046D3C(v26, v40, v41, v24);
  uint64_t v33 = (uint64_t)v39;
  uint64_t v34 = &v39[*(int *)(v25 + 48)];
  uint64_t v36 = v49;
  uint64_t v35 = v50;
  ((void (*)(char *, char *, uint64_t))v49[2])(v39, v28, v50);
  v48[4](v34, v32, v47);
  AsyncEvent.post(_:)(v33);
  swift_release(v31);
  sub_10002E92C(v33, &qword_10013CB58);
  return v36[1](v28, v35);
}

uint64_t sub_1000591FC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 < 0)
  {
    uint64_t v3 = v1 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = swift_retain(v1 & 0x7FFFFFFFFFFFFFFFLL);
    char v5 = StorefrontAppStateController.isLoaded.getter(v4);
    swift_release(v3);
    return v5 & 1;
  }

  else
  {
    swift_retain(v1);
    OS_dispatch_queue.sync<A>(execute:)(&v6, sub_1000600F0, v1, &type metadata for Bool);
    swift_release(v1);
    return v6;
  }

uint64_t sub_100059288()
{
  *(void *)(v1 + 56) = v0;
  return swift_task_switch(sub_1000592A0, 0LL, 0LL);
}

uint64_t sub_1000592A0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 64) = v2;
  if (v2 < 0)
  {
    uint64_t v8 = v2 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = async function pointer to StorefrontAppStateController.loadDataSources()[1];
    swift_retain(v8);
    uint64_t v10 = (void *)swift_task_alloc(v9);
    *(void *)(v0 + 72) = v10;
    void *v10 = v0;
    v10[1] = sub_1000593C0;
    return StorefrontAppStateController.loadDataSources()();
  }

  else
  {
    swift_retain(v2);
    uint64_t v3 = sub_100089B10();
    uint64_t v4 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v5 = swift_retain(v1);
    uint64_t v6 = static OS_dispatch_queue.main.getter(v5);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = &protocol witness table for OS_dispatch_queue;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    Promise.always(on:perform:)(v0 + 16, sub_1000600B4, v1);
    swift_release(v1);
    swift_release(v3);
    swift_release(v2);
    sub_100029F4C((void *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000593C0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 80LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10005945C;
  }
  else {
    uint64_t v3 = sub_100059424;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100059424()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005945C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059494()
{
  return AsyncEvent.post(_:)();
}

uint64_t sub_1000594B4(char a1)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(_BYTE *)(v2 + 48) = a1;
  return swift_task_switch(sub_1000594D0, 0LL, 0LL);
}

uint64_t sub_1000594D0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16LL);
  *(void *)(v0 + 24) = v1;
  if (v1 < 0)
  {
    uint64_t v3 = async function pointer to StorefrontAppStateController.reloadAllStates(synchronizing:)[1];
    swift_retain(v1 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = (void *)swift_task_alloc(v3);
    *(void *)(v0 + 32) = v4;
    void *v4 = v0;
    v4[1] = sub_1000595C0;
    return StorefrontAppStateController.reloadAllStates(synchronizing:)(*(unsigned __int8 *)(v0 + 48));
  }

  else
  {
    _StringGuts.grow(_:)(42LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000047LL,  0x80000001000FBAE0LL,  "appstorecomponentsd/ASCMigrationAppStateControllerImplementation.swift",  70LL,  2LL,  160LL,  0);
  }

uint64_t sub_1000595C0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 40LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10005965C;
  }
  else {
    uint64_t v3 = sub_100059624;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100059624()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005965C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059694(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 72) = a2;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return swift_task_switch(sub_1000596B0, 0LL, 0LL);
}

uint64_t sub_1000596B0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 16LL);
  *(void *)(v0 + 32) = v1;
  if (v1 < 0)
  {
    uint64_t v8 = async function pointer to StorefrontAppStateController.reloadState(forApps:synchronizing:)[1];
    swift_retain(v1 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = (void *)swift_task_alloc(v8);
    *(void *)(v0 + 56) = v9;
    void *v9 = v0;
    v9[1] = sub_100059858;
    return StorefrontAppStateController.reloadState(forApps:synchronizing:)( *(void *)(v0 + 16),  *(unsigned __int8 *)(v0 + 72));
  }

  else
  {
    char v2 = *(_BYTE *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = swift_task_alloc(48LL);
    *(void *)(v0 + 40) = v4;
    *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    *(void *)(v4 + 24) = v3;
    *(_BYTE *)(v4 + 32) = v2;
    uint64_t v5 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
    swift_retain(v1);
    uint64_t v6 = (void *)swift_task_alloc(v5);
    *(void *)(v0 + 48) = v6;
    void *v6 = v0;
    v6[1] = sub_1000597C8;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }

uint64_t sub_1000597C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 48LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100059824, 0LL, 0LL);
}

uint64_t sub_100059824()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100059858()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1000598F4;
  }
  else {
    uint64_t v3 = sub_1000598BC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000598BC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000598F4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_10005992C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_100029E18(&qword_10013D288);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_100057D2C(a3);
  uint64_t v11 = sub_10005F0DC((uint64_t)v10);
  __n128 v12 = swift_bridgeObjectRelease(v10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 16))( &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  a1,  v7,  v12);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_100121408, v14 + v9, v13 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))( v15 + v14,  &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v7);
  sub_100089F24(v11, a4, (uint64_t)sub_100060074, v15, 30.0);
  swift_release(v15);
  *(void *)&double result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

uint64_t sub_100059A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(v4 + 16);
  if (v9 < 0)
  {
    v9 &= ~0x8000000000000000LL;
    swift_retain(v9);
    StorefrontAppStateController.state(forApp:initialState:applying:)(a1, a2, a3);
  }

  else
  {
    swift_retain(*(void *)(v4 + 16));
    id v10 = sub_1000481F0(a1, a3);
    uint64_t v11 = sub_100046364();
    uint64_t v13 = v12;
    int v15 = v14;
    id v16 = [objc_allocWithZone((Class)ASCOfferContext) init];
    uint64_t v17 = sub_10005EAF0(v10, v16, v11, v13, v15, v9);
    uint64_t v19 = v18;
    char v21 = v20;

    sub_1000484C0(v11, v13, v15);
    sub_100046D3C(v17, v19, v21, a4);
    sub_1000484C0(v17, v19, v21);
  }

  return swift_release(v9);
}

uint64_t sub_100059B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AdamID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v3 + 16);
  if (v11 < 0)
  {
    swift_retain(v11 & 0x7FFFFFFFFFFFFFFFLL);
    StorefrontAppStateController.prospectiveState(forApp:applying:)(a1, a2);
    return swift_release(v11 & 0x7FFFFFFFFFFFFFFFLL);
  }

  uint64_t v12 = swift_retain(*(void *)(v3 + 16));
  uint64_t v13 = App.id.getter(v12);
  uint64_t v14 = AdamID.int64Value.getter(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v15 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v14];
  uint64_t v16 = *(void *)(v11 + 16);
  uint64_t v17 = swift_bridgeObjectRetain(v16);
  uint64_t v18 = sub_10005FE30(v17, (uint64_t)v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v19 = sub_100048FCC((uint64_t)v18);
  uint64_t v21 = v20;
  char v23 = v22;
  LODWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = ~v22;
  swift_bridgeObjectRelease(v18);
  if (!(_DWORD)v16) {
    goto LABEL_7;
  }
  __chkstk_darwin(v24);
  v26[-6] = v11;
  v26[-5] = v19;
  v26[-4] = v21;
  LOBYTE(v26[-3]) = v23;
  v26[-2] = v15;
  OS_dispatch_queue.sync<A>(execute:)(v26, sub_10005FE1C, &v26[-8], &type metadata for Bool);
  if (LOBYTE(v26[0]) != 1)
  {
    uint64_t v24 = sub_100049100(v19, v21, v23);
LABEL_7:
    __chkstk_darwin(v24);
    v26[-6] = v11;
    v26[-5] = v15;
    *(_OWORD *)&v26[-4] = xmmword_1000EEBB0;
    LOBYTE(v26[-2]) = 6;
    OS_dispatch_queue.sync<A>(execute:)(v26, sub_10005F2F4, &v26[-8], &type metadata for AppState_V1);

    uint64_t v19 = v26[0];
    uint64_t v21 = v26[1];
    char v23 = v27;
    goto LABEL_8;
  }

LABEL_8:
  sub_100046D3C(v19, v21, v23, a3);
  sub_1000484C0(v19, v21, v23);
  return swift_release(v11);
}

uint64_t sub_100059DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AdamID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9 < 0)
  {
    uint64_t v22 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain(v9 & 0x7FFFFFFFFFFFFFFFLL);
    char v23 = StorefrontAppStateController.canTransitionState(forApp:to:)(a1, a2);
    swift_release(v22);
    return v23 & 1;
  }

  else
  {
    uint64_t v10 = swift_retain(*(void *)(v2 + 16));
    uint64_t v11 = App.id.getter(v10);
    uint64_t v12 = AdamID.int64Value.getter(v11);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    id v13 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v12];
    uint64_t v14 = sub_100046364();
    uint64_t v16 = v15;
    char v18 = v17;
    uint64_t v19 = __chkstk_darwin(v14);
    *(void *)&v24[-48] = v9;
    *(void *)&v24[-40] = v19;
    *(void *)&v24[-32] = v16;
    v24[-24] = v20;
    *(void *)&v24[-16] = v13;
    OS_dispatch_queue.sync<A>(execute:)(&v25, sub_10005FE1C, &v24[-64], &type metadata for Bool);
    sub_1000484C0(v14, v16, v18);
    swift_release(v9);

    return v25;
  }

uint64_t sub_100059F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AdamID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9 < 0)
  {
    swift_retain(v9 & 0x7FFFFFFFFFFFFFFFLL);
    char v20 = StorefrontAppStateController.transitionState(forApp:to:)(a1, a2);
    swift_release(v9 & 0x7FFFFFFFFFFFFFFFLL);
    return v20 & 1;
  }

  else
  {
    uint64_t v10 = swift_retain(*(void *)(v2 + 16));
    uint64_t v11 = App.id.getter(v10);
    uint64_t v12 = AdamID.int64Value.getter(v11);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    id v13 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v12];
    uint64_t v14 = sub_100046364();
    uint64_t v16 = v15;
    char v18 = v17;
    LOBYTE(v12) = sub_10008A43C((uint64_t)v13, v14, v15, v17);
    sub_1000484C0(v14, v16, v18);
    swift_release(v9);

    return v12 & 1;
  }

uint64_t sub_10005A0B4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AdamID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = *(void *)(v1 + 16);
  if (v7 < 0)
  {
    uint64_t v14 = v7 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain(v7 & 0x7FFFFFFFFFFFFFFFLL);
    char v15 = StorefrontAppStateController.postsChanges(forApp:)(a1);
    swift_release(v14);
    return v15 & 1;
  }

  else
  {
    uint64_t v8 = swift_retain(*(void *)(v1 + 16));
    uint64_t v9 = App.id.getter(v8);
    uint64_t v10 = AdamID.int64Value.getter(v9);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    id v11 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v10];
    uint64_t v12 = __chkstk_darwin(v11);
    *(void *)&v16[-16] = v7;
    *(void *)&v16[-8] = v12;
    OS_dispatch_queue.sync<A>(execute:)(&v17, sub_10005FE04, &v16[-32], &type metadata for Bool);
    swift_release(v7);

    return v17;
  }

void sub_10005A1F8(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AdamID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v2 + 16);
  if (v13 < 0)
  {
    swift_retain(v13 & 0x7FFFFFFFFFFFFFFFLL);
    StorefrontAppStateController.setPostsChanges(_:forApp:)(a1 & 1, a2);
    swift_release(v13 & 0x7FFFFFFFFFFFFFFFLL);
  }

  else
  {
    uint64_t v14 = swift_retain(*(void *)(v2 + 16));
    uint64_t v15 = App.id.getter(v14);
    uint64_t v16 = AdamID.int64Value.getter(v15);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    id v17 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v16];
    uint64_t v18 = sub_100029E18(&qword_10013D260);
    uint64_t v19 = swift_allocObject( v18,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(void *)(v6 + 72),
            *(unsigned __int8 *)(v6 + 80) | 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    static DispatchWorkItemFlags.barrier.getter(v19);
    uint64_t v25 = v19;
    uint64_t v20 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v21 = sub_100029E18((uint64_t *)&unk_10013DBD0);
    uint64_t v22 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v23 = dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v5, v20);
    __chkstk_darwin(v23);
    *((_BYTE *)&v24 - 32) = a1 & 1;
    *(&v24 - 3) = v13;
    *(&v24 - 2) = (uint64_t)v17;
    OS_dispatch_queue.sync<A>(flags:execute:)(v8, sub_10005FDE8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_release(v13);
  }

uint64_t sub_10005A468(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AppInstallationType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AdamID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v2 + 16);
  if (v13 < 0)
  {
    uint64_t v20 = v13 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain(v13 & 0x7FFFFFFFFFFFFFFFLL);
    char v21 = StorefrontAppStateController.setWaiting(forApp:installationType:)(a1, a2);
    swift_release(v20);
    return v21 & 1;
  }

  else
  {
    uint64_t v14 = swift_retain(*(void *)(v2 + 16));
    uint64_t v15 = App.id.getter(v14);
    uint64_t v16 = AdamID.int64Value.getter(v15);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    id v17 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v16];
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    int v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
    if (v18 == enum case for AppInstallationType.purchase(_:))
    {
      uint64_t v19 = 1LL;
    }

    else if (v18 == enum case for AppInstallationType.update(_:))
    {
      uint64_t v19 = 2LL;
    }

    else if (v18 == enum case for AppInstallationType.redownload(_:))
    {
      uint64_t v19 = 3LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v19 = 0LL;
    }

    sub_10008A5D0((uint64_t)v17, v19);

    swift_release(v13);
    return 1LL;
  }

uint64_t sub_10005A648(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for AdamID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9 < 0)
  {
    uint64_t v23 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain(v9 & 0x7FFFFFFFFFFFFFFFLL);
    char v24 = StorefrontAppStateController.clearWaiting(forApp:refreshState:)(a1, a2 & 1);
    swift_release(v23);
    return v24 & 1;
  }

  else
  {
    uint64_t v10 = swift_retain(*(void *)(v2 + 16));
    uint64_t v11 = App.id.getter(v10);
    uint64_t v12 = AdamID.int64Value.getter(v11);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    id v13 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v12];
    uint64_t v14 = *(void *)(v9 + 16);
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain(*(void *)(v9 + 16));
      uint64_t v16 = (uint64_t *)(v14 + 40);
      do
      {
        uint64_t v17 = *(v16 - 1);
        uint64_t v18 = *v16;
        uint64_t ObjectType = swift_getObjectType(v17);
        uint64_t v20 = *(void (**)(id, uint64_t, uint64_t))(v18 + 56);
        swift_unknownObjectRetain(v17);
        v20(v13, ObjectType, v18);
        swift_unknownObjectRelease(v17);
        v16 += 2;
        --v15;
      }

      while (v15);
      swift_bridgeObjectRelease(v14);
    }

    id v21 = v13;
    sub_10005AF44((uint64_t)v21);

    swift_release(v9 & 0x7FFFFFFFFFFFFFFFLL);
    return 1LL;
  }

uint64_t sub_10005A7CC()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for ASCMigrationAppStateControllerImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd44ASCMigrationAppStateControllerImplementation);
}

void *initializeBufferWithCopyOfBuffer for ASCMigrationAppStateControllerImplementation.Store( void *a1, void *a2)
{
  uint64_t v3 = *a2 & 0x7FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ASCMigrationAppStateControllerImplementation.Store(void *a1)
{
  return swift_release(*a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for ASCMigrationAppStateControllerImplementation.Store(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *a1;
  *a1 = *a2;
  uint64_t v5 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

void *initializeWithTake for DefaultAppStateController.DataSourceState(void *result, void *a2)
{
  *double result = *a2;
  return result;
}

uint64_t *assignWithTake for ASCMigrationAppStateControllerImplementation.Store(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x7FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCMigrationAppStateControllerImplementation.Store( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASCMigrationAppStateControllerImplementation.Store( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)double result = a2 - 127;
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)double result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_10005A98C(void *a1)
{
  return *a1 >> 63;
}

void *sub_10005A998(void *result)
{
  *result &= ~0x8000000000000000LL;
  return result;
}

uint64_t *sub_10005A9A8(uint64_t *result, uint64_t a2)
{
  *double result = *result & 0xFFFFFFFFFFFFFF8LL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ASCMigrationAppStateControllerImplementation.Store()
{
  return &type metadata for ASCMigrationAppStateControllerImplementation.Store;
}

uint64_t sub_10005A9CC()
{
  return sub_1000591FC() & 1;
}

uint64_t sub_10005A9F0()
{
  return swift_retain(*(void *)(*(void *)v0 + 24LL));
}

uint64_t sub_10005A9FC()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc(dword_10013D29C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100039088;
  v3[7] = v2;
  return swift_task_switch(sub_1000592A0, 0LL, 0LL);
}

uint64_t sub_10005AA5C(char a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = swift_task_alloc(dword_10013D294);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100039088;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_BYTE *)(v5 + 48) = a1;
  return swift_task_switch(sub_1000594D0, 0LL, 0LL);
}

uint64_t sub_10005AAC4(uint64_t a1, char a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = swift_task_alloc(dword_10013D284);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_10002A858;
  *(_BYTE *)(v7 + 72) = a2;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = v6;
  return swift_task_switch(sub_1000596B0, 0LL, 0LL);
}

void sub_10005AB38(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
  if (v3 < 0)
  {
    uint64_t v6 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain(v6);
    StorefrontAppStateController.preloadState(forApps:)(a1);
    swift_release(v6);
  }

  else
  {
    swift_retain(v3);
    uint64_t v4 = sub_100057D2C(a1);
    uint64_t v5 = sub_10005F0DC((uint64_t)v4);
    swift_bridgeObjectRelease(v4);
    sub_10008A14C(v5);
    swift_release(v3);
    swift_bridgeObjectRelease(v5);
  }

uint64_t sub_10005ABE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100059A54(a1, a2, a3, a4);
}

uint64_t sub_10005AC00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100059B7C(a1, a2, a3);
}

uint64_t sub_10005AC20(uint64_t a1, uint64_t a2)
{
  return sub_100059DE8(a1, a2) & 1;
}

uint64_t sub_10005AC44(uint64_t a1, uint64_t a2)
{
  return sub_100059F6C(a1, a2) & 1;
}

uint64_t sub_10005AC68()
{
  return swift_retain(*(void *)(*(void *)v0 + 32LL));
}

uint64_t sub_10005AC74(uint64_t a1)
{
  return sub_10005A0B4(a1) & 1;
}

void sub_10005AC98(char a1, uint64_t a2)
{
}

uint64_t sub_10005ACB8(uint64_t a1, uint64_t a2)
{
  return sub_10005A468(a1, a2) & 1;
}

uint64_t sub_10005ACDC(uint64_t a1, char a2)
{
  return sub_10005A648(a1, a2) & 1;
}

uint64_t sub_10005AD00(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return swift_task_switch(sub_10005AD20, 0LL, 0LL);
}

uint64_t sub_10005AD20()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 16LL);
  *(void *)(v0 + 40) = v1;
  if (v1 < 0)
  {
    uint64_t v6 = async function pointer to StorefrontAppStateController.refreshUpdateRegistry(forApp:with:)[1];
    swift_retain(v1 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 48) = v7;
    void *v7 = v0;
    v7[1] = sub_10005ADE0;
    return StorefrontAppStateController.refreshUpdateRegistry(forApp:with:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 24);
    swift_retain(v1);
    id v4 = sub_1000481F0(v3, v2);
    sub_10005ED18(v4, v1);

    swift_release(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10005ADE0()
{
  return swift_task_switch(sub_10005AE34, 0LL, 0LL);
}

uint64_t sub_10005AE34()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005AE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AEE4(a1, a2, a3, (uint64_t (*)(uint64_t))&StorefrontAppStateController.isLocal(app:));
}

uint64_t sub_10005AE74(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16LL);
  if ((v3 & 0x8000000000000000LL) == 0) {
    return 0LL;
  }
  uint64_t v7 = v3 & 0x7FFFFFFFFFFFFFFFLL;
  swift_retain(v3 & 0x7FFFFFFFFFFFFFFFLL);
  LOBYTE(a1) = StorefrontAppStateController.isRedownloadable(app:includingPreorders:)(a1, a2 & 1);
  swift_release(v7);
  return a1 & 1;
}

uint64_t sub_10005AED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AEE4( a1,  a2,  a3,  (uint64_t (*)(uint64_t))&StorefrontAppStateController.purchaseHistoryIncludes(app:));
}

uint64_t sub_10005AEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = *(void *)(*(void *)v4 + 16LL);
  if ((v5 & 0x8000000000000000LL) == 0) {
    return 0LL;
  }
  uint64_t v9 = v5 & 0x7FFFFFFFFFFFFFFFLL;
  swift_retain(v5 & 0x7FFFFFFFFFFFFFFFLL);
  LOBYTE(a4) = a4(a1);
  swift_release(v9);
  return a4 & 1;
}

uint64_t sub_10005AF44(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = a1;
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v11 = static OS_os_log.default.getter();
  uint64_t v12 = OSSignpostID.init(log:)(v11);
  uint64_t v13 = static os_signpost_type_t.begin.getter(v12);
  uint64_t v14 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)( v13,  &_mh_execute_header,  v14,  "DefaultAppStateController.synchronizeStates",  43LL,  2LL,  v10);

  uint64_t v15 = sub_100029E18(&qword_10013D260);
  uint64_t v16 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72),
          *(unsigned __int8 *)(v5 + 80) | 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static DispatchWorkItemFlags.barrier.getter(v16);
  uint64_t v28 = v16;
  uint64_t v17 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v19 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v18, v19, v4, v17);
  uint64_t v26 = v2;
  char v27 = &v29;
  OS_dispatch_queue.sync<A>(flags:execute:)(v7, sub_10005FDCC);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v21 = static os_signpost_type_t.end.getter(v20);
  uint64_t v22 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)( v21,  &_mh_execute_header,  v22,  "DefaultAppStateController.synchronizeStates",  43LL,  2LL,  v10);

  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v25);
}

uint64_t sub_10005B1B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = a1;
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v11 = static OS_os_log.default.getter();
  uint64_t v12 = OSSignpostID.init(log:)(v11);
  uint64_t v13 = static os_signpost_type_t.begin.getter(v12);
  uint64_t v14 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)( v13,  &_mh_execute_header,  v14,  "DefaultAppStateController.synchronizeStates",  43LL,  2LL,  v10);

  uint64_t v15 = sub_100029E18(&qword_10013D260);
  uint64_t v16 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72),
          *(unsigned __int8 *)(v5 + 80) | 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static DispatchWorkItemFlags.barrier.getter(v16);
  uint64_t v28 = v16;
  uint64_t v17 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v19 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v18, v19, v4, v17);
  uint64_t v26 = v2;
  char v27 = &v29;
  OS_dispatch_queue.sync<A>(flags:execute:)(v7, sub_1000600D4);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v21 = static os_signpost_type_t.end.getter(v20);
  uint64_t v22 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)( v21,  &_mh_execute_header,  v22,  "DefaultAppStateController.synchronizeStates",  43LL,  2LL,  v10);

  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v25);
}

void sub_10005B424(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 32;
  swift_beginAccess(a1 + 32, v40, 33LL, 0LL);
  sub_100029E18(&qword_10013D278);
  uint64_t v37 = v4;
  Dictionary.reserveCapacity(_:)(1LL);
  swift_endAccess(v40);
  uint64_t v42 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v39 = a2;
    id v7 = a2;
    swift_bridgeObjectRetain(v5);
    uint64_t v38 = v5;
    uint64_t v8 = (uint64_t *)(v5 + 40);
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v12 = *(v8 - 1);
      uint64_t v11 = *v8;
      uint64_t ObjectType = swift_getObjectType(v12);
      uint64_t v14 = *(uint64_t (**)(id, uint64_t, uint64_t))(v11 + 40);
      swift_unknownObjectRetain(v12);
      uint64_t v15 = v14(v7, ObjectType, v11);
      uint64_t v17 = v16;
      char v19 = v18;
      LODWORD(v14) = ~v18;
      swift_unknownObjectRelease(v12);
      if ((_DWORD)v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
          uint64_t v9 = sub_10005151C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
        }
        unint64_t v21 = *((void *)v9 + 2);
        unint64_t v20 = *((void *)v9 + 3);
        if (v21 >= v20 >> 1) {
          uint64_t v9 = sub_10005151C((char *)(v20 > 1), v21 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v21 + 1;
        uint64_t v10 = &v9[24 * v21];
        *((void *)v10 + 4) = v15;
        *((void *)v10 + 5) = v17;
        v10[48] = v19;
      }

      v8 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v38);
    a2 = v39;
  }

  else
  {
    id v22 = a2;
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  }

  if (*((void *)v9 + 2) == 1LL
    && v9[48] >= 6u
    && (unint64_t v23 = *((void *)v9 + 4), v24 = *((void *)v9 + 5), __PAIR128__(v24, v23) >= 2))
  {
    swift_bridgeObjectRelease(v9);
    swift_beginAccess(v37, v40, 33LL, 0LL);
    uint64_t v31 = sub_10005BFDC((uint64_t)a2);
    uint64_t v33 = v32;
    char v35 = v34;
    swift_endAccess(v40);
    sub_100049100(v31, v33, v35);
    if ([*(id *)(v42 + 40) containsObject:a2])
    {
      v40[0] = a2;
      v40[1] = v23;
      v40[2] = v24;
      char v41 = 6;
      id v36 = a2;
      AsyncEvent.post(_:)(v40);

      return;
    }
  }

  else
  {
    uint64_t v25 = sub_100048FCC((uint64_t)v9);
    uint64_t v27 = v26;
    char v29 = v28;
    int v30 = ~v28;
    swift_bridgeObjectRelease(v9);
    if (v30)
    {
      sub_10008ABFC(a2, v25, v27, v29);

      sub_100049100(v25, v27, v29);
      return;
    }
  }
}

void sub_10005B6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a2 & 0xC000000000000001LL;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    if (a2 < 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    Swift::Int v5 = __CocoaSet.count.getter(v4);
  }

  else
  {
    Swift::Int v5 = *(void *)(a2 + 16);
  }

  swift_beginAccess(a1 + 32, v80, 33LL, 0LL);
  sub_100029E18(&qword_10013D278);
  uint64_t v69 = (uint64_t *)(a1 + 32);
  Dictionary.reserveCapacity(_:)(v5);
  swift_endAccess(v80);
  if (v3)
  {
    if (v2 < 0) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    uint64_t v9 = sub_10005FFC4((unint64_t *)&qword_10013F740, (unint64_t *)&qword_10013CB40, off_10011E488);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v80, v7, v8, v9);
    uint64_t v2 = v80[0];
    uint64_t v71 = v80[1];
    uint64_t v12 = v80[2];
    uint64_t v11 = v80[3];
    unint64_t v13 = v80[4];
  }

  else
  {
    uint64_t v14 = -1LL << *(_BYTE *)(v2 + 32);
    uint64_t v71 = v2 + 56;
    uint64_t v12 = ~v14;
    uint64_t v15 = -v14;
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v13 = v16 & *(void *)(v2 + 56);
    uint64_t v10 = (void *)swift_bridgeObjectRetain(v2);
    uint64_t v11 = 0LL;
  }

  int64_t v70 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v17 = a1;
  uint64_t v72 = v2;
  while (v2 < 0)
  {
    uint64_t v22 = __CocoaSet.Iterator.next()(v10);
    if (!v22) {
      goto LABEL_84;
    }
    uint64_t v23 = v22;
    uint64_t v81 = v22;
    uint64_t v24 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(&v77, &v81, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
    id v25 = v77;
    swift_unknownObjectRelease(v23);
    uint64_t v75 = v13;
    uint64_t v76 = v11;
    if (!v25) {
      goto LABEL_84;
    }
LABEL_43:
    uint64_t v30 = *(void *)(v17 + 16);
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      uint64_t v74 = swift_bridgeObjectRetain(v30);
      uint64_t v32 = (uint64_t *)(v74 + 40);
      uint64_t v33 = (char *)_swiftEmptyArrayStorage;
      do
      {
        uint64_t v35 = *(v32 - 1);
        uint64_t v36 = *v32;
        uint64_t ObjectType = swift_getObjectType(v35);
        uint64_t v38 = *(uint64_t (**)(id, uint64_t, uint64_t))(v36 + 40);
        swift_unknownObjectRetain(v35);
        uint64_t v39 = v38(v25, ObjectType, v36);
        uint64_t v41 = v40;
        char v43 = v42;
        LODWORD(v38) = ~v42;
        swift_unknownObjectRelease(v35);
        if ((_DWORD)v38)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0) {
            uint64_t v33 = sub_10005151C(0LL, *((void *)v33 + 2) + 1LL, 1, v33);
          }
          unint64_t v45 = *((void *)v33 + 2);
          unint64_t v44 = *((void *)v33 + 3);
          if (v45 >= v44 >> 1) {
            uint64_t v33 = sub_10005151C((char *)(v44 > 1), v45 + 1, 1, v33);
          }
          *((void *)v33 + 2) = v45 + 1;
          char v34 = &v33[24 * v45];
          *((void *)v34 + 4) = v39;
          *((void *)v34 + 5) = v41;
          v34[48] = v43;
        }

        v32 += 2;
        --v31;
      }

      while (v31);
      swift_bridgeObjectRelease(v74);
      uint64_t v2 = v72;
      uint64_t v17 = a1;
      uint64_t v46 = *((void *)v33 + 2);
      if (!v46)
      {
LABEL_61:

        swift_bridgeObjectRelease(v33);
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v33 = (char *)_swiftEmptyArrayStorage;
      uint64_t v46 = _swiftEmptyArrayStorage[2];
      if (!v46) {
        goto LABEL_61;
      }
    }

    if (v46 != 1)
    {
      LOBYTE(v18) = v33[48];
LABEL_63:
      uint64_t v58 = 0LL;
      uint64_t v59 = 0LL;
      uint64_t v60 = v33 + 56;
      uint64_t v61 = 2LL;
      uint64_t v19 = *((void *)v33 + 4);
      uint64_t v20 = *((void *)v33 + 5);
      uint64_t v62 = 1LL;
      uint64_t v63 = v19;
      uint64_t v64 = v20;
      LOBYTE(v65) = v18;
      int v66 = v18;
      if (!(_BYTE)v18) {
        goto LABEL_67;
      }
LABEL_64:
      if (v66 == 4)
      {
        uint64_t v19 = v63;
        uint64_t v20 = v64;
        LOBYTE(v18) = v65;
        goto LABEL_18;
      }

      LOBYTE(v66) = 1;
      if (v46 == v62)
      {
LABEL_72:
        if ((v66 & 1) != 0)
        {
          sub_100048494(*((void *)v33 + 4), *((void *)v33 + 5), v18);
          goto LABEL_18;
        }
      }

      else
      {
        while (1)
        {
          if (__OFADD__(v62, 1LL))
          {
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
            __break(1u);
            return;
          }

          int v65 = v60[16];
          if ((v66 & 1) == 0) {
            break;
          }
          uint64_t v63 = *(void *)v60;
          uint64_t v64 = *((void *)v60 + 1);
          v60 += 24;
          ++v62;
          ++v61;
          int v66 = v65;
          if ((_BYTE)v65) {
            goto LABEL_64;
          }
LABEL_67:
          uint64_t v58 = v63;
          uint64_t v59 = v64;
          if (v46 == v62) {
            goto LABEL_72;
          }
        }

        if (v65 == 4)
        {
LABEL_78:
          uint64_t v19 = *(void *)v60;
          uint64_t v20 = *((void *)v60 + 1);
          sub_100049100(v58, v59, 0);
          LOBYTE(v18) = 4;
          goto LABEL_18;
        }

        while (v46 != v61)
        {
          if (__OFADD__(v61, 1LL)) {
            goto LABEL_85;
          }
          int v67 = v60[40];
          v60 += 24;
          ++v61;
          if (v67 == 4) {
            goto LABEL_78;
          }
        }
      }

      LOBYTE(v18) = 0;
      uint64_t v19 = v58;
      uint64_t v20 = v59;
LABEL_18:
      swift_bridgeObjectRelease(v33);
      sub_10008ABFC(v25, v19, v20, v18);

      uint64_t v10 = (void *)sub_1000484C0(v19, v20, v18);
      goto LABEL_19;
    }

    unsigned int v18 = v33[48];
    if (v18 < 6 || *((void *)v33 + 4) <= 1uLL) {
      goto LABEL_63;
    }
    swift_bridgeObjectRelease(v33);
    swift_beginAccess(v69, &v77, 33LL, 0LL);
    uint64_t v47 = *v69;
    swift_bridgeObjectRetain(*v69);
    unint64_t v48 = sub_10008D4F0((uint64_t)v25);
    char v50 = v49;
    swift_bridgeObjectRelease(v47);
    if ((v50 & 1) != 0)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v69);
      uint64_t v52 = *v69;
      uint64_t v81 = *v69;
      *uint64_t v69 = 0x8000000000000000LL;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10005D004();
        uint64_t v52 = v81;
      }

      uint64_t v53 = *(void *)(v52 + 56) + 24 * v48;
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      char v56 = *(_BYTE *)(v53 + 16);
      sub_10005C54C(v48, v52);
      uint64_t v57 = *v69;
      *uint64_t v69 = v52;
      swift_bridgeObjectRelease(v57);
    }

    else
    {
      uint64_t v54 = 0LL;
      uint64_t v55 = 0LL;
      char v56 = -1;
    }

    swift_endAccess(&v77);
    sub_100049100(v54, v55, v56);
    if ([*(id *)(v17 + 40) containsObject:v25])
    {
      id v77 = v25;
      __int128 v78 = xmmword_1000EEBB0;
      char v79 = 6;
      id v68 = v25;
      AsyncEvent.post(_:)(&v77);
    }

    else
    {
    }

LABEL_84:
  sub_10002EB74(v2);
}

uint64_t (*sub_10005BDD8(uint64_t a1))(uint64_t a1)
{
  return sub_100060244;
}

double sub_10005BE08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_10008D45C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10005CA74();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_1000445E4((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_10005C1A4(v9, v12);
    uint64_t v13 = *v4;
    uint64_t *v4 = v12;
    *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_10005BEF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10008D45C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10005CC58();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 16 * v7);
  sub_10005C378(v7, v10);
  uint64_t v12 = *v3;
  *unint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10005BFDC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10008D4F0(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10005D004();
    uint64_t v8 = v12;
  }

  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 24 * v5);
  sub_10005C54C(v5, v8);
  uint64_t v10 = *v2;
  uint64_t *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

uint64_t sub_10005C0C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_10008D4F0(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10005D374();
    uint64_t v8 = v12;
  }

  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 24 * v5);
  sub_10005C8B0(v5, v8);
  uint64_t v10 = *v2;
  uint64_t *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

unint64_t sub_10005C1A4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10005C378(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_10005C54C(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *uint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            uint64_t v22 = (__int128 *)(v20 + 24 * v6);
            if (24 * v3 < (uint64_t)(24 * v6) || v21 >= (unint64_t)v22 + 24 || (v23 = v3 == v6, int64_t v3 = v6, !v23))
            {
              __int128 v10 = *v22;
              *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }

        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    BOOL v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1LL << v3) - 1;
  }

  else
  {
    BOOL v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1LL << a1) - 1;
  }

  *BOOL v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1LL);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_10005C71C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        __int128 v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            Swift::Int v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *Swift::Int v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void sub_10005C8B0(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *uint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            BOOL v22 = (__int128 *)(v20 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= (unint64_t)v22 + 24))
            {
              __int128 v10 = *v22;
              *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }

        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1LL << a1) - 1;
  }

  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }

void *sub_10005CA74()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013CC58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        sub_100029EE0(v86, v87);
        v63._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
        v63._object = (void *)0x80000001000FC460LL;
        unint64_t v44 = Localizer.string(forKey:)(v63)._object;
        goto LABEL_31;
      }
    }

    swift_bridgeObjectRelease(v40);
    sub_1000388F0((uint64_t)v85, (uint64_t)v86);
    goto LABEL_30;
  }

  (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for ArcadeIntroOfferState.available(_:),  v7);
  uint64_t v19 = static ArcadeIntroOfferState.== infix(_:_:)(v13, v11);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  unint64_t v21 = [a2 titles];
  type metadata accessor for ASCOfferTitleVariant(0LL);
  unint64_t v23 = v22;
  int64_t v24 = sub_100067C60();
  uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, v23, &type metadata for String, v24);

  uint64_t v26 = *(void *)(v25 + 16);
  if ((v19 & 1) != 0)
  {
    uint64_t v84 = @"trial";
    if (v26)
    {
      BOOL v27 = v20;
      uint64_t v28 = @"trial";
      uint64_t v29 = sub_10008D56C(v28);
      if ((v30 & 1) != 0)
      {
        uint64_t v31 = *(void **)(*(void *)(v25 + 56) + 16 * v29 + 8);
        swift_bridgeObjectRetain(v31);

        swift_bridgeObjectRelease(v25);
        sub_1000388F0((uint64_t)v85, (uint64_t)v86);
        uint64_t v20 = v27;
        if (v31) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }

      uint64_t v20 = v27;
    }

    swift_bridgeObjectRelease(v25);
    sub_1000388F0((uint64_t)v85, (uint64_t)v86);
LABEL_35:
    sub_100029EE0(v86, v87);
    v66._object = (void *)0x80000001000FC440LL;
    v66._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    uint64_t v31 = Localizer.string(forKey:)(v66)._object;
LABEL_36:
    sub_100029F4C(v86);
    int v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    id v68 = [a2 subtitles];
    uint64_t v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v68, v23, &type metadata for String, v24);

    if (*(void *)(v69 + 16))
    {
      int64_t v70 = v84;
      uint64_t v71 = sub_10008D56C(v70);
      if ((v72 & 1) != 0) {
        goto LABEL_44;
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v12 = (v20 - 1) & v20;
    int64_t v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    uint64_t v18 = *(id *)(*(void *)(v1 + 48) + 8 * v13);
    if (!v18) {
      goto LABEL_34;
    }
    while (1)
    {
      sub_10006BE0C((Swift::Int *)&v24, v18);

      uint64_t v6 = v14;
      unint64_t v7 = v12;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      unint64_t v15 = __CocoaSet.Iterator.next()(a1);
      if (v15)
      {
        uint64_t v16 = v15;
        unint64_t v23 = v15;
        uint64_t v17 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
        uint64_t v18 = v24;
        swift_unknownObjectRelease(v16);
        unint64_t v14 = v6;
        unint64_t v12 = v7;
        if (v18) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

  double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

        uint64_t v8 = 0LL;
        uint64_t v6 = 0LL;
        uint64_t v5 = v13;
        goto LABEL_5;
      }
    }

    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v5 = v17;
    goto LABEL_5;
  }

  double result = __CocoaSet.Iterator.next()(result);
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  uint64_t v19 = result;
  unint64_t v12 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
  swift_unknownObjectRetain(v11);
  swift_dynamicCast(&v20, &v19, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
  uint64_t v8 = v20;
  swift_unknownObjectRelease(v11);
  if (v8) {
    goto LABEL_6;
  }
  return 0LL;
}

        int64_t v9 = v50;
        goto LABEL_31;
      }

void *sub_10005CC58()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013CD28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void *sub_10005CE10()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013CD30);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v28 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_10005D004()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013CCE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_10005D1D4()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013CD10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void *sub_10005D374()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013CCF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

void *sub_10005D534()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013D2A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_10005D6DC()
{
  uint64_t v1 = v0;
  sub_100029E18((uint64_t *)&unk_10013F750);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

uint64_t sub_10005D880@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((result & 0xC000000000000001LL) != 0)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v7 = __CocoaSet.makeIterator()(result);
    uint64_t v8 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v9 = sub_10005FFC4( (unint64_t *)&qword_10013D310,  (unint64_t *)&qword_10013CB50,  &OBJC_CLASS___NSNumber_ptr);
    Set.Iterator.init(_cocoa:)(v17, v7, v8, v9);
    id result = v17[0];
    uint64_t v10 = v17[1];
    __int128 v11 = v18;
    uint64_t v12 = v19;
  }

  else
  {
    uint64_t v13 = -1LL;
    uint64_t v14 = -1LL << *(_BYTE *)(result + 32);
    uint64_t v15 = ~v14;
    uint64_t v10 = result + 56;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v13 = ~(-1LL << v16);
    }
    uint64_t v12 = v13 & *(void *)(result + 56);
    __int128 v11 = (unint64_t)v15;
  }

  *(void *)a4 = result;
  *(void *)(a4 + 8) = v10;
  *(_OWORD *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(void *)(a4 + 32) = v12;
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  return result;
}

uint64_t sub_10005D984(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_10005DA28(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (id result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

char *sub_10005DB0C(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v57 = a3;
  char v5 = a2;
  int v52 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a4);
  uint64_t v53 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v59 = *(void *)(v53 - 8);
  uint64_t v7 = __chkstk_darwin(v53);
  char v56 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v55 = (char *)v51 - v10;
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)v51 - v11;
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  __int128 v18 = (char *)v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  int64_t v22 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v64[3] = &type metadata for ASDDeviceAppFetcher;
  v64[4] = &off_100121E28;
  v63[3] = type metadata accessor for DefaultAvailableUpdatesRegistry();
  v63[4] = &off_100122EE8;
  v63[0] = v57;
  id v23 = &a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_queryObservation];
  *(_OWORD *)id v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  int64_t v24 = &a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_query];
  *(void *)int64_t v24 = a1;
  v24[8] = v5;
  sub_1000388F0((uint64_t)v64, (uint64_t)&a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_fetcher]);
  sub_1000388F0( (uint64_t)v63,  (uint64_t)&a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry]);
  v51[1] = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v25 = sub_100029E18(&qword_10013D2F0);
  uint64_t v26 = swift_allocObject( v25,  ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
        + *(void *)(v20 + 72),
          *(unsigned __int8 *)(v20 + 80) | 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v57 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v27 = a4;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v61[0] = v26;
  uint64_t v28 = sub_100027978( (unint64_t *)&qword_10013DD90,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v29 = sub_100029E18(&qword_10013D2F8);
  uint64_t v30 = sub_100044410( (unint64_t *)&qword_10013DDA0,  &qword_10013D2F8,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v61, v29, v30, v19, v28);
  uint64_t v31 = (*(uint64_t (**)(char *, void, uint64_t))(v16 + 104))( v18,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v15);
  static DispatchQoS.unspecified.getter(v31);
  uint64_t v32 = v22;
  uint64_t v33 = v53;
  *(void *)&v27[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_workQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x80000001000FBDE0LL,  v14,  v32,  v18,  0LL);
  *(void *)&v27[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates] = sub_1000457AC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = sub_100029E18(&qword_10013D2E8);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(void *)&v27[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_onSynchronizeAppStates] = SyncEvent.init()();

  v62.receiver = v27;
  v62.super_class = ObjectType;
  uint64_t v35 = (char *)objc_msgSendSuper2(&v62, "init");
  SyncTaskScheduler.init()();
  uint64_t v36 = swift_allocObject(&unk_100121480, 24LL, 7LL);
  swift_unknownObjectWeakInit(v36 + 16, v35);
  uint64_t v37 = *(void (**)(void))(v59 + 16);
  uint64_t v38 = v55;
  v37();
  if ((_BYTE)v52)
  {
    if (v52 != 1)
    {
      unint64_t v44 = (void *)objc_opt_self(&OBJC_CLASS___ASDAppQuery);
      swift_retain(v36);
      id v43 = [v44 queryForStoreApps];
      uint64_t v39 = v57;
      goto LABEL_7;
    }

    uint64_t v39 = v57;
    swift_bridgeObjectRetain(v57);
    swift_retain(v36);
    v40.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v39);
    id v41 = [(id)objc_opt_self(ASDAppQuery) queryForBundleIDs:v40.super.isa];
  }

  else
  {
    swift_retain(v36);
    uint64_t v39 = v57;
    char v42 = sub_100075A34(v57);
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
    v40.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v42);
    id v41 = [(id)objc_opt_self(ASDAppQuery) queryForStoreItemIDs:v40.super.isa];
  }

  id v43 = v41;

LABEL_7:
  unint64_t v45 = (char *)objc_allocWithZone((Class)type metadata accessor for ASDDeviceAppFetcher.QueryObservation());
  uint64_t v46 = (uint64_t)v56;
  ((void (*)(char *, char *, uint64_t))v37)(v56, v38, v33);
  swift_retain(v36);
  id v47 = sub_10005F308(v43, v46, (uint64_t)sub_100060270, v36, v45);

  swift_release(v36);
  sub_100027978( (unint64_t *)&unk_10013DBE0,  (uint64_t (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation,  (uint64_t)&unk_1000EF3A0);
  unint64_t v48 = *(void (**)(char *, uint64_t))(v59 + 8);
  v48(v38, v33);
  swift_release_n(v36, 2LL);
  swift_bridgeObjectRelease(v39);
  v48(v58, v33);
  void v61[3] = swift_getObjectType(v47);

  v61[0] = v47;
  sub_100029F4C(v63);
  uint64_t v49 = (uint64_t)&v35[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_queryObservation];
  swift_beginAccess( &v35[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_queryObservation],  v60,  33LL,  0LL);
  sub_100060278((uint64_t)v61, v49, &qword_10013C6F0);
  swift_endAccess(v60);
  sub_100029F4C(v64);
  return v35;
}

void *sub_10005E1A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  id v47 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v49[3] = type metadata accessor for DefaultAvailableUpdatesRegistry();
  v49[4] = &off_100122EE8;
  v49[0] = a3;
  a4[2] = a1;
  a4[3] = a2;
  sub_1000388F0((uint64_t)v49, (uint64_t)(a4 + 10));
  a4[4] = &_swiftEmptyDictionarySingleton;
  a4[5] = [objc_allocWithZone(NSCountedSet) init];
  a4[6] = &_swiftEmptySetSingleton;
  uint64_t v44 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = sub_100029E18(&qword_10013D2F0);
  uint64_t v18 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v42 = ((v18 + 32) & ~v18) + *(void *)(v14 + 72);
  uint64_t v43 = v17;
  uint64_t v40 = (v18 + 32) & ~v18;
  uint64_t v41 = v18 | 7;
  uint64_t v19 = swift_allocObject(v17, v42, v18 | 7);
  __int128 v39 = xmmword_1000EDBE0;
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v48 = v19;
  uint64_t v20 = sub_100027978( (unint64_t *)&qword_10013DD90,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v38 = v20;
  uint64_t v21 = sub_100029E18(&qword_10013D2F8);
  uint64_t v37 = v21;
  uint64_t v22 = sub_100044410( (unint64_t *)&qword_10013DDA0,  &qword_10013D2F8,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v23 = v13;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v21, v22, v13, v20);
  uint64_t v24 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v25 = v46;
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 104);
  uint64_t v36 = v12;
  uint64_t v27 = v26(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v46);
  uint64_t v28 = v47;
  static DispatchQoS.unspecified.getter(v27);
  a4[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ALL,  0x80000001000FBD50LL,  v28,  v16,  v12,  0LL);
  static DispatchQoS.userInteractive.getter();
  uint64_t v29 = swift_allocObject(v43, v42, v41);
  *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v48 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v37, v22, v23, v38);
  uint64_t v30 = v36;
  v26(v36, v24, v25);
  a4[8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002FLL,  0x80000001000FBD80LL,  v28,  v16,  v30,  0LL);
  a4[9] = 0LL;
  uint64_t v31 = sub_100029E18(&qword_10013D2C0);
  uint64_t v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  uint64_t v33 = AsyncEvent.init()(v32);
  sub_100029F4C(v49);
  a4[15] = v33;
  return a4;
}

char *sub_10005E51C(uint64_t a1, int a2, uint64_t a3)
{
  v18[3] = &type metadata for ASDDeviceAppFetcher;
  v18[4] = &off_100121E28;
  uint64_t v6 = type metadata accessor for DefaultAvailableUpdatesRegistry();
  v17[3] = v6;
  v17[4] = &off_100122EE8;
  v17[0] = a3;
  uint64_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for DeviceAppStateDataSource());
  uint64_t v8 = sub_10002ACB8((uint64_t)v18, (uint64_t)&type metadata for ASDDeviceAppFetcher);
  __chkstk_darwin(v8);
  (*(void (**)(char *))(v10 + 16))((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = sub_10002ACB8((uint64_t)v17, v6);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_10005DB0C(a1, a2, *v13, v7);
  sub_100029F4C(v17);
  sub_100029F4C(v18);
  return v15;
}

void *sub_10005E658(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v45 = a3;
  uint64_t v46 = a5;
  id v49 = a4;
  uint64_t v51 = a1;
  int v52 = a2;
  uint64_t v55 = *a6;
  uint64_t v9 = sub_100029E18(&qword_10013D300);
  __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  char v50 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_accountsSubscription;
  uint64_t v53 = sub_100029E18(&qword_10013D308);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL);
  v21(v20, 1LL, 1LL, v53);
  uint64_t v22 = (char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID;
  *(void *)uint64_t v22 = 0LL;
  v22[8] = 1;
  sub_1000388F0((uint64_t)a1, (uint64_t)(a6 + 2));
  sub_1000388F0( (uint64_t)a2,  (uint64_t)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_platform);
  uint64_t v23 = (void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistory);
  uint64_t v25 = v45;
  uint64_t v24 = v46;
  *uint64_t v23 = v45;
  v23[1] = &off_100121E58;
  *(void *)((char *)a6
            + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext) = v49;
  *(void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_notificationCenter) = v24;
  sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v26 = sub_100029E18(&qword_10013D2F0);
  uint64_t v27 = swift_allocObject( v26,  ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
        + *(void *)(v17 + 72),
          *(unsigned __int8 *)(v17 + 80) | 7LL);
  *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  id v49 = v25;
  id v28 = v24;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v56[0] = v27;
  uint64_t v29 = sub_100027978( (unint64_t *)&qword_10013DD90,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v30 = sub_100029E18(&qword_10013D2F8);
  uint64_t v31 = sub_100044410( (unint64_t *)&qword_10013DDA0,  &qword_10013D2F8,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v56, v30, v31, v16, v29);
  uint64_t v32 = (*(uint64_t (**)(char *, void, uint64_t))(v47 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v48);
  uint64_t v33 = v50;
  static DispatchQoS.unspecified.getter(v32);
  *(void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_workQueue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x80000001000FBDB0LL, v33, v19, v15, 0LL);
  *(void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_expectedAppStates) = sub_1000457AC((uint64_t)_swiftEmptyArrayStorage);
  *((_BYTE *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_hasRequestedUpdated) = 0;
  uint64_t v34 = sub_100029E18(&qword_10013D2E8);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(void *)((char *)a6
            + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_onSynchronizeAppStates) = SyncEvent.init()();
  [v28 addObserver:a6 selector:"purchaseHistoryUpdated:" name:ASDPurchaseHistoryDidChangeNotification object:0];
  uint64_t v35 = v51;
  uint64_t v36 = v51[3];
  uint64_t v37 = v51[4];
  sub_100029EE0(v51, v36);
  uint64_t active = dispatch thunk of AccountProvider.onActiveAccountChange.getter(v36, v37);
  uint64_t v40 = v39;
  uint64_t ObjectType = swift_getObjectType(active);
  dispatch thunk of static EventEmitter.defaultScheduler.getter(v56, ObjectType, v40);
  uint64_t v42 = (uint64_t)v54;
  EventEmitter.addObserver<A>(on:target:method:)(v56, a6, sub_10005BDD8, 0LL, ObjectType, v55, v40);

  swift_unknownObjectRelease(active);
  sub_100029F4C(v52);
  sub_100029F4C(v56);
  v21((char *)v42, 0LL, 1LL, v53);
  uint64_t v43 = (uint64_t)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_accountsSubscription;
  swift_beginAccess( (char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_accountsSubscription,  v56,  33LL,  0LL);
  sub_100060278(v42, v43, &qword_10013D300);
  swift_endAccess(v56);
  sub_100029F4C(v35);
  return a6;
}

uint64_t sub_10005EAF0(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v30 = a5;
  id v28 = a2;
  uint64_t v10 = type metadata accessor for State(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v27 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v27 - v18;
  id v29 = a1;
  id v20 = [a1 id];
  uint64_t v32 = a6;
  id v33 = v20;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  char v36 = v30;
  OS_dispatch_queue.sync<A>(execute:)(&v37, sub_10005F2F4, v31, &type metadata for AppState_V1);

  uint64_t v21 = v37;
  uint64_t v22 = v38;
  LOBYTE(v20) = v39;
  sub_100046D3C(v37, v38, v39, (uint64_t)v17);
  sub_1000484C0(v21, v22, (char)v20);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v23(v14, v17, v10);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  LODWORD(a4) = enum case for State.downloadable(_:);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v14, v10);
  if ((_DWORD)v21 == (_DWORD)a4
    && (([v29 flags] & 0x200) != 0
     || [v28 supportsDSIDLessInstall]))
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v19, enum case for State.buyable(_:), v10);
  }

  else
  {
    v23(v19, v17, v10);
  }

  v24(v17, v10);
  uint64_t v25 = sub_100046364();
  v24(v19, v10);
  return v25;
}

double sub_10005ED18(void *a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v5 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
  if (v5) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v5) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (v8)
  {
    uint64_t v9 = swift_getObjectType(v8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    swift_unknownObjectRetain(a1);
    uint64_t v11 = (void *)v10(v9, v7);

    if (v11)
    {
      id v12 = [v11 id];
      void v28[2] = a2;
      void v28[3] = __chkstk_darwin(v12);
      __int128 v29 = xmmword_1000EEBB0;
      char v30 = 6;
      OS_dispatch_queue.sync<A>(execute:)(&v32, sub_10005F2F4, v28, &type metadata for AppState_V1);

      uint64_t v13 = v33;
      if (v34 == 5)
      {
        uint64_t v14 = sub_10004FB3C();
        if ((v15 & 1) == 0)
        {
          if (v13)
          {
            uint64_t v16 = v14;
            if (v13 < v14)
            {
              sub_1000388F0(a2 + 80, (uint64_t)&v32);
              sub_100029EE0(&v32, v35);
              uint64_t v17 = sub_10004E8C0();
              uint64_t v19 = v18;
              id v20 = [v11 id];
              sub_100092978(v16, v17, v19, v20);
              swift_bridgeObjectRelease(v19);

              sub_100029F4C(&v32);
              uint64_t v21 = sub_100029E18(&qword_10013F700);
              uint64_t inited = swift_initStackObject(v21, v31);
              *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EEBC0;
              *(void *)(inited + 32) = [v11 id];
              unint64_t v32 = inited;
              specialized Array._endMutation()();
              uint64_t v23 = v32;
              if (v32 >> 62)
              {
                if ((v32 & 0x8000000000000000LL) != 0LL) {
                  uint64_t v26 = v32;
                }
                else {
                  uint64_t v26 = v32 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(v32);
                uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
                swift_bridgeObjectRelease(v23);
                if (v27) {
                  goto LABEL_15;
                }
              }

              else if (*(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10))
              {
LABEL_15:
                sub_1000CA67C(v23);
                uint64_t v25 = v24;
LABEL_24:
                swift_bridgeObjectRelease(v23);
                sub_100089F24((uint64_t)v25, 1, (uint64_t)MetricsIdStore.init(accountStore:amsBag:), 0LL, 30.0);

                *(void *)&double result = swift_bridgeObjectRelease(v25).n128_u64[0];
                return result;
              }

              uint64_t v25 = &_swiftEmptySetSingleton;
              goto LABEL_24;
            }
          }
        }
      }

      else
      {
        sub_1000484C0(v32, v33, v34);
      }
    }
  }

  return result;
}

uint64_t sub_10005EFB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for App(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v11 = sub_100027978(&qword_10013D330, v10, (uint64_t)&protocol conformance descriptor for App);
  uint64_t result = Set.init(minimumCapacity:)(v9, v2, v11);
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    char v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_10006BBB0((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }

    while (v9);
    return v17;
  }

  return result;
}

uint64_t sub_10005F0DC(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v5 = sub_10005FFC4((unint64_t *)&qword_10013F740, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v15 = result;
  if (v2)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v7) {
      return v15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return v15;
    }
  }

  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_10006BE0C((Swift::Int *)&v14, v10);
      }
    }

    else
    {
      uint64_t v11 = (void **)(a1 + 32);
      do
      {
        id v12 = *v11++;
        sub_10006BE0C((Swift::Int *)&v14, v12);

        --v7;
      }

      while (v7);
    }

    return v15;
  }

  __break(1u);
  return result;
}

uint64_t sub_10005F254(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for ASCMetricsInvocationPoint(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = sub_100027978( &qword_10013C188,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ED0FC);
  uint64_t result = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v7 = (void **)(a1 + 32);
    do
    {
      uint64_t v8 = *v7++;
      sub_10006BFD4(&v9, v8);

      --v2;
    }

    while (v2);
    return v10;
  }

  return result;
}

void sub_10005F2F4(uint64_t a1@<X8>)
{
}

id sub_10005F308(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  uint64_t v11 = type metadata accessor for SyncTaskScheduler(0LL);
  v24[3] = v11;
  v24[4] = &protocol witness table for SyncTaskScheduler;
  id v12 = sub_10002C328(v24);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v12, a2, v11);
  *(void *)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery] = a1;
  sub_1000388F0( (uint64_t)v24,  (uint64_t)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_taskScheduler]);
  uint64_t v13 = &a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_observer];
  *(void *)uint64_t v13 = a3;
  *((void *)v13 + 1) = a4;
  v23.receiver = a5;
  v23.super_class = ObjectType;
  id v14 = a1;
  swift_retain(a4);
  id v15 = objc_msgSendSuper2(&v23, "init");
  uint64_t v16 = swift_allocObject(&unk_1001214A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v15);
  aBlock[4] = sub_1000602BC;
  uint64_t v22 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100075C18;
  aBlock[3] = &unk_1001214C0;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v22;
  id v19 = v15;
  swift_release(v18);
  [v14 executeQueryWithResultHandler:v17];

  _Block_release(v17);
  sub_100029F4C(v24);
  return v19;
}

uint64_t sub_10005F498(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v42[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DefaultAvailableUpdatesRegistry();
  uint64_t v6 = swift_allocObject(v5, 32LL, 7LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100045680((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v6 + 24) = [objc_allocWithZone(JEUnfairLock) init];
  uint64_t v7 = sub_100029E18(&qword_10013D2E0);
  uint64_t v8 = swift_allocObject(v7, 96LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EEB80;
  uint64_t v9 = type metadata accessor for WaitingAppStateDataSource();
  swift_allocObject(v9, 40LL, 7LL);
  *(void *)(v8 + 32) = sub_1000DE950();
  *(void *)(v8 + 40) = &off_1001268C0;
  uint64_t v10 = sub_100029E18(&qword_10013D2D0);
  uint64_t v11 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v44, v10, a1, v10, v11);
  id v12 = sub_100029EE0(v44, v45);
  sub_1000601C4( *v12 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store,  (uint64_t)v4);
  uint64_t v13 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v4, 1LL, v13) == 1)
  {
    v43[3] = &type metadata for ASDDeviceAppFetcher;
    v43[4] = &off_100121E28;
    uint64_t v14 = sub_10002ACB8((uint64_t)v43, (uint64_t)&type metadata for ASDDeviceAppFetcher);
    __chkstk_darwin(v14);
    (*(void (**)(void))(v15 + 16))();
    swift_retain(v6);
    uint64_t v16 = sub_10005E51C(0LL, 2, v6);
    sub_100029F4C(v43);
    sub_100029F4C(v44);
    *(void *)(v8 + 48) = v16;
    *(void *)(v8 + 56) = &off_1001230B0;
    uint64_t v17 = sub_100029E18(&qword_10013DDB0);
    inject<A, B>(_:from:)(v44, v17, a1, v17, v11);
    uint64_t v18 = sub_100029E18(&qword_10013D2D8);
    inject<A, B>(_:from:)(v43, v18, a1, v18, v11);
    uint64_t v19 = sub_100029E18((uint64_t *)&unk_10013DD10);
    inject<A, B>(_:from:)(v42, v19, a1, v19, v11);
    id v20 = sub_100029EE0(v42, v42[3]);
    if ((*(_BYTE *)(*v20 + 24LL) & 1) == 0)
    {
      uint64_t v21 = *(void **)(*v20 + 16LL);
      uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
      id v23 = v21;
      id v24 = [v22 defaultCenter];
      uint64_t v25 = type metadata accessor for PurchaseHistoryAppStateDataSource(0LL);
      uint64_t v26 = (void *)swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      uint64_t v27 = sub_10005E658(v44, v43, v23, 0LL, v24, v26);
      sub_100029F4C(v42);
      *(void *)(v8 + 64) = v27;
      *(void *)(v8 + 72) = &off_100125BF0;
      uint64_t v28 = type metadata accessor for DefaultAppStateDataSource();
      uint64_t v29 = swift_allocObject(v28, 24LL, 7LL);
      uint64_t v30 = sub_100029E18(&qword_10013D2E8);
      swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
      *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = SyncEvent.init()();
      *(void *)(v8 + 80) = v29;
      *(void *)(v8 + 88) = &off_100122EA0;
      unint64_t v31 = sub_10004A27C();
      uint64_t v45 = v5;
      uint64_t v46 = &off_100122EE8;
      v44[0] = v6;
      uint64_t v32 = type metadata accessor for DefaultAppStateController();
      uint64_t v33 = (void *)swift_allocObject(v32, 128LL, 7LL);
      uint64_t v34 = sub_10002ACB8((uint64_t)v44, v5);
      __chkstk_darwin(v34);
      char v36 = (void *)((char *)&v42[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      (*(void (**)(uint64_t *))(v37 + 16))(v36);
      uint64_t v38 = *v36;
      swift_retain(v6);
      char v39 = sub_10005E1A0(v8, v31, v38, v33);
      sub_100029F4C(v44);
      swift_release(v6);
      return (uint64_t)v39;
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000061LL,  0x80000001000FBCE0LL,  "appstorecomponentsd/ASCMigrationPurchaseHistoryImplementation.swift",  67LL,  2LL,  55LL,  0);
  }

  else
  {
    sub_100060208((uint64_t)v4);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000063LL,  0x80000001000FBC20LL,  "appstorecomponentsd/ASCMigrationDeviceAppFetcherImplementation.swift",  68LL,  2LL,  49LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10005F960(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v2 = type metadata accessor for StorefrontAppStateController.Configuration(0LL);
  uint64_t v56 = *(void *)(v2 - 8);
  uint64_t v57 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v55 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v54 = (char *)&v49 - v5;
  uint64_t v6 = type metadata accessor for AppStoreType(0LL);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DeviceAppQuery(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for DeviceUpdateRegistry(0LL);
  uint64_t v58 = DeviceUpdateRegistry.__allocating_init()();
  uint64_t v13 = sub_100029E18(&qword_10013CFB0);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  __int128 v51 = xmmword_1000EDA10;
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDA10;
  uint64_t v15 = type metadata accessor for WaitingAppStateDataSource(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v16 = WaitingAppStateDataSource.init()();
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = &protocol witness table for WaitingAppStateDataSource;
  *(void *)(v14 + 32) = v16;
  uint64_t v17 = type metadata accessor for DeviceAppStateDataSource(0LL);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DeviceAppQuery.allStoreApps(_:), v9);
  uint64_t v18 = sub_100029E18(&qword_10013D2D0);
  uint64_t v19 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v65, v18, a1, v18, v19);
  uint64_t v21 = v66;
  id v20 = v67;
  uint64_t v22 = sub_100029EE0(v65, v66);
  v64[3] = v21;
  v64[4] = v20[1];
  id v23 = sub_10002C328(v64);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v23, v22, v21);
  uint64_t v24 = updated;
  uint64_t v62 = updated;
  uint64_t v63 = &protocol witness table for DeviceUpdateRegistry;
  uint64_t v25 = v58;
  v61[0] = v58;
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v8, enum case for AppStoreType.default(_:), v53);
  swift_retain(v25);
  uint64_t v26 = DeviceAppStateDataSource.__allocating_init(query:fetcher:updateRegistry:store:)(v12, v64, v61, v8);
  sub_100029F4C(v65);
  *(void *)(v14 + 96) = v17;
  *(void *)(v14 + 104) = &protocol witness table for DeviceAppStateDataSource;
  *(void *)(v14 + 72) = v26;
  uint64_t v68 = v14;
  uint64_t inited = swift_initStackObject(v13, &v60);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v51;
  uint64_t v28 = type metadata accessor for PurchaseHistoryAppStateDataSource(0LL);
  uint64_t v29 = sub_100029E18(&qword_10013DDB0);
  uint64_t v30 = v49;
  inject<A, B>(_:from:)(v65, v29, v49, v29, v19);
  uint64_t v31 = sub_100029E18(&qword_10013D2D8);
  inject<A, B>(_:from:)(v64, v31, v30, v31, v19);
  uint64_t v32 = sub_100029E18((uint64_t *)&unk_10013DD10);
  inject<A, B>(_:from:)(v61, v32, v30, v32, v19);
  uint64_t v33 = v62;
  uint64_t v34 = v63;
  uint64_t v35 = sub_100029EE0(v61, v62);
  v59[3] = v33;
  v59[4] = v34[1];
  char v36 = sub_10002C328(v59);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v36, v35, v33);
  uint64_t v37 = PurchaseHistoryAppStateDataSource.__allocating_init(accounts:platform:purchaseHistory:purchaseHistoryContext:)( v65,  v64,  v59,  0LL);
  sub_100029F4C(v61);
  *(void *)(inited + 56) = v28;
  *(void *)(inited + 64) = &protocol witness table for PurchaseHistoryAppStateDataSource;
  *(void *)(inited + 32) = v37;
  uint64_t v38 = type metadata accessor for DefaultAppStateDataSource(0LL);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  uint64_t v39 = DefaultAppStateDataSource.init()();
  *(void *)(inited + 96) = v38;
  *(void *)(inited + 104) = &protocol witness table for DefaultAppStateDataSource;
  *(void *)(inited + 72) = v39;
  sub_10005875C((void *)inited);
  uint64_t v66 = v24;
  int v67 = &protocol witness table for DeviceUpdateRegistry;
  uint64_t v40 = v58;
  v65[0] = v58;
  swift_retain(v58);
  uint64_t v41 = v55;
  StorefrontAppStateController.Configuration.init(updateRegistry:)(v65);
  uint64_t v42 = v68;
  uint64_t v43 = v54;
  StorefrontAppStateController.Configuration.withDataSources(_:)(v68);
  swift_bridgeObjectRelease(v42);
  uint64_t v45 = v56;
  uint64_t v44 = v57;
  uint64_t v46 = *(void (**)(char *, uint64_t))(v56 + 8);
  v46(v41, v57);
  type metadata accessor for StorefrontAppStateController(0LL);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v41, v43, v44);
  uint64_t v47 = StorefrontAppStateController.__allocating_init(from:)(v41);
  swift_release(v40);
  v46(v43, v44);
  return v47;
}

void sub_10005FDCC()
{
}

id sub_10005FDE8()
{
  return sub_10008B738(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24));
}

id sub_10005FE04@<X0>(_BYTE *a1@<X8>)
{
  return sub_10008B6FC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_10005FE1C()
{
}

char *sub_10005FE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v19 = swift_bridgeObjectRetain(a1);
  uint64_t v4 = (uint64_t *)(v19 + 40);
  uint64_t v5 = (char *)_swiftEmptyArrayStorage;
  do
  {
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    uint64_t ObjectType = swift_getObjectType(v8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
    swift_unknownObjectRetain(v8);
    uint64_t v11 = v10(a2, ObjectType, v7);
    uint64_t v13 = v12;
    char v15 = v14;
    LODWORD(v10) = ~v14;
    swift_unknownObjectRelease(v8);
    if ((_DWORD)v10)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
        uint64_t v5 = sub_10005151C(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
      }
      unint64_t v17 = *((void *)v5 + 2);
      unint64_t v16 = *((void *)v5 + 3);
      if (v17 >= v16 >> 1) {
        uint64_t v5 = sub_10005151C((char *)(v16 > 1), v17 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v17 + 1;
      uint64_t v6 = &v5[24 * v17];
      *((void *)v6 + 4) = v11;
      *((void *)v6 + 5) = v13;
      v6[48] = v15;
    }

    v4 += 2;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v19);
  return v5;
}

void sub_10005FF80()
{
}

void sub_10005FFA4(uint64_t a1@<X8>)
{
}

uint64_t sub_10005FFC4(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_10002A030(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

double sub_100060004(uint64_t a1)
{
  return sub_10005992C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100060010()
{
  uint64_t v1 = sub_100029E18(&qword_10013D288);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100060074()
{
  uint64_t v0 = sub_100029E18(&qword_10013D288);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_1000600B4()
{
  return AsyncEvent.post(_:)();
}

void sub_1000600D4()
{
}

uint64_t sub_1000600F0@<X0>(BOOL *a1@<X8>)
{
  return sub_10008ABE8(v1, a1);
}

uint64_t sub_100060108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100060144()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100060168(void (**a1)(char *, uint64_t, uint64_t), uint64_t a2, uint64_t a3, int a4)
{
  return sub_100058D68(a1, a2, a3, a4, v4);
}

uint64_t sub_100060170()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100060194(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_1000601C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100060208(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100060244(uint64_t a1)
{
  return sub_1000D2F20(a1);
}

uint64_t sub_10006024C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100060270(uint64_t a1)
{
}

uint64_t sub_100060278(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100029E18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

void sub_1000602BC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000602C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000602D4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000602DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100060320(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for ArcadeState(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100047184(a1, a2);
  AsyncEvent.post(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000603C4(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch(sub_1000603E0, 0LL, 0LL);
}

uint64_t sub_1000603E0()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 16));
  uint64_t v4 = sub_100046970();
  v0[7] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(v4, ObjectType, v2);
  uint64_t v5 = sub_100029E18(&qword_10013D3F0);
  unint64_t v6 = sub_10006068C();
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  v0[8] = v7;
  void *v7 = v0;
  v7[1] = sub_100060498;
  return dispatch thunk of Future.then()(v0 + 2, v5, v6);
}

uint64_t sub_100060498()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(void *)(v2 + 72) = *(void *)(v2 + 16);
  *(_BYTE *)(v2 + 25) = *(_BYTE *)(v2 + 24);
  return swift_task_switch(sub_100060524, 0LL, 0LL);
}

uint64_t sub_100060524()
{
  uint64_t v1 = *(void **)(v0 + 72);
  char v2 = *(_BYTE *)(v0 + 25);
  sub_100047184((uint64_t)v1, v2);
  sub_100048470(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060574()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for ASCMigrationArcadeSubscriptionManagerImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd51ASCMigrationArcadeSubscriptionManagerImplementation);
}

void sub_1000605C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  uint64_t ObjectType = swift_getObjectType(*(void *)(*(void *)v0 + 16LL));
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  LOBYTE(objc_storeStrong((id *)&qword_100140838, v1) = v4;
  sub_100047184((uint64_t)v3, v4);
  sub_100048470(v3, v1);
}

uint64_t sub_100060618(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_10013D3EC);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002A858;
  v7[5] = a2;
  v7[6] = v6;
  v7[4] = a1;
  return swift_task_switch(sub_1000603E0, 0LL, 0LL);
}

unint64_t sub_10006068C()
{
  unint64_t result = qword_10013D3F8;
  if (!qword_10013D3F8)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D3F0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D3F8);
  }

  return result;
}

uint64_t sub_1000606D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  __chkstk_darwin(v2);
  char v4 = (char *)&v30[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSLogger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = &type metadata for Feature;
  uint64_t v32 = (void *)sub_10004C76C();
  LOBYTE(v30[0]) = 0;
  char v12 = isFeatureEnabled(_:)(v30);
  sub_100029F4C(v30);
  if ((v12 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v13 = sub_10002A768(v8, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    uint64_t v14 = sub_100029E18(&qword_10013EA00);
    uint64_t v15 = type metadata accessor for LogMessage(0LL);
    uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
          + *(void *)(*(void *)(v15 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(44LL, 1LL);
    v17._uint64_t countAndFlagsBits = 0LL;
    v17._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t v31 = &type metadata for Feature;
    LOBYTE(v30[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10004C810((uint64_t)v30);
    v18._object = (void *)0x80000001000FBF20LL;
    v18._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)(v7);
    Logger.info(_:)(v16, v8, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v31 = (ValueMetadata *)type metadata accessor for GreenTeaLogger(0LL);
    uint64_t v32 = &protocol witness table for GreenTeaLogger;
    sub_10002C328(v30);
    static GreenTeaLogger.shared.getter();
    ASDDeviceAppFetcher.init(regulatoryLogger:)(v30);
    uint64_t v19 = type metadata accessor for ASDDeviceAppFetcher(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v4, 0LL, 1LL, v19);
    sub_1000618D4( (uint64_t)v4,  v1 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store);
  }

  else
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v20 = sub_10002A768(v8, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v20, v8);
    uint64_t v21 = sub_100029E18(&qword_10013EA00);
    uint64_t v22 = type metadata accessor for LogMessage(0LL);
    uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL))
          + *(void *)(*(void *)(v22 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(45LL, 1LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v31 = &type metadata for Feature;
    LOBYTE(v30[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10004C810((uint64_t)v30);
    v25._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v25._object = (void *)0x80000001000FBEF0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v7);
    Logger.info(_:)(v23, v8, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v26 = v1 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store;
    uint64_t v27 = type metadata accessor for ASDDeviceAppFetcher(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  }

  return v1;
}

uint64_t sub_100060AD4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  v2[8] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100060B54, 0LL, 0LL);
}

uint64_t sub_100060B54()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  sub_1000601C4(v0[4] + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2) == 1)
  {
    uint64_t v4 = sub_100046AC4();
    v0[9] = sub_1000762BC((uint64_t)v4, v5);
    swift_bridgeObjectRelease(v4);
    uint64_t v6 = sub_100029E18(&qword_10013D550);
    unint64_t v7 = sub_100061888();
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[10] = v8;
    void *v8 = v0;
    v8[1] = sub_100060C90;
    return dispatch thunk of Future.then()(v0 + 2, v6, v7);
  }

  else
  {
    (*(void (**)(void, void, void))(v0[6] + 32LL))(v0[7], v0[8], v0[5]);
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to ASDDeviceAppFetcher.fetchQuery(_:)[1]);
    v0[13] = v10;
    void *v10 = v0;
    v10[1] = sub_100060D8C;
    return ASDDeviceAppFetcher.fetchQuery(_:)(v0[3]);
  }

uint64_t sub_100060C90()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0)
  {
    char v5 = sub_100060D50;
  }

  else
  {
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    char v5 = sub_100060D0C;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100060D0C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100060D50()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060D8C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 104);
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100060E54;
  }

  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v6 = sub_100060E00;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100060E00()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100060E54()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060EA0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100060ED0()
{
  return type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(0LL);
}

uint64_t type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(uint64_t a1)
{
  return sub_100060F6C( a1,  qword_10013D430,  (uint64_t)&nominal type descriptor for ASCMigrationDeviceAppFetcherImplementation);
}

uint64_t sub_100060EEC(uint64_t a1)
{
  uint64_t result = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(uint64_t a1)
{
  return sub_100060F6C( a1,  qword_10013D528,  (uint64_t)&nominal type descriptor for ASCMigrationDeviceAppFetcherImplementation.Store);
}

uint64_t sub_100060F6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t *sub_100060FA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ASDDeviceAppFetcher(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }
  }

  return a1;
}

uint64_t sub_100061068(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1LL, v2);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return result;
}

void *sub_1000610D0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_100061174(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  return a1;
}

void *sub_100061264(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  return a1;
}

void *sub_100061308(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  return a1;
}

uint64_t sub_1000613F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061404);
}

uint64_t sub_100061404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100061450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006145C);
}

uint64_t sub_10006145C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_1000614AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 1LL, v2);
}

uint64_t sub_1000614E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 1LL, v4);
}

uint64_t sub_100061524(uint64_t a1)
{
  uint64_t result = type metadata accessor for ASDDeviceAppFetcher(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

id sub_100061578(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = sub_100029EE0(a2, v9);
  return sub_1000616EC(a1, (uint64_t)v11, a3, a4, v8, v9, v10);
}

uint64_t sub_1000615DC(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_10013D54C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10006162C;
  return sub_100060AD4(a1);
}

uint64_t sub_10006162C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

unint64_t sub_100061680(uint64_t a1)
{
  unint64_t result = sub_1000616A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000616A4()
{
  unint64_t result = qword_10013D540;
  if (!qword_10013D540)
  {
    uint64_t v1 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000EEDB4, v1);
    atomic_store(result, &qword_10013D540);
  }

  return result;
}

id sub_1000616EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v12 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  __chkstk_darwin(v16);
  Swift::String v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v27[3] = a6;
  v27[4] = a7;
  uint64_t v19 = sub_10002C328(v27);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16LL))(v19, a2, a6);
  sub_1000601C4( a5 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store,  (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1LL, v12) == 1)
  {
    uint64_t v20 = sub_100046AC4();
    id v22 = sub_1000768A4((uint64_t)v20, v21, (uint64_t)v19, v25, v26, a6, a7);
    swift_bridgeObjectRelease(v20);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    id v22 = (id)ASDDeviceAppFetcher.observeQuery(_:on:using:)(a1, v27, v25, v26);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  sub_100029F4C(v27);
  return v22;
}

unint64_t sub_100061888()
{
  unint64_t result = qword_10013D558;
  if (!qword_10013D558)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D550);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013D558);
  }

  return result;
}

uint64_t sub_1000618D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100061918@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v2 = type metadata accessor for Device(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Bag(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OSLogger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = &type metadata for Feature;
  unint64_t v42 = sub_10004C76C();
  LOBYTE(v40[0]) = 0;
  char v16 = isFeatureEnabled(_:)(v40);
  sub_100029F4C(v40);
  if ((v16 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v17 = sub_10002A768(v12, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
    uint64_t v18 = sub_100029E18(&qword_10013EA00);
    uint64_t v19 = type metadata accessor for LogMessage(0LL);
    uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
          + *(void *)(*(void *)(v19 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v41 = &type metadata for Feature;
    LOBYTE(v40[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
    sub_10004C810((uint64_t)v40);
    v22._object = (void *)0x80000001000FBF80LL;
    v22._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    LogMessage.init(stringInterpolation:)(v11);
    Logger.info(_:)(v20, v12, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v38, v5);
    static Device.current.getter(v23);
    uint64_t v24 = type metadata accessor for HardwarePlatform(0LL);
    uint64_t v25 = v39;
    v39[3] = v24;
    v25[4] = &protocol witness table for HardwarePlatform;
    sub_10002C328(v25);
    return HardwarePlatform.init(bag:device:)(v8, v4);
  }

  else
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v27 = sub_10002A768(v12, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v27, v12);
    uint64_t v28 = sub_100029E18(&qword_10013EA00);
    uint64_t v29 = type metadata accessor for LogMessage(0LL);
    uint64_t v30 = swift_allocObject( v28,  ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL))
          + *(void *)(*(void *)(v29 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(44LL, 1LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t v41 = &type metadata for Feature;
    LOBYTE(v40[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
    sub_10004C810((uint64_t)v40);
    v32._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v32._object = (void *)0x80000001000FBF50LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v11);
    Logger.info(_:)(v30, v12, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v33 = swift_allocObject(&unk_100121618, 17LL, 7LL);
    *(_BYTE *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    uint64_t v34 = sub_100029E18(&qword_10013D560);
    swift_allocObject(v34, 25LL, 7LL);
    uint64_t v35 = sub_100061D7C((uint64_t)sub_100062208, v33);
    char v36 = v39;
    v39[3] = &type metadata for HardwarePlatform;
    unint64_t result = sub_100062210();
    v36[4] = result;
    *char v36 = v35;
    *((_BYTE *)v36 + 8) = 0;
  }

  return result;
}

uint64_t sub_100061D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v2 + 24) = 2;
  v40[1] = sub_100032130();
  uint64_t v15 = sub_100029E18(&qword_10013D2F0);
  uint64_t v16 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
        + *(void *)(v12 + 72),
          *(unsigned __int8 *)(v12 + 80) | 7LL);
  __int128 v41 = xmmword_1000EDBE0;
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  aBlock[0] = v16;
  uint64_t v17 = sub_100027978( (unint64_t *)&qword_10013DD90,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = sub_100029E18(&qword_10013D2F8);
  uint64_t v19 = sub_100062254((unint64_t *)&qword_10013DDA0, &qword_10013D2F8);
  uint64_t v20 = dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v11, v17);
  static DispatchQoS.unspecified.getter(v20);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v4);
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x7669736E65707845LL,  0xEF3E6C6F6F423C65LL,  v10,  v14,  v7,  0LL);
  uint64_t v22 = v42;
  *(void *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  uint64_t v23 = sub_100029E18(&qword_10013D260);
  uint64_t v24 = v43;
  uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
        + *(void *)(v43 + 72),
          *(unsigned __int8 *)(v43 + 80) | 7LL);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v41;
  static DispatchWorkItemFlags.barrier.getter();
  aBlock[0] = v25;
  uint64_t v26 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v28 = sub_100062254((unint64_t *)&qword_10013D270, (uint64_t *)&unk_10013DBD0);
  uint64_t v30 = v44;
  uint64_t v29 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v45, v26);
  uint64_t v31 = swift_allocObject(&unk_100121640, 24LL, 7LL);
  uint64_t v32 = v22;
  swift_weakInit(v31 + 16, v22);
  uint64_t v33 = (void *)swift_allocObject(&unk_100121668, 40LL, 7LL);
  uint64_t v34 = v46;
  uint64_t v35 = v47;
  v33[2] = v31;
  v33[3] = v34;
  v33[4] = v35;
  aBlock[4] = sub_1000622E4;
  __int128 v51 = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = &unk_100121680;
  char v36 = _Block_copy(aBlock);
  swift_retain(v31);
  uint64_t v37 = swift_retain(v35);
  static DispatchQoS.unspecified.getter(v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v30, v36);
  _Block_release(v36);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v49);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v29);
  uint64_t v38 = v51;
  swift_release(v31);
  swift_release(v38);
  return v32;
}

uint64_t sub_100062188(uint64_t a1, void (*a2)(void *__return_ptr))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, (char *)v6 + 1, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    a2(v6);
    *(_BYTE *)(v5 + 24) = v6[0];
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_1000621F8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100062208@<X0>(_BYTE *a1@<X8>)
{
  return sub_100099F54(*(unsigned __int8 *)(v1 + 16), a1);
}

unint64_t sub_100062210()
{
  unint64_t result = qword_10013D568;
  if (!qword_10013D568)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EFDE4, &type metadata for HardwarePlatform);
    atomic_store(result, (unint64_t *)&qword_10013D568);
  }

  return result;
}

uint64_t sub_100062254(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100029F6C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100062294()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000622B8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000622E4()
{
  return sub_100062188(*(void *)(v0 + 16), *(void (**)(void *__return_ptr))(v0 + 24));
}

uint64_t sub_1000622F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100062300(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100062308(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = *(void *)(type metadata accessor for AdamID(0LL) - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      id v7 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:AdamID.int64Value.getter()];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
      specialized ContiguousArray._endMutation()(v9);
      v5 += v6;
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_1000623FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OSLogger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = &type metadata for Feature;
  unint64_t v25 = sub_10004C76C();
  LOBYTE(v23[0]) = 0;
  char v9 = isFeatureEnabled(_:)(v23);
  sub_100029F4C(v23);
  if ((v9 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v10 = sub_10002A768(v5, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
    uint64_t v11 = sub_100029E18(&qword_10013EA00);
    uint64_t v12 = type metadata accessor for LogMessage(0LL);
    uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
          + *(void *)(*(void *)(v12 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(42LL, 1LL);
    v14._uint64_t countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v24 = &type metadata for Feature;
    LOBYTE(v23[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v23);
    sub_10004C810((uint64_t)v23);
    unint64_t v15 = 0x80000001000FC100LL;
    unint64_t v16 = 0xD00000000000002ALL;
  }

  else
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v17 = sub_10002A768(v5, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
    uint64_t v18 = sub_100029E18(&qword_10013EA00);
    uint64_t v19 = type metadata accessor for LogMessage(0LL);
    uint64_t v13 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
          + *(void *)(*(void *)(v19 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v24 = &type metadata for Feature;
    LOBYTE(v23[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v23);
    sub_10004C810((uint64_t)v23);
    unint64_t v16 = 0xD00000000000002BLL;
    unint64_t v15 = 0x80000001000FC0D0LL;
  }

  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v16);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.info(_:)(v13, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = [(id)objc_opt_self(ASDPurchaseHistory) sharedInstance];
  *(_BYTE *)(v1 + 24) = v9 & 1;
  return v1;
}

uint64_t sub_100062718(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return swift_task_switch(sub_100062730, 0LL, 0LL);
}

uint64_t sub_100062730()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[17] = v2;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v3 = v0 + 2;
    uint64_t v4 = v0[15];
    v0[2] = v0;
    v0[3] = sub_1000628D0;
    uint64_t v5 = swift_continuation_init(v0 + 2, 1LL);
    v0[10] = _NSConcreteStackBlock;
    uint64_t v6 = v0 + 10;
    v6[1] = 0x40000000LL;
    v6[2] = sub_100062A14;
    void v6[3] = &unk_100121770;
    void v6[4] = v5;
    [v2 updateWithContext:v4 withCompletionHandler:v6];
    return swift_continuation_await(v3);
  }

  else
  {
    uint64_t v8 = v0[15];
    id v9 = v2;
    v0[18] = sub_100077AF4(v8);
    uint64_t v10 = sub_100029E18(&qword_10013CBE0);
    uint64_t v11 = sub_100039030(&qword_10013D688, &qword_10013CBE0);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[19] = v12;
    void *v12 = v0;
    v12[1] = sub_100062864;
    return dispatch thunk of Future.then()(v12, v10, v11);
  }

uint64_t sub_100062864()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(void *)(v2 + 144));
    uint64_t v4 = sub_100062968;
  }

  else
  {
    uint64_t v4 = sub_100062930;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000628D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 168LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000629D0;
  }
  else {
    uint64_t v2 = sub_10006299C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100062930()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_release(*(void *)(v0 + 144));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062968()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006299C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000629D0()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062A14(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013E900);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  void *v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_100062A88(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch(sub_100062AA4, 0LL, 0LL);
}

uint64_t sub_100062AA4()
{
  uint64_t v1 = v0[17];
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v2 = v0 + 2;
    uint64_t v4 = v0[15];
    uint64_t v3 = v0[16];
    uint64_t v5 = *(void **)(v1 + 16);
    v0[18] = v5;
    v0[2] = v0;
    v0[3] = sub_100062BD8;
    uint64_t v6 = swift_continuation_init(v0 + 2, 1LL);
    v0[10] = _NSConcreteStackBlock;
    id v7 = v0 + 10;
    v7[1] = 0x40000000LL;
    v7[2] = sub_100062A14;
    v7[3] = &unk_100121758;
    v7[4] = v6;
    [v5 updateForAccountID:v4 withContext:v3 withCompletionHandler:v7];
    return swift_continuation_await(v2);
  }

  else
  {
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x80000001000FC0A0LL,  "appstorecomponentsd/ASCMigrationPurchaseHistoryImplementation.swift",  67LL,  2LL,  76LL,  0);
  }

uint64_t sub_100062BD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 152LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100062C6C;
  }
  else {
    uint64_t v2 = sub_100062C38;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100062C38()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062C6C()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062CAC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_100062CC8, 0LL, 0LL);
}

uint64_t sub_100062CC8()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[6] = v2;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v3 = async function pointer to ASDPurchaseHistory.fetchAllApps(of:compatibleWith:)[1];
    v2;
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[10] = v4;
    void *v4 = v0;
    v4[1] = sub_100062E58;
    return ASDPurchaseHistory.fetchAllApps(of:compatibleWith:)(v0[3], v0[4]);
  }

  else
  {
    uint64_t v6 = v0[3];
    id v7 = v2;
    v0[7] = sub_100077CF4(v6);
    uint64_t v8 = sub_100029E18(&qword_10013D660);
    uint64_t v9 = sub_100039030(&qword_10013D668, &qword_10013D660);
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[8] = v10;
    void *v10 = v0;
    v10[1] = sub_100062DDC;
    return dispatch thunk of Future.then()(v0 + 2, v8, v9);
  }

uint64_t sub_100062DDC()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0)
  {
    uint64_t v5 = sub_100062F04;
  }

  else
  {
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    uint64_t v5 = sub_100062ECC;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100062E58(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100062F70;
  }

  else
  {
    *(void *)(v4 + 104) = a1;
    uint64_t v6 = sub_100062F38;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100062ECC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 96));
}

uint64_t sub_100062F04()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062F38()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
}

uint64_t sub_100062F70()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100062FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  void v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch(sub_100062FC0, 0LL, 0LL);
}

uint64_t sub_100062FC0()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[8] = v2;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v3 = async function pointer to ASDPurchaseHistory.fetchApps(of:withIDs:compatibleWith:)[1];
    v2;
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[12] = v4;
    void *v4 = v0;
    v4[1] = sub_10006318C;
    return ASDPurchaseHistory.fetchApps(of:withIDs:compatibleWith:)(v0[4], v0[5], v0[6]);
  }

  else
  {
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[4];
    id v8 = v2;
    uint64_t v9 = sub_100062308(v6);
    v0[9] = sub_100077F0C(v7, (uint64_t)v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = sub_100029E18(&qword_10013D660);
    uint64_t v11 = sub_100039030(&qword_10013D668, &qword_10013D660);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[10] = v12;
    void *v12 = v0;
    v12[1] = sub_100063118;
    return dispatch thunk of Future.then()(v0 + 3, v10, v11);
  }

uint64_t sub_100063118()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[9]);
  if (v0)
  {
    uint64_t v4 = sub_100063238;
  }

  else
  {
    v2[14] = v2[3];
    uint64_t v4 = sub_100063200;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10006318C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000632A4;
  }

  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v6 = sub_10006326C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100063200()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 112));
}

uint64_t sub_100063238()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006326C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

uint64_t sub_1000632A4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000632D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1000632F4, 0LL, 0LL);
}

uint64_t sub_1000632F4()
{
  uint64_t v1 = v0[5];
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v2 = *(void **)(v1 + 16);
    v0[6] = v2;
    uint64_t v3 = async function pointer to ASDPurchaseHistory.fetchApps(of:withIDs:compatibleWith:)[1];
    v2;
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[7] = v4;
    void *v4 = v0;
    v4[1] = sub_1000633EC;
    return ASDPurchaseHistory.fetchApps(of:withIDs:compatibleWith:)(v0[2], v0[3], v0[4]);
  }

  else
  {
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003ELL,  0x80000001000FC060LL,  "appstorecomponentsd/ASCMigrationPurchaseHistoryImplementation.swift",  67LL,  2LL,  116LL,  0);
  }

uint64_t sub_1000633EC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100063498;
  }

  else
  {
    *(void *)(v4 + 72) = a1;
    uint64_t v6 = sub_100063460;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100063460()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 72));
}

uint64_t sub_100063498()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000634CC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1000634E8, 0LL, 0LL);
}

uint64_t sub_1000634E8()
{
  uint64_t v1 = v0[4];
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v2 = *(void **)(v1 + 16);
    v0[5] = v2;
    uint64_t v3 = async function pointer to ASDPurchaseHistory.fetchAllApps(for:compatibleWith:)[1];
    v2;
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[6] = v4;
    void *v4 = v0;
    v4[1] = sub_1000635DC;
    return ASDPurchaseHistory.fetchAllApps(for:compatibleWith:)(v0[2], v0[3]);
  }

  else
  {
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000003ALL,  0x80000001000FC020LL,  "appstorecomponentsd/ASCMigrationPurchaseHistoryImplementation.swift",  67LL,  2LL,  130LL,  0);
  }

uint64_t sub_1000635DC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 48);
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100063688;
  }

  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v6 = sub_100063650;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100063650()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 64));
}

uint64_t sub_100063688()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000636BC()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t type metadata accessor for ASCMigrationPurchaseHistoryImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd41ASCMigrationPurchaseHistoryImplementation);
}

uint64_t initializeBufferWithCopyOfBuffer for ASCMigrationPurchaseHistoryImplementation.Store( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

void destroy for ASCMigrationPurchaseHistoryImplementation.Store(id *a1)
{
}

uint64_t assignWithCopy for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t initializeWithTake for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for ASCMigrationPurchaseHistoryImplementation.Store( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCMigrationPurchaseHistoryImplementation.Store( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100063850(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100063858(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASCMigrationPurchaseHistoryImplementation.Store()
{
  return &type metadata for ASCMigrationPurchaseHistoryImplementation.Store;
}

uint64_t sub_100063874(uint64_t a1)
{
  uint64_t v4 = *v1;
  id v5 = (void *)swift_task_alloc(dword_10013D684);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002A858;
  v5[15] = a1;
  v5[16] = v4;
  return swift_task_switch(sub_100062730, 0LL, 0LL);
}

uint64_t sub_1000638D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_10013D67C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100039088;
  v7[16] = a2;
  v7[17] = v6;
  v7[15] = a1;
  return swift_task_switch(sub_100062AA4, 0LL, 0LL);
}

uint64_t sub_10006394C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_10013D674);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10006162C;
  v7[4] = a2;
  v7[5] = v6;
  v7[3] = a1;
  return swift_task_switch(sub_100062CC8, 0LL, 0LL);
}

uint64_t sub_1000639C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc(dword_10013D65C);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_100063B90;
  v9[6] = a3;
  v9[7] = v8;
  v9[4] = a1;
  v9[5] = a2;
  return swift_task_switch(sub_100062FC0, 0LL, 0LL);
}

uint64_t sub_100063A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc(dword_10013D654);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_100063B90;
  v9[4] = a3;
  v9[5] = v8;
  v9[2] = a1;
  v9[3] = a2;
  return swift_task_switch(sub_1000632F4, 0LL, 0LL);
}

uint64_t sub_100063AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_10013D64C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100063B90;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_1000634E8, 0LL, 0LL);
}

unint64_t sub_100063B24(uint64_t a1)
{
  unint64_t result = sub_100063B48();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100063B48()
{
  unint64_t result = qword_10013D640;
  if (!qword_10013D640)
  {
    uint64_t v1 = type metadata accessor for ASCMigrationPurchaseHistoryImplementation();
    unint64_t result = swift_getWitnessTable(&unk_1000EEE70, v1);
    atomic_store(result, &qword_10013D640);
  }

  return result;
}

uint64_t sub_100063B94()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OSLogger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = &type metadata for Feature;
  unint64_t v25 = sub_10004C76C();
  LOBYTE(v23[0]) = 0;
  char v9 = isFeatureEnabled(_:)(v23);
  sub_100029F4C(v23);
  if ((v9 & 1) != 0)
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v10 = sub_10002A768(v5, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
    uint64_t v11 = sub_100029E18(&qword_10013EA00);
    uint64_t v12 = type metadata accessor for LogMessage(0LL);
    uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
          + *(void *)(*(void *)(v12 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(42LL, 1LL);
    v14._uint64_t countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v24 = &type metadata for Feature;
    LOBYTE(v23[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v23);
    sub_10002E92C((uint64_t)v23, &qword_10013C6F0);
    unint64_t v15 = 0x80000001000FC200LL;
    unint64_t v16 = 0xD00000000000002ALL;
  }

  else
  {
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v17 = sub_10002A768(v5, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
    uint64_t v18 = sub_100029E18(&qword_10013EA00);
    uint64_t v19 = type metadata accessor for LogMessage(0LL);
    uint64_t v13 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
          + *(void *)(*(void *)(v19 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v24 = &type metadata for Feature;
    LOBYTE(v23[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v23);
    sub_10002E92C((uint64_t)v23, &qword_10013C6F0);
    unint64_t v16 = 0xD00000000000002BLL;
    unint64_t v15 = 0x80000001000FC1D0LL;
  }

  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v16);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.info(_:)(v13, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = [(id)objc_opt_self(ASDPurchaseManager) sharedManager];
  *(_BYTE *)(v1 + 24) = v9 & 1;
  return v1;
}

uint64_t sub_100063EC0(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return swift_task_switch(sub_100063ED8, 0LL, 0LL);
}

uint64_t sub_100063ED8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[11] = v2;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v3 = async function pointer to ASDPurchaseManager.start(_:)[1];
    v2;
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[15] = v4;
    void *v4 = v0;
    v4[1] = sub_100064108;
    return ASDPurchaseManager.start(_:)(v0[9]);
  }

  else
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = sub_100029E18(&qword_10013D770);
    id v8 = v2;
    v0[12] = Promise.__allocating_init()(v8);
    uint64_t v9 = Promise.makeCompletionAdapter()();
    uint64_t v11 = v10;
    uint64_t v12 = swift_allocObject(&unk_1001218A0, 32LL, 7LL);
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = v9;
    *(void *)(v12 + 24) = v11;
    v0[6] = sub_100064944;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256LL;
    v0[4] = sub_100064794;
    v0[5] = &unk_1001218B8;
    uint64_t v13 = _Block_copy(v0 + 2);
    swift_release(v0[7]);
    [v8 startPurchase:v6 withResultHandler:v13];
    _Block_release(v13);
    uint64_t v14 = sub_100039030(&qword_10013D778, &qword_10013D770);
    unint64_t v15 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[13] = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_10006408C;
    return dispatch thunk of Future.then()(v0 + 8, v7, v14);
  }

uint64_t sub_10006408C()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0)
  {
    uint64_t v5 = sub_1000641DC;
  }

  else
  {
    *(void *)(v2 + 136) = *(void *)(v2 + 64);
    uint64_t v5 = sub_100064180;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100064108(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 120);
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10006424C;
  }

  else
  {
    *(_BYTE *)(v4 + 144) = a1 & 1;
    uint64_t v6 = sub_100064214;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100064180()
{
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 88);
  id v3 = [v1 success];

  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t sub_1000641DC()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100064214()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 144));
}

uint64_t sub_10006424C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100064284(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_1000642A0, 0LL, 0LL);
}

uint64_t sub_1000642A0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[11] = v2;
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    uint64_t v3 = async function pointer to ASDPurchaseManager.install(_:)[1];
    v2;
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[15] = v4;
    void *v4 = v0;
    v4[1] = sub_10006448C;
    return ASDPurchaseManager.install(_:)(v0[8], v0[9]);
  }

  else
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = sub_100029E18(&qword_10013D750);
    v0[12] = Promise.__allocating_init()(v2);
    id v8 = (void *)objc_opt_self(&OBJC_CLASS___ASDInstallApps);
    v0[6] = Promise.makeCompletionAdapter()();
    v0[7] = v9;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256LL;
    v0[4] = sub_100064808;
    v0[5] = &unk_100121868;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_release(v0[7]);
    [v8 installApp:v6 withCompletionHandler:v10];
    _Block_release(v10);
    uint64_t v11 = sub_100039030(&qword_10013D758, &qword_10013D750);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
    v0[13] = v12;
    void *v12 = v0;
    v12[1] = sub_100064428;
    return dispatch thunk of Future.then()(v0[8], v7, v11);
  }

uint64_t sub_100064428()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100064528;
  }
  else {
    uint64_t v3 = sub_1000644F0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10006448C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100064594;
  }
  else {
    uint64_t v3 = sub_100064560;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000644F0()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release(*(void *)(v0 + 96));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064528()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release(*(void *)(v0 + 96));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064560()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064594()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ASCMigrationPurchaseManagerImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd41ASCMigrationPurchaseManagerImplementation);
}

ValueMetadata *type metadata accessor for ASCMigrationPurchaseManagerImplementation.Store()
{
  return &type metadata for ASCMigrationPurchaseManagerImplementation.Store;
}

uint64_t sub_1000645F8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc(dword_10013D76C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10006465C;
  void v5[9] = a1;
  v5[10] = v4;
  return swift_task_switch(sub_100063ED8, 0LL, 0LL);
}

uint64_t sub_10006465C(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a1 & 1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000646B8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_10013D74C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002A858;
  v7[9] = a2;
  void v7[10] = v6;
  v7[8] = a1;
  return swift_task_switch(sub_1000642A0, 0LL, 0LL);
}

unint64_t sub_10006472C(uint64_t a1)
{
  unint64_t result = sub_100064750();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100064750()
{
  unint64_t result = qword_10013D740;
  if (!qword_10013D740)
  {
    uint64_t v1 = type metadata accessor for ASCMigrationPurchaseManagerImplementation();
    unint64_t result = swift_getWitnessTable(&unk_1000EEF20, v1);
    atomic_store(result, &qword_10013D740);
  }

  return result;
}

void sub_100064794(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_100064808(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100029E18(&qword_10013D760);
  __chkstk_darwin(v6);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void (**)(char *, void *))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v8, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v8, 1LL, 1LL, v12);
  }

  swift_retain(v9);
  id v13 = a3;
  v10(v8, a3);
  swift_release(v9);

  return sub_10002E92C((uint64_t)v8, &qword_10013D760);
}

uint64_t sub_100064908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100064918(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100064920()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100064944(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_10006497C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = swift_allocObject(*a3, 40LL, 7LL);
  uint64_t v6 = swift_unknownObjectRetain(a1);
  uint64_t v7 = sub_1000D8490(v6, v5);
  swift_unknownObjectRelease(a1);
  v9[3] = v4;
  v9[4] = sub_100064AB8();
  v9[0] = v7;
  AsyncEvent.post(_:)(v9);
  return sub_100029F4C(v9);
}

uint64_t type metadata accessor for ASCMigrationRestrictionsImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd38ASCMigrationRestrictionsImplementation);
}

uint64_t sub_100064A20()
{
  return sub_1000BFC10();
}

id sub_100064A54()
{
  return [*(id *)(*(void *)(*(void *)v0 + 16) + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_profile) isOnDeviceAppInstallationAllowed];
}

uint64_t sub_100064A84()
{
  return 1LL;
}

uint64_t sub_100064A90()
{
  return sub_1000BF7A0() & 1;
}

unint64_t sub_100064AB8()
{
  unint64_t result = qword_10013D828;
  if (!qword_10013D828)
  {
    uint64_t v1 = type metadata accessor for ASCMigrationRestrictionsImplementation();
    unint64_t result = swift_getWitnessTable(&unk_1000EEFB8, v1);
    atomic_store(result, (unint64_t *)&qword_10013D828);
  }

  return result;
}

double sub_100064AFC(void *a1, uint64_t a2)
{
  uint64_t v143 = a2;
  uint64_t v3 = sub_100029E18(&qword_10013CF68);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v139 = (unint64_t)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v140 = (uint64_t)&v121 - v6;
  uint64_t v7 = type metadata accessor for JSONContext(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v121 - v11;
  uint64_t v144 = type metadata accessor for JSONObject(0LL);
  unint64_t v141 = *(void *)(v144 - 8);
  uint64_t v13 = __chkstk_darwin(v144);
  uint64_t v134 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v126 = (char *)&v121 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  char v133 = (char *)&v121 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  id v132 = (char *)&v121 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v131 = (char *)&v121 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v130 = (char *)&v121 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v129 = (uint64_t)&v121 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v128 = (uint64_t)&v121 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v137 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v121 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v127 = (uint64_t)&v121 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v121 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v121 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  __int128 v41 = (char *)&v121 - v40;
  __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v121 - v42;
  unint64_t v138 = a1;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v44 = v8;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v45(v12, v143, v7);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v46 = v142;
  uint64_t v47 = (void *)sub_10004CBCC((uint64_t)v43);
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v7);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v43, v144);
    return result;
  }

  uint64_t v122 = v38;
  uint64_t v121 = (void (*)(uint64_t, uint64_t, uint64_t))v45;
  uint64_t v123 = v35;
  uint64_t v124 = v47;
  uint64_t v125 = 0LL;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v7);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v141 + 8);
  char v50 = v43;
  uint64_t v51 = v144;
  v49(v50, v144);
  uint64_t v52 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v53 = v140;
  JSONObject.dictionary.getter(v52);
  uint64_t v142 = v49;
  v49(v41, v51);
  uint64_t v54 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  if (v56(v53, 1LL, v54) == 1)
  {
    sub_10004E728(v140);
    uint64_t v57 = (uint64_t)v122;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v59 = v58;
    uint64_t v60 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v61 = v140;
    uint64_t v62 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v59, &type metadata for String, v60);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v61, v54);
    unint64_t v141 = v62;
    uint64_t v57 = (uint64_t)v122;
    if (v62) {
      goto LABEL_7;
    }
  }

  unint64_t v141 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_7:
  uint64_t v63 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  uint64_t v64 = v139;
  JSONObject.dictionary.getter(v63);
  v142((char *)v57, v144);
  uint64_t v65 = v7;
  if (v56(v64, 1LL, v54) == 1)
  {
    sub_10004E728(v64);
    uint64_t v66 = v143;
    uint64_t v67 = v136;
    uint64_t v68 = v137;
    uint64_t v69 = (uint64_t)v123;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v70 = v64;
    uint64_t v72 = v71;
    uint64_t v73 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v74 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v72, &type metadata for String, v73);
    uint64_t v75 = v54;
    unint64_t v76 = v74;
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v70, v75);
    uint64_t v66 = v143;
    uint64_t v67 = v136;
    uint64_t v68 = v137;
    uint64_t v69 = (uint64_t)v123;
    if (v76) {
      goto LABEL_11;
    }
  }

  unint64_t v76 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_11:
  uint64_t v77 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v78 = JSONObject.int.getter(v77);
  if ((v79 & 1) != 0)
  {
    uint64_t v114 = type metadata accessor for JSONError(0LL);
    uint64_t v115 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v114, v115, 0LL, 0LL);
    char v117 = v116;
    type metadata accessor for ASCOfferFlags(0LL);
    void *v117 = 0x65756C6156776172LL;
    v117[1] = 0xE800000000000000LL;
    v117[2] = v118;
    v117[3] = _swiftEmptyArrayStorage;
    uint64_t v119 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v114 - 8) + 104LL))( v117,  enum case for JSONError.malformedProperty(_:),  v114);
    swift_willThrow(v119);
    v142((char *)v69, v144);

    swift_bridgeObjectRelease(v141);
    *(void *)&double result = swift_bridgeObjectRelease(v76).n128_u64[0];
  }

  else
  {
    unint64_t v139 = v76;
    uint64_t v140 = v78;
    uint64_t v80 = v144;
    uint64_t v81 = (void (*)(uint64_t, uint64_t))v142;
    v142((char *)v69, v144);
    uint64_t v82 = v127;
    uint64_t v83 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
    unint64_t v138 = (void *)JSONObject.number.getter(v83);
    v81(v82, v80);
    JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
    v121(v67, v66, v65);
    uint64_t v84 = sub_100029E18(&qword_10013CF70);
    unint64_t v85 = sub_10004DCA0();
    uint64_t v86 = Array<A>.init(tryDeserializing:using:)(v68, v67, v84, v85);
    uint64_t v87 = v125;
    uint64_t v137 = sub_10004D100(v86);
    uint64_t v125 = v87;
    swift_bridgeObjectRelease(v86);
    uint64_t v88 = v128;
    uint64_t v89 = JSONObject.subscript.getter(0x7469547472656C61LL, 0xEA0000000000656CLL);
    uint64_t v136 = JSONObject.string.getter(v89);
    uint64_t v127 = v90;
    v81(v88, v80);
    uint64_t v91 = v129;
    uint64_t v92 = JSONObject.subscript.getter(0x73654D7472656C61LL, 0xEC00000065676173LL);
    uint64_t v128 = JSONObject.string.getter(v92);
    uint64_t v123 = (char *)v93;
    v81(v91, v80);
    uint64_t v94 = v130;
    uint64_t v95 = JSONObject.subscript.getter(0xD000000000000012LL, 0x80000001000FC2A0LL);
    uint64_t v129 = JSONObject.string.getter(v95);
    uint64_t v122 = (char *)v96;
    v81((uint64_t)v94, v80);
    uint64_t v97 = v131;
    uint64_t v98 = JSONObject.subscript.getter(0x6C65636E61437369LL, 0xEC000000656C6261LL);
    LODWORD(v94) = JSONObject.BOOL.getter(v98);
    v81((uint64_t)v97, v80);
    LODWORD(v131) = (v94 == 2) | v94;
    uint64_t v99 = v132;
    uint64_t v100 = JSONObject.subscript.getter(0xD000000000000021LL, 0x80000001000FC2C0LL);
    uint64_t v130 = (char *)JSONObject.number.getter(v100);
    v81((uint64_t)v99, v80);
    uint64_t v101 = v133;
    uint64_t v102 = JSONObject.subscript.getter(0xD000000000000020LL, 0x80000001000FC2F0LL);
    LOBYTE(v99) = JSONObject.BOOL.getter(v102);
    v81((uint64_t)v101, v80);
    LODWORD(v133) = v99 & 1;
    JSONObject.subscript.getter(0xD00000000000001BLL, 0x80000001000FC320LL);
    type metadata accessor for ASCControllerRequirement(0LL);
    uint64_t v104 = v103;
    uint64_t v105 = sub_100027978( &qword_10013C060,  (uint64_t (*)(uint64_t))type metadata accessor for ASCControllerRequirement,  (uint64_t)&unk_1000ECFE4);
    JSONObject.stringEnumOrNil<A>()(&v145, v104, v105);
    v81((uint64_t)v68, v80);
    unint64_t v106 = v145;
    uint64_t v107 = v126;
    uint64_t v108 = JSONObject.subscript.getter(0xD000000000000029LL, 0x80000001000FC340LL);
    LOBYTE(v104) = JSONObject.BOOL.getter(v108);
    v81((uint64_t)v107, v80);
    LOBYTE(v107) = v104 & 1;
    uint64_t v109 = v134;
    uint64_t v110 = JSONObject.subscript.getter(0xD00000000000001BLL, 0x80000001000FC370LL);
    LOBYTE(v104) = JSONObject.BOOL.getter(v110);
    v81((uint64_t)v109, v80);
    char v111 = v104 & 1;
    JSONObject.subscript.getter(0x6974656C706D6F63LL, 0xEF726566664F6E6FLL);
    uint64_t v112 = sub_100029494((uint64_t)v68, v143);
    v81((uint64_t)v68, v80);
    id v113 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v135));
    HIBYTE(v120) = v111;
    LOBYTE(v120) = (_BYTE)v107;
    sub_100065604( v124,  v141,  v139,  v140,  v138,  (uint64_t)v137,  v136,  v127,  v128,  (uint64_t)v123,  v129,  (uint64_t)v122,  v131 & 1,  v130,  (char)v133,  v106,  v120,  v112);
  }

  return result;
}

double sub_1000655F0(void *a1, uint64_t a2)
{
  return sub_100064AFC(a1, a2);
}

id sub_100065604( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, char a15, void *a16, __int16 a17, uint64_t a18)
{
  v33.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v32.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  v31.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  unint64_t v22 = swift_bridgeObjectRelease(a6).n128_u64[0];
  if (a8)
  {
    NSString v30 = String._bridgeToObjectiveC()();
    unint64_t v22 = swift_bridgeObjectRelease(a8).n128_u64[0];
    uint64_t v23 = a12;
    if (a10)
    {
LABEL_3:
      NSString v24 = String._bridgeToObjectiveC()();
      unint64_t v22 = swift_bridgeObjectRelease(a10).n128_u64[0];
      goto LABEL_6;
    }
  }

  else
  {
    NSString v30 = 0LL;
    uint64_t v23 = a12;
    if (a10) {
      goto LABEL_3;
    }
  }

  NSString v24 = 0LL;
LABEL_6:
  if (v23)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unint64_t v22 = swift_bridgeObjectRelease(v23).n128_u64[0];
  }

  else
  {
    NSString v25 = 0LL;
  }

  LOWORD(v29) = a17 & 0x101;
  LOBYTE(v28) = a15 & 1;
  LOBYTE(v27) = a13 & 1;
  id v36 = [v34 initWithID:a1 titles:v33.super.isa subtitles:v32.super.isa flags:a4 ageRating:a5 metrics:v31.super.isa alertTitle:*(double *)&v22 alertMessage:v30 alertFooterMessage:v24 isCancelable:v25 ch eckRestrictionsForContentRating:v27 shouldCheckForAvailableDiskSpace:a14 remoteControllerRequirement:v28 shouldIncludeActi veAccountInFooterMessage:a16 shouldPromptForConfirmation:v29 completionOffer:a18];

  swift_unknownObjectRelease(a18);
  return v36;
}

unint64_t sub_100065848()
{
  unint64_t v1 = sub_1000452F4((uint64_t)_swiftEmptyArrayStorage);
  if ([v0 supportsDSIDLessInstall])
  {
    LOBYTE(v5) = 1;
    AnyHashable.init<A>(_:)(v6, &v5, &type metadata for Bool, &protocol witness table for Bool);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    unint64_t v5 = v1;
    sub_10008F984((uint64_t)v6, 0x654C444953447369LL, 0xEA00000000007373LL, isUniquelyReferenced_nonNull_native);
    unint64_t v1 = v5;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  if ([v0 shouldInstallParentApp])
  {
    LOBYTE(v5) = 1;
    AnyHashable.init<A>(_:)(v6, &v5, &type metadata for Bool, &protocol witness table for Bool);
    char v3 = swift_isUniquelyReferenced_nonNull_native(v1);
    unint64_t v5 = v1;
    sub_10008F984((uint64_t)v6, 0xD000000000000016LL, 0x80000001000FC390LL, v3);
    unint64_t v1 = v5;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v1;
}

id sub_100065978(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v61 = a1;
  uint64_t v6 = type metadata accessor for State(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v57 = (char *)&v55 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v58 = (char *)&v55 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v55 = (char *)&v55 - v16;
  __chkstk_darwin(v15);
  uint64_t v56 = (char *)&v55 - v17;
  uint64_t v18 = sub_100029E18(&qword_10013D830);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ArcadeState(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  NSString v24 = (id *)((char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v60 = a2;
  unint64_t v25 = (unint64_t)[a2 flags] & 4;
  (*(void (**)(id *, uint64_t, uint64_t))(v22 + 16))(v24, a3, v21);
  int v26 = (*(uint64_t (**)(id *, uint64_t))(v22 + 88))(v24, v21);
  if (v26 == enum case for ArcadeState.notSubscribed(_:))
  {
    (*(void (**)(id *, uint64_t))(v22 + 96))(v24, v21);
    uint64_t v27 = type metadata accessor for ArcadeIntroOfferState(0LL);
    (*(void (**)(id *, uint64_t))(*(void *)(v27 - 8) + 8LL))(v24, v27);
LABEL_3:
    char v28 = 0;
    goto LABEL_9;
  }

  if (v26 == enum case for ArcadeState.purchasing(_:))
  {
    (*(void (**)(id *, uint64_t))(v22 + 96))(v24, v21);
    swift_release(*v24);
  }

  else
  {
    if (v26 != enum case for ArcadeState.subscribed(_:))
    {
      if (v26 != enum case for ArcadeState.unknown(_:)) {
        (*(void (**)(id *, uint64_t))(v22 + 8))(v24, v21);
      }
      goto LABEL_3;
    }

    (*(void (**)(id *, uint64_t))(v22 + 96))(v24, v21);
  }

  char v28 = 1;
LABEL_9:
  uint64_t v29 = *(int *)(v18 + 48);
  uint64_t v30 = *(int *)(v18 + 64);
  NSArray v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v31(v20, v61, v6);
  v20[v29] = v25 >> 2;
  v20[v30] = v28;
  int v32 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v20, v6);
  if (v32 != enum case for State.waiting(_:))
  {
    if (v32 == enum case for State.purchased(_:))
    {
      uint64_t v35 = v58;
      v31(v58, (uint64_t)v20, v6);
      (*(void (**)(char *, uint64_t))(v7 + 96))(v35, v6);
      uint64_t v36 = type metadata accessor for AppPurchaseType(0LL);
LABEL_17:
      (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8LL))(v35, v36);
      goto LABEL_21;
    }

    if (v32 == enum case for State.updatable(_:))
    {
      uint64_t v39 = v57;
      v31(v57, (uint64_t)v20, v6);
      (*(void (**)(char *, uint64_t))(v7 + 96))(v39, v6);
      swift_bridgeObjectRelease(*((void *)v39 + 1));
    }

    else
    {
      if (v32 == enum case for State.downloadable(_:))
      {
        __int128 v41 = v56;
        v31(v56, (uint64_t)v20, v6);
        (*(void (**)(char *, uint64_t))(v7 + 96))(v41, v6);
        swift_bridgeObjectRelease(*((void *)v41 + 1));
        goto LABEL_35;
      }

      if (v32 == enum case for State.openable(_:))
      {
        uint64_t v35 = v55;
        v31(v55, (uint64_t)v20, v6);
        (*(void (**)(char *, uint64_t))(v7 + 96))(v35, v6);
        uint64_t v36 = type metadata accessor for AppOpenableDestination(0LL);
        goto LABEL_17;
      }

      if (v32 == enum case for State.buyable(_:)) {
        goto LABEL_35;
      }
      if (v32 != enum case for State.installed(_:))
      {
        if (v32 != enum case for State.unknown(_:)) {
          goto LABEL_25;
        }
LABEL_35:
        (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
        id v42 = [v60 titles];
        type metadata accessor for ASCOfferTitleVariant(0LL);
        uint64_t v44 = v43;
        unint64_t v45 = sub_100067C60();
        uint64_t v46 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v42, v44, &type metadata for String, v45);

        if (*(void *)(v46 + 16))
        {
          uint64_t v47 = @"appStoreRepair";
          uint64_t v48 = sub_10008D56C(v47);
          if ((v49 & 1) != 0)
          {
            object = *(void **)(*(void *)(v46 + 56) + 16 * v48 + 8);
            swift_bridgeObjectRetain(object);

            swift_bridgeObjectRelease(v46);
            sub_1000388F0(v59, (uint64_t)v62);
            if (object)
            {
LABEL_42:
              sub_100029F4C(v62);
              uint64_t v52 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
              NSString v53 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(object);
              id v37 = [v52 textMetadataWithTitle:v53 subtitle:0];

              return v37;
            }

id sub_100065FCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v73 = a2;
  uint64_t v74 = a4;
  id v72 = a3;
  uint64_t v5 = type metadata accessor for AppInstallation.Progress(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AppInstallation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for State(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
    id v19 = objc_msgSend(v18, "indeterminateProgressMetadata", v72);
    uint64_t v20 = type metadata accessor for AppInstallationType(0LL);
LABEL_5:
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v16, v20);
    return v19;
  }

  if (v17 == enum case for State.purchased(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
    sub_100029EE0(v74, v74[3]);
    v22._object = (void *)0x80000001000FC490LL;
    v22._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    object = Localizer.string(forKey:)(v22)._object;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    id v19 = objc_msgSend(v21, "textMetadataWithTitle:subtitle:", v24, 0, v72);

    uint64_t v20 = type metadata accessor for AppPurchaseType(0LL);
    goto LABEL_5;
  }

  if (v17 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    swift_bridgeObjectRelease(*((void *)v16 + 1));
    int v26 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
    sub_100029EE0(v74, v74[3]);
    v27._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    v27._object = (void *)0x80000001000FC4B0LL;
    char v28 = Localizer.string(forKey:)(v27)._object;
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    id v30 = objc_msgSend(v26, "textMetadataWithTitle:subtitle:", v29, 0, v72);
LABEL_8:
    id v31 = v30;

    return v31;
  }

  if (v17 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    swift_bridgeObjectRelease(*((void *)v16 + 1));
    int v32 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
    id v33 = objc_msgSend(v32, "redownloadMetadata", v72);
    return v33;
  }

  if (v17 == enum case for State.installing(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    uint64_t v34 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
    uint64_t v35 = AppInstallation.progress.getter(v34);
    double v36 = AppInstallation.Progress.fractionCompleted.getter(v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    id v31 = objc_msgSend(v34, "progressMetadataWithValue:cancellable:", 1, v36, v72);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return v31;
  }

  if (v17 == enum case for State.openable(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    id v37 = objc_msgSend(v73, "titles", v72);
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v39 = v38;
    unint64_t v40 = sub_100067C60();
    uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v37, v39, &type metadata for String, v40);

    if (*(void *)(v41 + 16))
    {
      id v42 = @"open";
      uint64_t v43 = sub_10008D56C(v42);
      if ((v44 & 1) != 0)
      {
        unint64_t v45 = *(void **)(*(void *)(v41 + 56) + 16 * v43 + 8);
        swift_bridgeObjectRetain(v45);

        swift_bridgeObjectRelease(v41);
        sub_1000388F0((uint64_t)v74, (uint64_t)v75);
        if (v45)
        {
LABEL_26:
          sub_100029F4C(v75);
          Swift::String v51 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
          NSString v52 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v45);
          id v19 = [v51 textMetadataWithTitle:v52 subtitle:0];

          uint64_t v20 = type metadata accessor for AppOpenableDestination(0LL);
          goto LABEL_5;
        }

id sub_100066880(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v71 = a1;
  uint64_t v7 = type metadata accessor for State(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = objc_opt_self(&OBJC_CLASS___ASCContingentOffer);
  uint64_t v12 = swift_dynamicCastObjCClass(a2, v11);
  if (!v12) {
    return sub_100065FCC(v71, a2, @"standard", a4);
  }
  uint64_t v13 = (void *)v12;
  swift_unknownObjectRetain(a2);
  id v14 = [v13 iapItemID];
  char v15 = sub_1000C9CEC(v14, a3);

  id v16 = [v13 streamlinedOffer];
  if (!v16) {
    goto LABEL_20;
  }
  id v17 = v16;
  uint64_t ObjectType = swift_getObjectType(v16);
  uint64_t v19 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0LL;
  }
  if (v19) {
    id v21 = v17;
  }
  else {
    id v21 = 0LL;
  }
  if (!v21)
  {
    swift_unknownObjectRelease(v17);
LABEL_20:
    id v45 = sub_100065FCC(v71, a2, @"standard", a4);
    swift_unknownObjectRelease(a2);
    return v45;
  }

  Swift::String v22 = a2;
  uint64_t v23 = a4;
  uint64_t v24 = swift_getObjectType(v21);
  uint64_t v70 = v8;
  uint64_t v25 = v7;
  int v26 = v10;
  Swift::String v27 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
  swift_unknownObjectRetain(v17);
  uint64_t v28 = v24;
  a4 = v23;
  a2 = v22;
  uint64_t v29 = v27(v28, v20);
  id v30 = v26;
  uint64_t v31 = v25;
  uint64_t v32 = v70;
  id v33 = (void *)v29;
  swift_unknownObjectRelease_n(v17, 2LL);
  if (!v33) {
    goto LABEL_20;
  }

  if ((v15 & 1) != 0) {
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, v71, v31);
  int v34 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v30, v31);
  if (v34 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v32 + 96))(v30, v31);
    swift_bridgeObjectRelease(*((void *)v30 + 1));
    goto LABEL_14;
  }

  if (v34 == enum case for State.openable(_:))
  {
    (*(void (**)(char *, uint64_t))(v32 + 96))(v30, v31);
    id v46 = [v22 titles];
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v48 = v47;
    unint64_t v49 = sub_100067C60();
    uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v46, v48, &type metadata for String, v49);

    if (*(void *)(v50 + 16))
    {
      Swift::String v51 = @"discountOwnedParent";
      uint64_t v52 = sub_10008D56C(v51);
      if ((v53 & 1) != 0)
      {
        object = *(void **)(*(void *)(v50 + 56) + 16 * v52 + 8);
        swift_bridgeObjectRetain(object);

        swift_bridgeObjectRelease(v50);
        sub_1000388F0((uint64_t)a4, (uint64_t)v72);
        if (object)
        {
LABEL_46:
          sub_100029F4C(v72);
          uint64_t v66 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
          NSString v67 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(object);
          id v45 = [v66 textMetadataWithTitle:v67 subtitle:0];

          swift_unknownObjectRelease(a2);
          uint64_t v68 = type metadata accessor for AppOpenableDestination(0LL);
          (*(void (**)(char *, uint64_t))(*(void *)(v68 - 8) + 8LL))(v30, v68);
          return v45;
        }

LABEL_45:
        sub_100029EE0(v72, v73);
        v65._object = (void *)0x80000001000FC3F0LL;
        v65._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        object = Localizer.string(forKey:)(v65)._object;
        goto LABEL_46;
      }
    }

    swift_bridgeObjectRelease(v50);
    sub_1000388F0((uint64_t)a4, (uint64_t)v72);
    goto LABEL_45;
  }

  if (v34 != enum case for State.buyable(_:) && v34 != enum case for State.unknown(_:))
  {
    id v45 = sub_100065FCC(v71, v22, @"standard", a4);
    swift_unknownObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
    return v45;
  }

    sub_100060108((uint64_t)&v117, (uint64_t)&v113);
    char v60 = sub_100029E18(qword_10013E910);
    if ((swift_dynamicCast(v107, &v113, (char *)&type metadata for Any + 8, v60, 6LL) & 1) != 0)
    {
      uint64_t v61 = *(void *)&v107[0];
      uint64_t ObjectType = swift_getObjectType(*(void *)&v107[0]);
      NSString v63 = [(id)swift_getObjCClassFromMetadata(ObjectType) supportsSecureCoding];
      swift_unknownObjectRelease(v61);
      Swift::String v22 = v57;
      if (v63)
      {
        sub_100029F4C(&v117);
        swift_bridgeObjectRelease(v35);
        uint64_t v24 = v54;
        uint64_t v23 = v103;
        goto LABEL_10;
      }
    }

    else
    {
      Swift::String v22 = v57;
    }

    uint64_t v24 = v54;
    swift_bridgeObjectRetain(v54);
    uint64_t v68 = sub_10008D45C(v36, v35);
    uint64_t v70 = v69;
    swift_bridgeObjectRelease(v54);
    if ((v70 & 1) != 0)
    {
      uint64_t v71 = swift_isUniquelyReferenced_nonNull_native(v54);
      *(void *)&v107[0] = v54;
      if ((v71 & 1) == 0)
      {
        sub_10005CA74();
        uint64_t v24 = *(void **)&v107[0];
      }

      swift_bridgeObjectRelease(*(void *)(v24[6] + 16 * v68 + 8));
      sub_1000445E4((_OWORD *)(v24[7] + 32 * v68), &v113);
      sub_10005C1A4(v68, (uint64_t)v24);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      id v113 = 0u;
      uint64_t v114 = 0u;
    }

    uint64_t v23 = v103;
    sub_10004C810((uint64_t)&v113);
    sub_100029F4C(&v117);
    swift_bridgeObjectRelease(v35);
LABEL_10:
    sub_100029F4C(v116);
  }

  id v33 = *(void *)(v99 + 8 * v34);
  if (v33)
  {
LABEL_20:
    uint64_t v32 = v34;
LABEL_17:
    Swift::String v22 = (v33 - 1) & v33;
    uint64_t v28 = __clz(__rbit64(v33)) + (v32 << 6);
    uint64_t v105 = v32;
    goto LABEL_13;
  }

  while (1)
  {
    uint64_t v32 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v32 >= v100)
    {
      uint64_t v105 = v97;
      goto LABEL_31;
    }

    id v33 = *(void *)(v99 + 8 * v32);
    ++v34;
    if (v33) {
      goto LABEL_17;
    }
  }

LABEL_14:
  id v35 = [v22 titles];
  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v37 = v36;
  unint64_t v38 = sub_100067C60();
  uint64_t v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v35, v37, &type metadata for String, v38);

  if (!*(void *)(v39 + 16))
  {
LABEL_31:
    swift_bridgeObjectRelease(v39);
    sub_1000388F0((uint64_t)a4, (uint64_t)v72);
LABEL_32:
    sub_100029EE0(v72, v73);
    v55._uint64_t countAndFlagsBits = 0xD000000000000025LL;
    v55._object = (void *)0x80000001000FC410LL;
    uint64_t v43 = Localizer.string(forKey:)(v55)._object;
    goto LABEL_33;
  }

  unint64_t v40 = @"discountUnownedParent";
  uint64_t v41 = sub_10008D56C(v40);
  if ((v42 & 1) == 0)
  {

    goto LABEL_31;
  }

  uint64_t v43 = *(void **)(*(void *)(v39 + 56) + 16 * v41 + 8);
  swift_bridgeObjectRetain(v43);

  swift_bridgeObjectRelease(v39);
  sub_1000388F0((uint64_t)a4, (uint64_t)v72);
  if (!v43) {
    goto LABEL_32;
  }
LABEL_33:
  sub_100029F4C(v72);
  id v56 = [v22 subtitles];
  uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v56, v37, &type metadata for String, v38);

  if (*(void *)(v57 + 16))
  {
    id v58 = @"standard";
    uint64_t v59 = sub_10008D56C(v58);
    if ((v60 & 1) != 0)
    {
      uint64_t v61 = *(void *)(*(void *)(v57 + 56) + 16 * v59 + 8);
      swift_bridgeObjectRetain(v61);
    }

    else
    {
      uint64_t v61 = 0LL;
    }
  }

  else
  {
    uint64_t v61 = 0LL;
  }

  swift_bridgeObjectRelease(v57);
  NSString v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v43);
  if (v61)
  {
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v61);
  }

  else
  {
    NSString v63 = 0LL;
  }

  id v64 = [(id)objc_opt_self(ASCOfferMetadata) textMetadataWithTitle:v62 subtitle:v63];
  swift_unknownObjectRelease(v22);

  return v64;
}

  uint64_t v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  uint64_t v25 = *(void *)(v24 + 16);
  int v26 = __OFADD__(v25, 1LL);
  Swift::String v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v27;
  }
}

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  id v14 = *(void *)(v13 + 16);
  char v15 = __OFADD__(v14, 1LL);
  id v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v16;
  }
  return result;
}

  id v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v5;
  char v15 = *(void *)(v14 + 16);
  id v16 = __OFADD__(v15, 1LL);
  id v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + swift_weakDestroy(v0 + 16) = v17;
  }
  return result;
}

    int v26 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v18 >> 6) + 64) |= 1LL << v18;
    Swift::String v27 = (uint64_t *)(v26[6] + 16 * v18);
    *Swift::String v27 = v15;
    v27[1] = v14;
    sub_1000445E4(v49, (_OWORD *)(v26[7] + 32 * v18));
    uint64_t v28 = v26[2];
    uint64_t v29 = __OFADD__(v28, 1LL);
    id v30 = v28 + 1;
    if (v29)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    _OWORD v26[2] = v30;
LABEL_16:
    sub_1000C4F08(&v50);
    for (uint64_t i = *((void *)&v50 + 1); *((void *)&v50 + 1); uint64_t i = *((void *)&v50 + 1))
    {
      id v33 = v50;
      sub_1000445E4(v51, v49);
      int v34 = *(void **)a5;
      uint64_t v36 = sub_10008D45C(v33, i);
      uint64_t v37 = v34[2];
      unint64_t v38 = (v35 & 1) == 0;
      uint64_t v39 = v37 + v38;
      if (__OFADD__(v37, v38)) {
        goto LABEL_28;
      }
      unint64_t v40 = v35;
      if (v34[3] < v39)
      {
        sub_10008DBE0(v39, 1LL);
        uint64_t v41 = sub_10008D45C(v33, i);
        if ((v40 & 1) != (v42 & 1)) {
          goto LABEL_30;
        }
        uint64_t v36 = v41;
      }

      if ((v40 & 1) != 0)
      {
        sub_100060108((uint64_t)v49, (uint64_t)v48);
        sub_100029F4C(v49);
        swift_bridgeObjectRelease(i);
        uint64_t v32 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v36);
        sub_100029F4C(v32);
        sub_1000445E4(v48, v32);
      }

      else
      {
        uint64_t v43 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v36 >> 6) + 64) |= 1LL << v36;
        char v44 = (uint64_t *)(v43[6] + 16 * v36);
        *char v44 = v33;
        v44[1] = i;
        sub_1000445E4(v49, (_OWORD *)(v43[7] + 32 * v36));
        id v45 = v43[2];
        uint64_t v29 = __OFADD__(v45, 1LL);
        id v46 = v45 + 1;
        if (v29) {
          goto LABEL_29;
        }
        v43[2] = v46;
      }

      sub_1000C4F08(&v50);
    }

id sub_100066EEC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v85 = a4;
  uint64_t v7 = type metadata accessor for ArcadeIntroOfferState(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v83 - v12;
  uint64_t v14 = type metadata accessor for ArcadeState(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (id *)((char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(id *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  int v18 = (*(uint64_t (**)(id *, uint64_t))(v15 + 88))(v17, v14);
  if (v18 != enum case for ArcadeState.notSubscribed(_:))
  {
    if (v18 == enum case for ArcadeState.purchasing(_:))
    {
      (*(void (**)(id *, uint64_t))(v15 + 96))(v17, v14);
      swift_release(*v17);
      uint64_t v32 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
      NSString v33 = String._bridgeToObjectiveC()();
      id v34 = [v32 textMetadataWithTitle:v33 subtitle:0];

      return v34;
    }

    if (v18 == enum case for ArcadeState.subscribed(_:))
    {
      (*(void (**)(id *, uint64_t))(v15 + 96))(v17, v14);

      unsigned __int8 v45 = [a2 flags];
      id v46 = &ASCOfferTitleVariantPreorderSubscribed;
      if ((v45 & 8) == 0) {
        id v46 = &ASCOfferTitleVariantStandard;
      }
      uint64_t v47 = *v46;
      id v48 = sub_100065FCC(a1, a2, v47, v85);

      return v48;
    }

    if (v18 != enum case for ArcadeState.unknown(_:)) {
      (*(void (**)(id *, uint64_t))(v15 + 8))(v17, v14);
    }
    id v54 = [a2 titles];
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v56 = v55;
    unint64_t v57 = sub_100067C60();
    uint64_t v58 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v54, v56, &type metadata for String, v57);

    if (*(void *)(v58 + 16))
    {
      uint64_t v59 = @"notSubscribed";
      uint64_t v60 = sub_10008D56C(v59);
      if ((v61 & 1) != 0)
      {
        object = *(void **)(*(void *)(v58 + 56) + 16 * v60 + 8);
        swift_bridgeObjectRetain(object);

        swift_bridgeObjectRelease(v58);
        sub_1000388F0((uint64_t)v85, (uint64_t)v86);
        if (object)
        {
LABEL_48:
          sub_100029F4C(v86);
          char v79 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
          NSString v80 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(object);
          id v81 = [v79 textMetadataWithTitle:v80 subtitle:0];

          return v81;
        }

LABEL_47:
        sub_100029EE0(v86, v87);
        v78._object = (void *)0x80000001000FC440LL;
        v78._uint64_t countAndFlagsBits = 0xD000000000000015LL;
        object = Localizer.string(forKey:)(v78)._object;
        goto LABEL_48;
      }
    }

    swift_bridgeObjectRelease(v58);
    sub_1000388F0((uint64_t)v85, (uint64_t)v86);
    goto LABEL_47;
  }

  (*(void (**)(id *, uint64_t))(v15 + 96))(v17, v14);
  (*(void (**)(char *, id *, uint64_t))(v8 + 32))(v13, v17, v7);
  if (([a2 flags] & 8) != 0)
  {
    id v36 = [a2 titles];
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v38 = v37;
    unint64_t v39 = sub_100067C60();
    uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, v38, &type metadata for String, v39);

    if (*(void *)(v40 + 16))
    {
      uint64_t v41 = @"preorderNotSubscribed";
      uint64_t v42 = sub_10008D56C(v41);
      if ((v43 & 1) != 0)
      {
        char v44 = *(void **)(*(void *)(v40 + 56) + 16 * v42 + 8);
        swift_bridgeObjectRetain(v44);

        swift_bridgeObjectRelease(v40);
        sub_1000388F0((uint64_t)v85, (uint64_t)v86);
        if (v44)
        {
LABEL_31:
          sub_100029F4C(v86);
          id v64 = (void *)objc_opt_self(&OBJC_CLASS___ASCOfferMetadata);
          NSString v65 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v44);
          id v48 = [v64 textMetadataWithTitle:v65 subtitle:0];

          (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
          return v48;
        }

          char v19 = 0LL;
          id v17 = 0LL;
          uint64_t v10 = v32;
          goto LABEL_18;
        }
      }

      char v19 = 0LL;
      id v17 = 0LL;
      uint64_t v10 = v35;
      goto LABEL_18;
    }

    id v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21) {
      goto LABEL_57;
    }
    uint64_t v22 = v21;
    id v48 = v21;
    uint64_t v23 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    char v19 = v49;
    swift_unknownObjectRelease(v22);
    if (!v19)
    {
LABEL_56:
      char v3 = v50;
LABEL_57:
      sub_10002EB74(v3);
      return (void *)v2;
    }

      __break(1u);
      goto LABEL_48;
    }

    uint64_t v15 = v22;
    goto LABEL_20;
  }

      __break(1u);
      goto LABEL_48;
    }

    id v17 = v24;
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

LABEL_52:
    swift_bridgeObjectRelease(v69);
    NSString v77 = 0LL;
    goto LABEL_53;
  }

  uint64_t v84 = @"notSubscribed";
  if (v26)
  {
    unint64_t v49 = v20;
    uint64_t v50 = @"notSubscribed";
    uint64_t v51 = sub_10008D56C(v50);
    if ((v52 & 1) != 0)
    {
      char v53 = *(void **)(*(void *)(v25 + 56) + 16 * v51 + 8);
      swift_bridgeObjectRetain(v53);

      swift_bridgeObjectRelease(v25);
      sub_1000388F0((uint64_t)v85, (uint64_t)v86);
      uint64_t v20 = v49;
      if (v53) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }

    uint64_t v20 = v49;
  }

  swift_bridgeObjectRelease(v25);
  sub_1000388F0((uint64_t)v85, (uint64_t)v86);
LABEL_41:
  sub_100029EE0(v86, v87);
  v73._object = (void *)0x80000001000FC440LL;
  v73._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  char v53 = Localizer.string(forKey:)(v73)._object;
LABEL_42:
  sub_100029F4C(v86);
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v53);
  id v74 = [a2 subtitles];
  uint64_t v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v74, v23, &type metadata for String, v24);

  if (!*(void *)(v69 + 16)) {
    goto LABEL_52;
  }
  uint64_t v70 = v84;
  uint64_t v71 = sub_10008D56C(v70);
  if ((v75 & 1) == 0)
  {

    goto LABEL_52;
  }

LABEL_44:
  uint64_t v76 = *(void *)(*(void *)(v69 + 56) + 16 * v71 + 8);
  swift_bridgeObjectRetain(v76);

  swift_bridgeObjectRelease(v69);
  NSString v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v76);
LABEL_53:
  id v82 = [(id)objc_opt_self(ASCOfferMetadata) textMetadataWithTitle:v67 subtitle:v77];

  v20(v13, v7);
  return v82;
}

id sub_100067830(uint64_t a1, id a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  if ((a3 & 1) != 0 || (id result = sub_100065978(a1, a2, a4, (uint64_t)a6)) == 0LL)
  {
    if (([a2 flags] & 0x400) != 0)
    {
      return sub_100066880(a1, a2, a5, a6);
    }

    else if (([a2 flags] & 4) != 0)
    {
      return sub_100066EEC(a1, a2, a4, a6);
    }

    else
    {
      return sub_100065FCC(a1, a2, @"standard", a6);
    }
  }

  return result;
}

uint64_t sub_100067920(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for State(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v36 - v15;
  id v17 = [a2 titles];
  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v19 = v18;
  unint64_t v20 = sub_100067C60();
  uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, v19, &type metadata for String, v20);

  if (!*(void *)(v21 + 16))
  {
LABEL_5:
    swift_bridgeObjectRelease(v21);
    Swift::String v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v27(v16, a1, v7);
    int v28 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v16, v7);
    if (v28 == enum case for State.waiting(_:))
    {
      v27(v14, (uint64_t)v16, v7);
      (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
      uint64_t v29 = type metadata accessor for AppInstallationType(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8LL))(v14, v29);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      sub_100029EE0(a4, a4[3]);
      v30._object = (void *)0x80000001000FC3D0LL;
      v30._uint64_t countAndFlagsBits = 0xD000000000000014LL;
      return Localizer.string(forKey:)(v30)._countAndFlagsBits;
    }

    if (v28 == enum case for State.purchased(_:))
    {
      v27(v11, (uint64_t)v16, v7);
      (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
      uint64_t v31 = type metadata accessor for AppPurchaseType(0LL);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v32 + 88))(v11, v31) == enum case for AppPurchaseType.preorder(_:))
      {
        sub_100029EE0(a4, a4[3]);
        v33._uint64_t countAndFlagsBits = 0xD000000000000016LL;
        v33._object = (void *)0x80000001000FC3B0LL;
        uint64_t countAndFlagsBits = Localizer.string(forKey:)(v33)._countAndFlagsBits;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
        return countAndFlagsBits;
      }

      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v31);
    }

    else if (v28 == enum case for State.buyable(_:) || v28 == enum case for State.unknown(_:))
    {
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
    return 0LL;
  }

  uint64_t v22 = @"preorderStatus";
  uint64_t v23 = sub_10008D56C(v22);
  if ((v24 & 1) == 0)
  {

    goto LABEL_5;
  }

  uint64_t v25 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v23);
  uint64_t countAndFlagsBits = *v25;
  swift_bridgeObjectRetain(v25[1]);

  swift_bridgeObjectRelease(v21);
  return countAndFlagsBits;
}

unint64_t sub_100067C60()
{
  unint64_t result = qword_10013C1F8;
  if (!qword_10013C1F8)
  {
    type metadata accessor for ASCOfferTitleVariant(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000ED580, v1);
    atomic_store(result, (unint64_t *)&qword_10013C1F8);
  }

  return result;
}

uint64_t sub_100067CA8(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013D830);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t ASCOffer.actionMetrics.getter()
{
  uint64_t v1 = type metadata accessor for ScalarDictionary(0LL);
  __chkstk_darwin(v1);
  char v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v4 = [v0 metrics];
  unint64_t v5 = sub_100067DBC();
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  size_t v7 = sub_100067DF8(v6);
  uint64_t v8 = swift_bridgeObjectRelease(v6);
  ScalarDictionary.init()(v8);
  return ActionMetrics.init(data:custom:)(v7, v3);
}

unint64_t sub_100067DBC()
{
  unint64_t result = qword_10013C7E8;
  if (!qword_10013C7E8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCMetricsData);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013C7E8);
  }

  return result;
}

size_t sub_100067DF8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MetricsData(0LL);
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (!v7) {
      return (size_t)v8;
    }
    uint64_t v38 = _swiftEmptyArrayStorage;
    size_t result = sub_1000900FC(0LL, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    v28[1] = v2;
    uint64_t v10 = 0LL;
    uint64_t v8 = v38;
    unint64_t v29 = a1 & 0xC000000000000001LL;
    void v28[2] = (char *)&type metadata for Any + 8;
    uint64_t v31 = v6;
    uint64_t v32 = a1;
    uint64_t v30 = v7;
    while (v7 != v10)
    {
      if (v29) {
        uint64_t v11 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      }
      else {
        uint64_t v11 = (char *)*(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v6 = v11;
      id v12 = [v11 topic];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v35 = v15;
        uint64_t v36 = v14;
      }

      else
      {
        uint64_t v35 = 0LL;
        uint64_t v36 = 0LL;
      }

      unsigned int v37 = [v6 shouldFlush];
      id v16 = [v6 fields];
      uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      id v18 = [v6 includingFields];
      uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = sub_100058290(v19, (uint64_t)sub_100057848, 0LL);
      id v21 = [v6 includingFields];
      uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = sub_10005847C(v22, (uint64_t)sub_100057854, 0LL);
      char v24 = v31;
      MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(v36, v35, v37, v17, v20, v23);

      uint64_t v38 = v8;
      unint64_t v26 = v8[2];
      unint64_t v25 = v8[3];
      unint64_t v2 = v26 + 1;
      if (v26 >= v25 >> 1)
      {
        sub_1000900FC(v25 > 1, v26 + 1, 1);
        uint64_t v8 = v38;
      }

      ++v10;
      v8[2] = v2;
      (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
      + *(void *)(v33 + 72) * v26,
        v24,
        v34);
      uint64_t v7 = v30;
      a1 = v32;
      if (v30 == v10) {
        return (size_t)v8;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v27 = a1;
    }
    else {
      uint64_t v27 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(a1);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000680F8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for State(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  int v13 = enum case for State.downloadable(_:);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12 == v13
    && (([v3 flags] & 0x200) != 0
     || [a2 supportsDSIDLessInstall]))
  {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v8 + 104))(a3, enum case for State.buyable(_:), v7);
  }

  else
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a3, a1, v7);
  }

Swift::Bool __swiftcall ASCOffer.isDSIDLessInContext(_:)(ASCOfferContext *a1)
{
  else {
    return -[ASCOfferContext supportsDSIDLessInstall](a1, "supportsDSIDLessInstall");
  }
}

void *sub_100068264(uint64_t a1, void *a2)
{
  id v48 = a2;
  uint64_t v49 = type metadata accessor for JSONContext(0LL);
  uint64_t v54 = *(void *)(v49 - 8);
  uint64_t v3 = __chkstk_darwin(v49);
  char v53 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v43 - v5;
  uint64_t v7 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for JSONObject(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v51 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for JSONArray(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  char v52 = (char *)&v43 - v21;
  uint64_t v47 = a1;
  uint64_t v22 = JSONObject.subscript.getter(0x6B726F77747261LL, 0xE700000000000000LL);
  JSONObject.array.getter(v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v15, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1LL, v16) == 1)
  {
    sub_100054854((uint64_t)v9);
    char v24 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v25 = sub_100029F04();
    swift_allocError(v24, v25, 0LL, 0LL);
    uint64_t v27 = v26;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v50);
    *uint64_t v27 = 0x6B726F77747261LL;
    v27[1] = 0xE700000000000000LL;
    void v27[2] = MetatypeMetadata;
    uint64_t v29 = (*(uint64_t (**)(void *, void, void *))(*(v24 - 1) + 104LL))( v27,  enum case for JSONError.missingProperty(_:),  v24);
    swift_willThrow(v29);
  }

  else
  {
    char v44 = v23;
    uint64_t v45 = v10;
    uint64_t v30 = v52;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v52, v9, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v30, v16);
    uint64_t v31 = *(void (**)(char *, void *, uint64_t))(v54 + 16);
    char v24 = v48;
    uint64_t v32 = v49;
    v31(v6, v48, v49);
    uint64_t v33 = sub_100029E18(&qword_10013CFF8);
    unint64_t v34 = sub_1000686CC();
    uint64_t v35 = Array<A>.init(tryDeserializing:using:)(v20, v6, v33, v34);
    uint64_t v36 = v46;
    id v46 = sub_10004D100(v35);
    swift_bridgeObjectRelease(v35);
    JSONObject.subscript.getter(0x616C50616964656DLL, 0xED00006D726F6674LL);
    v31(v53, v24, v32);
    sub_10002A030(0LL, &qword_10013D838, off_10011E540);
    id v37 = sub_100057010();
    if (v36)
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v32);
      v44(v51, v45);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v52, v16);
      swift_bridgeObjectRelease(v46);
    }

    else
    {
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v32);
      v44(v51, v45);
      id v39 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v50));
      sub_10002A030(0LL, (unint64_t *)&qword_10013D840, off_10011E4B0);
      uint64_t v40 = v46;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      char v24 = objc_msgSend(v39, "initWithArtwork:mediaPlatform:", isa, v38, swift_bridgeObjectRelease(v40).n128_f64[0]);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v52, v16);
    }
  }

  return v24;
}

void *sub_1000686B8(uint64_t a1, void *a2)
{
  return sub_100068264(a1, a2);
}

unint64_t sub_1000686CC()
{
  unint64_t result = qword_10013D000;
  if (!qword_10013D000)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013CFF8);
    unint64_t result = swift_getWitnessTable(&unk_1000F0D98, v1);
    atomic_store(result, (unint64_t *)&qword_10013D000);
  }

  return result;
}

id sub_100068718@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 unsignedLongLongValue];
  *a2 = result;
  return result;
}

uint64_t sub_100068748( unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, void (*a8)(uint64_t *, uint64_t), uint64_t a9)
{
  unint64_t v176 = a8;
  uint64_t v180 = a7;
  v181 = a6;
  uint64_t v174 = a3;
  uint64_t v173 = type metadata accessor for ASCSignpostGroupValue(0LL);
  __chkstk_darwin(v173);
  uint64_t v175 = (uint64_t *)((char *)&v171 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = sub_100029E18((uint64_t *)&unk_10013F9B0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v171 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v171 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v171 - v20;
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v178 = *(void *)(v22 - 8);
  uint64_t v179 = v22;
  __chkstk_darwin(v22);
  v172 = (char *)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v171 - v25;
  __chkstk_darwin(v27);
  v177 = (char *)&v171 - v28;
  *(void *)&double v30 = __chkstk_darwin(v29).n128_u64[0];
  uint64_t v32 = (char *)&v171 - v31;
  id v182 = a2;
  uint64_t result = sub_1000C9E48(objc_msgSend(a2, "signpostId", v30), a4);
  if ((result & 1) != 0)
  {
    uint64_t v34 = static os_signpost_type_t.begin.getter(result);
    if (v34 == a1)
    {
      id v35 = v182;
      id v36 = objc_msgSend(v182, "name", a9);
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v39 = v38;

      LOBYTE(v36) = sub_10006BE28(v183, v37, v39);
      *(void *)&double v40 = swift_bridgeObjectRelease(v183[1]).n128_u64[0];
      if ((v36 & 1) != 0)
      {
        uint64_t v41 = v181;
        uint64_t v42 = v35;
LABEL_12:
        id v76 = objc_msgSend(v42, "beginDate", v40);
        uint64_t v77 = v179;
        if (v76)
        {
          Swift::String v78 = v76;
          char v79 = v177;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

          uint64_t v80 = v178;
          id v81 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
          v81(v21, v79, v77);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v21, 0LL, 1LL, v77);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v21, 1LL, v77) != 1)
          {
            v81(v32, v21, v77);
            uint64_t v82 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
            uint64_t v83 = v42;
            uint64_t v84 = v175;
            unint64_t v85 = (char *)v175 + v82;
            id v86 = [v83 name];
            uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
            uint64_t v89 = v88;

            *uint64_t v84 = v87;
            v84[1] = v89;
            (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v85, v32, v77);
            swift_storeEnumTagMultiPayload(v84, v173, 0LL);
            v176(v84, v174);
            sub_10006A0B4((uint64_t)v84);
            return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v32, v77);
          }
        }

        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v178 + 56))(v21, 1LL, 1LL, v179);
        }

        sub_10002E92C((uint64_t)v21, (uint64_t *)&unk_10013F9B0);
        id v102 = [v42 name];
        uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
        uint64_t v105 = v104;

        unint64_t v106 = sub_10006A070();
        uint64_t v73 = swift_allocError(&type metadata for ASCSignpostGroupError, v106, 0LL, 0LL);
        *(void *)uint64_t v107 = v103;
        *(void *)(v107 + 8) = v105;
        *(void *)(v107 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v107 + 24) = 0LL;
        *(_BYTE *)(v107 + 32) = 1;
        v41();
        goto LABEL_43;
      }

      id v68 = objc_msgSend(v35, "name", v40);
      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      uint64_t v71 = v70;

      unint64_t v72 = sub_10006A070();
      uint64_t v73 = swift_allocError(&type metadata for ASCSignpostGroupError, v72, 0LL, 0LL);
      *(void *)uint64_t v74 = v69;
      *(void *)(v74 + 8) = v71;
      *(void *)(v74 + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(v74 + 24) = 0LL;
      *(_BYTE *)(v74 + 32) = 0;
      uint64_t v41 = v181;
      uint64_t v75 = v184;
      v181();
      if (!v75)
      {
        uint64_t v42 = v35;
        swift_errorRelease(v73);
        goto LABEL_12;
      }

void sub_100069354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a3;
  uint64_t v4 = type metadata accessor for CharacterSet(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v12[1] = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for ASCSignpostGroupValue(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10006A0F0(a1, (uint64_t)v10);
  uint64_t v11 = (char *)&loc_100069484 + dword_10006A05C[swift_getEnumCaseMultiPayload(v10, v8)];
  __asm { BR              X10 }

uint64_t sub_100069494()
{
  uint64_t countAndFlagsBits = *v5;
  uint64_t v7 = (void *)v5[1];
  uint64_t v9 = sub_100029E18((uint64_t *)&unk_10013D850);
  uint64_t v10 = v1;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 136) + 32LL))( v2,  (char *)v5 + *(int *)(v9 + 48),  v1);
  *(void *)(v6 - 128) = 0LL;
  *(void *)(v6 - 120) = 0xE000000000000000LL;
  *(void *)(v6 - 96) = countAndFlagsBits;
  *(void *)(v6 - 88) = v7;
  ((void (*)(uint64_t))static CharacterSet.lowercaseLetters.getter)(v11);
  unint64_t v12 = sub_10006A134();
  uint64_t v13 = ((uint64_t (*)(uint64_t, void, void, void, uint64_t, void *, unint64_t))StringProtocol.rangeOfCharacter(from:options:range:))( v4,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  v12);
  char v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
  if ((v15 & 1) != 0)
  {
    Swift::String v27 = String.lowercased()();
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
LABEL_6:
    uint64_t v28 = *(uint64_t **)(v6 - 144);
    swift_bridgeObjectRelease(v7);
    uint64_t v7 = object;
    goto LABEL_8;
  }

  unint64_t v16 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))String.index(_:offsetBy:limitedBy:))( v13,  -1LL,  15LL,  countAndFlagsBits,  v7);
  if ((v17 & 1) == 0)
  {
    unint64_t v18 = v16;
    if (v16 >= 0x4000)
    {
      String.subscript.getter(15LL, v16, countAndFlagsBits, v7);
      uint64_t v41 = v40;
      Swift::String v42 = Substring.lowercased()();
      swift_bridgeObjectRelease(v41);
      sub_1000C0700( 0xFuLL,  v18,  v42._countAndFlagsBits,  (unint64_t)v42._object,  countAndFlagsBits,  (unint64_t)v7);
      uint64_t countAndFlagsBits = v43;
      object = v44;
      swift_bridgeObjectRelease(v7);
      uint64_t v7 = v42._object;
    }

    else
    {
      swift_bridgeObjectRetain(v7);
      uint64_t v19 = String.index(after:)(v18, countAndFlagsBits, v7);
      String.subscript.getter(15LL, v19, countAndFlagsBits, v7);
      uint64_t v21 = v20;
      swift_bridgeObjectRelease(v7);
      Swift::String v22 = Substring.lowercased()();
      uint64_t v23 = v21;
      uint64_t v10 = v1;
      swift_bridgeObjectRelease(v23);
      sub_1000C0A44( 0xFuLL,  v18,  v22._countAndFlagsBits,  (unint64_t)v22._object,  countAndFlagsBits,  (unint64_t)v7);
      uint64_t countAndFlagsBits = v24;
      object = v25;
      swift_bridgeObjectRelease(v7);
      uint64_t v7 = v22._object;
    }

    goto LABEL_6;
  }

  uint64_t v28 = *(uint64_t **)(v6 - 144);
LABEL_8:
  v29._uint64_t countAndFlagsBits = countAndFlagsBits;
  v29._object = v7;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v7);
  v30._uint64_t countAndFlagsBits = 0x6D69547472617453LL;
  v30._object = (void *)0xE900000000000065LL;
  String.append(_:)(v30);
  uint64_t v32 = *(void *)(v6 - 128);
  uint64_t v31 = *(void *)(v6 - 120);
  uint64_t v33 = *v28;
  if (!*(void *)(*v28 + 16))
  {
    *(_OWORD *)(v6 - 128) = 0u;
    *(_OWORD *)(v6 - 112) = 0u;
LABEL_15:
    sub_10002E92C(v6 - 128, &qword_10013C6F0);
    id v36 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetrics);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v38 = [v36 serverTimeFromDate:isa];

    *(void *)(v6 - 104) = sub_10006A178();
    *(void *)(v6 - 128) = v38;
    sub_1000980A4(v6 - 128, v32, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 136) + 8LL))(v2, v10);
  }

  swift_bridgeObjectRetain(*(void *)(v6 - 120));
  unint64_t v34 = sub_10008D45C(v32, v31);
  if ((v35 & 1) != 0)
  {
    sub_100060108(*(void *)(v33 + 56) + 32 * v34, v6 - 128);
  }

  else
  {
    *(_OWORD *)(v6 - 128) = 0u;
    *(_OWORD *)(v6 - 112) = 0u;
  }

  swift_bridgeObjectRelease(v31);
  if (!*(void *)(v6 - 104)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRelease(v31);
  sub_10002E92C(v6 - 128, &qword_10013C6F0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 136) + 8LL))(v2, v10);
}

unint64_t sub_10006A070()
{
  unint64_t result = qword_10013D848;
  if (!qword_10013D848)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EF088, &type metadata for ASCSignpostGroupError);
    atomic_store(result, (unint64_t *)&qword_10013D848);
  }

  return result;
}

uint64_t sub_10006A0B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASCSignpostGroupValue(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006A0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASCSignpostGroupValue(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006A134()
{
  unint64_t result = qword_10013F950;
  if (!qword_10013F950)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10013F950);
  }

  return result;
}

unint64_t sub_10006A178()
{
  unint64_t result = qword_10013CB50;
  if (!qword_10013CB50)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013CB50);
  }

  return result;
}

uint64_t sub_10006A1B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      unint64_t result = a2;
      goto LABEL_3;
    case 4:
      swift_bridgeObjectRetain(a2);
      unint64_t result = swift_bridgeObjectRetain(a4);
      break;
    case 6:
LABEL_3:
      unint64_t result = swift_bridgeObjectRetain(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t destroy for ASCSignpostGroupError(uint64_t a1)
{
  return sub_10006A234( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_10006A234(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      unint64_t result = a2;
      goto LABEL_3;
    case 4:
      swift_bridgeObjectRelease(a2);
      unint64_t result = swift_bridgeObjectRelease(a4);
      break;
    case 6:
LABEL_3:
      unint64_t result = swift_bridgeObjectRelease(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10006A1B4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10006A1B4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_10006A234(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  char v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_10006A234(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCSignpostGroupError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCSignpostGroupError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 249;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10006A45C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t sub_10006A474(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)__n128 result = a2 - 7;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 7;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASCSignpostGroupError()
{
  return &type metadata for ASCSignpostGroupError;
}

uint64_t sub_10006A4AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_10006A4FC + 4 * byte_1000EF0F0[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

double sub_10006A67C(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
    case 4u:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      uint64_t v4 = a1 + *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
      uint64_t v5 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
      break;
    case 2u:
      *(void *)&double result = swift_bridgeObjectRelease(*(void *)(a1 + 8)).n128_u64[0];
      break;
    case 3u:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      *(void *)&double result = swift_bridgeObjectRelease(*(void *)(a1 + 24)).n128_u64[0];
      break;
    default:
      return result;
  }

  return result;
}

void sub_10006A720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (char *)sub_10006A76C + 4 * byte_1000EF0FA[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

void *sub_10006A76C()
{
  uint64_t v4 = v3[1];
  *uint64_t v0 = *v3;
  v0[1] = v4;
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
  uint64_t v6 = (char *)v0 + v5;
  uint64_t v7 = (char *)v3 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t sub_10006A80C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_10006A0B4(result);
    uint64_t v5 = (char *)&loc_10006A868 + 4 * byte_1000EF0FF[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t type metadata accessor for ASCSignpostGroupValue(uint64_t a1)
{
  uint64_t result = qword_10013D930;
  if (!qword_10013D930) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ASCSignpostGroupValue);
  }
  return result;
}

_OWORD *sub_10006A964(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 4)
  {
    *a1 = *a2;
    uint64_t v11 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
    char v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    swift_storeEnumTagMultiPayload(a1, a3, 4LL);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v15 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
    unint64_t v16 = (char *)a1 + v15;
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
    uint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

_OWORD *sub_10006AAC4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10006A0B4((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 4)
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
      char v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
      swift_storeEnumTagMultiPayload(a1, a3, 4LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v15 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
      unint64_t v16 = (char *)a1 + v15;
      char v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
      uint64_t v8 = (char *)a1 + v7;
      char v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10006AC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_10006AC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_10006AC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10006AC60(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2(v7, &unk_1000EF128, v4);
    v8[0] = v7;
    swift_getTupleTypeLayout2(v6, &unk_1000EF128, v4);
    v8[1] = v6;
    v8[2] = &unk_1000EF140;
    v8[3] = &unk_1000EF158;
    swift_getTupleTypeLayout2(v5, &unk_1000EF128, v4);
    v8[4] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v8);
    return 0LL;
  }

  return result;
}

void sub_10006AD30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v27[6] = *(void *)(v4 - 8);
  v27[7] = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  void v27[5] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  void v27[2] = (char *)v27 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v27[4] = (char *)v27 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v27[1] = (char *)v27 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v27[3] = (char *)v27 - v14;
  __chkstk_darwin(v13);
  v27[0] = (char *)v27 - v15;
  uint64_t v16 = type metadata accessor for ASCSignpostGroupValue(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v21 = sub_100029E18(&qword_10013D968);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = (uint64_t)&v24[*(int *)(v22 + 48)];
  sub_10006A0F0(a1, (uint64_t)v24);
  sub_10006A0F0(a2, v25);
  unint64_t v26 = (char *)sub_10006AF5C + 4 * byte_1000EF104[swift_getEnumCaseMultiPayload(v24, v16)];
  __asm { BR              X10 }

uint64_t sub_10006AF5C()
{
  uint64_t v6 = *(void *)v2;
  uint64_t v5 = *((void *)v2 + 1);
  uint64_t v7 = *(int *)(sub_100029E18((uint64_t *)&unk_10013D850) + 48);
  uint64_t v8 = &v2[v7];
  if (swift_getEnumCaseMultiPayload(v1, v3))
  {
    (*(void (**)(char *, void))(*(void *)(v4 - 96) + 8LL))(&v2[v7], *(void *)(v4 - 88));
    swift_bridgeObjectRelease(v5);
    sub_10006B3D8(v0);
    goto LABEL_9;
  }

  uint64_t v10 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v11 = (char *)v1 + v7;
  uint64_t v12 = *(void *)(v4 - 96);
  uint64_t v13 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  uint64_t v14 = *(void *)(v4 - 144);
  uint64_t v15 = v8;
  uint64_t v16 = *(void *)(v4 - 88);
  v13(v14, v15, v16);
  v13(*(void *)(v4 - 120), v11, v16);
  if (v6 == v10 && v5 == v9)
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
    goto LABEL_11;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v10, v9, 0LL);
  swift_bridgeObjectRelease(v9);
  __n128 v19 = swift_bridgeObjectRelease(v5);
  if ((v18 & 1) != 0)
  {
LABEL_11:
    uint64_t v22 = *(void *)(v4 - 120);
    char v21 = ((uint64_t (*)(uint64_t, uint64_t, __n128))static Date.== infix(_:_:))(v14, v22, v19);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v23(v22, v16);
    v23(v14, v16);
    sub_10006A0B4(v0);
    return v21 & 1;
  }

  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  ((void (*)(void, uint64_t, __n128))v20)(*(void *)(v4 - 120), v16, v19);
  v20(v14, v16);
  sub_10006A0B4(v0);
LABEL_9:
  char v21 = 0;
  return v21 & 1;
}

uint64_t sub_10006B3D8(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013D968);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10006B418(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100029E18(&qword_10013F990);
  __n128 v5 = __chkstk_darwin(v4);
  uint64_t v80 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DateInterval(0LL, v5);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v79 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v72 - v11;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v84 = *(void *)(v13 - 8);
  uint64_t v85 = v13;
  __chkstk_darwin(v13);
  uint64_t v75 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v72 - v16;
  __chkstk_darwin(v18);
  id v81 = (char *)&v72 - v19;
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  uint64_t v83 = (char *)&v72 - v22;
  id v23 = objc_msgSend(v2, "dateRanges", v21);
  uint64_t v82 = v7;
  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v7);

  uint64_t v25 = *(void *)(v24 + 16);
  __n128 v26 = swift_bridgeObjectRelease(v24);
  if (v25 == 1)
  {
    id v27 = objc_msgSend(v2, "dateRanges", v26.n128_f64[0]);
    uint64_t v28 = v82;
    uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v82);

    if (!*(void *)(v29 + 16))
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))( a1,  v29 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)),  v28);
    __n128 v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v8 + 56))(a1, 0LL, 1LL, v28, v30);
  }

  else
  {
    if (!v25)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(a1, 1LL, 1LL, v82, v26);
      return;
    }

    id v31 = objc_msgSend(v2, "dateRanges", v26.n128_f64[0]);
    uint64_t v32 = v82;
    uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v82);

    if (!*(void *)(v33 + 16)) {
      goto LABEL_25;
    }
    uint64_t v74 = a1;
    unint64_t v34 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    char v35 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v35(v12, v33 + v34, v32);
    __n128 v36 = swift_bridgeObjectRelease(v33);
    DateInterval.start.getter(v36);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v8 + 8);
    v37(v12, v32);
    id v38 = [v2 dateRanges];
    uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v32);

    if (!*(void *)(v39 + 16))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    v35(v12, v39 + v34, v32);
    __n128 v40 = swift_bridgeObjectRelease(v39);
    DateInterval.end.getter(v40);
    v37(v12, v32);
    id v41 = [v2 dateRanges];
    uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v32);

    uint64_t v43 = *(void *)(v42 + 16);
    uint64_t v73 = v42;
    if (v43 != 1)
    {
      id v44 = v80;
      if (!v43)
      {
LABEL_27:
        __break(1u);
        return;
      }

      id v76 = v37;
      uint64_t v77 = v8;
      unint64_t v78 = v42 + v34;
      uint64_t v45 = 1LL;
      uint64_t v46 = v82;
      while (v43 != v45)
      {
        uint64_t v47 = v43;
        v35(v44, v78 + *(void *)(v8 + 72) * v45, v46);
        uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v48(v44, 0LL, 1LL, v46);
        uint64_t v49 = v46;
        uint64_t v50 = v35;
        double v51 = v79;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v79, v44, v49);
        DateInterval.start.getter(v52);
        char v53 = static Date.< infix(_:_:)(v17, v83);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v84 + 8);
        v54(v17, v85);
        if ((v53 & 1) != 0)
        {
          DateInterval.start.getter(v55);
          uint64_t v56 = v83;
          uint64_t v57 = v85;
          v54(v83, v85);
          (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v56, v17, v57);
        }

        DateInterval.end.getter(v55);
        uint64_t v58 = v85;
        uint64_t v59 = v51;
        uint64_t v60 = v81;
        char v61 = static Date.> infix(_:_:)(v17, v81);
        v54(v17, v58);
        if ((v61 & 1) != 0)
        {
          DateInterval.end.getter(v62);
          uint64_t v46 = v82;
          v76(v59, v82);
          v54(v60, v58);
          (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v60, v17, v58);
        }

        else
        {
          uint64_t v46 = v82;
          v76(v59, v82);
        }

        id v44 = v80;
        char v35 = v50;
        ++v45;
        uint64_t v43 = v47;
        uint64_t v8 = v77;
        if (v47 == v45) {
          goto LABEL_21;
        }
      }

      __break(1u);
      goto LABEL_24;
    }

    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    id v44 = v80;
    uint64_t v46 = v82;
LABEL_21:
    v48(v44, 1LL, 1LL, v46);
    uint64_t v49 = v46;
LABEL_22:
    __n128 v63 = swift_bridgeObjectRelease(v73);
    uint64_t v65 = v83;
    uint64_t v64 = v84;
    Swift::String v66 = *(void (**)(char *, char *, uint64_t, __n128))(v84 + 16);
    uint64_t v67 = v85;
    v66(v17, v83, v85, v63);
    id v68 = v75;
    uint64_t v69 = v81;
    ((void (*)(char *, char *, uint64_t))v66)(v75, v81, v67);
    uint64_t v70 = v74;
    DateInterval.init(start:end:)(v17, v68);
    uint64_t v71 = *(void (**)(char *, uint64_t))(v64 + 8);
    v71(v69, v67);
    v71(v65, v67);
    v48(v70, 0LL, 1LL, v49);
  }

void Set<>.nsNumbers.getter(uint64_t a1)
{
  v13[1] = &_swiftEmptySetSingleton;
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }

    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v10 >= v6) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }

uint64_t sub_10006BB94(Swift::Int *a1, void *a2)
{
  return sub_10006C7AC(a1, a2, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr, &qword_10013D978);
}

uint64_t sub_10006BBB0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for App(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100027978(&qword_10013D330, v12, (uint64_t)&protocol conformance descriptor for App);
  swift_bridgeObjectRetain(v10);
  char v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    id v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100027978( &qword_10013D9B0,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10006DEF8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_10006BE0C(Swift::Int *a1, void *a2)
{
  return sub_10006C7AC(a1, a2, (unint64_t *)&qword_10013CB40, off_10011E488, &qword_10013D970);
}

uint64_t sub_10006BE28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    int64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_10006E2DC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_10006BFD4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v9 = v8;
  Hasher.init(_seed:)(v35);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v35, v7, v9);
  Swift::Int v10 = Hasher._finalize()();
  swift_bridgeObjectRelease(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v35[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v30 = a2;
    sub_10006E474((uint64_t)v30, v12, isUniquelyReferenced_nonNull_native);
    uint64_t v31 = *v3;
    *uint64_t v3 = v35[0];
    swift_bridgeObjectRelease(v31);
    *a1 = v30;
    return 1LL;
  }

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v6 + 48) + 8 * v12));
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v13 == v16 && v15 == v17)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  else
  {
    uint64_t v19 = v17;
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0LL);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {
      uint64_t v21 = ~v11;
      do
      {
        unint64_t v12 = (v12 + 1) & v21;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v6 + 48) + 8 * v12));
        uint64_t v15 = v23;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v22 == v24 && v15 == v25) {
          goto LABEL_16;
        }
        uint64_t v27 = v25;
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v15, v24, v25, 0LL);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v27);
      }

      while ((v28 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v33 = *(void **)(*(void *)(*v3 + 48LL) + 8 * v12);
  *a1 = v33;
  id v34 = v33;
  return 0LL;
}

uint64_t sub_10006C1FC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100027978(&qword_10013D320, v12, (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
  swift_bridgeObjectRetain(v10);
  char v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    char v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100027978( &qword_10013D990,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      char v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    char v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    char v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10006E6A0((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_10006C458(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100027978(&qword_10013D328, v12, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  swift_bridgeObjectRetain(v10);
  char v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    char v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100027978( &qword_10013D9A0,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      char v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    char v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    char v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10006E8F4((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_10006C6B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10006EB48(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10006C7AC(Swift::Int *a1, void *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  unint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v5);
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      uint64_t v42 = v15;
      uint64_t v16 = sub_10002A030(0LL, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      *a1 = v43;
      swift_unknownObjectRelease(v15);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v29 = sub_10006CB88(v13, result + 1, a5, a3, a4);
    Swift::Int v43 = v29;
    unint64_t v30 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v30)
    {
      uint64_t v36 = v30 + 1;
      id v37 = v14;
      sub_10006D960(v36, a5);
      uint64_t v31 = v43;
    }

    else
    {
      uint64_t v31 = v29;
      id v32 = v14;
    }

    sub_10006DE78((uint64_t)v14, v31);
    uint64_t v38 = *v9;
    uint64_t *v9 = v31;
    swift_bridgeObjectRelease(v38);
    *a1 = (Swift::Int)v14;
  }

  else
  {
    Swift::Int v18 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    Swift::Int v19 = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v21 = v19 & ~v20;
    uint64_t v39 = a4;
    if (((*(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
    {
      sub_10002A030(0LL, a3, a4);
      id v22 = *(id *)(*(void *)(v12 + 48) + 8 * v21);
      char v23 = static NSObject.== infix(_:_:)();

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        uint64_t v27 = *(void **)(*(void *)(*v9 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        id v28 = v27;
        return 0LL;
      }

      uint64_t v24 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v24;
        if (((*(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          break;
        }
        id v25 = *(id *)(*(void *)(v12 + 48) + 8 * v21);
        char v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    Swift::Int v43 = *v9;
    uint64_t *v9 = 0x8000000000000000LL;
    id v34 = a2;
    sub_10006E14C((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v39);
    uint64_t v35 = *v9;
    uint64_t *v9 = v43;
    swift_bridgeObjectRelease(v35);
    *a1 = (Swift::Int)v34;
  }

  return 1LL;
}

uint64_t sub_10006CA74(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10006EC68(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_10006CB6C(uint64_t a1, uint64_t a2)
{
  return sub_10006CB88(a1, a2, &qword_10013D970, (unint64_t *)&qword_10013CB40, off_10011E488);
}

Swift::Int sub_10006CB88(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  if (a2)
  {
    sub_100029E18(a3);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v29 = v10;
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_10002A030(0LL, a4, a5);
      do
      {
        uint64_t v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        uint64_t v10 = v29;
        unint64_t v22 = *(void *)(v29 + 16);
        if (*(void *)(v29 + 24) <= v22)
        {
          sub_10006D960(v22 + 1, a3);
          uint64_t v10 = v29;
        }

        uint64_t v15 = v28;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
        uint64_t v17 = v10 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v20 == v24;
            if (v20 == v24) {
              unint64_t v20 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v17 + 8 * v20);
          }

          while (v26 == -1);
          unint64_t v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v10 + 48) + 8 * v21) = v15;
        ++*(void *)(v10 + 16);
        uint64_t v13 = __CocoaSet.Iterator.next()(result);
      }

      while (v13);
    }

    swift_release(v11);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v10;
}

Swift::Int sub_10006CD88(uint64_t a1)
{
  return sub_10006D960(a1, &qword_10013D970);
}

Swift::Int sub_10006CD94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D980);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    id v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

void sub_10006D070(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D9C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v32 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    swift_retain(v3);
    int64_t v11 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }

      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }

        if (v15 >= v32) {
          goto LABEL_36;
        }
        unint64_t v16 = v33[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v16 = v33[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_36;
            }
            unint64_t v16 = v33[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v30;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v11 >= v32) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v33[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v11 = v17;
            }
          }
        }

uint64_t sub_10006D380( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v7 = v5;
  uint64_t v47 = a2;
  uint64_t v9 = a2(0LL);
  uint64_t v46 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100029E18(a3);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1LL);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_39;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 56);
  uint64_t v45 = (void *)(v12 + 56);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  Swift::Int v43 = v7;
  int64_t v44 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 56;
  uint64_t result = swift_retain(v12);
  int64_t v21 = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v25 >= v44) {
      goto LABEL_35;
    }
    unint64_t v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_35;
      }
      unint64_t v26 = v45[v21];
      if (!v26)
      {
        int64_t v21 = v25 + 2;
        if (v25 + 2 >= v44) {
          goto LABEL_35;
        }
        unint64_t v26 = v45[v21];
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_10006D6E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D988);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    uint64_t v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  uint64_t *v8 = v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

Swift::Int sub_10006D960(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100029E18(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    uint64_t v31 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v9 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 56;
    Swift::Int result = swift_retain(v4);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }

      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v20 = v9[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v9 = -1LL << v30;
                }
                *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v9[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v15 = v21;
            }
          }
        }

uint64_t sub_10006DBF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D9C0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    uint64_t v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  uint64_t *v8 = v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

unint64_t sub_10006DE78(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_10006DEF8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for App(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006D380( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  &qword_10013D9B8,  &qword_10013D330,  (uint64_t)&protocol conformance descriptor for App);
  }

  else
  {
    if (v11 > v10)
    {
      sub_10006F0EC((uint64_t (*)(void))&type metadata accessor for App, &qword_10013D9B8);
      goto LABEL_12;
    }

    sub_10006FD60( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  &qword_10013D9B8,  &qword_10013D330,  (uint64_t)&protocol conformance descriptor for App);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100027978( &qword_10013D330,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100027978( &qword_10013D9B0,  (uint64_t (*)(uint64_t))&type metadata accessor for App,  (uint64_t)&protocol conformance descriptor for App);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_10006E14C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, void *a6)
{
  uint64_t v9 = v6;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006D960(v14, a4);
  }

  else
  {
    if (v13 > v12)
    {
      sub_10006F4A4(a4);
      goto LABEL_14;
    }

    sub_1000702DC(v14, a4);
  }

  uint64_t v15 = *v6;
  Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(*v6 + 40));
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = sub_10002A030(0LL, a5, a6);
    id v19 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
    char v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }

    else
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
        char v23 = static NSObject.== infix(_:_:)();

        if ((v23 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10006E2DC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10006CD94(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_10006ED94();
      goto LABEL_22;
    }

    sub_10006F7D8(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    Swift::Int v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        char v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void sub_10006E474(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = (uint64_t *)v3;
  unint64_t v7 = *(void *)(*(void *)v3 + 16LL);
  unint64_t v8 = *(void *)(*(void *)v3 + 24LL);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006D070(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_10006EF44();
LABEL_22:
      uint64_t v30 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
      *(void *)(*(void *)(v30 + 48) + 8 * a2) = a1;
      uint64_t v31 = *(void *)(v30 + 16);
      BOOL v32 = __OFADD__(v31, 1LL);
      uint64_t v33 = v31 + 1;
      if (!v32)
      {
        *(void *)(v30 + swift_weakDestroy(v0 + 16) = v33;
        return;
      }

      __break(1u);
      goto LABEL_25;
    }

    sub_10006FA84(v9);
  }

  uint64_t v10 = *(void *)v3;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v13 = v12;
  Hasher.init(_seed:)(v35);
  String.hash(into:)(v35, v11, v13);
  Swift::Int v3 = Hasher._finalize()();
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v14;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v10 + 48) + 8 * a2));
  Swift::Int v3 = v16;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v15 == v17 && v3 == v18)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2LL);
    goto LABEL_26;
  }

  uint64_t v20 = v18;
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v3, v17, v18, 0LL);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v20);
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = ~v14;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v10 + 48) + 8 * a2));
      Swift::Int v3 = v24;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v23 == v25 && v3 == v26) {
        goto LABEL_25;
      }
      uint64_t v28 = v26;
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v3, v25, v26, 0LL);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v28);
    }

    while ((v29 & 1) == 0);
  }

uint64_t sub_10006E6A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for MetricsFieldExclusionRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006D380( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  &qword_10013D998,  &qword_10013D320,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
  }

  else
  {
    if (v11 > v10)
    {
      sub_10006F0EC( (uint64_t (*)(void))&type metadata accessor for MetricsFieldExclusionRequest,  &qword_10013D998);
      goto LABEL_12;
    }

    sub_10006FD60( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  &qword_10013D998,  &qword_10013D320,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100027978( &qword_10013D320,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100027978( &qword_10013D990,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10006E8F4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for MetricsFieldInclusionRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006D380( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  &qword_10013D9A8,  &qword_10013D328,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  }

  else
  {
    if (v11 > v10)
    {
      sub_10006F0EC( (uint64_t (*)(void))&type metadata accessor for MetricsFieldInclusionRequest,  &qword_10013D9A8);
      goto LABEL_12;
    }

    sub_10006FD60( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  &qword_10013D9A8,  &qword_10013D328,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100027978( &qword_10013D328,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100027978( &qword_10013D9A0,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest,  (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_10006EB48(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006D6E0(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10006F310();
      goto LABEL_14;
    }

    sub_10007007C(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_10006EC68(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10006DBF8(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10006F644();
      goto LABEL_14;
    }

    sub_100070550(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for ASCSignpostTag(0LL);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

id sub_10006ED88()
{
  return sub_10006F4A4(&qword_10013D970);
}

void *sub_10006ED94()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013D980);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

id sub_10006EF44()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013D9C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void *sub_10006F0EC(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - v7;
  sub_100029E18(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release(v9);
LABEL_30:
    uint64_t *v4 = v11;
    return result;
  }

  uint64_t v28 = v4;
  id result = (void *)(v10 + 56);
  uint64_t v13 = v9 + 56;
  unint64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  int64_t v16 = 0LL;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = *(void *)(v9 + 16);
  uint64_t v17 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *(void *)(v9 + 56);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v24 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v13 + 8 * v16);
      if (!v25)
      {
        int64_t v16 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v16);
        if (!v25) {
          break;
        }
      }
    }

LABEL_32:
  __break(1u);
  return result;
}

    uint64_t v18 = (v26 - 1) & v26;
    unint64_t v19 = __clz(__rbit64(v26)) + (v20 << 6);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

void *sub_10006F310()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013D988);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

id sub_10006F4A4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100029E18(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

void *sub_10006F644()
{
  uint64_t v1 = v0;
  sub_100029E18(&qword_10013D9C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_10006F7D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D980);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

void sub_10006FA84(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D9C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v31 = v2;
  uint64_t v32 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v33 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  swift_retain(v3);
  int64_t v11 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }

    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v15 >= v33) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v33) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v32 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v33) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v32 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_10006FD60( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  Swift::Int v43 = a4;
  uint64_t v44 = a5;
  uint64_t v7 = v5;
  uint64_t v42 = a2;
  uint64_t v9 = a2(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100029E18(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0LL);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = swift_release(v13);
LABEL_37:
    uint64_t *v7 = v15;
    return result;
  }

  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  BOOL v39 = v7;
  uint64_t v40 = v13 + 56;
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  int64_t v41 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain(v13);
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v26 >= v41) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v41) {
        goto LABEL_35;
      }
      unint64_t v27 = *(void *)(v40 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v41) {
          goto LABEL_35;
        }
        unint64_t v27 = *(void *)(v40 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }

uint64_t sub_10007007C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D988);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  int64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_1000702DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100029E18(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  uint64_t v31 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v9 = v4 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v13 = v6 + 56;
  Swift::Int result = swift_retain(v4);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v19 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_100070550(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100029E18(&qword_10013D9C0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

void (*sub_1000707B0(uint64_t a1, uint64_t a2))(char *, uint64_t, uint64_t)
{
  uint64_t v4 = sub_100029E18(&qword_10013CF68);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v112 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v111 = (char *)&v101 - v7;
  uint64_t v8 = type metadata accessor for JSONContext(0LL);
  unint64_t v116 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v106 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v101 - v11;
  uint64_t v13 = type metadata accessor for JSONObject(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v107 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  id v108 = (char *)&v101 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v110 = (char *)&v101 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v109 = (char *)&v101 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = (char *)&v101 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v101 - v26;
  uint64_t v118 = a1;
  JSONObject.subscript.getter(0x4F746C7561666564LL, 0xEC00000072656666LL);
  uint64_t v28 = a2;
  uint64_t v29 = sub_100029494((uint64_t)v27, a2);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v105 = v27;
  uint64_t v115 = v13;
  uint64_t v31 = v13;
  uint64_t v32 = v30;
  v30(v27, v31);
  if (!v29)
  {
    uint64_t v37 = type metadata accessor for JSONError(0LL);
    uint64_t v38 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    unint64_t v34 = (void (*)(char *, uint64_t, uint64_t))swift_allocError(v37, v38, 0LL, 0LL);
    uint64_t v40 = v39;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v114);
    strcpy((char *)v40, "defaultOffer");
    *(_BYTE *)(v40 + 13) = 0;
    *(_WORD *)(v40 + 14) = -5120;
    *(void *)(v40 + swift_weakDestroy(v0 + 16) = MetatypeMetadata;
    uint64_t v42 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v40,  enum case for JSONError.missingProperty(_:),  v37);
    swift_willThrow(v42);
    return v34;
  }

  uint64_t v113 = v29;
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  unint64_t v33 = v116;
  unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 16);
  v34(v12, v28, v8);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v35 = v117;
  unint64_t v36 = (void *)sub_10004CBCC((uint64_t)v25);
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v8);
    v32(v25, v115);
LABEL_16:
    swift_unknownObjectRelease(v113);
    return v34;
  }

  id v101 = v34;
  uint64_t v102 = v28;
  uint64_t v103 = v8;
  id v104 = v36;
  uint64_t v117 = 0LL;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v8);
  Swift::Int v43 = v25;
  uint64_t v44 = v115;
  v32(v43, v115);
  uint64_t v45 = v109;
  uint64_t v46 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v47 = (uint64_t)v111;
  JSONObject.dictionary.getter(v46);
  uint64_t v48 = v32;
  v32(v45, v44);
  uint64_t v49 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  double v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v51(v47, 1LL, v49) == 1)
  {
    sub_10004E728(v47);
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v53 = v52;
    uint64_t v54 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v55 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v53, &type metadata for String, v54);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v47, v49);
    unint64_t v116 = v55;
    if (v55) {
      goto LABEL_9;
    }
  }

  unint64_t v116 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_9:
  uint64_t v56 = v110;
  uint64_t v57 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  uint64_t v58 = (uint64_t)v112;
  JSONObject.dictionary.getter(v57);
  v48(v56, v44);
  if (v51(v58, 1LL, v49) == 1)
  {
    sub_10004E728(v58);
    uint64_t v59 = v114;
    uint64_t v60 = v103;
    char v61 = v108;
LABEL_12:
    unint64_t v66 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0LL);
    goto LABEL_13;
  }

  type metadata accessor for ASCOfferTitleVariant(0LL);
  uint64_t v62 = v58;
  uint64_t v64 = v63;
  uint64_t v65 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  unint64_t v66 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v64, &type metadata for String, v65);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v62, v49);
  uint64_t v59 = v114;
  uint64_t v60 = v103;
  char v61 = v108;
  if (!v66) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v67 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v68 = JSONObject.int.getter(v67);
  if ((v69 & 1) != 0)
  {
    uint64_t v94 = type metadata accessor for JSONError(0LL);
    uint64_t v95 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    unint64_t v34 = (void (*)(char *, uint64_t, uint64_t))swift_allocError(v94, v95, 0LL, 0LL);
    unint64_t v97 = v96;
    type metadata accessor for ASCOfferFlags(0LL);
    *unint64_t v97 = 0x65756C6156776172LL;
    v97[1] = 0xE800000000000000LL;
    v97[2] = v98;
    v97[3] = _swiftEmptyArrayStorage;
    uint64_t v99 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v94 - 8) + 104LL))( v97,  enum case for JSONError.malformedProperty(_:),  v94);
    swift_willThrow(v99);
    v48(v61, v44);

    swift_bridgeObjectRelease(v116);
    swift_bridgeObjectRelease(v66);
    goto LABEL_16;
  }

  uint64_t v114 = v68;
  v48(v61, v44);
  uint64_t v70 = v105;
  uint64_t v71 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
  unint64_t v112 = (char *)JSONObject.number.getter(v71);
  v48(v70, v44);
  uint64_t v72 = (uint64_t)v107;
  JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
  uint64_t v73 = v106;
  uint64_t v111 = (char *)v66;
  uint64_t v74 = v102;
  v101(v106, v102, v60);
  uint64_t v75 = sub_100029E18(&qword_10013CF70);
  unint64_t v76 = sub_10004DCA0();
  uint64_t v77 = Array<A>.init(tryDeserializing:using:)(v72, v73, v75, v76);
  uint64_t v78 = v117;
  uint64_t v79 = v44;
  uint64_t v80 = sub_10004D100(v77);
  uint64_t v117 = v78;
  swift_bridgeObjectRelease(v77);
  JSONObject.subscript.getter(0x726566664F797562LL, 0xE800000000000000LL);
  uint64_t v81 = sub_100029494(v72, v74);
  v48((char *)v72, v79);
  JSONObject.subscript.getter(0x6566664F6E65706FLL, 0xE900000000000072LL);
  uint64_t v82 = sub_100029494(v72, v74);
  v48((char *)v72, v79);
  id v83 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v59));
  type metadata accessor for ASCOfferTitleVariant(0LL);
  sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
  unint64_t v84 = v116;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v84);
  id v86 = v111;
  Class v87 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v86);
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  Class v88 = Array._bridgeToObjectiveC()().super.isa;
  *(void *)&double v89 = swift_bridgeObjectRelease(v80).n128_u64[0];
  uint64_t v90 = v113;
  double v91 = v83;
  id v92 = v104;
  uint64_t v93 = v112;
  unint64_t v34 = (void (*)(char *, uint64_t, uint64_t))objc_msgSend( v91,  "initWithID:titles:subtitles:flags:ageRating:metrics:defaultOffe r:buyOffer:openOffer:",  v104,  isa,  v87,  v114,  v112,  v88,  v89,  v113,  v81,  v82);

  swift_unknownObjectRelease(v90);
  swift_unknownObjectRelease(v81);
  swift_unknownObjectRelease(v82);
  return v34;
}

void (*sub_1000710A8(uint64_t a1, uint64_t a2))(char *, uint64_t, uint64_t)
{
  return sub_1000707B0(a1, a2);
}

id sub_1000710BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for State(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_11:
    id v8 = [v1 buyOffer];
    if (v8) {
      return v8;
    }
    return [v1 defaultOffer];
  }

  if (v7 != enum case for State.openable(_:))
  {
    if (v7 != enum case for State.buyable(_:) && v7 != enum case for State.unknown(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return [v1 defaultOffer];
    }

    goto LABEL_11;
  }

  (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
  id v8 = [v1 openOffer];
  uint64_t v9 = type metadata accessor for AppOpenableDestination(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v6, v9);
  if (v8) {
    return v8;
  }
  return [v1 defaultOffer];
}

void *sub_100071258(uint64_t a1, void *a2)
{
  uint64_t v48 = a2;
  uint64_t v49 = type metadata accessor for JSONContext(0LL);
  uint64_t v54 = *(void *)(v49 - 8);
  uint64_t v3 = __chkstk_darwin(v49);
  uint64_t v53 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v43 - v5;
  uint64_t v7 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for JSONObject(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  double v51 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for JSONArray(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v52 = (char *)&v43 - v21;
  uint64_t v47 = a1;
  uint64_t v22 = JSONObject.subscript.getter(0x736F65646976LL, 0xE600000000000000LL);
  JSONObject.array.getter(v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v15, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1LL, v16) == 1)
  {
    sub_100054854((uint64_t)v9);
    uint64_t v24 = (void *)type metadata accessor for JSONError(0LL);
    unint64_t v25 = sub_100029F04();
    swift_allocError(v24, v25, 0LL, 0LL);
    uint64_t v27 = v26;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v50);
    *uint64_t v27 = 0x736F65646976LL;
    v27[1] = 0xE600000000000000LL;
    void v27[2] = MetatypeMetadata;
    uint64_t v29 = (*(uint64_t (**)(void *, void, void *))(*(v24 - 1) + 104LL))( v27,  enum case for JSONError.missingProperty(_:),  v24);
    swift_willThrow(v29);
  }

  else
  {
    uint64_t v44 = v23;
    uint64_t v45 = v10;
    uint64_t v30 = v52;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v52, v9, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v30, v16);
    uint64_t v31 = *(void (**)(char *, void *, uint64_t))(v54 + 16);
    uint64_t v24 = v48;
    uint64_t v32 = v49;
    v31(v6, v48, v49);
    uint64_t v33 = sub_100029E18(&qword_10013D9D0);
    unint64_t v34 = sub_1000716B8();
    uint64_t v35 = Array<A>.init(tryDeserializing:using:)(v20, v6, v33, v34);
    unint64_t v36 = v46;
    uint64_t v46 = sub_10004D100(v35);
    swift_bridgeObjectRelease(v35);
    JSONObject.subscript.getter(0x616C50616964656DLL, 0xED00006D726F6674LL);
    v31(v53, v24, v32);
    sub_10002A030(0LL, &qword_10013D838, off_10011E540);
    id v37 = sub_100057010();
    if (v36)
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v32);
      v44(v51, v45);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v52, v16);
      swift_bridgeObjectRelease(v46);
    }

    else
    {
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v32);
      v44(v51, v45);
      id v39 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v50));
      sub_10002A030(0LL, &qword_10013D9E0, off_10011E580);
      uint64_t v40 = v46;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v24 = objc_msgSend(v39, "initWithVideos:mediaPlatform:", isa, v38, swift_bridgeObjectRelease(v40).n128_f64[0]);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v52, v16);
    }
  }

  return v24;
}

void *sub_1000716A4(uint64_t a1, void *a2)
{
  return sub_100071258(a1, a2);
}

unint64_t sub_1000716B8()
{
  unint64_t result = qword_10013D9D8;
  if (!qword_10013D9D8)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D9D0);
    unint64_t result = swift_getWitnessTable(&unk_1000F0D98, v1);
    atomic_store(result, (unint64_t *)&qword_10013D9D8);
  }

  return result;
}

void *sub_100071704(uint64_t a1, uint64_t a2)
{
  uint64_t v138 = a2;
  uint64_t v3 = sub_100029E18(&qword_10013CF68);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v131 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  id v134 = (char *)&v121 - v6;
  uint64_t v137 = type metadata accessor for JSONContext(0LL);
  uint64_t v142 = *(void *)(v137 - 8);
  uint64_t v7 = __chkstk_darwin(v137);
  uint64_t v127 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v141 = (char *)&v121 - v9;
  uint64_t v10 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for JSONObject(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v128 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v126 = (char *)&v121 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  double v125 = (char *)&v121 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v130 = (char *)&v121 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  double v133 = (char *)&v121 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v132 = (char *)&v121 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v121 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v121 - v30;
  uint64_t v32 = type metadata accessor for URL(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  char v129 = (char *)&v121 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  id v37 = (char *)&v121 - v36;
  uint64_t v140 = a1;
  uint64_t v38 = JSONObject.subscript.getter(7107189LL, 0xE300000000000000LL);
  JSONObject.url.getter(v38);
  id v39 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v40 = v31;
  uint64_t v41 = v32;
  uint64_t v42 = v13;
  v39(v40, v13);
  uint64_t v143 = v33;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v12, 1LL, v41) == 1)
  {
    sub_10002E92C((uint64_t)v12, &qword_10013EE90);
    uint64_t v43 = type metadata accessor for JSONError(0LL);
    uint64_t v44 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v44, 0LL, 0LL);
    uint64_t v46 = v45;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v139);
    *uint64_t v46 = 7107189LL;
    v46[1] = 0xE300000000000000LL;
    v46[2] = MetatypeMetadata;
    uint64_t v48 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v43 - 8) + 104LL))( v46,  enum case for JSONError.missingProperty(_:),  v43);
    swift_willThrow(v48);
    return v46;
  }

  uint64_t v135 = v39;
  (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v37, v12, v41);
  JSONObject.subscript.getter(25705LL, 0xE200000000000000LL);
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 16);
  uint64_t v50 = v137;
  v49(v141, v138, v137);
  uint64_t v46 = (void *)sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v51 = v136;
  uint64_t v52 = (void *)sub_10004CBCC((uint64_t)v29);
  uint64_t v53 = v50;
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v50);
    v135(v29, v13);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v37, v41);
    return v46;
  }

  uint64_t v54 = v49;
  id v122 = v52;
  uint64_t v136 = 0LL;
  (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v53);
  uint64_t v55 = v135;
  v135(v29, v13);
  uint64_t v56 = v132;
  uint64_t v57 = JSONObject.subscript.getter(0x73656C746974LL, 0xE600000000000000LL);
  uint64_t v58 = v134;
  JSONObject.dictionary.getter(v57);
  uint64_t v59 = (uint64_t)v58;
  uint64_t v142 = v42;
  v55(v56, v42);
  uint64_t v60 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v59, 1LL, v60);
  uint64_t v124 = v41;
  if (v63 == 1)
  {
    sub_10002E92C(v59, &qword_10013CF68);
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v65 = v64;
    uint64_t v66 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v67 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v65, &type metadata for String, v66);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
    if (v67)
    {
      unint64_t v141 = (char *)v67;
      goto LABEL_10;
    }
  }

  unint64_t v141 = (char *)sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_10:
  uint64_t v68 = (uint64_t)v131;
  char v69 = v133;
  uint64_t v70 = JSONObject.subscript.getter(0x656C746974627573LL, 0xE900000000000073LL);
  JSONObject.dictionary.getter(v70);
  v135(v69, v142);
  int v71 = v62(v68, 1LL, v60);
  char v123 = v37;
  if (v71 == 1)
  {
    sub_10002E92C(v68, &qword_10013CF68);
    uint64_t v72 = v136;
    uint64_t v73 = v130;
  }

  else
  {
    type metadata accessor for ASCOfferTitleVariant(0LL);
    uint64_t v74 = v68;
    uint64_t v76 = v75;
    uint64_t v77 = sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    unint64_t v78 = JSONDictionary.bridgedPrimitiveValues<A, B>()(v76, &type metadata for String, v77);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v74, v60);
    uint64_t v72 = v136;
    uint64_t v73 = v130;
    if (v78) {
      goto LABEL_14;
    }
  }

  unint64_t v78 = sub_10004543C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0LL);
LABEL_14:
  uint64_t v79 = JSONObject.subscript.getter(0x7367616C66LL, 0xE500000000000000LL);
  uint64_t v80 = JSONObject.int.getter(v79);
  if ((v81 & 1) != 0)
  {
    uint64_t v113 = type metadata accessor for JSONError(0LL);
    uint64_t v114 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v113, v114, 0LL, 0LL);
    uint64_t v46 = v115;
    type metadata accessor for ASCOfferFlags(0LL);
    *uint64_t v46 = 0x65756C6156776172LL;
    v46[1] = 0xE800000000000000LL;
    v46[2] = v116;
    v46[3] = _swiftEmptyArrayStorage;
    uint64_t v117 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v113 - 8) + 104LL))( v46,  enum case for JSONError.malformedProperty(_:),  v113);
    swift_willThrow(v117);
    swift_bridgeObjectRelease(v141);
    swift_bridgeObjectRelease(v78);

    v135(v73, v142);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v123, v124);
  }

  else
  {
    id v134 = (char *)v80;
    uint64_t v82 = v73;
    uint64_t v83 = v142;
    unint64_t v84 = v135;
    v135(v82, v142);
    uint64_t v85 = v125;
    uint64_t v86 = JSONObject.subscript.getter(0x6E69746152656761LL, 0xE900000000000067LL);
    double v133 = (char *)JSONObject.number.getter(v86);
    v84(v85, v83);
    uint64_t v132 = (char *)v78;
    Class v87 = v126;
    JSONObject.subscript.getter(0x7363697274656DLL, 0xE700000000000000LL);
    Class v88 = v127;
    v54(v127, v138, v137);
    uint64_t v89 = sub_100029E18(&qword_10013CF70);
    unint64_t v90 = sub_10004DCA0();
    uint64_t v91 = Array<A>.init(tryDeserializing:using:)(v87, v88, v89, v90);
    uint64_t v92 = v72;
    uint64_t v93 = sub_10004D100(v91);
    uint64_t v136 = v92;
    __n128 v94 = swift_bridgeObjectRelease(v91);
    uint64_t v95 = v129;
    (*(void (**)(char *, char *, uint64_t, __n128))(v143 + 16))(v129, v123, v124, v94);
    uint64_t v96 = v128;
    uint64_t v97 = JSONObject.subscript.getter(0x7469736E65537369LL, 0xEB00000000657669LL);
    LOBYTE(v91) = JSONObject.BOOL.getter(v97);
    v84(v96, v83);
    LODWORD(v142) = v91 & 1;
    id v98 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v139));
    type metadata accessor for ASCOfferTitleVariant(0LL);
    sub_100027978( (unint64_t *)&qword_10013C1F8,  (uint64_t (*)(uint64_t))type metadata accessor for ASCOfferTitleVariant,  (uint64_t)&unk_1000ED580);
    uint64_t v99 = v141;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v99);
    id v101 = v132;
    Class v102 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v101);
    sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
    Class v103 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v93);
    URL._bridgeToObjectiveC()(v104);
    unint64_t v106 = v105;
    LOBYTE(v120) = v142;
    uint64_t v119 = v105;
    uint64_t v107 = v98;
    id v108 = v122;
    uint64_t v109 = v133;
    uint64_t v46 = [v107 initWithID:v122 titles:isa subtitles:v102 flags:v134 ageRating:v133 metrics:v103 url:v119 isSensitive:v120];

    uint64_t v110 = *(void (**)(char *, uint64_t))(v143 + 8);
    uint64_t v111 = v95;
    uint64_t v112 = v124;
    v110(v111, v124);
    v110(v123, v112);
  }

  return v46;
}

void *sub_100072118(uint64_t a1, uint64_t a2)
{
  return sub_100071704(a1, a2);
}

void *sub_10007212C(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v2 = (void *)type metadata accessor for JSONContext(0LL);
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for JSONObject(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = JSONObject.subscript.getter(0x4C52556F65646976LL, 0xE800000000000000LL);
  v28[1] = JSONObject.string.getter(v13);
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v12, v6);
  if (v15)
  {
    JSONObject.subscript.getter(0x77656976657270LL, 0xE700000000000000LL);
    (*(void (**)(char *, uint64_t, void *))(v3 + 16))(v5, v30, v2);
    sub_1000723D0();
    uint64_t v17 = v31;
    uint64_t v18 = sub_1000522A4();
    if (v17)
    {
      (*(void (**)(char *, void *))(v3 + 8))(v5, v2);
      v16(v10, v6);
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      uint64_t v24 = v18;
      (*(void (**)(char *, void *))(v3 + 8))(v5, v2);
      v16(v10, v6);
      id v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v29));
      NSString v26 = String._bridgeToObjectiveC()();
      uint64_t v2 = objc_msgSend(v25, "initWithVideoURL:preview:", v26, v24, swift_bridgeObjectRelease(v15).n128_f64[0]);
    }
  }

  else
  {
    uint64_t v19 = type metadata accessor for JSONError(0LL);
    unint64_t v20 = sub_100029F04();
    swift_allocError(v19, v20, 0LL, 0LL);
    uint64_t v2 = v21;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v29);
    void *v2 = 0x4C52556F65646976LL;
    v2[1] = 0xE800000000000000LL;
    v2[2] = MetatypeMetadata;
    uint64_t v23 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v2,  enum case for JSONError.missingProperty(_:),  v19);
    swift_willThrow(v23);
  }

  return v2;
}

void *sub_1000723BC(uint64_t a1, uint64_t a2)
{
  return sub_10007212C(a1, a2);
}

unint64_t sub_1000723D0()
{
  unint64_t result = qword_10013D840;
  if (!qword_10013D840)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASCArtwork);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013D840);
  }

  return result;
}

void *sub_10007240C(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = a2;
  uint64_t v3 = sub_100029E18(&qword_10013CF68);
  __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for JSONDictionary(0LL);
  uint64_t v74 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  __chkstk_darwin(v5);
  uint64_t v68 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSONContext(0LL);
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  __chkstk_darwin(v7);
  int v71 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for JSONObject(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v67 - v17;
  uint64_t v19 = type metadata accessor for JSONArray(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v77 = (char *)&v67 - v24;
  uint64_t v73 = a1;
  uint64_t v25 = JSONObject.subscript.getter(0x7463757274736E69LL, 0xEC000000736E6F69LL);
  JSONObject.array.getter(v25);
  NSString v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v27 = v18;
  uint64_t v28 = v20;
  v26(v27, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1LL, v19) == 1)
  {
    sub_10002E92C((uint64_t)v11, (uint64_t *)&unk_10013CFD0);
    uint64_t v29 = (void *)type metadata accessor for JSONError(0LL);
    uint64_t v30 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v29, v30, 0LL, 0LL);
    uint64_t v32 = v31;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v78);
    strcpy((char *)v32, "instructions");
    *(_BYTE *)(v32 + 13) = 0;
    *(_WORD *)(v32 + 14) = -5120;
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = MetatypeMetadata;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, void, void *))(*(v29 - 1) + 104LL))( v32,  enum case for JSONError.missingProperty(_:),  v29);
    swift_willThrow(v34);
  }

  else
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    uint64_t v36 = v77;
    v35(v77, v11, v19);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v23, v36, v19);
    id v37 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v71, v72, v70);
    uint64_t v38 = v19;
    uint64_t v39 = sub_100029E18(&qword_10013D9E8);
    unint64_t v40 = sub_100072E90();
    uint64_t v41 = Array<A>.init(tryDeserializing:using:)(v23, v37, v39, v40);
    uint64_t v42 = JSONObject.subscript.getter(0x6C65694665676170LL, 0xEA00000000007364LL);
    uint64_t v43 = v76;
    JSONObject.dictionary.getter(v42);
    v26(v16, v12);
    uint64_t v44 = v74;
    uint64_t v45 = v43;
    uint64_t v46 = v75;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v45, 1LL, v75) == 1)
    {
      swift_bridgeObjectRelease(v41);
      sub_10002E92C(v76, &qword_10013CF68);
      uint64_t v29 = (void *)type metadata accessor for JSONError(0LL);
      uint64_t v47 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v29, v47, 0LL, 0LL);
      uint64_t v48 = v28;
      uint64_t v50 = v49;
      uint64_t v51 = swift_getMetatypeMetadata(v78);
      *uint64_t v50 = 0x6C65694665676170LL;
      v50[1] = 0xEA00000000007364LL;
      v50[2] = v51;
      uint64_t v52 = (*(uint64_t (**)(void *, void, void *))(*(v29 - 1) + 104LL))( v50,  enum case for JSONError.missingProperty(_:),  v29);
      swift_willThrow(v52);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v77, v38);
    }

    else
    {
      uint64_t v72 = v28;
      uint64_t v73 = v38;
      uint64_t v53 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v68, v76, v46);
      uint64_t v54 = JSONDictionary.bridgedPrimitiveValues<A, B>()( &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v55 = v78;
      if (v54)
      {
        uint64_t v56 = v54;
        uint64_t v57 = sub_10004D100(v41);
        swift_bridgeObjectRelease(v41);
        id v58 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v55));
        sub_10002A030(0LL, &qword_10013D9F8, off_10011E588);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v57);
        Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
        uint64_t v29 = objc_msgSend( v58,  "initWithInstructions:pageFields:",  isa,  v60,  swift_bridgeObjectRelease(v56).n128_f64[0]);
      }

      else
      {
        swift_bridgeObjectRelease(v41);
        uint64_t v29 = (void *)type metadata accessor for JSONError(0LL);
        uint64_t v61 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
        swift_allocError(v29, v61, 0LL, 0LL);
        int v63 = v62;
        uint64_t v64 = swift_getMetatypeMetadata(v55);
        *int v63 = 0x6C65694665676170LL;
        v63[1] = 0xEA00000000007364LL;
        v63[2] = v64;
        v63[3] = _swiftEmptyArrayStorage;
        uint64_t v65 = (*(uint64_t (**)(void *, void, void *))(*(v29 - 1) + 104LL))( v63,  enum case for JSONError.malformedProperty(_:),  v29);
        swift_willThrow(v65);
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v53, v46);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v77, v73);
    }
  }

  return v29;
}

void *sub_100072A88(uint64_t a1, uint64_t a2)
{
  return sub_10007240C(a1, a2);
}

char *sub_100072A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = (char *)a2;
  uint64_t v2 = sub_100029E18((uint64_t *)&unk_10013CFD0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for JSONArray(0LL);
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JSONObject(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  sub_10002A030(0LL, (unint64_t *)&qword_10013C7E8, off_10011E550);
  JSONObject.subscript.getter(1635017060LL, 0xE400000000000000LL);
  uint64_t v15 = v42;
  uint64_t v16 = sub_10005736C((uint64_t)v14, (uint64_t)v41);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  else
  {
    uint64_t v41 = v7;
    uint64_t v42 = v16;
    uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v14, v8);
    uint64_t v18 = JSONObject.subscript.getter(0xD000000000000010LL, 0x80000001000FC530LL);
    JSONObject.array.getter(v18);
    v17(v12, v8);
    uint64_t v20 = v39;
    uint64_t v19 = v40;
    int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v4, 1LL, v40);
    uint64_t v22 = v38;
    if (v21 == 1)
    {
      sub_10002E92C((uint64_t)v4, (uint64_t *)&unk_10013CFD0);
      uint64_t v12 = (char *)type metadata accessor for JSONError(0LL);
      uint64_t v23 = sub_100027978( (unint64_t *)&qword_10013C420,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONError,  (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v12, v23, 0LL, 0LL);
      uint64_t v25 = v24;
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v22);
      void *v25 = 0xD000000000000010LL;
      v25[1] = 0x80000001000FC530LL;
      v25[2] = MetatypeMetadata;
      uint64_t v27 = (*(uint64_t (**)(void *, void, char *))(*((void *)v12 - 1) + 104LL))( v25,  enum case for JSONError.missingProperty(_:),  v12);
      swift_willThrow(v27);
    }

    else
    {
      uint64_t v28 = (uint64_t)v41;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v41, v4, v19);
      type metadata accessor for ASCMetricsInvocationPoint(0LL);
      uint64_t v30 = JSONArray.compactMap<A>(_:)(sub_100072E14, 0LL, v29);
      uint64_t v31 = sub_10005F254(v30);
      swift_bridgeObjectRelease(v30);
      id v32 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v22));
      sub_100027978( &qword_10013C188,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ED0FC);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      *(void *)&double v34 = swift_bridgeObjectRelease(v31).n128_u64[0];
      uint64_t v35 = v32;
      uint64_t v36 = v42;
      uint64_t v12 = (char *)objc_msgSend(v35, "initWithData:invocationPoints:", v42, isa, v34);

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v28, v19);
    }
  }

  return v12;
}

void *sub_100072E14@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100027978( &qword_10013C008,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMetricsInvocationPoint,  (uint64_t)&unk_1000ED0C4);
  return JSONObject.stringEnumOrNil<A>()(a1, v3, v4);
}

char *sub_100072E7C(uint64_t a1, uint64_t a2)
{
  return sub_100072A9C(a1, a2);
}

unint64_t sub_100072E90()
{
  unint64_t result = qword_10013D9F0;
  if (!qword_10013D9F0)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D9E8);
    unint64_t result = swift_getWitnessTable(&unk_1000F0D98, v1);
    atomic_store(result, (unint64_t *)&qword_10013D9F0);
  }

  return result;
}

uint64_t sub_100072EDC(uint64_t a1)
{
  switch(a1)
  {
    case 3LL:
      type metadata accessor for ASCOpenAppError(0LL);
      uint64_t v2 = v8;
      uint64_t v20 = 3LL;
      uint64_t v9 = sub_100029E18(&qword_10013F670);
      uint64_t inited = swift_initStackObject(v9, v19);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(void *)(inited + 40) = v10;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v6 = 0xD000000000000018LL;
      uint64_t v7 = "Companion phone required";
      goto LABEL_7;
    case 2LL:
      type metadata accessor for ASCOpenAppError(0LL);
      uint64_t v2 = v11;
      uint64_t v20 = 2LL;
      uint64_t v12 = sub_100029E18(&qword_10013F670);
      uint64_t inited = swift_initStackObject(v12, v18);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(void *)(inited + 40) = v13;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v6 = 0xD000000000000011LL;
      uint64_t v7 = "App launch failed";
      goto LABEL_7;
    case 1LL:
      type metadata accessor for ASCOpenAppError(0LL);
      uint64_t v2 = v1;
      uint64_t v20 = 1LL;
      uint64_t v3 = sub_100029E18(&qword_10013F670);
      uint64_t inited = swift_initStackObject(v3, &v17);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(void *)(inited + 40) = v5;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v6 = 0xD000000000000013LL;
      uint64_t v7 = "App launch disabled";
LABEL_7:
      *(void *)(inited + 48) = v6;
      *(void *)(inited + 56) = (unint64_t)(v7 - 32) | 0x8000000000000000LL;
      unint64_t v14 = sub_100044F60(inited);
      unint64_t v15 = sub_1000730A4();
      _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v14, v2, v15);
      return v21;
  }

  return 0LL;
}

unint64_t sub_1000730A4()
{
  unint64_t result = qword_10013C278;
  if (!qword_10013C278)
  {
    type metadata accessor for ASCOpenAppError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000ED888, v1);
    atomic_store(result, (unint64_t *)&qword_10013C278);
  }

  return result;
}

uint64_t sub_1000730EC()
{
  uint64_t v0 = type metadata accessor for LogMessageLevel(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger.Subsystem(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSLogger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC30 != -1) {
    swift_once(&qword_10013BC30, sub_1000D14B4);
  }
  uint64_t v12 = sub_10002A768(v4, (uint64_t)qword_1001485D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
  OSLogger.init(subsystem:category:)(v7, 0xD000000000000014LL, 0x80000001000FC790LL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LogMessageLevel.info(_:), v0);
  uint64_t v13 = Logger.withOutputFiltered(byName:defaultVerbosityLevel:)( 0xD000000000000019LL,  0x80000001000FC7B0LL,  v3,  v8,  &protocol witness table for OSLogger);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t result = type metadata accessor for OptionalLogger(0LL);
  qword_100148560 = result;
  unk_100148568 = &protocol witness table for OptionalLogger;
  qword_100148548 = v13;
  return result;
}

uint64_t sub_1000732D0()
{
  sub_100048470(*(void **)(v0 + 128), *(_BYTE *)(v0 + 136));
  swift_release(*(void *)(v0 + 144));
  return v0;
}

uint64_t sub_100073334()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

void sub_100073354()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void **)(v0 + 128);
  char v6 = *(_BYTE *)(v0 + 136);
  sub_100048450(*(id *)(v1 + 128), *(_BYTE *)(v1 + 136));
  sub_1000B9EEC((uint64_t)v5, v6);
  char v8 = v7;
  sub_100048470(v5, v6);
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = *(void **)(v1 + 128);
    char v10 = *(_BYTE *)(v1 + 136);
    NSString v26 = v9;
    char v27 = v10;
    sub_100048450(v9, v10);
    AsyncEvent.post(_:)(&v26);
    sub_100048470(v9, v10);
    if (qword_10013BBB8 != -1) {
      swift_once(&qword_10013BBB8, sub_1000730EC);
    }
    sub_1000388F0((uint64_t)&qword_100148548, (uint64_t)&v26);
    uint64_t v11 = v28;
    uint64_t v12 = v29;
    sub_100029EE0(&v26, v28);
    uint64_t v13 = sub_100029E18(&qword_10013EA00);
    uint64_t v14 = type metadata accessor for LogMessage(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
    v16._object = (void *)0x80000001000FC750LL;
    v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = *(void **)(v1 + 128);
    char v18 = *(_BYTE *)(v1 + 136);
    sub_100048450(v17, v18);
    sub_1000B9D84((uint64_t)v17, v18);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    sub_100048470(v17, v18);
    v25[3] = &type metadata for String;
    v25[0] = v20;
    v25[1] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v25);
    sub_10002E92C((uint64_t)v25, &qword_10013C6F0);
    v23._uint64_t countAndFlagsBits = 0LL;
    v23._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v4);
    Logger.info(_:)(v15, v11, v12);
    swift_bridgeObjectRelease(v15);
    sub_100029F4C(&v26);
  }

uint64_t sub_1000735AC()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v17[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBB8 != -1) {
    swift_once(&qword_10013BBB8, sub_1000730EC);
  }
  sub_1000388F0((uint64_t)&qword_100148548, (uint64_t)v18);
  uint64_t v3 = v19;
  uint64_t v4 = v20;
  sub_100029EE0(v18, v19);
  uint64_t v5 = sub_100029E18(&qword_10013EA00);
  uint64_t v6 = type metadata accessor for LogMessage(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(9LL, 1LL);
  v8._uint64_t countAndFlagsBits = 0x6465766965636552LL;
  v8._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  uint64_t v9 = (void *)Notification.name.getter();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  v17[3] = &type metadata for String;
  v17[0] = v10;
  v17[1] = v12;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v17);
  sub_10002E92C((uint64_t)v17, &qword_10013C6F0);
  v13._uint64_t countAndFlagsBits = 0LL;
  v13._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)(v2);
  Logger.debug(_:)(v7, v3, v4);
  swift_bridgeObjectRelease(v7);
  sub_100029F4C(v18);
  sub_100073788(0);
  return swift_release(v14);
}

void sub_100073788(int a1)
{
  uint64_t v2 = v1;
  uint64_t v35 = *v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v31 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - v11;
  if (qword_10013BBB8 != -1) {
    swift_once(&qword_10013BBB8, sub_1000730EC);
  }
  sub_1000388F0((uint64_t)&qword_100148548, (uint64_t)v38);
  uint64_t v32 = v40;
  uint64_t v33 = v39;
  v31[1] = sub_100029EE0(v38, v39);
  uint64_t v13 = sub_100029E18(&qword_10013EA00);
  uint64_t v14 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)) + 3 * v15,  *(unsigned __int8 *)(v14 + 80) | 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1000EF270;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(44LL, 1LL);
  v17._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v17._object = (void *)0x80000001000FC660LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  *((void *)&v37 + 1) = &type metadata for ArcadeEntitlementRefreshCondition;
  int v34 = a1;
  LOBYTE(v36) = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v36);
  sub_10002E92C((uint64_t)&v36, &qword_10013C6F0);
  v18._uint64_t countAndFlagsBits = 0x746E657272756320LL;
  v18._object = (void *)0xEF3A657461747320LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  LogMessage.init(stringInterpolation:)(v12);
  v31[0] = v15;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(37LL, 1LL);
  v19._uint64_t countAndFlagsBits = 0LL;
  v19._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  uint64_t v20 = (void *)v2[16];
  char v21 = *((_BYTE *)v2 + 136);
  sub_100048450(v20, v21);
  sub_1000B9D84((uint64_t)v20, v21);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_100048470(v20, v21);
  *((void *)&v37 + 1) = &type metadata for String;
  *(void *)&__int128 v36 = v23;
  *((void *)&v36 + 1) = v25;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v36);
  sub_10002E92C((uint64_t)&v36, &qword_10013C6F0);
  v26._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v26._object = (void *)0x80000001000FC680LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  LogMessage.init(stringInterpolation:)(v10);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(0LL, 1LL);
  v27._uint64_t countAndFlagsBits = 0LL;
  v27._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  uint64_t v28 = v2[3];
  if (v28)
  {
    uint64_t v29 = v2[2];
    *((void *)&v37 + 1) = &type metadata for String;
    *(void *)&__int128 v36 = v29;
    *((void *)&v36 + 1) = v28;
  }

  else
  {
    __int128 v36 = 0u;
    __int128 v37 = 0u;
  }

  swift_bridgeObjectRetain(v28);
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(&v36);
  sub_10002E92C((uint64_t)&v36, &qword_10013C6F0);
  v30._uint64_t countAndFlagsBits = 0LL;
  v30._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  LogMessage.init(stringInterpolation:)(v7);
  Logger.info(_:)(v16, v33, v32);
  swift_bridgeObjectRelease(v16);
  sub_100029F4C(v38);
  __asm { BR              X10 }

uint64_t type metadata accessor for ASDArcadeSubscriptionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd28ASDArcadeSubscriptionManager);
}

void (*sub_10007410C( char a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_100121C10, 48LL, 7LL);
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a4;
  swift_retain(a3);
  swift_retain(a2);
  return sub_1000752AC;
}

void sub_100074188(uint64_t a1, char a2, char a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  if (!a4)
  {
    uint64_t v23 = a1;
    char v24 = a2 & 1;
    char v25 = a3 & 1;
    swift_bridgeObjectRetain(a1);
    Promise.resolve(_:)(&v23);
    swift_bridgeObjectRelease(a1);
    return;
  }

  if ((a5 & 1) == 0 || (a2 & 1) == 0 || (a3 & 1) == 0)
  {
    swift_errorRetain(a4);
    goto LABEL_11;
  }

  type metadata accessor for Code(0LL);
  uint64_t v11 = v10;
  uint64_t v23 = 3027LL;
  swift_errorRetain(a4);
  unint64_t v12 = sub_1000752BC();
  if ((static _ErrorCodeProtocol.~= infix(_:_:)(&v23, a4, v11, v12) & 1) == 0)
  {
LABEL_11:
    Promise.reject(_:)(a4);
    swift_errorRelease(a4);
    return;
  }

  if (qword_10013BBB8 != -1) {
    swift_once(&qword_10013BBB8, sub_1000730EC);
  }
  uint64_t v13 = qword_100148560;
  uint64_t v14 = unk_100148568;
  sub_100029EE0(&qword_100148548, qword_100148560);
  uint64_t v15 = sub_100029E18(&qword_10013EA00);
  uint64_t v16 = type metadata accessor for LogMessage(0LL);
  uint64_t v17 = swift_allocObject( v15,  ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v16 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1000EDA10;
  LogMessage.init(stringLiteral:)(0xD000000000000037LL, 0x80000001000FC6B0LL);
  LogMessage.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001000FC6F0LL);
  Logger.debug(_:)(v17, v13, v14);
  swift_bridgeObjectRelease(v17);
  Swift::String v18 = a6 + 4;
  uint64_t v20 = a6[7];
  uint64_t v19 = a6[8];
  sub_100029EE0(v18, v20);
  char v21 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8);
  swift_retain(a7);
  v21(1LL, 1LL, 0xD000000000000014LL, 0x80000001000FB660LL, sub_100075304, a7, v20, v19, v23);
  swift_errorRelease(a4);
  swift_release(a7);
}

uint64_t sub_1000743C8(uint64_t a1, char a2, char a3, uint64_t a4)
{
  if (a4)
  {
    swift_errorRetain(a4);
    Promise.reject(_:)(a4);
    return swift_errorRelease(a4);
  }

  else
  {
    uint64_t v7 = a1;
    char v8 = a2 & 1;
    char v9 = a3 & 1;
    swift_bridgeObjectRetain(a1);
    Promise.resolve(_:)(&v7);
    return swift_bridgeObjectRelease(a1);
  }

uint64_t sub_100074450(uint64_t a1, char a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain(a3);
    Promise.reject(_:)(a3);
    return swift_errorRelease(a3);
  }

  else
  {
    uint64_t v6 = a1;
    char v7 = 1;
    char v8 = a2 & 1;
    swift_bridgeObjectRetain(a1);
    Promise.resolve(_:)(&v6);
    return swift_bridgeObjectRelease(a1);
  }

uint64_t sub_1000744D8(uint64_t *a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*((_BYTE *)a1 + 9) == 1)
  {
    uint64_t v7 = sub_100029E18(&qword_10013DAD0);
    uint64_t v8 = Promise.__allocating_init()(v7);
    char v9 = sub_10007410C(a3 & 1, v8, a2, a4);
    uint64_t v11 = v10;
    unint64_t v12 = (void *)(a2 + 32);
    uint64_t v14 = *(void *)(a2 + 56);
    uint64_t v13 = *(void *)(a2 + 64);
    sub_100029EE0(v12, v14);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, void (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v13 + 8))( 1LL,  1LL,  0xD000000000000014LL,  0x80000001000FB660LL,  v9,  v11,  v14,  v13);
    swift_release(v11);
  }

  else
  {
    char v15 = *((_BYTE *)a1 + 8);
    uint64_t v16 = *a1;
    sub_100029E18(&qword_10013DAD0);
    uint64_t v18 = v16;
    char v19 = v15;
    char v20 = 0;
    swift_bridgeObjectRetain(v16);
    return Promise.__allocating_init(value:)(&v18);
  }

  return v8;
}

uint64_t sub_1000745EC(uint64_t *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  int v8 = *((unsigned __int8 *)a1 + 8);
  int v9 = *((unsigned __int8 *)a1 + 9);
  BOOL v10 = v8 != 1 || v7 == 0;
  if (v10
    || (swift_retain(a2),
        uint64_t v11 = swift_bridgeObjectRetain(v7),
        unint64_t v12 = sub_1000754A8(v11, a2),
        swift_bridgeObjectRelease(v7),
        swift_release(a2),
        !v12))
  {
    if (!v9)
    {
      sub_100029E18(&qword_10013DAD0);
      uint64_t v22 = v7;
      char v23 = v8;
      char v24 = 0;
      swift_bridgeObjectRetain(v7);
      return Promise.__allocating_init(value:)(&v22);
    }
  }

  else
  {
  }

  uint64_t v13 = sub_100029E18(&qword_10013DAD0);
  uint64_t v14 = Promise.__allocating_init()(v13);
  char v15 = sub_10007410C(a3 & 1, v14, (uint64_t)a2, a4);
  uint64_t v17 = v16;
  uint64_t v18 = a2 + 4;
  uint64_t v20 = a2[7];
  uint64_t v19 = a2[8];
  sub_100029EE0(v18, v20);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, void (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v19 + 8))( 1LL,  1LL,  0xD000000000000014LL,  0x80000001000FB660LL,  v15,  v17,  v20,  v19);
  swift_release(v17);
  return v14;
}

uint64_t sub_100074750(uint64_t *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  int v8 = *((unsigned __int8 *)a1 + 8);
  int v9 = *((unsigned __int8 *)a1 + 9);
  if (v8 == 1)
  {
    if (!v7) {
      goto LABEL_6;
    }
    swift_retain(a2);
    uint64_t v10 = swift_bridgeObjectRetain(v7);
    uint64_t v11 = sub_1000754A8(v10, a2);
    swift_bridgeObjectRelease(v7);
    swift_release(a2);
    if (!v11) {
      goto LABEL_6;
    }
  }

  if (!v9)
  {
    sub_100029E18(&qword_10013DAD0);
    uint64_t v21 = v7;
    char v22 = v8;
    char v23 = 0;
    swift_bridgeObjectRetain(v7);
    return Promise.__allocating_init(value:)(&v21);
  }

LABEL_6:
  uint64_t v12 = sub_100029E18(&qword_10013DAD0);
  uint64_t v13 = Promise.__allocating_init()(v12);
  uint64_t v14 = sub_10007410C(a3 & 1, v13, (uint64_t)a2, a4);
  uint64_t v16 = v15;
  uint64_t v17 = a2 + 4;
  uint64_t v19 = a2[7];
  uint64_t v18 = a2[8];
  sub_100029EE0(v17, v19);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, void (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v18 + 8))( 1LL,  1LL,  0xD000000000000014LL,  0x80000001000FB660LL,  v14,  v16,  v19,  v18);
  swift_release(v16);
  return v13;
}

      if (v26 == ++v3)
      {
        swift_bridgeObjectRelease(v1);
        goto LABEL_25;
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, void))(v4 + 56))( *(void *)(v0 + 128),  1LL,  1LL,  *(void *)(v0 + 136));
LABEL_17:
    sub_10002E92C(*(void *)(v0 + 128), (uint64_t *)&unk_10013F9B0);
LABEL_18:

    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_1000748B0(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 8);
  char v5 = *((_BYTE *)a1 + 9);
  uint64_t v6 = sub_100029E18(&qword_10013DAD8);
  uint64_t v7 = Promise.__allocating_init()(v6);
  int v8 = a2 + 4;
  uint64_t v10 = a2[7];
  uint64_t v9 = a2[8];
  sub_100029EE0(v8, v10);
  uint64_t v11 = swift_allocObject(&unk_100121C38, 34LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v11 + 24) = v3;
  *(_BYTE *)(v11 + 32) = v4;
  *(_BYTE *)(v11 + 33) = v5;
  uint64_t v12 = *(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v9 + 24);
  swift_bridgeObjectRetain(v3);
  swift_retain(v7);
  v12(sub_100075860, v11, v10, v9);
  swift_release(v11);
  return v7;
}

uint64_t sub_100074978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    swift_errorRetain(a3);
    Promise.reject(_:)(a3);
    return swift_errorRelease(a3);
  }

  else
  {
    v9[0] = a5;
    v9[1] = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a5);
    Promise.resolve(_:)(v9);
    swift_bridgeObjectRelease(a1);
    return swift_bridgeObjectRelease(a5);
  }

void sub_100074A04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100029E18(&qword_10013C6D0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v42 - v15;
  a3 += 16LL;
  swift_beginAccess(a3, v51, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v18 = Strong;
    uint64_t v44 = a4;
    if (qword_10013BBB8 != -1) {
      swift_once(&qword_10013BBB8, sub_1000730EC);
    }
    sub_1000388F0((uint64_t)&qword_100148548, (uint64_t)&v47);
    uint64_t v19 = v49;
    uint64_t v43 = v50;
    uint64_t v42 = sub_100029EE0(&v47, v49);
    uint64_t v20 = sub_100029E18(&qword_10013EA00);
    uint64_t v21 = type metadata accessor for LogMessage(0LL);
    uint64_t v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v21 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1000EDA10;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(18LL, 1LL);
    v23._object = (void *)0x80000001000FC770LL;
    v23._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    if (a1)
    {
      *((void *)&v46 + 1) = sub_100029E18(&qword_10013DAF8);
      *(void *)&__int128 v45 = a1;
    }

    else
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
    }

    swift_bridgeObjectRetain(a1);
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)(&v45);
    sub_10002E92C((uint64_t)&v45, &qword_10013C6F0);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v16);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(10LL, 1LL);
    v25._uint64_t countAndFlagsBits = 0x736449726566666FLL;
    v25._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    if (a2)
    {
      *((void *)&v46 + 1) = sub_100029E18(&qword_10013DAF0);
      *(void *)&__int128 v45 = a2;
    }

    else
    {
      __int128 v45 = 0u;
      __int128 v46 = 0u;
    }

    swift_bridgeObjectRetain(a2);
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)(&v45);
    sub_10002E92C((uint64_t)&v45, &qword_10013C6F0);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v14);
    Logger.debug(_:)(v22, v19, v43);
    swift_bridgeObjectRelease(v22);
    sub_100029F4C(&v47);
    if (a1
      && (swift_bridgeObjectRetain(a1),
          swift_retain(v18),
          Swift::String v27 = sub_1000754A8(a1, (void *)v18),
          swift_bridgeObjectRelease(a1),
          swift_release(v18),
          v27))
    {

      uint64_t v28 = *(void *)(v18 + 96);
      uint64_t v29 = *(void *)(v18 + 104);
      sub_100029EE0((void *)(v18 + 72), v28);
      dispatch thunk of AccountProvider.activeAccount.getter(v28, v29);
      uint64_t v30 = type metadata accessor for Account(0LL);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1LL, v30) == 1)
      {
        sub_10002E92C((uint64_t)v10, &qword_10013C6D0);
        uint64_t v32 = 0LL;
      }

      else
      {
        uint64_t KeyPath = swift_getKeyPath(&unk_1000EF300);
        Account.subscript.getter(&v47);
        swift_release(KeyPath);
        uint64_t v32 = v47;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v30);
      }

      __int128 v36 = *(void **)(v18 + 128);
      *(void *)(v18 + 128) = v32;
      char v37 = *(_BYTE *)(v18 + 136);
      *(_BYTE *)(v18 + 136) = 2;
      sub_100048450(v36, v37);
      id v39 = v32;
      sub_100048470(v36, v37);
      sub_100073354();
    }

    else
    {
      if (a2
        && (uint64_t v33 = *(void *)(v18 + 24)) != 0
        && (uint64_t v34 = *(void *)(v18 + 16),
            swift_bridgeObjectRetain(*(void *)(v18 + 24)),
            LOBYTE(v34) = sub_10007530C(a2, v34, v33),
            swift_bridgeObjectRelease(v33),
            (v34 & 1) != 0))
      {
        uint64_t v35 = 2LL;
      }

      else
      {
        uint64_t v35 = 1LL;
      }

      __int128 v36 = *(void **)(v18 + 128);
      *(void *)(v18 + 128) = v35;
      char v37 = *(_BYTE *)(v18 + 136);
      *(_BYTE *)(v18 + 136) = 0;
      sub_100048450(v36, v37);
      sub_100048470(v36, v37);
      sub_100073354();
    }

    sub_100048470(v36, v37);
    uint64_t v40 = *(void **)(v18 + 128);
    char v41 = *(_BYTE *)(v18 + 136);
    uint64_t v47 = v40;
    char v48 = v41;
    sub_100048450(v40, v41);
    Promise.resolve(_:)(&v47);
    swift_release(v18);
    sub_100048470(v40, v41);
  }

uint64_t sub_100074EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v29, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v8 = Strong;
    uint64_t v9 = *(void **)(Strong + 128);
    *(void *)(Strong + 128) = 1LL;
    char v10 = *(_BYTE *)(Strong + 136);
    *(_BYTE *)(Strong + 136) = 3;
    sub_100048450(v9, v10);
    sub_100048470(v9, v10);
    sub_100073354();
    sub_100048470(v9, v10);
    swift_release(v8);
  }

  if (qword_10013BBB8 != -1) {
    swift_once(&qword_10013BBB8, sub_1000730EC);
  }
  sub_1000388F0((uint64_t)&qword_100148548, (uint64_t)v26);
  uint64_t v11 = v27;
  uint64_t v12 = v28;
  sub_100029EE0(v26, v27);
  uint64_t v13 = sub_100029E18(&qword_10013EA00);
  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41LL, 1LL);
  v16._object = (void *)0x80000001000FC720LL;
  v16._uint64_t countAndFlagsBits = 0xD000000000000029LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  swift_getErrorValue(a1, v24, &v22);
  uint64_t v17 = v22;
  uint64_t v18 = v23;
  v25[3] = v23;
  uint64_t v19 = sub_10002C328(v25);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v19, v17, v18);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v25);
  sub_10002E92C((uint64_t)v25, &qword_10013C6F0);
  v20._uint64_t countAndFlagsBits = 0LL;
  v20._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.error(_:)(v15, v11, v12);
  swift_bridgeObjectRelease(v15);
  sub_100029F4C(v26);
  return Promise.reject(_:)(a1);
}

void *sub_10007513C()
{
  uint64_t v1 = *(void **)(v0 + 128);
  sub_100048450(v1, *(_BYTE *)(v0 + 136));
  return v1;
}

uint64_t sub_100075174(uint64_t a1, char a2, uint64_t a3)
{
  return sub_100074450(a1, a2, a3);
}

uint64_t sub_10007517C(uint64_t *a1)
{
  return sub_1000748B0(a1, v1);
}

uint64_t sub_100075184()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000751A8()
{
  return sub_10007581C((void (*)(void))&_swift_release, 40LL);
}

void sub_1000751B8(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_1000751C4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000751E8(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_100075210()
{
  return sub_10007581C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100075220(uint64_t a1)
{
  return sub_100074EE0(a1, *(void *)(v1 + 16));
}

uint64_t sub_10007522C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100075250(uint64_t *a1)
{
  return sub_100074750(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100075260(uint64_t *a1)
{
  return sub_1000745EC(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100075270(uint64_t *a1)
{
  return sub_1000744D8(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100075280()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000752AC(uint64_t a1, char a2, char a3, uint64_t a4)
{
}

unint64_t sub_1000752BC()
{
  unint64_t result = qword_10013C120;
  if (!qword_10013C120)
  {
    type metadata accessor for Code(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000ED3AC, v1);
    atomic_store(result, (unint64_t *)&qword_10013C120);
  }

  return result;
}

uint64_t sub_100075304(uint64_t a1, char a2, char a3, uint64_t a4)
{
  return sub_1000743C8(a1, a2, a3, a4);
}

uint64_t sub_10007530C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    uint64_t v23 = v4;
    uint64_t v24 = v7;
    unint64_t v25 = v7 & 0xC000000000000001LL;
    uint64_t v9 = 4LL;
    while (1)
    {
      uint64_t v10 = v9 - 4;
      if (!v25) {
        break;
      }
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7);
      uint64_t v4 = v9 - 3;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_19;
      }
LABEL_9:
      uint64_t v12 = v8;
      uint64_t v13 = v11;
      uint64_t v14 = a3;
      id v15 = objc_msgSend(v11, "stringValue", v23);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v18 = v17;

      a3 = v14;
      BOOL v19 = v16 == a2 && v18 == v14;
      if (v19)
      {
        swift_bridgeObjectRelease(v24);

        char v20 = 1;
        uint64_t v7 = v14;
        goto LABEL_25;
      }

      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a2, v14, 0LL);

      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
      {
        uint64_t v7 = v24;
        goto LABEL_25;
      }

      ++v9;
      uint64_t v8 = v12;
      BOOL v19 = v4 == v12;
      uint64_t v7 = v24;
      if (v19) {
        goto LABEL_25;
      }
    }

    id v11 = *(id *)(v7 + 8 * v9);
    uint64_t v4 = v9 - 3;
    if (!__OFADD__(v10, 1LL)) {
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    if (v7 < 0) {
      uint64_t v21 = v7;
    }
    else {
      uint64_t v21 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v21);
  }

  char v20 = 0;
LABEL_25:
  swift_bridgeObjectRelease(v7);
  return v20 & 1;
}

void *sub_1000754A8(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100029E18((uint64_t *)&unk_10013F9B0);
  __chkstk_darwin(v6);
  uint64_t i = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v38 = (char *)&v35 - v14;
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v15)
  {
    uint64_t v36 = v10;
    uint64_t v37 = i;
    uint64_t v35 = v3;
    unint64_t v43 = a1 & 0xC000000000000001LL;
    uint64_t v39 = a2[2];
    uint64_t v40 = v15;
    uint64_t v41 = a2[3];
    uint64_t v42 = a1;
    for (uint64_t i = 4LL; ; ++i)
    {
      uint64_t v16 = v43
          ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
          : *(id *)(a1 + 8 * i);
      a2 = v16;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      uint64_t v17 = v41;
      if (v41)
      {
        id v18 = [v16 familyID];
        id v19 = [v18 stringValue];

        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v22 = v21;

        if (v20 == v39 && v17 == v22)
        {
          *(void *)&double v24 = swift_bridgeObjectRelease(v22).n128_u64[0];
        }

        else
        {
          uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v39, v17, 0LL);
          *(void *)&double v24 = swift_bridgeObjectRelease(v22).n128_u64[0];
          if ((v3 & 1) == 0) {
            goto LABEL_4;
          }
        }

        id v25 = objc_msgSend(a2, "expiryDate", v24, v35);
        if (!v25)
        {
          uint64_t v27 = v37;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, 1LL, 1LL, v9);
LABEL_23:
          sub_10002E92C(v27, (uint64_t *)&unk_10013F9B0);
LABEL_24:
          swift_bridgeObjectRelease(v42);
          return a2;
        }

        Swift::String v26 = v25;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v28 = v36;
        uint64_t v27 = v37;
        uint64_t v29 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 32);
        v29(v37, v13, v9);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v27, 0LL, 1LL, v9);
        uint64_t v30 = v38;
        uint64_t v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v38, v27, v9);
        Date.init()(v31);
        uint64_t v3 = static Date.> infix(_:_:)(v30, v13);
        uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
        v32(v13, v9);
        v32(v30, v9);
        if ((v3 & 1) != 0) {
          goto LABEL_24;
        }
      }

LABEL_4:
      a1 = v42;
      if (v10 == v40)
      {
        swift_bridgeObjectRelease(v42);
        return 0LL;
      }
    }

    __break(1u);
LABEL_26:
    if (a1 < 0) {
      uint64_t v33 = a1;
    }
    else {
      uint64_t v33 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v33);
  }

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

const char *sub_1000757F8()
{
  return "ams_DSID";
}

uint64_t sub_10007580C()
{
  return sub_10007581C((void (*)(void))&_swift_bridgeObjectRelease, 34LL);
}

uint64_t sub_10007581C(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

uint64_t sub_100075860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100074978(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t destroy for ASDArcadeSubscriptionManager.EntitlementsResult(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t _s19appstorecomponentsd28ASDArcadeSubscriptionManagerC18EntitlementsResultVwCP_0( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t initializeWithTake for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t *assignWithTake for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASDArcadeSubscriptionManager.EntitlementsResult( uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 10)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASDArcadeSubscriptionManager.EntitlementsResult( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 10) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 10) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ASDArcadeSubscriptionManager.EntitlementsResult()
{
  return &type metadata for ASDArcadeSubscriptionManager.EntitlementsResult;
}

void *sub_100075A34(uint64_t a1)
{
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    unint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t v4 = 0LL;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      id v7 = [v5 numberValue];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
      specialized ContiguousArray._endMutation()(v9);
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }

  return result;
}

void sub_100075B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    id v5 = (void *)Strong;
    id v6 = objc_retain(*(id *)(Strong
                           + OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery));

    swift_beginAccess(v3, &v8, 0LL, 0LL);
    id v7 = (void *)swift_unknownObjectWeakLoadStrong(v3);
    [v6 setObserver:v7];
  }

uint64_t sub_100075C18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  id v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_10002A030(0LL, (unint64_t *)&unk_10013DBC0, &OBJC_CLASS___ASDApp_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

unint64_t sub_100075CF8()
{
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery));
  id v2 = [v1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease(v5);
  v7._uint64_t countAndFlagsBits = 41LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return 0xD00000000000001BLL;
}

id sub_100075EFC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ASDDeviceAppFetcher.QueryObservation()
{
  return objc_opt_self(&OBJC_CLASS____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation);
}

uint64_t sub_100075F9C(uint64_t a1)
{
  uint64_t result = sub_100027978( (unint64_t *)&unk_10013DBA0,  (uint64_t (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation,  (uint64_t)&unk_1000EF384);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100075FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v25 - 8);
  uint64_t v12 = __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static os_signpost_type_t.end.getter(v12);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v16 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "ASDAppQuery.execute", 19LL, 2LL, a3);

  if (qword_10013BBF8 != -1) {
    swift_once(&qword_10013BBF8, sub_100097DD4);
  }
  uint64_t v17 = (void *)swift_allocObject(&unk_100121D50, 40LL, 7LL);
  void v17[2] = a2;
  v17[3] = a4;
  void v17[4] = a1;
  aBlock[4] = sub_1000766C8;
  uint64_t v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = &unk_100121D68;
  id v18 = _Block_copy(aBlock);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  uint64_t v19 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  unint64_t v22 = sub_1000766D4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v25);
  return swift_release(v29);
}

uint64_t sub_100076250(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_errorRetain(a1);
    Promise.reject(_:)(a1);
    return swift_errorRelease(a1);
  }

  else
  {
    if (a3) {
      uint64_t v5 = a3;
    }
    else {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    return Promise.resolve(_:)(&v5);
  }

uint64_t sub_1000762BC(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v28[-v9];
  if (a2)
  {
    if (a2 != 1)
    {
      id v14 = [(id)objc_opt_self(ASDAppQuery) queryForStoreApps];
      goto LABEL_7;
    }

    swift_bridgeObjectRetain(a1);
    v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    id v12 = [(id)objc_opt_self(ASDAppQuery) queryForBundleIDs:v11.super.isa];
  }

  else
  {
    uint64_t v13 = sub_100075A34(a1);
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
    v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    id v12 = [(id)objc_opt_self(ASDAppQuery) queryForStoreItemIDs:v11.super.isa];
  }

  id v14 = v12;

LABEL_7:
  uint64_t v15 = sub_100029E18(&qword_10013D550);
  uint64_t v16 = Promise.__allocating_init()(v15);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v17 = static OS_os_log.default.getter();
  uint64_t v18 = OSSignpostID.init(log:)(v17);
  uint64_t v19 = static os_signpost_type_t.begin.getter(v18);
  uint64_t v20 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v19, &_mh_execute_header, v20, "ASDAppQuery.execute", 19LL, 2LL, v10);

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v10, v4);
  uint64_t v21 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = (v21 + 16) & ~v21;
  unint64_t v23 = (v6 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(&unk_100121D00, v23 + 8, v21 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v24 + v22, v8, v4);
  *(void *)(v24 + v23) = v16;
  aBlock[4] = sub_10007661C;
  uint64_t v30 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100075C18;
  aBlock[3] = &unk_100121D18;
  uint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = v30;
  swift_retain(v16);
  swift_release(v26);
  [v14 executeQueryWithResultHandler:v25];
  _Block_release(v25);

  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  return v16;
}

uint64_t sub_1000765A8()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10007661C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for OSSignpostID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_100075FD8(a1, a2, v2 + v6, *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10007667C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007668C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100076694()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000766C8()
{
  return sub_100076250(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

unint64_t sub_1000766D4()
{
  unint64_t result = qword_10013D270;
  if (!qword_10013D270)
  {
    uint64_t v1 = sub_100029F6C((uint64_t *)&unk_10013DBD0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10013D270);
  }

  return result;
}

id sub_100076720(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  v27[3] = a6;
  v27[4] = a7;
  uint64_t v15 = sub_10002C328(v27);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(v15, a2, a6);
  *(void *)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery] = a1;
  sub_1000388F0( (uint64_t)v27,  (uint64_t)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_taskScheduler]);
  uint64_t v16 = &a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_observer];
  *(void *)uint64_t v16 = a3;
  *((void *)v16 + 1) = a4;
  v26.receiver = a5;
  v26.super_class = ObjectType;
  id v17 = a1;
  swift_retain(a4);
  id v18 = objc_msgSendSuper2(&v26, "init");
  uint64_t v19 = swift_allocObject(&unk_100121DA0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v19 + 16, v18);
  aBlock[4] = sub_1000602BC;
  uint64_t v25 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100075C18;
  aBlock[3] = &unk_100121DB8;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = v25;
  id v22 = v18;
  swift_release(v21);
  [v17 executeQueryWithResultHandler:v20];

  _Block_release(v20);
  sub_100029F4C(v27);
  return v22;
}

id sub_1000768A4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a7;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)&v28 - v16;
  id v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v28 - v16, v19, v20);
  if (a2)
  {
    if (a2 != 1)
    {
      id v24 = [(id)objc_opt_self(ASDAppQuery) queryForStoreApps];
      goto LABEL_7;
    }

    swift_bridgeObjectRetain(a1);
    v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    id v22 = [(id)objc_opt_self(ASDAppQuery) queryForBundleIDs:v21.super.isa];
  }

  else
  {
    unint64_t v23 = sub_100075A34(a1);
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
    v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    id v22 = [(id)objc_opt_self(ASDAppQuery) queryForStoreItemIDs:v21.super.isa];
  }

  id v24 = v22;

LABEL_7:
  uint64_t v25 = (char *)objc_allocWithZone((Class)type metadata accessor for ASDDeviceAppFetcher.QueryObservation());
  v18(v15, (uint64_t)v17, a6);
  swift_retain(a5);
  id v26 = sub_100076720(v24, (uint64_t)v15, a4, a5, v25, a6, v29);

  swift_release(a5);
  sub_100027978( (unint64_t *)&unk_10013DBE0,  (uint64_t (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation,  (uint64_t)&unk_1000EF3A0);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, a6);
  return v26;
}

uint64_t sub_100076AD8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100076AFC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100076B28()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

ValueMetadata *type metadata accessor for ASDDeviceAppFetcher()
{
  return &type metadata for ASDDeviceAppFetcher;
}

id sub_100076B70(void *a1, void *a2, char *a3, int a4)
{
  int v105 = a4;
  uint64_t v116 = a3;
  id v114 = a2;
  uint64_t v5 = sub_100029E18(&qword_10013EE90);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v110 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v109 = (char *)&v96 - v8;
  uint64_t v9 = type metadata accessor for State(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v107 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v106 = (char *)&v96 - v14;
  __chkstk_darwin(v13);
  uint64_t v115 = (char *)&v96 - v15;
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v16);
  id v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OSLogger(0LL);
  uint64_t v20 = *(char **)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC40 != -1) {
    swift_once(&qword_10013BC40, sub_1000D1538);
  }
  uint64_t v23 = sub_10002A768(v19, (uint64_t)qword_100148600);
  id v24 = (void (*)(char *, uint64_t, uint64_t))*((void *)v20 + 2);
  uint64_t v103 = v23;
  id v104 = v24;
  ((void (*)(char *))v24)(v22);
  uint64_t v25 = sub_100029E18(&qword_10013EA00);
  uint64_t v113 = v20;
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v28 = *(void *)(v27 + 72);
  uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v30 = (v29 + 32) & ~v29;
  uint64_t v102 = v26;
  uint64_t v100 = v30 + v28;
  uint64_t v99 = v29 | 7;
  uint64_t v31 = swift_allocObject(v26, v30 + v28, v29 | 7);
  __int128 v98 = xmmword_1000EDBE0;
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v101 = v30;
  uint64_t v112 = v31 + v30;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(46LL, 3LL);
  v32._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v32._object = (void *)0x80000001000FC920LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v32);
  id v111 = a1;
  id v33 = [a1 id];
  uint64_t v97 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  uint64_t v118 = v97;
  v117[0] = v33;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v117);
  sub_10002E92C((uint64_t)v117, &qword_10013C6F0);
  v34._uint64_t countAndFlagsBits = 0x74617473206E6920LL;
  v34._object = (void *)0xEA00000000002065LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v34);
  uint64_t v118 = v9;
  uint64_t v35 = (char *)sub_10002C328(v117);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v37 = v116;
  v36(v35, (uint64_t)v116, v9);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v117);
  sub_10002E92C((uint64_t)v117, &qword_10013C6F0);
  v38._uint64_t countAndFlagsBits = 0x20646E6120LL;
  v38._object = (void *)0xE500000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v38);
  uint64_t v118 = sub_10002A030(0LL, &qword_10013CC10, off_10011E560);
  v117[0] = v114;
  id v114 = v114;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v117);
  sub_10002E92C((uint64_t)v117, &qword_10013C6F0);
  v39._uint64_t countAndFlagsBits = 0x747865746E6F6320LL;
  v39._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  LogMessage.init(stringInterpolation:)(v18);
  Logger.info(_:)(v31, v19, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v31);
  uint64_t v40 = (void (*)(char *, uint64_t))*((void *)v113 + 1);
  uint64_t v113 = v22;
  uint64_t v41 = v22;
  uint64_t v42 = v19;
  v40(v41, v19);
  unint64_t v43 = v115;
  v36(v115, (uint64_t)v37, v9);
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v43, v9);
  uint64_t v45 = v10;
  if (v44 == enum case for State.purchased(_:))
  {
    __int128 v46 = v40;
    uint64_t v47 = v107;
    v36(v107, (uint64_t)v43, v9);
    (*(void (**)(char *, uint64_t))(v10 + 96))(v47, v9);
    char v48 = v43;
    uint64_t v49 = type metadata accessor for AppPurchaseType(0LL);
    uint64_t v50 = *(void *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v47, v49) != enum case for AppPurchaseType.preorder(_:))
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
      unint64_t v43 = v48;
      uint64_t v40 = v46;
LABEL_6:
      if ((v105 & 1) == 0)
      {
        Class v87 = v113;
        uint64_t v88 = v42;
        v104(v113, v103, v42);
        uint64_t v89 = swift_allocObject(v102, v100, v99);
        uint64_t v115 = (char *)v40;
        uint64_t v90 = v89;
        *(_OWORD *)(v89 + swift_unknownObjectWeakDestroy(v0 + 16) = v98;
        uint64_t v112 = v45;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(71LL, 1LL);
        v91._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
        v91._object = (void *)0x80000001000FC940LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v91);
        id v92 = v111;
        id v93 = [v111 id];
        uint64_t v118 = v97;
        v117[0] = v93;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v117);
        sub_10002E92C((uint64_t)v117, &qword_10013C6F0);
        v94._uint64_t countAndFlagsBits = 0xD000000000000029LL;
        v94._object = (void *)0x80000001000FC960LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v94);
        LogMessage.init(stringInterpolation:)(v18);
        Logger.error(_:)(v90, v88, &protocol witness table for OSLogger);

        swift_bridgeObjectRelease(v90);
        uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
        v95((uint64_t)v116, v9);
        ((void (*)(char *, uint64_t))v115)(v87, v88);
        v95((uint64_t)v43, v9);
        return 0LL;
      }

      id v51 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v108)) init];
      goto LABEL_10;
    }

    goto LABEL_13;
  }

  if (v44 != enum case for State.updatable(_:))
  {
    if (v44 != enum case for State.downloadable(_:))
    {
      if (v44 == enum case for State.buyable(_:) || v44 == enum case for State.unknown(_:))
      {
        uint64_t v53 = *(void (**)(char *, uint64_t))(v10 + 8);
        v53(v43, v9);
        id v51 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v108)) init];
        goto LABEL_14;
      }

      goto LABEL_6;
    }

    uint64_t v54 = v106;
    v36(v106, (uint64_t)v43, v9);
    (*(void (**)(char *, uint64_t))(v10 + 96))(v54, v9);
    swift_bridgeObjectRelease(*((void *)v54 + 1));
    char v48 = v43;
LABEL_13:
    uint64_t v53 = *(void (**)(char *, uint64_t))(v45 + 8);
    v53(v48, v9);
    id v51 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v108)) init];
    [v51 setIsRedownload:1];
    goto LABEL_14;
  }

  uint64_t v52 = v106;
  v36(v106, (uint64_t)v43, v9);
  (*(void (**)(char *, uint64_t))(v10 + 96))(v52, v9);
  swift_bridgeObjectRelease(*((void *)v52 + 1));
  id v51 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v108)) init];
  [v51 setIsUpdate:1];
LABEL_10:
  uint64_t v53 = *(void (**)(char *, uint64_t))(v45 + 8);
  v53(v43, v9);
LABEL_14:
  id v55 = v111;
  sub_10004E8C0();
  uint64_t v57 = v56;
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v57);
  [v51 setBuyParameters:v58];

  uint64_t v59 = (objc_class *)[v55 additionalHeaders];
  Class isa = v59;
  uint64_t v61 = (uint64_t)v109;
  if (v59)
  {
    uint64_t v62 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v59,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

    uint64_t v63 = sub_1000776F0(v62);
    swift_bridgeObjectRelease(v62);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v63);
  }

  uint64_t v64 = (uint64_t)v110;
  [v51 setAdditionalHeaders:isa];

  id v65 = [v55 preflightPackageURL];
  if (v65)
  {
    uint64_t v66 = v65;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v67 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL))(v64, 0LL, 1LL, v67);
  }

  else
  {
    uint64_t v67 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL))(v64, 1LL, 1LL, v67);
  }

  sub_100077AAC(v64, v61);
  type metadata accessor for URL(0LL);
  uint64_t v68 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v61, 1LL, v67) == 1)
  {
    sub_10002E92C(v61, &qword_10013EE90);
    NSString v69 = 0LL;
  }

  else
  {
    URL.absoluteString.getter();
    uint64_t v71 = v70;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v61, v67);
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v71);
  }

  [v51 setPreflightURLString:v69];

  NSString v72 = [v55 bundleID];
  if (!v72)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v74 = v73;
    NSString v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v74);
  }

  [v51 setBundleID:v72];

  id v75 = [v55 id];
  id v76 = [v75 numberValue];

  [v51 setItemID:v76];
  NSString v77 = [v55 itemName];
  if (!v77)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v79 = v78;
    NSString v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v79);
  }

  [v51 setItemName:v77];

  NSString v80 = [v55 vendorName];
  if (!v80)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v82 = v81;
    NSString v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v82);
  }

  [v51 setVendorName:v80];

  objc_msgSend(v51, "setCreatesJobs:", ((unint64_t)objc_msgSend(v55, "flags") >> 1) & 1);
  NSString v83 = String._bridgeToObjectiveC()();
  [v51 setClientID:v83];

  unsigned __int16 v84 = (unsigned __int16)[v55 flags];
  id v85 = v114;

  v53(v116, v9);
  return v51;
}

uint64_t sub_1000776F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100029E18(&qword_10013CD18);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v31) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v31) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v31) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v31) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_100077AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013EE90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077AF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)aBlock - v9;
  uint64_t v11 = sub_100029E18(&qword_10013CBE0);
  uint64_t v12 = Promise.__allocating_init()(v11);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v13 = static OS_os_log.default.getter();
  uint64_t v14 = OSSignpostID.init(log:)(v13);
  uint64_t v15 = static os_signpost_type_t.begin.getter(v14);
  int64_t v16 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "ASDPurchaseHistory.update", 25LL, 2LL, v10);

  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  uint64_t v17 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v6 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_100121FC8, v19 + 8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v20 + v18, v8, v4);
  *(void *)(v20 + v19) = v12;
  aBlock[4] = sub_100078D90;
  uint64_t v25 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100078518;
  aBlock[3] = &unk_100121FE0;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = v25;
  swift_retain(v12);
  swift_release(v22);
  [v2 updateWithContext:a1 withCompletionHandler:v21];
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v12;
}

uint64_t sub_100077CF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v23 - v7;
  uint64_t v9 = sub_100029E18(&qword_10013D660);
  uint64_t v10 = Promise.__allocating_init()(v9);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v11 = static OS_os_log.default.getter();
  uint64_t v12 = OSSignpostID.init(log:)(v11);
  uint64_t v13 = static os_signpost_type_t.begin.getter(v12);
  uint64_t v14 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v13, &_mh_execute_header, v14, "ASDPurchaseHistory.execute", 26LL, 2LL, v8);

  id v15 = sub_100078860(a1);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v16 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v4 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_100121F28, v18 + 8, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v19 + v17, v6, v2);
  *(void *)(v19 + v18) = v10;
  aBlock[4] = sub_100078C24;
  uint64_t v25 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10007856C;
  aBlock[3] = &unk_100121F40;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = v25;
  swift_retain(v10);
  swift_release(v21);
  [v23[1] executeQuery:v15 withResultHandler:v20];
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v10;
}

uint64_t sub_100077F0C(uint64_t a1, uint64_t a2)
{
  v26[0] = a2;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - v8;
  uint64_t v10 = sub_100029E18(&qword_10013D660);
  uint64_t v11 = Promise.__allocating_init()(v10);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v12 = static OS_os_log.default.getter();
  uint64_t v13 = OSSignpostID.init(log:)(v12);
  uint64_t v14 = static os_signpost_type_t.begin.getter(v13);
  id v15 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v14, &_mh_execute_header, v15, "ASDPurchaseHistory.execute", 26LL, 2LL, v9);

  id v16 = sub_100078860(a1);
  uint64_t v17 = sub_100075A34(v26[0]);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setStoreIDs:", isa, swift_bridgeObjectRelease(v17).n128_f64[0]);

  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  uint64_t v19 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  unint64_t v21 = (v5 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_100121E88, v21 + 8, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v22 + v20, v7, v3);
  *(void *)(v22 + v21) = v11;
  aBlock[4] = sub_100078ACC;
  uint64_t v28 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10007856C;
  aBlock[3] = &unk_100121EA0;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = v28;
  swift_retain(v11);
  swift_release(v24);
  [(id)v26[1] executeQuery:v16 withResultHandler:v23];
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

id sub_100078180@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, "ams_DSID");
  *a2 = result;
  return result;
}

id sub_1000781B8(void *a1, id *a2)
{
  return objc_msgSend(*a2, "ams_setDSID:", *a1);
}

uint64_t sub_1000781CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBF8 != -1) {
    swift_once(&qword_10013BBF8, sub_100097DD4);
  }
  v27[1] = qword_100148598;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v10);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_100122018, v17 + 8, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v15, v13, v10);
  uint64_t v19 = v28;
  *(void *)(v18 + vswift_unknownObjectWeakDestroy(v0 + 16) = v28;
  uint64_t v20 = v29;
  *(void *)(v18 + v17) = v29;
  aBlock[4] = sub_100078E6C;
  uint64_t v35 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = &unk_100122030;
  unint64_t v21 = _Block_copy(aBlock);
  swift_errorRetain(v19);
  uint64_t v22 = swift_retain(v20);
  static DispatchQoS.unspecified.getter(v22);
  id v33 = _swiftEmptyArrayStorage;
  unint64_t v23 = sub_100078B04();
  uint64_t v24 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  unint64_t v25 = sub_1000766D4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v24, v25, v4, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
  return swift_release(v35);
}

uint64_t sub_100078454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_signpost_type_t.end.getter(a1);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v5 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v4, &_mh_execute_header, v5, "ASDPurchaseHistory.update", 25LL, 2LL, a1);

  if (!a2) {
    return Promise.resolve(_:)(v6);
  }
  swift_errorRetain(a2);
  Promise.reject(_:)(a2);
  return swift_errorRelease(a2);
}

void sub_100078518(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

double sub_10007856C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_10002A030(0LL, &qword_10013DBF0, &OBJC_CLASS___ASDPurchaseHistoryApp_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  *(void *)&double result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

uint64_t sub_1000785F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v27 = a5;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v30 - 8);
  uint64_t v15 = __chkstk_darwin(v30);
  unint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = static os_signpost_type_t.end.getter(v15);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v19 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)(v18, &_mh_execute_header, v19, "ASDPurchaseHistory.execute", 26LL, 2LL, a3);

  if (qword_10013BBF8 != -1) {
    swift_once(&qword_10013BBF8, sub_100097DD4);
  }
  uint64_t v20 = (void *)swift_allocObject(v27, 40LL, 7LL);
  void v20[2] = a2;
  void v20[3] = a4;
  void v20[4] = a1;
  aBlock[4] = v28;
  __int128 v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = v29;
  unint64_t v21 = _Block_copy(aBlock);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  uint64_t v22 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v32 = _swiftEmptyArrayStorage;
  unint64_t v23 = sub_100078B04();
  uint64_t v24 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  unint64_t v25 = sub_1000766D4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v11, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v13, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v30);
  return swift_release(v34);
}

id sub_100078860(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013C6D0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [objc_allocWithZone(ASDPurchaseHistoryQuery) init];
  sub_100078B4C(a1, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Account(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) == 1)
  {
    sub_100078B94((uint64_t)v4);
LABEL_5:
    [v5 setAccountID:0];
    goto LABEL_6;
  }

  uint64_t KeyPath = swift_getKeyPath(&unk_1000EF400);
  Account.subscript.getter(&v21);
  swift_release(KeyPath);
  uint64_t v9 = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  if (!v9) {
    goto LABEL_5;
  }
  objc_msgSend(v5, "setAccountID:", objc_msgSend(v9, "longLongValue"));

LABEL_6:
  [v5 setIsHidden:2];
  [v5 setIsFirstParty:2];
  [v5 setIsPreorder:0];
  uint64_t v10 = sub_100029E18(&qword_10013F700);
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EEBC0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kASDPurchaseHistoryQuerySortOptionDate);
  uint64_t v13 = v12;
  id v14 = objc_allocWithZone(&OBJC_CLASS___ASDPurchaseHistoryQuerySortOption);
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = objc_msgSend(v14, "initWithName:ascending:", v15, 0, swift_bridgeObjectRelease(v13).n128_f64[0]);

  *(void *)(v11 + 32) = v16;
  unint64_t v21 = (void *)v11;
  specialized Array._endMutation()();
  unint64_t v17 = v21;
  sub_10002A030(0LL, &qword_10013DBF8, &OBJC_CLASS___ASDPurchaseHistoryQuerySortOption_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setSortOptions:", isa, swift_bridgeObjectRelease(v17).n128_f64[0]);

  return v5;
}

uint64_t sub_100078ACC(uint64_t a1, uint64_t a2)
{
  return sub_100078C40(a1, a2, (uint64_t)&unk_100121ED8, (uint64_t)sub_100078EE0, (uint64_t)&unk_100121EF0);
}

uint64_t sub_100078AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100078AF8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100078B04()
{
  unint64_t result = qword_10013D268;
  if (!qword_10013D268)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10013D268);
  }

  return result;
}

uint64_t sub_100078B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013C6D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100078B94(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013C6D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_100078BD4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, "ams_DSID");
  *a2 = result;
  return result;
}

id sub_100078C0C(void *a1, id *a2)
{
  return objc_msgSend(*a2, "ams_setDSID:", *a1);
}

uint64_t sub_100078C24(uint64_t a1, uint64_t a2)
{
  return sub_100078C40(a1, a2, (uint64_t)&unk_100121F78, (uint64_t)sub_100078CFC, (uint64_t)&unk_100121F90);
}

uint64_t sub_100078C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(type metadata accessor for OSSignpostID(0LL) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return sub_1000785F8( a1,  a2,  v5 + v12,  *(void *)(v5 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8LL)),  a3,  a4,  a5);
}

uint64_t sub_100078CC8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100078CFC()
{
  return sub_100076250(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100078D1C()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100078D90(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000781CC(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100078DE0()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100078E6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for OSSignpostID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100078454(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

BOOL sub_100078FE8()
{
  v0._uint64_t countAndFlagsBits = 0x7256747845707061LL;
  v0._object = (void *)0xEB00000000644973LL;
  return !String.hasPrefix(_:)(v0);
}

unint64_t sub_100079024()
{
  unint64_t result = qword_10013DC08;
  if (!qword_10013DC08)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013DC00);
    sub_100079088();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> LazyFilterSequence<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013DC08);
  }

  return result;
}

unint64_t sub_100079088()
{
  unint64_t result = qword_10013CF88;
  if (!qword_10013CF88)
  {
    uint64_t v1 = sub_100029F6C((uint64_t *)&unk_10013EF60);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10013CF88);
  }

  return result;
}

uint64_t sub_1000790D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *v6;
  if (a4) {
    NSString v12 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v12 = 0LL;
  }
  v15[4] = a5;
  uint64_t v16 = a6;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  void v15[2] = sub_1000791AC;
  v15[3] = &unk_100122110;
  uint64_t v13 = _Block_copy(v15);
  swift_retain(a6);
  [v11 getSubscriptionEntitlementsForSegment:a1 ignoreCaches:a2 & 1 requestingBundleId:v12 withCacheInfoResultHandler:v13];
  _Block_release(v13);

  return swift_release(v16);
}

double sub_1000791AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a2;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v11 = sub_10002A030(0LL, qword_10013DC10, &OBJC_CLASS___ASDSubscriptionEntitlement_ptr);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v11);
  }

  swift_retain(v9);
  id v12 = a5;
  v10(v8, a3, a4, a5);
  swift_release(v9);

  *(void *)&double result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

uint64_t sub_100079254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *v3;
  v9[4] = a2;
  uint64_t v10 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  void v9[2] = sub_1000792F4;
  v9[3] = &unk_1001220E8;
  unint64_t v7 = _Block_copy(v9);
  swift_retain(a3);
  [v6 getCachedSubscriptionEntitlementsForSegment:a1 withResultHandler:v7];
  _Block_release(v7);
  return swift_release(v10);
}

double sub_1000792F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000793B4(a1, a2, a3, a4, qword_10013DC10, &OBJC_CLASS___ASDSubscriptionEntitlement_ptr);
}

uint64_t sub_100079308(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  v7[4] = a1;
  uint64_t v8 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_1000793A0;
  v7[3] = &unk_1001220C0;
  uint64_t v5 = _Block_copy(v7);
  swift_retain(a2);
  [v4 getAppStoreConsumedIntroOfferFamilyIdsWithResultHandler:v5];
  _Block_release(v5);
  return swift_release(v8);
}

double sub_1000793A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000793B4(a1, a2, a3, a4, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
}

double sub_1000793B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5, void *a6)
{
  uint64_t v8 = a2;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v11 = sub_10002A030(0LL, a5, a6);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v11);
  }

  swift_retain(v9);
  id v12 = a4;
  v10(v8, a3, a4);
  swift_release(v9);

  *(void *)&double result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

uint64_t sub_100079440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100079450(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10007946C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

id *sub_1000794EC()
{
  uint64_t v1 = *v0;

  uint64_t v2 = (char *)v0 + *((void *)*v0 + 12);
  uint64_t v3 = type metadata accessor for Optional(0LL, v1[10]);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v0;
}

uint64_t sub_100079548()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AsyncExpensive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100079578(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncExpensive);
}

uint64_t sub_100079578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t initializeBufferWithCopyOfBuffer for AvailableUpdate(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for AvailableUpdate(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *assignWithCopy for AvailableUpdate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for AvailableUpdate(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvailableUpdate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvailableUpdate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AvailableUpdate()
{
  return &type metadata for AvailableUpdate;
}

Swift::Int sub_1000796F8()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100079768(uint64_t a1)
{
  Swift::UInt64 v3 = v1[1];
  Swift::UInt64 v4 = v1[2];
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1000797B8()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100079824(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

unint64_t sub_100079870()
{
  unint64_t result = qword_10013DC98;
  if (!qword_10013DC98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EF52C, &type metadata for AvailableUpdate);
    atomic_store(result, (unint64_t *)&qword_10013DC98);
  }

  return result;
}

uint64_t sub_1000798B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10002E92C(a1, &qword_10013CE40);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_100122310, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    unint64_t v17 = v19;
    v19[2] = v12;
    void v19[3] = v14;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10013DD00, v16);
}

uint64_t sub_100079A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10002E92C(a1, &qword_10013CE40);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      unsigned __int8 v15 = 0LL;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (!v9) {
      goto LABEL_6;
    }
  }

  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  uint64_t v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12)) {
    goto LABEL_6;
  }
  v18[0] = 0LL;
  v18[1] = 0LL;
  unsigned __int8 v15 = v18;
  v18[2] = v12;
  void v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100079B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10002E92C(a1, &qword_10013CE40);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = sub_10002A030(0LL, &qword_10013DEE0, &OBJC_CLASS___AMSMetricsIdentifierStore_ptr);
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    unint64_t v17 = v19;
    v19[2] = v12;
    void v19[3] = v14;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t sub_100079C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10002E92C(a1, &qword_10013CE40);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = sub_100029E18(&qword_10013DED0);
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    unint64_t v17 = v19;
    v19[2] = v12;
    void v19[3] = v14;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, v16, a2, a3);
}

unint64_t sub_100079DAC()
{
  unint64_t result = ASCSignpostTagCreate(0LL);
  qword_100148570 = result;
  return result;
}

id sub_100079DCC@<X0>(void *a1@<X8>)
{
  id v2 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  id result = [v2 setAccountMediaType:AMSAccountMediaTypeProduction];
  *a1 = v2;
  return result;
}

void sub_100079E38(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_10002A030(0LL, &qword_10013DDA8, &OBJC_CLASS___AMSProcessInfo_ptr);
  uint64_t v5 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(&v8, v4, a1, v4, v5);
  uint64_t v6 = v8;
  id v7 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStoreForClient:", v8);

  *a2 = v7;
}

void *sub_100079EE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000578AC(a1, a2);
}

uint64_t sub_100079F04(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100029E18(&qword_10013DF00);
  uint64_t v5 = swift_retain(a1);
  uint64_t v6 = Promise.__allocating_init()(v5);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v4, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_100122428, 56LL, 7LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = &unk_10013DEF8;
  void v8[5] = a1;
  v8[6] = v6;
  swift_retain(v6);
  uint64_t v9 = sub_1000B3448((uint64_t)v4, (uint64_t)&unk_10013DF08, (uint64_t)v8);
  swift_release(v9);
  return v6;
}

uint64_t sub_100079FF8(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  void v2[9] = a2;
  uint64_t v3 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0LL);
  v2[10] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Bag.Profile(0LL);
  v2[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[12] = v5;
  v2[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10007A078, 0LL, 0LL);
}

uint64_t sub_10007A078()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = sub_10002A030(0LL, &qword_10013DDA8, &OBJC_CLASS___AMSProcessInfo_ptr);
  uint64_t v4 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)((void *)(v0 + 56), v3, v2, v3, v4);
  uint64_t v5 = *(void **)(v0 + 56);
  uint64_t v6 = Bag.Profile.init(name:version:)(0xD000000000000014LL, 0x80000001000FCC50LL, 49LL, 0xE100000000000000LL);
  Bag.Profile.name.getter(v6);
  uint64_t v8 = v7;
  Bag.Profile.version.getter();
  uint64_t v10 = v9;
  id v11 = v5;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  id v14 =  [(id)objc_opt_self(AMSBag) bagForProfile:v12 profileVersion:v13 processInfo:v11];

  id v15 = v11;
  id v16 = v14;
  sub_1000A13E8(v1);
  uint64_t v17 = type metadata accessor for JSJetPackFetcher(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = sub_1000A26F0((uint64_t)v16, v15, v1);
  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 88);
  uint64_t v28 = *(uint64_t **)(v0 + 64);
  uint64_t v29 = *(void *)(v0 + 80);
  uint64_t v22 = sub_100029E18((uint64_t *)&unk_10013DF10);
  uint64_t v23 = AnyPipelineTask.run()(v22);
  *(void *)(v0 + 40) = type metadata accessor for SyncTaskScheduler(0LL);
  *(void *)(v0 + 48) = &protocol witness table for SyncTaskScheduler;
  uint64_t v24 = sub_10002C328((void *)(v0 + 16));
  SyncTaskScheduler.init()(v24);
  uint64_t v25 = type metadata accessor for DiskJetPackResourceBundle(0LL);
  uint64_t v26 = Promise.map<A>(on:_:)(v0 + 16, sub_1000B13A4, 0LL, v25);
  swift_release(v23);
  sub_100029F4C((void *)(v0 + 16));
  swift_release(v26);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  uint64_t *v28 = v18;
  swift_task_dealloc(v20);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A30C()
{
  uint64_t v0 = type metadata accessor for Bag.Profile(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Bag.Profile.init(name:version:)(0xD000000000000014LL, 0x80000001000FCC50LL, 49LL, 0xE100000000000000LL);
  uint64_t v4 = static Bag.fetchBag(forProfile:wantsAutomaticUpdates:)(v3, 1LL);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_10007A3B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v16 = a2;
  uint64_t v3 = type metadata accessor for JetEngineBootstrap.URLProtocolHandler(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Bag(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t **)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10002A030(0LL, &qword_10013DEE8, &OBJC_CLASS___AMSURLSession_ptr);
  uint64_t v11 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v10, v7, a1, v7, v11);
  uint64_t v12 = sub_10002A030(0LL, &qword_10013DDA8, &OBJC_CLASS___AMSProcessInfo_ptr);
  inject<A, B>(_:from:)(&v17, v12, a1, v12, v11);
  NSString v13 = v17;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for JetEngineBootstrap.URLProtocolHandler.standard(_:),  v3);
  uint64_t v14 = static AMSURLSession.forJetEngineStorefront(with:for:usingProtocol:)(v10, v13, v6);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  *id v16 = v14;
  return result;
}

uint64_t sub_10007A53C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Bag(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_10002A030(0LL, (unint64_t *)&qword_10013D180, &OBJC_CLASS___ACAccountStore_ptr);
  BaseObjectGraph.inject<A>(_:)(&v19, v9, v9);
  uint64_t v10 = v19;
  BaseObjectGraph.inject<A>(_:)(v8, v5, v5);
  id v11 = v10;
  uint64_t v12 = Bag.amsBag.getter();
  static TaskPriority.utility.getter();
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v4, 0LL, 1LL, v13);
  uint64_t v14 = (void *)swift_allocObject(&unk_100122400, 48LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  void v14[4] = v11;
  v14[5] = v12;
  id v15 = v11;
  swift_unknownObjectRetain(v12);
  uint64_t v16 = sub_100079B38((uint64_t)v4, (uint64_t)&unk_10013DED8, (uint64_t)v14);

  swift_release(v16);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  *a1 = v15;
  a1[1] = v12;
  return result;
}

uint64_t sub_10007A6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004C3B4(a1, a2);
}

void *sub_10007A724@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASDContingentPricingSubscriptionManager();
  swift_allocObject(v2, 40LL, 7LL);
  uint64_t result = sub_100087054();
  a1[3] = v2;
  a1[4] = &off_100122948;
  *a1 = result;
  return result;
}

uint64_t sub_10007A780@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = sub_1000606D8();
  a1[3] = v2;
  uint64_t result = sub_100027978( &qword_10013DEA0,  type metadata accessor for ASCMigrationDeviceAppFetcherImplementation,  (uint64_t)&unk_1000EEDE4);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_10007A804@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007A86C( (uint64_t (*)(uint64_t))type metadata accessor for ASCMigrationPurchaseHistoryImplementation,  sub_1000623FC,  &qword_10013DEC8,  (uint64_t)&unk_1000EEEC0,  a1);
}

uint64_t sub_10007A838@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007A86C( (uint64_t (*)(uint64_t))type metadata accessor for ASCMigrationPurchaseManagerImplementation,  sub_100063B94,  &qword_10013DEC0,  (uint64_t)&unk_1000EEF58,  a1);
}

uint64_t sub_10007A86C@<X0>( uint64_t (*a1)(uint64_t)@<X1>, uint64_t (*a2)(void)@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = a1(0LL);
  swift_allocObject(v10, 25LL, 7LL);
  uint64_t v11 = a2();
  a5[3] = v10;
  uint64_t result = sub_100027978(a3, a1, a4);
  a5[4] = result;
  *a5 = v11;
  return result;
}

uint64_t sub_10007A8F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for MetricsTopicProvider(0LL);
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v34 + 64);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v32 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = type metadata accessor for Bag(0LL);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = v33;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v30 - v14;
  uint64_t v31 = (char *)&v30 - v14;
  BaseObjectGraph.inject<A>(_:)((uint64_t *)((char *)&v30 - v14), v13, v13);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v15, v8);
  uint64_t v16 = type metadata accessor for AMSMetricsEventRecorder(0LL);
  uint64_t v17 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v12, v8, a1, v8, v17);
  uint64_t v18 = MetricsTopicProvider.currentMetricsTopic.getter();
  uint64_t v20 = v19;
  Swift::Int v21 = sub_1000CAA18((uint64_t)&off_10011F980);
  swift_arrayDestroy(&unk_10011F9A0, 1LL, &type metadata for String);
  uint64_t v22 = AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:anonymousTopics:)(v12, v18, v20, v21);
  uint64_t v23 = v32;
  sub_100038AC0((uint64_t)v7, v32, type metadata accessor for MetricsTopicProvider);
  uint64_t v24 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v25 = (v24 + 16) & ~v24;
  uint64_t v26 = swift_allocObject(&unk_1001223D8, v25 + v4, v24 | 7);
  sub_10007F93C(v23, v26 + v25, type metadata accessor for MetricsTopicProvider);
  uint64_t v27 = AMSMetricsEventRecorder.withDecorator(_:)(sub_10007F980, v26);
  swift_release(v26);
  swift_release(v22);
  uint64_t v28 = v35;
  v35[3] = v16;
  void v28[4] = (uint64_t)&protocol witness table for AMSMetricsEventRecorder;
  uint64_t *v28 = v27;
  sub_100038B04((uint64_t)v7, type metadata accessor for MetricsTopicProvider);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v31, v8);
}

uint64_t sub_10007AB4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Bag(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v7, v4, a1, v4, v8);
  sub_100061918((uint64_t)v7, a2);
  return (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_10007ABFC@<X0>(void *a1@<X8>)
{
  id result = [(id)objc_opt_self(ASCDefaults) daemonDefaults];
  *a1 = result;
  return result;
}

uint64_t *sub_10007AC44@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  return sub_1000D7FF8(a1, a2);
}

uint64_t sub_10007AC90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100029E18(&qword_10013D2D0);
  uint64_t v5 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v22, v4, a1, v4, v5);
  uint64_t v6 = sub_10002ACB8((uint64_t)v22, v22[3]);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = *v8;
  uint64_t v11 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(0LL);
  v21[3] = v11;
  void v21[4] = sub_100027978( &qword_10013DEA0,  type metadata accessor for ASCMigrationDeviceAppFetcherImplementation,  (uint64_t)&unk_1000EEDE4);
  v21[0] = v10;
  uint64_t v12 = type metadata accessor for LegacyAppStoreInstallStateMonitor();
  uint64_t v13 = swift_allocObject(v12, 56LL, 7LL);
  uint64_t v14 = sub_10002ACB8((uint64_t)v21, v11);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = *v16;
  id v19 = sub_10007F5FC(*v16, v13);
  swift_release(v18);
  sub_100029F4C(v21);
  uint64_t result = sub_100029F4C(v22);
  a2[3] = v12;
  a2[4] = &off_100124740;
  *a2 = v19;
  return result;
}

uint64_t sub_10007AE2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ASCMigrationAppStateControllerImplementation();
  swift_allocObject(v7, 40LL, 7LL);
  uint64_t v8 = swift_retain(a1);
  uint64_t v9 = sub_100058858(v8);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v6, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject(&unk_100122388, 40LL, 7LL);
  _OWORD v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = v9;
  swift_retain(v9);
  uint64_t v12 = sub_100079A04((uint64_t)v6, (uint64_t)&unk_10013DE90, (uint64_t)v11);
  swift_release(v12);
  a2[3] = v7;
  uint64_t result = sub_100027978( &qword_10013DE98,  (uint64_t (*)(uint64_t))type metadata accessor for ASCMigrationAppStateControllerImplementation,  (uint64_t)&unk_1000EEC24);
  a2[4] = result;
  *a2 = v9;
  return result;
}

uint64_t sub_10007AF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a4;
  return swift_task_switch(sub_10007AF78, 0LL, 0LL);
}

uint64_t sub_10007AF78()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 64) = v2;
  if (v2 < 0)
  {
    uint64_t v8 = v2 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v9 = async function pointer to StorefrontAppStateController.loadDataSources()[1];
    swift_retain(v8);
    uint64_t v10 = (void *)swift_task_alloc(v9);
    *(void *)(v0 + 72) = v10;
    void *v10 = v0;
    v10[1] = sub_1000593C0;
    return StorefrontAppStateController.loadDataSources()();
  }

  else
  {
    swift_retain(v2);
    uint64_t v3 = sub_100089B10();
    uint64_t v4 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v5 = swift_retain(v1);
    uint64_t v6 = static OS_dispatch_queue.main.getter(v5);
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = &protocol witness table for OS_dispatch_queue;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    Promise.always(on:perform:)(v0 + 16, sub_10007F42C, v1);
    swift_release(v1);
    swift_release(v3);
    swift_release(v2);
    sub_100029F4C((void *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

void *sub_10007B098@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  swift_retain(a1);
  id v5 = [v4 defaultCenter];
  uint64_t v6 = type metadata accessor for JSStackManager(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t result = sub_1000B56E0(a1, v5);
  *a2 = result;
  return result;
}

uint64_t sub_10007B128(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JSStackManager(0LL);
  uint64_t v3 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(&v13, v2, a1, v2, v3);
  uint64_t v4 = v13;
  uint64_t v5 = *(void *)(v13 + 24);
  uint64_t v6 = sub_100029E18(&qword_10013DE80);
  OS_dispatch_queue.sync<A>(execute:)(v12, sub_10007F374, v5, v6);
  uint64_t v7 = v12[0];
  void v12[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v12[4] = &protocol witness table for SyncTaskScheduler;
  uint64_t v8 = sub_10002C328(v12);
  SyncTaskScheduler.init()(v8);
  uint64_t v9 = sub_100029E18(&qword_10013C6B0);
  uint64_t v10 = Promise.map<A>(on:_:)(v12, sub_1000B5C80, 0LL, v9);
  swift_release(v7);
  sub_100029F4C(v12);
  swift_release(v4);
  return v10;
}

uint64_t sub_10007B220@<X0>(char *a1@<X8>)
{
  uint64_t v118 = a1;
  uint64_t v1 = sub_100029E18(&qword_10013DDD0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v116 = v1;
  uint64_t v117 = v2;
  __chkstk_darwin(v1);
  uint64_t v115 = (char *)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100029E18(&qword_10013DDD8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v112 = v4;
  uint64_t v113 = v5;
  __chkstk_darwin(v4);
  uint64_t v110 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100029E18(&qword_10013DDE0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v107 = v7;
  uint64_t v108 = v8;
  __chkstk_darwin(v7);
  id v104 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100029E18(&qword_10013CBA0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v95 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v95 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v95 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v95 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v95 = (char *)&v95 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v96 = (char *)&v95 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v97 = (char *)&v95 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v99 = (char *)&v95 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v100 = (char *)&v95 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v101 = (char *)&v95 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v102 = (char *)&v95 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v103 = (char *)&v95 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  int v105 = (char *)&v95 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  unint64_t v106 = (char *)&v95 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v109 = (char *)&v95 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  id v111 = (char *)&v95 - v50;
  __chkstk_darwin(v49);
  id v114 = (char *)&v95 - v51;
  uint64_t v98 = type metadata accessor for ObjectGraph(0LL);
  ActionDispatcher.init()();
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v52(v17, v14, v10);
  unint64_t v53 = sub_10007EFBC();
  ActionDispatcher.add<A>(_:)(v53, v10, &type metadata for AlertActionImplementation, v53);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v11 + 8);
  v54(v14, v10);
  v52(v20, v17, v10);
  unint64_t v55 = sub_10007F000();
  ActionDispatcher.add<A>(_:)(v55, v10, &type metadata for AlertOfferActionImplementation, v55);
  v54(v17, v10);
  v52(v23, v20, v10);
  unint64_t v56 = sub_10007F044();
  ActionDispatcher.add<A>(_:)(v56, v10, &type metadata for AppDistributionOfferActionImplementation, v56);
  v54(v20, v10);
  v52(v26, v23, v10);
  unint64_t v57 = sub_10007F088();
  ActionDispatcher.add<A>(_:)(v57, v10, &type metadata for AppLaunchTrampolineActionImplementation, v57);
  v54(v23, v10);
  NSString v58 = v95;
  v52(v95, v26, v10);
  unint64_t v59 = sub_10007F0CC();
  ActionDispatcher.add<A>(_:)(v59, v10, &type metadata for AppOfferActionImplementation, v59);
  v54(v26, v10);
  Class v60 = v96;
  v52(v96, v58, v10);
  unint64_t v61 = sub_10004A880();
  ActionDispatcher.add<A>(_:)(v61, v10, &type metadata for AppStoreRepairActionImplementation, v61);
  v54(v58, v10);
  uint64_t v62 = v97;
  v52(v97, v60, v10);
  unint64_t v63 = sub_10007F110();
  ActionDispatcher.add<A>(_:)(v63, v10, &type metadata for ArcadeOfferActionImplementation, v63);
  v54(v60, v10);
  uint64_t v64 = v99;
  v52(v99, v62, v10);
  unint64_t v65 = sub_10007F154();
  ActionDispatcher.add<A>(_:)(v65, v10, &type metadata for CancelOrPauseInstallActionImplementation, v65);
  v54(v62, v10);
  uint64_t v66 = v100;
  v52(v100, v64, v10);
  unint64_t v67 = sub_10007F198();
  ActionDispatcher.add<A>(_:)(v67, v10, &type metadata for ContingentOfferActionImplementation, v67);
  v54(v64, v10);
  v119[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v119[4] = &protocol witness table for SyncTaskScheduler;
  uint64_t v68 = sub_10002C328(v119);
  SyncTaskScheduler.init()(v68);
  NSString v69 = v104;
  uint64_t v70 = v98;
  ClosureActionImplementation.init(scheduler:)(v119, v98);
  uint64_t v71 = v101;
  v52(v101, v66, v10);
  uint64_t v72 = sub_100044410( &qword_10013DE30,  &qword_10013DDE0,  (uint64_t)&protocol conformance descriptor for ClosureActionImplementation<A>);
  uint64_t v73 = v107;
  ActionDispatcher.add<A>(_:)(v69, v10, v107, v72);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v69, v73);
  v54(v66, v10);
  uint64_t v74 = v110;
  CompoundActionImplementation.init()(v70);
  id v75 = v102;
  v52(v102, v71, v10);
  uint64_t v76 = sub_100044410( &qword_10013DE38,  &qword_10013DDD8,  (uint64_t)&protocol conformance descriptor for CompoundActionImplementation<A>);
  uint64_t v77 = v112;
  ActionDispatcher.add<A>(_:)(v74, v10, v112, v76);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v74, v77);
  v54(v71, v10);
  uint64_t v78 = v115;
  EmptyActionImplementation.init()(v70);
  uint64_t v79 = v103;
  v52(v103, v75, v10);
  uint64_t v80 = sub_100044410( &qword_10013DE40,  &qword_10013DDD0,  (uint64_t)&protocol conformance descriptor for EmptyActionImplementation<A>);
  uint64_t v81 = v116;
  ActionDispatcher.add<A>(_:)(v78, v10, v116, v80);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v78, v81);
  v54(v75, v10);
  uint64_t v82 = v105;
  v52(v105, v79, v10);
  unint64_t v83 = sub_10007F1DC();
  ActionDispatcher.add<A>(_:)(v83, v10, &type metadata for OpenAppActionImplementation, v83);
  v54(v79, v10);
  unsigned __int16 v84 = v106;
  v52(v106, v82, v10);
  unint64_t v85 = sub_10007F220();
  ActionDispatcher.add<A>(_:)(v85, v10, &type metadata for PresentErrorActionImplementation, v85);
  v54(v82, v10);
  uint64_t v86 = v109;
  v52(v109, v84, v10);
  unint64_t v87 = sub_10007F264();
  ActionDispatcher.add<A>(_:)(v87, v10, &type metadata for StatefulOfferActionImplementation, v87);
  v54(v84, v10);
  v119[0] = sub_10002A030(0LL, &qword_10013DE60, &OBJC_CLASS___GCController_ptr);
  uint64_t v88 = v111;
  v52(v111, v86, v10);
  unint64_t v89 = sub_10007F2A8();
  ActionDispatcher.add<A>(_:)(v119, v10, &type metadata for OfferAlertOfferActionImplementation, v89);
  v54(v86, v10);
  id v90 = [(id)objc_opt_self(ASCWorkspace) sharedWorkspace];
  v119[0] = v90;
  Swift::String v91 = v114;
  v52(v114, v88, v10);
  unint64_t v92 = sub_10007F2EC();
  ActionDispatcher.add<A>(_:)(v119, v10, &type metadata for URLOfferActionImplementation, v92);

  v54(v88, v10);
  v52(v118, v91, v10);
  unint64_t v93 = sub_10007F330();
  ActionDispatcher.add<A>(_:)(v93, v10, &type metadata for WatchReinstallActionImplementation, v93);
  return ((uint64_t (*)(char *, uint64_t))v54)(v91, v10);
}

void *sub_10007BB38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10007BB80(a1, (uint64_t)&type metadata for JSLockupService, (uint64_t)&off_100123D08, a2);
}

void *sub_10007BB5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10007BB80(a1, (uint64_t)&type metadata for JSOfferService, (uint64_t)&off_100124090, a2);
}

void *sub_10007BB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for JSStackManager(0LL);
  uint64_t v9 = type metadata accessor for BaseObjectGraph(0LL);
  uint64_t result = inject<A, B>(_:from:)(&v12, v8, a1, v8, v9);
  uint64_t v11 = v12;
  a4[3] = a2;
  a4[4] = a3;
  *a4 = v11;
  return result;
}

void *sub_10007BC00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for JSStackManager(0LL);
  uint64_t v5 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(&v13, v4, a1, v4, v5);
  uint64_t v6 = v13;
  uint64_t v7 = sub_100029E18(&qword_10013DDB0);
  a2[3] = &type metadata for JSMetricsService;
  a2[4] = &off_100123FE8;
  uint64_t v8 = (void *)swift_allocObject(&unk_100122338, 72LL, 7LL);
  *a2 = v8;
  inject<A, B>(_:from:)(v8 + 3, v7, a1, v7, v5);
  uint64_t v9 = sub_10002A030(0LL, (unint64_t *)&qword_10013D180, &OBJC_CLASS___ACAccountStore_ptr);
  uint64_t result = inject<A, B>(_:from:)(&v12, v9, a1, v9, v5);
  uint64_t v11 = v12;
  v8[2] = v6;
  v8[8] = v11;
  return result;
}

uint64_t sub_10007BD0C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldsAggregator(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for JSStackManager(0LL);
  uint64_t v6 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v12, v5, a1, v5, v6);
  uint64_t v7 = v12[0];
  unint64_t v8 = sub_10007EF34();
  sub_1000C64BC(a1);
  void v12[3] = &type metadata for JSMetricsEventLinter;
  v12[4] = sub_10007EF78();
  v12[0] = v7;
  uint64_t v9 = sub_100029E18((uint64_t *)&unk_10013DD20);
  swift_retain(v7);
  inject<A, B>(_:from:)(v11, v9, a1, v9, v6);
  MetricsPipeline.init(builderType:aggregator:linter:recorder:)( &type metadata for SimpleMetricsFieldsBuilder,  v8,  v4,  v12,  v11);
  return swift_release(v7);
}

uint64_t sub_10007BE40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for Bag(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (void **)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = (int *)type metadata accessor for AMSMediaFetcher(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (void **)((char *)&v26 - v10);
  uint64_t v12 = sub_10002A030(0LL, &qword_10013DDA8, &OBJC_CLASS___AMSProcessInfo_ptr);
  uint64_t v13 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v28, v12, a1, v12, v13);
  uint64_t v14 = v28[0];
  inject<A, B>(_:from:)((void *)((char *)v11 + v6[5]), v3, a1, v3, v13);
  uint64_t v15 = sub_100029E18(&qword_10013DDB0);
  inject<A, B>(_:from:)((void *)((char *)v11 + v6[6]), v15, a1, v15, v13);
  void *v11 = v14;
  uint64_t v16 = (void *)((char *)v11 + v6[7]);
  *uint64_t v16 = 0LL;
  v16[1] = 0LL;
  uint64_t v17 = sub_100029E18((uint64_t *)&unk_10013DD50);
  inject<A, B>(_:from:)(v31, v17, a1, v17, v13);
  uint64_t v18 = sub_100029E18((uint64_t *)&unk_10013DD40);
  inject<A, B>(_:from:)(v30, v18, a1, v18, v13);
  inject<A, B>(_:from:)(v5, v3, a1, v3, v13);
  inject<A, B>(_:from:)(v28, v18, a1, v18, v13);
  uint64_t v19 = sub_100029E18((uint64_t *)&unk_100140320);
  inject<A, B>(_:from:)(v29, v19, a1, v19, v13);
  uint64_t v20 = sub_10002ACB8((uint64_t)v31, v31[3]);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  sub_100038AC0((uint64_t)v11, (uint64_t)v9, type metadata accessor for AMSMediaFetcher);
  sub_10007EE98((uint64_t)v28, (uint64_t)v27);
  id v24 = sub_10007DBB4((uint64_t)v9, *v22, v30, (uint64_t)v5, v27);
  sub_10007EED4(v28);
  sub_100029F4C(v31);
  uint64_t result = sub_100038B04((uint64_t)v11, type metadata accessor for AMSMediaFetcher);
  void *v26 = v24;
  return result;
}

uint64_t sub_10007C104@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MetricsPipeline(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v25[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for Bag(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v12, v10, a1, v10, v13);
  inject<A, B>(_:from:)(v9, v7, a1, v7, v13);
  uint64_t v14 = sub_100029E18(&qword_10013DD60);
  inject<A, B>(_:from:)(v25, v14, a1, v14, v13);
  uint64_t v15 = sub_100027978( (unint64_t *)&unk_10013DD80,  (uint64_t (*)(uint64_t))&type metadata accessor for MetricsLogger.Configuration,  (uint64_t)&protocol conformance descriptor for MetricsLogger.Configuration);
  inject<A>(_:from:)(v4, a1, v4, v15);
  uint64_t v16 = type metadata accessor for MetricsLogger(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = MetricsLogger.init(loggerName:configuration:)(0xD000000000000013LL, 0x80000001000EF5A0LL, v6);
  uint64_t v18 = sub_10002ACB8((uint64_t)v25, v25[3]);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v21 + 16))(v20);
  id v22 = sub_10007DDCC((uint64_t)v12, (uint64_t)v9, (uint64_t)v20, v17);
  uint64_t result = sub_100029F4C(v25);
  *a2 = v22;
  return result;
}

id sub_10007C340@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)type metadata accessor for UtilityClient()) init];
  *a1 = result;
  return result;
}

uint64_t sub_10007C380@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for ObjectGraph(0LL);
  uint64_t v4 = swift_retain(v3);
  uint64_t v5 = BaseObjectGraph.__allocating_init(_:)(v4);
  swift_retain(v5);
  dispatch thunk of BaseObjectGraph.name.setter(0xD000000000000018LL, 0x80000001000FCB90LL);
  uint64_t result = swift_release(v5);
  *a2 = v5;
  return result;
}

uint64_t sub_10007C3FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_10007C404(*a1, a2, a3);
}

uint64_t sub_10007C404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a3;
  uint64_t v49 = a2;
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013DCA0);
  uint64_t v48 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for Bag(0LL);
  uint64_t v51 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v8 = (uint64_t *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v46 = type metadata accessor for Locale(0LL);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1 + qword_10013FCF8;
  swift_beginAccess(a1 + qword_10013FCF8, v59, 0LL, 0LL);
  sub_10004C0C0(v14, (uint64_t)&v57);
  if (v58)
  {
    sub_10002C438(&v57, (uint64_t)v60);
    uint64_t v15 = sub_100029E18(&qword_10013DCC0);
    uint64_t v16 = type metadata accessor for ObjectGraph(0LL);
    inject<A, B>(_:from:)(&v57, v15, a1, v15, v16);
    uint64_t v17 = type metadata accessor for TaskPriority(0LL);
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL);
    v18(v13, 1LL, 1LL, v17);
    sub_1000388F0((uint64_t)v60, (uint64_t)&v54);
    uint64_t v19 = swift_allocObject(&unk_1001222C0, 72LL, 7LL);
    *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(v19 + 24) = 0LL;
    sub_10002C438(&v54, v19 + 32);
    uint64_t v20 = sub_1000798B8((uint64_t)v13, (uint64_t)&unk_10013DCD0, v19);
    swift_release(v20);
    v18(v13, 1LL, 1LL, v17);
    sub_1000388F0((uint64_t)&v57, (uint64_t)&v54);
    uint64_t v21 = swift_allocObject(&unk_1001222E8, 72LL, 7LL);
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(v21 + 24) = 0LL;
    sub_10002C438(&v54, v21 + 32);
    uint64_t v22 = sub_1000798B8((uint64_t)v13, (uint64_t)&unk_10013DCE0, v21);
    swift_release(v22);
    uint64_t v23 = sub_100029E18(&qword_10013C6B0);
    inject<A, B>(_:from:)(&v54, v23, a1, v23, v16);
    uint64_t v24 = sub_10002A030(0LL, &qword_10013DCF0, off_10011E4C0);
    inject<A, B>(_:from:)(&v52, v24, a1, v24, v16);
    double v25 = v52;
    uint64_t v26 = v55;
    uint64_t v27 = v56;
    sub_100029EE0(&v54, v55);
    uint64_t v28 = dispatch thunk of Localizer.locale.getter(v26, v27);
    Locale.identifier.getter(v28);
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v46);
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    [*(id *)&v25 setStorefrontLocaleID:v31];

    uint64_t v32 = v47;
    inject<A, B>(_:from:)(v8, v47, a1, v47, v16);
    NSString v33 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.currentOrNil()(&v52, v4);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v48 + 8);
    v34(v6, v4);
    id v35 = 0LL;
    if ((v53 & 1) == 0) {
      id v35 = [objc_allocWithZone(NSNumber) initWithDouble:v52];
    }
    [*(id *)&v25 setOverlaysRateLimitRequestsPerSecond:v35];

    NSString v36 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.currentOrNil()(&v52, v4);
    v34(v6, v4);
    if ((v53 & 1) != 0) {
      id v37 = 0LL;
    }
    else {
      id v37 = [objc_allocWithZone(NSNumber) initWithDouble:v52];
    }
    [*(id *)&v25 setOverlaysRateLimitTimeWindow:v37];

    NSString v38 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.currentOrNil()(&v52, v4);
    v34(v6, v4);
    if ((v53 & 1) != 0) {
      id v39 = 0LL;
    }
    else {
      id v39 = [objc_allocWithZone(NSNumber) initWithDouble:v52];
    }
    [*(id *)&v25 setOverlaysLoadTimeout:v39];

    uint64_t v40 = (void *)objc_opt_self(&OBJC_CLASS___ASCViewRender);
    if (qword_10013BBC0 != -1) {
      swift_once(&qword_10013BBC0, sub_100079DAC);
    }
    uint64_t v41 = qword_100148570;
    NSString v42 = String._bridgeToObjectiveC()();
    [v40 launchCorrelationKeyWithTag:v41 withString:v42];

    [v40 bootstrapDidEndWithTag:qword_100148570];
    (*(void (**)(void *, uint64_t))(v51 + 8))(v8, v32);
    sub_100029F4C(&v57);
    sub_100029F4C(v60);
    return sub_100029F4C(&v54);
  }

  else
  {
    sub_10002E92C((uint64_t)&v57, (uint64_t *)&unk_10013DCB0);
    uint64_t v44 = sub_100029E18((uint64_t *)&unk_10013CE70);
    uint64_t result = dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v44, v44);
    __break(1u);
  }

  return result;
}

uint64_t sub_10007CA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v4[11] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[13] = v7;
  v4[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t refreshed = type metadata accessor for ArcadeEntitlementRefreshCondition(0LL);
  v4[15] = refreshed;
  uint64_t v9 = *(void *)(refreshed - 8);
  v4[16] = v9;
  v4[17] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ArcadeState(0LL);
  v4[18] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[19] = v11;
  v4[20] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10007CB34, 0LL, 0LL);
}

uint64_t sub_10007CB34()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = (_BYTE *)v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = (void *)v0[10];
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  sub_100029EE0(v4, v5);
  *uint64_t v1 = 0;
  (*(void (**)(_BYTE *, void, uint64_t))(v2 + 104))( v1,  enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpired(_:),  v3);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ArcadeSubscriptionManager.updateStateFromEntitlements(refreshingCache:)[1]);
  v0[21] = v7;
  void *v7 = v0;
  v7[1] = sub_10007CBE0;
  return dispatch thunk of ArcadeSubscriptionManager.updateStateFromEntitlements(refreshingCache:)( v0[20],  v0[17],  v5,  v6);
}

uint64_t sub_10007CBE0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 128LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    uint64_t v7 = sub_10007CCD8;
  }

  else
  {
    (*(void (**)(void, void))(v2[19] + 8LL))(v2[20], v2[18]);
    uint64_t v7 = sub_10007CC7C;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_10007CC7C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007CCD8()
{
  if (qword_10013BC58 != -1) {
    swift_once(&qword_10013BC58, sub_1000D1598);
  }
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v19 = v3;
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = sub_10002A768(v5, (uint64_t)qword_100148648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  uint64_t v7 = sub_100029E18(&qword_10013EA00);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(69LL, 1LL);
  v10._object = (void *)0x80000001000FCB40LL;
  v10._uint64_t countAndFlagsBits = 0xD000000000000045LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue(v1, v0 + 72, v0 + 48);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v12;
  uint64_t v13 = sub_10002C328((void *)(v0 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v14._uint64_t countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.warning(_:)(v9, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v5);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007CED4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013DCCC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_100039088;
  return sub_10007CA64(a1, v4, v5, v1 + 32);
}

uint64_t sub_10007CF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v4[11] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[13] = v7;
  v4[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10007CFC0, 0LL, 0LL);
}

uint64_t sub_10007CFC0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10013E2DC);
  *(void *)(v0 + 120) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007D014;
  return sub_1000875D0();
}

uint64_t sub_10007D014(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 120);
  uint64_t v5 = *v2;
  *(void *)(v5 + 128) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_10007D0AC, 0LL, 0LL);
  }
  swift_bridgeObjectRelease(a1);
  uint64_t v7 = *(void *)(v5 + 88);
  swift_task_dealloc(*(void *)(v5 + 112));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10007D0AC()
{
  if (qword_10013BC58 != -1) {
    swift_once(&qword_10013BC58, sub_1000D1598);
  }
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v17 = v3;
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = sub_10002A768(v5, (uint64_t)qword_100148648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v5);
  uint64_t v7 = sub_100029E18(&qword_10013EA00);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(79LL, 1LL);
  v10._object = (void *)0x80000001000FCAF0LL;
  v10._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue(v1, v0 + 72, v0 + 48);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 56);
  *(void *)(v0 + 40) = v12;
  uint64_t v13 = sub_10002C328((void *)(v0 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v14._uint64_t countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.warning(_:)(v9, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v2, v5);
  uint64_t v15 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007D290()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10007D2BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013DCDC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002A858;
  return sub_10007CF40(a1, v4, v5, v1 + 32);
}

uint64_t sub_10007D328(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(a1 + 56, v18, 1LL, 0LL);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    swift_retain(*(void *)(a1 + 56));
  }

  else
  {
    if (qword_10013BC48 != -1) {
      swift_once(&qword_10013BC48, sub_1000D1558);
    }
    uint64_t v6 = type metadata accessor for OSLogger(0LL);
    sub_10002A768(v6, (uint64_t)qword_100148618);
    uint64_t v7 = sub_100029E18(&qword_10013EA00);
    uint64_t v8 = type metadata accessor for LogMessage(0LL);
    uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
         + *(void *)(*(void *)(v8 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(25LL, 1LL);
    v10._uint64_t countAndFlagsBits = 0LL;
    v10._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v10);
    LogMessage.StringInterpolation.appendInterpolation(identity:)(a1);
    v11._object = (void *)0x80000001000FCBD0LL;
    v11._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    LogMessage.init(stringInterpolation:)(v4);
    Logger.debug(_:)(v9, v6, &protocol witness table for OSLogger);
    uint64_t v12 = swift_bridgeObjectRelease(v9);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(a1 + 24))(&v19, v12);
    uint64_t v5 = v19;
    uint64_t v13 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v19;
    swift_retain(v5);
    swift_release(v13);
    uint64_t v14 = os_transaction_create("ExpiringValue.keepAlive");
    uint64_t v15 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    swift_unknownObjectRelease(v15);
  }

  sub_1000B4AD0();
  return v5;
}

uint64_t sub_10007D518(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10007D57C;
  return v6(a1);
}

uint64_t sub_10007D57C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10007D5C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10007D5EC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10013DCFC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100039088;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10013DCF8 + dword_10013DCF8))(a1, v4);
}

uint64_t sub_10007D65C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10007D328(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

id sub_10007D684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a4;
  uint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v7 = type metadata accessor for ASDDeviceAppFetcher(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  NSString v36 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v41[3] = v11;
  v41[4] = &protocol witness table for SyncTaskScheduler;
  uint64_t v20 = (char *)sub_10002C328(v41);
  uint64_t v37 = v12;
  uint64_t v21 = a2;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v20, v21, v11);
  sub_100038AC0( a5 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store,  (uint64_t)v19,  type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1LL, v7) == 1)
  {
    uint64_t v23 = v38;
    uint64_t v24 = sub_100046AC4();
    char v26 = v25;
    v22(v16, (uint64_t)v20, v11);
    uint64_t v27 = v40;
    if (v26)
    {
      if (v26 == 1)
      {
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        id v29 = [(id)objc_opt_self(ASDAppQuery) queryForBundleIDs:isa];
      }

      else
      {
        id v29 = [(id)objc_opt_self(ASDAppQuery) queryForStoreApps];
      }
    }

    else
    {
      NSString v31 = sub_100075A34((uint64_t)v24);
      sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
      Class v32 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v31);
      id v29 = [(id)objc_opt_self(ASDAppQuery) queryForStoreItemIDs:v32];
    }

    NSString v33 = (char *)objc_allocWithZone((Class)type metadata accessor for ASDDeviceAppFetcher.QueryObservation());
    uint64_t v34 = (uint64_t)v36;
    v22(v36, (uint64_t)v16, v11);
    swift_retain(v23);
    id v30 = sub_10005F308(v29, v34, v27, v23, v33);

    swift_release(v23);
    sub_100027978( (unint64_t *)&unk_10013DBE0,  (uint64_t (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation,  (uint64_t)&unk_1000EF3A0);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v11);
    swift_bridgeObjectRelease(v24);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v19, v7);
    id v30 = (id)ASDDeviceAppFetcher.observeQuery(_:on:using:)(v39, v41, v40, v38);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  sub_100029F4C(v41);
  return v30;
}

id sub_10007D9FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _OWORD *a5, char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a6);
  v25[3] = type metadata accessor for AMSMediaFetcher(0LL);
  void v25[4] = &off_1001202F8;
  uint64_t v13 = sub_10002C328(v25);
  sub_10007F93C(a1, (uint64_t)v13, type metadata accessor for AMSMediaFetcher);
  v24[3] = &type metadata for JSLockupService;
  v24[4] = &off_100123D08;
  v24[0] = a2;
  void v23[3] = &type metadata for DeviceAppDistribution;
  v23[4] = &off_100122F98;
  uint64_t v14 = (_OWORD *)swift_allocObject(&unk_100122360, 96LL, 7LL);
  v23[0] = v14;
  __int128 v15 = a5[3];
  v14[3] = a5[2];
  void v14[4] = v15;
  v14[5] = a5[4];
  __int128 v16 = a5[1];
  v14[1] = *a5;
  v14[2] = v16;
  sub_1000388F0((uint64_t)v25, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher]);
  sub_1000388F0((uint64_t)v24, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service]);
  sub_1000388F0( (uint64_t)a3,  (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appStateController]);
  uint64_t v17 = &a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_bag];
  uint64_t v18 = type metadata accessor for Bag(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a4, v18);
  sub_1000388F0((uint64_t)v23, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appDistribution]);
  v22.receiver = a6;
  v22.super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v22, "init");
  sub_100029F4C(v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a4, v18);
  sub_100029F4C(a3);
  sub_100029F4C(v24);
  sub_100029F4C(v25);
  return v20;
}

id sub_10007DBB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v37 = type metadata accessor for AMSMediaFetcher(0LL);
  uint64_t v38 = &off_1001202F8;
  Swift::String v10 = sub_10002C328(v36);
  sub_10007F93C(a1, (uint64_t)v10, type metadata accessor for AMSMediaFetcher);
  uint64_t v34 = &type metadata for JSLockupService;
  id v35 = &off_100123D08;
  v33[0] = a2;
  NSString v31 = &type metadata for DeviceAppDistribution;
  Class v32 = &off_100122F98;
  uint64_t v11 = (_OWORD *)swift_allocObject(&unk_100122360, 96LL, 7LL);
  v30[0] = v11;
  __int128 v12 = a5[3];
  v11[3] = a5[2];
  v11[4] = v12;
  void v11[5] = a5[4];
  __int128 v13 = a5[1];
  v11[1] = *a5;
  _OWORD v11[2] = v13;
  uint64_t v14 = (char *)objc_allocWithZone((Class)type metadata accessor for LockupFetcherClient(0LL));
  uint64_t v15 = sub_10002ACB8((uint64_t)v36, v37);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = sub_10002ACB8((uint64_t)v33, (uint64_t)v34);
  __chkstk_darwin(v19);
  uint64_t v21 = (void *)((char *)&v30[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10002ACB8((uint64_t)v30, (uint64_t)v31);
  __chkstk_darwin(v23);
  char v25 = (_OWORD *)((char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(_OWORD *))(v26 + 16))(v25);
  id v27 = sub_10007D9FC((uint64_t)v17, *v21, a3, a4, v25, v14);
  sub_100029F4C(v30);
  sub_100029F4C(v33);
  sub_100029F4C(v36);
  return v27;
}

id sub_10007DDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[3] = &type metadata for JSMetricsService;
  void v21[4] = &off_100123FE8;
  uint64_t v8 = swift_allocObject(&unk_100122338, 72LL, 7LL);
  v21[0] = v8;
  __int128 v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 + 32);
  *(void *)(v8 + 64) = *(void *)(a3 + 48);
  void v20[3] = &type metadata for OSSignpostExtractor;
  void v20[4] = &off_100125B18;
  Swift::String v10 = (char *)objc_allocWithZone((Class)type metadata accessor for MetricsClient(0LL));
  uint64_t v11 = sub_10002ACB8((uint64_t)v21, (uint64_t)&type metadata for JSMetricsService);
  __chkstk_darwin(v11);
  __int128 v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ((void (*)(uint64_t, uint64_t *))v14->initializeWithCopy)((uint64_t)v13, v15);
  uint64_t v16 = sub_10002ACB8((uint64_t)v20, (uint64_t)&type metadata for OSSignpostExtractor);
  __chkstk_darwin(v16);
  (*(void (**)(void))(v17 + 16))();
  id v18 = sub_10007DF40(a1, a2, (uint64_t)v13, a4, v10);
  sub_100029F4C(v20);
  sub_100029F4C(v21);
  return v18;
}

id sub_10007DF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v32 = a2;
  uint64_t v34 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a5);
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v37);
  NSString v36 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  __int128 v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v43[3] = type metadata accessor for MetricsLogger(0LL);
  v43[4] = &protocol witness table for MetricsLogger;
  v43[0] = a4;
  v42[3] = &type metadata for JSMetricsService;
  v42[4] = &off_100123FE8;
  uint64_t v18 = swift_allocObject(&unk_100122338, 72LL, 7LL);
  v42[0] = v18;
  __int128 v19 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v18 + 32) = v19;
  __int128 v20 = *(_OWORD *)(a3 + 32);
  *(void *)(v18 + 64) = *(void *)(a3 + 48);
  *(_OWORD *)(v18 + 48) = v20;
  uint64_t v21 = &a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_bag];
  v41[3] = &type metadata for OSSignpostExtractor;
  v41[4] = &off_100125B18;
  uint64_t v22 = type metadata accessor for Bag(0LL);
  uint64_t v35 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v21, a1, v22);
  uint64_t v23 = &a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsPipeline];
  uint64_t v24 = type metadata accessor for MetricsPipeline(0LL);
  uint64_t v33 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v23, a2, v24);
  sub_1000388F0((uint64_t)v42, (uint64_t)&a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsService]);
  sub_1000388F0((uint64_t)v43, (uint64_t)&a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsLogger]);
  sub_1000388F0((uint64_t)v41, (uint64_t)&a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_signpostExtractor]);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v14);
  char v25 = a5;
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_100027978( (unint64_t *)&qword_10013DD90,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v27 = sub_100029E18(&qword_10013D2F8);
  uint64_t v28 = sub_100044410( (unint64_t *)&qword_10013DDA0,  &qword_10013D2F8,  (uint64_t)&protocol conformance descriptor for [A]);
  id v29 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v27, v28, v37, v26);
  *(void *)&v25[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_collectionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001DLL,  0x80000001000FCBB0LL,  v13,  v29,  v17,  0LL);

  v39.receiver = v25;
  v39.super_class = ObjectType;
  id v30 = objc_msgSendSuper2(&v39, "init");
  sub_100029F4C(v41);
  sub_100029F4C(v43);
  sub_100029F4C(v42);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v24);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v22);
  return v30;
}

uint64_t sub_10007E2E4()
{
  uint64_t v0 = v56;
  uint64_t v1 = v57;
  sub_100029EE0(v55, v56);
  uint64_t v2 = sub_10002A030(0LL, &qword_10013DDA8, &OBJC_CLASS___AMSProcessInfo_ptr);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v52, v2, sub_100079DCC, 0LL, v0, v2, v1);
  uint64_t v3 = v53;
  uint64_t v4 = v54;
  sub_100029EE0(v52, v53);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v49, v3, v4);
  uint64_t v5 = v50;
  uint64_t v6 = v51;
  sub_100029EE0(v49, v50);
  uint64_t v7 = sub_10002A030(0LL, (unint64_t *)&qword_10013D180, &OBJC_CLASS___ACAccountStore_ptr);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v46, v7, sub_100079E38, 0LL, v5, v7, v6);
  uint64_t v8 = v47;
  uint64_t v9 = v48;
  sub_100029EE0(v46, v47);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v43, v8, v9);
  uint64_t v10 = v44;
  uint64_t v11 = v45;
  sub_100029EE0(v43, v44);
  uint64_t v12 = sub_100029E18(&qword_10013DDB0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v40, v12, sub_100079EE0, 0LL, v10, v12, v11);
  uint64_t v13 = v41;
  uint64_t v14 = v42;
  sub_100029EE0(v40, v41);
  uint64_t v15 = type metadata accessor for JSJetPackFetcher(0LL);
  dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v37, v15, sub_100079F04, 0LL, v15, v13, v14);
  uint64_t v16 = v38;
  uint64_t v17 = v39;
  sub_100029EE0(v37, v38);
  uint64_t v18 = type metadata accessor for Bag(0LL);
  dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v34, v18, sub_10007A30C, 0LL, v18, v16, v17);
  uint64_t v19 = v35;
  uint64_t v20 = v36;
  sub_100029EE0(v34, v35);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v31, v19, v20);
  uint64_t v21 = v32;
  uint64_t v22 = v33;
  sub_100029EE0(v31, v32);
  uint64_t v23 = sub_10002A030(0LL, &qword_10013DEE8, &OBJC_CLASS___AMSURLSession_ptr);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v28, v23, sub_10007A3B4, 0LL, v21, v23, v22);
  uint64_t v24 = v29;
  uint64_t v25 = v30;
  sub_100029EE0(v28, v29);
  uint64_t v26 = dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()(v24, v25);
  sub_100029F4C(v28);
  sub_100029F4C(v31);
  sub_100029F4C(v34);
  sub_100029F4C(v37);
  sub_100029F4C(v40);
  sub_100029F4C(v43);
  sub_100029F4C(v46);
  sub_100029F4C(v49);
  sub_100029F4C(v52);
  sub_100029F4C(v55);
  return v26;
}

uint64_t sub_10007E5D4()
{
  uint64_t v0 = v170;
  uint64_t v1 = v171;
  sub_100029EE0(v169, v170);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)( v166,  &type metadata for MetricsIdStore,  sub_10007A53C,  0LL,  v0,  &type metadata for MetricsIdStore,  v1);
  uint64_t v2 = v167;
  uint64_t v3 = v168;
  sub_100029EE0(v166, v167);
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013CE70);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v163, v4, sub_10007A6D8, 0LL, v2, v4, v3);
  uint64_t v5 = v164;
  uint64_t v6 = v165;
  sub_100029EE0(v163, v164);
  uint64_t v7 = sub_100029E18(&qword_10013DCC0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v160, v7, sub_10007A724, 0LL, v5, v7, v6);
  uint64_t v8 = v161;
  uint64_t v9 = v162;
  sub_100029EE0(v160, v161);
  uint64_t v10 = sub_100029E18(&qword_10013D2D0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v157, v10, sub_10007A780, 0LL, v8, v10, v9);
  uint64_t v11 = v158;
  uint64_t v12 = v159;
  sub_100029EE0(v157, v158);
  uint64_t v13 = sub_100029E18((uint64_t *)&unk_10013DD10);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v154, v13, sub_10007A804, 0LL, v11, v13, v12);
  uint64_t v14 = v155;
  uint64_t v15 = v156;
  sub_100029EE0(v154, v155);
  uint64_t v16 = sub_100029E18(&qword_10013C8C0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v151, v16, sub_10007A838, 0LL, v14, v16, v15);
  uint64_t v17 = v152;
  uint64_t v18 = v153;
  sub_100029EE0(v151, v152);
  uint64_t v19 = sub_100029E18((uint64_t *)&unk_10013DD20);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v148, v19, sub_10007A8F8, 0LL, v17, v19, v18);
  uint64_t v20 = v149;
  uint64_t v21 = v150;
  sub_100029EE0(v148, v149);
  uint64_t v22 = sub_100029E18(&qword_10013D2D8);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v145, v22, sub_10007AB4C, 0LL, v20, v22, v21);
  uint64_t v23 = v146;
  uint64_t v24 = v147;
  sub_100029EE0(v145, v146);
  uint64_t v25 = sub_10002A030(0LL, &qword_10013DCF0, off_10011E4C0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v142, v25, sub_10007ABFC, 0LL, v23, v25, v24);
  uint64_t v26 = v143;
  uint64_t v27 = v144;
  sub_100029EE0(v142, v143);
  uint64_t v28 = sub_100029E18((uint64_t *)&unk_10013DD30);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v139, v28, sub_10007AC44, 0LL, v26, v28, v27);
  uint64_t v29 = v140;
  uint64_t v30 = v141;
  sub_100029EE0(v139, v140);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v136, v29, v30);
  uint64_t v31 = v137;
  uint64_t v32 = v138;
  sub_100029EE0(v136, v137);
  uint64_t v33 = sub_100029E18((uint64_t *)&unk_100140320);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v133, v33, sub_10007AC90, 0LL, v31, v33, v32);
  uint64_t v34 = v134;
  uint64_t v35 = v135;
  sub_100029EE0(v133, v134);
  uint64_t v36 = sub_100029E18((uint64_t *)&unk_10013DD40);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v130, v36, sub_10007AE2C, 0LL, v34, v36, v35);
  uint64_t v37 = v131;
  uint64_t v38 = v132;
  sub_100029EE0(v130, v131);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v127, v37, v38);
  uint64_t v39 = v128;
  uint64_t v40 = v129;
  sub_100029EE0(v127, v128);
  uint64_t v41 = type metadata accessor for JSStackManager(0LL);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v124, v41, sub_10007B098, 0LL, v39, v41, v40);
  uint64_t v42 = v125;
  uint64_t v43 = v126;
  sub_100029EE0(v124, v125);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v121, v42, v43);
  uint64_t v44 = v122;
  uint64_t v45 = v123;
  sub_100029EE0(v121, v122);
  uint64_t v46 = sub_100029E18(&qword_10013C6B0);
  dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v118, v46, sub_10007B128, 0LL, v46, v44, v45);
  uint64_t v47 = v119;
  uint64_t v48 = v120;
  sub_100029EE0(v118, v119);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v115, v47, v48);
  uint64_t v49 = v116;
  uint64_t v50 = v117;
  sub_100029EE0(v115, v116);
  uint64_t v51 = sub_100029E18(&qword_10013CBA0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v112, v51, sub_10007B220, 0LL, v49, v51, v50);
  uint64_t v52 = v113;
  uint64_t v53 = v114;
  sub_100029EE0(v112, v113);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v109, v52, v53);
  uint64_t v54 = v110;
  uint64_t v55 = v111;
  sub_100029EE0(v109, v110);
  uint64_t v56 = sub_100029E18((uint64_t *)&unk_10013DD50);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v106, v56, sub_10007BB38, 0LL, v54, v56, v55);
  uint64_t v57 = v107;
  uint64_t v58 = v108;
  sub_100029EE0(v106, v107);
  uint64_t v59 = sub_100029E18(&qword_10013CB70);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v103, v59, sub_10007BB5C, 0LL, v57, v59, v58);
  uint64_t v60 = v104;
  uint64_t v61 = v105;
  sub_100029EE0(v103, v104);
  uint64_t v62 = sub_100029E18(&qword_10013DD60);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v100, v62, sub_10007BC00, 0LL, v60, v62, v61);
  uint64_t v63 = v101;
  uint64_t v64 = v102;
  sub_100029EE0(v100, v101);
  uint64_t v65 = type metadata accessor for MetricsPipeline(0LL);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v97, v65, sub_10007BD0C, 0LL, v63, v65, v64);
  uint64_t v66 = v98;
  uint64_t v67 = v99;
  sub_100029EE0(v97, v98);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v94, v66, v67);
  uint64_t v68 = v95;
  uint64_t v69 = v96;
  sub_100029EE0(v94, v95);
  uint64_t v70 = sub_100029E18(&qword_10013DD68);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v91, v70, sub_10007BE40, 0LL, v68, v70, v69);
  uint64_t v71 = v92;
  uint64_t v72 = v93;
  sub_100029EE0(v91, v92);
  uint64_t v73 = sub_100029E18(&qword_10013DD70);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v88, v73, sub_10007C104, 0LL, v71, v73, v72);
  uint64_t v74 = v89;
  uint64_t v75 = v90;
  sub_100029EE0(v88, v89);
  uint64_t v76 = sub_100029E18(&qword_10013DD78);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v85, v76, sub_10007C340, 0LL, v74, v76, v75);
  uint64_t v77 = v86;
  uint64_t v78 = v87;
  sub_100029EE0(v85, v86);
  uint64_t v79 = dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()(v77, v78);
  v84[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v84[4] = &protocol witness table for SyncTaskScheduler;
  uint64_t v80 = sub_10002C328(v84);
  SyncTaskScheduler.init()(v80);
  uint64_t v81 = type metadata accessor for ObjectGraph(0LL);
  uint64_t v82 = Promise.map<A>(on:_:)(v84, sub_10007C380, 0LL, v81);
  swift_release(v79);
  sub_100029F4C(v84);
  sub_100029F4C(v85);
  sub_100029F4C(v88);
  sub_100029F4C(v91);
  sub_100029F4C(v94);
  sub_100029F4C(v97);
  sub_100029F4C(v100);
  sub_100029F4C(v103);
  sub_100029F4C(v106);
  sub_100029F4C(v109);
  sub_100029F4C(v112);
  sub_100029F4C(v115);
  sub_100029F4C(v118);
  sub_100029F4C(v121);
  sub_100029F4C(v124);
  sub_100029F4C(v127);
  sub_100029F4C(v130);
  sub_100029F4C(v133);
  sub_100029F4C(v136);
  sub_100029F4C(v139);
  sub_100029F4C(v142);
  sub_100029F4C(v145);
  sub_100029F4C(v148);
  sub_100029F4C(v151);
  sub_100029F4C(v154);
  sub_100029F4C(v157);
  sub_100029F4C(v160);
  sub_100029F4C(v163);
  sub_100029F4C(v166);
  sub_100029F4C(v169);
  return v82;
}

uint64_t sub_10007EE64()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10007EE98(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10007EED4(void *a1)
{
  return a1;
}

uint64_t sub_10007EF08()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

unint64_t sub_10007EF34()
{
  unint64_t result = qword_10013DDB8;
  if (!qword_10013DDB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F168C, &type metadata for SimpleMetricsFieldsBuilder);
    atomic_store(result, (unint64_t *)&qword_10013DDB8);
  }

  return result;
}

unint64_t sub_10007EF78()
{
  unint64_t result = qword_10013DDC0;
  if (!qword_10013DDC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F0388, &type metadata for JSMetricsEventLinter);
    atomic_store(result, (unint64_t *)&qword_10013DDC0);
  }

  return result;
}

unint64_t sub_10007EFBC()
{
  unint64_t result = qword_10013DDE8;
  if (!qword_10013DDE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EDAFC, &type metadata for AlertActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DDE8);
  }

  return result;
}

unint64_t sub_10007F000()
{
  unint64_t result = qword_10013DDF0;
  if (!qword_10013DDF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EDBA0, &type metadata for AlertOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DDF0);
  }

  return result;
}

unint64_t sub_10007F044()
{
  unint64_t result = qword_10013DDF8;
  if (!qword_10013DDF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EDD2C, &type metadata for AppDistributionOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DDF8);
  }

  return result;
}

unint64_t sub_10007F088()
{
  unint64_t result = qword_10013DE00;
  if (!qword_10013DE00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EDF18, &type metadata for AppLaunchTrampolineActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE00);
  }

  return result;
}

unint64_t sub_10007F0CC()
{
  unint64_t result = qword_10013DE08;
  if (!qword_10013DE08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EDFC0, &type metadata for AppOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE08);
  }

  return result;
}

unint64_t sub_10007F110()
{
  unint64_t result = qword_10013DE18;
  if (!qword_10013DE18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EE610, &type metadata for ArcadeOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE18);
  }

  return result;
}

unint64_t sub_10007F154()
{
  unint64_t result = qword_10013DE20;
  if (!qword_10013DE20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EF6AC, &type metadata for CancelOrPauseInstallActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE20);
  }

  return result;
}

unint64_t sub_10007F198()
{
  unint64_t result = qword_10013DE28;
  if (!qword_10013DE28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EF834, &type metadata for ContingentOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE28);
  }

  return result;
}

unint64_t sub_10007F1DC()
{
  unint64_t result = qword_10013DE48;
  if (!qword_10013DE48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F103C, &type metadata for OpenAppActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE48);
  }

  return result;
}

unint64_t sub_10007F220()
{
  unint64_t result = qword_10013DE50;
  if (!qword_10013DE50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F11A4, &type metadata for PresentErrorActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE50);
  }

  return result;
}

unint64_t sub_10007F264()
{
  unint64_t result = qword_10013DE58;
  if (!qword_10013DE58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F1744, &type metadata for StatefulOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE58);
  }

  return result;
}

unint64_t sub_10007F2A8()
{
  unint64_t result = qword_10013DE68;
  if (!qword_10013DE68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F0E94, &type metadata for OfferAlertOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE68);
  }

  return result;
}

unint64_t sub_10007F2EC()
{
  unint64_t result = qword_10013DE70;
  if (!qword_10013DE70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F1900, &type metadata for URLOfferActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE70);
  }

  return result;
}

unint64_t sub_10007F330()
{
  unint64_t result = qword_10013DE78;
  if (!qword_10013DE78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000F1A84, &type metadata for WatchReinstallActionImplementation);
    atomic_store(result, (unint64_t *)&qword_10013DE78);
  }

  return result;
}

uint64_t sub_10007F374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10007D328(v1);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10007F3A0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10007F3CC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_10013DE8C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100039088;
  v3[7] = v2;
  return swift_task_switch(sub_10007AF78, 0LL, 0LL);
}

uint64_t sub_10007F42C()
{
  return sub_100059494();
}

void *sub_10007F434(void *a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013DEB8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v6 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.current(or:)(&v16, sub_1000AED74, 0LL, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v16 == 1)
  {
    [a1 setAnonymous:1];
    [a1 setAccount:0];
  }

  id v7 = [a1 topic];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  if (qword_10013BC28 != -1) {
    swift_once(&qword_10013BC28, sub_1000CA3CC);
  }
  if ((sub_1000C9F14(v8, v10, qword_10013FBA0) & 1) != 0)
  {
    MetricsTopicProvider.currentMetricsTopic.getter();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease(v10);
    uint64_t v10 = v12;
  }

  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  [a1 setTopic:v13];

  return a1;
}

id sub_10007F5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a1;
  uint64_t v33 = type metadata accessor for DeviceAppQuery(0LL);
  uint64_t v3 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v5 = (uint64_t *)((char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = sub_100029E18(&qword_10013DEA8);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = AsyncEvent.init()(v14);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 24) = v15;
  uint64_t v16 = sub_100029E18(&qword_10013DEB0);
  uint64_t v17 = swift_allocObject(v16, 20LL, 7LL);
  *(_DWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)(a2 + 48) = v17;
  id result = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
  if (result)
  {
    uint64_t v19 = result;
    NSString v20 = String._bridgeToObjectiveC()();
    unsigned __int8 v21 = [v19 applicationIsInstalled:v20];

    *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
    uint64_t v31 = v12;
    SyncTaskScheduler.init()();
    Swift::Int v22 = sub_1000CAA18((uint64_t)&off_10011FA20);
    swift_arrayDestroy(&unk_10011FA40, 1LL, &type metadata for String);
    Swift::Int *v5 = v22;
    uint64_t v23 = v33;
    (*(void (**)(Swift::Int *, void, uint64_t))(v3 + 104))( v5,  enum case for DeviceAppQuery.bundleIDs(_:),  v33);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    uint64_t v24 = swift_allocObject(&unk_1001223B0, 24LL, 7LL);
    swift_weakInit(v24 + 16, a2);
    swift_retain(v24);
    id v25 = sub_10007D684((uint64_t)v5, (uint64_t)v10, (uint64_t)sub_10007F8C4, v24, v32);
    uint64_t v27 = v26;
    swift_release(v24);
    (*(void (**)(Swift::Int *, uint64_t))(v3 + 8))(v5, v23);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v31, v6);
    swift_release(v24);
    v28(v10, v6);
    uint64_t v29 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v25;
    *(void *)(a2 + 40) = v27;
    swift_unknownObjectRelease(v29);
    return (id)a2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10007F8A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10007F8C4(uint64_t a1)
{
}

uint64_t sub_10007F8CC()
{
  uint64_t v1 = *(void *)(type metadata accessor for MetricsTopicProvider(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Bag(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10007F93C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

void *sub_10007F980(void *a1)
{
  return sub_10007F434(a1);
}

uint64_t sub_10007F9C4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10007F9F8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10013FB34);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10002A858;
  return sub_1000C8334(a1, v4, v5, v7, v6);
}

uint64_t sub_10007FA70(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_10013DEF4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100039088;
  return sub_100079FF8(a1, v1);
}

uint64_t sub_10007FAC4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10007FAF8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013F31C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100039088;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_10013F318
                                                                                     + dword_10013F318))( a1,  v4,  v5,  v6,  v7,  v8);
}

char *sub_10007FB8C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = sub_100029E18(&qword_10013DF60);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
  uint64_t v7 = v0;
  id v8 = [v6 currentProcess];
  [v8 setAccountMediaType:AMSAccountMediaTypeProduction];
  id v9 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStoreForClient:", v8);

  type metadata accessor for LocalPreferences(0LL);
  uint64_t v10 = static LocalPreferences.currentApplication.getter();
  id v11 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v12 = type metadata accessor for RebootstrapTrigger();
  uint64_t v13 = swift_allocObject(v12, 88LL, 7LL);
  *(void *)&v7[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_rebootstrapTrigger] = sub_100080E58( v9,  v10,  v11,  v13);
  id v14 = [objc_allocWithZone(JEUnfairLock) init];
  *(void *)&v7[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock] = v14;
  *(void *)&v7[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState] = 0xC000000000000000LL;

  v23.receiver = v7;
  v23.super_class = ObjectType;
  uint64_t v15 = (char *)objc_msgSendSuper2(&v23, "init");
  uint64_t v16 = *(void *)(*(void *)&v15[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_rebootstrapTrigger] + 80LL);
  uint64_t v17 = sub_100029E18(&qword_10013DF68);
  unint64_t v18 = sub_100081064();
  uint64_t v19 = v15;
  swift_retain(v16);
  dispatch thunk of static EventEmitter.defaultScheduler.getter(v22, v17, v18);
  EventEmitter.addObserver<A>(on:target:method:)(v22, v19, sub_10007FE48, 0LL, v17, ObjectType, v18);
  swift_release(v16);

  sub_100029F4C(v22);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v19;
}

id sub_10007FDE0(char a1, uint64_t a2)
{
  if ((a1 & 1) != 0) {
    return (id)sub_10001E2C8();
  }
  uint64_t v3 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v3 lock];
  sub_1000809A8(a2);
  return [v3 unlock];
}

uint64_t (*sub_10007FE48(void *a1))(unsigned __int8 *a1)
{
  uint64_t v2 = swift_allocObject(&unk_100122568, 24LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v3 = swift_allocObject(&unk_100122590, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_1000810D4;
  *(void *)(v3 + 24) = v2;
  id v4 = a1;
  return sub_100081104;
}

uint64_t sub_10007FEE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC38 != -1) {
    swift_once(&qword_10013BC38, sub_1000D1514);
  }
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v6, (uint64_t)qword_1001485E8);
  uint64_t v7 = sub_100029E18(&qword_10013EA00);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000013LL, 0x80000001000FCCD0LL);
  Logger.info(_:)(v9, v6, &protocol witness table for OSLogger);
  uint64_t v10 = swift_bridgeObjectRelease(v9);
  uint64_t v11 = UUID.init()(v10);
  uint64_t v12 = UUID.uuidString.getter(v11);
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___ASCViewRender);
  if (qword_10013BBC0 != -1) {
    swift_once(&qword_10013BBC0, sub_100079DAC);
  }
  [v15 bootstrapDidBeginWithTag:qword_100148570];
  uint64_t v16 = sub_10007E2E4();
  uint64_t v17 = sub_10007E5D4();
  uint64_t v18 = swift_allocObject(&unk_1001224F0, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(v18 + 24) = v14;
  uint64_t v19 = swift_allocObject(&unk_100122518, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(v19 + 24) = v14;
  uint64_t v30 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v31 = &protocol witness table for SyncTaskScheduler;
  sub_10002C328(v29);
  uint64_t v20 = swift_bridgeObjectRetain_n(v14, 2LL);
  SyncTaskScheduler.init()(v20);
  Promise.then(perform:orCatchError:on:)(sub_100081020, v18, sub_100081028, v19, v29);
  swift_release(v16);
  swift_release(v18);
  swift_release(v19);
  sub_100029F4C(v29);
  swift_bridgeObjectRelease(v14);
  uint64_t v21 = swift_allocObject(&unk_100122540, 24LL, 7LL);
  swift_unknownObjectWeakInit(v21 + 16, v1);
  uint64_t v22 = swift_allocObject(&unk_100122540, 24LL, 7LL);
  swift_unknownObjectWeakInit(v22 + 16, v1);
  unint64_t v23 = sub_100032130();
  uint64_t v24 = swift_retain(v22);
  uint64_t v25 = static OS_dispatch_queue.main.getter(v24);
  uint64_t v30 = v23;
  uint64_t v31 = &protocol witness table for OS_dispatch_queue;
  v29[0] = v25;
  Promise.then(perform:orCatchError:on:)(sub_100081054, v21, sub_10008105C, v22, v29);
  swift_release(v21);
  swift_release(v22);
  sub_100029F4C(v29);
  swift_release(v22);
  unint64_t v26 = *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState) = v17;
  swift_retain(v17);
  sub_100080CAC(v26);
  return v17;
}

id sub_10008023C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC38 != -1) {
    swift_once(&qword_10013BC38, sub_1000D1514);
  }
  uint64_t v11 = sub_10002A768(v7, (uint64_t)qword_1001485E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = sub_100029E18(&qword_10013EA00);
  uint64_t v13 = type metadata accessor for LogMessage(0LL);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
        + *(void *)(*(void *)(v13 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(33LL, 1LL);
  v15._object = (void *)0x80000001000FCD10LL;
  v15._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  void v20[3] = type metadata accessor for ObjectGraph(0LL);
  v20[0] = a1;
  swift_retain(a1);
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v20);
  sub_10004C810((uint64_t)v20);
  v16._uint64_t countAndFlagsBits = 0LL;
  v16._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v14, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v17 = *(void **)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v17 lock];
  unint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState) = a1 | 0x4000000000000000LL;
  swift_retain(a1);
  sub_100080CAC(v18);
  return [v17 unlock];
}

id sub_100080470(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC38 != -1) {
    swift_once(&qword_10013BC38, sub_1000D1514);
  }
  uint64_t v11 = sub_10002A768(v7, (uint64_t)qword_1001485E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = sub_100029E18(&qword_10013EA00);
  uint64_t v13 = type metadata accessor for LogMessage(0LL);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
        + *(void *)(*(void *)(v13 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
  v15._object = (void *)0x80000001000FCCF0LL;
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  swift_getErrorValue(a1, v25, &v23);
  uint64_t v16 = v23;
  uint64_t v17 = v24;
  void v26[3] = v24;
  unint64_t v18 = sub_10002C328(v26);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v18, v16, v17);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
  sub_10004C810((uint64_t)v26);
  v19._uint64_t countAndFlagsBits = 0LL;
  v19._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v14, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v20 = *(void **)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v20 lock];
  unint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState) = a1 | 0x8000000000000000LL;
  swift_errorRetain(a1);
  sub_100080CAC(v21);
  return [v20 unlock];
}

void sub_1000806C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_10008023C(v2);
  }

void sub_100080720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_100080470(a1);
  }

uint64_t sub_100080778(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OSLogger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState;
  unint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if (v10 >> 62 == 2 || (v10 >> 62 == 3 ? (BOOL v11 = v10 == 0xC000000000000000LL) : (BOOL v11 = 0), v11))
  {
    uint64_t v20 = sub_10007FEE0();
    return swift_release(v20);
  }

  else
  {
    if (qword_10013BC38 != -1) {
      swift_once(&qword_10013BC38, sub_1000D1514);
    }
    uint64_t v12 = sub_10002A768(v5, (uint64_t)qword_1001485E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
    uint64_t v13 = sub_100029E18(&qword_10013EA00);
    uint64_t v14 = type metadata accessor for LogMessage(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(36LL, 1LL);
    v16._object = (void *)0x80000001000FCD70LL;
    v16._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    unint64_t v17 = *(void *)(a1 + v9);
    v21[3] = &type metadata for BootstrapSession.BootstrapState;
    v21[0] = v17;
    sub_100080C74(v17);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v21);
    sub_10004C810((uint64_t)v21);
    v18._uint64_t countAndFlagsBits = 0x657461747320LL;
    v18._object = (void *)0xE600000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)(v4);
    Logger.info(_:)(v15, v5, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_1000809A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OSLogger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState;
  unint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if (v10 >> 62 == 2 || (v10 >> 62 == 3 ? (BOOL v11 = v10 == 0xC000000000000000LL) : (BOOL v11 = 0), v11))
  {
    if (qword_10013BC38 != -1) {
      swift_once(&qword_10013BC38, sub_1000D1514);
    }
    uint64_t v14 = sub_10002A768(v5, (uint64_t)qword_1001485E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v14, v5);
    uint64_t v15 = sub_100029E18(&qword_10013EA00);
    uint64_t v16 = type metadata accessor for LogMessage(0LL);
    uint64_t v17 = swift_allocObject( v15,  ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL))
          + *(void *)(*(void *)(v16 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(39LL, 1LL);
    v18._object = (void *)0x80000001000FCD40LL;
    v18._uint64_t countAndFlagsBits = 0xD000000000000021LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    unint64_t v19 = *(void *)(a1 + v9);
    _OWORD v22[3] = &type metadata for BootstrapSession.BootstrapState;
    v22[0] = v19;
    sub_100080C74(v19);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v22);
    sub_10004C810((uint64_t)v22);
    v20._uint64_t countAndFlagsBits = 0x657461747320LL;
    v20._object = (void *)0xE600000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v4);
    Logger.info(_:)(v17, v5, &protocol witness table for OSLogger);
    __n128 v21 = swift_bridgeObjectRelease(v17);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v21);
  }

  else
  {
    uint64_t v12 = sub_10007FEE0();
    swift_release(v12);
    return sub_10001E2C8();
  }

uint64_t type metadata accessor for BootstrapSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd16BootstrapSession);
}

unint64_t *initializeBufferWithCopyOfBuffer for BootstrapSession.BootstrapState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100080C74(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_100080C74(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (result >> 62 == 2) {
    return swift_errorRetain(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if ((_DWORD)v1 == 1) {
    return swift_retain(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if (!(_DWORD)v1) {
    return swift_retain(result);
  }
  return result;
}

unint64_t destroy for BootstrapSession.BootstrapState(unint64_t *a1)
{
  return sub_100080CAC(*a1);
}

unint64_t sub_100080CAC(unint64_t result)
{
  unint64_t v1 = result >> 62;
  if (result >> 62 == 2) {
    return swift_errorRelease(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if ((_DWORD)v1 == 1) {
    return swift_release(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if (!(_DWORD)v1) {
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for BootstrapSession.BootstrapState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_100080C74(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_100080CAC(v4);
  return a1;
}

unint64_t *assignWithTake for BootstrapSession.BootstrapState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_100080CAC(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BootstrapSession.BootstrapState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BootstrapSession.BootstrapState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)id result = a2 - 125;
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)id result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_100080DF0(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

void *sub_100080E0C(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_100080E1C(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 62;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 3);
    unint64_t v3 = 0xC000000000000000LL;
  }

  *id result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BootstrapSession.BootstrapState()
{
  return &type metadata for BootstrapSession.BootstrapState;
}

uint64_t sub_100080E58(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = &protocol witness table for LocalPreferences;
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(a4 + 24) = a3;
  id v8 = objc_allocWithZone(&OBJC_CLASS___JEUnfairLock);
  id v9 = a1;
  swift_retain(a2);
  id v10 = a3;
  *(void *)(a4 + 48) = [v8 init];
  id v11 = v9;
  *(void *)(a4 + 56) = sub_1000D773C(v11);
  *(void *)(a4 + 64) = v12;
  *(_BYTE *)(a4 + 72) = v13 & 1;
  uint64_t v14 = sub_100029E18(&qword_10013DF68);
  uint64_t v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v16 = AsyncEvent.init()(v15);
  *(void *)(a4 + 80) = v16;
  void v21[4] = sub_100081128;
  uint64_t v22 = v16;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  uint64_t v21[2] = sub_10008A71C;
  v21[3] = &unk_1001225A8;
  uint64_t v17 = _Block_copy(v21);
  uint64_t v18 = v22;
  swift_retain(v16);
  swift_release(v18);
  LODWORD(vswift_weakDestroy(v0 + 16) = sub_10001E3D8(v17);
  _Block_release(v17);
  *(_DWORD *)(a4 + 76) = v16;
  sub_1000D6AE0();
  uint64_t v19 = ACDAccountStoreDidChangeNotification;
  swift_retain(a4);
  [v10 addObserver:a4 selector:"accountStoreDidChange:" name:v19 object:0];
  swift_release(a4);

  swift_release(a2);
  return a4;
}

uint64_t sub_100080FFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100081020(uint64_t *a1)
{
  return sub_10007C3FC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100081028(uint64_t a1)
{
  return MetricsIdStore.init(accountStore:amsBag:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100081030()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100081054(uint64_t *a1)
{
}

void sub_10008105C(uint64_t a1)
{
}

unint64_t sub_100081064()
{
  unint64_t result = qword_10013DF70;
  if (!qword_10013DF70)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013DF68);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AsyncEvent<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013DF70);
  }

  return result;
}

uint64_t sub_1000810B0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1000810D4(char a1)
{
  return sub_10007FDE0(a1 & 1, *(void *)(v1 + 16));
}

uint64_t sub_1000810E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100081104(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100081128()
{
  return sub_1000D69CC();
}

uint64_t sub_100081130(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100081140(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

ValueMetadata *_s7BuyableVMa()
{
  return &_s7BuyableVN;
}

BOOL sub_100081160(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != 6 || (a5 | a4) != 0) {
    return 0LL;
  }
  if (a3) {
    return a3 == 6 && a1 == 2 && !a2;
  }
  return (a1 & 0xFE) == 0;
}

uint64_t sub_1000811AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_100081214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_100081278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100081284);
}

uint64_t sub_100081284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100081300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008130C);
}

uint64_t sub_10008130C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CancelOrPauseInstallAction(uint64_t a1)
{
  uint64_t result = qword_10013DFD0;
  if (!qword_10013DFD0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CancelOrPauseInstallAction);
  }
  return result;
}

uint64_t sub_1000813C0(uint64_t a1)
{
  uint64_t result = type metadata accessor for ActionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for CancelOrPauseInstallActionImplementation()
{
  return &type metadata for CancelOrPauseInstallActionImplementation;
}

unint64_t sub_100081448()
{
  unint64_t result = qword_10013FDA0;
  if (!qword_10013FDA0)
  {
    uint64_t v1 = type metadata accessor for CancelOrPauseInstallAction(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000EF630, v1);
    atomic_store(result, (unint64_t *)&qword_10013FDA0);
  }

  return result;
}

uint64_t sub_100081490(uint64_t a1, uint64_t a2, void *a3)
{
  v3[24] = a2;
  v3[25] = a3;
  v3[23] = a1;
  v3[26] = *a3;
  uint64_t v4 = type metadata accessor for DeviceAppQuery(0LL);
  v3[27] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[28] = v5;
  v3[29] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AdamID(0LL);
  v3[30] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[31] = v7;
  v3[32] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v3[33] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSLogger(0LL);
  v3[34] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[35] = v10;
  v3[36] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008156C, 0LL, 0LL);
}

uint64_t sub_10008156C()
{
  uint64_t v41 = (void *)(v0 + 16);
  if (qword_10013BC40 != -1) {
    swift_once(&qword_10013BC40, sub_1000D1538);
  }
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v39 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v37 = v1;
  uint64_t v38 = *(void *)(v0 + 200);
  uint64_t v6 = sub_10002A768(v4, (uint64_t)qword_100148600);
  *(void *)(v0 + 296) = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  *(void *)(v0 + 304) = v7;
  v7(v2, v6, v4);
  uint64_t v8 = sub_100029E18(&qword_10013EA00);
  *(void *)(v0 + 312) = v8;
  uint64_t v9 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  *(void *)(v0 + 320) = v10;
  LODWORD(v9) = *(_DWORD *)(v9 + 80);
  *(_DWORD *)(v0 + 368) = v9;
  uint64_t v11 = swift_allocObject( v8,  ((v9 + 32LL) & ~(unint64_t)v9) + v10,  v9 | 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
  v12._object = (void *)0x80000001000FCD90LL;
  v12._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  uint64_t v13 = *(int *)(type metadata accessor for CancelOrPauseInstallAction(0LL) + 20);
  *(_DWORD *)(v0 + 372) = v13;
  uint64_t v14 = *(void **)(v5 + v13);
  unint64_t v15 = sub_10005462C();
  *(void *)(v0 + 328) = v15;
  *(void *)(v0 + 80) = v15;
  *(void *)(v0 + 56) = v14;
  id v16 = v14;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 56);
  sub_10004C810(v0 + 56);
  v17._uint64_t countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)(v3);
  Logger.info(_:)(v11, v4, &protocol witness table for OSLogger);
  __n128 v18 = swift_bridgeObjectRelease(v11);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, __n128))(v37 + 8);
  *(void *)(v0 + 336) = v19;
  v19(v2, v4, v18);
  uint64_t v20 = sub_100029E18(&qword_10013D2D0);
  inject<A, B>(_:from:)(v41, v20, v38, v20, v39);
  AdamID.init(value:)([*(id *)(v5 + v13) int64value]);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v21 = *(void *)(v0 + 256);
  uint64_t v23 = *(void **)(v0 + 232);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v26 = *(void *)(v0 + 216);
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 40);
  uint64_t v40 = *(void *)(v0 + 48);
  sub_100029EE0(v41, v27);
  uint64_t v28 = sub_100029E18(qword_10013E018);
  uint64_t v29 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v30 = (v29 + 32) & ~v29;
  uint64_t v31 = swift_allocObject(v28, v30 + *(void *)(v22 + 72), v29 | 7);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v32 = v31 + v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v32, v21, v24);
  uint64_t v33 = sub_1000CAE70(v31);
  swift_setDeallocating(v31);
  swift_arrayDestroy(v32, 1LL, v24);
  swift_deallocClassInstance(v31, 32LL, 7LL);
  *uint64_t v23 = v33;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v23, enum case for DeviceAppQuery.storeIDs(_:), v26);
  uint64_t v34 = *(void *)(v40 + 8);
  uint64_t v35 = (void *)swift_task_alloc(async function pointer to dispatch thunk of DeviceAppFetcher.fetchQuery(_:)[1]);
  *(void *)(v0 + 344) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_1000818E4;
  return dispatch thunk of DeviceAppFetcher.fetchQuery(_:)(*(void *)(v0 + 232), v27, v34);
}

uint64_t sub_1000818E4(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 344LL);
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v3[28] + 8LL))(v3[29], v3[27]);
  if (v1) {
    uint64_t v5 = sub_100081E60;
  }
  else {
    uint64_t v5 = sub_100081960;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_100081960()
{
  uint64_t v1 = *(void *)(v0 + 352);
  if (!((unint64_t)v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v64 = *(int *)(v0 + 372);
    uint64_t v36 = *(unsigned __int8 *)(v0 + 368);
    uint64_t v37 = *(void *)(v0 + 320);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 304);
    uint64_t v39 = *(void *)(v0 + 312);
    uint64_t v41 = *(void *)(v0 + 288);
    uint64_t v40 = *(void *)(v0 + 296);
    uint64_t v42 = *(void *)(v0 + 264);
    uint64_t v43 = *(void *)(v0 + 272);
    uint64_t v59 = *(void *)(v0 + 192);
    uint64_t v61 = *(void *)(v0 + 328);
    __n128 v44 = swift_bridgeObjectRelease(*(void *)(v0 + 352));
    v38(v41, v40, v43, v44);
    uint64_t v45 = swift_allocObject(v39, ((v36 + 32) & ~v36) + 2 * v37, v36 | 7);
    *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDA10;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
    v46._object = (void *)0x80000001000FCDB0LL;
    v46._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v46);
    uint64_t v47 = *(void **)(v59 + v64);
    *(void *)(v0 + 176) = v61;
    *(void *)(v0 + 152) = v47;
    id v48 = v47;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 152);
    sub_10004C810(v0 + 152);
    v49._uint64_t countAndFlagsBits = 0LL;
    v49._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v49);
    LogMessage.init(stringInterpolation:)(v42);
    LogMessage.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000FCE10LL);
    Logger.error(_:)(v45, v43, &protocol witness table for OSLogger);
    __n128 v20 = swift_bridgeObjectRelease(v45);
LABEL_16:
    uint64_t v50 = *(void *)(v0 + 288);
    uint64_t v51 = *(void *)(v0 + 264);
    uint64_t v53 = *(void *)(v0 + 248);
    uint64_t v52 = *(void *)(v0 + 256);
    uint64_t v55 = *(void *)(v0 + 232);
    uint64_t v54 = *(void *)(v0 + 240);
    uint64_t v56 = *(void *)(v0 + 184);
    (*(void (**)(uint64_t, void, __n128))(v0 + 336))(v50, *(void *)(v0 + 272), v20);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
    uint64_t v57 = enum case for ActionOutcome.performed(_:);
    uint64_t v58 = type metadata accessor for ActionOutcome(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 104LL))(v56, v57, v58);
    sub_100029F4C((void *)(v0 + 16));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v55);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if (v1 < 0) {
    uint64_t v34 = *(void *)(v0 + 352);
  }
  else {
    uint64_t v34 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 352));
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(v1);
  if (!v35) {
    goto LABEL_15;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 352));
    uint64_t v2 = *(void *)(v0 + 352);
LABEL_6:
    id v4 = objc_msgSend(v3, "progress", swift_bridgeObjectRelease(v2).n128_f64[0]);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v65 = v0 + 120;
      uint64_t v67 = v3;
      id v6 = [v4 cancellationHandler];
      if (v6)
      {
        uint64_t v7 = v6;
        (*((void (**)(void))v6 + 2))();
        _Block_release(v7);
      }

      uint64_t v8 = *(unsigned __int8 *)(v0 + 368);
      uint64_t v60 = *(void *)(v0 + 328);
      uint64_t v62 = *(int *)(v0 + 372);
      uint64_t v9 = *(void *)(v0 + 312);
      uint64_t v10 = *(void *)(v0 + 264);
      uint64_t v11 = *(void *)(v0 + 272);
      uint64_t v12 = *(void *)(v0 + 192);
      uint64_t v13 = ((v8 + 32) & ~v8) + *(void *)(v0 + 320);
      uint64_t v14 = v8 | 7;
      (*(void (**)(void, void, uint64_t))(v0 + 304))(*(void *)(v0 + 288), *(void *)(v0 + 296), v11);
      uint64_t v15 = swift_allocObject(v9, v13, v14);
      *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
      v16._uint64_t countAndFlagsBits = 0xD000000000000014LL;
      v16._object = (void *)0x80000001000FCDF0LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v16);
      Swift::String v17 = *(void **)(v12 + v62);
      *(void *)(v0 + 144) = v60;
      *(void *)(v0 + 120) = v17;
      id v18 = v17;
      LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v65);
      sub_10004C810(v65);
      v19._uint64_t countAndFlagsBits = 0LL;
      v19._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v19);
      LogMessage.init(stringInterpolation:)(v10);
      Logger.info(_:)(v15, v11, &protocol witness table for OSLogger);

      swift_bridgeObjectRelease(v15);
    }

    else
    {
      uint64_t v21 = *(unsigned __int8 *)(v0 + 368);
      uint64_t v22 = *(void *)(v0 + 320);
      uint64_t v63 = *(void *)(v0 + 328);
      uint64_t v66 = *(int *)(v0 + 372);
      uint64_t v23 = *(void *)(v0 + 312);
      uint64_t v24 = *(void *)(v0 + 264);
      uint64_t v25 = *(void *)(v0 + 272);
      uint64_t v26 = *(void *)(v0 + 192);
      uint64_t v27 = v21 | 7;
      uint64_t v28 = (v21 + 32) & ~v21;
      (*(void (**)(void))(v0 + 304))();
      uint64_t v29 = swift_allocObject(v23, v28 + 2 * v22, v27);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDA10;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
      v30._object = (void *)0x80000001000FCDB0LL;
      v30._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t v31 = *(void **)(v26 + v66);
      *(void *)(v0 + 112) = v63;
      *(void *)(v0 + 88) = v31;
      id v32 = v31;
      LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 88);
      sub_10004C810(v0 + 88);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      LogMessage.init(stringInterpolation:)(v24);
      LogMessage.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000FCDD0LL);
      Logger.error(_:)(v29, v25, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v29);
    }

    goto LABEL_16;
  }

  if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v2 = *(void *)(v0 + 352);
    id v3 = *(id *)(v2 + 32);
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_100081E60()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 232);
  sub_100029F4C((void *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v4);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CancelOrPauseInstallAction(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100082068(a1, (uint64_t)v10);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_100122658, v13 + 8, v11 | 7);
  sub_100082148((uint64_t)v10, v14 + v12);
  *(void *)(v14 + v13) = a2;
  sub_100029E18((uint64_t *)&unk_10013CC30);
  uint64_t v15 = swift_retain(a2);
  uint64_t v16 = Promise.__allocating_init()(v15);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v6, 1LL, 1LL, v17);
  id v18 = (void *)swift_allocObject(&unk_100122680, 56LL, 7LL);
  v18[2] = 0LL;
  void v18[3] = 0LL;
  void v18[4] = &unk_10013E010;
  void v18[5] = v14;
  v18[6] = v16;
  swift_retain(v16);
  uint64_t v19 = sub_1000B3448((uint64_t)v6, (uint64_t)&unk_10013CE60, (uint64_t)v18);
  swift_release(v19);
  return v16;
}

uint64_t sub_100082068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancelOrPauseInstallAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000820AC()
{
  uint64_t v1 = type metadata accessor for CancelOrPauseInstallAction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for ActionMetrics(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);

  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100082148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancelOrPauseInstallAction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008218C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CancelOrPauseInstallAction(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void **)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v8 = (void *)swift_task_alloc(dword_10013E00C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10002A858;
  return sub_100081490(a1, v6, v7);
}

uint64_t sub_10008221C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100082250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

void *sub_100082258(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for RebootstrapTrigger.AccountState(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *sub_10008228C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for XPCConnectionOwner.ActiveConnection(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_1000822D8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100082308(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100082350(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for CodablePreferenceKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100079578(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodablePreferenceKey);
}

uint64_t sub_100082398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for OSLogger(0LL);
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200LL);
  uint64_t v13 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a2, a3);
  uint64_t v15 = v14;
  a4[3] = (uint64_t)&type metadata for Data;
  uint64_t result = swift_release(v12);
  *a4 = v13;
  a4[1] = v15;
  return result;
}

uint64_t sub_10008273C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v34 - v12;
  uint64_t v14 = type metadata accessor for OSLogger(0LL);
  uint64_t v15 = *(void (***)(char *, uint64_t, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100060108(a1, (uint64_t)v38);
  if (swift_dynamicCast(v37, v38, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL))
  {
    v34[4] = v14;
    uint64_t v35 = v17;
    uint64_t v19 = v37[0];
    unint64_t v18 = v37[1];
    uint64_t v20 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    uint64_t v21 = a4;
    uint64_t v22 = PropertyListDecoder.init()();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a2, v19, v18, a2, a3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(v21, 0LL, 1LL, a2);
    swift_release(v22);
    return sub_100082CE0(v19, v18);
  }

  else
  {
    uint64_t v36 = a4;
    if (qword_10013BC38 != -1) {
      swift_once(&qword_10013BC38, sub_1000D1514);
    }
    uint64_t v23 = sub_10002A768(v14, (uint64_t)qword_1001485E8);
    v15[2](v17, v23, v14);
    uint64_t v24 = sub_100029E18(&qword_10013EA00);
    uint64_t v25 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v26 = *(void *)(v25 + 72);
    uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
    uint64_t v35 = (char *)v15;
    uint64_t v28 = swift_allocObject(v24, ((v27 + 32) & ~v27) + 2 * v26, v27 | 7);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDA10;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(25LL, 1LL);
    v29._object = (void *)0x80000001000FCE30LL;
    v29._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    void v38[3] = swift_getMetatypeMetadata(a2);
    v38[0] = a2;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10004C810((uint64_t)v38);
    v30._uint64_t countAndFlagsBits = 0x6573756163656220LL;
    v30._object = (void *)0xE800000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v13);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(12LL, 1LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    sub_100060108(a1, (uint64_t)v38);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v38);
    sub_10004C810((uint64_t)v38);
    v32._uint64_t countAndFlagsBits = 0x20746F6E20736920LL;
    v32._object = (void *)0xEC00000061746144LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v11);
    Logger.error(_:)(v28, v14, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v28);
    (*((void (**)(char *, uint64_t))v35 + 1))(v17, v14);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( v36,  1LL,  1LL,  a2);
  }

uint64_t sub_100082C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100082398(a1, *(void *)(a2 + 16), *(void *)(a2 + 32), a3);
}

uint64_t sub_100082C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10008273C(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_100082CA4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100082CD0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000EF730, a1);
}

uint64_t sub_100082CE0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100082D24()
{
  unint64_t result = qword_10013E0A0;
  if (!qword_10013E0A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNull);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013E0A0);
  }

  return result;
}

void sub_100083080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t type metadata accessor for CommerceDialogHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd21CommerceDialogHandler);
}

uint64_t sub_1000830F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10008311C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100083134(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100083144(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

ValueMetadata *type metadata accessor for ContingentOfferActionImplementation()
{
  return &type metadata for ContingentOfferActionImplementation;
}

uint64_t sub_10008316C()
{
  return sub_100029FF0( &qword_10013C4E0,  &qword_10013C4D8,  off_10011E4B8,  (uint64_t)&protocol conformance descriptor for ASCContingentOffer);
}

uint64_t sub_1000831A0()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  sub_10002A728(v4, qword_10013E140);
  sub_10002A768(v4, (uint64_t)qword_10013E140);
  if (qword_10013BC30 != -1) {
    swift_once(&qword_10013BC30, sub_1000D14B4);
  }
  uint64_t v5 = sub_10002A768(v0, (uint64_t)qword_1001485D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)(v3, 0xD000000000000010LL, 0x80000001000FD060LL);
}

uint64_t sub_1000832A0(uint64_t a1, uint64_t a2, void *a3)
{
  v3[79] = a3;
  v3[78] = a2;
  v3[77] = a1;
  v3[80] = *a3;
  uint64_t v4 = sub_100029E18(&qword_10013C6C8);
  v3[81] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[82] = v5;
  v3[83] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100029E18(&qword_10013CE40);
  v3[84] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Dependency(0LL);
  v3[85] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[86] = v8;
  v3[87] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AppOffer(0LL);
  v3[88] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[89] = v10;
  v3[90] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for App.Kind(0LL);
  v3[91] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[92] = v12;
  v3[93] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AdamID(0LL);
  v3[94] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for App(0LL);
  v3[95] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[96] = v15;
  v3[97] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for State(0LL);
  v3[98] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v3[99] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[100] = swift_task_alloc(v18);
  v3[101] = swift_task_alloc(v18);
  uint64_t v19 = sub_100029E18(&qword_10013CBA0);
  v3[102] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[103] = v20;
  v3[104] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v3[105] = swift_task_alloc((*(void *)(*(void *)(v21 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for OSLogger(0LL);
  v3[106] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v3[107] = v23;
  v3[108] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000834A4, 0LL, 0LL);
}

uint64_t sub_1000834A4()
{
  uint64_t v1 = v0;
  id v2 = [*(id *)(v0 + 624) organicOffer];
  if (!v2) {
    goto LABEL_20;
  }
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ASCAppOfferProtocol);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (v5) {
    id v7 = v3;
  }
  else {
    id v7 = 0LL;
  }
  if (!v7)
  {
    swift_unknownObjectRelease(v3);
    goto LABEL_20;
  }

  uint64_t v8 = swift_getObjectType(v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  swift_unknownObjectRetain(v3);
  uint64_t v10 = (void *)v9(v8, v6);
  *(void *)(v1 + 872) = v10;
  swift_unknownObjectRelease_n(v3, 2LL);
  if (!v10)
  {
LABEL_20:
    if (qword_10013BBC8 != -1) {
      swift_once(&qword_10013BBC8, sub_1000831A0);
    }
    uint64_t v20 = *(void *)(v1 + 864);
    uint64_t v21 = *(void *)(v1 + 856);
    uint64_t v22 = *(void *)(v1 + 848);
    uint64_t v23 = *(void *)(v1 + 840);
    uint64_t v24 = *(void **)(v1 + 624);
    uint64_t v25 = *(void *)(v1 + 616);
    uint64_t v26 = sub_10002A768(v22, (uint64_t)qword_10013E140);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v26, v22);
    uint64_t v27 = sub_100029E18(&qword_10013EA00);
    uint64_t v28 = type metadata accessor for LogMessage(0LL);
    uint64_t v29 = swift_allocObject( v27,  ((*(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL))
          + *(void *)(*(void *)(v28 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(74LL, 1LL);
    v30._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v30._object = (void *)0x80000001000FCF10LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    id v31 = [v24 id];
    *(void *)(v1 + 568) = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    *(void *)(v1 + 544) = v31;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 544);
    sub_10002E92C(v1 + 544, &qword_10013C6F0);
    v32._object = (void *)0x80000001000FCF40LL;
    v32._uint64_t countAndFlagsBits = 0x100000000000001FLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v23);
    Logger.error(_:)(v29, v22, &protocol witness table for OSLogger);
    __n128 v33 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, __n128))(v21 + 8))(v20, v22, v33);
    uint64_t v34 = enum case for ActionOutcome.unsupported(_:);
    uint64_t v35 = type metadata accessor for ActionOutcome(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104LL))(v25, v34, v35);
    uint64_t v36 = *(void *)(v1 + 864);
    uint64_t v37 = *(void *)(v1 + 840);
    uint64_t v38 = *(void *)(v1 + 832);
    uint64_t v39 = *(void *)(v1 + 808);
    uint64_t v40 = *(void *)(v1 + 800);
    uint64_t v41 = *(void *)(v1 + 776);
    uint64_t v42 = *(void *)(v1 + 752);
    uint64_t v43 = *(void *)(v1 + 744);
    uint64_t v44 = *(void *)(v1 + 720);
    uint64_t v45 = v1;
    uint64_t v46 = *(void *)(v1 + 696);
    uint64_t v170 = *(void *)(v45 + 672);
    uint64_t v172 = *(void *)(v45 + 664);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v170);
    swift_task_dealloc(v172);
    return (*(uint64_t (**)(void))(v45 + 8))();
  }

  id v11 = [*(id *)(v1 + 624) streamlinedOffer];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = swift_getObjectType(v11);
    uint64_t v14 = swift_conformsToProtocol2(v13, &protocol descriptor for ASCAppOfferProtocol);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    if (v14) {
      id v16 = v12;
    }
    else {
      id v16 = 0LL;
    }
    if (v16)
    {
      uint64_t v17 = swift_getObjectType(v16);
      unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
      swift_unknownObjectRetain(v12);
      uint64_t v19 = v18(v17, v15);
      swift_unknownObjectRelease(v12);
    }

    else
    {
      uint64_t v19 = 0LL;
    }

    swift_unknownObjectRelease(v12);
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  *(void *)(v1 + 880) = v19;
  uint64_t v48 = *(void *)(v1 + 640);
  uint64_t v49 = *(void *)(v1 + 632);
  inject<A, B>(_:from:)(*(void **)(v1 + 832), *(void *)(v1 + 816), v49, *(void *)(v1 + 816), v48);
  uint64_t v50 = sub_100029E18(&qword_10013DCC0);
  inject<A, B>(_:from:)((void *)(v1 + 56), v50, v49, v50, v48);
  uint64_t v51 = v49 + qword_10013FCF0;
  swift_beginAccess(v49 + qword_10013FCF0, v1 + 576, 0LL, 0LL);
  sub_100030628(v51, v1 + 176);
  if (!*(void *)(v1 + 200))
  {
    sub_10002E92C(v1 + 176, &qword_10013C7E0);
    uint64_t v55 = sub_100029E18((uint64_t *)&unk_10013DD40);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)(v55, v55);
  }

  sub_10002C438((__int128 *)(v1 + 176), v1 + 96);
  uint64_t v52 = *(os_unfair_lock_s **)(*sub_100029EE0((void *)(v1 + 56), *(void *)(v1 + 80)) + 16LL);
  uint64_t v53 = (uint64_t *)&v52[4];
  uint64_t v54 = v52 + 6;
  os_unfair_lock_lock(v52 + 6);
  sub_100087038(v53, &v174);
  os_unfair_lock_unlock(v54);
  uint64_t v56 = *(void **)(v1 + 624);
  uint64_t v57 = v174;
  id v58 = [v56 iapItemID];
  char v173 = sub_1000C9CEC(v58, v57);
  swift_bridgeObjectRelease(v57);

  uint64_t v60 = *(void *)(v1 + 120);
  uint64_t v59 = *(void *)(v1 + 128);
  sub_100029EE0((void *)(v1 + 96), v60);
  id v61 = [v56 id];
  AdamID.init(value:)([v61 int64value]);
  unint64_t v169 = (void *)v19;
  uint64_t v149 = v1 + 256;
  uint64_t v150 = v1 + 288;
  uint64_t v152 = v1 + 320;
  uint64_t v154 = v1 + 352;
  uint64_t v157 = v1 + 384;
  uint64_t v164 = v1 + 416;
  uint64_t v167 = v1 + 448;
  uint64_t v168 = (void *)(v1 + 480);
  uint64_t v148 = v1 + 512;
  uint64_t v62 = *(void *)(v1 + 776);
  uint64_t v165 = *(void *)(v1 + 760);
  uint64_t v158 = v59;
  uint64_t v63 = *(void *)(v1 + 752);
  uint64_t v64 = *(void *)(v1 + 744);
  uint64_t v65 = *(void *)(v1 + 720);
  uint64_t v66 = *(void *)(v1 + 712);
  uint64_t v160 = *(void *)(v1 + 704);
  uint64_t v162 = *(void *)(v1 + 768);
  (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 736) + 104LL))( v64,  enum case for App.Kind.store(_:),  *(void *)(v1 + 728));
  App.init(id:kind:)(v63, v64);

  sub_10003908C();
  AppStateController.state(forApp:applying:)(v62, v65, v60, v158);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v160);
  (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v62, v165);
  if (qword_10013BBC8 != -1) {
    swift_once(&qword_10013BBC8, sub_1000831A0);
  }
  uint64_t v67 = *(void *)(v1 + 864);
  uint64_t v68 = *(void *)(v1 + 856);
  uint64_t v166 = v68;
  uint64_t v161 = *(void *)(v1 + 848);
  uint64_t v163 = v67;
  uint64_t v69 = *(void *)(v1 + 840);
  uint64_t v153 = *(void *)(v1 + 808);
  uint64_t v171 = *(void **)(v1 + 800);
  uint64_t v159 = *(void *)(v1 + 792);
  uint64_t v156 = *(void *)(v1 + 784);
  uint64_t v70 = *(void **)(v1 + 624);
  uint64_t v71 = sub_10002A768(v161, (uint64_t)qword_10013E140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v67, v71, v161);
  uint64_t v72 = sub_100029E18(&qword_10013EA00);
  uint64_t v73 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v74 = swift_allocObject( v72,  ((*(unsigned __int8 *)(v73 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))
        + *(void *)(v73 + 72),
          *(unsigned __int8 *)(v73 + 80) | 7LL);
  *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v155 = v74;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(207LL, 9LL);
  v75._uint64_t countAndFlagsBits = 0xD000000000000036LL;
  v75._object = (void *)0x80000001000FCF60LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v75);
  id v76 = [v70 offerID];
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
  uint64_t v79 = v78;

  *(void *)(v1 + 536) = &type metadata for String;
  *(void *)(v1 + 512) = v77;
  *(void *)(v1 + 520) = v79;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v148);
  sub_10002E92C(v148, &qword_10013C6F0);
  v80._uint64_t countAndFlagsBits = 0x7954726566666F0ALL;
  v80._object = (void *)0xEC000000203A6570LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v80);
  id v81 = [v70 offerType];
  type metadata accessor for ASCContingentOfferType(0LL);
  *(void *)(v1 + 280) = v82;
  *(void *)(v1 + 256) = v81;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v149);
  sub_10002E92C(v149, &qword_10013C6F0);
  v83._uint64_t countAndFlagsBits = 0x6C6D61657274730ALL;
  v83._object = (void *)0xEE00203A64656E69LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v83);
  *(void *)(v1 + 312) = &type metadata for Bool;
  *(_BYTE *)(v1 + 288) = v169 != 0LL;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v150);
  sub_10002E92C(v150, &qword_10013C6F0);
  v84._object = (void *)0x80000001000FCFA0LL;
  v84._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v84);
  id v85 = [v70 iapItemID];
  uint64_t v151 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB50, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v1 + 344) = v151;
  *(void *)(v1 + 320) = v85;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v152);
  sub_10002E92C(v152, &qword_10013C6F0);
  v86._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v86._object = (void *)0x80000001000FCFC0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v86);
  id v87 = [v70 iapItemName];
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
  uint64_t v90 = v89;

  *(void *)(v1 + 376) = &type metadata for String;
  *(void *)(v1 + 352) = v88;
  *(void *)(v1 + 360) = v90;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v154);
  sub_10002E92C(v154, &qword_10013C6F0);
  v91._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v91._object = (void *)0x80000001000FCFE0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v91);
  id v92 = [v70 iapProductName];
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
  uint64_t v95 = v94;

  *(void *)(v1 + 408) = &type metadata for String;
  *(void *)(v1 + 384) = v93;
  *(void *)(v1 + 392) = v95;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v157);
  sub_10002E92C(v157, &qword_10013C6F0);
  v96._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v96._object = (void *)0x80000001000FD000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v96);
  *(void *)(v1 + 440) = &type metadata for Bool;
  *(_BYTE *)(v1 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v173 & 1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v164);
  sub_10002E92C(v164, &qword_10013C6F0);
  v97._object = (void *)0x80000001000FD020LL;
  v97._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v97);
  id v98 = [v70 id];
  id v99 = [v98 numberValue];

  *(void *)(v1 + 472) = v151;
  *(void *)(v1 + 448) = v99;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v167);
  sub_10002E92C(v167, &qword_10013C6F0);
  v100._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v100._object = (void *)0x80000001000FD040LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v100);
  *(void *)(v1 + 504) = v156;
  uint64_t v101 = sub_10002C328(v168);
  uint64_t v102 = *(void (**)(void *, uint64_t, uint64_t))(v159 + 16);
  v102(v101, v153, v156);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v168);
  sub_10002E92C((uint64_t)v168, &qword_10013C6F0);
  v103._uint64_t countAndFlagsBits = 0LL;
  v103._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v103);
  LogMessage.init(stringInterpolation:)(v69);
  Logger.info(_:)(v155, v161, &protocol witness table for OSLogger);
  __n128 v104 = swift_bridgeObjectRelease(v155);
  (*(void (**)(uint64_t, uint64_t, __n128))(v166 + 8))(v163, v161, v104);
  v102(v171, v153, v156);
  int v105 = (*(uint64_t (**)(void *, uint64_t))(v159 + 88))(v171, v156);
  if (v105 == enum case for State.downloadable(_:))
  {
    uint64_t v106 = *(void *)(v1 + 800);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 792) + 96LL))(v106, *(void *)(v1 + 784));
    swift_bridgeObjectRelease(*(void *)(v106 + 8));
    uint64_t v107 = v169;
LABEL_33:
    if ((v107 == 0LL) | v173 & 1)
    {
      uint64_t v108 = *(void *)(v1 + 632);
      id v109 = v10;
      swift_retain(v108);
    }

    else
    {
      uint64_t v115 = *(void *)(v1 + 696);
      uint64_t v116 = v107;
      uint64_t v117 = *(void *)(v1 + 688);
      uint64_t v118 = *(void *)(v1 + 680);
      uint64_t v119 = *(void *)(v1 + 640);
      uint64_t v120 = *(void *)(v1 + 632);
      uint64_t v121 = sub_10002A030(0LL, &qword_10013CC10, off_10011E560);
      id v109 = v116;
      inject<A, B>(_:from:)((void *)(v1 + 600), v121, v120, v121, v119);
      uint64_t v122 = *(void **)(v1 + 600);
      *(void *)(v1 + 608) = [v122 offerContextByAddingFlags:2];
      Dependency.init<A>(satisfying:with:)(v121, v1 + 608, v121);
      uint64_t v108 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v115);

      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v115, v118);
    }

    goto LABEL_43;
  }

  if (v105 != enum case for State.openable(_:))
  {
    uint64_t v107 = v169;
    if (v105 == enum case for State.buyable(_:) || v105 == enum case for State.unknown(_:)) {
      goto LABEL_33;
    }
    uint64_t v123 = *(void *)(v1 + 800);
    uint64_t v124 = *(void *)(v1 + 784);
    uint64_t v125 = *(void *)(v1 + 632);
    uint64_t v126 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 792) + 8LL);
    id v109 = v10;
    v126(v123, v124);
    uint64_t v114 = v125;
LABEL_42:
    swift_retain(v114);
    uint64_t v108 = *(void *)(v1 + 632);
LABEL_43:
    *(void *)(v1 + 920) = v109;
    *(void *)(v1 + 912) = v108;
    uint64_t v127 = *(void *)(v1 + 664);
    uint64_t v128 = *(void *)(v1 + 656);
    uint64_t v129 = *(void *)(v1 + 648);
    *(void *)(v1 + 240) = sub_10002A030(0LL, (unint64_t *)&qword_10013C4F8, off_10011E4A0);
    *(void *)(v1 + 248) = sub_100029FF0( (unint64_t *)&qword_10013C500,  (unint64_t *)&qword_10013C4F8,  off_10011E4A0,  (uint64_t)&protocol conformance descriptor for ASCAppOffer);
    *(void *)(v1 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v109;
    (*(void (**)(uint64_t, void, uint64_t))(v128 + 104))( v127,  enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:),  v129);
    uint64_t v130 = async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1];
    id v131 = v109;
    uint64_t v132 = (void *)swift_task_alloc(v130);
    *(void *)(v1 + 928) = v132;
    *uint64_t v132 = v1;
    v132[1] = sub_1000848A0;
    return ActionDispatcher.perform(_:withMetrics:asPartOf:)( *(void *)(v1 + 616),  v1 + 216,  *(void *)(v1 + 664),  v108,  *(void *)(v1 + 816));
  }

  (*(void (**)(void, void))(*(void *)(v1 + 792) + 96LL))(*(void *)(v1 + 800), *(void *)(v1 + 784));
  if ((v169 == 0LL) | v173 & 1)
  {
    uint64_t v110 = *(void *)(v1 + 800);
    uint64_t v111 = *(void *)(v1 + 632);
    uint64_t v112 = type metadata accessor for AppOpenableDestination(0LL);
    uint64_t v113 = *(void (**)(uint64_t, uint64_t))(*(void *)(v112 - 8) + 8LL);
    id v109 = v10;
    v113(v110, v112);
    uint64_t v114 = v111;
    goto LABEL_42;
  }

  uint64_t v133 = *(void *)(v1 + 672);
  uint64_t v134 = *(void *)(v1 + 640);
  uint64_t v135 = *(void *)(v1 + 632);
  uint64_t v136 = sub_100029E18(&qword_10013C8C0);
  id v137 = v169;
  inject<A, B>(_:from:)((void *)(v1 + 136), v136, v135, v136, v134);
  sub_1000388F0(v1 + 136, v1 + 16);
  uint64_t v138 = swift_allocObject(&unk_100122890, 73LL, 7LL);
  *(void *)(v138 + swift_unknownObjectWeakDestroy(v0 + 16) = v135;
  *(void *)(v138 + 24) = v137;
  sub_10002C438((__int128 *)(v1 + 16), v138 + 32);
  *(_BYTE *)(v138 + 72) = 1;
  uint64_t v139 = sub_100029E18((uint64_t *)&unk_10013CC30);
  id v140 = v137;
  uint64_t v141 = swift_retain(v135);
  uint64_t v142 = Promise.__allocating_init()(v141);
  *(void *)(v1 + 888) = v142;
  uint64_t v143 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56LL))(v133, 1LL, 1LL, v143);
  uint64_t v144 = (void *)swift_allocObject(&unk_1001228B8, 56LL, 7LL);
  v144[2] = 0LL;
  v144[3] = 0LL;
  v144[4] = &unk_10013C8D0;
  v144[5] = v138;
  v144[6] = v142;
  swift_retain(v142);
  uint64_t v145 = sub_1000B3448(v133, (uint64_t)&unk_10013E168, (uint64_t)v144);
  swift_release(v145);
  unint64_t v146 = sub_10002C364();
  uint64_t v147 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Future.then()[1]);
  *(void *)(v1 + 896) = v147;
  void *v147 = v1;
  v147[1] = sub_10008453C;
  return dispatch thunk of Future.then()(*(void *)(v1 + 616), v139, v146);
}

uint64_t sub_10008453C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 896);
  *(void *)(*v1 + 904) = v0;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v2 + 888));
  if (v0) {
    uint64_t v4 = sub_10008471C;
  }
  else {
    uint64_t v4 = sub_1000845A8;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000845A8()
{
  uint64_t v1 = *(void **)(v0 + 880);
  uint64_t v2 = *(void **)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 832);
  uint64_t v4 = *(void *)(v0 + 824);
  uint64_t v5 = *(void *)(v0 + 816);
  uint64_t v6 = *(void *)(v0 + 808);
  uint64_t v20 = *(void *)(v0 + 800);
  uint64_t v7 = *(void *)(v0 + 792);
  uint64_t v8 = *(void *)(v0 + 784);

  sub_100029F4C((void *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = type metadata accessor for AppOpenableDestination(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v20, v9);
  sub_100029F4C((void *)(v0 + 96));
  sub_100029F4C((void *)(v0 + 56));
  uint64_t v10 = *(void *)(v0 + 840);
  uint64_t v11 = *(void *)(v0 + 832);
  uint64_t v12 = *(void *)(v0 + 808);
  uint64_t v13 = *(void *)(v0 + 800);
  uint64_t v14 = *(void *)(v0 + 776);
  uint64_t v15 = *(void *)(v0 + 752);
  uint64_t v16 = *(void *)(v0 + 744);
  uint64_t v17 = *(void *)(v0 + 720);
  uint64_t v18 = *(void *)(v0 + 696);
  uint64_t v21 = *(void *)(v0 + 672);
  uint64_t v22 = *(void *)(v0 + 664);
  swift_task_dealloc(*(void *)(v0 + 864));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008471C()
{
  uint64_t v1 = *(void **)(v0 + 880);
  uint64_t v2 = *(void **)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 832);
  uint64_t v4 = *(void *)(v0 + 824);
  uint64_t v5 = *(void *)(v0 + 816);
  uint64_t v6 = *(void *)(v0 + 808);
  uint64_t v23 = *(void *)(v0 + 800);
  uint64_t v7 = *(void *)(v0 + 792);
  uint64_t v8 = *(void *)(v0 + 784);

  sub_100029F4C((void *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = type metadata accessor for AppOpenableDestination(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v23, v9);
  uint64_t v10 = *(void *)(v0 + 864);
  uint64_t v11 = *(void *)(v0 + 840);
  uint64_t v12 = *(void *)(v0 + 832);
  uint64_t v13 = *(void *)(v0 + 808);
  uint64_t v14 = *(void *)(v0 + 800);
  uint64_t v15 = *(void *)(v0 + 776);
  uint64_t v16 = *(void *)(v0 + 752);
  uint64_t v17 = *(void *)(v0 + 744);
  uint64_t v18 = *(void *)(v0 + 720);
  uint64_t v20 = *(void *)(v0 + 696);
  uint64_t v21 = *(void *)(v0 + 672);
  uint64_t v22 = *(void *)(v0 + 664);
  sub_100029F4C((void *)(v0 + 96));
  sub_100029F4C((void *)(v0 + 56));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000848A0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 928LL);
  *(void *)(*(void *)v1 + 936LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[82] + 8LL))(v2[83], v2[81]);
  if (v0)
  {
    uint64_t v4 = sub_100084A8C;
  }

  else
  {
    sub_100029F4C(v2 + 27);
    uint64_t v4 = sub_100084938;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100084938()
{
  uint64_t v1 = *(void *)(v0 + 912);
  uint64_t v2 = *(void **)(v0 + 880);
  uint64_t v3 = *(void **)(v0 + 872);
  uint64_t v4 = *(void *)(v0 + 832);
  uint64_t v5 = *(void *)(v0 + 824);
  uint64_t v6 = *(void *)(v0 + 816);
  uint64_t v7 = *(void *)(v0 + 808);
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 784);

  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100029F4C((void *)(v0 + 96));
  sub_100029F4C((void *)(v0 + 56));
  uint64_t v10 = *(void *)(v0 + 840);
  uint64_t v11 = *(void *)(v0 + 832);
  uint64_t v12 = *(void *)(v0 + 808);
  uint64_t v13 = *(void *)(v0 + 800);
  uint64_t v14 = *(void *)(v0 + 776);
  uint64_t v15 = *(void *)(v0 + 752);
  uint64_t v16 = *(void *)(v0 + 744);
  uint64_t v17 = *(void *)(v0 + 720);
  uint64_t v18 = *(void *)(v0 + 696);
  uint64_t v20 = *(void *)(v0 + 672);
  uint64_t v21 = *(void *)(v0 + 664);
  swift_task_dealloc(*(void *)(v0 + 864));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084A8C()
{
  uint64_t v1 = *(void *)(v0 + 912);
  uint64_t v2 = *(void **)(v0 + 880);
  uint64_t v3 = *(void **)(v0 + 872);
  uint64_t v4 = *(void *)(v0 + 832);
  uint64_t v5 = *(void *)(v0 + 824);
  uint64_t v6 = *(void *)(v0 + 816);
  uint64_t v7 = *(void *)(v0 + 808);
  uint64_t v8 = *(void *)(v0 + 792);
  uint64_t v9 = *(void *)(v0 + 784);

  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100029F4C((void *)(v0 + 216));
  uint64_t v10 = *(void *)(v0 + 864);
  uint64_t v11 = *(void *)(v0 + 840);
  uint64_t v12 = *(void *)(v0 + 832);
  uint64_t v13 = *(void *)(v0 + 808);
  uint64_t v14 = *(void *)(v0 + 800);
  uint64_t v15 = *(void *)(v0 + 776);
  uint64_t v16 = *(void *)(v0 + 752);
  uint64_t v17 = *(void *)(v0 + 744);
  uint64_t v18 = *(void *)(v0 + 720);
  uint64_t v20 = *(void *)(v0 + 696);
  uint64_t v21 = *(void *)(v0 + 672);
  uint64_t v22 = *(void *)(v0 + 664);
  sub_100029F4C((void *)(v0 + 96));
  sub_100029F4C((void *)(v0 + 56));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084C00(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject(&unk_100122840, 32LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)(v8 + 24) = a2;
  sub_100029E18((uint64_t *)&unk_10013CC30);
  id v9 = v7;
  uint64_t v10 = swift_retain(a2);
  uint64_t v11 = Promise.__allocating_init()(v10);
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
  uint64_t v13 = (void *)swift_allocObject(&unk_100122868, 56LL, 7LL);
  id v13[2] = 0LL;
  v13[3] = 0LL;
  v13[4] = &unk_10013E160;
  v13[5] = v8;
  v13[6] = v11;
  swift_retain(v11);
  uint64_t v14 = sub_1000B3448((uint64_t)v6, (uint64_t)&unk_10013CE60, (uint64_t)v13);
  swift_release(v14);
  return v11;
}

uint64_t sub_100084D28()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100084D54(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013E15C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_100039088;
  return sub_1000832A0(a1, v5, v4);
}

uint64_t sub_100084DBC()
{
  sub_100029F4C((void *)(v0 + 32));
  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_100084DF4(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v2[8] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  void v2[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[10] = v5;
  v2[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100084E74, 0LL, 0LL);
}

uint64_t sub_100084E74()
{
  if (qword_10013BBD0 != -1) {
    swift_once(&qword_10013BBD0, sub_100085178);
  }
  uint64_t v2 = v0[5].i64[0];
  uint64_t v1 = v0[5].i64[1];
  uint64_t v4 = v0[4].i64[0];
  uint64_t v3 = v0[4].i64[1];
  int8x16_t v14 = v0[3];
  uint64_t v5 = sub_10002A768(v3, (uint64_t)qword_10013E170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v6 = sub_100029E18(&qword_10013EA00);
  uint64_t v7 = type metadata accessor for LogMessage(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(73LL, 1LL);
  v9._object = (void *)0x80000001000FD080LL;
  v9._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  v0[2].i64[1] = type metadata accessor for AdamID(0LL);
  sub_10002C328((int8x16_t *)v0[1].i64);
  App.id.getter();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v0[1]);
  sub_10002E92C((uint64_t)v0[1].i64, &qword_10013C6F0);
  v10._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v10._object = (void *)0x80000001000FD0A0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.info(_:)(v8, v3, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v11 = (int8x16_t *)swift_task_alloc(32LL);
  v0[6].i64[0] = (uint64_t)v11;
  v11[1] = vextq_s8(v14, v14, 8uLL);
  v0[6].i64[1] = (uint64_t)v12;
  char *v12 = v0;
  v12[1] = (int8x16_t *)sub_1000850A0;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000850A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 104LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000850FC, 0LL, 0LL);
}

uint64_t sub_1000850FC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  sub_100029EE0(v2, v5);
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)(v4, 1LL, v5, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100085178()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  sub_10002A728(v4, qword_10013E170);
  sub_10002A768(v4, (uint64_t)qword_10013E170);
  if (qword_10013BC30 != -1) {
    swift_once(&qword_10013BC30, sub_1000D14B4);
  }
  uint64_t v5 = sub_10002A768(v0, (uint64_t)qword_1001485D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)(v3, 0xD00000000000001ELL, 0x80000001000FD150LL);
}

uint64_t sub_100085278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v4[22] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  v4[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[24] = v7;
  v4[25] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for App(0LL);
  v4[26] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[27] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v4[28] = v10;
  v4[29] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013CE40);
  v4[30] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008534C, 0LL, 0LL);
}

uint64_t sub_10008534C()
{
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v19 = v3;
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v21 = v7;
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL);
  v22(v1, 1LL, 1LL, v8);
  sub_1000388F0(v6, v0 + 16);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v20(v2, v7, v5);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = (v9 + 72) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_100122908, v10 + v3, v9 | 7);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v11 + 24) = 0LL;
  sub_10002C438((__int128 *)(v0 + 16), v11 + 32);
  uint64_t v12 = v11 + v10;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v13(v12, v2, v5);
  sub_1000865AC(v1, (uint64_t)&unk_10013E1A8, v11);
  sub_10002E92C(v1, &qword_10013CE40);
  v22(v1, 1LL, 1LL, v8);
  v20(v2, v21, v5);
  uint64_t v14 = (v9 + 32) & ~v9;
  uint64_t v15 = swift_allocObject(&unk_100122930, v14 + v19, v9 | 7);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  v13(v15 + v14, v2, v5);
  sub_1000865AC(v1, (uint64_t)&unk_10013E1B8, v15);
  sub_10002E92C(v1, &qword_10013CE40);
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  *(void *)(v0 + 248) = v16;
  uint64_t v17 = sub_100029E18(&qword_10013E1C0);
  *uint64_t v16 = v0;
  v16[1] = sub_10008554C;
  return ThrowingTaskGroup.next(isolation:)(v0 + 264, 0LL, 0LL, v17);
}

uint64_t sub_10008554C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100085640;
  }
  else {
    uint64_t v3 = sub_1000855B0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000855B0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100085640()
{
  if (qword_10013BBD0 != -1) {
    swift_once(&qword_10013BBD0, sub_100085178);
  }
  uint64_t v21 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v22 = v1;
  uint64_t v5 = sub_10002A768(v3, (uint64_t)qword_10013E170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v5, v3);
  uint64_t v6 = sub_100029E18(&qword_10013EA00);
  uint64_t v7 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + *(void *)(v7 + 72),
         *(unsigned __int8 *)(v7 + 80) | 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(56LL, 2LL);
  v9._object = (void *)0x80000001000FD0D0LL;
  v9._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  *(void *)(v0 + 80) = type metadata accessor for AdamID(0LL);
  uint64_t v10 = sub_10002C328((void *)(v0 + 56));
  App.id.getter(v10);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 56);
  sub_10002E92C(v0 + 56, &qword_10013C6F0);
  v11._object = (void *)0x80000001000FD0F0LL;
  v11._uint64_t countAndFlagsBits = 0x1000000000000019LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue(v21, v0 + 144, v0 + 120);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 128);
  *(void *)(v0 + 112) = v13;
  uint64_t v14 = sub_10002C328((void *)(v0 + 88));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 88);
  sub_10002E92C(v0 + 88, &qword_10013C6F0);
  v15._uint64_t countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.error(_:)(v8, v3, &protocol witness table for OSLogger);
  __n128 v16 = swift_bridgeObjectRelease(v8);
  (*(void (**)(uint64_t, uint64_t, __n128))(v22 + 8))(v2, v3, v16);
  sub_100029E18((uint64_t *)&unk_10013E900);
  ThrowingTaskGroup.cancelAll()();
  swift_errorRelease(v21);
  uint64_t v17 = *(void *)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000858E8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_10013E194);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_10002A858;
  return sub_100085278(a1, a2, v7, v6);
}

uint64_t sub_100085954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v5[8] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  void v5[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[10] = v8;
  v5[11] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100029E18(&qword_10013E1E0);
  v5[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[13] = v10;
  v5[14] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013E1E8);
  v5[15] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100085A24, 0LL, 0LL);
}

uint64_t sub_100085A24()
{
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100029EE0(v1, v2);
  uint64_t v4 = dispatch thunk of AppStateController.onStateChange.getter(v2, v3);
  uint64_t v5 = sub_100029E18(&qword_10013D2B8);
  uint64_t v6 = sub_100044410( (unint64_t *)&unk_100140360,  &qword_10013D2B8,  (uint64_t)&protocol conformance descriptor for AsyncEvent<A>);
  EventEmitter.asyncStream.getter(v5, v6);
  swift_release(v4);
  uint64_t v9 = (char *)&dword_10013E1F0 + dword_10013E1F0;
  uint64_t v7 = (void *)swift_task_alloc(unk_10013E1F4);
  v0[16] = v7;
  void *v7 = v0;
  v7[1] = sub_100085AFC;
  return ((uint64_t (*)(void, void))v9)(v0[15], v0[14]);
}

uint64_t sub_100085AFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 104LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 112LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10002E92C(v1, &qword_10013E1E8);
  return swift_task_switch(sub_100085B80, 0LL, 0LL);
}

uint64_t sub_100085B80()
{
  if (qword_10013BBD0 != -1) {
    swift_once(&qword_10013BBD0, sub_100085178);
  }
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = sub_10002A768(v4, (uint64_t)qword_10013E170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v4);
  uint64_t v6 = sub_100029E18(&qword_10013EA00);
  uint64_t v7 = type metadata accessor for LogMessage(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(51LL, 1LL);
  v9._object = (void *)0x80000001000FD0D0LL;
  v9._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  *(void *)(v0 + 40) = type metadata accessor for AdamID(0LL);
  uint64_t v10 = sub_10002C328((void *)(v0 + 16));
  App.id.getter(v10);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v11._object = (void *)0x80000001000FD130LL;
  v11._uint64_t countAndFlagsBits = 0x1000000000000014LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  LogMessage.init(stringInterpolation:)(v3);
  Logger.info(_:)(v8, v4, &protocol witness table for OSLogger);
  __n128 v12 = swift_bridgeObjectRelease(v8);
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v1, v4, v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100085D68()
{
  uint64_t v1 = type metadata accessor for App(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  sub_100029F4C((void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100085DE4(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for App(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((v4 + 72) & ~v4);
  Swift::String v9 = (void *)swift_task_alloc(dword_10013E1A4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100039088;
  return sub_100085954(a1, v5, v6, v7, v8);
}

uint64_t sub_100085E78(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for State(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100029E18(&qword_10013CB58);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[8] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  uint64_t v8 = sub_100029E18(&qword_10013E1E8);
  v2[13] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100029E18(&qword_10013E1E0);
  v2[14] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[15] = v10;
  v2[16] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013E1F8);
  v2[17] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[18] = v12;
  v2[19] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100085FA8, 0LL, 0LL);
}

uint64_t sub_100085FA8()
{
  uint64_t v1 = v0[14];
  (*(void (**)(void, void, uint64_t))(v0[15] + 16LL))(v0[16], v0[3], v1);
  uint64_t v2 = sub_100044410(&qword_10013E200, &qword_10013E1E0, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v1, v2);
  uint64_t v3 = sub_100044410( &qword_10013E208,  &qword_10013E1F8,  (uint64_t)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v0[20] = v3;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[21] = v4;
  void *v4 = v0;
  v4[1] = sub_100086080;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[13], v0[17], v3);
}

uint64_t sub_100086080()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  if (v0)
  {
    *(void *)(v2 + 184) = v0;
    (*(void (**)(void, void))(*(void *)(v2 + 144) + 8LL))(*(void *)(v2 + 152), *(void *)(v2 + 136));
    uint64_t v3 = sub_100086514;
  }

  else
  {
    int v4 = enum case for State.openable(_:);
    *(_DWORD *)(v2 + 192) = enum case for State.installing(_:);
    *(_DWORD *)(v2 + 196) = v4;
    *(_DWORD *)(v2 + 200) = enum case for State.installed(_:);
    uint64_t v3 = sub_100086120;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100086120()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 64) + 48LL))(v1, 1LL, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8LL))(*(void *)(v0 + 152), *(void *)(v0 + 136));
    uint64_t v3 = 1LL;
LABEL_9:
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v31 = *(void *)(v0 + 96);
    uint64_t v30 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 80);
    uint64_t v32 = *(void *)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 72);
    uint64_t v35 = *(void *)(v0 + 48);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 64) + 56LL))( *(void *)(v0 + 16),  v3,  1LL,  *(void *)(v0 + 56));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  int v47 = *(_DWORD *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v44 = *(void *)(v0 + 72);
  uint64_t v45 = *(void *)(v0 + 48);
  uint64_t v43 = v7;
  uint64_t v8 = *(void *)(v0 + 32);
  sub_100086EF0(v1, v4);
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v49 = v4 + v9;
  uint64_t v10 = v5 + v9;
  uint64_t v11 = type metadata accessor for App(0LL);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
  v12(v5, v4, v11);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v14 = v10;
  v13(v10, v49, v8);
  uint64_t v15 = v6;
  uint64_t v16 = v6 + *(int *)(v2 + 48);
  v12(v15, v5, v11);
  v13(v16, v14, v8);
  uint64_t v50 = v11;
  v12(v44, v15, v11);
  uint64_t v17 = v44 + *(int *)(v2 + 48);
  uint64_t v46 = v16;
  v13(v17, v16, v8);
  v13(v45, v17, v8);
  sub_10002E92C(v44, &qword_10013CB58);
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 88))(v45, v8);
  if (v18 == v47)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 96LL))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    uint64_t v19 = type metadata accessor for AppInstallation(0LL);
LABEL_7:
    (*(void (**)(void))(*(void *)(v19 - 8) + 8LL))(*(void *)(v0 + 48));
LABEL_8:
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 136);
    uint64_t v23 = *(void *)(v0 + 96);
    uint64_t v24 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 32);
    uint64_t v26 = *(void *)(v0 + 40);
    uint64_t v27 = *(void *)(v0 + 16);
    sub_10002E92C(*(void *)(v0 + 88), &qword_10013CB58);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v46, v25);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v24, v50);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    sub_100086EF0(v23, v27);
    uint64_t v3 = 0LL;
    goto LABEL_9;
  }

  if (v18 == *(_DWORD *)(v0 + 196))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 96LL))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    uint64_t v19 = type metadata accessor for AppOpenableDestination(0LL);
    goto LABEL_7;
  }

  if (v18 == *(_DWORD *)(v0 + 200)) {
    goto LABEL_8;
  }
  uint64_t v38 = *(void *)(v0 + 88);
  uint64_t v37 = *(void *)(v0 + 96);
  uint64_t v39 = *(void *)(v0 + 80);
  uint64_t v40 = *(void *)(v0 + 32);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 40) + 8LL);
  v41(*(void *)(v0 + 48), v40);
  sub_10002E92C(v38, &qword_10013CB58);
  v41(v16, v40);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v39, v11);
  sub_10002E92C(v37, &qword_10013CB58);
  uint64_t v42 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(void *)(v0 + 176) = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_1000864A0;
  return dispatch thunk of AsyncIteratorProtocol.next()( *(void *)(v0 + 104),  *(void *)(v0 + 136),  *(void *)(v0 + 160));
}

uint64_t sub_1000864A0()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 176LL));
  if (v0)
  {
    v2[23] = v0;
    (*(void (**)(void, void))(v2[18] + 8LL))(v2[19], v2[17]);
    uint64_t v3 = sub_100086514;
  }

  else
  {
    uint64_t v3 = sub_100086120;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100086514()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000865AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086EA8(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_10002E92C((uint64_t)v10, &qword_10013CE40);
    uint64_t v13 = 12544LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14)
    {
LABEL_3:
      uint64_t v15 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v14);
      swift_unknownObjectRetain(v14);
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      uint64_t v19 = v18;
      swift_unknownObjectRelease(v14);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    uint64_t v13 = v20 | 0x3100LL;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14) {
      goto LABEL_3;
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v19 = 0LL;
LABEL_6:
  uint64_t v21 = *v4;
  uint64_t v22 = (void *)(v19 | v17);
  if (v19 | v17)
  {
    v27[0] = 0LL;
    v27[1] = 0LL;
    uint64_t v22 = v27;
    void v27[2] = v17;
    v27[3] = v19;
  }

  v26[0] = 1LL;
  v26[1] = v22;
  uint64_t v26[2] = v21;
  uint64_t v23 = swift_task_create(v13, v26, (char *)&type metadata for () + 8, a2, a3);
  return swift_release(v23);
}

uint64_t sub_100086734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v4[7] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  v4[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[9] = v7;
  v4[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  v4[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000867DC, 0LL, 0LL);
}

uint64_t sub_1000867DC()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10013E1C8 + dword_10013E1C8);
  uint64_t v1 = (void *)swift_task_alloc(unk_10013E1CC);
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100086864;
  return v3(0xA055690D9DB80000LL, 1LL, 1000000000000000000LL, 0LL, 0);
}

uint64_t sub_100086864()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 104LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 120LL) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0) {
    uint64_t v6 = sub_1000868E4;
  }
  else {
    uint64_t v6 = sub_100086930;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000868E4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086930()
{
  if (qword_10013BBD0 != -1) {
    swift_once(&qword_10013BBD0, sub_100085178);
  }
  uint64_t v14 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = sub_10002A768(v4, (uint64_t)qword_10013E170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v4);
  uint64_t v6 = sub_100029E18(&qword_10013EA00);
  uint64_t v7 = type metadata accessor for LogMessage(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(51LL, 1LL);
  v9._object = (void *)0x80000001000FD0D0LL;
  v9._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  *(void *)(v0 + 40) = type metadata accessor for AdamID(0LL);
  uint64_t v10 = sub_10002C328((void *)(v0 + 16));
  App.id.getter(v10);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v11._object = (void *)0x80000001000FD110LL;
  v11._uint64_t countAndFlagsBits = 0x1000000000000014LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  LogMessage.init(stringInterpolation:)(v3);
  Logger.error(_:)(v8, v4, &protocol witness table for OSLogger);
  __n128 v12 = swift_bridgeObjectRelease(v8);
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v1, v4, v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086B0C()
{
  uint64_t v1 = type metadata accessor for App(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100086B80(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for App(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((v4 + 32) & ~v4);
  uint64_t v8 = (void *)swift_task_alloc(dword_10013E1B4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100039088;
  return sub_100086734(a1, v5, v6, v7);
}

uint64_t sub_100086C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + 64) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 80) = swift_task_alloc(v14);
  *(void *)(v6 + 88) = swift_task_alloc(v14);
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_100086CA8, 0LL, 0LL);
}

uint64_t sub_100086CA8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v5 = sub_100027978( &qword_10013E1D0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  uint64_t v6 = sub_100027978( &qword_10013E1D8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  void *v8 = v0;
  v8[1] = sub_100086DC0;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100086DC0()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    return swift_task_switch(sub_100086E6C, 0LL, 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 80);
  swift_task_dealloc(*(void *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100086E6C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100086EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CE40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013CB58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100086F38()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  sub_10002A728(v4, qword_10013E210);
  sub_10002A768(v4, (uint64_t)qword_10013E210);
  if (qword_10013BC30 != -1) {
    swift_once(&qword_10013BC30, sub_1000D14B4);
  }
  uint64_t v5 = sub_10002A768(v0, (uint64_t)qword_1001485D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)(v3, 0xD00000000000001CLL, 0x80000001000FD2C0LL);
}

uint64_t sub_100087038@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

void *sub_100087054()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1000CA698((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v7 = v17;
  }

  else
  {
    uint64_t v7 = &_swiftEmptySetSingleton;
  }

  uint64_t v8 = sub_100029E18(&qword_10013E308);
  uint64_t v9 = swift_allocObject(v8, 28LL, 7LL);
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  v1[2] = v9;
  *((_DWORD *)v1 + 6) = 0;
  uint64_t v10 = sub_100029E18(&qword_10013E310);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v1[4] = AsyncEvent.init()(v11);
  sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v3);
  uint64_t v12 = (dispatch_queue_s *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v13 = swift_allocObject(&unk_1001229E0, 24LL, 7LL);
  swift_weakInit(v13 + 16, v1);
  uint64_t v14 = swift_allocObject(&unk_100122A08, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *(void *)(v14 + 24) = v2;
  aBlock[4] = sub_100088648;
  uint64_t v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100087B94;
  aBlock[3] = &unk_100122A20;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release(v19);
  swift_beginAccess(v1 + 3, aBlock, 33LL, 0LL);
  notify_register_dispatch("com.apple.appstored.IAPInfoDatabaseUpdated", (int *)v1 + 6, v12, v15);
  swift_endAccess(aBlock);
  _Block_release(v15);

  return v1;
}

uint64_t sub_100087278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v3);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (qword_10013BBD8 != -1) {
    swift_once(&qword_10013BBD8, sub_100086F38);
  }
  uint64_t v6 = a2 + 16;
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v7, (uint64_t)qword_10013E210);
  uint64_t v8 = sub_100029E18(&qword_10013EA00);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD00000000000002FLL, 0x80000001000FD310LL);
  Logger.info(_:)(v10, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v5, 1LL, 1LL, v11);
  uint64_t v12 = swift_allocObject(&unk_1001229E0, 24LL, 7LL);
  swift_beginAccess(v6, v18, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v6);
  swift_weakInit(v12 + 16, Strong);
  swift_release(Strong);
  uint64_t v14 = (void *)swift_allocObject(&unk_100122A58, 40LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  void v14[4] = v12;
  uint64_t v15 = sub_100079C78((uint64_t)v5, (uint64_t)&unk_10013E320, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_100087460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return swift_task_switch(sub_100087478, 0LL, 0LL);
}

uint64_t sub_100087478()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_10013E2DC);
    *(void *)(v0 + 64) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100087508;
    return sub_1000875D0();
  }

  else
  {
    **(void **)(v0 + 40) = 0LL;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100087508(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_10008759C;
  }

  else
  {
    swift_release(*(void *)(v4 + 56));
    *(void *)(v4 + 80) = a1;
    uint64_t v6 = sub_100087584;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100087584()
{
  **(void **)(v0 + 40) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008759C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000875D0()
{
  v1[15] = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v1[16] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OSLogger(0LL);
  v1[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[18] = v4;
  v1[19] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100087650, 0LL, 0LL);
}

uint64_t sub_100087650()
{
  if (qword_10013BBD8 != -1) {
    swift_once(&qword_10013BBD8, sub_100086F38);
  }
  uint64_t v1 = *(void *)(v0 + 136);
  *(void *)(v0 + 160) = sub_10002A768(v1, (uint64_t)qword_10013E210);
  uint64_t v2 = sub_100029E18(&qword_10013EA00);
  *(void *)(v0 + 168) = v2;
  uint64_t v3 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  *(void *)(v0 + 176) = v4;
  LODWORD(v3) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 208) = v3;
  uint64_t v5 = swift_allocObject( v2,  ((v3 + 32LL) & ~(unint64_t)v3) + v4,  v3 | 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001000FD1E0LL);
  Logger.info(_:)(v5, v1, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)swift_task_alloc(dword_10013E2E4);
  *(void *)(v0 + 184) = v6;
  void *v6 = v0;
  v6[1] = sub_10008777C;
  return sub_100087E80();
}

uint64_t sub_10008777C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 184);
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1000879F4;
  }
  else {
    uint64_t v5 = sub_1000877E8;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_1000877E8()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v20 = *(void *)(v0 + 120);
  uint64_t v21 = *(void *)(v0 + 200);
  uint64_t v8 = ((v2 + 32) & ~v2) + *(void *)(v0 + 176);
  uint64_t v9 = v2 | 7;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v4, *(void *)(v0 + 160), v5);
  uint64_t v10 = swift_allocObject(v3, v8, v9);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(67LL, 1LL);
  v11._object = (void *)0x80000001000FD250LL;
  v11._uint64_t countAndFlagsBits = 0xD000000000000043LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  *(void *)(v0 + 72) = sub_100029E18(&qword_10013CC98);
  *(void *)(v0 + 48) = v1;
  swift_bridgeObjectRetain(v1);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v0 + 48);
  sub_10002E92C(v0 + 48, &qword_10013C6F0);
  v12._uint64_t countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)(v7);
  Logger.info(_:)(v10, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  *(void *)(v0 + 112) = v1;
  AsyncEvent.post(_:)(v0 + 112);
  uint64_t v13 = *(void *)(v20 + 16);
  uint64_t v14 = swift_task_alloc(32LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v15 = (os_unfair_lock_s *)(v13 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  uint64_t v16 = *(void *)(v14 + 16);
  swift_bridgeObjectRelease(*(void *)(v13 + 16));
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  swift_bridgeObjectRetain_n(v16, 2LL);
  if (v21)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 152);
    uint64_t v19 = *(void *)(v0 + 128);
    os_unfair_lock_unlock(v15);
    swift_bridgeObjectRelease(v17);
    swift_task_dealloc(v14);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    (*(void (**)(uint64_t))(v0 + 8))(v16);
  }

uint64_t sub_1000879F4()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v7 = ((v2 + 32) & ~v2) + *(void *)(v0 + 176);
  uint64_t v8 = v2 | 7;
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 16))(v4, *(void *)(v0 + 160), v5);
  uint64_t v9 = swift_allocObject(v3, v7, v8);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(60LL, 1LL);
  v10._object = (void *)0x80000001000FD210LL;
  v10._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue(v1, v0 + 104, v0 + 80);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 88);
  *(void *)(v0 + 40) = v12;
  uint64_t v13 = sub_10002C328((void *)(v0 + 16));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
  sub_10002E92C(v0 + 16, &qword_10013C6F0);
  v14._uint64_t countAndFlagsBits = 0LL;
  v14._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.error(_:)(v9, v5, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v9);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v4, v5);
  swift_willThrow(v15);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100087B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100087BD0()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for ASDContingentPricingSubscriptionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd39ASDContingentPricingSubscriptionManager);
}

void sub_100087C44(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013E2F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100122990, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_100088598;
  uint64_t v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100087DF4;
  aBlock[3] = &unk_1001229A8;
  Swift::String v10 = _Block_copy(aBlock);
  swift_release(v12);
  [a2 getAllIAPsForActiveAccountWithResultHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100087D74(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v6 = a2;
    swift_errorRetain(a2);
    uint64_t v2 = sub_100029E18(&qword_10013E2F8);
    return CheckedContinuation.resume(throwing:)(&v6, v2);
  }

  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    if (a1) {
      uint64_t v4 = a1;
    }
    uint64_t v6 = v4;
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = sub_100029E18(&qword_10013E2F8);
    return CheckedContinuation.resume(returning:)(&v6, v5);
  }

uint64_t sub_100087DF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v7 = sub_10002A030(0LL, &qword_10013E300, &OBJC_CLASS___ASDIAPInfo_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100087E80()
{
  uint64_t v1 = sub_100029E18((uint64_t *)&unk_10013F9B0);
  v0[16] = swift_task_alloc((*(void *)(*(void *)(v1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Date(0LL);
  v0[17] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v0[18] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[19] = swift_task_alloc(v4);
  v0[20] = swift_task_alloc(v4);
  return swift_task_switch(sub_100087F10, 0LL, 0LL);
}

uint64_t sub_100087F10()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___ASDIAPHistory);
  v0[21] = v2;
  id v3 = [v2 sharedInstance];
  v0[22] = v3;
  v0[2] = v0;
  v0[3] = sub_100087FC4;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100062A14;
  v5[3] = &unk_100122968;
  v5[4] = v4;
  [v3 refreshIAPsForActiveAccountWithCompletionHandler:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_100087FC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 184LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10008847C;
  }
  else {
    uint64_t v2 = sub_100088024;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100088024()
{
  uint64_t v1 = *(void **)(v0 + 168);

  id v2 = [v1 sharedInstance];
  *(void *)(v0 + 192) = v2;
  uint64_t v3 = swift_task_alloc(32LL);
  *(void *)(v0 + 200) = v3;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 208) = v4;
  uint64_t v5 = sub_100029E18(&qword_10013E2E8);
  void *v4 = v0;
  v4[1] = sub_1000880F8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 120,  0LL,  0LL,  0xD000000000000019LL,  0x80000001000FD2A0LL,  sub_1000884E4,  v3,  v5);
}

uint64_t sub_1000880F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  *(void *)(*v1 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100088418;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 200));
    uint64_t v4 = sub_100088164;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_100088164()
{
  uint64_t v1 = *(void *)(v0 + 120);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v22 = *(void *)(v0 + 120);
    }
    else {
      uint64_t v22 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
    if (v2) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease(v1);
LABEL_25:
    uint64_t v23 = *(void *)(v0 + 152);
    uint64_t v24 = *(void *)(v0 + 128);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    (*(void (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
    return;
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    goto LABEL_24;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = *(void *)(v0 + 144);
    unint64_t v25 = v1 & 0xC000000000000001LL;
    uint64_t v26 = v2;
    while (1)
    {
      id v5 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1) : *(id *)(v1 + 8 * v3 + 32);
      uint64_t v6 = v5;
      id v7 = [v5 expirationDate];
      if (!v7) {
        break;
      }
      id v8 = v7;
      uint64_t v9 = v1;
      uint64_t v10 = *(void *)(v0 + 152);
      uint64_t v12 = *(void *)(v0 + 128);
      uint64_t v11 = *(void *)(v0 + 136);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
      uint64_t v14 = v10;
      uint64_t v1 = v9;
      v13(v12, v14, v11);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v12, 0LL, 1LL, v11);
      uint64_t v16 = *(void *)(v0 + 152);
      uint64_t v15 = *(void *)(v0 + 160);
      uint64_t v17 = *(void *)(v0 + 136);
      uint64_t v18 = ((uint64_t (*)(uint64_t, void, uint64_t))v13)(v15, *(void *)(v0 + 128), v17);
      Date.init()(v18);
      unint64_t v19 = sub_1000884EC();
      char v20 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v15, v17, v19);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v21(v16, v17);
      v21(v15, v17);
      if ((v20 & 1) != 0)
      {
        uint64_t v1 = v9;
        sub_10006BB94((Swift::Int *)&v27, [v6 adamId]);
      }

      else
      {

        uint64_t v1 = v9;
      }

uint64_t sub_100088418()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 128);

  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008847C()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 128);

  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000884E4(uint64_t a1)
{
}

unint64_t sub_1000884EC()
{
  unint64_t result = qword_10013E2F0;
  if (!qword_10013E2F0)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_10013E2F0);
  }

  return result;
}

uint64_t sub_100088534()
{
  uint64_t v1 = sub_100029E18(&qword_10013E2F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100088598(void *a1, void *a2)
{
  return sub_100087D74(a1, a2);
}

uint64_t sub_1000885E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000885F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100088600()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100088624()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100088648(uint64_t a1)
{
  return sub_100087278(a1, *(void *)(v1 + 16));
}

uint64_t sub_100088650()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10008867C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_10013E31C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002A858;
  v5[5] = a1;
  void v5[6] = v4;
  return swift_task_switch(sub_100087478, 0LL, 0LL);
}

uint64_t sub_1000886E8()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v1 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent(0LL);
  uint64_t v34 = *(void *)(v1 - 8);
  uint64_t v35 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002A030(0LL, &qword_10013E3F8, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v11 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  uint64_t v13 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, v12);

  uint64_t v14 = swift_getObjectType(v13);
  uint64_t v44 = sub_100088E10;
  uint64_t v45 = 0LL;
  aBlock = _NSConcreteStackBlock;
  uint64_t v41 = 1107296256LL;
  uint64_t v42 = sub_10008A71C;
  uint64_t v43 = &unk_100122A98;
  uint64_t v15 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v15);
  sub_100088EF4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v10, v6, v15, v14);
  _Block_release(v15);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v6, v39);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, v7);
  uint64_t v38 = v13;
  OS_dispatch_source.resume()();
  static OS_dispatch_source.MemoryPressureEvent.warning.getter();
  uint64_t v18 = static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)(v3, 0LL);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v3, v35);
  uint64_t v19 = swift_getObjectType(v18);
  uint64_t v20 = swift_allocObject(&unk_100122AD0, 24LL, 7LL);
  uint64_t v21 = v36;
  swift_unknownObjectWeakInit(v20 + 16, v36);
  uint64_t v22 = swift_allocObject(&unk_100122AF8, 32LL, 7LL);
  uint64_t v23 = ObjectType;
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v20;
  *(void *)(v22 + 24) = v23;
  uint64_t v44 = sub_100089AEC;
  uint64_t v45 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v41 = 1107296256LL;
  uint64_t v42 = sub_10008A71C;
  uint64_t v43 = &unk_100122B10;
  uint64_t v24 = _Block_copy(&aBlock);
  uint64_t v25 = swift_retain(v20);
  static DispatchQoS.unspecified.getter(v25);
  sub_100088EF4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v10, v6, v24, v19);
  _Block_release(v24);
  v16(v6, v39);
  v17(v10, v7);
  uint64_t v26 = v45;
  swift_release(v20);
  swift_release(v26);
  OS_dispatch_source.resume()();
  JSRemoteInspectorSetInspectionEnabledByDefault(0LL);
  [(id)objc_opt_self(AMSMetrics) setFlushDelayEnabled:1];
  setenv("JSC_criticalGCMemoryThreshold", "0.25", 1);
  id v27 = objc_autoreleasePoolPush();
  uint64_t v28 = *(void *)(v21 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_session);
  uint64_t v29 = *(void **)(v28 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v29 lock];
  sub_100080778(v28);
  [v29 unlock];
  objc_autoreleasePoolPop(v27);
  [*(id *)(v21 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener) resume];
  _CFRunLoopSetPerCalloutAutoreleasepoolEnabled(1LL);
  do
  {
    uint64_t v30 = objc_autoreleasePoolPush();
    CFRunLoopRunResult v31 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 15.0, 1u);
    objc_autoreleasePoolPop(v30);
  }

  while ((v31 - 1) > 1);
  swift_unknownObjectRelease(v38);
  return swift_unknownObjectRelease(v18);
}

NSString sub_100088B0C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100148578 = (uint64_t)result;
  return result;
}

char *sub_100088B40()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v3 = OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive;
  *(void *)&v0[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive] = 0LL;
  uint64_t v4 = v0;
  sub_10001E5DC((uint64_t)"Startup");
  [(id)objc_opt_self(AMSProcessInfo) setDefaultMediaTypeForCurrentProcess:AMSAccountMediaTypeProduction];
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_dialogHandler] = [objc_allocWithZone((Class)type metadata accessor for CommerceDialogHandler()) init];
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSXPCListener);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithMachServiceName:v6];

  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener] = v7;
  uint64_t v8 = type metadata accessor for XPCConnectionOwner();
  uint64_t v9 = (void *)swift_allocObject(v8, 48LL, 7LL);
  void v9[5] = 0LL;
  swift_unknownObjectWeakInit(v9 + 4, 0LL);
  void v9[2] = [objc_allocWithZone(JEUnfairLock) init];
  v9[3] = _swiftEmptyArrayStorage;
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_connections] = v9;
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_session] = [objc_allocWithZone((Class)type metadata accessor for BootstrapSession()) init];
  uint64_t v10 = type metadata accessor for ShutdownTimer();
  swift_allocObject(v10, 64LL, 7LL);
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_shutdownTimer] = sub_1000DBF3C( (uint64_t)sub_100089488,  0LL,  0.0);
  uint64_t v11 = *(void *)&v1[v3];
  *(void *)&v1[v3] = 0LL;

  swift_unknownObjectRelease(v11);
  v22.receiver = v4;
  v22.super_class = ObjectType;
  uint64_t v12 = (char *)objc_msgSendSuper2(&v22, "init");
  uint64_t v13 = OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener;
  uint64_t v14 = *(void **)&v12[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener];
  sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v15 = v12;
  id v16 = v14;
  uint64_t v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  [v16 _setQueue:v17];

  [*(id *)&v12[v13] setDelegate:v15];
  uint64_t v18 = *(void *)&v15[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_connections];
  uint64_t v19 = *(void **)(v18 + 16);
  uint64_t v20 = v15;
  swift_retain(v18);
  [v19 lock];
  *(void *)(v18 + 40) = &off_100122A78;
  swift_unknownObjectWeakAssign(v18 + 32, v20);
  [v19 unlock];
  swift_release(v18);

  return v20;
}

void sub_100088E10()
{
  if (qword_10013BC38 != -1) {
    swift_once(&qword_10013BC38, sub_1000D1514);
  }
  uint64_t v0 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v0, (uint64_t)qword_1001485E8);
  uint64_t v1 = sub_100029E18(&qword_10013EA00);
  uint64_t v2 = type metadata accessor for LogMessage(0LL);
  uint64_t v3 = swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL))
       + *(void *)(*(void *)(v2 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001000FD560LL);
  Logger.info(_:)(v3, v0, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v3);
  exit(0);
}

uint64_t sub_100088EF4()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  id v5 = _swiftEmptyArrayStorage;
  unint64_t v1 = sub_100078B04();
  uint64_t v2 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  unint64_t v3 = sub_1000766D4();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_100088F70(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BC38 != -1) {
    swift_once(&qword_10013BC38, sub_1000D1514);
  }
  uint64_t v12 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v12, (uint64_t)qword_1001485E8);
  uint64_t v13 = sub_100029E18(&qword_10013EA00);
  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001000FD520LL);
  Logger.info(_:)(v15, v12, &protocol witness table for OSLogger);
  uint64_t v16 = swift_bridgeObjectRelease(v15);
  uint64_t v17 = static os_signpost_type_t.event.getter(v16);
  sub_10002A030(0LL, (unint64_t *)&unk_10013DBB0, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v18 = (void *)static OS_os_log.default.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "Daemon.memoryWarning", 20LL, 2LL, v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = sub_10002A030(0LL, (unint64_t *)&qword_10013CBB0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  uint64_t v21 = swift_allocObject(&unk_100122B48, 32LL, 7LL);
  uint64_t v22 = v32;
  uint64_t v23 = v33;
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v33;
  *(void *)(v21 + 24) = v22;
  aBlock[4] = sub_100089AF4;
  uint64_t v38 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = &unk_100122B60;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v25 = v38;
  swift_retain(v23);
  uint64_t v26 = swift_release(v25);
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  unint64_t v27 = sub_100078B04();
  uint64_t v28 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  unint64_t v29 = sub_1000766D4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v2, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v7, v35);
}

void sub_1000892D0(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  if (qword_10013BBE0 != -1) {
    swift_once(&qword_10013BBE0, sub_100088B0C);
  }
  uint64_t v3 = a1 + 16;
  uint64_t v4 = qword_100148578;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  [v2 postNotificationName:v4 object:Strong];
}

uint64_t type metadata accessor for Daemon()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd6Daemon);
}

void sub_100089488()
{
  if (qword_10013BC38 != -1) {
    swift_once(&qword_10013BC38, sub_1000D1514);
  }
  uint64_t v0 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v0, (uint64_t)qword_1001485E8);
  uint64_t v1 = sub_100029E18(&qword_10013EA00);
  uint64_t v2 = type metadata accessor for LogMessage(0LL);
  uint64_t v3 = swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL))
       + *(void *)(*(void *)(v2 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000024LL, 0x80000001000FD490LL);
  Logger.info(_:)(v3, v0, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = CFRunLoopGetMain();
  CFRunLoopStop(v4);

  exit(0);
}

BOOL sub_100089584(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = a1;
  uint64_t v12 = sub_1000E0654(v11, 0xD000000000000024LL, 0x80000001000FD400LL);
  if (v12)
  {
    sub_1000DBD94();
    uint64_t v13 = OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive;
    if (!*(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive))
    {
      uint64_t v14 = os_transaction_create("Daemon.keepAlive");
      uint64_t v15 = *(void *)(v2 + v13);
      *(void *)(v2 + v13) = v14;
      swift_unknownObjectRelease(v15);
    }

    uint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_session);
    uint64_t v17 = type metadata accessor for BootstrapSession();
    uint64_t v41 = v17;
    uint64_t v42 = &off_1001224D0;
    v40[0] = v16;
    uint64_t v18 = (objc_class *)type metadata accessor for ServiceBrokerClient();
    id v19 = objc_allocWithZone(v18);
    uint64_t v20 = sub_10002ACB8((uint64_t)v40, v17);
    __chkstk_darwin(v20);
    uint64_t v22 = (uint64_t *)((char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v23 + 16))(v22);
    uint64_t v24 = *v22;
    v39[3] = v17;
    v39[4] = &off_1001224D0;
    v39[0] = v24;
    sub_1000388F0((uint64_t)v39, (uint64_t)v19 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session);
    v38.receiver = v19;
    v38.super_class = v18;
    id v25 = v16;
    id v26 = objc_msgSendSuper2(&v38, "init");
    sub_100029F4C(v39);
    sub_100029F4C(v40);

    id v27 = v26;
    id v28 = sub_10002613C();
    sub_1000DFC7C((uint64_t)v27, (uint64_t)v28, v12);

    [v12 resume];
  }

  else
  {
    if (qword_10013BC38 != -1) {
      swift_once(&qword_10013BC38, sub_1000D1514);
    }
    uint64_t v29 = sub_10002A768(v7, (uint64_t)qword_1001485E8);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
    uint64_t v30 = sub_100029E18(&qword_10013EA00);
    uint64_t v31 = type metadata accessor for LogMessage(0LL);
    uint64_t v32 = swift_allocObject( v30,  ((*(unsigned __int8 *)(*(void *)(v31 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v31 - 8) + 80LL))
          + *(void *)(*(void *)(v31 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v31 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(50LL, 1LL);
    v33._uint64_t countAndFlagsBits = 0xD000000000000032LL;
    v33._object = (void *)0x80000001000FD430LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    uint64_t v41 = sub_10002A030(0LL, &qword_10013E3F0, &OBJC_CLASS___NSXPCConnection_ptr);
    v40[0] = v11;
    id v34 = v11;
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v40);
    sub_10004C810((uint64_t)v40);
    v35._uint64_t countAndFlagsBits = 0LL;
    v35._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.error(_:)(v32, v7, &protocol witness table for OSLogger);
    __n128 v36 = swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v36);
  }

  return v12 != 0LL;
}

uint64_t sub_100089934()
{
  id v1 = [(id)objc_opt_self(ASCDefaults) daemonDefaults];
  unsigned __int8 v2 = [v1 disableShutdownTimer];

  if ((v2 & 1) == 0)
  {
    if (qword_10013BC38 != -1) {
      swift_once(&qword_10013BC38, sub_1000D1514);
    }
    uint64_t v5 = type metadata accessor for OSLogger(0LL);
    sub_10002A768(v5, (uint64_t)qword_1001485E8);
    uint64_t v6 = sub_100029E18(&qword_10013EA00);
    uint64_t v7 = type metadata accessor for LogMessage(0LL);
    uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
         + *(void *)(*(void *)(v7 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.init(stringLiteral:)(0xD000000000000024LL, 0x80000001000FD490LL);
    Logger.info(_:)(v8, v5, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v8);
    uint64_t v9 = CFRunLoopGetMain();
    CFRunLoopStop(v9);

    exit(0);
  }

  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive);
  *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive) = 0LL;
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100089A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100089A9C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100089AA4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100089AC8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100089AEC()
{
  return sub_100088F70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100089AF4()
{
}

uint64_t sub_100089B10()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v32[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v0[2];
  if (*(void *)(v10 + 16))
  {
    uint64_t v11 = sub_100029E18(&qword_10013D260);
    uint64_t v12 = swift_allocObject( v11,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + *(void *)(v7 + 72),
            *(unsigned __int8 *)(v7 + 80) | 7LL);
    __int128 v31 = xmmword_1000EDBE0;
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    static DispatchWorkItemFlags.barrier.getter(v12);
    v32[0] = v12;
    uint64_t v13 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v14 = sub_100029E18((uint64_t *)&unk_10013DBD0);
    uint64_t v15 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v32, v14, v15, v6, v13);
    sub_100029E18(&qword_10013E5A0);
    OS_dispatch_queue.sync<A>(flags:execute:)(v9, sub_100092434);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v16 = v32[1];
    if (LOBYTE(v32[0]) == 1)
    {
      if (qword_10013BC58 != -1) {
        swift_once(&qword_10013BC58, sub_1000D1598);
      }
      uint64_t v17 = type metadata accessor for OSLogger(0LL);
      sub_10002A768(v17, (uint64_t)qword_100148648);
      uint64_t v18 = sub_100029E18(&qword_10013EA00);
      uint64_t v19 = type metadata accessor for LogMessage(0LL);
      uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
            + *(void *)(*(void *)(v19 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
      v21._uint64_t countAndFlagsBits = 0LL;
      v21._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v21);
      LogMessage.StringInterpolation.appendInterpolation(identity:)(v1);
      v22._object = (void *)0x80000001000FD790LL;
      v22._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      LogMessage.init(stringInterpolation:)(v5);
      Logger.info(_:)(v20, v17, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v20);
      uint64_t Observer = type metadata accessor for DefaultAppStateController.DataSourceLoadObserver();
      uint64_t v24 = (void *)swift_allocObject(Observer, 32LL, 7LL);
      void v24[2] = [objc_allocWithZone(JEUnfairLock) init];
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1000CA67C((uint64_t)_swiftEmptyArrayStorage);
      }

      else
      {
        id v25 = &_swiftEmptySetSingleton;
      }

      v24[3] = v25;
      swift_retain(v24);
      uint64_t v26 = swift_bridgeObjectRetain(v10);
      id v27 = sub_10009244C(v26, v24);
      swift_bridgeObjectRelease(v10);
      swift_release(v24);
      id v28 = (void *)swift_allocObject(&unk_100122DA8, 48LL, 7LL);
      void v28[2] = v1;
      void v28[3] = v27;
      void v28[4] = v24;
      void v28[5] = v16;
      swift_retain(v24);
      swift_retain(v1);
      swift_retain(v16);
      sub_10008BF88((uint64_t)sub_10009263C, (uint64_t)v28, 30.0);
      swift_release(v24);
      swift_release(v28);
    }
  }

  else
  {
    unint64_t v29 = v0[9];
    v0[9] = 1LL;
    sub_100092648(v29);
    sub_100029E18(&qword_10013E5A8);
    v32[3] = v2;
    v32[4] = &off_100122C20;
    v32[0] = v0;
    swift_retain(v0);
    return Promise.__allocating_init(value:)(v32);
  }

  return v16;
}

uint64_t sub_100089F24(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26[1] = *(void *)(v5 + 64);
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = swift_allocObject(&unk_100122CB8, 64LL, 7LL);
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
  *(void *)(v19 + 24) = a3;
  *(void *)(v19 + 32) = a4;
  *(void *)(v19 + 40) = a1;
  *(_BYTE *)(v19 + 48) = a2;
  *(double *)(v19 + 56) = a5;
  aBlock[4] = sub_10008D3FC;
  uint64_t v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = &unk_100122CD0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v18);
  swift_retain(a4);
  uint64_t v21 = swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v21);
  id v28 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v24 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v23, v24, v11, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v13, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release(v30);
}

double sub_10008A14C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v26 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100029E18(&qword_10013D260);
  uint64_t v11 = swift_allocObject( v10,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(void *)(v7 + 72),
          *(unsigned __int8 *)(v7 + 80) | 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static DispatchWorkItemFlags.barrier.getter(v11);
  aBlock[0] = v11;
  uint64_t v12 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v14 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v25 = v12;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v13, v14, v6, v12);
  uint64_t v29 = a1;
  uint64_t v30 = v2;
  sub_100029E18(&qword_10013E590);
  OS_dispatch_queue.sync<A>(flags:execute:)(v9, sub_1000923B0);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  uint64_t v16 = aBlock[0];
  if ((aBlock[0] & 0xC000000000000001LL) != 0)
  {
    if (aBlock[0] < 0LL) {
      uint64_t v17 = aBlock[0];
    }
    else {
      uint64_t v17 = aBlock[0] & 0xFFFFFFFFFFFFFF8LL;
    }
    if (__CocoaSet.count.getter(v17)) {
      goto LABEL_6;
    }
  }

  else if (*(void *)(aBlock[0] + 16LL))
  {
LABEL_6:
    v24[1] = *(void *)(v2 + 64);
    uint64_t v18 = *(void *)(v2 + 16);
    uint64_t v19 = (void *)swift_allocObject(&unk_100122D30, 40LL, 7LL);
    v19[2] = v18;
    void v19[3] = v16;
    void v19[4] = a1;
    aBlock[4] = sub_1000923FC;
    Swift::String v33 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10008A71C;
    aBlock[3] = &unk_100122D48;
    uint64_t v20 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(v18);
    uint64_t v21 = swift_bridgeObjectRetain(a1);
    uint64_t v22 = v26;
    static DispatchQoS.unspecified.getter(v21);
    __int128 v31 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v13, v14, v6, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v22, v9, v20);
    _Block_release(v20);
    v15(v9, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v28);
    swift_release(v33);
    return result;
  }

  *(void *)&double result = swift_bridgeObjectRelease(v16).n128_u64[0];
  return result;
}

uint64_t sub_10008A43C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v18 = a4;
  uint64_t v17 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013D260);
  uint64_t v12 = swift_allocObject( v11,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 72),
          *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static DispatchWorkItemFlags.barrier.getter(v12);
  uint64_t v24 = v12;
  uint64_t v13 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v15 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v14, v15, v7, v13);
  uint64_t v19 = v4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = v17;
  char v23 = v18;
  OS_dispatch_queue.sync<A>(flags:execute:)(v10, sub_100092368);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v24;
}

void sub_10008A5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = v2;
  uint64_t v18 = a1;
  __int128 v19 = xmmword_1000EEBB0;
  char v20 = 6;
  OS_dispatch_queue.sync<A>(execute:)(v21, sub_10005FFA4, &v16, &type metadata for AppState_V1);
  if (((1 << v22) & 0x72) == 0)
  {
    if (((1 << v22) & 0xC) != 0)
    {
      sub_1000484C0(v21[0], v21[1], v22);
    }

    else
    {
      sub_10004886C(v21[0]);
      if ((v6 & 1) != 0) {
        return;
      }
    }
  }

  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(*(void *)(v3 + 16));
    uint64_t v9 = v8 - 1;
    uint64_t v10 = (uint64_t *)(v7 + 40);
    do
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(v10 - 1);
      uint64_t v13 = *v10;
      uint64_t ObjectType = swift_getObjectType(v12);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
      swift_unknownObjectRetain(v12);
      LOBYTE(v13) = v15(a1, a2, ObjectType, v13);
      swift_unknownObjectRelease(v12);
      if ((v13 & 1) != 0) {
        break;
      }
      uint64_t v9 = v11 - 1;
      v10 += 2;
    }

    while (v11);
    swift_bridgeObjectRelease(v7);
  }

  sub_10008A43C(a1, a2, 0LL, 0);
}

uint64_t sub_10008A71C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_10008A748(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.makeIterator()(a1);
    uint64_t v3 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    unint64_t v4 = sub_1000445F4();
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    uint64_t v1 = v25[0];
    uint64_t v22 = v25[1];
    uint64_t v5 = v25[2];
    uint64_t v6 = v25[3];
    unint64_t v7 = v25[4];
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
  }

  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v14 = v6;
      goto LABEL_31;
    }

    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v19 >= v11) {
      goto LABEL_34;
    }
    unint64_t v20 = *(void *)(v22 + 8 * v19);
    uint64_t v14 = v6 + 1;
    if (!v20)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v22 + 8 * v14);
      if (!v20)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_34;
        }
        unint64_t v20 = *(void *)(v22 + 8 * v14);
        if (!v20)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_34;
          }
          unint64_t v20 = *(void *)(v22 + 8 * v14);
          if (!v20)
          {
            uint64_t v14 = v6 + 5;
            if (v6 + 5 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v22 + 8 * v14);
            if (!v20)
            {
              uint64_t v21 = v6 + 6;
              while (v11 != v21)
              {
                unint64_t v20 = *(void *)(v22 + 8 * v21++);
                if (v20)
                {
                  uint64_t v14 = v21 - 1;
                  goto LABEL_30;
                }
              }

void sub_10008A9E4(uint64_t a1)
{
  int64_t v2 = 0LL;
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_10008AB3C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

id sub_10008AB68(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(v3 + 16);
  [v4 lock];
  swift_beginAccess(v3 + 24, v7, 33LL, 0LL);
  uint64_t v5 = swift_bridgeObjectRetain(v2);
  sub_10008A748(v5);
  swift_endAccess(v7);
  return [v4 unlock];
}

uint64_t sub_10008ABE8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 72) == 1LL;
  return result;
}

uint64_t sub_10008ABFC(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v28 = (char *)v24 - v10;
  __chkstk_darwin(v9);
  v24[3] = (char *)v24 - v11;
  uint64_t v25 = type metadata accessor for OSLogger(0LL);
  uint64_t v27 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v26 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = v4 + 32;
  swift_beginAccess(v4 + 32, &v31, 32LL, 0LL);
  uint64_t v13 = *(void *)(v4 + 32);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v30 = a1;
  if (v14)
  {
    id v15 = a1;
    unint64_t v16 = sub_10008D4F0((uint64_t)v15);
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = *(void *)(v13 + 56) + 24 * v16;
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      char v21 = *(_BYTE *)(v18 + 16);
      sub_100048494(*(void *)v18, v20, v21);
    }

    else
    {
      uint64_t v20 = 0LL;
      char v21 = 6;
      uint64_t v19 = 2LL;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
    char v21 = 6;
    uint64_t v19 = 2LL;
  }

  swift_endAccess(&v31);
  sub_100048CA8(v19, v20, v21);
  if ((v22 & 1) == 0) {
    __asm { BR              X11 }
  }

  sub_1000484C0(v19, v20, v21);
  return 1LL;
}

void sub_10008B18C()
{
  uint64_t v5 = @"updatable";
  sub_1000484C0(v1, v2, v3);
  *(void *)(v4 - 152) = type metadata accessor for ASCAppState(0LL);
  *(void *)(v4 - 176) = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 176);
  sub_10002E92C(v4 - 176, &unk_10013C6F0);
  v6._uint64_t countAndFlagsBits = 540945696LL;
  v6._object = (void *)0xE400000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  __asm { BR              X11 }

void sub_10008B198()
{
  uint64_t v5 = @"downloadable";
  sub_1000484C0(v1, v2, v3);
  *(void *)(v4 - 152) = type metadata accessor for ASCAppState(0LL);
  *(void *)(v4 - 176) = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 176);
  sub_10002E92C(v4 - 176, &unk_10013C6F0);
  v6._uint64_t countAndFlagsBits = 540945696LL;
  v6._object = (void *)0xE400000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  __asm { BR              X11 }

void sub_10008B1A4()
{
  uint64_t v5 = @"installing";
  sub_1000484C0(v1, v2, v3);
  *(void *)(v4 - 152) = type metadata accessor for ASCAppState(0LL);
  *(void *)(v4 - 176) = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 176);
  sub_10002E92C(v4 - 176, &unk_10013C6F0);
  v6._uint64_t countAndFlagsBits = 540945696LL;
  v6._object = (void *)0xE400000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  __asm { BR              X11 }

void sub_10008B1B0()
{
  uint64_t v5 = @"openable";
  sub_1000484C0(v1, v2, v3);
  *(void *)(v4 - 152) = type metadata accessor for ASCAppState(0LL);
  *(void *)(v4 - 176) = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 176);
  sub_10002E92C(v4 - 176, &unk_10013C6F0);
  v6._uint64_t countAndFlagsBits = 540945696LL;
  v6._object = (void *)0xE400000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  __asm { BR              X11 }

void sub_10008B1BC()
{
}

void sub_10008B248()
{
  *(void *)(v3 - 152) = v0;
  *(void *)(v3 - 176) = @"purchased";
  uint64_t v4 = @"purchased";
  uint64_t v5 = *(void *)(v3 - 200);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 176);
  sub_10002E92C(v3 - 176, &qword_10013C6F0);
  v6._uint64_t countAndFlagsBits = 0LL;
  v6._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)(v5);
  uint64_t v7 = *(void *)(v3 - 256);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(6LL, 1LL);
  v8._uint64_t countAndFlagsBits = 0x203A656C7572LL;
  v8._object = (void *)0xE600000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  uint64_t v9 = *(void *)(v3 - 104);
  uint64_t v10 = sub_100029EE0((void *)(v3 - 128), v9);
  uint64_t DynamicType = swift_getDynamicType(v10, v9, 1LL);
  *(void *)(v3 - 152) = swift_getMetatypeMetadata(DynamicType);
  *(void *)(v3 - 176) = DynamicType;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 176);
  sub_10002E92C(v3 - 176, &qword_10013C6F0);
  v12._uint64_t countAndFlagsBits = 0LL;
  v12._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)(v7);
  uint64_t v13 = *(void *)(v3 - 216);
  Logger.error(_:)(v1, v2, &protocol witness table for OSLogger);
  __n128 v14 = swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)(v3 - 208) + 8LL))(v13, v2, v14);
  sub_100029F4C((void *)(v3 - 128));
  JUMPOUT(0x10008B16CLL);
}

void sub_10008B3C0( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  id v14 = a2;
  id v15 = v14;
  if (v13)
  {
    unint64_t v16 = sub_10008D4F0((uint64_t)v14);
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = *(void *)(v12 + 56) + 24 * v16;
      a3 = *(void *)v18;
      a4 = *(void *)(v18 + 8);
      a5 = *(_BYTE *)(v18 + 16);
    }
  }

  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  *(_BYTE *)(a6 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  swift_endAccess(v19);
  sub_100048494(a3, a4, a5);
}

void sub_10008B484(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X11 }

uint64_t sub_10008B4E8()
{
  if (!*(void *)(v0 + 16))
  {
    uint64_t v30 = 0LL;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    goto LABEL_9;
  }

  Swift::String v8 = @"purchased";
  unint64_t v9 = sub_10008D570((uint64_t)v8);
  if ((v10 & 1) == 0)
  {
    uint64_t v30 = 0LL;
    __int128 v28 = 0u;
    __int128 v29 = 0u;

    goto LABEL_9;
  }

  sub_1000388F0(*(void *)(v0 + 56) + 40 * v9, (uint64_t)&v28);

  if (!*((void *)&v29 + 1))
  {
LABEL_9:
    uint64_t result = sub_10002E92C((uint64_t)&v28, &qword_10013E598);
    *uint64_t v1 = 0;
    return result;
  }

  sub_10002C438(&v28, (uint64_t)v31);
  swift_beginAccess(v6 + 32, &v28, 32LL, 0LL);
  uint64_t v11 = *(void *)(v6 + 32);
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v7 - 72) = v3;
  uint64_t v27 = v4;
  if (v12)
  {
    id v26 = v5;
    unint64_t v13 = sub_10008D4F0((uint64_t)v26);
    if ((v14 & 1) != 0)
    {
      uint64_t v15 = *(void *)(v11 + 56) + 24 * v13;
      unint64_t v17 = *(void *)v15;
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v18 = *(unsigned __int8 *)(v15 + 16);
      sub_100048494(*(void *)v15, v16, *(_BYTE *)(v15 + 16));
    }

    else
    {
      uint64_t v16 = 0LL;
      uint64_t v18 = 6LL;
      unint64_t v17 = 2LL;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 6LL;
    unint64_t v17 = 2LL;
  }

  swift_endAccess(&v28);
  uint64_t v20 = v32;
  uint64_t v21 = v33;
  sub_100029EE0(v31, v32);
  char v22 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(v21 + 8))( v17,  v16,  v18,  v27,  *(void *)(v7 - 72),  v2,  v20,  v21);
  BOOL v24 = v17 > 1 && v18 > 5;
  char v25 = (v22 & 1) != 0 || v24;
  sub_1000484C0(v17, v16, v18);
  *uint64_t v1 = v25;
  return sub_100029F4C(v31);
}

id sub_10008B6FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  id result = [*(id *)(a1 + 40) containsObject:a2];
  *a3 = (_BYTE)result;
  return result;
}

id sub_10008B738(char a1, uint64_t a2)
{
  uint64_t v2 = &selRef_addObject_;
  if ((a1 & 1) == 0) {
    uint64_t v2 = &selRef_removeObject_;
  }
  return [*(id *)(a2 + 40) *v2];
}

unint64_t sub_10008B780@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[9];
  if (v4)
  {
    if (v4 == 1)
    {
      uint64_t v5 = *a1;
      *(_BYTE *)a2 = 0;
      sub_100029E18(&qword_10013E5A8);
      v10[3] = v5;
      v10[4] = &off_100122C20;
      v10[0] = a1;
      swift_retain(a1);
      *(void *)(a2 + 8) = Promise.__allocating_init(value:)(v10);
    }

    else
    {
      *(_BYTE *)a2 = 0;
      *(void *)(a2 + 8) = v4;
    }
  }

  else
  {
    uint64_t v6 = sub_100029E18(&qword_10013E5A8);
    uint64_t v7 = Promise.__allocating_init()(v6);
    unint64_t v8 = a1[9];
    a1[9] = v7;
    swift_retain(v7);
    sub_100092648(v8);
    *(_BYTE *)a2 = 1;
    *(void *)(a2 + 8) = v7;
  }

  return sub_10009273C(v4);
}

uint64_t sub_10008B85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a3;
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v65 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v62 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100029E18(&qword_10013E5B0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100029E18(&qword_10013E5B8);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v74 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v73 = (char *)v60 - v18;
  __chkstk_darwin(v17);
  uint64_t v72 = (char *)v60 - v19;
  uint64_t v71 = sub_100029E18(&qword_10013E5C0);
  __chkstk_darwin(v71);
  uint64_t v70 = (__int128 *)((char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v69 = *(void *)(v21 + 16);
  if (v69)
  {
    uint64_t v76 = a1;
    v60[1] = a4;
    uint64_t v75 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(a2);
    uint64_t v22 = 0LL;
    uint64_t v67 = v12;
    uint64_t v68 = a2;
    uint64_t v66 = v21;
    uint64_t v23 = v74;
    while (v75 != v22)
    {
      __int128 v77 = *(_OWORD *)(v21 + 16 * v22 + 32);
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))( v12,  a2 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + *(void *)(v14 + 72) * v22,
        v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0LL, 1LL, v13);
      ++v22;
      BOOL v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      char v25 = v72;
      v24(v72, v12, v13);
      id v26 = v70;
      uint64_t v27 = *(int *)(v71 + 48);
      __int128 v28 = (char *)v70 + v27;
      *uint64_t v70 = v77;
      v24((char *)v26 + v27, v25, v13);
      __int128 v29 = v73;
      v24(v73, v28, v13);
      uint64_t v30 = v77;
      uint64_t ObjectType = swift_getObjectType(v77);
      uint64_t v32 = *((void *)&v77 + 1);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(*((void *)&v77 + 1) + 16LL);
      swift_unknownObjectRetain(v30);
      uint64_t v34 = v33(ObjectType, v32);
      SyncEvent.removeObserver(_:)(v29);
      uint64_t v35 = sub_100029E18(&qword_10013D2E8);
      uint64_t v36 = sub_100044410( &qword_10013E5C8,  &qword_10013D2E8,  (uint64_t)&protocol conformance descriptor for SyncEvent<A>);
      dispatch thunk of static EventEmitter.defaultScheduler.getter(v78, v35, v36);
      uint64_t v37 = type metadata accessor for DefaultAppStateController();
      EventEmitter.addObserver<A>(on:target:method:)(v78, v76, sub_10008BF28, 0LL, v35, v37, v36);
      uint64_t v12 = v67;
      swift_unknownObjectRelease(v30);
      swift_release(v34);
      sub_100029F4C(v78);
      objc_super v38 = *(void (**)(char *, uint64_t))(v14 + 8);
      v38(v23, v13);
      uint64_t v39 = v29;
      uint64_t v21 = v66;
      v38(v39, v13);
      a2 = v68;
      if (v69 == v22) {
        goto LABEL_9;
      }
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
LABEL_8:
    sub_10002E92C((uint64_t)v12, &qword_10013E5B0);
LABEL_9:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v21);
    a1 = v76;
  }

  uint64_t v40 = v61;
  uint64_t v41 = *(void **)(v61 + 16);
  [v41 lock];
  swift_beginAccess(v40 + 24, v79, 0LL, 0LL);
  uint64_t v42 = *(void *)(v40 + 24);
  swift_bridgeObjectRetain(v42);
  [v41 unlock];
  sub_10005B1B4(v42);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = sub_100029E18(&qword_10013D260);
  uint64_t v44 = v63;
  uint64_t v45 = swift_allocObject( v43,  ((*(unsigned __int8 *)(v63 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))
        + *(void *)(v63 + 72),
          *(unsigned __int8 *)(v63 + 80) | 7LL);
  __int128 v77 = xmmword_1000EDBE0;
  *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static DispatchWorkItemFlags.barrier.getter(v45);
  v78[0] = v45;
  uint64_t v46 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v47 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v48 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v49 = v62;
  uint64_t v50 = v47;
  uint64_t v51 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)(v78, v50, v48, v64, v46);
  OS_dispatch_queue.sync<A>(flags:execute:)(v49, sub_1000926C0);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v51);
  if (qword_10013BC58 != -1) {
    swift_once(&qword_10013BC58, sub_1000D1598);
  }
  uint64_t v52 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v52, (uint64_t)qword_100148648);
  uint64_t v53 = sub_100029E18(&qword_10013EA00);
  uint64_t v54 = type metadata accessor for LogMessage(0LL);
  uint64_t v55 = swift_allocObject( v53,  ((*(unsigned __int8 *)(*(void *)(v54 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v54 - 8) + 80LL))
        + *(void *)(*(void *)(v54 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v54 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
  uint64_t v56 = v65;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
  v57._uint64_t countAndFlagsBits = 0LL;
  v57._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v57);
  LogMessage.StringInterpolation.appendInterpolation(identity:)(a1);
  v58._object = (void *)0x80000001000FD7E0LL;
  v58._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v58);
  LogMessage.init(stringInterpolation:)(v56);
  Logger.info(_:)(v55, v52, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v55);
  v78[3] = type metadata accessor for DefaultAppStateController();
  v78[4] = &off_100122C20;
  v78[0] = a1;
  swift_retain(a1);
  Promise.resolve(_:)(v78);
  return sub_100029F4C(v78);
}

uint64_t (*sub_10008BF28(uint64_t a1))(void *a1)
{
  uint64_t v2 = swift_allocObject(&unk_100122E48, 32LL, 7LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000926F0;
  *(void *)(v2 + 24) = a1;
  swift_retain(a1);
  return sub_100092718;
}

uint64_t sub_10008BF88(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(v3 + 64);
  uint64_t v15 = *(void *)(v3 + 16);
  uint64_t v16 = swift_allocObject(&unk_100122DD0, 48LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(void *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(double *)(v16 + 40) = a3;
  aBlock[4] = sub_100092684;
  uint64_t v26 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10008A71C;
  aBlock[3] = &unk_100122DE8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v15);
  uint64_t v18 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v18);
  BOOL v24 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100027978( (unint64_t *)&qword_10013D268,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v21 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v26);
}

void sub_10008C198(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v31 = v13;
    uint64_t v32 = (char *)&v29 - v11;
    uint64_t v33 = v12;
    uint64_t v34 = v10;
    uint64_t v35 = a3;
    uint64_t v36 = a2;
    uint64_t v15 = dispatch_group_create();
    swift_bridgeObjectRetain(a1);
    uint64_t v30 = a1;
    uint64_t v16 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v17 = *(v16 - 1);
      uint64_t v18 = *v16;
      swift_unknownObjectRetain(v17);
      dispatch_group_enter(v15);
      uint64_t ObjectType = swift_getObjectType(v17);
      uint64_t v20 = swift_allocObject(&unk_100122E20, 24LL, 7LL);
      *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
      uint64_t v21 = *(void (**)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v18 + 24);
      uint64_t v22 = v15;
      v21(sub_1000926B8, v20, ObjectType, v18);
      swift_unknownObjectRelease(v17);
      swift_release(v20);
      v16 += 2;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease(v30);
    uint64_t v23 = v31;
    static DispatchTime.now()(v24);
    char v25 = v32;
    + infix(_:_:)(v23, a4);
    uint64_t v26 = v34;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v27(v23, v34);
    OS_dispatch_group.wait(timeout:)(v25);
    uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v27)(v25, v26);
    v36(v28);
  }

  else
  {
    a2(v10);
  }

void sub_10008C354(uint64_t a1, dispatch_group_s *a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v11 = sub_10002A768(v7, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    uint64_t v12 = sub_100029E18(&qword_10013EA00);
    uint64_t v13 = type metadata accessor for LogMessage(0LL);
    uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
          + *(void *)(*(void *)(v13 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(36LL, 1LL);
    v15._object = (void *)0x80000001000FD7B0LL;
    v15._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    swift_getErrorValue(a1, v22, &v20);
    uint64_t v16 = v20;
    uint64_t v17 = v21;
    void v23[3] = v21;
    uint64_t v18 = sub_10002C328(v23);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v18, v16, v17);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v23);
    sub_10002E92C((uint64_t)v23, &qword_10013C6F0);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.error(_:)(v14, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  dispatch_group_leave(a2);
}

void sub_10008C580(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, char a5, double a6)
{
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v34 = v17;
    uint64_t v35 = (char *)&v33 - v15;
    uint64_t v36 = v16;
    uint64_t v37 = v14;
    uint64_t v38 = a3;
    uint64_t v39 = a2;
    Swift::String v19 = dispatch_group_create();
    swift_bridgeObjectRetain(a1);
    uint64_t v33 = a1;
    uint64_t v20 = (uint64_t *)(a1 + 40);
    unsigned int v40 = a5 & 1;
    do
    {
      uint64_t v21 = *(v20 - 1);
      uint64_t v22 = *v20;
      swift_unknownObjectRetain(v21);
      dispatch_group_enter(v19);
      uint64_t ObjectType = swift_getObjectType(v21);
      uint64_t v24 = swift_allocObject(&unk_100122D08, 32LL, 7LL);
      *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
      *(void *)(v24 + 24) = v19;
      char v25 = *(void (**)(uint64_t, void, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v22 + 32);
      swift_bridgeObjectRetain(a4);
      uint64_t v26 = v19;
      v25(a4, v40, sub_10008D454, v24, ObjectType, v22);
      swift_unknownObjectRelease(v21);
      swift_release(v24);
      v20 += 2;
      --v18;
    }

    while (v18);
    swift_bridgeObjectRelease(v33);
    uint64_t v27 = v34;
    static DispatchTime.now()(v28);
    uint64_t v29 = v35;
    + infix(_:_:)(v27, a6);
    uint64_t v30 = v37;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v31(v27, v37);
    OS_dispatch_group.wait(timeout:)(v29);
    uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v31)(v29, v30);
    v39(v32);
  }

  else
  {
    a2(v14);
  }

void sub_10008C758(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSLogger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v24 = a3;
    swift_errorRetain(a1);
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v13 = sub_10002A768(v9, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
    uint64_t v14 = sub_100029E18(&qword_10013EA00);
    uint64_t v15 = type metadata accessor for LogMessage(0LL);
    uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
          + *(void *)(*(void *)(v15 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(38LL, 2LL);
    v17._object = (void *)0x80000001000FD710LL;
    v17._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t v29 = sub_100029E18(&qword_10013E590);
    v28[0] = a2;
    swift_bridgeObjectRetain(a2);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v28);
    sub_10002E92C((uint64_t)v28, &qword_10013C6F0);
    v18._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
    v18._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    swift_getErrorValue(a1, v27, &v25);
    uint64_t v19 = v25;
    uint64_t v20 = v26;
    uint64_t v29 = v26;
    uint64_t v21 = sub_10002C328(v28);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v21, v19, v20);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v28);
    sub_10002E92C((uint64_t)v28, &qword_10013C6F0);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    LogMessage.init(stringInterpolation:)(v8);
    Logger.error(_:)(v16, v9, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(a1);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    a3 = v24;
  }

  dispatch_group_leave(a3);
}

uint64_t sub_10008C9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a2 + 48;
  swift_beginAccess(a2 + 48, v13, 0LL, 0LL);
  uint64_t v7 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain(a1);
  uint64_t v8 = swift_bridgeObjectRetain(v7);
  uint64_t v9 = sub_10008CA94(v8, a1);
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v6, v12, 33LL, 0LL);
  uint64_t v10 = swift_bridgeObjectRetain(v9);
  sub_10008A748(v10);
  uint64_t result = swift_endAccess(v12);
  *a3 = v9;
  return result;
}

void *sub_10008CA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if ((a2 & 0xC000000000000001LL) != 0) {
      goto LABEL_5;
    }
LABEL_11:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      return sub_100091AA4(v3, v2);
    }
    goto LABEL_13;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v6 = __CocoaSet.count.getter(v5);
    Swift::Int v7 = sub_10006CB6C(v5, v6);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = v7;
    return sub_100091AA4(v3, v2);
  }

uint64_t sub_10008CB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSLogger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v31 = v8;
    uint64_t v32 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v33 = v10;
    uint64_t v34 = v9;
    swift_bridgeObjectRetain(a1);
    uint64_t v30 = a1;
    uint64_t v14 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v17 = *(v14 - 1);
      uint64_t v18 = *v14;
      uint64_t ObjectType = swift_getObjectType(v17);
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
      swift_unknownObjectRetain(v17);
      if ((v20(ObjectType, v18) & 1) != 0)
      {
        uint64_t v15 = swift_allocObject(&unk_100122D80, 24LL, 7LL);
        *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v18 + 32);
        swift_bridgeObjectRetain(a3);
        v16(a2, 1LL, sub_10009242C, v15, ObjectType, v18);
        swift_unknownObjectRelease(v17);
        swift_release(v15);
      }

      else
      {
        swift_unknownObjectRelease(v17);
      }

      v14 += 2;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease(v30);
    uint64_t v10 = v33;
    uint64_t v9 = v34;
    uint64_t v8 = v31;
    uint64_t v12 = v32;
  }

  if (qword_10013BC58 != -1) {
    swift_once(&qword_10013BC58, sub_1000D1598);
  }
  uint64_t v21 = sub_10002A768(v9, (uint64_t)qword_100148648);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
  uint64_t v22 = sub_100029E18(&qword_10013EA00);
  uint64_t v23 = type metadata accessor for LogMessage(0LL);
  uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL))
        + *(void *)(*(void *)(v23 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
  v25._object = (void *)0x80000001000FD750LL;
  v25._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v25);
  v35[3] = sub_100029E18(&qword_10013E590);
  v35[0] = a2;
  swift_bridgeObjectRetain(a2);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v35);
  sub_10002E92C((uint64_t)v35, &qword_10013C6F0);
  v26._uint64_t countAndFlagsBits = 0LL;
  v26._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  LogMessage.init(stringInterpolation:)(v8);
  Logger.debug(_:)(v24, v9, &protocol witness table for OSLogger);
  __n128 v27 = swift_bridgeObjectRelease(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v27);
}

uint64_t sub_10008CE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10013BC58 != -1) {
      swift_once(&qword_10013BC58, sub_1000D1598);
    }
    uint64_t v12 = sub_10002A768(v7, (uint64_t)qword_100148648);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
    uint64_t v13 = sub_100029E18(&qword_10013EA00);
    uint64_t v14 = type metadata accessor for LogMessage(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(39LL, 2LL);
    v16._object = (void *)0x80000001000FD770LL;
    v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v26 = sub_100029E18(&qword_10013E590);
    v25[0] = a2;
    swift_bridgeObjectRetain(a2);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v25);
    sub_10002E92C((uint64_t)v25, &qword_10013C6F0);
    v17._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
    v17._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    swift_getErrorValue(a1, v24, &v22);
    uint64_t v18 = v22;
    uint64_t v19 = v23;
    uint64_t v26 = v23;
    uint64_t v20 = sub_10002C328(v25);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v20, v18, v19);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v25);
    sub_10002E92C((uint64_t)v25, &qword_10013C6F0);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.error(_:)(v15, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  return result;
}

uint64_t sub_10008D0CC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  sub_100092648(*(void *)(v0 + 72));
  sub_100029F4C((void *)(v0 + 80));
  swift_release(*(void *)(v0 + 120));
  return v0;
}

uint64_t sub_10008D130()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for DefaultAppStateController()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd25DefaultAppStateController);
}

uint64_t type metadata accessor for DefaultAppStateController.DataSourceLoadObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtCC19appstorecomponentsd25DefaultAppStateControllerP33_17C969ADD42BA103E967AFF918DD91D022DataSourceLoadObserver);
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultAppStateController.DataSourceState( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for DefaultAppStateController.DataSourceState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for DefaultAppStateController.DataSourceState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }

  return a1;
}

unint64_t *assignWithTake for DefaultAppStateController.DataSourceState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultAppStateController.DataSourceState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DefaultAppStateController.DataSourceState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_10008D380(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10008D398(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DefaultAppStateController.DataSourceState()
{
  return &type metadata for DefaultAppStateController.DataSourceState;
}

uint64_t sub_10008D3C8()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_10008D3FC()
{
}

uint64_t sub_10008D410(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008D420(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10008D428()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10008D454(uint64_t a1)
{
}

unint64_t sub_10008D45C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10008D67C(a1, a2, v4);
}

unint64_t sub_10008D4C0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10008D75C(a1, v4);
}

unint64_t sub_10008D4F0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10008DAD0(a1, v4, (unint64_t *)&qword_10013CB40, off_10011E488);
}

unint64_t sub_10008D53C(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10008D820(a1, v3);
}

unint64_t sub_10008D570(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_10008D8BC(a1, v5);
}

unint64_t sub_10008D5FC(unsigned __int16 a1)
{
  uint64_t v3 = static Hasher._hash(seed:bytes:count:)(*(void *)(v1 + 40), a1, 2LL);
  return sub_10008DA30(a1, v3);
}

unint64_t sub_10008D630(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10008DAD0(a1, v4, &qword_10013E5F8, off_10011E538);
}

unint64_t sub_10008D67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10008D75C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1000602DC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10009274C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10008D820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10008D8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_10008DA30(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

unint64_t sub_10008DAD0(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t i = a2 & ~v6;
  if (((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10002A030(0LL, a3, a4);
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * i);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = ~v6;
      for (unint64_t i = (i + 1) & v10; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v10)
      {
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * i);
        char v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_10008DBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013CC58);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

Swift::Int sub_10008DEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013CD28);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unsigned int v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    Swift::String v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

Swift::Int sub_10008E200(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013CD30);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unsigned int v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v41) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v42 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v41) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v42 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_37:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v42 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v41) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v42 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10008E534(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013CCE8);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v36 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v14 << 6);
      }

      else
      {
        int64_t v22 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v22 >= v37) {
          goto LABEL_36;
        }
        unint64_t v23 = v38[v22];
        ++v14;
        if (!v23)
        {
          int64_t v14 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v23 = v38[v14];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_36:
              swift_release(v5);
              uint64_t v3 = v36;
              if ((v39 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v38 = -1LL << v35;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v14 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_43;
                }
                if (v14 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v23 = v38[v14];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v14 = v24;
          }
        }

uint64_t sub_10008E828(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013CD10);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v35);
                }
                else {
                  uint64_t *v10 = v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_44;
                }
                if (v9 >= v35) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

Swift::Int sub_10008EADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013CCF0);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_10008EDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100029E18(&qword_10013E5E8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = result;
  if (*(void *)(v10 + 16))
  {
    uint64_t v37 = v3;
    int64_t v13 = 0LL;
    uint64_t v14 = *(void *)(v10 + 64);
    unsigned int v40 = (void *)(v10 + 64);
    uint64_t v15 = 1LL << *(_BYTE *)(v10 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v17 = v16 & v14;
    int64_t v39 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v18 = result + 64;
    int v38 = a2;
    uint64_t v19 = 16LL;
    if ((a2 & 1) != 0) {
      uint64_t v19 = 32LL;
    }
    uint64_t v41 = v19;
    while (1)
    {
      if (v17)
      {
        unint64_t v21 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v22 = v21 | (v13 << 6);
      }

      else
      {
        int64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        uint64_t result = (uint64_t)v40;
        if (v23 >= v39) {
          goto LABEL_35;
        }
        unint64_t v24 = v40[v23];
        ++v13;
        if (!v24)
        {
          int64_t v13 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_35;
          }
          unint64_t v24 = v40[v13];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_35:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release(v10);
                uint64_t v3 = v37;
                goto LABEL_42;
              }

              uint64_t v35 = 1LL << *(_BYTE *)(v10 + 32);
              if (v35 >= 64) {
                bzero(v40, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                void *v40 = -1LL << v35;
              }
              uint64_t v3 = v37;
              *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v13 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_44;
                }
                if (v13 >= v39) {
                  goto LABEL_35;
                }
                unint64_t v24 = v40[v13];
                ++v25;
                if (v24) {
                  goto LABEL_25;
                }
              }
            }

            int64_t v13 = v25;
          }
        }

Swift::Int sub_10008F108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18(&qword_10013D2A0);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10008F410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100029E18((uint64_t *)&unk_10013F750);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

_OWORD *sub_10008F6E0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10008D45C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        unint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_100029F4C(v19);
        return sub_1000445E4(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10005CA74();
      goto LABEL_7;
    }

    sub_10008DBE0(v15, a4 & 1);
    unint64_t v21 = sub_10008D45C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100090094(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10008F810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10008D45C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10005CC58();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease(v21[1]);
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }

uint64_t sub_10008F984(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10008D45C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10005CE10();
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      return sub_100092780(a1, v18[7] + 40 * v12);
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1LL << v12;
    char v22 = (uint64_t *)(v18[6] + 16 * v12);
    *char v22 = a2;
    v22[1] = a3;
    uint64_t v23 = v18[7] + 40 * v12;
    __int128 v24 = *(_OWORD *)a1;
    __int128 v25 = *(_OWORD *)(a1 + 16);
    *(void *)(v23 + 32) = *(void *)(a1 + 32);
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
    uint64_t v26 = v18[2];
    BOOL v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_10008E200(v15, a4 & 1);
  unint64_t v20 = sub_10008D45C(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      return sub_100092780(a1, v18[7] + 40 * v12);
    }
    goto LABEL_11;
  }

uint64_t sub_10008FAF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10008D53C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10005D1D4();
LABEL_7:
    char v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

void sub_10008FC28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_10008D4F0((uint64_t)a4);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_10005D374();
LABEL_7:
    uint64_t v19 = (void *)*v6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = (void *)(v19[7] + 24 * v13);
      swift_bridgeObjectRelease(v20[2]);
      void *v20 = a1;
      v20[1] = a2;
      void v20[2] = a3;
      return;
    }

id sub_10008FDAC(uint64_t a1, uint64_t a2, char a3, void *a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_10008D4F0((uint64_t)a4);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_10005D004();
LABEL_7:
    uint64_t v19 = (void *)*v6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 24 * v13;
      id result = (id)sub_1000484C0(*(void *)v20, *(void *)(v20 + 8), *(_BYTE *)(v20 + 16));
      *(void *)uint64_t v20 = a1;
      *(void *)(v20 + 8) = a2;
      *(_BYTE *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
      return result;
    }

void sub_10008FF34(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10008D630((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10005D6DC();
LABEL_7:
    BOOL v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }

_OWORD *sub_100090094(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  id result = sub_1000445E4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

size_t sub_1000900FC(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000907F0( a1,  a2,  a3,  (void *)*v3,  &qword_10013E610,  (uint64_t (*)(void))&type metadata accessor for MetricsData);
  *uint64_t v3 = result;
  return result;
}

char *sub_100090128(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100090228(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100090144(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100090328(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100090160(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000907F0( a1,  a2,  a3,  (void *)*v3,  &qword_10013C918,  (uint64_t (*)(void))&type metadata accessor for App);
  *uint64_t v3 = result;
  return result;
}

size_t sub_10009018C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_10009042C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000901A8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000905A8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1000901C4(void *a1, int64_t a2, char a3)
{
  size_t result = sub_1000906BC(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_1000901E0(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000907F0( a1,  a2,  a3,  (void *)*v3,  &qword_10013EA00,  (uint64_t (*)(void))&type metadata accessor for LogMessage);
  *uint64_t v3 = result;
  return result;
}

char *sub_10009020C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100090964(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100090228(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013CCD0);
    BOOL v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  BOOL v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_release(a4);
  return v11;
}

char *sub_100090328(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013E5F0);
    BOOL v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    BOOL v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  BOOL v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }

  swift_release(a4);
  return v11;
}

size_t sub_10009042C(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    BOOL v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100029E18(&qword_10013E5D8);
  uint64_t v11 = *(void *)(sub_100029E18(&qword_10013E5B8) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  BOOL v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = sub_100029E18(&qword_10013E5B8);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (char *)v15 + v19;
  BOOL v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }

  swift_release(a4);
  return (size_t)v15;
}

char *sub_1000905A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013E5E0);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for JSClientFeature);
  }

  swift_release(a4);
  return v11;
}

void *sub_1000906BC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013E600);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _OWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100029E18(&qword_10013E608);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_release(a4);
  return v11;
}

size_t sub_1000907F0( size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100029E18(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_29;
  }
  v18[2] = v11;
  void v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  uint64_t v20 = a6(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  id v23 = (char *)v18 + v22;
  uint64_t v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(void *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }

  swift_release(a4);
  return (size_t)v18;
}

char *sub_100090964(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100029E18(&qword_10013E618);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for MetricsIdentifierKeyContext);
  }

  swift_release(a4);
  return v11;
}

Swift::Int sub_100090A7C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100029E18(&qword_10013D970);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

Swift::Int sub_100090CD8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100029E18(&qword_10013D980);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (_BYTE *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_100090F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10006ED94();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_100091464(v8);
  uint64_t v16 = *v2;
  void *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_1000910F8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1000912CC(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

uint64_t sub_1000912CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_10006CB6C(v7, v6);
  Swift::Int v19 = v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain(v8);
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_100091628(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *uint64_t v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_100091464(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          id v16 = (_OWORD *)(v15 + 16 * v2);
          char v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *id v16 = *v17;
            int64_t v2 = v6;
          }
        }

unint64_t sub_100091628(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            char v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              void *v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void sub_1000917C8(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)(v3 + 16)) {
      return;
    }
LABEL_8:
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 < 0) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v6 = __CocoaSet.makeIterator()(v5);
      uint64_t v7 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
      unint64_t v8 = sub_1000445F4();
      unint64_t v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      uint64_t v28 = v31[1];
      uint64_t v10 = v31[2];
      uint64_t v11 = v31[3];
      unint64_t v12 = v31[4];
    }

    else
    {
      uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
      uint64_t v28 = a1 + 56;
      uint64_t v10 = ~v13;
      uint64_t v14 = -v13;
      if (v14 < 64) {
        uint64_t v15 = ~(-1LL << v14);
      }
      else {
        uint64_t v15 = -1LL;
      }
      unint64_t v12 = v15 & *(void *)(a1 + 56);
      unint64_t v9 = (void *)swift_bridgeObjectRetain(a1);
      uint64_t v11 = 0LL;
    }

    int64_t v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_20;
    }
    while (1)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
        uint64_t v19 = v11;
      }

      else
      {
        int64_t v24 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
          __break(1u);
          return;
        }

        if (v24 >= v16) {
          goto LABEL_42;
        }
        unint64_t v25 = *(void *)(v28 + 8 * v24);
        uint64_t v19 = v11 + 1;
        if (!v25)
        {
          uint64_t v19 = v11 + 2;
          if (v11 + 2 >= v16) {
            goto LABEL_42;
          }
          unint64_t v25 = *(void *)(v28 + 8 * v19);
          if (!v25)
          {
            uint64_t v19 = v11 + 3;
            if (v11 + 3 >= v16) {
              goto LABEL_42;
            }
            unint64_t v25 = *(void *)(v28 + 8 * v19);
            if (!v25)
            {
              uint64_t v19 = v11 + 4;
              if (v11 + 4 >= v16) {
                goto LABEL_42;
              }
              unint64_t v25 = *(void *)(v28 + 8 * v19);
              if (!v25)
              {
                uint64_t v19 = v11 + 5;
                if (v11 + 5 >= v16) {
                  goto LABEL_42;
                }
                unint64_t v25 = *(void *)(v28 + 8 * v19);
                if (!v25)
                {
                  uint64_t v26 = v11 + 6;
                  while (v16 != v26)
                  {
                    unint64_t v25 = *(void *)(v28 + 8 * v26++);
                    if (v25)
                    {
                      uint64_t v19 = v26 - 1;
                      goto LABEL_38;
                    }
                  }

LABEL_38:
        uint64_t v17 = (v25 - 1) & v25;
        unint64_t v18 = __clz(__rbit64(v25)) + (v19 << 6);
      }

      id v23 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
      if (!v23) {
        goto LABEL_42;
      }
      while (1)
      {
        uint64_t v27 = (void *)sub_1000910F8(v23);

        uint64_t v11 = v19;
        unint64_t v12 = v17;
        if ((a1 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_20:
        uint64_t v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v29 = v20;
          uint64_t v22 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
          swift_unknownObjectRetain(v21);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          id v23 = v30;
          swift_unknownObjectRelease(v21);
          uint64_t v19 = v11;
          uint64_t v17 = v12;
          if (v23) {
            continue;
          }
        }

        goto LABEL_42;
      }
    }
  }

  if (v3 < 0) {
    uint64_t v4 = *v1;
  }
  else {
    uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (__CocoaSet.count.getter(v4)) {
    goto LABEL_8;
  }
}

      uint64_t v32 = v64;
    }
  }

  uint64_t v42 = v32 + 4;
  if (v32 + 4 >= v60) {
    goto LABEL_63;
  }
  unsigned int v40 = *(void *)(v57 + 8 * v42);
  if (v40)
  {
    uint64_t v41 = v32 + 4;
    goto LABEL_54;
  }

  while (1)
  {
    uint64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v60) {
      goto LABEL_63;
    }
    unsigned int v40 = *(void *)(v57 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_54;
    }
  }

      unint64_t v9 = v50;
    }

    *(void *)&v12[8 * v36] = v38 | v37;
    *(void *)(v8[6] + 8 * v35) = v32;
    uint64_t v44 = v8[2];
    uint64_t v15 = __OFADD__(v44, 1LL);
    __int128 v45 = v44 + 1;
    if (v15) {
      goto LABEL_45;
    }
    v8[2] = v45;
LABEL_31:
    if (++v30 == v9) {
      return;
    }
  }

void *sub_100091AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    unint64_t v7 = sub_1000445F4();
    unint64_t v8 = Set.Iterator.init(_cocoa:)(v55, v5, v6, v7);
    uint64_t v3 = v55[0];
    uint64_t v9 = v55[1];
    uint64_t v11 = v55[2];
    int64_t v10 = v55[3];
    unint64_t v12 = v55[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v9 = a1 + 56;
    uint64_t v11 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    unint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  uint64_t v50 = v3;
  uint64_t v51 = v9;
  uint64_t v52 = v11;
  int64_t v53 = v10;
  unint64_t v54 = v12;
  uint64_t v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        uint64_t v19 = *(void **)(*(void *)(v3 + 48) + 8 * v18);
        id v20 = v19;
        goto LABEL_18;
      }

      int64_t v32 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        __break(1u);
      }
      int64_t v33 = (unint64_t)(v11 + 64) >> 6;
      if (v32 >= v33)
      {
        uint64_t v19 = 0LL;
        uint64_t v17 = 0LL;
        goto LABEL_18;
      }

      unint64_t v34 = *(void *)(v51 + 8 * v32);
      if (v34)
      {
LABEL_31:
        uint64_t v17 = (v34 - 1) & v34;
        unint64_t v18 = __clz(__rbit64(v34)) + (v32 << 6);
        int64_t v10 = v32;
        goto LABEL_17;
      }

      int64_t v35 = v10 + 2;
      if (v10 + 2 >= v33) {
        goto LABEL_47;
      }
      unint64_t v34 = *(void *)(v51 + 8 * v35);
      if (v34)
      {
LABEL_35:
        int64_t v32 = v35;
        goto LABEL_31;
      }

      if (v10 + 3 < v33)
      {
        unint64_t v34 = *(void *)(v51 + 8 * (v10 + 3));
        if (v34)
        {
          int64_t v32 = v10 + 3;
          goto LABEL_31;
        }

        int64_t v35 = v10 + 4;
        if (v10 + 4 >= v33)
        {
          uint64_t v19 = 0LL;
          uint64_t v17 = 0LL;
          v10 += 3LL;
LABEL_18:
          int64_t v53 = v10;
          unint64_t v54 = v17;
          if (!v19) {
            goto LABEL_56;
          }
          goto LABEL_22;
        }

        unint64_t v34 = *(void *)(v51 + 8 * v35);
        if (v34) {
          goto LABEL_35;
        }
        int64_t v32 = v10 + 5;
        if (v10 + 5 < v33)
        {
          unint64_t v34 = *(void *)(v51 + 8 * v32);
          if (v34) {
            goto LABEL_31;
          }
          int64_t v32 = v33 - 1;
          int64_t v36 = v10 + 6;
          while (v33 != v36)
          {
            unint64_t v34 = *(void *)(v51 + 8 * v36++);
            if (v34)
            {
              int64_t v32 = v36 - 1;
              goto LABEL_31;
            }
          }

LABEL_50:
  char v38 = *(_BYTE *)(v2 + 32);
  unsigned int v39 = v38 & 0x3F;
  unint64_t v40 = (1LL << v38) + 63;
  uint64_t v41 = v40 >> 6;
  size_t v42 = 8 * (v40 >> 6);
  if (v39 < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v42);
    sub_100091FDC((unint64_t *)((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v41, v2, v26, &v50);
    uint64_t v44 = v43;
    swift_release(v2);
    sub_10002EB74(v50);
  }

  else
  {
    __int128 v45 = (void *)swift_slowAlloc(v42, -1LL);
    memcpy(v45, (const void *)(v2 + 56), v42);
    sub_100091FDC((unint64_t *)v45, v41, v2, v26, &v50);
    uint64_t v44 = v46;
    swift_release(v2);
    sub_10002EB74(v50);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  return (void *)v44;
}

void sub_100091FDC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v7 = v6 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v7;
    do
    {
      while (1)
      {
        if ((*a5 & 0x8000000000000000LL) == 0)
        {
          int64_t v9 = a5[3];
          unint64_t v8 = a5[4];
          if (v8)
          {
            uint64_t v10 = (v8 - 1) & v8;
            unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
LABEL_7:
            unint64_t v12 = *(void **)(*(void *)(*a5 + 48LL) + 8 * v11);
            id v13 = v12;
            goto LABEL_8;
          }

          int64_t v29 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            goto LABEL_49;
          }

          int64_t v30 = (unint64_t)(a5[2] + 64LL) >> 6;
          if (v29 >= v30)
          {
            unint64_t v12 = 0LL;
            uint64_t v10 = 0LL;
            goto LABEL_8;
          }

          uint64_t v31 = a5[1];
          unint64_t v32 = *(void *)(v31 + 8 * v29);
          if (v32)
          {
LABEL_22:
            uint64_t v10 = (v32 - 1) & v32;
            unint64_t v11 = __clz(__rbit64(v32)) + (v29 << 6);
            int64_t v9 = v29;
            goto LABEL_7;
          }

          int64_t v34 = v9 + 2;
          if (v9 + 2 >= v30) {
            goto LABEL_41;
          }
          unint64_t v32 = *(void *)(v31 + 8 * v34);
          if (v32)
          {
LABEL_29:
            int64_t v29 = v34;
            goto LABEL_22;
          }

          if (v9 + 3 < v30)
          {
            unint64_t v32 = *(void *)(v31 + 8 * (v9 + 3));
            if (v32)
            {
              int64_t v29 = v9 + 3;
              goto LABEL_22;
            }

            int64_t v34 = v9 + 4;
            if (v9 + 4 >= v30)
            {
              unint64_t v12 = 0LL;
              uint64_t v10 = 0LL;
              v9 += 3LL;
LABEL_8:
              a5[3] = v9;
              a5[4] = v10;
              if (!v12) {
                goto LABEL_47;
              }
              goto LABEL_12;
            }

            unint64_t v32 = *(void *)(v31 + 8 * v34);
            if (v32) {
              goto LABEL_29;
            }
            int64_t v29 = v9 + 5;
            if (v9 + 5 < v30)
            {
              unint64_t v32 = *(void *)(v31 + 8 * v29);
              if (v32) {
                goto LABEL_22;
              }
              int64_t v29 = v30 - 1;
              int64_t v35 = v9 + 6;
              while (v30 != v35)
              {
                unint64_t v32 = *(void *)(v31 + 8 * v35++);
                if (v32)
                {
                  int64_t v29 = v35 - 1;
                  goto LABEL_22;
                }
              }

LABEL_3:
      }

LABEL_25:
      unint64_t v33 = a1[v20];
      a1[v20] = v33 & ~v21;
    }

    while ((v21 & v33) == 0);
    uint64_t v7 = v37 - 1;
    if (__OFSUB__(v37, 1LL))
    {
LABEL_49:
      __break(1u);
      return;
    }

    if (v37 != 1) {
      continue;
    }
    break;
  }

uint64_t sub_100092368@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10008ABFC(*(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(_BYTE *)(v1 + 48));
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000923B0@<X0>(void *a1@<X8>)
{
  return sub_10008C9E0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000923C8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000923FC()
{
  return sub_10008CB88(v0[2], v0[3], v0[4]);
}

uint64_t sub_100092408()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009242C(uint64_t a1)
{
  return sub_10008CE58(a1, *(void *)(v1 + 16));
}

unint64_t sub_100092434@<X0>(uint64_t a1@<X8>)
{
  return sub_10008B780(v1, a1);
}

void *sub_10009244C(uint64_t a1, void *a2)
{
  uint64_t v21 = *a2;
  id v22 = a2;
  uint64_t v20 = sub_100029E18(&qword_10013E5B8);
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v19[1] = v2;
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_10009018C(0LL, v7, 0);
    unint64_t v8 = v24;
    int64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v10 = *(v9 - 1);
      uint64_t v11 = *v9;
      uint64_t ObjectType = swift_getObjectType(v10);
      id v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
      swift_unknownObjectRetain(v10);
      uint64_t v14 = v13(ObjectType, v11);
      char v23 = v22;
      uint64_t v15 = sub_100027978( &qword_10013E5D0,  (uint64_t (*)(uint64_t))type metadata accessor for DefaultAppStateController.DataSourceLoadObserver,  (uint64_t)&unk_1000EF9F8);
      SyncEvent.addObserver<A>(_:)(&v23, v21, v15);
      swift_unknownObjectRelease(v10);
      swift_release(v14);
      uint64_t v24 = v8;
      unint64_t v17 = v8[2];
      unint64_t v16 = v8[3];
      if (v17 >= v16 >> 1)
      {
        sub_10009018C(v16 > 1, v17 + 1, 1);
        unint64_t v8 = v24;
      }

      v8[2] = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v8 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v17,
        v6,
        v20);
      v9 += 2;
      --v7;
    }

    while (v7);
  }

  return v8;
}

uint64_t sub_100092600()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10009263C()
{
  return sub_10008B85C(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_100092648(unint64_t result)
{
  if (result >= 2) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_100092658()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100092684()
{
}

uint64_t sub_100092694()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000926B8(uint64_t a1)
{
}

unint64_t sub_1000926C0()
{
  unint64_t v1 = *(void *)(v0 + 72);
  *(void *)(v0 + 72) = 1LL;
  return sub_100092648(v1);
}

uint64_t sub_1000926F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100092718(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t sub_10009273C(unint64_t result)
{
  if (result >= 2) {
    return swift_retain(result);
  }
  return result;
}

uint64_t sub_10009274C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100092780(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000927D0()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for DefaultAppStateDataSource()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd25DefaultAppStateDataSource);
}

uint64_t sub_100092814()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t sub_10009281C(uint64_t (*a1)(void))
{
  return a1(0LL);
}

uint64_t sub_100092844(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t sub_100092868()
{
  return 2LL;
}

uint64_t sub_100092878()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  sub_10002A728(v4, qword_10013E6C0);
  sub_10002A768(v4, (uint64_t)qword_10013E6C0);
  if (qword_10013BC30 != -1) {
    swift_once(&qword_10013BC30, sub_1000D14B4);
  }
  uint64_t v5 = sub_10002A768(v0, (uint64_t)qword_1001485D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)(v3, 0xD00000000000001FLL, 0x80000001000EFA70LL);
}

id sub_100092978(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v35 = a3;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OSLogger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBE8 != -1) {
    swift_once(&qword_10013BBE8, sub_100092878);
  }
  uint64_t v16 = sub_10002A768(v12, (uint64_t)qword_10013E6C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  uint64_t v17 = sub_100029E18(&qword_10013EA00);
  uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (v20 + 32) & ~v20;
  uint64_t v22 = swift_allocObject(v17, v21 + v19, v20 | 7);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  v34[1] = v22 + v21;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(23LL, 2LL);
  v23._uint64_t countAndFlagsBits = 0x72746E6520646441LL;
  v23._object = (void *)0xEA00000000002079LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  v37[0] = a1;
  v37[1] = a2;
  uint64_t v24 = v35;
  void v37[2] = v35;
  char v38 = &type metadata for AvailableUpdate;
  swift_bridgeObjectRetain(v35);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v37);
  sub_10004C810((uint64_t)v37);
  v25._uint64_t countAndFlagsBits = 0x61644120726F6620LL;
  v25._object = (void *)0xED0000204449206DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v25);
  char v38 = (ValueMetadata *)sub_10005462C();
  v37[0] = a4;
  id v26 = a4;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v37);
  sub_10004C810((uint64_t)v37);
  v27._uint64_t countAndFlagsBits = 0LL;
  v27._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  LogMessage.init(stringInterpolation:)(v11);
  Logger.info(_:)(v22, v12, &protocol witness table for OSLogger);
  __n128 v28 = swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v28);
  int64_t v29 = *(void **)(v5 + 24);
  [v29 lock];
  swift_beginAccess(v5 + 16, v37, 33LL, 0LL);
  swift_bridgeObjectRetain(v24);
  id v30 = v26;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v5 + 16));
  uint64_t v36 = *(void *)(v5 + 16);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000000000000LL;
  sub_10008FC28(a1, a2, v24, v30, isUniquelyReferenced_nonNull_native);
  uint64_t v32 = *(void *)(v5 + 16);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;

  swift_bridgeObjectRelease(v32);
  swift_endAccess(v37);
  return [v29 unlock];
}

uint64_t sub_100092C60(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBE8 != -1) {
    swift_once(&qword_10013BBE8, sub_100092878);
  }
  uint64_t v11 = sub_10002A768(v7, (uint64_t)qword_10013E6C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = sub_100029E18(&qword_10013EA00);
  uint64_t v13 = type metadata accessor for LogMessage(0LL);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
        + *(void *)(*(void *)(v13 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(25LL, 1LL);
  v15._object = (void *)0x80000001000FD8B0LL;
  v15._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  _OWORD v22[3] = sub_10005462C();
  v22[0] = a1;
  id v16 = a1;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v22);
  sub_10004C810((uint64_t)v22);
  v17._uint64_t countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v14, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v18 = *(void **)(v2 + 24);
  [v18 lock];
  swift_beginAccess(v2 + 16, v22, 33LL, 0LL);
  sub_10005C0C0((uint64_t)v16);
  uint64_t v20 = v19;
  swift_endAccess(v22);
  [v18 unlock];
  return swift_bridgeObjectRelease(v20);
}

void *sub_100092E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    unint64_t v6 = sub_10005462C();
    unint64_t v7 = sub_1000445F4();
    uint64_t result = Set.Iterator.init(_cocoa:)(v37, v5, v6, v7);
    uint64_t v3 = v37[0];
    uint64_t v35 = v37[1];
    uint64_t v9 = v37[2];
    uint64_t v10 = v37[3];
    unint64_t v11 = v37[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v35 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    uint64_t result = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0LL;
  }

  int64_t v34 = (unint64_t)(v9 + 64) >> 6;
  Swift::String v15 = (uint64_t *)(a2 + 16);
  while (v3 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()(result);
    if (!v21) {
      return (void *)sub_10002EB74(v3);
    }
    uint64_t v22 = v21;
    uint64_t v38 = v21;
    unint64_t v23 = sub_10005462C();
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(v36, &v38, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    id v24 = (id)v36[0];
    swift_unknownObjectRelease(v22);
    uint64_t v20 = v10;
    uint64_t v18 = v11;
    if (!v24) {
      return (void *)sub_10002EB74(v3);
    }
LABEL_34:
    swift_beginAccess(v15, v36, 33LL, 0LL);
    uint64_t v28 = *v15;
    swift_bridgeObjectRetain(*v15);
    unint64_t v29 = sub_10008D4F0((uint64_t)v24);
    char v31 = v30;
    swift_bridgeObjectRelease(v28);
    uint64_t v16 = 0LL;
    if ((v31 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
      uint64_t v33 = *v15;
      uint64_t v38 = *v15;
      *Swift::String v15 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10005D374();
        uint64_t v33 = v38;
      }

      uint64_t v16 = *(void *)(*(void *)(v33 + 56) + 24 * v29 + 16);
      sub_10005C8B0(v29, v33);
      uint64_t v17 = *v15;
      *Swift::String v15 = v33;
      swift_bridgeObjectRelease(v17);
    }

    swift_endAccess(v36);

    uint64_t result = (void *)swift_bridgeObjectRelease(v16);
    uint64_t v10 = v20;
    unint64_t v11 = v18;
  }

  if (v11)
  {
    uint64_t v18 = (v11 - 1) & v11;
    unint64_t v19 = __clz(__rbit64(v11)) | (v10 << 6);
    uint64_t v20 = v10;
LABEL_33:
    id v24 = *(id *)(*(void *)(v3 + 48) + 8 * v19);
    if (!v24) {
      return (void *)sub_10002EB74(v3);
    }
    goto LABEL_34;
  }

  int64_t v25 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v25 >= v34) {
      return (void *)sub_10002EB74(v3);
    }
    unint64_t v26 = *(void *)(v35 + 8 * v25);
    uint64_t v20 = v10 + 1;
    if (!v26)
    {
      uint64_t v20 = v10 + 2;
      if (v10 + 2 >= v34) {
        return (void *)sub_10002EB74(v3);
      }
      unint64_t v26 = *(void *)(v35 + 8 * v20);
      if (!v26)
      {
        uint64_t v20 = v10 + 3;
        if (v10 + 3 >= v34) {
          return (void *)sub_10002EB74(v3);
        }
        unint64_t v26 = *(void *)(v35 + 8 * v20);
        if (!v26)
        {
          uint64_t v20 = v10 + 4;
          if (v10 + 4 >= v34) {
            return (void *)sub_10002EB74(v3);
          }
          unint64_t v26 = *(void *)(v35 + 8 * v20);
          if (!v26)
          {
            uint64_t v27 = v10 + 5;
            while (v34 != v27)
            {
              unint64_t v26 = *(void *)(v35 + 8 * v27++);
              if (v26)
              {
                uint64_t v20 = v27 - 1;
                goto LABEL_32;
              }
            }

            return (void *)sub_10002EB74(v3);
          }
        }
      }
    }

uint64_t sub_1000931D4()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for DefaultAvailableUpdatesRegistry()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd31DefaultAvailableUpdatesRegistry);
}

uint64_t destroy for DeviceAppDistribution(void *a1)
{
  return sub_100029F4C(a1 + 5);
}

ValueMetadata *type metadata accessor for DeviceAppDistribution()
{
  return &type metadata for DeviceAppDistribution;
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceAppQuery(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for DeviceAppQuery(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t *assignWithTake for DeviceAppQuery(uint64_t *a1, uint64_t *a2)
{
  char v3 = *((_BYTE *)a2 + 8);
  uint64_t v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceAppQuery(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceAppQuery(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10009338C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000933A4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceAppQuery()
{
  return &type metadata for DeviceAppQuery;
}

void sub_1000933CC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v5 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v5);
      if (v5)
      {
        unint64_t v6 = (void *)(a2 + 40);
        do
        {
          uint64_t v7 = *(v6 - 1);
          uint64_t v8 = *v6;
          swift_bridgeObjectRetain(*v6);
          String.hash(into:)(a1, v7, v8);
          swift_bridgeObjectRelease(v8);
          v6 += 2;
          --v5;
        }

        while (v5);
      }
    }

    else
    {
      Hasher._combine(_:)(0LL);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    sub_10009396C(a1, a2);
  }

Swift::Int sub_100093488()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4);
  sub_1000933CC((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1000934D4(uint64_t a1)
{
}

Swift::Int sub_1000934E0()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4);
  sub_1000933CC((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

id sub_100093528(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 8);
  unint64_t v6 = *(void **)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  if (!v5)
  {
    if (!v7) {
      return sub_1000935C4((uint64_t)v4, (unint64_t)v6);
    }
    return 0LL;
  }

  if (v5 == 1)
  {
    if (v7 == 1) {
      return (id)sub_1000938A8(v4, v6);
    }
    return 0LL;
  }

  return (id)(v7 == 2 && v6 == 0LL);
}

unint64_t sub_100093580()
{
  unint64_t result = qword_10013E7B8;
  if (!qword_10013E7B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EFB44, &type metadata for DeviceAppQuery);
    atomic_store(result, (unint64_t *)&qword_10013E7B8);
  }

  return result;
}

id sub_1000935C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v6 = a2 >> 62;
    if (!(a2 >> 62)) {
      goto LABEL_3;
    }
LABEL_50:
    if (v2 < 0) {
      uint64_t v31 = v2;
    }
    else {
      uint64_t v31 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v2);
    if (v5 == v32) {
      goto LABEL_4;
    }
LABEL_54:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }

  if (a1 < 0) {
    uint64_t v30 = a1;
  }
  else {
    uint64_t v30 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  unint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v3);
  unint64_t v6 = (unint64_t)v2 >> 62;
LABEL_3:
  if (v5 != *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_54;
  }
LABEL_4:
  if (!v5) {
    goto LABEL_37;
  }
  uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8LL;
  if (v3 < 0) {
    uint64_t v7 = v3;
  }
  if (!v4) {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFF8LL) + 32;
  }
  uint64_t v8 = v2 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v2 & 0xFFFFFFFFFFFFFF8LL) + 32;
  if (v2 < 0) {
    uint64_t v10 = v2;
  }
  else {
    uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v6) {
    uint64_t v9 = v10;
  }
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }

  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_60;
  }
  unint64_t v33 = v3 & 0xC000000000000001LL;
  if ((v3 & 0xC000000000000001LL) != 0) {
    goto LABEL_61;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3))
  {
    uint64_t v12 = result;
    if ((v2 & 0xC000000000000001LL) == 0) {
      break;
    }
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
LABEL_21:
    uint64_t v14 = v13;
    sub_10005462C();
    char v15 = static NSObject.== infix(_:_:)(v12);

    if ((v15 & 1) == 0) {
      goto LABEL_54;
    }
    unint64_t v16 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((v2 | v3) & 0xC000000000000001LL) != 0)
    {
      uint64_t v17 = 0LL;
      unint64_t v18 = v5 - 2;
      while (v16 != v17)
      {
        unint64_t v5 = v17 + 1;
        if (v33) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v3);
        }
        else {
          id v19 = *(id *)(v3 + 40 + 8 * v17);
        }
        uint64_t v20 = v19;
        if ((v2 & 0xC000000000000001LL) != 0)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, v2);
        }

        else
        {
          if (v5 >= *(void *)(v8 + 16)) {
            goto LABEL_59;
          }
          id v21 = *(id *)(v2 + 40 + 8 * v17);
        }

        uint64_t v22 = v21;
        unint64_t v5 = static NSObject.== infix(_:_:)(v20);

        if ((v5 & 1) != 0 && v18 != v17++) {
          continue;
        }
        return (id)(v5 & 1);
      }

      __break(1u);
    }

    else
    {
      unint64_t v24 = *(void *)(v8 + 16);
      if (v24 <= 1) {
        unint64_t v24 = 1LL;
      }
      unint64_t v25 = v24 - 1;
      unint64_t v26 = (void **)(v3 + 40);
      uint64_t v8 = v2 + 40;
      while (v16)
      {
        if (!v25) {
          goto LABEL_58;
        }
        uint64_t v28 = *v26++;
        uint64_t v27 = v28;
        unint64_t v29 = *(void **)v8;
        v8 += 8LL;
        uint64_t v2 = v27;
        uint64_t v3 = v29;
        unint64_t v5 = static NSObject.== infix(_:_:)(v2);

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16) {
            continue;
          }
        }

        return (id)(v5 & 1);
      }
    }

    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    ;
  }

  if (*(void *)(v8 + 16))
  {
    id v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000938A8(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    id v13 = a1 + 7;
    for (unint64_t i = a2 + 7; ; i += 2)
    {
      uint64_t v15 = *(v13 - 1);
      uint64_t v16 = *v13;
      uint64_t v17 = *(i - 1);
      uint64_t v18 = *i;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

void sub_10009396C(uint64_t a1, uint64_t a2)
{
  if (!((unint64_t)a2 >> 62))
  {
    Hasher._combine(_:)(*(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
    uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (!v4) {
      return;
    }
    goto LABEL_3;
  }

  if (a2 < 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a2);
  Swift::UInt v11 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(v11);
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(a2);
  if (v4)
  {
LABEL_3:
    if (v4 < 1)
    {
      __break(1u);
    }

    else if ((a2 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v4; ++i)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
        NSObject.hash(into:)(a1);
        swift_unknownObjectRelease(v6);
      }
    }

    else
    {
      uint64_t v7 = (void **)(a2 + 32);
      do
      {
        uint64_t v8 = *v7++;
        id v9 = v8;
        NSObject.hash(into:)(a1);

        --v4;
      }

      while (v4);
    }
  }

uint64_t sub_100093A84()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OSLogger(0LL);
  sub_10002A728(v4, qword_100148580);
  sub_10002A768(v4, (uint64_t)qword_100148580);
  if (qword_10013BC30 != -1) {
    swift_once(&qword_10013BC30, sub_1000D14B4);
  }
  uint64_t v5 = sub_10002A768(v0, (uint64_t)qword_1001485D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)(v3, 0xD000000000000018LL, 0x80000001000EFB90LL);
}

void sub_100093B84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_100093BDC(a1);
  }

uint64_t sub_100093BDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  __chkstk_darwin(v2);
  uint64_t v71 = (char *)v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = a1;
  id v81 = sub_1000942C0;
  uint64_t v82 = 0LL;
  swift_bridgeObjectRetain(a1);
  uint64_t v11 = sub_100029E18(&qword_10013E828);
  unint64_t v12 = sub_100097CD4();
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v11, v12);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(a1);
  if (qword_10013BBF0 != -1) {
    swift_once(&qword_10013BBF0, sub_100093A84);
  }
  uint64_t v16 = sub_10002A768(v7, (uint64_t)qword_100148580);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v68 = v16;
  uint64_t v69 = v17;
  ((void (*)(char *))v17)(v10);
  uint64_t v18 = sub_100029E18(&qword_10013EA00);
  uint64_t v19 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v67 = v18;
  uint64_t v65 = v22 + v20;
  uint64_t v64 = v21 | 7;
  uint64_t v23 = swift_allocObject(v18, v22 + v20, v21 | 7);
  uint64_t v76 = v10;
  uint64_t v24 = v23;
  __int128 v75 = xmmword_1000EDBE0;
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v66 = v22;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
  v25._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v25._object = (void *)0x80000001000FDB10LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v25);
  Swift::String v83 = &type metadata for String;
  uint64_t v80 = v13;
  id v81 = v15;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v80);
  sub_10004C810((uint64_t)&v80);
  v26._uint64_t countAndFlagsBits = 0LL;
  v26._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v24, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v24);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v76, v7);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v59 = a1;
    }
    else {
      uint64_t v59 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v59);
  }

  else
  {
    uint64_t v28 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
  }

  uint64_t v29 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
  unint64_t v30 = sub_1000445F4();
  uint64_t result = Set.init(minimumCapacity:)(v28, v29, v30);
  uint64_t v32 = result;
  uint64_t v80 = result;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v34 = a1;
    }
    else {
      uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v34);
    uint64_t result = swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v74 = v7;
  uint64_t v63 = v27;
  uint64_t v62 = v28;
  if (v33)
  {
    if (v33 < 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v35 = 0LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, a1);
      }
      else {
        id v36 = *(id *)(a1 + 8 * v35 + 32);
      }
      uint64_t v37 = v36;
      ++v35;
      id v38 = objc_msgSend( objc_allocWithZone((Class)ASCAdamID),  "initWithInt64:",  objc_msgSend(v36, "storeItemID"));

      sub_10006BE0C((Swift::Int *)&v79, v38);
    }

    while (v33 != v35);
    swift_bridgeObjectRelease(a1);
    uint64_t v61 = v80;
  }

  else
  {
    swift_bridgeObjectRelease(a1);
    uint64_t v61 = v32;
  }

  uint64_t v39 = v70;
  swift_unknownObjectWeakInit(&v79, v70);
  uint64_t v78 = &_swiftEmptySetSingleton;
  v60[1] = *(void *)(v39 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_workQueue);
  uint64_t v40 = sub_100029E18(&qword_10013D260);
  uint64_t v41 = v72;
  uint64_t v42 = swift_allocObject( v40,  ((*(unsigned __int8 *)(v72 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))
        + *(void *)(v72 + 72),
          *(unsigned __int8 *)(v72 + 80) | 7LL);
  *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = v75;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v80 = v42;
  unint64_t v43 = sub_100078B04();
  uint64_t v44 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v45 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v46 = v71;
  uint64_t v47 = v73;
  uint64_t v48 = dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v44, v45, v73, v43);
  __chkstk_darwin(v48);
  v60[-4] = a1;
  v60[-3] = v39;
  v60[-2] = &v78;
  uint64_t v49 = v61;
  v60[-1] = v61;
  OS_dispatch_queue.sync<A>(flags:execute:)(v46, sub_100097D50);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v46, v47);
  uint64_t v50 = v76;
  uint64_t v51 = v74;
  v69(v76, v68, v74);
  uint64_t v52 = swift_allocObject(v67, v65, v64);
  *(_OWORD *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = v75;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
  v53._object = (void *)0x80000001000FD950LL;
  v53._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v53);
  Swift::String v83 = &type metadata for Int;
  uint64_t v80 = v62;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v80);
  sub_10004C810((uint64_t)&v80);
  v54._uint64_t countAndFlagsBits = 0x7370706120LL;
  v54._object = (void *)0xE500000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v54);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.info(_:)(v52, v51, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v52);
  v63(v50, v51);
  uint64_t v55 = v78;
  swift_beginAccess(&v79, &v80, 0LL, 0LL);
  uint64_t v56 = swift_unknownObjectWeakLoadStrong(&v79);
  Swift::String v57 = (void *)v56;
  if (v56)
  {
    uint64_t v58 = *(void *)(v56 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_onSynchronizeAppStates);
    swift_bridgeObjectRetain(v55);
    swift_retain(v58);

    __int128 v77 = v55;
    SyncEvent.post(_:)(&v77);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease_n(v55, 2LL);
    swift_release(v58);
  }

  else
  {
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v55);
  }

  return swift_unknownObjectWeakDestroy(&v79);
}

void sub_1000942C0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  [*a1 storeItemID];
  dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v7 = (id)AMSHashIfNeeded(v6);

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = (void *)0xE000000000000000LL;
  }

  id v11 = [v3 progress];
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v40 = v8;
    unint64_t v41 = (unint64_t)v10;
    v13._uint64_t countAndFlagsBits = 8250LL;
    v13._object = (void *)0xE200000000000000LL;
    String.append(_:)(v13);
    id v14 = v12;
    id v15 = [v14 description];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v18 = v17;

    v19._uint64_t countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);

    swift_bridgeObjectRelease(v18);
  }

  else
  {
    uint64_t v40 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(52LL);
    v20._uint64_t countAndFlagsBits = v8;
    v20._object = v10;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v10);
    v21._uint64_t countAndFlagsBits = 0x6C646E75423C203ALL;
    v21._object = (void *)0xEC0000003D444965LL;
    String.append(_:)(v21);
    id v22 = [v3 bundleID];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    Swift::String v25 = v24;

    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v25);
    v27._uint64_t countAndFlagsBits = 0x6C6174736E49202CLL;
    v27._object = (void *)0xEC0000003D64656CLL;
    String.append(_:)(v27);
    unsigned int v28 = [v3 isInstalled];
    BOOL v29 = v28 == 0;
    if (v28) {
      uint64_t v30 = 1702195828LL;
    }
    else {
      uint64_t v30 = 0x65736C6166LL;
    }
    if (v29) {
      unint64_t v31 = 0xE500000000000000LL;
    }
    else {
      unint64_t v31 = 0xE400000000000000LL;
    }
    unint64_t v32 = v31;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease(v31);
    v33._object = (void *)0x80000001000FDB30LL;
    v33._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v33);
    unsigned int v34 = [v3 isLaunchProhibited];
    BOOL v35 = v34 == 0;
    if (v34) {
      uint64_t v36 = 1702195828LL;
    }
    else {
      uint64_t v36 = 0x65736C6166LL;
    }
    if (v35) {
      unint64_t v37 = 0xE500000000000000LL;
    }
    else {
      unint64_t v37 = 0xE400000000000000LL;
    }
    unint64_t v38 = v37;
    String.append(_:)(*(Swift::String *)&v36);
    swift_bridgeObjectRelease(v37);
    v39._uint64_t countAndFlagsBits = 62LL;
    v39._object = (void *)0xE100000000000000LL;
    String.append(_:)(v39);
  }

  *a2 = v40;
  a2[1] = v41;
}

id sub_100094578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = (uint64_t)&_swiftEmptySetSingleton;
  Swift::String v103 = &_swiftEmptySetSingleton;
  int64_t v87 = a1;
  if ((unint64_t)a1 >> 62)
  {
LABEL_76:
    if (a1 < 0) {
      uint64_t v81 = a1;
    }
    else {
      uint64_t v81 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v81);
  }

  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
  }

  uint64_t v9 = &unk_10013E000;
  Swift::String v83 = v5;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
      goto LABEL_81;
    }

    uint64_t v84 = a4;
    uint64_t v10 = 0LL;
    uint64_t v94 = (void *)(a2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates);
    int64_t v11 = v87;
    uint64_t v90 = v8;
    while (1)
    {
      if ((v87 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
      }
      else {
        id v12 = *(id *)(v11 + 8 * v10 + 32);
      }
      Swift::String v13 = v12;
      uint64_t v14 = sub_100094F34(v12);
      if (v16 == -1)
      {
      }

      else
      {
        uint64_t v17 = v14;
        uint64_t v18 = v15;
        char v19 = v16;
        id v20 =  objc_msgSend( objc_allocWithZone((Class)ASCAdamID),  "initWithInt64:",  objc_msgSend(v13, "storeItemID"));
        sub_10006BE0C((Swift::Int *)v102, v20);

        swift_beginAccess(v94, v102, 32LL, 0LL);
        uint64_t v21 = *v94;
        Swift::String v96 = v13;
        if (!*(void *)(*v94 + 16LL)) {
          goto LABEL_17;
        }
        id v22 = v20;
        unint64_t v23 = sub_10008D4F0((uint64_t)v22);
        if ((v24 & 1) == 0)
        {

LABEL_17:
          uint64_t v32 = v17;
          uint64_t v34 = v18;
          swift_endAccess(v102);
LABEL_18:
          swift_beginAccess(v94, v102, 33LL, 0LL);
          id v36 = v20;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v94);
          v101[0] = *v94;
          *uint64_t v94 = 0x8000000000000000LL;
          sub_10008FDAC(v32, v34, v19, v36, isUniquelyReferenced_nonNull_native);
          uint64_t v38 = *v94;
          *uint64_t v94 = v101[0];

          swift_bridgeObjectRelease(v38);
          swift_endAccess(v102);
          id v39 = v36;
          sub_10006BE0C((Swift::Int *)v102, v39);

          uint64_t v8 = v90;
          goto LABEL_7;
        }

        uint64_t v25 = *(void *)(v21 + 56) + 24 * v23;
        Swift::String v26 = v22;
        uint64_t v27 = v18;
        uint64_t v29 = *(void *)v25;
        uint64_t v28 = *(void *)(v25 + 8);
        char v30 = *(_BYTE *)(v25 + 16);
        swift_endAccess(v102);
        sub_100048494(v29, v28, v30);
        id v85 = v26;

        sub_100048494(v29, v28, v30);
        sub_100097C38(v17, v27, v19);
        sub_100048CA8(v29, v28, v30);
        char v88 = v31;
        uint64_t v32 = v17;
        uint64_t v33 = v17;
        uint64_t v34 = v27;
        sub_100049100(v33, v27, v19);
        sub_1000484C0(v29, v28, v30);
        char v35 = v30;
        int64_t v11 = v87;
        sub_1000484C0(v29, v28, v35);
        if ((v88 & 1) == 0) {
          goto LABEL_18;
        }

        sub_100049100(v32, v27, v19);
        uint64_t v8 = v90;
      }

LABEL_56:
    uint64_t v56 = (v63 - 1) & v63;
    unint64_t v57 = __clz(__rbit64(v63)) + (v7 << 6);
LABEL_57:
    id v61 = *(id *)(*(void *)(v41 + 48) + 8 * v57);
    if (!v61) {
      goto LABEL_71;
    }
LABEL_58:
    unint64_t v97 = v56;
    if (v51)
    {
      uint64_t v5 = v61;
      a4 = __CocoaSet.contains(_:)();

      if ((a4 & 1) == 0) {
        goto LABEL_68;
      }

      uint64_t v46 = v7;
      unint64_t v47 = v97;
    }

    else
    {
      if (!*(void *)(v95 + 16)) {
        goto LABEL_68;
      }
      Swift::Int v65 = NSObject._rawHashValue(seed:)(*(void *)(v95 + 40));
      uint64_t v66 = -1LL << *(_BYTE *)(v95 + 32);
      unint64_t v67 = v65 & ~v66;
      if (((*(void *)&v86[(v67 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v67) & 1) == 0) {
        goto LABEL_68;
      }
      uint64_t v46 = v7;
      a4 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
      uint64_t v5 = *(id *)(*(void *)(v95 + 48) + 8 * v67);
      uint64_t v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
      {
LABEL_67:

        unint64_t v47 = v97;
      }

      else
      {
        uint64_t v68 = ~v66;
        while (1)
        {
          unint64_t v67 = (v67 + 1) & v68;
          uint64_t v7 = v46;
          if (((*(void *)&v86[(v67 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v67) & 1) == 0) {
            break;
          }
          uint64_t v5 = *(id *)(*(void *)(v95 + 48) + 8 * v67);
          uint64_t v7 = static NSObject.== infix(_:_:)();

          if ((v7 & 1) != 0) {
            goto LABEL_67;
          }
        }

LABEL_68:
        uint64_t v46 = v7;
        uint64_t v69 = *v91;
        swift_bridgeObjectRetain(*v91);
        unint64_t v70 = sub_10008D4F0((uint64_t)v61);
        uint64_t v7 = v71;
        swift_bridgeObjectRelease(v69);
        if ((v7 & 1) != 0)
        {
          char v72 = swift_isUniquelyReferenced_nonNull_native(*v91);
          uint64_t v73 = (void *)*v91;
          id v99 = (id)*v91;
          void *v91 = 0x8000000000000000LL;
          if ((v72 & 1) == 0)
          {
            sub_10005D004();
            uint64_t v73 = v99;
          }

          uint64_t v52 = v73[7] + 24 * v70;
          uint64_t v7 = *(void *)v52;
          uint64_t v53 = *(void *)(v52 + 8);
          char v54 = *(_BYTE *)(v52 + 16);
          sub_10005C54C(v70, (uint64_t)v73);
          uint64_t v55 = *v91;
          void *v91 = v73;
          swift_bridgeObjectRelease(v55);
          sub_1000484C0(v7, v53, v54);
          unint64_t v51 = v95 & 0xC000000000000001LL;
        }

        uint64_t v5 = v61;
        sub_10006BE0C((Swift::Int *)&v99, v5);

        a4 = a3;
        sub_10006BE0C((Swift::Int *)&v99, v5);

        unint64_t v47 = v97;
      }
    }
  }

  uint64_t v64 = (char *)(v46 + 6);
  while ((char *)v87 != v64)
  {
    unint64_t v63 = v89[(void)v64++];
    if (v63)
    {
      uint64_t v7 = (uint64_t)(v64 - 1);
      goto LABEL_56;
    }
  }

  __break(1u);
}

LABEL_71:
  sub_10002EB74(v41);
  uint64_t v74 = v100;
  swift_endAccess(v101);
  swift_bridgeObjectRelease(v95);
  uint64_t v75 = *sub_100029EE0( (void *)(a2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry),  *(void *)(a2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry + 24));
  if (qword_10013BBE8 != -1) {
    swift_once(&qword_10013BBE8, sub_100092878);
  }
  uint64_t v76 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v76, (uint64_t)qword_10013E6C0);
  uint64_t v77 = sub_100029E18(&qword_10013EA00);
  uint64_t v78 = type metadata accessor for LogMessage(0LL);
  uint64_t v79 = swift_allocObject( v77,  ((*(unsigned __int8 *)(*(void *)(v78 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v78 - 8) + 80LL))
        + *(void *)(*(void *)(v78 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v78 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v79 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000012LL, 0x80000001000FD970LL);
  Logger.info(_:)(v79, v76, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v79);
  a4 = *(void *)(v75 + 24);
  [(id)a4 lock];
  sub_100092E9C(v74, v75);
  if (!v83)
  {
    [(id)a4 unlock];
    return (id)swift_bridgeObjectRelease(v74);
  }

LABEL_81:
  id result = objc_msgSend((id)a4, "unlock", v82);
  __break(1u);
  return result;
}

uint64_t sub_100094F34(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OSLogger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = objc_msgSend( objc_allocWithZone((Class)ASCAdamID),  "initWithInt64:",  objc_msgSend(a1, "storeItemID"));
  id v10 = a1;
  uint64_t v84 = sub_100044D18(v10);
  uint64_t v85 = v11;
  if (v12 != -1)
  {
    char v13 = v12;
    if (qword_10013BBF0 != -1) {
      swift_once(&qword_10013BBF0, sub_100093A84);
    }
    uint64_t v14 = sub_10002A768(v5, (uint64_t)qword_100148580);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v82 = v14;
    uint64_t v76 = v15;
    ((void (*)(char *))v15)(v8);
    uint64_t v16 = sub_100029E18(&qword_10013EA00);
    uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v18 = *(void *)(v17 + 72);
    uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v20 = (v19 + 32) & ~v19;
    uint64_t v80 = v16;
    uint64_t v77 = v20 + v18;
    uint64_t v78 = v19 | 7;
    uint64_t v21 = swift_allocObject(v16, v20 + v18, v19 | 7);
    __int128 v79 = xmmword_1000EDBE0;
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
    uint64_t v81 = v20;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 2LL);
    v22._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    v22._object = (void *)0x80000001000FD9C0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v90 = (ValueMetadata *)sub_10002A030(0LL, (unint64_t *)&unk_10013DBC0, &OBJC_CLASS___ASDApp_ptr);
    uint64_t v87 = (uint64_t)v10;
    unint64_t v23 = (char *)v10;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
    sub_10004C810((uint64_t)&v87);
    v24._uint64_t countAndFlagsBits = 544434464LL;
    v24._object = (void *)0xE400000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v90 = &type metadata for AppState_V1;
    uint64_t v87 = v84;
    uint64_t v88 = v85;
    LOBYTE(v89) = v13;
    sub_100048494(v84, v85, v13);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
    sub_10004C810((uint64_t)&v87);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v4);
    Logger.info(_:)(v21, v5, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v21);
    Swift::String v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26(v8, v5);
    uint64_t v27 = &v83[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry];
    uint64_t v28 = sub_100029EE0( &v83[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry],  *(void *)&v83[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry + 24]);
    uint64_t v29 = *v28;
    char v30 = *(void **)(*v28 + 24LL);
    [v30 lock];
    swift_beginAccess(v29 + 16, v86, 0LL, 0LL);
    uint64_t v31 = *(void *)(v29 + 16);
    if (*(void *)(v31 + 16))
    {
      Swift::String v83 = v23;
      id v32 = v9;
      swift_bridgeObjectRetain(v31);
      unint64_t v33 = sub_10008D4F0((uint64_t)v32);
      if ((v34 & 1) != 0)
      {
        char v35 = (void **)(*(void *)(v31 + 56) + 24 * v33);
        id v36 = *v35;
        uint64_t v74 = v27;
        uint64_t v75 = (uint64_t)v36;
        unint64_t v37 = v35[2];
        uint64_t v73 = (uint64_t)v35[1];
        swift_bridgeObjectRetain(v37);

        swift_bridgeObjectRelease(v31);
        [v30 unlock];
        if (v37)
        {
          uint64_t v38 = (uint64_t)v37;
          v76(v8, v82, v5);
          uint64_t v39 = swift_allocObject(v80, v77, v78);
          *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v79;
          char v72 = v26;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(50LL, 2LL);
          v40._uint64_t countAndFlagsBits = 0xD000000000000029LL;
          v40._object = (void *)0x80000001000FD9E0LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v40);
          uint64_t v41 = v73;
          uint64_t v87 = v75;
          uint64_t v88 = v73;
          uint64_t v89 = v38;
          uint64_t v90 = &type metadata for AvailableUpdate;
          uint64_t v71 = v38;
          swift_bridgeObjectRetain(v38);
          LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
          sub_10004C810((uint64_t)&v87);
          v42._uint64_t countAndFlagsBits = 0x70706120726F6620LL;
          v42._object = (void *)0xE900000000000020LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v42);
          uint64_t v43 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
          uint64_t v90 = (ValueMetadata *)v43;
          uint64_t v87 = (uint64_t)v32;
          id v70 = v32;
          LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
          sub_10004C810((uint64_t)&v87);
          v44._uint64_t countAndFlagsBits = 0LL;
          v44._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v44);
          uint64_t v45 = v72;
          LogMessage.init(stringInterpolation:)(v4);
          Logger.info(_:)(v39, v5, &protocol witness table for OSLogger);
          swift_bridgeObjectRelease(v39);
          v45(v8, v5);
          uint64_t v46 = v85;
          if (v13 == 5 && (sub_100048494(v84, v85, 5), [v83 storeItemID]) && v46)
          {
            uint64_t v48 = v74;
            uint64_t v47 = v75;
            if (v46 >= v75)
            {
              swift_bridgeObjectRelease(v71);
              uint64_t v67 = swift_allocObject(v80, v77, v78);
              *(_OWORD *)(v67 + swift_unknownObjectWeakDestroy(v0 + 16) = v79;
              LogMessage.init(stringLiteral:)(0xD000000000000015LL, 0x80000001000FDA40LL);
              Logger.info(_:)(v67, v5, &protocol witness table for OSLogger);
              swift_bridgeObjectRelease(v67);
              sub_100029EE0(v48, *((void *)v48 + 3));
              uint64_t v68 = v70;
              sub_100092C60(v70);
            }

            else
            {
              v76(v8, v82, v5);
              uint64_t v49 = swift_allocObject(v80, v77, v78);
              *(_OWORD *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = v79;
              uint64_t v84 = v49 + v81;
              LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(91LL, 3LL);
              v50._uint64_t countAndFlagsBits = 0xD000000000000027LL;
              v50._object = (void *)0x80000001000FDA60LL;
              LogMessage.StringInterpolation.appendLiteral(_:)(v50);
              uint64_t v90 = (ValueMetadata *)&type metadata for Int64;
              uint64_t v87 = v47;
              LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
              sub_10004C810((uint64_t)&v87);
              v51._uint64_t countAndFlagsBits = 0xD000000000000021LL;
              v51._object = (void *)0x80000001000FDA90LL;
              LogMessage.StringInterpolation.appendLiteral(_:)(v51);
              uint64_t v90 = (ValueMetadata *)&type metadata for Int64;
              uint64_t v87 = v46;
              LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
              sub_10004C810((uint64_t)&v87);
              v52._object = (void *)0x80000001000FDAC0LL;
              v52._uint64_t countAndFlagsBits = 0xD000000000000013LL;
              LogMessage.StringInterpolation.appendLiteral(_:)(v52);
              uint64_t v90 = &type metadata for AppState_V1;
              uint64_t v87 = v41;
              uint64_t v88 = v71;
              LOBYTE(v89) = 2;
              swift_bridgeObjectRetain(v71);
              LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
              sub_10004C810((uint64_t)&v87);
              v53._uint64_t countAndFlagsBits = 0LL;
              v53._object = (void *)0xE000000000000000LL;
              LogMessage.StringInterpolation.appendLiteral(_:)(v53);
              LogMessage.init(stringInterpolation:)(v4);
              Logger.info(_:)(v49, v5, &protocol witness table for OSLogger);

              swift_bridgeObjectRelease(v49);
              v72(v8, v5);
              return v41;
            }
          }

          else
          {
            swift_bridgeObjectRelease(v71);
            v76(v8, v82, v5);
            uint64_t v62 = swift_allocObject(v80, v77, v78);
            *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = v79;
            LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(53LL, 1LL);
            v63._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
            v63._object = (void *)0x80000001000FDA10LL;
            LogMessage.StringInterpolation.appendLiteral(_:)(v63);
            uint64_t v90 = (ValueMetadata *)v43;
            uint64_t v87 = (uint64_t)v70;
            uint64_t v64 = v45;
            id v65 = v70;
            LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(&v87);
            sub_10004C810((uint64_t)&v87);
            v66._object = (void *)0xE900000000000065LL;
            v66._uint64_t countAndFlagsBits = 0x6C61747320736920LL;
            LogMessage.StringInterpolation.appendLiteral(_:)(v66);
            LogMessage.init(stringInterpolation:)(v4);
            Logger.info(_:)(v62, v5, &protocol witness table for OSLogger);
            swift_bridgeObjectRelease(v62);
            v64(v8, v5);
            sub_100029EE0(v74, *((void *)v74 + 3));
            sub_100092C60(v65);
          }

          return v84;
        }

uint64_t sub_1000958FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates);
  swift_beginAccess( a1 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates,  v15,  32LL,  0LL);
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16))
  {
    id v7 = a2;
    unint64_t v8 = sub_10008D4F0((uint64_t)v7);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(v6 + 56) + 24 * v8;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(_BYTE *)(v10 + 16);
      sub_100048494(*(void *)v10, v12, v13);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      char v13 = -1;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    char v13 = -1;
  }

  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  return swift_endAccess(v15);
}

uint64_t sub_1000959D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v7 = sub_1000762BC( *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_query),  *(_BYTE *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_query + 8));
  uint64_t v8 = swift_allocObject(&unk_100123100, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16, v3);
  char v9 = (void *)swift_allocObject(&unk_100123178, 40LL, 7LL);
  void v9[2] = v8;
  v9[3] = a1;
  v9[4] = a2;
  uint64_t v10 = (void *)swift_allocObject(&unk_1001231A0, 40LL, 7LL);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = ObjectType;
  v13[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v13[4] = &protocol witness table for SyncTaskScheduler;
  sub_10002C328(v13);
  uint64_t v11 = swift_retain_n(a2, 2LL);
  SyncTaskScheduler.init()(v11);
  Promise.then(perform:orCatchError:on:)(sub_100097C98, v9, sub_100097CC8, v10, v13);
  swift_release(v7);
  swift_release(v9);
  swift_release(v10);
  return sub_100029F4C(v13);
}

uint64_t sub_100095B0C(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OSLogger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v52 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = *a1;
  uint64_t v18 = a2 + 16;
  swift_beginAccess(v18, v59, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v18);
  if (!Strong) {
    return a3();
  }
  uint64_t v20 = (void *)Strong;
  uint64_t v50 = v12;
  uint64_t v48 = a3;
  swift_beginAccess(v18, v57, 0LL, 0LL);
  uint64_t v21 = (void *)swift_unknownObjectWeakLoadStrong(v18);
  swift_unknownObjectWeakInit(v58, v21);

  uint64_t v56 = &_swiftEmptySetSingleton;
  uint64_t v22 = sub_100029E18(&qword_10013D260);
  uint64_t v23 = swift_allocObject( v22,  ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
        + *(void *)(v15 + 72),
          *(unsigned __int8 *)(v15 + 80) | 7LL);
  __int128 v49 = xmmword_1000EDBE0;
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v51 = a4;
  uint64_t v24 = swift_retain(a4);
  static DispatchWorkItemFlags.barrier.getter(v24);
  v55[0] = v23;
  unint64_t v25 = sub_100078B04();
  uint64_t v26 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v27 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v28 = dispatch thunk of SetAlgebra.init<A>(_:)(v55, v26, v27, v14, v25);
  __chkstk_darwin(v28);
  *(&v47 - 4) = v53;
  *(&v47 - 3) = (uint64_t)v20;
  uint64_t v29 = v20;
  *(&v47 - 2) = (uint64_t)&v56;
  *(&v47 - 1) = 0LL;
  OS_dispatch_queue.sync<A>(flags:execute:)(v17, sub_100097D50);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (qword_10013BBF0 != -1) {
    swift_once(&qword_10013BBF0, sub_100093A84);
  }
  uint64_t v30 = sub_10002A768(v11, (uint64_t)qword_100148580);
  uint64_t v31 = v50;
  id v32 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v52, v30, v11);
  uint64_t v33 = sub_100029E18(&qword_10013EA00);
  uint64_t v34 = type metadata accessor for LogMessage(0LL);
  uint64_t v35 = swift_allocObject( v33,  ((*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL))
        + *(void *)(*(void *)(v34 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v49;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
  v36._object = (void *)0x80000001000FD950LL;
  v36._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v36);
  uint64_t v37 = v53;
  if ((unint64_t)v53 >> 62)
  {
    if (v53 < 0) {
      uint64_t v46 = v53;
    }
    else {
      uint64_t v46 = v53 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v53);
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v46);
    swift_bridgeObjectRelease(v37);
  }

  else
  {
    uint64_t v38 = *(void *)((v53 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v39 = v51;
  void v55[3] = &type metadata for Int;
  v55[0] = v38;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v55);
  sub_10004C810((uint64_t)v55);
  v40._uint64_t countAndFlagsBits = 0x7370706120LL;
  v40._object = (void *)0xE500000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  LogMessage.init(stringInterpolation:)(v10);
  Logger.info(_:)(v35, v11, &protocol witness table for OSLogger);
  __n128 v41 = swift_bridgeObjectRelease(v35);
  (*(void (**)(char *, uint64_t, __n128))(v31 + 8))(v32, v11, v41);
  Swift::String v42 = v56;
  swift_beginAccess(v58, v55, 0LL, 0LL);
  uint64_t v43 = swift_unknownObjectWeakLoadStrong(v58);
  if (v43)
  {
    Swift::String v44 = (void *)v43;
    uint64_t v54 = v42;
    swift_bridgeObjectRetain(v42);
    SyncEvent.post(_:)(&v54);
    ((void (*)(void))v48)(0LL);
    swift_release(v39);

    swift_bridgeObjectRelease_n(v42, 2LL);
  }

  else
  {
    swift_release(v39);

    swift_bridgeObjectRelease(v42);
  }

  return swift_unknownObjectWeakDestroy(v58);
}

uint64_t sub_100095FCC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBF0 != -1) {
    swift_once(&qword_10013BBF0, sub_100093A84);
  }
  uint64_t v10 = sub_10002A768(v6, (uint64_t)qword_100148580);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = sub_100029E18(&qword_10013EA00);
  uint64_t v12 = type metadata accessor for LogMessage(0LL);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
        + *(void *)(*(void *)(v12 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(35LL, 1LL);
  v14._object = (void *)0x80000001000FDAE0LL;
  v14._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  swift_getErrorValue(a1, v25, &v23);
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  void v26[3] = v24;
  uint64_t v17 = sub_10002C328(v26);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v17, v15, v16);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
  sub_10004C810((uint64_t)v26);
  v18._uint64_t countAndFlagsBits = 0LL;
  v18._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.error(_:)(v13, v6, &protocol witness table for OSLogger);
  __n128 v19 = swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v19);
  return v22(a1);
}

uint64_t sub_1000961E8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v11 = swift_bridgeObjectRetain(a1);
  uint64_t v12 = sub_1000476FC(v11);
  swift_bridgeObjectRelease(a1);
  uint64_t v13 = sub_1000762BC((uint64_t)v12, 0);
  swift_release(v12);
  uint64_t v14 = swift_allocObject(&unk_100123100, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v5);
  uint64_t v15 = swift_allocObject(&unk_100123128, 49LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a4;
  *(void *)(v15 + 40) = a1;
  *(_BYTE *)(v15 + 48) = a2;
  uint64_t v16 = (void *)swift_allocObject(&unk_100123150, 48LL, 7LL);
  _OWORD v16[2] = a1;
  v16[3] = a3;
  v16[4] = a4;
  void v16[5] = ObjectType;
  void v19[3] = type metadata accessor for SyncTaskScheduler(0LL);
  void v19[4] = &protocol witness table for SyncTaskScheduler;
  sub_10002C328(v19);
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v17 = swift_retain_n(a4, 2LL);
  SyncTaskScheduler.init()(v17);
  Promise.then(perform:orCatchError:on:)(sub_100097BF0, v15, sub_100097C10, v16, v19);
  swift_release(v13);
  swift_release(v15);
  swift_release(v16);
  return sub_100029F4C(v19);
}

uint64_t sub_10009635C(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, int a6)
{
  int v54 = a6;
  uint64_t v51 = a5;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OSLogger(0LL);
  uint64_t v53 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v52 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  Swift::String v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = *a1;
  swift_beginAccess(a2 + 16, v58, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (!Strong) {
    return a3();
  }
  uint64_t v20 = (void *)Strong;
  uint64_t v48 = a3;
  uint64_t v57 = &_swiftEmptySetSingleton;
  v46[1] = *(void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_workQueue);
  uint64_t v21 = sub_100029E18(&qword_10013D260);
  uint64_t v22 = swift_allocObject( v21,  ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
        + *(void *)(v16 + 72),
          *(unsigned __int8 *)(v16 + 80) | 7LL);
  __int128 v47 = xmmword_1000EDBE0;
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  uint64_t v49 = a2;
  swift_retain(a2);
  uint64_t v50 = a4;
  uint64_t v23 = swift_retain(a4);
  static DispatchWorkItemFlags.barrier.getter(v23);
  v56[0] = v22;
  unint64_t v24 = sub_100078B04();
  uint64_t v25 = sub_100029E18((uint64_t *)&unk_10013DBD0);
  uint64_t v26 = sub_100044410( (unint64_t *)&qword_10013D270,  (uint64_t *)&unk_10013DBD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = dispatch thunk of SetAlgebra.init<A>(_:)(v56, v25, v26, v15, v24);
  __chkstk_darwin(v27);
  v46[-4] = v55;
  v46[-3] = v20;
  v46[-2] = &v57;
  v46[-1] = v51;
  OS_dispatch_queue.sync<A>(flags:execute:)(v18, sub_100097C1C);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (qword_10013BBF0 != -1) {
    swift_once(&qword_10013BBF0, sub_100093A84);
  }
  uint64_t v28 = sub_10002A768(v13, (uint64_t)qword_100148580);
  uint64_t v30 = v52;
  uint64_t v29 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v28, v13);
  uint64_t v31 = sub_100029E18(&qword_10013EA00);
  uint64_t v32 = type metadata accessor for LogMessage(0LL);
  uint64_t v33 = swift_allocObject( v31,  ((*(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL))
        + *(void *)(*(void *)(v32 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v47;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
  v34._object = (void *)0x80000001000FD950LL;
  v34._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v34);
  uint64_t v35 = v55;
  if ((unint64_t)v55 >> 62)
  {
    if (v55 < 0) {
      uint64_t v45 = v55;
    }
    else {
      uint64_t v45 = v55 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v55);
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease(v35);
  }

  else
  {
    uint64_t v36 = *(void *)((v55 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v38 = v48;
  uint64_t v37 = v49;
  v56[3] = &type metadata for Int;
  v56[0] = v36;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v56);
  sub_10004C810((uint64_t)v56);
  v39._uint64_t countAndFlagsBits = 0x7370706120LL;
  v39._object = (void *)0xE500000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  LogMessage.init(stringInterpolation:)(v12);
  Logger.info(_:)(v33, v13, &protocol witness table for OSLogger);
  __n128 v40 = swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t, __n128))(v29 + 8))(v30, v13, v40);
  __n128 v41 = v57;
  uint64_t v42 = swift_bridgeObjectRetain(v57);
  uint64_t v43 = v50;
  sub_1000967B4(v42, v54 & 1, v37, (uint64_t (*)(void))v38);

  swift_release(v43);
  swift_release(v37);
  return swift_bridgeObjectRelease_n(v41, 2LL);
}

uint64_t sub_1000967B4(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = a3 + 16;
    swift_beginAccess(a3 + 16, v12, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6);
    if (Strong)
    {
      uint64_t v8 = (void *)Strong;
      uint64_t v9 = *(void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_onSynchronizeAppStates);
      swift_retain(v9);

      uint64_t v11 = a1;
      SyncEvent.post(_:)(&v11);
      swift_release(v9);
    }
  }

  return a4(0LL);
}

uint64_t sub_100096858(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSLogger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10013BBF0 != -1) {
    swift_once(&qword_10013BBF0, sub_100093A84);
  }
  uint64_t v12 = sub_10002A768(v8, (uint64_t)qword_100148580);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = sub_100029E18(&qword_10013EA00);
  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(38LL, 2LL);
  v16._object = (void *)0x80000001000FD710LL;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v30 = sub_100029E18(&qword_10013E590);
  v29[0] = a2;
  swift_bridgeObjectRetain(a2);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v29);
  sub_10004C810((uint64_t)v29);
  v17._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
  v17._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  swift_getErrorValue(a1, v28, &v26);
  uint64_t v18 = v26;
  uint64_t v19 = v27;
  uint64_t v30 = v27;
  uint64_t v20 = sub_10002C328(v29);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v20, v18, v19);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v29);
  sub_10004C810((uint64_t)v29);
  v21._uint64_t countAndFlagsBits = 0LL;
  v21._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  LogMessage.init(stringInterpolation:)(v7);
  Logger.error(_:)(v15, v8, &protocol witness table for OSLogger);
  __n128 v22 = swift_bridgeObjectRelease(v15);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v22);
  return v25(a1);
}

uint64_t type metadata accessor for DeviceAppStateDataSource()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd24DeviceAppStateDataSource);
}

uint64_t sub_100096B94()
{
  return swift_retain(*(void *)(v0
                                + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_onSynchronizeAppStates));
}

uint64_t sub_100096BAC(uint64_t a1)
{
  v3[3] = a1;
  uint64_t v1 = sub_100029E18(&qword_10013E820);
  OS_dispatch_queue.sync<A>(execute:)(&v4, sub_100096C18, v3, v1);
  return v4;
}

uint64_t sub_100096C18@<X0>(uint64_t a1@<X8>)
{
  return sub_1000958FC(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100096C30(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(_BYTE *)(a2 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = v6 >> 6;
  size_t v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    sub_1000970BC((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, v3, a2);
    uint64_t v10 = v9;
    swift_release(a2);
  }

  else
  {
    uint64_t v11 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v11, v8);
    sub_1000970BC((unint64_t *)v11, v7, v3, a2);
    uint64_t v10 = v12;
    swift_release(a2);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return v10;
}

Swift::Int sub_100096DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a1 & 0xC000000000000001LL;
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (v4) {
      return sub_100096C30(a1, a2);
    }
    else {
      return sub_1000974E8(a1, a2);
    }
  }

  if (!v4)
  {
    uint64_t v8 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    uint64_t v9 = &_swiftEmptySetSingleton;
    uint64_t v36 = &_swiftEmptySetSingleton;
    if (v2 < 0) {
      uint64_t v10 = v2;
    }
    else {
      uint64_t v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v11 = __CocoaSet.makeIterator()(v10);
    uint64_t v12 = __CocoaSet.Iterator.next()(v11);
    if (!v12)
    {
LABEL_35:
      swift_release(v11);
      return (Swift::Int)v9;
    }

    uint64_t v13 = a1 + 56;
    while (1)
    {
      uint64_t v34 = v12;
      swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
      if (*(void *)(a1 + 16))
      {
        Swift::Int v14 = NSObject._rawHashValue(seed:)(*(void *)(a1 + 40));
        uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
        unint64_t v16 = v14 & ~v15;
        if (((*(void *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
        {
          id v17 = *(id *)(*(void *)(a1 + 48) + 8 * v16);
          char v18 = static NSObject.== infix(_:_:)();

          if ((v18 & 1) != 0)
          {
LABEL_21:
            __n128 v22 = v36;
            unint64_t v23 = v36[2];
            if (v36[3] <= v23)
            {
              sub_10006CD88(v23 + 1);
              __n128 v22 = v36;
            }

            id v24 = v35;
            Swift::Int result = NSObject._rawHashValue(seed:)(v22[5]);
            uint64_t v25 = v22 + 7;
            uint64_t v26 = -1LL << *((_BYTE *)v22 + 32);
            unint64_t v27 = result & ~v26;
            unint64_t v28 = v27 >> 6;
            if (((-1LL << v27) & ~v22[(v27 >> 6) + 7]) != 0)
            {
              unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~v22[(v27 >> 6) + 7])) | v27 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v30 = 0;
              unint64_t v31 = (unint64_t)(63 - v26) >> 6;
              do
              {
                if (++v28 == v31 && (v30 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }

                BOOL v32 = v28 == v31;
                if (v28 == v31) {
                  unint64_t v28 = 0LL;
                }
                v30 |= v32;
                uint64_t v33 = v25[v28];
              }

              while (v33 == -1);
              unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            }

            *(void *)((char *)v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
            *(void *)(v22[6] + 8 * v29) = v24;
            ++v22[2];
            goto LABEL_14;
          }

          uint64_t v19 = ~v15;
          while (1)
          {
            unint64_t v16 = (v16 + 1) & v19;
            if (((*(void *)(v13 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
              break;
            }
            id v20 = *(id *)(*(void *)(a1 + 48) + 8 * v16);
            char v21 = static NSObject.== infix(_:_:)();

            if ((v21 & 1) != 0) {
              goto LABEL_21;
            }
          }
        }
      }

LABEL_14:
      uint64_t v12 = __CocoaSet.Iterator.next()(result);
      if (!v12)
      {
        uint64_t v9 = v36;
        goto LABEL_35;
      }
    }
  }

  if (a2 >= 0) {
    uint64_t v2 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v5 = __CocoaSet.count.getter(v2);
  Swift::Int v6 = sub_10006CB6C(v2, v5);
  return sub_100096C30(a1, v6);
}

void sub_1000970BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v5 = a3;
    }
    else {
      uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v6 = __CocoaSet.makeIterator()(v5);
    uint64_t v7 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    unint64_t v8 = sub_1000445F4();
    uint64_t v9 = Set.Iterator.init(_cocoa:)(v49, v6, v7, v8);
    uint64_t v4 = v49[0];
    uint64_t v43 = v49[1];
    uint64_t v10 = v49[2];
    uint64_t v11 = v49[3];
    uint64_t v12 = v49[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v43 = a3 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    uint64_t v12 = v15 & *(void *)(a3 + 56);
    uint64_t v9 = (void *)swift_bridgeObjectRetain(a3);
    uint64_t v11 = 0LL;
  }

  uint64_t v41 = 0LL;
  int64_t v42 = (unint64_t)(v10 + 64) >> 6;
  uint64_t v46 = a4 + 56;
  uint64_t v45 = v4;
LABEL_11:
  uint64_t v16 = v11;
  unint64_t v17 = v12;
  while (v4 < 0)
  {
    uint64_t v19 = __CocoaSet.Iterator.next()(v9);
    if (!v19) {
      goto LABEL_48;
    }
    uint64_t v20 = v19;
    uint64_t v48 = v19;
    uint64_t v21 = sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v50, &v48, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    id v22 = v50;
    swift_unknownObjectRelease(v20);
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    if (!v22) {
      goto LABEL_48;
    }
LABEL_36:
    Swift::Int v26 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
    uint64_t v27 = -1LL << *(_BYTE *)(a4 + 32);
    unint64_t v28 = v26 & ~v27;
    unint64_t v29 = v28 >> 6;
    uint64_t v30 = 1LL << v28;
    if (((1LL << v28) & *(void *)(v46 + 8 * (v28 >> 6))) == 0) {
      goto LABEL_12;
    }
    sub_10002A030(0LL, (unint64_t *)&qword_10013CB40, off_10011E488);
    id v31 = *(id *)(*(void *)(a4 + 48) + 8 * v28);
    char v32 = static NSObject.== infix(_:_:)();

    if ((v32 & 1) != 0)
    {

LABEL_44:
      uint64_t v4 = v45;
      unint64_t v38 = a1[v29];
      a1[v29] = v30 | v38;
      uint64_t v16 = v11;
      unint64_t v17 = v12;
      if ((v30 & v38) == 0)
      {
        if (!__OFADD__(v41++, 1LL)) {
          goto LABEL_11;
        }
        __break(1u);
        goto LABEL_48;
      }
    }

    else
    {
      uint64_t v33 = ~v27;
      for (unint64_t i = v28 + 1; ; unint64_t i = v35 + 1)
      {
        unint64_t v35 = i & v33;
        id v36 = *(id *)(*(void *)(a4 + 48) + 8 * v35);
        char v37 = static NSObject.== infix(_:_:)();

        if ((v37 & 1) != 0)
        {

          unint64_t v29 = v35 >> 6;
          uint64_t v30 = 1LL << v35;
          goto LABEL_44;
        }
      }

uint64_t sub_1000974E8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(_BYTE *)(a2 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (1LL << v4) + 63;
  uint64_t v7 = v6 >> 6;
  size_t v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    sub_100097668((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, a2, v3);
    uint64_t v10 = v9;
    swift_release(a2);
  }

  else
  {
    uint64_t v11 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v11, v8);
    sub_100097668((unint64_t *)v11, v7, a2, v3);
    uint64_t v10 = v12;
    swift_release(a2);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return v10;
}

void sub_100097668(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0LL;
    uint64_t v55 = a4 + 56;
    uint64_t v7 = 1LL << *(_BYTE *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v56 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v58 = 0LL;
    uint64_t v63 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          uint64_t v59 = (v9 - 1) & v9;
          int64_t v61 = v6;
          unint64_t v10 = __clz(__rbit64(v9)) | (v6 << 6);
          uint64_t v11 = a4;
        }

        else
        {
          int64_t v12 = v6 + 1;
          uint64_t v11 = a4;
          if (__OFADD__(v6, 1LL))
          {
            __break(1u);
            goto LABEL_65;
          }

          if (v12 >= v56) {
            goto LABEL_63;
          }
          unint64_t v13 = *(void *)(v55 + 8 * v12);
          int64_t v14 = v6 + 1;
          if (!v13)
          {
            int64_t v14 = v12 + 1;
            if (v12 + 1 >= v56) {
              goto LABEL_63;
            }
            unint64_t v13 = *(void *)(v55 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v12 + 2;
              if (v12 + 2 >= v56) {
                goto LABEL_63;
              }
              unint64_t v13 = *(void *)(v55 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v12 + 3;
                if (v15 >= v56) {
                  goto LABEL_63;
                }
                unint64_t v13 = *(void *)(v55 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      goto LABEL_67;
                    }
                    if (v14 >= v56) {
                      goto LABEL_63;
                    }
                    unint64_t v13 = *(void *)(v55 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_22;
                    }
                  }
                }

                int64_t v14 = v15;
              }
            }
          }

uint64_t sub_100097B98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100097BBC()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_100097BF0(uint64_t *a1)
{
  return sub_10009635C( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(void))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100097C00()
{
  return sub_100097C5C((void (*)(void))&_swift_bridgeObjectRelease, 48LL);
}

uint64_t sub_100097C10(uint64_t a1)
{
  return sub_100096858(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

id sub_100097C1C()
{
  return sub_100094578(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100097C38(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_100048494(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100097C4C()
{
  return sub_100097C5C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100097C5C(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

uint64_t sub_100097C98(uint64_t *a1)
{
  return sub_100095B0C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100097CA4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100097CC8(uint64_t a1)
{
  return sub_100095FCC(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t sub_100097CD4()
{
  unint64_t result = qword_10013E830;
  if (!qword_10013E830)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013E828);
    sub_100044410(&qword_10013E838, &qword_10013E840, (uint64_t)&protocol conformance descriptor for [A]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013E830);
  }

  return result;
}

id sub_100097D50()
{
  return sub_100097C1C();
}

uint64_t type metadata accessor for DisabledArcadeSubscriptionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd33DisabledArcadeSubscriptionManager);
}

uint64_t sub_100097D84()
{
  return 0LL;
}

uint64_t sub_100097D90()
{
  uint64_t v1 = 0LL;
  char v2 = 3;
  return Promise.__allocating_init(value:)(&v1);
}

uint64_t sub_100097DD4()
{
  uint64_t v0 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v0);
  char v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100032130();
  uint64_t v11 = sub_100029E18(&qword_10013D2F0);
  uint64_t v12 = swift_allocObject( v11,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 72),
          *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v19 = v12;
  unint64_t v13 = sub_100097F9C();
  uint64_t v14 = sub_100029E18(&qword_10013D2F8);
  unint64_t v15 = sub_100097FE4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v7, v13);
  uint64_t v16 = (*(uint64_t (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v3);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000025LL,  0x80000001000FDBC0LL,  v2,  v10,  v6,  0LL);
  qword_100148598 = result;
  return result;
}

unint64_t sub_100097F9C()
{
  unint64_t result = qword_10013DD90;
  if (!qword_10013DD90)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10013DD90);
  }

  return result;
}

unint64_t sub_100097FE4()
{
  unint64_t result = qword_10013DDA0;
  if (!qword_10013DDA0)
  {
    uint64_t v1 = sub_100029F6C(&qword_10013D2F8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10013DDA0);
  }

  return result;
}

ValueMetadata *_s12DownloadableVMa()
{
  return &_s12DownloadableVN;
}

BOOL sub_100098040(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != 3 || a3 > 6u) {
    return 0LL;
  }
  if (((1 << a3) & 0x37) != 0) {
    return 1LL;
  }
  return a3 == 6 && __PAIR128__((unint64_t)(a1 != 0) + a2 - 1, a1 - 1) < 2;
}

void sub_1000980A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_1000445E4((_OWORD *)a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10008F6E0(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    void *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_10004C810(a1);
    sub_10005BE08(a2, a3, v10);
    swift_bridgeObjectRelease(a3);
    sub_10004C810((uint64_t)v10);
  }

uint64_t sub_100098160(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v97 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v97 - v10, v3, a1);
  uint64_t v13 = _getErrorEmbeddedNSError<A>(_:)(v11, a1, a2);
  if (v13)
  {
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, a1);
  }

  else
  {
    uint64_t v14 = swift_allocError(a1, a2, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15, v11, a1);
  }

  uint64_t v16 = (objc_class *)_convertErrorToNSError(_:)(v14);
  swift_errorRelease(v14);
  uint64_t v98 = v16;
  id v17 = -[objc_class userInfo](v16, "userInfo");
  __n128 v104 = (char *)&type metadata for Any + 8;
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v17,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  if (!*(void *)(v18 + 16))
  {
    swift_bridgeObjectRelease(v18);
    v12(v9, v3, a1);
    uint64_t v94 = _getErrorEmbeddedNSError<A>(_:)(v9, a1, a2);
    if (v94)
    {
      id v93 = (id)v94;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
    }

    else
    {
      id v93 = (id)swift_allocError(a1, a2, 0LL, 0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v95, v9, a1);
    }

    v92.super.Class isa = v98;
LABEL_87:

    return (uint64_t)v93;
  }

  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v99 = v18 + 64;
  uint64_t v20 = 1LL << *(_BYTE *)(v18 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v100 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v101 = v118;
  uint64_t v23 = v121;
  int64_t v97 = v100 - 1;
  swift_bridgeObjectRetain(v18);
  int64_t v105 = 0LL;
  id v24 = (void *)v18;
  uint64_t v25 = v18;
  Swift::String v103 = v121;
  while (1)
  {
    if (v22)
    {
      unint64_t v27 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v28 = v27 | (v105 << 6);
LABEL_13:
      uint64_t v29 = *(void *)(v25 + 56);
      char v30 = (void *)(*(void *)(v25 + 48) + 16 * v28);
      uint64_t v31 = v30[1];
      *(void *)&__int128 v117 = *v30;
      *((void *)&v117 + 1) = v31;
      sub_100060108(v29 + 32 * v28, (uint64_t)v101);
      swift_bridgeObjectRetain(v31);
      goto LABEL_32;
    }

    int64_t v32 = v105 + 1;
    if (__OFADD__(v105, 1LL)) {
      goto LABEL_89;
    }
    if (v32 < v100)
    {
      unint64_t v33 = *(void *)(v99 + 8 * v32);
      if (v33) {
        goto LABEL_17;
      }
      int64_t v34 = v105 + 2;
      ++v105;
      if (v32 + 1 < v100)
      {
        unint64_t v33 = *(void *)(v99 + 8 * v34);
        if (v33) {
          goto LABEL_20;
        }
        int64_t v105 = v32 + 1;
        if (v32 + 2 < v100)
        {
          unint64_t v33 = *(void *)(v99 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2LL;
            goto LABEL_17;
          }

          int64_t v34 = v32 + 3;
          int64_t v105 = v32 + 2;
          if (v32 + 3 < v100) {
            break;
          }
        }
      }
    }

LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100098AD4()
{
  uint64_t v0 = sub_100029E18(&qword_10013CCD0);
  uint64_t v1 = swift_allocObject(v0, 96LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EEB80;
  *(void *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASCMetricsErrorEventTypeKey");
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASCMetricsErrorFieldsKey");
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(v1 + 72) = v4;
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(NSStringEncodingErrorKey);
  *(void *)(v1 + 80) = result;
  *(void *)(v1 + 88) = v6;
  off_10013E8F0 = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_100098B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18(&qword_10013E8F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100098BAC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for () + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = "\b";
    v4[6] = "\b";
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 7LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100098C54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = *(void *)(v2 + 128);
  uint64_t v15 = *(void *)((char *)v0 + v14);
  if (v15)
  {
    uint64_t v16 = swift_retain(v15);
    dispatch thunk of DispatchWorkItem.cancel()(v16);
    uint64_t result = swift_release(v15);
  }

  if (!*((void *)v1 + 6))
  {
    static DispatchTime.now()(result);
    + infix(_:_:)(v10, v1[2]);
    id v17 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v18 = v17(v10, v6);
    static DispatchTime.distantFuture.getter(v18);
    char v19 = static DispatchTime.< infix(_:_:)(v13, v10);
    uint64_t result = v17(v10, v6);
    if ((v19 & 1) != 0)
    {
      uint64_t v20 = swift_allocObject(&unk_100123358, 24LL, 7LL);
      swift_weakInit(v20 + 16, v1);
      uint64_t v21 = swift_allocObject(&unk_100123380, 32LL, 7LL);
      *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 80);
      *(void *)(v21 + 24) = v20;
      aBlock[4] = sub_100099AB8;
      uint64_t v34 = v21;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10008A71C;
      aBlock[3] = &unk_100123398;
      unint64_t v22 = _Block_copy(aBlock);
      int64_t v32 = _swiftEmptyArrayStorage;
      unint64_t v23 = sub_100078B04();
      uint64_t v31 = (void (*)(char *, uint64_t))v17;
      unint64_t v24 = v23;
      swift_retain(v20);
      uint64_t v25 = sub_100029E18((uint64_t *)&unk_10013DBD0);
      unint64_t v26 = sub_1000766D4();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v3, v24);
      uint64_t v27 = type metadata accessor for DispatchWorkItem(0LL);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      uint64_t v28 = DispatchWorkItem.init(flags:block:)(v5, v22);
      uint64_t v29 = v34;
      swift_release(v20);
      swift_release(v29);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v13, v28);
      v31(v13, v6);
      uint64_t v30 = *(void *)((char *)v1 + v14);
      *(void *)((char *)v1 + v14) = v28;
      return swift_release(v30);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100098EE4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_100098F38();
    return swift_release(v3);
  }

  return result;
}

double sub_100098F38()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v30[-v9 - 8];
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v15 = (void *)v1[5];
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v10, 1LL, 1LL, v6);
  id v17 = (char *)v1 + *(void *)(*v1 + 120LL);
  swift_beginAccess(v17, v30, 33LL, 0LL);
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 40))(v17, v10, v7);
  swift_endAccess(v30);
  uint64_t v18 = *(void *)(*v1 + 128LL);
  uint64_t v19 = *(void *)((char *)v1 + v18);
  *(void *)((char *)v1 + v18) = 0LL;
  swift_release(v19);
  uint64_t v20 = *(void *)(*v1 + 136LL);
  uint64_t v21 = *(void *)((char *)v1 + v20);
  *(void *)((char *)v1 + v20) = 0LL;
  swift_unknownObjectRelease(v21);
  if (qword_10013BC48 != -1) {
LABEL_5:
  }
    swift_once(&qword_10013BC48, sub_1000D1558);
  uint64_t v22 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v22, (uint64_t)qword_100148618);
  uint64_t v23 = sub_100029E18(&qword_10013EA00);
  uint64_t v24 = type metadata accessor for LogMessage(0LL);
  uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL))
        + *(void *)(*(void *)(v24 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(34LL, 1LL);
  v26._uint64_t countAndFlagsBits = 0LL;
  v26._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  LogMessage.StringInterpolation.appendInterpolation(identity:)(v1);
  v27._object = (void *)0x80000001000FDCB0LL;
  v27._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  LogMessage.init(stringInterpolation:)(v5);
  Logger.debug(_:)(v25, v22, &protocol witness table for OSLogger);
  *(void *)&double result = swift_bridgeObjectRelease(v25).n128_u64[0];
  return result;
}

uint64_t sub_1000991F4()
{
  uint64_t v1 = *(dispatch_queue_s **)(v0 + 40);
  uint64_t v2 = swift_allocObject(&unk_1001233D0, 32LL, 7LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100099AC0;
  *(void *)(v2 + 24) = v0;
  void v6[4] = sub_100099AD8;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  v6[2] = sub_1000994C4;
  void v6[3] = &unk_1001233E8;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(objc_storeStrong((id *)&qword_100140838, v1) = swift_isEscapingClosureAtFileLocation(v2, "", 110LL, 157LL, 24LL, 1LL);
  swift_release(v0);
  uint64_t result = swift_release(v2);
  return result;
}

double sub_1000992FC(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = a1[6];
  BOOL v6 = __CFADD__(v5, 1LL);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_10013BC48, sub_1000D1558);
    goto LABEL_5;
  }

  a1[6] = v7;
  uint64_t v8 = *(void *)(*a1 + 128LL);
  uint64_t v9 = *(void *)((char *)a1 + v8);
  if (v9)
  {
    uint64_t v10 = swift_retain(*(void *)((char *)a1 + v8));
    dispatch thunk of DispatchWorkItem.cancel()(v10);
    swift_release(v9);
  }

  if (qword_10013BC48 != -1) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v11 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v11, (uint64_t)qword_100148618);
  uint64_t v12 = sub_100029E18(&qword_10013EA00);
  uint64_t v13 = type metadata accessor for LogMessage(0LL);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
        + *(void *)(*(void *)(v13 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
  v15._uint64_t countAndFlagsBits = 0LL;
  v15._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.StringInterpolation.appendInterpolation(identity:)(a1);
  v16._object = (void *)0x80000001000FDCE0LL;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)(v4);
  Logger.debug(_:)(v14, v11, &protocol witness table for OSLogger);
  *(void *)&double result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

uint64_t sub_1000994A4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000994C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000994E4()
{
  uint64_t v1 = *(dispatch_queue_s **)(v0 + 40);
  uint64_t v2 = swift_allocObject(&unk_100123308, 32LL, 7LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100099A20;
  *(void *)(v2 + 24) = v0;
  void v6[4] = sub_100099A38;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  v6[2] = sub_1000994C4;
  void v6[3] = &unk_100123320;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(objc_storeStrong((id *)&qword_100140838, v1) = swift_isEscapingClosureAtFileLocation(v2, "", 110LL, 170LL, 24LL, 1LL);
  swift_release(v0);
  uint64_t result = swift_release(v2);
  return result;
}

void sub_1000995EC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 80LL);
  uint64_t v3 = type metadata accessor for Optional(0LL, v2);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = &v27[-v5 - 8];
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = a1[6];
  if (!v10)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v11 = qword_10013BC48;
  uint64_t v12 = v10 - 1;
  a1[6] = v12;
  if (v12)
  {
    if (v11 == -1)
    {
LABEL_4:
      uint64_t v13 = type metadata accessor for OSLogger(0LL);
      sub_10002A768(v13, (uint64_t)qword_100148618);
      uint64_t v14 = sub_100029E18(&qword_10013EA00);
      uint64_t v15 = type metadata accessor for LogMessage(0LL);
      uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
            + *(void *)(*(void *)(v15 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000EDBE0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(33LL, 1LL);
      v17._uint64_t countAndFlagsBits = 0LL;
      v17._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v17);
      LogMessage.StringInterpolation.appendInterpolation(identity:)(a1);
      v18._object = (void *)0x80000001000FDC50LL;
      v18._uint64_t countAndFlagsBits = 0xD000000000000021LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v18);
      LogMessage.init(stringInterpolation:)(v9);
      Logger.debug(_:)(v16, v13, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v16);
      return;
    }

uint64_t *sub_10009992C()
{
  uint64_t v1 = *v0;
  swift_release(v0[4]);

  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 120);
  uint64_t v3 = type metadata accessor for Optional(0LL, *(void *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  swift_release(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)));
  swift_unknownObjectRelease(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 136)));
  return v0;
}

uint64_t sub_1000999B0()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for ExpiringValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100079578(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExpiringValue);
}

uint64_t sub_1000999E0()
{
  return sub_1000991F4();
}

uint64_t sub_100099A00()
{
  return sub_1000994E4();
}

void sub_100099A20()
{
}

uint64_t sub_100099A28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100099A38()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100099A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100099A68(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100099A70()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100099A94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100099AB8()
{
  return sub_100098EE4(*(void *)(v0 + 24));
}

double sub_100099AC0()
{
  return sub_1000992FC(v0);
}

uint64_t sub_100099AC8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100099AEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100048698(*a1, *a2);
}

Swift::Int sub_100099AF8()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7);
  unint64_t v2 = 0xEC00000043343230LL;
  unint64_t v3 = 0x325F6E6F6273696CLL;
  if (v1 != 1)
  {
    unint64_t v3 = 0xD000000000000013LL;
    unint64_t v2 = 0x80000001000FA5C0LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x746174735F707061LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xED0000305F325F65LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100099BB0(uint64_t a1)
{
  unint64_t v2 = 0xEC00000043343230LL;
  unint64_t v3 = 0x325F6E6F6273696CLL;
  if (*v1 != 1)
  {
    unint64_t v3 = 0xD000000000000013LL;
    unint64_t v2 = 0x80000001000FA5C0LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x746174735F707061LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xED0000305F325F65LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100099C44()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7);
  unint64_t v2 = 0xEC00000043343230LL;
  unint64_t v3 = 0x325F6E6F6273696CLL;
  if (v1 != 1)
  {
    unint64_t v3 = 0xD000000000000013LL;
    unint64_t v2 = 0x80000001000FA5C0LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x746174735F707061LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xED0000305F325F65LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100099CF8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100099DF8(*a1);
  *a2 = result;
  return result;
}

void sub_100099D24(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xED0000305F325F65LL;
  unint64_t v4 = 0xEC00000043343230LL;
  unint64_t v5 = 0x325F6E6F6273696CLL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000013LL;
    unint64_t v4 = 0x80000001000FA5C0LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746174735F707061LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

const char *sub_100099D9C()
{
  return "AppStoreComponents";
}

const char *sub_100099DB0()
{
  int v1 = "lisbon_2024C";
  if (*v0 != 1) {
    int v1 = "as_restore_deeplink";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "app_state_2_0";
  }
}

unint64_t sub_100099DF8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F898, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t storeEnumTagSinglePayload for Feature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100099E8C + 4 * byte_1000EFCE5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100099EC0 + 4 * byte_1000EFCE0[v4]))();
}

uint64_t sub_100099EC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099EC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100099ED0LL);
  }
  return result;
}

uint64_t sub_100099EDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100099EE4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100099EE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100099EF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

unint64_t sub_100099F10()
{
  unint64_t result = qword_10013EA08;
  if (!qword_10013EA08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EFD74, &type metadata for Feature);
    atomic_store(result, (unint64_t *)&qword_10013EA08);
  }

  return result;
}

uint64_t sub_100099F54@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HardwarePlatform(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_retain(v3);
  return a1;
}

uint64_t destroy for HardwarePlatform(void *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for HardwarePlatform(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for HardwarePlatform(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HardwarePlatform(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HardwarePlatform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HardwarePlatform()
{
  return &type metadata for HardwarePlatform;
}

uint64_t sub_10009A0B8()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_10009A0C0()
{
  return v2;
}

void sub_10009A110(_BYTE *a1@<X8>)
{
  int v2 = *(unsigned __int8 *)(v1 + 24);
  if (v2 == 2) {
    __break(1u);
  }
  else {
    *a1 = v2 & 1;
  }
}

JSValue __swiftcall NSHTTPCookie.makeValue(in:)(JSContext in)
{
  int v2 = v1;
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013F9B0);
  uint64_t v5 = __chkstk_darwin(v4);
  int v54 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v52 - v7;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v55 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v53 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___JSValue);
  result.super.Class isa = (Class)[v11 valueWithNewObjectInContext:in.super.isa];
  if (!result.super.isa)
  {
    __break(1u);
    goto LABEL_15;
  }

  Class isa = result.super.isa;
  id v14 = [v2 name];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  uint64_t v56 = v15;
  uint64_t v57 = v17;
  Swift::String v18 = in.super.isa;
  uint64_t v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v56, &type metadata for String);
  id v20 = [v11 valueWithObject:v19 inContext:v18];
  swift_unknownObjectRelease(v19);

  if (!v20)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  JSValue.subscript.setter(v20, 1701667182LL, 0xE400000000000000LL);
  id v21 = [v2 value];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  uint64_t v56 = v22;
  uint64_t v57 = v24;
  uint64_t v25 = v18;
  uint64_t v26 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v56, &type metadata for String);
  id v27 = [v11 valueWithObject:v26 inContext:v25];
  swift_unknownObjectRelease(v26);

  if (!v27)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  JSValue.subscript.setter(v27, 0x65756C6176LL, 0xE500000000000000LL);
  id v28 = [v2 expiresDate];
  uint64_t v30 = (uint64_t)v54;
  uint64_t v29 = v55;
  if (v28)
  {
    uint64_t v31 = v28;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v32 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, v32, 1LL, v9);
  sub_10009A5D0(v30, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1LL, v9) == 1)
  {
    sub_10009A618((uint64_t)v8);
    unint64_t v33 = v25;
    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v35 = v53;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v53, v8, v9);
    uint64_t v36 = v25;
    uint64_t v34 = _bridgeAnythingToObjectiveC<A>(_:)(v35, v9);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v9);
  }

  id v37 = [v11 valueWithObject:v34 inContext:v25];
  swift_unknownObjectRelease(v34);

  if (!v37) {
    goto LABEL_17;
  }
  JSValue.subscript.setter(v37, 0x4473657269707865LL, 0xEB00000000657461LL);
  id v38 = [v2 domain];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  uint64_t v41 = v40;

  uint64_t v56 = v39;
  uint64_t v57 = v41;
  uint64_t v42 = v25;
  uint64_t v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v56, &type metadata for String);
  id v44 = [v11 valueWithObject:v43 inContext:v42];
  swift_unknownObjectRelease(v43);

  if (!v44)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  JSValue.subscript.setter(v44, 0x6E69616D6F64LL, 0xE600000000000000LL);
  id v45 = [v2 path];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  uint64_t v48 = v47;

  uint64_t v56 = v46;
  uint64_t v57 = v48;
  BOOL v49 = v42;
  uint64_t v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v56, &type metadata for String);
  id v51 = [v11 valueWithObject:v50 inContext:v49];
  swift_unknownObjectRelease(v50);

  if (v51)
  {
    JSValue.subscript.setter(v51, 1752457584LL, 0xE400000000000000LL);
    return (JSValue)isa;
  }

uint64_t sub_10009A5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029E18((uint64_t *)&unk_10013F9B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009A618(uint64_t a1)
{
  uint64_t v2 = sub_100029E18((uint64_t *)&unk_10013F9B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009A658()
{
  return CustomJSValueConvertible.jsRepresentation(in:)();
}

JSValue sub_10009A66C(JSContext a1)
{
  return CustomJSValueConvertible._jsValue(in:)(a1);
}

JSValue sub_10009A680(JSContext a1)
{
  return NSHTTPCookie.makeValue(in:)(a1);
}

ValueMetadata *_s9InstalledVMa()
{
  return &_s9InstalledVN;
}

uint64_t sub_10009A6B0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 == 6)
  {
    uint64_t v6 = 0LL;
    if (a4 != 1 || a5) {
      return v6;
    }
    if (a3 == 1)
    {
      if ((a1 & 1) != 0) {
        return 1LL;
      }
    }

    else if (a3 == 6 && a1 == 2 && !a2)
    {
      return 1LL;
    }
  }

  return 0LL;
}

ValueMetadata *_s10InstallingVMa()
{
  return &_s10InstallingVN;
}

uint64_t sub_10009A724(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 == 4)
  {
    if (a6 == 4) {
      return *(double *)&a1 < *(double *)&a4;
    }
  }

  else if (a3 == 6 && a1 == 2 && !a2)
  {
    return 1LL;
  }

  return a6 == 4;
}

uint64_t *sub_10009A8C8(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for JSPromise(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v9 = static RunLoopWorkerThread.current.getter();
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (uint64_t *)swift_allocObject(&unk_100123730, 32LL, 7LL);
    _OWORD v11[2] = (uint64_t)a2;
    v11[3] = v10;
    id v12 = a1;
    id v13 = a2;
    swift_retain(v10);
    uint64_t v14 = JSPromise.init(in:executor:)(v12, sub_10009C1A4, v11);
    if (v2)
    {
      swift_release(v10);
    }

    else
    {
      uint64_t v11 = (uint64_t *)JSPromise.value.getter(v14);
      swift_release(v10);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

  else
  {
    uint64_t v19 = 0LL;
    unint64_t v20 = 0xE000000000000000LL;
    uint64_t v11 = &v19;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease(v20);
    uint64_t v15 = type metadata accessor for JSError(0LL);
    unint64_t v16 = sub_10009BBCC();
    swift_allocError(v15, v16, 0LL, 0LL);
    uint64_t v17 = JSError.init(message:line:column:sourceURL:constructorName:)( 0xD00000000000003ELL,  0x80000001000FDE90LL,  0LL,  1LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL);
    swift_willThrow(v17);
  }

  return v11;
}

uint64_t sub_10009AA7C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v35 = a1;
  uint64_t v36 = a5;
  uint64_t v34 = a3;
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v33 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v11);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100123758, 24LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a4;
  sub_100029E18(&qword_10013EA80);
  uint64_t v15 = Promise.__allocating_init()(a4);
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v13, 1LL, 1LL, v16);
  uint64_t v17 = (void *)swift_allocObject(&unk_100123780, 56LL, 7LL);
  void v17[2] = 0LL;
  v17[3] = 0LL;
  void v17[4] = &unk_10013EA78;
  void v17[5] = v14;
  v17[6] = v15;
  swift_retain(v15);
  uint64_t v18 = sub_1000B3448((uint64_t)v13, (uint64_t)&unk_10013EA88, (uint64_t)v17);
  swift_release(v18);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v10, a2, v7);
  uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = (v20 + 16) & ~v20;
  uint64_t v22 = v21 + v33;
  uint64_t v23 = v20 | 7;
  uint64_t v24 = swift_allocObject(&unk_1001237A8, v21 + v33, v20 | 7);
  uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v25(v24 + v21, v10, v7);
  v19(v10, v34, v7);
  unint64_t v26 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(&unk_1001237D0, v26 + 8, v23);
  v25(v27 + v21, v10, v7);
  id v28 = v35;
  *(void *)(v27 + v26) = v35;
  void v37[3] = type metadata accessor for RunLoopWorkerThread(0LL);
  v37[4] = &protocol witness table for RunLoopWorkerThread;
  uint64_t v29 = v36;
  v37[0] = v36;
  id v30 = v28;
  swift_retain(v29);
  Promise.then(perform:orCatchError:on:)(sub_10009C338, v24, sub_10009BDC0, v27, v37);
  swift_release(v15);
  swift_release(v24);
  swift_release(v27);
  return sub_100029F4C(v37);
}

uint64_t sub_10009ACF8(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_10009C440, 0LL, 0LL);
}

void sub_10009AD10(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for OSLogger(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = *a1;
  uint64_t v5 = sub_100029E18(&qword_10013E5F0);
  uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  *(void *)(v6 + 56) = sub_100029E18((uint64_t *)&unk_10013EF60);
  *(void *)(v6 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  uint64_t v7 = (void *)JSCallable.call(_:)(v6);
  swift_bridgeObjectRelease(v6);
}

uint64_t *sub_10009AFB8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for JSPromise(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v11 = static RunLoopWorkerThread.current.getter();
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = (uint64_t *)swift_allocObject(&unk_100123668, 40LL, 7LL);
    id v13[2] = (uint64_t)a2;
    v13[3] = a3;
    v13[4] = v12;
    id v14 = a1;
    id v15 = a2;
    swift_bridgeObjectRetain(a3);
    swift_retain(v12);
    uint64_t v16 = JSPromise.init(in:executor:)(v14, sub_10009BC48, v13);
    if (v3)
    {
      swift_release(v12);
    }

    else
    {
      id v13 = (uint64_t *)JSPromise.value.getter(v16);
      swift_release(v12);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  else
  {
    uint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    id v13 = &v21;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease(v22);
    uint64_t v17 = type metadata accessor for JSError(0LL);
    unint64_t v18 = sub_10009BBCC();
    swift_allocError(v17, v18, 0LL, 0LL);
    uint64_t v19 = JSError.init(message:line:column:sourceURL:constructorName:)( 0xD00000000000004CLL,  0x80000001000FDDE0LL,  0LL,  1LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL);
    swift_willThrow(v19);
  }

  return v13;
}

uint64_t sub_10009B184(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a3;
  uint64_t v42 = a6;
  uint64_t v40 = a1;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v39 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v13);
  id v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_allocObject(&unk_100123690, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  sub_100029E18(&qword_10013EA58);
  id v17 = a4;
  uint64_t v18 = swift_bridgeObjectRetain(a5);
  uint64_t v19 = Promise.__allocating_init()(v18);
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v15, 1LL, 1LL, v20);
  uint64_t v21 = (void *)swift_allocObject(&unk_1001236B8, 56LL, 7LL);
  uint64_t v21[2] = 0LL;
  v21[3] = 0LL;
  void v21[4] = &unk_10013EA50;
  void v21[5] = v16;
  uint64_t v38 = v19;
  v21[6] = v19;
  swift_retain(v19);
  uint64_t v22 = sub_1000B3448((uint64_t)v15, (uint64_t)&unk_10013EA60, (uint64_t)v21);
  swift_release(v22);
  id v37 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v37(v12, a2, v9);
  uint64_t v23 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v24 = (v23 + 16) & ~v23;
  uint64_t v25 = v23 | 7;
  unint64_t v26 = (v39 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(&unk_1001236E0, v26 + 8, v23 | 7);
  id v28 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v28(v27 + v24, v12, v9);
  id v30 = v40;
  uint64_t v29 = v41;
  *(void *)(v27 + v26) = v40;
  v37(v12, v29, v9);
  uint64_t v31 = swift_allocObject(&unk_100123708, v26 + 8, v25);
  v28(v31 + v24, v12, v9);
  *(void *)(v31 + v26) = v30;
  void v43[3] = type metadata accessor for RunLoopWorkerThread(0LL);
  v43[4] = &protocol witness table for RunLoopWorkerThread;
  uint64_t v32 = v42;
  v43[0] = v42;
  id v33 = v30;
  swift_retain(v32);
  uint64_t v34 = v38;
  Promise.then(perform:orCatchError:on:)(sub_10009BD6C, v27, sub_10009BDC0, v31, v43);
  swift_release(v34);
  swift_release(v27);
  swift_release(v31);
  return sub_100029F4C(v43);
}

uint64_t sub_10009B424(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_10009B43C, 0LL, 0LL);
}

uint64_t sub_10009B43C()
{
  **(void **)(v0 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009B458(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = *a1;
  uint64_t v8 = sub_100029E18(&qword_10013E5F0);
  uint64_t v9 = swift_allocObject(v8, 64LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  id v10 = a3;
  sub_10009BEE0(v7, v10);
  uint64_t v12 = v11;

  *(void *)(v9 + 56) = sub_100029E18(&qword_10013EA68);
  *(void *)(v9 + 32) = v12;
  uint64_t v13 = (void *)JSCallable.call(_:)(v9);
  swift_bridgeObjectRelease(v9);
}

void sub_10009B700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[1] = a2;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for OSLogger(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for JSError(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18(&qword_10013E5F0);
  uint64_t v12 = swift_allocObject(v11, 64LL, 7LL);
  __int128 v20 = xmmword_1000EDBE0;
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  swift_getErrorValue(a1, v22, v21);
  uint64_t v13 = Error.localizedDescription.getter(v21[1], v21[2]);
  JSError.init(message:line:column:sourceURL:constructorName:)(v13, v14, 0LL, 1LL, 0LL, 1LL, 0LL, 0LL, 0LL, 0LL);
  JSError.jsRepresentation(in:)(v23, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = v24;
  uint64_t v16 = sub_100029EE0(v23, v24);
  *(void *)(v12 + 56) = v15;
  id v17 = sub_10002C328((void *)(v12 + 32));
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v17, v16, v15);
  sub_100029F4C(v23);
  uint64_t v18 = (void *)JSCallable.call(_:)(v12);
  swift_bridgeObjectRelease(v12);
}

uint64_t type metadata accessor for JSAppDistributionObject()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd23JSAppDistributionObject);
}

unint64_t sub_10009BB78()
{
  unint64_t result = qword_10013EA40;
  if (!qword_10013EA40)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___JSContext);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10013EA40);
  }

  return result;
}

uint64_t *sub_10009BBB4(void *a1)
{
  return sub_10009AFB8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10009BBCC()
{
  unint64_t result = qword_10013EFA0;
  if (!qword_10013EFA0)
  {
    uint64_t v1 = type metadata accessor for JSError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for JSError, v1);
    atomic_store(result, (unint64_t *)&qword_10013EFA0);
  }

  return result;
}

uint64_t sub_10009BC14()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10009BC48(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10009B184(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_10009BC64()
{
  return sub_10009C16C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10009BC70(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10013EA4C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10002A858;
  v3[2] = a1;
  return swift_task_switch(sub_10009B43C, 0LL, 0LL);
}

uint64_t sub_10009BCD4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013F354);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10002A858;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_10013F350
                                                                                     + dword_10013F350))( a1,  v4,  v5,  v6,  v7,  v8);
}

void sub_10009BD6C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSCallable(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10009B458(a1, v1 + v4, *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

void *sub_10009BDC4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v6 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = v6[4];
      uint64_t v9 = v6[2];
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v7);
      sub_10002F1E0(a2);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      uint64_t v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized ContiguousArray._endMutation()(v14);
      v6 += 6;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void sub_10009BEE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v28 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___JSValue);
    uint64_t v6 = (uint64_t *)(a1 + 48);
    uint64_t v24 = a2;
    while (1)
    {
      uint64_t v25 = v6;
      uint64_t v26 = v3;
      uint64_t v7 = *(v6 - 2);
      uint64_t v8 = *(v6 - 1);
      uint64_t v9 = *v6;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      id v10 = [v5 valueWithNewObjectInContext:a2];
      if (!v10) {
        break;
      }
      id v11 = v10;
      v27[0] = v7;
      v27[1] = v8;
      swift_bridgeObjectRetain(v8);
      id v12 = a2;
      uint64_t v13 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v27, &type metadata for String);
      id v14 = [v5 valueWithObject:v13 inContext:v12];
      swift_unknownObjectRelease(v13);

      if (!v14) {
        goto LABEL_10;
      }
      JSValue.subscript.setter(v14, 25705LL, 0xE200000000000000LL);
      swift_bridgeObjectRetain(v9);
      id v15 = v12;
      uint64_t v16 = sub_10009BDC4(v9, v15);
      swift_bridgeObjectRelease(v9);

      v27[0] = v16;
      id v17 = v15;
      uint64_t v18 = sub_100029E18(&qword_10013EA68);
      uint64_t v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v27, v18);
      id v20 = [v5 valueWithObject:v19 inContext:v17];
      swift_unknownObjectRelease(v19);

      if (!v20)
      {
        __break(1u);
        break;
      }

      JSValue.subscript.setter(v20, 0x7562697274736964LL, 0xEC00000073726F74LL);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      uint64_t v22 = v28[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v11);
      specialized ContiguousArray._endMutation()(v23);
      uint64_t v6 = v25 + 3;
      uint64_t v3 = v26 - 1;
      a2 = v24;
      if (v26 == 1) {
        return;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

uint64_t *sub_10009C148(void *a1)
{
  return sub_10009A8C8(a1, *(void **)(v1 + 16));
}

uint64_t sub_10009C160()
{
  return sub_10009C16C((void (*)(void))&_swift_release);
}

uint64_t sub_10009C16C(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  return swift_deallocObject(v1, 32LL, 7LL);
}

uint64_t sub_10009C1A4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10009AA7C(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_10009C1BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009C1E0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_10013EA74);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100039088;
  v3[2] = a1;
  return swift_task_switch(sub_10009C440, 0LL, 0LL);
}

uint64_t sub_10009C244(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10013F35C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100039088;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_10013F358
                                                                                     + dword_10013F358))( a1,  v4,  v5,  v6,  v7,  v8);
}

uint64_t sub_10009C2D8()
{
  uint64_t v1 = type metadata accessor for JSCallable(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10009C338(uint64_t *a1)
{
}

uint64_t sub_10009C378()
{
  uint64_t v1 = type metadata accessor for JSCallable(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10009C3EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSCallable(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10009B700(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10009C45C(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = &a1[OBJC_IVAR____TtC19appstorecomponentsd20JSAppleSiliconObject_platform];
  uint64_t v6 = *((void *)v5 + 3);
  uint64_t v7 = *((void *)v5 + 4);
  sub_100029EE0(v5, v6);
  uint64_t v8 = a1;
  LOBYTE(a3) = a3(v6, v7);

  return a3 & 1;
}

uint64_t type metadata accessor for JSAppleSiliconObject()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd20JSAppleSiliconObject);
}

void *sub_10009C564(void *a1)
{
  uint64_t v3 = type metadata accessor for JSPromise(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = JSPromise.init(in:executor:)(a1, sub_10009C618, 0LL);
  if (!v1)
  {
    a1 = (void *)JSPromise.value.getter(v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return a1;
}

void sub_10009C618(void *a1)
{
  uint64_t v3 = sub_100029E18(&qword_10013E5F0);
  uint64_t v4 = swift_allocObject(v3, 64LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  id v15 = _swiftEmptyArrayStorage;
  id v5 = a1;
  uint64_t v6 = sub_100029E18((uint64_t *)&unk_10013F910);
  uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v15, v6);
  id v8 = [(id)objc_opt_self(JSValue) valueWithObject:v7 inContext:v5];
  swift_unknownObjectRelease(v7);

  if (v8)
  {
    *(void *)(v4 + 56) = sub_10002A030(0LL, (unint64_t *)&qword_10013EAE8, &OBJC_CLASS___JSValue_ptr);
    *(void *)(v4 + 32) = v8;
    uint64_t v9 = JSCallable.call(_:)(v4);
    if (v1)
    {
      swift_bridgeObjectRelease(v4);
      if (qword_10013BC48 != -1) {
        swift_once(&qword_10013BC48, sub_1000D1558);
      }
      uint64_t v10 = type metadata accessor for OSLogger(0LL);
      sub_10002A768(v10, (uint64_t)qword_100148618);
      uint64_t v11 = sub_100029E18(&qword_10013EA00);
      uint64_t v12 = type metadata accessor for LogMessage(0LL);
      uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
            + *(void *)(*(void *)(v12 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
      LogMessage.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000FE100LL);
      Logger.error(_:)(v13, v10, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(v1);
    }

    else
    {
      id v14 = (void *)v9;
      swift_bridgeObjectRelease(v4);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t type metadata accessor for JSArcadeObject()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd14JSArcadeObject);
}

uint64_t type metadata accessor for JSASKGlobalObject()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd17JSASKGlobalObject);
}

id sub_10009CB00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a13);
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_client] = a1;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_loc] = a2;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_storeMetrics] = a3;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_metricsIdentifiers] = a4;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_props] = a5;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_user] = a6;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_clientOrdering] = a7;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_personalizationStore] = a8;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_arcade] = a9;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_appleSilicon] = a10;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_featureFlags] = a11;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_appDistribution] = a12;
  v23.receiver = a13;
  v23.super_class = ObjectType;
  return objc_msgSendSuper2(&v23, "init");
}

id sub_10009CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for MetricsTopicProvider(0LL);
  __chkstk_darwin(v3);
  id v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Bag(0LL);
  uint64_t v60 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (id *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_100029E18(&qword_10013DDB0);
  uint64_t v10 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v78, v9, a1, v9, v10);
  unint64_t v11 = sub_100057CA8();
  inject<A, B>(_:from:)(v66, v11, a1, v11, v10);
  uint64_t v12 = v66[0];
  id v58 = (id)v66[0];
  uint64_t v13 = sub_100029E18((uint64_t *)&unk_10013DD20);
  inject<A, B>(_:from:)(v77, v13, a1, v13, v10);
  uint64_t v14 = sub_100029E18(&qword_10013D2D8);
  inject<A, B>(_:from:)(v76, v14, a1, v14, v10);
  uint64_t v15 = sub_100029E18(&qword_10013C6B0);
  inject<A, B>(_:from:)(v75, v15, a1, v15, v10);
  uint64_t v16 = sub_100029E18((uint64_t *)&unk_10013DD40);
  inject<A, B>(_:from:)(v74, v16, a1, v16, v10);
  uint64_t v54 = v6;
  uint64_t v55 = v8;
  inject<A, B>(_:from:)(v8, v6, a1, v6, v10);
  inject<A, B>(_:from:)(v66, &type metadata for MetricsIdStore, a1, &type metadata for MetricsIdStore, v10);
  id v17 = (void *)v66[0];
  uint64_t v18 = v66[1];
  uint64_t v19 = sub_100029E18((uint64_t *)&unk_100140320);
  inject<A, B>(_:from:)(v73, v19, a1, v19, v10);
  id v57 = [objc_allocWithZone((Class)ASCJSClientObject) initWithAccountStore:v12];
  sub_1000388F0((uint64_t)v75, (uint64_t)v66);
  id v20 = (objc_class *)type metadata accessor for JSModernLocObject();
  id v21 = objc_allocWithZone(v20);
  sub_1000388F0((uint64_t)v66, (uint64_t)v21 + OBJC_IVAR____TtC19appstorecomponentsd17JSModernLocObject_localizer);
  v72.receiver = v21;
  v72.super_class = v20;
  id v56 = objc_msgSendSuper2(&v72, "init");
  sub_100029F4C(v66);
  sub_1000388F0((uint64_t)v77, (uint64_t)v66);
  uint64_t v22 = (objc_class *)type metadata accessor for JSStoreMetricsObject();
  id v23 = objc_allocWithZone(v22);
  sub_1000388F0((uint64_t)v66, (uint64_t)v23 + OBJC_IVAR____TtC19appstorecomponentsd20JSStoreMetricsObject_eventRecorder);
  v71.receiver = v23;
  v71.super_class = v22;
  id v53 = objc_msgSendSuper2(&v71, "init");
  sub_100029F4C(v66);
  (*(void (**)(char *, void *, uint64_t))(v60 + 16))(v5, v8, v6);
  uint64_t v24 = (objc_class *)type metadata accessor for JSMetricsIdentifiersObject(0LL);
  uint64_t v25 = (char *)objc_allocWithZone(v24);
  uint64_t v26 = &v25[OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsIdStore];
  *(void *)uint64_t v26 = v17;
  *((void *)v26 + 1) = v18;
  uint64_t v51 = v18;
  sub_10009D240( (uint64_t)v5,  (uint64_t)&v25[OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsTopicProvider]);
  v70.receiver = v25;
  v70.super_class = v24;
  id v52 = v17;
  swift_unknownObjectRetain(v18);
  id v50 = objc_msgSendSuper2(&v70, "init");
  sub_10009D284((uint64_t)v5);
  sub_1000388F0((uint64_t)v78, (uint64_t)v66);
  uint64_t v27 = (objc_class *)type metadata accessor for JSUserObject();
  id v28 = objc_allocWithZone(v27);
  sub_1000388F0((uint64_t)v66, (uint64_t)v28 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts);
  v69.receiver = v28;
  v69.super_class = v27;
  id v49 = objc_msgSendSuper2(&v69, "init");
  sub_100029F4C(v66);
  id v48 = [objc_allocWithZone((Class)type metadata accessor for JSClientOrderingObject()) init];
  id v47 = [objc_allocWithZone((Class)type metadata accessor for JSPersonalizationStoreObject()) init];
  id v46 = [objc_allocWithZone((Class)type metadata accessor for JSArcadeObject()) init];
  sub_1000388F0((uint64_t)v76, (uint64_t)v66);
  uint64_t v29 = (objc_class *)type metadata accessor for JSAppleSiliconObject();
  id v30 = objc_allocWithZone(v29);
  sub_1000388F0((uint64_t)v66, (uint64_t)v30 + OBJC_IVAR____TtC19appstorecomponentsd20JSAppleSiliconObject_platform);
  v68.receiver = v30;
  v68.super_class = v29;
  id v45 = objc_msgSendSuper2(&v68, "init");
  sub_100029F4C(v66);
  id v44 = [objc_allocWithZone((Class)type metadata accessor for JSFeatureFlagsObject()) init];
  sub_1000388F0((uint64_t)v74, (uint64_t)v66);
  sub_1000388F0((uint64_t)v73, (uint64_t)&v67);
  int64_t v64 = &type metadata for DeviceAppDistribution;
  uint64_t v65 = &off_100122F98;
  v63[0] = swift_allocObject(&unk_1001237F8, 96LL, 7LL);
  sub_10007EE98((uint64_t)v66, v63[0] + 16LL);
  uint64_t v31 = (objc_class *)type metadata accessor for JSAppDistributionObject();
  id v32 = objc_allocWithZone(v31);
  uint64_t v33 = sub_10002ACB8((uint64_t)v63, (uint64_t)v64);
  __chkstk_darwin(v33);
  uint64_t v35 = (_OWORD *)((char *)&v44 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(_OWORD *))(v36 + 16))(v35);
  v62[3] = &type metadata for DeviceAppDistribution;
  void v62[4] = &off_100122F98;
  id v37 = (_OWORD *)swift_allocObject(&unk_1001237F8, 96LL, 7LL);
  v62[0] = v37;
  __int128 v38 = v35[3];
  void v37[3] = v35[2];
  v37[4] = v38;
  void v37[5] = v35[4];
  __int128 v39 = v35[1];
  v37[1] = *v35;
  void v37[2] = v39;
  sub_1000388F0( (uint64_t)v62,  (uint64_t)v32 + OBJC_IVAR____TtC19appstorecomponentsd23JSAppDistributionObject_appDistribution);
  v61.receiver = v32;
  v61.super_class = v31;
  id v40 = objc_msgSendSuper2(&v61, "init");
  sub_100029F4C(v62);
  sub_100029F4C(v63);
  sub_10007EED4(v66);
  uint64_t v41 = (char *)objc_allocWithZone((Class)type metadata accessor for JSASKGlobalObject());
  id v42 = sub_10009CB00( (uint64_t)v57,  (uint64_t)v56,  (uint64_t)v53,  (uint64_t)v50,  v59,  (uint64_t)v49,  (uint64_t)v48,  (uint64_t)v47,  (uint64_t)v46,  (uint64_t)v45,  (uint64_t)v44,  (uint64_t)v40,  v41);

  swift_unknownObjectRelease(v51);
  swift_release(a1);
  sub_100029F4C(v73);
  (*(void (**)(void *, uint64_t))(v60 + 8))(v55, v54);
  sub_100029F4C(v74);
  sub_100029F4C(v75);
  sub_100029F4C(v76);
  sub_100029F4C(v77);
  sub_100029F4C(v78);
  return v42;
}

uint64_t sub_10009D240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsTopicProvider(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009D284(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsTopicProvider(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10009D2C0()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_10009D2EC( void *a1, void (*a2)(char *, char *, uint64_t), char *a3, uint64_t a4, void *a5, unint64_t a6)
{
  unint64_t v48 = a6;
  id v52 = a5;
  id v53 = a2;
  uint64_t v47 = a4;
  uint64_t v54 = a3;
  id v50 = a1;
  uint64_t v58 = type metadata accessor for Bag(0LL);
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v6 = *(void *)(v56 + 64);
  __chkstk_darwin(v58);
  uint64_t v55 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSPromise(0LL);
  uint64_t v46 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v19 = type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v20 = static RunLoopWorkerThread.current.getter();
  if (v20)
  {
    uint64_t v19 = v20;
    URL.init(string:)(v53, v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
    {
      sub_10002E92C((uint64_t)v11, &qword_10013EE90);
      uint64_t v21 = type metadata accessor for JSError(0LL);
      unint64_t v22 = sub_10009BBCC();
      swift_allocError(v21, v22, 0LL, 0LL);
      uint64_t v23 = JSError.init(message:line:column:sourceURL:constructorName:)( 0xD000000000000035LL,  0x80000001000FEC30LL,  0LL,  1LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL);
      swift_willThrow(v23);
      uint64_t v24 = v19;
    }

    else
    {
      uint64_t v45 = v7;
      id v53 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v53(v18, v11, v12);
      id v28 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      uint64_t v54 = v18;
      v28(v16, v18, v12);
      uint64_t v29 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v47, v58);
      sub_1000388F0(v48, (uint64_t)v57);
      uint64_t v30 = *(unsigned __int8 *)(v13 + 80);
      uint64_t v31 = (v30 + 16) & ~v30;
      uint64_t v32 = *(unsigned __int8 *)(v29 + 80);
      uint64_t v33 = (v14 + v32 + v31) & ~v32;
      unint64_t v34 = (v6 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v48 = (v35 + 47) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v36 = v19;
      uint64_t v19 = swift_allocObject(&unk_100123820, v48 + 8, v30 | v32 | 7);
      v53((char *)(v19 + v31), v16, v12);
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v19 + v33, v55, v58);
      id v37 = v52;
      *(void *)(v19 + v34) = v52;
      sub_10002C438(v57, v19 + v35);
      *(void *)(v19 + v48) = v36;
      id v38 = v50;
      id v39 = v37;
      swift_retain(v36);
      id v40 = v51;
      uint64_t v41 = v49;
      uint64_t v42 = JSPromise.init(in:executor:)(v38, sub_10009E1A8, v19);
      if (!v41)
      {
        uint64_t v19 = JSPromise.value.getter(v42);
        swift_release(v36);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v45);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v54, v12);
        return v19;
      }

      (*(void (**)(char *, uint64_t))(v13 + 8))(v54, v12);
      uint64_t v24 = v36;
    }

    swift_release(v24);
  }

  else
  {
    uint64_t v25 = type metadata accessor for JSError(0LL);
    unint64_t v26 = sub_10009BBCC();
    swift_allocError(v25, v26, 0LL, 0LL);
    uint64_t v27 = JSError.init(message:line:column:sourceURL:constructorName:)( 0xD000000000000031LL,  0x80000001000FEBF0LL,  0LL,  1LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL);
    swift_willThrow(v27);
  }

  return v19;
}

uint64_t sub_10009D724( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v44 = a8;
  id v41 = a6;
  uint64_t v10 = type metadata accessor for JSCallable(0LL);
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v42 = v11;
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100029E18(&qword_10013C6D0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = Bag.amsBag.getter(v14);
  id v18 = objc_allocWithZone(&OBJC_CLASS___AMSCampaignAttributionTask);
  URL._bridgeToObjectiveC()(v19);
  uint64_t v21 = v20;
  id v22 = [v18 initWithURL:v20 bag:v17];
  swift_unknownObjectRelease(v17);

  [v22 setClientInfo:v41];
  uint64_t v23 = a7[3];
  uint64_t v24 = a7[4];
  sub_100029EE0(a7, v23);
  dispatch thunk of AccountProvider.activeAccount.getter(v23, v24);
  uint64_t v25 = type metadata accessor for Account(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v16, 1LL, v25) == 1)
  {
    sub_10002E92C((uint64_t)v16, &qword_10013C6D0);
    uint64_t v27 = 0LL;
  }

  else
  {
    uint64_t v27 = (void *)Account.acAccountCopy.getter();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);
  }

  [v22 setAccount:v27];

  sub_100029E18(&qword_10013EBC8);
  uint64_t v40 = Promise<A>.init(_:)([v22 perform]);
  id v41 = v22;
  uint64_t v28 = v43;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v29(v12, a2, v10);
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = a2;
  uint64_t v32 = (v30 + 16) & ~v30;
  uint64_t v33 = v32 + v42;
  uint64_t v34 = v30 | 7;
  uint64_t v35 = swift_allocObject(&unk_100123848, v32 + v42, v30 | 7);
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
  v36(v35 + v32, v12, v10);
  v29(v12, v31, v10);
  uint64_t v37 = swift_allocObject(&unk_100123870, v33, v34);
  v36(v37 + v32, v12, v10);
  v45[3] = type metadata accessor for RunLoopWorkerThread(0LL);
  v45[4] = &protocol witness table for RunLoopWorkerThread;
  v45[0] = v44;
  swift_retain(v44);
  uint64_t v38 = v40;
  Promise.then(perform:orCatchError:on:)(sub_10009E264, v35, sub_10009E304, v37, v45);

  swift_release(v38);
  swift_release(v35);
  swift_release(v37);
  return sub_100029F4C(v45);
}

void sub_10009DA2C()
{
  uint64_t v0 = sub_100029E18(&qword_10013E5F0);
  uint64_t v1 = swift_allocObject(v0, 64LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  *(void *)(v1 + 56) = &type metadata for Bool;
  *(_BYTE *)(v1 + 32) = 1;
  id v2 = (id)JSCallable.call(_:)(v1);
  swift_bridgeObjectRelease(v1);
}

void sub_10009DBA0()
{
  uint64_t v0 = sub_100029E18(&qword_10013E5F0);
  uint64_t v1 = swift_allocObject(v0, 64LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  *(void *)(v1 + 56) = &type metadata for Bool;
  *(_BYTE *)(v1 + 32) = 0;
  id v2 = (id)JSCallable.call(_:)(v1);
  swift_bridgeObjectRelease(v1);
}

uint64_t sub_10009DE5C()
{
  return type metadata accessor for JSCampaignAttributionService(0LL);
}

uint64_t type metadata accessor for JSCampaignAttributionService(uint64_t a1)
{
  uint64_t result = qword_10013EBB8;
  if (!qword_10013EBB8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSCampaignAttributionService);
  }
  return result;
}

uint64_t sub_10009DEA0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for Bag(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

id sub_10009DF24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Bag(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (id *)((char *)&v14.receiver - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_10002A030(0LL, &qword_10013DDA8, &OBJC_CLASS___AMSProcessInfo_ptr);
  uint64_t v7 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(&v16, v6, a1, v6, v7);
  uint64_t v8 = v16;
  uint64_t v9 = sub_100029E18(&qword_10013DDB0);
  inject<A, B>(_:from:)(v15, v9, a1, v9, v7);
  inject<A, B>(_:from:)(v5, v2, a1, v2, v7);
  uint64_t v10 = (objc_class *)type metadata accessor for JSCampaignAttributionService(0LL);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC19appstorecomponentsd28JSCampaignAttributionService_process] = v8;
  sub_1000388F0( (uint64_t)v15,  (uint64_t)&v11[OBJC_IVAR____TtC19appstorecomponentsd28JSCampaignAttributionService_accounts]);
  (*(void (**)(char *, void *, uint64_t))(v3 + 16))( &v11[OBJC_IVAR____TtC19appstorecomponentsd28JSCampaignAttributionService_bag],  v5,  v2);
  v14.receiver = v11;
  v14.super_class = v10;
  id v12 = objc_msgSendSuper2(&v14, "init");
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  sub_100029F4C(v15);
  return v12;
}

uint64_t sub_10009E098(void *a1)
{
  return sub_10009D2EC( a1,  *(void (**)(char *, char *, uint64_t))(v1 + 16),  *(char **)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_10009E0B8()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Bag(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  sub_100029F4C((void *)(v0 + v12));
  swift_release(*(void *)(v0 + v13));
  return swift_deallocObject(v0, v13 + 8, v15);
}

uint64_t sub_10009E1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for Bag(0LL) - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10009D724( a1,  a2,  a3,  v3 + v8,  v3 + v11,  *(void **)(v3 + v12),  (void *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v3 + ((((v12 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 47) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_10009E264()
{
}

uint64_t sub_10009E2A4()
{
  uint64_t v1 = type metadata accessor for JSCallable(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10009E304()
{
}

uint64_t sub_10009E340()
{
  uint64_t v0 = sub_100029E18(&qword_10013E5E0);
  uint64_t v1 = swift_allocObject(v0, 192LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1000EEB80;
  sub_10009EC54(3157559LL, 0xE300000000000000LL);
  *(void *)(v1 + 32) = 0xD000000000000010LL;
  *(void *)(v1 + 40) = 0x80000001000FED60LL;
  *(void *)(v1 + 48) = -1LL;
  *(void *)(v1 + 56) = -1LL;
  *(void *)(v1 + 64) = -1LL;
  sub_10009EC54(808334129LL, 0xE400000000000000LL);
  sub_10009EC54(0x35312E3031LL, 0xE500000000000000LL);
  uint64_t v2 = sub_10009EC54(808334129LL, 0xE400000000000000LL);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10009EC54(3157558LL, 0xE300000000000000LL);
  *(void *)(v1 + 72) = 4670277LL;
  *(void *)(v1 + 80) = 0xE300000000000000LL;
  *(void *)(v1 + 88) = v2;
  *(void *)(v1 + 96) = v4;
  *(void *)(v1 + 104) = v6;
  sub_10009EC54(875444017LL, 0xE400000000000000LL);
  *(void *)(v1 + 112) = 0xD000000000000022LL;
  *(void *)(v1 + 120) = 0x80000001000FED80LL;
  *(void *)(v1 + 128) = -1LL;
  *(void *)(v1 + 136) = -1LL;
  *(void *)(v1 + 144) = -1LL;
  sub_10009EC54(841889841LL, 0xE400000000000000LL);
  *(void *)(v1 + 152) = 0xD000000000000011LL;
  *(void *)(v1 + 160) = 0x80000001000FEDB0LL;
  *(void *)(v1 + 168) = -1LL;
  *(void *)(v1 + 176) = -1LL;
  *(void *)(v1 + 184) = -1LL;
  return v1;
}

uint64_t sub_10009E4A0(uint64_t result, void *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = -(uint64_t)v2;
    uint64_t v6 = result + 64;
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v22 = *(void *)(result + 16);
    while (1)
    {
      uint64_t v24 = v7;
      uint64_t v8 = v4 <= v2 ? v2 : v4;
      uint64_t v9 = -v8;
      for (unint64_t i = (void *)(v6 + 40 * v4++); ; i += 5)
      {
        if (v9 + v4 == 1)
        {
          __break(1u);
          return result;
        }

        uint64_t v11 = *i;
        __int128 v12 = *((_OWORD *)i - 1);
        BOOL v13 = (void)v12 == -1LL && *((void *)&v12 + 1) == -1LL;
        if (!v13 || v11 != -1) {
          break;
        }
LABEL_7:
        ++v4;
        if (v5 + v4 == 1) {
          return (uint64_t)v24;
        }
      }

      uint64_t v16 = *(i - 4);
      uint64_t v15 = *(i - 3);
      __int128 v25 = *((_OWORD *)i - 1);
      swift_bridgeObjectRetain(v15);
      __int128 v26 = v25;
      uint64_t v27 = v11;
      uint64_t v7 = v24;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v24);
      uint64_t v28 = v24;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000901A8(0LL, v24[2] + 1LL, 1);
        uint64_t v7 = v28;
      }

      uint64_t v6 = v23;
      __int128 v17 = v25;
      unint64_t v19 = v7[2];
      unint64_t v18 = v7[3];
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000901A8((char *)(v18 > 1), v19 + 1, 1);
        unint64_t v20 = v19 + 1;
        __int128 v17 = v25;
        uint64_t v6 = v23;
        uint64_t v7 = v28;
      }

      v7[2] = v20;
      uint64_t v21 = &v7[5 * v19];
      void v21[4] = v16;
      void v21[5] = v15;
      *((_OWORD *)v21 + 3) = v17;
      v21[8] = v11;
      unint64_t v2 = v22;
      if (!(v5 + v4)) {
        return (uint64_t)v7;
      }
    }

    uint64_t result = swift_bridgeObjectRelease(v15);
    goto LABEL_7;
  }

  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10009E668(uint64_t a1)
{
  id v1 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  uint64_t v2 = sub_10009E340();
  uint64_t v3 = sub_10009E4A0(v2, v1);
  swift_bridgeObjectRelease(v2);

  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
LABEL_17:
    swift_bridgeObjectRelease(v3);
    uint64_t v28 = sub_100029E18(&qword_10013EBD0);
    *(void *)&__int128 v27 = v6;
    sub_1000445E4(&v27, v26);
    uint64_t v22 = swift_bridgeObjectRetain(a1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    sub_10008F6E0(v26, 0x6546746E65696C63LL, 0xEE00736572757461LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    return a1;
  }

  uint64_t v5 = (uint64_t *)(v3 + 40);
  uint64_t v6 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v8 = *(v5 - 1);
    uint64_t v7 = *v5;
    swift_bridgeObjectRetain(*v5);
    uint64_t v9 = swift_isUniquelyReferenced_nonNull_native(v6);
    *(void *)&__int128 v27 = v6;
    unint64_t v11 = sub_10008D45C(v8, v7);
    uint64_t v12 = v6[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v15 = v10;
    if (v6[3] >= v14)
    {
      if ((v9 & 1) != 0)
      {
        uint64_t v6 = (void *)v27;
        if ((v10 & 1) != 0) {
          goto LABEL_3;
        }
      }

      else
      {
        sub_10005D534();
        uint64_t v6 = (void *)v27;
        if ((v15 & 1) != 0) {
          goto LABEL_3;
        }
      }
    }

    else
    {
      sub_10008F108(v14, v9);
      unint64_t v16 = sub_10008D45C(v8, v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_20;
      }
      unint64_t v11 = v16;
      uint64_t v6 = (void *)v27;
      if ((v15 & 1) != 0)
      {
LABEL_3:
        *(_BYTE *)(v6[7] + v11) = 1;
        goto LABEL_4;
      }
    }

    v6[(v11 >> 6) + 8] |= 1LL << v11;
    unint64_t v18 = (uint64_t *)(v6[6] + 16 * v11);
    *unint64_t v18 = v8;
    v18[1] = v7;
    *(_BYTE *)(v6[7] + v11) = 1;
    uint64_t v19 = v6[2];
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_19;
    }
    v6[2] = v21;
    swift_bridgeObjectRetain(v7);
LABEL_4:
    v5 += 5;
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (!--v4) {
      goto LABEL_17;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10009E8C4(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_10005087C(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_37;
    }

    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        char v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          uint64_t v7 = v17 + v16;
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              unint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                uint64_t v7 = v13 - v12;
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }

uint64_t sub_10009EB10()
{
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v0._uint64_t countAndFlagsBits = 46LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._uint64_t countAndFlagsBits = 46LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  return v7;
}

BOOL sub_10009EBE8(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_10009EC18()
{
  return sub_10009EB10();
}

uint64_t sub_10009EC24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10009EC54(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_10009EC54(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  v36[0] = 46LL;
  v36[1] = 0xE100000000000000LL;
  unint64_t v4 = sub_10006A134();
  uint64_t v5 = (void *)StringProtocol.components<A>(separatedBy:)( v36,  &type metadata for String,  &type metadata for String,  v4,  v4);
  uint64_t result = swift_bridgeObjectRelease(a2);
  uint64_t v7 = v5[2];
  if (v7 != 2)
  {
    if (v7 != 3)
    {
      swift_bridgeObjectRelease(v5);
      return 0LL;
    }

    unint64_t v8 = v5[4];
    unint64_t v2 = v5[5];
    uint64_t v9 = HIBYTE(v2) & 0xF;
    uint64_t v10 = v8 & 0xFFFFFFFFFFFFLL;
    if ((v2 & 0x2000000000000000LL) != 0) {
      uint64_t v11 = HIBYTE(v2) & 0xF;
    }
    else {
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (!v11)
    {
      uint64_t v13 = 0LL;
      goto LABEL_55;
    }

    if ((v2 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain(v5[5]);
      uint64_t v13 = sub_100050890(v8, v2, 10LL);
      unint64_t v8 = v35;
      swift_bridgeObjectRelease(v2);
      goto LABEL_52;
    }

    if ((v2 & 0x2000000000000000LL) == 0)
    {
      if ((v8 & 0x1000000000000000LL) == 0) {
        goto LABEL_69;
      }
      for (unint64_t i = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            ;
            unint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v8, v2))
      {
        uint64_t v13 = (uint64_t)sub_10005087C(i, v10, 10LL);
        unint64_t v8 = v14 & 1;
LABEL_52:
        if ((v8 & 1) != 0) {
          uint64_t v13 = 0LL;
        }
        if (v5[2] < 2uLL)
        {
LABEL_67:
          __break(1u);
        }

        else
        {
LABEL_55:
          unint64_t v8 = v5[6];
          unint64_t v2 = v5[7];
          swift_bridgeObjectRetain(v2);
          sub_10009E8C4(v8, v2);
          if (v5[2] >= 3uLL)
          {
            uint64_t v30 = v5[8];
            unint64_t v31 = v5[9];
            swift_bridgeObjectRetain(v31);
            swift_bridgeObjectRelease(v5);
            sub_10009E8C4(v30, v31);
            return v13;
          }
        }

        __break(1u);
LABEL_69:
        ;
      }
    }

    uint64_t v37 = v5[4];
    uint64_t v38 = v2 & 0xFFFFFFFFFFFFFFLL;
    if (v8 == 43)
    {
      if (!v9)
      {
LABEL_71:
        __break(1u);
        return result;
      }

      uint64_t v13 = (BYTE1(v8) - 48);
      if (v9 != 2)
      {
        uint64_t v13 = 10LL * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
        uint64_t v21 = v9 - 3;
        if (v9 != 3)
        {
          char v22 = (unsigned __int8 *)&v37 + 3;
          while (1)
          {
            unsigned int v23 = *v22 - 48;
            if (v23 > 9) {
              goto LABEL_39;
            }
            uint64_t v24 = 10 * v13;
            uint64_t v13 = v24 + v23;
            unint64_t v8 = 0LL;
            ++v22;
            if (!--v21) {
              goto LABEL_52;
            }
          }
        }
      }
    }

    else
    {
      if (v8 == 45)
      {
        if (v9)
        {
          if (v9 != 1 && (BYTE1(v8) - 48) <= 9u)
          {
            uint64_t v20 = (BYTE1(v8) - 48);
            if (v9 == 2)
            {
              unint64_t v8 = 0LL;
              uint64_t v13 = -v20;
              goto LABEL_52;
            }

            if ((BYTE2(v8) - 48) <= 9u)
            {
              uint64_t v13 = -10LL * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
              uint64_t v29 = v9 - 3;
              if (v9 == 3) {
                goto LABEL_51;
              }
              uint64_t v32 = (unsigned __int8 *)&v37 + 3;
              while (1)
              {
                unsigned int v33 = *v32 - 48;
                if (v33 > 9) {
                  break;
                }
                uint64_t v34 = 10 * v13;
                uint64_t v13 = v34 - v33;
                unint64_t v8 = 0LL;
                ++v32;
                if (!--v29) {
                  goto LABEL_52;
                }
              }
            }
          }

LABEL_51:
    unint64_t v8 = 0LL;
    goto LABEL_52;
  }

  uint64_t v15 = v5[4];
  unint64_t v8 = v5[5];
  swift_bridgeObjectRetain(v8);
  uint64_t v16 = sub_10009E8C4(v15, v8);
  if (v5[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_67;
  }

  if ((v17 & 1) != 0) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v16;
  }
  uint64_t v18 = v5[6];
  unint64_t v19 = v5[7];
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v5);
  sub_10009E8C4(v18, v19);
  return v13;
}

uint64_t initializeWithCopy for JSClientFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for JSClientFeature(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for JSClientFeature(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for JSClientFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSClientFeature(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSClientFeature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for JSClientFeature()
{
  return &type metadata for JSClientFeature;
}

uint64_t getEnumTagSinglePayload for JSClientFeature.OSVersion(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for JSClientFeature.OSVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for JSClientFeature.OSVersion()
{
  return &type metadata for JSClientFeature.OSVersion;
}

void *sub_10009F25C()
{
  return &protocol witness table for String;
}

unint64_t sub_10009F26C()
{
  unint64_t result = qword_10013EBD8;
  if (!qword_10013EBD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EFF90, &type metadata for JSClientFeature.OSVersion);
    atomic_store(result, (unint64_t *)&qword_10013EBD8);
  }

  return result;
}

void *sub_10009F2B0()
{
  return &protocol witness table for String;
}

unint64_t sub_10009F2C0()
{
  unint64_t result = qword_10013EBE0;
  if (!qword_10013EBE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000EFFC8, &type metadata for JSClientFeature.OSVersion);
    atomic_store(result, (unint64_t *)&qword_10013EBE0);
  }

  return result;
}

void *sub_10009F304()
{
  return &protocol witness table for String;
}

uint64_t sub_10009F34C(uint64_t a1)
{
  return sub_10009F4BC(a1, 0xD000000000000023LL, 0x80000001000FEE60LL);
}

uint64_t sub_10009F490(uint64_t a1)
{
  return sub_10009F4BC(a1, 0xD000000000000022LL, 0x80000001000FEE30LL);
}

uint64_t sub_10009F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for JSError(0LL);
  unint64_t v6 = sub_10009BBCC();
  swift_allocError(v5, v6, 0LL, 0LL);
  uint64_t v7 = JSError.init(message:line:column:sourceURL:constructorName:)(a2, a3, 0LL, 1LL, 0LL, 1LL, 0LL, 0LL, 0LL, 0LL);
  return swift_willThrow(v7);
}

uint64_t type metadata accessor for JSClientOrderingObject()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd22JSClientOrderingObject);
}

uint64_t sub_10009F5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10009F62C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsLogger.Configuration(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_10009F660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10009F6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10009F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10009F72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10009F770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F77C);
}

uint64_t sub_10009F77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10009F7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009F7C4);
}

uint64_t sub_10009F7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for JSDiagnostics(uint64_t a1)
{
  uint64_t result = qword_10013EC68;
  if (!qword_10013EC68) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSDiagnostics);
  }
  return result;
}

uint64_t sub_10009F840(uint64_t a1)
{
  uint64_t result = type metadata accessor for MetricsLogger.Configuration(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10009F8A8(uint64_t a1, size_t a2)
{
  uint64_t v132 = type metadata accessor for LogMessageLevel(0LL);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v130 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for JSError(0LL);
  int64_t v121 = *(void *)(v125 - 8);
  uint64_t v7 = __chkstk_darwin(v125);
  uint64_t v126 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v123 = (char *)&v114 - v9;
  uint64_t v10 = sub_100029E18(&qword_10013ECA0);
  __chkstk_darwin(v10);
  id v137 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for MetricsLogger.Configuration(0LL);
  uint64_t v133 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v135 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = type metadata accessor for JSONError(0LL);
  uint64_t v124 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v127 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for LogMessage(0LL);
  uint64_t v14 = *(void *)(v145 - 8);
  uint64_t v15 = __chkstk_darwin(v145);
  __int128 v117 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v122 = (char *)&v114 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v116 = (char *)&v114 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v120 = (char *)&v114 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v119 = (char *)&v114 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v118 = (char *)&v114 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v136 = (char *)&v114 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v114 - v30;
  __chkstk_darwin(v29);
  unsigned int v33 = (char *)&v114 - v32;
  uint64_t v34 = sub_100029E18(&qword_10013EA00);
  uint64_t v35 = *(void *)(v14 + 72);
  uint64_t v142 = v14;
  uint64_t v36 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v37 = (v36 + 32) & ~v36;
  size_t v38 = swift_allocObject(v34, v37 + 2 * v35, v36 | 7);
  *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1000EDA10;
  uint64_t v143 = v37;
  LogMessage.init(stringLiteral:)(0x707954726F727265LL, 0xE900000000000065LL);
  uint64_t v144 = v35;
  uint64_t v129 = a1;
  swift_getErrorValue(a1, v159, v158);
  uint64_t DynamicType = swift_getDynamicType(v158[0], v158[1], 1LL);
  *((void *)&v157 + 1) = swift_getMetatypeMetadata();
  uint64_t v155 = (char *)DynamicType;
  int64_t v40 = (int64_t)&v155;
  static LogMessage.safe(_:)(&v155);
  sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
  uint64_t v160 = (void *)v38;
  uint64_t v41 = *(void *)(a2 + 64);
  size_t v139 = a2 + 64;
  uint64_t v42 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v43 = -1LL;
  if (v42 < 64) {
    uint64_t v43 = ~(-1LL << v42);
  }
  unint64_t v44 = v43 & v41;
  uint64_t v141 = v154;
  int64_t v140 = (unint64_t)(v42 + 63) >> 6;
  int64_t v115 = v140 - 1;
  swift_bridgeObjectRetain(a2);
  int64_t v45 = 0LL;
  if (!v44) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v46 = __clz(__rbit64(v44));
  v44 &= v44 - 1;
  unint64_t v47 = v46 | (v45 << 6);
LABEL_5:
  uint64_t v48 = *(void *)(a2 + 56);
  uint64_t v49 = (void *)(*(void *)(a2 + 48) + 16 * v47);
  uint64_t v50 = v49[1];
  *(void *)&__int128 v153 = *v49;
  *((void *)&v153 + 1) = v50;
  sub_100060108(v48 + 32 * v47, (uint64_t)v141);
  swift_bridgeObjectRetain(v50);
  while (1)
  {
    sub_100098B64((uint64_t)&v153, (uint64_t)&v155);
    size_t v54 = v156;
    if (!v156) {
      break;
    }
    uint64_t v55 = v155;
    sub_1000445E4(&v157, &v153);
    v146[3] = &type metadata for String;
    v146[0] = v55;
    v146[1] = v54;
    static LogMessage.safe(_:)(v146);
    sub_10002E92C((uint64_t)v146, &qword_10013C6F0);
    if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0) {
      size_t v38 = sub_10005118C(0LL, *(void *)(v38 + 16) + 1LL, 1, (void *)v38);
    }
    unint64_t v57 = *(void *)(v38 + 16);
    unint64_t v56 = *(void *)(v38 + 24);
    if (v57 >= v56 >> 1) {
      size_t v38 = sub_10005118C(v56 > 1, v57 + 1, 1, (void *)v38);
    }
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v57 + 1;
    uint64_t v2 = *(void (**)(size_t, char *, uint64_t))(v142 + 32);
    v2(v38 + v143 + v57 * v144, v33, v145);
    uint64_t v160 = (void *)v38;
    sub_100060108((uint64_t)&v153, (uint64_t)v146);
    static LogMessage.safe(_:)(v146);
    sub_10002E92C((uint64_t)v146, &qword_10013C6F0);
    if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0) {
      size_t v38 = sub_10005118C(0LL, *(void *)(v38 + 16) + 1LL, 1, (void *)v38);
    }
    int64_t v40 = *(void *)(v38 + 16);
    unint64_t v58 = *(void *)(v38 + 24);
    uint64_t v3 = v40 + 1;
    if (v40 >= v58 >> 1) {
      size_t v38 = sub_10005118C(v58 > 1, v40 + 1, 1, (void *)v38);
    }
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v3;
    v2(v38 + v143 + v40 * v144, v31, v145);
    uint64_t v160 = (void *)v38;
    sub_100029F4C(&v153);
    if (v44) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v51 = v45 + 1;
    if (__OFADD__(v45, 1LL))
    {
      __break(1u);
      goto LABEL_72;
    }

    if (v51 < v140)
    {
      unint64_t v52 = *(void *)(v139 + 8 * v51);
      if (v52) {
        goto LABEL_9;
      }
      int64_t v53 = v45 + 2;
      ++v45;
      if (v51 + 1 < v140)
      {
        unint64_t v52 = *(void *)(v139 + 8 * v53);
        if (v52) {
          goto LABEL_12;
        }
        int64_t v45 = v51 + 1;
        if (v51 + 2 < v140)
        {
          unint64_t v52 = *(void *)(v139 + 8 * (v51 + 2));
          if (v52)
          {
            v51 += 2LL;
            goto LABEL_9;
          }

          int64_t v53 = v51 + 3;
          int64_t v45 = v51 + 2;
          if (v51 + 3 < v140)
          {
            unint64_t v52 = *(void *)(v139 + 8 * v53);
            if (!v52)
            {
              while (1)
              {
                int64_t v51 = v53 + 1;
                if (__OFADD__(v53, 1LL)) {
                  break;
                }
                if (v51 >= v140)
                {
                  int64_t v45 = v115;
                  goto LABEL_23;
                }

                unint64_t v52 = *(void *)(v139 + 8 * v51);
                ++v53;
                if (v52) {
                  goto LABEL_9;
                }
              }

LABEL_72:
              __break(1u);
LABEL_73:
              a2 = sub_10005118C(0LL, *(void *)(a2 + 16) + 1LL, 1, (void *)a2);
LABEL_60:
              unint64_t v99 = *(void *)(a2 + 16);
              unint64_t v98 = *(void *)(a2 + 24);
              if (v99 >= v98 >> 1) {
                a2 = sub_10005118C(v98 > 1, v99 + 1, 1, (void *)a2);
              }
              *(void *)(a2 + swift_weakDestroy(v0 + 16) = v99 + 1;
              ((void (*)(size_t, char *, uint64_t))v40)(a2 + v143 + v99 * v144, v122, v145);
              uint64_t v160 = (void *)a2;
              *((void *)&v157 + 1) = &type metadata for String;
              uint64_t v155 = v31;
              size_t v156 = v38;
              int64_t v100 = v117;
              static LogMessage.safe(_:)(&v155);
              sub_10002E92C((uint64_t)&v155, &qword_10013C6F0);
              if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0) {
                a2 = sub_10005118C(0LL, *(void *)(a2 + 16) + 1LL, 1, (void *)a2);
              }
              unint64_t v102 = *(void *)(a2 + 16);
              unint64_t v101 = *(void *)(a2 + 24);
              if (v102 >= v101 >> 1) {
                a2 = sub_10005118C(v101 > 1, v102 + 1, 1, (void *)a2);
              }
              *(void *)(a2 + swift_weakDestroy(v0 + 16) = v102 + 1;
              ((void (*)(size_t, char *, uint64_t))v40)(a2 + v143 + v102 * v144, v100, v145);
              uint64_t v160 = (void *)a2;
              goto LABEL_67;
            }

LABEL_67:
    (*(void (**)(char *, void (*)(size_t, char *, uint64_t)))(v45 + 8))(v33, v2);
  }

  swift_errorRelease(v153);
LABEL_70:
  uint64_t v109 = v160;
  uint64_t v110 = v131;
  uint64_t v111 = v130;
  uint64_t v112 = v132;
  (*(void (**)(char *, void, uint64_t))(v131 + 104))(v130, enum case for LogMessageLevel.error(_:), v132);
  MetricsLogger.log(contentsOf:withLevel:)(v109, v111);
  swift_release(v3);
  swift_bridgeObjectRelease(v109);
  return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v111, v112);
}

uint64_t sub_1000A0944(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MetricsLogger.Configuration(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, v1);
  uint64_t v7 = type metadata accessor for MetricsLogger(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = MetricsLogger.init(loggerName:configuration:)(0x69746164696C6176LL, 0xEA00000000006E6FLL, v5);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return swift_release(v8);
  }
  uint64_t v11 = *(void *)(type metadata accessor for JSIncident(0LL) - 8);
  uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v31 = *(void *)(v11 + 72);
  uint64_t v13 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v29 = (v15 + 32) & ~v15;
  uint64_t v30 = v14;
  uint64_t v28 = v29 + 2 * v14;
  uint64_t v16 = v15 | 7;
  uint64_t v26 = a1;
  swift_bridgeObjectRetain(a1);
  __int128 v27 = xmmword_1000EDA10;
  do
  {
    uint64_t v35 = v9;
    uint64_t v17 = sub_100029E18(&qword_10013EA00);
    uint64_t v18 = swift_allocObject(v17, v28, v16);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = v27;
    uint64_t v19 = JSIncident.problemSummary.getter();
    uint64_t v34 = &type metadata for String;
    uint64_t v32 = v19;
    uint64_t v33 = v20;
    static LogMessage.safe(_:)(&v32);
    uint64_t v21 = sub_10002E92C((uint64_t)&v32, &qword_10013C6F0);
    uint64_t v22 = JSIncident.contextSummary.getter(v21);
    uint64_t v34 = &type metadata for String;
    uint64_t v32 = v22;
    uint64_t v33 = v23;
    static LogMessage.safe(_:)(&v32);
    sub_10002E92C((uint64_t)&v32, &qword_10013C6F0);
    Logger.error(_:)(v18, v7, &protocol witness table for MetricsLogger);
    swift_bridgeObjectRelease(v18);
    v12 += v31;
    --v10;
  }

  while (v10);
  swift_release(v9);
  return swift_bridgeObjectRelease(v26);
}

unint64_t sub_1000A0B60(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v5 = (void *)*v3;
  int64_t v6 = *(void *)(*v3 + 16LL);
  if (v6 < a2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }

  size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *uint64_t v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = (void *)sub_10005118C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }

  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (char *)v5 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  uint64_t v18 = &v16[v17 * v7];
  uint64_t result = swift_arrayDestroy(v18, v8, v14);
  if (!v9) {
    goto LABEL_24;
  }
  uint64_t v19 = v5[2];
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_32;
  }
  uint64_t result = (unint64_t)&v18[v17];
  unint64_t v21 = (unint64_t)&v16[v17 * a2];
  if ((unint64_t)&v18[v17] < v21 || result >= v21 + v20 * v17)
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack(result, v21, v20, v14);
  }

  else if (result != v21)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }

  uint64_t v23 = v5[2];
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24) {
    goto LABEL_33;
  }
  v5[2] = v25;
LABEL_24:
  if (v17 >= 1) {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }
  return sub_10002E92C(a3, &qword_10013ECA0);
}

id sub_1000A0CE0()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  v10[3] = &type metadata for SystemFeatureFlagsStore;
  v10[4] = &off_100123A40;
  id v2 = objc_allocWithZone(ObjectType);
  uint64_t v3 = sub_10002ACB8((uint64_t)v10, (uint64_t)&type metadata for SystemFeatureFlagsStore);
  __chkstk_darwin(v3);
  (*(void (**)(void))(v4 + 16))();
  v9[3] = &type metadata for SystemFeatureFlagsStore;
  v9[4] = &off_100123A40;
  sub_1000388F0((uint64_t)v9, (uint64_t)v2 + OBJC_IVAR____TtC19appstorecomponentsd20JSFeatureFlagsObject_store);
  v8.receiver = v2;
  v8.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v8, "init");
  sub_100029F4C(v9);
  sub_100029F4C(v10);
  uint64_t v6 = swift_getObjectType(v0);
  swift_deallocPartialClassInstance(v0, v6, 48LL, 7LL);
  return v5;
}

id sub_1000A0E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = JSValue.string.getter();
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = v5;
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  unint64_t v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10011F898, v7);
  swift_bridgeObjectRelease(v6);
  if (v8 >= 3)
  {
    id result = [(id)objc_opt_self(JSValue) valueWithBool:0 inContext:a1];
    if (!result) {
      __break(1u);
    }
  }

  else
  {
    v13[3] = &type metadata for Feature;
    v13[4] = sub_10004C76C();
    LOBYTE(v13[0]) = v8;
    a2 = isFeatureEnabled(_:)(v13);
    sub_100029F4C(v13);
    id result = [(id)objc_opt_self(JSValue) valueWithBool:a2 & 1 inContext:a1];
    if (!result)
    {
      __break(1u);
LABEL_5:
      uint64_t v10 = type metadata accessor for JSError(0LL);
      unint64_t v11 = sub_10009BBCC();
      swift_allocError(v10, v11, 0LL, 0LL);
      uint64_t v12 = JSError.init(badValue:expected:)((id)a2, 0x676E69727473LL, 0xE600000000000000LL);
      return (id)swift_willThrow(v12);
    }
  }

  return result;
}

uint64_t type metadata accessor for JSFeatureFlagsObject()
{
  return objc_opt_self(&OBJC_CLASS____TtC19appstorecomponentsd20JSFeatureFlagsObject);
}

id sub_1000A1004(uint64_t a1)
{
  return sub_1000A0E04(a1, *(void *)(v1 + 16));
}

ValueMetadata *type metadata accessor for SystemFeatureFlagsStore()
{
  return &type metadata for SystemFeatureFlagsStore;
}

uint64_t sub_1000A102C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A1038);
}

uint64_t sub_1000A1038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSDiagnostics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1000A1074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A1080);
}

uint64_t sub_1000A1080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSDiagnostics(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for JSInitFailureObserver(uint64_t a1)
{
  uint64_t result = qword_10013ED30;
  if (!qword_10013ED30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSInitFailureObserver);
  }
  return result;
}

double sub_1000A10FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for OSLogger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (qword_10013BC48 != -1) {
    swift_once(&qword_10013BC48, sub_1000D1558);
  }
  uint64_t v11 = sub_10002A768(v7, (uint64_t)qword_100148618);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = sub_100029E18(&qword_10013EA00);
  uint64_t v13 = type metadata accessor for LogMessage(0LL);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL))
        + *(void *)(*(void *)(v13 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v13 - 8) + 80LL) | 7LL);
  __int128 v30 = xmmword_1000EDBE0;
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(53LL, 2LL);
  v15._uint64_t countAndFlagsBits = 0x6964726163736944LL;
  v15._object = (void *)0xEB0000000020676ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a1);
  v35[0] = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
  sub_10004C810((uint64_t)v35);
  v16._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v16._object = (void *)0x80000001000FF010LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  swift_getErrorValue(a2, v34, &v32);
  uint64_t v17 = a2;
  uint64_t v18 = v32;
  uint64_t v19 = v33;
  uint64_t MetatypeMetadata = v33;
  uint64_t v20 = sub_10002C328(v35);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v20, v18, v19);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
  sub_10004C810((uint64_t)v35);
  v21._uint64_t countAndFlagsBits = 0LL;
  v21._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.warning(_:)(v14, v7, &protocol witness table for OSLogger);
  __n128 v22 = swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v22);
  uint64_t v23 = sub_100029E18(&qword_10013F670);
  uint64_t inited = swift_initStackObject(v23, v31);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v30;
  *(void *)(inited + 32) = 0xD000000000000012LL;
  *(void *)(inited + 40) = 0x80000001000FF040LL;
  v35[0] = a1;
  uint64_t v25 = sub_100029E18(&qword_10013ED68);
  uint64_t v26 = String.init<A>(reflecting:)(v35, v25);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v26;
  *(void *)(inited + 56) = v27;
  size_t v28 = sub_100044F60(inited);
  sub_10009F8A8(v17, v28);
  *(void *)&double result = swift_bridgeObjectRelease(v28).n128_u64[0];
  return result;
}

uint64_t sub_1000A13E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100010338())
  {
    id v5 = [(id)objc_opt_self(ASCDefaults) daemonDefaults];
    id v6 = [v5 debugPackageURL];

    if (v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v9 = v8;

      URL.init(string:)(v7, v9);
      swift_bridgeObjectRelease(v9);
      uint64_t v10 = type metadata accessor for URL(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1LL, v10) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v4, v10);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0LL, 2LL, v10);
      }

      sub_10002E92C((uint64_t)v4, &qword_10013EE90);
    }
  }

  if (qword_10013BC48 != -1) {
    swift_once(&qword_10013BC48, sub_1000D1558);
  }
  uint64_t v12 = type metadata accessor for OSLogger(0LL);
  sub_10002A768(v12, (uint64_t)qword_100148618);
  uint64_t v13 = sub_100029E18(&qword_10013EA00);
  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1000EDBE0;
  LogMessage.init(stringLiteral:)(0xD000000000000019LL, 0x80000001000FF3E0LL);
  Logger.info(_:)(v15, v12, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a1,  2LL,  2LL,  v16);
}

uint64_t sub_1000A1624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029E18(&qword_10013EE90);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v21 = URL.absoluteString.getter(v17);
  unint64_t v22 = v20;
  if (v21 == 0xD000000000000034LL && v20 == 0x80000001000FF0E0LL)
  {
    unint64_t v23 = 0x80000001000FF0E0LL;
LABEL_6:
    swift_bridgeObjectRelease(v23);
    URL.init(string:)(0xD000000000000043LL, 0x80000001000FF370LL);
    uint64_t v24 = type metadata accessor for URL(0LL);
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1LL, v24);
    if ((_DWORD)result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(a2, v19, v24);
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000034LL, 0x80000001000FF0E0LL, v21, v20, 0LL) & 1) != 0)
  {
    unint64_t v23 = v22;
    goto LABEL_6;
  }

  if (v21 == 0xD000000000000036LL && v22 == 0x80000001000FF120LL)
  {
    unint64_t v27 = 0x80000001000FF120LL;
    goto LABEL_13;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000036LL, 0x80000001000FF120LL, v21, v22, 0LL) & 1) != 0)
  {
    unint64_t v27 = v22;
LABEL_13:
    swift_bridgeObjectRelease(v27);
    URL.init(string:)(0xD000000000000043LL, 0x80000001000FF320LL);
    uint64_t v28 = type metadata accessor for URL(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v16, 1LL, v28);
    if ((_DWORD)result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(a2, v16, v28);
    }
    goto LABEL_38;
  }

  if (v21 == 0xD000000000000035LL && v22 == 0x80000001000FF160LL)
  {
    unint64_t v30 = 0x80000001000FF160LL;
    goto LABEL_20;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000035LL, 0x80000001000FF160LL, v21, v22, 0LL) & 1) != 0)
  {
    unint64_t v30 = v22;
LABEL_20:
    swift_bridgeObjectRelease(v30);
    URL.init(string:)(0xD000000000000043LL, 0x80000001000FF2D0LL);
    uint64_t v31 = type metadata accessor for URL(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v13, 1LL, v31);
    if ((_DWORD)result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(a2, v13, v31);
    }
    goto LABEL_39;
  }

  if (v21 == 0xD000000000000038LL && v22 == 0x80000001000FF1A0LL)
  {
    unint64_t v33 = 0x80000001000FF1A0LL;
    goto LABEL_27;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000038LL, 0x80000001000FF1A0LL, v21, v22, 0LL) & 1) != 0)
  {
    unint64_t v33 = v22;
LABEL_27:
    swift_bridgeObjectRelease(v33);
    URL.init(string:)(0xD000000000000043LL, 0x80000001000FF280LL);
    uint64_t v34 = type metadata accessor for URL(0LL);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v10, 1LL, v34);
    if ((_DWORD)result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(a2, v10, v34);
    }
    goto LABEL_40;
  }

  if (v21 == 0xD000000000000043LL && v22 == 0x80000001000FF1E0LL)
  {
    swift_bridgeObjectRelease(0x80000001000FF1E0LL);
  }

  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000043LL, 0x80000001000FF1E0LL, v21, v22, 0LL);
    swift_bridgeObjectRelease(v22);
    if ((v36 & 1) == 0)
    {
      uint64_t v39 = type metadata accessor for URL(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16LL))(a2, a1, v39);
    }
  }

  URL.init(string:)(0xD000000000000043LL, 0x80000001000FF230LL);
  uint64_t v37 = type metadata accessor for URL(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v7, 1LL, v37);
  if ((_DWORD)result == 1) {
    goto LABEL_41;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(a2, v7, v37);
}

double sub_1000A1ADC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = URL.pathExtension.getter();
  uint64_t v6 = v5;
  if (v4 == 0x6B63617074656ALL && v5 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
LABEL_5:
    uint64_t v8 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a2, a1, v8);
    return result;
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0x6B63617074656ALL, 0xE700000000000000LL, 0LL);
  swift_bridgeObjectRelease(v6);
  if ((v7 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(a2, a1, v10);
  if (sub_100010338())
  {
    id v11 = [(id)objc_opt_self(ASCDefaults) daemonDefaults];
    char v12 = [v11 preferInternalJS];
  }

  else
  {
    char v12 = 0;
  }

  v13._uint64_t countAndFlagsBits = sub_1000A4C10(v12);
  object = v13._object;
  URL.appendPathComponent(_:)(v13);
  *(void *)&double result = swift_bridgeObjectRelease(object).n128_u64[0];
  return result;
}

uint64_t sub_1000A1C18@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  size_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v5 = type metadata accessor for JetPackAssetRequestSourcePolicy(0LL);
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v50 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0LL);
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A4494(v3, (uint64_t)v23);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v23, 2LL, v11);
  if (v24)
  {
    if (v24 == 1)
    {
      id v25 = objc_msgSend((id)objc_opt_self(NSBundle), "asc_frameworkBundle");
      id v26 = [v25 bundleURL];

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);
      URL.appendingPathComponent(_:isDirectory:)(0x697263536176614ALL, 0xEA00000000007470LL, 1LL);
      unint64_t v27 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
      int64_t v51 = v27;
      v27(v15, v11);
      double v28 = sub_1000A1ADC((uint64_t)v18, (uint64_t)v20);
      ((void (*)(char *, uint64_t, double))v27)(v18, v11, v28);
      uint64_t v50 = v8;
      uint64_t v30 = v52;
      uint64_t v29 = v53;
      (*(void (**)(char *, void, uint64_t))(v52 + 104))( v10,  enum case for JetPackAssetRequestSourcePolicy.remoteOnly(_:),  v53);
      uint64_t v31 = swift_allocObject(&unk_100123B40, 24LL, 7LL);
      uint64_t v32 = v55;
      *(void *)(v31 + swift_weakDestroy(v0 + 16) = v55;
      uint64_t v33 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0LL);
      uint64_t v34 = v54;
      v54[3] = v33;
      v34[4] = sub_100027978( &qword_10013EF40,  (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation,  (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.URLLocation);
      sub_10002C328(v34);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v20, v11);
      uint64_t v35 = v50;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v50, v10, v29);
      id v36 = v32;
      ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)( v18,  v35,  sub_1000A55D4,  v31);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v29);
      return v51(v20, v11);
    }

    else
    {
      NSString v44 = String._bridgeToObjectiveC()();
      uint64_t v45 = swift_allocObject(&unk_100123B18, 24LL, 7LL);
      unint64_t v46 = v55;
      *(void *)(v45 + swift_weakDestroy(v0 + 16) = v55;
      uint64_t v47 = type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation(0LL);
      uint64_t v48 = v54;
      v54[3] = v47;
      v48[4] = sub_100027978( &qword_10013EF48,  (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation,  (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.BagKeyLocation);
      sub_10002C328(v48);
      id v49 = v46;
      swift_unknownObjectRetain(a1);
      return ValidatedJetPackAssetLocations.BagKeyLocation.init(_:bag:urlTransformer:requestConfiguration:)( v44,  a1,  sub_1000A2098,  0LL,  sub_1000A55D4,  v45);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v23, v11);
    sub_1000A1ADC((uint64_t)v20, (uint64_t)v18);
    uint64_t v38 = swift_allocObject(&unk_100123AF0, 24LL, 7LL);
    uint64_t v39 = v55;
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v55;
    uint64_t v40 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation(0LL);
    uint64_t v41 = v54;
    v54[3] = v40;
    v41[4] = sub_100027978( &qword_10013EF40,  (uint64_t (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation,  (uint64_t)&protocol conformance descriptor for ValidatedJetPackAssetLocations.URLLocation);
    sub_10002C328(v41);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
    id v42 = v39;
    ValidatedJetPackAssetLocations.URLLocation.init(_:requestConfiguration:)(v15, sub_1000A4A0C, v38);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v12 + 8);
    v43(v18, v11);
    return ((uint64_t (*)(char *, uint64_t))v43)(v20, v11);
  }

uint64_t sub_1000A2098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A1624(a1, (uint64_t)v7);
  double v8 = sub_1000A1ADC((uint64_t)v7, a2);
  return (*(uint64_t (**)(char *, uint64_t, double))(v5 + 8))(v7, v4, v8);
}

id sub_1000A2134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100029E18(&qword_10013EF50);
  __chkstk_darwin(v6);
  double v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 =  objc_msgSend( (id)objc_opt_self(NSURLSessionConfiguration),  "ams_configurationWithProcessInfo:bag:",  a3,  a1);
  uint64_t v10 = swift_unknownObjectRetain(a1);
  Bag.init(from:)(v10);
  uint64_t v11 = type metadata accessor for Bag(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v8, 0LL, 1LL, v11);
  static JetPackAMSRemoteStreamSource.defaultURLEncoder(forContentsOf:using:from:)(a2, v8, a3);
  sub_10002E92C((uint64_t)v8, &qword_10013EF50);
  return v9;
}

uint64_t sub_1000A2234@<X0>(void *a1@<X8>)
{
  unint64_t v2 = sub_1000480E4((uint64_t)&off_10011F900);
  uint64_t v3 = sub_100029E18((uint64_t *)&unk_10013EF70);
  swift_arrayDestroy(&unk_10011F920, 4LL, v3);
  sub_1000A22D0(v2);
  uint64_t v5 = v4;
  __n128 v6 = swift_bridgeObjectRelease(v2);
  a1[3] = type metadata accessor for JetPackFileKeyProvider(0LL, v6);
  a1[4] = &protocol witness table for JetPackFileKeyProvider;
  sub_10002C328(a1);
  return JetPackFileKeyProvider.init(keyURLs:)(v5);
}

void sub_1000A22D0(uint64_t a1)
{
  uint64_t v2 = sub_100029E18(&qword_10013EE90);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v44 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)v39 - v9;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v43 = a1 + 64;
  uint64_t v45 = _swiftEmptyDictionarySingleton;
  uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v11 < 64) {
    uint64_t v12 = ~(-1LL << -(char)v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v10;
  v39[1] = -1LL << *(_BYTE *)(a1 + 32);
  int64_t v42 = (unint64_t)(63 - v11) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  uint64_t v40 = a1;
  if (v13) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v17 = i + 1;
  if (!__OFADD__(i, 1LL))
  {
    if (v17 < v42)
    {
      unint64_t v18 = *(void *)(v43 + 8 * v17);
      int64_t v19 = i + 1;
      if (v18) {
        goto LABEL_23;
      }
      int64_t v19 = i + 2;
      if (i + 2 >= v42) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v43 + 8 * v19);
      if (v18) {
        goto LABEL_23;
      }
      int64_t v19 = i + 3;
      if (i + 3 >= v42) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v43 + 8 * v19);
      if (v18) {
        goto LABEL_23;
      }
      int64_t v19 = i + 4;
      if (i + 4 >= v42) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v43 + 8 * v19);
      if (v18)
      {
LABEL_23:
        unint64_t v13 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
        for (i = v19; ; unint64_t v16 = v15 | (i << 6))
        {
          uint64_t v21 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 2 * v16);
          uint64_t v22 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v16);
          uint64_t v23 = *v22;
          uint64_t v24 = v22[1];
          swift_bridgeObjectRetain(v24);
          URL.init(fileURLWithPath:)(v23, v24);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
          {
            swift_bridgeObjectRelease(v24);
            sub_10002E92C((uint64_t)v4, &qword_10013EE90);
            if (!v13) {
              goto LABEL_8;
            }
          }

          else
          {
            id v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
            id v26 = v41;
            v25(v41, v4, v5);
            v25(v44, v26, v5);
            unint64_t v27 = v45;
            unint64_t v28 = v45[2];
            if (v45[3] <= v28)
            {
              sub_10008EDD4(v28 + 1, 1LL);
              unint64_t v27 = v45;
            }

            uint64_t v29 = static Hasher._hash(seed:bytes:count:)(v27[5], v21, 2LL);
            uint64_t v30 = v27 + 8;
            uint64_t v31 = -1LL << *((_BYTE *)v27 + 32);
            unint64_t v32 = v29 & ~v31;
            unint64_t v33 = v32 >> 6;
            if (((-1LL << v32) & ~v27[(v32 >> 6) + 8]) != 0)
            {
              unint64_t v34 = __clz(__rbit64((-1LL << v32) & ~v27[(v32 >> 6) + 8])) | v32 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v35 = 0;
              unint64_t v36 = (unint64_t)(63 - v31) >> 6;
              do
              {
                if (++v33 == v36 && (v35 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_40;
                }

                BOOL v37 = v33 == v36;
                if (v33 == v36) {
                  unint64_t v33 = 0LL;
                }
                v35 |= v37;
                uint64_t v38 = v30[v33];
              }

              while (v38 == -1);
              unint64_t v34 = __clz(__rbit64(~v38)) + (v33 << 6);
            }

            *(void *)((char *)v30 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v34;
            *(_WORD *)(v27[6] + 2 * v34) = v21;
            v25((char *)(v27[7] + *(void *)(v6 + 72) * v34), v44, v5);
            ++v27[2];
            swift_bridgeObjectRelease(v24);
            a1 = v40;
            if (!v13) {
              goto LABEL_8;
            }
          }

uint64_t sub_1000A26F0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v75 = a3;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v4 = sub_100029E18(&qword_10013EE98);
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0LL);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64LL);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = sub_100029E18((uint64_t *)&unk_10013EEA0);
  uint64_t v66 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v74 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100029E18((uint64_t *)&unk_10013DF10);
  uint64_t v72 = *(void *)(v11 - 8);
  uint64_t v73 = v11;
  __chkstk_darwin(v11);
  objc_super v69 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for JetPackSigningPolicy(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DiskJetPackLoader(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v58 = v17;
  uint64_t v59 = v18;
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v57 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v56 - v21;
  uint64_t v23 = v3 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher____lazy_storage___indexPipeline;
  uint64_t v24 = sub_100029E18((uint64_t *)&unk_10013EDD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v23, 1LL, 1LL, v24);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for JetPackSigningPolicy.required(_:),  v13);
  uint64_t v25 = sub_100029E18(&qword_10013EEB0);
  uint64_t v26 = swift_allocObject(v25, 112LL, 7LL);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1000EDA10;
  sub_1000A2234((void *)(v26 + 32));
  *(void *)(v26 + 96) = type metadata accessor for JetPackManagedKeyProvider(0LL);
  *(void *)(v26 + 104) = &protocol witness table for JetPackManagedKeyProvider;
  sub_10002C328((void *)(v26 + 72));
  JetPackManagedKeyProvider.init()();
  DiskJetPackLoader.init(signingPolicy:keyProviders:)(v16, v26);
  unint64_t v27 = v22;
  uint64_t v60 = v22;
  uint64_t v28 = v58;
  static Pipeline.start<A>(with:)(v22, v58);
  sub_1000A4494(v75, (uint64_t)v9);
  uint64_t v29 = v59;
  uint64_t v30 = v28;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))( (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v27,  v28);
  uint64_t v31 = *(unsigned __int8 *)(v61 + 80);
  uint64_t v32 = (v31 + 16) & ~v31;
  unint64_t v33 = (v62 + v32 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v36 = (v35 + v34 + 8) & ~v35;
  uint64_t v37 = swift_allocObject(&unk_100123A78, v36 + v19, v31 | v35 | 7);
  sub_1000A44DC((uint64_t)v9, v37 + v32);
  uint64_t v39 = v64;
  uint64_t v38 = v65;
  *(void *)(v37 + v33) = v64;
  *(void *)(v37 + v34) = v38;
  uint64_t v40 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v37 + v36, v57, v30);
  swift_unknownObjectRetain(v39);
  id v41 = v38;
  uint64_t v42 = sub_100029E18(&qword_10013EDC0);
  uint64_t v43 = sub_100044410( &qword_10013EEB8,  (uint64_t *)&unk_10013EEA0,  (uint64_t)&protocol conformance descriptor for PipelineEntryTask<A>);
  uint64_t v44 = v63;
  uint64_t v45 = v74;
  uint64_t v46 = PipelineTask.mapTaskOutput<A>(_:)(sub_1000A4520, v37, v63, v42, v43);
  swift_release(v37);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v45, v44);
  uint64_t v76 = v46;
  uint64_t v47 = v68;
  static PipelinePhase.cacheValueIfSuccessful()(v42, v42);
  uint64_t v48 = sub_100029E18(&qword_10013EEC0);
  uint64_t v49 = sub_100044410( &qword_10013EEC8,  &qword_10013EEC0,  (uint64_t)&protocol conformance descriptor for MapPipelineTask<A, B>);
  uint64_t v50 = PipelineTask.andThen<A>(_:)(v47, v48, v42, v49);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v71);
  swift_release(v76);
  uint64_t v76 = v50;
  uint64_t v51 = sub_100029E18(&qword_10013EED0);
  uint64_t v52 = sub_100044410( (unint64_t *)&unk_10013EED8,  &qword_10013EED0,  (uint64_t)&protocol conformance descriptor for MapPipelineTask<A, B>);
  uint64_t v53 = v69;
  PipelineTask.eraseToAnyPipelineTask()(v51, v52);
  swift_unknownObjectRelease(v39);

  sub_1000A45B8(v75);
  swift_release(v76);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v60, v40);
  uint64_t v54 = v67;
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))( v67 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher_bundlePipeline,  v53,  v73);
  return v54;
}

uint64_t sub_1000A2BE0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v33 = a3;
  unint64_t v34 = a4;
  uint64_t v7 = sub_100029E18(&qword_10013CE40);
  __chkstk_darwin(v7);
  uint64_t v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DiskJetPackLoader(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A4494(a2, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a5,  v9);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = (v20 + v19 + 8) & ~v20;
  uint64_t v22 = swift_allocObject(&unk_100123AA0, v21 + v11, v16 | v20 | 7);
  sub_1000A44DC((uint64_t)v15, v22 + v17);
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  *(void *)(v22 + v18) = v33;
  uint64_t v25 = v34;
  *(void *)(v22 + v19) = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v22 + v21,  (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v23);
  sub_100029E18(&qword_10013EEF8);
  swift_unknownObjectRetain(v24);
  uint64_t v26 = Promise.__allocating_init()(v25);
  uint64_t v27 = type metadata accessor for TaskPriority(0LL);
  uint64_t v28 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v35, 1LL, 1LL, v27);
  uint64_t v29 = (void *)swift_allocObject(&unk_100123AC8, 56LL, 7LL);
  _OWORD v29[2] = 0LL;
  void v29[3] = 0LL;
  v29[4] = &unk_10013EEF0;
  void v29[5] = v22;
  v29[6] = v26;
  swift_retain(v26);
  uint64_t v30 = sub_1000B3448(v28, (uint64_t)&unk_10013EF00, (uint64_t)v29);
  swift_release(v30);
  return v26;
}