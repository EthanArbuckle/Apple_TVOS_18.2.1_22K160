uint64_t PluginsManager::get(PluginsManager *this)
{
  unint64_t v1;
  void *v3;
  void ***v4;
  void **v5;
  v3 = &__block_literal_global;
  v1 = atomic_load(&PluginsManager::get(void)::initOnce);
  if (v1 != -1LL)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once( &PluginsManager::get(void)::initOnce,  &v4,  (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>);
  }

  return PluginsManager::manager;
}

double ___ZN14PluginsManager3getEv_block_invoke()
{
  v0 = operator new(0x58uLL);
  v0[1] = 0LL;
  void *v0 = v0 + 1;
  v0[2] = 0LL;
  v0[3] = 850045863LL;
  double result = 0.0;
  *((_OWORD *)v0 + 2) = 0u;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  v0[10] = 0LL;
  PluginsManager::manager = (uint64_t)v0;
  return result;
}

void PluginsManager::get_plugin_ptr(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v28[19] = *MEMORY[0x1895F89C0];
  v23.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v23.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v8 = std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>( a1,  (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(void *)a4 = v8[7];
    char v9 = 1;
LABEL_19:
    *(_BYTE *)(a4 + 16) = v9;
    goto LABEL_20;
  }

  std::unique_lock<std::mutex>::unlock(&v23);
  if (!a3 || !os_variant_allows_internal_security_policies())
  {
    *(void *)&__int128 v21 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((void *)&v21 + 1) = 63LL;
    int v22 = 16;
    di_log::logger<di_log::log_printer<92ul>>::logger(v24, &v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Plugin ", 7LL);
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      v17 = (void *)a2;
    }
    else {
      v17 = *(void **)a2;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" is not registered", 18LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v24);
    MEMORY[0x1895BC2CC](v28);
    v19 = std::generic_category();
    char v9 = 0;
    *(void *)a4 = 45LL;
    *(void *)(a4 + 8) = v19;
    goto LABEL_19;
  }

  if ((v10 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "com.apple.raw");
    v24[3] = rawTestPluginCreate;
    v24[4] = 0LL;
    std::string::basic_string[abi:ne180100]<0>(v25, "com.apple.diskimage-plugin.nbd");
    v25[3] = amberPluginCreate;
    v25[4] = 0LL;
    std::string::basic_string[abi:ne180100]<0>(v26, "com.apple.diskimage-plugin.amber");
    v26[3] = amberPluginCreate;
    v26[4] = 16LL;
    std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::map[abi:ne180100]( (uint64_t)&register_internal_plugin(std::string const&)::internal_plugins,  v24,  3LL);
    for (uint64_t i = 0LL; i != -15; i -= 5LL)
    {
      if (SHIBYTE(v26[i + 2]) < 0) {
        operator delete((void *)v26[i]);
      }
    }

    __cxa_atexit( (void (*)(void *))std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::~map[abi:ne180100],  &register_internal_plugin(std::string const&)::internal_plugins,  &dword_188046000);
  }

  if (std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>( (uint64_t)&register_internal_plugin(std::string const&)::internal_plugins,  (void **)a2) != (void **)&unk_18C701A18)
  {
    v24[0] = (void *)a2;
    v11 = std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( &register_internal_plugin(std::string const&)::internal_plugins,  (void **)a2,  (uint64_t)&std::piecewise_construct,  (__int128 **)v24);
    int v12 = *(char *)(a2 + 23);
    v13 = *(PluginsManager **)a2;
    uint64_t v14 = ((uint64_t (*)(uint64_t))v11[7])(v11[8]);
    if (v12 >= 0) {
      v15 = (PluginsManager *)a2;
    }
    else {
      v15 = v13;
    }
    di_plugin_register(v15, v14);
  }

  PluginsManager::get_plugin_ptr(a1, a2, 0LL);
LABEL_20:
  if (v23.__owns_) {
    std::mutex::unlock(v23.__m_);
  }
}

void sub_188047EEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = 0LL;
  while (1)
  {
    v20 -= 40LL;
    if (v20 == -120)
    {
      if (a14) {
        std::mutex::unlock(a13);
      }
      _Unwind_Resume(a1);
    }
  }
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }

  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    di_log::logger<di_log::log_printer<92ul>>::logger();
  }

void *di_log::logger<di_log::log_printer<92ul>>::logger(void *a1, __int128 *a2)
{
  v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<92ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C8BE0;
  a1[45] = &unk_18A1C8CE0;
  a1[46] = &unk_18A1C8D08;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C8BE0;
  a1[45] = &unk_18A1C8C68;
  a1[46] = &unk_18A1C8C90;
  return a1;
}

void sub_18804804C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *PluginsManager::create_plugin_image(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v7 = *__error();
  if (DIForwardLogs())
  {
    v18[0] = 0LL;
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEFAULT);
    uint64_t buf = 0x6704100402LL;
    char v9 = "RO";
    int v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    __int16 v21 = 2080;
    if ((a3 & 3) != 0) {
      char v9 = "RW";
    }
    __int16 v23 = 2080;
    v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = a4;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl();
    if (v10)
    {
      v11 = (char *)v10;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v10);
      free(v11);
    }
  }

  else
  {
    int v12 = (os_log_s *)getDIOSLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = "RW";
      uint64_t buf = 0x6704100402LL;
      int v22 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      __int16 v21 = 2080;
      if ((a3 & 3) == 0) {
        v13 = "RO";
      }
      __int16 v23 = 2080;
      v24 = v13;
      __int16 v25 = 2112;
      uint64_t v26 = a4;
      _os_log_impl( &dword_188046000,  v12,  OS_LOG_TYPE_DEFAULT,  "%.*s: Creating %s plugin instance with params: %@",  (uint8_t *)&buf,  0x26u);
    }
  }

  *__error() = v7;
  v18[1] = a4;
  v19 = 0LL;
  LODWORD(v18[0]) = 16;
  HIDWORD(v18[0]) = a3;
  uint64_t v14 = (void *)(*(uint64_t (**)(void *, __CFError **))(a2 + 8))(v18, &v19);
  v15 = v14;
  if (v14 && *(_DWORD *)v14 <= 0x57u)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &buf,  (uint64_t)"Plugin image struct size ",  25LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &buf,  (uint64_t)" is incompatible with the framework, expected at least ",  55LL);
    std::ostream::operator<<();
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }

  verify_plugin_image(v14, v19);
  return v15;
}

void sub_188048358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614768];
  uint64_t v3 = MEMORY[0x189614768] + 64LL;
  *(void *)(a1 + 112) = MEMORY[0x189614768] + 64LL;
  uint64_t v4 = *(void *)(MEMORY[0x189614738] + 8LL);
  uint64_t v5 = *(void *)(MEMORY[0x189614738] + 16LL);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2 + 24;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_18804845C(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)a1 = *MEMORY[0x189614738];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 112);
  return a1;
}

void *verify_plugin_image(void *result, __CFError *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!result)
  {
    if (a2)
    {
      int v7 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = (os_log_s *)getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t buf = 68158210;
        int v16 = 71;
        __int16 v17 = 2080;
        uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        __int16 v19 = 2114;
        uint64_t v20 = a2;
        char v9 = (const char *)_os_log_send_and_compose_impl();
        if (v9)
        {
          unsigned __int8 v10 = (char *)v9;
          fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
          free(v10);
        }
      }

      else
      {
        v11 = (os_log_s *)getDIOSLog();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          int v16 = 71;
          __int16 v17 = 2080;
          uint64_t v18 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          __int16 v19 = 2114;
          uint64_t v20 = a2;
          _os_log_impl( &dword_188046000,  v11,  OS_LOG_TYPE_ERROR,  "%.*s: Failed initializing plugin: %{public}@",  buf,  0x1Cu);
        }
      }

      *__error() = v7;
      int v12 = a2;
      int Code = CFErrorGetCode(a2);
      if (Code < 0) {
        int v14 = Code;
      }
      else {
        int v14 = -Code;
      }
      CFRelease(v12);
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin initialization failed";
      unsigned int v4 = v14;
    }

    else
    {
      exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin bug: returned init failure without supplying the error";
      unsigned int v4 = -14;
    }

LABEL_9:
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v3, v4);
  }

  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    uint64_t v3 = "Mandatory callbacks in the plugin's image struct are missing";
    unsigned int v4 = -22;
    goto LABEL_9;
  }

  return result;
}

  *a2 = v7;
  return v5;
}

  operator delete[](v13);
  return v19;
}

    unsigned __int8 v10 = v9;
LABEL_23:
    if (v9 != v10)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)(result + 24) + 16LL * (*(_DWORD *)(result + 44) & v9));
      __int16 v17 = 1;
      goto LABEL_27;
    }
  }

  do
    uint64_t v5 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v5 & 1) == 0)
  {
    v6 = atomic_load(*(unsigned int **)result);
    int v7 = atomic_load(*(unsigned int **)(result + 16));
    if (v6 != v7)
    {
      while (1)
      {
        v8 = __ldaxr(v2);
        if (v8 != 1) {
          break;
        }
        if (!__stlxr(0, v2)) {
          goto LABEL_8;
        }
      }

      __clrex();
    }
  }

  __int16 v17 = 0;
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 16) = v17;
  return result;
}

    double result = DiskImageSparseBundle::try_unmap_band_extents_without_list((uint64_t **)a1, a2, a3);
  }

  while (!(_DWORD)result);
  return result;
}

  *a2 = v7;
  return v5;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

void *PluginsManager::decode_plugin_image(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  int v7 = *__error();
  if (DIForwardLogs())
  {
    uint64_t v17 = 0LL;
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)uint64_t buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 114;
    __int16 v19 = 2080;
    uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unsigned __int8 v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    v11 = (os_log_s *)getDIOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 114;
      __int16 v19 = 2080;
      uint64_t v20 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl(&dword_188046000, v11, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }

  *__error() = v7;
  *(void *)uint64_t buf = 0LL;
  int v12 = *(uint64_t (**)(__int128 *, uint64_t, uint8_t *))(a2 + 16);
  __int128 v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  v13 = (void *)v12(&v15, a4, buf);
  return verify_plugin_image(v13, *(__CFError **)buf);
}

uint64_t PluginsManager::register_plugin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967274LL;
  }
  if (*(_DWORD *)(a3 + 4) != 1)
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31LL;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<147ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin version ", 15LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v26,  (uint64_t)" is incompatible with the framework, expected ",  46LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf((uint64_t)&v24);
    goto LABEL_6;
  }

  if (*(_DWORD *)a3 <= 0x27u)
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31LL;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<152ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin struct size ", 19LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v26,  (uint64_t)" is incompatible with the framework, expected at least ",  55LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf((uint64_t)&v24);
LABEL_6:
    MEMORY[0x1895BC2CC](v27);
    return 4294967209LL;
  }

  if (!*(void *)(a3 + 8) || !*(void *)(a3 + 16))
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31LL;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<157ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v26,  (uint64_t)"Mandatory callbacks in the plugin's struct are missing",  54LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)&v24);
    MEMORY[0x1895BC2CC](v27);
    return 4294967274LL;
  }

  int v7 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>( a1,  (void **)a2))
  {
    else {
      std::string v22 = *(std::string *)a2;
    }
    *(void *)&__int128 v23 = a3;
    int v12 = operator new(0x38uLL);
    else {
      std::string v28 = v22;
    }
    v12[1] = 0LL;
    v12[2] = 0LL;
    *int v12 = off_18A1C9B90;
    v24 = (__int128 *)a3;
    if ((char)v28.__r_.__value_.__s.__size_ < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      v13 = v24;
    }

    else
    {
      std::string __p = v28;
      v13 = (__int128 *)a3;
    }

    v12[3] = v13;
    int v14 = (std::string *)(v12 + 4);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }

    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v12[6] = __p.__r_.__value_.__l.__cap_;
    }

    *((void *)&v23 + 1) = v12;
    v24 = (__int128 *)a2;
    __int128 v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( (uint64_t **)a1,  (void **)a2,  (uint64_t)&std::piecewise_construct,  &v24);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)(v15 + 7), &v23);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (*((void *)&v23 + 1))
    {
      uint64_t v17 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31LL;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 0;
    di_log::logger<di_log::log_printer<171ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Registered plugin ", 18LL);
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      uint64_t v20 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v20 = *(const std::string::value_type **)a2;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)v20, v21);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf((uint64_t)&v24);
    MEMORY[0x1895BC2CC](v27);
    uint64_t v4 = 0LL;
  }

  else
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"PluginsManager::register_plugin(const string &, di_plugin_t *)";
    v28.__r_.__value_.__l.__size_ = 31LL;
    LODWORD(v28.__r_.__value_.__r.__words[2]) = 16;
    di_log::logger<di_log::log_printer<163ul>>::logger(&v24, (__int128 *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Plugin ", 7LL);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      char v9 = (const std::string::value_type *)a2;
    }
    else {
      char v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v26,  (uint64_t)" cannot be re-registered",  24LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)&v24);
    MEMORY[0x1895BC2CC](v27);
    uint64_t v4 = 4294967279LL;
  }

  std::mutex::unlock(v7);
  return v4;
}

void sub_188048DD4( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v24);
  __cxa_begin_catch(a1);
  PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()((uint64_t)&a9, v23);
  __cxa_rethrow();
}

void sub_188048E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_188048E68()
{
}

void sub_188048E88(_Unwind_Exception *a1)
{
}

void sub_188048E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_188048EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_188048EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *di_log::logger<di_log::log_printer<147ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<147ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C8E00;
  a1[45] = &unk_18A1C8F00;
  a1[46] = &unk_18A1C8F28;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C8E00;
  a1[45] = &unk_18A1C8E88;
  a1[46] = &unk_18A1C8EB0;
  return a1;
}

void sub_188048F68(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<152ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<152ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C9020;
  a1[45] = &unk_18A1C9120;
  a1[46] = &unk_18A1C9148;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C9020;
  a1[45] = &unk_18A1C90A8;
  a1[46] = &unk_18A1C90D0;
  return a1;
}

void sub_188049050(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<157ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<157ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C9240;
  a1[45] = &unk_18A1C9340;
  a1[46] = &unk_18A1C9368;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C9240;
  a1[45] = &unk_18A1C92C8;
  a1[46] = &unk_18A1C92F0;
  return a1;
}

void sub_188049138(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<163ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<163ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C9460;
  a1[45] = &unk_18A1C9560;
  a1[46] = &unk_18A1C9588;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C9460;
  a1[45] = &unk_18A1C94E8;
  a1[46] = &unk_18A1C9510;
  return a1;
}

void sub_188049220(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void *di_log::logger<di_log::log_printer<171ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<171ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C9680;
  a1[45] = &unk_18A1C9780;
  a1[46] = &unk_18A1C97A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C9680;
  a1[45] = &unk_18A1C9708;
  a1[46] = &unk_18A1C9730;
  return a1;
}

void sub_18804936C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  return a1;
}

void PluginsManager::release_plugin(uint64_t a1, void **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__erase_unique<std::string>( (uint64_t **)a1,  a2);
  std::mutex::unlock(v4);
}

void sub_188049414(_Unwind_Exception *a1)
{
}

CFStringRef PluginsManager::copy_plugin_description(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v5) {
      return (CFStringRef)v5(a3);
    }
  }

  else {
    int v7 = *(const char **)a2;
  }
  return CFStringCreateWithCString(0LL, v7, 0x8000100u);
}

uint64_t plugin_header::plugin_header(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 16),  *(const std::string::value_type **)a2,  *(void *)(a2 + 8));
  }

  else
  {
    __int128 v12 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }

  uint64_t v13 = PluginsManager::get((PluginsManager *)a1);
  PluginsManager::get_plugin_ptr(v13, a2, 1, (uint64_t)v35);
  if (!v36)
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v33 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v35);
    *(void *)exception = off_18A1E43B0;
    *(_OWORD *)(exception + 8) = v33;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = "Failed to get plugin instance";
  }

  v41[0] = off_18A1C9E50;
  v42 = v41;
  if (!a6)
  {
    uint64_t v18 = PluginsManager::get(v14);
    plugin_image = PluginsManager::create_plugin_image(v18, v35[0], a4, a3);
    uint64_t v20 = (uint64_t)v42;
    if (v42)
    {
      if (v42 == v41)
      {
        v38 = v37;
        (*(void (**)(uint64_t, void *))(v41[0] + 24LL))((uint64_t)v41, v37);
        goto LABEL_23;
      }

      uint64_t v20 = (*(uint64_t (**)(void))(*v42 + 16LL))();
    }

    v38 = (void *)v20;
LABEL_23:
    std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>( (uint64_t *)&v34,  (uint64_t)plugin_image,  (uint64_t)v37);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, &v34);
    uint64_t v26 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1))
    {
      uint64_t v27 = (unint64_t *)(*((void *)&v34 + 1) + 8LL);
      do
        unint64_t v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    v24 = v38;
    if (v38 == v37)
    {
      uint64_t v25 = 4LL;
      v24 = v37;
      goto LABEL_32;
    }

    goto LABEL_29;
  }

  uint64_t v15 = PluginsManager::get(v14);
  uint64_t v16 = PluginsManager::decode_plugin_image(v15, v35[0], a5, a6);
  uint64_t v17 = (uint64_t)v42;
  if (v42)
  {
    if (v42 == v41)
    {
      v40 = v39;
      (*(void (**)(uint64_t, void *))(v41[0] + 24LL))((uint64_t)v41, v39);
      goto LABEL_15;
    }

    uint64_t v17 = (*(uint64_t (**)(void))(*v42 + 16LL))();
  }

  v40 = (void *)v17;
LABEL_15:
  std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>( (uint64_t *)&v34,  (uint64_t)v16,  (uint64_t)v39);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, &v34);
  uint64_t v21 = (std::__shared_weak_count *)*((void *)&v34 + 1);
  if (*((void *)&v34 + 1))
  {
    std::string v22 = (unint64_t *)(*((void *)&v34 + 1) + 8LL);
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  v24 = v40;
  if (v40 == v39)
  {
    uint64_t v25 = 4LL;
    v24 = v39;
    goto LABEL_32;
  }

LABEL_29:
  if (!v24) {
    goto LABEL_33;
  }
  uint64_t v25 = 5LL;
LABEL_32:
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_33:
  v29 = v42;
  if (v42 == v41)
  {
    uint64_t v30 = 4LL;
    v29 = v41;
    goto LABEL_37;
  }

  if (v42)
  {
    uint64_t v30 = 5LL;
LABEL_37:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }

  return a1;
}

  uint64_t v17 = v24;
  if (v24)
  {
    uint64_t v18 = (unint64_t *)&v24->__shared_owners_;
    do
      int v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return is_mounted_on_smb;
}

    uint64_t v26 = 0;
    *__error() = v27;
    goto LABEL_30;
  }

  [MEMORY[0x1896078A8] defaultManager];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[DIBaseParams inputURL](self, "inputURL");
  __int128 v12 = [v10 copyItemAtURL:v11 toURL:v9 error:a3];

  if ((v12 & 1) == 0)
  {
    uint64_t v27 = *__error();
    if (!DIForwardLogs())
    {
      getDIOSLog();
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        v37 = 51;
        v38 = 2080;
        v39 = "-[DIConvertParams prepareParamsForSquashWithError:]";
        _os_log_impl( &dword_188046000,  v32,  OS_LOG_TYPE_ERROR,  "%.*s: Failed to copy source disk image to temporary URL",  buf,  0x12u);
      }

      goto LABEL_29;
    }

    getDIOSLog();
    v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t buf = 68157954;
    v37 = 51;
    v38 = 2080;
    v39 = "-[DIConvertParams prepareParamsForSquashWithError:]";
    v29 = (char *)_os_log_send_and_compose_impl();

    if (v29) {
      goto LABEL_25;
    }
    goto LABEL_29;
  }

  uint64_t v13 = -[DIBaseParams initWithURL:error:](objc_alloc(&OBJC_CLASS___DIBaseParams), "initWithURL:error:", v9, a3);
  -[DIConvertParams setOutputParams:](self, "setOutputParams:", v13);

  -[DIConvertParams outputParams](self, "outputParams");
  int v14 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = [v14 openExistingImageWithFlags:2 error:a3];

  if ((v15 & 1) == 0)
  {
LABEL_15:
    uint64_t v26 = 0;
    goto LABEL_30;
  }

  -[NSArray objectAtIndex:](self->_shadowURLs, "objectAtIndex:", 0LL);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v17 = +[DIURL newDIURLWithNSURL:](&OBJC_CLASS___DIURL, "newDIURLWithNSURL:", v16);
  -[DIBaseParams setInputURL:](self, "setInputURL:", v17);

  -[DIBaseParams inputURL](self, "inputURL");
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  [v18 path];
  int v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v19)
  {

    goto LABEL_32;
  }

  uint64_t v20 = (void *)MEMORY[0x189607A50];
  -[DIBaseParams inputURL](self, "inputURL");
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  [v20 componentsWithURL:v21 resolvingAgainstBaseURL:1];
  std::string v22 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v20) = v22 == 0LL;

  if ((_DWORD)v20)
  {
LABEL_32:
    uint64_t v26 = +[DIError failWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:description:error:",  22LL,  @"Malformed URL format",  a3,  v34,  v35);
    goto LABEL_30;
  }

  [MEMORY[0x189603FA8] arrayWithArray:self->_shadowURLs];
  unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
  [v23 removeObjectAtIndex:0];
  v24 = -[DIBaseParams shadowChain](self, "shadowChain");
  uint64_t v25 = [v24 addShadowURLs:v23 error:a3];

  if ((v25 & 1) != 0)
  {
    -[DIBaseParams setDiskImageParamsXPC:](self, "setDiskImageParamsXPC:", 0LL);
    uint64_t v26 = -[DIBaseParams openExistingImageWithFlags:error:](self, "openExistingImageWithFlags:error:", 0LL, a3);
  }

  else
  {
    uint64_t v26 = 0;
  }

LABEL_30:
  return v26;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  v11 = a2[1];
  if (v11)
  {
    __int128 v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      __int128 v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      int v14 = *a4 == (void)v19;
      int v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          std::string v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  v11 = a2[1];
  if (v11)
  {
    __int128 v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      __int128 v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      int v14 = *a4 == (void)v19;
      int v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          std::string v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

void sub_1880497C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char *a25)
{
  v29 = a17;
  if (a17 == v27)
  {
    uint64_t v30 = 4LL;
    v29 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*(void *)v29 + 8 * v30))();
LABEL_6:
  v31 = a25;
  if (a25 == &a22)
  {
    uint64_t v32 = 4LL;
    v31 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_11;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*(void *)v31 + 8 * v32))();
LABEL_11:
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error( uint64_t result)
{
  if (*(_BYTE *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = off_18A1C9E28;
  }

  return result;
}

void DiskImagePlugin::create_sync_ring(DiskImagePlugin *this)
{
  uint64_t v2 = (unint64_t *)((char *)this + 264);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = ___ZN15DiskImagePlugin16create_sync_ringEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_18;
  v4[4] = this;
  uint64_t v5 = v4;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    int v7 = &v5;
    unint64_t v6 = &v7;
    std::__call_once( v2,  &v6,  (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>);
  }

uint64_t ___ZN15DiskImagePlugin16create_sync_ringEv_block_invoke(uint64_t a1)
{
  return std::optional<PluginRing>::emplace[abi:ne180100]<_di_plugin_image_t *,void (&)(io_rings_desc_t *,void *),DiskImagePlugin *,void>((PluginRing *)(*(void *)(a1 + 32) + 56LL));
}

uint64_t std::optional<PluginRing>::emplace[abi:ne180100]<_di_plugin_image_t *,void (&)(io_rings_desc_t *,void *),DiskImagePlugin *,void>( PluginRing *a1)
{
  if (*((_BYTE *)a1 + 200))
  {
    PluginRing::~PluginRing(a1);
    *(_BYTE *)(v1 + 200) = 0;
  }

  uint64_t result = PluginRing::PluginRing();
  *(_BYTE *)(result + 200) = 1;
  return result;
}

void di_plugin_sync_cqe_callback(int a1, DiskImagePlugin *this)
{
}

uint64_t DiskImagePlugin::sync_enter_and_wait(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = a3 + 16;
  uint64_t v6 = io_rings_enter(*(void *)(a1 + 104), 1, 0);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    *(void *)&__int128 v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((void *)&v9 + 1) = 36LL;
    int v10 = 16;
    di_log::logger<di_log::log_printer<243ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"failed to enter SQE to the ring, ret code ",  42LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x1895BC2CC](&v13);
  }

  else
  {
    gcd::gcd_semaphore::wait((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }

  return v7;
}

void sub_188049ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<243ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<243ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C98A0;
  a1[45] = &unk_18A1C99A0;
  a1[46] = &unk_18A1C99C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C98A0;
  a1[45] = &unk_18A1C9928;
  a1[46] = &unk_18A1C9950;
  return a1;
}

void sub_188049B64(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImagePlugin::read(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v9 = PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 7));
  if (!v8) {
    return -35LL;
  }
  uint64_t v10 = v8;
  v98 = 0LL;
  v99 = 0LL;
  v100 = 0LL;
  uint64_t v11 = *(void *)(a4 + 72);
  uint64_t v12 = a3[9];
  unint64_t v13 = (*(uint64_t (**)(void *, double))(*a1 + 24LL))(a1, v9);
  uint64_t v76 = a2;
  (*(void (**)(void *__return_ptr, void *))(*a1 + 72LL))(v97, a1);
  unint64_t v77 = a3[18];
  unint64_t v14 = (*(void *)(a4 + 144) - v77) & ~((uint64_t)(*(void *)(a4 + 144) - v77) >> 63);
  if (v97[0] && v11 - v12 >= v97[1] * v97[0] + (v14 - 1 + v97[0]) / v97[0] * v97[0])
  {
    uint64_t v15 = *(uint64_t (**)(void))(a1[2] + 32LL);
    if (v15)
    {
      unsigned int v16 = v15();
      unint64_t v17 = v77;
      unint64_t v18 = v77;
      if (v16) {
        unint64_t v18 = v77 / v16 * v16;
      }
    }

    else
    {
      unint64_t v17 = a3[18];
      unint64_t v18 = v17;
    }

    unint64_t v14 = (v14 - 1 + v17 - v18 + v97[0]) / v97[0] * v97[0];
    unint64_t v77 = v18;
  }

  uint64_t v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v84 = *a3;
  v85 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }

  v86[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
  __int128 v88 = *(_OWORD *)(a3 + 7);
  __int128 v23 = *(_OWORD *)(a3 + 11);
  __int128 v89 = *(_OWORD *)(a3 + 9);
  uint64_t v87 = a3[6];
  __int128 v90 = v23;
  char v91 = *((_BYTE *)a3 + 104);
  v24 = (std::__shared_weak_count *)a3[15];
  uint64_t v92 = a3[14];
  v93 = v24;
  unint64_t v75 = v14 / v13;
  if (v24)
  {
    uint64_t v25 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }

  __int128 v94 = *((_OWORD *)a3 + 8);
  uint64_t v95 = a3[18];
  char v96 = *((_BYTE *)a3 + 152);
  while (!sg_vec_ns::details::sg_vec_iterator::is_end_of_buffers((sg_vec_ns::details::sg_vec_iterator *)&v84))
  {
    sg_vec_ns::details::buffer_iterator::sync((sg_vec_ns::details::buffer_iterator *)&v88);
    uint64_t v27 = v92;
    unint64_t v28 = v93;
    uint64_t v81 = v92;
    v82 = v93;
    if (v93)
    {
      v29 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      __int128 v83 = v94;
      else {
        unint64_t v31 = v14;
      }
      if (!v31)
      {
        do
          unint64_t v52 = __ldaxr(v29);
        while (__stlxr(v52 - 1, v29));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }

        break;
      }
    }

    else
    {
      __int128 v83 = v94;
      else {
        unint64_t v31 = v14;
      }
      if (!v31) {
        break;
      }
    }

    uint64_t v32 = v99;
    if (v99 >= v100)
    {
      uint64_t v34 = (v99 - v98) >> 4;
      unint64_t v35 = v34 + 1;
      uint64_t v36 = v100 - v98;
      if ((v100 - v98) >> 3 > v35) {
        unint64_t v35 = v36 >> 3;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37) {
        v38 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v100, v37);
      }
      else {
        v38 = 0LL;
      }
      v39 = &v38[16 * v34];
      *(void *)v39 = v27;
      *((void *)v39 + 1) = v31;
      v41 = v98;
      v40 = v99;
      v42 = v39;
      if (v99 != v98)
      {
        do
        {
          *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
          v42 -= 16;
          v40 -= 16;
        }

        while (v40 != v41);
        v40 = v98;
      }

      __int128 v33 = v39 + 16;
      v98 = v42;
      v99 = v39 + 16;
      v100 = &v38[16 * v37];
      if (v40) {
        operator delete(v40);
      }
    }

    else
    {
      *(void *)v99 = v27;
      *((void *)v32 + 1) = v31;
      __int128 v33 = v32 + 16;
    }

    v99 = v33;
    uint64_t v43 = v82;
    if (v82)
    {
      v44 = (unint64_t *)&v82->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v84, (uint64_t)v78);
    v46 = v80;
    if (v80)
    {
      v47 = (unint64_t *)&v80->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    v14 -= v31;
    v49 = v79;
    if (v79)
    {
      v50 = (unint64_t *)&v79->__shared_owners_;
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }

  v53 = v93;
  if (v93)
  {
    v54 = (unint64_t *)&v93->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  v56 = v85;
  if (v85)
  {
    v57 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  v59 = v98;
  *(_BYTE *)uint64_t v10 = 2;
  *(void *)(v10 + 24) = v59;
  *(void *)(v10 + 32) = v77 / v13;
  *(void *)(v10 + 40) = 0LL;
  *(_DWORD *)(v10 + 48) = v75;
  int v60 = DiskImagePlugin::sync_enter_and_wait((uint64_t)a1, v10, v76);
  if (v60 == (unint64_t)v75)
  {
    v61 = (std::__shared_weak_count *)a3[1];
    unint64_t v19 = v13 * v60;
    uint64_t v84 = *a3;
    v85 = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }

    v86[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
    __int128 v88 = *(_OWORD *)(a3 + 7);
    __int128 v64 = *(_OWORD *)(a3 + 11);
    __int128 v89 = *(_OWORD *)(a3 + 9);
    uint64_t v87 = a3[6];
    __int128 v90 = v64;
    char v91 = *((_BYTE *)a3 + 104);
    v65 = (std::__shared_weak_count *)a3[15];
    uint64_t v92 = a3[14];
    v93 = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        unint64_t v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }

    __int128 v94 = *((_OWORD *)a3 + 8);
    uint64_t v95 = a3[18];
    char v96 = *((_BYTE *)a3 + 152);
    sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v84, v19);
    v68 = v93;
    if (v93)
    {
      v69 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }

    v71 = v85;
    if (v85)
    {
      v72 = (unint64_t *)&v85->__shared_owners_;
      do
        unint64_t v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }

  else if (v60 < 0)
  {
    unint64_t v19 = v60;
  }

  else
  {
    unint64_t v19 = -5LL;
  }

  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }

  return v19;
}

void sub_18804A1F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  unint64_t v45 = *(void **)(v43 - 112);
  if (v45)
  {
    *(void *)(v43 - 104) = v45;
    operator delete(v45);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sg_vec_ns::details::sg_vec_iterator::operator++(a1);
}

void sub_18804A288(_Unwind_Exception *a1)
{
}

uint64_t DiskImagePlugin::write(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!v8) {
    return -35LL;
  }
  std::string __p = 0LL;
  v93 = 0LL;
  __int128 v94 = 0LL;
  uint64_t v9 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  uint64_t v78 = v8;
  *(_OWORD *)v85 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  __int128 v86 = *(_OWORD *)(a3 + 9);
  __int128 v87 = *(_OWORD *)(a3 + 11);
  char v88 = *((_BYTE *)a3 + 104);
  uint64_t v16 = a3[14];
  unint64_t v17 = (std::__shared_weak_count *)a3[15];
  if (v17)
  {
    unint64_t v18 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  uint64_t v79 = a2;
  uint64_t v80 = a1;
  unint64_t v21 = a3[18];
  uint64_t v20 = a3 + 18;
  __int128 v89 = *((_OWORD *)v20 - 1);
  unint64_t v90 = v21;
  char v91 = *((_BYTE *)v20 + 8);
  uint64_t v22 = *a4;
  __int128 v23 = (std::__shared_weak_count *)a4[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  *(_OWORD *)uint64_t v81 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v26 = a4[6];
  uint64_t v27 = a4[7];
  uint64_t v28 = a4[8];
  __int128 v82 = *(_OWORD *)(a4 + 9);
  __int128 v83 = *(_OWORD *)(a4 + 11);
  char v84 = *((_BYTE *)a4 + 104);
  uint64_t v29 = a4[14];
  unint64_t v30 = (std::__shared_weak_count *)a4[15];
  if (v30)
  {
    unint64_t v31 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  unint64_t v33 = 0LL;
  v111[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)&v85[9];
  __int128 v114 = v86;
  __int128 v115 = v87;
  __int128 v119 = v89;
  v97[0] = *(_OWORD *)v81;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)&v81[9];
  __int128 v102 = v83;
  uint64_t v109 = v9;
  v110 = v10;
  uint64_t v112 = v13;
  *(void *)&__int128 v113 = v14;
  *((void *)&v113 + 1) = v15;
  char v116 = v88;
  uint64_t v117 = v16;
  v118 = v17;
  unint64_t v120 = v90;
  char v121 = v91;
  uint64_t v95 = v22;
  char v96 = v23;
  uint64_t v98 = v26;
  uint64_t v99 = v27;
  uint64_t v100 = v28;
  char v103 = v84;
  __int128 v101 = v82;
  uint64_t v104 = v29;
  v105 = v30;
  __int128 v106 = *((_OWORD *)a4 + 8);
  char v108 = *((_BYTE *)a4 + 152);
  unint64_t v107 = a4[18];
  unint64_t v34 = v107;
  v141[0] = 0;
  v141[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v109, (uint64_t)&v95))
  {
    if (v120 >= v34 || v33 == -1LL) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v138 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((void *)&v138 + 1) = 104LL;
      LODWORD(v139) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v133, &v138);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v136, (uint64_t)"sg: ", 4LL);
      operator<<(&v136);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v133);
      MEMORY[0x1895BC2CC](&v137);
    }

    v133[0] = 0LL;
    v133[1] = v34;
    char v134 = 2;
    trim_sg_to_interval(&v109, (uint64_t)v133, (uint64_t)&v138);
    uint64_t v36 = v138;
    int64_t v37 = v139;
    if (v93 >= v94)
    {
      uint64_t v39 = (v93 - __p) >> 4;
      unint64_t v40 = v39 + 1;
      uint64_t v41 = v94 - __p;
      if ((v94 - __p) >> 3 > v40) {
        unint64_t v40 = v41 >> 3;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42) {
        uint64_t v43 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v94, v42);
      }
      else {
        uint64_t v43 = 0LL;
      }
      v44 = &v43[16 * v39];
      *(void *)v44 = v36;
      *((void *)v44 + 1) = v37;
      unint64_t v45 = v93;
      v46 = v44;
      if (v93 != __p)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
          v46 -= 16;
          v45 -= 16;
        }

        while (v45 != __p);
        unint64_t v45 = __p;
      }

      v38 = v44 + 16;
      std::string __p = v46;
      __int128 v94 = &v43[16 * v42];
      if (v45) {
        operator delete(v45);
      }
    }

    else
    {
      *(void *)v93 = v138;
      *((void *)v93 + 1) = v37;
      v38 = v93 + 16;
    }

    v93 = v38;
    uint64_t v47 = (int)v139;
    if ((v139 & 0x80000000) != 0) {
      int64_t v48 = (int)v139;
    }
    else {
      int64_t v48 = v139;
    }
    BOOL v49 = v48 >= 0 || (_DWORD)v48 == 0;
    char v50 = v49;
    if (v49)
    {
      unint64_t v51 = v140;
      if (sg_vec_ns::should_create_new_sg_vec_ref( (sg_vec_ns *)&v109,  (const sg_vec_ns::details::sg_vec_iterator *)&v95,  v140,  v48))
      {
        v122[0] = v109;
        v122[1] = v110;
        if (v110)
        {
          unint64_t v55 = (unint64_t *)&v110->__shared_owners_;
          do
            unint64_t v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }

        v123[0] = v111[0];
        *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v111 + 9);
        uint64_t v124 = v112;
        __int128 v125 = v113;
        __int128 v126 = v114;
        __int128 v127 = v115;
        char v128 = v116;
        v129[0] = v117;
        v129[1] = v118;
        if (v118)
        {
          v57 = (unint64_t *)&v118->__shared_owners_;
          do
            unint64_t v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }

        __int128 v130 = v119;
        unint64_t v131 = v120;
        char v132 = v121;
        sg_vec_ns::generate_vec_ref( (uint64_t)v122,  (uint64_t)&v95,  (uint64_t)v51,  v48,  0xFFFFFFFFFFFFFFFFLL,  (sg_vec_ref *)v133);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v141, (uint64_t)v133);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v133);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v129);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v122);
        sg_vec_ref::begin((sg_vec_ref *)v141, (uint64_t)v133);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v109, (uint64_t)v133);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v135);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v133);
        sg_vec_ref::end((sg_vec_ref *)v141, (uint64_t)v133);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v95, (uint64_t)v133);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v135);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v133);
      }

      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v109, v48);
      v33 += v48;
    }

    else
    {
      unint64_t v77 = v47;
    }

    unint64_t v52 = (std::__shared_weak_count *)*((void *)&v138 + 1);
    if (!*((void *)&v138 + 1)) {
      goto LABEL_55;
    }
    v53 = (unint64_t *)(*((void *)&v138 + 1) + 8LL);
    do
      unint64_t v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      if ((v50 & 1) == 0) {
        goto LABEL_70;
      }
    }

    else
    {
LABEL_55:
      if ((v50 & 1) == 0) {
        goto LABEL_70;
      }
    }
  }

  unint64_t v77 = v33;
LABEL_70:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v141);
  v59 = v105;
  if (v105)
  {
    int v60 = (unint64_t *)&v105->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  v62 = v96;
  if (v96)
  {
    unint64_t v63 = (unint64_t *)&v96->__shared_owners_;
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  v65 = v118;
  if (v118)
  {
    v66 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  v68 = v110;
  if (v110)
  {
    v69 = (unint64_t *)&v110->__shared_owners_;
    do
      unint64_t v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  unint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 24LL))(v80);
  unint64_t v72 = *v20 / v71;
  *(_BYTE *)uint64_t v78 = 4;
  *(void *)(v78 + 24) = __p;
  *(void *)(v78 + 32) = v72;
  *(void *)(v78 + 40) = 0LL;
  *(_DWORD *)(v78 + 48) = v77 / v71;
  int v73 = DiskImagePlugin::sync_enter_and_wait(v80, v78, v79);
  uint64_t v74 = -5LL;
  if (v73 < 0) {
    uint64_t v74 = v73;
  }
  else {
    uint64_t v75 = v74;
  }
  if (__p) {
    operator delete(__p);
  }
  return v75;
}

void sub_18804AB70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t DiskImagePlugin::flush(uint64_t a1, uint64_t a2, int a3)
{
  if (!v6) {
    return 4294967261LL;
  }
  *(_BYTE *)uint64_t v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return DiskImagePlugin::sync_enter_and_wait(a1, v6, a2);
}

uint64_t DiskImagePlugin::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a4;
  uint64_t v7 = (PluginRing *)(a1 + 56);
  for (uint64_t i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    PluginRing::try_sub_sqe_allocate(v7);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(i - 1);
    uint64_t v11 = *i;
    *(_BYTE *)uint64_t v9 = 6;
    *(void *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 32) = v11;
    uint64_t result = DiskImagePlugin::sync_enter_and_wait(a1, v9, a2);
    if ((_DWORD)result) {
      return result;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return 4294967261LL;
}

void DiskImagePlugin::sync_cqe_callback(DiskImagePlugin *this)
{
  uint64_t v1 = (DiskImagePlugin *)((char *)this + 56);
  PluginRing::get_next_cqe((DiskImagePlugin *)((char *)this + 56), (uint64_t)&v4);
  if (v6)
  {
    uint64_t v2 = v4;
    int v3 = v5;
    do
    {
      *(_DWORD *)uint64_t v2 = v3;
      gcd::gcd_semaphore::signal((dispatch_semaphore_t *)(v2 + 8));
      PluginRing::get_next_cqe(v1, (uint64_t)&v4);
      uint64_t v2 = v4;
      int v3 = v5;
    }

    while (v6);
  }

unint64_t DiskImagePlugin::read_async( DiskImagePlugin *this, DiskImagePlugin::ContextPluginAsync *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v96 = 0u;
  uint64_t v4 = *(void *)a3;
  int v5 = (std::__shared_weak_count *)*((void *)a3 + 1);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  *(_OWORD *)__int128 v89 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v89[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v8 = *((void *)a3 + 6);
  uint64_t v9 = *((void *)a3 + 7);
  uint64_t v10 = *((void *)a3 + 8);
  __int128 v90 = *(_OWORD *)((char *)a3 + 72);
  __int128 v91 = *(_OWORD *)((char *)a3 + 88);
  char v92 = *((_BYTE *)a3 + 104);
  uint64_t v11 = *((void *)a3 + 14);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)a3 + 15);
  if (v12)
  {
    uint64_t v13 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v16 = *((void *)a3 + 18);
  uint64_t v15 = (char *)a3 + 144;
  __int128 v93 = *((_OWORD *)v15 - 1);
  unint64_t v94 = v16;
  __int128 v82 = (unint64_t *)v15;
  char v95 = v15[8];
  uint64_t v17 = *(void *)a4;
  unint64_t v18 = (std::__shared_weak_count *)*((void *)a4 + 1);
  if (v18)
  {
    unint64_t v19 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  *(_OWORD *)v85 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v21 = *((void *)a4 + 6);
  uint64_t v22 = *((void *)a4 + 7);
  uint64_t v23 = *((void *)a4 + 8);
  __int128 v86 = *(_OWORD *)((char *)a4 + 72);
  __int128 v87 = *(_OWORD *)((char *)a4 + 88);
  char v88 = *((_BYTE *)a4 + 104);
  uint64_t v25 = *((void *)a4 + 14);
  v24 = (std::__shared_weak_count *)*((void *)a4 + 15);
  if (v24)
  {
    uint64_t v26 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  unint64_t v28 = 0LL;
  uint64_t v117 = v4;
  v118 = v5;
  v119[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)&v89[9];
  uint64_t v120 = v8;
  *(void *)&__int128 v121 = v9;
  *((void *)&v121 + 1) = v10;
  __int128 v122 = v90;
  __int128 v123 = v91;
  char v124 = v92;
  uint64_t v125 = v11;
  __int128 v126 = v12;
  __int128 v127 = v93;
  unint64_t v128 = v94;
  char v129 = v95;
  uint64_t v103 = v17;
  uint64_t v104 = v18;
  v105[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v85[9];
  uint64_t v106 = v21;
  uint64_t v107 = v22;
  uint64_t v108 = v23;
  char v111 = v88;
  __int128 v109 = v86;
  __int128 v110 = v87;
  uint64_t v112 = v25;
  __int128 v113 = v24;
  __int128 v114 = *((_OWORD *)a4 + 8);
  char v116 = *((_BYTE *)a4 + 152);
  unint64_t v115 = *((void *)a4 + 18);
  unint64_t v29 = v115;
  LOBYTE(v149[0]) = 0;
  char v150 = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v117, (uint64_t)&v103))
  {
    if (v128 >= v29 || v28 == -1LL) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v146 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((void *)&v146 + 1) = 104LL;
      LODWORD(v147) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v141, &v146);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v144, (uint64_t)"sg: ", 4LL);
      operator<<(&v144);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v141);
      MEMORY[0x1895BC2CC](&v145);
    }

    v141[0] = 0LL;
    v141[1] = v29;
    char v142 = 2;
    trim_sg_to_interval(&v117, (uint64_t)v141, (uint64_t)&v146);
    std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>((char **)v102, &v146);
    uint64_t v31 = v146;
    int64_t v32 = v147;
    unint64_t v33 = v101[2];
    if (v101[2] >= v101[3])
    {
      int64_t v35 = ((char *)v101[2] - (char *)v101[1]) >> 4;
      unint64_t v36 = v35 + 1;
      int64_t v37 = (char *)v101[3] - (char *)v101[1];
      else {
        unint64_t v38 = v36;
      }
      if (v38) {
        uint64_t v39 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&v101[3], v38);
      }
      else {
        uint64_t v39 = 0LL;
      }
      unint64_t v40 = &v39[16 * v35];
      *(void *)unint64_t v40 = v31;
      *((void *)v40 + 1) = v32;
      uint64_t v41 = (char *)v101[2];
      unint64_t v42 = (char *)v101[1];
      uint64_t v43 = v40;
      if (v101[2] != v101[1])
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
          v43 -= 16;
          v41 -= 16;
        }

        while (v41 != v42);
        uint64_t v41 = (char *)v101[1];
      }

      unint64_t v34 = v40 + 16;
      v101[1] = v43;
      v101[2] = v40 + 16;
      v101[3] = &v39[16 * v38];
      if (v41) {
        operator delete(v41);
      }
    }

    else
    {
      *(void *)v101[2] = v146;
      v33[1] = v32;
      unint64_t v34 = v33 + 2;
    }

    v101[2] = v34;
    uint64_t v44 = (int)v147;
    if ((v147 & 0x80000000) != 0) {
      int64_t v45 = (int)v147;
    }
    else {
      int64_t v45 = v147;
    }
    BOOL v46 = v45 >= 0 || (_DWORD)v45 == 0;
    char v47 = v46;
    if (v46)
    {
      int64_t v48 = v148;
      if (sg_vec_ns::should_create_new_sg_vec_ref( (sg_vec_ns *)&v117,  (const sg_vec_ns::details::sg_vec_iterator *)&v103,  v148,  v45))
      {
        v130[0] = v117;
        v130[1] = v118;
        if (v118)
        {
          unint64_t v52 = (unint64_t *)&v118->__shared_owners_;
          do
            unint64_t v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }

        v131[0] = v119[0];
        *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)((char *)v119 + 9);
        uint64_t v132 = v120;
        __int128 v133 = v121;
        __int128 v134 = v122;
        __int128 v135 = v123;
        char v136 = v124;
        v137[0] = v125;
        v137[1] = v126;
        if (v126)
        {
          unint64_t v54 = (unint64_t *)&v126->__shared_owners_;
          do
            unint64_t v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }

        __int128 v138 = v127;
        unint64_t v139 = v128;
        char v140 = v129;
        sg_vec_ns::generate_vec_ref( (uint64_t)v130,  (uint64_t)&v103,  (uint64_t)v48,  v45,  0xFFFFFFFFFFFFFFFFLL,  (sg_vec_ref *)v141);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v149, (uint64_t)v141);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v141);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v137);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v130);
        sg_vec_ref::begin((sg_vec_ref *)v149, (uint64_t)v141);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v117, (uint64_t)v141);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v143);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v141);
        sg_vec_ref::end((sg_vec_ref *)v149, (uint64_t)v141);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v103, (uint64_t)v141);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v143);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v141);
      }

      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v117, v45);
      v28 += v45;
    }

    else
    {
      unint64_t v81 = v44;
    }

    BOOL v49 = (std::__shared_weak_count *)*((void *)&v146 + 1);
    if (*((void *)&v146 + 1))
    {
      char v50 = (unint64_t *)(*((void *)&v146 + 1) + 8LL);
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    if ((v47 & 1) == 0) {
      goto LABEL_68;
    }
  }

  unint64_t v81 = v28;
LABEL_68:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v149);
  unint64_t v56 = v113;
  if (v113)
  {
    v57 = (unint64_t *)&v113->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  v59 = v104;
  if (v104)
  {
    int v60 = (unint64_t *)&v104->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  v62 = v126;
  if (v126)
  {
    unint64_t v63 = (unint64_t *)&v126->__shared_owners_;
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  v65 = v118;
  if (v118)
  {
    v66 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  unint64_t v68 = *v82;
  unint64_t v69 = (*(uint64_t (**)(DiskImagePlugin *))(*(void *)this + 24LL))(this);
  unint64_t v70 = (*(uint64_t (**)(DiskImagePlugin *))(*(void *)this + 24LL))(this);
  LOBYTE(v96) = 2;
  *((void **)&v97 + 1) = v101[1];
  __int128 v98 = v68 / v69;
  LODWORD(v99) = v81 / v70;
  unint64_t v71 = *((void *)a2 + 3);
  if (v71 >= *((void *)a2 + 4))
  {
    uint64_t v76 = std::vector<di_async_sub_transaction_t>::__emplace_back_slow_path<di_async_sub_transaction_t>( (uint64_t *)a2 + 2,  (uint64_t)&v96);
    unint64_t v77 = *(std::__shared_weak_count **)&v102[32];
    *((void *)a2 + 3) = v76;
    if (v77)
    {
      uint64_t v78 = (unint64_t *)&v77->__shared_owners_;
      do
        unint64_t v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }

  else
  {
    __int128 v72 = v97;
    *(_OWORD *)unint64_t v71 = v96;
    *(_OWORD *)(v71 + 16) = v72;
    __int128 v73 = v98;
    __int128 v74 = v100;
    uint64_t v75 = v101[0];
    *(_OWORD *)(v71 + 48) = v99;
    *(_OWORD *)(v71 + 64) = v74;
    *(_OWORD *)(v71 + 32) = v73;
    *(void *)(v71 + 80) = v75;
    *(void *)(v71 + 88) = 0LL;
    *(void *)(v71 + 96) = 0LL;
    *(void *)(v71 + 104) = 0LL;
    *(_OWORD *)(v71 + 88) = *(_OWORD *)&v101[1];
    v101[1] = 0LL;
    v101[2] = 0LL;
    *(void **)(v71 + 104) = v101[3];
    *(void *)(v71 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 112) = 0LL;
    v101[3] = 0LL;
    *(void *)(v71 + 120) = 0LL;
    *(void *)(v71 + 128) = 0LL;
    *(_OWORD *)(v71 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 112) = *(_OWORD *)v102;
    *(void *)(v71 + 128) = *(void *)&v102[16];
    memset(v102, 0, 24);
    *(_OWORD *)(v71 + 136) = *(_OWORD *)&v102[24];
    *(void *)&v102[32] = 0LL;
    *(void *)&v102[24] = 0LL;
    *((void *)a2 + 3) = v71 + 152;
  }

  v149[0] = (void **)v102;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](v149);
  if (v101[1])
  {
    v101[2] = v101[1];
    operator delete(v101[1]);
  }

  return v81;
}

void sub_18804B778( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void di_async_sub_transaction_t::~di_async_sub_transaction_t(di_async_sub_transaction_t *this)
{
  int v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }

uint64_t DiskImagePlugin::subscribe_to_ring(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 56LL))();
  if (v3) {
    return io_rings_subscriber_subscribe(a2, v3);
  }
  else {
    return 4294967284LL;
  }
}

  ;
}

void DiskImagePlugin::~DiskImagePlugin(DiskImagePlugin *this)
{
  *(void *)this = &off_18A1C8658;
  if (*((_BYTE *)this + 256)) {
    PluginRing::~PluginRing((DiskImagePlugin *)((char *)this + 56));
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(void *)this = &off_18A1C8658;
  if (*((_BYTE *)this + 256)) {
    PluginRing::~PluginRing((DiskImagePlugin *)((char *)this + 56));
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  operator delete(this);
}

uint64_t DiskImagePlugin::get_block_size(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 8LL))();
}

uint64_t DiskImagePlugin::get_num_blocks(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 16LL))();
}

uint64_t DiskImagePlugin::is_writable(DiskImagePlugin *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 24LL))();
}

void DiskImage::create_image_info(DiskImage *this)
{
  exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
  DiskImagesRuntimeException::DiskImagesRuntimeException( exception,  "Image info is not supported for the given image type",  0x16u);
}

uint64_t DiskImage::verify_image()
{
  return 1LL;
}

uint64_t DiskImagePlugin::set_size(DiskImagePlugin *this)
{
  return 4294967218LL;
}

double DiskImagePlugin::get_io_constraints@<D0>(DiskImagePlugin *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 2);
  int v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    int v6 = v5();
    uint64_t v4 = *((void *)this + 2);
  }

  else
  {
    int v6 = 0;
  }

  unint64_t v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (unsigned int v8 = v7()) != 0)
  {
    uint64_t v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0LL;
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }

  return result;
}

uint64_t DiskImagePlugin::supports_unmap(DiskImagePlugin *this)
{
  return 1LL;
}

uint64_t DiskImage::supports_get_extents(DiskImage *this)
{
  return 0LL;
}

BOOL DiskImagePlugin::may_read_extra(DiskImagePlugin *this)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 72LL))(v4);
  if (v4[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4[1] == 0LL;
  }
  return !v1 || v4[2] != 0LL || v4[3] != 0LL;
}

__n128 DiskImage::get_extents_iterator_interface@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unint64_t a5@<X4>, __n128 **a6@<X8>)
{
  unint64_t v12 = (__n128 *)operator new(0x40uLL);
  __n128 result = *a4;
  v12[1] = *a4;
  v12[2].n128_u64[0] = a4[1].n128_u64[0];
  v12[2].n128_u64[1] = a5;
  v12[3].n128_u64[0] = a1;
  v12[3].n128_u64[1] = a3;
  v12->n128_u64[0] = (unint64_t)off_18A1C9AB8;
  v12->n128_u64[1] = a2;
  *a6 = v12;
  return result;
}

DiskImagePlugin::ContextPluginSync *DiskImagePlugin::_create_ctx(DiskImagePlugin *this)
{
  uint64_t v2 = (DiskImagePlugin::ContextPluginSync *)operator new(0x20uLL);
  DiskImagePlugin::ContextPluginSync::ContextPluginSync(v2, this);
  return v2;
}

void sub_18804BB70(_Unwind_Exception *a1)
{
}

uint64_t DiskImage::read(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  sg_vec::sg_vec(v44, a3);
  sg_vec_ref::begin((sg_vec_ref *)v48, (uint64_t)v41);
  double v5 = sg_vec_ref::end((sg_vec_ref *)v48, (uint64_t)v38);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(void *)a1 + 144LL))( a1,  a2,  v41,  v38,  v5);
  unint64_t v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v39;
  if (v39)
  {
    uint64_t v11 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  uint64_t v13 = v43;
  if (v43)
  {
    unint64_t v14 = (unint64_t *)&v43->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v42;
  if (v42)
  {
    uint64_t v17 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = v54;
  if (v54)
  {
    unint64_t v20 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v53;
  if (v53)
  {
    uint64_t v23 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = v52;
  if (v52)
  {
    uint64_t v26 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  unint64_t v28 = v51;
  if (v51)
  {
    unint64_t v29 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  uint64_t v31 = v50;
  if (v50)
  {
    int64_t v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  unint64_t v34 = v49;
  if (v49)
  {
    int64_t v35 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (v46 && &v47 != __p) {
    operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v44);
  return v6;
}

void sub_18804BE94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t DiskImage::write(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  sg_vec::sg_vec(v44, a3);
  sg_vec_ref::begin((sg_vec_ref *)v48, (uint64_t)v41);
  double v5 = sg_vec_ref::end((sg_vec_ref *)v48, (uint64_t)v38);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(void *)a1 + 152LL))( a1,  a2,  v41,  v38,  v5);
  unint64_t v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v39;
  if (v39)
  {
    uint64_t v11 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  uint64_t v13 = v43;
  if (v43)
  {
    unint64_t v14 = (unint64_t *)&v43->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v42;
  if (v42)
  {
    uint64_t v17 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = v54;
  if (v54)
  {
    unint64_t v20 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v53;
  if (v53)
  {
    uint64_t v23 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = v52;
  if (v52)
  {
    uint64_t v26 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  unint64_t v28 = v51;
  if (v51)
  {
    unint64_t v29 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  uint64_t v31 = v50;
  if (v50)
  {
    int64_t v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  unint64_t v34 = v49;
  if (v49)
  {
    int64_t v35 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (v46 && &v47 != __p) {
    operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v44);
  return v6;
}

void sub_18804C1F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void __clang_call_terminate(void *a1)
{
}

uint64_t amberPluginCreate(uint64_t a1)
{
  if (amberPluginCreate(unsigned long long)::once != -1) {
    dispatch_once(&amberPluginCreate(unsigned long long)::once, &__block_literal_global_26);
  }
  if (amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate) {
    return amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::~map[abi:ne180100]( uint64_t a1)
{
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_18A1C7C90, MEMORY[0x1896141F8]);
}

void sub_18804C3E0(_Unwind_Exception *a1)
{
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x189614778] + 16LL);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  BOOL v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x189614700], MEMORY[0x189614270]);
}

uint64_t (*___ZL17amberPluginCreatey_block_invoke())(void)
{
  v0 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v0)
  {
    __n128 result = (uint64_t (*)(void))dlsym(v0, "AmberDiskImagePluginCreate");
    amberPluginCreate(unsigned long long)::AmberDiskImagePluginCreate = result;
    if (result) {
      return result;
    }
    *(void *)&__int128 v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18LL;
    int v3 = 16;
    di_log::logger<di_log::log_printer<58ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v5,  (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber",  50LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf((uint64_t)v4);
  }

  else
  {
    *(void *)&__int128 v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18LL;
    int v3 = 16;
    di_log::logger<di_log::log_printer<52ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cannot load libAmber", 20LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf((uint64_t)v4);
  }

  return (uint64_t (*)(void))MEMORY[0x1895BC2CC](&v6);
}

void sub_18804C550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<52ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<52ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C87A0;
  a1[45] = &unk_18A1C88A0;
  a1[46] = &unk_18A1C88C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C87A0;
  a1[45] = &unk_18A1C8828;
  a1[46] = &unk_18A1C8850;
  return a1;
}

void sub_18804C5F8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<58ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<58ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C89C0;
  a1[45] = &unk_18A1C8AC0;
  a1[46] = &unk_18A1C8AE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C89C0;
  a1[45] = &unk_18A1C8A48;
  a1[46] = &unk_18A1C8A70;
  return a1;
}

void sub_18804C6E0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x189614558]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  MEMORY[0x1895BC0A4](v13);
  return a1;
}

void sub_18804C84C( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_18804C894(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_18804C9C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C8938;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18804CAF4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C8938;
  di_log::logger_buf<di_log::log_printer<52ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<52ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<52ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<52ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<52ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<52ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<52ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804CEA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<52ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 52LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 52LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000LL;
    *a2 = v9;
    a2 = v9;
  }

  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }

  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }

  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }

  else
  {
    return 0LL;
  }

void std::stringbuf::str[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 64;
  __int128 v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0LL;
  unsigned __int8 v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }

      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C8B58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18804D36C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C8B58;
  di_log::logger_buf<di_log::log_printer<58ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<58ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<58ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<58ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<58ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<58ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<58ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804D720( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<58ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 58LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 58LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::map<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>::map[abi:ne180100]( uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>( (uint64_t **)a1,  v4,  a2,  (uint64_t)a2);
      a2 += 5;
      v6 -= 40LL;
    }

    while (v6);
  }

  return a1;
}

void sub_18804D994(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>( uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( a1,  a2,  &v10,  &v9,  a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>( (uint64_t)a1,  a4,  (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at( a1,  (uint64_t)v10,  v6,  v8);
    return v8;
  }

  return result;
}

void **std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      os_log_type_t v12 = (void *)a2;
    }

    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          os_log_type_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }

        while (v11);
      }

      else
      {
        unint64_t v16 = (void *)a2;
        do
        {
          os_log_type_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          unint64_t v16 = v12;
        }

        while (v17);
      }

      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0) {
        return (void **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( (uint64_t)a1,  a3,  a5);
      }
    }

    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }

    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }

  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 8);
    if (v13)
    {
      uint64_t v14 = *(void ***)(a2 + 8);
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void **)*v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v19 = (void **)a2;
      do
      {
        uint64_t v15 = (void **)v19[2];
        BOOL v17 = *v15 == v19;
        uint64_t v19 = v15;
      }

      while (!v17);
    }

    if (v15 == v9) {
      goto LABEL_27;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      uint64_t v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }

      else
      {
        *a3 = (void **)a2;
      }

      return (void **)a4;
    }

    return (void **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( (uint64_t)a1,  a3,  a5);
  }

  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

__n128 std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::pair<std::string const,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>> const&>@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }

  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_18804DC38(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100]( v3,  v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at( uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>( void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>( const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>( uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *size_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *size_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100]( uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy( uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy( a1,  *(void *)a2);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::destroy( a1,  *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void **std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>( uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }

  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( (uint64_t)a1,  &v9,  a2);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( (uint64_t)a1,  a4,  (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at( a1,  v9,  v6,  v8);
    return v8;
  }

  return result;
}

void std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_18804E198(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,void *>>>::operator()[abi:ne180100]( v3,  v2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<92ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  size_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<92ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<92ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C8D78;
  di_log::logger_buf<di_log::log_printer<92ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<92ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804E53C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<92ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<92ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 92LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    __int128 v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 92LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t DiskImagesRuntimeException::DiskImagesRuntimeException(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = off_18A1E43B0;
  char v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void sub_18804E7D8(_Unwind_Exception *a1)
{
}

void DiskImagesRuntimeException::~DiskImagesRuntimeException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_18A1E43B0;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

{
  void *v1;
  DiskImagesRuntimeException::~DiskImagesRuntimeException(this);
  operator delete(v1);
}

void DiskImagesRuntimeException::DiskImagesRuntimeException( DiskImagesRuntimeException *this, const char *a2, unsigned int a3)
{
  *(void *)this = off_18A1E43B0;
  char v6 = std::generic_category();
  *((void *)this + 1) = a3;
  *((void *)this + 2) = v6;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 48) = 0;
  *((void *)this + 7) = a2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<147ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<147ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<147ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C8F98;
  di_log::logger_buf<di_log::log_printer<147ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<147ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804EC0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<147ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<147ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 147LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 147LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<152ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<152ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<152ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C91B8;
  di_log::logger_buf<di_log::log_printer<152ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<152ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804F1B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<152ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<152ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 152LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 152LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<157ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<157ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<157ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C93D8;
  di_log::logger_buf<di_log::log_printer<157ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<157ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804F764( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<157ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<157ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 157LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 157LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<163ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<163ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<163ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C95F8;
  di_log::logger_buf<di_log::log_printer<163ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<163ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18804FD10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<163ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 163LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 163LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void std::string::__init_copy_ctor_external( std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8LL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__l.__cap_ = v7 | 0x8000000000000000LL;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }

  else
  {
    this->__r_.__value_.__s.__size_ = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<171ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<171ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<171ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C9818;
  di_log::logger_buf<di_log::log_printer<171ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<171ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_188050348( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<171ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<171ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 171LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 171LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<243ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<243ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<243ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C9A38;
  di_log::logger_buf<di_log::log_printer<243ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<243ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880508F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<243ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<243ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 243LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 243LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

__n128 sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  __int128 v7 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  uint64_t v12 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  return result;
}

void sg_vec_ns::details::buffer_iterator::sync(sg_vec_ns::details::buffer_iterator *this)
{
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 56, v5);
  *(_OWORD *)((char *)this + 72) = v5[1];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v5[0] + 1);
  if (*((void *)&v5[0] + 1))
  {
    uint64_t v3 = (unint64_t *)(*((void *)&v5[0] + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

uint64_t std::shared_ptr<char>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

void std::vector<iovec>::__throw_length_error[abi:ne180100]()
{
}

void *std::allocator<iovec>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::vector<di_async_sub_transaction_t>::__emplace_back_slow_path<di_async_sub_transaction_t>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286LL) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943LL) {
    unint64_t v9 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  unint64_t v10 = (char *)std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  __int128 v13 = *(_OWORD *)(a2 + 32);
  __int128 v14 = *(_OWORD *)(a2 + 48);
  __int128 v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 12) = 0LL;
  *((void *)v11 + 13) = 0LL;
  *((void *)v11 + 11) = 0LL;
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *((void *)v11 + 15) = 0LL;
  *((void *)v11 + 16) = 0LL;
  *((void *)v11 + 14) = 0LL;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  *(_OWORD *)(v11 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  v19[2] = v11 + 152;
  std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_188050E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100]( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<di_async_sub_transaction_t>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>,std::reverse_iterator<di_async_sub_transaction_t*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v8 = (__n128 *)(a7 - 64);
    do
    {
      __n128 v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 72) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 88) = v9;
      __n128 v10 = *(__n128 *)(a3 - 120);
      __n128 v11 = *(__n128 *)(a3 - 104);
      __n128 v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(void *)(a3 - 72);
      v8->n128_u64[0] = 0LL;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 40) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0LL;
      v8[1].n128_u64[0] = 0LL;
      *unint64_t v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0LL;
      *(void *)(a3 - 56) = 0LL;
      *(void *)(a3 - 48) = 0LL;
      v8[1].n128_u64[1] = 0LL;
      v8[2].n128_u64[0] = 0LL;
      v8[2].n128_u64[1] = 0LL;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      __n128 result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      unint64_t v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152LL;
      a3 -= 152LL;
    }

    while (a3 != a5);
  }

  return result;
}

void std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

uint64_t std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(i - 152);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

__n128 DiskImage::default_extents_iterator_interface::make_val@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[1];
  *a2 = result;
  a2[1].n128_u64[0] = this[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

__n128 DiskImage::default_extents_iterator_interface::clone@<Q0>( DiskImage::default_extents_iterator_interface *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 24);
  *((void *)v4 + 5) = *((void *)this + 5);
  __n128 result = *((__n128 *)this + 3);
  *((__n128 *)v4 + 3) = result;
  *(void *)uint64_t v4 = off_18A1C9AB8;
  *a2 = v4;
  return result;
}

DiskImagePlugin::ContextPluginSync *DiskImagePlugin::ContextPluginSync::ContextPluginSync( DiskImagePlugin::ContextPluginSync *this, DiskImagePlugin *a2)
{
  *(void *)this = off_18A1C9B28;
  *((void *)this + 1) = a2;
  gcd::gcd_semaphore::gcd_semaphore((DiskImagePlugin::ContextPluginSync *)((char *)this + 24), 0LL);
  DiskImagePlugin::create_sync_ring(a2);
  return this;
}

void sub_188051174(_Unwind_Exception *a1)
{
}

uint64_t DiskImage::Context::_read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 144LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t DiskImage::Context::_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 152LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t DiskImage::Context::_unmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 184LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t DiskImage::Context::_flush(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 176LL))( *(void *)(a1 + 8),  a1,  a2);
}

void DiskImagePlugin::ContextPluginSync::~ContextPluginSync(dispatch_object_s **this)
{
  *this = (dispatch_object_s *)off_18A1C9B28;
  gcd::gcd_group::~gcd_group(this + 3);
}

{
  *this = (dispatch_object_s *)off_18A1C9B28;
  gcd::gcd_group::~gcd_group(this + 3);
  operator delete(this);
}

void sg_vec::~sg_vec(sg_vec *this)
{
  uint64_t v2 = (char *)this + 576;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 528);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  if (*((void *)this + 20))
  {
    uint64_t v3 = (char *)*((void *)this + 18);
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this);
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, uint64_t *a2)
{
  v21[15] = *MEMORY[0x1895F89C0];
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  uint64_t v5 = *a2;
  uint64_t v6 = dummy_shared_ptr[1];
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = a2[4];
  v17[0] = 0LL;
  v17[1] = 0LL;
  void v18[2] = v9;
  uint64_t v19 = v21;
  v21[0] = v5;
  v21[1] = v6;
  v18[0] = 0LL;
  v18[1] = 0LL;
  v21[2] = v9;
  __int128 v20 = xmmword_188178820;
  sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, (uint64_t)&v19);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v19);
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  __int128 v13 = (unint64_t *)a1[18];
  uint64_t v12 = a1[19];
  uint64_t v14 = a1[1];
  uint64_t v19 = (void *)*a1;
  v18[0] = (uint64_t)&v19[3 * v14];
  __int128 v16 = &v13[v12];
  v17[0] = v13;
  sg_vec_ref::sg_vec_ref((uint64_t)(a1 + 26), (uint64_t *)&v19, v18, v17, &v16, v10, v11);
  return a1;
}

void sub_1880513C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sg_vec_ns::details::sg_vec_data::sg_vec_data(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_188178830;
  boost::container::small_vector_base<std::pair<std::shared_ptr<char>,unsigned long>,void,void>::move_construct_impl( (char *)a1,  a2);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_188178830;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>( a1 + 144,  v3);
  return a1;
}

void sub_18805146C(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 160))
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

void sg_vec_ns::details::sg_vec_data::~sg_vec_data(sg_vec_ns::details::sg_vec_data *this)
{
  if (*((void *)this + 20))
  {
    uint64_t v2 = (char *)*((void *)this + 18);
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this);
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, (const char *)this);
  __cxa_throw(exception, (struct type_info *)off_18A1C7C90, MEMORY[0x1896141F8]);
}

void sub_188051514(_Unwind_Exception *a1)
{
}

char *boost::container::small_vector_base<std::pair<std::shared_ptr<char>,unsigned long>,void,void>::move_construct_impl( char *result, uint64_t a2)
{
  uint64_t v4 = (const char *)(a2 + 24);
  unint64_t v3 = *(const char **)a2;
  if (v4 == v3)
  {
    __n128 result = (char *)boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::assign<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>( (uint64_t *)result,  v3,  (uint64_t)&v3[24 * *(void *)(a2 + 8)]);
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      __n128 result = *(char **)a2;
      do
      {
        --v5;
        __n128 result = (char *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)result) + 24);
      }

      while (v5);
    }

    *(void *)(a2 + 8) = 0LL;
  }

  else
  {
    *(void *)__n128 result = v3;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  return result;
}

void *boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::assign<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>( uint64_t *a1, const char *a2, uint64_t a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3);
  if (v5 <= a1[2])
  {
    __n128 result = (void *)boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>,std::pair<std::shared_ptr<char>,unsigned long>*>( (uint64_t)a1,  (uint64_t)a2,  0xAAAAAAAAAAAAAAABLL * ((a3 - (uint64_t)a2) >> 3),  *a1,  a1[1]);
    a1[1] = v5;
  }

  else
  {
    if (v5 >= 0x555555555555556LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    }
    uint64_t v7 = operator new(a3 - (void)a2);
    unint64_t v8 = (uint64_t *)*a1;
    if (*a1)
    {
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = *a1;
        do
        {
          --v9;
          uint64_t v10 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v10) + 24;
        }

        while (v9);
      }

      a1[1] = 0LL;
      if (a1 + 3 != v8) {
        operator delete(v8);
      }
    }

    a1[1] = 0LL;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    return boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>( a1,  (uint64_t)a2,  a3);
  }

  return result;
}

void *boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_uninitialized_construct_at_end<boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>>( void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result + 24 * v3;
  uint64_t v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      *(void *)a2 = 0LL;
      *(void *)(a2 + 8) = 0LL;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      v5 += 24LL;
      a2 += 24LL;
    }

    while (a2 != a3);
    uint64_t v3 = result[1];
  }

  result[1] = v3 - 0x5555555555555555LL * ((v5 - v4) >> 3);
  return result;
}

uint64_t boost::container::copy_assign_range_alloc_n<boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,boost::move_iterator<std::pair<std::shared_ptr<char>,unsigned long>*>,std::pair<std::shared_ptr<char>,unsigned long>*>( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v14 = a3;
      do
      {
        --v14;
        uint64_t result = std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a4, (__int128 *)v8);
        *(void *)(a4 + 16) = *(void *)(v8 + 16);
        a4 += 24LL;
        v8 += 24LL;
      }

      while (v14);
    }

    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      do
      {
        uint64_t result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](a4);
        a4 += 24LL;
        BOOL v13 = __CFADD__(v15++, 1LL);
      }

      while (!v13);
    }
  }

  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = a2 + 24 * a5;
      unint64_t v11 = a5;
      do
      {
        --v11;
        uint64_t result = std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a4, (__int128 *)v10);
        *(void *)(a4 + 16) = *(void *)(v10 + 16);
        a4 += 24LL;
        v10 += 24LL;
      }

      while (v11);
    }

    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(void *)uint64_t v8 = 0LL;
        *(void *)(v8 + 8) = 0LL;
        *(void *)(a4 + 16) = *(void *)(v8 + 16);
        v8 += 24LL;
        a4 += 24LL;
        BOOL v13 = __CFADD__(v9++, 1LL);
      }

      while (!v13);
    }
  }

  return result;
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>( uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 >= v3)
  {
    uint64_t v5 = (char *)(*(void *)a1 + 8 * v3);
    if (*(void *)(a1 + 16) - v3 < v4)
    {
      boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>( (void **)a1,  v5,  (const char *)v4,  &v6);
    }

    else
    {
      boost::container::expand_forward_and_insert_alloc<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *,boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>( a1,  v5,  v5,  v4);
      *(void *)(a1 + 8) += v4;
    }
  }

  else
  {
    *(void *)(a1 + 8) = a2;
  }

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>( void **a1@<X0>, char *a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v9 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>( (uint64_t)a1,  a3);
  if (v9 >> 60) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v10);
  }
  unint64_t v11 = (char *)v9;
  uint64_t v12 = (char *)operator new(8 * v9);
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>( a1,  v12,  v11,  a2,  (uint64_t)a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void boost::container::expand_forward_and_insert_alloc<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *,boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>( int a1, _BYTE *__src, _BYTE *__dst, unint64_t a4)
{
  if (a4)
  {
    int64_t v7 = __dst - __src;
    if (__dst == __src)
    {
      size_t v9 = 8 * a4;
      goto LABEL_9;
    }

    if (a4 <= v7 >> 3)
    {
      uint64_t v11 = 8 * a4;
      uint64_t v12 = &__dst[-8 * a4];
      memmove(__dst, v12, 8 * a4);
      if (v12 != __src) {
        memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
      }
      uint64_t v10 = __src;
      size_t v9 = v11;
      goto LABEL_13;
    }

    uint64_t v8 = v7 >> 3;
    if (__src) {
      memmove(&__src[8 * a4], __src, __dst - __src);
    }
    bzero(__src, v7);
    if (a4 != v8)
    {
      size_t v9 = 8 * (a4 - v8);
LABEL_9:
      uint64_t v10 = __dst;
LABEL_13:
      bzero(v10, v9);
    }
  }

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>( uint64_t a1, const char *a2)
{
  unint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  size_t v9 = &a2[v3];
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_value_initialized_n_proxy<boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,unsigned long *>>( void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (*a1) {
    BOOL v12 = __dst == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = v12 || v10 == __src;
  unint64_t v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    unint64_t v14 = &__dst[__src - v10];
  }

  if (a5) {
    bzero(v14, 8 * a5);
  }
  if (__src)
  {
    unint64_t v15 = &v10[8 * (void)v11];
    if (v15 != __src && v14 != 0LL) {
      memmove(&v14[8 * a5], __src, v15 - __src);
    }
  }

  if (v10 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  uint64_t v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

uint64_t boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)a1;
    do
    {
      --v2;
      uint64_t v3 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v3) + 24);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<void({block_pointer}&&)(void)>>(void ***a1)
{
  return (*(void *(**)(void *__return_ptr))(***a1 + 16LL))(**a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<92ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C8D78;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188051BEC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<147ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C8F98;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188051C68(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<152ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C91B8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188051CE4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<157ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C93D8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188051D60(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<163ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C95F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188051DDC(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__find_equal<std::string>( (uint64_t)a1,  &v11,  a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( (uint64_t)a1,  a4,  (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at( a1,  v11,  v8,  v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100]( (uint64_t)v10,  0LL);
  }

  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>( uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_188051F10(_Unwind_Exception *a1)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,void *>>>>::reset[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>( uint64_t a1)
{
}

uint64_t PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()( uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((void *)&v9 + 1) = 93LL;
  int v10 = 0;
  di_log::logger<di_log::log_printer<167ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Unregistering plugin ", 21LL);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, v5, v6);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf((uint64_t)v11);
  uint64_t result = MEMORY[0x1895BC2CC](&v13);
  unint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8) {
    return v8(a2);
  }
  return result;
}

void sub_188052068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::~__shared_ptr_pointer( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1C9B90;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  void *v2;
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1C9B90;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v2);
}

void std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0::operator()(a1 + 32, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<_di_plugin_t *,PluginsManager::register_plugin(std::string const&,_di_plugin_t *)::$_0,std::allocator<_di_plugin_t>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }

  else
  {
    return 0LL;
  }

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

void *di_log::logger<di_log::log_printer<167ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<167ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C9BF8;
  a1[45] = &unk_18A1C9CF8;
  a1[46] = &unk_18A1C9D20;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C9BF8;
  a1[45] = &unk_18A1C9C80;
  a1[46] = &unk_18A1C9CA8;
  return a1;
}

void sub_188052250(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C9D90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18805231C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1C9D90;
  di_log::logger_buf<di_log::log_printer<167ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<167ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<167ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<167ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<167ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<167ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<167ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880526D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<167ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 167LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    __int128 v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 167LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<171ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C9818;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188052944(_Unwind_Exception *a1)
{
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__erase_unique<std::string>( uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::find<std::string>( (uint64_t)a1,  a2);
  char v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer( a1,  v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<_di_plugin_t>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1LL;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<_di_plugin_t>>>>::__remove_node_pointer( uint64_t **a1, uint64_t *a2)
{
  unsigned __int8 v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      unsigned __int8 v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    char v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      char v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  char v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    char v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }

    do
    {
      uint64_t v3 = v4;
      char v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  char v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0LL;
      uint64_t result = (uint64_t *)v2;
    }

    else
    {
      uint64_t v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }

    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      __int128 v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        __int128 v16 = v7;
      }

      else
      {
        unint64_t v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }

    __int128 v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    uint64_t v7 = *(uint64_t **)v12;
  }

  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  __int16 v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    __int16 v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    *__int16 v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::bad_expected_access<void>::~bad_expected_access( std::exception *a1)
{
}

void *std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_18A1C9E50;
  return result;
}

void std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_18A1C9E50;
}

uint64_t std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::operator()( uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3) {
    return v3();
  }
  return result;
}

uint64_t std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0,std::allocator<plugin_header::plugin_header(std::string const&,__CFDictionary const*,std::optional<int>,diskimage_decode_fn_t const&,void *)::$_0>,void ()(_di_plugin_image_t *)>::target_type()
{
}

uint64_t *std::shared_ptr<_di_plugin_image_t>::shared_ptr[abi:ne180100]<_di_plugin_image_t,std::function<void ()(_di_plugin_image_t*)>,void>( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  *a1 = a2;
  char v6 = operator new(0x40uLL);
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
  std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__shared_ptr_pointer[abi:ne180100]( v6,  a2,  (uint64_t)v10);
  a1[1] = (uint64_t)v6;
  uint64_t v7 = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v10;
    goto LABEL_5;
  }

  if (v11)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  return a1;
}

void sub_188052F28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __int128 v16 = a13;
  if (a13 == &a10)
  {
    uint64_t v17 = 4LL;
    __int128 v16 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_7;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_7:
  operator delete(v14);
  __cxa_begin_catch(exception_object);
  uint64_t v18 = *(void *)(v13 + 24);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 48LL))(v18, &a9);
  __cxa_rethrow();
}

uint64_t std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

void *std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__shared_ptr_pointer[abi:ne180100]( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1C9EE0;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  a1[3] = a2;
  std::__function::__value_func<void ()(_di_plugin_image_t *)>::__value_func[abi:ne180100]( (uint64_t)(a1 + 4),  (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::~__shared_ptr_pointer( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1C9EE0;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    uint64_t v4 = 4LL;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }

  if (shared_owners)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  uint64_t *p_shared_owners;
  uint64_t *shared_owners;
  uint64_t v4;
  void *v5;
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1C9EE0;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    uint64_t v4 = 4LL;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }

  if (shared_owners)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }

  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v5);
}

void *std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__on_zero_shared( void *a1)
{
  uint64_t v5 = a1[3];
  uint64_t v2 = a1[7];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48LL))(v2, &v5);
  uint64_t result = (void *)a1[7];
  if (result == a1 + 4)
  {
    uint64_t v4 = 4LL;
    uint64_t result = a1 + 4;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t std::__shared_ptr_pointer<_di_plugin_image_t *,std::function<void ()(_di_plugin_image_t *)>,std::allocator<_di_plugin_image_t>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }

  else
  {
    return 0LL;
  }

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<243ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1C9A38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18805331C(_Unwind_Exception *a1)
{
}

void *di_log::logger<di_log::log_printer<545ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<545ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1C9FE8;
  a1[45] = &unk_18A1CA0E8;
  a1[46] = &unk_18A1CA110;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_18A1C9FE8;
  a1[45] = &unk_18A1CA070;
  a1[46] = &unk_18A1CA098;
  return a1;
}

void sub_1880533B4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  return a1;
}

sg_vec_ref *std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>(sg_vec_ref *a1, uint64_t a2)
{
  if (*((_BYTE *)a1 + 528))
  {
    sg_vec_ref::operator=((uint64_t)a1, a2);
  }

  else
  {
    sg_vec_ref::sg_vec_ref(a1, a2);
    *((_BYTE *)a1 + 528) = 1;
  }

  return a1;
}

void sg_vec_ref::~sg_vec_ref(sg_vec_ref *this)
{
  uint64_t v2 = (char *)this + 368;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
}

uint64_t sg_vec_ns::details::sg_vec_iterator::operator=(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, (__int128 *)a2);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 112, (__int128 *)(a2 + 112));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  return a1;
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::shared_ptr<DiskImage>::operator=[abi:ne180100]((void *)a1, (uint64_t *)a2);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  std::shared_ptr<DiskImage>::operator=[abi:ne180100]((void *)(a1 + 112), (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CA180;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880535A8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CA180;
  di_log::logger_buf<di_log::log_printer<545ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<545ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<545ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<545ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<545ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<545ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18805395C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<545ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 545LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 545LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sg_vec_ref::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  int v4 = (const sg_vec_ns::details::buffer_iterator *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 64, (__int128 *)(a2 + 64));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v7;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 152, (__int128 *)(a2 + 152));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator( (sg_vec_ns::details::sg_vec_iterator *)&v22,  (sg_vec_ref *)a1,  v4,  1);
  sg_vec_ns::details::sg_vec_iterator::operator=(a1 + 368, (uint64_t)&v22);
  uint64_t v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  os_log_type_t v12 = v23;
  if (v23)
  {
    uint64_t v13 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator( (sg_vec_ns::details::sg_vec_iterator *)&v22,  (sg_vec_ref *)a1,  (const sg_vec_ns::details::buffer_iterator *)(a1 + 96),  0);
  sg_vec_ns::details::sg_vec_iterator::operator=(a1 + 208, (uint64_t)&v22);
  unint64_t v15 = v24;
  if (v24)
  {
    __int128 v16 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  __int16 v18 = v23;
  if (v23)
  {
    uint64_t v19 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return a1;
}

sg_vec_ref *sg_vec_ref::sg_vec_ref(sg_vec_ref *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v3;
  int v4 = (sg_vec_ref *)((char *)a1 + 8);
  *((void *)a1 + 2) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *((_BYTE *)a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)((char *)a1 + 40) = v6;
  *(_OWORD *)((char *)a1 + 24) = v5;
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)a1 + 12) = *(void *)(a2 + 96);
  *((void *)a1 + 13) = *(void *)(a2 + 104);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *((_BYTE *)a1 + 144) = *(_BYTE *)(a2 + 144);
  *((_OWORD *)a1 + 7) = v7;
  *((_OWORD *)a1 + 8) = v8;
  *(_OWORD *)((char *)a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0LL;
  *(void *)(a2 + 160) = 0LL;
  *(_OWORD *)((char *)a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)((char *)a1 + 184) = *(_OWORD *)(a2 + 184);
  *((_BYTE *)a1 + 200) = *(_BYTE *)(a2 + 200);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator( (sg_vec_ref *)((char *)a1 + 208),  a1,  (sg_vec_ref *)((char *)a1 + 96),  0);
  sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((sg_vec_ref *)((char *)a1 + 368), a1, v4, 1);
  return a1;
}

void sub_188053E38(_Unwind_Exception *a1)
{
}

uint64_t std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 480);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 368);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 320);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 208);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 152);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 64);
  }

  return a1;
}

char *std::vector<std::shared_ptr<char>>::emplace_back<std::shared_ptr<char> const&>( char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  __int128 v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v32 = v4;
    __int128 v16 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v4, v15);
    __int16 v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)__int16 v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      unint64_t v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    uint64_t v23 = *a1;
    uint64_t v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      uint64_t v24 = &v16[16 * v12];
    }

    else
    {
      uint64_t v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)uint64_t v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    unint64_t v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v30 = v26;
    uint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    uint64_t v31 = v27;
    uint64_t v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v29);
  }

  else
  {
    *(void *)__int128 v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    unint64_t v11 = v7 + 16;
  }

  a1[1] = v11;
  return v11 - 16;
}

uint64_t std::__split_buffer<std::shared_ptr<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1880556BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t _diskDisappearedCallback(uint64_t a1, void *a2)
{
  return [a2 onDiskDisappearedWithDisk:a1];
}

LABEL_44:
      }
    }
  }

  else
  {
    unint64_t v10 = *__error();
    if (DIForwardLogs())
    {
      int64_t v45 = 0LL;
      getDIOSLog();
      unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      *(_DWORD *)uint64_t buf = 68157954;
      int64_t v48 = 39;
      BOOL v49 = 2080;
      uint64_t v50 = "-[DIDiskArb onDiskDisappearedWithDisk:]";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();

      if (v12)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v12);
        free(v12);
      }
    }

    else
    {
      getDIOSLog();
      unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int64_t v48 = 39;
        BOOL v49 = 2080;
        uint64_t v50 = "-[DIDiskArb onDiskDisappearedWithDisk:]";
        _os_log_impl(&dword_188046000, v13, OS_LOG_TYPE_DEFAULT, "%.*s: Ignoring, during shutdown", buf, 0x12u);
      }
    }

    *__error() = v10;
  }

uint64_t _idleCallback(void *a1, const char *a2)
{
  return [a1 setCallbackReached:1];
}

void _daOperationCallback(uint64_t a1, const __DADissenter *a2, void *a3)
{
  id v8 = a3;
  if (a2)
  {
    uint64_t v4 = (void *)NSString;
    uint64_t Status = DADissenterGetStatus(a2);
    objc_msgSend( v4,  "stringWithFormat:",  @"Dissented with status 0x%X, pid %d",  Status,  DADissenterGetProcessID());
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError errorWithEnumValue:verboseInfo:](&OBJC_CLASS___DIError, "errorWithEnumValue:verboseInfo:", 156LL, v6);
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue();
    [v8 setOperationError:v7];
  }

  [v8 setCallbackReached:1];
}

void sub_188059D10(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_18805A400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_18805A5F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_18805AAEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_18805B990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a2 == 1)
  {
    id v24 = objc_begin_catch(exception_object);
    [v24 reason];
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v25,  v23);

    objc_end_catch();
    JUMPOUT(0x18805B954LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_18805BE08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    [v18 reason];
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v19,  v17);

    objc_end_catch();
    JUMPOUT(0x18805BDD0LL);
  }

  _Unwind_Resume(exception_object);
}

LABEL_33:
      *__error() = v19;
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, @"DIErrorVerboseInfo", v34, v35);
      goto LABEL_42;
    }

    uint64_t v23 = *__error();
    if (!DIForwardLogs())
    {
      getDIOSLog();
      int64x2_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68158466;
        int64_t v37 = 62;
        unint64_t v38 = 2080;
        uint64_t v39 = "+[DIError errorWithDomain:code:description:verboseInfo:error:]";
        unint64_t v40 = 2114;
        uint64_t v41 = v11;
        unint64_t v42 = 2114;
        uint64_t v43 = v18;
        _os_log_impl(&dword_188046000, v30, OS_LOG_TYPE_ERROR, "%.*s: %{public}@ error %{public}@", buf, 0x26u);
      }

      goto LABEL_41;
    }

    getDIOSLog();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t buf = 68158466;
    int64_t v37 = 62;
    unint64_t v38 = 2080;
    uint64_t v39 = "+[DIError errorWithDomain:code:description:verboseInfo:error:]";
    unint64_t v40 = 2114;
    uint64_t v41 = v11;
    unint64_t v42 = 2114;
    uint64_t v43 = v18;
    LODWORD(v35) = 38;
    unint64_t v34 = buf;
    __int128 v25 = (char *)_os_log_send_and_compose_impl();

    if (v25)
    {
LABEL_29:
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v25);
      free(v25);
    }
  }

  *__error() = v8;
}

      uint64_t v22 = 1;
      goto LABEL_34;
    }
  }

  else
  {
  }

  uint64_t v22 = 0;
  if (a3) {
    *a3 = v8;
  }
LABEL_34:

  return v22;
}

  *(void *)&unint64_t v36 = &v38;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

  *(_BYTE *)(result + 176) = 0;
  return result;
}

LABEL_41:
  *__error() = v23;
LABEL_42:
  objc_msgSend(MEMORY[0x189607870], "errorWithDomain:code:userInfo:", v11, v17, v14, v34, v35);
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v32 = v31;
  if (a7) {
    *a7 = v31;
  }

  return v32;
}

    uint64_t v29 = +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  v24,  a3,  v37);
    goto LABEL_42;
  }

  +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  @"Cache is not supported when using pstack.",  a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

  uint64_t v41 = v29;
  unint64_t v42 = v30;
  LOBYTE(v43) = 0;
  unint64_t v53 = 0;
  if (*((_BYTE *)a3 + 140))
  {
    uint64_t v43 = *a3;
    uint64_t v44 = *((_DWORD *)a3 + 2);
    BOOL v49 = *(_OWORD *)((char *)a3 + 76);
    uint64_t v50 = *(_OWORD *)((char *)a3 + 92);
    unint64_t v51 = *(_OWORD *)((char *)a3 + 108);
    unint64_t v52 = *(_OWORD *)((char *)a3 + 124);
    int64_t v45 = *(_OWORD *)((char *)a3 + 12);
    uint64_t v46 = *(_OWORD *)((char *)a3 + 28);
    uint64_t v47 = *(_OWORD *)((char *)a3 + 44);
    int64_t v48 = *(_OWORD *)((char *)a3 + 60);
    unint64_t v53 = 1;
  }

  uint64_t result = (uint64_t)std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,std::optional<udif::details::block_info>>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,std::optional<udif::details::block_info>>>( a1,  v15,  (uint64_t)&v41,  (uint64_t)&v41);
  unint64_t v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

  *a4 = v15;
  return result;
}

      if (!v44) {
        break;
      }
      goto LABEL_42;
    }

    uint64_t v43 = 0;
    if (!--v44) {
      break;
    }
LABEL_42:
  }

  if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56))
  {
    __int128 v100 = "could not parse service name and realm";
    __int128 v101 = 389;
    goto LABEL_100;
  }

  AAJSONInputStreamClose(v38);
  AAByteStreamClose(v30);
  free(v27);
  __sa = 0LL;
  __s1 = 0LL;
  __int128 v121 = 0LL;
  int64_t v48 = *(const char **)(a1 + 48);
  if (!v48 || (BOOL v49 = *(const char **)(a1 + 56)) == 0LL)
  {
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  411,  125,  0,  "missing service name or realm",  v46,  v47,  v118);
    unint64_t v53 = 0LL;
LABEL_111:
    unint64_t v94 = 0;
    uint64_t v55 = 0LL;
    goto LABEL_156;
  }

  uint64_t v50 = *(void *)(a1 + 80) >> 62;
  if (v50)
  {
    unint64_t v51 = (FILE **)MEMORY[0x1895F89D0];
    fwrite("  obtaining a DAW token from the appleconnect CLI\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    fprintf(*v51, "  - realm: %s\n", v48);
    fprintf(*v51, "  - service name: %s\n", v49);
  }

  unint64_t v52 = (char *)malloc(0x4000uLL);
  unint64_t v53 = v52;
  if (!v52)
  {
    __sa = 0LL;
    __s1 = 0LL;
    __int128 v121 = 0LL;
    __int128 v91 = __error();
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  420,  125,  *v91,  "malloc",  v92,  v93,  v118);
    goto LABEL_111;
  }

  __s1 = (char *)0x4000;
  __int128 v121 = v52;
  unint64_t v54 = (char *)malloc(0x4000uLL);
  uint64_t v55 = v54;
  if (!v54)
  {
    char v95 = *__error();
    __int128 v98 = "malloc";
    __int128 v99 = 422;
LABEL_115:
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v99,  125,  v95,  v98,  v96,  v97,  v118);
    unint64_t v94 = 0;
    goto LABEL_156;
  }

  snprintf( v54,  0x4000uLL,  "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken --realm %s --serviceName %s",  v48,  v49);
  if (*(void *)a1)
  {
    if (v50) {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "  - account: %s\n", *(const char **)a1);
    }
    __strlcat_chk();
    __strlcat_chk();
  }

  if (*(void *)(a1 + 8))
  {
    if (v50) {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "  - keytab file: %s\n", *(const char **)(a1 + 8));
    }
    __strlcat_chk();
    __strlcat_chk();
  }

  unint64_t v56 = popen(v55, "r");
  if (!v56)
  {
    char v95 = *__error();
    v118 = (char)v55;
    __int128 v98 = "%s";
    __int128 v99 = 444;
    goto LABEL_115;
  }

  v57 = v56;
  unint64_t v58 = 0LL;
  while (1)
  {
    v59 = fread(&v53[v58], 1uLL, 0x4000 - v58, v57);
    if (v59)
    {
      v62 = v58 + v59;
      if (__CFADD__(v58, v59) || v62 > 0x4000)
      {
        __sa = v58;
        unint64_t v63 = "invalid read";
        unint64_t v64 = 454;
        goto LABEL_153;
      }

      goto LABEL_70;
    }

    if (feof(v57)) {
      break;
    }
    if (ferror(v57))
    {
      __sa = v58;
      char v111 = *__error();
      unint64_t v63 = "fread";
      unint64_t v64 = 452;
      goto LABEL_154;
    }

    v62 = v58;
LABEL_70:
    unint64_t v58 = v62;
    if (v62 == 0x4000)
    {
      __sa = 0x4000LL;
      unint64_t v63 = "token is too long";
      unint64_t v64 = 447;
      goto LABEL_153;
    }
  }

  __sa = v58;
  if (v58)
  {
    __int128 v102 = v53 - 1;
    uint64_t v103 = MEMORY[0x1895F8770];
    do
    {
      uint64_t v104 = v102[v58];
      if (v102[v58] < 0) {
        v105 = __maskrune(v104, 0x4000uLL);
      }
      else {
        v105 = *(_DWORD *)(v103 + 4 * v104 + 60) & 0x4000;
      }
      if (!v105) {
        break;
      }
      --v58;
    }

    while (v58);
    __sa = v58;
  }

  uint64_t v106 = v58 + 1;
  uint64_t v107 = v58 == -1LL;
  uint64_t v108 = v107 << 63 >> 63;
  if (v108 != v107 || v108 < 0 || (v106 & 0x8000000000000000LL) != 0) {
    goto LABEL_152;
  }
  if (v106 <= 0x4000)
  {
    uint64_t v112 = v121;
LABEL_140:
    __sa = v58 + 1;
    v53[v58] = 0;
    if (v58 + 1 >= 6
      && (*(_DWORD *)v112 == 1415004484 ? (__int128 v114 = *((unsigned __int16 *)v112 + 2) == 20043) : (__int128 v114 = 0), v114))
    {
      if ((contextSetString(a1, 2u, v112, 0LL) & 0x80000000) == 0)
      {
        unint64_t v94 = 1;
        goto LABEL_147;
      }

      unint64_t v115 = "daw token";
      char v116 = 463;
    }

    else
    {
      unint64_t v115 = "invalid token format";
      char v116 = 460;
    }

    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v116,  125,  0,  v115,  v60,  v61,  v117);
    unint64_t v94 = 0;
LABEL_147:
    unint64_t v53 = v112;
    goto LABEL_155;
  }

  for (uint64_t i = 0x4000LL; i < v106; i += v110)
  {
    __int128 v110 = i >> 1;
    if ((i & (i >> 1)) != 0) {
      __int128 v110 = i & (i >> 1);
    }
  }

  if (i >= 0x2000000001LL)
  {
    *__error() = 12;
    goto LABEL_151;
  }

  __int128 v113 = (char *)realloc(v53, i);
  if (v113)
  {
    uint64_t v112 = v113;
    __s1 = (char *)i;
    __int128 v121 = v113;
    unint64_t v53 = v113;
    goto LABEL_140;
  }

  free(v53);
LABEL_151:
  unint64_t v53 = 0LL;
  __sa = 0LL;
  __s1 = 0LL;
  __int128 v121 = 0LL;
LABEL_152:
  unint64_t v63 = "token is too long";
  unint64_t v64 = 459;
LABEL_153:
  char v111 = 0;
LABEL_154:
  pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v64,  125,  v111,  v63,  v60,  v61,  v117);
  unint64_t v94 = 0;
LABEL_155:
  pclose(v57);
LABEL_156:
  free(v55);
  free(v53);
  memset_s(&__sa, 0x18uLL, 0, 0x18uLL);
  if (!v94)
  {
    id v24 = "getting DAW token";
    __int128 v25 = 650;
    goto LABEL_102;
  }

  if (*(void *)(a1 + 32)) {
    return 0LL;
  }
  unint64_t v5 = *(const char **)(a1 + 16);
  if (!v5)
  {
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  486,  125,  0,  "missing host or DAW token",  v22,  v23,  v117);
    unint64_t v20 = 0LL;
    id v8 = 0LL;
LABEL_17:
    unint64_t v21 = 0LL;
    uint64_t v17 = 0LL;
LABEL_18:
    AAJSONInputStreamClose(v20);
    AAByteStreamClose(v8);
    free(v17);
    free(v21);
    id v24 = "getting Westgate token";
    __int128 v25 = 655;
LABEL_102:
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextResolveWestgateToken",  v25,  125,  0,  v24,  v22,  v23,  v117);
    return 0xFFFFFFFFLL;
  }

void sub_18805C6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805CBEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_18805CD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void create_stack_vector_from_single_path( const std::__fs::filesystem::path *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  int size = (char)a1->__pn_.__r_.__value_.__s.__size_;
  std::string::size_type v7 = a1->__pn_.__r_.__value_.__r.__words[0];
  id v8 = (void *)MEMORY[0x189604030];
  uint64_t v9 = (void *)NSString;
  uint64_t v10 = [NSString defaultCStringEncoding];
  if (size >= 0) {
    unint64_t v11 = a1;
  }
  else {
    unint64_t v11 = (const std::__fs::filesystem::path *)v7;
  }
  [v9 stringWithCString:v11 encoding:v10];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  [v8 fileURLWithPath:v12];
  unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();

  id v44 = 0LL;
  id v45 = 0LL;
  BOOL v14 = +[DiskImageGraph loadPlistDictFromURL:dict:error:]( &OBJC_CLASS___DiskImageGraph,  "loadPlistDictFromURL:dict:error:",  v13,  &v45,  &v44);
  id v15 = v45;
  id v16 = v44;
  uint64_t v17 = v16;
  if (!v14)
  {
    [v16 domain];
    unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v20 isEqualToString:@"com.apple.DiskImages2.ErrorDomain"])
    {
      BOOL v21 = [v17 code] == 167;

      if (v21)
      {
        *(void *)a3 = 0LL;
        *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
        *(void *)(a3 + 16) = 0LL;
        goto LABEL_10;
      }
    }

    else
    {
    }

    int v22 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v43 = 0LL;
      getDIOSLog();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      [v17 description];
      id v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)uint64_t buf = 68158210;
      int v47 = 124;
      __int16 v48 = 2080;
      BOOL v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesyste"
            "m::path &, BOOL)";
      __int16 v50 = 2112;
      unint64_t v51 = v24;
      __int128 v25 = (char *)_os_log_send_and_compose_impl();

      if (v25)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v25);
        free(v25);
      }
    }

    else
    {
      getDIOSLog();
      int64x2_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        [v17 description];
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)uint64_t buf = 68158210;
        int v47 = 124;
        __int16 v48 = 2080;
        BOOL v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesys"
              "tem::path &, BOOL)";
        __int16 v50 = 2112;
        unint64_t v51 = v31;
        _os_log_impl(&dword_188046000, v30, OS_LOG_TYPE_ERROR, "%.*s: Failed to read pstack: %@.", buf, 0x1Cu);
      }
    }

    *__error() = v22;
    exception = __cxa_allocate_exception(0x40uLL);
    [v17 domain];
    if ([(id)objc_claimAutoreleasedReturnValue() isEqualToString:*MEMORY[0x189607688]])
    {
      unsigned int v33 = [v17 code];
      unint64_t v34 = std::generic_category();
      unint64_t v35 = 0LL;
    }

    else
    {
      uint64_t error_code = make_error_code(150LL);
      unsigned int v33 = error_code;
      unint64_t v35 = error_code & 0xFFFFFFFF00000000LL;
    }

    void *exception = off_18A1E43B0;
    exception[1] = v33 | v35;
    exception[2] = v34;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "Failed to read pstack.";
  }

  id v42 = v16;
  id v18 = -[DiskImageGraph initWithData:pstackURL:imported:error:]( objc_alloc(&OBJC_CLASS___DiskImageGraph),  "initWithData:pstackURL:imported:error:",  v15,  v13,  0LL,  &v42);
  id v19 = v42;

  if (!v18)
  {
    int v26 = *__error();
    if (DIForwardLogs())
    {
      uint64_t v43 = 0LL;
      getDIOSLog();
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
      [v19 description];
      unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)uint64_t buf = 68158210;
      int v47 = 124;
      __int16 v48 = 2080;
      BOOL v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesyste"
            "m::path &, BOOL)";
      __int16 v50 = 2112;
      unint64_t v51 = v28;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl();

      if (v29)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v29);
        free(v29);
      }
    }

    else
    {
      getDIOSLog();
      unint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        [v19 description];
        int64_t v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)uint64_t buf = 68158210;
        int v47 = 124;
        __int16 v48 = 2080;
        BOOL v49 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_path(const std::filesys"
              "tem::path &, BOOL)";
        __int16 v50 = 2112;
        unint64_t v51 = v37;
        _os_log_impl( &dword_188046000,  v36,  OS_LOG_TYPE_ERROR,  "%.*s: Failed to create graph from plist: %@.",  buf,  0x1Cu);
      }
    }

    *__error() = v26;
    unint64_t v38 = __cxa_allocate_exception(0x40uLL);
    uint64_t v39 = make_error_code(161LL);
    void *v38 = off_18A1E43B0;
    v38[1] = v39;
    v38[2] = v40;
    *((_BYTE *)v38 + 24) = 0;
    *((_BYTE *)v38 + 4_Block_object_dispose(va, 8) = 0;
    v38[7] = "Failed to create graph from plist.";
  }

  create_stack_vec_from_graph(v18, a2, (char **)a3);

  uint64_t v17 = v19;
LABEL_10:
}

void sub_18805D398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void create_stack_vec_from_graph(DiskImageGraph *a1@<X0>, char a2@<W1>, char **a3@<X8>)
{
  unint64_t v5 = a1;
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  unint64_t v51 = v5;
  -[DiskImageGraph activeNode](v5, "activeNode");
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    unsigned int v7 = 3;
    do
    {
      if ([v6 isCache])
      {
        uint64_t v8 = 2LL;
        uint64_t v9 = 1LL;
      }

      else
      {
        [v6 parent];
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10) {
          uint64_t v9 = v7;
        }
        else {
          uint64_t v9 = 0LL;
        }

        uint64_t v8 = 0LL;
      }

      if (*a3 == a3[1] && (a2 & 1) == 0)
      {
        uint64_t v8 = 1LL;
        if ((_DWORD)v9)
        {
          if ((_DWORD)v9 != 3)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            uint64_t error_code = make_error_code(150LL);
            void *exception = off_18A1E43B0;
            exception[1] = error_code;
            exception[2] = v50;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
            exception[7] = "Stack with cache as top image cannot be opened for writing.";
          }
        }
      }

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        [v6 filePath];
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        id v12 = [v11 path];
        uint64_t v52 = (char *)[v12 UTF8String];
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v53, &v52);
        else {
          std::string v54 = v53;
        }
        id v24 = operator new(0x40uLL);
        std::string __p = 0LL;
        int64x2_t v56 = 0uLL;
        diskimage_uio::stack_image_node::stack_image_node(v24, v9, v8, &v54, &__p, 0LL);
        if (v56.i8[15] < 0) {
          operator delete(__p);
        }
        int v26 = a3[1];
        unint64_t v25 = (unint64_t)a3[2];
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v28 = (v26 - *a3) >> 3;
          uint64_t v29 = v25 - (void)*a3;
          uint64_t v30 = v29 >> 2;
          else {
            unint64_t v31 = v30;
          }
          unint64_t v58 = a3 + 2;
          if (v31) {
            uint64_t v32 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a3 + 2),  v31);
          }
          else {
            uint64_t v32 = 0LL;
          }
          unsigned int v33 = &v32[8 * v28];
          unint64_t v34 = &v32[8 * v31];
          v57 = v34;
          *(void *)unsigned int v33 = v24;
          uint64_t v27 = v33 + 8;
          v56.i64[1] = (uint64_t)(v33 + 8);
          unint64_t v36 = *a3;
          unint64_t v35 = a3[1];
          if (v35 == *a3)
          {
            int64x2_t v38 = vdupq_n_s64((unint64_t)v35);
          }

          else
          {
            do
            {
              uint64_t v37 = *((void *)v35 - 1);
              v35 -= 8;
              *(void *)unint64_t v35 = 0LL;
              *((void *)v33 - 1) = v37;
              v33 -= 8;
            }

            while (v35 != v36);
            int64x2_t v38 = *(int64x2_t *)a3;
            uint64_t v27 = (char *)v56.i64[1];
            unint64_t v34 = v57;
          }

          *a3 = v33;
          a3[1] = v27;
          int64x2_t v56 = v38;
          uint64_t v39 = a3[2];
          a3[2] = v34;
          v57 = v39;
          std::string __p = (void *)v38.i64[0];
          std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer((uint64_t)&__p);
        }

        else
        {
          *(void *)int v26 = v24;
          uint64_t v27 = v26 + 8;
        }

        a3[1] = v27;
      }

      else
      {
        id v11 = v6;
        id v13 = [v11 pluginName];
        std::string::basic_string[abi:ne180100]<0>(&v54, (char *)[v13 UTF8String]);

        [v11 pluginParams];
        BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();

        id v15 = operator new(0x40uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        diskimage_uio::stack_image_node::stack_image_node(v15, v9, v8, &__p, &v54, v14);
        if (v56.i8[15] < 0) {
          operator delete(__p);
        }
        uint64_t v17 = a3[1];
        unint64_t v16 = (unint64_t)a3[2];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = (v17 - *a3) >> 3;
          uint64_t v20 = v16 - (void)*a3;
          uint64_t v21 = v20 >> 2;
          else {
            unint64_t v22 = v21;
          }
          unint64_t v58 = a3 + 2;
          if (v22) {
            uint64_t v23 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a3 + 2),  v22);
          }
          else {
            uint64_t v23 = 0LL;
          }
          uint64_t v40 = &v23[8 * v19];
          uint64_t v41 = &v23[8 * v22];
          v57 = v41;
          *(void *)uint64_t v40 = v15;
          id v18 = v40 + 8;
          v56.i64[1] = (uint64_t)(v40 + 8);
          uint64_t v43 = *a3;
          id v42 = a3[1];
          if (v42 == *a3)
          {
            int64x2_t v45 = vdupq_n_s64((unint64_t)v42);
          }

          else
          {
            do
            {
              uint64_t v44 = *((void *)v42 - 1);
              v42 -= 8;
              *(void *)id v42 = 0LL;
              *((void *)v40 - 1) = v44;
              v40 -= 8;
            }

            while (v42 != v43);
            int64x2_t v45 = *(int64x2_t *)a3;
            id v18 = (char *)v56.i64[1];
            uint64_t v41 = v57;
          }

          *a3 = v40;
          a3[1] = v18;
          int64x2_t v56 = v45;
          uint64_t v46 = a3[2];
          a3[2] = v41;
          v57 = v46;
          std::string __p = (void *)v45.i64[0];
          std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer((uint64_t)&__p);
        }

        else
        {
          *(void *)uint64_t v17 = v15;
          id v18 = v17 + 8;
        }

        a3[1] = v18;
      }

      uint64_t v47 = [v6 parent];

      unsigned int v7 = 2;
      unint64_t v6 = (void *)v47;
    }

    while (v47);
  }
}

void sub_18805D8D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  _Unwind_Resume(a1);
}

void create_stack_vector_from_single_fd( const std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  unsigned int v7 = (void *)[objc_alloc(MEMORY[0x189607898]) initWithFileDescriptor:a2 closeOnDealloc:0];
  id v33 = 0LL;
  [v7 readDataUpToLength:0x100000 error:&v33];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  id v9 = v33;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t error_code = make_error_code(154LL);
    void *exception = off_18A1E43B0;
    exception[1] = error_code;
    exception[2] = v19;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "Failed to read from fd.";
  }

  id v32 = 0LL;
  [MEMORY[0x1896079E8] propertyListWithData:v8 options:0 format:v34 error:&v32];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  id v11 = v32;

  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if ((char)a1->__pn_.__r_.__value_.__s.__size_ < 0)
    {
      if (!a1->__pn_.__r_.__value_.__l.__size_) {
        goto LABEL_14;
      }
      a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
    }

    else if (!a1->__pn_.__r_.__value_.__s.__size_)
    {
LABEL_14:
      uint64_t v20 = __cxa_allocate_exception(0x40uLL);
      uint64_t v21 = std::generic_category();
      *uint64_t v20 = off_18A1E43B0;
      v20[1] = 22LL;
      v20[2] = v21;
      *((_BYTE *)v20 + 24) = 0;
      *((_BYTE *)v20 + 4_Block_object_dispose(va, 8) = 0;
      v20[7] = "Cannot initialize pstack disk image without path.";
    }

    id v12 = (void *)MEMORY[0x189604030];
    objc_msgSend( NSString,  "stringWithCString:encoding:",  a1,  objc_msgSend(NSString, "defaultCStringEncoding"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v12 fileURLWithPath:v13];
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();

    id v31 = v11;
    id v15 = -[DiskImageGraph initWithData:pstackURL:imported:error:]( objc_alloc(&OBJC_CLASS___DiskImageGraph),  "initWithData:pstackURL:imported:error:",  v10,  v14,  0LL,  &v31);
    id v16 = v31;

    if (!v15)
    {
      int v22 = *__error();
      if (DIForwardLogs())
      {
        getDIOSLog();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
        [v16 description];
        id v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)uint64_t buf = 68158210;
        int v36 = 127;
        __int16 v37 = 2080;
        int64x2_t v38 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::file"
              "system::path &, BOOL)";
        __int16 v39 = 2112;
        uint64_t v40 = v24;
        unint64_t v25 = (char *)_os_log_send_and_compose_impl();

        if (v25)
        {
          fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v25);
          free(v25);
        }
      }

      else
      {
        getDIOSLog();
        int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          [v16 description];
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)uint64_t buf = 68158210;
          int v36 = 127;
          __int16 v37 = 2080;
          int64x2_t v38 = "std::vector<diskimage_uio::stack_image_node_ptr_t> create_stack_vector_from_single_fd(int, const std::fi"
                "lesystem::path &, BOOL)";
          __int16 v39 = 2112;
          uint64_t v40 = v27;
          _os_log_impl( &dword_188046000,  v26,  OS_LOG_TYPE_ERROR,  "%.*s: Failed to create graph from plist: %@.",  buf,  0x1Cu);
        }
      }

      *__error() = v22;
      uint64_t v28 = __cxa_allocate_exception(0x40uLL);
      uint64_t v29 = make_error_code(161LL);
      *uint64_t v28 = off_18A1E43B0;
      v28[1] = v29;
      v28[2] = v30;
      *((_BYTE *)v28 + 24) = 0;
      *((_BYTE *)v28 + 4_Block_object_dispose(va, 8) = 0;
      v28[7] = "Failed to create graph from plist.";
    }

    create_stack_vec_from_graph(v15, a3, (char **)a4);

    id v11 = v16;
  }

  else
  {
    *(void *)a4 = 0LL;
    *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
  }
}

void sub_18805DE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100]( (diskimage_uio::stack_image_node **)(i - 8),  0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_18805DFD8(_Unwind_Exception *exception_object)
{
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = HIBYTE(cap);
  }

  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v9 = 22LL;
    uint64_t v10 = this;
  }

  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0LL, 0LL);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = this->__r_.__value_.__s.__size_;
    }

    BOOL v14 = this;
    if ((v6 & 0x80) != 0) {
      BOOL v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }

    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    else {
      this->__r_.__value_.__s.__size_ = v17 & 0x7F;
    }
  }

  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      id v12 = __p;
    }
    else {
      id v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
  }

  return this;
}

void sub_18805E14C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>( void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000LL;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)uint64_t v4 = 0;
  return result;
}

void std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100]( diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    diskimage_uio::stack_image_node::~stack_image_node(v3);
    operator delete(v4);
  }

void std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    uint64_t v4 = (diskimage_uio::stack_image_node **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<diskimage_uio::stack_image_node const>::reset[abi:ne180100](--v4, 0LL);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_18805E350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805E3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805E570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805E9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805EE4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_18805F20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805F5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805F718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805F7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805F878( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18805F8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805FA18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18805FACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_45:
    *__error() = v25;
    uint64_t v43 = 1;
    -[DIEncryptionFrontend setAllowStoringInKeychain:](self, "setAllowStoringInKeychain:", 1LL, v48, v49);
    goto LABEL_51;
  }

  if (v23)
  {
    if (v23 == -25300)
    {
      unint64_t v25 = *__error();
      if (!DIForwardLogs())
      {
        getDIOSLog();
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68157954;
          std::string v54 = 65;
          uint64_t v55 = 2080;
          int64x2_t v56 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
          _os_log_impl( &dword_188046000,  v44,  OS_LOG_TYPE_DEFAULT,  "%.*s: No matching item found in keychain",  buf,  0x12u);
        }

        goto LABEL_45;
      }

      unint64_t v51 = 0LL;
      getDIOSLog();
      int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      *(_DWORD *)uint64_t buf = 68157954;
      std::string v54 = 65;
      uint64_t v55 = 2080;
      int64x2_t v56 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      LODWORD(v49) = 18;
      __int16 v48 = buf;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();

      if (v27) {
        goto LABEL_24;
      }
      goto LABEL_45;
    }

    id v32 = *__error();
    if (DIForwardLogs())
    {
      unint64_t v51 = 0LL;
      getDIOSLog();
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      *(_DWORD *)uint64_t buf = 68158210;
      std::string v54 = 65;
      uint64_t v55 = 2080;
      int64x2_t v56 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      v57 = 1024;
      LODWORD(v5_Block_object_dispose(va, 8) = v24;
      unint64_t v34 = (char *)_os_log_send_and_compose_impl();

      if (v34)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v34);
        free(v34);
      }
    }

    else
    {
      getDIOSLog();
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68158210;
        std::string v54 = 65;
        uint64_t v55 = 2080;
        int64x2_t v56 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
        v57 = 1024;
        LODWORD(v5_Block_object_dispose(va, 8) = v24;
        _os_log_impl(&dword_188046000, v46, OS_LOG_TYPE_DEFAULT, "%.*s: Keychain lookup returned %d", buf, 0x18u);
      }
    }

    *__error() = v32;
LABEL_50:
    uint64_t v43 = 1;
    goto LABEL_51;
  }

  uint64_t v28 = *__error();
  if (DIForwardLogs())
  {
    unint64_t v51 = 0LL;
    getDIOSLog();
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    *(_DWORD *)uint64_t buf = 68157954;
    std::string v54 = 65;
    uint64_t v55 = 2080;
    int64x2_t v56 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();

    if (v30)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v30);
      free(v30);
    }
  }

  else
  {
    getDIOSLog();
    unint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      std::string v54 = 65;
      uint64_t v55 = 2080;
      int64x2_t v56 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      _os_log_impl( &dword_188046000,  v35,  OS_LOG_TYPE_DEFAULT,  "%.*s: Passphrase found in keychain, unlocking the image",  buf,  0x12u);
    }
  }

  *__error() = v28;
  int v36 = (void *)result;
  -[DIEncryptionFrontend diParams](self, "diParams");
  __int16 v37 = (void *)objc_claimAutoreleasedReturnValue();
  int64x2_t v38 = v36;
  uint64_t v50 = 0LL;
  __int16 v39 = objc_msgSend(v37, "setPassphrase:error:", objc_msgSend(v38, "bytes"), &v50);
  uint64_t v40 = v50;

  if ((v39 & 1) != 0 || ((uint64_t v41 = [v40 code], v41 >= 0) ? (v42 = v41) : (v42 = -v41), v42 == 80))
  {
    uint64_t v43 = 1;
  }

  else
  {
    uint64_t v43 = 0;
    if (a4) {
      *a4 = v40;
    }
  }

LABEL_51:
  return v43;
}

    uint64_t v46 = (std::__shared_weak_count *)*((void *)&v143 + 1);
    if (*((void *)&v143 + 1))
    {
      uint64_t v47 = (unint64_t *)(*((void *)&v143 + 1) + 8LL);
      do
        __int16 v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    if (!v36)
    {
      v20 += 64;
      if (v20 != v124) {
        continue;
      }
    }

    goto LABEL_126;
  }

  *(void *)&v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((void *)&v143 + 1) = 75LL;
  *(_DWORD *)uint64_t v144 = 16;
  di_log::logger<di_log::log_printer<175ul>>::logger(&v126, &v143);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)"Udif: needs to read ", 20LL);
  udif::operator<<(&v133, (int *)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" but buffer is full", 19LL);
  std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(void *)(v133 - 24)));
  __int128 v96 = std::locale::use_facet((const std::locale *)&v139, MEMORY[0x189614558]);
  ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10LL);
  std::locale::~locale((std::locale *)&v139);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)&v126);
LABEL_125:
  MEMORY[0x1895BC2CC](&v134);
  uint64_t v29 = -28LL;
LABEL_126:
  __int128 v97 = *(void **)(v120 + 16);
  if (v97 != (void *)(v120 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v97[5] + 144LL))(v97[5]);
      __int128 v98 = (void *)v97[1];
      if (v98)
      {
        do
        {
          __int128 v99 = v98;
          __int128 v98 = (void *)*v98;
        }

        while (v98);
      }

      else
      {
        do
        {
          __int128 v99 = (void *)v97[2];
          __int128 v100 = *v99 == (void)v97;
          __int128 v97 = v99;
        }

        while (!v100);
      }

      __int128 v97 = v99;
    }

    while (v99 != (void *)(v120 + 24));
  }

  if (v29 < 0)
  {
LABEL_144:
    uint64_t v125 = v29;
  }

  else if ((void)v174)
  {
    __int128 v101 = (unsigned int *)__p;
    __int128 v102 = (unsigned int *)((char *)__p + 40 * v174);
    uint64_t v103 = v176;
    while (1)
    {
      do
      {
        uint64_t v104 = v103[16];
        v103 += 16;
      }

      while (!v104);
      v105 = lw_future<int>::get(v101);
      uint64_t v29 = v105;
      if (v105 < 0) {
        goto LABEL_144;
      }
      if (*(_BYTE *)(v120 + 56) && (int)v103[8] > (uint64_t)v105)
      {
        *(void *)&v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((void *)&v143 + 1) = 75LL;
        *(_DWORD *)uint64_t v144 = 16;
        di_log::logger<di_log::log_printer<254ul>>::logger(&v126, &v143);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v133,  (uint64_t)"Error: Not enough data read. expected: ",  39LL);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(void *)(v133 - 24)));
        uint64_t v106 = std::locale::use_facet((const std::locale *)&v139, MEMORY[0x189614558]);
        ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10LL);
        std::locale::~locale((std::locale *)&v139);
        std::ostream::put();
        std::ostream::flush();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf((uint64_t)&v126);
        MEMORY[0x1895BC2CC](&v134);
        uint64_t v29 = -5LL;
        goto LABEL_144;
      }

      v101 += 10;
      if (v101 == v102)
      {
        if ((v105 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_144;
      }
    }
  }

  uint64_t v107 = v153;
  if (v153)
  {
    uint64_t v108 = (unint64_t *)&v153->__shared_owners_;
    do
      __int128 v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }

  __int128 v110 = (std::__shared_weak_count *)*((void *)&v145 + 1);
  if (*((void *)&v145 + 1))
  {
    char v111 = (unint64_t *)(*((void *)&v145 + 1) + 8LL);
    do
      uint64_t v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }

  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v157);
  __int128 v113 = v168;
  if (v168)
  {
    __int128 v114 = (unint64_t *)&v168->__shared_owners_;
    do
      unint64_t v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }

  char v116 = v160;
  if (v160)
  {
    uint64_t v117 = (unint64_t *)&v160->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }

  if (*((void *)&v174 + 1) && v175 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v177 + 1) && v178 != v176) {
    operator delete(v176);
  }
  return v125;
}

void sub_1880603A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880605D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_43:
    uint64_t v9 = 0;
    goto LABEL_24;
  }

  -[DIEncryptionFrontend diParams](self, "diParams");
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
  id v15 = [v14 hasUnlockedBackend];

  if ((v15 & 1) == 0)
  {
    if (!-[DIEncryptionFrontend allowStoringInKeychain](self, "allowStoringInKeychain")) {
      goto LABEL_3;
    }
    if (-[DIEncryptionUnlocker lookupLegacyKeychainWithXpcHandler:error:]( self,  "lookupLegacyKeychainWithXpcHandler:error:",  v6,  a4))
    {
      -[DIEncryptionFrontend diParams](self, "diParams");
      unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
      int v26 = [v25 hasUnlockedBackend];

      if ((v26 & 1) == 0) {
        goto LABEL_3;
      }
      goto LABEL_18;
    }

            id v32 = 1;
            goto LABEL_47;
          }

          if (v28)
          {
            *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + 1) = 54LL;
            unint64_t v71 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Only single cache is allowed",  42LL);
            di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }

          if (v27 == 2)
          {
            *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + 1) = 54LL;
            unint64_t v71 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Snapshot detected on top of cache",  47LL);
            di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }

          uint64_t v28 = 1;
          id v32 = 2;
LABEL_47:
          if (v57[0] != 12)
          {
            (*(void (**)(void **__return_ptr))(*(void *)lpsrc + 72LL))(&v64);
            if (v64 || v65 || v66 || v67)
            {
              *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
              *((void *)&v70 + 1) = 54LL;
              unint64_t v71 = 16;
              di_log::logger<di_log::log_printer<1089ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: images with constraints currently not supported",  61LL);
              di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v64);
              uint64_t v44 = 164LL;
              goto LABEL_73;
            }
          }

          id v33 = lpsrc;
          lpsrc = 0LL;
          unint64_t v64 = v33;
          LODWORD(v65) = v32;
          unint64_t v34 = *((void *)&v62 + 1);
          if (*((void *)&v62 + 1) >= v63)
          {
            __int16 v37 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v62,  (uint64_t *)&v64);
            int64x2_t v38 = v64;
            *((void *)&v62 + 1) = v37;
            unint64_t v64 = 0LL;
            if (v38) {
              (*(void (**)(void *))(*(void *)v38 + 16LL))(v38);
            }
          }

          else
          {
            **((void **)&v62 + 1) = v33;
            if (v33)
            {
              unint64_t v35 = operator new(0x20uLL);
              int v36 = v64;
              *unint64_t v35 = off_18A1CB9E8;
              v35[1] = 0LL;
              uint64_t v35[2] = 0LL;
              v35[3] = v36;
            }

            else
            {
              unint64_t v35 = 0LL;
            }

            *(void *)(v34 + _Block_object_dispose(va, 8) = v35;
            unint64_t v64 = 0LL;
            *(_DWORD *)(v34 + 16) = v65;
            *((void *)&v62 + 1) = v34 + 24;
          }

          if (v9 == a3)
          {
            __int16 v39 = operator new(0x98uLL);
            if ((v56 & 1) != 0) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = 2;
            }
            unint64_t v69 = v40;
            *(void *)&unint64_t v70 = 0x200000001LL;
            smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v40, (int *)&v70, 2LL);
            DiskImageStackable::DiskImageStackable(v39, &v62, &v69);
            uint64_t v41 = a1[1];
            a1[1] = v39;
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 16LL))(v41);
            }
            unint64_t v64 = &v62;
            std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            id v15 = lpsrc;
            lpsrc = 0LL;
            if (v15) {
              goto LABEL_66;
            }
            goto LABEL_67;
          }
        }

        if (v60)
        {
          *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v70 + 1) = 54LL;
          unint64_t v71 = 16;
          di_log::logger<di_log::log_printer<1048ul>>::logger(&v64, &v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ",  59LL);
          diskimage_uio::operator<<(v68, v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" given", 6LL);
          di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v64);
          goto LABEL_72;
        }

        (*(void (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc);
        goto LABEL_43;
      }
    }

    unint64_t v25 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v62,  (uint64_t *)&v64);
    int v26 = v64;
    *((void *)&v62 + 1) = v25;
    unint64_t v64 = 0LL;
    if (v26) {
      (*(void (**)(void *))(*(void *)v26 + 16LL))(v26);
    }
    goto LABEL_26;
  }

  if (v60)
  {
    *(void *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v62 + 1) = 54LL;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
    diskimage_uio::operator<<(v68, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" rather than image", 18LL);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v64);
    std::string v54 = __cxa_allocate_exception(0x10uLL);
    uint64_t v55 = std::generic_category();
    std::__shared_weak_count *v54 = 22LL;
    v54[1] = v55;
  }

  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
  std::string::size_type v13 = v64;
  unint64_t v64 = 0LL;
  BOOL v14 = a1[1];
  a1[1] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 16LL))(v14);
    id v15 = v64;
    unint64_t v64 = 0LL;
    if (v15) {
LABEL_66:
    }
      (*(void (**)(void *))(*(void *)v15 + 16LL))(v15);
  }

            id v32 = 1;
            goto LABEL_47;
          }

          if (v28)
          {
            *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((void *)&v70 + 1) = 54LL;
            unint64_t v71 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Only single cache is allowed",  42LL);
            di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }

          if (v27 == 2)
          {
            *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((void *)&v70 + 1) = 54LL;
            unint64_t v71 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Snapshot detected on top of cache",  47LL);
            di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }

          uint64_t v28 = 1;
          id v32 = 2;
LABEL_47:
          if (v57[0] != 12)
          {
            (*(void (**)(void **__return_ptr))(*(void *)lpsrc + 72LL))(&v64);
            if (v64 || v65 || v66 || v67)
            {
              *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
              *((void *)&v70 + 1) = 54LL;
              unint64_t v71 = 16;
              di_log::logger<di_log::log_printer<1089ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: images with constraints currently not supported",  61LL);
              di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v64);
              uint64_t v44 = 164LL;
              goto LABEL_73;
            }
          }

          id v33 = lpsrc;
          lpsrc = 0LL;
          unint64_t v64 = v33;
          LODWORD(v65) = v32;
          unint64_t v34 = *((void *)&v62 + 1);
          if (*((void *)&v62 + 1) >= v63)
          {
            __int16 v37 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v62,  (uint64_t *)&v64);
            int64x2_t v38 = v64;
            *((void *)&v62 + 1) = v37;
            unint64_t v64 = 0LL;
            if (v38) {
              (*(void (**)(void *))(*(void *)v38 + 16LL))(v38);
            }
          }

          else
          {
            **((void **)&v62 + 1) = v33;
            if (v33)
            {
              unint64_t v35 = operator new(0x20uLL);
              int v36 = v64;
              *unint64_t v35 = off_18A1CB9E8;
              v35[1] = 0LL;
              uint64_t v35[2] = 0LL;
              v35[3] = v36;
            }

            else
            {
              unint64_t v35 = 0LL;
            }

            *(void *)(v34 + _Block_object_dispose(va, 8) = v35;
            unint64_t v64 = 0LL;
            *(_DWORD *)(v34 + 16) = v65;
            *((void *)&v62 + 1) = v34 + 24;
          }

          if (v9 == a3)
          {
            __int16 v39 = operator new(0x98uLL);
            if ((v56 & 1) != 0) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = 2;
            }
            unint64_t v69 = v40;
            *(void *)&unint64_t v70 = 0x200000001LL;
            smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v40, (int *)&v70, 2LL);
            DiskImageStackable::DiskImageStackable(v39, &v62, &v69);
            uint64_t v41 = a1[1];
            a1[1] = v39;
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 16LL))(v41);
            }
            unint64_t v64 = &v62;
            std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            id v15 = lpsrc;
            lpsrc = 0LL;
            if (v15) {
              goto LABEL_66;
            }
            goto LABEL_67;
          }
        }

        if (v60)
        {
          *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
          *((void *)&v70 + 1) = 54LL;
          unint64_t v71 = 16;
          di_log::logger<di_log::log_printer<1048ul>>::logger(&v64, &v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ",  59LL);
          diskimage_uio::operator<<(v68, v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" given", 6LL);
          di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v64);
          goto LABEL_72;
        }

        (*(void (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc);
        goto LABEL_43;
      }
    }

    unint64_t v25 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v62,  (uint64_t *)&v64);
    int v26 = v64;
    *((void *)&v62 + 1) = v25;
    unint64_t v64 = 0LL;
    if (v26) {
      (*(void (**)(void *))(*(void *)v26 + 16LL))(v26);
    }
    goto LABEL_26;
  }

  if (v60)
  {
    *(void *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v62 + 1) = 54LL;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
    diskimage_uio::operator<<(v68, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" rather than image", 18LL);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v64);
    std::string v54 = __cxa_allocate_exception(0x10uLL);
    uint64_t v55 = std::generic_category();
    std::__shared_weak_count *v54 = 22LL;
    v54[1] = v55;
  }

  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
  std::string::size_type v13 = v64;
  unint64_t v64 = 0LL;
  BOOL v14 = a1[1];
  a1[1] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 16LL))(v14);
    id v15 = v64;
    unint64_t v64 = 0LL;
    if (v15) {
LABEL_66:
    }
      (*(void (**)(void *))(*(void *)v15 + 16LL))(v15);
  }

            id v32 = 1;
            goto LABEL_47;
          }

          if (v28)
          {
            *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + 1) = 54LL;
            unint64_t v71 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Only single cache is allowed",  42LL);
            di_log::logger<di_log::log_printer<1074ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }

          if (v27 == 2)
          {
            *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + 1) = 54LL;
            unint64_t v71 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Snapshot detected on top of cache",  47LL);
            di_log::logger<di_log::log_printer<1079ul>>::~logger((uint64_t)&v64);
            goto LABEL_79;
          }

          uint64_t v28 = 1;
          id v32 = 2;
LABEL_47:
          if (v57[0] != 12)
          {
            (*(void (**)(void **__return_ptr))(*(void *)lpsrc + 72LL))(&v64);
            if (v64 || v65 || v66 || v67)
            {
              *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
              *((void *)&v70 + 1) = 54LL;
              unint64_t v71 = 16;
              di_log::logger<di_log::log_printer<1089ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: images with constraints currently not supported",  61LL);
              di_log::logger<di_log::log_printer<1089ul>>::~logger((uint64_t)&v64);
              uint64_t v44 = 164LL;
              goto LABEL_73;
            }
          }

          id v33 = lpsrc;
          lpsrc = 0LL;
          unint64_t v64 = v33;
          LODWORD(v65) = v32;
          unint64_t v34 = *((void *)&v62 + 1);
          if (*((void *)&v62 + 1) >= v63)
          {
            __int16 v37 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v62,  (uint64_t *)&v64);
            int64x2_t v38 = v64;
            *((void *)&v62 + 1) = v37;
            unint64_t v64 = 0LL;
            if (v38) {
              (*(void (**)(void *))(*(void *)v38 + 16LL))(v38);
            }
          }

          else
          {
            **((void **)&v62 + 1) = v33;
            if (v33)
            {
              unint64_t v35 = operator new(0x20uLL);
              int v36 = v64;
              *unint64_t v35 = off_18A1CB9E8;
              v35[1] = 0LL;
              uint64_t v35[2] = 0LL;
              v35[3] = v36;
            }

            else
            {
              unint64_t v35 = 0LL;
            }

            *(void *)(v34 + _Block_object_dispose(va, 8) = v35;
            unint64_t v64 = 0LL;
            *(_DWORD *)(v34 + 16) = v65;
            *((void *)&v62 + 1) = v34 + 24;
          }

          if (v9 == a3)
          {
            __int16 v39 = operator new(0x98uLL);
            if ((v56 & 1) != 0) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = 2;
            }
            unint64_t v69 = v40;
            *(void *)&unint64_t v70 = 0x200000001LL;
            smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v40, (int *)&v70, 2LL);
            DiskImageStackable::DiskImageStackable(v39, &v62, &v69);
            uint64_t v41 = a1[1];
            a1[1] = v39;
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 16LL))(v41);
            }
            unint64_t v64 = &v62;
            std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            id v15 = lpsrc;
            lpsrc = 0LL;
            if (v15) {
              goto LABEL_66;
            }
            goto LABEL_67;
          }
        }

        if (v60)
        {
          *(void *)&unint64_t v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = s"
                            "td::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
          *((void *)&v70 + 1) = 54LL;
          unint64_t v71 = 16;
          di_log::logger<di_log::log_printer<1048ul>>::logger(&v64, &v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ",  59LL);
          diskimage_uio::operator<<(v68, v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" given", 6LL);
          di_log::logger<di_log::log_printer<1048ul>>::~logger((uint64_t)&v64);
          goto LABEL_72;
        }

        (*(void (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc);
        goto LABEL_43;
      }
    }

    unint64_t v25 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v62,  (uint64_t *)&v64);
    int v26 = v64;
    *((void *)&v62 + 1) = v25;
    unint64_t v64 = 0LL;
    if (v26) {
      (*(void (**)(void *))(*(void *)v26 + 16LL))(v26);
    }
    goto LABEL_26;
  }

  if (v60)
  {
    *(void *)&v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v62 + 1) = 54LL;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<989ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
    diskimage_uio::operator<<(v68, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" rather than image", 18LL);
    di_log::logger<di_log::log_printer<989ul>>::~logger((uint64_t)&v64);
    std::string v54 = __cxa_allocate_exception(0x10uLL);
    uint64_t v55 = std::generic_category();
    std::__shared_weak_count *v54 = 22LL;
    v54[1] = v55;
  }

  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
  std::string::size_type v13 = v64;
  unint64_t v64 = 0LL;
  BOOL v14 = a1[1];
  a1[1] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 16LL))(v14);
    id v15 = v64;
    unint64_t v64 = 0LL;
    if (v15) {
LABEL_66:
    }
      (*(void (**)(void *))(*(void *)v15 + 16LL))(v15);
  }

LABEL_42:
    std::string::size_type v13 = 0LL;
    goto LABEL_43;
  }

LABEL_18:
  std::string::size_type v13 = 0LL;
LABEL_9:
  uint64_t v9 = 1;
LABEL_24:

  return v9;
}

    *__error() = v10;
    -[DIBaseParams setDiskImageParamsXPC:](self, "setDiskImageParamsXPC:", v8, v17, v18);
    goto LABEL_19;
  }

  return 0;
}

    sg_vec_ns::make(&v81, (uint64_t *)v87);
    id v24 = *(DiskImage::Context **)(*(void *)(a2 + 16) + v20);
    if (a3)
    {
      sg_vec_ref::begin((sg_vec_ref *)v91, (uint64_t)&v76);
      sg_vec_ref::end((sg_vec_ref *)v91, (uint64_t)v73);
      uint64_t v4 = DiskImage::Context::write( v24,  (const sg_vec_ns::details::sg_vec_iterator *)&v76,  (const sg_vec_ns::details::sg_vec_iterator *)v73);
      unint64_t v25 = v75;
      if (v75)
      {
        int v26 = (unint64_t *)&v75->__shared_owners_;
        do
          uint64_t v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }

      uint64_t v28 = v74;
      if (v74)
      {
        uint64_t v29 = (unint64_t *)&v74->__shared_owners_;
        do
          uint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }

      id v31 = v78;
      if (v78)
      {
        id v32 = (unint64_t *)&v78->__shared_owners_;
        do
          id v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }

      unint64_t v34 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1))
      {
        unint64_t v35 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
        do
          int v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        goto LABEL_59;
      }
    }

    else
    {
      sg_vec_ref::begin((sg_vec_ref *)v91, (uint64_t)&v76);
      sg_vec_ref::end((sg_vec_ref *)v91, (uint64_t)v73);
      uint64_t v4 = DiskImage::Context::read( v24,  (const sg_vec_ns::details::sg_vec_iterator *)&v76,  (const sg_vec_ns::details::sg_vec_iterator *)v73);
      __int16 v37 = v75;
      if (v75)
      {
        int64x2_t v38 = (unint64_t *)&v75->__shared_owners_;
        do
          __int16 v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      uint64_t v40 = v74;
      if (v74)
      {
        uint64_t v41 = (unint64_t *)&v74->__shared_owners_;
        do
          id v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      uint64_t v43 = v78;
      if (v78)
      {
        uint64_t v44 = (unint64_t *)&v78->__shared_owners_;
        do
          int64x2_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      unint64_t v34 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1))
      {
        uint64_t v46 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
        do
          int v36 = __ldaxr(v46);
        while (__stlxr(v36 - 1, v46));
LABEL_59:
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }

    uint64_t v47 = v98;
    if (v98)
    {
      __int16 v48 = (unint64_t *)&v98->__shared_owners_;
      do
        BOOL v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    uint64_t v50 = v97;
    if (v97)
    {
      unint64_t v51 = (unint64_t *)&v97->__shared_owners_;
      do
        uint64_t v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }

    std::string v53 = v96;
    if (v96)
    {
      std::string v54 = (unint64_t *)&v96->__shared_owners_;
      do
        uint64_t v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }

    int64x2_t v56 = v95;
    if (v95)
    {
      v57 = (unint64_t *)&v95->__shared_owners_;
      do
        unint64_t v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }

    v59 = (std::__shared_weak_count *)v94[0];
    if (v94[0])
    {
      int v60 = (unint64_t *)(v94[0] + 8LL);
      do
        unint64_t v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }

    v62 = v92;
    if (v92)
    {
      unint64_t v63 = (unint64_t *)&v92->__shared_owners_;
      do
        unint64_t v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }

    if (v89 && &v90 != __p) {
      operator delete(__p);
    }
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v87);
    if (v4 == v13)
    {
      uint64_t v4 = v13;
LABEL_96:
      id v12 = 0LL;
      v10 -= v13;
      v7 += v13;
      ++v11;
      v65 = 1;
      goto LABEL_98;
    }

    v65 = 0;
LABEL_98:
    sparse_bundles::band_ptr::~band_ptr(&v79);
    v66 = v82;
    if (v82)
    {
      unint64_t v67 = (unint64_t *)&v82->__shared_owners_;
      do
        unint64_t v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }

    if ((v65 & 1) == 0) {
      return v4;
    }
  }

  return a4[2];
}

  std::shared_ptr<Backend>::reset[abi:ne180100]((void *)this + 2);
  if (*((_BYTE *)this + 69)) {
    sparse_bundles::Band::erase( *((sparse_bundles::Band **)this + 5),  *((const sparse_bundles::bundle_commons_t **)this + 4));
  }
  sparse_bundles::open_bands_t::remove( (sparse_bundles::open_bands_t *)(*((void *)this + 5) + 184LL),  *((void *)this + 4));
  sparse_bundles::Band::ContextsList::~ContextsList((sparse_bundles::Band *)((char *)this + 72));
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

void sub_188060874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188060954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188060A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188060B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188060FB0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    [v13 reason];
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v14,  v10);

    objc_end_catch();
    JUMPOUT(0x188060F78LL);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_188061394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_188061570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188061700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806185C(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1880619F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  id v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_188061C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188061CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188061DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188061E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188061F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188061FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806215C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806232C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188062474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_25:
  return v19;
}

void sub_188062808( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_188062A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188062B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188062BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806326C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }

  if (a2 == 1)
  {
    [objc_begin_catch(a1) reason];
    std::string::size_type v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v17,  v12);

    objc_end_catch();
    JUMPOUT(0x188062DD0LL);
  }

  _Unwind_Resume(a1);
}

uint64_t DiskImage::Context::flush(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::flush(di_flush_mode)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    di_log::logger<di_log::log_printer<191ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v5,  (uint64_t)"Disk image is terminated, skipping flush",  40LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x1895BC2CC](&v6);
  }

  return 4294967290LL;
}

void sub_188063500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<191ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<191ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CA3C0;
  a1[45] = &unk_18A1CA4C0;
  a1[46] = &unk_18A1CA4E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CA3C0;
  a1[45] = &unk_18A1CA448;
  a1[46] = &unk_18A1CA470;
  return a1;
}

void sub_1880635B8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CA558;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188063684(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CA558;
  di_log::logger_buf<di_log::log_printer<191ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<191ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<191ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<191ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<191ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<191ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<191ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_188063A38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<191ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 191LL;
    __int16 v21 = 2082;
    int v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        id v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 191LL;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_188063FCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_188064404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_188064A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188064AF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_188064BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188064CAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188064D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188064E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188064EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188064FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188065134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_15:
  return v15;
}

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

  if (a7)
  {
    uint64_t v18 = *a7;
    if (*a7)
    {
      __int16 v19 = a7 + 1;
      while ((s3HeaderAppend(&v61, v18) & 0x80000000) == 0)
      {
        uint64_t v20 = *v19++;
        uint64_t v18 = v20;
        if (!v20) {
          goto LABEL_20;
        }
      }

      goto LABEL_43;
    }
  }

void sub_188065354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188065414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880654B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188065A84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

LABEL_24:
  uint64_t v23 = shadowStats;
  shadowStats = self->_shadowStats;
  self->_shadowStats = v23;
LABEL_29:

  return v23;
}

    int v22 = v73;
    if (v73)
    {
      uint64_t v23 = (unint64_t *)&v73->__shared_owners_;
      do
        id v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    unint64_t v25 = v72;
    if (v72)
    {
      int v26 = (unint64_t *)&v72->__shared_owners_;
      do
        uint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    uint64_t v28 = v71;
    if (v71)
    {
      uint64_t v29 = (unint64_t *)&v71->__shared_owners_;
      do
        uint64_t v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

    id v31 = v70;
    if (v70)
    {
      id v32 = (unint64_t *)&v70->__shared_owners_;
      do
        id v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    unint64_t v34 = v69;
    if (v69)
    {
      unint64_t v35 = (unint64_t *)&v69->__shared_owners_;
      do
        int v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    __int16 v37 = v68;
    if (v68)
    {
      int64x2_t v38 = (unint64_t *)&v68->__shared_owners_;
      do
        __int16 v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    if (v65 && &v66 != __p) {
      operator delete(__p);
    }
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&keys);
    v6 += 6;
  }

  while (v6 != v7);
  uint64_t v40 = (uint64_t *)v56;
  if (v56 == (std::__shared_weak_count *)v57) {
    goto LABEL_65;
  }
  uint64_t v41 = 0;
  do
  {
    v41 += *((_DWORD *)v40 + 4);
    v40 += 6;
  }

  while (v40 != v57);
LABEL_66:
  id v42 = v41;
  uint64_t v43 = valloc(v41);
  if (!v43)
  {
    unint64_t v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v52 = std::bad_alloc::bad_alloc(v51);
    __cxa_throw(v52, MEMORY[0x189614708], MEMORY[0x189614690]);
  }

  values = off_18A1DFDC8;
  p_values = (cf *)&values;
  keys = v43;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v63, (uint64_t)&values);
  uint64_t v44 = p_values;
  if (p_values == (cf *)&values)
  {
    int64x2_t v45 = 4LL;
    uint64_t v44 = &values;
LABEL_72:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }

  else if (p_values)
  {
    int64x2_t v45 = 5LL;
    goto LABEL_72;
  }

  uint64_t v46 = v56;
  uint64_t v47 = v57;
  if (v56 != (std::__shared_weak_count *)v57)
  {
    __int16 v48 = 0;
    do
    {
      memcpy((char *)keys + v48, v46->__vftable, v46->__shared_weak_owners_);
      v48 += LODWORD(v46->__shared_weak_owners_);
      v46 += 2;
    }

    while (v46 != (std::__shared_weak_count *)v47);
  }

  cf::deserialize_from_xml_plist((UInt8 *)keys, v42, a3);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&keys);
  keys = &v56;
  std::vector<sg_entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&keys);
}

      value = boost::uuids::string_generator::get_value(this, v7);
      *((_BYTE *)v17 + v_Block_object_dispose(va, 8) = value;
      BOOL v14 = *v5++;
      uint64_t v7 = v14;
      *((_BYTE *)v17 + v8++) = boost::uuids::string_generator::get_value(this, v14) | (16 * value);
    }

    while (!v8);
    if (v8 == 16) {
      break;
    }
    uint64_t v10 = *v5++;
    uint64_t v7 = v10;
  }

  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (id v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    boost::uuids::string_generator::throw_invalid(this);
  }

  return v17[0];
}

      uint64_t v18 = *__error();
      __int16 v21 = 399;
LABEL_26:
      pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextSetFieldString",  v21,  80,  v18,  "malloc",  v19,  v20,  v22);
      return 0xFFFFFFFFLL;
    default:
      pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextSetFieldString",  391,  80,  0,  "invalid field %u",  a7,  a8,  a2);
      return 0xFFFFFFFFLL;
  }

void sub_1880661D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188066370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880663E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188066488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188066510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188066598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880669A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21)
{
  if (a21) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a19);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_188066B74(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_188066C3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188066CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188067158( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1880672B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_188067450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_188067600( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

LABEL_56:
    if (-[BackendXPC tryCreatingCryptoHeader](v10, "tryCreatingCryptoHeader", v52, v53)) {
      os_log_type_t v11 = -[DiskImageParamsLocked_XPC initWithBackendXPC:]( objc_alloc(&OBJC_CLASS___DiskImageParamsLocked_XPC),  "initWithBackendXPC:",  v10);
    }
    else {
      os_log_type_t v11 = +[DiskImageParamsXPC newWithUnlockedBackendXPC:error:]( &OBJC_CLASS___DiskImageParamsXPC,  "newWithUnlockedBackendXPC:error:",  v10,  a5);
    }
    goto LABEL_3;
  }

      char v6 = 0;
      goto LABEL_57;
    }

LABEL_4:
  return v12;
}

  char v6 = *((unsigned __int8 *)result + 16);
  if (!*((_BYTE *)result + 16))
  {
    uint64_t v8 = (uint64_t *)*result;
    uint64_t v7 = result[1];
    if (*result < v7 && *result + 1 < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  if (v6 != 3)
  {
    uint64_t v8 = (uint64_t *)*result;
    uint64_t v7 = result[1];
    if (*result < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  uint64_t v8 = (uint64_t *)*result;
  uint64_t v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    id v15 = a2[2];
    goto LABEL_33;
  }

  if (*(void *)(a1 + 80) >> 62) {
    fwrite("  requesting Westgate token from the Knox server\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
  }
  uint64_t v8 = (AAByteStream_impl *)AATempStreamOpen();
  if (!v8)
  {
    id v13 = "AATempStreamOpen";
    BOOL v14 = 491;
    id v15 = 0;
LABEL_16:
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  v14,  125,  v15,  v13,  v6,  v7,  v117);
    uint64_t v20 = 0LL;
    goto LABEL_17;
  }

  uint64_t v9 = strlen(__s);
  uint64_t v10 = v9 + 200;
  if (v9 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
    goto LABEL_15;
  }

  int v16 = malloc(v9 + 200);
  if (!v16)
  {
LABEL_15:
    id v15 = *__error();
    id v13 = "malloc";
    BOOL v14 = 495;
    goto LABEL_16;
  }

  __int16 v17 = v16;
  uint64_t v18 = strlen(v5);
  __int16 v19 = v18 + 200;
  if (v18 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_91:
    v85 = __error();
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  498,  125,  *v85,  "malloc",  v86,  v87,  v117);
    uint64_t v20 = 0LL;
    __int16 v21 = 0LL;
    goto LABEL_18;
  }

  unint64_t v68 = (char *)malloc(v18 + 200);
  if (!v68) {
    goto LABEL_91;
  }
  __int16 v21 = v68;
  snprintf(v68, v19, "Authorization: Bearer %s", v5);
  v122[0] = v21;
  v122[1] = 0LL;
  snprintf((char *)v17, v10, "https://%s/westgate/token", __s);
  if ((knoxRequest(a1, 2u, (char *)v17, v122, (uint64_t)v8) & 0x80000000) != 0)
  {
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  505,  125,  0,  "Knox request failed: %s",  v69,  v70,  (char)v17);
    uint64_t v20 = 0LL;
    goto LABEL_18;
  }

  AAByteStreamSeek(v8, 0LL, 0);
  unint64_t v71 = (void **)AAJSONInputStreamOpen((uint64_t)v8);
  uint64_t v20 = v71;
  if (!v71)
  {
    __int128 v83 = "AAJSONInputStreamOpen";
    char v84 = 510;
    goto LABEL_106;
  }

  if ((AAJSONInputStreamRead((uint64_t)v71, (int *)&__sa, v72, v73, v74, v75, v76, v77) & 0x80000000) != 0)
  {
LABEL_90:
    __int128 v83 = "parsing JSON";
    char v84 = 516;
LABEL_106:
    pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  v84,  125,  0,  v83,  v76,  v77,  v117);
    goto LABEL_18;
  }

  __int128 v82 = 0;
  while (1)
  {
    if (__sa < 2)
    {
      ++v82;
      goto LABEL_88;
    }

    if ((_DWORD)__sa == 2) {
      break;
    }
    if ((_DWORD)__sa != 3 || v82 != 1 || !__s1) {
      goto LABEL_88;
    }
    if (!strcasecmp(__s1, "password") && (contextSetString(a1, 4u, v121, 0LL) & 0x80000000) != 0)
    {
      __int128 v83 = "password";
      char v84 = 529;
      goto LABEL_106;
    }

    __int128 v82 = 1;
LABEL_89:
  }

  --v82;
LABEL_88:
  if (v82) {
    goto LABEL_89;
  }
  __int128 v90 = *(const char **)(a1 + 32);
  if (!v90 || strncmp(v90, "WGTKN", 5uLL))
  {
    __int128 v83 = "invalid/missing token";
    char v84 = 537;
    goto LABEL_106;
  }

  AAJSONInputStreamClose(v20);
  AAByteStreamClose(v8);
  free(v17);
  free(v21);
  if (!*(void *)(a1 + 32))
  {
    id v24 = "invalid Westgate token";
    unint64_t v25 = 658;
    goto LABEL_102;
  }

  return 0LL;
}

void sub_188067DEC()
{
}

void sub_188067DFC()
{
  JUMPOUT(0x188067E30LL);
}

void sub_188067E0C()
{
}

void sub_188067E18()
{
}

void sub_188067E44()
{
  JUMPOUT(0x188067E60LL);
}

void sub_188067E58(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    char v6 = __cxa_begin_catch(a1);
    [v2 path];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError nilWithDIException:prefix:error:](&OBJC_CLASS___DIError, "nilWithDIException:prefix:error:", v6, v7, v3);
    objc_claimAutoreleasedReturnValue();

    __cxa_end_catch();
    JUMPOUT(0x188067738LL);
  }

  _Unwind_Resume(a1);
}

#error "188068194: call analysis failed (funcsize=134)"
BOOL __cdecl +[DiskImageParamsXPC getAEAKeyFromSAKSWithMetadata:key:error:](id a1, SEL a2, id a3, char *a4, id *a5)
{
  id v7;
  BOOL v8;
  CC_LONG v9;
  char v11[88];
  uint64_t v12;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v7 = a3;
  uint64_t v8 = +[DIKeyRetriever decryptKeyWithData:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "decryptKeyWithData:destKey:destKeySize:error:",  v7,  v11,  88LL,  a5);
  if (v8)
  {
    uint64_t v9 = strnlen(v11, 0x58uLL);
    CC_SHA256(v11, v9, (unsigned __int8 *)a4);
  }

  return v8;
}

void sub_18806835C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188068588( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, AEAAuthData a13, uint64_t a14)
{
  if (a2 == 1)
  {
    +[DIError nilWithDIException:description:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:description:error:",  __cxa_begin_catch(a1),  @"Error while creating AEA backend",  v15);
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x18806856CLL);
  }

  _Unwind_Resume(a1);
}

void sub_188068820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188068830(void *a1, uint64_t a2, ...)
{
}

void sub_188068880(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_188068A04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, void *a20, void *__p, std::string *buf, void *__pa, void *bufa, __int16 a25, uint64_t a26)
{
  uint64_t v30 = __pa;
  __pa = 0LL;
  if (v30) {
    operator delete(v30);
  }
  if (a2 == 2)
  {
    +[DIError nilWithDIException:description:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:description:error:",  __cxa_begin_catch(a1),  0LL,  v27);
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
  }

  else
  {
    if (a2 != 1)
    {

      _Unwind_Resume(a1);
    }

    __cxa_begin_catch(a1);
    __cxa_end_catch();
    [v26 backend];
    UDIF_header::UDIF_header(&bufa, &a19);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    std::make_unique[abi:ne180100]<udif::header,udif::header const&>((uint64_t)bufa, &a19);
    id v31 = objc_alloc(&OBJC_CLASS___DiskImageParamsUDIF_XPC);
    id v32 = a19;
    a19 = 0LL;
    uint64_t buf = v32;
    -[DiskImageParamsUDIF_XPC initWithBackendXPC:header:](v31, "initWithBackendXPC:header:", v26, &buf);
    id v33 = buf;
    uint64_t buf = 0LL;
    if (v33) {
      operator delete(v33);
    }
    unint64_t v34 = a19;
    a19 = 0LL;
    if (v34) {
      operator delete(v34);
    }
    UDIF_header::~UDIF_header(&bufa);
  }

  JUMPOUT(0x1880689C8LL);
}

__n128 std::make_unique[abi:ne180100]<udif::header,udif::header const&>@<Q0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x1F4uLL);
  *(void *)int v4 = 0x4796C6F6BLL;
  int v5 = *(_DWORD *)(a1 + 12);
  *((_DWORD *)v4 + 2) = 512;
  *((_DWORD *)v4 + 3) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v4 + 2) = v6;
  *((void *)v4 + 6) = *(void *)(a1 + 48);
  *((void *)v4 + 7) = *(void *)(a1 + 56);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  *((void *)v4 + 10) = *(void *)(a1 + 80);
  *(_OWORD *)(v4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v4 + 16_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a1 + 216);
  __int128 v7 = *(_OWORD *)(a1 + 232);
  __int128 v8 = *(_OWORD *)(a1 + 248);
  __int128 v9 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v4 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v4 + 280) = v9;
  *(_OWORD *)(v4 + 24_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(v4 + 232) = v7;
  __int128 v10 = *(_OWORD *)(a1 + 296);
  __int128 v11 = *(_OWORD *)(a1 + 312);
  __int128 v12 = *(_OWORD *)(a1 + 328);
  *((void *)v4 + 43) = *(void *)(a1 + 344);
  *(_OWORD *)(v4 + 312) = v11;
  *(_OWORD *)(v4 + 32_Block_object_dispose(va, 8) = v12;
  *(_OWORD *)(v4 + 296) = v10;
  *((void *)v4 + 44) = *(void *)(a1 + 352);
  *(_OWORD *)(v4 + 424) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(v4 + 456) = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(v4 + 472) = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(v4 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(v4 + 376) = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(v4 + 392) = *(_OWORD *)(a1 + 392);
  __n128 result = *(__n128 *)(a1 + 408);
  *(__n128 *)(v4 + 40_Block_object_dispose(va, 8) = result;
  *((_DWORD *)v4 + 122) = *(_DWORD *)(a1 + 488);
  *(void *)(v4 + 492) = *(void *)(a1 + 492);
  *a2 = v4;
  return result;
}

void UDIF_header::~UDIF_header(void **this)
{
  uint64_t v2 = *this;
  *this = 0LL;
  if (v2) {
    operator delete(v2);
  }
}

void sub_188069154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188069214(_Unwind_Exception *a1, int a2)
{
  __int128 v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Error encrypting new image",  v3);
    __cxa_end_catch();
    JUMPOUT(0x1880691F8LL);
  }

  _Unwind_Resume(a1);
}

void sub_188069330(_Unwind_Exception *a1, int a2)
{
  __int128 v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Error encrypting new image",  v3);
    __cxa_end_catch();
    JUMPOUT(0x188069314LL);
  }

  _Unwind_Resume(a1);
}

void sub_18806942C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188069754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_188069764( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint8_t buf, int a27, __int16 a28, uint64_t a29, __int16 a30, uint64_t a31)
{
}

void sub_1880697A8()
{
}

#error "1880698F0: call analysis failed (funcsize=133)"
void sub_188069A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188069A10(_Unwind_Exception *a1)
{
}

void sub_188069A28(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x188069A30LL);
  }
  __clang_call_terminate(a1);
}

void sub_188069BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806A6C4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint8_t buf,int a51,__int16 a52,__int16 a53,int a54,__int16 a55,__int16 a56,__int16 a57)
{
}

void sub_18806AC00(_Unwind_Exception *a1)
{
}

void sub_18806AC24(_Unwind_Exception *a1)
{
}

void sub_18806AC30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<DiskImage>::operator=[abi:ne180100](void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    int v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  __int128 v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::insert( uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( v7,  v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v18 = v16;
    __int16 v19 = &v16[24 * v12];
    uint64_t v20 = v19;
    __int16 v21 = &v16[24 * v15];
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::push_back(&v18, a3);
    uint64_t v4 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer( a1,  &v18,  v4);
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)&v18);
  }

  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0LL;
    a3->n128_u64[1] = 0LL;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }

  else
  {
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__move_range( (uint64_t)a1,  a2,  v6,  a2 + 24);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v4, (__int128 *)a3);
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }

  return v4;
}

void sub_18806AE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::emplace_back<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>( uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( v4,  v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)v16);
  }

  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }

  a1[1] = v8;
  return v8 - 24;
}

void sub_18806AF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_18806B16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806B26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806B374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806B44C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18806B674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_18806BA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "18806BC0C: call analysis failed (funcsize=169)"
void sub_18806BD28()
{
  __cxa_end_catch();
  JUMPOUT(0x18806BA48LL);
}

void sub_18806BD68(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x18806BA48LL);
}

void *di_log::logger<di_log::log_printer<651ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<651ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CA7A0;
  a1[45] = &unk_18A1CA8A0;
  a1[46] = &unk_18A1CA8C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CA7A0;
  a1[45] = &unk_18A1CA828;
  a1[46] = &unk_18A1CA850;
  return a1;
}

void sub_18806BDFC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  return a1;
}

void sub_18806BEC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18806C38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806C57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806C640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806C6BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18806C720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806C874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806C908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806C9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806CAC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16LL))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_18806CE20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13)
{
}

void sub_18806D124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_18806D1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806D2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806D41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806D500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_20:
  if (self->_header.__ptr_.__value_)
  {
    -[DiskImageParamsXPC backendXPC](self, "backendXPC");
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = v19;
    if (v19)
    {
      [v19 backend];
    }

    else
    {
      __int128 v86 = 0LL;
      __int128 v87 = 0LL;
    }

    get_sink_backend((uint64_t)&v86, &v93);
    if ((void)v93
    {
      v91[0] = v31;
      v91[1] = *((DiskImageASIF **)&v93 + 1);
      id v32 = (DiskImageASIF **)&v93;
    }

    else
    {
      id v32 = v91;
    }

    *id v32 = 0LL;
    v32[1] = 0LL;
    id v33 = (std::__shared_weak_count *)*((void *)&v93 + 1);
    if (*((void *)&v93 + 1))
    {
      unint64_t v34 = (unint64_t *)(*((void *)&v93 + 1) + 8LL);
      do
        unint64_t v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    int v36 = v87;
    if (v87)
    {
      __int16 v37 = (unint64_t *)&v87->__shared_owners_;
      do
        int64x2_t v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    __int16 v39 = v91[0];
    if (v91[0])
    {
      FileDescriptor::update_info(*((FileDescriptor **)v91[0] + 5));
      atomic_store(*(void *)(*((void *)v39 + 5) + 16LL), (unint64_t *)(*((void *)v39 + 5) + 64LL));
    }

    uint64_t v40 = (std::__shared_weak_count *)v91[1];
    if (v91[1])
    {
      uint64_t v41 = (unint64_t *)((char *)v91[1] + 8);
      do
        id v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    -[DiskImageParamsXPC backendXPC](self, "backendXPC");
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
    [v43 backend];
    uint64_t v44 = (*(uint64_t (**)(DiskImageASIF *))(*(void *)v91[0] + 40LL))(v91[0]);
    int64x2_t v45 = (std::__shared_weak_count *)v91[1];
    if (v91[1])
    {
      uint64_t v46 = (unint64_t *)((char *)v91[1] + 8);
      do
        uint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    if (v44)
    {
      -[DiskImageParamsXPC backendXPC](self, "backendXPC");
      __int16 v48 = (void *)objc_claimAutoreleasedReturnValue();
      BOOL v49 = v48;
      if (v48)
      {
        [v48 backend];
        uint64_t v50 = (Backend *)v91[0];
      }

      else
      {
        uint64_t v50 = 0LL;
        v91[0] = 0LL;
        v91[1] = 0LL;
      }

      unint64_t v51 = (di_asif::header *)operator new(0x50uLL);
      di_asif::header::header(v51, v50);
      value = self->_header.__ptr_.__value_;
      self->_header.__ptr_.__value_ = (header *)v51;
      if (value) {
        operator delete(value);
      }
      std::string v53 = (std::__shared_weak_count *)v91[1];
      if (v91[1])
      {
        std::string v54 = (unint64_t *)((char *)v91[1] + 8);
        do
          uint64_t v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }

    -[DiskImageParamsXPC backendXPC](self, "backendXPC");
    int64x2_t v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = v56;
    if (v56)
    {
      [v56 backend];
    }

    else
    {
      v91[0] = 0LL;
      v91[1] = 0LL;
    }

    unint64_t v58 = (Backend *)self->_header.__ptr_.__value_;
    v59 = operator new(0xFF0uLL);
    dir_latest_offset = DiskImageASIF::get_dir_latest_offset(v91[0], v58, v60);
    DiskImageASIF::DiskImageASIF(v59, v91, v58, dir_latest_offset, v62, &DiskImageASIF::default_options);
    *uint64_t v4 = v59;
    unint64_t v63 = (std::__shared_weak_count *)v91[1];
    if (v91[1])
    {
      unint64_t v64 = (unint64_t *)((char *)v91[1] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }

  else
  {
    uint64_t v27 = -[DiskImageParamsXPC blockSize](self, "blockSize");
    uint64_t v28 = -[DiskImageParamsXPC blockSize](self, "blockSize");
    -[DiskImageParamsXPC backendXPC](self, "backendXPC");
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v30 = v29;
    if (v29)
    {
      [v29 backend];
    }

    else
    {
      __int128 v86 = 0LL;
      __int128 v87 = 0LL;
    }

    unint64_t v67 = (char *)operator new(0xFF0uLL);
    *(void *)&__int128 v93 = di_utils::random_uuid((di_utils *)v67);
    *((void *)&v93 + 1) = v68;
    LOBYTE(v91[0]) = 0;
    char v92 = 0;
    DiskImageASIF::DiskImageASIF( (uint64_t)v67,  v27,  0x100000u,  0LL,  0x10000000000000LL / v28,  (uint64_t)&v86,  &DiskImageASIF::default_options,  &v93,  (__int128 *)v91);
    unint64_t v69 = v87;
    if (v87)
    {
      unint64_t v70 = (unint64_t *)&v87->__shared_owners_;
      do
        unint64_t v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }

    __int128 v72 = *(void *)(v67 + 36);
    __int128 v73 = *((_DWORD *)v67 + 11);
    __int128 v74 = *((void *)v67 + 13);
    uint64_t v75 = (char *)operator new(0x50uLL);
    *(_DWORD *)uint64_t v75 = 2003069043;
    *(void *)(v75 + 4) = v72;
    *((_DWORD *)v75 + 3) = v73;
    uint64_t v76 = *((_OWORD *)v67 + 4);
    *((_OWORD *)v75 + 1) = *((_OWORD *)v67 + 3);
    *((_OWORD *)v75 + 2) = v76;
    *((_OWORD *)v75 + 3) = *((_OWORD *)v67 + 5);
    *(void *)(v75 + 62) = *(void *)(v67 + 94);
    *((_WORD *)v75 + 35) = 0;
    *((void *)v75 + 9) = v74;
    unint64_t v77 = self->_header.__ptr_.__value_;
    self->_header.__ptr_.__value_ = (header *)v75;
    if (v77)
    {
      operator delete(v77);
      uint64_t v75 = (char *)self->_header.__ptr_.__value_;
    }

    uint64_t v78 = *((unsigned __int16 *)v75 + 34);
    v85.receiver = self;
    v85.super_class = (Class)&OBJC_CLASS___DiskImageParamsASIF_XPC;
    v66 = -[DiskImageParamsXPC setBlockSize:](&v85, sel_setBlockSize_, v78);
    *uint64_t v4 = v67;
  }

  unint64_t v79 = v89;
  if (v89)
  {
    uint64_t v80 = (unint64_t *)&v89->__shared_owners_;
    do
      unint64_t v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  __int128 v82 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    __int128 v83 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      char v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  return (unique_ptr<DiskImage, std::default_delete<DiskImage>>)v66;
}

  if (*(_DWORD *)v14 && (s3Sign(&v61, a1, a2, v14, a4) & 0x80000000) != 0)
  {
    int v26 = (FILE *)*MEMORY[0x1895F89D0];
    uint64_t v27 = "Failed to sign request\n";
    uint64_t v28 = 23LL;
    goto LABEL_42;
  }

  __int16 v21 = curl_easy_setopt(v16, CURLOPT_URL, a2);
  uint64_t v22 = curl_easy_setopt(v16, CURLOPT_HTTPHEADER, v61);
  uint64_t v23 = curl_easy_setopt(v16, CURLOPT_BUFFERSIZE, 102400LL);
  id v24 = (curl_easy_setopt(v16, CURLOPT_TCP_KEEPALIVE, 1LL) | v23 | v22 | v21) == 0;
  if (*(void *)(v14 + 2784) && curl_easy_setopt(v16, CURLOPT_USERAGENT, *(void *)(v14 + 2784))) {
    id v24 = 0;
  }
  if (*(void *)(v14 + 2760) && curl_easy_setopt(v16, CURLOPT_PROXY, *(void *)(v14 + 2760))) {
    id v24 = 0;
  }
  if (*(void *)(v14 + 2768) && curl_easy_setopt(v16, CURLOPT_PINNEDPUBLICKEY, *(void *)(v14 + 2768))) {
    id v24 = 0;
  }
  if (*(void *)(v14 + 2776) && curl_easy_setopt(v16, CURLOPT_PROXY_PINNEDPUBLICKEY, *(void *)(v14 + 2776))) {
    id v24 = 0;
  }
  if (*(void *)(v14 + 2800) && curl_easy_setopt(v16, CURLOPT_PROXYHEADER, *(void *)(v14 + 2800))) {
    id v24 = 0;
  }
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      id v33 = curl_easy_setopt(v16, CURLOPT_CUSTOMREQUEST, "GET");
      unint64_t v25 = (curl_easy_setopt(v16, CURLOPT_FOLLOWLOCATION, 1LL) | v33) == 0;
    }

    else
    {
      if (a1) {
        goto LABEL_53;
      }
      unint64_t v25 = curl_easy_setopt(v16, CURLOPT_PUT, 1LL) == CURLE_OK;
    }

    if (!v25) {
      id v24 = 0;
    }
LABEL_53:
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }

  if (curl_easy_setopt(v16, CURLOPT_POST, 1LL)) {
    id v24 = 0;
  }
  if (!a4)
  {
    id v31 = curl_easy_setopt(v16, CURLOPT_POSTFIELDS, "");
    id v32 = curl_easy_setopt(v16, CURLOPT_POSTFIELDSIZE, 0LL) | v31;
    goto LABEL_55;
  }

void sub_18806DC68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18806E098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_18806E174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18806E284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x189614790] + 16LL;
  __cxa_throw(exception, MEMORY[0x1896146F0], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>( uint64_t a1, const void **a2)
{
  return 1LL;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)NSString;
  else {
    std::string __p = *(std::string *)a2;
  }
  int size = (char)__p.__r_.__value_.__s.__size_;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  uint64_t v6 = objc_msgSend( NSString,  "defaultCStringEncoding",  __p.__r_.__value_.__r.__words[0],  __p.__r_.__value_.__l.__size_,  __p.__r_.__value_.__l.__cap_);
  if (size >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v5;
  }
  [v3 stringWithCString:p_p encoding:v6];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [**(id **)(v2 + 24) getAEAKeyFromSAKSWithMetadata:v8 key:**(void **)(v2 + 32) error:**(void **)(v2 + 40)];

  return v9;
}

void sub_18806E400( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>( void ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)MEMORY[0x189604030];
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  [NSString stringWithCString:v4 encoding:4];
  std::string::size_type v5 = (void *)objc_claimAutoreleasedReturnValue();
  [v3 URLWithString:v5];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();

  BOOL v7 = +[DIKeyRetriever KKMSKeyWithURL:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "KKMSKeyWithURL:destKey:destKeySize:error:",  v6,  **v2,  *v2[1],  *v2[2]);
  return v7;
}

void sub_18806E4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<di_utils::overloaded<+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_0,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_1,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_2,+[DiskImageParamsXPC getAEAKeyWithHelper:keyBuffer:bufferSize:error:]::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,std::unique_ptr<unsigned char []>::kms_t,std::unique_ptr<unsigned char []>::wkms_t> &>( void *a1, uint64_t *a2)
{
  uint64_t v3 = (void **)*a1;
  uint64_t v4 = (void *)MEMORY[0x189604030];
  else {
    std::string::size_type v5 = (uint64_t *)*a2;
  }
  [NSString stringWithCString:v5 encoding:1];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 URLWithString:v6];
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();

  BOOL v8 = +[DIKeyRetriever WKMSKeyWithURL:authData:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "WKMSKeyWithURL:authData:destKey:destKeySize:error:",  v7,  a2[3],  *v3[6],  *v3[7],  *v3[8]);
  return v8;
}

void sub_18806E584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::unique_ptr<unsigned char []>,AEAHelper::saks_metadata_t,AEAHelper::kms_t,AEAHelper::wkms_t>,(std::__variant_detail::_Trait)1>::~__dtor( uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CA720[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_( uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  if (v2) {
    operator delete[](v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_( uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_( uint64_t a1, uint64_t a2)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIA_hNS_14default_deleteIS9_EEEEN9AEAHelper15saks_metadata_tENSD_5kms_tENSD_6wkms_tEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSC_SE_SF_SG_EEEEEEDcSK_DpT0_( uint64_t a1, uint64_t a2)
{
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__move_range( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0LL;
      *(void *)(v9 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24LL;
      v9 += 24LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>( a2,  v7,  v6);
}

__n128 std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::push_back( void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v11 = v4 - v6;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556LL * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1LL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v28 = a1[4];
      unint64_t v15 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( v28,  v13);
      __int16 v17 = &v15[24 * v14];
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2] - v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        __int16 v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)__int16 v21 = *(_OWORD *)v18;
          *(void *)unint64_t v18 = 0LL;
          *(void *)(v18 + _Block_object_dispose(va, 8) = 0LL;
          *((_DWORD *)v21 + 4) = *(_DWORD *)(v18 + 16);
          v21 += 24;
          v18 += 24LL;
        }

        while (v21 != v20);
        int64x2_t v22 = *(int64x2_t *)(a1 + 1);
      }

      else
      {
        int64x2_t v22 = vdupq_n_s64(v18);
        uint64_t v20 = &v15[24 * v14];
      }

      uint64_t v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v22;
      uint64_t v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      uint64_t v27 = v23;
      std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)&v25);
      uint64_t v4 = a1[2];
    }

    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -3 * (v8 >> 1);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>( v5,  v4,  v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }

  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24LL;
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer( uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      __int128 v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24LL;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24LL;
      *(void *)uint64_t v7 = 0LL;
      *(void *)(v7 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
    }

    while (v7 != v5);
  }

  a2[1] = v6;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
      *(void *)a3 = 0LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a3 + 16);
      v10 += 24LL;
      a3 += 24LL;
    }

    while (a3 != v9);
    uint64_t v6 = a2[1];
  }

  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a3 - 24, (__int128 *)(v6 - 24));
      *(_DWORD *)(a3 - _Block_object_dispose(va, 8) = *(_DWORD *)(v6 - 8);
      a3 -= 24LL;
      v6 -= 24LL;
    }

    while (v6 != a1);
  }

  return a2;
}

void *std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role> *,0>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a3, (__int128 *)v4);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    a3 += 24LL;
    v4 += 24LL;
  }

  while (v4 != v5);
  return v5;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](i - 24);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer( uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    __int128 v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24LL;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24LL;
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }

  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t smart_enums::validators::flags<unsigned int>(uint64_t result, int a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 4 * a4;
    do
    {
      int v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4LL;
    }

    while (v4);
  }

  if (a2)
  {
    uint64_t v6 = result;
    int v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = off_18A1CA768;
    exception[1] = v6;
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = v7;
  }

  return result;
}

void smart_enums::validators::validator_exception<unsigned int>::~validator_exception(std::exception *a1)
{
}

void smart_enums::validators::validator_exception<unsigned int>::reason( smart_enums::validators::validator_exception_base *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)smart_enums::validators::validator_exception_base::what(a1);
  std::string::basic_string[abi:ne180100]<0>(v15, v3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  if ((v16 & 0x80u) == 0) {
    uint64_t v4 = v15;
  }
  else {
    uint64_t v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)v15[1];
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2LL);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24LL) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v7 + *(void *)(*v7 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1LL);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x189614728];
  uint64_t v9 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  uint64_t v11 = v9;
  v12[0] = MEMORY[0x189614750] + 16LL;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1895BC2CC](&v14);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]( uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614758];
  uint64_t v3 = MEMORY[0x189614758] + 104LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = MEMORY[0x189614758] + 104LL;
  *(void *)(a1 + 16) = v2 + 64;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (void *)MEMORY[0x189614728];
  uint64_t v6 = *(void *)(MEMORY[0x189614728] + 16LL);
  uint64_t v7 = *(void *)(MEMORY[0x189614728] + 24LL);
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = v7;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0LL;
  v8[1].__fmtflags_ = -1;
  uint64_t v9 = v5[4];
  uint64_t v10 = v5[5];
  *(void *)(a1 + 16) = v9;
  *(void *)(v4 + *(void *)(v9 - 24)) = v10;
  uint64_t v11 = v5[1];
  *(void *)a1 = v11;
  *(void *)(a1 + *(void *)(v11 - 24)) = v5[6];
  *(void *)a1 = v2 + 24;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_18806ED50(_Unwind_Exception *a1)
{
}

void std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

BOOL FileDescriptor::is_mounted_on_apfs(FileDescriptor *this)
{
  unint64_t v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 4)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    BOOL v3 = *(_DWORD *)v2 == 1936093281;
  }

  else
  {
    BOOL v3 = 0LL;
    if ((char)v6 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }

  return v3;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<651ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<651ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<651ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CA938;
  di_log::logger_buf<di_log::log_printer<651ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<651ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18806F1F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<651ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<651ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 651LL;
    __int16 v21 = 2082;
    int64x2_t v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        char v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 651LL;
      __int16 v21 = 2082;
      int64x2_t v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

  ;
}

void DiskImageROChunkRaw::~DiskImageROChunkRaw(DiskImageROChunkRaw *this)
{
  *(void *)this = &off_18A1CA9B8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(void *)this = &off_18A1CA9B8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  operator delete(this);
}

uint64_t DiskImageROChunkRaw::get_block_size(DiskImageROChunkRaw *this)
{
  return *((void *)this + 4);
}

unint64_t DiskImageROChunkRaw::get_num_blocks(DiskImageROChunkRaw *this)
{
}

uint64_t DiskImageROChunkRaw::is_writable(DiskImageROChunkRaw *this)
{
  return 0LL;
}

info::DiskImageInfoRaw *DiskImageROChunkRaw::create_image_info@<X0>( DiskImageROChunkRaw *this@<X0>, void *a2@<X8>)
{
  int v4 = (info::DiskImageInfoRaw *)operator new(0x98uLL);
  uint64_t result = info::DiskImageInfoRaw::DiskImageInfoRaw(v4, this);
  *a2 = (char *)v4 + *(void *)(*(void *)v4 - 104LL);
  return result;
}

void sub_18806F520(_Unwind_Exception *a1)
{
}

uint64_t DiskImageROChunkRaw::set_size(DiskImageROChunkRaw *this)
{
  return 4294967251LL;
}

__n128 DiskImageROChunkRaw::get_io_constraints@<Q0>(DiskImageROChunkRaw *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 40);
  __int128 v3 = *(_OWORD *)((char *)this + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t DiskImage::supports_unmap(DiskImage *this)
{
  return 0LL;
}

uint64_t DiskImage::may_read_extra(DiskImage *this)
{
  return 0LL;
}

void *DiskImageROChunkRaw::_create_ctx(DiskImageROChunkRaw *this)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_18A1CAAB8;
  v2[1] = this;
  (*(void (**)(void))(**((void **)this + 2) + 72LL))(*((void *)this + 2));
  return v2;
}

void sub_18806F5A8(_Unwind_Exception *a1)
{
}

unint64_t DiskImage::read( DiskImage *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  __int128 v54 = xmmword_188179120;
  uint64_t v55 = this;
  int64x2_t v56 = a2;
  uint64_t v4 = *((void *)a3 + 1);
  *(void *)&__int128 v42 = *(void *)a3;
  *((void *)&v42 + 1) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  v43[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v44 = *((void *)a3 + 6);
  __int128 v45 = *(_OWORD *)((char *)a3 + 56);
  __int128 v46 = *(_OWORD *)((char *)a3 + 72);
  __int128 v47 = *(_OWORD *)((char *)a3 + 88);
  char v48 = *((_BYTE *)a3 + 104);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v49 = *((void *)a3 + 14);
  uint64_t v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v51 = *((_OWORD *)a3 + 8);
  uint64_t v52 = *((void *)a3 + 18);
  char v53 = *((_BYTE *)a3 + 152);
  uint64_t v10 = *((void *)a4 + 1);
  *(void *)&__int128 v30 = *(void *)a4;
  *((void *)&v30 + 1) = v10;
  if (v10)
  {
    os_log_type_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v31[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v32 = *((void *)a4 + 6);
  __int128 v33 = *(_OWORD *)((char *)a4 + 56);
  __int128 v34 = *(_OWORD *)((char *)a4 + 72);
  __int128 v35 = *(_OWORD *)((char *)a4 + 88);
  char v36 = *((_BYTE *)a4 + 104);
  char v13 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v37 = *((void *)a4 + 14);
  int64x2_t v38 = v13;
  if (v13)
  {
    uint64_t v14 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  __int128 v39 = *((_OWORD *)a4 + 8);
  uint64_t v40 = *((void *)a4 + 18);
  char v41 = *((_BYTE *)a4 + 152);
  unint64_t v16 = for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>( (uint64_t)&v54,  &v42,  &v30,  0xFFFFFFFFFFFFFFFFLL);
  __int16 v17 = v38;
  if (v38)
  {
    uint64_t v18 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    __int16 v21 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v50;
  if (v50)
  {
    id v24 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  int64x2_t v26 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    uint64_t v27 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v16;
}

void sub_18806F830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

unint64_t DiskImage::write( DiskImage *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  __int128 v54 = xmmword_188179130;
  uint64_t v55 = this;
  int64x2_t v56 = a2;
  uint64_t v4 = *((void *)a3 + 1);
  *(void *)&__int128 v42 = *(void *)a3;
  *((void *)&v42 + 1) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  v43[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v44 = *((void *)a3 + 6);
  __int128 v45 = *(_OWORD *)((char *)a3 + 56);
  __int128 v46 = *(_OWORD *)((char *)a3 + 72);
  __int128 v47 = *(_OWORD *)((char *)a3 + 88);
  char v48 = *((_BYTE *)a3 + 104);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v49 = *((void *)a3 + 14);
  uint64_t v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v51 = *((_OWORD *)a3 + 8);
  uint64_t v52 = *((void *)a3 + 18);
  char v53 = *((_BYTE *)a3 + 152);
  uint64_t v10 = *((void *)a4 + 1);
  *(void *)&__int128 v30 = *(void *)a4;
  *((void *)&v30 + 1) = v10;
  if (v10)
  {
    os_log_type_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v31[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v32 = *((void *)a4 + 6);
  __int128 v33 = *(_OWORD *)((char *)a4 + 56);
  __int128 v34 = *(_OWORD *)((char *)a4 + 72);
  __int128 v35 = *(_OWORD *)((char *)a4 + 88);
  char v36 = *((_BYTE *)a4 + 104);
  char v13 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v37 = *((void *)a4 + 14);
  int64x2_t v38 = v13;
  if (v13)
  {
    uint64_t v14 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  __int128 v39 = *((_OWORD *)a4 + 8);
  uint64_t v40 = *((void *)a4 + 18);
  char v41 = *((_BYTE *)a4 + 152);
  unint64_t v16 = for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>( (uint64_t)&v54,  &v42,  &v30,  0xFFFFFFFFFFFFFFFFLL);
  __int16 v17 = v38;
  if (v38)
  {
    uint64_t v18 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    __int16 v21 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v50;
  if (v50)
  {
    id v24 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  int64x2_t v26 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    uint64_t v27 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v16;
}

void sub_18806FAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t DiskImageROChunkRaw::read(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v9);
  int v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_18806FB90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t DiskImageROChunkRaw::write()
{
  return -102LL;
}

uint64_t DiskImageROChunkRaw::flush()
{
  return 4294967251LL;
}

uint64_t DiskImage::unmap()
{
  return 4294967251LL;
}

uint64_t DiskImage::set_size(DiskImage *this)
{
  return 4294967218LL;
}

double DiskImage::get_io_constraints@<D0>(DiskImage *this@<X0>, _OWORD *a2@<X8>)
{
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void DiskImageROChunkRaw::ContextROChunkRaw::~ContextROChunkRaw( DiskImageROChunkRaw::ContextROChunkRaw *this)
{
  *(void *)this = off_18A1CAAB8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(void *)this = off_18A1CAAB8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  operator delete(this);
}

unint64_t for_each_sg_in_vec<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>( uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  unint64_t v15 = details::for_each_sg_in_vec_internal<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>( a1,  (sg_vec_ns *)&v40,  (const sg_vec_ns::details::sg_vec_iterator *)&v29,  a4,  0);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    __int16 v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    uint64_t v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    uint64_t v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    int64x2_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_18806FE20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

unint64_t details::for_each_sg_in_vec_internal<std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &,sg_entry const&),DiskImage*,std::reference_wrapper<DiskImage::Context>,std::placeholders::__ph<1> const&>>( uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v8 = 0LL;
  unint64_t v9 = *((void *)a3 + 18);
  v37[0] = 0;
  v37[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v9 || v8 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v35 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((void *)&v35 + 1) = 142LL;
      int v36 = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v30, &v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"sg: ", 4LL);
      operator<<(&v33);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v30);
      MEMORY[0x1895BC2CC](&v34);
    }

    v30[0] = 0LL;
    v30[1] = v9;
    char v31 = 2;
    trim_sg_to_interval(a2, (uint64_t)v30, (uint64_t)&v35);
    uint64_t v11 = *(void *)(a1 + 8);
    __int128 v12 = *(uint64_t (**)(void *, void, __int128 *))a1;
    __int128 v13 = (void *)(*(void *)(a1 + 16) + (v11 >> 1));
    if ((v11 & 1) != 0) {
      __int128 v12 = *(uint64_t (**)(void *, void, __int128 *))(*v13 + v12);
    }
    int64_t v14 = v12(v13, *(void *)(a1 + 24), &v35);
    unint64_t v16 = v14;
    BOOL v17 = v14 >= 0 || (_DWORD)v14 == 0;
    char v18 = v17;
    if (v17)
    {
      uint64_t v19 = (uint64_t)v15;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v15, v14))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v28, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v28, (uint64_t)a3, v19, v16, a4, (sg_vec_ref *)v30);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v37, (uint64_t)v30);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v30);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v28);
        sg_vec_ref::begin((sg_vec_ref *)v37, (uint64_t)v30);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v30);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v32);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v30);
        sg_vec_ref::end((sg_vec_ref *)v37, (uint64_t)v30);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v30);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v32);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v30);
      }

      if ((a5 & 1) != 0) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v16);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v16);
      }
      v8 += v16;
    }

    else
    {
      else {
        uint64_t v23 = -(int)v14;
      }
      unint64_t v25 = -v23;
    }

    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      unint64_t v21 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    if ((v18 & 1) == 0) {
      goto LABEL_37;
    }
  }

  unint64_t v25 = v8;
LABEL_37:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
  return v25;
}

void sub_188070128(_Unwind_Exception *a1)
{
}

void *DiskImageROChunkRaw::get_rounded_sg_entry@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
  unint64_t v9 = a2[4];
  uint64_t v10 = *a2;
  double result = details::get_dummy_shared_ptr();
  uint64_t v12 = result[1];
  *(void *)a3 = v10;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v12;
  if (v12)
  {
    __int128 v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v15 = v6 / v7 * v7;
  unint64_t v16 = v8 - v15;
  unint64_t v17 = v5 + v6 + v7 - 1 - v15 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v17) {
    unint64_t v17 = v9;
  }
  if (v16 >= v17) {
    unint64_t v16 = v17;
  }
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

uint64_t DiskImageRaw::DiskImageRaw(uint64_t a1, void *a2, unint64_t a3)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = &off_18A1CAB10;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 40LL))(*a2) % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = off_18A1E43B0;
    unint64_t v9 = std::generic_category();
    exception[1] = 152LL;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "Size is not a multiple of block size";
  }

  return a1;
}

void sub_188070338(_Unwind_Exception *a1)
{
}

  ;
}

void DiskImageRaw::~DiskImageRaw(DiskImageRaw *this)
{
  *(void *)this = &off_18A1CAB10;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(void *)this = &off_18A1CAB10;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  operator delete(this);
}

uint64_t DiskImageRaw::get_block_size(DiskImageRaw *this)
{
  return *((void *)this + 4);
}

unint64_t DiskImageRaw::get_num_blocks(DiskImageRaw *this)
{
}

uint64_t DiskImageRaw::is_writable(DiskImageRaw *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 48LL))(*((void *)this + 2));
}

info::DiskImageInfoRaw *DiskImageRaw::create_image_info@<X0>(DiskImageRaw *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (info::DiskImageInfoRaw *)operator new(0x98uLL);
  double result = info::DiskImageInfoRaw::DiskImageInfoRaw(v4, this);
  *a2 = (char *)v4 + *(void *)(*(void *)v4 - 104LL);
  return result;
}

void sub_18807044C(_Unwind_Exception *a1)
{
}

uint64_t DiskImageRaw::set_size(DiskImageRaw *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 56LL))(*((void *)this + 2));
}

uint64_t DiskImageRaw::supports_unmap(DiskImageRaw *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32LL))(*((void *)this + 2));
}

void *DiskImageRaw::_create_ctx(DiskImageRaw *this)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_18A1CAC10;
  v2[1] = this;
  (*(void (**)(void))(**((void **)this + 2) + 72LL))(*((void *)this + 2));
  return v2;
}

void sub_1880704CC(_Unwind_Exception *a1)
{
}

uint64_t DiskImageRaw::read( DiskImageRaw *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v68[80] = *MEMORY[0x1895F89C0];
  std::string __p = v68;
  __int128 v67 = xmmword_188179140;
  unint64_t v7 = sg_vec_ns::count_buffers(a3, a4, a3);
  uint64_t v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    }
    uint64_t v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>( (uint64_t)&__p,  (unint64_t)v10,  v9,  (_DWORD *)__p + 10 * v67,  0LL,  0LL);
  }

  v65[0] = &__p;
  v65[1] = a2;
  uint64_t v11 = *((void *)a3 + 1);
  *(void *)&__int128 v53 = *(void *)a3;
  *((void *)&v53 + 1) = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  v54[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v55 = *((void *)a3 + 6);
  __int128 v56 = *(_OWORD *)((char *)a3 + 56);
  __int128 v57 = *(_OWORD *)((char *)a3 + 72);
  __int128 v58 = *(_OWORD *)((char *)a3 + 88);
  char v59 = *((_BYTE *)a3 + 104);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v60 = *((void *)a3 + 14);
  unint64_t v61 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  __int128 v62 = *((_OWORD *)a3 + 8);
  uint64_t v63 = *((void *)a3 + 18);
  char v64 = *((_BYTE *)a3 + 152);
  uint64_t v17 = *((void *)a4 + 1);
  *(void *)&__int128 v41 = *(void *)a4;
  *((void *)&v41 + 1) = v17;
  if (v17)
  {
    char v18 = (unint64_t *)(v17 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  v42[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v43 = *((void *)a4 + 6);
  __int128 v44 = *(_OWORD *)((char *)a4 + 56);
  __int128 v45 = *(_OWORD *)((char *)a4 + 72);
  __int128 v46 = *(_OWORD *)((char *)a4 + 88);
  char v47 = *((_BYTE *)a4 + 104);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v48 = *((void *)a4 + 14);
  uint64_t v49 = v20;
  if (v20)
  {
    unint64_t v21 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  __int128 v50 = *((_OWORD *)a4 + 8);
  uint64_t v51 = *((void *)a4 + 18);
  char v52 = *((_BYTE *)a4 + 152);
  _Z18for_each_sg_in_vecIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m( (uint64_t)v65,  &v53,  &v41,  0xFFFFFFFFFFFFFFFFLL);
  uint64_t v23 = v49;
  if (v49)
  {
    unint64_t v24 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  int64x2_t v26 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1))
  {
    unint64_t v27 = (unint64_t *)(*((void *)&v41 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  uint64_t v29 = v61;
  if (v61)
  {
    uint64_t v30 = (unint64_t *)&v61->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  __int128 v32 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  if (*((void *)&v53 + 1))
  {
    uint64_t v33 = (unint64_t *)(*((void *)&v53 + 1) + 8LL);
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  (*(void (**)(void))(**((void **)a2 + 2) + 144LL))(*((void *)a2 + 2));
  if ((void)v67)
  {
    int v35 = 0;
    int v36 = (unsigned int *)__p;
    uint64_t v37 = 40 * v67;
    do
    {
      int v38 = lw_future<int>::get(v36);
      int v39 = v38;
      if (v38 < 0) {
        break;
      }
      v35 += v38;
      v36 += 10;
      int v39 = v35;
      v37 -= 40LL;
    }

    while (v37);
  }

  else
  {
    int v39 = 0;
  }

  if (*((void *)&v67 + 1) && v68 != __p) {
    operator delete(__p);
  }
  return v39;
}

void sub_188070880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  if (a53)
  {
    if (v55 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::write( DiskImageRaw *this, DiskImage::Context *a2, const sg_vec_ns::details::sg_vec_iterator *a3, const sg_vec_ns::details::sg_vec_iterator *a4)
{
  v68[80] = *MEMORY[0x1895F89C0];
  std::string __p = v68;
  __int128 v67 = xmmword_188179140;
  unint64_t v7 = sg_vec_ns::count_buffers(a3, a4, a3);
  uint64_t v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    }
    uint64_t v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>( (uint64_t)&__p,  (unint64_t)v10,  v9,  (_DWORD *)__p + 10 * v67,  0LL,  0LL);
  }

  v65[0] = &__p;
  v65[1] = a2;
  uint64_t v11 = *((void *)a3 + 1);
  *(void *)&__int128 v53 = *(void *)a3;
  *((void *)&v53 + 1) = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  v54[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v55 = *((void *)a3 + 6);
  __int128 v56 = *(_OWORD *)((char *)a3 + 56);
  __int128 v57 = *(_OWORD *)((char *)a3 + 72);
  __int128 v58 = *(_OWORD *)((char *)a3 + 88);
  char v59 = *((_BYTE *)a3 + 104);
  unint64_t v14 = (std::__shared_weak_count *)*((void *)a3 + 15);
  uint64_t v60 = *((void *)a3 + 14);
  unint64_t v61 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  __int128 v62 = *((_OWORD *)a3 + 8);
  uint64_t v63 = *((void *)a3 + 18);
  char v64 = *((_BYTE *)a3 + 152);
  uint64_t v17 = *((void *)a4 + 1);
  *(void *)&__int128 v41 = *(void *)a4;
  *((void *)&v41 + 1) = v17;
  if (v17)
  {
    char v18 = (unint64_t *)(v17 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  v42[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v43 = *((void *)a4 + 6);
  __int128 v44 = *(_OWORD *)((char *)a4 + 56);
  __int128 v45 = *(_OWORD *)((char *)a4 + 72);
  __int128 v46 = *(_OWORD *)((char *)a4 + 88);
  char v47 = *((_BYTE *)a4 + 104);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v48 = *((void *)a4 + 14);
  uint64_t v49 = v20;
  if (v20)
  {
    unint64_t v21 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  __int128 v50 = *((_OWORD *)a4 + 8);
  uint64_t v51 = *((void *)a4 + 18);
  char v52 = *((_BYTE *)a4 + 152);
  _Z18for_each_sg_in_vecIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m( (uint64_t)v65,  &v53,  &v41,  0xFFFFFFFFFFFFFFFFLL);
  uint64_t v23 = v49;
  if (v49)
  {
    unint64_t v24 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  int64x2_t v26 = (std::__shared_weak_count *)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1))
  {
    unint64_t v27 = (unint64_t *)(*((void *)&v41 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  uint64_t v29 = v61;
  if (v61)
  {
    uint64_t v30 = (unint64_t *)&v61->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  __int128 v32 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  if (*((void *)&v53 + 1))
  {
    uint64_t v33 = (unint64_t *)(*((void *)&v53 + 1) + 8LL);
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  (*(void (**)(void))(**((void **)a2 + 2) + 144LL))(*((void *)a2 + 2));
  if ((void)v67)
  {
    int v35 = 0;
    int v36 = (unsigned int *)__p;
    uint64_t v37 = 40 * v67;
    do
    {
      int v38 = lw_future<int>::get(v36);
      int v39 = v38;
      if (v38 < 0) {
        break;
      }
      v35 += v38;
      v36 += 10;
      int v39 = v35;
      v37 -= 40LL;
    }

    while (v37);
  }

  else
  {
    int v39 = 0;
  }

  if (*((void *)&v67 + 1) && v68 != __p) {
    operator delete(__p);
  }
  return v39;
}

void sub_188070C70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  if (a53)
  {
    if (v55 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t DiskImageRaw::flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), a3);
}

uint64_t DiskImageRaw::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a4;
  for (uint64_t i = (void *)(a3 + 8); ; i += 2)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 16) + 24LL))( *(void *)(a2 + 16),  *(void *)(a1 + 32) * *(i - 1),  *i * *(void *)(a1 + 32));
    if ((_DWORD)result) {
      break;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return result;
}

void DiskImageRaw::ContextRaw::~ContextRaw(DiskImageRaw::ContextRaw *this)
{
  *(void *)this = off_18A1CAC10;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(void *)this = off_18A1CAC10;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  operator delete(this);
}

uint64_t sg_vec_ns::count_buffers( sg_vec_ns *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  __int128 v3 = *(_OWORD *)((char *)this + 72);
  __int128 v21 = *(_OWORD *)((char *)this + 56);
  __int128 v22 = v3;
  __int128 v23 = *(_OWORD *)((char *)this + 88);
  char v24 = *((_BYTE *)this + 104);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  uint64_t v25 = *((void *)this + 14);
  int64x2_t v26 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  __int128 v27 = *((_OWORD *)this + 8);
  uint64_t v7 = *((void *)a2 + 7);
  uint64_t v8 = *((void *)a2 + 8);
  __int128 v20 = *(_OWORD *)((char *)a2 + 72);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 15);
  if (v9)
  {
    uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    BOOL v13 = (void)v21 == v7 && *((void *)&v21 + 1) == v8;
    if (v13 && (void)v22 == (void)v20) {
      break;
    }
    sg_vec_ns::details::buffer_iterator::operator++((sg_vec_ns::details::buffer_iterator *)&v21);
  }

  if (v9)
  {
    unint64_t v14 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  unint64_t v16 = v26;
  if (v26)
  {
    uint64_t v17 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  return i;
}

void sub_188070F20(_Unwind_Exception *a1)
{
}

uint64_t _Z18for_each_sg_in_vecIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m( uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  uint64_t v15 = _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb( a1,  (sg_vec_ns *)&v40,  (const sg_vec_ns::details::sg_vec_iterator *)&v29,  a4,  0);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    __int128 v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  __int128 v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    __int128 v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    int64x2_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_18807112C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>( uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = *(void *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>( a1,  *(_DWORD **)a1,  a4,  (_DWORD *)(*(void *)a1 + 40LL * *(void *)(a1 + 8)),  a2,  a5,  a6);
  if (v10 && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  uint64_t v11 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
  *(void *)(a1 + 16) = a3;
}

void sub_1880711E0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>( uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    __int128 v12 = a2;
    do
    {
      lw_future<int>::lw_future(a5, v12);
      v12 += 10;
      a5 += 40LL;
    }

    while (v12 != v11);
  }

  if (a6)
  {
    uint64_t v13 = a6;
    unint64_t v14 = a5;
    do
    {
      unint64_t v15 = lw_future<int>::lw_future(v14, a7);
      a7 += 10;
      unint64_t v14 = v15 + 40;
      --v13;
    }

    while (v13);
  }

  if (v11 != a4)
  {
    unint64_t v16 = a5 + 40 * a6;
    do
    {
      unint64_t v17 = lw_future<int>::lw_future(v16, v11);
      v11 += 10;
      unint64_t v16 = v17 + 40;
    }

    while (v11 != a4);
  }

void sub_1880712B4(void *a1)
{
}

void sub_1880712BC()
{
}

void sub_1880712F8()
{
}

unint64_t lw_future<int>::lw_future(unint64_t a1, _DWORD *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = ref::details::_get_tagged_ptr_lock(a1, a2);
  *(void *)(a1 + 24) = ref::details::_get_tagged_ptr_cond(a1, v4);
  if (*((_BYTE *)a2 + 4))
  {
    *(_DWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 4) = 1;
  }

  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0LL;
  __int128 v5 = *(unint64_t **)(a1 + 32);
  if (v5) {
    *__int128 v5 = a1;
  }
  return a1;
}

uint64_t _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw4readERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb( uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *((void *)a3 + 18);
  v35[0] = 0;
  v35[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v8 || v7 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((void *)&v32 + 1) = 104LL;
      LODWORD(v33) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v27, &v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"sg: ", 4LL);
      operator<<(&v30);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v27);
      MEMORY[0x1895BC2CC](&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    trim_sg_to_interval(a2, (uint64_t)v27, (uint64_t)&v32);
    uint64_t v10 = *(uint64_t **)a1;
    (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(*(void *)(a1 + 8) + 16LL) + 128LL))( v27,  *(void *)(*(void *)(a1 + 8) + 16LL),  &v32);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( v10,  (_DWORD *)(*v10 + 40 * v11),  (const char *)1,  v27,  &v36);
    }

    else
    {
      lw_future<int>::lw_future(*v10 + 40 * v11, v27);
      ++v10[1];
    }

    uint64_t v12 = (int)v33;
    if ((v33 & 0x80000000) != 0) {
      int64_t v13 = (int)v33;
    }
    else {
      int64_t v13 = v33;
    }
    BOOL v14 = v13 >= 0 || (_DWORD)v13 == 0;
    char v15 = v14;
    if (v14)
    {
      unint64_t v16 = v34;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v34, v13))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v25, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v25, (uint64_t)a3, (uint64_t)v16, v13, a4, (sg_vec_ref *)v27);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v25);
        sg_vec_ref::begin((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
        sg_vec_ref::end((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      v7 += v13;
    }

    else
    {
      uint64_t v21 = v12;
    }

    unint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v15 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = v7;
LABEL_40:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v35);
  return v21;
}

void sub_1880716A8(_Unwind_Exception *a1)
{
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( uint64_t *a1@<X0>, _DWORD *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>( (uint64_t)a1,  a3);
  if (v11 >= 0x333333333333334LL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  BOOL v14 = operator new(40 * v11);
  boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( (uint64_t)a1,  (unint64_t)v14,  v13,  a2,  (uint64_t)a3,  a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>( uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x333333333333333LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  __int128 v9 = &a2[v3];
  if (v8 < 0x333333333333333LL) {
    unint64_t v2 = v8;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v10 = *(void *)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( a1,  *(_DWORD **)a1,  a4,  (_DWORD *)(*(void *)a1 + 40LL * *(void *)(a1 + 8)),  a2,  a5,  a6);
  if (v10 && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  uint64_t v11 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
  *(void *)(a1 + 16) = a3;
}

void sub_1880718C8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

unint64_t boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      unint64_t v13 = lw_future<int>::lw_future(a5, v12);
      v12 += 10;
      a5 = v13 + 40;
    }

    while (v12 != v11);
  }

  unint64_t result = lw_future<int>::lw_future(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      unint64_t v15 = lw_future<int>::lw_future(result, v11);
      v11 += 10;
      unint64_t result = v15 + 40;
    }

    while (v11 != a4);
  }

  return result;
}

void sub_18807197C(void *a1)
{
}

void sub_188071984()
{
}

void sub_1880719A4()
{
}

uint64_t lw_future<int>::get(unsigned int *a1)
{
  if (*((_BYTE *)a1 + 4)) {
    return *a1;
  }
  unint64_t v4 = (unint64_t *)(a1 + 2);
  do
    unint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  unint64_t v6 = (std::mutex *)*((void *)a1 + 2);
  v9.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)a1 + 2);
  v9.__owns_ = 1;
  std::mutex::lock(v6);
  if (!*((_BYTE *)a1 + 4))
  {
    uint64_t v7 = (std::condition_variable *)*((void *)a1 + 3);
    do
      std::condition_variable::wait(v7, &v9);
    while (!*((_BYTE *)a1 + 4));
  }

  do
    unint64_t v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  std::unique_lock<std::mutex>::unlock(&v9);
  uint64_t v2 = *a1;
  if (v9.__owns_) {
    std::mutex::unlock(v9.__m_);
  }
  return v2;
}

void sub_188071A6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z18for_each_sg_in_vecIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES8_EUlRKT_E_E11io_result_tOS9_S6_S6_m( uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  uint64_t v15 = _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb( a1,  (sg_vec_ns *)&v40,  (const sg_vec_ns::details::sg_vec_iterator *)&v29,  a4,  0);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    unint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    __int128 v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  __int128 v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    __int128 v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    uint64_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_188071C78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t _ZN7details27for_each_sg_in_vec_internalIZN12DiskImageRaw5writeERN9DiskImage7ContextERKN9sg_vec_ns7details15sg_vec_iteratorES9_EUlRKT_E_EE11io_result_tOSA_S7_S7_mb( uint64_t a1, sg_vec_ns *a2, const sg_vec_ns::details::sg_vec_iterator *a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *((void *)a3 + 18);
  v35[0] = 0;
  v35[528] = 0;
  while (!sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)a2, (uint64_t)a3))
  {
    if (*((void *)a2 + 18) >= v8 || v7 >= a4) {
      break;
    }
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((void *)&v32 + 1) = 104LL;
      LODWORD(v33) = 2;
      di_log::logger<di_log::log_printer<545ul>>::logger(v27, &v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"sg: ", 4LL);
      operator<<(&v30);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)v27);
      MEMORY[0x1895BC2CC](&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    trim_sg_to_interval(a2, (uint64_t)v27, (uint64_t)&v32);
    __int128 v10 = *(uint64_t **)a1;
    (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(*(void *)(a1 + 8) + 16LL) + 136LL))( v27,  *(void *)(*(void *)(a1 + 8) + 16LL),  &v32);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( v10,  (_DWORD *)(*v10 + 40 * v11),  (const char *)1,  v27,  &v36);
    }

    else
    {
      lw_future<int>::lw_future(*v10 + 40 * v11, v27);
      ++v10[1];
    }

    uint64_t v12 = (int)v33;
    if ((v33 & 0x80000000) != 0) {
      int64_t v13 = (int)v33;
    }
    else {
      int64_t v13 = v33;
    }
    BOOL v14 = v13 >= 0 || (_DWORD)v13 == 0;
    char v15 = v14;
    if (v14)
    {
      unint64_t v16 = v34;
      if (sg_vec_ns::should_create_new_sg_vec_ref(a2, a3, v34, v13))
      {
        sg_vec_ns::details::sg_vec_iterator::sg_vec_iterator((uint64_t)v25, (uint64_t)a2);
        sg_vec_ns::generate_vec_ref((uint64_t)v25, (uint64_t)a3, (uint64_t)v16, v13, a4, (sg_vec_ref *)v27);
        std::optional<sg_vec_ref>::operator=[abi:ne180100]<sg_vec_ref,void>((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ref::~sg_vec_ref((sg_vec_ref *)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v25);
        sg_vec_ref::begin((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a2, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
        sg_vec_ref::end((sg_vec_ref *)v35, (uint64_t)v27);
        sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)a3, (uint64_t)v27);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v29);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      else {
        sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)a2, v13);
      }
      v7 += v13;
    }

    else
    {
      uint64_t v21 = v12;
    }

    unint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v15 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = v7;
LABEL_40:
  std::__optional_destruct_base<sg_vec_ref,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v35);
  return v21;
}

void sub_188071FCC(_Unwind_Exception *a1)
{
}

uint64_t DiskImagePlugin::DiskImagePlugin(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = &off_18A1C8658;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v3;
  if (v3)
  {
    __int128 v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  __int128 v6 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 32);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }

  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0LL;
  return a1;
}

void sub_1880720D8(_Unwind_Exception *a1)
{
}

void *DiskImageUDIF::DiskImageUDIF(void *a1, uint64_t *a2, void *a3)
{
  v6[0] = off_18A1CAC68;
  DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::DiskImageUDIFRead((uint64_t)a1, (uint64_t)v6, a3);
  udif::details::UDIF_base::~UDIF_base((udif::details::UDIF_base *)v6);
  *a1 = &unk_18A1DEE68;
  return a1;
}

void sub_188072154(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::DiskImageUDIFRead( uint64_t a1, uint64_t a2, void *a3)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = &off_18A1CACA8;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *a3;
  *(void *)(a1 + 56) = v5;
  if (v5)
  {
    __int128 v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)udif::details::UDIF_base::UDIF_base(a1 + 64, a2) = off_18A1CAC68;
  if (*(_BYTE *)(a2 + 88))
  {
    uint64_t v8 = *(void *)(a2 + 96);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = 1LL;
    *(void *)(a1 + 32) = 2 * v8;
    *(void *)(a1 + 40) = 0LL;
  }

  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }

  return a1;
}

void sub_18807220C(_Unwind_Exception *a1)
{
}

void UDIFReader<locks::None>::~UDIFReader(udif::details::UDIF_base *a1)
{
}

  ;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_block_size()
{
  return 512LL;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_num_blocks(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

__n128 DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::get_io_constraints@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::may_read_extra(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void *DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::_create_ctx(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::ContextUDIF((uint64_t)v2, a1);
  return v2;
}

void sub_188072298(_Unwind_Exception *a1)
{
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::read( uint64_t a1, uint64_t a2, sg_vec_ns *this, sg_vec_ns::details::sg_vec_iterator *a4)
{
  v178[128] = *MEMORY[0x1895F89C0];
  v176 = v178;
  __int128 v177 = xmmword_188179140;
  std::string __p = v175;
  __int128 v174 = xmmword_188179140;
  unint64_t v7 = sg_vec_ns::count_buffers(this, a4, this);
  uint64_t v9 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v8);
    }
    __int128 v10 = operator new(40 * v7);
    boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,boost::move_iterator<lw_future<int>*>,lw_future<int>*>>( (uint64_t)&__p,  (unint64_t)v10,  v9,  (_DWORD *)__p + 10 * v174,  0LL,  0LL);
  }

  uint64_t v11 = *((void *)a4 + 18) - *((void *)this + 18);
  udif::details::UDIF_base::_get_runs_for_io( (udif::details::UDIF_base *)(a1 + 64),  *((void *)this + 3),  v11 & ~(v11 >> 63),  (uint64_t *)&v176);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a4 + 1);
  uint64_t v159 = *(void *)a4;
  v160 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  __int128 v15 = *(_OWORD *)((char *)a4 + 56);
  v161[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v162 = *((void *)a4 + 6);
  __int128 v163 = v15;
  __int128 v16 = *(_OWORD *)((char *)a4 + 88);
  __int128 v164 = *(_OWORD *)((char *)a4 + 72);
  __int128 v165 = v16;
  char v166 = *((_BYTE *)a4 + 104);
  unint64_t v17 = (std::__shared_weak_count *)*((void *)a4 + 15);
  uint64_t v167 = *((void *)a4 + 14);
  v168 = v17;
  if (v17)
  {
    unint64_t v18 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  __int128 v169 = *((_OWORD *)a4 + 8);
  uint64_t v170 = *((void *)a4 + 18);
  char v171 = *((_BYTE *)a4 + 152);
  v157[0] = 0;
  char v158 = 0;
  __int128 v20 = (char *)v176;
  unint64_t v122 = *((void *)v176 + 3);
  uint64_t v21 = *((void *)this + 1);
  *(void *)&__int128 v145 = *(void *)this;
  *((void *)&v145 + 1) = v21;
  if (v21)
  {
    __int128 v22 = (unint64_t *)(v21 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  __int128 v24 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)__int128 v146 = *((_OWORD *)this + 1);
  *(_OWORD *)&v146[9] = *(_OWORD *)((char *)this + 25);
  uint64_t v147 = *((void *)this + 6);
  __int128 v148 = v24;
  __int128 v25 = *(_OWORD *)((char *)this + 88);
  __int128 v149 = *(_OWORD *)((char *)this + 72);
  __int128 v150 = v25;
  char v151 = *((_BYTE *)this + 104);
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 15);
  uint64_t v152 = *((void *)this + 14);
  v153 = v26;
  if (v26)
  {
    unint64_t v27 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }

  __int128 v154 = *((_OWORD *)this + 8);
  uint64_t v155 = *((void *)this + 18);
  char v156 = *((_BYTE *)this + 152);
  uint64_t v120 = a2;
  if (!(void)v177)
  {
    uint64_t v29 = 0LL;
    uint64_t v125 = 0LL;
    goto LABEL_126;
  }

  uint64_t v29 = 0LL;
  char v124 = &v20[64 * (void)v177];
  uint64_t v125 = 0LL;
  __int128 v123 = (uint64_t **)(a2 + 16);
  while (1)
  {
    size_t v30 = *((void *)v20 + 4);
    if (v30)
    {
    }

    if (v30 > *(void *)&v146[16]) {
      sg_vec_ns::details::sg_vec_iterator::operator++((uint64_t)&v145);
    }
    if (sg_vec_ns::details::sg_vec_iterator::operator==((uint64_t)&v145, (uint64_t)&v159))
    {
      *(void *)&__int128 v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v143 + 1) = 75LL;
      *(_DWORD *)uint64_t v144 = 16;
      di_log::logger<di_log::log_printer<184ul>>::logger(&v126, &v143);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v133,  (uint64_t)"Udif: advanced buffer, needs to read ",  37LL);
      udif::operator<<(&v133, (int *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v133,  (uint64_t)" but buffer is full",  19LL);
      std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(void *)(v133 - 24)));
      char v95 = std::locale::use_facet((const std::locale *)&v139, MEMORY[0x189614558]);
      ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10LL);
      std::locale::~locale((std::locale *)&v139);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf((uint64_t)&v126);
      goto LABEL_125;
    }

    __int128 v31 = v145;
    __int128 v143 = v145;
    if (*((void *)&v145 + 1))
    {
      __int128 v32 = (unint64_t *)(*((void *)&v145 + 1) + 8LL);
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    *(_OWORD *)&v144[9] = *(_OWORD *)&v146[9];
    *(_OWORD *)uint64_t v144 = *(_OWORD *)v146;
    unint64_t v34 = *(_OWORD *)&v146[9] >> 56;
    if (v30 > v34)
    {
      *(void *)&__int128 v139 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v139 + 1) = 75LL;
      v140.i32[0] = 16;
      di_log::logger<di_log::log_printer<193ul>>::logger(&v126, &v139);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v133,  (uint64_t)"Udif: needs to read ",  20LL);
      udif::operator<<(&v133, (int *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v133,  (uint64_t)" but buffer is too small ",  25LL);
      std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(void *)(v133 - 24)));
      char v35 = std::locale::use_facet((const std::locale *)&v137, MEMORY[0x189614558]);
      ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10LL);
      std::locale::~locale((std::locale *)&v137);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf((uint64_t)&v126);
      MEMORY[0x1895BC2CC](&v134);
      int v36 = 2;
      uint64_t v29 = -28LL;
      goto LABEL_45;
    }

    if (!*(_DWORD *)v20)
    {
      bzero((void *)v31, v30);
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
LABEL_44:
      int v36 = 0;
      v125 += v30;
      goto LABEL_45;
    }

    int8x16_t v37 = *(int8x16_t *)(v20 + 8);
    uint64_t v38 = *((void *)v20 + 4);
    __int128 v139 = v31;
    if (*((void *)&v31 + 1))
    {
      char v39 = (unint64_t *)(*((void *)&v31 + 1) + 8LL);
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    int8x16_t v140 = vextq_s8(v37, v37, 8uLL);
    uint64_t v141 = v38;
    char v142 = 0;
    if (v125)
    {
      *(void *)&__int128 v137 = v20;
      __int128 v41 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>( v123,  (unsigned int *)v20,  (uint64_t)&std::piecewise_construct,  (_DWORD **)&v137);
      (*(void (**)(_DWORD **__return_ptr, uint64_t *, __int128 *))(*v41[5] + 128))(&v126, v41[5], &v139);
      if ((void)v174 == *((void *)&v174 + 1))
      {
        boost::container::vector<lw_future<int>,boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<lw_future<int>,boost::container::new_allocator<void>,void>,lw_future<int>*,lw_future<int>>>( (uint64_t *)&__p,  (_DWORD *)__p + 10 * v174,  (const char *)1,  &v126,  &v137);
      }

      else
      {
        lw_future<int>::lw_future((unint64_t)__p + 40 * v174, &v126);
        *(void *)&__int128 v174 = v174 + 1;
      }

      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
    }

    else
    {
      __int128 v126 = v20;
      uint64_t v49 = std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>( v123,  (unsigned int *)v20,  (uint64_t)&std::piecewise_construct,  &v126);
      int v50 = (*(uint64_t (**)(uint64_t *, __int128 *))(*v49[5] + 88))(v49[5], &v139);
      uint64_t v29 = v50;
      if (v50 < 0)
      {
        char v42 = 0;
        int v36 = 2;
        goto LABEL_37;
      }

      if (*(_BYTE *)(v120 + 56) && *((int *)v20 + 8) > (uint64_t)v50)
      {
        *(void *)&__int128 v137 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((void *)&v137 + 1) = 75LL;
        int v138 = 16;
        di_log::logger<di_log::log_printer<214ul>>::logger(&v126, &v137);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v133,  (uint64_t)"Error: Not enough data read. expected: ",  39LL);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v133, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)&v133 + *(void *)(v133 - 24)));
        uint64_t v51 = std::locale::use_facet(&v172, MEMORY[0x189614558]);
        ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
        std::locale::~locale(&v172);
        std::ostream::put();
        std::ostream::flush();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf((uint64_t)&v126);
        MEMORY[0x1895BC2CC](&v134);
        char v42 = 0;
        int v36 = 2;
        uint64_t v29 = -5LL;
        goto LABEL_37;
      }

      uint64_t v52 = DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::trim_io( a1,  (void **)&v139,  (uint64_t)v20,  &v176,  v34);
      v30 -= v52;
      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
      if ((void)v177)
      {
        uint64_t v53 = 0LL;
        uint64_t v54 = 0LL;
        uint64_t v55 = (void)v177 << 6;
        __int128 v56 = (uint64_t *)((char *)v176 + 32);
        do
        {
          uint64_t v58 = *v56;
          v56 += 8;
          uint64_t v57 = v58;
          uint64_t v59 = v58 + v53;
          uint64_t v60 = v58 + v54;
          uint64_t v61 = v34 - v54;
          BOOL v62 = v58 + v54 > v34;
          if (v58 + v54 >= v34) {
            uint64_t v54 = 0LL;
          }
          else {
            uint64_t v54 = v60;
          }
          if (v62)
          {
            uint64_t v54 = v57;
            uint64_t v63 = v61;
          }

          else
          {
            uint64_t v63 = 0LL;
          }

          uint64_t v53 = v59 + v63;
          v55 -= 64LL;
        }

        while (v55);
      }

      else
      {
        uint64_t v53 = 0LL;
      }

      char cow = sg_vec_ns::details::sg_vec_iterator::get_cow(this);
      v122 += v52;
      sg_vec_ref::sg_vec_ref( (sg_vec_ref *)&v126,  (sg_vec_ns *)((char *)this + 56),  (sg_vec_ns::details::sg_vec_iterator *)((char *)a4 + 56),  v122,  v53 - v52,  cow);
      std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100]((uint64_t)v157);
      sg_vec_ref::sg_vec_ref((sg_vec_ref *)v157, (uint64_t)&v126);
      char v158 = 1;
      v65 = v136;
      if (v136)
      {
        v66 = (unint64_t *)&v136->__shared_owners_;
        do
          unint64_t v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }

      unint64_t v68 = v135;
      if (v135)
      {
        unint64_t v69 = (unint64_t *)&v135->__shared_owners_;
        do
          unint64_t v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }

      unint64_t v71 = v132;
      if (v132)
      {
        __int128 v72 = (unint64_t *)&v132->__shared_owners_;
        do
          unint64_t v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }

      __int128 v74 = v131;
      if (v131)
      {
        uint64_t v75 = (unint64_t *)&v131->__shared_owners_;
        do
          unint64_t v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }

      unint64_t v77 = v130;
      if (v130)
      {
        uint64_t v78 = (unint64_t *)&v130->__shared_owners_;
        do
          unint64_t v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }

      uint64_t v80 = v128;
      if (v128)
      {
        unint64_t v81 = (unint64_t *)&v128->__shared_owners_;
        do
          unint64_t v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }

      sg_vec_ref::begin((sg_vec_ref *)v157, (uint64_t)&v126);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v145, (uint64_t)&v126);
      __int128 v83 = v129;
      if (v129)
      {
        char v84 = (unint64_t *)&v129->__shared_owners_;
        do
          unint64_t v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }

      __int128 v86 = v127;
      if (v127)
      {
        __int128 v87 = (unint64_t *)&v127->__shared_owners_;
        do
          unint64_t v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }

      sg_vec_ns::details::sg_vec_iterator::operator+=((uint64_t)&v145, v30);
      sg_vec_ref::end((sg_vec_ref *)v157, (uint64_t)&v126);
      sg_vec_ns::details::sg_vec_iterator::operator=((uint64_t)&v159, (uint64_t)&v126);
      __int128 v89 = v129;
      if (v129)
      {
        __int128 v90 = (unint64_t *)&v129->__shared_owners_;
        do
          unint64_t v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }

      char v92 = v127;
      if (v127)
      {
        __int128 v93 = (unint64_t *)&v127->__shared_owners_;
        do
          unint64_t v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
    }

    int v36 = 0;
    char v42 = 1;
LABEL_37:
    __int128 v43 = (std::__shared_weak_count *)*((void *)&v139 + 1);
    if (!*((void *)&v139 + 1)) {
      goto LABEL_41;
    }
    __int128 v44 = (unint64_t *)(*((void *)&v139 + 1) + 8LL);
    do
      unint64_t v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if ((v42 & 1) != 0) {
        goto LABEL_44;
      }
    }

    else
    {
LABEL_41:
      if ((v42 & 1) != 0) {
        goto LABEL_44;
      }
    }

void sub_1880731F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (STACK[0x650] && a11 != STACK[0x640]) {
    operator delete((void *)STACK[0x640]);
  }
  if (STACK[0x8E8])
  {
    if (a12 != STACK[0x8D8]) {
      operator delete((void *)STACK[0x8D8]);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::flush()
{
  return 4294967251LL;
}

uint64_t udif::details::UDIF_base::UDIF_base(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = off_18A1E58D8;
  *(void *)(result + _Block_object_dispose(va, 8) = v2;
  __int128 v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v4;
  uint64_t v5 = result + 16;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v3;
    void *v3 = 0LL;
    *(void *)(a2 + 24) = 0LL;
  }

  else
  {
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
  }

  *(void *)(result + 32) = *(void *)(a2 + 32);
  unint64_t v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v8;
  uint64_t v9 = result + 40;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 32) = v7;
    *unint64_t v7 = 0LL;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
    *(void *)(result + 32) = v9;
  }

  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0LL;
  *(void *)(result + 72) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 80) = v12;
  *(void *)(result + 104) = *(void *)(a2 + 104);
  int64_t v13 = (void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = v14;
  uint64_t v15 = result + 112;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(result + 120) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a2 + 104) = v13;
    void *v13 = 0LL;
    *(void *)(a2 + 120) = 0LL;
  }

  else
  {
    *(void *)(result + 104) = v15;
  }

  return result;
}

void std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( a1,  a2[1]);
    operator delete(a2);
  }

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::ContextUDIF( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_18A1CADA8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 16) = a1 + 24;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  uint64_t v5 = a1 + 40;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  udif::details::UDIF_base::make_backend_contexts((udif::details::UDIF_base *)(a2 + 64), (uint64_t)&v12);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( (uint64_t)v4,  *(void **)(a1 + 24));
  uint64_t v6 = v13;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = v14;
  *(void *)(a1 + 32) = v14;
  if (v7)
  {
    v6[2] = v3;
    __int128 v12 = &v13;
    int64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  else
  {
    *uint64_t v4 = v3;
  }

  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v5, &v15);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v9 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( (uint64_t)&v12,  v13);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

void sub_1880735A8(_Unwind_Exception *a1)
{
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::~ContextUDIF(uint64_t a1)
{
  *(void *)a1 = off_18A1CADA8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 40);
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( a1 + 16,  *(void **)(a1 + 24));
  return a1;
}

void DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::ContextUDIF::~ContextUDIF(void **a1)
{
  *a1 = off_18A1CADA8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( (uint64_t)(a1 + 2),  a1[3]);
  operator delete(a1);
}

void std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( a1,  a2[1]);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }

void *di_log::logger<di_log::log_printer<175ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<175ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CAE08;
  a1[45] = &unk_18A1CAF08;
  a1[46] = &unk_18A1CAF30;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CAE08;
  a1[45] = &unk_18A1CAE90;
  a1[46] = &unk_18A1CAEB8;
  return a1;
}

void sub_18807370C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<184ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<184ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CB028;
  a1[45] = &unk_18A1CB128;
  a1[46] = &unk_18A1CB150;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CB028;
  a1[45] = &unk_18A1CB0B0;
  a1[46] = &unk_18A1CB0D8;
  return a1;
}

void sub_1880737F4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<193ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<193ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CB248;
  a1[45] = &unk_18A1CB348;
  a1[46] = &unk_18A1CB370;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CB248;
  a1[45] = &unk_18A1CB2D0;
  a1[46] = &unk_18A1CB2F8;
  return a1;
}

void sub_1880738DC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<214ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<214ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CB468;
  a1[45] = &unk_18A1CB568;
  a1[46] = &unk_18A1CB590;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CB468;
  a1[45] = &unk_18A1CB4F0;
  a1[46] = &unk_18A1CB518;
  return a1;
}

void sub_1880739C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageUDIFRead<UDIFReader<locks::None>,DiskImageUDIF>::trim_io( uint64_t a1, void **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5 = a4[1];
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = v5 << 6;
  uint64_t v9 = (uint64_t *)(*a4 + 32LL);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 + v6;
    uint64_t v13 = v11 + v7;
    uint64_t v14 = a5 - v7;
    BOOL v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = v13;
    }
    if (v15)
    {
      uint64_t v7 = v10;
      uint64_t v16 = v14;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    unint64_t v6 = v12 + v16;
    v8 -= 64LL;
  }

  while (v8);
  if (v6 <= a5 + a5 * *(void *)(a1 + 24)) {
    return 0LL;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(void *)(a3 + 32) - v17);
  return v17;
}

void *di_log::logger<di_log::log_printer<254ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<254ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CB688;
  a1[45] = &unk_18A1CB788;
  a1[46] = &unk_18A1CB7B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CB688;
  a1[45] = &unk_18A1CB710;
  a1[46] = &unk_18A1CB738;
  return a1;
}

void sub_188073B40(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CAFA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188073C0C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CAFA0;
  di_log::logger_buf<di_log::log_printer<175ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<175ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<175ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<175ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<175ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<175ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<175ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_188073FC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<175ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 175LL;
    __int16 v21 = 2082;
    __int128 v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 175LL;
      __int16 v21 = 2082;
      __int128 v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CB1C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188074244(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CB1C0;
  di_log::logger_buf<di_log::log_printer<184ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<184ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<184ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<184ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<184ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<184ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<184ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880745F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<184ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 184LL;
    __int16 v21 = 2082;
    __int128 v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 184LL;
      __int16 v21 = 2082;
      __int128 v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CB3E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18807487C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CB3E0;
  di_log::logger_buf<di_log::log_printer<193ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<193ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<193ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<193ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<193ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<193ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<193ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_188074C30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<193ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 193LL;
    __int16 v21 = 2082;
    __int128 v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 193LL;
      __int16 v21 = 2082;
      __int128 v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t **std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::__emplace_unique_key_args<udif::run_type,std::piecewise_construct_t const&,std::tuple<udif::run_type const&>,std::tuple<>>( uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  char v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        char v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      char v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((void *)v12 + 5) = 0LL;
    *((void *)v12 + 6) = 0LL;
    char v15 = 1;
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at( a1,  (uint64_t)v9,  v8,  (uint64_t *)v12);
    v14[0] = 0LL;
    std::unique_ptr<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>>>>::reset[abi:ne180100]( (uint64_t)v14,  0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,void *>>>>::reset[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    }
    operator delete(v2);
  }

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CB600;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188074FDC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CB600;
  di_log::logger_buf<di_log::log_printer<214ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<214ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<214ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<214ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<214ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<214ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<214ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_188075390( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<214ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 214LL;
    __int16 v21 = 2082;
    __int128 v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 214LL;
      __int16 v21 = 2082;
      __int128 v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t std::__optional_destruct_base<sg_vec_ref,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(_BYTE *)(result + 528))
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 368;
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](result + 480);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 320);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 208);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 152);
    __n128 result = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v1 + 64);
    *(_BYTE *)(v1 + 52_Block_object_dispose(va, 8) = 0;
  }

  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CB820;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_188075674(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CB820;
  di_log::logger_buf<di_log::log_printer<254ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<254ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<254ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<254ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<254ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<254ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<254ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_188075A28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<254ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 254LL;
    __int16 v21 = 2082;
    __int128 v22 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 254LL;
      __int16 v21 = 2082;
      __int128 v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void udif::details::UDIF_base::~UDIF_base(udif::details::UDIF_base *this)
{
  *(void *)this = off_18A1E58D8;
  std::__tree<std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::__map_value_compare<udif::run_type,std::__value_type<udif::run_type,std::shared_ptr<Backend>>,std::less<udif::run_type>,true>,std::allocator<std::__value_type<udif::run_type,std::shared_ptr<Backend>>>>::destroy( (uint64_t)this + 104,  *((void **)this + 14));
  unsigned __int8 v2 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)this + 32,  *((void **)this + 5));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)this + 8,  *((void **)this + 2));
}

{
  void *v1;
  udif::details::UDIF_base::~UDIF_base(this);
  operator delete(v1);
}

void *std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,std::default_delete<char []>,void>( void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &unk_18A1CB8A0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_188075CF4(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_188075D0C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t std::__shared_ptr_pointer<char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *std::shared_ptr<unsigned char>::shared_ptr[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>( void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &unk_18A1CB900;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_188075DD0(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_188075DE8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<unsigned char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<unsigned char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *std::allocate_shared[abi:ne180100]<DiskImageASIF,std::allocator<DiskImageASIF>,std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,void>@<X0>( DiskImageASIF **a1@<X1>, Backend *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x1008uLL);
  __n128 result = std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,std::allocator<DiskImageASIF>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_188075EC0(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,di_asif::header &,di_asif::options &,std::allocator<DiskImageASIF>,0>( void *a1, DiskImageASIF **a2, Backend *a3, uint64_t a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CB998;
  uint64_t dir_latest_offset = DiskImageASIF::get_dir_latest_offset(*a2, a3, (const di_asif::header *)a3);
  DiskImageASIF::DiskImageASIF(a1 + 3, a2, a3, dir_latest_offset, v9, a4);
  return a1;
}

void sub_188075F40(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<DiskImageASIF>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CB998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DiskImageASIF>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CB998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<DiskImageASIF>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

void *std::allocate_shared[abi:ne180100]<DiskImageASIF,std::allocator<DiskImageASIF>,unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,void>@<X0>( unsigned __int16 *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, unint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X6>, _OWORD *a7@<X7>, void *a8@<X8>, __int128 *a9)
{
  __int16 v17 = operator new(0x1008uLL);
  __n128 result = std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,std::allocator<DiskImageASIF>,0>( v17,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_188076030(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<DiskImageASIF>::__shared_ptr_emplace[abi:ne180100]<unsigned long,unsigned int const&,unsigned long long &,unsigned long long &,std::shared_ptr<Backend> &,di_asif::options &,boost::uuids::uuid const&,boost::uuids::uuid const&,std::allocator<DiskImageASIF>,0>( void *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CB998;
  unsigned int v10 = *a2;
  unsigned int v11 = *a3;
  unint64_t v12 = *a4;
  unint64_t v13 = *a5;
  __int128 v15 = *a9;
  char v16 = 1;
  DiskImageASIF::DiskImageASIF((uint64_t)(a1 + 3), v10, v11, v12, v13, a6, a7, a8, &v15);
  return a1;
}

void sub_1880760D8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<DiskImage  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<DiskImage  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImage  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void std::allocate_shared[abi:ne180100]<PurgeableFileBackend,std::allocator<PurgeableFileBackend>,char const*,void>( char **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  std::__shared_ptr_emplace<PurgeableFileBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<PurgeableFileBackend>,0>( v4,  a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a2,  v4 + 4,  (uint64_t)(v4 + 3));
}

void sub_1880761A8(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<PurgeableFileBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<PurgeableFileBackend>,0>( void *a1, char **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBA48;
  std::construct_at[abi:ne180100]<PurgeableFileBackend,char const*,PurgeableFileBackend*>((FileLocal *)(a1 + 3), a2);
  return a1;
}

void sub_1880761F0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<PurgeableFileBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PurgeableFileBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBA48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<PurgeableFileBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

FileLocal *std::construct_at[abi:ne180100]<PurgeableFileBackend,char const*,PurgeableFileBackend*>( FileLocal *a1, char **a2)
{
  int v3 = FileDescriptorWrapper::open_file((uint64_t)__p, 514);
  FileLocal::FileLocal(a1, v3, 1, 0);
  *(void *)a1 = off_18A1EB8A0;
  *((void *)a1 + 3) = &unk_18A1EB980;
  *((void *)a1 + 4) = &unk_18A1EB9B8;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1880762C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FileLocal::FileLocal(FileLocal *this, int a2, BOOL a3, char a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  char v8 = a4;
  Backend::Backend((Backend *)this);
  *uint64_t v7 = off_18A1EBA08;
  v7[3] = &unk_18A1EBAE8;
  v7[4] = &unk_18A1EBB20;
  FileDescriptor::FileDescriptor((FileDescriptor *)v9, a2, a3);
  std::allocate_shared[abi:ne180100]<FileLocal::shared_state_t,std::allocator<FileLocal::shared_state_t>,FileDescriptor,BOOL &,void>( (uint64_t)v9,  &v8,  (void *)this + 5);
  FileDescriptorWrapper::~FileDescriptorWrapper((FileDescriptorWrapper *)v9);
  *((void *)this + 7) = *((void *)this + 5) + 8LL;
  *((void *)this + _Block_object_dispose(va, 8) = (char *)this + 88;
  *(_OWORD *)((char *)this + 72) = xmmword_188179140;
}

void sub_1880763B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<FileLocal::shared_state_t,std::allocator<FileLocal::shared_state_t>,FileDescriptor,BOOL &,void>@<X0>( uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xB0uLL);
  uint64_t result = std::__shared_ptr_emplace<FileLocal::shared_state_t>::__shared_ptr_emplace[abi:ne180100]<FileDescriptor,BOOL &,std::allocator<FileLocal::shared_state_t>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_188076428(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<FileLocal::shared_state_t>::__shared_ptr_emplace[abi:ne180100]<FileDescriptor,BOOL &,std::allocator<FileLocal::shared_state_t>,0>( void *a1, uint64_t a2, char *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBA98;
  FileLocal::shared_state_t::shared_state_t((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_188076474(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<FileLocal::shared_state_t>::__on_zero_shared(uint64_t a1)
{
}

uint64_t FileLocal::shared_state_t::shared_state_t(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = -1;
  *(void *)a1 = &off_18A1CBAE8;
  __int128 v4 = *(_OWORD *)(a2 + 12);
  __int128 v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 2_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = a3;
  *(_BYTE *)(a1 + 49) = FileDescriptor::is_mounted_on_smb((FileDescriptor *)a1);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = 0LL;
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 1;
  *(void *)(a1 + 144) = 0LL;
  return a1;
}

void sub_188076548(_Unwind_Exception *a1)
{
}

BOOL FileDescriptor::is_mounted_on_smb(FileDescriptor *this)
{
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1717726579 && v4 == 115;
  }

  else
  {
    BOOL v6 = 0LL;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }

  return v6;
}

uint64_t FileDescriptorWrapper::get_file_descriptor(FileDescriptorWrapper *this)
{
  return *((unsigned int *)this + 2);
}

void FileDescriptor::~FileDescriptor(FileDescriptor *this)
{
}

void std::__destroy_at[abi:ne180100]<FileLocal::shared_state_t,0>(FileDescriptorWrapper *this)
{
  if (*((_BYTE *)this + 136)) {
    std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 12);
  }
  FileDescriptorWrapper::~FileDescriptorWrapper(this);
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100]( uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

void std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      __int128 v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

uint64_t di_log::logger_buf<di_log::log_printer<651ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CA938;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880767F4(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<BufferedWriteBackend,std::allocator<BufferedWriteBackend>,std::shared_ptr<Backend> &,unsigned long,void>( uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0xA8uLL);
  std::__shared_ptr_emplace<BufferedWriteBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,unsigned long,std::allocator<BufferedWriteBackend>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807685C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<BufferedWriteBackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,unsigned long,std::allocator<BufferedWriteBackend>,0>( void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBB28;
  BufferedWriteBackend::BufferedWriteBackend(a1 + 3, a2, *a3);
  return a1;
}

void sub_1880768A8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<BufferedWriteBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BufferedWriteBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BufferedWriteBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_188076998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void crypto::header_serializer::decode(crypto::header_serializer *this@<X0>, crypto::header **a2@<X8>)
{
  uint64_t v9 = 0LL;
  char v4 = this;
  __int128 v5 = (const char *)-[crypto::header_serializer decodeBytesForKey:returnedLength:]( v4,  "decodeBytesForKey:returnedLength:",  @"crypto_header",  &v9);
  if (v5)
  {
    if (v9 != 76)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v8,  (uint64_t)"Unexpected crypto header length (",  33LL);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)")", 1LL);
      DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)v8, 0x9Au);
    }

    BOOL v6 = (crypto::header *)operator new(0x4CuLL);
    crypto::header::header(v6, v5);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  *a2 = v6;
}

void sub_188076AB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_188076B50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_188076CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_188076D90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_188076E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_188076FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188077228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_27:
    _DWORD *v11 = 0LL;
    v11[1] = 0LL;
    goto LABEL_28;
  }

  size_t v30 = 0LL;
  if (!+[DICryptoHelper getPublicKeyWithCertificate:key:error:]( &OBJC_CLASS___DICryptoHelper,  "getPublicKeyWithCertificate:key:error:",  v12,  &v30,  a6)) {
    goto LABEL_27;
  }
  unint64_t v13 = v30;
  if (!((unint64_t)a4 | (unint64_t)v30))
  {
    __int128 v22 =  +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  @"No passphrase or certificate was supplied.",  a6);
    goto LABEL_27;
  }

  uint64_t v14 = -[BackendXPC cryptoHeader](self, "cryptoHeader");
  std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,void>( (uint64_t)v14,  v42,  &v44,  &v30,  v50);
  __int128 v15 = *(void *)v50;
  char v16 = *(void *)&v50[8];

LABEL_25:
  _DWORD *v11 = v15;
  v11[1] = v16;
  unint64_t v40 = 0LL;
  __int128 v41 = 0LL;
LABEL_28:
  uint64_t v23 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      __int128 v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  result.var1 = v27;
  result.var0 = v26;
  return result;
}

  if (v8)
  {
LABEL_28:
    *(_DWORD *)(a1 + 20) = 1;
    uint64_t v20 = *(AAByteStream *)a1;
    if (*((void *)v20 + 3))
    {
      if (v8)
      {
        unint64_t v13 = 0LL;
        while (1)
        {
          __int16 v21 = (*((uint64_t (**)(void, _BYTE *, uint64_t))v20 + 3))(*(void *)v20, v9, v8);
          if (v21 < 1) {
            break;
          }
          v9 += v21;
          v13 += v21;
          v8 -= v21;
          if (!v8)
          {
            if ((v13 & 0x8000000000000000LL) == 0) {
              goto LABEL_39;
            }
            goto LABEL_37;
          }
        }

        unint64_t v13 = v21;
        if (v21 < 0) {
          goto LABEL_37;
        }
        goto LABEL_39;
      }

void sub_188077570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  crypto::keys::~keys((crypto::keys *)va);

  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void crypto::keys::~keys(crypto::keys *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }

void sub_188077734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_188077A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188077BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_188077D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(a1);
}

void sub_188077EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _Unwind_Resume(a1);
}

void sub_1880781CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void sub_188078234()
{
}

void crypto::format_serializer::decode(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  id v5 = a1;
  uint64_t v6 = (const void *)[v5 decodeBytesForKey:@"encKeys" returnedLength:&v23];
  id v7 = v5;
  uint64_t v8 = [v7 decodeBytesForKey:@"prngKeys" returnedLength:&v22];
  if (v6 && (uint64_t v9 = (const void *)v8) != 0LL)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v19 = 0LL;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>( &v19,  v6,  (uint64_t)v6 + v23,  v23);
    uint64_t v18 = 0LL;
    __n128 v17 = 0uLL;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>( &v17,  v9,  (uint64_t)v9 + v22,  v22);
    crypto::keys::keys(v11, (uint64_t)&v19, &v17, a2);
    std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>(a3);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }

    uint64_t v10 = v14;
    uint64_t v14 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    if (v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }

    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }

    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }

    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }
}

void sub_188078384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  __int128 v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(void *)(v22 - 8_Block_object_dispose(va, 8) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1880785D8(_Unwind_Exception *a1)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 - 48);
  _Unwind_Resume(a1);
}

void crypto::format_serializer::encode( crypto::format_serializer *this, NSCoder *a2, const crypto::format *a3)
{
  uint64_t v4 = this;
  -[crypto::format_serializer encodeBytes:length:forKey:]( v4,  "encodeBytes:length:forKey:",  a2[6].super.isa,  76LL,  @"crypto_header");
  -[crypto::format_serializer encodeBytes:length:forKey:]( v4,  "encodeBytes:length:forKey:",  a2->super.isa,  (char *)a2[1].super.isa - (char *)a2->super.isa,  @"encKeys");
  -[crypto::format_serializer encodeBytes:length:forKey:]( v4,  "encodeBytes:length:forKey:",  a2[3].super.isa,  (char *)a2[4].super.isa - (char *)a2[3].super.isa,  @"prngKeys");
}

void sub_1880786A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1880787D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_188078920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1880789CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_188078B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _Unwind_Resume(a1);
}

void sub_188078CBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sub_188078DD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(a1);
}

#error "1880790E0: call analysis failed (funcsize=120)"
RamXPC *__cdecl -[RamXPC initWithCoder:](RamXPC *self, SEL a2, id a3)
{
  id v4;
  RamXPC *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  objc_super v17;
  uint64_t v18[3];
  void v18[2] = *MEMORY[0x1895F89C0];
  uint64_t v4 = a3;
  v17.receiver = self;
  v17.super_class = (Class)&OBJC_CLASS___RamXPC;
  id v5 = -[BackendXPC initWithCoder:](&v17, sel_initWithCoder_, v4);
  if (v5)
  {
    uint64_t v16 = [v4 decodeInt64ForKey:@"size"];
    [v4 decodeObjectOfClass:objc_opt_class() forKey:@"identifier"];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v6 getUUIDBytes:v18];
    std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,boost::uuids::uuid &,void>( &v16,  v18,  &v14);
    uint64_t v15 = v14;
    uint64_t v14 = 0uLL;
    -[BackendXPC setBackend:](v5, "setBackend:", &v15, 0LL);
    id v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1))
    {
      uint64_t v8 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
      do
        uint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (*((void *)&v14 + 1))
    {
      uint64_t v11 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
      do
        uint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  return v5;
}

void sub_18807937C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(a1);
}

void sub_1880794B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880795B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807974C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880799C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _Unwind_Resume(a1);
}

void sub_188079B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_188079C8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void sub_188079E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807A02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807A0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807A2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807A548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807A634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807A8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_18807AB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_18807AC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807AF3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_18807B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t plugin_decode_buffer(void *a1, const char *a2, void **a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (a1 && a2 && a3)
  {
    id v5 = a1;
    [NSString stringWithUTF8String:a2];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 objectForKeyedSubscript:v6];
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v7 length])
      {
        uint64_t v8 = malloc([v7 length]);
        *a3 = v8;
        if (v8)
        {
          uint64_t v9 = v8;
          id v10 = v7;
          memcpy(v9, (const void *)[v10 bytes], objc_msgSend(v10, "length"));
          uint64_t v11 = [v10 length];
        }

        else
        {
          int v21 = *__error();
          if (DIForwardLogs())
          {
            getDIOSLog();
            uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t buf = 68158466;
            int v26 = 59;
            __int16 v27 = 2080;
            unint64_t v28 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v29 = 2048;
            uint64_t v30 = [v7 length];
            __int16 v31 = 2112;
            __int128 v32 = v6;
            size_t v23 = (char *)_os_log_send_and_compose_impl();

            if (v23)
            {
              fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v23);
              free(v23);
            }
          }

          else
          {
            getDIOSLog();
            __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 68158466;
              int v26 = 59;
              __int16 v27 = 2080;
              unint64_t v28 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              __int16 v29 = 2048;
              uint64_t v30 = [v7 length];
              __int16 v31 = 2112;
              __int128 v32 = v6;
              _os_log_impl( &dword_188046000,  v24,  OS_LOG_TYPE_ERROR,  "%.*s: Out of memory, failed to allocated %zu bytes for key %@",  buf,  0x26u);
            }
          }

          *__error() = v21;
          uint64_t v11 = -12LL;
        }
      }

      else
      {
        int v16 = *__error();
        if (DIForwardLogs())
        {
          getDIOSLog();
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t buf = 68158210;
          int v26 = 59;
          __int16 v27 = 2080;
          unint64_t v28 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          __int16 v29 = 2112;
          uint64_t v30 = (uint64_t)v6;
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();

          if (v18)
          {
            fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v18);
            free(v18);
          }
        }

        else
        {
          getDIOSLog();
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t buf = 68158210;
            int v26 = 59;
            __int16 v27 = 2080;
            unint64_t v28 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v29 = 2112;
            uint64_t v30 = (uint64_t)v6;
            _os_log_impl(&dword_188046000, v19, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }

        *__error() = v16;
        uint64_t v11 = -22LL;
      }
    }

    else
    {
      uint64_t v11 = -2LL;
    }
  }

  else
  {
    int v12 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v26 = 59;
      __int16 v27 = 2080;
      unint64_t v28 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();

      if (v14)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v14);
        free(v14);
      }
    }

    else
    {
      getDIOSLog();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v26 = 59;
        __int16 v27 = 2080;
        unint64_t v28 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl(&dword_188046000, v15, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v12;
    return -22LL;
  }

  return v11;
}

void sub_18807B7C8(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t plugin_decode_fd(void *a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    uint64_t v3 = a1;
    [NSString stringWithUTF8String:a2];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    [v3 objectForKeyedSubscript:v4];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        uint64_t v6 = dup([v5 fileDescriptor]);
        if ((v6 & 0x80000000) != 0) {
          uint64_t v6 = -*__error();
        }
      }

      else
      {
        int v11 = *__error();
        if (DIForwardLogs())
        {
          getDIOSLog();
          int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t buf = 68158210;
          int v17 = 42;
          __int16 v18 = 2080;
          uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
          __int16 v20 = 2112;
          int v21 = v4;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();

          if (v13)
          {
            fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v13);
            free(v13);
          }
        }

        else
        {
          getDIOSLog();
          uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t buf = 68158210;
            int v17 = 42;
            __int16 v18 = 2080;
            uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
            __int16 v20 = 2112;
            int v21 = v4;
            _os_log_impl(&dword_188046000, v14, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }

        *__error() = v11;
        uint64_t v6 = 4294967274LL;
      }
    }

    else
    {
      uint64_t v6 = 4294967294LL;
    }
  }

  else
  {
    int v7 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v17 = 42;
      __int16 v18 = 2080;
      uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
        free(v9);
      }
    }

    else
    {
      getDIOSLog();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v17 = 42;
        __int16 v18 = 2080;
        uint64_t v19 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl(&dword_188046000, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v7;
    return 4294967274LL;
  }

  return v6;
}

void sub_18807BBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807BCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void plugin_encode_buffer(void *a1, const char *a2, const void *a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1 && a2 && a3 && a4)
  {
    id v13 = a1;
    [NSString stringWithUTF8String:a2];
    int v7 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189603F48] dataWithBytes:a3 length:a4];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 setObject:v8 forKeyedSubscript:v7];
  }

  else
  {
    int v9 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v15 = 69;
      __int16 v16 = 2080;
      int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      int v11 = (char *)_os_log_send_and_compose_impl();

      if (v11)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v11);
        free(v11);
      }
    }

    else
    {
      getDIOSLog();
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v15 = 69;
        __int16 v16 = 2080;
        int v17 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl(&dword_188046000, v12, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v9;
  }

void sub_18807BF24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void plugin_encode_fd(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    id v11 = a1;
    [NSString stringWithUTF8String:a2];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x189607898]) initWithFileDescriptor:a3];
    [v11 setObject:v6 forKeyedSubscript:v5];
  }

  else
  {
    int v7 = *__error();
    if (DIForwardLogs())
    {
      getDIOSLog();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t buf = 68157954;
      int v13 = 48;
      __int16 v14 = 2080;
      int v15 = "void plugin_encode_fd(void *, const char *, int)";
      int v9 = (char *)_os_log_send_and_compose_impl();

      if (v9)
      {
        fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
        free(v9);
      }
    }

    else
    {
      getDIOSLog();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68157954;
        int v13 = 48;
        __int16 v14 = 2080;
        int v15 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl(&dword_188046000, v10, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v7;
  }

void sub_18807C178( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte const*,std::byte const*>( void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_18807C2A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<std::byte>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>@<X0>( void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<crypto::keys,std::allocator<crypto::format>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_18807C340(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<crypto::keys,std::allocator<crypto::format>,0>( void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBBA0;
  crypto::format::format(a1 + 3);
  return a1;
}

void sub_18807C388(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<crypto::format>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto::format>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<crypto::format>::__on_zero_shared(uint64_t a1)
{
}

void std::__destroy_at[abi:ne180100]<crypto::format,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

void *std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,void>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  id v10 = operator new(0x60uLL);
  uint64_t result = std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,std::allocator<crypto::format>,0>( v10,  a1,  a2,  a3,  a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_18807C498(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<crypto::format>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<crypto::header>,Backend &,char const*&,__SecKey *&,std::allocator<crypto::format>,0>( void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBBA0;
  crypto::format::format(a1 + 3, a2, a3, *a4, *a5);
  return a1;
}

void sub_18807C4E8(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,char const*,int &,void>( char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<FileLocal>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807C550(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<FileLocal>,0>( void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC00;
  std::construct_at[abi:ne180100]<FileLocal,char const*,int &,FileLocal*>((FileLocal *)(a1 + 3), a2, a3);
  return a1;
}

void sub_18807C598(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<FileLocal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FileLocal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBC00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<FileLocal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

FileLocal *std::construct_at[abi:ne180100]<FileLocal,char const*,int &,FileLocal*>( FileLocal *a1, char **a2, _DWORD *a3)
{
  LODWORD(a3) = *a3;
  int v5 = FileDescriptorWrapper::open_file((uint64_t)__p, (int)a3);
  FileLocal::FileLocal(a1, v5, (a3 & 3) != 0, 0);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_18807C65C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL &,BOOL &,void>( int *a1@<X1>, BOOL *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,BOOL &,std::allocator<FileLocal>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a4,  v8 + 4,  (uint64_t)(v8 + 3));
}

void sub_18807C6DC(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,BOOL &,std::allocator<FileLocal>,0>( void *a1, int *a2, BOOL *a3, char *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC00;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_18807C730(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,void>( unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,std::allocator<SparseBundleBackend>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807C7B0(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL &,std::shared_ptr<FileLocal> &,std::shared_ptr<crypto::format> &,std::allocator<SparseBundleBackend>,0>( void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC50;
  SparseBundleBackend::SparseBundleBackend(a1 + 3, *a2, *a3);
  return a1;
}

void sub_18807C800(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<SparseBundleBackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SparseBundleBackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<SparseBundleBackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,char const*,int &,unsigned long &,void>( char **a1@<X1>, unsigned int *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,unsigned long &,std::allocator<SparseBundleBackend>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a4,  v8 + 4,  (uint64_t)(v8 + 3));
}

void sub_18807C8B8(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,unsigned long &,std::allocator<SparseBundleBackend>,0>( void *a1, char **a2, unsigned int *a3, uint64_t *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC50;
  std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,unsigned long &,SparseBundleBackend*>( (uint64_t)(a1 + 3),  a2,  a3,  a4);
  return a1;
}

void sub_18807C900(_Unwind_Exception *a1)
{
}

uint64_t std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,unsigned long &,SparseBundleBackend*>( uint64_t a1, char **a2, unsigned int *a3, uint64_t *a4)
{
  void v14[2] = *MEMORY[0x1895F89C0];
  uint64_t v7 = (di_utils *)std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  v14[0] = di_utils::random_uuid(v7);
  v14[1] = v10;
  SparseBundleBackend::SparseBundleBackend(a1, __p, v8, v9, v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_18807C9BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::allocate_shared[abi:ne180100]<SparseBundleBackend,std::allocator<SparseBundleBackend>,char const*,int &,void>( char **a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<SparseBundleBackend>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807CA34(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<SparseBundleBackend>::__shared_ptr_emplace[abi:ne180100]<char const*,int &,std::allocator<SparseBundleBackend>,0>( void *a1, char **a2, unsigned int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC50;
  std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,SparseBundleBackend*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_18807CA7C(_Unwind_Exception *a1)
{
}

uint64_t std::construct_at[abi:ne180100]<SparseBundleBackend,char const*,int &,SparseBundleBackend*>( uint64_t a1, char **a2, unsigned int *a3)
{
  v11[2] = *MEMORY[0x1895F89C0];
  int v5 = (di_utils *)std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  uint64_t v6 = *a3;
  v11[0] = di_utils::random_uuid(v5);
  v11[1] = v7;
  SparseBundleBackend::SparseBundleBackend(a1, __p, v6, 0LL, v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_18807CB28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,void>( uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,std::allocator<BackendNull>,0>( (uint64_t)v4,  a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a2,  v4 + 4,  (uint64_t)(v4 + 3));
}

void sub_18807CB98(_Unwind_Exception *a1)
{
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,std::allocator<BackendNull>,0>( uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18A1CBCA0;
  uint64_t v3 = *a2;
  uint64_t v4 = di_utils::random_uuid((di_utils *)a1);
  uint64_t v6 = v5;
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = off_18A1CBCF0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_18807CC10(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<BackendNull>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendNull>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CBCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void BackendNull::~BackendNull(BackendNull *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

uint64_t BackendNull::flush()
{
  return 0LL;
}

uint64_t Backend::unmap_range(Backend *this)
{
  return 4294967251LL;
}

uint64_t Backend::supports_unmap(Backend *this)
{
  return 0LL;
}

uint64_t BackendNull::get_size(BackendNull *this)
{
  return *((void *)this + 3);
}

uint64_t BackendNull::is_writable(BackendNull *this)
{
  return 1LL;
}

uint64_t BackendNull::truncate(BackendNull *this, uint64_t a2)
{
  *((void *)this + 3) = a2;
  return 0LL;
}

void *BackendNull::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendNull", 11LL);
}

void *Backend::getContext@<X0>(Backend *this@<X0>, void *a2@<X8>)
{
  return std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(a2, (void *)this + 1);
}

uint64_t BackendNull::write(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t BackendNull::read(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t Backend::write(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 80LL))(a1, &v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    uint64_t v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_18807CDA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Backend::read(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, &v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    uint64_t v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_18807CE3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Backend::read(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48LL;
    v5 -= 48LL;
    if (!v5) {
      return 0LL;
    }
  }

  uint64_t v7 = v6;
  *(void *)&__int128 v9 = "int Backend::read(const elements_t &)";
  *((void *)&v9 + 1) = 17LL;
  int v10 = 16;
  di_log::logger<di_log::log_printer<124ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Backend: failed reading element in vector",  41LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v11);
  MEMORY[0x1895BC2CC](&v13);
  return v7;
}

void sub_18807CF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t Backend::write(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48LL;
    v5 -= 48LL;
    if (!v5) {
      return 0LL;
    }
  }

  uint64_t v7 = v6;
  *(void *)&__int128 v9 = "int Backend::write(const elements_t &)";
  *((void *)&v9 + 1) = 18LL;
  int v10 = 16;
  di_log::logger<di_log::log_printer<135ul>>::logger(v11, &v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Backend: failed writing element in vector",  41LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf((uint64_t)v11);
  MEMORY[0x1895BC2CC](&v13);
  return v7;
}

void sub_18807D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

unint64_t Backend::future_read@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v13) = 0;
  char v14 = 0;
  uint64_t v15 = 0LL;
  uint64_t tagged_ptr_lock = ref::details::_get_tagged_ptr_lock((unint64_t)&v13, a2);
  uint64_t v12 = &v13;
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v13, v6);
  uint64_t v18 = &v12;
  lw_future<int>::lw_future((unint64_t)v10, &v13);
  id v11 = v12;
  *((void *)v12 + 4) = &v11;
  int v7 = (*(uint64_t (**)(uint64_t, const void *))(*(void *)a1 + 88LL))(a1, a2);
  uint64_t v8 = v11;
  int *v11 = v7;
  *((_BYTE *)v8 + 4) = 1;
  lw_promise<int>::notify_future((uint64_t)&v11);
  unint64_t result = lw_future<int>::lw_future(a3, v10);
  if (v11) {
    *((void *)v11 + 4) = 0LL;
  }
  return result;
}

void sub_18807D0F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

unint64_t Backend::future_write@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v13) = 0;
  char v14 = 0;
  uint64_t v15 = 0LL;
  uint64_t tagged_ptr_lock = ref::details::_get_tagged_ptr_lock((unint64_t)&v13, a2);
  uint64_t v12 = &v13;
  uint64_t tagged_ptr_cond = ref::details::_get_tagged_ptr_cond((unint64_t)&v13, v6);
  uint64_t v18 = &v12;
  lw_future<int>::lw_future((unint64_t)v10, &v13);
  id v11 = v12;
  *((void *)v12 + 4) = &v11;
  int v7 = (*(uint64_t (**)(uint64_t, const void *))(*(void *)a1 + 80LL))(a1, a2);
  uint64_t v8 = v11;
  int *v11 = v7;
  *((_BYTE *)v8 + 4) = 1;
  lw_promise<int>::notify_future((uint64_t)&v11);
  unint64_t result = lw_future<int>::lw_future(a3, v10);
  if (v11) {
    *((void *)v11 + 4) = 0LL;
  }
  return result;
}

void sub_18807D1E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

uint64_t Backend::full_name(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
}

uint64_t BackendNull::get_identifier(BackendNull *this)
{
  return *((void *)this + 4);
}

void *std::shared_ptr<Backend>::shared_ptr[abi:ne180100]<Backend,void>(void *a1, void *a2)
{
  __int128 v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }

  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x189614740] + 16LL;
  __cxa_throw(exception, MEMORY[0x1896146D0], MEMORY[0x1896142B8]);
}

void *di_log::logger<di_log::log_printer<124ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<124ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CBDD0;
  a1[45] = &unk_18A1CBED0;
  a1[46] = &unk_18A1CBEF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CBDD0;
  a1[45] = &unk_18A1CBE58;
  a1[46] = &unk_18A1CBE80;
  return a1;
}

void sub_18807D318(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CBF68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18807D3E4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CBF68;
  di_log::logger_buf<di_log::log_printer<124ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<124ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<124ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<124ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<124ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<124ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<124ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18807D798( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<124ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 124LL;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    __int128 v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        int v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 124LL;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<135ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<135ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CBFF0;
  a1[45] = &unk_18A1CC0F0;
  a1[46] = &unk_18A1CC118;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CBFF0;
  a1[45] = &unk_18A1CC078;
  a1[46] = &unk_18A1CC0A0;
  return a1;
}

void sub_18807DA38(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CC188;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18807DB04(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CC188;
  di_log::logger_buf<di_log::log_printer<135ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<135ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<135ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<135ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<135ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<135ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<135ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18807DEB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<135ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 135LL;
    __int16 v21 = 2082;
    uint64_t v22 = v8;
    __int128 v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        int v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 135LL;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void lw_promise<int>::notify_future(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 8LL))
  {
    unsigned __int8 v2 = *(std::mutex **)(*(void *)a1 + 16LL);
    std::mutex::lock(v2);
    std::mutex::unlock(v2);
  }

void std::allocate_shared[abi:ne180100]<Ram,std::allocator<Ram>,unsigned long long,boost::uuids::uuid,void>( size_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x80uLL);
  std::__shared_ptr_emplace<Ram>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::allocator<Ram>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807E188(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<Ram>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,boost::uuids::uuid,std::allocator<Ram>,0>( void *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC208;
  Ram::Ram((uint64_t)(a1 + 3), *a2, *a3, a3[1]);
  return a1;
}

void sub_18807E1DC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<Ram>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ram>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<Ram>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Ram::Ram(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  Backend::Backend((Backend *)a1);
  *uint64_t v8 = off_18A1EE6A8;
  v8[3] = 0LL;
  __int128 v9 = v8 + 3;
  v8[7] = 0LL;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  int v10 = valloc(a2);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x189614708], MEMORY[0x189614690]);
  }

  v18[0] = off_18A1CC258;
  __int16 v19 = v18;
  int v16 = v10;
  std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100]((uint64_t)&v17, (uint64_t)v18);
  os_log_type_t v11 = v19;
  if (v19 == v18)
  {
    uint64_t v12 = 4LL;
    os_log_type_t v11 = v18;
    goto LABEL_6;
  }

  if (v19)
  {
    uint64_t v12 = 5LL;
LABEL_6:
    (*(void (**)(void *))(*v11 + 8 * v12))(v11);
  }

  std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100](v9, (uint64_t *)&v16);
  std::unique_ptr<char,std::function<void ()(char *)>>::~unique_ptr[abi:ne180100]((uint64_t *)&v16);
  *(void *)(a1 + 64) = *(void *)(a1 + 24);
  *(void *)(a1 + 96) = getpagesize();
  return a1;
}

void sub_18807E374(_Unwind_Exception *a1)
{
  int v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<char,std::function<void ()(char *)>>::operator=[abi:ne180100]( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  std::unique_ptr<char,std::function<void ()(char *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = off_18A1CC258;
  return result;
}

{
  void *result;
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = off_18A1CD580;
  return result;
}

{
  void *result;
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = off_18A1DFDC8;
  return result;
}

{
  void *result;
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = off_18A1E5690;
  return result;
}

{
  void *result;
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = off_18A1E5710;
  return result;
}

{
  void *result;
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = off_18A1EE628;
  return result;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_18A1CC258;
}

{
  *a2 = off_18A1CD580;
}

{
  *a2 = off_18A1DFDC8;
}

{
  *a2 = off_18A1E5690;
}

{
  *a2 = off_18A1E5710;
}

{
  *a2 = off_18A1EE628;
}

void std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::operator()( uint64_t a1, void **a2)
{
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

{
  free(*a2);
}

uint64_t std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<make_unique_buf(unsigned long)::{lambda(char *)#1},std::allocator<make_unique_buf(unsigned long)::{lambda(char *)#1}>,void ()(char *)>::target_type()
{
}

{
}

{
}

{
}

{
}

{
}

uint64_t std::__function::__value_func<void ()(char *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

void *std::__function::__value_func<void ()(char *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3] = v6;
      *(void *)(a2 + 24) = 0LL;
    }
  }

  else
  {
    a1[3] = 0LL;
  }

  return a1;
}

void std::allocate_shared[abi:ne180100]<BackendNull,std::allocator<BackendNull>,unsigned long long &,boost::uuids::uuid &,void>( uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,boost::uuids::uuid &,std::allocator<BackendNull>,0>( (uint64_t)v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807E5B0(_Unwind_Exception *a1)
{
}

uint64_t std::__shared_ptr_emplace<BackendNull>::__shared_ptr_emplace[abi:ne180100]<unsigned long long &,boost::uuids::uuid &,std::allocator<BackendNull>,0>( uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18A1CBCA0;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = off_18A1CBCF0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_18807E61C(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,void>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,std::allocator<crypto_format_backend>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807E684(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> const&,std::allocator<crypto_format_backend>,0>( void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC2E8;
  int v5 = 0;
  crypto_format_backend::crypto_format_backend(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_18807E6DC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<crypto_format_backend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<crypto_format_backend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<crypto_format_backend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,void>( uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,std::allocator<crypto_format_backend>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807E784(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<crypto::format> &,std::allocator<crypto_format_backend>,0>( void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC2E8;
  int v5 = 0;
  crypto_format_backend::crypto_format_backend(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_18807E7DC(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,std::shared_ptr<Backend> &,void>( void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::allocator<readSynchronizer>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a1,  v2 + 4,  (uint64_t)(v2 + 3));
}

void sub_18807E83C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::allocator<readSynchronizer>,0>( void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC338;
  readSynchronizer::readSynchronizer(a1 + 3);
  return a1;
}

void sub_18807E884(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<readSynchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<readSynchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<readSynchronizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<readSynchronizer,std::allocator<readSynchronizer>,std::shared_ptr<Backend>,void>( void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x68uLL);
  std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::allocator<readSynchronizer>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a1,  v2 + 4,  (uint64_t)(v2 + 3));
}

void sub_18807E924(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<readSynchronizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::allocator<readSynchronizer>,0>( void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC338;
  readSynchronizer::readSynchronizer(a1 + 3);
  return a1;
}

void sub_18807E96C(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<AEA_backend,std::allocator<AEA_backend>,std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,void>( void *a1@<X8>)
{
  unsigned __int8 v2 = operator new(0x70uLL);
  std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,std::allocator<AEA_backend>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a1,  v2 + 4,  (uint64_t)(v2 + 3));
}

void sub_18807E9D4(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<AEA_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend>,std::shared_ptr<unsigned char> &,std::allocator<AEA_backend>,0>( void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC388;
  AEA_backend::AEA_backend(a1 + 3);
  return a1;
}

void sub_18807EA1C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<AEA_backend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AEA_backend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<AEA_backend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *std::allocate_shared[abi:ne180100]<std::string,std::allocator<std::string>,char const*,void>@<X0>( char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  unint64_t result = std::__shared_ptr_emplace<std::string>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<std::string>,0>( v4,  a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18807EAB4(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<std::string>::__shared_ptr_emplace[abi:ne180100]<char const*,std::allocator<std::string>,0>( void *a1, char **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = &unk_18A1CC3D8;
  std::string::basic_string[abi:ne180100]<0>(a1 + 3, *a2);
  return a1;
}

void sub_18807EB04(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_18A1CC3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_18A1CC3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
}

void std::allocate_shared[abi:ne180100]<Knoxbackend,std::allocator<Knoxbackend>,std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,void>( uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,std::allocator<Knoxbackend>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_18807EBCC(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<Knoxbackend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<std::string>,int,std::shared_ptr<unsigned char> &,std::allocator<Knoxbackend>,0>( void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC428;
  Knoxbackend::Knoxbackend(a1 + 3, a2, *a3);
  return a1;
}

void sub_18807EC18(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<Knoxbackend>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Knoxbackend>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<Knoxbackend>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *std::allocate_shared[abi:ne180100]<plugin_header,std::allocator<plugin_header>,char const*&,__CFDictionary const*,int &,void>@<X0>( char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x40uLL);
  unint64_t result = std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*&,__CFDictionary const*,int &,std::allocator<plugin_header>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_18807ECC8(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*&,__CFDictionary const*,int &,std::allocator<plugin_header>,0>( void *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC478;
  std::construct_at[abi:ne180100]<plugin_header,char const*&,__CFDictionary const*,int &,plugin_header*>( (uint64_t)(a1 + 3),  a2,  a3,  a4);
  return a1;
}

void sub_18807ED10(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<plugin_header>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plugin_header>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<plugin_header>::__on_zero_shared(uint64_t a1)
{
  return std::__destroy_at[abi:ne180100]<plugin_header,0>(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<plugin_header,char const*&,__CFDictionary const*,int &,plugin_header*>( uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  plugin_header::plugin_header(a1, __p, v7, v8 | 0x100000000LL, v10, 0LL);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_18807EDDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__destroy_at[abi:ne180100]<plugin_header,0>(uint64_t a1)
{
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1);
}

void std::allocate_shared[abi:ne180100]<BackendPlugin,std::allocator<BackendPlugin>,std::shared_ptr<plugin_header> &,void>( void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  std::__shared_ptr_emplace<BackendPlugin>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<plugin_header> &,std::allocator<BackendPlugin>,0>( (uint64_t)v4,  a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a2,  v4 + 4,  (uint64_t)(v4 + 3));
}

void sub_18807EE74(_Unwind_Exception *a1)
{
}

uint64_t std::__shared_ptr_emplace<BackendPlugin>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<plugin_header> &,std::allocator<BackendPlugin>,0>( uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18A1CC4C8;
  Backend::Backend((Backend *)(a1 + 24));
  *(void *)(a1 + 24) = off_18A1CC518;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *a2;
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return a1;
}

void sub_18807EEEC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<BackendPlugin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BackendPlugin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CC4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<BackendPlugin>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void BackendPlugin::~BackendPlugin(BackendPlugin *this)
{
  *(void *)this = off_18A1CC518;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  *(void *)this = off_18A1CC518;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

uint64_t BackendPlugin::flush()
{
  return 4294967251LL;
}

uint64_t BackendPlugin::get_size(BackendPlugin *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 16LL))();
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 8LL))() * v2;
}

void *BackendPlugin::is_writable(BackendPlugin *this)
{
  return (*(void *(**)(void *__return_ptr))(**((void **)this + 3) + 24LL))(*((void **)this + 3));
}

uint64_t BackendPlugin::truncate(BackendPlugin *this)
{
  return 4294967251LL;
}

void *BackendPlugin::name(uint64_t a1, void *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"BackendPlugin", 13LL);
}

uint64_t BackendPlugin::write()
{
  return 4294967251LL;
}

uint64_t BackendPlugin::read()
{
  return 4294967251LL;
}

uint64_t BackendPlugin::get_identifier(plugin_header **this)
{
  return plugin_header::get_uuid(this[3]);
}

uint64_t plugin_header::get_uuid(plugin_header *this)
{
  uint64_t v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(void *)this + 48LL))();
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v3);
  return v1;
}

void sub_18807F094(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

const void **CFAutoRelease<__CFUUID const*>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<plugin_header,std::allocator<plugin_header>,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,void>@<X0>( char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  char v12 = operator new(0x40uLL);
  unint64_t result = std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,std::allocator<plugin_header>,0>( v12,  a1,  a2,  a3,  a4,  a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_18807F14C(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<plugin_header>::__shared_ptr_emplace[abi:ne180100]<char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,std::allocator<plugin_header>,0>( void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC478;
  std::construct_at[abi:ne180100]<plugin_header,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,plugin_header*>( (uint64_t)(a1 + 3),  a2,  a3,  a4,  a5,  a6);
  return a1;
}

void sub_18807F194(_Unwind_Exception *a1)
{
}

uint64_t std::construct_at[abi:ne180100]<plugin_header,char const*,decltype(nullptr),std::nullopt_t const&,diskimage_decode_fn_t &,void *,plugin_header*>( uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_18807F218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18807F29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807F314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807F374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807F534(_Unwind_Exception *a1, int a2)
{
  unint64_t v6 = v5;

  if (a2 == 1)
  {
    uint64_t v9 = +[DIError errorWithDIException:description:prefix:error:]( &OBJC_CLASS___DIError,  "errorWithDIException:description:prefix:error:",  __cxa_begin_catch(a1),  0LL,  0LL,  0LL);
    int v10 = (void *)v3[6];
    v3[6] = v9;

    __cxa_end_catch();
    JUMPOUT(0x18807F514LL);
  }

  _Unwind_Resume(a1);
}

void sub_18807F5C0()
{
}

void sub_18807F5C8()
{
}

void sub_18807F6F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18807F88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18807FAC8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    [objc_begin_catch(a1) reason];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v7,  v2);

    objc_end_catch();
    JUMPOUT(0x18807FA90LL);
  }

  _Unwind_Resume(a1);
}

LABEL_32:
        *__error() = v27;
      }

  if ((*(_BYTE *)(a2 + 16) & 2) != 0) {
    __int16 v27 = v15;
  }
  else {
    __int16 v27 = v15 + 1;
  }
  DiskImage::extents_t::begin((DiskImage::extents_t *)v49, (uint64_t)v44);
  unint64_t v28 = v46;
  __int16 v29 = v44[0];
  v44[0] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  DiskImage::extents_t::begin((DiskImage::extents_t *)v49, (uint64_t)v44);
  DiskImage::extents_t::end((DiskImage::extents_t *)v49, (uint64_t)&__p);
  uint64_t v30 = a3 + 1;
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)v44, (uint64_t)&__p))
  {
    __int16 v31 = v45;
    if ((_DWORD)v46)
    {
      if ((_DWORD)v46 != v28) {
        break;
      }
    }

    else
    {
      v36[0] = v27;
      v36[1] = v45;
      int8x16_t v37 = 2;
      DiskImageStackable::stackable_extents_iterator_interface::get_next_extent_recursive(&v38, v9, v36, v30);
      if (v28)
      {
        if (v40 != v28) {
          break;
        }
      }

      else
      {
        unint64_t v28 = v40;
      }

      __int16 v27 = v39;
      if (v39 != v31) {
        break;
      }
    }

    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)v44);
    __int16 v27 = v31;
  }

  __int128 v32 = __p;
  std::string __p = 0LL;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 24LL))(v32);
  }
  uint64_t v33 = v44[0];
  v44[0] = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
  }
  unint64_t v34 = *(void *)a2;
  if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
    ++v34;
  }
  *(void *)a4 = v34;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v27;
  *(_BYTE *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v28;
  if (v55 == v54)
  {
    char v35 = 4LL;
  }

  else
  {
    if (!v55) {
      goto LABEL_59;
    }
    char v35 = 5LL;
    uint64_t v20 = v55;
  }

  (*(void (**)(void *))(*v20 + 8 * v35))(v20);
LABEL_59:
  unint64_t result = v51;
  uint64_t v51 = 0LL;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40LL))(result);
  }
  return result;
}

  uint64_t v23 = v39;
  __int128 v24 = v40;
  unint64_t result = boost::icl::left_subtract<boost::icl::discrete_interval<unsigned long long,std::less>>( (uint64_t)&v23,  (uint64_t)&v35,  (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      goto LABEL_40;
    }

    __int16 v21 = *((void *)&v25 + 1);
    uint64_t v22 = v25;
  }

  else
  {
    __int16 v21 = *((void *)&v25 + 1);
    uint64_t v22 = v25 + 1;
  }

  if (v22 < v21)
  {
LABEL_40:
    __int16 v29 = v25;
    uint64_t v30 = v26;
    __int16 v31 = *a3;
    __int128 v32 = *(_OWORD *)(a3 + 2);
    *(void *)&__int16 v29 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>( a1,  v15,  (uint64_t)&v29,  (uint64_t)&v29);
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>( a1,  (uint64_t **)&v29);
    unint64_t result = (uint64_t)boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>( a1,  (uint64_t ***)&v29);
    uint64_t v15 = (uint64_t *)result;
  }

void sub_1880800A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188080310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188080670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808078C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880809A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20, __int16 a21, int a22)
{
  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Failed opening the shadow/cache file(s)",  v23);
    __cxa_end_catch();
    JUMPOUT(0x18808095CLL);
  }

  _Unwind_Resume(a1);
}

void sub_188080D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188080E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188080E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188080EA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_18808107C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1880811AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188081218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188081388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

LABEL_23:
  return v16;
}

  uint64_t v23 = v33;
  if (v33)
  {
    __int128 v24 = (unint64_t *)&v33->__shared_owners_;
    do
      __int128 v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  return a4;
}

      v11 += v15;
      v5 -= v15;
      if (!v5) {
        return;
      }
    }

    uint64_t v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5) {
      uint64_t v15 = v5;
    }
    else {
      uint64_t v15 = v13 - v11;
    }
    udif::run_type::run_type((udif::run_type *)&v29, 0);
    uint64_t v30 = 0uLL;
    *(void *)&__int16 v31 = v11;
    *((void *)&v31 + 1) = v15;
    __int128 v32 = v11 - a2;
    uint64_t v33 = v15;
    uint64_t v17 = a4[1];
    uint64_t v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      boost::container::vector<udif::run_io_info,boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<udif::run_io_info,boost::container::new_allocator<void>,void>,udif::run_io_info*,udif::run_io_info>>( a4,  v18,  (const char *)1,  (uint64_t)&v29,  &v34);
    }

    else
    {
      *(_DWORD *)uint64_t v18 = v29;
      __int16 v19 = v30;
      uint64_t v20 = v31;
      __int16 v21 = v32;
      *(void *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + _Block_object_dispose(va, 8) = v19;
      ++a4[1];
    }

    goto LABEL_23;
  }

void sub_188081E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188081F24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18808220C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808258C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808283C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880829B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188082B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188082C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188082D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188082E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188082E54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

#error "1880835F4: call analysis failed (funcsize=223)"
BOOL __cdecl -[DIAttachParams updateStatFSWithError:](DIAttachParams *self, SEL a2, id *a3)
{
  void *v5;
  int v6;
  uint64_t fd_from_backend;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  DIStatFS *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  BOOL v19;
  void *v20;
  void *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  -[DIBaseParams inputURL](self, "inputURL");
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  unint64_t v6 = [v5 isFileURL];

  if (v6)
  {
    -[DIBaseParams backend](self, "backend");
    get_sink_backend((uint64_t)&v23, &v25);
    fd_from_backend = get_fd_from_backend((uint64_t)&v25);
    uint64_t v8 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        uint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    char v11 = v24;
    if (!v24) {
      goto LABEL_11;
    }
    uint64_t v12 = (unint64_t *)&v24->__shared_owners_;
    do
      uint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((fd_from_backend & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }

    else
    {
LABEL_11:
      if ((fd_from_backend & 0x80000000) == 0)
      {
LABEL_12:
        uint64_t v14 = -[DIStatFS initWithFileDescriptor:error:]( objc_alloc(&OBJC_CLASS___DIStatFS),  "initWithFileDescriptor:error:",  fd_from_backend,  a3);
        -[DIAttachParams setInputStatFS:](self, "setInputStatFS:", v14);

        -[DIAttachParams inputStatFS](self, "inputStatFS");
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v15) {
          return 0;
        }
        -[DIAttachParams inputStatFS](self, "inputStatFS");
        int v16 = (void *)objc_claimAutoreleasedReturnValue();
        [v16 logWithHeader:@"Input underlying FS"];

        goto LABEL_14;
      }
    }

    return +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  @"Unexpected backend type for file",  a3);
  }

LABEL_14:
  -[DIBaseParams shadowChain](self, "shadowChain");
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = [v17 isEmpty];

  if ((v18 & 1) != 0) {
    return 1;
  }
  -[DIBaseParams shadowChain](self, "shadowChain");
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  [v20 statWithError:a3];
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue();
  __int16 v19 = v21 != 0LL;

  return v19;
}

  *a2 = v7;
  return result;
}

  return v14;
}

void sub_188083AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188084074(_Unwind_Exception *a1, int a2)
{
  uint64_t v7 = v5;

  if (a2 == 1)
  {
    [objc_begin_catch(a1) reason];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError nilWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "nilWithEnumValue:verboseInfo:error:",  150LL,  v10,  v2);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x18808402CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1880842BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880844F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188084590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880846B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808475C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188084858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808493C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188084C28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  FileLocal::~FileLocal((FileLocal *)&a20);

  _Unwind_Resume(a1);
}

void FileLocal::~FileLocal(FileLocal *this)
{
  *(void *)this = off_18A1EBA08;
  *((void *)this + 3) = &unk_18A1EBAE8;
  *((void *)this + 4) = &unk_18A1EBB20;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  *(void *)this = off_18A1EBA08;
  *((void *)this + 3) = &unk_18A1EBAE8;
  *((void *)this + 4) = &unk_18A1EBB20;
  boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)this + 64);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

void sub_18808535C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880854E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808561C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188085664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880856B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1880857B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808586C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188085BF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, char a22)
{
  if (a2 == 1)
  {
    +[DIError nilWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"failed to open existing output file",  v22);
    objc_claimAutoreleasedReturnValue();
    __cxa_end_catch();
    JUMPOUT(0x188085AACLL);
  }

  _Unwind_Resume(a1);
}

LABEL_40:
    goto LABEL_56;
  }

  int v5 = @"Invalid output format argument";
  return +[DIError failWithPOSIXCode:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:verboseInfo:error:",  22LL,  v5,  a3);
}

      atomic_store(0, v12);
      __dmb(0xBu);
      if (*v4)
      {
        do
LABEL_41:
          __int16 v29 = __ldaxr(v12);
        while (__stlxr(1u, v12));
        if ((v29 & 1) == 0)
        {
          while (1)
          {
            uint64_t v30 = *v4;
            if (atomic_load(v9)) {
              break;
            }
            __int128 v32 = __ldaxr(v4);
            if (v32 == v30)
            {
              if (!__stlxr(0, v4))
              {
                if (v30 > 1)
                {
                  LODWORD(v1_Block_object_dispose(va, 8) = v30 & 1;
                  LODWORD(v17) = v30 >> 1;
                  if ((_DWORD)v17) {
                    goto LABEL_24;
                  }
                  goto LABEL_40;
                }

                break;
              }
            }

            else
            {
              __clrex();
            }
          }

          atomic_store(0, v12);
          __dmb(0xBu);
          if (*v4)
          {
            if (!atomic_load(v9)) {
              goto LABEL_41;
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_188086740( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    [objc_begin_catch(a1) reason];
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v30,  v22);

    objc_end_catch();
    JUMPOUT(0x188085D74LL);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_188086AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::container::vector<FileLocal::promise_io_t,boost::container::small_vector_allocator<FileLocal::promise_io_t,boost::container::new_allocator<void>,void>,void>::~vector( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)a1;
    do
    {
      uint64_t v4 = v3[7];
      if (v4) {
        *(void *)(v4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
      }
      --v2;
      uint64_t v3 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v3) + 64);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_188087B50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t PluginRingSubscriber::PluginRingSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  unsigned int v4 = io_rings_subscriber_subscribe(a3, a2);
  if ((v4 & 0x80000000) != 0)
  {
    unsigned int v6 = v4;
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed to subscribe to the plugin's IO ring", v6);
  }

  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v4;
  return a1;
}

void PluginRingSubscriber::~PluginRingSubscriber(PluginRingSubscriber *this)
{
}

uint64_t PluginRing::PluginRing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  LODWORD(v18[0]) = io_rings_get_max_version(0LL, 0);
  HIDWORD(v18[0]) = 48;
  v18[1] = 0LL;
  void v18[2] = di_plugin_cq_event_callback;
  __int16 v19 = 0LL;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v17 = 0LL;
  unsigned int v8 = io_rings_setup(0x100u, (uint64_t)v18, &v17);
  if (v8)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Failed to setup the plugin's IO ring", v8);
  }

  v18[0] = off_18A1CD250;
  __int16 v19 = v18;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v17;
  std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::__value_func[abi:ne180100]( a1 + 16,  (uint64_t)v18);
  uint64_t v9 = v19;
  if (v19 == v18)
  {
    uint64_t v10 = 4LL;
    uint64_t v9 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_7;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(*(void *)(a1 + 8) + 24LL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(a2 + 56))(a2);
  if (!v11)
  {
    uint64_t v15 = __cxa_allocate_exception(0x40uLL);
    void *v15 = off_18A1E43B0;
    int v16 = std::generic_category();
    v15[1] = 4294967284LL;
    v15[2] = v16;
    *((_BYTE *)v15 + 24) = 0;
    *((_BYTE *)v15 + 4_Block_object_dispose(va, 8) = 0;
    v15[7] = "Cannot get subscriber from plugin";
  }

  PluginRingSubscriber::PluginRingSubscriber(a1 + 56, v11, *(void *)(a1 + 48));
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 1018212795LL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = 0u;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 850045863LL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0LL;
  return a1;
}

void sub_188087E78(_Unwind_Exception *exception_object)
{
}

void PluginRing::~PluginRing(PluginRing *this)
{
}

double PluginRing::try_sub_sqe_allocate(PluginRing *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 19);
  uint64_t v2 = (unsigned int *)((char *)this + 72);
  unsigned int v3 = atomic_load((unsigned int *)this + 18);
  if (v3 - v1 < *(_DWORD *)(*((void *)this + 1) + 8LL))
  {
    do
    {
      while (1)
      {
        unsigned int v4 = __ldaxr(v2);
        if (v4 == v3) {
          break;
        }
        __clrex();
        unsigned int v5 = atomic_load((unsigned int *)this + 19);
        unsigned int v6 = v4 - v5;
        unsigned int v3 = v4;
        if (v6 >= *(_DWORD *)(*((void *)this + 1) + 8LL)) {
          return result;
        }
      }
    }

    while (__stlxr(v3 + 1, v2));
    return io_rings_sqe_allocate(*((void *)this + 6));
  }

  return result;
}

void PluginRing::get_next_cqe(PluginRing *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t cqe = io_rings_get_cqe(*((void *)this + 6));
  if ((v5 & 0x100000000LL) != 0)
  {
    uint64_t v7 = cqe;
    uint64_t v8 = v5;
    uint64_t v9 = (unsigned int *)((char *)this + 76);
    do
      unsigned int v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if (atomic_load((unint64_t *)this + 10))
    {
      unsigned int v12 = atomic_load((unsigned int *)this + 18);
      if (v10 + 1 == v12)
      {
        std::mutex::lock((std::mutex *)((char *)this + 136));
        std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
        std::mutex::unlock((std::mutex *)((char *)this + 136));
      }
    }

    *(void *)a2 = v7;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v8;
    char v6 = 1;
  }

  else
  {
    char v6 = 0;
    *(_BYTE *)a2 = 0;
  }

  *(_BYTE *)(a2 + 16) = v6;
}

uint64_t PluginRing::set_dest_obj_id(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = *(_DWORD *)(result + 64);
  return result;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  v6[0] = off_18A1CD2E0;
  v6[1] = a1;
  uint64_t v7 = v6;
  io_rings_di_subscriber_t::io_rings_di_subscriber_t();
  uint64_t v2 = v7;
  if (v7 == v6)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  *(void *)(a1 + 280) = di_hybrid_subscriber_t::get_cache_di((di_hybrid_subscriber_t *)a1);
  uint64_t v4 = *(void *)(*(void *)(io_rings_di_subscriber_t::get_di((io_rings_di_subscriber_t *)a1) + 24) - 24LL);
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 296) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  PluginRing::PluginRing(a1 + 304, *(void *)(*(void *)(a1 + 288) + 16LL), (uint64_t)async_cqe_callback, a1);
  gcd::gcd_queue::gcd_queue(a1 + 504, "com.apple.diskimages_cache_update", 2LL);
  *(void *)(a1 + 512) = 850045863LL;
  *(void *)(a1 + 616) = 0LL;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 56_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  gcd::gcd_queue::gcd_queue(a1 + 624, "hybrid_queue", 2LL);
  *(_DWORD *)(a1 + 6std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 2;
  *(void *)a1 = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_1::__invoke;
  *(void *)(a1 + 16) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_2::__invoke;
  *(void *)(a1 + 24) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_3::__invoke;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_4::__invoke;
  *(void *)(a1 + 40) = di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_5::__invoke;
  return a1;
}

void sub_1880881C8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)v1 + 72);
  std::mutex::~mutex(v4);
  gcd::gcd_group::~gcd_group(v5);
  PluginRing::~PluginRing(v2);
  io_rings_di_subscriber_t::~io_rings_di_subscriber_t(v1);
  _Unwind_Resume(a1);
}

uint64_t di_hybrid_subscriber_t::get_cache_di(di_hybrid_subscriber_t *this)
{
  duint64_t i = io_rings_di_subscriber_t::get_di(this);
  uint64_t v2 = *(void *)(di + 16);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(di + 24) - v2) >> 4);
  BOOL v4 = v3 >= 2;
  unint64_t v5 = v3 - 2;
  if (v4
    && *(_DWORD *)(v2 + 48 * v5) == 2
    && (uint64_t v6 = v2 + 48 * v5,
        uint64_t v8 = *(void *)(v6 + 8),
        uint64_t v7 = v6 + 8,
        (*(unsigned int (**)(uint64_t))(*(void *)v8 + 40LL))(v8)))
  {
    return *(void *)v7;
  }

  else
  {
    return 0LL;
  }

void async_cqe_callback(int a1, dispatch_queue_t *this)
{
}

void io_rings_di_subscriber_t::~io_rings_di_subscriber_t(io_rings_di_subscriber_t *this)
{
  uint64_t v2 = (char *)this + 248;
  unint64_t v3 = (char *)*((void *)this + 34);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)this + 120);
}

uint64_t di_hybrid_subscriber_t::exec_sync(uint64_t *a1, unsigned __int8 *a2)
{
  if (v8[1])
  {
    unsigned int v4 = io_rings_parse_and_execute_sqe((uint64_t)a1, (uint64_t)v8, (uint64_t)a2);
    else {
      uint64_t sqe = di_hybrid_subscriber_t::handle_read_sqe((uint64_t)a1, (uint64_t)a2, (uint64_t)v8, v4);
    }
  }

  else
  {
    uint64_t sqe = io_rings_return_status(a1[7], (uint64_t)a2, 0xFFFFFFF4, 0);
  }

  uint64_t v6 = sqe;
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)v8);
  return v6;
}

void sub_1880883CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t di_hybrid_subscriber_t::handle_read_sqe(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 8) + 24LL) - 16LL);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  if (v8 == v9) {
    return io_rings_return_status(*(void *)(a1 + 56), a2, a4, 0);
  }
  if ((a4 & 0x80000000) != 0)
  {
    do
    {
      v9 -= 152LL;
      std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v9);
    }

    while (v9 != v8);
    *(void *)(v7 + 24) = v8;
    return io_rings_return_status(*(void *)(a1 + 56), a2, a4, 0);
  }

  unsigned int v10 = operator new(0x30uLL);
  *unsigned int v10 = a1;
  v10[1] = a2;
  *((_DWORD *)v10 + 4) = 0;
  *((_DWORD *)v10 + 5) = a4;
  v10[3] = v8;
  uint64_t v11 = v10 + 3;
  v10[4] = v9;
  v10[5] = *(void *)(v7 + 32);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  *(void *)(v7 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
  unint64_t v40 = v10;
  unsigned int v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_18A1CD4E0;
  v12->__shared_owners_ = 0LL;
  v12->__shared_weak_owners_ = 0LL;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  __int128 v41 = v12;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v7 + 8) + 72LL))(v39);
  if (*(void *)(a1 + 280))
  {
    unsigned int v13 = v39[0];
    if (LODWORD(v39[0]))
    {
      unsigned int v14 = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 24LL))(*(void *)(v7 + 8));
      uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 32LL))(*(void *)(v7 + 8));
      compact_sub_transactions(v11, v13, v13, v14, v15, (uint64_t *)&v37);
      std::vector<di_async_sub_transaction_t>::__vdeallocate((void **)v11);
      *(_OWORD *)(v10 + 3) = v37;
      v10[5] = v38;
      uint64_t v38 = 0LL;
      __int128 v37 = 0uLL;
      char v42 = (void **)&v37;
      std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v42);
    }
  }

  uint64_t v17 = v10[3];
  uint64_t v16 = v10[4];
  if (v17 == v16) {
    goto LABEL_17;
  }
  uint64_t v18 = v10[3];
  do
  {
    std::shared_ptr<DiskImage>::operator=[abi:ne180100]((void *)(v17 + 136), (uint64_t *)&v40);
    *(void *)(v17 + 16) = v18;
    v17 += 152LL;
    v18 += 152LL;
  }

  while (v17 != v16);
  uint64_t v17 = v10[3];
  if (v10[4] == v17)
  {
LABEL_17:
    unsigned int v28 = 0;
    unint64_t v19 = 0LL;
    uint64_t v22 = v17;
  }

  else
  {
    unint64_t v19 = 0LL;
    unsigned int v20 = 0;
    while (1)
    {
      PluginRing::try_sub_sqe_allocate((PluginRing *)(a1 + 304));
      uint64_t v17 = v10[3];
      uint64_t v22 = v10[4];
      if (!v21) {
        break;
      }
      uint64_t v23 = v17 + 152 * v19;
      __int128 v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v23;
      *(_OWORD *)(v21 + 16) = v24;
      __int128 v25 = *(_OWORD *)(v23 + 32);
      __int128 v26 = *(_OWORD *)(v23 + 48);
      __int128 v27 = *(_OWORD *)(v23 + 64);
      *(void *)(v21 + 80) = *(void *)(v23 + 80);
      *(_OWORD *)(v21 + 4_Block_object_dispose(va, 8) = v26;
      *(_OWORD *)(v21 + 64) = v27;
      *(_OWORD *)(v21 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v25;
      *(_DWORD *)(v21 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 368);
      unint64_t v19 = v20 + 1;
      unsigned int v20 = v19;
      unsigned int v28 = v19;
      if (0x86BCA1AF286BCA1BLL * ((v22 - v17) >> 3) <= v19) {
        goto LABEL_19;
      }
    }

    unsigned int v28 = v20;
  }

LABEL_19:
  if (0x86BCA1AF286BCA1BLL * ((v22 - v17) >> 3) > v19)
  {
    std::mutex::lock((std::mutex *)(a1 + 512));
    uint64_t v30 = v10[3];
    if (0x86BCA1AF286BCA1BLL * ((v10[4] - v30) >> 3) > v28)
    {
      unsigned int v31 = v28 + 1;
      uint64_t v32 = v28;
      do
      {
        *(void *)&__int128 v37 = v30 + 152 * v32;
        std::deque<di_async_sub_transaction_t *>::emplace_back<di_async_sub_transaction_t *>((void *)(a1 + 576), &v37);
        uint64_t v32 = v31;
        uint64_t v30 = v10[3];
      }

      while (0x86BCA1AF286BCA1BLL * ((v10[4] - v30) >> 3) > v31++);
    }

    std::mutex::unlock((std::mutex *)(a1 + 512));
  }

  if (v28) {
    io_rings_enter(*(void *)(a1 + 352), v28, 0);
  }
  else {
    di_hybrid_subscriber_t::handle_pending_sqes((di_hybrid_subscriber_t *)a1);
  }
  unint64_t v34 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  return 0LL;
}

void sub_18808874C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t di_hybrid_subscriber_t::add_sqe(uint64_t a1, unsigned __int8 *a2)
{
  BOOL is_barrier = io_rings_sqe_is_barrier(a2);
  unint64_t v5 = (dispatch_queue_t *)(a1 + 624);
  if (is_barrier)
  {
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    v8[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke;
    void v8[3] = &__block_descriptor_tmp_3;
    v8[4] = a1;
    v8[5] = a2;
    gcd::gcd_queue::barrier_async(v5, v8);
  }

  else
  {
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 0x40000000LL;
    v7[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_3;
    v7[3] = &__block_descriptor_tmp_4;
    v7[4] = a1;
    v7[5] = a2;
    gcd::gcd_queue::async(v5, v7);
  }

  return 0LL;
}

void ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 632));
  if (v3 == 1)
  {
    io_rings_return_status(*(void *)(v2 + 56), *(void *)(a1 + 40), 0xFFFFFFA7, 0);
  }

  else
  {
    PluginRing::wait_for_pending_ios((PluginRing *)(v2 + 304));
    v5[0] = MEMORY[0x1895F87A8];
    v5[1] = 0x40000000LL;
    __int128 v5[2] = ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_0;
    uint64_t v4 = *(void *)(a1 + 40);
    v5[4] = v2;
    v5[5] = v4;
    gcd::gcd_queue::async((dispatch_queue_t *)(v2 + 624), v5);
  }

void PluginRing::wait_for_pending_ios(PluginRing *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 18);
  unsigned int v2 = atomic_load((unsigned int *)this + 19);
  if (v1 != v2)
  {
    uint64_t v4 = (unint64_t *)((char *)this + 80);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 136);
    v11.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 136));
    unsigned int v6 = atomic_load((unsigned int *)this + 18);
    unsigned int v7 = atomic_load((unsigned int *)this + 19);
    if (v6 != v7)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)((char *)this + 88), &v11);
        unsigned int v8 = atomic_load((unsigned int *)this + 18);
        unsigned int v9 = atomic_load((unsigned int *)this + 19);
      }

      while (v8 != v9);
    }

    if (v11.__owns_) {
      std::mutex::unlock(v11.__m_);
    }
    do
      unint64_t v10 = __ldaxr(v4);
    while (__stlxr(v10 - 1, v4));
  }

uint64_t ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_2(uint64_t a1)
{
  unsigned int v1 = *(uint64_t **)(a1 + 32);
  __dmb(9u);
  return di_hybrid_subscriber_t::exec_sync(v1, *(unsigned __int8 **)(a1 + 40));
}

uint64_t ___ZN22di_hybrid_subscriber_t7add_sqeEPK14io_rings_sqe_t_block_invoke_3(uint64_t a1)
{
  unsigned int v1 = *(uint64_t **)(a1 + 32);
  __dmb(9u);
  return di_hybrid_subscriber_t::exec_sync(v1, *(unsigned __int8 **)(a1 + 40));
}

uint64_t di_hybrid_subscriber_t::suspend(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = (unsigned int *)(this + 632);
  while (1)
  {
    unsigned int v3 = __ldaxr(v2);
    if (v3 != 2) {
      break;
    }
    if (!__stlxr(0, v2))
    {
      gcd::gcd_queue::suspend((dispatch_object_t *)(this + 624));
      io_rings_suspend(*(void *)(v1 + 352));
      *(void *)&__int128 v4 = "di_hybrid_subscriber_t::suspend()";
      *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 31LL;
      int v5 = 0;
      di_log::logger<di_log::log_printer<250ul>>::logger(v6, &v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Plugin's ring suspended, ret code ",  34LL);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf((uint64_t)v6);
      return MEMORY[0x1895BC2CC](&v8);
    }
  }

  __clrex();
  return this;
}

void sub_188088AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<250ul>>::logger(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<250ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CC978;
  a1[45] = &unk_18A1CCA78;
  a1[46] = &unk_18A1CCAA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CC978;
  a1[45] = &unk_18A1CCA00;
  a1[46] = &unk_18A1CCA28;
  return a1;
}

void sub_188088B7C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_hybrid_subscriber_t::resume(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = (unsigned int *)(this + 632);
  while (!__ldaxr(v2))
  {
    if (!__stlxr(2u, v2))
    {
      gcd::gcd_queue::resume((dispatch_object_t *)(this + 624));
      io_rings_resume(*(void *)(v1 + 352));
      *(void *)&__int128 v4 = "di_hybrid_subscriber_t::resume()";
      *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 30LL;
      int v5 = 0;
      di_log::logger<di_log::log_printer<259ul>>::logger(v6, &v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Plugin's ring resumed, ret code ",  32LL);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf((uint64_t)v6);
      return MEMORY[0x1895BC2CC](&v8);
    }
  }

  __clrex();
  return this;
}

void sub_188088CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<259ul>>::logger(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<259ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CCB98;
  a1[45] = &unk_18A1CCC98;
  a1[46] = &unk_18A1CCCC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CCB98;
  a1[45] = &unk_18A1CCC20;
  a1[46] = &unk_18A1CCC48;
  return a1;
}

void sub_188088D44(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  return a1;
}

void di_async_sub_transaction_t::append_empty_buffer(int64x2_t *this, size_t __sz, unsigned int a3)
{
  if ((_DWORD)__sz)
  {
    unsigned int v4 = __sz;
    uint64_t v6 = __sz;
    uint64_t v7 = (uint64_t *)di_async_sub_transaction_t::enqueue_new_buffer(this, __sz);
    unint64_t v8 = this[6].u64[1];
    uint64_t v9 = *v7;
    unint64_t v10 = (void *)this[6].i64[0];
    if ((unint64_t)v10 >= v8)
    {
      uint64_t v12 = this[5].i64[1];
      uint64_t v13 = ((uint64_t)v10 - v12) >> 4;
      unint64_t v14 = v13 + 1;
      uint64_t v15 = v8 - v12;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)&this[6].i64[1], v16);
      }
      else {
        uint64_t v17 = 0LL;
      }
      uint64_t v18 = &v17[16 * v13];
      unint64_t v19 = &v17[16 * v16];
      *(void *)uint64_t v18 = v9;
      *((void *)v18 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v6;
      std::unique_lock<std::mutex> v11 = v18 + 16;
      uint64_t v21 = (char *)this[5].i64[1];
      unsigned int v20 = (char *)this[6].i64[0];
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v18 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *((_OWORD *)v20 - 1);
          v18 -= 16;
          v20 -= 16;
        }

        while (v20 != v21);
        unsigned int v20 = (char *)this[5].i64[1];
      }

      this[5].i64[1] = (uint64_t)v18;
      this[6].i64[0] = (uint64_t)v11;
      this[6].i64[1] = (uint64_t)v19;
      if (v20) {
        operator delete(v20);
      }
    }

    else
    {
      *unint64_t v10 = v9;
      v10[1] = v6;
      std::unique_lock<std::mutex> v11 = v10 + 2;
    }

    this[6].i64[0] = (uint64_t)v11;
    this[3].i32[0] += v4 / a3;
  }

uint64_t di_async_sub_transaction_t::enqueue_new_buffer(int64x2_t *this, size_t __sz)
{
  unsigned int v3 = operator new[](__sz);
  std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char *)#1},void>( &v25,  (uint64_t)v3);
  unint64_t v4 = this[8].u64[0];
  int v5 = (_OWORD *)this[7].i64[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v6 = this[7].i64[0];
    uint64_t v7 = ((uint64_t)v5 - v6) >> 4;
    unint64_t v8 = v7 + 1;
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    else {
      unint64_t v10 = v8;
    }
    __int16 v29 = this + 8;
    std::unique_lock<std::mutex> v11 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)this[8].i64, v10);
    uint64_t v13 = &v11[16 * v7];
    *(_OWORD *)uint64_t v13 = v25;
    __int128 v25 = 0uLL;
    uint64_t v15 = (void *)this[7].i64[0];
    unint64_t v14 = (void *)this[7].i64[1];
    if (v14 == v15)
    {
      int64x2_t v18 = vdupq_n_s64((unint64_t)v14);
      unint64_t v16 = &v11[16 * v7];
    }

    else
    {
      unint64_t v16 = &v11[16 * v7];
      do
      {
        __int128 v17 = *((_OWORD *)v14 - 1);
        v14 -= 2;
        *((_OWORD *)v16 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v17;
        v16 -= 16;
        *unint64_t v14 = 0LL;
        v14[1] = 0LL;
      }

      while (v14 != v15);
      int64x2_t v18 = this[7];
    }

    unint64_t v19 = v13 + 16;
    this[7].i64[0] = (uint64_t)v16;
    this[7].i64[1] = (uint64_t)(v13 + 16);
    int64x2_t v27 = v18;
    uint64_t v20 = this[8].i64[0];
    this[8].i64[0] = (uint64_t)&v11[16 * v12];
    uint64_t v28 = v20;
    uint64_t v26 = v18.i64[0];
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v26);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    this[7].i64[1] = (uint64_t)v19;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

  else
  {
    *int v5 = v25;
    this[7].i64[1] = (uint64_t)(v5 + 1);
  }

  return this[7].i64[1] - 16;
}

void sub_188089034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *di_async_sub_transaction_t::append_moved_transaction_buffers(uint64_t a1, uint64_t a2)
{
  double result = std::vector<iovec>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<iovec*>>,std::move_iterator<std::__wrap_iter<iovec*>>>( a1 + 88,  *(char **)(a1 + 96),  *(__int128 **)(a2 + 88),  *(__int128 **)(a2 + 96),  (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4);
  *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  return result;
}

void compact_sub_transactions( uint64_t *a1@<X0>, unsigned int a2@<W1>, unint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v42 = a1[1];
  if (*a1 == v42)
  {
    *a6 = v7;
    a6[1] = v7;
    a6[2] = a1[2];
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    return;
  }

  *a6 = 0LL;
  a6[1] = 0LL;
  a6[2] = 0LL;
  unint64_t v9 = a4;
  unint64_t v10 = a2;
  unint64_t v40 = a4 * a5;
  unint64_t v39 = a3 - 1;
  do
  {
    unint64_t v11 = *(void *)(v7 + 32) * v9;
    unint64_t v12 = v11 / v10 * v10;
    uint64_t v13 = a6[1];
    if (*a6 != v13)
    {
      unint64_t v14 = *(_DWORD *)(v13 - 104) * a4 + *(void *)(v13 - 120) * v9;
      size_t v15 = v11 - v14;
      BOOL v16 = v11 >= v14 && v14 + a3 > v12;
      if (v16
        && (unint64_t)(((uint64_t)(*(void *)(v13 - 56) - *(void *)(v13 - 64)) >> 4)
                            + ((uint64_t)(*(void *)(v7 + 96) - *(void *)(v7 + 88)) >> 4)
                            + 1) < 0x400)
      {
        goto LABEL_23;
      }

      __int128 v17 = (int64x2_t *)(v13 - 152);
      unint64_t v18 = (v39 + v14) / a3 * a3;
      if (v40 < v18) {
        LODWORD(v1_Block_object_dispose(va, 8) = v40;
      }
      di_async_sub_transaction_t::append_empty_buffer(v17, (v18 - v14), a4);
    }

    memset(v49, 0, 40);
    memset(__p, 0, sizeof(__p));
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v43 = 0u;
    std::shared_ptr<DiskImage>::operator=[abi:ne180100]((void *)&v49[1] + 1, (uint64_t *)(v7 + 136));
    __int128 v20 = *(_OWORD *)(v7 + 48);
    __int128 v19 = *(_OWORD *)(v7 + 64);
    uint64_t v21 = *(void **)(v7 + 80);
    __int128 v45 = *(_OWORD *)(v7 + 32);
    __int128 v46 = v20;
    __int128 v22 = *(_OWORD *)(v7 + 16);
    __int128 v43 = *(_OWORD *)v7;
    __int128 v44 = v22;
    __p[0] = v21;
    __int128 v47 = v19;
    LODWORD(v46) = 0;
    *(void *)&__int128 v45 = v12 / v9;
    unint64_t v23 = a6[1];
    if (v23 >= a6[2])
    {
      uint64_t v28 = std::vector<di_async_sub_transaction_t>::__push_back_slow_path<di_async_sub_transaction_t>( a6,  (uint64_t)&v43);
      __int16 v29 = *(std::__shared_weak_count **)&v49[2];
      a6[1] = v28;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          unint64_t v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }

    else
    {
      __int128 v24 = v44;
      *(_OWORD *)unint64_t v23 = v43;
      *(_OWORD *)(v23 + 16) = v24;
      __int128 v25 = v45;
      __int128 v26 = v47;
      int64x2_t v27 = __p[0];
      *(_OWORD *)(v23 + 4_Block_object_dispose(va, 8) = v46;
      *(_OWORD *)(v23 + 64) = v26;
      *(_OWORD *)(v23 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v25;
      *(void *)(v23 + 80) = v27;
      *(void *)(v23 + 8_Block_object_dispose(va, 8) = 0LL;
      *(void *)(v23 + 96) = 0LL;
      *(void *)(v23 + 104) = 0LL;
      *(_OWORD *)(v23 + 8_Block_object_dispose(va, 8) = *(_OWORD *)&__p[1];
      __p[1] = 0LL;
      __p[2] = 0LL;
      *(void **)(v23 + 104) = __p[3];
      *(void *)(v23 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = 0LL;
      __p[3] = 0LL;
      *(void *)(v23 + 120) = 0LL;
      *(void *)(v23 + 12_Block_object_dispose(va, 8) = 0LL;
      *(_OWORD *)(v23 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = v49[0];
      *(void *)(v23 + 12_Block_object_dispose(va, 8) = *(void *)&v49[1];
      memset(v49, 0, 24);
      *(_OWORD *)(v23 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)((char *)&v49[1] + 8);
      *((void *)&v49[1] + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
      *(void *)&v49[2] = 0LL;
      a6[1] = v23 + 152;
    }

    int v50 = (void **)v49;
    std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v50);
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }

    size_t v15 = v11 % v10;
    uint64_t v13 = a6[1];
LABEL_23:
    uint64_t v32 = v13 - 152;
    di_async_sub_transaction_t::append_empty_buffer((int64x2_t *)(v13 - 152), v15, a4);
    di_async_sub_transaction_t::append_moved_transaction_buffers(v32, v7);
    v7 += 152LL;
  }

  while (v7 != v42);
  uint64_t v33 = a6[1];
  unint64_t v34 = (int64x2_t *)(v33 - 152);
  uint64_t v35 = *(_DWORD *)(v33 - 104) * a4 + *(void *)(v33 - 120) * v9;
  unint64_t v36 = (v39 + v35) / a3 * a3;
  if (v40 < v36) {
    LODWORD(v36) = v40;
  }
  di_async_sub_transaction_t::append_empty_buffer(v34, (v36 - v35), a4);
  uint64_t v37 = *a6;
  uint64_t v38 = a6[1];
  while (v37 != v38)
  {
    if (*(_BYTE *)v37 == 2) {
      *(void *)(v37 + 24) = *(void *)(v37 + 88);
    }
    v37 += 152LL;
  }

void sub_1880893A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t std::deque<di_async_sub_transaction_t *>::emplace_back<di_async_sub_transaction_t *>( void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<di_async_sub_transaction_t *>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }

  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  unint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0LL;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096LL;
  }
  return v13 - 8;
}

void di_hybrid_subscriber_t::handle_pending_sqes(di_hybrid_subscriber_t *this)
{
  if (*((void *)this + 77))
  {
    uint64_t v2 = (char *)this + 576;
    unsigned int v3 = (std::mutex *)((char *)this + 512);
    std::mutex::lock((std::mutex *)this + 8);
    for (int i = 0; *((void *)this + 77); --i)
    {
      PluginRing::try_sub_sqe_allocate((di_hybrid_subscriber_t *)((char *)this + 304));
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(*(void *)(*((void *)this + 73) + ((*((void *)this + 76) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                     + 8 * (*((void *)this + 76) & 0x1FFLL));
      __int128 v7 = *(_OWORD *)(v6 + 32);
      __int128 v8 = *(_OWORD *)(v6 + 48);
      __int128 v9 = *(_OWORD *)(v6 + 64);
      *(void *)(v5 + 80) = *(void *)(v6 + 80);
      *(_OWORD *)(v5 + 4_Block_object_dispose(va, 8) = v8;
      *(_OWORD *)(v5 + 64) = v9;
      *(_OWORD *)(v5 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v7;
      __int128 v10 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
      *(_OWORD *)(v5 + 16) = v10;
      *(_DWORD *)(v5 + _Block_object_dispose(va, 8) = *((_DWORD *)this + 92);
      *((int64x2_t *)this + 3_Block_object_dispose(va, 8) = vaddq_s64(*((int64x2_t *)this + 38), (int64x2_t)xmmword_188179C90);
      std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2, 1);
    }

    std::mutex::unlock(v3);
    if (i) {
      io_rings_enter(*((void *)this + 44), -i, 0);
    }
  }

void sub_1880895A0(_Unwind_Exception *a1)
{
}

uint64_t di_hybrid_subscriber_t::cancel(uint64_t this)
{
  uint64_t v1 = (unsigned int *)(this + 632);
  unsigned int v2 = atomic_load((unsigned int *)(this + 632));
  if (v2 != 1)
  {
    uint64_t v3 = this;
    do
      unsigned int v4 = __ldaxr(v1);
    while (__stlxr(1u, v1));
    if (v4 == 2) {
      gcd::gcd_queue::suspend((dispatch_object_t *)(this + 624));
    }
    gcd::gcd_queue::resume((dispatch_object_t *)(v3 + 624));
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)(v3 + 624), &__block_literal_global_3);
    if (io_rings_cancel(*(void *)(v3 + 352)) < 0) {
      goto LABEL_31;
    }
    uint64_t v5 = (std::mutex *)(v3 + 512);
    std::mutex::lock((std::mutex *)(v3 + 512));
    uint64_t v6 = *(void ***)(v3 + 584);
    __int128 v7 = *(void ***)(v3 + 592);
    if (v7 == v6)
    {
      uint64_t v11 = (void *)(v3 + 616);
    }

    else
    {
      unint64_t v8 = *(void *)(v3 + 608);
      __int128 v9 = &v6[v8 >> 9];
      __int128 v10 = (uint64_t *)((char *)*v9 + 8 * (v8 & 0x1FF));
      uint64_t v11 = (void *)(v3 + 616);
      if (v10 != (uint64_t *)v12)
      {
        do
        {
          uint64_t v13 = *v10;
          __int128 v26 = 0LL;
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          memset(v23, 0, sizeof(v23));
          *(void *)(v13 + 80) = 0LL;
          *(_OWORD *)(v13 + 4_Block_object_dispose(va, 8) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_OWORD *)(v13 + 16) = 0u;
          *(_OWORD *)(v13 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0u;
          *(_OWORD *)uint64_t v13 = 0u;
          unint64_t v14 = *(void **)(v13 + 88);
          if (v14)
          {
            *(void *)(v13 + 96) = v14;
            operator delete(v14);
            *(void *)(v13 + 8_Block_object_dispose(va, 8) = 0LL;
            *(void *)(v13 + 96) = 0LL;
            *(void *)(v13 + 104) = 0LL;
          }

          *(_OWORD *)(v13 + 8_Block_object_dispose(va, 8) = *(_OWORD *)((char *)&v23[5] + 8);
          *(void *)(v13 + 104) = *((void *)&v23[6] + 1);
          memset((char *)&v23[5] + 8, 0, 24);
          std::vector<std::shared_ptr<char>>::__vdeallocate((void **)(v13 + 112));
          *(_OWORD *)(v13 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = v24;
          *(void *)(v13 + 12_Block_object_dispose(va, 8) = v25;
          __int128 v24 = 0uLL;
          *(void *)&__int128 v25 = 0LL;
          std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v13 + 136, (__int128 *)((char *)&v25 + 8));
          size_t v15 = v26;
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              unint64_t v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }

          *(void *)&__int128 v21 = &v24;
          std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
          if (*((void *)&v23[5] + 1))
          {
            *(void *)&v23[6] = *((void *)&v23[5] + 1);
            operator delete(*((void **)&v23[5] + 1));
          }

          if ((char *)++v10 - (_BYTE *)*v9 == 4096)
          {
            unint64_t v18 = (uint64_t *)v9[1];
            ++v9;
            __int128 v10 = v18;
          }
        }

        while (v10 != (uint64_t *)v12);
        uint64_t v6 = *(void ***)(v3 + 584);
        __int128 v7 = *(void ***)(v3 + 592);
        uint64_t v5 = (std::mutex *)(v3 + 512);
        uint64_t v11 = (void *)(v3 + 616);
      }
    }

    void *v11 = 0LL;
    unint64_t v19 = (char *)v7 - (char *)v6;
    if (v19 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        uint64_t v6 = (void **)(*(void *)(v3 + 584) + 8LL);
        *(void *)(v3 + 584) = v6;
        unint64_t v19 = *(void *)(v3 + 592) - (void)v6;
      }

      while (v19 > 0x10);
    }

    if (v19 >> 3 == 1)
    {
      uint64_t v20 = 256LL;
    }

    else
    {
      if (v19 >> 3 != 2)
      {
LABEL_30:
        std::mutex::unlock(v5);
LABEL_31:
        *(void *)&__int128 v21 = "di_hybrid_subscriber_t::cancel()";
        *((void *)&v21 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 30LL;
        int v22 = 0;
        di_log::logger<di_log::log_printer<486ul>>::logger(v23, &v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v27,  (uint64_t)"Plugin's async ring cancelled, ret code ",  40LL);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf((uint64_t)v23);
        return MEMORY[0x1895BC2CC](&v28);
      }

      uint64_t v20 = 512LL;
    }

    *(void *)(v3 + 60_Block_object_dispose(va, 8) = v20;
    goto LABEL_30;
  }

  return this;
}

void sub_1880898BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *di_log::logger<di_log::log_printer<486ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<486ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CCE18;
  a1[45] = &unk_18A1CCF18;
  a1[46] = &unk_18A1CCF40;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CCE18;
  a1[45] = &unk_18A1CCEA0;
  a1[46] = &unk_18A1CCEC8;
  return a1;
}

void sub_188089958(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  return a1;
}

void di_hybrid_subscriber_t::cqe_callback(dispatch_queue_t *this)
{
  uint64_t v2 = (PluginRing *)(this + 38);
  PluginRing::get_next_cqe((PluginRing *)(this + 38), (uint64_t)&v28);
  char v3 = v29;
  if (v29)
  {
    __int128 v4 = v28;
    uint64_t v5 = MEMORY[0x1895F87A8];
    do
    {
      uint64_t v7 = *(void *)(v4 + 136);
      uint64_t v6 = *(std::__shared_weak_count **)(v4 + 144);
      *(void *)&__int128 v28 = v7;
      *((void *)&v28 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }

      v18[0] = v5;
      v18[1] = 1174405120LL;
      unint64_t v19 = ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke;
      uint64_t v20 = &__block_descriptor_tmp_12;
      __int128 v21 = this;
      uint64_t v22 = v4;
      __int128 v23 = v4;
      char v24 = v3;
      *(_DWORD *)__int128 v25 = *(_DWORD *)v30;
      *(_DWORD *)&v25[3] = *(_DWORD *)&v30[3];
      uint64_t v26 = v7;
      uint64_t v27 = v6;
      if (v6)
      {
        __int128 v10 = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }

      if (this[35]) {
        gcd::gcd_queue::async(this + 63, v18);
      }
      else {
        v19((uint64_t)v18);
      }
      uint64_t v12 = v27;
      if (v27)
      {
        uint64_t v13 = (unint64_t *)&v27->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      size_t v15 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      if (*((void *)&v28 + 1))
      {
        BOOL v16 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }

      PluginRing::get_next_cqe(v2, (uint64_t)&v28);
      __int128 v4 = v28;
      char v3 = v29;
    }

    while (v29);
  }

  if (!this[35]) {
    di_hybrid_subscriber_t::handle_pending_sqes((di_hybrid_subscriber_t *)this);
  }
}

void sub_188089B78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void ___ZN22di_hybrid_subscriber_t12cqe_callbackEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(di_hybrid_subscriber_t **)(a1 + 32);
  unsigned int v3 = di_hybrid_subscriber_t::handle_sub_cqe(v2, *(di_async_sub_transaction_t **)(a1 + 40), *(_DWORD *)(a1 + 56));
  if (v3)
  {
    __int128 v4 = (unsigned int *)(*(void *)(a1 + 72) + 16LL);
    while (!__ldaxr(v4))
    {
      if (!__stlxr(v3, v4)) {
        goto LABEL_7;
      }
    }

    __clrex();
  }

LABEL_7:
  uint64_t v13 = 0LL;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  *(_OWORD *)(v6 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0u;
  *(_OWORD *)(v6 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 80) = 0LL;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  uint64_t v7 = *(void **)(v6 + 88);
  if (v7)
  {
    *(void *)(v6 + 96) = v7;
    operator delete(v7);
  }

  *(void *)(v6 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v6 + 96) = 0LL;
  *(void *)(v6 + 104) = 0LL;
  std::vector<std::shared_ptr<char>>::__vdeallocate((void **)(v6 + 112));
  *(void *)(v6 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = 0LL;
  *(void *)(v6 + 120) = 0LL;
  *(void *)(v6 + 12_Block_object_dispose(va, 8) = 0LL;
  __int128 v11 = 0uLL;
  *(void *)&__int128 v12 = 0LL;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v6 + 136, (__int128 *)((char *)&v12 + 8));
  unint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  unint64_t v14 = (void **)&v11;
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (*((void *)v2 + 35)) {
    di_hybrid_subscriber_t::handle_pending_sqes(v2);
  }
}

  unint64_t v9 = v6 & 2;
  if ((v6 & 2) != 0) {
    unint64_t v10 = (unint64_t)v8;
  }
  else {
    unint64_t v10 = (unint64_t)v8 + 1;
  }
  __int128 v11 = v3 & 2;
  if ((v3 & 2) != 0) {
    double result = (unint64_t *)v5;
  }
  else {
    double result = (unint64_t *)((char *)v5 + 1);
  }
  __int128 v12 = v6 & 1;
  uint64_t v13 = v3 & 1;
  else {
    uint64_t v5 = v8;
  }
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    __int128 v4 = v7;
    LOBYTE(v13) = v12;
  }

  *(void *)a3 = v5;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a3 + 16) = v13 | v9;
  return result;
}

    double result = 0LL;
    atomic_store(a2, (unint64_t *)this[5] + 8);
    return result;
  }

  if (v4 <= a2 || ftruncate(*this[7], a2) != -1) {
    goto LABEL_7;
  }
  *(void *)&unint64_t v8 = "int FileLocal::truncate(uint64_t)";
  *((void *)&v8 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 23LL;
  unint64_t v9 = 16;
  di_log::logger<di_log::log_printer<336ul>>::logger(v10, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v11,  (uint64_t)"ftruncate failed, errno: ",  25LL);
  __error();
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<336ul>>::~logger_buf((uint64_t)v10);
  MEMORY[0x1895BC2CC](v12);
  return -*__error();
}

uint64_t di_hybrid_subscriber_t::handle_sub_cqe( di_hybrid_subscriber_t *this, di_async_sub_transaction_t *a2, int a3)
{
  uint64_t v87 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *((unsigned int *)a2 + 12);
  if (a3 == v3)
  {
    uint64_t v4 = *((void *)this + 35);
    if (v4)
    {
      uint64_t v6 = *((void *)a2 + 4);
      uint64_t v7 = *((void *)this + 37);
      dummy_shared_ptr = details::get_dummy_shared_ptr();
      unint64_t v10 = dummy_shared_ptr;
      __int128 v12 = (char *)*((void *)a2 + 11);
      __int128 v11 = (char *)*((void *)a2 + 12);
      uint64_t v13 = v76;
      std::string __p = v76;
      __int128 v14 = xmmword_188178830;
      __int128 v75 = xmmword_188178830;
      unint64_t v15 = (unint64_t)(v11 - v12 - 16) >> 4;
      if (v11 == v12) {
        unint64_t v16 = 0LL;
      }
      else {
        unint64_t v16 = v15 + 1;
      }
      if (v16 < 6)
      {
        if (v12 == v11)
        {
          unint64_t v16 = 0LL;
        }

        else
        {
          unint64_t v27 = v15 + 1;
          do
          {
            uint64_t v28 = *(void *)v12;
            uint64_t v29 = dummy_shared_ptr[1];
            if (v29)
            {
              uint64_t v30 = (unint64_t *)(v29 + 8);
              do
                unint64_t v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }

            uint64_t v32 = *((void *)v12 + 1);
            void *v13 = v28;
            v13[1] = v29;
            v13[2] = v32;
            v12 += 16;
            v13 += 3;
            --v27;
          }

          while (v27);
        }
      }

      else
      {
        if (v16 >= 0x555555555555556LL) {
          boost::container::throw_length_error( (boost::container *)"get_next_capacity, allocator's max size reached",  v9);
        }
        unint64_t v17 = operator new(24 * v16);
        if (__p)
        {
          uint64_t v65 = v7;
          uint64_t v18 = v75;
          if ((void)v75)
          {
            unint64_t v19 = __p;
            do
            {
              --v18;
              unint64_t v19 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v19) + 24);
            }

            while (v18);
          }

          *(void *)&__int128 v75 = 0LL;
          uint64_t v7 = v65;
          if (v76 != __p) {
            operator delete(__p);
          }
        }

        *(void *)&__int128 v75 = 0LL;
        *((void *)&v75 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v16;
        std::string __p = v17;
        if (v12 == v11)
        {
          uint64_t v26 = 0LL;
          uint64_t v20 = (char *)v17;
          __int128 v14 = xmmword_188178830;
        }

        else
        {
          uint64_t v20 = (char *)v17;
          __int128 v14 = xmmword_188178830;
          do
          {
            uint64_t v21 = *(void *)v12;
            uint64_t v22 = v10[1];
            if (v22)
            {
              __int128 v23 = (unint64_t *)(v22 + 8);
              do
                unint64_t v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }

            uint64_t v25 = *((void *)v12 + 1);
            *(void *)uint64_t v20 = v21;
            *((void *)v20 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v22;
            *((void *)v20 + 2) = v25;
            v12 += 16;
            v20 += 24;
          }

          while (v12 != v11);
          uint64_t v26 = v75;
        }

        unint64_t v16 = v26 - 0x5555555555555555LL * ((v20 - (_BYTE *)v17) >> 3);
      }

      *(void *)&__int128 v75 = v16;
      unint64_t v77 = v79;
      __int128 v78 = v14;
      boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>( (uint64_t)&v77,  v16);
      unint64_t v69 = __p;
      uint64_t v66 = (uint64_t)__p + 24 * v16;
      unint64_t v73 = (unint64_t *)v77;
      __int128 v72 = (unint64_t *)((char *)v77 + 8 * v78);
      sg_vec_ref::sg_vec_ref((uint64_t)v80, (uint64_t *)&v69, &v66, &v73, &v72, v7 * v6, v7 * v3);
      uint64_t v33 = (DiskImage::Context *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 136LL))(v4);
      sg_vec_ref::begin((sg_vec_ref *)v80, (uint64_t)&v69);
      sg_vec_ref::end((sg_vec_ref *)v80, (uint64_t)&v66);
      uint64_t v4 = DiskImage::Context::write( v33,  (const sg_vec_ns::details::sg_vec_iterator *)&v69,  (const sg_vec_ns::details::sg_vec_iterator *)&v66);
      unint64_t v34 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          unint64_t v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }

      uint64_t v37 = v67;
      if (v67)
      {
        uint64_t v38 = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      unint64_t v40 = v71;
      if (v71)
      {
        __int128 v41 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      __int128 v43 = v70;
      if (v70)
      {
        __int128 v44 = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      if (v33) {
        (*(void (**)(DiskImage::Context *))(*(void *)v33 + 40LL))(v33);
      }
      __int128 v46 = v86;
      if (v86)
      {
        __int128 v47 = (unint64_t *)&v86->__shared_owners_;
        do
          unint64_t v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }

      uint64_t v49 = v85;
      if (v85)
      {
        int v50 = (unint64_t *)&v85->__shared_owners_;
        do
          unint64_t v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      uint64_t v52 = v84;
      if (v84)
      {
        uint64_t v53 = (unint64_t *)&v84->__shared_owners_;
        do
          unint64_t v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }

      uint64_t v55 = v83;
      if (v83)
      {
        __int128 v56 = (unint64_t *)&v83->__shared_owners_;
        do
          unint64_t v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }

      uint64_t v58 = v82;
      if (v82)
      {
        uint64_t v59 = (unint64_t *)&v82->__shared_owners_;
        do
          unint64_t v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }

      uint64_t v61 = v81;
      if (v81)
      {
        BOOL v62 = (unint64_t *)&v81->__shared_owners_;
        do
          unint64_t v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }

      if (*((void *)&v78 + 1) && v79 != v77) {
        operator delete(v77);
      }
      if (v4 < 0) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = 0LL;
      }
      boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
    }
  }

  else if (a3 < 0)
  {
    return a3;
  }

  else
  {
    return 4294967291LL;
  }

  return v4;
}

void sub_18808A244( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a29) {
    di_hybrid_subscriber_t::handle_sub_cqe((std::__shared_weak_count *)a29);
  }
  di_hybrid_subscriber_t::handle_sub_cqe((uint64_t)&a14, a1, a2, (uint64_t)&a55);
  uint64_t v61 = (_Unwind_Exception *)a55;
  BOOL v62 = (std::__shared_weak_count *)a49;
  if (a49)
  {
    unint64_t v63 = (unint64_t *)(a49 + 8);
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  uint64_t v65 = (std::__shared_weak_count *)a35;
  if (a35)
  {
    uint64_t v66 = (unint64_t *)(a35 + 8);
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 40LL))(v57);
  }
  unint64_t v68 = (std::__shared_weak_count *)STACK[0x438];
  if (STACK[0x438])
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  unint64_t v71 = (std::__shared_weak_count *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    __int128 v72 = (unint64_t *)&v71->__shared_owners_;
    do
      unint64_t v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }

  __int128 v74 = (std::__shared_weak_count *)STACK[0x398];
  if (STACK[0x398])
  {
    __int128 v75 = (unint64_t *)&v74->__shared_owners_;
    do
      unint64_t v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }

  unint64_t v77 = (std::__shared_weak_count *)STACK[0x328];
  if (STACK[0x328])
  {
    __int128 v78 = (unint64_t *)&v77->__shared_owners_;
    do
      unint64_t v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }

  uint64_t v80 = (std::__shared_weak_count *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    unint64_t v81 = (unint64_t *)&v80->__shared_owners_;
    do
      unint64_t v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }

  __int128 v83 = (std::__shared_weak_count *)STACK[0x298];
  if (STACK[0x298])
  {
    char v84 = (unint64_t *)&v83->__shared_owners_;
    do
      unint64_t v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }

  if (STACK[0x220])
  {
    if (v58 != STACK[0x210]) {
      operator delete((void *)STACK[0x210]);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a57);
  _Unwind_Resume(v61);
}

uint64_t __copy_helper_block_e8_72c47_ZTSNSt3__110shared_ptrI19di_hybrid_context_tEE( uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t __destroy_helper_block_e8_72c47_ZTSNSt3__110shared_ptrI19di_hybrid_context_tEE(uint64_t a1)
{
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 72);
}

uint64_t di_plugin_cq_event_callback(uint64_t a1)
{
  *(void *)&__int128 v3 = "di_plugin_cq_event_callback(io_uhandle_t, void *, enum io_rings_event_type_t, struct io_rings_event_type_data_t *)";
  *((void *)&v3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 27LL;
  int v4 = 16;
  di_log::logger<di_log::log_printer<57ul>>::logger(v5, &v3);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v6,  (uint64_t)" overrun events occurred in the plugin's ring!",  46LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x1895BC2CC](&v7);
  return io_rings_cq_clear_overruns(a1);
}

void sub_18808A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<57ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<57ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CC758;
  a1[45] = &unk_18A1CC858;
  a1[46] = &unk_18A1CC880;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CC758;
  a1[45] = &unk_18A1CC7E0;
  a1[46] = &unk_18A1CC808;
  return a1;
}

void sub_18808A610(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CC8F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18808A6DC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CC8F0;
  di_log::logger_buf<di_log::log_printer<57ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<57ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<57ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<57ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<57ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<57ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<57ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18808AA90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<57ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 57LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 57LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t std::__function::__value_func<void ()(io_rings_setup_params_out_t *)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t *std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  unsigned __int8 v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    unsigned __int8 v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::reset[abi:ne180100]( uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_1::__invoke( uint64_t a1, unsigned __int8 *a2)
{
  return 0LL;
}

uint64_t di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_2::__invoke()
{
  return 1LL;
}

void pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 64);
  while (*(void *)(a1 + 104))
  {
    if (atomic_load(v3))
    {
      unint64_t v5 = atomic_load(v3);
      if (v5) {
        (*(void (**)(unint64_t))(*(void *)v5 + 40LL))(v5);
      }
    }

    *(int64x2_t *)(a1 + 96) = vaddq_s64(*(int64x2_t *)(a1 + 96), (int64x2_t)xmmword_188179C90);
    std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v2, 1);
  }

  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v2);
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::__maybe_remove_front_spare[abi:ne180100]( uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 512LL;
  }

  return v4 ^ 1u;
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::~__split_buffer( uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<250ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<250ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<250ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CCB10;
  di_log::logger_buf<di_log::log_printer<250ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<250ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18808B338( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<250ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<250ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 250LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 250LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<259ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<259ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<259ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CCD30;
  di_log::logger_buf<di_log::log_printer<259ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<259ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18808B8E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<259ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<259ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 259LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      unint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 259LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void *std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char *)#1},void>( void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = off_18A1CCDB0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18808BB4C(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_18808BB64(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t std::__shared_ptr_pointer<char *,di_async_sub_transaction_t::allocate_buffer(unsigned long)::{lambda(char * *)#1},std::allocator<char>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100]( a2,  (uint64_t)&_ZTIZN26di_async_sub_transaction_t15allocate_bufferEmEUlPT_E_))
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *std::vector<std::shared_ptr<char>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>,std::move_iterator<std::__wrap_iter<std::shared_ptr<char>*>>>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = (void *)a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (a2 - v13) >> 4;
    uint64_t v16 = v10 - v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    else {
      unint64_t v17 = v14;
    }
    v29[4] = v9;
    if (v17) {
      __int16 v18 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v9, v17);
    }
    else {
      __int16 v18 = 0LL;
    }
    uint64_t v25 = &v18[16 * v15];
    v29[0] = v18;
    v29[1] = v25;
    v29[3] = &v18[16 * v17];
    uint64_t v26 = 16 * a5;
    unint64_t v27 = &v25[16 * a5];
    do
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)a3;
      v25 += 16;
      *(void *)a3 = 0LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
      a3 += 16LL;
      v26 -= 16LL;
    }

    while (v26);
    v29[2] = v27;
    int v5 = (void *)std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(a1, v29, v5);
    std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)v29);
    return v5;
  }

  uint64_t v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    uint64_t v20 = a3 + 16 * a5;
LABEL_18:
    std::vector<std::shared_ptr<char>>::__move_range((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      uint64_t v24 = (uint64_t)v5;
      do
      {
        std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v24, (__int128 *)a3);
        a3 += 16LL;
        v24 += 16LL;
      }

      while (a3 != v20);
    }

    return v5;
  }

  uint64_t v20 = a3 + 16 * v19;
  uint64_t v21 = *(void *)(v9 - 8);
  if (v20 != a4)
  {
    uint64_t v22 = v20;
    __int128 v23 = *(_OWORD **)(v9 - 8);
    do
    {
      *v23++ = *(_OWORD *)v22;
      *(void *)uint64_t v22 = 0LL;
      *(void *)(v22 + _Block_object_dispose(va, 8) = 0LL;
      v22 += 16LL;
      v21 += 16LL;
    }

    while (v22 != a4);
  }

  a1[1] = v21;
  return v5;
}

void sub_18808BD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::vector<std::shared_ptr<char>>::__move_range( uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  int v4 = *(char **)(result + 8);
  int v5 = (char *)(a2 + v4 - a4);
  char v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)char v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)int v5 = 0LL;
    *((void *)v5 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    v5 += 16;
  }

  *(void *)(result + _Block_object_dispose(va, 8) = v6;
  if (v4 != a4)
  {
    uint64_t v7 = (uint64_t)(v4 - 16);
    uint64_t v8 = 16 * ((v4 - a4) >> 4);
    uint64_t v9 = a2 - 16;
    do
    {
      double result = std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16LL;
      v8 -= 16LL;
    }

    while (v8);
  }

  return result;
}

uint64_t std::vector<std::shared_ptr<char>>::__swap_out_circular_buffer(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  int v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      __int128 v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
    }

    while (v7 != v5);
  }

  a2[1] = v6;
  uint64_t v9 = (void *)a1[1];
  uint64_t v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0LL;
      a3[1] = 0LL;
      a3 += 2;
    }

    while (a3 != v9);
    uint64_t v6 = a2[1];
  }

  a2[2] = v10;
  uint64_t v11 = (void *)*a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

char *std::vector<iovec>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<iovec*>>,std::move_iterator<std::__wrap_iter<iovec*>>>( uint64_t a1, char *__src, __int128 *a3, __int128 *a4, uint64_t a5)
{
  int v5 = __src;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    uint64_t v13 = *(_BYTE **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__src - v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v40 = v9;
    if (v17) {
      __int16 v18 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v9, v17);
    }
    else {
      __int16 v18 = 0LL;
    }
    unint64_t v31 = &v18[16 * v15];
    std::string __p = v18;
    uint64_t v37 = v31;
    unint64_t v39 = &v18[16 * v17];
    uint64_t v32 = 16 * a5;
    uint64_t v33 = &v31[16 * a5];
    do
    {
      __int128 v34 = *v7++;
      *(_OWORD *)unint64_t v31 = v34;
      v31 += 16;
      v32 -= 16LL;
    }

    while (v32);
    uint64_t v38 = v33;
    int v5 = (char *)std::vector<iovec>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37) {
      v38 += (v37 - v38 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }

  uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 4;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[a5];
    uint64_t v21 = *(char **)(v9 - 8);
LABEL_18:
    uint64_t v25 = &__src[16 * a5];
    uint64_t v26 = &v21[-16 * a5];
    unint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      unint64_t v27 = v21;
      do
      {
        __int128 v28 = *(_OWORD *)v26;
        v26 += 16;
        *(_OWORD *)unint64_t v27 = v28;
        v27 += 16;
      }

      while ((unint64_t)v26 < v12);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v27;
    if (v21 != v25) {
      memmove(&v21[-16 * ((v21 - v25) >> 4)], __src, v21 - v25);
    }
    if (v20 != v7)
    {
      uint64_t v29 = v5;
      do
      {
        __int128 v30 = *v7++;
        *(_OWORD *)uint64_t v29 = v30;
        v29 += 16;
      }

      while (v7 != v20);
    }

    return v5;
  }

  uint64_t v20 = &a3[v19];
  uint64_t v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    uint64_t v22 = v20;
    __int128 v23 = *(_OWORD **)(v9 - 8);
    do
    {
      __int128 v24 = *v22++;
      *v23++ = v24;
      v21 += 16;
    }

    while (v22 != a4);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v21;
  return v5;
}

void sub_18808C080( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<iovec>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    __int128 v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16LL;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + _Block_object_dispose(va, 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t std::vector<di_async_sub_transaction_t>::__push_back_slow_path<di_async_sub_transaction_t>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286LL) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943LL) {
    unint64_t v9 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  uint64_t v10 = (char *)std::allocator<di_async_sub_transaction_t>::allocate_at_least[abi:ne180100](v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  __int128 v13 = *(_OWORD *)(a2 + 32);
  __int128 v14 = *(_OWORD *)(a2 + 48);
  __int128 v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + 2) = v13;
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v16;
  *((void *)v11 + 12) = 0LL;
  *((void *)v11 + 13) = 0LL;
  *((void *)v11 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  *(_OWORD *)(v11 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *((void *)v11 + 15) = 0LL;
  *((void *)v11 + 16) = 0LL;
  *((void *)v11 + 14) = 0LL;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v50 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(v11 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  v19[2] = v11 + 152;
  std::vector<di_async_sub_transaction_t>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<di_async_sub_transaction_t>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_18808C2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152LL;
        std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::vector<di_async_sub_transaction_t>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 152LL;
        std::__destroy_at[abi:ne180100]<di_async_sub_transaction_t,0>(v3);
      }

      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void std::vector<std::shared_ptr<char>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void non-virtual thunk to'di_log::logger<di_log::log_printer<486ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<486ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<486ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CCFB0;
  di_log::logger_buf<di_log::log_printer<486ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<486ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18808C7B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<486ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<486ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 486LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 486LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t DiskImage::Context::write( DiskImage::Context *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  if ((*(_BYTE *)(*((void *)this + 1) + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(DiskImage::Context *, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *))(*(void *)this + 8LL))( this,  a2,  a3);
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v4 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 25LL;
    int v5 = 2;
    di_log::logger<di_log::log_printer<166ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Disk image is terminated, skipping write",  40LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x1895BC2CC](&v8);
  }

  return -6LL;
}

void sub_18808CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<166ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<166ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CD038;
  a1[45] = &unk_18A1CD138;
  a1[46] = &unk_18A1CD160;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CD038;
  a1[45] = &unk_18A1CD0C0;
  a1[46] = &unk_18A1CD0E8;
  return a1;
}

void sub_18808CB1C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CD1D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18808CBE8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CD1D0;
  di_log::logger_buf<di_log::log_printer<166ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<166ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<166ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<166ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<166ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<166ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<166ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18808CF9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<166ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 166LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 166LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<250ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CCB10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18808D210(_Unwind_Exception *a1)
{
}

void *std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_18A1CD250;
  return result;
}

void std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::__clone( uint64_t a1, void *a2)
{
  *a2 = off_18A1CD250;
}

uint64_t std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::operator()( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 32LL))();
}

uint64_t std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0,std::allocator<PluginRing::PluginRing(_di_plugin_image_t *,void (*)(io_rings_desc_t *,void *),void *)::$_0>,void ()(io_rings_setup_params_out_t *)>::target_type()
{
}

void *std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_18A1CD2E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_18A1CD2E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::operator()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  dint i = (DiskImageStackable *)io_rings_di_subscriber_t::get_di(*(io_rings_di_subscriber_t **)(a1 + 8));
  uint64_t result = DiskImageStackable::create_async_ctx(di, &v5);
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0,std::allocator<di_hybrid_subscriber_t::di_hybrid_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target_type()
{
}

uint64_t DiskImageStackable::create_async_ctx@<X0>(DiskImageStackable *this@<X0>, void *a2@<X8>)
{
  char v4 = operator new(0x40uLL);
  uint64_t result = DiskImageStackable::ContextStackable::ContextStackable((uint64_t)v4, (uint64_t)this, 1);
  *a2 = v4;
  return result;
}

void sub_18808D3FC(_Unwind_Exception *a1)
{
}

uint64_t DiskImageStackable::ContextStackable::ContextStackable(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_18A1CD360;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  char v6 = (char **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
  if (a3 == 1)
  {
    uint64_t bottom_async_cache = DiskImageStackable::ContextStackable::get_bottom_async_cache(a1, a2);
    char v8 = 0;
    *(void *)(a1 + 40) = bottom_async_cache;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
  }

  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
    char v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 24) - 24LL) + 96LL))(*(void *)(*(void *)(a2 + 24) - 24LL));
  }

  *(_BYTE *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v10 != i; v10 += 48LL)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555LL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)
    {
      uint64_t v13 = *(void *)(v10 + 24);
      os_log_type_t v12 = *(std::__shared_weak_count **)(v10 + 32);
      v30[0] = v13;
      v30[1] = (uint64_t)v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }

      __int128 v16 = operator new(0x28uLL);
      *__int128 v16 = off_18A1CD418;
      v16[1] = v13;
      v16[3] = 0LL;
      v16[4] = 0LL;
      v16[2] = 0LL;
      unint64_t v31 = v16;
      int v17 = *(void **)(a1 + 24);
      if ((unint64_t)v17 >= *(void *)(a1 + 32))
      {
        uint64_t v25 = std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImagePlugin::ContextPluginAsync>>( v6,  (uint64_t *)&v31);
        uint64_t v26 = (uint64_t)v31;
        *(void *)(a1 + 24) = v25;
        unint64_t v31 = 0LL;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 40LL))(v26);
        }
      }

      else
      {
        void *v17 = v16;
        __int16 v18 = operator new(0x20uLL);
        uint64_t v19 = (uint64_t)v31;
        *__int16 v18 = off_18A1CD3B8;
        v18[1] = 0LL;
        void v18[2] = 0LL;
        void v18[3] = v19;
        v17[1] = v18;
        *(void *)(a1 + 24) = v17 + 2;
        unint64_t v31 = 0LL;
      }

      if (v12)
      {
        unint64_t v27 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }

    else
    {
      __int16 v20 = (void *)(*(uint64_t (**)(void))(**(void **)(v10 + 8) + 136LL))(*(void *)(v10 + 8));
      v30[0] = (uint64_t)v20;
      uint64_t v21 = *(void **)(a1 + 24);
      if ((unint64_t)v21 >= *(void *)(a1 + 32))
      {
        __int128 v23 = std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImage::Context>>( v6,  v30);
        uint64_t v24 = v30[0];
        *(void *)(a1 + 24) = v23;
        v30[0] = 0LL;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 40LL))(v24);
        }
      }

      else
      {
        *uint64_t v21 = v20;
        if (v20)
        {
          __int16 v20 = operator new(0x20uLL);
          uint64_t v22 = v30[0];
          *__int16 v20 = off_18A1CD470;
          v20[1] = 0LL;
          v20[2] = 0LL;
          v20[3] = v22;
        }

        v21[1] = v20;
        *(void *)(a1 + 24) = v21 + 2;
      }
    }
  }

  return a1;
}

void sub_18808D66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void DiskImageStackable::ContextStackable::~ContextStackable(DiskImageStackable::ContextStackable *this)
{
  *(void *)this = off_18A1CD360;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;
  *(void *)this = off_18A1CD360;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(this);
}

char *std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImagePlugin::ContextPluginAsync>>( char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v26 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[16 * v4];
  __int128 v23 = v10;
  v24.i64[0] = (uint64_t)v11;
  os_log_type_t v12 = &v10[16 * v9];
  v24.i64[1] = (uint64_t)v11;
  uint64_t v25 = v12;
  uint64_t v13 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v13)
  {
    __int128 v14 = operator new(0x20uLL);
    uint64_t v15 = *a2;
    *__int128 v14 = off_18A1CD3B8;
    v14[1] = 0LL;
    void v14[2] = 0LL;
    void v14[3] = v15;
  }

  else
  {
    __int128 v14 = 0LL;
  }

  *((void *)v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v14;
  *a2 = 0LL;
  __int128 v16 = v11 + 16;
  v24.i64[1] = (uint64_t)(v11 + 16);
  __int16 v18 = *a1;
  int v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }

  else
  {
    do
    {
      __int128 v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v11 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v19;
      v11 -= 16;
      *(void *)int v17 = 0LL;
      *((void *)v17 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    }

    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    __int128 v16 = (char *)v24.i64[1];
    os_log_type_t v12 = v25;
  }

  *a1 = v11;
  a1[1] = v16;
  int64x2_t v24 = v20;
  uint64_t v21 = a1[2];
  a1[2] = v12;
  uint64_t v25 = v21;
  __int128 v23 = (char *)v20.i64[0];
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v23);
  return v16;
}

void sub_18808D894(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImagePlugin::ContextPluginAsync *>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

unint64_t DiskImagePlugin::ContextPluginAsync::_read( DiskImagePlugin **this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  return DiskImagePlugin::read_async(this[1], (DiskImagePlugin::ContextPluginAsync *)this, a2, a3);
}

void DiskImagePlugin::ContextPluginAsync::~ContextPluginAsync(DiskImagePlugin::ContextPluginAsync *this)
{
  *(void *)this = off_18A1CD418;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;
  *(void *)this = off_18A1CD418;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(this);
}

char *std::vector<std::shared_ptr<DiskImage::Context>>::__emplace_back_slow_path<std::unique_ptr<DiskImage::Context>>( char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v26 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[16 * v4];
  __int128 v23 = v10;
  v24.i64[0] = (uint64_t)v11;
  os_log_type_t v12 = &v10[16 * v9];
  v24.i64[1] = (uint64_t)v11;
  uint64_t v25 = v12;
  uint64_t v13 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v13)
  {
    __int128 v14 = operator new(0x20uLL);
    uint64_t v15 = *a2;
    *__int128 v14 = off_18A1CD470;
    v14[1] = 0LL;
    void v14[2] = 0LL;
    void v14[3] = v15;
  }

  else
  {
    __int128 v14 = 0LL;
  }

  *((void *)v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v14;
  *a2 = 0LL;
  __int128 v16 = v11 + 16;
  v24.i64[1] = (uint64_t)(v11 + 16);
  __int16 v18 = *a1;
  int v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }

  else
  {
    do
    {
      __int128 v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v11 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v19;
      v11 -= 16;
      *(void *)int v17 = 0LL;
      *((void *)v17 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    }

    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    __int128 v16 = (char *)v24.i64[1];
    os_log_type_t v12 = v25;
  }

  *a1 = v11;
  a1[1] = v16;
  int64x2_t v24 = v20;
  uint64_t v21 = a1[2];
  a1[2] = v12;
  uint64_t v25 = v21;
  __int128 v23 = (char *)v20.i64[0];
  std::__split_buffer<std::shared_ptr<char>>::~__split_buffer((uint64_t)&v23);
  return v16;
}

void sub_18808DAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::__shared_ptr_pointer<DiskImage::Context  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<DiskImage::Context  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DiskImage::Context  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == -2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
    }
  }

  else if (v2 == -1)
  {
    if (*(void *)(a1 + 8))
    {
      uint64_t v3 = *(std::mutex **)a1;
      std::mutex::lock(*(std::mutex **)a1);
      std::deque<std::atomic<DiskImage::Context *>>::emplace_back<DiskImage::Context *&>( (void *)(*(void *)a1 + 64LL),  (void *)(a1 + 8));
      std::mutex::unlock(v3);
    }
  }

  else if ((v2 & 0x8000000000000000LL) == 0)
  {
    atomic_store( *(void *)(a1 + 8),  (unint64_t *)(*(void *)(*(void *)(*(void *)a1 + 72LL)
  }

  return a1;
}

uint64_t std::deque<std::atomic<DiskImage::Context *>>::emplace_back<DiskImage::Context *&>( void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    std::deque<std::atomic<DiskImage::Context *>>::__add_back_capacity(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }

  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF)) = *a2;
  uint64_t v10 = v8 + 1;
  a1[5] = v10;
  unint64_t v11 = v7 + v10;
  os_log_type_t v12 = (void *)(v5 + 8 * (v11 >> 9));
  uint64_t v13 = v11 & 0x1FF;
  if (v13) {
    uint64_t v14 = *v12 + 8 * v13;
  }
  else {
    uint64_t v14 = *(v12 - 1) + 4096LL;
  }
  return v14 - 8;
}

void std::deque<std::atomic<DiskImage::Context *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( v5,  v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( a1,  &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( (uint64_t)a1,  &v54);
    __int128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( a1,  &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( (uint64_t)a1,  &v54);
    __int128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( a1,  &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( (uint64_t)a1,  &v54);
    __int128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( a1,  &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( (uint64_t)a1,  &v54);
    __int128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( a1,  &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( (uint64_t)a1,  &v54);
    __int128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }

    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( a1,  &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( (uint64_t)a1,  &v54);
    __int128 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

LABEL_30:
      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v25);
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( &v54,  &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v25);
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( &v54,  &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v25);
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( &v54,  &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v25);
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( &v54,  &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v25);
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( &v54,  &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int128 v56 = a1 + 3;
  *(void *)&__int128 v54 = std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 3),  v25);
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( &v54,  &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( (uint64_t)&v54,  v27);
  }

  uint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_18808DF9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_back( void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      __int128 v19 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( v4,  v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *>>::push_front( uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( v6,  v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_back( void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( a1[4],  v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void std::__split_buffer<std::atomic<DiskImage::Context *> *,std::allocator<std::atomic<DiskImage::Context *> *> &>::push_front( uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( *(void *)(a1 + 32),  v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t di_log::logger_buf<di_log::log_printer<259ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CCD30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18808E4AC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

void std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::__on_zero_shared( uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 24);
  unsigned int v2 = atomic_load((unsigned int *)v1 + 4);
  if (!v2) {
    unsigned int v2 = *((_DWORD *)v1 + 5);
  }
  io_rings_return_status(*(void *)(*(void *)v1 + 56LL), *((void *)v1 + 1), v2, 0);
  BOOL v3 = (void **)(v1 + 24);
  std::vector<di_async_sub_transaction_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<di_hybrid_context_t *,di_hybrid_subscriber_t::handle_read_sqe(io_rings_sqe_t const*,pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t &,int)::$_0,std::allocator<di_hybrid_context_t>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void std::deque<di_async_sub_transaction_t *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( v5,  v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_18808E840( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<486ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CCFB0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18808E8F4(_Unwind_Exception *a1)
{
}

LABEL_11:
  return v13;
}

  atomic_store((unint64_t)v7, &v17);
  if (*(void *)(a1 + 456))
  {
    uint64_t v12 = 0LL;
    while (2)
    {
      uint64_t v13 = (unint64_t *)(*(void *)(a1 + 584) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0LL;
          do
            uint64_t v15 = __ldaxr(&v17);
          while (__stlxr(0LL, &v17));
          atomic_store(v15, a4);
          return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v17);
        }
      }

      __clrex();
      break;
    }
  }

  *a4 = 0LL;
  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v17);
}

  atomic_store(v4, &v12);
  ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::operator=((unint64_t *)(a1 + 360), &v12);
  uint64_t result = ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v12);
  do
  {
    uint64_t v9 = __ldaxr(v3);
    uint64_t v10 = v9 - 1;
  }

  while (__stlxr(v10, v3));
  if (!v10)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1LL;
    return (unint64_t *)ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val( (uint64_t)v3,  v11,  1u);
  }

  return result;
}

  atomic_store((unint64_t)v7, &v17);
  if (*(void *)(a1 + 632))
  {
    uint64_t v12 = 0LL;
    while (2)
    {
      uint64_t v13 = (unint64_t *)(*(void *)(a1 + 760) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0LL;
          do
            uint64_t v15 = __ldaxr(&v17);
          while (__stlxr(0LL, &v17));
          atomic_store(v15, a4);
          return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v17);
        }
      }

      __clrex();
      break;
    }
  }

  *a4 = 0LL;
  return ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v17);
}

  atomic_store(v4, &v12);
  ref::tagged_ptr<di_asif::details::table,unsigned long long>::operator=((unint64_t *)(a1 + 536), &v12);
  uint64_t result = ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(&v12);
  do
  {
    uint64_t v9 = __ldaxr(v3);
    uint64_t v10 = v9 - 1;
  }

  while (__stlxr(v10, v3));
  if (!v10)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1LL;
    return (unint64_t *)ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val( (uint64_t)v3,  v11,  1u);
  }

  return result;
}

  return v18;
}

  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)&theDict);
  return Value;
}

  atomic_store((unint64_t)v7, &v17);
  if (*(void *)(a1 + 424))
  {
    uint64_t v12 = 0LL;
    while (2)
    {
      uint64_t v13 = (unint64_t *)(*(void *)(a1 + 552) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0LL;
          do
            uint64_t v15 = __ldaxr(&v17);
          while (__stlxr(0LL, &v17));
          atomic_store(v15, a4);
          return ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v17);
        }
      }

      __clrex();
      break;
    }
  }

  *a4 = 0LL;
  return ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v17);
}

  atomic_store(v4, &v12);
  ref::tagged_ptr<CurrentReader,unsigned long long>::operator=((unint64_t *)(a1 + 328), &v12);
  uint64_t result = ref::tagged_ptr<CurrentReader,unsigned long long>::reset(&v12);
  do
  {
    uint64_t v9 = __ldaxr(v3);
    uint64_t v10 = v9 - 1;
  }

  while (__stlxr(v10, v3));
  if (!v10)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1LL;
    return (unint64_t *)ref::details::ctrl_blk<CurrentReader,unsigned long long>::reset_val((uint64_t)v3, v11, 1u);
  }

  return result;
}

LABEL_8:
  return v9;
}

    _Unwind_Resume(a1);
  }

  __cxa_begin_catch(a1);
  uint64_t v7 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( (uint64_t)v8,  (uint64_t)&v5);
  uint64_t v11 = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( v2,  (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v11;
  *(_BYTE *)(v2 + 520) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

  uint64_t v11 = a2[1] << 9;
  uint64_t v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  BOOL v14 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    uint64_t v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    unint64_t v22 = 132;
    uint64_t v23 = 2080;
    uint64_t v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    unint64_t v25 = 2048;
    uint64_t v26 = v11;
    unint64_t v27 = 1024;
    uint64_t v28 = v6;
    uint64_t v29 = 1024;
    __int128 v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v17);
      free(v17);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      unint64_t v22 = 132;
      uint64_t v23 = 2080;
      uint64_t v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      unint64_t v25 = 2048;
      uint64_t v26 = v11;
      unint64_t v27 = 1024;
      uint64_t v28 = v6;
      uint64_t v29 = 1024;
      __int128 v30 = v19;
      _os_log_impl( &dword_188046000,  v18,  OS_LOG_TYPE_ERROR,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  buf,  0x28u);
    }
  }

  *__error() = v14;
  int64_t v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

  uint64_t v11 = a2[1] << 9;
  uint64_t v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  BOOL v14 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
    uint64_t v16 = *__error();
    *(_DWORD *)uint64_t buf = 68158722;
    unint64_t v22 = 133;
    uint64_t v23 = 2080;
    uint64_t v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    unint64_t v25 = 2048;
    uint64_t v26 = v11;
    unint64_t v27 = 1024;
    uint64_t v28 = v6;
    uint64_t v29 = 1024;
    __int128 v30 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    if (v17)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v17);
      free(v17);
    }
  }

  else
  {
    getDIOSLog();
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *__error();
      *(_DWORD *)uint64_t buf = 68158722;
      unint64_t v22 = 133;
      uint64_t v23 = 2080;
      uint64_t v24 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      unint64_t v25 = 2048;
      uint64_t v26 = v11;
      unint64_t v27 = 1024;
      uint64_t v28 = v6;
      uint64_t v29 = 1024;
      __int128 v30 = v19;
      _os_log_impl( &dword_188046000,  v18,  OS_LOG_TYPE_ERROR,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  buf,  0x28u);
    }
  }

  *__error() = v14;
  int64_t v20 = *__error();
  if (v20 < 0) {
    return v20;
  }
  else {
    return -v20;
  }
}

    BOOL v3 = 0LL;
  }

    BOOL v3 = 0LL;
  }

    BOOL v3 = 0LL;
  }

    BOOL v3 = 0LL;
  }

    BOOL v3 = 0LL;
  }

    BOOL v3 = 0LL;
  }

  return v14;
}

void sub_18808F60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808F684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808F73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808F798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808F9C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_18808FBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808FC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808FE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18808FF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880900F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  BOOL v14 = v13;

  if (__p) {
    operator delete[](__p);
  }
  if (a2 == 1)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    uint64_t v18 = (void *)NSString;
    (*(void (**)(void *))(*(void *)v17 + 16LL))(v17);
    [v18 stringWithFormat:@"Invalid public key: %s"];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[DIError failWithPOSIXCode:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:verboseInfo:error:",  22LL,  v19,  v12);

    __cxa_end_catch();
    JUMPOUT(0x18809003CLL);
  }

  _Unwind_Resume(a1);
}

void sub_18809035C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188090670(_Unwind_Exception *a1)
{
  unint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1880907E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880908FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188090C7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_188091074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188091334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188091544( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_188091654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_188091784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1880918AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

_DWORD *crypto::header::encryption_key_bits_size_t::encryption_key_bits_size_t(_DWORD *this, int a2)
{
  *this = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = off_18A1CA768;
    exception[1] = "encryption_key_bits_size_t";
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = a2;
  }

  return this;
}

void sub_188091ED0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Backend::read(Backend *this, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)details::get_dummy_shared_ptr() + 1);
  uint64_t v16 = a2;
  uint64_t v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  char v21 = 0;
  uint64_t v11 = (*(uint64_t (**)(Backend *, char **))(*(void *)this + 104LL))(this, &v16);
  uint64_t v12 = v17;
  if (v17)
  {
    uint64_t v13 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v11;
}

void sub_188091FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1880920D0(_Unwind_Exception *a1)
{
}

LABEL_13:
  char v21 = v31;
  if (v31)
  {
    unint64_t v22 = (unint64_t *)&v31->__shared_owners_;
    do
      uint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  return v20;
}

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)&v14,  v15);
}

    BOOL v3 = *((void *)v2 + 2);
    *((void *)v2 + 2) = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    char v4 = *((void *)v2 + 1);
    *((void *)v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    operator delete(v2);
    goto LABEL_18;
  }

  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v5 = "sparse_bundles::Band::~Band()";
    *((void *)&v5 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 27LL;
    uint64_t v6 = 2;
    di_log::logger<di_log::log_printer<163ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Closing an unchanged ",  21LL);
    sparse_bundles::operator<<(&v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<163ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x1895BC2CC](v9);
  }

void sub_1880922B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<crypto::public_key_header>::operator=[abi:ne180100]<crypto::public_key_header,void>( uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    __int128 v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }

  else
  {
    *(_DWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    __int128 v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(_BYTE *)(a1 + 564) = 1;
  }

  return a1;
}

void sub_188092900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188092A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188092B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188092C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188092DE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  _Unwind_Resume(a1);
}

const void **CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_188092F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18809312C(_Unwind_Exception *a1, int a2)
{
  uint64_t v8 = v6;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Failed to create disk image with shadow/cache",  v4);
    __cxa_end_catch();
    JUMPOUT(0x1880930E4LL);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::resolve_stack_nodes_from_path( const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type cap = v20.u64[1];
  uint64_t v4 = v20.i64[0];
  if (v20.i64[0] == v20.i64[1])
  {
    BOOL v6 = a1[1].__pn_.__r_.__value_.__s.__data_[0] == 0;
    uint64_t v7 = operator new(0x40uLL);
    if ((char)a1->__pn_.__r_.__value_.__s.__size_ < 0) {
      std::string::__init_copy_ctor_external( &pn,  a1->__pn_.__r_.__value_.__l.__data_,  a1->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = a1->__pn_;
    }
    __int128 v22 = 0uLL;
    uint64_t v23 = 0LL;
    diskimage_uio::stack_image_node::stack_image_node((uint64_t)v7, 0, v6, (__int128 *)&pn, &v22, 0LL);
    uint64_t v8 = v20.i64[1];
    if (v20.i64[1] >= (unint64_t)v21)
    {
      uint64_t v9 = (v20.i64[1] - v20.i64[0]) >> 3;
      unint64_t v10 = (uint64_t)&v21[-v20.i64[0]] >> 2;
      if (v10 <= v9 + 1) {
        unint64_t v10 = v9 + 1;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v26 = &v21;
      if (v11) {
        uint64_t v12 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)&v21,  v11);
      }
      else {
        uint64_t v12 = 0LL;
      }
      uint64_t v13 = &v12[8 * v9];
      unint64_t v14 = &v12[8 * v11];
      unint64_t v25 = v14;
      *(void *)uint64_t v13 = v7;
      std::string::size_type cap = (std::string::size_type)(v13 + 8);
      pn.__r_.__value_.__l.__cap_ = (std::string::size_type)(v13 + 8);
      uint64_t v15 = (void *)v20.i64[1];
      uint64_t v16 = (void *)v20.i64[0];
      if (v20.i64[1] == v20.i64[0])
      {
        int64x2_t v18 = vdupq_n_s64(v20.u64[1]);
      }

      else
      {
        do
        {
          uint64_t v17 = *--v15;
          void *v15 = 0LL;
          *((void *)v13 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v17;
          v13 -= 8;
        }

        while (v15 != v16);
        int64x2_t v18 = v20;
        std::string::size_type cap = pn.__r_.__value_.__l.__cap_;
        unint64_t v14 = v25;
      }

      v20.i64[0] = (uint64_t)v13;
      v20.i64[1] = cap;
      *(int64x2_t *)&pn.__r_.__value_.__r.__words[1] = v18;
      uint64_t v19 = v21;
      char v21 = v14;
      unint64_t v25 = v19;
      pn.__r_.__value_.__r.__words[0] = v18.i64[0];
      std::__split_buffer<std::unique_ptr<diskimage_uio::stack_image_node const>>::~__split_buffer((uint64_t)&pn);
    }

    else
    {
      *(void *)v20.i64[1] = v7;
      std::string::size_type cap = v8 + 8;
    }

    v20.i64[1] = cap;
    uint64_t v4 = v20.i64[0];
  }

  *(void *)a2 = v4;
  *(void *)(a2 + _Block_object_dispose(va, 8) = cap;
  *(void *)(a2 + 16) = v21;
  char v21 = 0LL;
  int64x2_t v20 = 0uLL;
  *(_BYTE *)(a2 + 24) = 1;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&pn);
}

void sub_1880933B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a12 = &a9;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a2 == 1)
  {
    int v24 = *((_DWORD *)__cxa_begin_catch(a1) + 2);
    unint64_t v25 = std::generic_category();
    *(_DWORD *)uint64_t v20 = v24;
    *(void *)(v20 + _Block_object_dispose(va, 8) = v25;
    *(_BYTE *)(v20 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x188093398LL);
  }

  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_impl::diskimage_impl(uint64_t a1, const std::error_category **a2)
{
  *(void *)a1 = off_18A1CD600;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  diskimage_uio::details::diskimage_open_params_impl::query_image_format(*a2, (uint64_t)v17);
  if (!v17[16])
  {
    *(void *)&__int128 v13 = "diskimage_uio::details::diskimage_impl::diskimage_impl(diskimage_open_params &&)";
    *((void *)&v13 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
    int v14 = 16;
    di_log::logger<di_log::log_printer<1109ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v16,  (uint64_t)"Diskimageuio: Can't get image format",  36LL);
    di_log::logger<di_log::log_printer<1109ul>>::~logger((uint64_t)v15);
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v17);
  }

  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership( (diskimage_uio::details::diskimage_open_params_impl *)*a2,  v15);
  uint64_t v4 = v15[0];
  v15[0] = 0LL;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
    uint64_t v6 = v15[0];
    v15[0] = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
    }
  }

  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 72LL))(v15);
  if (v15[0] || v15[1] || v15[2] || v15[3])
  {
    uint64_t v7 = *(const void **)(a1 + 8);
    if (!v7
    {
      *(void *)&__int128 v13 = "diskimage_uio::details::diskimage_impl::diskimage_impl(diskimage_open_params &&)";
      *((void *)&v13 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
      int v14 = 16;
      di_log::logger<di_log::log_printer<1122ul>>::logger(v15, &v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v16,  (uint64_t)"Diskimageuio: images with constraints currently not supported",  61LL);
      di_log::logger<di_log::log_printer<1122ul>>::~logger((uint64_t)v15);
      unint64_t v10 = __cxa_allocate_exception(0x10uLL);
      *unint64_t v10 = make_error_code(164LL);
      v10[1] = v11;
    }
  }

  return a1;
}

void sub_188093674( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(void *)(v13 + 8);
  *(void *)(v13 + _Block_object_dispose(va, 8) = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16LL))(v16);
  }
  _Unwind_Resume(a1);
}

_OWORD *diskimage_uio::diskimage_open_params::query_image_format@<X0>( const std::error_category **this@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::query_image_format(*this, a2);
}

void *di_log::logger<di_log::log_printer<1109ul>>::logger(void *a1, __int128 *a2)
{
  BOOL v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1109ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CD708;
  a1[45] = &unk_18A1CD808;
  a1[46] = &unk_18A1CD830;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CD708;
  a1[45] = &unk_18A1CD790;
  a1[46] = &unk_18A1CD7B8;
  return a1;
}

void sub_188093768(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t diskimage_uio::diskimage_open_params::get_internal(diskimage_uio::diskimage_open_params *this)
{
  return *(void *)this;
}

void diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership( diskimage_uio::details::diskimage_open_params_impl *this@<X0>, void *a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(v18, this);
  if (!v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
  }

  bzero(v20, 0x270uLL);
  diskimage_uio::details::diskimage_open_params_impl::operator=((uint64_t)this, (__int128 *)v20);
  uint64_t v4 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  uint64_t v7 = v26;
  if (v26)
  {
    uint64_t v8 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  unint64_t v10 = v25;
  if (v25)
  {
    uint64_t v11 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v24);
  uint64_t v13 = __p;
  std::string __p = 0LL;
  if (v13) {
    operator delete(v13);
  }
  int v14 = v22;
  if (v22)
  {
    uint64_t v15 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if (v21 < 0) {
    operator delete(v20[0]);
  }
  *a2 = v18[0];
}

void sub_1880939A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11)
  {
    if (a9) {
      (*(void (**)(uint64_t))(*(void *)a9 + 16LL))(a9);
    }
  }

  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<1122ul>>::logger(void *a1, __int128 *a2)
{
  BOOL v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1122ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CD988;
  a1[45] = &unk_18A1CDA88;
  a1[46] = &unk_18A1CDAB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CD988;
  a1[45] = &unk_18A1CDA10;
  a1[46] = &unk_18A1CDA38;
  return a1;
}

void sub_188093A78(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t make_error_code(uint64_t result)
{
  if ((v1 & 1) == 0)
  {
    int v3 = result;
    LODWORD(result) = v3;
    if (v2)
    {
      LODWORD(result) = v3;
    }
  }

  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr( diskimage_uio::details::diskimage_open_params_impl *this)
{
  int v3 = this;
  uint64_t v1 = *((unsigned int *)this + 138);
  if ((_DWORD)v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(diskimage_uio::details::diskimage_open_params_impl ***, char *))off_18A1CDB90[v1])( &v4,  (char *)this + 48);
}

void *diskimage_uio::const_extents_iterator::const_extents_iterator(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

diskimage_uio::const_extents_iterator *diskimage_uio::const_extents_iterator::const_extents_iterator( diskimage_uio::const_extents_iterator *this, const diskimage_uio::details::extents_iterator_impl **a2)
{
  uint64_t v4 = (diskimage_uio::details::extents_iterator_impl *)operator new(0x20uLL);
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(v4, *a2);
  *(void *)this = v4;
  return this;
}

void sub_188093C00(_Unwind_Exception *a1)
{
}

diskimage_uio::details::extents_iterator_impl **diskimage_uio::const_extents_iterator::operator=( diskimage_uio::details::extents_iterator_impl **a1, const diskimage_uio::details::extents_iterator_impl **a2)
{
  uint64_t v4 = (diskimage_uio::details::extents_iterator_impl *)operator new(0x20uLL);
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(v4, *a2);
  *a1 = v4;
  return a1;
}

void sub_188093C5C(_Unwind_Exception *a1)
{
}

void *diskimage_uio::const_extents_iterator::const_extents_iterator(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

uint64_t ***diskimage_uio::const_extents_iterator::operator=(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](*a1, 0LL);
    operator delete(v4);
  }

  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

BOOL diskimage_uio::const_extents_iterator::operator==(uint64_t **a1, uint64_t **a2)
{
  return DiskImage::const_extents_iterator_t::operator==(**a1, **a2);
}

BOOL diskimage_uio::const_extents_iterator::operator!=(uint64_t **a1, uint64_t **a2)
{
  return DiskImage::const_extents_iterator_t::operator!=(**a1, **a2);
}

uint64_t diskimage_uio::const_extents_iterator::operator*(void *a1)
{
  return *a1 + 8LL;
}

uint64_t diskimage_uio::const_extents_iterator::operator->(void *a1)
{
  return *a1 + 8LL;
}

uint64_t *diskimage_uio::const_extents_iterator::operator++(uint64_t *a1)
{
  return a1;
}

uint64_t diskimage_uio::details::extents_iterator_impl::operator++(uint64_t a1)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t diskimage_uio::const_extents_iterator::operator++@<X0>( const diskimage_uio::details::extents_iterator_impl **a1@<X0>, diskimage_uio::const_extents_iterator *a2@<X8>)
{
  return diskimage_uio::details::extents_iterator_impl::operator++((uint64_t)*a1);
}

void sub_188093DF4(_Unwind_Exception *a1)
{
}

void diskimage_uio::const_extents_iterator::~const_extents_iterator(uint64_t ***this)
{
  int v2 = *this;
  if (*this)
  {
    std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](*this, 0LL);
    operator delete(v2);
  }

  *this = 0LL;
}

void *diskimage_uio::extents_db::extents_db(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = operator new(0x10uLL);
  diskimage_uio::details::extents_db_impl::extents_db_impl((uint64_t)v10, a2, a3, a4, a5);
  *a1 = v10;
  return a1;
}

{
  return diskimage_uio::extents_db::extents_db(a1, a2, a3, a4, a5);
}

void sub_188093EB0(_Unwind_Exception *a1)
{
}

void diskimage_uio::extents_db::create( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 8) != 0)
  {
    uint64_t v8 = std::generic_category();
    char v7 = 0;
    *(void *)(a5 + _Block_object_dispose(va, 8) = v8;
    uint64_t v6 = 45LL;
  }

  else
  {
    diskimage_uio::extents_db::extents_db(&v9, a1, a2, a3, a4);
    uint64_t v6 = v9;
    uint64_t v9 = 0LL;
    diskimage_uio::extents_db::~extents_db((diskimage_uio::extents_db *)&v9);
    char v7 = 1;
  }

  *(void *)a5 = v6;
  *(_BYTE *)(a5 + 16) = v7;
}

uint64_t std::make_error_code[abi:ne180100](unsigned int a1)
{
  return a1;
}

void *diskimage_uio::extents_db::extents_db(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

void **diskimage_uio::extents_db::operator=(void **a1, void *a2)
{
  int v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (void *)*v4;
    *int v4 = 0LL;
    if (v5) {
      std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((int)v4, v5);
    }
    operator delete(v4);
  }

  *a1 = (void *)*a2;
  *a2 = 0LL;
  return a1;
}

void *diskimage_uio::extents_db::begin@<X0>(DiskImage::extents_t ***this@<X0>, void *a2@<X8>)
{
  uint64_t result = diskimage_uio::details::extents_db_impl::begin(*this);
  *a2 = result;
  return result;
}

void *diskimage_uio::details::extents_db_impl::begin(DiskImage::extents_t **this)
{
  uint64_t v1 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v1 = v6;
  *(_OWORD *)(v1 + _Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(v1 + 24) = v8;
  *((_DWORD *)v1 + 10) = v9;
  unint64_t v10 = (uint64_t *)v1;
  int v2 = operator new(0x20uLL);
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl((uint64_t)v2, (uint64_t *)&v10);
  __int128 v3 = v10;
  unint64_t v10 = 0LL;
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t *v3 = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
    }
    operator delete(v3);
  }

  return v2;
}

void sub_1880940AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v10;
  operator delete(v13);
  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100]((uint64_t **)(v11 - 24), 0LL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v15 = operator new(0x20uLL);
    void *v15 = 0LL;
    v15[1] = 0LL;
    v15[2] = 0LL;
    *((_DWORD *)v15 + 6) = 3;
    __cxa_end_catch();
    JUMPOUT(0x188094098LL);
  }

  _Unwind_Resume(a1);
}

void *diskimage_uio::extents_db::end@<X0>(DiskImage::extents_t ***this@<X0>, void *a2@<X8>)
{
  uint64_t result = diskimage_uio::details::extents_db_impl::end(*this);
  *a2 = result;
  return result;
}

void *diskimage_uio::details::extents_db_impl::end(DiskImage::extents_t **this)
{
  uint64_t v1 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v1 = v6;
  *(_OWORD *)(v1 + _Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(v1 + 24) = v8;
  *((_DWORD *)v1 + 10) = v9;
  unint64_t v10 = (uint64_t *)v1;
  int v2 = operator new(0x20uLL);
  diskimage_uio::details::extents_iterator_impl::extents_iterator_impl((uint64_t)v2, (uint64_t *)&v10);
  __int128 v3 = v10;
  unint64_t v10 = 0LL;
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t *v3 = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
    }
    operator delete(v3);
  }

  return v2;
}

void sub_188094214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v10;
  operator delete(v13);
  std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100]((uint64_t **)(v11 - 24), 0LL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v15 = operator new(0x20uLL);
    void *v15 = 0LL;
    v15[1] = 0LL;
    v15[2] = 0LL;
    *((_DWORD *)v15 + 6) = 3;
    __cxa_end_catch();
    JUMPOUT(0x188094200LL);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::extents_db::~extents_db(diskimage_uio::extents_db *this)
{
  int v2 = *(void **)this;
  if (*(void *)this)
  {
    __int128 v3 = (void *)*v2;
    *int v2 = 0LL;
    if (v3) {
      std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100]((int)v2, v3);
    }
    operator delete(v2);
  }

  *(void *)this = 0LL;
}

uint64_t diskimage_uio::is_read_only(unsigned int a1)
{
  return (a1 > 0xB) | (0x67Du >> a1) & 1;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, std::__fs::filesystem::path *a2, int a3)
{
  uint64_t v6 = operator new(0x270uLL);
  bzero(v6, 0x270uLL);
  *a1 = v6;
  diskimage_uio::details::diskimage_open_params_impl::set_path(a2, (uint64_t)v6, a3, (uint64_t)v13);
  if (!v13[16])
  {
    uint64_t v7 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    int error_code = make_error_code(162LL);
    if (*(void *)(v7 + 8) != v9 || *(_DWORD *)v7 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    }
  }

  return a1;
}

void sub_1880943E0(_Unwind_Exception *a1)
{
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::set_path@<X0>( std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (LOBYTE(v15[0]) == 255 || LOBYTE(v15[0]) == 0)
  {
    *(void *)&__int128 v13 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((void *)&v13 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 75LL;
    int v14 = 16;
    di_log::logger<di_log::log_printer<573ul>>::logger(v15, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Diskimageuio: path ", 19LL);
    if ((char)a1->__pn_.__r_.__value_.__s.__size_ < 0) {
      std::string::__init_copy_ctor_external( &__p,  a1->__pn_.__r_.__value_.__l.__data_,  a1->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = a1->__pn_;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)" doesn't exist", 14LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf((uint64_t)v15);
    MEMORY[0x1895BC2CC](&v17);
    uint64_t result = std::generic_category();
    *(void *)a4 = 2LL;
    *(void *)(a4 + _Block_object_dispose(va, 8) = result;
    *(_BYTE *)(a4 + 16) = 0;
  }

  else
  {
    *(_DWORD *)(a2 + 564) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)diskimage_uio::details::diskimage_open_params_impl::open_and_resolve( a2,  0LL,  1LL);
  }

  return result;
}

void sub_188094560( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v8 = operator new(0x270uLL);
  bzero(v8, 0x270uLL);
  *a1 = v8;
  diskimage_uio::details::diskimage_open_params_impl::open_with_plugin((uint64_t)v8, a2, a3, a4, v15);
  if (!v15[16])
  {
    uint64_t v9 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    int error_code = make_error_code(162LL);
    if (*(void *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    }
  }

  return a1;
}

void sub_188094668(_Unwind_Exception *a1)
{
}

void diskimage_uio::details::diskimage_open_params_impl::open_with_plugin( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  if (a4 == 1) {
    uint64_t v7 = 0x100000002LL;
  }
  else {
    uint64_t v7 = 0x100000000LL;
  }
  plugin_header::plugin_header(&v11, a2, a3, v7, v15, 0LL);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>( a1 + 48,  a1 + 48,  (uint64_t)&v11);
  if (v14 < 0) {
    operator delete(__p);
  }
  __int128 v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  *(_DWORD *)(a1 + 560) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params(void *a1, int a2, int a3, char a4)
{
  __int128 v8 = operator new(0x270uLL);
  bzero(v8, 0x270uLL);
  *a1 = v8;
  diskimage_uio::details::diskimage_open_params_impl::set_fd((uint64_t)v8, a2, a3, a4, (uint64_t)v15);
  if (!v15[16])
  {
    uint64_t v9 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    int error_code = make_error_code(162LL);
    if (*(void *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v15);
    }
  }

  return a1;
}

void sub_1880948B0(_Unwind_Exception *a1)
{
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::set_fd@<X0>( uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v17 = a2;
  char v16 = a4;
  *(_DWORD *)(a1 + 564) = a3;
  *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = a3;
  int v14 = 2 * ((a3 - 1) < 2);
  std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,int,BOOL &,void>(&v17, &v14, &v16, &v15);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 24, &v15);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    __int128 v8 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  unint64_t v10 = *(Backend **)(a1 + 24);
  uint64_t v11 = (crypto::header *)operator new(0x4CuLL);
  crypto::header::header(v11, v10);
  unint64_t v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v11;
  if (v12) {
    operator delete(v12);
  }
  return diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(a1, *(_DWORD *)(a1 + 564), 0, a5);
}

void sub_1880949B4(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v3;
  operator delete(v5);
  if (a2 == 2)
  {
    uint64_t v7 = *((unsigned int *)__cxa_begin_catch(a1) + 2);
    __int128 v8 = std::generic_category();
    *(void *)uint64_t v2 = v7;
    *(void *)(v2 + _Block_object_dispose(va, 8) = v8;
    *(_BYTE *)(v2 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1880949A0LL);
  }

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18809498CLL);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::create( std::__fs::filesystem::path *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = v4;
  uint64_t v4 = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
}

void diskimage_uio::diskimage_open_params::create( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = v5;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

void diskimage_uio::diskimage_open_params::create(int a1@<W0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = v5;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 608);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 592);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 576);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + 48);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0LL;
    if (v5) {
      operator delete(v5);
    }
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v4 + 24);
    operator delete((void *)v4);
  }

  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl( diskimage_uio::details::diskimage_open_params_impl *this)
{
  uint64_t v2 = (char *)this + 576;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 592);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 48);
  __int128 v3 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params( diskimage_uio::diskimage_open_params *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 608);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 592);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 576);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 48);
    __int128 v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;
    if (v3) {
      operator delete(v3);
    }
    std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2 + 24);
    operator delete((void *)v2);
  }

  *(void *)this = 0LL;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *this, diskimage_uio::details::diskimage_open_params_impl *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void diskimage_uio::diskimage_open_params::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2) {
    diskimage_uio::details::diskimage_open_params_impl::encode(v2, a2);
  }
}

void diskimage_uio::details::diskimage_open_params_impl::encode(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = bswap32(*(_DWORD *)(a1 + 564));
  unsigned int v28 = bswap32(*(_DWORD *)(a1 + 568));
  unsigned int v29 = v4;
  (*(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2)(a2, "required_mode", &v29, 4LL);
  (*(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2)(a2, "current_mode", &v28, 4LL);
  uint64_t v5 = *(void (**)(uint64_t, const char *, unsigned int *, uint64_t))a2;
  if (*(_DWORD *)(a1 + 552) == 5)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      uint64_t v6 = *(unsigned int **)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 72);
    }

    else
    {
      uint64_t v6 = (unsigned int *)(a1 + 64);
      uint64_t v7 = *(unsigned __int8 *)(a1 + 87);
    }

    v5(a2, "plugin_name", v6, v7 + 1);
    (*(void (**)(void))(*(void *)(a1 + 48) + 64LL))();
    return;
  }

  __int128 v8 = (const char *)a1;
  size_t v9 = strlen(v8);
  v5(a2, "path", (unsigned int *)v8, v9 + 1);
  uint64_t v10 = *(void *)(a1 + 576);
  if (v10 && *(void *)(a1 + 592) && *(void *)(a1 + 608))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 584);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }

    int v14 = *(void (**)(uint64_t, const char *, uint64_t))(a2 + 8);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176LL))(v10);
    v14(a2, "crypto_fd", v15);
    crypto::format_serializer::encode( (void (**)(void, const char *, void, uint64_t))a2,  *(void **)(a1 + 592));
    if (v11)
    {
      char v16 = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        int64x2_t v18 = v11;
LABEL_27:
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  else
  {
    uint64_t v19 = *(void *)(a1 + 40);
    if (v19) {
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))a2)(a2, "crypto_hdr", v19, 76LL);
    }
    uint64_t v20 = *(void *)(a1 + 24);
    char v21 = *(std::__shared_weak_count **)(a1 + 32);
    if (v21)
    {
      __int128 v22 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }

    uint64_t v24 = *(void (**)(uint64_t, const char *, uint64_t))(a2 + 8);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 176LL))(v20);
    v24(a2, "fd", v25);
    if (v21)
    {
      uint64_t v26 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        int64x2_t v18 = v21;
        goto LABEL_27;
      }
    }
  }

void sub_188094F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void diskimage_uio::diskimage_open_params::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  diskimage_uio::details::diskimage_open_params_impl::decode(a1, (uint64_t)v5);
  if (v6)
  {
    __int128 v3 = operator new(0x270uLL);
    diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl((uint64_t)v3, v5);
    *(void *)a2 = v3;
    uint64_t v4 = 0LL;
    *(_BYTE *)(a2 + 16) = 1;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::details::diskimage_open_params_impl,std::error_code>::error((uint64_t)v5);
    *(_BYTE *)(a2 + 16) = 0;
  }

  if (v6) {
    diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>((uint64_t)v5);
  }
}

void sub_188095030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (LOBYTE(STACK[0x280])) {
    diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void diskimage_uio::details::diskimage_open_params_impl::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  diskimage_uio::details::diskimage_open_params_impl::decode_buffer( a1,  (uint64_t)"required_mode",  &v52,  4uLL,  (uint64_t)&v50);
  if (!v51)
  {
    uint64_t v4 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v50);
LABEL_40:
    *(_OWORD *)a2 = *v4;
    goto LABEL_41;
  }

  diskimage_uio::details::diskimage_open_params_impl::decode_buffer( a1,  (uint64_t)"current_mode",  &v49,  4uLL,  (uint64_t)&v56);
  if (!v56.__r_.__value_.__s.__data_[16] || !v51)
  {
    if (!v56.__r_.__value_.__s.__data_[16])
    {
      __int128 v50 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
      if (v51) {
        std::string::value_type v51 = 0;
      }
      uint64_t v4 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v50);
      goto LABEL_40;
    }

    if (v51) {
      __int128 v50 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
    }
    else {
      std::string::value_type v51 = v56.__r_.__value_.__s.__data_[16];
    }
  }

  unsigned int v5 = bswap32(v52);
  unsigned int v52 = v5;
  unsigned int v6 = bswap32(v49);
  unsigned int v49 = v6;
  if (v5 == 2)
  {
    LOBYTE(v5) = 0;
    LODWORD(v47[0]) = 2;
LABEL_18:
    char v7 = 1;
    goto LABEL_20;
  }

  if (v5 != 1)
  {
    if (v5)
    {
      __int128 v8 = std::generic_category();
      char v7 = 0;
      v47[0] = 34LL;
      v47[1] = v8;
      LOBYTE(v5) = 1;
      unsigned int v6 = v49;
      goto LABEL_20;
    }

    LODWORD(v47[0]) = 0;
    goto LABEL_18;
  }

  LOBYTE(v5) = 0;
  char v7 = 1;
  LODWORD(v47[0]) = 1;
LABEL_20:
  char v48 = v7;
  if (v6 == 2 || v6 == 1)
  {
    LODWORD(v45[0]) = v6;
  }

  else
  {
    if (v6)
    {
      v45[0] = 34LL;
      v45[1] = std::generic_category();
      char v46 = 0;
      if (v48)
      {
        uint64_t v4 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v45);
        goto LABEL_40;
      }

      goto LABEL_26;
    }

    LODWORD(v45[0]) = 0;
  }

  char v46 = 1;
  if ((v5 & 1) != 0)
  {
LABEL_26:
    uint64_t v4 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v47);
    goto LABEL_40;
  }

  LODWORD(v56.__r_.__value_.__l.__data_) = 1;
  v56.__r_.__value_.__s.__data_[16] = 1;
  if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)v45,  (uint64_t)&v56))
  {
    LODWORD(v56.__r_.__value_.__l.__data_) = 0;
    v56.__r_.__value_.__s.__data_[16] = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)v47,  (uint64_t)&v56))
    {
      size_t v9 = std::generic_category();
      *(void *)a2 = 22LL;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v9;
LABEL_41:
      *(_BYTE *)(a2 + 624) = 0;
      return;
    }
  }

  int v10 = v47[0];
  int v11 = v45[0];
  uint64_t v12 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a1, "plugin_name", &v44);
  if (v12 < 1)
  {
    unint64_t v13 = 0LL;
  }

  else
  {
    unint64_t v13 = v44;
    if (!v44[v12 - 1])
    {
      bzero(&v56, 0x270uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, v13);
      if (v11 == 1) {
        uint64_t v14 = 0x100000002LL;
      }
      else {
        uint64_t v14 = 0x100000000LL;
      }
      plugin_header::plugin_header(v53, __p, 0LL, v14, a1, a1);
      std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>::operator=[abi:ne180100]<plugin_header,0,plugin_header,5ul,0>( (uint64_t)v57,  (uint64_t)v53);
      std::__destroy_at[abi:ne180100]<plugin_header,0>((uint64_t)v53);
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
      v57[128] = 12;
      diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (__int128 *)&v56);
      *(_BYTE *)(a2 + 624) = 1;
      diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v56);
      goto LABEL_81;
    }
  }

  uint64_t v15 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a1, "path", &v43);
  char v16 = v43;
  if (v43 && v15 > 0)
  {
    if (v43[v15 - 1])
    {
      unint64_t v17 = std::generic_category();
      *(void *)a2 = 22LL;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v17;
      *(_BYTE *)(a2 + 624) = 0;
      goto LABEL_80;
    }

    std::string::basic_string[abi:ne180100]<0>(&v56, v43);
    std::string v42 = v56;
    int v19 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a1, "crypto_fd");
    int v41 = v19;
    if (v19 < 0 && v19 != -2)
    {
      int v20 = -v19;
      char v21 = std::generic_category();
      *(_DWORD *)a2 = v20;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v21;
      *(_BYTE *)(a2 + 624) = 0;
      goto LABEL_78;
    }

    __int128 v39 = 0u;
    __int128 v40 = 0u;
    *(_OWORD *)std::string __p = 0u;
    v37[0] = 0LL;
    v37[1] = 0LL;
    if ((v19 & 0x80000000) == 0)
    {
      crypto::format_serializer::decode(a1, (uint64_t)v53);
      if (v54)
      {
        LOBYTE(vstd::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v11 == 1;
        char v34 = 0;
        std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>( &v41,  (BOOL *)&v32,  &v34,  &v35);
        __int128 v36 = v35;
        __int128 v35 = 0uLL;
        std::make_shared[abi:ne180100]<crypto::format,crypto::format,void>((uint64_t)v53, v33);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t(&v56, &v36, v33);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::operator=((uint64_t)__p, (__int128 *)&v56);
        diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)&v56);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v33);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
        if (v11 == v10)
        {
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl( &v56,  (__int128 *)&v42,  v10,  (uint64_t)__p);
          diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (__int128 *)&v56);
          *(_BYTE *)(a2 + 624) = 1;
          diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v56);
          goto LABEL_69;
        }

        unint64_t v27 = std::generic_category();
        *(void *)a2 = 22LL;
        *(void *)(a2 + _Block_object_dispose(va, 8) = v27;
      }

      else
      {
        *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::format,std::error_code>::error((uint64_t)v53);
      }

      *(_BYTE *)(a2 + 624) = 0;
LABEL_69:
      if (v54) {
        std::__destroy_at[abi:ne180100]<crypto::format,0>((uint64_t)v53);
      }
      goto LABEL_77;
    }

    int v22 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a1, "fd");
    int v32 = v22;
    if (v22 < 0)
    {
      int v28 = -v22;
      unsigned int v29 = std::generic_category();
      *(_DWORD *)a2 = v28;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v29;
    }

    else
    {
      crypto::header_serializer::decode((uint64_t (**)(void, const char *, char **))a1, (uint64_t)v53);
      if (v55)
      {
        v33[0] = 0LL;
LABEL_60:
        std::make_unique[abi:ne180100]<crypto::header,crypto::header>((uint64_t)v53, &v56);
        unint64_t v23 = (void *)v56.__r_.__value_.__r.__words[0];
        v56.__r_.__value_.__r.__words[0] = 0LL;
        v33[0] = v23;
LABEL_61:
        LOBYTE(v35) = v11 == 1;
        char v34 = 0;
        std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>( &v32,  (BOOL *)&v35,  &v34,  &v36);
        __int128 v35 = v36;
        if (*((void *)&v36 + 1))
        {
          uint64_t v24 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
          do
            unint64_t v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }

        diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl( &v56,  (__int128 *)&v42,  (std::string::size_type *)&v35,  v11,  v10,  (std::string::size_type *)v33);
        diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(a2, (__int128 *)&v56);
        *(_BYTE *)(a2 + 624) = 1;
        diskimage_uio::details::diskimage_open_params_impl::~diskimage_open_params_impl((diskimage_uio::details::diskimage_open_params_impl *)&v56);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
        std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
        uint64_t v26 = v33[0];
        v33[0] = 0LL;
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_77;
      }

      __int128 v30 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v53);
      __int128 v31 = std::generic_category();
      v56.__r_.__value_.__r.__words[0] = 2LL;
      v56.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
      if ((std::operator==[abi:ne180100](v30, (unsigned int *)&v56) & 1) != 0)
      {
        v33[0] = 0LL;
        if (!v55) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }

      *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v53);
    }

    *(_BYTE *)(a2 + 624) = 0;
LABEL_77:
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v37);
    diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t((diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *)__p);
LABEL_78:
LABEL_80:
    operator delete[](v16);
    if (v13) {
      goto LABEL_81;
    }
    return;
  }

  int64x2_t v18 = std::generic_category();
  *(void *)a2 = 22LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v18;
  *(_BYTE *)(a2 + 624) = 0;
  if (v13) {
LABEL_81:
  }
    operator delete[](v13);
}

void sub_1880956C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60)
{
  if (a35 < 0) {
    operator delete(*v62);
  }
  operator delete[](v61);
  if (v60) {
    operator delete[](v60);
  }
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::details::diskimage_open_params_impl,std::error_code>::error( uint64_t result)
{
  if (*(_BYTE *)(result + 624))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = off_18A1C9E28;
  }

  return result;
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::query_image_format@<X0>( const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_open_params_impl::validate_unlocked(this, (uint64_t)v12);
  if (v12[16])
  {
    *(_DWORD *)a2 = this[70].__vftable;
    char v5 = 1;
  }

  else
  {
    *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::query_image_format() const";
    *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 85LL;
    int v8 = 16;
    di_log::logger<di_log::log_printer<660ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)"Diskimageuio: query format failed ",  34LL);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v9, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x1895BC2CC](&v11);
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }

  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

void sub_1880959B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

_OWORD *diskimage_uio::diskimage_open_params::is_locked@<X0>( const std::error_category **this@<X0>, BOOL *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_locked(*this, a2);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::is_locked@<X0>( const std::error_category *this@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = this[5].__vftable != 0LL;
    char v5 = 1;
  }

  else
  {
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v6);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }

  a2[16] = v5;
  return result;
}

_OWORD *diskimage_uio::diskimage_open_params::is_encrypted@<X0>( const std::error_category **this@<X0>, _BYTE *a2@<X8>)
{
  return diskimage_uio::details::diskimage_open_params_impl::is_encrypted(*this, a2);
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::is_encrypted@<X0>( const std::error_category *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_open_params_impl::verify_backend(this, (uint64_t)v7);
  if (v7[16])
  {
    if (this[5].__vftable)
    {
      LOBYTE(v5) = 1;
    }

    else
    {
      char v5 = this[72].__vftable;
      if (v5)
      {
        char v5 = this[74].__vftable;
        if (v5) {
          LOBYTE(v5) = this[76].__vftable != 0LL;
        }
      }
    }

    *a2 = (_BYTE)v5;
    char v6 = 1;
  }

  else
  {
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v7);
    char v6 = 0;
    *(_OWORD *)a2 = *result;
  }

  a2[16] = v6;
  return result;
}

uint64_t diskimage_uio::diskimage_open_params::is_read_only@<X0>( diskimage_uio::diskimage_open_params *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)this + 24LL) + 48LL))(*(void *)(*(void *)this + 24LL));
  LOBYTE(v5) = 1;
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(v3 + 568) && (unsigned int v6 = *(_DWORD *)(v3 + 560), v6 <= 0xB)) {
      unsigned int v5 = (0x67Du >> v6) & 1;
    }
    else {
      LOBYTE(v5) = 1;
    }
  }

  *a2 = v5;
  a2[16] = 1;
  return result;
}

double diskimage_uio::diskimage_open_params::get_block_size@<D0>( const std::error_category **this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = diskimage_uio::details::diskimage_open_params_impl::get_block_size(*this, a2).n128_u64[0];
  return result;
}

__n128 diskimage_uio::details::diskimage_open_params_impl::get_block_size@<Q0>( const std::error_category *this@<X0>, __n128 *a2@<X8>)
{
  if (v13[16])
  {
    uint64_t v4 = LODWORD(this[69].__vftable);
    if ((_DWORD)v4 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v10[0] = &v8;
    ((void (*)(void *, const std::error_category *))off_18A1D30C0[v4])(v10, &this[6]);
  }

  else
  {
    *(void *)&__int128 v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_block_size() const";
    *((void *)&v8 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 81LL;
    int v9 = 16;
    di_log::logger<di_log::log_printer<671ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v11,  (uint64_t)"Diskimageuio: query format failed ",  34LL);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v10, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x1895BC2CC](&v12);
    __int128 v7 = (__n128 *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }

  return result;
}

void sub_188095C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>( const std::error_category **this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks(*this, a2).n128_u64[0];
  return result;
}

__n128 diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks@<Q0>( const std::error_category *this@<X0>, __n128 *a2@<X8>)
{
  if (v13[16])
  {
    uint64_t v4 = LODWORD(this[69].__vftable);
    if ((_DWORD)v4 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v10[0] = &v8;
    ((void (*)(void *, const std::error_category *))off_18A1D3530[v4])(v10, &this[6]);
  }

  else
  {
    *(void *)&__int128 v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((void *)&v8 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 80LL;
    int v9 = 16;
    di_log::logger<di_log::log_printer<681ul>>::logger(v10, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v11,  (uint64_t)"Diskimageuio: query format failed ",  34LL);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v10, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf((uint64_t)v10);
    MEMORY[0x1895BC2CC](&v12);
    __int128 v7 = (__n128 *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v13);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }

  return result;
}

void sub_188095D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void diskimage_uio::diskimage_open_params::get_uuid(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 1;
}

void diskimage_uio::diskimage_open_params::set_passphrase( diskimage_uio::details::diskimage_open_params_impl **this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
}

void diskimage_uio::details::diskimage_open_params_impl::set_passphrase( diskimage_uio::details::diskimage_open_params_impl *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!v31[16])
  {
    *(void *)&__int128 v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v24 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 81LL;
    int v25 = 16;
    di_log::logger<di_log::log_printer<741ul>>::logger(&v26, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v29,  (uint64_t)"Diskimageuio: can't set passphrase, can't get encrypted status ",  63LL);
    uint64_t v17 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v31);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v26, v17);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x1895BC2CC](v30);
    int64x2_t v18 = (__int128 *)v31;
LABEL_24:
    *(_OWORD *)a4 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
    goto LABEL_25;
  }

  if (!v31[0])
  {
    *(void *)&__int128 v24 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v24 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 81LL;
    int v25 = 16;
    di_log::logger<di_log::log_printer<745ul>>::logger(&v26, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v29,  (uint64_t)"Diskimageuio: can't set passphrase, image not encrypted",  55LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x1895BC2CC](v30);
    *(void *)a4 = make_error_code(161LL);
    *(void *)(a4 + _Block_object_dispose(va, 8) = v19;
LABEL_25:
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }

  diskimage_uio::details::diskimage_open_params_impl::is_locked((const std::error_category *)this, (BOOL *)&v24);
  if (!(_BYTE)v25)
  {
    *(void *)&__int128 v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v22 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 81LL;
    int v23 = 16;
    di_log::logger<di_log::log_printer<751ul>>::logger(&v26, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v29,  (uint64_t)"Diskimageuio: can't set passphrase, can't get locked status ",  60LL);
    uint64_t v20 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v24);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v26, v20);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x1895BC2CC](v30);
    int64x2_t v18 = &v24;
    goto LABEL_24;
  }

  if (!(_BYTE)v24)
  {
    *(void *)&__int128 v22 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_passphrase(const char *, BOOL)";
    *((void *)&v22 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 81LL;
    int v23 = 16;
    di_log::logger<di_log::log_printer<755ul>>::logger(&v26, &v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v29,  (uint64_t)"Diskimageuio: can't set passphrase, image already unlocked",  58LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf((uint64_t)&v26);
    MEMORY[0x1895BC2CC](v30);
    char v21 = std::generic_category();
    *(void *)a4 = 17LL;
    *(void *)(a4 + _Block_object_dispose(va, 8) = v21;
    goto LABEL_25;
  }

  diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t( (uint64_t)&v26,  (uint64_t)this + 40,  (void *)this + 3,  (uint64_t)a2);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 576, &v26);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 592, &v27);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 608, &v28);
  __int128 v8 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    int v9 = (unint64_t *)(*((void *)&v28 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    uint64_t v12 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    uint64_t v15 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  std::shared_ptr<DiskImage>::operator=[abi:ne180100]((void *)this + 3, (uint64_t *)this + 76);
  diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(this, a2, a3, a4);
}

void sub_188096104( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t diskimage_uio::diskimage_context::read@<X0>( DiskImage::Context **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8 = a1;
  uint64_t v101 = *MEMORY[0x1895F89C0];
  uint64_t v79 = (*(uint64_t (**)(void))(**((void **)*a1 + 1) + 24LL))(*((void *)*a1 + 1));
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  uint64_t v12 = dummy_shared_ptr;
  unint64_t v13 = *(uint64_t **)a2;
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  uint64_t v15 = v90;
  std::string __p = v90;
  __int128 v16 = xmmword_188178830;
  __int128 v89 = xmmword_188178830;
  uint64_t v17 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if ((_DWORD)v14) {
    unint64_t v18 = v17 + 1;
  }
  else {
    unint64_t v18 = 0LL;
  }
  if (v18 < 6)
  {
    if ((_DWORD)v14)
    {
      uint64_t v32 = v17 + 1;
      uint64_t v25 = a5;
      do
      {
        uint64_t v33 = *v13;
        uint64_t v34 = dummy_shared_ptr[1];
        if (v34)
        {
          __int128 v35 = (unint64_t *)(v34 + 8);
          do
            unint64_t v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }

        uint64_t v37 = v13[1];
        void *v15 = v33;
        v15[1] = v34;
        v15[2] = v37;
        v13 += 2;
        v15 += 3;
        --v32;
      }

      while (v32);
    }

    else
    {
      unint64_t v18 = 0LL;
      uint64_t v25 = a5;
    }
  }

  else
  {
    uint64_t v78 = a3;
    if (v18 >= 0x555555555555556LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v11);
    }
    uint64_t v77 = a5;
    uint64_t v19 = operator new(24 * v18);
    if (__p)
    {
      uint64_t v20 = v8;
      uint64_t v21 = v89;
      if ((void)v89)
      {
        __int128 v22 = __p;
        do
        {
          --v21;
          __int128 v22 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v22) + 24);
        }

        while (v21);
      }

      *(void *)&__int128 v89 = 0LL;
      __int128 v8 = v20;
      if (v90 != __p) {
        operator delete(__p);
      }
    }

    *(void *)&__int128 v89 = 0LL;
    *((void *)&v89 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v18;
    std::string __p = v19;
    if ((_DWORD)v14)
    {
      int v23 = &v13[2 * v14];
      __int128 v24 = (char *)v19;
      uint64_t v25 = v77;
      __int128 v16 = xmmword_188178830;
      do
      {
        uint64_t v26 = *v13;
        uint64_t v27 = v12[1];
        if (v27)
        {
          __int128 v28 = (unint64_t *)(v27 + 8);
          do
            unint64_t v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }

        uint64_t v30 = v13[1];
        *(void *)__int128 v24 = v26;
        *((void *)v24 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
        *((void *)v24 + 2) = v30;
        v13 += 2;
        v24 += 24;
      }

      while (v13 != v23);
      uint64_t v31 = v89;
    }

    else
    {
      uint64_t v31 = 0LL;
      __int128 v24 = (char *)v19;
      uint64_t v25 = v77;
      __int128 v16 = xmmword_188178830;
    }

    unint64_t v18 = v31 - 0x5555555555555555LL * ((v24 - (_BYTE *)v19) >> 3);
    a3 = v78;
  }

  *(void *)&__int128 v89 = v18;
  unint64_t v91 = v93;
  __int128 v92 = v16;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>( (uint64_t)&v91,  v18);
  __int128 v83 = __p;
  uint64_t v80 = (uint64_t)__p + 24 * v89;
  uint64_t v87 = (unint64_t *)v91;
  __int128 v86 = (unint64_t *)((char *)v91 + 8 * v92);
  sg_vec_ref::sg_vec_ref((uint64_t)v94, (uint64_t *)&v83, &v80, &v87, &v86, v79 * a3, v79 * a4);
  uint64_t v38 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v94, (uint64_t)&v83);
  sg_vec_ref::end((sg_vec_ref *)v94, (uint64_t)&v80);
  uint64_t v39 = DiskImage::Context::read( v38,  (const sg_vec_ns::details::sg_vec_iterator *)&v83,  (const sg_vec_ns::details::sg_vec_iterator *)&v80);
  uint64_t v41 = v40;
  std::string v42 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      unint64_t v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  uint64_t v45 = v81;
  if (v81)
  {
    char v46 = (unint64_t *)&v81->__shared_owners_;
    do
      unint64_t v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }

  char v48 = v85;
  if (v85)
  {
    unsigned int v49 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  std::string::value_type v51 = v84;
  if (!v84) {
    goto LABEL_48;
  }
  unsigned int v52 = (unint64_t *)&v84->__shared_owners_;
  do
    unint64_t v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((v39 & 0x8000000000000000LL) == 0) {
      goto LABEL_52;
    }
  }

  else
  {
LABEL_48:
    if ((v39 & 0x8000000000000000LL) == 0) {
      goto LABEL_52;
    }
  }

  if ((_DWORD)v39)
  {
    char v54 = std::generic_category();
    char v55 = 0;
    *(_DWORD *)uint64_t v25 = v39;
    *(void *)(v25 + _Block_object_dispose(va, 8) = v54;
    goto LABEL_55;
  }

LABEL_52:
  if (v41 == v79 * a3)
  {
    *(void *)uint64_t v25 = v39;
    char v55 = 1;
  }

  else
  {
    uint64_t error_code = make_error_code(164LL);
    char v55 = 0;
    *(void *)uint64_t v25 = error_code;
    *(void *)(v25 + _Block_object_dispose(va, 8) = v57;
  }

  if (v41 == v79 * a3)
  {
    *(void *)uint64_t v25 = v39;
    char v55 = 1;
  }

  else
  {
    uint64_t error_code = make_error_code(164LL);
    char v55 = 0;
    *(void *)uint64_t v25 = error_code;
    *(void *)(v25 + _Block_object_dispose(va, 8) = v57;
  }

LABEL_55:
  *(_BYTE *)(v25 + 16) = v55;
  uint64_t v58 = v100;
  if (v100)
  {
    uint64_t v59 = (unint64_t *)&v100->__shared_owners_;
    do
      unint64_t v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }

  uint64_t v61 = v99;
  if (v99)
  {
    BOOL v62 = (unint64_t *)&v99->__shared_owners_;
    do
      unint64_t v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }

  unint64_t v64 = v98;
  if (v98)
  {
    uint64_t v65 = (unint64_t *)&v98->__shared_owners_;
    do
      unint64_t v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

  unint64_t v67 = v97;
  if (v97)
  {
    unint64_t v68 = (unint64_t *)&v97->__shared_owners_;
    do
      unint64_t v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  unint64_t v70 = v96;
  if (v96)
  {
    unint64_t v71 = (unint64_t *)&v96->__shared_owners_;
    do
      unint64_t v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }

  unint64_t v73 = v95;
  if (v95)
  {
    __int128 v74 = (unint64_t *)&v95->__shared_owners_;
    do
      unint64_t v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  if (*((void *)&v92 + 1) && v93 != v91) {
    operator delete(v91);
  }
  return boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
}

  *(_BYTE *)(v25 + 16) = v55;
  uint64_t v58 = v101;
  if (v101)
  {
    uint64_t v59 = (unint64_t *)&v101->__shared_owners_;
    do
      unint64_t v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }

  uint64_t v61 = v100;
  if (v100)
  {
    BOOL v62 = (unint64_t *)&v100->__shared_owners_;
    do
      unint64_t v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }

  unint64_t v64 = v99;
  if (v99)
  {
    uint64_t v65 = (unint64_t *)&v99->__shared_owners_;
    do
      unint64_t v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

  unint64_t v67 = v98;
  if (v98)
  {
    unint64_t v68 = (unint64_t *)&v98->__shared_owners_;
    do
      unint64_t v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  unint64_t v70 = v96;
  if (v96)
  {
    unint64_t v71 = (unint64_t *)&v96->__shared_owners_;
    do
      unint64_t v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }

  unint64_t v73 = v95;
  if (v95)
  {
    __int128 v74 = (unint64_t *)&v95->__shared_owners_;
    do
      unint64_t v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  if (*((void *)&v92 + 1) && v93 != v91) {
    operator delete(v91);
  }
  return boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&__p);
}

void sub_188096788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t DiskImage::Context::read( DiskImage::Context *this, const sg_vec_ns::details::sg_vec_iterator *a2, const sg_vec_ns::details::sg_vec_iterator *a3)
{
  if ((*(_BYTE *)(*((void *)this + 1) + 8LL) & 1) == 0) {
    return (**(uint64_t (***)(DiskImage::Context *, const sg_vec_ns::details::sg_vec_iterator *, const sg_vec_ns::details::sg_vec_iterator *))this)( this,  a2,  a3);
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v4 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 24LL;
    int v5 = 2;
    di_log::logger<di_log::log_printer<159ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Disk image is terminated, skipping read",  39LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x1895BC2CC](&v8);
  }

  return -6LL;
}

void sub_1880968B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t diskimage_uio::diskimage_context::write@<X0>( DiskImage::Context **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v102 = *MEMORY[0x1895F89C0];
  uint64_t v79 = (*(uint64_t (**)(void))(**((void **)*a1 + 1) + 24LL))(*((void *)*a1 + 1));
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  uint64_t v12 = dummy_shared_ptr;
  unint64_t v13 = *(uint64_t **)a2;
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  uint64_t v15 = v90;
  std::string __p = v90;
  __int128 v16 = xmmword_188178830;
  __int128 v89 = xmmword_188178830;
  uint64_t v17 = (v14 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if ((_DWORD)v14) {
    unint64_t v18 = v17 + 1;
  }
  else {
    unint64_t v18 = 0LL;
  }
  if (v18 < 6)
  {
    if ((_DWORD)v14)
    {
      uint64_t v32 = v17 + 1;
      uint64_t v25 = a5;
      do
      {
        uint64_t v33 = *v13;
        uint64_t v34 = dummy_shared_ptr[1];
        if (v34)
        {
          __int128 v35 = (unint64_t *)(v34 + 8);
          do
            unint64_t v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }

        uint64_t v37 = v13[1];
        void *v15 = v33;
        v15[1] = v34;
        v15[2] = v37;
        v13 += 2;
        v15 += 3;
        --v32;
      }

      while (v32);
    }

    else
    {
      unint64_t v18 = 0LL;
      uint64_t v25 = a5;
    }
  }

  else
  {
    uint64_t v78 = a3;
    if (v18 >= 0x555555555555556LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v11);
    }
    uint64_t v77 = a5;
    uint64_t v19 = operator new(24 * v18);
    if (__p)
    {
      uint64_t v20 = v8;
      uint64_t v21 = v89;
      if ((void)v89)
      {
        __int128 v22 = __p;
        do
        {
          --v21;
          __int128 v22 = (void *)(std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)v22) + 24);
        }

        while (v21);
      }

      *(void *)&__int128 v89 = 0LL;
      uint64_t v8 = v20;
      if (v90 != __p) {
        operator delete(__p);
      }
    }

    *(void *)&__int128 v89 = 0LL;
    *((void *)&v89 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v18;
    std::string __p = v19;
    if ((_DWORD)v14)
    {
      int v23 = &v13[2 * v14];
      __int128 v24 = (char *)v19;
      uint64_t v25 = v77;
      __int128 v16 = xmmword_188178830;
      do
      {
        uint64_t v26 = *v13;
        uint64_t v27 = v12[1];
        if (v27)
        {
          __int128 v28 = (unint64_t *)(v27 + 8);
          do
            unint64_t v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }

        uint64_t v30 = v13[1];
        *(void *)__int128 v24 = v26;
        *((void *)v24 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v27;
        *((void *)v24 + 2) = v30;
        v13 += 2;
        v24 += 24;
      }

      while (v13 != v23);
      uint64_t v31 = v89;
    }

    else
    {
      uint64_t v31 = 0LL;
      __int128 v24 = (char *)v19;
      uint64_t v25 = v77;
      __int128 v16 = xmmword_188178830;
    }

    unint64_t v18 = v31 - 0x5555555555555555LL * ((v24 - (_BYTE *)v19) >> 3);
    a3 = v78;
  }

  *(void *)&__int128 v89 = v18;
  unint64_t v91 = v93;
  __int128 v92 = v16;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>( (uint64_t)&v91,  v18);
  __int128 v83 = __p;
  uint64_t v80 = (uint64_t)__p + 24 * v89;
  uint64_t v87 = (unint64_t *)v91;
  __int128 v86 = (unint64_t *)((char *)v91 + 8 * v92);
  sg_vec_ref::sg_vec_ref((uint64_t)v94, (uint64_t *)&v83, &v80, &v87, &v86, v79 * a3, v79 * a4);
  char v97 = 1;
  uint64_t v38 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v94, (uint64_t)&v83);
  sg_vec_ref::end((sg_vec_ref *)v94, (uint64_t)&v80);
  uint64_t v39 = DiskImage::Context::write( v38,  (const sg_vec_ns::details::sg_vec_iterator *)&v83,  (const sg_vec_ns::details::sg_vec_iterator *)&v80);
  uint64_t v41 = v40;
  std::string v42 = v82;
  if (v82)
  {
    p_shared_owners = (unint64_t *)&v82->__shared_owners_;
    do
      unint64_t v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  uint64_t v45 = v81;
  if (v81)
  {
    char v46 = (unint64_t *)&v81->__shared_owners_;
    do
      unint64_t v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }

  char v48 = v85;
  if (v85)
  {
    unsigned int v49 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  std::string::value_type v51 = v84;
  if (!v84) {
    goto LABEL_48;
  }
  unsigned int v52 = (unint64_t *)&v84->__shared_owners_;
  do
    unint64_t v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((v39 & 0x8000000000000000LL) == 0) {
      goto LABEL_52;
    }
  }

  else
  {
LABEL_48:
    if ((v39 & 0x8000000000000000LL) == 0) {
      goto LABEL_52;
    }
  }

  if ((_DWORD)v39)
  {
    char v54 = std::generic_category();
    char v55 = 0;
    *(_DWORD *)uint64_t v25 = v39;
    *(void *)(v25 + _Block_object_dispose(va, 8) = v54;
    goto LABEL_55;
  }

void sub_188096E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

uint64_t diskimage_uio::diskimage_context::flush@<X0>( void **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 >= 3)
  {
    uint64_t result = make_error_code(164LL);
    char v6 = 0;
    *(void *)a3 = result;
    *(void *)(a3 + _Block_object_dispose(va, 8) = v7;
  }

  else
  {
    uint64_t result = DiskImage::Context::flush(*a1);
    if ((_DWORD)result)
    {
      int v5 = result;
      uint64_t result = (uint64_t)std::generic_category();
      char v6 = 0;
      *(_DWORD *)a3 = v5;
      *(void *)(a3 + _Block_object_dispose(va, 8) = result;
    }

    else
    {
      *(_BYTE *)a3 = 0;
      char v6 = 1;
    }
  }

  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t diskimage_uio::diskimage_context::unmap@<X0>( void **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = DiskImage::Context::unmap(*a1);
  if ((_DWORD)result)
  {
    int v6 = result;
    uint64_t result = (uint64_t)std::generic_category();
    char v7 = 0;
    *(_DWORD *)a3 = v6;
    *(void *)(a3 + _Block_object_dispose(va, 8) = result;
  }

  else
  {
    uint64_t v8 = a2[2];
    if ((_DWORD)v8)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 16 * v8;
      uint64_t v11 = (uint64_t *)(*(void *)a2 + 8LL);
      do
      {
        uint64_t v12 = *v11;
        v11 += 2;
        v9 += v12;
        v10 -= 16LL;
      }

      while (v10);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    *(void *)a3 = v9;
    char v7 = 1;
  }

  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

uint64_t DiskImage::Context::unmap(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  }
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
    *((void *)&v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 25LL;
    int v3 = 2;
    di_log::logger<di_log::log_printer<173ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v5,  (uint64_t)"Disk image is terminated, skipping unmap",  40LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x1895BC2CC](&v6);
  }

  return 4294967290LL;
}

void sub_1880970A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void diskimage_uio::diskimage_context::get_extents( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
}

void diskimage_uio::diskimage_context::get_extents( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void *diskimage_uio::diskimage_context::diskimage_context(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

uint64_t *diskimage_uio::diskimage_context::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
  }
  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

void diskimage_uio::diskimage_context::~diskimage_context(diskimage_uio::diskimage_context *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  *(void *)this = 0LL;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  *(void *)this = 0LL;
}

void *diskimage_uio::diskimage::diskimage(void *a1, uint64_t *a2)
{
  int v4 = 0;
  uint64_t v5 = *a2;
  *a2 = 0LL;
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>( (uint64_t)&v4,  (uint64_t)&v6,  0);
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
  return a1;
}

void sub_1880972A4(_Unwind_Exception *a1)
{
}

void *diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>( uint64_t a1, uint64_t a2, char a3)
{
  if (a1 == a2)
  {
    *(void *)&__int128 v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v18 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 77LL;
    int v19 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v20, &v18);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>( (uint64_t)v20,  "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v20);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v13;
  }

  if (a1 + 16 == a2)
  {
    int v16 = *(_DWORD *)a1;
    int v7 = *(_DWORD *)a1;
    uint64_t v8 = *(const std::error_category **)(a1 + 8);
    uint64_t v17 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    if (v7)
    {
      *(void *)&__int128 v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v18 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 77LL;
      int v19 = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(v20, &v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v22,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
      diskimage_uio::operator<<(v22, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" rather than image", 18LL);
      di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v20);
      uint64_t v14 = __cxa_allocate_exception(0x10uLL);
      uint64_t v15 = std::generic_category();
      *uint64_t v14 = 22LL;
      v14[1] = v15;
    }

    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v8, (uint64_t)&v18);
    LODWORD(v20[0]) = 12;
    char v21 = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v18,  (uint64_t)v20))
    {
      uint64_t v6 = operator new(0x10uLL);
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      void *v6 = off_18A1CD6A8;
    }

    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v17,  (uint64_t)&v18);
      LODWORD(v20[0]) = 11;
      char v21 = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v18,  (uint64_t)v20)
        && (uint64_t v9 = (uint64_t *)*((void *)v17 + 6), v10 = v9[1], v10 - *v9 == 16))
      {
        uint64_t v6 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>( *v9,  v10,  a3);
      }

      else
      {
        uint64_t v6 = operator new(0x10uLL);
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      }
    }

    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v17);
  }

  else
  {
    uint64_t v6 = operator new(0x10uLL);
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>( v6,  a1,  a2,  a3);
  }

  return v6;
}

void sub_188097508(_Unwind_Exception *a1)
{
}

void *diskimage_uio::diskimage::diskimage(void *a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    *(void *)&__int128 v71 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
    *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 151LL;
    LODWORD(v72) = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(&lpsrc, &v71);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>( (uint64_t)&lpsrc,  "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)&lpsrc);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v60;
  }

  if (a3 == 1)
  {
    uint64_t v8 = *a2;
    LODWORD(lpsrc) = **a2;
    int v9 = (int)lpsrc;
    __int128 v74 = (diskimage_uio::details::diskimage_open_params_impl *)*((void *)v8 + 1);
    *((void *)v8 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    int v68 = v9;
    uint64_t v10 = &v69;
    unint64_t v69 = v74;
    __int128 v74 = 0LL;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v74);
    if (v68)
    {
      *(void *)&__int128 v71 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 151LL;
      LODWORD(v72) = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(&lpsrc, &v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
      diskimage_uio::operator<<(&v77, v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)" rather than image",  18LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf((uint64_t)&lpsrc);
      MEMORY[0x1895BC2CC](v78);
      uint64_t v61 = __cxa_allocate_exception(0x10uLL);
      BOOL v62 = std::generic_category();
      void *v61 = 22LL;
      v61[1] = v62;
    }

    diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v69,  (uint64_t)&v71);
    LODWORD(lpsrc) = 12;
    LOBYTE(v75) = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v71,  (uint64_t)&lpsrc))
    {
      uint64_t v11 = operator new(0x10uLL);
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v11, (const std::error_category **)&v69);
      void *v11 = off_18A1CD6A8;
    }

    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v69,  (uint64_t)&v71);
      LODWORD(lpsrc) = 11;
      LOBYTE(v75) = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v71,  (uint64_t)&lpsrc)
        && (__int128 v18 = (uint64_t *)*((void *)v69 + 6), v19 = v18[1], v19 - *v18 == 16))
      {
        uint64_t v11 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>( *v18,  v19,  a4);
      }

      else
      {
        uint64_t v11 = operator new(0x10uLL);
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v11, (const std::error_category **)&v69);
      }
    }

    goto LABEL_70;
  }

  uint64_t v12 = operator new(0x10uLL);
  *uint64_t v12 = off_18A1CD600;
  v12[1] = 0LL;
  uint64_t v13 = *a2;
  LODWORD(lpsrc) = **a2;
  int v14 = (int)lpsrc;
  __int128 v74 = (diskimage_uio::details::diskimage_open_params_impl *)*((void *)v13 + 1);
  *((void *)v13 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  int v80 = v14;
  uint64_t v10 = (diskimage_uio::details::diskimage_open_params_impl **)&v81;
  unint64_t v81 = (std::error_category *)v74;
  __int128 v74 = 0LL;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v74);
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required(v81);
  diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership( (diskimage_uio::details::diskimage_open_params_impl *)v81,  &v79);
  uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v79 + 24LL))(v79);
  if (!v80)
  {
    *(void *)&__int128 v71 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
    *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
    LODWORD(v72) = 16;
    di_log::logger<di_log::log_printer<1002ul>>::logger(&lpsrc, &v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot",  93LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf((uint64_t)&lpsrc);
    MEMORY[0x1895BC2CC](v78);
    unint64_t v63 = __cxa_allocate_exception(0x10uLL);
    *unint64_t v63 = make_error_code(163LL);
    v63[1] = v64;
  }

  uint64_t v16 = v15;
  __int128 v71 = 0uLL;
  unint64_t v72 = 0LL;
  uint64_t v17 = v79;
  unint64_t v66 = a1;
  unint64_t v67 = v12;
  char v65 = a4;
  if (v80 == 1)
  {
    uint64_t v79 = 0LL;
    lpsrc = v17;
    LODWORD(v74) = 2;
LABEL_24:
    uint64_t v29 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v71,  (uint64_t *)&lpsrc);
    uint64_t v30 = lpsrc;
    *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v29;
    lpsrc = 0LL;
    if (v30) {
      (*(void (**)(void *))(*(void *)v30 + 16LL))(v30);
    }
    goto LABEL_29;
  }

  int v20 = (*(uint64_t (**)(void *))(*(void *)v79 + 40LL))(v79);
  if (v80 == 3) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  __int128 v22 = v79;
  if (v21 == 1 && v79 != 0LL)
  {
    if (v24) {
      v24[184] = 0;
    }
  }

  int v25 = v21 ^ 1;
  uint64_t v26 = *((void *)&v71 + 1);
  uint64_t v79 = 0LL;
  lpsrc = v22;
  LODWORD(v74) = v25;
  if (*((void *)&v71 + 1) >= v72) {
    goto LABEL_24;
  }
  **((void **)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v22;
  if (v22)
  {
    uint64_t v27 = operator new(0x20uLL);
    __int128 v28 = lpsrc;
    *uint64_t v27 = off_18A1CB9E8;
    v27[1] = 0LL;
    void v27[2] = 0LL;
    v27[3] = v28;
  }

  else
  {
    uint64_t v27 = 0LL;
  }

  *(void *)(v26 + _Block_object_dispose(va, 8) = v27;
  lpsrc = 0LL;
  *(_DWORD *)(v26 + 16) = (_DWORD)v74;
  *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v26 + 24;
LABEL_29:
  uint64_t v31 = a2 + 1;
  int v32 = v80;
  BOOL v33 = v80 == 1;
  uint64_t v34 = 8 * a3 - 8;
  do
  {
    __int128 v35 = *v31;
    LODWORD(lpsrc) = **v31;
    int v36 = (int)lpsrc;
    __int128 v74 = (diskimage_uio::details::diskimage_open_params_impl *)*((void *)v35 + 1);
    *((void *)v35 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    int v80 = v36;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v81, (uint64_t *)&v74);
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v74);
    diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required(v81);
    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v81, (uint64_t)&v68);
    if (!v70)
    {
      *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
      int v84 = 16;
      di_log::logger<di_log::log_printer<1028ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Can't get image format",  36LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf((uint64_t)&lpsrc);
      MEMORY[0x1895BC2CC](v78);
      unsigned int v52 = __cxa_allocate_exception(0x10uLL);
      *unsigned int v52 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v68);
    }

    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership( (diskimage_uio::details::diskimage_open_params_impl *)v81,  &lpsrc);
    uint64_t v37 = lpsrc;
    lpsrc = 0LL;
    uint64_t v38 = v79;
    uint64_t v79 = v37;
    if (v38)
    {
      (*(void (**)(const void *))(*(void *)v38 + 16LL))(v38);
      uint64_t v39 = lpsrc;
      lpsrc = 0LL;
      if (v39) {
        (*(void (**)(void *))(*(void *)v39 + 16LL))(v39);
      }
      uint64_t v37 = v79;
    }

    if (v37
    {
      *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
      int v84 = 16;
      di_log::logger<di_log::log_printer<1035ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Nested stacking is not allowed.",  45LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf((uint64_t)&lpsrc);
      goto LABEL_75;
    }

    if ((*(uint64_t (**)(void *))(*(void *)v37 + 24LL))(v37) != v16)
    {
      *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
      int v84 = 16;
      di_log::logger<di_log::log_printer<1040ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Multiple images given but block size differ. ",  59LL);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" block_size: ", 13LL);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" / ", 3LL);
      (*(void (**)(void *))(*(void *)v79 + 24LL))(v79);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf((uint64_t)&lpsrc);
      goto LABEL_75;
    }

    if (v34 != 8)
    {
      if (v68 == 8)
      {
        if (v80 == 1)
        {
          if (v33)
          {
            *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
            *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
            int v84 = 16;
            di_log::logger<di_log::log_printer<1074ul>>::logger(&lpsrc, &v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Only single cache is allowed",  42LL);
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf((uint64_t)&lpsrc);
          }

          else
          {
            if (v32 != 2)
            {
              BOOL v33 = 1;
              int v40 = 2;
              goto LABEL_50;
            }

            *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
            *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
            int v84 = 16;
            di_log::logger<di_log::log_printer<1079ul>>::logger(&lpsrc, &v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Snapshot detected on top of cache",  47LL);
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf((uint64_t)&lpsrc);
          }
        }

        else
        {
          if (v80 == 2)
          {
            if ((*(unsigned int (**)(void *))(*(void *)v79 + 40LL))(v79))
            {
              *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
              *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
              int v84 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&lpsrc, &v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Snapshots should be read only",  43LL);
              std::ostream::~ostream();
              di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf((uint64_t)&lpsrc);
              goto LABEL_82;
            }

            goto LABEL_46;
          }

          *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
          *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
          int v84 = 16;
          di_log::logger<di_log::log_printer<1063ul>>::logger(&lpsrc, &v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ",  109LL);
          diskimage_uio::operator<<(&v77, v80);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf((uint64_t)&lpsrc);
        }

LABEL_82:
        MEMORY[0x1895BC2CC](v78);
        uint64_t v57 = __cxa_allocate_exception(0x10uLL);
        void *v57 = make_error_code(163LL);
        v57[1] = v58;
      }

      *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
      int v84 = 16;
      di_log::logger<di_log::log_printer<1056ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ",  48LL);
      std::string v56 = diskimage_uio::operator<<(&v77, v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" instead", 8LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf((uint64_t)&lpsrc);
LABEL_75:
      MEMORY[0x1895BC2CC](v78);
      uint64_t v53 = 163LL;
LABEL_76:
      char v54 = __cxa_allocate_exception(0x10uLL);
      void *v54 = make_error_code(v53);
      v54[1] = v55;
    }

    if (v80)
    {
      *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
      *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
      int v84 = 16;
      di_log::logger<di_log::log_printer<1048ul>>::logger(&lpsrc, &v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: bottom diskimage should have role image, but ",  59LL);
      diskimage_uio::operator<<(&v77, v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)" given", 6LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf((uint64_t)&lpsrc);
      goto LABEL_75;
    }

    (*(void (**)(void *))(*(void *)v79 + 40LL))(v79);
LABEL_46:
    int v40 = 1;
LABEL_50:
    if (v68 != 12)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v79 + 72LL))(&lpsrc);
      if (lpsrc || v74 || v75 || v76)
      {
        *(void *)&__int128 v83 = "iter_t, uint32_t) [iter_t = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/libdiskimagesio/diskimage_uio.cpp:1699:29), const diskimage_uio::rref_capture<diskimage_uio::diskimage_open_params_pair> *>]";
        *((void *)&v83 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 65LL;
        int v84 = 16;
        di_log::logger<di_log::log_printer<1089ul>>::logger(&lpsrc, &v83);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v77,  (uint64_t)"Diskimageuio: images with constraints currently not supported",  61LL);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf((uint64_t)&lpsrc);
        MEMORY[0x1895BC2CC](v78);
        uint64_t v53 = 164LL;
        goto LABEL_76;
      }
    }

    uint64_t v41 = v79;
    uint64_t v79 = 0LL;
    lpsrc = v41;
    LODWORD(v74) = v40;
    uint64_t v42 = *((void *)&v71 + 1);
    if (*((void *)&v71 + 1) >= v72)
    {
      uint64_t v45 = std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( (uint64_t *)&v71,  (uint64_t *)&lpsrc);
      char v46 = lpsrc;
      *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v45;
      lpsrc = 0LL;
      if (v46) {
        (*(void (**)(void *))(*(void *)v46 + 16LL))(v46);
      }
    }

    else
    {
      **((void **)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v41;
      if (v41)
      {
        __int128 v43 = operator new(0x20uLL);
        unint64_t v44 = lpsrc;
        *__int128 v43 = off_18A1CB9E8;
        v43[1] = 0LL;
        _OWORD v43[2] = 0LL;
        v43[3] = v44;
      }

      else
      {
        __int128 v43 = 0LL;
      }

      *(void *)(v42 + _Block_object_dispose(va, 8) = v43;
      lpsrc = 0LL;
      *(_DWORD *)(v42 + 16) = (_DWORD)v74;
      *((void *)&v71 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v42 + 24;
    }

    ++v31;
    v34 -= 8LL;
  }

  while (v34);
  unint64_t v47 = operator new(0x98uLL);
  if ((v65 & 1) != 0) {
    int v48 = 1;
  }
  else {
    int v48 = 2;
  }
  int v82 = v48;
  *(void *)&__int128 v83 = 0x200000001LL;
  uint64_t v11 = v67;
  smart_enums::validators::flags<unsigned int>((uint64_t)"config_t", v48, (int *)&v83, 2LL);
  a1 = v66;
  DiskImageStackable::DiskImageStackable(v47, &v71, &v82);
  uint64_t v49 = v67[1];
  v67[1] = v47;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 16LL))(v49);
  }
  lpsrc = &v71;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  unint64_t v50 = v79;
  uint64_t v79 = 0LL;
  if (v50) {
    (*(void (**)(const void *))(*(void *)v50 + 16LL))(v50);
  }
LABEL_70:
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v10);
  *a1 = v11;
  return a1;
}

void sub_188098250(_Unwind_Exception *a1)
{
}

void sub_188098340()
{
}

void sub_188098348()
{
}

void sub_188098350()
{
}

void sub_188098418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v22 = *(void *)(v20 - 152);
  *(void *)(v20 - 152) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16LL))(v22);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v19);
  uint64_t v23 = a12[1];
  a12[1] = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_188098454(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1880986ACLL);
}

void sub_188098464( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_188098488( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1880984AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1880984D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1880984FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v23 = *(void *)(v21 - 152);
  *(void *)(v21 - 152) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v19);
  uint64_t v24 = a12[1];
  a12[1] = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 16LL))(v24);
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_188098510( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_188098540( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_188098568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_18809858C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1880985B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_188098628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  uint64_t v22 = a19;
  a19 = 0LL;
  if (v22) {
    (*(void (**)(uint64_t *))(*v22 + 16))(v22);
  }
  a19 = &a16;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v23 = *(void *)(v20 - 152);
  *(void *)(v20 - 152) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v19);
  uint64_t v24 = a12[1];
  a12[1] = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 16LL))(v24);
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void *diskimage_uio::diskimage::diskimage(void *a1, uint64_t *a2, char a3)
{
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( *a2,  a2[1],  a3);
  return a1;
}

{
  *a1 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( *a2,  a2[1],  a3);
  return a1;
}

void *diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( uint64_t a1, uint64_t a2, char a3)
{
  if (a1 == a2)
  {
    *(void *)&__int128 v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v18 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 77LL;
    int v19 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v20, &v18);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>( (uint64_t)v20,  "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v20);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v13;
  }

  if (a1 + 16 == a2)
  {
    int v16 = *(_DWORD *)a1;
    int v7 = *(_DWORD *)a1;
    uint64_t v8 = *(const std::error_category **)(a1 + 8);
    uint64_t v17 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    if (v7)
    {
      *(void *)&__int128 v18 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v18 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 77LL;
      int v19 = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(v20, &v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v22,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
      diskimage_uio::operator<<(v22, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" rather than image", 18LL);
      di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v20);
      int v14 = __cxa_allocate_exception(0x10uLL);
      uint64_t v15 = std::generic_category();
      *int v14 = 22LL;
      v14[1] = v15;
    }

    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v8, (uint64_t)&v18);
    LODWORD(v20[0]) = 12;
    char v21 = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v18,  (uint64_t)v20))
    {
      uint64_t v6 = operator new(0x10uLL);
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      void *v6 = off_18A1CD6A8;
    }

    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v17,  (uint64_t)&v18);
      LODWORD(v20[0]) = 11;
      char v21 = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v18,  (uint64_t)v20)
        && (int v9 = (uint64_t *)*((void *)v17 + 6), v10 = v9[1], v10 - *v9 == 16))
      {
        uint64_t v6 = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>( *v9,  v10,  a3);
      }

      else
      {
        uint64_t v6 = operator new(0x10uLL);
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v17);
      }
    }

    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v17);
  }

  else
  {
    uint64_t v6 = operator new(0x10uLL);
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( v6,  a1,  a2,  a3);
  }

  return v6;
}

void sub_188098934(_Unwind_Exception *a1)
{
}

void *diskimage_uio::diskimage::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::diskimage::diskimage(&v4, a1);
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void diskimage_uio::diskimage::~diskimage(diskimage_uio::diskimage *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)this = 0LL;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)this = 0LL;
}

void *diskimage_uio::diskimage::create@<X0>( _DWORD **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = diskimage_uio::diskimage::diskimage(&v6, a1, a2, a3);
  *(void *)a4 = v6;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void *diskimage_uio::diskimage::create@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( *a1,  a1[1],  a2);
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void *diskimage_uio::diskimage::diskimage(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0LL;
  return result;
}

uint64_t *diskimage_uio::diskimage::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

uint64_t diskimage_uio::diskimage::is_read_only(diskimage_uio::diskimage *this)
{
  return (*(unsigned int (**)(void))(**(void **)(*(void *)this + 8LL) + 40LL))(*(void *)(*(void *)this + 8LL)) ^ 1;
}

uint64_t diskimage_uio::diskimage::get_block_size(diskimage_uio::diskimage *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)this + 8LL) + 24LL))(*(void *)(*(void *)this + 8LL));
}

uint64_t diskimage_uio::diskimage::get_nr_blocks(diskimage_uio::diskimage *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)this + 8LL) + 32LL))(*(void *)(*(void *)this + 8LL));
}

uint64_t diskimage_uio::diskimage::create_context@<X0>( diskimage_uio::details::diskimage_impl **this@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_impl::create_context(*this, a2);
}

uint64_t diskimage_uio::details::diskimage_impl::create_context@<X0>( diskimage_uio::details::diskimage_impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = diskimage_uio::details::diskimage_impl::create_context_impl(this, (uint64_t)v4);
  if (v5)
  {
    *(void *)a2 = v4[0];
    *(_BYTE *)(a2 + 16) = 1;
  }

  else
  {
    uint64_t result = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v4);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_BYTE *)(a2 + 16) = 0;
    if (v5)
    {
      uint64_t result = v4[0];
      v4[0] = 0LL;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
      }
    }
  }

  return result;
}

void sub_188098C48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    diskimage_uio::details::diskimage_impl::create_context(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::details::diskimage_impl::subscribe_to_ring( uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2))
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    if (!v5 || (uint64_t v4 = *(const void **)(v5[3] - 24LL)) != 0LL)
    {
      {
        uint64_t v6 = (di_hybrid_subscriber_t *)operator new(0x280uLL);
        di_hybrid_subscriber_t::di_hybrid_subscriber_t(v6, a2, a1);
        *((void *)v6 + _Block_object_dispose(va, 8) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke;
        *((void *)v6 + 9) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke;
        *((void *)v6 + 10) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke;
        *((void *)v6 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke;
        *((void *)v6 + 12) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke;
        *((void *)v6 + 13) = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke;
        *((void *)v6 + 14) = diskimage_uio::details::setup_di_subscriber<di_hybrid_subscriber_t>(di_hybrid_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke;
        uint64_t v7 = io_rings_subscriber_subscribe((uint64_t)a2, (uint64_t)v6);
        if ((v7 & 0x80000000) != 0)
        {
          di_hybrid_subscriber_t::~di_hybrid_subscriber_t(v6);
          operator delete(v8);
        }

        return v7;
      }
    }
  }

  int v9 = operator new(0x118uLL);
  int v16 = 0LL;
  io_rings_di_subscriber_t::io_rings_di_subscriber_t((uint64_t)v9, a2, a1, (uint64_t)v15);
  int v14 = v9;
  uint64_t v10 = v16;
  if (v16 == v15)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v15;
    goto LABEL_11;
  }

  if (v16)
  {
    uint64_t v11 = 5LL;
LABEL_11:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  v9[8] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke;
  v9[9] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke;
  v9[10] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke;
  v9[11] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke;
  v9[12] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke;
  v9[13] = diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke;
  v9[14] = diskimage_uio::details::setup_di_subscriber<io_rings_di_subscriber_t>(io_rings_di_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke;
  uint64_t v7 = io_rings_subscriber_subscribe((uint64_t)a2, (uint64_t)v9);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v12 = v14;
    int v14 = 0LL;
    if (v12) {
      std::default_delete<io_rings_di_subscriber_t>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    }
  }

  return v7;
}

void sub_188098E60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x188098E2CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_plugin_impl::subscribe_to_ring(uint64_t a1, uint64_t a2)
{
  return DiskImagePlugin::subscribe_to_ring(*(void *)(a1 + 8), a2);
}

uint64_t diskimage_uio::diskimage::subscribe_to_ring(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
}

uint64_t diskimage_uio::add_di_role@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(void *)(a3 + _Block_object_dispose(va, 8) = *a2;
  *a2 = 0LL;
  return result;
}

void *diskimage_uio::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "auto";
    uint64_t v3 = 4LL;
  }

  else if (a2 == 1)
  {
    uint64_t v2 = "read write";
    uint64_t v3 = 10LL;
  }

  else if (a2)
  {
    uint64_t v2 = "unknown";
    uint64_t v3 = 7LL;
  }

  else
  {
    uint64_t v2 = "read only";
    uint64_t v3 = 9LL;
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;
  switch(a2)
  {
    case 0:
      uint64_t v2 = "image";
      goto LABEL_6;
    case 1:
      uint64_t v2 = "cache";
LABEL_6:
      uint64_t v3 = 5LL;
      break;
    case 2:
      uint64_t v2 = "snapshot";
      uint64_t v3 = 8LL;
      break;
    case 3:
      uint64_t v2 = "shadow";
      uint64_t v3 = 6LL;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7LL;
      break;
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;
  switch(a2)
  {
    case 1:
      uint64_t v2 = "raw";
      uint64_t v3 = 3LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
    case 2:
      uint64_t v2 = "udro";
      goto LABEL_11;
    case 3:
      uint64_t v2 = "udzo";
      goto LABEL_11;
    case 4:
      uint64_t v2 = "ulfo";
      goto LABEL_11;
    case 5:
      uint64_t v2 = "ulmo";
      goto LABEL_11;
    case 6:
      uint64_t v2 = "udzo_max";
      uint64_t v3 = 8LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
    case 7:
      uint64_t v2 = "udsb";
      goto LABEL_11;
    case 8:
      uint64_t v2 = "asif";
LABEL_11:
      uint64_t v3 = 4LL;
      break;
    case 11:
      uint64_t v2 = "pstack";
      uint64_t v3 = 6LL;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7LL;
      break;
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
}

{
  int v2;
  int v4;
  else {
    uint64_t v2 = a2;
  }
  uint64_t v4 = v2;
  return operator<<(a1, &v4);
}

uint64_t io_rings_di_subscriber_t::io_rings_di_subscriber_t( uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2), uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 120) = 850045863LL;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = -1LL;
  *(void *)(a1 + 240) = a3;
  if (*(void *)(a4 + 24))
  {
    std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]( a1 + 248,  a4);
  }

  else
  {
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = off_18A1D55B8;
    *(void *)(a1 + 256) = a1;
    *(void *)(a1 + 272) = a1 + 248;
  }

  io_rings_subscriber_sync_init((uint64_t (**)(uint64_t, uint64_t))a1, a2);
  *(void *)a1 = io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_1::__invoke;
  return a1;
}

void sub_1880991CC(_Unwind_Exception *a1)
{
}

uint64_t io_rings_di_subscriber_t::get_di(io_rings_di_subscriber_t *this)
{
  return *(void *)(*((void *)this + 30) + 8LL);
}

uint64_t io_rings_di_subscriber_t::get_ctx@<X0>(io_rings_di_subscriber_t *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)this + 120;
  uint64_t v5 = *((void *)this + 28);
  if (v5)
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = (unint64_t *)(*(void *)(*((void *)this + 24)
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(0LL, v7));
      if (v8) {
        break;
      }
      if (++v6 == v5) {
        goto LABEL_7;
      }
    }

    *a2 = v4;
    a2[1] = v8;
    __int128 v16 = (unint64_t)v4;
    a2[2] = v6;
    uint64_t v17 = -2LL;
  }

  else
  {
LABEL_7:
    __int128 v16 = 0uLL;
    uint64_t v17 = -1LL;
    uint64_t v9 = *((void *)this + 34);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 48LL))(&v14);
    if (v15)
    {
      unint64_t v10 = *((void *)this + 29);
      if ((v10 & 0x8000000000000000LL) != 0 || *((void *)this + 28) + 1LL <= v10) {
        uint64_t v11 = -1LL;
      }
      else {
        uint64_t v11 = -2LL;
      }
      uint64_t v12 = v14;
      *a2 = v4;
      a2[1] = v12;
      a2[2] = v11;
    }

    else
    {
      *(_OWORD *)a2 = v16;
      a2[2] = v17;
      *((void *)&v16 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
      uint64_t v17 = -2LL;
    }
  }

  return pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)&v16);
}

void sub_188099344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void ***pstack_header::pstack_header(void ***a1, const void **a2, char *a3, char a4)
{
  *a1 = 0LL;
  if (!*a2
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = off_18A1E43B0;
    uint64_t v38 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v38;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "pstack_header";
    void *exception = off_18A1D5150;
  }

  memset(v46, 0, sizeof(v46));
  uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v7 + 176LL))(v7);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  create_stack_vector_from_single_fd((const std::__fs::filesystem::path *)&__p, v8, a4, (uint64_t)&v44);
  if (v44 == v45)
  {
    uint64_t v39 = __cxa_allocate_exception(0x40uLL);
    void *v39 = off_18A1E43B0;
    int v40 = std::generic_category();
    v39[1] = 22LL;
    v39[2] = v40;
    *((_BYTE *)v39 + 24) = 0;
    *((_BYTE *)v39 + 4_Block_object_dispose(va, 8) = 0;
    v39[7] = "pstack_header";
    void *v39 = off_18A1D5150;
  }

  uint64_t v9 = (void **)operator new(0x18uLL);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  v9[2] = 0LL;
  __p.__r_.__value_.__r.__words[0] = 0LL;
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a1, v9);
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100]((void ***)&__p, 0LL);
  std::vector<diskimage_uio::diskimage_open_params_pair>::reserve((char **)*a1, v45 - v44);
  unint64_t v10 = v44;
  for (uint64_t i = v45; v10 != i; ++v10)
  {
    uint64_t v12 = std::generic_category();
    v42[0] = 22LL;
    v42[1] = v12;
    char v43 = 0;
    uint64_t v13 = (char *)*v10;
    uint64_t v14 = *((void *)*v10 + 7);
    if (v14)
    {
      diskimage_uio::diskimage_open_params::create((uint64_t)(v13 + 32), v14, *((_DWORD *)v13 + 1), (uint64_t)&__p);
      diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=( (diskimage_uio::diskimage_open_params *)v42,  (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16]) {
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      }
    }

    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v41.__pn_, v13 + 8);
      diskimage_uio::diskimage_open_params::create(&v41, (*v10)[1], (uint64_t)&__p);
      diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=( (diskimage_uio::diskimage_open_params *)v42,  (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16]) {
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      }
    }

    if (!v43)
    {
      __int128 v35 = (char *)__cxa_allocate_exception(0x40uLL);
      __int128 v36 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v42);
      *(void *)__int128 v35 = off_18A1E43B0;
      *(_OWORD *)(v35 + _Block_object_dispose(va, 8) = v36;
      v35[24] = 0;
      v35[48] = 0;
      *((void *)v35 + 7) = "pstack: unsupported node";
    }

    char v15 = *a1;
    int v16 = **v10;
    LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = v16;
    uint64_t v17 = v42[0];
    v41.__pn_.__r_.__value_.__l.__size_ = v42[0];
    v42[0] = 0LL;
    __int128 v18 = (char *)v15[1];
    int v19 = (char *)v15[2];
    if (v18 >= v19)
    {
      uint64_t v21 = (v18 - (_BYTE *)*v15) >> 4;
      unint64_t v22 = v21 + 1;
      uint64_t v23 = v19 - (_BYTE *)*v15;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v49 = v15 + 2;
      int v25 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)(v15 + 2), v24);
      uint64_t v27 = &v25[16 * v21];
      *(_DWORD *)uint64_t v27 = v41.__pn_.__r_.__value_.__l.__data_;
      *((void *)v27 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v41.__pn_.__r_.__value_.__l.__size_;
      v41.__pn_.__r_.__value_.__l.__size_ = 0LL;
      uint64_t v29 = *v15;
      std::string::size_type v28 = (std::string::size_type)v15[1];
      if ((void *)v28 == *v15)
      {
        std::string::size_type v32 = (std::string::size_type)v15[1];
        uint64_t v30 = &v25[16 * v21];
      }

      else
      {
        uint64_t v30 = &v25[16 * v21];
        do
        {
          int v31 = *(_DWORD *)(v28 - 16);
          v28 -= 16LL;
          *((_DWORD *)v30 - 4) = v31;
          v30 -= 16;
          *((void *)v30 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *(void *)(v28 + 8);
          *(void *)(v28 + _Block_object_dispose(va, 8) = 0LL;
        }

        while ((void *)v28 != v29);
        std::string::size_type v32 = (std::string::size_type)*v15;
        std::string::size_type v28 = (std::string::size_type)v15[1];
      }

      uint64_t v20 = v27 + 16;
      const std::error_category *v15 = v30;
      __p.__r_.__value_.__r.__words[0] = v32;
      __p.__r_.__value_.__l.__size_ = v32;
      v15[1] = v27 + 16;
      __p.__r_.__value_.__l.__cap_ = v28;
      BOOL v33 = v15[2];
      v15[2] = &v25[16 * v26];
      int v48 = v33;
      std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&__p);
    }

    else
    {
      *(_DWORD *)__int128 v18 = v16;
      *((void *)v18 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v17;
      uint64_t v20 = v18 + 16;
      v41.__pn_.__r_.__value_.__l.__size_ = 0LL;
    }

    v15[1] = v20;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v41.__pn_.__r_.__value_.__r.__words[1]);
    if (v43) {
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v42);
    }
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_188099790( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, char a27, int a28, __int16 a29, char a30)
{
  a16 = &a19;
  std::vector<std::unique_ptr<diskimage_uio::stack_image_node const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](v30, 0LL);
  _Unwind_Resume(a1);
}

void header_exception::header_exception(header_exception *this, const char *a2, unsigned int a3)
{
  *(void *)this = off_18A1E43B0;
  uint64_t v6 = std::generic_category();
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = a3;
  *((void *)this + 2) = v6;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 4_Block_object_dispose(va, 8) = 0;
  *((void *)this + 7) = a2;
  *(void *)this = off_18A1D5150;
}

uint64_t std::vector<diskimage_uio::diskimage_open_params_pair>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100](result, a2);
    uint64_t v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v8);
      unint64_t v10 = &v6[v5];
    }

    else
    {
      unint64_t v10 = &v6[v5];
      do
      {
        int v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16LL;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((void *)v10 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *(void *)(v8 + 8);
        *(void *)(v8 + _Block_object_dispose(va, 8) = 0LL;
      }

      while ((char *)v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }

    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&v14);
  }

  return result;
}

diskimage_uio::diskimage_open_params *diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::operator=( diskimage_uio::diskimage_open_params *a1, __int128 *a2)
{
  char v5 = *((_BYTE *)a2 + 16);
  if (v5)
  {
    *(void *)&__int128 v4 = *(void *)a2;
    *(void *)a2 = 0LL;
  }

  else
  {
    __int128 v4 = *a2;
  }

  diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::swap( (diskimage_uio::diskimage_open_params *)&v4,  a1);
  if (v5) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  return a1;
}

void sub_188099A08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node( uint64_t a1, int a2, int a3, __int128 *a4, __int128 *a5, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 8),  *(const std::string::value_type **)a4,  *((void *)a4 + 1));
  }

  else
  {
    __int128 v9 = *a4;
    *(void *)(a1 + 24) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v9;
  }

  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external( (std::string *)(a1 + 32),  *(const std::string::value_type **)a5,  *((void *)a5 + 1));
  }

  else
  {
    __int128 v10 = *a5;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v10;
  }

  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_188099AC8(_Unwind_Exception *exception_object)
{
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
}

void diskimage_uio::details::diskimage_impl::~diskimage_impl(diskimage_uio::details::diskimage_impl *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_18A1CD600;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
}

{
  uint64_t v2;
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_18A1CD600;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
  operator delete(this);
}

void diskimage_uio::details::diskimage_plugin_impl::~diskimage_plugin_impl( diskimage_uio::details::diskimage_plugin_impl *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_18A1CD600;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
}

{
  uint64_t v2;
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_18A1CD600;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
  operator delete(this);
}

void diskimage_uio::anonymous namespace'::di_err_category::~di_err_category(std::error_category *this)
{
}

const char *diskimage_uio::anonymous namespace'::di_err_category::name( diskimage_uio::_anonymous_namespace_::di_err_category *this)
{
  return "disk image";
}

void *diskimage_uio::anonymous namespace'::di_err_category::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  else {
    uint64_t v3 = off_18A1D5628[a1 - 150];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1109ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1109ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<1109ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CD8A0;
  di_log::logger_buf<di_log::log_printer<1109ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1109ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809A02C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1109ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<1109ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1109LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    __int128 v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      __int128 v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    int v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1109LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 24, (__int128 *)((char *)a2 + 24));
  uint64_t v5 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0LL;
  char v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    operator delete(v6);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>( a1 + 48,  (uint64_t)(a2 + 3));
  uint64_t v7 = *((void *)a2 + 70);
  *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 142);
  *(void *)(a1 + 560) = v7;
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 576, a2 + 36);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 592, a2 + 37);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 608, a2 + 38);
  return a1;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::operator=( uint64_t a1, __int128 *a2)
{
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1, a2);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 16, a2 + 1);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 32, a2 + 2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>( uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 504);
  uint64_t v4 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1) {
      return result;
    }
  }

  else if ((_DWORD)v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_18A1CD910[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }

  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_18A1CD940[v4])(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SA_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_( uint64_t a1, void ***a2)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS8_SA_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_( uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_( uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_( uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_( uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 2) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<2ul,di_asif::header>( result,  (uint64_t)a3);
  }
  *a2 = *a3;
  __int128 v4 = a3[1];
  __int128 v5 = a3[2];
  __int128 v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_( uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 3) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<3ul,raw_header>( result,  a3);
  }
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_( uint64_t *a1, void ***a2, uint64_t *a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSU_EEEDcSM_DpT0_( uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<0ul,std::monostate>( uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<1ul,udif::header,udif::header>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v3 = *(_OWORD *)(a3 + 16);
    __int128 v4 = *(_OWORD *)(a3 + 32);
    __int128 v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v4;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    __int128 v6 = *(_OWORD *)(a3 + 88);
    __int128 v7 = *(_OWORD *)(a3 + 104);
    __int128 v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 8_Block_object_dispose(va, 8) = v6;
    __int128 v9 = *(_OWORD *)(a3 + 152);
    __int128 v10 = *(_OWORD *)(a3 + 168);
    __int128 v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 16_Block_object_dispose(va, 8) = v10;
    *(_OWORD *)(a2 + 152) = v9;
    __int128 v12 = *(_OWORD *)(a3 + 248);
    __int128 v13 = *(_OWORD *)(a3 + 264);
    __int128 v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 264) = v13;
    *(_OWORD *)(a2 + 280) = v14;
    *(_OWORD *)(a2 + 24_Block_object_dispose(va, 8) = v12;
    __int128 v16 = *(_OWORD *)(a3 + 312);
    __int128 v15 = *(_OWORD *)(a3 + 328);
    __int128 v17 = *(_OWORD *)(a3 + 296);
    *(void *)(a2 + 344) = *(void *)(a3 + 344);
    *(_OWORD *)(a2 + 312) = v16;
    *(_OWORD *)(a2 + 32_Block_object_dispose(va, 8) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 352) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    __int128 v18 = *(_OWORD *)(a3 + 360);
    __int128 v19 = *(_OWORD *)(a3 + 376);
    __int128 v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 40_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 392) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 360) = v18;
    __int128 v21 = *(_OWORD *)(a3 + 424);
    __int128 v22 = *(_OWORD *)(a3 + 440);
    __int128 v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 440) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    uint64_t v24 = *(void *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(void *)(a2 + 48_Block_object_dispose(va, 8) = v24;
  }

  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<1ul,udif::header>( a1,  a3);
  }

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<1ul,udif::header>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 512;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 88);
  __int128 v5 = *(_OWORD *)(a2 + 104);
  __int128 v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 152);
  __int128 v8 = *(_OWORD *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 248);
  __int128 v11 = *(_OWORD *)(a2 + 264);
  __int128 v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v10;
  __int128 v14 = *(_OWORD *)(a2 + 312);
  __int128 v13 = *(_OWORD *)(a2 + 328);
  __int128 v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  __int128 v16 = *(_OWORD *)(a2 + 360);
  __int128 v17 = *(_OWORD *)(a2 + 376);
  __int128 v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 40_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 360) = v16;
  __n128 result = *(__n128 *)(a2 + 424);
  __int128 v20 = *(_OWORD *)(a2 + 440);
  __int128 v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 440) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 48_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 492) = *(void *)(a2 + 492);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<2ul,di_asif::header>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v4])(&v9, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 62) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 70) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<3ul,raw_header>( uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<4ul,pstack_header,pstack_header>( uint64_t a1, void ***a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 504) == 4)
  {
    __int128 v3 = (void **)*a3;
    *a3 = 0LL;
    std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](a2, v3);
  }

  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<4ul,pstack_header>( a1,  a3);
  }

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<4ul,pstack_header>( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__assign_alt[abi:ne180100]<5ul,plugin_header,plugin_header>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 5)
  {
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a2, (__int128 *)a3);
    uint64_t v5 = (void **)(a2 + 16);
    __int128 v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v5 = v6;
    *(_BYTE *)(a3 + 39) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }

  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<5ul,plugin_header>( a1,  a3);
  }

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__emplace[abi:ne180100]<5ul,plugin_header>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1122ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  __int128 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1122ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<1122ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CDB20;
  di_log::logger_buf<di_log::log_printer<1122ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1122ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809ADF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1122ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<1122ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1122LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    char v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      __int128 v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1122LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>( uint64_t a1@<X8>)
{
  *(void *)&__int128 v3 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 110LL;
  int v4 = 16;
  di_log::logger<di_log::log_printer<1134ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v6,  (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format",  66LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x1895BC2CC](&v7);
  __n128 result = std::generic_category();
  *(void *)a1 = 6LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_18809B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>( void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  int v5 = (uint64_t *)(**a1 + 24LL);
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif (v5, (uint64_t)v34);
  if (!v36) {
    goto LABEL_4;
  }
  if (v35 != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (!udif::header::operator==((uint64_t)v34, a2))
  {
    *(void *)&__int128 v28 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = udif::header]";
    *((void *)&v28 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 110LL;
    int v29 = 16;
    di_log::logger<di_log::log_printer<1146ul>>::logger(__p, &v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v32,  (uint64_t)"Diskimageuio: UDIF header changed while unlocked",  48LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf((uint64_t)__p);
    MEMORY[0x1895BC2CC](&v33);
    uint64_t v27 = std::generic_category();
    *(void *)a3 = 35LL;
    *(void *)(a3 + _Block_object_dispose(va, 8) = v27;
    *(_BYTE *)(a3 + 16) = 0;
  }

  else
  {
LABEL_4:
    uint64_t v6 = (char *)operator new(0x1F4uLL);
    *(void *)uint64_t v6 = 0x4796C6F6BLL;
    int v7 = *(_DWORD *)(a2 + 12);
    *((_DWORD *)v6 + 2) = 512;
    *((_DWORD *)v6 + 3) = v7;
    __int128 v8 = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v6 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v6 + 2) = v8;
    *((void *)v6 + 6) = *(void *)(a2 + 48);
    *((void *)v6 + 7) = *(void *)(a2 + 56);
    *((_OWORD *)v6 + 4) = *(_OWORD *)(a2 + 64);
    *((void *)v6 + 10) = *(void *)(a2 + 80);
    __int128 v9 = *(_OWORD *)(a2 + 88);
    __int128 v10 = *(_OWORD *)(a2 + 104);
    __int128 v11 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v6 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v6 + 120) = v11;
    *(_OWORD *)(v6 + 104) = v10;
    *(_OWORD *)(v6 + 8_Block_object_dispose(va, 8) = v9;
    __int128 v12 = *(_OWORD *)(a2 + 152);
    __int128 v13 = *(_OWORD *)(a2 + 168);
    __int128 v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v6 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(v6 + 184) = v14;
    *(_OWORD *)(v6 + 16_Block_object_dispose(va, 8) = v13;
    *(_OWORD *)(v6 + 152) = v12;
    *(_OWORD *)(v6 + 216) = *(_OWORD *)(a2 + 216);
    __int128 v15 = *(_OWORD *)(a2 + 232);
    __int128 v16 = *(_OWORD *)(a2 + 248);
    __int128 v17 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(v6 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v6 + 280) = v17;
    *(_OWORD *)(v6 + 24_Block_object_dispose(va, 8) = v16;
    *(_OWORD *)(v6 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v15;
    __int128 v18 = *(_OWORD *)(a2 + 296);
    __int128 v19 = *(_OWORD *)(a2 + 312);
    __int128 v20 = *(_OWORD *)(a2 + 328);
    *((void *)v6 + 43) = *(void *)(a2 + 344);
    *(_OWORD *)(v6 + 312) = v19;
    *(_OWORD *)(v6 + 32_Block_object_dispose(va, 8) = v20;
    *(_OWORD *)(v6 + 296) = v18;
    *((void *)v6 + 44) = *(void *)(a2 + 352);
    *(_OWORD *)(v6 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(v6 + 440) = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(v6 + 456) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(v6 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(v6 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(v6 + 40_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 408);
    *((_DWORD *)v6 + 122) = *(_DWORD *)(a2 + 488);
    *(void *)(v6 + 492) = *(void *)(a2 + 492);
    *(void *)&__int128 v28 = v6;
    UDIF_header::UDIF_header(__p, (uint64_t *)&v28, v5);
    uint64_t v21 = operator new(0xC8uLL);
    DiskImageUDIF::DiskImageUDIF(v21, (uint64_t *)__p, v5);
    *(void *)a3 = v21;
    *(_BYTE *)(a3 + 16) = 1;
    __int16 v22 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        unint64_t v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    int v25 = __p[0];
    __p[0] = 0LL;
    if (v25) {
      operator delete(v25);
    }
    uint64_t v26 = (void *)v28;
    *(void *)&__int128 v28 = 0LL;
    if (v26) {
      operator delete(v26);
    }
  }

  if (v36) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v34);
  }
}

void sub_18809B3C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (LOBYTE(STACK[0x430])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>( void **a1@<X0>, Backend *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v5 = (Backend **)(**a1 + 24LL);
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif (v5, (uint64_t)v17);
  if (!v19) {
    goto LABEL_4;
  }
  if (v18 != 2) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (!di_asif::header::operator==((uint64_t)v17, (uint64_t)a2))
  {
    *(void *)&__int128 v12 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = di_asif::header]";
    *((void *)&v12 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 110LL;
    int v13 = 16;
    di_log::logger<di_log::log_printer<1153ul>>::logger(v14, &v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v15,  (uint64_t)"Diskimageuio: ASIF header changed while unlocked",  48LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf((uint64_t)v14);
    MEMORY[0x1895BC2CC](&v16);
    __n128 result = std::generic_category();
    char v11 = 0;
    *(void *)a3 = 35LL;
    *(void *)(a3 + _Block_object_dispose(va, 8) = result;
  }

  else
  {
LABEL_4:
    uint64_t v6 = operator new(0xFF0uLL);
    uint64_t dir_latest_offset = DiskImageASIF::get_dir_latest_offset((DiskImageASIF *)*v5, a2, v7);
    __n128 result = (const std::error_category *)DiskImageASIF::DiskImageASIF( v6,  v5,  a2,  dir_latest_offset,  v9,  &DiskImageASIF::default_options);
    *(void *)a3 = v6;
    char v11 = 1;
  }

  *(_BYTE *)(a3 + 16) = v11;
  if (v19) {
    return (const std::error_category *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
  }
  return result;
}

void sub_18809B608( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (LOBYTE(STACK[0x430])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>( void **a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v5 = (const Backend **)(**a1 + 24LL);
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw(v5, *a2, (uint64_t)v15);
  if (v17)
  {
    if (v16 != 3) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    unint64_t v6 = v15[0];
    if (v15[0] != *a2 || v15[1] != a2[1])
    {
      *(void *)&__int128 v10 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = raw_header]";
      *((void *)&v10 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 110LL;
      int v11 = 16;
      di_log::logger<di_log::log_printer<1139ul>>::logger(v12, &v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v13,  (uint64_t)"Diskimageuio: Raw header changed while unlocked",  47LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf((uint64_t)v12);
      MEMORY[0x1895BC2CC](&v14);
      uint64_t result = (uint64_t)std::generic_category();
      char v8 = 0;
      *(void *)a3 = 35LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = result;
      goto LABEL_8;
    }
  }

  else
  {
    unint64_t v6 = *a2;
  }

  uint64_t v9 = operator new(0x28uLL);
  uint64_t result = DiskImageRaw::DiskImageRaw((uint64_t)v9, v5, v6);
  *(void *)a3 = v9;
  char v8 = 1;
LABEL_8:
  *(_BYTE *)(a3 + 16) = v8;
  if (v17) {
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
  }
  return result;
}

void sub_18809B7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (LOBYTE(STACK[0x430])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>( diskimage_uio::details::diskimage_open_params_impl ****a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v38 = 0uLL;
  v39[0] = 0LL;
  __int128 v3 = **a1;
  uint64_t v4 = (int *)(*a1)[1];
  if (v3 == (diskimage_uio::details::diskimage_open_params_impl **)v4)
  {
    uint64_t v25 = 0LL;
    uint64_t v24 = 0LL;
LABEL_26:
    if (v25 - v24 == 16)
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format( *(const std::error_category **)(v24 + 8),  (uint64_t)&v36);
      LODWORD(v30) = 12;
      v31.i8[8] = 1;
      BOOL v26 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v36,  (uint64_t)&v30);
      uint64_t v24 = v38;
      if (v26)
      {
        if (*(_DWORD *)v38)
        {
          *(void *)&__int128 v36 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = pstack_header]";
          *((void *)&v36 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 110LL;
          int v37 = 16;
          di_log::logger<di_log::log_printer<1170ul>>::logger(&v30, &v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v34,  (uint64_t)"Diskimageuio: Single element in pstack that isn't an image",  58LL);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf((uint64_t)&v30);
          MEMORY[0x1895BC2CC](v35);
          uint64_t v27 = std::generic_category();
          *(void *)a2 = 22LL;
          *(void *)(a2 + _Block_object_dispose(va, 8) = v27;
          *(_BYTE *)(a2 + 16) = 0;
          goto LABEL_33;
        }

        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)&v30, (const std::error_category **)(v38 + 8));
LABEL_32:
        *(void *)a2 = v31.i64[0];
        *(_BYTE *)(a2 + 16) = 1;
        goto LABEL_33;
      }

      uint64_t v25 = *((void *)&v38 + 1);
    }

    diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( &v30,  v24,  v25,  0);
    goto LABEL_32;
  }

  while (1)
  {
    diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr((uint64_t *)&v36, v3[1]);
    int v5 = v37;
    if ((_BYTE)v37)
    {
      int v6 = *(_DWORD *)v3;
      LODWORD(v2_Block_object_dispose(va, 8) = *(_DWORD *)v3;
      int v7 = v3[1];
      *((void *)&v28 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v7;
      v3[1] = 0LL;
      uint64_t v8 = *((void *)&v38 + 1);
      if (*((void *)&v38 + 1) >= v39[0])
      {
        uint64_t v10 = (uint64_t)(*((void *)&v38 + 1) - v38) >> 4;
        unint64_t v11 = v10 + 1;
        uint64_t v12 = v39[0] - v38;
        unint64_t v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0LL ? 0xFFFFFFFFFFFFFFFLL : v11;
        uint64_t v33 = v39;
        uint64_t v14 = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)v39, v13);
        int v16 = &v14[16 * v10];
        *(_DWORD *)int v16 = v28;
        *((void *)v16 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *((void *)&v28 + 1);
        *((void *)&v28 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
        uint64_t v17 = *((void *)&v38 + 1);
        uint64_t v18 = v38;
        if (*((void *)&v38 + 1) == (void)v38)
        {
          int64x2_t v21 = vdupq_n_s64(*((unint64_t *)&v38 + 1));
          char v19 = &v14[16 * v10];
        }

        else
        {
          char v19 = &v14[16 * v10];
          do
          {
            int v20 = *(_DWORD *)(v17 - 16);
            v17 -= 16LL;
            *((_DWORD *)v19 - 4) = v20;
            v19 -= 16;
            *((void *)v19 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *(void *)(v17 + 8);
            *(void *)(v17 + _Block_object_dispose(va, 8) = 0LL;
          }

          while (v17 != v18);
          int64x2_t v21 = (int64x2_t)v38;
        }

        uint64_t v9 = v16 + 16;
        *(void *)&__int128 v38 = v19;
        *((void *)&v38 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v16 + 16;
        int64x2_t v31 = v21;
        uint64_t v22 = v39[0];
        v39[0] = &v14[16 * v15];
        uint64_t v32 = v22;
        uint64_t v30 = v21.i64[0];
        std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer((uint64_t)&v30);
      }

      else
      {
        **((_DWORD **)&v38 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v6;
        *(void *)(v8 + _Block_object_dispose(va, 8) = v7;
        uint64_t v9 = (char *)(v8 + 16);
        *((void *)&v28 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
      }

      *((void *)&v38 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v9;
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)((char *)&v28 + 8));
    }

    else
    {
      *(void *)&__int128 v28 = "diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr()::(anonymous class)::operator()(const auto &) const [hdr:auto = pstack_header]";
      *((void *)&v28 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 110LL;
      int v29 = 16;
      di_log::logger<di_log::log_printer<1162ul>>::logger(&v30, &v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v34,  (uint64_t)"Diskimageuio: Invalid pstack element",  36LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf((uint64_t)&v30);
      MEMORY[0x1895BC2CC](v35);
      *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v36);
      *(_BYTE *)(a2 + 16) = 0;
    }

    if ((_BYTE)v37)
    {
      uint64_t v23 = v36;
      *(void *)&__int128 v36 = 0LL;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
      }
    }

    if (!v5) {
      break;
    }
    v3 += 2;
    if (v3 == (diskimage_uio::details::diskimage_open_params_impl **)v4)
    {
      uint64_t v25 = *((void *)&v38 + 1);
      uint64_t v24 = v38;
      goto LABEL_26;
    }
  }

void sub_18809BB8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)__cxa_begin_catch(a1);
    *(_BYTE *)(v13 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x18809BB40LL);
  }

  *(void *)(v14 - std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = v14 - 112;
  std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<diskimage_uio::details::diskimage_open_params_impl::create_diskimage_from_hdr(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> &>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = operator new(0x110uLL);
  uint64_t result = DiskImagePlugin::DiskImagePlugin((uint64_t)v4, a1);
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void sub_18809BCC8(_Unwind_Exception *a1)
{
}

void *di_log::logger<di_log::log_printer<1134ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1134ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CDBD8;
  a1[45] = &unk_18A1CDCD8;
  a1[46] = &unk_18A1CDD00;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CDBD8;
  a1[45] = &unk_18A1CDC60;
  a1[46] = &unk_18A1CDC88;
  return a1;
}

void sub_18809BD60(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CDD70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809BE2C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CDD70;
  di_log::logger_buf<di_log::log_printer<1134ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1134ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1134ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1134ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1134ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1134ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1134ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809C1E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1134ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1134LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1134LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif ( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = *MEMORY[0x1895F89C0];
  UDIF_header::UDIF_header(__p, a1);
  int v4 = *((_DWORD *)__p[0] + 3);
  __int128 v5 = *((_OWORD *)__p[0] + 2);
  __int128 v38 = *((_OWORD *)__p[0] + 1);
  __int128 v39 = v5;
  uint64_t v40 = *((void *)__p[0] + 6);
  uint64_t v6 = *((void *)__p[0] + 7);
  __int128 v7 = *((_OWORD *)__p[0] + 4);
  uint64_t v8 = *((void *)__p[0] + 10);
  __int128 v9 = *(_OWORD *)((char *)__p[0] + 88);
  __int128 v10 = *(_OWORD *)((char *)__p[0] + 104);
  __int128 v11 = *(_OWORD *)((char *)__p[0] + 136);
  __int128 v102 = *(_OWORD *)((char *)__p[0] + 120);
  __int128 v103 = v11;
  __int128 v100 = v9;
  __int128 v101 = v10;
  __int128 v12 = *(_OWORD *)((char *)__p[0] + 152);
  __int128 v13 = *(_OWORD *)((char *)__p[0] + 168);
  __int128 v14 = *(_OWORD *)((char *)__p[0] + 184);
  __int128 v107 = *(_OWORD *)((char *)__p[0] + 200);
  __int128 v108 = v7;
  __int128 v105 = v13;
  __int128 v106 = v14;
  __int128 v104 = v12;
  __int128 v15 = *(_OWORD *)((char *)__p[0] + 216);
  __int128 v16 = *(_OWORD *)((char *)__p[0] + 232);
  __int128 v17 = *(_OWORD *)((char *)__p[0] + 264);
  __int128 v18 = *(_OWORD *)((char *)__p[0] + 280);
  __int128 v93 = *(_OWORD *)((char *)__p[0] + 248);
  __int128 v94 = v17;
  __int128 v91 = v15;
  __int128 v92 = v16;
  __int128 v19 = *(_OWORD *)((char *)__p[0] + 296);
  __int128 v20 = *(_OWORD *)((char *)__p[0] + 312);
  __int128 v21 = *(_OWORD *)((char *)__p[0] + 328);
  uint64_t v99 = *((void *)__p[0] + 43);
  __int128 v97 = v20;
  __int128 v98 = v21;
  __int128 v95 = v18;
  __int128 v96 = v19;
  uint64_t v22 = *((void *)__p[0] + 44);
  __int128 v23 = *(_OWORD *)((char *)__p[0] + 440);
  __int128 v87 = *(_OWORD *)((char *)__p[0] + 424);
  __int128 v88 = v23;
  __int128 v24 = *(_OWORD *)((char *)__p[0] + 472);
  __int128 v89 = *(_OWORD *)((char *)__p[0] + 456);
  __int128 v90 = v24;
  __int128 v25 = *(_OWORD *)((char *)__p[0] + 376);
  __int128 v83 = *(_OWORD *)((char *)__p[0] + 360);
  __int128 v84 = v25;
  __int128 v26 = *(_OWORD *)((char *)__p[0] + 408);
  __int128 v85 = *(_OWORD *)((char *)__p[0] + 392);
  __int128 v86 = v26;
  int v27 = *((_DWORD *)__p[0] + 122);
  uint64_t v28 = *(void *)((char *)__p[0] + 492);
  int v29 = operator new(0xC8uLL);
  DiskImageUDIF::DiskImageUDIF(v29, (uint64_t *)__p, a1);
  (*(void (**)(void **__return_ptr, void *, void))(*v29 + 48LL))(&lpsrc, v29, 0LL);
  if (!v30) {
    __cxa_bad_cast();
  }
  int v31 = v30[2];
  uint64_t v43 = 0x4796C6F6BLL;
  int v44 = 512;
  int v45 = v4;
  __int128 v46 = v38;
  __int128 v47 = v39;
  uint64_t v48 = v40;
  uint64_t v49 = v6;
  __int128 v50 = v108;
  uint64_t v51 = v8;
  __int128 v55 = v103;
  __int128 v54 = v102;
  __int128 v53 = v101;
  __int128 v52 = v100;
  __int128 v59 = v107;
  __int128 v58 = v106;
  __int128 v57 = v105;
  __int128 v56 = v104;
  __int128 v63 = v94;
  __int128 v64 = v95;
  __int128 v66 = v97;
  __int128 v67 = v98;
  __int128 v65 = v96;
  __int128 v60 = v91;
  __int128 v62 = v93;
  __int128 v61 = v92;
  uint64_t v68 = v99;
  uint64_t v69 = v22;
  __int128 v74 = v87;
  __int128 v75 = v88;
  __int128 v76 = v89;
  __int128 v77 = v90;
  __int128 v70 = v83;
  __int128 v71 = v84;
  __int128 v72 = v85;
  __int128 v73 = v86;
  int v78 = v27;
  uint64_t v79 = v28;
  int v80 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( (uint64_t)v81,  (uint64_t)&v43);
  int v82 = v31;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a2,  (uint64_t)v81);
  *(_DWORD *)(a2 + 512) = v82;
  *(_BYTE *)(a2 + 520) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v81);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v43);
  uint64_t v32 = lpsrc;
  lpsrc = 0LL;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 8LL))(v32);
  }
  (*(void (**)(void *))(*v29 + 16LL))(v29);
  uint64_t v33 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  __int128 v36 = __p[0];
  __p[0] = 0LL;
  if (v36) {
    operator delete(v36);
  }
}

void sub_18809C740( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  __int128 v13 = va_arg(va1, void *);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x258]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 8LL))(a4);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 16LL))(v10);
    UDIF_header::~UDIF_header((void **)va);
    __int128 v12 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v12);
  }

  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<1146ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1146ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CE168;
  a1[45] = &unk_18A1CE268;
  a1[46] = &unk_18A1CE290;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CE168;
  a1[45] = &unk_18A1CE1F0;
  a1[46] = &unk_18A1CE218;
  return a1;
}

void sub_18809C89C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions( diskimage_uio::details::diskimage_open_params_impl *this)
{
}

void sub_18809C930(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v3 = __cxa_begin_catch(a1);
      *(void *)&__int128 v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((void *)&v5 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 146LL;
      int v6 = 16;
      di_log::logger<di_log::log_printer<393ul>>::logger(v8, &v5);
      operator<<(&v9, (uint64_t)v3);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x1895BC2CC](&v10);
      *(void *)uint64_t v2 = make_error_code(161LL);
      *(void *)(v2 + _Block_object_dispose(va, 8) = v4;
      *(_BYTE *)(v2 + 520) = 0;
      goto LABEL_7;
    }

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>( a1,  a2);
  return a1;
}

void sub_18809CB24(_Unwind_Exception *a1)
{
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>( uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 504);
  if ((_DWORD)v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_18A1CD910[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 504) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_18A1CDF00[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }

  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = std::__variant_detail::__alt<1ul,udif::header>::__alt[abi:ne180100]<udif::header>(a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 2003069043;
  *(void *)(a2 + 4) = *(void *)(a3 + 4);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  __n128 result = *(__n128 *)(a3 + 16);
  __int128 v4 = *(_OWORD *)(a3 + 32);
  __int128 v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 62) = *(void *)(a3 + 62);
  *(_OWORD *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = v4;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 70) = 0;
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_( uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_( uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0LL;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN4udif6headerEN7di_asif6headerE10raw_header13pstack_header13plugin_headerEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS8_SA_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  __n128 result = *(__n128 *)(a3 + 16);
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = *(void *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor( uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_18A1CD910[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

void *di_log::logger<di_log::log_printer<393ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<393ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CDF48;
  a1[45] = &unk_18A1CE048;
  a1[46] = &unk_18A1CE070;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CDF48;
  a1[45] = &unk_18A1CDFD0;
  a1[46] = &unk_18A1CDFF8;
  return a1;
}

void sub_18809CD38(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CE0E0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809CE04(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CE0E0;
  di_log::logger_buf<di_log::log_printer<393ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<393ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<393ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<393ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<393ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<393ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<393ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809D1B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<393ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 393LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    int v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 393LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

BOOL udif::header::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24)
    || *(void *)(a1 + 32) != *(void *)(a2 + 32)
    || *(void *)(a1 + 40) != *(void *)(a2 + 40)
    || *(void *)(a1 + 48) != *(void *)(a2 + 48)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
  {
    return 0LL;
  }

  uint64_t v4 = 0LL;
  do
  {
    int v5 = *(unsigned __int8 *)(a1 + 64 + v4);
    int v6 = *(unsigned __int8 *)(a2 + 64 + v4);
    BOOL v7 = v5 != v6 || v4++ == 15;
  }

  while (!v7);
  if (v5 != v6) {
    return 0LL;
  }
  BOOL result = udif::details::checksum::operator==((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  if (!result) {
    return result;
  }
  if (*(void *)(a1 + 216) != *(void *)(a2 + 216) || *(void *)(a1 + 224) != *(void *)(a2 + 224)) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  do
  {
    int v10 = *(unsigned __int8 *)(a1 + 232 + v9);
    int v11 = *(unsigned __int8 *)(a2 + 232 + v9);
    if (v10 != v11) {
      break;
    }
    BOOL v7 = v9++ == 63;
  }

  while (!v7);
  if (v10 != v11 || *(void *)(a1 + 296) != *(void *)(a2 + 296) || *(void *)(a1 + 304) != *(void *)(a2 + 304)) {
    return 0LL;
  }
  uint64_t v12 = 0LL;
  do
  {
    int v13 = *(unsigned __int8 *)(a1 + 312 + v12);
    int v14 = *(unsigned __int8 *)(a2 + 312 + v12);
    if (v13 != v14) {
      break;
    }
    BOOL v7 = v12++ == 39;
  }

  while (!v7);
  if (v13 != v14) {
    return 0LL;
  }
  BOOL result = udif::details::checksum::operator==((_DWORD *)(a1 + 352), (_DWORD *)(a2 + 352));
  if (!result) {
    return result;
  }
  return *(_DWORD *)(a1 + 488) == *(_DWORD *)(a2 + 488) && *(void *)(a1 + 492) == *(void *)(a2 + 492);
}

BOOL udif::details::checksum::operator==(_DWORD *a1, _DWORD *a2)
{
  else {
    return 0LL;
  }
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CE300;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809D670(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CE300;
  di_log::logger_buf<di_log::log_printer<1146ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1146ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1146ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1146ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1146ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1146ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1146ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809DA24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1146ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1146LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    int v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1146LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif@<X0>( Backend **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  di_asif::header::header((di_asif::header *)v4, *a1);
  int v10 = 2003069043;
  uint64_t v11 = *(void *)&v4[4];
  int v12 = v5;
  __int128 v13 = v6;
  __int128 v14 = v7;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v8;
  *(void *)&v15[14] = *(void *)&v8[14];
  __int16 v16 = 0;
  uint64_t v17 = v9;
  int v18 = 2;
  int v19 = 8;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a2,  (uint64_t)&v10);
  *(_DWORD *)(a2 + 512) = v19;
  *(_BYTE *)(a2 + 520) = 1;
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v10);
}

void sub_18809DD08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a19);
    uint64_t v20 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(exception_object);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v20);
  }

  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<1153ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1153ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CE388;
  a1[45] = &unk_18A1CE488;
  a1[46] = &unk_18A1CE4B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CE388;
  a1[45] = &unk_18A1CE410;
  a1[46] = &unk_18A1CE438;
  return a1;
}

void sub_18809DDEC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  return a1;
}

BOOL di_asif::header::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0LL;
  }

  uint64_t v2 = 0LL;
  do
  {
    int v3 = *(unsigned __int8 *)(a1 + 32 + v2);
    int v4 = *(unsigned __int8 *)(a2 + 32 + v2);
  }

  while (v3 == v4 && v2++ != 15);
  return v3 == v4
      && *(void *)(a1 + 48) == *(void *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(unsigned __int16 *)(a1 + 68) == *(unsigned __int16 *)(a2 + 68)
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CE520;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809DFB0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CE520;
  di_log::logger_buf<di_log::log_printer<1153ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1153ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1153ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1153ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1153ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1153ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1153ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809E364( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1153ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1153LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1153LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw@<X0>( const Backend **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  raw_header::raw_header((raw_header *)&v5, *a1, a2);
  v6[0] = v5;
  int v7 = 3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( (uint64_t)v8,  (uint64_t)v6);
  int v9 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a3,  (uint64_t)v8);
  *(_DWORD *)(a3 + 512) = v9;
  *(_BYTE *)(a3 + 520) = 1;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v8);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
}

void sub_18809E624(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x210]);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
    __int128 v5 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v5);
  }

  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<1139ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1139ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CE5A8;
  a1[45] = &unk_18A1CE6A8;
  a1[46] = &unk_18A1CE6D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CE5A8;
  a1[45] = &unk_18A1CE630;
  a1[46] = &unk_18A1CE658;
  return a1;
}

void sub_18809E71C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  return a1;
}

void raw_header::raw_header(raw_header *this, const Backend *a2, unint64_t a3)
{
  unint64_t v5 = (*(uint64_t (**)(const Backend *))(*(void *)a2 + 40LL))(a2);
  unint64_t v6 = 512LL;
  if (a3) {
    unint64_t v6 = a3;
  }
  if (v5 % v6)
  {
    exception = (header_exception *)__cxa_allocate_exception(0x40uLL);
    header_exception::header_exception(exception, "raw_header", 0x16u);
  }

  *(void *)this = v6;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v5 / v6;
}

void sub_18809E804(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CE740;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809E880(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CE740;
  di_log::logger_buf<di_log::log_printer<1139ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1139ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1139ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1139ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1139ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1139ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1139ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809EC34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1139ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1139LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1139LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<1162ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1162ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CE7C8;
  a1[45] = &unk_18A1CE8C8;
  a1[46] = &unk_18A1CE8F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CE7C8;
  a1[45] = &unk_18A1CE850;
  a1[46] = &unk_18A1CE878;
  return a1;
}

void sub_18809EEC4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1170ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1170ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CEA28;
  a1[45] = &unk_18A1CEB28;
  a1[46] = &unk_18A1CEB50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CEA28;
  a1[45] = &unk_18A1CEAB0;
  a1[46] = &unk_18A1CEAD8;
  return a1;
}

void sub_18809EFAC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CE960;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809F078(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CE960;
  di_log::logger_buf<di_log::log_printer<1162ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1162ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1162ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1162ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1162ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1162ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1162ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809F42C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1162ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1162LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1162LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

BOOL diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 16) != 0) != (*(_BYTE *)(a2 + 16) != 0)) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    int v4 = *(_DWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(a1);
    return v4 == *(_DWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value(a2);
  }

  else
  {
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(a1);
    uint64_t v7 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error(a2);
    return *(void *)(v6 + 8) == *(void *)(v7 + 8) && *(_DWORD *)v6 == *(_DWORD *)v7;
  }

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value( uint64_t result)
{
  if (!*(_BYTE *)(result + 16))
  {
    uint64_t v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    __int128 v3 = *v1;
    *(void *)exception = off_18A1CE9F8;
    *(_OWORD *)(exception + _Block_object_dispose(va, 8) = v3;
  }

  return result;
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::bad_expected_access<std::error_code>::~bad_expected_access( std::exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CEBC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_18809F7A0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CEBC0;
  di_log::logger_buf<di_log::log_printer<1170ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1170ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1170ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1170ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1170ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1170ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1170ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_18809FB54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1170ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1170LL;
    __int16 v22 = 2082;
    __int128 v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1170LL;
      __int16 v22 = 2082;
      __int128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>( void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  *a1 = off_18A1CD600;
  a1[1] = 0LL;
  if (a2 == a3)
  {
    *(void *)&__int128 v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::__"
                      "wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: No diskimage given",  32LL);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v64);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v51;
  }

  int v60 = *(_DWORD *)a2;
  __int128 v61 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  uint64_t v8 = v61;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v8);
  uint64_t v9 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &lpsrc);
    uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 24LL))(lpsrc);
    if (!v60)
    {
      *(void *)&__int128 v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
      LODWORD(v63) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v64, &v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot",  93LL);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v64);
      __int128 v52 = __cxa_allocate_exception(0x10uLL);
      *__int128 v52 = make_error_code(163LL);
      v52[1] = v53;
    }

    uint64_t v11 = v10;
    __int128 v62 = 0uLL;
    unint64_t v63 = 0LL;
    os_log_type_t v12 = lpsrc;
    char v56 = a4;
    if (v60 == 1)
    {
      lpsrc = 0LL;
      __int128 v64 = v12;
      LODWORD(v65) = 2;
    }

    else
    {
      int v16 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc);
      if (v60 == 3) {
        int v17 = v16;
      }
      else {
        int v17 = 0;
      }
      __int16 v18 = lpsrc;
      if (v17 == 1 && lpsrc != 0LL)
      {
        if (v20) {
          v20[184] = 0;
        }
      }

      int v21 = v17 ^ 1;
      uint64_t v22 = *((void *)&v62 + 1);
      lpsrc = 0LL;
      __int128 v64 = v18;
      LODWORD(v65) = v21;
      if (*((void *)&v62 + 1) < v63)
      {
        **((void **)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v18;
        if (v18)
        {
          __int128 v23 = operator new(0x20uLL);
          uint64_t v24 = v64;
          *__int128 v23 = off_18A1CB9E8;
          v23[1] = 0LL;
          v23[2] = 0LL;
          v23[3] = v24;
        }

        else
        {
          __int128 v23 = 0LL;
        }

        *(void *)(v22 + _Block_object_dispose(va, 8) = v23;
        __int128 v64 = 0LL;
        *(_DWORD *)(v22 + 16) = v65;
        *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v22 + 24;
LABEL_26:
        int v27 = v60;
        BOOL v28 = v60 == 1;
        while (1)
        {
          int v60 = *(_DWORD *)v9;
          diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v61, (uint64_t *)(v9 + 8));
          diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v61);
          diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v61,  (uint64_t)v57);
          if (!v58)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1028ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Can't get image format",  36LL);
            di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v64);
            uint64_t v43 = __cxa_allocate_exception(0x10uLL);
            *uint64_t v43 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v57);
          }

          diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
          int v29 = v64;
          __int128 v64 = 0LL;
          uint64_t v30 = lpsrc;
          lpsrc = v29;
          if (v30)
          {
            (*(void (**)(void *))(*(void *)v30 + 16LL))(v30);
            int v31 = v64;
            __int128 v64 = 0LL;
            if (v31) {
              (*(void (**)(void *))(*(void *)v31 + 16LL))(v31);
            }
            int v29 = lpsrc;
          }

          if (v29
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1035ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Nested stacking is not allowed.",  45LL);
            di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }

          if ((*(uint64_t (**)(void *))(*(void *)v29 + 24LL))(v29) != v11)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1040ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Multiple images given but block size differ. ",  59LL);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)" block_size: ",  13LL);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" / ", 3LL);
            (*(void (**)(void *))(*(void *)lpsrc + 24LL))(lpsrc);
            std::ostream::operator<<();
            di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v64);
LABEL_72:
            uint64_t v44 = 163LL;
LABEL_73:
            int v45 = __cxa_allocate_exception(0x10uLL);
            *int v45 = make_error_code(v44);
            v45[1] = v46;
          }

          v9 += 16LL;
          if (v9 == a3) {
            break;
          }
          if (v57[0] != 8)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1056ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ",  48LL);
            __int128 v47 = diskimage_uio::operator<<(v68, v57[0]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8LL);
            di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }

          if (v60 != 1)
          {
            if (v60 != 2)
            {
              *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
              *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
              int v71 = 16;
              di_log::logger<di_log::log_printer<1063ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ",  109LL);
              diskimage_uio::operator<<(v68, v60);
              di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v64);
LABEL_79:
              uint64_t v48 = __cxa_allocate_exception(0x10uLL);
              *uint64_t v48 = make_error_code(163LL);
              v48[1] = v49;
            }

            if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc))
            {
              *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>]";
              *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
              int v71 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Snapshots should be read only",  43LL);
              di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v64);
              goto LABEL_79;
            }

LABEL_67:
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v61);
  return a1;
}

  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v61);
  return a1;
}

  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v61);
  return a1;
}

void sub_1880A07D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A07E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A07F4()
{
}

void sub_1880A0848()
{
}

void sub_1880A08F4()
{
}

void sub_1880A0914(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1880A0A94LL);
}

void sub_1880A0924( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A0934( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A0944( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A0954( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A096C()
{
}

void sub_1880A0980( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A099C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A09B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A09C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A09D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880A0A18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v22 = a20;
  a20 = 0LL;
  if (v22) {
    (*((void (**)(void **))*v22 + 2))(v22);
  }
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16LL))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + _Block_object_dispose(va, 8) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<978ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<978ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CEC48;
  a1[45] = &unk_18A1CED48;
  a1[46] = &unk_18A1CED70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CEC48;
  a1[45] = &unk_18A1CECD0;
  a1[46] = &unk_18A1CECF8;
  return a1;
}

void sub_1880A0B20(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required( const std::error_category *this)
{
  if (!v29[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = std::make_error_code[abi:ne180100](0x16u);
    exception[1] = v15;
  }

  uint64_t v3 = this[3].__vftable;
  uint64_t v2 = (uint64_t *)&this[3];
  if (v3)
  {
    get_sink_backend((uint64_t)v2, &lpsrc);
    if (lpsrc
    {
      int v27 = v4;
      BOOL v28 = v24;
      p_lpsrc = &lpsrc;
    }

    else
    {
      p_lpsrc = (void **)&v27;
    }

    *p_lpsrc = 0LL;
    p_lpsrc[1] = 0LL;
    char v6 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    uint64_t v9 = v27;
    if (v27 && ((*v27)[2](v27) & 1) == 0)
    {
      int v10 = (**v9)(v9);
      if (v10)
      {
        int v18 = v10;
        *(void *)&__int128 v21 = "diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required()";
        *((void *)&v21 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 76LL;
        int v22 = 16;
        di_log::logger<di_log::log_printer<957ul>>::logger(&lpsrc, &v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v25,  (uint64_t)"Diskimageuio: Couldn't lock backend ",  36LL);
        operator<<((uint64_t)&v25, *v2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)" err: ", 6LL);
        int v19 = v18;
        __int16 v20 = std::generic_category();
        std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>( (uint64_t)&lpsrc,  (uint64_t)&v19);
        di_log::logger<di_log::log_printer<957ul>>::~logger((uint64_t)&lpsrc);
        int v16 = __cxa_allocate_exception(0x10uLL);
        int v17 = std::generic_category();
        *(_DWORD *)int v16 = v18;
        v16[1] = v17;
      }

      *(void *)&__int128 v21 = "diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required()";
      *((void *)&v21 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 76LL;
      int v22 = 2;
      di_log::logger<di_log::log_printer<960ul>>::logger(&lpsrc, &v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v25,  (uint64_t)"Diskimageuio: locked backend ",  29LL);
      operator<<((uint64_t)&v25, *v2);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf((uint64_t)&lpsrc);
      MEMORY[0x1895BC2CC](&v26);
    }

    uint64_t v11 = v28;
    if (v28)
    {
      os_log_type_t v12 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

void sub_1880A0E08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *di_log::logger<di_log::log_printer<989ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<989ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CF4C8;
  a1[45] = &unk_18A1CF5C8;
  a1[46] = &unk_18A1CF5F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CF4C8;
  a1[45] = &unk_18A1CF550;
  a1[46] = &unk_18A1CF578;
  return a1;
}

void sub_1880A0ED0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1002ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1002ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CF6E8;
  a1[45] = &unk_18A1CF7E8;
  a1[46] = &unk_18A1CF810;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CF6E8;
  a1[45] = &unk_18A1CF770;
  a1[46] = &unk_18A1CF798;
  return a1;
}

void sub_1880A0FB8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1028ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1028ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CF908;
  a1[45] = &unk_18A1CFA08;
  a1[46] = &unk_18A1CFA30;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CF908;
  a1[45] = &unk_18A1CF990;
  a1[46] = &unk_18A1CF9B8;
  return a1;
}

void sub_1880A10A0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1035ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1035ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CFB28;
  a1[45] = &unk_18A1CFC28;
  a1[46] = &unk_18A1CFC50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CFB28;
  a1[45] = &unk_18A1CFBB0;
  a1[46] = &unk_18A1CFBD8;
  return a1;
}

void sub_1880A1188(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1040ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1040ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CFD48;
  a1[45] = &unk_18A1CFE48;
  a1[46] = &unk_18A1CFE70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CFD48;
  a1[45] = &unk_18A1CFDD0;
  a1[46] = &unk_18A1CFDF8;
  return a1;
}

void sub_1880A1270(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1048ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1048ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CFF68;
  a1[45] = &unk_18A1D0068;
  a1[46] = &unk_18A1D0090;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CFF68;
  a1[45] = &unk_18A1CFFF0;
  a1[46] = &unk_18A1D0018;
  return a1;
}

void sub_1880A1358(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1056ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1056ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D0188;
  a1[45] = &unk_18A1D0288;
  a1[46] = &unk_18A1D02B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D0188;
  a1[45] = &unk_18A1D0210;
  a1[46] = &unk_18A1D0238;
  return a1;
}

void sub_1880A1440(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1063ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1063ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D03A8;
  a1[45] = &unk_18A1D04A8;
  a1[46] = &unk_18A1D04D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D03A8;
  a1[45] = &unk_18A1D0430;
  a1[46] = &unk_18A1D0458;
  return a1;
}

void sub_1880A1528(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1068ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1068ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D05C8;
  a1[45] = &unk_18A1D06C8;
  a1[46] = &unk_18A1D06F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D05C8;
  a1[45] = &unk_18A1D0650;
  a1[46] = &unk_18A1D0678;
  return a1;
}

void sub_1880A1610(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1074ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1074ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D07E8;
  a1[45] = &unk_18A1D08E8;
  a1[46] = &unk_18A1D0910;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D07E8;
  a1[45] = &unk_18A1D0870;
  a1[46] = &unk_18A1D0898;
  return a1;
}

void sub_1880A16F8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1079ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1079ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D0A08;
  a1[45] = &unk_18A1D0B08;
  a1[46] = &unk_18A1D0B30;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D0A08;
  a1[45] = &unk_18A1D0A90;
  a1[46] = &unk_18A1D0AB8;
  return a1;
}

void sub_1880A17E0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1089ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1089ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D0C28;
  a1[45] = &unk_18A1D0D28;
  a1[46] = &unk_18A1D0D50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D0C28;
  a1[45] = &unk_18A1D0CB0;
  a1[46] = &unk_18A1D0CD8;
  return a1;
}

void sub_1880A18C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1101ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1101ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D0E48;
  a1[45] = &unk_18A1D0F48;
  a1[46] = &unk_18A1D0F70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D0E48;
  a1[45] = &unk_18A1D0ED0;
  a1[46] = &unk_18A1D0EF8;
  return a1;
}

void sub_1880A19B0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CEDE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A1A7C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CEDE0;
  di_log::logger_buf<di_log::log_printer<978ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<978ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<978ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<978ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<978ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<978ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<978ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A1E30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<978ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 978LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 978LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::verify_backend@<X0>( const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  if (LODWORD(this[70].__vftable) == 12 || this[3].__vftable)
  {
    *(_BYTE *)a2 = 0;
    char v3 = 1;
  }

  else
  {
    *(void *)&__int128 v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 81LL;
    int v5 = 16;
    di_log::logger<di_log::log_printer<617ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Diskimageuio: backend doesn't exist",  35LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x1895BC2CC](&v8);
    this = std::generic_category();
    char v3 = 0;
    *(void *)a2 = 6LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = this;
  }

  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

void sub_1880A20FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>( uint64_t a1, uint64_t a2)
{
  char v3 = (void *)(a1 + 360);
  __int128 v4 = (const char *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16LL))(*(void *)(a2 + 8));
  size_t v5 = strlen(v4);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  char v8 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1LL);
  std::ostream::operator<<();
  return a1;
}

void *di_log::logger<di_log::log_printer<957ul>>::logger(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<957ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CF088;
  a1[45] = &unk_18A1CF188;
  a1[46] = &unk_18A1CF1B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CF088;
  a1[45] = &unk_18A1CF110;
  a1[46] = &unk_18A1CF138;
  return a1;
}

void sub_1880A2210(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<960ul>>::logger(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<960ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CF2A8;
  a1[45] = &unk_18A1CF3A8;
  a1[46] = &unk_18A1CF3D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CF2A8;
  a1[45] = &unk_18A1CF330;
  a1[46] = &unk_18A1CF358;
  return a1;
}

void sub_1880A22F8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<617ul>>::logger(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<617ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1CEE68;
  a1[45] = &unk_18A1CEF68;
  a1[46] = &unk_18A1CEF90;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1CEE68;
  a1[45] = &unk_18A1CEEF0;
  a1[46] = &unk_18A1CEF18;
  return a1;
}

void sub_1880A23E0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CF000;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A24AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CF000;
  di_log::logger_buf<di_log::log_printer<617ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<617ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<617ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<617ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<617ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<617ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<617ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A2860( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<617ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 617LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 617LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CF220;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A2AD4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CF220;
  di_log::logger_buf<di_log::log_printer<957ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<957ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<957ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<957ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<957ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<957ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<957ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A2E88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<957ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 957LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 957LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CF440;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A30FC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CF440;
  di_log::logger_buf<di_log::log_printer<960ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<960ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<960ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<960ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<960ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<960ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<960ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A34B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<960ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 960LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 960LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CF660;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A3724(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CF660;
  di_log::logger_buf<di_log::log_printer<989ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<989ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<989ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<989ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<989ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<989ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<989ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A3AD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<989ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 989LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 989LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CF880;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A3D4C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CF880;
  di_log::logger_buf<di_log::log_printer<1002ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1002ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1002ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1002ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1002ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1002ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1002ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A4100( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1002ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1002LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1002LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__emplace_back_slow_path<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( v7,  v9);
  }
  else {
    int v10 = 0LL;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  int v16 = &v10[24 * v9];
  std::__tuple_impl<std::__tuple_indices<0ul,1ul>,std::shared_ptr<DiskImage>,DiskImageStackable::role>::__tuple_impl[abi:ne180100]<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>,void>( (uint64_t)v14,  a2);
  uint64_t v15 = v14 + 24;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1880A43FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul>,std::shared_ptr<DiskImage>,DiskImageStackable::role>::__tuple_impl[abi:ne180100]<std::tuple<std::unique_ptr<DiskImage>,DiskImageStackable::role>,void>( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if (v4)
  {
    unint64_t v5 = operator new(0x20uLL);
    uint64_t v6 = *a2;
    *unint64_t v5 = off_18A1CB9E8;
    v5[1] = 0LL;
    __int128 v5[2] = 0LL;
    v5[3] = v6;
  }

  else
  {
    unint64_t v5 = 0LL;
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  *a2 = 0LL;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CFAA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A44DC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CFAA0;
  di_log::logger_buf<di_log::log_printer<1028ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1028ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1028ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1028ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1028ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1028ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1028ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A4890( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1028ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1028LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1028LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CFCC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A4B04(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CFCC0;
  di_log::logger_buf<di_log::log_printer<1035ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1035ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1035ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1035ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1035ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1035ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1035ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A4EB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1035ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1035LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1035LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CFEE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A512C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1CFEE0;
  di_log::logger_buf<di_log::log_printer<1040ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1040ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1040ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1040ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1040ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1040ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1040ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A54E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1040ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1040LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1040LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0100;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A5754(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0100;
  di_log::logger_buf<di_log::log_printer<1048ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1048ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1048ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1048ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1048ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1048ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1048ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A5B08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1048ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1048LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1048LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0320;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A5D7C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0320;
  di_log::logger_buf<di_log::log_printer<1056ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1056ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1056ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1056ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1056ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1056ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1056ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A6130( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1056ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1056LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1056LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0540;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A63A4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0540;
  di_log::logger_buf<di_log::log_printer<1063ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1063ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1063ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1063ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1063ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1063ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1063ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A6758( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1063ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1063LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1063LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0760;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A69CC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0760;
  di_log::logger_buf<di_log::log_printer<1068ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1068ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1068ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1068ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1068ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1068ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1068ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A6D80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1068ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1068LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1068LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0980;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A6FF4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0980;
  di_log::logger_buf<di_log::log_printer<1074ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1074ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1074ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1074ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1074ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1074ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1074ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A73A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1074ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1074LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1074LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0BA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A761C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0BA0;
  di_log::logger_buf<di_log::log_printer<1079ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1079ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1079ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1079ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1079ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1079ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1079ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A79D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1079ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1079LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1079LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0DC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A7C44(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0DC0;
  di_log::logger_buf<di_log::log_printer<1089ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1089ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1089ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1089ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1089ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1089ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1089ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A7FF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1089ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1089LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1089LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D0FE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A826C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D0FE0;
  di_log::logger_buf<di_log::log_printer<1101ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1101ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1101ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1101ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1101ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1101ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1101ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A8620( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1101ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1101LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1101LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  BOOL result = __error();
  *BOOL result = v5;
  return result;
}

diskimage_uio::details::extents_iterator_impl *diskimage_uio::details::extents_iterator_impl::extents_iterator_impl( diskimage_uio::details::extents_iterator_impl *this, const diskimage_uio::details::extents_iterator_impl *a2)
{
  uint64_t v3 = *(void **)a2;
  int v4 = operator new(0x30uLL);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t((uint64_t)v4, v3);
  *(void *)this = v4;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((_DWORD *)this + 6) = 0;
  diskimage_uio::details::extents_iterator_impl::make_val((uint64_t)this, (uint64_t)&v6);
  *(_OWORD *)((char *)this + _Block_object_dispose(va, 8) = v6;
  *((_DWORD *)this + 6) = v7;
  return this;
}

void sub_1880A88A4(_Unwind_Exception *a1)
{
}

uint64_t diskimage_uio::details::extents_iterator_impl::make_val@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 8LL);
  int v3 = *(_DWORD *)(*(void *)this + 32LL);
  uint64_t v4 = (*(_BYTE *)(*(void *)this + 24LL) & 1) + *(void *)(*(void *)this + 16LL);
  if ((*(_BYTE *)(*(void *)this + 24LL) & 2) == 0) {
    ++v2;
  }
  *(void *)a2 = v2;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  return this;
}

void std::unique_ptr<DiskImage::const_extents_iterator_t>::reset[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
    }
    operator delete(v2);
  }

uint64_t diskimage_uio::details::extents_db_impl::extents_db_impl( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(*a2 + 8);
  uint64_t v11 = operator new(0x58uLL);
  void *v11 = v10;
  v11[1] = a3;
  v11[2] = a4;
  *((_BYTE *)v11 + 24) = 2;
  v11[4] = 0LL;
  v11[5] = v9;
  *((_DWORD *)v11 + 12) = a5 & 0xF;
  v11[7] = off_18A1D1060;
  v11[10] = v11 + 7;
  *(void *)a1 = v11;
  return a1;
}

void sub_1880A89DC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE7__cloneEv()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_18A1D1060;
  return result;
}

void _ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE7__cloneEPNS0_6__baseISE_EE( uint64_t a1, void *a2)
{
  *a2 = off_18A1D1060;
}

void *_ZNSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEEclES5_Oy@<X0>( void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL result = (*(void *(**)(uint64_t *__return_ptr, void, void *, void, void *, void))(*(void *)*a1 + 128LL))( &v5,  *a1,  a1,  a1[5],  a1 + 1,  *a2);
  *a3 = v5;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE6targetERKSt9type_info( uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *_ZNKSt3__110__function6__funcIN9DiskImage9extents_t17interface_factoryMUlRKS3_yE_ENS_9allocatorIS6_EEFNS_10unique_ptrINS2_31base_extents_iterator_interfaceENS_14default_deleteISA_EEEES5_yEE11target_typeEv()
{
  return &_ZTIN9DiskImage9extents_t17interface_factoryMUlRKS0_yE_E;
}

void std::default_delete<DiskImage::extents_t>::operator()[abi:ne180100](int a1, void *__p)
{
  if (!__p) {
    return;
  }
  uint64_t v3 = (void *)__p[10];
  if (v3 == __p + 7)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = __p + 7;
    goto LABEL_7;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  uint64_t v5 = __p[4];
  __p[4] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40LL))(v5);
  }
  operator delete(__p);
}

uint64_t DiskImage::extents_t::begin@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 10);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, DiskImage::extents_t *, uint64_t *))(*(void *)v4 + 48LL))( &v6,  v4,  this,  &v7);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a2, &v6, *((_DWORD *)this + 12));
  uint64_t result = v6;
  uint64_t v6 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_1880A8BA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DiskImage::const_extents_iterator_t::const_extents_iterator_t(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v4;
  uint64_t v5 = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  *(void *)(a1 + _Block_object_dispose(va, 8) = boost::icl::identity_element<unsigned long long>::value(void)::_value;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v6 - 32) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  DiskImage::const_extents_iterator_t::make_val((DiskImage::const_extents_iterator_t *)a1, (uint64_t)v8);
  _OWORD *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_1880A8C3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::details::extents_iterator_impl::extents_iterator_impl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  diskimage_uio::details::extents_iterator_impl::make_val(a1, (uint64_t)&v6);
  *uint64_t v4 = v6;
  *(_DWORD *)(a1 + 24) = v7;
  return a1;
}

void sub_1880A8CBC(_Unwind_Exception *a1)
{
}

uint64_t DiskImage::extents_t::end@<X0>(DiskImage::extents_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 10);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, DiskImage::extents_t *, uint64_t *))(*(void *)v4 + 48LL))( &v6,  v4,  this,  &v7);
  DiskImage::const_extents_iterator_t::const_extents_iterator_t(a2, &v6, *((_DWORD *)this + 12));
  uint64_t result = v6;
  uint64_t v6 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_1880A8D50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<573ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<573ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D10F8;
  a1[45] = &unk_18A1D11F8;
  a1[46] = &unk_18A1D1220;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D10F8;
  a1[45] = &unk_18A1D1180;
  a1[46] = &unk_18A1D11A8;
  return a1;
}

void sub_1880A8DF8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  return a1;
}

_OWORD *diskimage_uio::details::diskimage_open_params_impl::open_and_resolve@<X0>( uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1 + 24;
  if (!*(void *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    std::shared_ptr<Backend>::reset[abi:ne180100]((void *)(a1 + 24));
    __int128 v41 = 0u;
    memset(v40, 0, sizeof(v40));
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 576, (__int128 *)v40);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 592, (__int128 *)&v40[16]);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 608, &v41);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1))
    {
      uint64_t v10 = (unint64_t *)(*((void *)&v41 + 1) + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    os_log_type_t v12 = *(std::__shared_weak_count **)&v40[24];
    if (*(void *)&v40[24])
    {
      uint64_t v13 = (unint64_t *)(*(void *)&v40[24] + 8LL);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    uint64_t v15 = *(std::__shared_weak_count **)&v40[8];
    if (*(void *)&v40[8])
    {
      int v16 = (unint64_t *)(*(void *)&v40[8] + 8LL);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external( (std::string *)v40,  *(const std::string::value_type **)a1,  *(void *)(a1 + 8));
    }

    else
    {
      *(_OWORD *)int v40 = *(_OWORD *)a1;
      *(void *)&v40[16] = *(void *)(a1 + 16);
    }

    v38[0] = 2 * ((a2 - 1) < 2);
    std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,std::string,int,void>( (uint64_t)v40,  v38,  &v34);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](v8, &v34);
    __int16 v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1))
    {
      uint64_t v19 = (unint64_t *)(*((void *)&v34 + 1) + 8LL);
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    if ((v40[23] & 0x80000000) != 0) {
      operator delete(*(void **)v40);
    }
    *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = a2;
    uint64_t v21 = *(Backend **)(a1 + 24);
    __int16 v22 = (crypto::header *)operator new(0x4CuLL);
    crypto::header::header(v22, v21);
    uint64_t v23 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v22;
    if (v23) {
      operator delete(v23);
    }
  }

  diskimage_uio::details::diskimage_open_params_impl::is_locked((const std::error_category *)a1, (BOOL *)v38);
  if (!v39)
  {
    *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v34 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
    int v35 = 16;
    di_log::logger<di_log::log_printer<534ul>>::logger(v40, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v42,  (uint64_t)"Diskimageuio: Couldn't get locked status ",  41LL);
    uint64_t v26 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v38);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v40, v26);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf((uint64_t)v40);
    MEMORY[0x1895BC2CC](v43);
    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v38);
    *(_OWORD *)a4 = *result;
    goto LABEL_34;
  }

  if (LOBYTE(v38[0]))
  {
    *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v34 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
    int v35 = 16;
    di_log::logger<di_log::log_printer<565ul>>::logger(v40, &v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v42,  (uint64_t)"Diskimageuio: decryption key missing",  36LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf((uint64_t)v40);
    MEMORY[0x1895BC2CC](v43);
    uint64_t result = (_OWORD *)make_error_code(162LL);
    *(void *)a4 = result;
    *(void *)(a4 + _Block_object_dispose(va, 8) = v25;
LABEL_34:
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }

  *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((void *)&v34 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
  int v35 = 2;
  di_log::logger<di_log::log_printer<539ul>>::logger(v40, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v42,  (uint64_t)"Diskimageuio: backend isn't locked",  34LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf((uint64_t)v40);
  MEMORY[0x1895BC2CC](v43);
  diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header((const Backend **)a1, 0LL, (uint64_t)v40);
  if (v44)
  {
    uint64_t v27 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value((uint64_t)v40);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>>( a1 + 48,  v27);
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(v27 + 512);
    *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v32 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
    int v33 = 2;
    di_log::logger<di_log::log_printer<561ul>>::logger(&v34, &v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)"Diskimageuio: resolved disk image format ",  41LL);
    diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf((uint64_t)&v34);
    uint64_t result = (_OWORD *)MEMORY[0x1895BC2CC](v37);
    *(_BYTE *)a4 = 0;
    char v28 = 1;
  }

  else
  {
    int v29 = *(_DWORD *)(a1 + 564);
    if (v29)
    {
      if (*(_DWORD *)(a1 + 568) != v29)
      {
        uint64_t v30 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v40);
        int v31 = std::generic_category();
        *(void *)&__int128 v34 = 35LL;
        *((void *)&v34 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v31;
        if ((*(unsigned int (**)(void, void, __int128 *))(**((void **)v30 + 1) + 32LL))( *((void *)v30 + 1),  *v30,  &v34)
          || (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v34 + 1) + 40LL))( *((void *)&v34 + 1),  v30,  v34))
        {
          *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v32 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
          int v33 = 2;
          di_log::logger<di_log::log_printer<545ul>>::logger(&v34, &v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)"Diskimageuio: required mode ",  28LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)" is different than current mode ",  32LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<545ul>>::~logger_buf((uint64_t)&v34);
          MEMORY[0x1895BC2CC](v37);
          if (a3)
          {
            *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((void *)&v32 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
            int v33 = 2;
            di_log::logger<di_log::log_printer<551ul>>::logger(&v34, &v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)"Diskimageuio: reopen backend to required mode ",  46LL);
            diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
            di_log::logger<di_log::log_printer<551ul>>::~logger((uint64_t)&v34);
            uint64_t result = (_OWORD *)diskimage_uio::details::diskimage_open_params_impl::open_and_resolve( a1,  *(unsigned int *)(a1 + 564),  0LL);
            goto LABEL_47;
          }

          *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v32 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 83LL;
          int v33 = 16;
          di_log::logger<di_log::log_printer<554ul>>::logger(&v34, &v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)"Diskimageuio: required mode ",  28LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)" is different than current mode ",  32LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          di_log::logger<di_log::log_printer<554ul>>::~logger((uint64_t)&v34);
        }
      }
    }

    uint64_t result = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v40);
    char v28 = 0;
    *(_OWORD *)a4 = *result;
  }

  *(_BYTE *)(a4 + 16) = v28;
LABEL_47:
  if (v44) {
    return (_OWORD *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v40);
  }
  return result;
}

void sub_1880A94B0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x448])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D1290;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880A9688(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D1290;
  di_log::logger_buf<di_log::log_printer<573ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<573ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<573ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<573ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<573ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<573ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<573ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880A9A3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<573ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 573LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 573LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void std::shared_ptr<Backend>::reset[abi:ne180100](void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::~crypto_ctx_t( diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t *this)
{
}

void *di_log::logger<di_log::log_printer<534ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<534ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1318;
  a1[45] = &unk_18A1D1418;
  a1[46] = &unk_18A1D1440;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1318;
  a1[45] = &unk_18A1D13A0;
  a1[46] = &unk_18A1D13C8;
  return a1;
}

void sub_1880A9D58(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<539ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<539ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1538;
  a1[45] = &unk_18A1D1638;
  a1[46] = &unk_18A1D1660;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1538;
  a1[45] = &unk_18A1D15C0;
  a1[46] = &unk_18A1D15E8;
  return a1;
}

void sub_1880A9E40(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  return a1;
}

double diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header@<D0>( const Backend **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr( 0,  this + 3,  *((_DWORD *)this + 141) == 0,  (std::string *)this,  a2,  (uint64_t)v23);
  if (v25)
  {
    uint64_t v5 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value((uint64_t)v23);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( (uint64_t)v19,  v5);
    unsigned int v22 = *(_DWORD *)(v5 + 512);
    BOOL v6 = v22 > 0xB || ((1 << v22) & 0x982) == 0;
    if (v6 || *((_DWORD *)this + 142) || !*((_DWORD *)this + 141))
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( (uint64_t)&v14,  (uint64_t)v19);
      unsigned int v18 = v22;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a3,  (uint64_t)&v14);
      *(_DWORD *)(a3 + 512) = v18;
      *(_BYTE *)(a3 + 520) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v14);
    }

    else
    {
      *(void *)&__int128 v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((void *)&v12 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 107LL;
      int v13 = 2;
      di_log::logger<di_log::log_printer<503ul>>::logger(&v14, &v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v16,  (uint64_t)"Diskimageuio: Required read-write disk image (",  46LL);
      uint64_t v10 = diskimage_uio::operator<<(&v16, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf((uint64_t)&v14);
      MEMORY[0x1895BC2CC](&v17);
      unint64_t v11 = std::generic_category();
      *(void *)a3 = 35LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = v11;
      *(_BYTE *)(a3 + 520) = 0;
    }

    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
  }

  else
  {
    *(void *)&__int128 v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((void *)&v14 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 107LL;
    int v15 = 16;
    di_log::logger<di_log::log_printer<495ul>>::logger(v19, &v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v20,  (uint64_t)"Diskimageuio: Couldn't get diskimage: ",  38LL);
    uint64_t v8 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error((uint64_t)v23);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v19, v8);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x1895BC2CC](&v21);
    *(_BYTE *)a3 = 0;
    int v9 = v25;
    *(_BYTE *)(a3 + 520) = v25;
    if (!v9)
    {
      double result = v23[0];
      *(_OWORD *)a3 = *(_OWORD *)v23;
      return result;
    }

    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a3,  (uint64_t)v23);
    *(_DWORD *)(a3 + 512) = v24;
  }

  if (v25) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v23);
  }
  return result;
}

void sub_1880AA10C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x630])) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100](unsigned int *a1, unsigned int *a2)
{
  if (((*(uint64_t (**)(void, void, unsigned int *))(**((void **)a1 + 1) + 32LL))( *((void *)a1 + 1),  *a1,  a2) & 1) != 0) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(void, unsigned int *, void))(**((void **)a2 + 1) + 40LL))( *((void *)a2 + 1),  a1,  *a2);
  }
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::error( uint64_t result)
{
  if (*(_BYTE *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = off_18A1C9E28;
  }

  return result;
}

void *di_log::logger<di_log::log_printer<551ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<551ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1DB8;
  a1[45] = &unk_18A1D1EB8;
  a1[46] = &unk_18A1D1EE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1DB8;
  a1[45] = &unk_18A1D1E40;
  a1[46] = &unk_18A1D1E68;
  return a1;
}

void sub_1880AA2A0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<554ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<554ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1FD8;
  a1[45] = &unk_18A1D20D8;
  a1[46] = &unk_18A1D2100;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1FD8;
  a1[45] = &unk_18A1D2060;
  a1[46] = &unk_18A1D2088;
  return a1;
}

void sub_1880AA388(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value( uint64_t result)
{
  if (!*(_BYTE *)(result + 520))
  {
    uint64_t v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    __int128 v3 = *v1;
    *(void *)exception = off_18A1CE9F8;
    *(_OWORD *)(exception + _Block_object_dispose(va, 8) = v3;
  }

  return result;
}

void *di_log::logger<di_log::log_printer<561ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<561ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D21F8;
  a1[45] = &unk_18A1D22F8;
  a1[46] = &unk_18A1D2320;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D21F8;
  a1[45] = &unk_18A1D2280;
  a1[46] = &unk_18A1D22A8;
  return a1;
}

void sub_1880AA4C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<565ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<565ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D2418;
  a1[45] = &unk_18A1D2518;
  a1[46] = &unk_18A1D2540;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D2418;
  a1[45] = &unk_18A1D24A0;
  a1[46] = &unk_18A1D24C8;
  return a1;
}

void sub_1880AA5AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  return a1;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,std::string,int,void>( uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<std::string,int,std::allocator<FileLocal>,0>( v6,  a1,  a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a3,  v6 + 4,  (uint64_t)(v6 + 3));
}

void sub_1880AA664(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<std::string,int,std::allocator<FileLocal>,0>( void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC00;
  int v4 = *a3;
  int v5 = FileDescriptorWrapper::open_file(a2, *a3);
  FileLocal::FileLocal((FileLocal *)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_1880AA6D0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D14B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AA74C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D14B0;
  di_log::logger_buf<di_log::log_printer<534ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<534ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<534ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<534ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<534ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<534ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<534ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AAB00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<534ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 534LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 534LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D16D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AAD74(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D16D0;
  di_log::logger_buf<di_log::log_printer<539ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<539ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<539ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<539ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<539ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<539ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<539ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AB128( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<539ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 539LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        __int128 v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 539LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr( int a1@<W0>, const Backend **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  switch(a1)
  {
    case 0:
      uint64_t v12 = 1LL;
      break;
    case 1:
LABEL_17:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_raw(a2, a5, a6);
      return;
    case 2:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_udif (a2, a6);
      return;
    case 7:
    case 9:
    case 12:
      int v19 = 0;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( (uint64_t)v20,  (uint64_t)&v18);
      int v23 = 0;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a6,  (uint64_t)v20);
      *(_DWORD *)(a6 + 512) = v23;
      *(_BYTE *)(a6 + 520) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v18);
      return;
    case 8:
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr_asif ((Backend **)a2, a6);
      return;
    case 11:
      else {
        std::string v18 = *a4;
      }
      pstack_header::pstack_header(&v17, (const void **)a2, (char *)&v18, a3);
      uint64_t v16 = v17;
      int v17 = 0LL;
      v20[0] = v16;
      v22[34] = 4;
      int v23 = 11;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a6,  (uint64_t)v20);
      *(_DWORD *)(a6 + 512) = v23;
      *(_BYTE *)(a6 + 520) = 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
      std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100](&v17, 0LL);
      return;
    default:
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      v18.__r_.__value_.__l.__size_ = 132LL;
      LODWORD(v18.__r_.__value_.__r.__words[2]) = 16;
      di_log::logger<di_log::log_printer<485ul>>::logger(v20, (__int128 *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v21,  (uint64_t)"Diskimageuio: Unsupported image format",  38LL);
      diskimage_uio::operator<<(&v21, a1);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v20);
      MEMORY[0x1895BC2CC](v22);
      *(void *)a6 = make_error_code(161LL);
      *(void *)(a6 + _Block_object_dispose(va, 8) = v15;
      *(_BYTE *)(a6 + 520) = 0;
      return;
  }

  while (1)
  {
    int v13 = 2;
    if ((v12 - 2) >= 5)
    {
      if ((_DWORD)v12 == 1) {
        goto LABEL_16;
      }
      if ((_DWORD)v12 == 10) {
        int v13 = 2;
      }
      else {
        int v13 = v12;
      }
    }

    if ((_DWORD)v12 == v13)
    {
      diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(v12, a2, a3, a4, a5);
      if (!*(_BYTE *)(a6 + 520)) {
        return;
      }
      int v14 = *(_DWORD *)(diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::pair<std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,DIImageFormat>,std::error_code>::value(a6)
                      + 512);
      if (v14 || !*(_BYTE *)(a6 + 520))
      {
        if (v14) {
          return;
        }
      }

      else
      {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(a6);
      }
    }

LABEL_16:
    uint64_t v12 = (v12 + 1);
    if ((_DWORD)v12 == 13) {
      goto LABEL_17;
    }
  }

    if ((s3Perform(a2, v33, (uint64_t)v77, 0LL, &v75, (uint64_t)&v72, a4) & 0x80000000) != 0)
    {
      pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  212,  125,  0,  "request: %s",  v35,  v36,  (char)v33);
      goto LABEL_43;
    }

    free(v29);
    uint64_t v37 = strlen(v28);
    if (v37)
    {
      __int128 v38 = v37;
      int v29 = 0LL;
      char v39 = 0LL;
      do
      {
        if (v38 <= v39 + 1) {
          int v40 = v39 + 1;
        }
        else {
          int v40 = v38;
        }
        __int128 v41 = v39;
        while (v28[v41] != 10)
        {
          if (v40 == ++v41)
          {
            __int128 v41 = v40;
            break;
          }
        }

        v28[v41] = 0;
        if (v41 - v39 >= 5)
        {
          uint64_t v42 = &v28[v39];
          if (!strncmp(&v28[v39], v30, 5uLL))
          {
            uint64_t v43 = v30;
            char v44 = strchr(v42, 60);
            uint64_t v45 = strrchr(v42, 62);
            if (!v44 || (uint64_t v48 = v45) == 0LL || v45 <= v44)
            {
              pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  231,  125,  0,  "invalid link header (1): %s",  v46,  v47,  (char)v42);
              goto LABEL_43;
            }

            if (!strstr(v45, "rel=next"))
            {
              pc_log_error( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  233,  125,  0,  "invalid link header (2): %s",  v49,  v50,  (char)v42);
              goto LABEL_43;
            }

            *uint64_t v48 = 0;
            uint64_t v51 = v44 + 1;
            __int128 v52 = strlen(v51);
            uint64_t v53 = v52 + 1;
            if (v52 + 1 >= 0x2000000001LL)
            {
              *__error() = 12;
LABEL_52:
              unint64_t v63 = 236;
              __int128 v62 = 0;
              goto LABEL_53;
            }

            __int128 v54 = (char *)malloc(v52 + 1);
            if (!v54) {
              goto LABEL_52;
            }
            int v29 = v54;
            memcpy(v54, v51, v53);
            uint64_t v30 = v43;
          }
        }

        char v39 = v41 + 1;
      }

      while (v41 + 1 < v38);
      a3 = v70;
      a4 = v71;
      if (v29) {
        continue;
      }
    }

    else
    {
      int v29 = 0LL;
    }

    break;
  }

  __int128 v59 = 0LL;
LABEL_44:
  free(v29);
  free(v28);
  AAByteStreamClose((AAByteStream)v22);
  AAS3ContextDestroy(v78);
  return v59;
}

void sub_1880AB670(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unsigned __int8 v2 = (diskimage_uio::details::diskimage_open_params_impl *)__cxa_begin_catch(a1);
    diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions(v2);
  }

  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<495ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<495ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1978;
  a1[45] = &unk_18A1D1A78;
  a1[46] = &unk_18A1D1AA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1978;
  a1[45] = &unk_18A1D1A00;
  a1[46] = &unk_18A1D1A28;
  return a1;
}

void sub_1880AB7C0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<503ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<503ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1B98;
  a1[45] = &unk_18A1D1C98;
  a1[46] = &unk_18A1D1CC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1B98;
  a1[45] = &unk_18A1D1C20;
  a1[46] = &unk_18A1D1C48;
  return a1;
}

void sub_1880AB8A8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<485ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<485ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D1758;
  a1[45] = &unk_18A1D1858;
  a1[46] = &unk_18A1D1880;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D1758;
  a1[45] = &unk_18A1D17E0;
  a1[46] = &unk_18A1D1808;
  return a1;
}

void sub_1880AB990(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D18F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880ABA5C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D18F0;
  di_log::logger_buf<di_log::log_printer<485ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<485ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<485ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<485ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<485ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<485ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<485ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880ABE10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<485ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 485LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 485LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D1B10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AC084(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D1B10;
  di_log::logger_buf<di_log::log_printer<495ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<495ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<495ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<495ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<495ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<495ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<495ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AC438( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<495ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 495LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 495LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D1D30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AC6AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D1D30;
  di_log::logger_buf<di_log::log_printer<503ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<503ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<503ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<503ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<503ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<503ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<503ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880ACA60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<503ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 503LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 503LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D1F50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880ACCD4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D1F50;
  di_log::logger_buf<di_log::log_printer<551ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<551ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<551ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<551ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<551ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<551ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<551ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AD088( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<551ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 551LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 551LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D2170;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AD2FC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D2170;
  di_log::logger_buf<di_log::log_printer<554ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<554ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<554ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<554ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<554ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<554ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<554ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AD6B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<554ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 554LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 554LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D2390;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AD924(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D2390;
  di_log::logger_buf<di_log::log_printer<561ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<561ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<561ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<561ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<561ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<561ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<561ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880ADCD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<561ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 561LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 561LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D25B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880ADF4C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D25B0;
  di_log::logger_buf<di_log::log_printer<565ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<565ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<565ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<565ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<565ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<565ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<565ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AE300( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<565ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 565LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 565LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>::operator=[abi:ne180100]<plugin_header,0,plugin_header,5ul,0>( uint64_t a1, uint64_t a2)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<610ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<610ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D2638;
  a1[45] = &unk_18A1D2738;
  a1[46] = &unk_18A1D2760;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D2638;
  a1[45] = &unk_18A1D26C0;
  a1[46] = &unk_18A1D26E8;
  return a1;
}

void sub_1880AE5C0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D27D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880AE68C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D27D0;
  di_log::logger_buf<di_log::log_printer<610ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<610ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<610ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<610ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<610ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<610ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<610ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880AEA40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<610ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 610LL;
    __int16 v22 = 2082;
    int v23 = v8;
    int v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 610LL;
      __int16 v22 = 2082;
      int v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,int,BOOL &,void>( int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,int,BOOL &,std::allocator<FileLocal>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a4,  v8 + 4,  (uint64_t)(v8 + 3));
}

void sub_1880AECB0(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,int,BOOL &,std::allocator<FileLocal>,0>( void *a1, int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC00;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_1880AED0C(_Unwind_Exception *a1)
{
}

uint64_t crypto::format_serializer::encode( void (**a1)(void, const char *, void, uint64_t), void *a2)
{
  return ((uint64_t (*)(void, const char *, void, void))*a1)(a1, "prng_keys", a2[3], a2[4] - a2[3]);
}

const std::error_category *diskimage_uio::details::diskimage_open_params_impl::decode_buffer@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  __src = 0LL;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void **))a1)(a1, a2, &__src);
  uint64_t v10 = __src;
  if (__src) {
    BOOL v11 = v9 <= 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    goto LABEL_8;
  }
  if (v9 != a4)
  {
    (*(void (**)(void *))(a1 + 16))(__src);
LABEL_8:
    double result = std::generic_category();
    char v13 = 0;
    *(void *)a5 = 22LL;
    *(void *)(a5 + _Block_object_dispose(va, 8) = result;
    goto LABEL_9;
  }

  memcpy(a3, __src, a4);
  double result = (const std::error_category *)(*(uint64_t (**)(void *))(a1 + 16))(v10);
  *(_BYTE *)a5 = 0;
  char v13 = 1;
LABEL_9:
  *(_BYTE *)(a5 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v13;
  return result;
}

void crypto::format_serializer::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  crypto::header_serializer::decode((uint64_t (**)(void, const char *, char **))a1, (uint64_t)v30);
  if (!v37)
  {
    *(_OWORD *)a2 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error((uint64_t)v30);
LABEL_20:
    *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 0;
    return;
  }

  int v29 = 0LL;
  int64_t v4 = (*(uint64_t (**)(uint64_t, const char *, const void **))a1)(a1, "enc_keys", &v29);
  if (!v29 || v4 <= 0)
  {
    uint64_t v9 = std::generic_category();
    *(void *)a2 = 22LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v9;
    goto LABEL_20;
  }

  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v26, v29, (uint64_t)v29 + v4, v4);
  (*(void (**)(const void *))(a1 + 16))(v29);
  unsigned __int8 v25 = 0LL;
  int64_t v5 = (*(uint64_t (**)(uint64_t, const char *, const void **))a1)(a1, "prng_keys", &v25);
  if (v25 && v5 > 0)
  {
    __n128 v23 = 0uLL;
    uint64_t v24 = 0LL;
    std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v23, v25, (uint64_t)v25 + v5, v5);
    (*(void (**)(const void *))(a1 + 16))(v25);
    char v6 = (char *)operator new(0x4CuLL);
    *(void *)char v6 = 0x6173646372636E65LL;
    *(_OWORD *)(v6 + _Block_object_dispose(va, 8) = v31;
    *((void *)v6 + 3) = v32;
    *((_DWORD *)v6 + _Block_object_dispose(va, 8) = v33;
    *(_OWORD *)(v6 + 36) = v34;
    *(_OWORD *)(v6 + 52) = v35;
    *(void *)(v6 + 6_Block_object_dispose(va, 8) = v36;
    __p[0] = v6;
    crypto::keys::keys(v17, (uint64_t)&v26, &v23, (uint64_t *)__p);
    uint64_t v7 = __p[0];
    __p[0] = 0LL;
    if (v7) {
      operator delete(v7);
    }
    crypto::format::format(__p);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v12;
    __p[0] = 0LL;
    __p[1] = 0LL;
    *(_OWORD *)(a2 + 24) = v13;
    *(void *)(a2 + 40) = v14;
    uint64_t v12 = 0LL;
    __int128 v13 = 0uLL;
    uint64_t v14 = 0LL;
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v15;
    *(void *)(a2 + 64) = v16;
    *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 1;
    if (v21)
    {
      __int16 v22 = v21;
      operator delete(v21);
    }

    uint64_t v8 = v20;
    __int16 v20 = 0LL;
    if (v8) {
      operator delete(v8);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }

    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }

    if (v23.n128_u64[0])
    {
      v23.n128_u64[1] = v23.n128_u64[0];
      operator delete((void *)v23.n128_u64[0]);
    }
  }

  else
  {
    uint64_t v10 = std::generic_category();
    *(void *)a2 = 22LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v10;
    *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 0;
  }

  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }

void sub_1880AF0A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }

  uint64_t v32 = *(void **)(v30 - 160);
  if (v32)
  {
    *(void *)(v30 - 152) = v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::format,std::error_code>::error( uint64_t result)
{
  if (*(_BYTE *)(result + 72))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = off_18A1C9E28;
  }

  return result;
}

void std::make_shared[abi:ne180100]<crypto::format,crypto::format,void>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = operator new(0x60uLL);
  v4[1] = 0LL;
  void v4[2] = 0LL;
  *int64_t v4 = off_18A1CBBA0;
  std::construct_at[abi:ne180100]<crypto::format,crypto::format,crypto::format*>((uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

void crypto::header_serializer::decode( uint64_t (**a1)(void, const char *, char **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 0LL;
  uint64_t v3 = (*a1)(a1, "crypto_hdr", &v8);
  int64_t v4 = v8;
  if (v8) {
    BOOL v5 = v3 <= 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    char v6 = std::generic_category();
    *(void *)a2 = 2LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v6;
    *(_BYTE *)(a2 + 80) = 0;
  }

  else
  {
    if (v3 == 76)
    {
      crypto::header::header((crypto::header *)v9, v8);
      *(void *)a2 = 0x6173646372636E65LL;
      *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = v10;
      *(void *)(a2 + 24) = v11;
      *(_DWORD *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = v12;
      *(_OWORD *)(a2 + 36) = v13;
      *(_OWORD *)(a2 + 52) = v14;
      *(void *)(a2 + 6_Block_object_dispose(va, 8) = v15;
      *(_BYTE *)(a2 + 80) = 1;
    }

    else
    {
      uint64_t v7 = std::generic_category();
      *(void *)a2 = 22LL;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v7;
      *(_BYTE *)(a2 + 80) = 0;
    }

    operator delete[](v4);
  }

uint64_t diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<crypto::header,std::error_code>::error( uint64_t result)
{
  if (*(_BYTE *)(result + 80))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = off_18A1C9E28;
  }

  return result;
}

__n128 std::make_unique[abi:ne180100]<crypto::header,crypto::header>@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = (char *)operator new(0x4CuLL);
  *(void *)int64_t v4 = 0x6173646372636E65LL;
  *(_OWORD *)(v4 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  *((void *)v4 + 3) = *(void *)(a1 + 24);
  *((_DWORD *)v4 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 36) = *(_OWORD *)(a1 + 36);
  __n128 result = *(__n128 *)(a1 + 52);
  *(__n128 *)(v4 + 52) = result;
  *(void *)(v4 + 6_Block_object_dispose(va, 8) = *(void *)(a1 + 68);
  *a2 = v4;
  return result;
}

void *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>( void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    __n128 result = std::vector<std::byte>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1880AF400(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<FileLocal,std::allocator<FileLocal>,int &,BOOL,BOOL,void>( int *a1@<X1>, BOOL *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  size_t v8 = operator new(0x470uLL);
  std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL,BOOL,std::allocator<FileLocal>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a4,  v8 + 4,  (uint64_t)(v8 + 3));
}

void sub_1880AF480(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<FileLocal>::__shared_ptr_emplace[abi:ne180100]<int &,BOOL,BOOL,std::allocator<FileLocal>,0>( void *a1, int *a2, BOOL *a3, char *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CBC00;
  FileLocal::FileLocal((FileLocal *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1880AF4D4(_Unwind_Exception *a1)
{
}

double std::construct_at[abi:ne180100]<crypto::format,crypto::format,crypto::format*>( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0LL;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  __int128 v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  return result;
}

void *diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t( void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  a1[1] = v4;
  if (v4)
  {
    BOOL v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  a1[2] = *a3;
  uint64_t v7 = a3[1];
  a1[3] = v7;
  if (v7)
  {
    size_t v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  a1[4] = 0LL;
  a1[5] = 0LL;
  int v14 = 0;
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,void>( (uint64_t)a1,  (uint64_t)(a1 + 2),  &v14,  &v15);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)(a1 + 4), &v15);
  __int128 v10 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v11 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return a1;
}

void sub_1880AF634(_Unwind_Exception *a1)
{
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,void>( uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  size_t v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a4,  v8 + 4,  (uint64_t)(v8 + 3));
}

void sub_1880AF6BC(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>( void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC2E8;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>( (uint64_t)(a1 + 3),  a2,  a3,  a4);
  return a1;
}

void sub_1880AF704(_Unwind_Exception *a1)
{
}

uint64_t std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>( uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  v9[1] = *MEMORY[0x1895F89C0];
  int v8 = *a4;
  v9[0] = 0x200000001LL;
  smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", v8, (int *)v9, 2LL);
  crypto_format_backend::crypto_format_backend(a1, a2, a3, &v8);
  return a1;
}

std::string *diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl( std::string *this, __int128 *a2, int a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x1895F89C0];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v7 = *a2;
    this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }

  this[1].__r_.__value_.__r.__words[0] = 0LL;
  LODWORD(this[23].__r_.__value_.__l.__data_) = 0;
  LODWORD(this[23].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__l.__size_ = 0LL;
  this[1].__r_.__value_.__l.__cap_ = 0LL;
  HIDWORD(this[23].__r_.__value_.__r.__words[1]) = a3;
  LODWORD(this[23].__r_.__value_.__r.__words[2]) = a3;
  *(_OWORD *)&this[24].__r_.__value_.__l.__data_ = *(_OWORD *)a4;
  *(void *)a4 = 0LL;
  *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)&this[24].__r_.__value_.__r.__words[2] = *(_OWORD *)(a4 + 16);
  *(void *)(a4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  *(_OWORD *)&this[25].__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 32);
  *(void *)(a4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = 0LL;
  *(void *)(a4 + 40) = 0LL;
  std::shared_ptr<DiskImage>::operator=[abi:ne180100]( this[1].__r_.__value_.__r.__words,  (uint64_t *)&this[25].__r_.__value_.__l.__size_);
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve( (uint64_t)this,  this[23].__r_.__value_.__r.__words[2],  0,  (uint64_t)v16);
  if (!v16[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v16);
  }

  if (LODWORD(this[23].__r_.__value_.__r.__words[1]) == 8)
  {
    std::string::pointer data = this[1].__r_.__value_.__l.__data_;
    uint64_t size = (std::__shared_weak_count *)this[1].__r_.__value_.__l.__size_;
    if (size)
    {
      p_shared_owners = (unint64_t *)&size->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    v17[0] = 0x200000001LL;
    smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", 2, (int *)v17, 2LL);
    *((_DWORD *)data + 4_Block_object_dispose(va, 8) = 2;
    if (size)
    {
      unint64_t v12 = (unint64_t *)&size->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }

  return this;
}

void sub_1880AF978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  BOOL v5 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
  if (v5) {
    operator delete(v5);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

std::string *diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl( std::string *this, __int128 *a2, std::string::size_type *a3, int a4, int a5, std::string::size_type *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v11 = *a2;
    this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }

  this[1].__r_.__value_.__r.__words[0] = *a3;
  std::string::size_type v12 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v12;
  if (v12)
  {
    unint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  std::string::size_type v15 = *a6;
  *a6 = 0LL;
  this[1].__r_.__value_.__l.__cap_ = v15;
  LODWORD(this[23].__r_.__value_.__l.__data_) = 0;
  LODWORD(this[23].__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(this[23].__r_.__value_.__r.__words[1]) = a5;
  LODWORD(this[23].__r_.__value_.__r.__words[2]) = a4;
  *(_OWORD *)&this[24].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[24].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[25].__r_.__value_.__r.__words[1] = 0u;
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve((uint64_t)this, a4, 1, (uint64_t)v18);
  if (!v18[16])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v18);
  }

  return this;
}

void sub_1880AFAF8(_Unwind_Exception *a1)
{
  BOOL v5 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
  if (v5) {
    operator delete(v5);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl( uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0LL;
  uint64_t v5 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0LL;
  *(void *)(a1 + 40) = v5;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::__move_constructor( a1 + 48,  (uint64_t)(a2 + 3));
  uint64_t v6 = *((void *)a2 + 70);
  *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 142);
  *(void *)(a1 + 560) = v6;
  *(_OWORD *)(a1 + 576) = a2[36];
  a2[36] = 0u;
  *(_OWORD *)(a1 + 592) = a2[37];
  *((void *)a2 + 75) = 0LL;
  *((void *)a2 + 74) = 0LL;
  *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = a2[38];
  *((void *)a2 + 77) = 0LL;
  *((void *)a2 + 76) = 0LL;
  return a1;
}

void sub_1880AFBFC(_Unwind_Exception *a1)
{
  __int128 v4 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
  if (v4) {
    operator delete(v4);
  }
  diskimage_uio::details::diskimage_open_params_impl::diskimage_open_params_impl(v2, v1);
  _Unwind_Resume(a1);
}

void diskimage_uio::expected_ns::std::experimental::fundamentals_v3::__expected_detail::destroy<diskimage_uio::details::diskimage_open_params_impl,(void *)0>( uint64_t a1)
{
  uint64_t v2 = a1 + 576;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 608);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 592);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + 24);
}

_BYTE *diskimage_uio::details::diskimage_open_params_impl::validate_unlocked@<X0>( const std::error_category *this@<X0>, uint64_t a2@<X8>)
{
  if (v12[16])
  {
    double result = (_BYTE *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<DIImageFormat,std::error_code>::value((uint64_t)v12);
    if (*result)
    {
      *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 84LL;
      int v8 = 16;
      di_log::logger<di_log::log_printer<650ul>>::logger(v9, &v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)"Diskimageuio: image is locked",  29LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x1895BC2CC](v11);
      double result = (_BYTE *)make_error_code(162LL);
      char v4 = 0;
      *(void *)a2 = result;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v5;
    }

    else
    {
      *(_BYTE *)a2 = 0;
      char v4 = 1;
    }
  }

  else
  {
    *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 84LL;
    int v8 = 16;
    di_log::logger<di_log::log_printer<645ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)"Diskimageuio: can't get lock status ",  36LL);
    uint64_t v6 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)v9, v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x1895BC2CC](v11);
    double result = (_BYTE *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v12);
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }

  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v4;
  return result;
}

void sub_1880AFDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *di_log::logger<di_log::log_printer<660ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<660ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D2C98;
  a1[45] = &unk_18A1D2D98;
  a1[46] = &unk_18A1D2DC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D2C98;
  a1[45] = &unk_18A1D2D20;
  a1[46] = &unk_18A1D2D48;
  return a1;
}

void sub_1880AFE98(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<645ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<645ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D2858;
  a1[45] = &unk_18A1D2958;
  a1[46] = &unk_18A1D2980;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D2858;
  a1[45] = &unk_18A1D28E0;
  a1[46] = &unk_18A1D2908;
  return a1;
}

void sub_1880AFF80(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<650ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<650ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D2A78;
  a1[45] = &unk_18A1D2B78;
  a1[46] = &unk_18A1D2BA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D2A78;
  a1[45] = &unk_18A1D2B00;
  a1[46] = &unk_18A1D2B28;
  return a1;
}

void sub_1880B0068(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D29F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B0134(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D29F0;
  di_log::logger_buf<di_log::log_printer<645ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<645ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<645ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<645ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<645ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<645ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<645ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B04E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<645ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 645LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 645LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D2C10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B075C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D2C10;
  di_log::logger_buf<di_log::log_printer<650ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<650ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<650ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<650ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<650ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<650ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<650ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B0B10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<650ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 650LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 650LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D2E30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B0D84(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D2E30;
  di_log::logger_buf<di_log::log_printer<660ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<660ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<660ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<660ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<660ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<660ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<660ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B1138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<660ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 660LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 660LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<671ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<671ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D2EB8;
  a1[45] = &unk_18A1D2FB8;
  a1[46] = &unk_18A1D2FE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D2EB8;
  a1[45] = &unk_18A1D2F40;
  a1[46] = &unk_18A1D2F68;
  return a1;
}

void sub_1880B13C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D3050;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B1494(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D3050;
  di_log::logger_buf<di_log::log_printer<671ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<671ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<671ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<671ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<671ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<671ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<671ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B1848( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<671ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 671LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 671LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>( uint64_t a1@<X8>)
{
  *(void *)&__int128 v3 = "hdr_get_block_size(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 70LL;
  int v4 = 16;
  di_log::logger<di_log::log_printer<100ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v6,  (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format",  66LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x1895BC2CC](&v7);
  double result = std::generic_category();
  *(void *)a1 = 6LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  *(_BYTE *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0;
  return result;
}

void sub_1880B1AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X8>)
{
  *(void *)a1 = 512LL;
  *(_BYTE *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(unsigned __int16 *)(a1 + 68);
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_block_size(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 8LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
  return result;
}

void *di_log::logger<di_log::log_printer<100ul>>::logger(void *a1, __int128 *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<100ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D3108;
  a1[45] = &unk_18A1D3208;
  a1[46] = &unk_18A1D3230;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D3108;
  a1[45] = &unk_18A1D3190;
  a1[46] = &unk_18A1D31B8;
  return a1;
}

void sub_1880B1C58(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D32A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B1D24(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D32A0;
  di_log::logger_buf<di_log::log_printer<100ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<100ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<100ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<100ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<100ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<100ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<100ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B20D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<100ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 100LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 100LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<681ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<681ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D3328;
  a1[45] = &unk_18A1D3428;
  a1[46] = &unk_18A1D3450;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D3328;
  a1[45] = &unk_18A1D33B0;
  a1[46] = &unk_18A1D33D8;
  return a1;
}

void sub_1880B2368(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D34C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B2434(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D34C0;
  di_log::logger_buf<di_log::log_printer<681ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<681ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<681ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<681ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<681ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<681ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<681ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B27E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<681ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 681LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 681LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

const std::error_category *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>( uint64_t a1@<X8>)
{
  *(void *)&__int128 v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 69LL;
  int v4 = 16;
  di_log::logger<di_log::log_printer<112ul>>::logger(v5, &v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v6,  (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format",  66LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)v5);
  MEMORY[0x1895BC2CC](&v7);
  uint64_t result = std::generic_category();
  *(void *)a1 = 6LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  *(_BYTE *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0;
  return result;
}

void sub_1880B2A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 492);
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 48);
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 8);
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hdr_get_nr_blocks(std::variant<std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,udif::header,di_asif::header,raw_header,pstack_header,plugin_header> const&>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 16LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
  return result;
}

void *di_log::logger<di_log::log_printer<112ul>>::logger(void *a1, __int128 *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<112ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D3578;
  a1[45] = &unk_18A1D3678;
  a1[46] = &unk_18A1D36A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D3578;
  a1[45] = &unk_18A1D3600;
  a1[46] = &unk_18A1D3628;
  return a1;
}

void sub_1880B2BFC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D3710;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B2CC8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D3710;
  di_log::logger_buf<di_log::log_printer<112ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<112ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<112ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<112ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<112ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<112ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<112ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B307C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<112ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 112LL;
    __int16 v22 = 2082;
    __n128 v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    __int128 v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 112LL;
      __int16 v22 = 2082;
      __n128 v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<741ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<741ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D3798;
  a1[45] = &unk_18A1D3898;
  a1[46] = &unk_18A1D38C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D3798;
  a1[45] = &unk_18A1D3820;
  a1[46] = &unk_18A1D3848;
  return a1;
}

void sub_1880B330C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<745ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<745ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D39B8;
  a1[45] = &unk_18A1D3AB8;
  a1[46] = &unk_18A1D3AE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D39B8;
  a1[45] = &unk_18A1D3A40;
  a1[46] = &unk_18A1D3A68;
  return a1;
}

void sub_1880B33F4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<751ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<751ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D3BD8;
  a1[45] = &unk_18A1D3CD8;
  a1[46] = &unk_18A1D3D00;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D3BD8;
  a1[45] = &unk_18A1D3C60;
  a1[46] = &unk_18A1D3C88;
  return a1;
}

void sub_1880B34DC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<755ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<755ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D3DF8;
  a1[45] = &unk_18A1D3EF8;
  a1[46] = &unk_18A1D3F20;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D3DF8;
  a1[45] = &unk_18A1D3E80;
  a1[46] = &unk_18A1D3EA8;
  return a1;
}

void sub_1880B35C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<764ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<764ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4018;
  a1[45] = &unk_18A1D4118;
  a1[46] = &unk_18A1D4140;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4018;
  a1[45] = &unk_18A1D40A0;
  a1[46] = &unk_18A1D40C8;
  return a1;
}

void sub_1880B36AC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  return a1;
}

void diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx( diskimage_uio::details::diskimage_open_params_impl *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  diskimage_uio::details::diskimage_open_params_impl::open_and_resolve( (uint64_t)this,  *((_DWORD *)this + 142),  0,  (uint64_t)&v25);
  if (!v26)
  {
    if (*((_DWORD *)this + 141) == 1 && *((_DWORD *)this + 142) != 1)
    {
      int v17 = (unsigned int *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v25);
      *(void *)&__int128 v21 = 35LL;
      *((void *)&v21 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = std::generic_category();
      if ((*(unsigned int (**)(void, void, __int128 *))(**((void **)v17 + 1) + 32LL))( *((void *)v17 + 1),  *v17,  &v21)
        || (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v21 + 1) + 40LL))( *((void *)&v21 + 1),  v17,  v21))
      {
        *(void *)&__int128 v27 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
        *((void *)&v27 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 96LL;
        int v28 = 2;
        di_log::logger<di_log::log_printer<698ul>>::logger(&v21, &v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v23,  (uint64_t)"Diskimageuio: required mode ",  28LL);
        diskimage_uio::operator<<(&v23, *((_DWORD *)this + 141));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v23,  (uint64_t)" is different than current mode ",  32LL);
        diskimage_uio::operator<<(&v23, *((_DWORD *)this + 142));
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf((uint64_t)&v21);
        MEMORY[0x1895BC2CC](v24);
        diskimage_uio::details::diskimage_open_params_impl::open_and_resolve( (uint64_t)this,  *((_DWORD *)this + 141),  0,  (uint64_t)&v21);
        if (v22 && v26) {
          goto LABEL_32;
        }
        if (v22)
        {
          if (v26) {
            __int128 v25 = v21;
          }
          else {
            char v26 = v22;
          }
LABEL_32:
          *(void *)&__int128 v27 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
          *((void *)&v27 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 96LL;
          int v28 = 16;
          di_log::logger<di_log::log_printer<703ul>>::logger(&v21, &v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v23,  (uint64_t)"Diskimageuio: after reopening backend to read-write, it's no longer encrypted",  77LL);
          std::ostream::~ostream();
          di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf((uint64_t)&v21);
          goto LABEL_33;
        }

        __int128 v25 = v21;
        if (v26) {
          char v26 = 0;
        }
        if (a3)
        {
          diskimage_uio::details::diskimage_open_params_impl::set_passphrase(this, a2, 0);
          return;
        }
      }
    }

    *(void *)&__int128 v27 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((void *)&v27 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 96LL;
    int v28 = 16;
    di_log::logger<di_log::log_printer<714ul>>::logger(&v21, &v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v23,  (uint64_t)"Diskimageuio: couldn't resolve image while setting passphrase ",  62LL);
    uint64_t v14 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v25);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v21, v14);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf((uint64_t)&v21);
    MEMORY[0x1895BC2CC](v24);
    std::string::size_type v15 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v25);
LABEL_18:
    *(_OWORD *)a4 = *v15;
LABEL_34:
    *(_BYTE *)(a4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0;
    return;
  }

  diskimage_uio::details::diskimage_open_params_impl::is_encrypted((const std::error_category *)this, &v27);
  if (!(_BYTE)v28)
  {
    *(void *)&__int128 v19 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((void *)&v19 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 96LL;
    int v20 = 16;
    di_log::logger<di_log::log_printer<719ul>>::logger(&v21, &v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v23,  (uint64_t)"Diskimageuio: can't set passphrase, can't get encrypted status ",  63LL);
    uint64_t v16 = diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v27);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<957ul>>,std::error_code,0>((uint64_t)&v21, v16);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf((uint64_t)&v21);
    MEMORY[0x1895BC2CC](v24);
    std::string::size_type v15 = (_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)&v27);
    goto LABEL_18;
  }

  if (!(_BYTE)v27)
  {
    *(void *)&__int128 v19 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_after_crypto_ctx(const char *, BOOL)";
    *((void *)&v19 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 96LL;
    int v20 = 16;
    di_log::logger<di_log::log_printer<723ul>>::logger(&v21, &v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v23,  (uint64_t)"Diskimageuio: can't set passphrase, image not encrypted after reopen",  68LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf((uint64_t)&v21);
LABEL_33:
    MEMORY[0x1895BC2CC](v24);
    *(void *)a4 = make_error_code(161LL);
    *(void *)(a4 + _Block_object_dispose(va, 8) = v18;
    goto LABEL_34;
  }

  if (*((_DWORD *)this + 140) == 8)
  {
    uint64_t v9 = *((void *)this + 3);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 4);
    *(void *)&__int128 v21 = v9;
    *((void *)&v21 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    *(void *)&__int128 v27 = 0x200000001LL;
    smart_enums::validators::flags<unsigned int>((uint64_t)"header_ignore_fields_t", 2, (int *)&v27, 2LL);
    *(_DWORD *)(v9 + 192) = 2;
    if (v8)
    {
      os_log_type_t v12 = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
}

void sub_1880B3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D3930;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B3C64(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D3930;
  di_log::logger_buf<di_log::log_printer<741ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<741ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<741ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<741ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<741ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<741ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<741ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B4018( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<741ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 741LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 741LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D3B50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B428C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D3B50;
  di_log::logger_buf<di_log::log_printer<745ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<745ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<745ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<745ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<745ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<745ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<745ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B4640( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<745ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 745LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 745LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D3D70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B48B4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D3D70;
  di_log::logger_buf<di_log::log_printer<751ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<751ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<751ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<751ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<751ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<751ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<751ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B4C68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<751ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 751LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 751LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D3F90;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B4EDC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D3F90;
  di_log::logger_buf<di_log::log_printer<755ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<755ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<755ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<755ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<755ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<755ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<755ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B5290( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<755ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 755LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        uint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 755LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_open_params_impl::crypto_ctx_t::crypto_ctx_t( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *(void *)a1 = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = 0u;
  crypto::keys::keys(v19, *a3, a2, a4);
  std::allocate_shared[abi:ne180100]<crypto::format,std::allocator<crypto::format>,crypto::keys,void>(&v18);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 16, &v18);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  int v17 = 0;
  std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,void>( (uint64_t)a3,  a1 + 16,  &v17,  &v18);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](a1 + 32, &v18);
  os_log_type_t v12 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v18 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }

  std::string::size_type v15 = v22;
  __int16 v22 = 0LL;
  if (v15) {
    operator delete(v15);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }

  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }

  return a1;
}

void sub_1880B5618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void std::allocate_shared[abi:ne180100]<crypto_format_backend,std::allocator<crypto_format_backend>,std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,void>( uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0xE0uLL);
  std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>( v8,  a1,  a2,  a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<PurgeableFileBackend>::__enable_weak_this[abi:ne180100]<Backend,PurgeableFileBackend,void>( (uint64_t)a4,  v8 + 4,  (uint64_t)(v8 + 3));
}

void sub_1880B56B4(_Unwind_Exception *a1)
{
}

void *std::__shared_ptr_emplace<crypto_format_backend>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<Backend> const&,std::shared_ptr<crypto::format> &,int,std::allocator<crypto_format_backend>,0>( void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_18A1CC2E8;
  std::construct_at[abi:ne180100]<crypto_format_backend,std::shared_ptr<Backend> &,std::shared_ptr<crypto::format> &,int,crypto_format_backend*>( (uint64_t)(a1 + 3),  a2,  a3,  a4);
  return a1;
}

void sub_1880B56FC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D41B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B5778(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D41B0;
  di_log::logger_buf<di_log::log_printer<764ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<764ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<764ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<764ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<764ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<764ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<764ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B5B2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<764ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 764LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 764LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<698ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<698ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4238;
  a1[45] = &unk_18A1D4338;
  a1[46] = &unk_18A1D4360;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4238;
  a1[45] = &unk_18A1D42C0;
  a1[46] = &unk_18A1D42E8;
  return a1;
}

void sub_1880B5DBC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<703ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<703ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4458;
  a1[45] = &unk_18A1D4558;
  a1[46] = &unk_18A1D4580;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4458;
  a1[45] = &unk_18A1D44E0;
  a1[46] = &unk_18A1D4508;
  return a1;
}

void sub_1880B5EA4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<714ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<714ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4678;
  a1[45] = &unk_18A1D4778;
  a1[46] = &unk_18A1D47A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4678;
  a1[45] = &unk_18A1D4700;
  a1[46] = &unk_18A1D4728;
  return a1;
}

void sub_1880B5F8C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<719ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<719ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4898;
  a1[45] = &unk_18A1D4998;
  a1[46] = &unk_18A1D49C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4898;
  a1[45] = &unk_18A1D4920;
  a1[46] = &unk_18A1D4948;
  return a1;
}

void sub_1880B6074(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<723ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<723ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4AB8;
  a1[45] = &unk_18A1D4BB8;
  a1[46] = &unk_18A1D4BE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4AB8;
  a1[45] = &unk_18A1D4B40;
  a1[46] = &unk_18A1D4B68;
  return a1;
}

void sub_1880B615C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D43D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B6228(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D43D0;
  di_log::logger_buf<di_log::log_printer<698ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<698ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<698ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<698ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<698ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<698ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<698ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B65DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<698ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 698LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 698LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D45F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B6850(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D45F0;
  di_log::logger_buf<di_log::log_printer<703ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<703ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<703ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<703ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<703ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<703ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<703ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B6C04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<703ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 703LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 703LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D4810;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B6E78(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D4810;
  di_log::logger_buf<di_log::log_printer<714ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<714ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<714ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<714ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<714ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<714ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<714ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B722C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<714ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 714LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 714LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D4A30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B74A0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D4A30;
  di_log::logger_buf<di_log::log_printer<719ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<719ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<719ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<719ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<719ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<719ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<719ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B7854( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<719ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 719LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 719LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D4C50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B7AC8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D4C50;
  di_log::logger_buf<di_log::log_printer<723ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<723ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<723ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<723ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<723ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<723ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<723ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B7E7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<723ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 723LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 723LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<159ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<159ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4CD8;
  a1[45] = &unk_18A1D4DD8;
  a1[46] = &unk_18A1D4E00;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4CD8;
  a1[45] = &unk_18A1D4D60;
  a1[46] = &unk_18A1D4D88;
  return a1;
}

void sub_1880B810C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D4E70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B81D8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D4E70;
  di_log::logger_buf<di_log::log_printer<159ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<159ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<159ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<159ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<159ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<159ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<159ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B858C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<159ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 159LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 159LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<173ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<173ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D4EF8;
  a1[45] = &unk_18A1D4FF8;
  a1[46] = &unk_18A1D5020;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D4EF8;
  a1[45] = &unk_18A1D4F80;
  a1[46] = &unk_18A1D4FA8;
  return a1;
}

void sub_1880B881C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D5090;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B88E8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D5090;
  di_log::logger_buf<di_log::log_printer<173ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<173ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<173ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<173ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<173ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<173ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<173ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B8C9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<173ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 173LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 173LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t diskimage_uio::details::diskimage_impl::create_context_impl@<X0>( diskimage_uio::details::diskimage_impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 136LL))(*((void *)this + 1));
  *(void *)a2 = result;
  *(_BYTE *)(a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
  return result;
}

void di_hybrid_subscriber_t::~di_hybrid_subscriber_t(di_hybrid_subscriber_t *this)
{
  unsigned __int8 v2 = (dispatch_object_s **)((char *)this + 504);
  gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 63, &__block_literal_global_4);
  gcd::gcd_group::~gcd_group((dispatch_object_s **)this + 78);
  std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100]((void *)this + 72);
  std::mutex::~mutex((std::mutex *)this + 8);
  gcd::gcd_group::~gcd_group(v2);
  PluginRing::~PluginRing((di_hybrid_subscriber_t *)((char *)this + 304));
  uint64_t v3 = (di_hybrid_subscriber_t *)*((void *)this + 34);
  if (v3 == (di_hybrid_subscriber_t *)((char *)this + 248))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (di_hybrid_subscriber_t *)((char *)this + 248);
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)this + 120);
}

void std::default_delete<io_rings_di_subscriber_t>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[34];
    if (v3 == a2 + 31)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = a2 + 31;
    }

    else
    {
      if (!v3)
      {
LABEL_8:
        pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)(a2 + 15));
        operator delete(a2);
        return;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }

uint64_t io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_1::__invoke( uint64_t *a1, uint64_t a2)
{
  if (v7[1]) {
    unsigned int v4 = io_rings_parse_and_execute_sqe((uint64_t)a1, (uint64_t)v7, a2);
  }
  else {
    unsigned int v4 = -12;
  }
  uint64_t v5 = io_rings_return_status(a1[7], a2, v4, 0);
  pool_ns::pool_t<DiskImage::Context,std::default_delete>::pooled_element_t::~pooled_element_t((uint64_t)v7);
  return v5;
}

void sub_1880B9068(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void header_exception::~header_exception(std::exception *this)
{
}

void std::unique_ptr<std::vector<diskimage_uio::diskimage_open_params_pair>>::reset[abi:ne180100]( void ***a1, void **a2)
{
  unsigned __int8 v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100](&v3);
    operator delete(v2);
  }

uint64_t std::__split_buffer<diskimage_uio::diskimage_open_params_pair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<diskimage_uio::diskimage_open_params_pair>::__destroy_vector::operator()[abi:ne180100]( void ***a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        unsigned int v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t di_log::logger_buf<di_log::log_printer<1109ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CD8A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B91FC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1122ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1CDB20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B9278(_Unwind_Exception *a1)
{
}

uint64_t std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>( uint64_t a1, char *__s)
{
  char v4 = (void *)(a1 + 360);
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v5);
  return a1;
}

void *di_log::logger<di_log::log_printer<1908ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1908ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D5180;
  a1[45] = &unk_18A1D5280;
  a1[46] = &unk_18A1D52A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D5180;
  a1[45] = &unk_18A1D5208;
  a1[46] = &unk_18A1D5230;
  return a1;
}

void sub_1880B9358(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<1915ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<1915ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D53A0;
  a1[45] = &unk_18A1D54A0;
  a1[46] = &unk_18A1D54C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D53A0;
  a1[45] = &unk_18A1D5428;
  a1[46] = &unk_18A1D5450;
  return a1;
}

void sub_1880B9440(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>( uint64_t a1, uint64_t a2, char a3)
{
  if (a1 == a2)
  {
    *(void *)&__int128 v16 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v16 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 77LL;
    int v17 = 16;
    di_log::logger<di_log::log_printer<1908ul>>::logger(v18, &v16);
    std::operator<<[abi:ne180100]<di_log::logger<di_log::log_printer<1908ul>>,char [33],0>( (uint64_t)v18,  "Diskimageuio: No diskimage given");
    di_log::logger<di_log::log_printer<1908ul>>::~logger((uint64_t)v18);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v11;
  }

  if (a1 + 16 == a2)
  {
    int v14 = *(_DWORD *)a1;
    int v7 = *(_DWORD *)a1;
    uint64_t v8 = *(const std::error_category **)(a1 + 8);
    std::string::size_type v15 = *(diskimage_uio::details::diskimage_open_params_impl **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    if (v7)
    {
      *(void *)&__int128 v16 = "diskimage_impl *diskimage_uio::details::diskimage_impl::create_diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
      *((void *)&v16 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 77LL;
      int v17 = 16;
      di_log::logger<di_log::log_printer<1915ul>>::logger(v18, &v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v20,  (uint64_t)"Diskimageuio: single image given, but role is ",  46LL);
      diskimage_uio::operator<<(v20, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" rather than image", 18LL);
      di_log::logger<di_log::log_printer<1915ul>>::~logger((uint64_t)v18);
      os_log_type_t v12 = __cxa_allocate_exception(0x10uLL);
      uint64_t v13 = std::generic_category();
      *os_log_type_t v12 = 22LL;
      v12[1] = v13;
    }

    diskimage_uio::details::diskimage_open_params_impl::query_image_format(v8, (uint64_t)&v16);
    LODWORD(v18[0]) = 12;
    char v19 = 1;
    if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v16,  (uint64_t)v18))
    {
      char v6 = operator new(0x10uLL);
      diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v15);
      void *v6 = off_18A1CD6A8;
    }

    else
    {
      diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v15,  (uint64_t)&v16);
      LODWORD(v18[0]) = 11;
      char v19 = 1;
      if (diskimage_uio::expected_ns::std::experimental::fundamentals_v3::operator==<DIImageFormat,std::error_code>( (uint64_t)&v16,  (uint64_t)v18)
        && *(void *)(*((void *)v15 + 6) + 8LL) - **((void **)v15 + 6) == 16LL)
      {
        char v6 = (void *)diskimage_uio::details::diskimage_impl::create_diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>();
      }

      else
      {
        char v6 = operator new(0x10uLL);
        diskimage_uio::details::diskimage_impl::diskimage_impl((uint64_t)v6, (const std::error_category **)&v15);
      }
    }

    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v15);
  }

  else
  {
    char v6 = operator new(0x10uLL);
    diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>( v6,  a1,  a2,  a3);
  }

  return v6;
}

void sub_1880B96F4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D5318;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B97CC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D5318;
  di_log::logger_buf<di_log::log_printer<1908ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1908ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1908ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1908ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1908ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1908ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1908ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880B9B80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1908ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1908LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1908LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D5538;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880B9DF4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D5538;
  di_log::logger_buf<di_log::log_printer<1915ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<1915ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<1915ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<1915ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<1915ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<1915ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<1915ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880BA1A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<1915ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 1915LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        int v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 1915LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>>( void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  *a1 = off_18A1CD600;
  a1[1] = 0LL;
  if (a2 == a3)
  {
    *(void *)&__int128 v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
    *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: No diskimage given",  32LL);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v64);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v51;
  }

  int v60 = *(_DWORD *)a2;
  __int128 v61 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  uint64_t v8 = v61;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v8);
  uint64_t v9 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &lpsrc);
    uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 24LL))(lpsrc);
    if (!v60)
    {
      *(void *)&__int128 v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
      *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
      LODWORD(v63) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v64, &v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot",  93LL);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v64);
      __int128 v52 = __cxa_allocate_exception(0x10uLL);
      *__int128 v52 = make_error_code(163LL);
      v52[1] = v53;
    }

    uint64_t v11 = v10;
    __int128 v62 = 0uLL;
    unint64_t v63 = 0LL;
    os_log_type_t v12 = lpsrc;
    char v56 = a4;
    if (v60 == 1)
    {
      lpsrc = 0LL;
      __int128 v64 = v12;
      LODWORD(v65) = 2;
    }

    else
    {
      int v16 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc);
      if (v60 == 3) {
        int v17 = v16;
      }
      else {
        int v17 = 0;
      }
      __int16 v18 = lpsrc;
      if (v17 == 1 && lpsrc != 0LL)
      {
        if (v20) {
          v20[184] = 0;
        }
      }

      int v21 = v17 ^ 1;
      uint64_t v22 = *((void *)&v62 + 1);
      lpsrc = 0LL;
      __int128 v64 = v18;
      LODWORD(v65) = v21;
      if (*((void *)&v62 + 1) < v63)
      {
        **((void **)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v18;
        if (v18)
        {
          uint64_t v23 = operator new(0x20uLL);
          uint64_t v24 = v64;
          *uint64_t v23 = off_18A1CB9E8;
          v23[1] = 0LL;
          v23[2] = 0LL;
          v23[3] = v24;
        }

        else
        {
          uint64_t v23 = 0LL;
        }

        *(void *)(v22 + _Block_object_dispose(va, 8) = v23;
        __int128 v64 = 0LL;
        *(_DWORD *)(v22 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v65;
        *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v22 + 24;
LABEL_26:
        int v27 = v60;
        BOOL v28 = v60 == 1;
        while (1)
        {
          int v60 = *(_DWORD *)v9;
          diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v61, (uint64_t *)(v9 + 8));
          diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v61);
          diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v61,  (uint64_t)v57);
          if (!v58)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1028ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Can't get image format",  36LL);
            di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v64);
            uint64_t v43 = __cxa_allocate_exception(0x10uLL);
            *uint64_t v43 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v57);
          }

          diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
          uint64_t v29 = v64;
          __int128 v64 = 0LL;
          uint64_t v30 = lpsrc;
          lpsrc = v29;
          if (v30)
          {
            (*(void (**)(void *))(*(void *)v30 + 16LL))(v30);
            __int128 v31 = v64;
            __int128 v64 = 0LL;
            if (v31) {
              (*(void (**)(void *))(*(void *)v31 + 16LL))(v31);
            }
            uint64_t v29 = lpsrc;
          }

          if (v29
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1035ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Nested stacking is not allowed.",  45LL);
            di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }

          if ((*(uint64_t (**)(void *))(*(void *)v29 + 24LL))(v29) != v11)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1040ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Multiple images given but block size differ. ",  59LL);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)" block_size: ",  13LL);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" / ", 3LL);
            (*(void (**)(void *))(*(void *)lpsrc + 24LL))(lpsrc);
            std::ostream::operator<<();
            di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v64);
LABEL_72:
            uint64_t v44 = 163LL;
LABEL_73:
            uint64_t v45 = __cxa_allocate_exception(0x10uLL);
            *uint64_t v45 = make_error_code(v44);
            v45[1] = v46;
          }

          v9 += 16LL;
          if (v9 == a3) {
            break;
          }
          if (v57[0] != 8)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1056ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ",  48LL);
            __int128 v47 = diskimage_uio::operator<<(v68, v57[0]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8LL);
            di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }

          if (v60 != 1)
          {
            if (v60 != 2)
            {
              *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
              *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
              int v71 = 16;
              di_log::logger<di_log::log_printer<1063ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ",  109LL);
              diskimage_uio::operator<<(v68, v60);
              di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v64);
LABEL_79:
              uint64_t v48 = __cxa_allocate_exception(0x10uLL);
              *uint64_t v48 = make_error_code(163LL);
              v48[1] = v49;
            }

            if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc))
            {
              *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<std::__wrap_iter<diskimage_uio::diskimage_open_params_pair *>>]";
              *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
              int v71 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Snapshots should be read only",  43LL);
              di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v64);
              goto LABEL_79;
            }

void sub_1880BAE28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAE38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAE48()
{
}

void sub_1880BAE9C()
{
}

void sub_1880BAF48()
{
}

void sub_1880BAF68(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1880BB0E8LL);
}

void sub_1880BAF78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAF88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAF98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAFA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAFC0()
{
}

void sub_1880BAFD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BAFF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BB004( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BB014( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BB024( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BB06C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v22 = a20;
  a20 = 0LL;
  if (v22) {
    (*((void (**)(void **))*v22 + 2))(v22);
  }
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16LL))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + _Block_object_dispose(va, 8) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  _Unwind_Resume(a1);
}

void *diskimage_uio::details::diskimage_impl::diskimage_impl<std::move_iterator<diskimage_uio::diskimage_open_params_pair *>>( void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  *a1 = off_18A1CD600;
  a1[1] = 0LL;
  if (a2 == a3)
  {
    *(void *)&__int128 v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::mo"
                      "ve_iterator<diskimage_uio::diskimage_open_params_pair *>]";
    *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
    LODWORD(v63) = 16;
    di_log::logger<di_log::log_printer<978ul>>::logger(&v64, &v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: No diskimage given",  32LL);
    di_log::logger<di_log::log_printer<978ul>>::~logger((uint64_t)&v64);
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = make_error_code(157LL);
    exception[1] = v51;
  }

  int v60 = *(_DWORD *)a2;
  __int128 v61 = *(diskimage_uio::details::diskimage_open_params_impl **)(a2 + 8);
  uint64_t v8 = v61;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v8);
  uint64_t v9 = a2 + 16;
  if (a2 + 16 != a3)
  {
    diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &lpsrc);
    uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 24LL))(lpsrc);
    if (!v60)
    {
      *(void *)&__int128 v62 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t = std::"
                        "move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
      *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
      LODWORD(v63) = 16;
      di_log::logger<di_log::log_printer<1002ul>>::logger(&v64, &v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: multiple images given, but first role is image instead of shadow/cache/snapshot",  93LL);
      di_log::logger<di_log::log_printer<1002ul>>::~logger((uint64_t)&v64);
      __int128 v52 = __cxa_allocate_exception(0x10uLL);
      *__int128 v52 = make_error_code(163LL);
      v52[1] = v53;
    }

    uint64_t v11 = v10;
    __int128 v62 = 0uLL;
    unint64_t v63 = 0LL;
    os_log_type_t v12 = lpsrc;
    char v56 = a4;
    if (v60 == 1)
    {
      lpsrc = 0LL;
      __int128 v64 = v12;
      LODWORD(v65) = 2;
    }

    else
    {
      int v16 = (*(uint64_t (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc);
      if (v60 == 3) {
        int v17 = v16;
      }
      else {
        int v17 = 0;
      }
      __int16 v18 = lpsrc;
      if (v17 == 1 && lpsrc != 0LL)
      {
        if (v20) {
          v20[184] = 0;
        }
      }

      int v21 = v17 ^ 1;
      uint64_t v22 = *((void *)&v62 + 1);
      lpsrc = 0LL;
      __int128 v64 = v18;
      LODWORD(v65) = v21;
      if (*((void *)&v62 + 1) < v63)
      {
        **((void **)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v18;
        if (v18)
        {
          uint64_t v23 = operator new(0x20uLL);
          uint64_t v24 = v64;
          *uint64_t v23 = off_18A1CB9E8;
          v23[1] = 0LL;
          v23[2] = 0LL;
          v23[3] = v24;
        }

        else
        {
          uint64_t v23 = 0LL;
        }

        *(void *)(v22 + _Block_object_dispose(va, 8) = v23;
        __int128 v64 = 0LL;
        *(_DWORD *)(v22 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v65;
        *((void *)&v62 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v22 + 24;
LABEL_26:
        int v27 = v60;
        BOOL v28 = v60 == 1;
        while (1)
        {
          int v60 = *(_DWORD *)v9;
          diskimage_uio::diskimage_open_params::operator=((uint64_t *)&v61, (uint64_t *)(v9 + 8));
          diskimage_uio::details::diskimage_open_params_impl::lock_backend_if_required((const std::error_category *)v61);
          diskimage_uio::details::diskimage_open_params_impl::query_image_format( (const std::error_category *)v61,  (uint64_t)v57);
          if (!v58)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1028ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Can't get image format",  36LL);
            di_log::logger<di_log::log_printer<1028ul>>::~logger((uint64_t)&v64);
            uint64_t v43 = __cxa_allocate_exception(0x10uLL);
            *uint64_t v43 = *(_OWORD *)diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<_di_plugin_t *,std::error_code>::error((uint64_t)v57);
          }

          diskimage_uio::details::diskimage_open_params_impl::transfer_disk_image_ownership(v61, &v64);
          uint64_t v29 = v64;
          __int128 v64 = 0LL;
          uint64_t v30 = lpsrc;
          lpsrc = v29;
          if (v30)
          {
            (*(void (**)(void *))(*(void *)v30 + 16LL))(v30);
            __int128 v31 = v64;
            __int128 v64 = 0LL;
            if (v31) {
              (*(void (**)(void *))(*(void *)v31 + 16LL))(v31);
            }
            uint64_t v29 = lpsrc;
          }

          if (v29
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1035ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Nested stacking is not allowed.",  45LL);
            di_log::logger<di_log::log_printer<1035ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }

          if ((*(uint64_t (**)(void *))(*(void *)v29 + 24LL))(v29) != v11)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1040ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Multiple images given but block size differ. ",  59LL);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)" block_size: ",  13LL);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" / ", 3LL);
            (*(void (**)(void *))(*(void *)lpsrc + 24LL))(lpsrc);
            std::ostream::operator<<();
            di_log::logger<di_log::log_printer<1040ul>>::~logger((uint64_t)&v64);
LABEL_72:
            uint64_t v44 = 163LL;
LABEL_73:
            uint64_t v45 = __cxa_allocate_exception(0x10uLL);
            *uint64_t v45 = make_error_code(v44);
            v45[1] = v46;
          }

          v9 += 16LL;
          if (v9 == a3) {
            break;
          }
          if (v57[0] != 8)
          {
            *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t ="
                              " std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
            *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
            int v71 = 16;
            di_log::logger<di_log::log_printer<1056ul>>::logger(&v64, &v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Can't stack non asif formats. Got ",  48LL);
            __int128 v47 = diskimage_uio::operator<<(v68, v57[0]);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" instead", 8LL);
            di_log::logger<di_log::log_printer<1056ul>>::~logger((uint64_t)&v64);
            goto LABEL_72;
          }

          if (v60 != 1)
          {
            if (v60 != 2)
            {
              *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
              *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
              int v71 = 16;
              di_log::logger<di_log::log_printer<1063ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Multiple images given, except for top or bottom, role should be cache/snapshot, but role given ",  109LL);
              diskimage_uio::operator<<(v68, v60);
              di_log::logger<di_log::log_printer<1063ul>>::~logger((uint64_t)&v64);
LABEL_79:
              uint64_t v48 = __cxa_allocate_exception(0x10uLL);
              *uint64_t v48 = make_error_code(163LL);
              v48[1] = v49;
            }

            if ((*(unsigned int (**)(void *))(*(void *)lpsrc + 40LL))(lpsrc))
            {
              *(void *)&__int128 v70 = "diskimage_uio::details::diskimage_impl::diskimage_impl(iter_t, iter_t, uint32_t) [iter_t"
                                " = std::move_iterator<diskimage_uio::diskimage_open_params_pair *>]";
              *((void *)&v70 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 54LL;
              int v71 = 16;
              di_log::logger<di_log::log_printer<1068ul>>::logger(&v64, &v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( v68,  (uint64_t)"Diskimageuio: Snapshots should be read only",  43LL);
              di_log::logger<di_log::log_printer<1068ul>>::~logger((uint64_t)&v64);
              goto LABEL_79;
            }

void sub_1880BBB64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBB74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBB84()
{
}

void sub_1880BBBD8()
{
}

void sub_1880BBC84()
{
}

void sub_1880BBCA4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1880BBE24LL);
}

void sub_1880BBCB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBCC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBCD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBCE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBCFC()
{
}

void sub_1880BBD10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBD2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBD40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBD50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBD60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1880BBDA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v22 = a20;
  a20 = 0LL;
  if (v22) {
    (*((void (**)(void **))*v22 + 2))(v22);
  }
  a20 = (void **)&a17;
  std::vector<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 16LL))(a14);
  }
  diskimage_uio::diskimage_open_params::~diskimage_open_params(v20);
  uint64_t v23 = *(void *)(a10 + 8);
  *(void *)(a10 + _Block_object_dispose(va, 8) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  _Unwind_Resume(a1);
}

unint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  uint64_t v8 = (DiskImage::Context **)(a2 + 8);
  unint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8LL) + 24LL))(*(void *)(*(void *)(a2 + 8) + 8LL));
  uint64_t v10 = (diskimage_uio *)(*(uint64_t (**)(void))(**((void **)*v8 + 1) + 24LL))(*((void *)*v8 + 1));
  diskimage_uio::create_sg_vec_from_buffer(v10, a4, a3, a5, v50);
  uint64_t v11 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v54, (uint64_t)v47);
  sg_vec_ref::end((sg_vec_ref *)v54, (uint64_t)v44);
  unint64_t v12 = DiskImage::Context::read( v11,  (const sg_vec_ns::details::sg_vec_iterator *)v47,  (const sg_vec_ns::details::sg_vec_iterator *)v44);
  uint64_t v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  int v16 = v45;
  if (v45)
  {
    int v17 = (unint64_t *)&v45->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = v49;
  if (v49)
  {
    __int16 v20 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v48;
  if (v48)
  {
    uint64_t v23 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  if ((v12 & 0x8000000000000000LL) == 0) {
    v12 /= v9;
  }
  uint64_t v25 = v60;
  if (v60)
  {
    char v26 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  BOOL v28 = v59;
  if (v59)
  {
    uint64_t v29 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  __int128 v31 = v58;
  if (v58)
  {
    int v32 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  uint64_t v34 = v57;
  if (v57)
  {
    __int128 v35 = (unint64_t *)&v57->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  uint64_t v37 = v56;
  if (v56)
  {
    uint64_t v38 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  int v40 = v55;
  if (v55)
  {
    uint64_t v41 = (unint64_t *)&v55->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  if (v52 && &v53 != __p) {
    operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v50);
  return v12;
}

void sub_1880BC17C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::__shared_weak_count *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, std::__shared_weak_count *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, _Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a25) {
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  }
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      unint64_t v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }

  if (a31)
  {
    __int128 v74 = (unint64_t *)&a31->__shared_owners_;
    do
      unint64_t v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }

  __int128 v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    __int128 v77 = (unint64_t *)&v76->__shared_owners_;
    do
      unint64_t v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    int v80 = (unint64_t *)&v79->__shared_owners_;
    do
      unint64_t v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  int v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    __int128 v83 = (unint64_t *)&v82->__shared_owners_;
    do
      unint64_t v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  __int128 v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    __int128 v86 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }

  __int128 v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    __int128 v89 = (unint64_t *)&v88->__shared_owners_;
    do
      unint64_t v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }

  __int128 v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    __int128 v92 = (unint64_t *)&v91->__shared_owners_;
    do
      unint64_t v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  if (a72)
  {
    if (&STACK[0x200] != __p) {
      operator delete(__p);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

void diskimage_uio::create_sg_vec_from_buffer( diskimage_uio *this@<X0>, char *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = a2 * (void)this;
  uint64_t v8 = a4 * (void)this;
  uint64_t v9 = *((void *)details::get_dummy_shared_ptr() + 1);
  *(void *)&__int128 v15 = a3;
  *((void *)&v15 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v9;
  if (v9)
  {
    uint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = v7;
  char v19 = 0;
  sg_vec::sg_vec(a5, &v15);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_1880BC460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sg_vec::sg_vec(uint64_t *a1, __int128 *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *((void *)a2 + 4);
  __int128 v5 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  void v14[2] = v4;
  __int128 v15 = &v17;
  v14[0] = 0LL;
  v14[1] = 0LL;
  uint64_t v18 = v4;
  __int128 v16 = xmmword_188178820;
  __int128 v17 = v5;
  sg_vec_ns::details::sg_vec_data::sg_vec_data((uint64_t)a1, (uint64_t)&v15);
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&v15);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v9 = (unint64_t *)a1[18];
  uint64_t v8 = a1[19];
  uint64_t v10 = a1[1];
  __int128 v15 = (__int128 *)*a1;
  uint64_t v13 = v9;
  v14[0] = (uint64_t)v15 + 24 * v10;
  unint64_t v12 = &v9[v8];
  sg_vec_ref::sg_vec_ref((uint64_t)(a1 + 26), (uint64_t *)&v15, v14, &v13, &v12, v6, v7);
  return a1;
}

void sub_1880BC544( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_1::__invoke( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8LL) + 24LL))(*(void *)(*(void *)(a2 + 8) + 8LL));
  uint64_t v10 = v9 * a4;
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = v9;
  unint64_t v12 = -1LL;
  uint64_t v13 = 8LL;
  unint64_t v14 = v9 * a4;
  do
  {
    unint64_t v15 = *(void *)(a3 + v13);
    BOOL v16 = v14 >= v15;
    v14 -= v15;
    if (!v16) {
      return -22LL;
    }
    ++v12;
    v13 += 16LL;
  }

  while (v14);
  unint64_t v48 = v12 + 1;
  if (v12 <= 0x7FFFFFFFFFFFFFFELL)
  {
    uint64_t v53 = a3;
    __int128 v54 = (std::__shared_weak_count *)(v12 + 1);
    diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>( (uint64_t)&v53,  v9 * a5,  v10,  (uint64_t)v56);
    __int128 v17 = *(DiskImage::Context **)(a2 + 8);
    sg_vec_ref::begin((sg_vec_ref *)v60, (uint64_t)&v53);
    sg_vec_ref::end((sg_vec_ref *)v60, (uint64_t)v50);
    unint64_t v48 = DiskImage::Context::read( v17,  (const sg_vec_ns::details::sg_vec_iterator *)&v53,  (const sg_vec_ns::details::sg_vec_iterator *)v50);
    uint64_t v18 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    unint64_t v21 = v51;
    if (v51)
    {
      uint64_t v22 = (unint64_t *)&v51->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    unint64_t v24 = v55;
    if (v55)
    {
      uint64_t v25 = (unint64_t *)&v55->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    unint64_t v27 = v54;
    if (v54)
    {
      BOOL v28 = (unint64_t *)&v54->__shared_owners_;
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }

    if ((v48 & 0x8000000000000000LL) == 0) {
      v48 /= v11;
    }
    unint64_t v30 = v66;
    if (v66)
    {
      __int128 v31 = (unint64_t *)&v66->__shared_owners_;
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    unint64_t v33 = v65;
    if (v65)
    {
      uint64_t v34 = (unint64_t *)&v65->__shared_owners_;
      do
        unint64_t v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    unint64_t v36 = v64;
    if (v64)
    {
      uint64_t v37 = (unint64_t *)&v64->__shared_owners_;
      do
        unint64_t v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    unint64_t v39 = v63;
    if (v63)
    {
      int v40 = (unint64_t *)&v63->__shared_owners_;
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    unint64_t v42 = v62;
    if (v62)
    {
      uint64_t v43 = (unint64_t *)&v62->__shared_owners_;
      do
        unint64_t v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    uint64_t v45 = v61;
    if (v61)
    {
      uint64_t v46 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    if (v58 && &v59 != __p) {
      operator delete(__p);
    }
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v56);
  }

  return v48;
}

void sub_1880BC8F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::__shared_weak_count *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, std::__shared_weak_count *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, _Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a25) {
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  }
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      unint64_t v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }

  if (a31)
  {
    __int128 v74 = (unint64_t *)&a31->__shared_owners_;
    do
      unint64_t v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }

  __int128 v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    __int128 v77 = (unint64_t *)&v76->__shared_owners_;
    do
      unint64_t v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    int v80 = (unint64_t *)&v79->__shared_owners_;
    do
      unint64_t v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  int v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    __int128 v83 = (unint64_t *)&v82->__shared_owners_;
    do
      unint64_t v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  __int128 v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    __int128 v86 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }

  __int128 v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    __int128 v89 = (unint64_t *)&v88->__shared_owners_;
    do
      unint64_t v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }

  __int128 v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    __int128 v92 = (unint64_t *)&v91->__shared_owners_;
    do
      unint64_t v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  if (a72)
  {
    if (&STACK[0x200] != __p) {
      operator delete(__p);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

uint64_t diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  dummy_shared_ptr = details::get_dummy_shared_ptr();
  uint64_t v10 = dummy_shared_ptr;
  unint64_t v11 = *(uint64_t **)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = (void *)(a4 + 24);
  *(void *)a4 = a4 + 24;
  __int128 v14 = xmmword_188178830;
  *(_OWORD *)(a4 + _Block_object_dispose(va, 8) = xmmword_188178830;
  uint64_t v15 = (v12 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v12) {
    unint64_t v16 = v15 + 1;
  }
  else {
    unint64_t v16 = 0LL;
  }
  if (v16 < 6)
  {
    if (v12)
    {
      uint64_t v30 = v15 + 1;
      do
      {
        uint64_t v31 = *v11;
        uint64_t v32 = dummy_shared_ptr[1];
        if (v32)
        {
          unint64_t v33 = (unint64_t *)(v32 + 8);
          do
            unint64_t v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }

        uint64_t v35 = v11[1];
        void *v13 = v31;
        v13[1] = v32;
        v13[2] = v35;
        v11 += 2;
        v13 += 3;
        --v30;
      }

      while (v30);
    }

    else
    {
      unint64_t v16 = 0LL;
    }
  }

  else
  {
    if (v16 >= 0x555555555555556LL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v9);
    }
    __int128 v17 = (char *)operator new(24 * v16);
    uint64_t v18 = *(void **)a4;
    if (*(void *)a4)
    {
      uint64_t v40 = a2;
      uint64_t v19 = a3;
      uint64_t v20 = *(void *)(a4 + 8);
      if (v20)
      {
        uint64_t v21 = *(void *)a4;
        do
        {
          --v20;
          uint64_t v21 = std::shared_ptr<char>::~shared_ptr[abi:ne180100](v21) + 24;
        }

        while (v20);
      }

      *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
      a3 = v19;
      a2 = v40;
      if (v13 != v18) {
        operator delete(v18);
      }
    }

    *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v16;
    *(void *)a4 = v17;
    if (v12)
    {
      uint64_t v22 = &v11[2 * v12];
      unint64_t v23 = v17;
      __int128 v14 = xmmword_188178830;
      do
      {
        uint64_t v24 = *v11;
        uint64_t v25 = v10[1];
        if (v25)
        {
          unint64_t v26 = (unint64_t *)(v25 + 8);
          do
            unint64_t v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }

        uint64_t v28 = v11[1];
        *(void *)unint64_t v23 = v24;
        *((void *)v23 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v25;
        *((void *)v23 + 2) = v28;
        v11 += 2;
        v23 += 24;
      }

      while (v11 != v22);
      uint64_t v29 = *(void *)(a4 + 8);
    }

    else
    {
      uint64_t v29 = 0LL;
      unint64_t v23 = v17;
      __int128 v14 = xmmword_188178830;
    }

    unint64_t v16 = v29 - 0x5555555555555555LL * ((v23 - v17) >> 3);
  }

  *(void *)(a4 + 144) = a4 + 168;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v16;
  *(_OWORD *)(a4 + 152) = v14;
  boost::container::vector<unsigned long,boost::container::small_vector_allocator<unsigned long,boost::container::new_allocator<void>,void>,void>::priv_resize<boost::container::value_init_t,boost::move_detail::integral_constant<unsigned int,1u>>( a4 + 144,  v16);
  uint64_t v36 = *(void *)(a4 + 8);
  uint64_t v44 = *(void *)a4;
  uint64_t v37 = v44 + 24 * v36;
  uint64_t v38 = *(void *)(a4 + 152);
  unint64_t v42 = *(unint64_t **)(a4 + 144);
  uint64_t v43 = v37;
  unint64_t v41 = &v42[v38];
  return sg_vec_ref::sg_vec_ref(a4 + 208, &v44, &v43, &v42, &v41, a2, a3);
}

void sub_1880BCD64(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 160))
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector(v1);
  _Unwind_Resume(a1);
}

unint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_2::__invoke( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  uint64_t v8 = (DiskImage::Context **)(a2 + 8);
  unint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8LL) + 24LL))(*(void *)(*(void *)(a2 + 8) + 8LL));
  uint64_t v10 = (diskimage_uio *)(*(uint64_t (**)(void))(**((void **)*v8 + 1) + 24LL))(*((void *)*v8 + 1));
  diskimage_uio::create_sg_vec_from_buffer(v10, a4, a3, a5, v50);
  unint64_t v11 = *v8;
  sg_vec_ref::begin((sg_vec_ref *)v54, (uint64_t)v47);
  sg_vec_ref::end((sg_vec_ref *)v54, (uint64_t)v44);
  unint64_t v12 = DiskImage::Context::write( v11,  (const sg_vec_ns::details::sg_vec_iterator *)v47,  (const sg_vec_ns::details::sg_vec_iterator *)v44);
  uint64_t v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v45;
  if (v45)
  {
    __int128 v17 = (unint64_t *)&v45->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = v49;
  if (v49)
  {
    uint64_t v20 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v48;
  if (v48)
  {
    unint64_t v23 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  if ((v12 & 0x8000000000000000LL) == 0) {
    v12 /= v9;
  }
  uint64_t v25 = v60;
  if (v60)
  {
    unint64_t v26 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v59;
  if (v59)
  {
    uint64_t v29 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  uint64_t v31 = v58;
  if (v58)
  {
    uint64_t v32 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  unint64_t v34 = v57;
  if (v57)
  {
    uint64_t v35 = (unint64_t *)&v57->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  uint64_t v37 = v56;
  if (v56)
  {
    uint64_t v38 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  uint64_t v40 = v55;
  if (v55)
  {
    unint64_t v41 = (unint64_t *)&v55->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  if (v52 && &v53 != __p) {
    operator delete(__p);
  }
  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v50);
  return v12;
}

void sub_1880BD0EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::__shared_weak_count *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, std::__shared_weak_count *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, _Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a25) {
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  }
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      unint64_t v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }

  if (a31)
  {
    __int128 v74 = (unint64_t *)&a31->__shared_owners_;
    do
      unint64_t v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }

  __int128 v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    __int128 v77 = (unint64_t *)&v76->__shared_owners_;
    do
      unint64_t v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    int v80 = (unint64_t *)&v79->__shared_owners_;
    do
      unint64_t v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  int v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    __int128 v83 = (unint64_t *)&v82->__shared_owners_;
    do
      unint64_t v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  __int128 v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    __int128 v86 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }

  __int128 v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    __int128 v89 = (unint64_t *)&v88->__shared_owners_;
    do
      unint64_t v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }

  __int128 v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    __int128 v92 = (unint64_t *)&v91->__shared_owners_;
    do
      unint64_t v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  if (a72)
  {
    if (&STACK[0x200] != __p) {
      operator delete(__p);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_3::__invoke( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 8) + 8LL) + 24LL))(*(void *)(*(void *)(a2 + 8) + 8LL));
  uint64_t v10 = v9 * a4;
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = v9;
  unint64_t v12 = -1LL;
  uint64_t v13 = 8LL;
  unint64_t v14 = v9 * a4;
  do
  {
    unint64_t v15 = *(void *)(a3 + v13);
    BOOL v16 = v14 >= v15;
    v14 -= v15;
    if (!v16) {
      return -22LL;
    }
    ++v12;
    v13 += 16LL;
  }

  while (v14);
  unint64_t v48 = v12 + 1;
  if (v12 <= 0x7FFFFFFFFFFFFFFELL)
  {
    uint64_t v53 = a3;
    __int128 v54 = (std::__shared_weak_count *)(v12 + 1);
    diskimage_uio::io_vec_to_sg_vec<std::span<iovec const,18446744073709551615ul>>( (uint64_t)&v53,  v9 * a5,  v10,  (uint64_t)v56);
    __int128 v17 = *(DiskImage::Context **)(a2 + 8);
    sg_vec_ref::begin((sg_vec_ref *)v60, (uint64_t)&v53);
    sg_vec_ref::end((sg_vec_ref *)v60, (uint64_t)v50);
    unint64_t v48 = DiskImage::Context::write( v17,  (const sg_vec_ns::details::sg_vec_iterator *)&v53,  (const sg_vec_ns::details::sg_vec_iterator *)v50);
    unint64_t v18 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    unint64_t v21 = v51;
    if (v51)
    {
      uint64_t v22 = (unint64_t *)&v51->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    unint64_t v24 = v55;
    if (v55)
    {
      uint64_t v25 = (unint64_t *)&v55->__shared_owners_;
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    unint64_t v27 = v54;
    if (v54)
    {
      uint64_t v28 = (unint64_t *)&v54->__shared_owners_;
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }

    if ((v48 & 0x8000000000000000LL) == 0) {
      v48 /= v11;
    }
    unint64_t v30 = v66;
    if (v66)
    {
      uint64_t v31 = (unint64_t *)&v66->__shared_owners_;
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    unint64_t v33 = v65;
    if (v65)
    {
      unint64_t v34 = (unint64_t *)&v65->__shared_owners_;
      do
        unint64_t v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    unint64_t v36 = v64;
    if (v64)
    {
      uint64_t v37 = (unint64_t *)&v64->__shared_owners_;
      do
        unint64_t v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    unint64_t v39 = v63;
    if (v63)
    {
      uint64_t v40 = (unint64_t *)&v63->__shared_owners_;
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    unint64_t v42 = v62;
    if (v62)
    {
      uint64_t v43 = (unint64_t *)&v62->__shared_owners_;
      do
        unint64_t v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    uint64_t v45 = v61;
    if (v61)
    {
      uint64_t v46 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    if (v58 && &v59 != __p) {
      operator delete(__p);
    }
    boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)v56);
  }

  return v48;
}

void sub_1880BD6A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, std::__shared_weak_count *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, std::__shared_weak_count *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, _Unwind_Exception *a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a25) {
    diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  }
  diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_0::__invoke();
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      unint64_t v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
      std::__shared_weak_count::__release_weak(a45);
    }
  }

  if (a31)
  {
    __int128 v74 = (unint64_t *)&a31->__shared_owners_;
    do
      unint64_t v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
      std::__shared_weak_count::__release_weak(a31);
    }
  }

  __int128 v76 = (std::__shared_weak_count *)STACK[0x410];
  if (STACK[0x410])
  {
    __int128 v77 = (unint64_t *)&v76->__shared_owners_;
    do
      unint64_t v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  uint64_t v79 = (std::__shared_weak_count *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    int v80 = (unint64_t *)&v79->__shared_owners_;
    do
      unint64_t v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

  int v82 = (std::__shared_weak_count *)STACK[0x370];
  if (STACK[0x370])
  {
    __int128 v83 = (unint64_t *)&v82->__shared_owners_;
    do
      unint64_t v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }

  __int128 v85 = (std::__shared_weak_count *)STACK[0x300];
  if (STACK[0x300])
  {
    __int128 v86 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }

  __int128 v88 = (std::__shared_weak_count *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    __int128 v89 = (unint64_t *)&v88->__shared_owners_;
    do
      unint64_t v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }

  __int128 v91 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    __int128 v92 = (unint64_t *)&v91->__shared_owners_;
    do
      unint64_t v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  if (a72)
  {
    if (&STACK[0x200] != __p) {
      operator delete(__p);
    }
  }

  boost::container::vector<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::shared_ptr<char>,unsigned long>,boost::container::new_allocator<void>,void>,void>::~vector((uint64_t)&a52);
  _Unwind_Resume(a50);
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_4::__invoke( uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = DiskImage::Context::unmap(*(void **)(a2 + 8));
  if (v4 < 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = -v4;
  }
  if (v4) {
    return v5;
  }
  else {
    return a3;
  }
}

uint64_t diskimage_uio::details::setup_sync_subscriber(io_rings_subscriber_sync_t &)::$_5::__invoke( uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a3)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
      uint64_t result = DiskImage::Context::flush(*(void **)(a2 + 8));
      break;
    default:
      a3 = 4294967274LL;
LABEL_3:
      uint64_t result = a3;
      break;
  }

  return result;
}

void diskimage_uio::details::setup_di_subscriber<di_hybrid_subscriber_t>(di_hybrid_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke( di_hybrid_subscriber_t *a1)
{
  if (a1)
  {
    di_hybrid_subscriber_t::~di_hybrid_subscriber_t(a1);
    operator delete(v1);
  }

void diskimage_uio::details::setup_di_subscriber<io_rings_di_subscriber_t>(io_rings_di_subscriber_t &,io_rings_desc_t *)::{lambda(io_rings_subscriber_sync_t *)#1}::__invoke( void *a1)
{
  if (a1)
  {
    unsigned __int8 v2 = a1 + 31;
    uint64_t v3 = (void *)a1[34];
    if (v3 == v2)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v2;
    }

    else
    {
      if (!v3)
      {
LABEL_8:
        pool_ns::pool_t<DiskImage::Context,std::default_delete>::~pool_t((uint64_t)(a1 + 15));
        operator delete(a1);
        return;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }

void *std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_18A1D55B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_18A1D55B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::operator()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return diskimage_uio::details::diskimage_impl::create_context_impl( *(diskimage_uio::details::diskimage_impl **)(*(void *)(a1 + 8) + 240LL),  a2);
}

uint64_t std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0,std::allocator<io_rings_di_subscriber_t::io_rings_di_subscriber_t(io_rings_desc_t *,diskimage_uio::details::diskimage_impl &,std::function<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)> const&)::$_0>,diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1880BDB40(_Unwind_Exception *exception_object)
{
}

__n128 diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<diskimage_uio::diskimage_open_params,std::error_code>::swap( diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  if (*((_BYTE *)this + 16)) {
    BOOL v4 = *((_BYTE *)a2 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v9[0] = *(void *)this;
    *(void *)this = 0LL;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }

  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = *(void *)this;
      *(void *)this = 0LL;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      char v6 = *((_BYTE *)this + 16);
      *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v6;
      return result;
    }
  }

  else if (*((_BYTE *)a2 + 16))
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0LL;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)this = v7;
    v9[0] = 0LL;
    char v8 = *((_BYTE *)this + 16);
    *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v8;
    goto LABEL_11;
  }

  __n128 result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void OUTLINED_FUNCTION_0(unint64_t *a1@<X8>)
{
  unint64_t v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_1(_OWORD *a1)
{
  *(_OWORD *)uint64_t v1 = *a1;
  *(_BYTE *)(v1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0;
  __cxa_end_catch();
}

uint64_t OUTLINED_FUNCTION_2()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

  ;
}

  ;
}

void *OUTLINED_FUNCTION_7(void *a1)
{
  return __cxa_begin_catch(a1);
}

void OUTLINED_FUNCTION_8()
{
}

void OUTLINED_FUNCTION_9()
{
}

void OUTLINED_FUNCTION_10()
{
}

  ;
}

void OUTLINED_FUNCTION_12()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + _Block_object_dispose(va, 8) = v1;
}

void *rawTestPluginCreate()
{
  return &rawTestPlugin_t::get_plugin(void)::plugin;
}

void *rawTestPlugin_t::Create(uint64_t a1)
{
  uint64_t v2 = operator new(0x68uLL);
  rawTestPlugin_t::rawTestPlugin_t((uint64_t)v2, a1);
  return v2;
}

void sub_1880BDD44(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v3;
  operator delete(v5);
  if (a2 == 1)
  {
    uint64_t v7 = (rawTestPlugin_t *)__cxa_begin_catch(a1);
    rawTestPlugin_t::CreationError(v7, v2, v8);
    __cxa_end_catch();
    JUMPOUT(0x1880BDD30LL);
  }

  _Unwind_Resume(a1);
}

double rawTestPlugin_t::Decode(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = off_18A1D5D88;
    unint64_t v14 = std::generic_category();
    exception[1] = v4;
    exception[2] = v14;
    exception[3] = "Cannot decode file descriptor";
  }

  uint64_t v19 = 0LL;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "path", &v19);
  unsigned int v6 = v5;
  if (v5 <= 0)
  {
    unint64_t v15 = __cxa_allocate_exception(0x20uLL);
    void *v15 = off_18A1D5D88;
    BOOL v16 = std::generic_category();
    v15[1] = v6;
    v15[2] = v16;
    void v15[3] = "Cannot decode path";
  }

  uint64_t v7 = [NSString stringWithUTF8String:v19];
  (*(void (**)(char *))(a1 + 16))(v19);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "writable", &v19);
  unsigned int v9 = v8;
  if (v8 != 1)
  {
    __int128 v17 = __cxa_allocate_exception(0x20uLL);
    void *v17 = off_18A1D5D88;
    unint64_t v18 = std::generic_category();
    v17[1] = v9;
    void v17[2] = v18;
    v17[3] = "Cannot decode writable";
  }

  char v10 = *v19;
  (*(void (**)(void))(a1 + 16))();
  unint64_t v11 = operator new(0x68uLL);
  v11[11] = v7;
  *((_BYTE *)v11 + 96) = v10;
  *((_DWORD *)v11 + 25) = v4;
  *(void *)&double result = 88LL;
  void *v11 = 88LL;
  v11[1] = rawTestPlugin_t::GetBlockSize;
  v11[2] = rawTestPlugin_t::GetNrBlocks;
  void v11[3] = rawTestPlugin_t::IsWritable;
  v11[4] = rawTestPlugin_t::GetPreferredAlignment;
  v11[5] = rawTestPlugin_t::GetPreferredSize;
  v11[6] = rawTestPlugin_t::GetUUID;
  v11[7] = rawTestPlugin_t::GetSubscriber;
  v11[8] = rawTestPlugin_t::Encode;
  v11[9] = rawTestPlugin_t::ReleaseImage;
  v11[10] = 0LL;
  return result;
}

void sub_1880BDFDC(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (rawTestPlugin_t *)__cxa_begin_catch(exception_object);
    rawTestPlugin_t::CreationError(v3, v2, v4);
    __cxa_end_catch();
    JUMPOUT(0x1880BDEDCLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t rawTestPlugin_t::Description(rawTestPlugin_t *this, const __CFDictionary *a2)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t rawTestPlugin_t::rawTestPlugin_t(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(void *)a1 = 88LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = rawTestPlugin_t::GetBlockSize;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = rawTestPlugin_t::GetNrBlocks;
  *(void *)(a1 + 24) = rawTestPlugin_t::IsWritable;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = rawTestPlugin_t::GetPreferredAlignment;
  *(void *)(a1 + 40) = rawTestPlugin_t::GetPreferredSize;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = rawTestPlugin_t::GetUUID;
  *(void *)(a1 + 56) = rawTestPlugin_t::GetSubscriber;
  *(void *)(a1 + 64) = rawTestPlugin_t::Encode;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = rawTestPlugin_t::ReleaseImage;
  *(void *)(a1 + 80) = 0LL;
  int v6 = open((const char *)[v4 fileSystemRepresentation], *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = *__error();
    void *exception = off_18A1D5D88;
    char v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }

  return a1;
}

void sub_1880BE184(_Unwind_Exception *a1)
{
}

uint64_t rawTestPlugin_t::CreationError(rawTestPlugin_t *this, const pluginException_t *a2, __CFError **a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    uint64_t v7 = (*(uint64_t (**)(rawTestPlugin_t *))(*(void *)this + 16LL))(this);
    int v8 = *((_DWORD *)this + 2);
    *(_DWORD *)uint64_t buf = 68158466;
    int v15 = 97;
    __int16 v16 = 2080;
    __int128 v17 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = (*(uint64_t (**)(rawTestPlugin_t *))(*(void *)this + 16LL))(this);
      int v12 = *((_DWORD *)this + 2);
      *(_DWORD *)uint64_t buf = 68158466;
      int v15 = 97;
      __int16 v16 = 2080;
      __int128 v17 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      _os_log_impl( &dword_188046000,  v10,  OS_LOG_TYPE_ERROR,  "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)",  buf,  0x22u);
    }
  }

  *__error() = v5;
  if (a2)
  {
    *(void *)a2 = [MEMORY[0x189607870] errorWithDomain:*MEMORY[0x189607688] code:*((int *)this + 2) userInfo:0];
  }

  return 0LL;
}

void pluginException_t::pluginException_t(pluginException_t *this, const char *a2, unsigned int a3)
{
  *(void *)this = off_18A1D5D88;
  int v6 = std::generic_category();
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = a3;
  *((void *)this + 2) = v6;
  *((void *)this + 3) = a2;
}

uint64_t rawTestPlugin_t::GetBlockSize()
{
  return 512LL;
}

unint64_t rawTestPlugin_t::GetNrBlocks(rawTestPlugin_t *a1)
{
  return (unint64_t)v2.st_size >> 9;
}

BOOL rawTestPlugin_t::IsWritable(uint64_t a1)
{
  return *(_BYTE *)(a1 + 96) != 0;
}

uint64_t rawTestPlugin_t::GetPreferredAlignment()
{
  return 1024LL;
}

uint64_t rawTestPlugin_t::GetPreferredSize()
{
  return 1024LL;
}

void rawTestPlugin_t::ReleaseImage(rawTestPlugin_t *a1)
{
  if (a1)
  {
    rawTestPlugin_t::~rawTestPlugin_t(a1);
    operator delete(v1);
  }

uint64_t rawTestPlugin_t::get_stat@<X0>(rawTestPlugin_t *this@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*((_DWORD *)this + 25), a2);
  if ((_DWORD)result)
  {
    exception = (pluginException_t *)__cxa_allocate_exception(0x20uLL);
    unsigned int v4 = __error();
    pluginException_t::pluginException_t(exception, "fstat failed", *v4);
  }

  return result;
}

void sub_1880BE4F0(_Unwind_Exception *a1)
{
}

CFUUIDRef rawTestPlugin_t::get_uuid(id *this)
{
  __int128 v5[2] = *MEMORY[0x1895F89C0];
  v5[0] = 0LL;
  v5[1] = 0LL;
  uint64_t v1 = boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()( (uint64_t)v5,  (char *)[this[11] UTF8String],  objc_msgSend(this[11], "length"));
  uint64_t v3 = v2;
  *(void *)&v6.byte0 = v1;
  *(void *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0LL, v6);
}

uint64_t boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::operator()( uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  __int128 v13 = xmmword_18817C3E0;
  int v14 = -1009589776;
  unint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  uint64_t v16 = 0LL;
  do
  {
    char v7 = *(_BYTE *)(a1 + v6);
    uint64_t v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      uint64_t v16 = 0LL;
      boost::uuids::detail::sha1::process_block(&v13);
    }

    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0LL;
      if (v18 > 0xFFFFFFFE)
      {
        MEMORY[0x1895BBFB4](&v12, "sha1 too many bytes");
        boost::throw_exception<std::runtime_error>(&v12);
      }

      ++v18;
    }

    else
    {
      v17 += 8LL;
    }

    ++v6;
  }

  while (v6 != 16);
  for (; a3; --a3)
  {
    char v9 = *a2;
    uint64_t v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      uint64_t v16 = 0LL;
      boost::uuids::detail::sha1::process_block(&v13);
    }

    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0LL;
      if (v18 > 0xFFFFFFFE)
      {
        MEMORY[0x1895BBFB4](&v12, "sha1 too many bytes");
        boost::throw_exception<std::runtime_error>(&v12);
      }

      ++v18;
    }

    else
    {
      v17 += 8LL;
    }

    ++a2;
  }

  return boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::hash_to_uuid( a1,  (boost::uuids::detail::sha1 *)&v13);
}

void sub_1880BE7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t boost::uuids::basic_name_generator<boost::uuids::detail::sha1>::hash_to_uuid( int a1, boost::uuids::detail::sha1 *this)
{
  __int128 v5[2] = *MEMORY[0x1895F89C0];
  boost::uuids::detail::sha1::get_digest(this, (unsigned int (*)[5])v4);
  for (uint64_t i = 0LL; i != 4; ++i)
    *(_DWORD *)((char *)v5 + i * 4) = bswap32(v4[i]);
  BYTE6(v5[0]) = BYTE6(v5[0]) & 0xF | 0x50;
  return v5[0];
}

void boost::throw_exception<std::runtime_error>(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = std::runtime_error::runtime_error(exception, a1);
  __cxa_throw(v3, MEMORY[0x1896146E8], (void (*)(void *))MEMORY[0x189614248]);
}

_DWORD *boost::uuids::detail::sha1::process_block(_DWORD *this)
{
  uint64_t v1 = 0LL;
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (const char *)(this + 5);
  int8x16x4_t v41 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v41.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v41.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v41.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v41.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }

  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v41.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v41.val[2].i8);
  int8x16_t v15 = vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL),  (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v41.val[3]);
  v41.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v41.val[3].i8);
  void v39[3] = vorrq_s8( vorrq_s8( vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)),  (int8x16_t)vmovl_high_u16(v16));
  void v39[2] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL),  (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8( vorrq_s8( vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)),  (int8x16_t)vmovl_high_u16((uint16x8_t)v41.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v41.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + vstd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v17 >> 31;
    v1 += 4LL;
  }

  while (v1 != 256);
  unint64_t v18 = 0LL;
  int v19 = this[1];
  int v21 = this[3];
  int v20 = this[4];
  int v22 = v20;
  int v23 = this[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *this;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    int v31 = v25 ^ v26 ^ v24;
    int v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      int v33 = -1894007588;
    }

    else
    {
      int v32 = v31;
      int v33 = -899497514;
    }

    if (v18 <= 0x27)
    {
      int v34 = 1859775393;
    }

    else
    {
      int v31 = v32;
      int v34 = v33;
    }

    if (v18 <= 0x13) {
      int v31 = v30 & ~v26 | v29 & v26;
    }
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    int v35 = v36 >> 27;
    if (v18 <= 0x13) {
      int v34 = 1518500249;
    }
    int v37 = v22 + v31 + v35 + v34;
    HIDWORD(v3_Block_object_dispose(va, 8) = v26;
    LODWORD(v3_Block_object_dispose(va, 8) = v26;
    int v25 = v38 >> 2;
    int v27 = v37 + *((_DWORD *)v39 + v18++);
    int v22 = v30;
    int v24 = v29;
    int v26 = v28;
  }

  while (v18 != 80);
  *this += v27;
  this[1] = v28 + v19;
  this[2] = v25 + v23;
  this[3] = v29 + v21;
  this[4] = v30 + v20;
  return this;
}

_DWORD *boost::uuids::detail::sha1::get_digest(_DWORD *this, unsigned int (*a2)[5])
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4 + 1;
  *((_BYTE *)this + v4 + 20) = 0x80;
  unint64_t v5 = *((void *)this + 11);
  if (v5 == 64)
  {
    *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    this = boost::uuids::detail::sha1::process_block(this);
    unint64_t v5 = *(void *)(v3 + 88);
  }

  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *(void *)(v3 + 8_Block_object_dispose(va, 8) = v5 + 1;
        *(_BYTE *)(v3 + v5 + 20) = 0;
        unint64_t v5 = *(void *)(v3 + 88);
      }

      while (v5 < 0x38);
    }
  }

  else
  {
    do
    {
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v5 + 1;
      *(_BYTE *)(v3 + v5 + 20) = 0;
      unint64_t v5 = *(void *)(v3 + 88);
      if (v5 == 64)
      {
        *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
        this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
        unint64_t v5 = *(void *)(v3 + 88);
      }
    }

    while (v5);
    unint64_t v6 = 0LL;
    do
    {
      unint64_t v5 = v6 + 1;
      *(_BYTE *)(v3 + 20 + v6) = 0;
    }

    while (v6++ < 0x37);
  }

  uint64_t v8 = *(void *)(v3 + 104) >> 24;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v5 + 1;
  *(_BYTE *)(v3 + v5 + 20) = v8;
  uint64_t v9 = *(void *)(v3 + 88);
  if (v9 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v9 = *(void *)(v3 + 88);
  }

  uint64_t v10 = *(void *)(v3 + 104) >> 16;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v9 + 1;
  *(_BYTE *)(v3 + v9 + 20) = v10;
  uint64_t v11 = *(void *)(v3 + 88);
  if (v11 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v11 = *(void *)(v3 + 88);
  }

  uint64_t v12 = *(void *)(v3 + 104) >> 8;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v11 + 1;
  *(_BYTE *)(v3 + v11 + 20) = v12;
  uint64_t v13 = *(void *)(v3 + 88);
  if (v13 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v13 = *(void *)(v3 + 88);
  }

  uint64_t v14 = *(void *)(v3 + 104);
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v13 + 1;
  *(_BYTE *)(v3 + v13 + 20) = v14;
  uint64_t v15 = *(void *)(v3 + 88);
  if (v15 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v15 = *(void *)(v3 + 88);
  }

  uint64_t v16 = *(void *)(v3 + 96) >> 24;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v15 + 1;
  *(_BYTE *)(v3 + v15 + 20) = v16;
  uint64_t v17 = *(void *)(v3 + 88);
  if (v17 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v17 = *(void *)(v3 + 88);
  }

  uint64_t v18 = *(void *)(v3 + 96) >> 16;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v17 + 1;
  *(_BYTE *)(v3 + v17 + 20) = v18;
  uint64_t v19 = *(void *)(v3 + 88);
  if (v19 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v19 = *(void *)(v3 + 88);
  }

  uint64_t v20 = *(void *)(v3 + 96) >> 8;
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v19 + 1;
  *(_BYTE *)(v3 + v19 + 20) = v20;
  uint64_t v21 = *(void *)(v3 + 88);
  if (v21 == 64)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
    uint64_t v21 = *(void *)(v3 + 88);
  }

  uint64_t v22 = *(void *)(v3 + 96);
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v21 + 1;
  *(_BYTE *)(v3 + v21 + 20) = v22;
  if (*(void *)(v3 + 88) == 64LL)
  {
    *(void *)(v3 + 8_Block_object_dispose(va, 8) = 0LL;
    this = boost::uuids::detail::sha1::process_block((_DWORD *)v3);
  }

  (*a2)[0] = *(_DWORD *)v3;
  (*a2)[1] = *(_DWORD *)(v3 + 4);
  (*a2)[2] = *(_DWORD *)(v3 + 8);
  (*a2)[3] = *(_DWORD *)(v3 + 12);
  (*a2)[4] = *(_DWORD *)(v3 + 16);
  return this;
}

void *rawTestPlugin_t::get_subscriber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[10] = 0LL;
  v4[11] = 0LL;
  v4[9] = 0LL;
  _BYTE v4[12] = dispatch_queue_create("com.apple.di_raw_test_plugin", MEMORY[0x1895F8AF8]);
  v4[13] = 850045863LL;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  v4[20] = 0LL;
  *uint64_t v4 = rawTestPlugin_t::AddSQE;
  v4[1] = rawTestPlugin_t::Execute;
  void v4[2] = rawTestPlugin_t::IsAsync;
  v4[3] = rawTestPlugin_t::Suspend;
  void v4[4] = rawTestPlugin_t::Resume;
  unsigned int v4[5] = rawTestPlugin_t::Cancel;
  v4[7] = a2;
  v4[8] = a1;
  v4[6] = rawTestPlugin_t::ReleaseSubscriber;
  return v4;
}

uint64_t rawTestPlugin_t::IsAsync()
{
  return 1LL;
}

void rawTestPlugin_t::ReleaseSubscriber(uint64_t a1)
{
  if (a1)
  {
    std::mutex::~mutex((std::mutex *)(a1 + 104));

    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }

    operator delete((void *)a1);
  }

uint64_t rawTestPlugin_t::subscriber_t::_addSQE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( a1 + 88,  v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    char v7 = v14 + 8;
    uint64_t v17 = *(char **)(a1 + 72);
    uint64_t v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      uint64_t v16 = *(char **)(a1 + 72);
    }

    *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v14;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    void *v6 = a2;
    char v7 = v6 + 1;
  }

  *(void *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0LL;
}

void sub_1880BEF80(_Unwind_Exception *a1)
{
}

void rawTestPlugin_t::subscriber_t::_execute(rawTestPlugin_t::subscriber_t *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 104);
  std::mutex::lock((std::mutex *)((char *)this + 104));
  uint64_t v3 = (void *)*((void *)this + 9);
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0LL;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  *((void *)this + 9) = 0LL;
  std::mutex::unlock(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( MEMORY[0x189614538],  (uint64_t)"raw plugin: going to execute ",  29LL);
  unint64_t v5 = (void *)std::ostream::operator<<();
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" SQEs", 5LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24LL)));
  char v7 = std::locale::use_facet(&v13, MEMORY[0x189614558]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10LL);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = (dispatch_queue_s *)*((void *)this + 12);
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3321888768LL;
  block[2] = ___ZN15rawTestPlugin_t12subscriber_t8_executeEv_block_invoke;
  block[3] = &__block_descriptor_64_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE_e5_v8__0l;
  block[4] = this;
  std::string __p = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>( &__p,  v3,  v4,  (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v8, block);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }

  if (v3) {
    operator delete(v3);
  }
}

void sub_1880BF0F0(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *___ZN15rawTestPlugin_t12subscriber_t8_executeEv_block_invoke(void *result)
{
  uint64_t v1 = (uint64_t **)result[5];
  uint64_t v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    uint64_t v3 = result[4];
    uint64_t v4 = (uint64_t (*)(void))MEMORY[0x1895FC888];
    unint64_t v5 = (uint64_t (*)(void))MEMORY[0x1895FCBA8];
    do
    {
      unint64_t v6 = *v1;
      unsigned int v7 = -45;
      switch(*(_BYTE *)*v1)
      {
        case 2:
          unsigned int iov = rawTestPlugin_t::do_io<io_rings_sqe_op_read_iov_t>(*(void *)(v3 + 64), v6 + 3, v4);
          goto LABEL_7;
        case 4:
          unsigned int iov = rawTestPlugin_t::do_io<io_rings_sqe_op_write_iov_t>(*(void *)(v3 + 64), v6 + 3, v5);
          goto LABEL_7;
        case 5:
          unsigned int iov = rawTestPlugin_t::flush(*(rawTestPlugin_t **)(v3 + 64));
LABEL_7:
          unsigned int v7 = iov;
          break;
        case 6:
          unsigned int v7 = 0;
          break;
        default:
          break;
      }

      uint64_t result = (void *)io_rings_return_status(*(void *)(v3 + 56), (uint64_t)v6, v7, 0);
      ++v1;
    }

    while (v1 != v2);
  }

  return result;
}

uint64_t rawTestPlugin_t::do_io<io_rings_sqe_op_read_iov_t>( uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }

    int v6 = -22;
  }

  else
  {
    int v6 = 0;
  }

void sub_1880BF450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::do_io<io_rings_sqe_op_write_iov_t>( uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }

    int v6 = -22;
  }

  else
  {
    int v6 = 0;
  }

void sub_1880BF6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t rawTestPlugin_t::flush(rawTestPlugin_t *this)
{
  uint64_t result = fcntl(*((_DWORD *)this + 25), 51, 0LL);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result) {
      return result;
    }
    goto LABEL_8;
  }

  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (uint64_t result = fsync(*((_DWORD *)this + 25)), (_DWORD)result))
  {
LABEL_8:
    int v3 = *__error();
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }

  return result;
}

void *__copy_helper_block_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0LL;
  return std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>( v2,  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void __destroy_helper_block_ea8_40c58_ZTSNSt3__16vectorIPK14io_rings_sqe_tNS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

void *std::vector<io_rings_sqe_t const*>::__init_with_size[abi:ne180100]<io_rings_sqe_t const**,io_rings_sqe_t const**>( void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1880BF808(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *std::vector<io_rings_sqe_t const*>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<std::unique_ptr<diskimage_uio::stack_image_node const>>::allocate_at_least[abi:ne180100]( (uint64_t)(a1 + 2),  a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_suspend(rawTestPlugin_t::subscriber_t *this)
{
  *(void *)&__int128 v2 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((void *)&v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 39LL;
  int v3 = 0;
  di_log::logger<di_log::log_printer<121ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Suspended", 9LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x1895BC2CC](&v6);
}

void sub_1880BF8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<121ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<121ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D5710;
  a1[45] = &unk_18A1D5810;
  a1[46] = &unk_18A1D5838;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D5710;
  a1[45] = &unk_18A1D5798;
  a1[46] = &unk_18A1D57C0;
  return a1;
}

void sub_1880BF980(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D58A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880BFA4C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D58A8;
  di_log::logger_buf<di_log::log_printer<121ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<121ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<121ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<121ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<121ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<121ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<121ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880BFE00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<121ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 121LL;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 121LL;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_resume(rawTestPlugin_t::subscriber_t *this)
{
  *(void *)&__int128 v2 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((void *)&v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 38LL;
  int v3 = 0;
  di_log::logger<di_log::log_printer<122ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Resumed", 7LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x1895BC2CC](&v6);
}

void sub_1880C00A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<122ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<122ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D5930;
  a1[45] = &unk_18A1D5A30;
  a1[46] = &unk_18A1D5A58;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D5930;
  a1[45] = &unk_18A1D59B8;
  a1[46] = &unk_18A1D59E0;
  return a1;
}

void sub_1880C0138(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D5AC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880C0204(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D5AC8;
  di_log::logger_buf<di_log::log_printer<122ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<122ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<122ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<122ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<122ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<122ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<122ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880C05B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<122ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 122LL;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 122LL;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t rawTestPlugin_t::subscriber_t::_cancel(dispatch_queue_t *this)
{
  *(void *)&__int128 v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((void *)&v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 38LL;
  int v3 = 0;
  di_log::logger<di_log::log_printer<118ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cancelled", 9LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf((uint64_t)v4);
  return MEMORY[0x1895BC2CC](&v6);
}

void sub_1880C0868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<118ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<118ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D5B70;
  a1[45] = &unk_18A1D5C70;
  a1[46] = &unk_18A1D5C98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D5B70;
  a1[45] = &unk_18A1D5BF8;
  a1[46] = &unk_18A1D5C20;
  return a1;
}

void sub_1880C0904(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D5D08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880C09D0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D5D08;
  di_log::logger_buf<di_log::log_printer<118ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<118ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<118ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<118ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<118ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<118ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<118ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880C0D84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<118ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 118LL;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 118LL;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t rawTestPlugin_t::encode( uint64_t a1, void (*a2)(uint64_t, const char *, uint64_t, uint64_t), void (*a3)(uint64_t, const char *, void), uint64_t a4)
{
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1LL);
}

void pluginException_t::~pluginException_t(std::exception *this)
{
}

uint64_t pluginException_t::what(pluginException_t *this)
{
  return *((void *)this + 3);
}

void rawTestPlugin_t::~rawTestPlugin_t(rawTestPlugin_t *this)
{
  *(void *)&__int128 v2 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((void *)&v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 33LL;
  int v3 = 0;
  di_log::logger<di_log::log_printer<325ul>>::logger(v4, &v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Cleaning up!", 12LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v4);
  MEMORY[0x1895BC2CC](&v6);
}

void *di_log::logger<di_log::log_printer<325ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<325ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D5DB8;
  a1[45] = &unk_18A1D5EB8;
  a1[46] = &unk_18A1D5EE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D5DB8;
  a1[45] = &unk_18A1D5E40;
  a1[46] = &unk_18A1D5E68;
  return a1;
}

void sub_1880C1178(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D5F50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880C1244(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D5F50;
  di_log::logger_buf<di_log::log_printer<325ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<325ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<325ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<325ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<325ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<325ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<325ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880C15F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<325ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    getDIOSLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = 325LL;
    __int16 v21 = 2082;
    int v22 = v8;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();

    if (v9)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v9);
    }
  }

  else
  {
    getDIOSLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v11 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *a1;
      else {
        std::locale v13 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v16 = v4;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 325LL;
      __int16 v21 = 2082;
      int v22 = v13;
      _os_log_impl(&dword_188046000, v10, v11, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t io_rings_setup_impl(unsigned int a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t v4 = 4294967274LL;
  if (!a1 || !a2 || !a3 || !a4) {
    return v4;
  }
  if (*(_DWORD *)a2 > 1u) {
    return 4294967251LL;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if (v8 >= 0x10)
  {
    BOOL v10 = *(_DWORD **)(a2 + 8);
    if (v10)
    {
      if (*v10) {
        return 4294967251LL;
      }
    }

    if (v8 >= 0x31
      && (*(_BYTE *)(a2 + 48) || memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v8 - 49)))
    {
      return 4294967251LL;
    }
  }

  os_log_type_t v11 = operator new(0x2D0uLL);
  bzero(v11, 0x2D0uLL);
  unint64_t v36 = v11;
  *((_DWORD *)v11 + 17_Block_object_dispose(va, 8) = 2;
  uint64_t v12 = malloc(0x28uLL);
  if (!v12)
  {
    uint64_t v4 = 4294967284LL;
    goto LABEL_60;
  }

  std::locale v13 = v12;
  *((void *)v12 + 4) = io_rings_setup_impl::$_0::__invoke;
  if (v8 >= 0x18)
  {
    v11[52] = *(void *)(a2 + 16);
    if (v8 >= 0x20)
    {
      v11[53] = *(void *)(a2 + 24);
      if (v8 >= 0x28)
      {
        v11[54] = *(void *)(a2 + 32);
      }
    }
  }

  v11[88] = a4;
  if (a1 >= 0x2000) {
    unsigned int v14 = 0x2000;
  }
  else {
    unsigned int v14 = a1;
  }
  if (a1 + 1 < 0x2000) {
    unsigned int v15 = a1 + 1;
  }
  else {
    unsigned int v15 = 0x2000;
  }
  if ((v15 & (v15 - 1)) != 0)
  {
    char v16 = 0;
    unsigned int v17 = 2 * v15;
    do
    {
      v17 >>= 1;
      ++v16;
    }

    while (v17 != 1);
    unsigned int v15 = 1 << v16;
  }

  uint64_t v18 = mmap(0LL, 88 * v14 + 8 + 4LL * v15, 3, 4097, 0, 0LL);
  unsigned int v19 = v15;
  else {
    uint64_t v20 = v18;
  }
  void *v11 = v20;
  __int16 v21 = mmap(0LL, (16LL * v15) | 8, 3, 4097, 0, 0LL);
  else {
    int v22 = v21;
  }
  v11[1] = v22;
  uint64_t v4 = 4294967284LL;
  if (*v11 && v22)
  {
    std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100]((uint64_t)(v11 + 2));
    uint64_t v23 = *v11;
    uint64_t v24 = v11[1];
    unint64_t v39 = off_18A1D5FF8;
    uint64_t v40 = v11;
    int8x16x4_t v41 = &v39;
    io_rings_sq_t::io_rings_sq_t((uint64_t)(v11 + 2), v23, v24, v14, v19, v19, (uint64_t)&v39);
    __int16 v25 = v41;
    if (v41 == &v39)
    {
      uint64_t v26 = 4LL;
      __int16 v25 = &v39;
    }

    else
    {
      if (!v41) {
        goto LABEL_45;
      }
      uint64_t v26 = 5LL;
    }

    (*v25)[v26]();
LABEL_45:
    *((_BYTE *)v11 + 264) = 1;
    std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100]((uint64_t)(v11 + 34));
    uint64_t v27 = *v11;
    uint64_t v28 = v11[1];
    unint64_t v39 = off_18A1D6088;
    uint64_t v40 = v11;
    int8x16x4_t v41 = &v39;
    v37[0] = off_18A1D6108;
    v37[1] = v11;
    unint64_t v38 = v37;
    io_rings_cq_t::io_rings_cq_t((uint64_t)(v11 + 34), v27, v28, v14, v19, v19, (uint64_t)&v39, (uint64_t)v37);
    __int16 v29 = v38;
    if (v38 == v37)
    {
      uint64_t v30 = 4LL;
      __int16 v29 = v37;
    }

    else
    {
      if (!v38) {
        goto LABEL_50;
      }
      uint64_t v30 = 5LL;
    }

    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_50:
    uint64_t v31 = v41;
    if (v41 == &v39)
    {
      uint64_t v32 = 4LL;
      uint64_t v31 = &v39;
    }

    else
    {
      if (!v41) {
        goto LABEL_55;
      }
      uint64_t v32 = 5LL;
    }

    (*v31)[v32]();
LABEL_55:
    *((_BYTE *)v11 + 40_Block_object_dispose(va, 8) = 1;
    if (*((_BYTE *)v11 + 264) && *((_BYTE *)v11 + 408))
    {
      uint64_t v4 = 0LL;
      int v33 = v36;
      *((_DWORD *)v36 + 17_Block_object_dispose(va, 8) = 0;
      _DWORD *v13 = *(_DWORD *)a2 != 0;
      v13[1] = 40;
      v13[2] = *((_DWORD *)v33 + 34);
      v13[3] = *((_DWORD *)v33 + 78) - 1;
      *((void *)v13 + 3) = v33;
      *a3 = v13;
      return v4;
    }

    uint64_t v4 = 4294967282LL;
  }

  free(v13);
  os_log_type_t v11 = v36;
LABEL_60:
  v11[88] = 0LL;
  io_rings_desc_free((uint64_t)v11);
  int v34 = v36;
  unint64_t v36 = 0LL;
  if (v34) {
    std::default_delete<io_rings_desc_t>::operator()[abi:ne180100]((uint64_t)&v36, v34);
  }
  return v4;
}

void sub_1880C1BE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v20 = a13;
  if (a13 == v17)
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  int v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    int v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_11:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1880C1B2CLL);
  }

  uint64_t v24 = a9;
  a9 = 0LL;
  if (v24) {
    std::default_delete<io_rings_desc_t>::operator()[abi:ne180100]((uint64_t)&a9, v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = -22;
  }
  else {
    unsigned int v2 = 1;
  }
  if (a2 <= 0 && a1 == 0) {
    return v2;
  }
  else {
    return 4294967251LL;
  }
}

void io_rings_desc_free(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 264) && *(_BYTE *)(a1 + 408))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 136);
    uint64_t v3 = *(unsigned int *)(a1 + 312);
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100](a1 + 16);
    std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100](a1 + 272);
    if (*(void *)a1)
    {
      munmap(*(void **)a1, 4 * v4 + 88LL * v2 + 8);
      *(void *)a1 = 0LL;
    }

    int v5 = *(void **)(a1 + 8);
    if (v5)
    {
      munmap(v5, (16 * v3) | 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v6 = *(void *)(a1 + 704);
    *(void *)(a1 + 704) = 0LL;
    if (v6) {
      (*(void (**)(void))(v6 + 32))();
    }
    for (uint64_t i = 688LL; i != 432; i -= 16LL)
      std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1 + i);
    std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100](a1 + 272);
    std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100](a1 + 16);
    operator delete((void *)a1);
  }

uint64_t io_rings_setup(unsigned int a1, uint64_t a2, void *a3)
{
  uint64_t v6 = operator new(0x38uLL);
  v6[6] = 0LL;
  uint64_t v7 = (dispatch_object_s ***)(v6 + 6);
  *(_OWORD *)uint64_t v6 = default_consumer_cb;
  *((_OWORD *)v6 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *(_OWORD *)off_18A1D5FD0;
  v6[4] = $_9::__invoke<io_rings_consumer_t *>;
  v6[5] = 0LL;
  uint64_t v8 = io_rings_setup_impl(a1, a2, a3, (uint64_t)v6);
  if ((_DWORD)v8)
  {
    std::unique_ptr<GCDPool>::reset[abi:ne180100](v7, 0LL);
    operator delete(v6);
  }

  else
  {
    uint64_t v9 = *(void *)(*a3 + 24LL);
    v6[5] = v9;
    BOOL v10 = (dispatch_object_s **)operator new(0x20uLL);
    GCDPool::GCDPool((uint64_t)v10, v9);
    std::unique_ptr<GCDPool>::reset[abi:ne180100](v7, v10);
  }

  return v8;
}

void sub_1880C1E68(_Unwind_Exception *a1)
{
}

uint64_t io_rings_get_supported_features(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1) {
    return 4294967194LL;
  }
  uint64_t result = 4294967274LL;
  if (a2)
  {
    if (a3)
    {
      bzero(a2, 8 * a3);
      uint64_t result = 0LL;
      *a2 = 2LL;
    }
  }

  return result;
}

uint64_t io_rings_get_num_sqes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t io_rings_get_num_cqes(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 312) - 1);
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3) {
    return 4294967194LL;
  }
  if (*(_DWORD *)(a1 + 712) == 2) {
    return 4294967207LL;
  }
  return io_rings_t<unsigned int,true>::enter(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t sqe = io_rings_sq_t::allocate_sqe((io_rings_sq_t *)(a1 + 16));
  if (sqe)
  {
    *(_DWORD *)(sqe + 12) = 0;
    double result = 0.0;
    *(_OWORD *)(sqe + 24) = 0u;
    *(_OWORD *)(sqe + 40) = 0u;
    *(_OWORD *)(sqe + 56) = 0u;
    *(_OWORD *)(sqe + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 0u;
    *(_DWORD *)(sqe + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0;
    *(_DWORD *)(sqe + 4) = 0;
  }

  return result;
}

uint64_t io_rings_sq_t::allocate_sqe(io_rings_sq_t *this)
{
  uint64_t v2 = bitmap_allocator<unsigned long,(std::memory_order)4>::allocate((void *)this + 13);
  if (v2 < 0) {
    return 0LL;
  }
  uint64_t v3 = (unsigned int *)((char *)this + 48);
  do
    unsigned int v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  int v5 = (unsigned int *)((char *)this + 8);
  do
    unsigned int v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_DWORD *)(*((void *)this + 3) + 4LL * (*((_DWORD *)this + 11) & vio_rings_cancel(*((void *)this + 6)) = v2;
  return *((void *)this + 12) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return io_rings_cq_t::pop_cqe((unsigned int **)(a1 + 272));
}

uint64_t io_rings_cq_t::pop_cqe(unsigned int **this)
{
  if (*((_BYTE *)this + 96))
  {
    unsigned int v2 = atomic_load(*this);
    *((_DWORD *)this + 23) = v2;
    __dmb(9u);
    *((_BYTE *)this + 96) = 0;
  }

  unsigned int v3 = atomic_load(this[2]);
  io_rings_t<io_rings_cqe_t,true>::pop_elem_at_tail((uint64_t)this, (uint64_t)&v5);
  if (!v7) {
    return 0LL;
  }
  if (v3 == *((_DWORD *)this + 23)) {
    *((_BYTE *)this + 96) = 1;
  }
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  return result;
}

uint64_t io_rings_create_mkey()
{
  return 4294967194LL;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712)) {
    return 4294967274LL;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 16LL);
  if (!v3 || (uint64_t result = v3(), !(_DWORD)result))
  {
    object_subscribers_t<16ul>::suspend_all(a1 + 448);
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 712) = 1;
  }

  return result;
}

uint64_t io_rings_resume(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return 4294967274LL;
  }
  uint64_t v2 = a1 + 448;
  object_subscribers_t<16ul>::resume_all(a1 + 448);
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 24LL);
  if (v3 && (uint64_t v4 = v3(), (_DWORD)v4))
  {
    uint64_t v5 = v4;
    object_subscribers_t<16ul>::suspend_all(v2);
  }

  else
  {
    uint64_t v5 = 0LL;
    *(_DWORD *)(a1 + 712) = 0;
  }

  return v5;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return -16LL;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 8LL);
  if (v2 && (int v3 = v2()) != 0)
  {
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    unint64_t v7 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
    if ((v7 & 0xFF00000000LL) != 0)
    {
      uint64_t v5 = 0LL;
      do
      {
        uint64_t v8 = *(void *)(a1 + 112);
        if (!v8) {
          break;
        }
        uint64_t v9 = v8 + 88LL * v7;
        io_rings_cq_t::enter(a1 + 272, *(void *)(v9 + 16), 0x1FFFFFFA7LL, 0);
        unint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((v9 - *(void *)(a1 + 112)) >> 3);
        uint64_t v11 = 1LL << v10;
        uint64_t v12 = (unint64_t *)(*(void *)(a1 + 128) + 8 * (v10 >> 6));
        do
          unint64_t v13 = __ldaxr(v12);
        while (__stlxr(v13 | v11, v12));
        ++v5;
        unint64_t v7 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
      }

      while ((v7 & 0xFF00000000LL) != 0);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t io_rings_pop_sqe(uint64_t a1)
{
  unint64_t v2 = io_rings_t<unsigned int,true>::pop_elem_at_tail(a1 + 16);
  if ((v2 & 0xFF00000000LL) != 0) {
    return *(void *)(a1 + 112) + 88LL * v2;
  }
  else {
    return 0LL;
  }
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
}

void object_subscribers_t<16ul>::unsubscribe(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = 0LL;
  int v6 = 0LL;
  std::atomic_store[abi:ne180100]<io_rings_subscriber_t>((uint64_t *)(a1 + 16LL * a2), &v5);
  unint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_1880C230C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void io_rings_release(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 712) == 2) {
      io_rings_desc_free(a1);
    }
  }

uint64_t io_rings_cq_t::enter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = io_rings_t<io_rings_cqe_t,true>::insert_elem_safe(a1, a2, a3);
  if (!(_DWORD)result) {
    return io_rings_t<unsigned int,true>::enter(a1, 1, a4);
  }
  if ((_DWORD)result == -28)
  {
    unint64_t v7 = (unsigned int *)(a1 + 100);
    do
      unsigned int v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8) {
      std::function<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()(a1 + 104, 0, 4);
    }
    return 4294967268LL;
  }

  return result;
}

BOOL io_rings_sqe_is_barrier(unsigned __int8 *a1)
{
  return *a1 == 5;
}

uint64_t io_rings_subscriber_subscribe(uint64_t a1, uint64_t a2)
{
  return object_subscribers_t<16ul>::subscribe(a1 + 448, a2);
}

uint64_t object_subscribers_t<16ul>::subscribe(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 1LL;
  while (1)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    BOOL v6 = std::atomic_compare_exchange_strong[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * v3), &v19, &v17);
    unint64_t v7 = v18;
    if (v18)
    {
      unsigned int v8 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    unint64_t v10 = v20;
    if (v20)
    {
      uint64_t v11 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    if (v6) {
      break;
    }
    if (++v3 == 16)
    {
      uint64_t v3 = 4294967268LL;
      break;
    }
  }

  unint64_t v13 = v22;
  if (v22)
  {
    unsigned int v14 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return v3;
}

void sub_1880C24F8( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = linked_elem_db_t::consume_elem((std::mutex *)(a1 + 144), (const void *)a2);
  __int16 v9 = *(_WORD *)(a2 + 2);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3LL * ((a2 - *(void *)(a1 + 112)) >> 3);
  uint64_t v12 = 1LL << v11;
  unint64_t v13 = (unint64_t *)(*(void *)(a1 + 128) + 8 * (v11 >> 6));
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 | v12, v13));
  if ((v9 & 4) != 0) {
    int v15 = 0;
  }
  else {
    int v15 = v8;
  }
  return io_rings_cq_t::enter(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v15);
}

void io_rings_consumer_single_sqe_execute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    uint64_t v8 = 0LL;
    __int16 v9 = 0LL;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }

  std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * v4 + 448), &v8);
  if (!v8) {
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_1880C268C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void io_rings_subscriber_get(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 5)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16LL * a2 + 448), a3);
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }

uint64_t io_rings_parse_and_execute_sqe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 2) & 0xFFFA) != 0) {
    return 4294967194LL;
  }
  switch(*(_BYTE *)a3)
  {
    case 0:
      return 0LL;
    case 1:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 64);
      goto LABEL_9;
    case 2:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 80);
      goto LABEL_9;
    case 3:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 72);
      goto LABEL_9;
    case 4:
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 88);
LABEL_9:
      uint64_t result = v4();
      break;
    case 5:
      if (*(_DWORD *)(a3 + 24) > 3u) {
        return 4294967194LL;
      }
      uint64_t result = (*(uint64_t (**)(void))(a1 + 104))();
      break;
    case 6:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a1 + 96))( a1,  a2,  *(unsigned int *)(a3 + 32),  *(void *)(a3 + 24));
      break;
    default:
      return 4294967194LL;
  }

  return result;
}

uint64_t (**io_rings_subscriber_sync_init( uint64_t (**result)(uint64_t a1, uint64_t a2), uint64_t (*a2)(uint64_t a1, uint64_t a2)))(uint64_t a1, uint64_t a2)
{
  *uint64_t result = io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_0::__invoke;
  result[1] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_1::__invoke;
  result[2] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_2::__invoke;
  result[3] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_3::__invoke;
  result[4] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_4::__invoke;
  result[5] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_5::__invoke;
  result[6] = (uint64_t (*)(uint64_t, uint64_t))io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_6::__invoke;
  result[7] = a2;
  return result;
}

void object_subscribers_t<16ul>::suspend_all(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 24))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_1880C2834( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void object_subscribers_t<16ul>::resume_all(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 32))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_1880C28D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void io_rings_subscribers_cancel_all(uint64_t a1)
{
}

void object_subscribers_t<16ul>::cancel_all(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    std::atomic_load[abi:ne180100]<io_rings_subscriber_t>((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 40))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_1880C2984( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void linked_elem_db_t::add_elem_to_chain(std::mutex *this, const void *a2, int a3, int a4)
{
  uint64_t v8 = *(unsigned int **)&this[1].__m_.__opaque[40];
  if (a3)
  {
    if (v8) {
      *((_BYTE *)v8 + 4) = 1;
    }
    uint64_t v8 = (unsigned int *)operator new(8uLL);
    *uint64_t v8 = 0;
    *((_BYTE *)v8 + 4) = 0;
    *(void *)&this[1].__m_.__opaque[40] = v8;
  }

  else if (a4 && v8)
  {
    *((_BYTE *)v8 + 4) = 1;
  }

  do
    unsigned int v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  uint64_t v10 = *(void *)&this[1].__m_.__opaque[40];
  *(void *)&__int128 v11 = a2;
  *((void *)&v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v10;
  std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__emplace_unique_key_args<void const*,std::pair<void const*,linked_elem_db_t::node_t *>>( (uint64_t)&this[1],  &v11,  &v11);
  if (a4) {
    *(void *)&this[1].__m_.__opaque[40] = 0LL;
  }
  ++*(void *)&this[1].__m_.__opaque[32];
  std::mutex::unlock(this);
}

void sub_1880C2A54(_Unwind_Exception *a1)
{
}

uint64_t linked_elem_db_t::consume_elem(std::mutex *this, const void *a2)
{
  unint64_t v7 = a2;
  if (*(void *)&this[1].__m_.__opaque[32])
  {
    std::mutex::lock(this);
    uint64_t v3 = std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::find<void const*>( &this[1].__m_.__sig,  &v7);
    if (v3)
    {
      --*(void *)&this[1].__m_.__opaque[32];
      uint64_t v4 = v3[3];
      std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::erase( &this[1].__m_.__sig,  v3);
      std::mutex::unlock(this);
      if (v4)
      {
        do
          unsigned int v5 = __ldaxr((unsigned int *)v4);
        while (__stlxr(v5 - 1, (unsigned int *)v4));
        if (v5 != 1 || !*(_BYTE *)(v4 + 4)) {
          return 0LL;
        }
        operator delete((void *)v4);
      }
    }

    else
    {
      std::mutex::unlock(this);
    }
  }

  return 1LL;
}

void sub_1880C2B24(_Unwind_Exception *a1)
{
}

void io_rings_consumer_add_linked_sqe(uint64_t a1, const void *a2, int a3)
{
  linked_elem_db_t::add_elem_to_chain((std::mutex *)(a1 + 144), a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(PluginsManager *a1, uint64_t a2)
{
  uint64_t v4 = PluginsManager::get(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  uint64_t v5 = PluginsManager::register_plugin(v4, (uint64_t)__p, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_1880C2BC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_plugin_release(PluginsManager *a1)
{
  uint64_t v2 = PluginsManager::get(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  PluginsManager::release_plugin(v2, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1880C2C30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<io_rings_sq_t,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(_BYTE *)(result + 248))
  {
    uint64_t v1 = result;
    uint64_t v2 = (std::mutex *)(result + 128);
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(result + 192);
    std::mutex::~mutex(v2);
    uint64_t v3 = *(void **)(v1 + 112);
    *(void *)(v1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v57 + 112) = 0LL;
    if (v3) {
      operator delete[](v3);
    }
    uint64_t result = *(void *)(v1 + 80);
    if (result == v1 + 56)
    {
      uint64_t v4 = 4LL;
      uint64_t result = v1 + 56;
    }

    else
    {
      if (!result)
      {
LABEL_9:
        *(_BYTE *)(v1 + 24_Block_object_dispose(va, 8) = 0;
        return result;
      }

      uint64_t v4 = 5LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v4))();
    goto LABEL_9;
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table( uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_18A1D5FF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_18A1D5FF8;
  a2[1] = v2;
  return result;
}

uint64_t (**std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::operator()( uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (***)(void))(*(void *)(a1 + 8) + 704LL);
  if (*result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_0>,void ()(void)>::target_type()
{
}

uint64_t io_rings_sq_t::io_rings_sq_t( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10 = a4;
  *(void *)&__int128 v13 = a2 + 88LL * a4;
  *((void *)&v13 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = a5;
  uint64_t v11 = io_rings_t<unsigned int,true>::io_rings_t(a1, a2 + 4LL * a5 + 88LL * a4, a3 + 16LL * a6 + 4, &v13, a5, a7);
  *(void *)(v11 + 96) = a2;
  bitmap_allocator<unsigned long,(std::memory_order)4>::bitmap_allocator((void *)(v11 + 104), v10);
  *(_DWORD *)(a1 + 120) = a4;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 850045863LL;
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0LL;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  return a1;
}

void sub_1880C2E80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 80);
  if (v3 == (void *)(v1 + 56))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v1 + 56);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_t<unsigned int,true>::io_rings_t( uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    char v7 = 0;
    unsigned int v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }

    while (v8 != 1);
    a5 = 1 << v7;
  }

  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]( a1 + 56,  a6);
  *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  return a1;
}

void *bitmap_allocator<unsigned long,(std::memory_order)4>::bitmap_allocator(void *a1, uint64_t a2)
{
  char v2 = a2;
  *a1 = a2;
  unint64_t v4 = a2 + 63;
  unint64_t v5 = (unint64_t)(a2 + 63) >> 6;
  uint64_t v6 = (unint64_t *)operator new[](8 * v5);
  char v7 = v6;
  if (v4 > 0x3F)
  {
    bzero(v6, 8 * v5);
    a1[1] = v7;
    unint64_t v8 = v5 + 1;
    unsigned int v9 = v7;
    do
    {
      atomic_store(0xFFFFFFFFFFFFFFFFLL, v9++);
      --v8;
    }

    while (v8 > 1);
  }

  else
  {
    a1[1] = v6;
  }

  if ((v2 & 0x3F) != 0)
  {
    uint64_t v10 = &v7[v5 - 1];
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 & ~(-1LL << (v2 & 0x3F)), v10));
  }

  return a1;
}

uint64_t std::__optional_destruct_base<io_rings_cq_t,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(_BYTE *)(result + 136))
  {
    uint64_t v1 = result;
    char v2 = (void *)(result + 104);
    uint64_t v3 = *(void **)(result + 128);
    if (v3 == v2)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v2;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    uint64_t result = *(void *)(v1 + 80);
    if (result == v1 + 56)
    {
      uint64_t v5 = 4LL;
      uint64_t result = v1 + 56;
    }

    else
    {
      if (!result)
      {
LABEL_12:
        *(_BYTE *)(v1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0;
        return result;
      }

      uint64_t v5 = 5LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v5))();
    goto LABEL_12;
  }

  return result;
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_18A1D6088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_18A1D6088;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::operator()( uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 432);
  if (v2) {
    return v2(result, *(void *)(result + 440));
  }
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__clone( uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_18A1D6108;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::__clone( uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_18A1D6108;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 416);
  if (v4) {
    return v4(result, *(void *)(result + 424), *a2, a3);
  }
  return result;
}

uint64_t std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2,std::allocator<io_rings_setup_prepare_ring(io_rings_desc_t &,unsigned int)::$_2>,void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::target_type()
{
}

uint64_t io_rings_cq_t::io_rings_cq_t( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  *(void *)&__int128 v12 = a3;
  *((void *)&v12 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = a6;
  uint64_t v10 = io_rings_t<unsigned int,true>::io_rings_t(a1, a3 + 16LL * a6, 4LL * a5 + 88LL * a4 + a2 + 4, &v12, a6, a7);
  *(_BYTE *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  std::__function::__value_func<diskimage_uio::expected_ns::std::experimental::fundamentals_v3::expected<std::unique_ptr<DiskImage::Context>,std::error_code> ()(void)>::__value_func[abi:ne180100]( v10 + 104,  a8);
  return a1;
}

void sub_1880C3274(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 80);
  if (v3 == (void *)(v1 + 56))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v1 + 56);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100]( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 136)) {
    return a1;
  }
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2 == (void *)(a1 + 104))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 104);
    goto LABEL_6;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  uint64_t v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 56))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 56);
    goto LABEL_11;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

uint64_t std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100]( uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248))
  {
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::~__hash_table(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    uint64_t v2 = *(void **)(a1 + 112);
    *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v57 + 112) = 0LL;
    if (v2) {
      operator delete[](v2);
    }
    uint64_t v3 = *(void **)(a1 + 80);
    if (v3 == (void *)(a1 + 56))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(a1 + 56);
      goto LABEL_8;
    }

    if (v3)
    {
      uint64_t v4 = 5LL;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }

  return a1;
}

void std::default_delete<io_rings_desc_t>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[88];
    a2[88] = 0LL;
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    for (uint64_t i = 86LL; i != 54; i -= 2LL)
      std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a2[i]);
    std::__optional_destruct_base<io_rings_cq_t,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a2 + 34));
    std::__optional_destruct_base<io_rings_sq_t,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a2 + 2));
    operator delete(a2);
  }

uint64_t $_5::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::signal_work(*(GCDPool **)(a1 + 48));
}

uint64_t $_6::__invoke<io_rings_consumer_t *,BOOL>(uint64_t a1)
{
  return 0LL;
}

uint64_t $_7::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::suspend(*(GCDPool **)(a1 + 48));
}

uint64_t $_8::__invoke<io_rings_consumer_t *>(uint64_t a1)
{
  return GCDPool::resume(*(GCDPool **)(a1 + 48));
}

void $_9::__invoke<io_rings_consumer_t *>(dispatch_object_s ***a1)
{
  if (a1)
  {
    std::unique_ptr<GCDPool>::reset[abi:ne180100](a1 + 6, 0LL);
    operator delete(a1);
  }

void std::unique_ptr<GCDPool>::reset[abi:ne180100](dispatch_object_s ***a1, dispatch_object_s **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    gcd::gcd_group::~gcd_group(v2 + 2);
    operator delete(v2);
  }

uint64_t io_rings_t<unsigned int,true>::enter(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = (unsigned int *)(a1 + 52);
  int v5 = *(_DWORD *)(a1 + 52);
  unsigned int v6 = __ldaxr((unsigned int *)(a1 + 52));
  if (v6 != v5)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      unsigned int v7 = __ldaxr(v4);
      if (v7 != v6) {
        break;
      }
      if (__stlxr((v6 + 2 * a2) | a3, v4)) {
        goto LABEL_9;
      }
      int v8 = 1;
LABEL_10:
      unsigned int v6 = v7;
      if (v8) {
        goto LABEL_11;
      }
    }

    __clrex();
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }

  if (__stlxr((v5 + 2 * a2) | a3, v4)) {
    goto LABEL_5;
  }
LABEL_11:
  unsigned int v9 = (unsigned int *)(a1 + 48);
  do
  {
    unsigned int v10 = __ldaxr(v9);
    unsigned int v11 = v10 - a2;
  }

  while (__stlxr(v11, v9));
  if (!v11)
  {
    __int128 v12 = (unsigned __int8 *)(a1 + 89);
    do
      unsigned __int8 v13 = __ldaxr(v12);
    while (__stlxr(1u, v12));
    if ((v13 & 1) == 0)
    {
      while (1)
      {
        unint64_t v14 = *v4;
        if (atomic_load(v9)) {
          break;
        }
        unsigned int v16 = __ldaxr(v4);
        if (v16 == (_DWORD)v14)
        {
          if (!__stlxr(0, v4))
          {
            unint64_t v17 = (v14 >> 1) | ((v14 & 1) << 32);
            goto LABEL_23;
          }
        }

        else
        {
          __clrex();
        }
      }

      unint64_t v17 = 0LL;
LABEL_23:
      unint64_t v18 = HIDWORD(v17);
      uint64_t v19 = (unsigned __int8 *)(a1 + 88);
      if ((_DWORD)v17)
      {
LABEL_24:
        __dmb(0xBu);
        uint64_t v20 = *(unsigned int **)a1;
        do
          unsigned int v21 = __ldaxr(v20);
        while (__stlxr(v21 + v17, v20));
        unsigned int v22 = atomic_load(*(unsigned int **)(a1 + 16));
        if ((_DWORD)v17 + v21 != v22 && (_DWORD)v18 != 0)
        {
          while (1)
          {
            int v24 = __ldaxr(v19);
            if (v24 != 1) {
              break;
            }
            if (!__stlxr(0, v19))
            {
              uint64_t v25 = *(void *)(a1 + 80);
              if (!v25) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t))(*(void *)v25 + 48LL))(v25);
              goto LABEL_34;
            }
          }

LABEL_39:
          __clrex();
        }

  ++*(void *)(a1 + 24);
  return i;
}

  if (v9 >= v10)
  {
    unsigned int v22 = v9;
  }

  else
  {
    unsigned int v21 = *v10;
    unsigned int v22 = v9;
    uint64_t v23 = v10;
    do
    {
      int v24 = v22[1];
      uint64_t v25 = v23[1];
      *unsigned int v22 = v21;
      v22[1] = v25;
      *uint64_t v23 = v5;
      v23[1] = v24;
      unsigned int v26 = v22;
      do
      {
        uint64_t v27 = v22[2];
        v22 += 2;
        int v5 = v27;
        unsigned int v28 = v27 == v3;
        if (v27 >= v3) {
          unsigned __int8 v29 = 1;
        }
        else {
          unsigned __int8 v29 = -1;
        }
        if (v28)
        {
          unsigned int v30 = v26[3];
          uint64_t v31 = v30 == v4;
          unsigned __int8 v29 = v30 >= v4 ? 1 : -1;
          if (v31) {
            unsigned __int8 v29 = 0;
          }
        }

        unsigned int v26 = v22;
      }

      while (v29 < 0);
      unsigned int v32 = v23;
      do
      {
        int v33 = *(v23 - 2);
        v23 -= 2;
        unsigned int v21 = v33;
        int v34 = v33 == v3;
        if (v33 >= v3) {
          int v35 = 1;
        }
        else {
          int v35 = -1;
        }
        if (v34)
        {
          unint64_t v36 = *(v32 - 1);
          int v37 = v36 == v4;
          int v35 = v36 >= v4 ? 1 : -1;
          if (v37) {
            int v35 = 0;
          }
        }

        unsigned int v32 = v23;
      }

      while ((v35 & 0x80) == 0);
    }

    while (v22 < v23);
  }

  if (v22 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  }
  *(v22 - 2) = v3;
  *(v22 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4;
  return v22 - 2;
}

    unint64_t v18 = 0;
LABEL_40:
    ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&v26);
  }

  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(_BYTE *)(a4 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v33;
  return v7;
}

    unsigned int v11 = 0;
    goto LABEL_44;
  }

  int v15 = *((void *)this + 7);
  unsigned int v16 = (char *)*((void *)this + 20);
  unint64_t v17 = *(void *)v16;
  if (*(void *)v16 >= v15) {
    unsigned int v10 = *((void *)this + 7);
  }
  else {
    unsigned int v10 = *(void *)v16;
  }
  if (v10 <= v3) {
    unsigned int v10 = v3;
  }
  if (v10 < v15 && v10 < v17) {
    goto LABEL_39;
  }
  if (v10 >= v17)
  {
    unint64_t v17 = *((void *)v16 + 1);
  }

  else
  {
    if (v17 >= *((void *)this + 8)) {
      unint64_t v17 = *((void *)this + 8);
    }
    unsigned int v16 = (char *)this + 56;
  }

  unsigned int v11 = *((_DWORD *)v16 + 6);
  uint64_t v3 = v10;
  if (*((void *)this + 3) >= v17) {
    unsigned int v10 = v17;
  }
  else {
    unsigned int v10 = *((void *)this + 3);
  }
LABEL_44:
  *(void *)a3 = v3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v10;
  *(_BYTE *)(a3 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

LABEL_34:
        while (1)
        {
          unsigned int v26 = *v4;
          if (atomic_load(v9)) {
            break;
          }
          unsigned int v28 = __ldaxr(v4);
          if (v28 != v26) {
            goto LABEL_39;
          }
          if (!__stlxr(0, v4))
          {
            LODWORD(v17) = v26 >> 1;
            LODWORD(v1_Block_object_dispose(va, 8) = v26 & 1;
            if (v26 > 1) {
              goto LABEL_24;
            }
            break;
          }
        }
      }

  std::mutex::unlock(v4);
  return offset;
}

  uint64_t v3 = 0LL;
LABEL_35:
  if (v11)
  {
    unsigned int v22 = (unint64_t *)&v11->__shared_owners_;
    do
      uint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (v5)
  {
    int v24 = (unint64_t *)&v5->__shared_owners_;
    do
      uint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v3;
}

uint64_t bitmap_allocator<unsigned long,(std::memory_order)4>::allocate(void *a1)
{
  unint64_t v1 = *a1 + 63LL;
  if (v1 >= 0x40)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    uint64_t v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          unint64_t v6 = atomic_load(v3);
          if (!v6) {
            break;
          }
          unint64_t v7 = __clz(__rbit64(v6));
          do
            unint64_t v8 = __ldaxr(v3);
          while (__stlxr(v8 & ~(1LL << v7), v3));
          if ((v8 & (1LL << v7)) != 0) {
            return v7 + 8LL * ((void)v3 - a1[1]);
          }
        }
      }

      ++v3;
    }

    while (v3 != v4);
  }

  return -1LL;
}

uint64_t io_rings_t<io_rings_cqe_t,true>::pop_elem_at_tail@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (unsigned __int8 *)(result + 88);
  while (1)
  {
    unsigned int v3 = atomic_load(*(unsigned int **)result);
    unsigned int v4 = atomic_load(*(unsigned int **)(result + 16));
    if (v3 == v4) {
      break;
    }
LABEL_8:
    unsigned int v9 = atomic_load(*(unsigned int **)(result + 16));
    unsigned int v10 = atomic_load(*(unsigned int **)result);
    if (v9 != v10)
    {
      unsigned int v11 = *(unsigned int **)(result + 16);
      unsigned int v12 = __ldaxr(v11);
      if (v12 == v9)
      {
        if (!__stlxr(v9 + 1, v11))
        {
          char v13 = 1;
LABEL_15:
          if ((v13 & 1) != 0) {
            goto LABEL_23;
          }
          while (2)
          {
            unsigned int v9 = v12;
            unsigned int v10 = atomic_load(*(unsigned int **)result);
            if (v12 == v10) {
              goto LABEL_9;
            }
            unint64_t v14 = *(unsigned int **)(result + 16);
            unsigned int v15 = __ldaxr(v14);
            if (v15 == v12)
            {
              if (!__stlxr(v12 + 1, v14))
              {
                char v16 = 1;
                goto LABEL_22;
              }
            }

            else
            {
              __clrex();
            }

            char v16 = 0;
LABEL_22:
            unsigned int v12 = v15;
            if ((v16 & 1) != 0) {
              goto LABEL_23;
            }
            continue;
          }
        }
      }

      else
      {
        __clrex();
      }

      char v13 = 0;
      goto LABEL_15;
    }

unint64_t io_rings_t<unsigned int,true>::pop_elem_at_tail(uint64_t a1)
{
  unsigned int v1 = atomic_load(*(unsigned int **)a1);
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2)
  {
    unsigned int v3 = (unsigned __int8 *)(a1 + 88);
    do
      unsigned __int8 v4 = __ldaxr(v3);
    while (__stlxr(1u, v3));
    if ((v4 & 1) != 0
      || (unsigned int v5 = atomic_load(*(unsigned int **)a1), v6 = atomic_load(*(unsigned int **)(a1 + 16)), v5 == v6))
    {
      LOBYTE(astd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v9 = 0;
    }

    else
    {
      while (1)
      {
        int v10 = __ldaxr(v3);
        if (v10 != 1) {
          break;
        }
        if (!__stlxr(0, v3)) {
          goto LABEL_9;
        }
      }

      LOBYTE(astd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v9 = 0;
      __clrex();
    }
  }

  else
  {
LABEL_9:
    unsigned int v11 = atomic_load(*(unsigned int **)(a1 + 16));
    unsigned int v12 = atomic_load(*(unsigned int **)a1);
    if (v11 != v12)
    {
      char v13 = *(unsigned int **)(a1 + 16);
      unsigned int v14 = __ldaxr(v13);
      if (v14 == v11)
      {
        if (__stlxr(v11 + 1, v13)) {
          goto LABEL_14;
        }
LABEL_20:
        if (v11 != v12)
        {
          unint64_t v7 = 0LL;
          LODWORD(astd::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *(_DWORD *)(*(void *)(a1 + 24) + 4LL * (*(_DWORD *)(a1 + 44) & v11));
          int v9 = a1 & 0xFFFFFF00;
          uint64_t v8 = 0x100000000LL;
          return v8 | v7 | v9 | a1;
        }
      }

      else
      {
        __clrex();
LABEL_14:
        while (1)
        {
          unsigned int v12 = atomic_load(*(unsigned int **)a1);
          if (v14 == v12) {
            break;
          }
          unsigned int v11 = v14;
          unsigned int v15 = *(unsigned int **)(a1 + 16);
          unsigned int v14 = __ldaxr(v15);
          if (v14 == v11)
          {
            if (!__stlxr(v11 + 1, v15)) {
              goto LABEL_20;
            }
          }

          else
          {
            __clrex();
          }
        }
      }
    }

    a1 = io_rings_t<unsigned int,true>::pop_elem_at_tail();
    int v9 = a1 & 0xFFFFFF00;
    unint64_t v7 = a1 & 0xFFFFFF0000000000LL;
    uint64_t v8 = a1 & 0xFF00000000LL;
  }

  return v8 | v7 | v9 | a1;
}

uint64_t io_rings_t<io_rings_cqe_t,true>::insert_elem_safe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (unsigned int *)(a1 + 48);
  do
    unsigned int v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  unsigned int v5 = (unsigned int *)(a1 + 8);
  unsigned int v6 = atomic_load((unsigned int *)(a1 + 8));
  unsigned int v7 = atomic_load(*(unsigned int **)(a1 + 16));
  unsigned int v8 = v7 - v6;
  if (v7 - v6 != 1)
  {
    while (v8 != 1 - *(_DWORD *)(a1 + 40))
    {
      unsigned int v9 = __ldaxr(v5);
      if (v9 == v6)
      {
        if (!__stlxr(v6 + 1, v5))
        {
          uint64_t v13 = 0LL;
          unsigned int v14 = (void *)(*(void *)(a1 + 24) + 16LL * (*(_DWORD *)(a1 + 44) & v6));
          *unsigned int v14 = a2;
          v14[1] = a3;
          return v13;
        }
      }

      else
      {
        __clrex();
      }

      unsigned int v10 = atomic_load(*(unsigned int **)(a1 + 16));
      unsigned int v8 = v10 - v9;
      unsigned int v6 = v9;
      if (v8 == 1) {
        goto LABEL_10;
      }
    }
  }

  do
LABEL_10:
    unsigned int v11 = __ldaxr(v3);
  while (__stlxr(v11 - 1, v3));
  if (v11 == 1) {
    io_rings_t<unsigned int,true>::enter(a1, 0, 1);
  }
  return 4294967268LL;
}

uint64_t std::function<void ()(io_rings_event_type_t,io_rings_event_type_data_t)>::operator()( uint64_t a1, int a2, int a3)
{
  int v6 = a3;
  int v5 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48LL))(v3, &v5, &v6);
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_0::__invoke( uint64_t a1, uint64_t a2)
{
  unsigned int v4 = io_rings_parse_and_execute_sqe(a1, 0LL, a2);
  return io_rings_return_status(*(void *)(a1 + 56), a2, v4, 0);
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_2::__invoke()
{
  return 0LL;
}

uint64_t io_rings_subscriber_sync_init(io_rings_subscriber_sync_t *,io_rings_desc_t *)::$_6::__invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

void std::atomic_store[abi:ne180100]<io_rings_subscriber_t>(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL std::atomic_compare_exchange_strong[abi:ne180100]<io_rings_subscriber_t>( void *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  unsigned int v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](a1, a3);
    unsigned int v9 = v7;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](a2, a1);
    unsigned int v9 = v8;
  }

  std::__sp_mut::unlock(sp_mut);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return v7 == v8;
}

void sub_1880C3CDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::shared_ptr<io_rings_subscriber_t>::shared_ptr[abi:ne180100]<io_rings_subscriber_t,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t*)#1},void>( void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  *unsigned int v4 = off_18A1D6198;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1880C3D34(void *a1)
{
}

void sub_1880C3D4C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::~__shared_ptr_pointer( std::__shared_weak_count *a1)
{
}

uint64_t std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::__on_zero_shared( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48LL))();
}

uint64_t std::__shared_ptr_pointer<io_rings_subscriber_t *,object_subscribers_t<16ul>::subscribe(io_rings_subscriber_t&)::{lambda(io_rings_subscriber_t *)#1},std::allocator<io_rings_subscriber_t>>::__get_deleter( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void std::atomic_load[abi:ne180100]<io_rings_subscriber_t>(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  std::__sp_mut::unlock(sp_mut);
}

void *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__emplace_unique_key_args<void const*,std::pair<void const*,linked_elem_db_t::node_t *>>( uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  *((_OWORD *)i + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *unsigned int v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_1880C406C(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__rehash<true>( uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__do_rehash<true>( a1,  prime);
  }

void std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::__do_rehash<true>( uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * diskimage_uio::details::diskimage_open_params_impl::is_locked(this, v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * diskimage_uio::details::diskimage_open_params_impl::is_locked(this, v12) = v11;
            unint64_t v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::find<void const*>( void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::erase( void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::remove( a1,  a2,  (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,linked_elem_db_t::node_t *>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,linked_elem_db_t::node_t *>>>::remove@<X0>( void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v7;
      uint64_t v10 = *a2;
    }
  }

  *unint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose(va, 8) = result + 2;
  *(_BYTE *)(a3 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 1;
  return result;
}

uint64_t GCDPool::GCDPool(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  gcd::gcd_queue::gcd_queue(a1 + 16, "rings_queue", 2LL);
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void GCDPool::exec_sync(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  }
  else {
    io_rings_consumer_single_sqe_execute(v3, a2);
  }
}

uint64_t GCDPool::signal_work(GCDPool *this)
{
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  unsigned int v1 = atomic_load((unsigned int *)this);
  if (v1 != 2) {
    goto LABEL_37;
  }
  LODWORD(v3) = 0;
  int v4 = 0;
  uint8x8_t v5 = (dispatch_queue_t *)((char *)this + 16);
  uint64_t v6 = MEMORY[0x1895F87A8];
  do
  {
    unint64_t v7 = (_WORD *)io_rings_pop_sqe(*((void *)this + 1));
    uint64_t v8 = (uint64_t)v7;
    if (!v7) {
      break;
    }
    __dmb(9u);
    if ((v7[1] & 1) != 0)
    {
      int v9 = 1;
      goto LABEL_8;
    }

    if (*((_BYTE *)this + 24))
    {
      int v9 = 2;
LABEL_8:
      if (*((_BYTE *)this + 24)) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      io_rings_consumer_add_linked_sqe(*((void *)this + 1), v7, v10);
      char v11 = *(_BYTE *)(v8 + 2);
      goto LABEL_12;
    }

    char v11 = v7[1];
LABEL_12:
    *((_BYTE *)this + 24) = v11 & 1;
    io_rings_subscriber_get(*((void *)this + 1), *(_DWORD *)(v8 + 8), &v24);
    if (v24)
    {
      if ((_DWORD)v3)
      {
        if (*(_DWORD *)(v8 + 8) != v4)
        {
          (*(void (**)(void))(v26 + 8))();
          uint64_t v3 = v27;
          uint64_t v26 = 0LL;
          uint64_t v27 = 0LL;
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              unint64_t v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }

            LODWORD(v3) = 0;
          }
        }
      }

      if ((*(unsigned int (**)(void))(v24 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v24)(v24, v8);
        if (!v26)
        {
          int v4 = *(_DWORD *)(v8 + 8);
          std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v26, &v24);
          LODWORD(v3) = 1;
        }
      }

      else if (io_rings_sqe_is_barrier((unsigned __int8 *)v8))
      {
        v23[0] = v6;
        v23[1] = 0x40000000LL;
        v23[2] = ___ZN7GCDPool11signal_workEv_block_invoke;
        v23[3] = &__block_descriptor_tmp_2;
        v23[4] = this;
        v23[5] = v8;
        gcd::gcd_queue::barrier_async(v5, v23);
      }

      else
      {
        v22[0] = v6;
        v22[1] = 0x40000000LL;
        v22[2] = ___ZN7GCDPool11signal_workEv_block_invoke_3;
        v22[3] = &__block_descriptor_tmp_3_0;
        v22[4] = this;
        v22[5] = v8;
        gcd::gcd_queue::async(v5, v22);
      }
    }

    else
    {
      io_rings_return_status(*((void *)this + 1), v8, 0xFFFFFFFA, 0);
    }

    float v14 = v25;
    if (v25)
    {
      float v15 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    unsigned int v17 = atomic_load((unsigned int *)this);
  }

  while (v17 == 2);
  if ((_DWORD)v3) {
    (*(void (**)(void))(v26 + 8))();
  }
LABEL_37:
  unint64_t v18 = v27;
  if (v27)
  {
    size_t v19 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return 0LL;
}

void sub_1880C480C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void ___ZN7GCDPool11signal_workEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    io_rings_return_status(*(void *)(v1 + 8), *(void *)(a1 + 40), 0xFFFFFFA7, 0);
  }

  else
  {
    v4[0] = MEMORY[0x1895F87A8];
    v4[1] = 0x40000000LL;
    void v4[2] = ___ZN7GCDPool11signal_workEv_block_invoke_2;
    v4[3] = &__block_descriptor_tmp_2;
    uint64_t v3 = *(void *)(a1 + 40);
    void v4[4] = v1;
    unsigned int v4[5] = v3;
    gcd::gcd_queue::async((dispatch_queue_t *)(v1 + 16), v4);
  }

void ___ZN7GCDPool11signal_workEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  GCDPool::exec_sync(v1, *(void *)(a1 + 40));
}

void ___ZN7GCDPool11signal_workEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  GCDPool::exec_sync(v1, *(void *)(a1 + 40));
}

uint64_t GCDPool::suspend(GCDPool *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this);
  if (v1 != 2) {
    return 4294967260LL;
  }
  atomic_store(0, (unsigned int *)this);
  gcd::gcd_queue::suspend((dispatch_object_t *)this + 2);
  return 0LL;
}

void GCDPool::cancel(GCDPool *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this);
  if (v1 != 1)
  {
    do
      unsigned int v3 = __ldaxr((unsigned int *)this);
    while (__stlxr(1u, (unsigned int *)this));
    if (v3 == 2) {
      gcd::gcd_queue::suspend((dispatch_object_t *)this + 2);
    }
    io_rings_subscribers_cancel_all(*((void *)this + 1));
    gcd::gcd_queue::resume((dispatch_object_t *)this + 2);
    GCDPool::signal_work(this);
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 2, &__block_literal_global_6);
    gcd::gcd_queue::barrier_sync((dispatch_queue_t *)this + 2, &__block_literal_global_6);
  }

uint64_t GCDPool::resume(GCDPool *this)
{
  return 0LL;
}

void populate_backends_info(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    int v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      int v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      float v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  unsigned int v17 = v25;
  if (v25)
  {
    unint64_t v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    unsigned int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  uint64_t v3 = *a1;
  int v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    int v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      int v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      float v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  unsigned int v17 = v25;
  if (v25)
  {
    unint64_t v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    unsigned int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  uint64_t v3 = *a1;
  int v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    int v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      int v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      float v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  unsigned int v17 = v25;
  if (v25)
  {
    unint64_t v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    unsigned int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  uint64_t v3 = *a1;
  int v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    std::shared_ptr<DiskImage>::operator=[abi:ne180100](&v24, (uint64_t *)&v26);
    get_next_backend_in_graph((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    int v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      int v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      float v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  unsigned int v17 = v25;
  if (v25)
  {
    unint64_t v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    unsigned int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_1880C4B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

info::DiskImageInfoRaw *info::DiskImageInfoRaw::DiskImageInfoRaw( info::DiskImageInfoRaw *this, const DiskImageRaw *a2)
{
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0;
  *((void *)this + 1_Block_object_dispose(va, 8) = 0LL;
  *(void *)this = off_18A1D6340;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D6388;
  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = &unk_18A1D63D0;
  *((void *)this + 3) = &unk_18A1D6418;
  *((void *)this + 4) = &unk_18A1D6460;
  *((void *)this + 5) = &unk_18A1D64A8;
  *((void *)this + 6) = &unk_18A1D64F0;
  *((void *)this + 7) = &unk_18A1D6550;
  *((void *)this + 15) = &unk_18A1D65C0;
  uint64_t v4 = (uint64_t *)((char *)a2 + 16);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 40LL))(*((void *)a2 + 2));
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + _Block_object_dispose(va, 8) = v5;
  *(void *)((char *)this + *(void *)(v6 - 112) + 56) = 0LL;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = (*(uint64_t (**)(const DiskImageRaw *))(*(void *)a2 + 32LL))(a2);
  uint64_t v7 = (*(uint64_t (**)(const DiskImageRaw *))(*(void *)a2 + 24LL))(a2);
  __int128 v8 = (char *)this + *(void *)(*(void *)this - 112LL);
  if (!v8[32]) {
    v8[32] = 1;
  }
  *((void *)v8 + 3) = v7;
  populate_backends_info(v4, (uint64_t)this + *(void *)(*(void *)this - 104LL));
  return this;
}

void sub_1880C4CC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = off_18A1D6690;
  *(void *)(v1 + 24) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

info::DiskImageInfoRaw *info::DiskImageInfoRaw::DiskImageInfoRaw( info::DiskImageInfoRaw *this, const DiskImageROChunkRaw *a2)
{
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0;
  *((void *)this + 1_Block_object_dispose(va, 8) = 0LL;
  *(void *)this = off_18A1D6340;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D6388;
  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = &unk_18A1D63D0;
  *((void *)this + 3) = &unk_18A1D6418;
  *((void *)this + 4) = &unk_18A1D6460;
  *((void *)this + 5) = &unk_18A1D64A8;
  *((void *)this + 6) = &unk_18A1D64F0;
  *((void *)this + 7) = &unk_18A1D6550;
  *((void *)this + 15) = &unk_18A1D65C0;
  uint64_t v4 = (uint64_t *)((char *)a2 + 16);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 40LL))(*((void *)a2 + 2));
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + _Block_object_dispose(va, 8) = v5;
  uint64_t v7 = (char *)this + *(void *)(v6 - 112);
  *((void *)v7 + 5) = *((void *)v7 + 1);
  v7[48] = 1;
  __int128 v8 = (char *)this + *(void *)(*(void *)this - 112LL);
  *((void *)v8 + 3) = *((void *)v8 + 1);
  v8[32] = 1;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + 56) = 0LL;
  uint64_t v9 = (*(uint64_t (**)(const DiskImageROChunkRaw *))(*(void *)a2 + 32LL))(a2);
  uint64_t v10 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v9;
  populate_backends_info(v4, (uint64_t)this + *(void *)(v10 - 104));
  return this;
}

void sub_1880C4E10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = off_18A1D6690;
  *(void *)(v1 + 24) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t info::details::InfoNullGetter<info::CompressionInfo>::get()
{
  return 0LL;
}

{
  return 0LL;
}

uint64_t info::details::InfoNullGetter<info::MasterChecksumInfo>::get()
{
  return 0LL;
}

{
  return 0LL;
}

uint64_t info::details::InfoNullGetter<info::ASIFInfo>::get()
{
  return 0LL;
}

{
  return 0LL;
}

uint64_t info::details::InfoNullGetter<info::IdentityInfo>::get()
{
  return 0LL;
}

{
  return 0LL;
}

const void **info::SizeInfo::serialize_to_dict@<X0>(info::SizeInfo *this@<X0>, void *a2@<X8>)
{
  v16[1] = *(const void **)MEMORY[0x1895F89C0];
  cf::make_empty_dict((CFMutableDictionaryRef *)&v7);
  uint64_t valuePtr = *((void *)this + 1);
  uint64_t v9 = (const __CFString **)@"Total Bytes";
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v10 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberLongLongType, &valuePtr);
  unint64_t v11 = @"Sector Count";
  uint64_t valuePtr = *((void *)this + 2);
  CFNumberRef v12 = 0LL;
  CFNumberRef v12 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  unint64_t v13 = @"Empty Bytes";
  uint64_t valuePtr = *((void *)this + 7);
  CFNumberRef v14 = 0LL;
  CFNumberRef v14 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  float v15 = (const __CFString *)&v9;
  v16[0] = (const void *)3;
  cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v15);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v9)[i]);
  if (*((_BYTE *)this + 48))
  {
    float v15 = @"Max Size Bytes";
    uint64_t valuePtr = *((void *)this + 5);
    v16[0] = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    uint64_t v9 = &v15;
    uint64_t v10 = 1LL;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v9);
    CFAutoRelease<void const*>::~CFAutoRelease(v16);
  }

  if (*((_BYTE *)this + 32))
  {
    float v15 = @"Min Size Bytes";
    uint64_t valuePtr = *((void *)this + 3);
    v16[0] = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
    uint64_t v9 = &v15;
    uint64_t v10 = 1LL;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v7, (uint64_t *)&v9);
    CFAutoRelease<void const*>::~CFAutoRelease(v16);
  }

  *a2 = v7;
  uint64_t v7 = 0LL;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v7);
}

void sub_1880C505C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1880C50DC()
{
}

char *virtual thunk to'info::details::InfoTrait<info::SizeInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

void info::EncryptionInfo::~EncryptionInfo(info::EncryptionInfo *this)
{
  *(void *)this = off_18A1D67C8;
  *((void *)this + 4) = &unk_18A1D6820;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
}

{
  *(void *)this = off_18A1D67C8;
  *((void *)this + 4) = &unk_18A1D6820;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  operator delete(this);
}

const void **info::EncryptionInfo::serialize_to_dict@<X0>(info::EncryptionInfo *this@<X0>, void *a2@<X8>)
{
  v16[1] = *(const void **)MEMORY[0x1895F89C0];
  if (*((_BYTE *)this + 16)) {
    uint64_t v4 = (const void **)MEMORY[0x189604DE8];
  }
  else {
    uint64_t v4 = (const void **)MEMORY[0x189604DE0];
  }
  uint64_t v5 = *v4;
  float v15 = (uint64_t *)@"Is Encrypted";
  v16[0] = v5;
  uint64_t valuePtr = 0LL;
  unint64_t v11 = &v15;
  uint64_t v12 = 1LL;
  cf::create_dict_from_list((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  CFAutoRelease<void const*>::~CFAutoRelease(v16);
  CFAutoRelease<__CFBoolean const*>::~CFAutoRelease(&valuePtr);
  if (*((_BYTE *)this + 16))
  {
    uint64_t valuePtr = (const void *)*((void *)this + 1);
    unint64_t v11 = (uint64_t **)@"Key Size";
    uint64_t v12 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberLongLongType, &valuePtr);
    unint64_t v13 = @"UUID";
    uint64_t v6 = (const void *)*((void *)this + 3);
    CFNumberRef v14 = v6;
    if (v6) {
      CFRetain(v6);
    }
    float v15 = (uint64_t *)&v11;
    v16[0] = (const void *)2;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (uint64_t i = 3LL; i != -1; i -= 2LL)
      CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v11)[i]);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v9);
}

void sub_1880C52D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

const __CFString *info::EncryptionInfo::get_category(info::EncryptionInfo *this)
{
  return @"Encryption Info";
}

void virtual thunk to'info::EncryptionInfo::~EncryptionInfo(info::EncryptionInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D67C8;
  *((void *)v1 + 4) = &unk_18A1D6820;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D67C8;
  *((void *)v1 + 4) = &unk_18A1D6820;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  operator delete(v1);
}

char *virtual thunk to'info::details::InfoTrait<info::EncryptionInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

void info::DiskImageInfoRaw::~DiskImageInfoRaw(info::DiskImageInfoRaw *this)
{
  *((void *)this + 15) = off_18A1D6690;
  *((void *)this + 3) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
}

{
  *((void *)this + 15) = off_18A1D6690;
  *((void *)this + 3) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
  operator delete(this);
}

const void **info::DiskImageInfoRaw::serialize_to_dict@<X0>( info::DiskImageInfoRaw *this@<X0>, void *a2@<X8>)
{
  v10[8] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoRaw *))(*(void *)this + 24LL))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  _OWORD v10[2] = @"Format Description";
  v10[3] = @"RAW read-write image";
  info::SizeInfo::serialize_to_dict( (info::DiskImageInfoRaw *)((char *)this + *(void *)(*(void *)this - 112LL)),  &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict( (info::DiskImageInfoRaw *)((char *)this + *(void *)(*(void *)this - 120LL)),  &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4LL;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  __int128 v8 = 0LL;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 7LL; i != -1; i -= 2LL)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_1880C5584(_Unwind_Exception *a1)
{
  for (uint64_t i = 56LL; i != -8; i -= 16LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoRaw::get_category(info::DiskImageInfoRaw *this)
{
  return @"RAW";
}

void virtual thunk to'info::DiskImageInfoRaw::~DiskImageInfoRaw(info::DiskImageInfoRaw *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 15) = off_18A1D6690;
  *((void *)v1 + 3) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 15) = off_18A1D6690;
  *((void *)v1 + 3) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  operator delete(v1);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 15) = off_18A1D6690;
  *((void *)v1 + 3) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 15) = off_18A1D6690;
  *((void *)v1 + 3) = &unk_18A1D66E8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  operator delete(v1);
}

const void **virtual thunk to'info::DiskImageInfoRaw::serialize_to_dict@<X0>( info::DiskImageInfoRaw *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoRaw::serialize_to_dict( (info::DiskImageInfoRaw *)((char *)this + *(void *)(*(void *)this - 40LL)),  a2);
}

const __CFString *virtual thunk to'info::DiskImageInfoRaw::get_category(info::DiskImageInfoRaw *this)
{
  return @"RAW";
}

const void **CFAutoRelease<__CFString const*>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **CFAutoRelease<void const*>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **CFAutoRelease<__CFDictionary *>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **CFAutoRelease<__CFBoolean const*>::~CFAutoRelease(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t info::DiskImageInfoSparseBundle::count_mapped_bytes( info::DiskImageInfoSparseBundle *this, const DiskImageSparseBundle *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v4 = (SparseBundleBackend *)*((void *)a2 + 70);
  unint64_t v13 = (unint64_t)(*((void *)v4 + 15) + *((void *)v4 + 16) - 1LL) / *((void *)v4 + 16);
  SparseBundleBackend::open_mapped_folder(v4, &v12);
  uint64_t v15 = v12;
  uint64_t v5 = *((void *)a2 + 70);
  unsigned int v17 = 0LL;
  uint64_t v6 = operator new(0x30uLL);
  void *v6 = off_18A1D7640;
  v6[1] = &v13;
  v6[2] = &v15;
  void v6[3] = a2;
  v6[4] = &v14;
  v6[5] = this;
  unsigned int v17 = v6;
  SparseBundleBackend::browse_bands_folder(v5, (uint64_t)v16);
  uint64_t v7 = v17;
  if (v17 == v16)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  uint64_t v10 = v14;
  uint64_t v9 = v15;
  uint64_t v15 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16LL))(v9);
  }
  return v10;
}

void sub_1880C589C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  unint64_t v19 = a17;
  if (a17 == v17)
  {
    uint64_t v20 = 4LL;
    unint64_t v19 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 16LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1880C5AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

info::DiskImageInfoSparseBundle *info::DiskImageInfoSparseBundle::DiskImageInfoSparseBundle( info::DiskImageInfoSparseBundle *this, const DiskImageSparseBundle *a2)
{
  *((void *)this + 4) = off_18A1D6E98;
  *((void *)this + 5) = off_18A1D6EE0;
  *((void *)this + 6) = off_18A1D6F28;
  *((void *)this + 7) = off_18A1D71B0;
  *(void *)this = off_18A1D6D78;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = off_18A1D7208;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((void *)this + 15) = off_18A1D72F8;
  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = off_18A1D6E08;
  *((void *)this + 3) = off_18A1D7350;
  *((_BYTE *)this + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0;
  *((void *)this + 1_Block_object_dispose(va, 8) = 0LL;
  info::IdentityInfo::IdentityInfo<DiskImageSparseBundle>((uint64_t *)this + 19, (uint64_t *)&off_18A1D6CF8, (uint64_t)a2);
  *(void *)this = off_18A1D68C0;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D6908;
  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = &unk_18A1D6950;
  *((void *)this + 3) = &unk_18A1D6998;
  *((void *)this + 4) = &unk_18A1D69E0;
  *((void *)this + 5) = &unk_18A1D6A28;
  *((void *)this + 6) = &unk_18A1D6A70;
  *((void *)this + 7) = &unk_18A1D6AD0;
  *((void *)this + 15) = &unk_18A1D6B40;
  *((void *)this + 19) = &unk_18A1D6BB0;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)a2 + 70) + 40LL))(*((void *)a2 + 70));
  uint64_t v5 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + _Block_object_dispose(va, 8) = v4;
  uint64_t v6 = *(void *)((char *)this + *(void *)(v5 - 112) + 8);
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + 56) = v6
                                                                        - info::DiskImageInfoSparseBundle::count_mapped_bytes( this,  a2);
  uint64_t v7 = (*(uint64_t (**)(const DiskImageSparseBundle *))(*(void *)a2 + 32LL))(a2);
  uint64_t v8 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v7;
  uint64_t v9 = (char *)this + *(void *)(v8 - 112);
  uint64_t v10 = *((void *)a2 + 8);
  if (!v9[32]) {
    v9[32] = 1;
  }
  *((void *)v9 + 3) = v10;
  unint64_t v11 = (char *)this + *(void *)(*(void *)this - 112LL);
  *((void *)v11 + 5) = 0x200000000000000LL;
  v11[48] = 1;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 71);
  uint64_t v25 = (crypto::header **)*((void *)a2 + 70);
  __int128 v26 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  populate_backends_info((uint64_t *)&v25, (uint64_t)this + *(void *)(*(void *)this - 104LL));
  if (v12)
  {
    uint64_t v15 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v17 = *((void *)a2 + 70);
  uint64_t v18 = *(crypto::header ***)(v17 + 96);
  unint64_t v19 = *(std::__shared_weak_count **)(v17 + 104);
  uint64_t v25 = v18;
  __int128 v26 = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  if (v18) {
    crypto::format::populate_crypto_info(v18, (DiskImageInfo *)((char *)this + *(void *)(*(void *)this - 104LL)));
  }
  if (v19)
  {
    unint64_t v22 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  return this;
}

void sub_1880C5D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 120) = v12;
  *(void *)(v9 + 24) = v12 + 88;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageSparseBundle>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_18A1D7610;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  unint64_t v11 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], *(CFUUIDBytes *)(*(void *)(a3 + 560) + 136LL));
  CFStringRef v8 = CFUUIDCreateString(v7, v11);
  uint64_t v10 = v8;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v8 = v10;
  }

  a1[1] = (uint64_t)v8;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v10);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v11);
  return a1;
}

void sub_1880C5E90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void info::IdentityInfo::~IdentityInfo(const void **this, const void **a2)
{
  uint64_t v3 = *a2;
  *this = *a2;
  *(const void **)((char *)this + *(v3 - 3)) = a2[3];
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(this + 1);
}

uint64_t info::details::InfoNullGetter<info::SizeInfo>::get()
{
  return 0LL;
}

{
  return 0LL;
}

uint64_t info::details::InfoNullGetter<info::EncryptionInfo>::get()
{
  return 0LL;
}

{
  return 0LL;
}

const __CFString *info::SizeInfo::get_category(info::SizeInfo *this)
{
  return @"Size Info";
}

void virtual thunk to'info::SizeInfo::~SizeInfo(info::SizeInfo *this)
{
}

void info::IdentityInfo::~IdentityInfo(info::IdentityInfo *this)
{
  *(void *)this = off_18A1D76D8;
  *((void *)this + 4) = &unk_18A1D7730;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 1);
}

{
  *(void *)this = off_18A1D76D8;
  *((void *)this + 4) = &unk_18A1D7730;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 1);
  operator delete(this);
}

const void **info::IdentityInfo::serialize_to_dict@<X0>(info::IdentityInfo *this@<X0>, void *a2@<X8>)
{
  v12[1] = *(const void **)MEMORY[0x1895F89C0];
  uint64_t v4 = (const void *)*((void *)this + 1);
  unint64_t v11 = @"UUID";
  v12[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFStringRef v8 = &v11;
  uint64_t v9 = 1LL;
  cf::create_dict_from_list((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  CFAutoRelease<void const*>::~CFAutoRelease(v12);
  uint64_t v5 = (const void *)*((void *)this + 3);
  if (v5)
  {
    unint64_t v11 = @"Parent UUID";
    v12[0] = v5;
    CFRetain(v5);
    CFStringRef v8 = &v11;
    uint64_t v9 = 1LL;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    CFAutoRelease<void const*>::~CFAutoRelease(v12);
  }

  uint64_t v6 = (const void *)*((void *)this + 2);
  if (v6)
  {
    unint64_t v11 = @"Stable UUID";
    v12[0] = v6;
    CFRetain(v6);
    CFStringRef v8 = &v11;
    uint64_t v9 = 1LL;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    CFAutoRelease<void const*>::~CFAutoRelease(v12);
  }

  *a2 = v10;
  uint64_t v10 = 0LL;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
}

void sub_1880C6128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

const __CFString *info::IdentityInfo::get_category(info::IdentityInfo *this)
{
  return @"Identity Info";
}

void virtual thunk to'info::IdentityInfo::~IdentityInfo(info::IdentityInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D76D8;
  *((void *)v1 + 4) = &unk_18A1D7730;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 1);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D76D8;
  *((void *)v1 + 4) = &unk_18A1D7730;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 3);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 2);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 1);
  operator delete(v1);
}

char *virtual thunk to'info::details::InfoTrait<info::IdentityInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

void info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle(info::DiskImageInfoSparseBundle *this)
{
  *((void *)this + 19) = off_18A1D7440;
  *((void *)this + 6) = off_18A1D7498;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
  *((void *)this + 15) = off_18A1D72F8;
  *((void *)this + 3) = off_18A1D7350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
}

{
  *((void *)this + 19) = off_18A1D7440;
  *((void *)this + 6) = off_18A1D7498;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
  *((void *)this + 15) = off_18A1D72F8;
  *((void *)this + 3) = off_18A1D7350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 18);
  operator delete(this);
}

const void **info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>( info::DiskImageInfoSparseBundle *this@<X0>, void *a2@<X8>)
{
  _DWORD v10[10] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoSparseBundle *))(*(void *)this + 24LL))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  _OWORD v10[2] = @"Format Description";
  v10[3] = @"Sparse bundle image";
  info::SizeInfo::serialize_to_dict( (info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 112LL)),  &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict( (info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 120LL)),  &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::IdentityInfo::serialize_to_dict( (info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 128LL)),  &v9);
  v10[8] = @"Identity Info";
  void v10[9] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5LL;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  CFStringRef v8 = 0LL;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 9LL; i != -1; i -= 2LL)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_1880C6490( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 72LL; i != -8; i -= 16LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoSparseBundle::get_category(info::DiskImageInfoSparseBundle *this)
{
  return @"UDSB";
}

void virtual thunk to'info::DiskImageInfoSparseBundle::~DiskImageInfoSparseBundle( info::DiskImageInfoSparseBundle *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 19) = off_18A1D7440;
  *((void *)v1 + 6) = off_18A1D7498;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_18A1D72F8;
  *((void *)v1 + 3) = off_18A1D7350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 19) = off_18A1D7440;
  *((void *)v1 + 6) = off_18A1D7498;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_18A1D72F8;
  *((void *)v1 + 3) = off_18A1D7350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  operator delete(v1);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 19) = off_18A1D7440;
  *((void *)v1 + 6) = off_18A1D7498;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_18A1D72F8;
  *((void *)v1 + 3) = off_18A1D7350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 19) = off_18A1D7440;
  *((void *)v1 + 6) = off_18A1D7498;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 21);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 20);
  *((void *)v1 + 15) = off_18A1D72F8;
  *((void *)v1 + 3) = off_18A1D7350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 18);
  operator delete(v1);
}

const void **virtual thunk to'info::DiskImageInfoSparseBundle::serialize_to_dict@<X0>( info::DiskImageInfoSparseBundle *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoSparseBundle::serialize_to_dict( (info::DiskImageInfoSparseBundle *)((char *)this + *(void *)(*(void *)this - 40LL)),  a2);
}

const __CFString *virtual thunk to'info::DiskImageInfoSparseBundle::get_category( info::DiskImageInfoSparseBundle *this)
{
  return @"UDSB";
}

__n128 std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::__clone( uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x30uLL);
  *(void *)unsigned int v2 = off_18A1D7640;
  *(_OWORD *)(v2 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::__clone( uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_18A1D7640;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

lock_free::bitmap_t *std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::operator()( lock_free::bitmap_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (**((void **)result + 1) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Bands folder contains an out of range band (",  44LL);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)")", 1LL);
    DiskImagesRuntimeException::DiskImagesRuntimeException((uint64_t)exception, (uint64_t)&v14, 0x16u);
  }

  uint64_t v4 = result;
  uint64_t v5 = (void *)*((void *)result + 2);
  if (*v5)
  {
    sparse_bundles::mapped_blocks_t::mapped_blocks_t((uint64_t)&v14, *((void *)result + 3) + 24LL, *a3, v5);
    **((void **)v4 + 4) += lock_free::bitmap_t::get_num_set(v15) << 12;
    uint64_t v6 = v16;
    uint64_t v16 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    __n128 result = v15;
    uint64_t v15 = 0LL;
    if (result) {
      return (lock_free::bitmap_t *)(*(uint64_t (**)(lock_free::bitmap_t *))(*(void *)result + 8LL))(result);
    }
  }

  else
  {
    uint64_t v7 = *((void *)result + 3);
    if ((unint64_t)(*(void *)(*(void *)(v7 + 560) + 120LL) + *(void *)(*(void *)(v7 + 560) + 128LL) - 1LL)
       / *(void *)(*(void *)(v7 + 560) + 128LL)
       - 1 == v3)
      uint64_t v8 = *(void *)(*((void *)result + 5) + *(void *)(**((void **)result + 5) - 112LL) + 8LL)
         - *(void *)(v7 + 64) * v3;
    else {
      uint64_t v8 = *(void *)(v7 + 64);
    }
    **((void **)result + 4) += v8;
  }

  return result;
}

void sub_1880C68C8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

void sub_1880C6A50()
{
}

uint64_t std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::target( uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

void *std::__function::__func<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0,std::allocator<info::DiskImageInfoSparseBundle::count_mapped_bytes(DiskImageSparseBundle const&)::$_0>,void ()(std::string const&,unsigned long long)>::target_type()
{
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return std::ostream::~ostream();
}

void info::DiskImageInfoUDIF::extract_info_from_runs(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  uint64_t v3 = v14;
  if (v14 != v15)
  {
    uint64_t v4 = (_DWORD *)((char *)this + 8);
    uint64_t v5 = *(void *)this;
    do
    {
      uint64_t v6 = *(void *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        int v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          int v8 = dword_18817CD40[v7];
          int v9 = dword_18817CD50[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *uint64_t v4 = v9;
        }
      }

      int64_t v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(void *)((char *)this + *(void *)(v5 - 128) + 16) += v3[9];
      *(void *)((char *)this + *(void *)(v5 - 112) + 56) -= v10 << 9;
      int v11 = v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          int v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void **)v3[2];
          BOOL v13 = *v12 == v3;
          uint64_t v3 = v12;
        }

        while (!v13);
      }

      uint64_t v3 = v12;
    }

    while (v12 != v15);
  }

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)&v14,  v15[0]);
}

uint64_t info::DiskImageInfoUDIF::extract_checksum_info( info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  int v23 = *(_DWORD *)(*((void *)a2 + 17) + 352LL);
  udif::operator<<(&v24, &v23);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, __p);
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 136LL);
  uint64_t v5 = v4 + 8;
  if (v4[31] < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *((void *)v5 + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v22;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v22 = 0LL;
  std::stringbuf::str[abi:ne180100]((uint64_t)v25, (__int128 *)__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *((void *)a2 + 17);
  unint64_t v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    uint64_t v8 = v6 + 360;
    unint64_t v9 = v7 >> 3;
    uint64_t v10 = *(void *)(v24 - 24);
    int v11 = *(_DWORD *)((char *)v25 + v10);
    if (v9 == 1)
    {
      int v16 = *(_DWORD *)((char *)v25 + v10);
    }

    else
    {
      uint64_t v12 = v8;
      unint64_t v13 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v25 + *(void *)(v24 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(_DWORD *)((_BYTE *)v25 + *(void *)(v24 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        uint64_t v14 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v24, (char *)__p);
        *(void *)((char *)v14 + *(void *)(*v14 - 24LL) + 24) = 2LL;
        uint64_t v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1LL);
        ++v12;
        --v13;
      }

      while (v13);
      uint64_t v10 = *(void *)(v24 - 24);
      int v16 = *(_DWORD *)((char *)v25 + v10);
    }

    *(_DWORD *)((char *)v25 + v10) = v16 & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    uint64_t v17 = std::operator<<[abi:ne180100]<std::char_traits<char>>(&v24, (char *)__p);
    *(void *)((char *)v17 + *(void *)(*v17 - 24LL) + 24) = 2LL;
    std::ostream::operator<<();
    *(_DWORD *)((char *)v25 + *(void *)(v24 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = v11;
  }

  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v25, __p);
  uint64_t v18 = (char *)this + *(void *)(*(void *)this - 136LL);
  unint64_t v19 = v18 + 32;
  if (v18[55] < 0) {
    operator delete(*(void **)v19);
  }
  *(_OWORD *)unint64_t v19 = *(_OWORD *)__p;
  *((void *)v19 + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v22;
  uint64_t v24 = *MEMORY[0x189614738];
  *(void *)((char *)&v25[-1] + *(void *)(v24 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(MEMORY[0x189614738] + 24LL);
  v25[0] = MEMORY[0x189614750] + 16LL;
  if (v26 < 0) {
    operator delete((void *)v25[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1895BC2CC](&v27);
}

void sub_1880C6E6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void sub_1880C7030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoUDIF::extract_raw_runs(info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2)
{
  while (!udif::xml_rsrc_iterator::operator==((uint64_t)&v18, (uint64_t)&v23))
  {
    int type = udif::xml_rsrc_iterator::get_type((udif::xml_rsrc_iterator *)&v18);
    udif::xml_rsrc_iterator::get_value(&v18);
    if (type == 1651272568)
    {
      udif::xml_rsrc_iterator::get_type((udif::xml_rsrc_iterator *)&v18);
      value = (const __CFArray *)udif::xml_rsrc_iterator::get_value(&v18);
      info::DiskImageInfoUDIF::extract_runs_from_blx_arr(this, value);
    }

    udif::xml_rsrc_iterator::xml_rsrc_iterator((udif::xml_rsrc_iterator *)v14, (const udif::xml_rsrc_iterator *)&v18);
    ++v22;
    if (v17) {
      CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v16);
    }
    uint64_t v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  if (v26) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v25);
  }
  uint64_t v8 = v24;
  if (v24)
  {
    unint64_t v9 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v21) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v20);
  }
  int v11 = v19;
  if (v19)
  {
    uint64_t v12 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1880C71EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

info::DiskImageInfoUDIF *info::DiskImageInfoUDIF::DiskImageInfoUDIF( info::DiskImageInfoUDIF *this, const DiskImageUDIF *a2, char a3)
{
  *(void *)this = off_18A1D7DC8;
  *((void *)this + 7) = off_18A1D7F30;
  *((void *)this + _Block_object_dispose(va, 8) = off_18A1D7F78;
  *((void *)this + 9) = off_18A1D8200;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v57 + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((void *)this + 17) = off_18A1D8348;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 15gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = 0;
  *((void *)this + 20) = 0LL;
  *((void *)this + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = off_18A1D8490;
  *((void *)this + 3) = off_18A1D8258;
  *((void *)this + 4) = off_18A1D84E8;
  *((_DWORD *)this + 44) = 0;
  *((void *)this + 25) = off_18A1D8638;
  *((void *)this + 5) = off_18A1D83A0;
  *((void *)this + 6) = off_18A1D8690;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  info::IdentityInfo::IdentityInfo<DiskImageUDIF>((uint64_t *)this + 32, (uint64_t *)&off_18A1D7D48, (uint64_t)a2);
  *(void *)this = off_18A1D77E0;
  *((void *)this + 3) = &unk_18A1D7828;
  *((void *)this + 4) = &unk_18A1D7870;
  *((void *)this + 5) = &unk_18A1D78B8;
  *((void *)this + 6) = &unk_18A1D7900;
  *((void *)this + 7) = &unk_18A1D7948;
  *((void *)this + _Block_object_dispose(va, 8) = &unk_18A1D7990;
  *((void *)this + 9) = &unk_18A1D79F0;
  *((void *)this + 17) = &unk_18A1D7A60;
  *((void *)this + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D7AD0;
  *((void *)this + 25) = &unk_18A1D7B40;
  *((void *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = &unk_18A1D7BB0;
  *((_DWORD *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = 2;
  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = 0LL;
  uint64_t v6 = (CFTypeRef *)((char *)this + 16);
  uint64_t v7 = (*(uint64_t (**)(const DiskImageUDIF *))(*(void *)a2 + 32LL))(a2);
  uint64_t v8 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v7;
  uint64_t v9 = *(void *)((char *)this + *(void *)(v8 - 112) + 16);
  uint64_t v10 = (*(uint64_t (**)(const DiskImageUDIF *))(*(void *)a2 + 24LL))(a2);
  uint64_t v11 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + _Block_object_dispose(va, 8) = v10 * v9;
  uint64_t v12 = (char *)this + *(void *)(v11 - 112);
  *((void *)v12 + 5) = *((void *)v12 + 1);
  v12[48] = 1;
  unint64_t v13 = (char *)this + *(void *)(*(void *)this - 112LL);
  *((void *)v13 + 3) = *((void *)v13 + 1);
  v13[32] = 1;
  uint64_t v14 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + 56) = *(void *)((char *)this
                                                                                    + *(void *)(*(void *)this - 112LL)
                                                                                    + 8);
  *(void *)((char *)this + *(void *)(v14 - 128) + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0LL;
  info::DiskImageInfoUDIF::extract_info_from_runs(this, a2);
  info::DiskImageInfoUDIF::extract_checksum_info(this, a2);
  uint64_t v15 = *(void *)this;
  uint64_t v17 = *(void *)(*(void *)this - 128LL);
  if (v16) {
    float v18 = (float)*(unint64_t *)((char *)this + v17 + 16) / (float)v16;
  }
  else {
    float v18 = 1.0;
  }
  *(float *)((char *)this + v17 + 24) = v18;
  populate_backends_info((uint64_t *)a2 + 6, (uint64_t)this + *(void *)(v15 - 104));
  if ((a3 & 1) != 0)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
    char v21 = Mutable;
    if (*v6)
    {
      CFRelease(*v6);
      CFMutableArrayRef Mutable = v21;
    }

    *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = Mutable;
    char v21 = 0LL;
    CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)&v21);
    info::DiskImageInfoUDIF::extract_raw_runs(this, a2);
  }

  return this;
}

void sub_1880C74D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = v7;
  *(void *)(v2 + 40) = v7 + 88;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v3);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageUDIF>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_18A1D7610;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  identifier = udif::details::UDIF_base::get_identifier((udif::details::UDIF_base *)(a3 + 64));
  uint64_t v9 = v8;
  uint64_t v10 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  *(void *)&v15.byte0 = identifier;
  *(void *)&v15.byte8 = v9;
  uint64_t v14 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], v15);
  CFStringRef v11 = CFUUIDCreateString(v10, v14);
  unint64_t v13 = v11;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v11 = v13;
  }

  a1[1] = (uint64_t)v11;
  unint64_t v13 = 0LL;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v13);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v14);
  return a1;
}

void sub_1880C7614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void info::MasterChecksumInfo::~MasterChecksumInfo(void **this, void **a2)
{
  uint64_t v3 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v3 - 3)) = a2[3];
}

const __CFString *info::DiskImageInfoUDIF::get_category(info::DiskImageInfoUDIF *this)
{
  unsigned int v1 = *((_DWORD *)this + 2) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_18A1D8CA0[v1];
  }
}

const __CFString *virtual thunk to'info::DiskImageInfoUDIF::get_category(info::DiskImageInfoUDIF *this)
{
  unsigned int v1 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 48LL) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_18A1D8CA0[v1];
  }
}

void *udif::operator<<(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (udif::checksum_type::strings[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 66)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &udif::checksum_type::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;
  uint64_t v2 = 0LL;
  while (udif::run_type::strings[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 90)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &udif::run_type::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;
  uint64_t v2 = 0LL;
  while (udif::header::segment_num_t::strings[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 12)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &udif::header::segment_num_t::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;
  uint64_t v2 = 0LL;
  while (udif::header::segment_count_t::strings[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 12)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &udif::header::segment_count_t::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  int *v5;
  uint64_t v2 = 0LL;
  while (udif::header::image_variant_type::strings[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 18)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &udif::header::image_variant_type::strings[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

void info::DiskImageInfoUDIF::extract_runs_from_blx_arr(info::DiskImageInfoUDIF *this, CFArrayRef theArray)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  unint64_t Count = CFArrayGetCount(theArray);
  CFIndex v5 = Count;
  if (Count >> 61) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8 * Count;
  }
  uint64_t v7 = operator new[](v6);
  bzero(v7, v6);
  v29.location = 0LL;
  v29.length = v5;
  CFArrayGetValues(theArray, v29, (const void **)v7);
  if (v5 >= 1)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      Value = (const void *)*((void *)v7 + i);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value && CFGetTypeID(Value) != TypeID
        || (Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"Data"), CFTypeID v11 = CFDataGetTypeID(), Value)
        && CFGetTypeID(Value) != v11)
      {
        exception = (cf::CFUtilException *)__cxa_allocate_exception(0x40uLL);
        CFGetTypeID(Value);
        uint64_t v17 = cf::CFUtilException::CFUtilException(exception);
      }

      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      unint64_t v13 = (char *)operator new[](Length);
      bzero(v13, Length);
      v30.length = CFDataGetLength((CFDataRef)Value);
      v30.location = 0LL;
      CFDataGetBytes((CFDataRef)Value, v30, (UInt8 *)v13);
      udif::details::blocks::blocks((udif::details::blocks *)v26, v13);
      if (v27)
      {
        unsigned int v14 = 0;
        CFUUIDBytes v15 = v13 + 204;
        do
        {
          udif::details::run_t::run_t((udif::details::run_t *)&v22, v15);
          int v18 = v22;
          __int128 v19 = v23;
          __int128 v20 = v24;
          int v21 = v25;
          info::DiskImageInfoUDIF::add_run((uint64_t)this, &v18);
          ++v14;
          v15 += 40;
        }

        while (v14 < v27);
      }

      operator delete[](v13);
    }
  }

  operator delete[](v7);
}

void sub_1880C7990(_Unwind_Exception *a1)
{
}

uint64_t std::pair<udif::xml_rsrc_iterator,udif::xml_rsrc_iterator>::~pair(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  if (*(_BYTE *)(a1 + 64)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(a1 + 56));
  }
  std::shared_ptr<char>::~shared_ptr[abi:ne180100](v2);
  if (*(_BYTE *)(a1 + 24)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)(a1 + 16));
  }
  return std::shared_ptr<char>::~shared_ptr[abi:ne180100](a1);
}

void info::DiskImageInfoUDIF::add_run(uint64_t a1, int *a2)
{
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  int v6 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  int v13 = v6;
  udif::operator<<(&v15, &v13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, __p);
  if (v11 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  CFStringRef v8 = CFStringCreateWithCString(v4, (const char *)v7, 0x8000100u);
  CFStringRef v12 = v8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  v14[0] = *MEMORY[0x189614728];
  uint64_t v9 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(void *)((char *)v14 + *(void *)(v14[0] - operator delete((char *)this + *(void *)(*(void *)this - 24LL)) = *(void *)(MEMORY[0x189614728] + 64LL);
  uint64_t v15 = v9;
  v16[0] = MEMORY[0x189614750] + 16LL;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1895BC2CC](&v18);
  CFDictionaryAddValue(Mutable, @"Type", v8);
  CFRelease(v8);
  addCFNumber64ToDict(Mutable, @"Reserved", a2[1]);
  addCFNumber64ToDict(Mutable, @"Sector Count", *((void *)a2 + 2));
  addCFNumber64ToDict(Mutable, @"Start Offset", *((void *)a2 + 1));
  addCFNumber64ToDict(Mutable, @"Compressed Offset", *((void *)a2 + 3));
  addCFNumber64ToDict(Mutable, @"Compressed Length", *((void *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_1880C7BF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a18 = *MEMORY[0x189614728];
  uint64_t v38 = *(void *)(MEMORY[0x189614728] + 72LL);
  *(uint64_t *)((char *)&a18 + *(void *)(a18 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(MEMORY[0x189614728] + 64LL);
  a20 = v38;
  a21 = MEMORY[0x189614750] + 16LL;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1895BC2CC](&a37);
  _Unwind_Resume(a1);
}

const void **info::CompressionInfo::serialize_to_dict@<X0>( info::CompressionInfo *this@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t valuePtr = *((void *)this + 2);
  v12[0] = @"Compressed Bytes";
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  v12[1] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *((_DWORD *)this + 6);
  v12[2] = @"Compression Ratio";
  CFNumberRef v13 = 0LL;
  CFNumberRef v13 = CFNumberCreate(v4, kCFNumberFloatType, &valuePtr);
  unsigned int v5 = *((_DWORD *)this + 2) - 1;
  if (v5 > 3) {
    int v6 = @"raw";
  }
  else {
    int v6 = off_18A1D8CE0[v5];
  }
  unsigned int v14 = @"Compression Type";
  uint64_t v15 = v6;
  v9[0] = (uint64_t)v12;
  v9[1] = 3LL;
  cf::create_dict_from_list(v9, (CFMutableDictionaryRef *)&v10);
  *a2 = v10;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    __n128 result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v12[i]);
  return result;
}

void sub_1880C7DB8(_Unwind_Exception *a1)
{
  for (uint64_t i = 40LL; i != -8; i -= 16LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::CompressionInfo::get_category(info::CompressionInfo *this)
{
  return @"Compression Info";
}

void virtual thunk to'info::CompressionInfo::~CompressionInfo(info::CompressionInfo *this)
{
}

void info::MasterChecksumInfo::~MasterChecksumInfo(info::MasterChecksumInfo *this)
{
  *(void *)this = off_18A1D8C28;
  *((void *)this + 7) = &unk_18A1D8C80;
}

{
  *(void *)this = off_18A1D8C28;
  *((void *)this + 7) = &unk_18A1D8C80;
  operator delete(this);
}

const void **info::MasterChecksumInfo::serialize_to_dict@<X0>( info::MasterChecksumInfo *this@<X0>, void *a2@<X8>)
{
  v16[4] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if (*((char *)this + 55) < 0)
  {
    unsigned int v5 = (const UInt8 *)*((void *)this + 4);
    CFIndex v6 = *((void *)this + 5);
  }

  else
  {
    unsigned int v5 = (const UInt8 *)this + 32;
    CFIndex v6 = *((unsigned __int8 *)this + 55);
  }

  CFTypeRef cf = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], v5, v6, 0x8000100u, 0);
  if (*((char *)this + 31) < 0)
  {
    uint64_t v7 = (const UInt8 *)*((void *)this + 1);
    CFIndex v8 = *((void *)this + 2);
  }

  else
  {
    uint64_t v7 = (const UInt8 *)this + 8;
    CFIndex v8 = *((unsigned __int8 *)this + 31);
  }

  uint64_t v9 = CFStringCreateWithBytes(v4, v7, v8, 0x8000100u, 0);
  CFTypeRef v14 = v9;
  v16[0] = @"Checksum Value";
  v16[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    uint64_t v9 = v14;
  }

  v16[2] = @"Checksum Type";
  v16[3] = v9;
  if (v9) {
    CFRetain(v9);
  }
  v12[0] = (uint64_t)v16;
  v12[1] = 2LL;
  cf::create_dict_from_list(v12, (CFMutableDictionaryRef *)&v13);
  *a2 = v13;
  CFNumberRef v13 = 0LL;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v13);
  for (uint64_t i = 3LL; i != -1; i -= 2LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v16[i]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&v14);
  return CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
}

void sub_1880C8014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  CFIndex v6 = va_arg(va1, const void *);
  CFAutoRelease<void const*>::~CFAutoRelease(v4);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

const __CFString *info::MasterChecksumInfo::get_category(info::MasterChecksumInfo *this)
{
  return @"Master Checksum Info";
}

void virtual thunk to'info::MasterChecksumInfo::~MasterChecksumInfo(info::MasterChecksumInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D8C28;
  *((void *)v1 + 7) = &unk_18A1D8C80;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D8C28;
  *((void *)v1 + 7) = &unk_18A1D8C80;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  operator delete(v1);
}

void info::DiskImageInfoUDIF::~DiskImageInfoUDIF(info::DiskImageInfoUDIF *this)
{
  *(void *)this = off_18A1D77E0;
  *((void *)this + 3) = &unk_18A1D7828;
  *((void *)this + 4) = &unk_18A1D7870;
  *((void *)this + 5) = &unk_18A1D78B8;
  *((void *)this + 6) = &unk_18A1D7900;
  *((void *)this + 7) = &unk_18A1D7948;
  *((void *)this + _Block_object_dispose(va, 8) = &unk_18A1D7990;
  *((void *)this + 9) = &unk_18A1D79F0;
  *((void *)this + 17) = &unk_18A1D7A60;
  *((void *)this + 2std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D7AD0;
  *((void *)this + 25) = &unk_18A1D7B40;
  *((void *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = &unk_18A1D7BB0;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 2);
  *((void *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = off_18A1D87E0;
  *((void *)this + _Block_object_dispose(va, 8) = off_18A1D8838;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 35);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 34);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 33);
  *((void *)this + 25) = off_18A1D8638;
  *((void *)this + 6) = off_18A1D8690;
  *((void *)this + 17) = off_18A1D8348;
  *((void *)this + 5) = off_18A1D83A0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 20);
}

{
  void *v1;
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF(this);
  operator delete(v1);
}

const void **info::DiskImageInfoUDIF::serialize_to_dict@<X0>( info::DiskImageInfoUDIF *this@<X0>, void *a2@<X8>)
{
  v26[1] = *(const void **)MEMORY[0x1895F89C0];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoUDIF *))(*(void *)this + 24LL))(this);
  char v11 = (uint64_t **)@"Image Format";
  uint64_t v12 = v4;
  info::DiskImageInfoUDIF::get_format_desc(this, (CFStringRef *)&cf);
  CFNumberRef v13 = @"Format Description";
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  info::SizeInfo::serialize_to_dict( (info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 112LL)),  &v10);
  uint64_t v15 = @"Size Info";
  uint64_t v16 = v10;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::EncryptionInfo::serialize_to_dict( (info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 120LL)),  &v10);
  char v17 = @"Encryption Info";
  uint64_t v18 = v10;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::CompressionInfo::serialize_to_dict( (info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 128LL)),  &v10);
  __int128 v19 = @"Compression Info";
  __int128 v20 = v10;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::MasterChecksumInfo::serialize_to_dict( (info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 136LL)),  &v10);
  int v21 = @"Master Checksum Info";
  int v22 = v10;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  info::IdentityInfo::serialize_to_dict( (info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 144LL)),  &v10);
  __int128 v23 = @"Identity Info";
  __int128 v24 = v10;
  uint64_t v10 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v10);
  int v25 = (uint64_t *)&v11;
  v26[0] = (const void *)7;
  cf::create_dict_from_list((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 13LL; i != -1; i -= 2LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v11)[i]);
  CFAutoRelease<__CFString const*>::~CFAutoRelease(&cf);
  CFIndex v6 = (const void *)*((void *)this + 2);
  if (v6)
  {
    int v25 = (uint64_t *)@"Runs";
    v26[0] = v6;
    CFRetain(v6);
    char v11 = &v25;
    uint64_t v12 = 1LL;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    CFAutoRelease<void const*>::~CFAutoRelease(v26);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v9);
}

void sub_1880C8470(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void virtual thunk to'info::DiskImageInfoUDIF::~DiskImageInfoUDIF(info::DiskImageInfoUDIF *this)
{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(void *)(*(void *)this - 24LL)));
}

{
  void *v1;
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(void *)(*(void *)this - 24LL)));
  operator delete(v1);
}

{
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(void *)(*(void *)this - 32LL)));
}

{
  void *v1;
  info::DiskImageInfoUDIF::~DiskImageInfoUDIF((info::DiskImageInfoUDIF *)((char *)this
                                                                        + *(void *)(*(void *)this - 32LL)));
  operator delete(v1);
}

const void **virtual thunk to'info::DiskImageInfoUDIF::serialize_to_dict@<X0>( info::DiskImageInfoUDIF *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoUDIF::serialize_to_dict( (info::DiskImageInfoUDIF *)((char *)this + *(void *)(*(void *)this - 40LL)),  a2);
}

char *virtual thunk to'info::details::InfoTrait<info::CompressionInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *virtual thunk to'info::details::InfoTrait<info::MasterChecksumInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    unsigned int v5 = std::locale::use_facet(&v8, MEMORY[0x189614558]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1880C8638( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

udif::xml_rsrc_iterator *udif::xml_rsrc_iterator::xml_rsrc_iterator( udif::xml_rsrc_iterator *this, const udif::xml_rsrc_iterator *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v4;
  if (v4)
  {
    unsigned int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  std::__optional_copy_base<CFAutoRelease<__CFDictionary const*>,false>::__optional_copy_base[abi:ne180100]( (_BYTE *)this + 16,  (uint64_t)a2 + 16);
  *((void *)this + 4) = *((void *)a2 + 4);
  return this;
}

void sub_1880C86A4(_Unwind_Exception *a1)
{
}

_BYTE *std::__optional_copy_base<CFAutoRelease<__CFDictionary const*>,false>::__optional_copy_base[abi:ne180100]( _BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    *(void *)a1 = 0LL;
    uint64_t v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }

  return a1;
}

void sub_1880C8704(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 8)) {
    CFAutoRelease<__CFDictionary const*>::~CFAutoRelease((const void **)v1);
  }
  _Unwind_Resume(exception_object);
}

cf::CFUtilException *cf::CFUtilException::CFUtilException(cf::CFUtilException *this)
{
  v3[0] = *MEMORY[0x189614738];
  *(void *)((char *)v3 + *(void *)(v3[0] - operator delete((char *)this + *(void *)(*(void *)this - 24LL)) = *(void *)(MEMORY[0x189614738] + 24LL);
  v3[1] = MEMORY[0x189614750] + 16LL;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](&v5);
  *(void *)this = off_18A1D8A90;
  return this;
}

void cf::CFUtilException::~CFUtilException(std::exception *this)
{
}

CFStringRef info::DiskImageInfoUDIF::get_format_desc@<X0>( info::DiskImageInfoUDIF *this@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 128LL) + 8);
  if (v3)
  {
    if (v3 > 4) {
      char v4 = @"raw";
    }
    else {
      char v4 = off_18A1D8CE0[v3 - 1];
    }
    CFStringRef result = CFStringCreateWithFormat( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  @"%s (%@)",  "UDIF read-only compressed image",  v4);
  }

  else
  {
    CFStringRef result = @"UDIF uncompressed read-only image";
  }

  *a2 = result;
  return result;
}

const void **CFAutoRelease<__CFArray *>::~CFAutoRelease(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::map[abi:ne180100]( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)a1 = a1 + 8;
  std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>>( (_OWORD *)a1,  *(void **)a2,  (void *)(a2 + 8));
  return a1;
}

void sub_1880C8980(_Unwind_Exception *a1)
{
}

_OWORD *std::map<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__tree_node<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,void *> *,long>>>( _OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = (uint64_t *)result + 1;
    do
    {
      CFStringRef result = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>( v5,  v6,  (uint64_t)(v4 + 4),  (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          std::locale v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          std::locale v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }

        while (!v9);
      }

      char v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

_OWORD *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>( uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>( a1,  a2,  &v11,  &v10,  a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    std::locale v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    uint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    std::__tree<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<_di_plugin_t * (*)(unsigned long long),unsigned long long>>>>::__insert_node_at( a1,  (uint64_t)v11,  v8,  (uint64_t *)v7);
  }

  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>( uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  char v5 = *(_BYTE *)(a5 + 16);
  unint64_t v6 = (v5 & 1) + *(void *)(a5 + 8) - 1LL;
  unint64_t v7 = a2[4];
  if ((a2[6] & 2) == 0) {
    ++v7;
  }
  if (v6 < v7)
  {
LABEL_5:
    std::locale v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v11 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }

      while (v11);
    }

    unint64_t v16 = *(void *)a5;
    if ((*(_BYTE *)(a5 + 16) & 2) == 0) {
      ++v16;
    }
    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>( (uint64_t)a1,  a3,  a5);
  }

  BOOL v11 = (v5 & 2) == 0;
  unint64_t v12 = *(void *)a5;
  if (v11) {
    ++v12;
  }
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    uint64_t v13 = a2[1];
    if (v13)
    {
      CFTypeRef v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        CFTypeRef v14 = (uint64_t *)*v14;
      }

      while (v14);
    }

    else
    {
      char v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v11 = *a4 == v17;
        char v17 = (uint64_t *)a4;
      }

      while (!v11);
    }

    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unint64_t v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0) {
      ++v18;
    }
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }

      else
      {
        *a3 = a2;
        return a2 + 1;
      }

      return (uint64_t *)a4;
    }

    return std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>( (uint64_t)a1,  a3,  a5);
  }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

void *std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__find_equal<boost::icl::discrete_interval<unsigned long long,std::less>>( uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  CFStringRef result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
      unint64_t v6 = *(void *)a3;
    }
    else {
      unint64_t v6 = *(void *)a3 + 1LL;
    }
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        char v8 = *(_BYTE *)(v4 + 48);
        unint64_t v9 = v7[4];
        if ((v8 & 2) == 0) {
          ++v9;
        }
        uint64_t v4 = *v7;
        CFStringRef result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }

      CFStringRef result = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    unint64_t v7 = result;
  }

void info::DiskImageInfoASIF::count_used_extents(info::DiskImageInfoASIF *this, const DiskImageASIF *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (*(void *)di_asif::header::get_dir_offset((const DiskImageASIF *)((char *)a2 + 32), *((void *)a2 + 22)))
  {
    uint64_t v4 = *((void *)a2 + 44);
    uint64_t v5 = *((void *)a2 + 45);
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    di_asif::details::dir_base::create_context((const DiskImageASIF *)((char *)a2 + 200), v22);
    unint64_t v6 = (uint64_t *)((char *)this + 16);
    if (v4 == v5)
    {
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v7 = 0LL;
      char v8 = 0LL;
      do
      {
        unint64_t v9 = *(void *)(v4 + 8LL * (void)v8) * *((unsigned int *)a2 + 24);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(void *)(*(void *)this - 136LL));
          di_asif::details::dir::load_create_table( (uint64_t)a2 + 200,  (di_asif::details::ContextASIF *)v22,  v8,  v9,  0,  1,  (unint64_t *)buf);
          if (*(void *)buf && !*(_BYTE *)(*(void *)buf + 520LL))
          {
            if (*(_BYTE *)(*(void *)buf + 400LL)) {
              uint64_t v10 = (di_asif::details::table *)(*(void *)buf + 40LL);
            }
            else {
              uint64_t v10 = 0LL;
            }
            info::DiskImageInfoASIF::count_table_extents( (uint64_t *)this,  v10,  (di_asif::details::ContextASIF *)v22,  &v24);
          }

          ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)buf);
        }

        char v8 = (ref::details **)((char *)v8 + 1);
        v7 += 8LL;
      }

      while (v4 + v7 != v5);
      uint64_t v11 = *((void *)&v24 + 1);
    }

    uint64_t v12 = *v6;
    *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + 56) -= v12
    uint64_t v13 = *((void *)&v25 + 1);
    if (*((void *)&v25 + 1) && DIDebugLogsEnabled())
    {
      int v14 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = (os_log_s *)getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)uint64_t buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 71;
        __int16 v27 = 2080;
        uint64_t v28 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        __int16 v29 = 2048;
        uint64_t v30 = v13;
        unint64_t v16 = (const char *)_os_log_send_and_compose_impl();
        if (v16)
        {
          char v17 = (char *)v16;
          fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v16);
          free(v17);
        }
      }

      else
      {
        unint64_t v18 = (os_log_s *)getDIOSLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 71;
          __int16 v27 = 2080;
          uint64_t v28 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          __int16 v29 = 2048;
          uint64_t v30 = v13;
          _os_log_impl( &dword_188046000,  v18,  OS_LOG_TYPE_DEBUG,  "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)",  buf,  0x1Cu);
        }
      }

      *__error() = v14;
    }

    v22[0] = off_18A1D9CC8;
    __int128 v19 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

void sub_1880C8FD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1880C91C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoASIF::set_uuids_info( info::DiskImageInfoASIF *this, di_asif::details::dir **a2)
{
  v17[6] = *(const void **)MEMORY[0x1895F89C0];
  stackable_source_identifier = DiskImageASIF::get_stackable_source_identifier(a2);
  v17[4] = stackable_source_identifier;
  v17[5] = (const void *)v5;
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x189604DB0];
  if ((unint64_t)stackable_source_identifier | v5)
  {
    *(void *)&v18.byte8 = v5;
    uint64_t v7 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    *(void *)&v18.byte0 = stackable_source_identifier;
    v17[0] = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], v18);
    CFStringRef v8 = CFUUIDCreateString(v7, (CFUUIDRef)v17[0]);
    v16[0] = v8;
    unint64_t v9 = (CFTypeRef *)((char *)this + *(void *)(*(void *)this - 128LL));
    if (v9[3])
    {
      CFRelease(v9[3]);
      CFStringRef v8 = (CFStringRef)v16[0];
    }

    v9[3] = v8;
    v16[0] = 0LL;
    CFAutoRelease<__CFString const*>::~CFAutoRelease(v16);
    CFAutoRelease<__CFUUID const*>::~CFAutoRelease(v17);
  }

  CFStringRef result = DiskImageASIF::get_stable_uuid(a2);
  *(void *)&v11.byte8 = *(void *)&v11.byte0;
  v17[0] = result;
  v17[1] = *(const void **)&v11.byte0;
  if ((unint64_t)result | *(void *)&v11.byte0)
  {
    uint64_t v12 = *v6;
    *(void *)&v11.byte0 = result;
    v16[0] = CFUUIDCreateFromUUIDBytes(*v6, v11);
    CFStringRef v13 = CFUUIDCreateString(v12, (CFUUIDRef)v16[0]);
    uint64_t v15 = v13;
    int v14 = (CFTypeRef *)((char *)this + *(void *)(*(void *)this - 128LL));
    if (v14[2])
    {
      CFRelease(v14[2]);
      CFStringRef v13 = v15;
    }

    void v14[2] = v13;
    uint64_t v15 = 0LL;
    CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v15);
    return (const __CFString *)CFAutoRelease<__CFUUID const*>::~CFAutoRelease(v16);
  }

  return result;
}

void sub_1880C9334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int v3 = va_arg(va1, const void *);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)va);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)va1);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoASIF::examine_mapped_extents(info::DiskImageInfoASIF *this, const DiskImageASIF *a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
  v42[0] = Mutable;
  uint64_t v6 = (CFTypeRef *)((char *)this + *(void *)(*(void *)this - 136LL));
  if (v6[10])
  {
    CFRelease(v6[10]);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v42[0];
  }

  v6[10] = Mutable;
  v42[0] = 0LL;
  CFAutoRelease<__CFArray *>::~CFAutoRelease(v42);
  di_asif::details::dir_base::create_context((const DiskImageASIF *)((char *)a2 + 200), v35);
  uint64_t v7 = *(const void **)((char *)this + *(void *)(*(void *)this - 112LL) + 16);
  v42[0] = a2;
  v42[1] = 0LL;
  void v42[2] = v7;
  char v43 = 2;
  uint64_t v44 = 0LL;
  uint64_t v45 = v35;
  int v46 = 2;
  CFStringRef v8 = v47;
  v47[0] = off_18A1D1060;
  unint64_t v48 = v47;
  DiskImage::extents_t::begin((DiskImage::extents_t *)v42, (uint64_t)&v30);
  DiskImage::extents_t::end((DiskImage::extents_t *)v42, (uint64_t)v29);
  unint64_t v9 = (const CFArrayCallBacks *)MEMORY[0x189605228];
  while (DiskImage::const_extents_iterator_t::operator!=((uint64_t)&v30, (uint64_t)v29))
  {
    if (v34 == 3)
    {
      int v22 = *__error();
      if (DIForwardLogs())
      {
        DIOSLog = (os_log_s *)getDIOSLog();
        os_log_type_enabled(DIOSLog, OS_LOG_TYPE_ERROR);
        value = (void *)0x4B04100302LL;
        __int16 v38 = 2080;
        unint64_t v39 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        __int16 v40 = 2048;
        uint64_t v41 = v31;
        __int128 v24 = (const char *)_os_log_send_and_compose_impl();
        if (v24)
        {
          __int128 v25 = (char *)v24;
          fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v24);
          free(v25);
        }
      }

      else
      {
        char v26 = (os_log_s *)getDIOSLog();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302LL;
          __int16 v38 = 2080;
          unint64_t v39 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          __int16 v40 = 2048;
          uint64_t v41 = v31;
          _os_log_impl( &dword_188046000,  v26,  OS_LOG_TYPE_ERROR,  "%.*s: Failed during ASIF extents enumeration on offset: %llu",  (uint8_t *)&value,  0x1Cu);
        }
      }

      *__error() = v22;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = off_18A1E43B0;
      uint64_t v28 = std::generic_category();
      exception[1] = 22LL;
      exception[2] = v28;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }

    uint64_t v11 = v31;
    uint64_t v10 = v32;
    char v12 = v33;
    CFMutableArrayRef v13 = CFArrayCreateMutable(v4, 2LL, v9);
    value = v13;
    if ((v12 & 2) != 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    addNumberToCFArray<unsigned long long>(v13, v14);
    addNumberToCFArray<unsigned long long>(value, (v12 & 1) + v10 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)this + *(void *)(*(void *)this - 136LL) + 80), value);
    CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)&value);
    DiskImage::const_extents_iterator_t::operator++((DiskImage::const_extents_iterator_t *)&v30);
  }

  uint64_t v15 = v29[0];
  v29[0] = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  uint64_t v16 = v30;
  uint64_t v30 = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
  }
  if (v48 == v47)
  {
    uint64_t v17 = 4LL;
  }

  else
  {
    if (!v48) {
      goto LABEL_19;
    }
    uint64_t v17 = 5LL;
    CFStringRef v8 = v48;
  }

  (*(void (**)(void *))(*v8 + 8 * v17))(v8);
LABEL_19:
  uint64_t v18 = v44;
  uint64_t v44 = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 40LL))(v18);
  }
  v35[0] = off_18A1D9CC8;
  __int128 v19 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

void sub_1880C9794(_Unwind_Exception *a1)
{
}

info::DiskImageInfoASIF *info::DiskImageInfoASIF::DiskImageInfoASIF( info::DiskImageInfoASIF *this, const DiskImageASIF *a2, char a3)
{
  *(void *)this = off_18A1D92D8;
  *((void *)this + 9) = off_18A1D9440;
  *((void *)this + 10) = off_18A1D9488;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = off_18A1D9710;
  *((void *)this + 5) = off_18A1D9768;
  *((void *)this + 6) = off_18A1D9368;
  *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v57 + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 136) = 0;
  *((void *)this + 19) = off_18A1D9858;
  *((void *)this + 7) = off_18A1D98B0;
  *((void *)this + _Block_object_dispose(va, 8) = off_18A1D93F8;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 16_Block_object_dispose(va, 8) = 0;
  *((void *)this + 2gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = 0LL;
  info::IdentityInfo::IdentityInfo<DiskImageASIF>((uint64_t *)this + 23, (uint64_t *)&off_18A1D9238, a2);
  *((void *)this + 29) = 0LL;
  *((void *)this + 37) = 0LL;
  *(_OWORD *)((char *)this + 24_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(void *)this = off_18A1D8D88;
  *((void *)this + 5) = &unk_18A1D8DD0;
  *((void *)this + 6) = &unk_18A1D8E18;
  *((void *)this + 7) = &unk_18A1D8E60;
  *((void *)this + _Block_object_dispose(va, 8) = &unk_18A1D8EA8;
  *((void *)this + 9) = &unk_18A1D8EF0;
  *((void *)this + 10) = &unk_18A1D8F38;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D8F98;
  *((void *)this + 19) = &unk_18A1D9008;
  *((void *)this + 23) = &unk_18A1D9078;
  *((void *)this + 27) = &unk_18A1D90E8;
  *(_OWORD *)((char *)this + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v6 = (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 32LL))(a2);
  uint64_t v7 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v6;
  uint64_t v8 = *(void *)((char *)this + *(void *)(v7 - 112) + 16);
  uint64_t v9 = (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 24LL))(a2);
  uint64_t v10 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 112LL) + _Block_object_dispose(va, 8) = v9 * v8;
  uint64_t v11 = *((unsigned int *)a2 + 24);
  *(void *)((char *)this + *(void *)(v10 - 136) + 24) = v11;
  *(void *)((char *)this + *(void *)(v10 - 136) + 64) = *((void *)a2 + 11);
  *(void *)((char *)this + *(void *)(v10 - 136) + _Block_object_dispose(va, 8) = *((void *)a2 + 476);
  *(void *)((char *)this + *(void *)(v10 - 112) + 56) = *(void *)((char *)this + *(void *)(v10 - 112) + 8);
  uint64_t v12 = *((void *)a2 + 13);
  if (v12)
  {
    uint64_t v13 = v12 * v11;
  }

  else
  {
    uint64_t v14 = *((void *)a2 + 11);
    uint64_t v13 = (*(uint64_t (**)(const DiskImageASIF *))(*(void *)a2 + 24LL))(a2) * v14;
    uint64_t v10 = *(void *)this;
  }

  uint64_t v15 = (char *)this + *(void *)(v10 - 112);
  *((void *)v15 + 5) = v13;
  v15[48] = 1;
  uint64_t v16 = (char *)this + *(void *)(*(void *)this - 112LL);
  uint64_t v17 = *((unsigned int *)a2 + 24);
  if (!v16[32]) {
    v16[32] = 1;
  }
  *((void *)v16 + 3) = v17;
  *((_BYTE *)this + *(void *)(*(void *)this - 136LL) + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = *((_BYTE *)a2 + 44) & 1;
  info::DiskImageInfoASIF::count_used_extents(this, a2);
  populate_backends_info((uint64_t *)a2 + 2, (uint64_t)this + *(void *)(*(void *)this - 104LL));
  info::DiskImageInfoASIF::set_uuids_info(this, (di_asif::details::dir **)a2);
  if ((a3 & 2) != 0) {
    info::DiskImageInfoASIF::examine_mapped_extents(this, a2);
  }
  return this;
}

void sub_1880C9AF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 2std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = off_18A1D9AE8;
  *(void *)(v1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)(v1 + 296));
  info::IdentityInfo::~IdentityInfo(v3, (const void **)&off_18A1D9238);
  *(void *)(v1 + 15gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v4;
  *(void *)(v1 + 56) = v4 + 88;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t *info::IdentityInfo::IdentityInfo<DiskImageASIF>(uint64_t *a1, uint64_t *a2, DiskImageASIF *this)
{
  *a1 = (uint64_t)off_18A1D7610;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t stackable_identifier = DiskImageASIF::get_stackable_identifier(this);
  uint64_t v9 = v8;
  uint64_t v10 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  *(void *)&v15.byte0 = stackable_identifier;
  *(void *)&v15.byte8 = v9;
  uint64_t v14 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x189604DB0], v15);
  CFStringRef v11 = CFUUIDCreateString(v10, v14);
  uint64_t v13 = v11;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v11 = v13;
  }

  a1[1] = (uint64_t)v11;
  uint64_t v13 = 0LL;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)&v13);
  CFAutoRelease<__CFUUID const*>::~CFAutoRelease((const void **)&v14);
  return a1;
}

void sub_1880C9C24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t info::DiskImageInfoASIF::count_table_extents( uint64_t *a1, di_asif::details::table *this, di_asif::details::ContextASIF *a3, void *a4)
{
  uint64_t result = di_asif::details::table::make_map_entry_iterators(this, (uint64_t)this, (uint64_t)v22);
  unint64_t v7 = *((void *)this + 44);
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a1 + 4;
  while (v22[0] != v22[5] || v22[1] != v22[6])
  {
    CFStringRef v11 = (const di_asif::details::table_entry_map *)di_asif::details::map_entry_iterator_t::operator*((uint64_t)v22);
    di_asif::details::table::make_data_entry_iterators_for_map(this, v11, (uint64_t)v21);
    while (v21[0] != v21[5] || v21[1] != v21[6])
    {
      *(_OWORD *)__int128 v20 = *(_OWORD *)di_asif::details::map_entry_iterator_t::operator*((uint64_t)v21);
      int flags = di_asif::details::table_entry_data::get_flags((di_asif::details::table_entry_data *)v20);
      uint64_t v13 = *a1;
      unint64_t v14 = *(void *)((char *)v8 + *(void *)(*a1 - 112));
      BOOL v15 = v14 > v7;
      unint64_t v16 = v14 - v7;
      if (v15)
      {
        else {
          uint64_t v17 = v16;
        }
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      switch(flags)
      {
        case 0:
          ++*(void *)((char *)v10 + *(void *)(v13 - 136));
          *v8 += v17;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(void *)(v13 - 136) + 40);
          a1[2] += v17;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(void *)(v13 - 136) + 48);
          *v10 += v17;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(void *)(v13 - 136) + 56);
          *v9 += v17;
          if (v17)
          {
            info::DiskImageInfoASIF::inspect_bitmap_for_entry(a1, this, a3, v20[0], v20[1], a4, v17);
            uint64_t v13 = *a1;
          }

          break;
        default:
          break;
      }

      v7 += *(void *)((char *)v9 + *(void *)(v13 - 136));
      di_asif::details::data_entry_iterator_t::operator++((uint64_t)v21, (uint64_t)v20);
    }

    uint64_t result = di_asif::details::map_entry_iterator_t::operator++((uint64_t)v22, (uint64_t)v21);
  }

  return result;
}

void di_asif::details::ContextASIF::~ContextASIF(di_asif::details::ContextASIF *this)
{
  *(void *)this = off_18A1D9CC8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(void *)this = off_18A1D9CC8;
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  operator delete(this);
}

unint64_t *info::DiskImageInfoASIF::inspect_bitmap_for_entry( void *a1, di_asif::details::table *a2, di_asif::details::ContextASIF *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v28[0] = a4;
  v28[1] = a5;
  unint64_t start_block = di_asif::details::table_entry_data::get_start_block((di_asif::details::table_entry_data *)v28);
  di_asif::details::table::get_bitmap(a2, a3, start_block, 0, 1LL, &v27);
  uint64_t v13 = (char *)a1 + *(void *)(*a1 - 112LL);
  unint64_t v14 = *((void *)v13 + 1);
  unint64_t v15 = *((void *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = off_18A1E43B0;
    char v26 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v26;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "Corrupted ASIF image.";
  }

  unint64_t logical_offset = di_asif::details::table_entry_data::get_logical_offset((di_asif::details::table_entry_data *)v28);
  unint64_t v17 = logical_offset + a7;
  if (logical_offset < v17)
  {
    int v18 = 0;
    unint64_t v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27) {
          __int128 v20 = *(_BYTE *)(v27 + 224) ? (void *)(v27 + 40) : 0LL;
        }
        else {
          __int128 v20 = 0LL;
        }
        unint64_t v21 = di_asif::details::map_element::search_for_pattern_match(v20, a2, v18, logical_offset, v17);
        int v22 = a6;
        unint64_t v23 = (v21 - logical_offset) / v19;
        if (v18)
        {
          int v22 = a6 + 1;
          if (v18 == 2) {
            break;
          }
        }

        *v22 += v23;
        ++v18;
        unint64_t logical_offset = v21;
      }

      int v18 = 0;
      a6[2] += v23;
      unint64_t logical_offset = v21;
    }

    while (v21 < v17);
  }

  return ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset(&v27);
}

void sub_1880CA03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void info::ASIFInfo::~ASIFInfo(info::ASIFInfo *this)
{
  *(void *)this = off_18A1D9F90;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D9FE8;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 10);
}

{
  *(void *)this = off_18A1D9F90;
  *((void *)this + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D9FE8;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 10);
  operator delete(this);
}

const void **info::ASIFInfo::serialize_to_dict@<X0>(info::ASIFInfo *this@<X0>, void *a2@<X8>)
{
  v31[1] = *(const void **)MEMORY[0x1895F89C0];
  uint64_t valuePtr = *((void *)this + 1);
  uint64_t v12 = (uint64_t **)@"Dir Pointer Version";
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v13 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberLongLongType, &valuePtr);
  unint64_t v14 = @"Num Tables";
  uint64_t valuePtr = *((void *)this + 2);
  CFNumberRef v15 = 0LL;
  CFNumberRef v15 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  unint64_t v16 = @"Chunk Size";
  uint64_t valuePtr = *((void *)this + 3);
  CFNumberRef v17 = 0LL;
  CFNumberRef v17 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  int v18 = @"Uninitialized Entries";
  uint64_t valuePtr = *((void *)this + 4);
  CFNumberRef v19 = 0LL;
  CFNumberRef v19 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  __int128 v20 = @"Full Entries";
  uint64_t valuePtr = *((void *)this + 5);
  CFNumberRef v21 = 0LL;
  CFNumberRef v21 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  int v22 = @"Unmapped Entries";
  uint64_t valuePtr = *((void *)this + 6);
  CFNumberRef v23 = 0LL;
  CFNumberRef v23 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  __int128 v24 = @"Bitmapped Entries";
  uint64_t valuePtr = *((void *)this + 7);
  CFNumberRef v25 = 0LL;
  CFNumberRef v25 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  char v26 = @"Max Sector Count";
  uint64_t valuePtr = *((void *)this + 8);
  CFNumberRef v27 = 0LL;
  CFNumberRef v5 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t v6 = *((unsigned __int8 *)this + 72);
  CFNumberRef v27 = v5;
  uint64_t v28 = @"Is Cache";
  uint64_t valuePtr = v6;
  CFNumberRef v29 = 0LL;
  CFNumberRef v29 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  uint64_t v30 = (uint64_t *)&v12;
  v31[0] = (const void *)9;
  cf::create_dict_from_list((uint64_t *)&v30, (CFMutableDictionaryRef *)&v10);
  for (uint64_t i = 17LL; i != -1; i -= 2LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)&(&v12)[i]);
  uint64_t v8 = (const void *)*((void *)this + 10);
  if (v8)
  {
    uint64_t v30 = (uint64_t *)@"Mapped Sectors";
    v31[0] = v8;
    CFRetain(v8);
    uint64_t v12 = &v30;
    uint64_t v13 = 1LL;
    cf::add_key_value_pairs_to_dict((CFMutableDictionaryRef *)&v10, (uint64_t *)&v12);
    CFAutoRelease<void const*>::~CFAutoRelease(v31);
  }

  *a2 = v10;
  uint64_t v10 = 0LL;
  return CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v10);
}

void sub_1880CA354(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1880CA3D8()
{
}

const __CFString *info::ASIFInfo::get_category(info::ASIFInfo *this)
{
  return @"ASIF Info";
}

void virtual thunk to'info::ASIFInfo::~ASIFInfo(info::ASIFInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D9F90;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D9FE8;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *(void *)uint64_t v1 = off_18A1D9F90;
  *((void *)v1 + 1std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1D9FE8;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 10);
  operator delete(v1);
}

char *virtual thunk to'info::details::InfoTrait<info::ASIFInfo>::get(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

void info::DiskImageInfoASIF::~DiskImageInfoASIF(info::DiskImageInfoASIF *this)
{
  *((void *)this + 27) = off_18A1D9AE8;
  *((void *)this + 9) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 37);
  *((void *)this + 23) = off_18A1D99A0;
  *((void *)this + 10) = off_18A1D99F8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 24);
  *((void *)this + 19) = off_18A1D9858;
  *((void *)this + 7) = off_18A1D98B0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
}

{
  *((void *)this + 27) = off_18A1D9AE8;
  *((void *)this + 9) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)this + 37);
  *((void *)this + 23) = off_18A1D99A0;
  *((void *)this + 10) = off_18A1D99F8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 24);
  *((void *)this + 19) = off_18A1D9858;
  *((void *)this + 7) = off_18A1D98B0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 22);
  operator delete(this);
}

const void **info::DiskImageInfoASIF::serialize_to_dict@<X0>( info::DiskImageInfoASIF *this@<X0>, void *a2@<X8>)
{
  v10[12] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoASIF *))(*(void *)this + 24LL))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  _OWORD v10[2] = @"Format Description";
  v10[3] = @"Apple sparse image";
  info::SizeInfo::serialize_to_dict( (info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 112LL)),  &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::EncryptionInfo::serialize_to_dict( (info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 120LL)),  &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::ASIFInfo::serialize_to_dict( (info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 136LL)),  &v9);
  v10[8] = @"ASIF Info";
  void v10[9] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  info::IdentityInfo::serialize_to_dict( (info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 128LL)),  &v9);
  _DWORD v10[10] = @"Identity Info";
  void v10[11] = v9;
  uint64_t v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6LL;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 11LL; i != -1; i -= 2LL)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_1880CA734(_Unwind_Exception *a1)
{
  for (uint64_t i = 88LL; i != -8; i -= 16LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoASIF::get_category(info::DiskImageInfoASIF *this)
{
  return @"ASIF";
}

void virtual thunk to'info::DiskImageInfoASIF::~DiskImageInfoASIF(info::DiskImageInfoASIF *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 27) = off_18A1D9AE8;
  *((void *)v1 + 9) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_18A1D99A0;
  *((void *)v1 + 10) = off_18A1D99F8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_18A1D9858;
  *((void *)v1 + 7) = off_18A1D98B0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 27) = off_18A1D9AE8;
  *((void *)v1 + 9) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_18A1D99A0;
  *((void *)v1 + 10) = off_18A1D99F8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_18A1D9858;
  *((void *)v1 + 7) = off_18A1D98B0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  operator delete(v1);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 27) = off_18A1D9AE8;
  *((void *)v1 + 9) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_18A1D99A0;
  *((void *)v1 + 10) = off_18A1D99F8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_18A1D9858;
  *((void *)v1 + 7) = off_18A1D98B0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 27) = off_18A1D9AE8;
  *((void *)v1 + 9) = off_18A1D9B40;
  CFAutoRelease<__CFArray *>::~CFAutoRelease((const void **)v1 + 37);
  *((void *)v1 + 23) = off_18A1D99A0;
  *((void *)v1 + 10) = off_18A1D99F8;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 26);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 25);
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 24);
  *((void *)v1 + 19) = off_18A1D9858;
  *((void *)v1 + 7) = off_18A1D98B0;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 22);
  operator delete(v1);
}

const void **virtual thunk to'info::DiskImageInfoASIF::serialize_to_dict@<X0>( info::DiskImageInfoASIF *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoASIF::serialize_to_dict( (info::DiskImageInfoASIF *)((char *)this + *(void *)(*(void *)this - 40LL)),  a2);
}

const __CFString *virtual thunk to'info::DiskImageInfoASIF::get_category(info::DiskImageInfoASIF *this)
{
  return @"ASIF";
}

uint64_t di_asif::header::get_dir_offset(di_asif::header *this, uint64_t a2)
{
  if (a2 == 1) {
    return (uint64_t)this + 24;
  }
  if (a2)
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "ASIF: invalid dir index to header", 0x16u);
  }

  return (uint64_t)this + 16;
}

unint64_t *ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset(unint64_t *a1)
{
  do
    uint64_t result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0LL, a1));
  if (result)
  {
    do
    {
      unint64_t v3 = __ldaxr(result);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, result));
    if (!v4)
    {
      uint64_t v5 = result[4];
      result[4] = -1LL;
      return (unint64_t *)ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val( (uint64_t)result,  v5,  1u);
    }
  }

  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::reset_val( uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(_BYTE *)(a1 + 520) || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    int v7 = (a3 >> 1) & 2;
    goto LABEL_9;
  }

  int v7 = (a3 >> 1) & 2;
  if (!ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::close<di_asif::details::table,int>(a1))
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()( a1 + 408,  a1,  a2,  v7);
    MEMORY[0x1895BC200](a1 + 24);
    return 1LL;
  }

  if ((v3 & 2) != 0)
  {
    *(void *)&__int128 v9 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((void *)&v9 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 78LL;
    int v10 = 16;
    di_log::logger<di_log::log_printer<210ul>>::logger(v11, &v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v12,  (uint64_t)"Got error when trying to close ",  31LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" with ret ", 10LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)", Force closing.", 16LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v11);
    MEMORY[0x1895BC2CC](&v13);
    goto LABEL_9;
  }

  if ((v3 & 1) != 0) {
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()( a1 + 408,  a1,  a2,  v7 | 1);
  }
  return 0LL;
}

void sub_1880CAC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t ref::details::ctrl_blk<di_asif::details::table,unsigned long long>::close<di_asif::details::table,int>( uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 400)) {
    return 0LL;
  }
  uint64_t v1 = (di_asif::details::table *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 496);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, di_asif::details::table *))(*(void *)v2 + 48LL))(v2, v1);
  }
  else {
    return di_asif::details::table::close(v1);
  }
}

void *di_log::logger<di_log::log_printer<210ul>>::logger(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<210ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1D9D28;
  a1[45] = &unk_18A1D9E28;
  a1[46] = &unk_18A1D9E50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1D9D28;
  a1[45] = &unk_18A1D9DB0;
  a1[46] = &unk_18A1D9DD8;
  return a1;
}

void sub_1880CACD8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()( uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48LL))(v4, &v7, &v6, &v8);
}

uint64_t *std::__optional_destruct_base<di_asif::details::table,false>::reset[abi:ne180100](uint64_t *result)
{
  if (*((_BYTE *)result + 360))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    std::deque<std::atomic<DiskImage::Context *>>::~deque[abi:ne180100](v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    uint64_t v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = (uint64_t)v2;
      operator delete(v2);
    }

    uint64_t result = std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100](v1 + 2);
    *((_BYTE *)v1 + 360) = 0;
  }

  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1D9EC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880CAE48(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1D9EC0;
  di_log::logger_buf<di_log::log_printer<210ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<210ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<210ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<210ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<210ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<210ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880CB1FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<210ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 210LL;
    __int16 v22 = 2082;
    CFNumberRef v23 = v8;
    __int128 v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      int v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    CFStringRef v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 210LL;
      __int16 v22 = 2082;
      CFNumberRef v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  unsigned __int8 v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    unsigned __int8 v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *std::unique_ptr<di_asif::details::table_entry,std::function<void ()(di_asif::details::table_entry*)>>::reset[abi:ne180100]( uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

unint64_t *ref::tagged_ptr<di_asif::details::map_element,unsigned long long>::reset( unint64_t *a1)
{
  do
    uint64_t result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0LL, a1));
  if (result)
  {
    do
    {
      unint64_t v3 = __ldaxr(result);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, result));
    if (!v4)
    {
      uint64_t v5 = result[4];
      result[4] = -1LL;
      return (unint64_t *)ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val( (uint64_t)result,  v5,  1u);
    }
  }

  return result;
}

uint64_t ref::details::ctrl_blk<di_asif::details::map_element,unsigned long long>::reset_val( uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  if (*(_BYTE *)(a1 + 344)
    || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(_BYTE *)(a1 + 224)
    || (uint64_t v7 = *(void *)(a1 + 320)) == 0)
  {
    int v8 = (a3 >> 1) & 2;
    goto LABEL_11;
  }

  int v8 = (a3 >> 1) & 2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48LL))(v7, a1 + 40))
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()( a1 + 232,  a1,  a2,  v8);
    MEMORY[0x1895BC200](a1 + 24);
    return 1LL;
  }

  if ((v3 & 2) != 0)
  {
    *(void *)&__int128 v10 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((void *)&v10 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 84LL;
    int v11 = 16;
    di_log::logger<di_log::log_printer<210ul>>::logger(v12, &v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v13,  (uint64_t)"Got error when trying to close ",  31LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)" with ret ", 10LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)", Force closing.", 16LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<210ul>>::~logger_buf((uint64_t)v12);
    MEMORY[0x1895BC2CC](&v14);
    goto LABEL_11;
  }

  if ((v3 & 1) != 0) {
    std::function<void ()(ref::details::ctrl_blk<di_asif::details::table,unsigned long long> *,unsigned long long,diskimage_uio::option_set_ns::option_set<ref::details::deleter_options>)>::operator()( a1 + 232,  a1,  a2,  v8 | 1);
  }
  return 0LL;
}

void sub_1880CB68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t *std::__optional_destruct_base<di_asif::details::map_element,false>::reset[abi:ne180100]( uint64_t *result)
{
  if (*((_BYTE *)result + 184))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = (uint64_t)off_18A1D9F40;
    uint64_t result = std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100](v1 + 7);
    *((_BYTE *)v1 + 184) = 0;
  }

  return result;
}

void lock_free::bitmap_dynamically_allocated_t::~bitmap_dynamically_allocated_t( lock_free::bitmap_dynamically_allocated_t *this)
{
  *(void *)this = off_18A1D9F40;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 3);
}

{
  *(void *)this = off_18A1D9F40;
  std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 3);
  operator delete(this);
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::~unique_ptr[abi:ne180100]( uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *std::unique_ptr<unsigned long long,std::function<void ()(unsigned long long *)>>::reset[abi:ne180100]( uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

DiskImageInfo *info::DiskImageInfoLocked::DiskImageInfoLocked(DiskImageInfo *a1, crypto::header **a2)
{
  *((_BYTE *)a1 + 64) = 0;
  *((_BYTE *)a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 0;
  *((void *)a1 + 10) = 0LL;
  *(void *)a1 = off_18A1DA078;
  *((void *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = &unk_18A1DA0C0;
  *((void *)a1 + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = &unk_18A1DA108;
  *((void *)a1 + 3) = &unk_18A1DA150;
  *((void *)a1 + 4) = &unk_18A1DA198;
  *((void *)a1 + 5) = &unk_18A1DA1E0;
  *((void *)a1 + 6) = &unk_18A1DA228;
  *((void *)a1 + 7) = &unk_18A1DA288;
  crypto::header::populate_crypto_header_info(*a2, a1);
  return a1;
}

void sub_1880CB864(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = off_18A1DA2F8;
  *(void *)(v1 + 24) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease(v2);
  _Unwind_Resume(a1);
}

void info::DiskImageInfoLocked::~DiskImageInfoLocked(info::DiskImageInfoLocked *this)
{
  *((void *)this + 7) = off_18A1DA2F8;
  *((void *)this + 3) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 10);
}

{
  *((void *)this + 7) = off_18A1DA2F8;
  *((void *)this + 3) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)this + 10);
  operator delete(this);
}

const void **info::DiskImageInfoLocked::serialize_to_dict@<X0>( info::DiskImageInfoLocked *this@<X0>, void *a2@<X8>)
{
  v10[6] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (*(uint64_t (**)(info::DiskImageInfoLocked *))(*(void *)this + 24LL))(this);
  v10[0] = @"Image Format";
  v10[1] = v4;
  _OWORD v10[2] = @"Format Description";
  v10[3] = @"Locked encrypted image";
  info::EncryptionInfo::serialize_to_dict( (info::DiskImageInfoLocked *)((char *)this + *(void *)(*(void *)this - 112LL)),  &v9);
  v10[4] = @"Encryption Info";
  v10[5] = v9;
  __int128 v9 = 0LL;
  CFAutoRelease<__CFDictionary const*>::~CFAutoRelease(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3LL;
  cf::create_dict_from_list(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  int v8 = 0LL;
  CFAutoRelease<__CFDictionary *>::~CFAutoRelease(&v8);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    uint64_t result = CFAutoRelease<void const*>::~CFAutoRelease((const void **)&v10[i]);
  return result;
}

void sub_1880CBA00(_Unwind_Exception *a1)
{
  for (uint64_t i = 40LL; i != -8; i -= 16LL)
    CFAutoRelease<void const*>::~CFAutoRelease((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

const __CFString *info::DiskImageInfoLocked::get_category(info::DiskImageInfoLocked *this)
{
  return @"Unknown";
}

void virtual thunk to'info::DiskImageInfoLocked::~DiskImageInfoLocked(info::DiskImageInfoLocked *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 7) = off_18A1DA2F8;
  *((void *)v1 + 3) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24LL);
  *((void *)v1 + 7) = off_18A1DA2F8;
  *((void *)v1 + 3) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  operator delete(v1);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 7) = off_18A1DA2F8;
  *((void *)v1 + 3) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
}

{
  char *v1;
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32LL);
  *((void *)v1 + 7) = off_18A1DA2F8;
  *((void *)v1 + 3) = &unk_18A1DA350;
  CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)v1 + 10);
  operator delete(v1);
}

const void **virtual thunk to'info::DiskImageInfoLocked::serialize_to_dict@<X0>( info::DiskImageInfoLocked *this@<X0>, void *a2@<X8>)
{
  return info::DiskImageInfoLocked::serialize_to_dict( (info::DiskImageInfoLocked *)((char *)this + *(void *)(*(void *)this - 40LL)),  a2);
}

const __CFString *virtual thunk to'info::DiskImageInfoLocked::get_category(info::DiskImageInfoLocked *this)
{
  return @"Unknown";
}

DiskImageSparseBundle *DiskImageSparseBundle::DiskImageSparseBundle( DiskImageSparseBundle *a1, void *a2, uint64_t a3)
{
  *((_BYTE *)a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = &off_18A1DA3B8;
  unsigned int v6 = (char *)a1 + 24;
  sparse_bundles::bundle_commons_t::bundle_commons_t((DiskImageSparseBundle *)((char *)a1 + 24), a1);
  *((void *)a1 + 70) = *a2;
  uint64_t v7 = a2[1];
  *((void *)a1 + 7std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v7;
  if (v7)
  {
    int v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  __int128 v10 = (SparseBundleBackend **)((char *)a1 + 560);
  *((void *)a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 850045863LL;
  *((void *)a1 + 79) = 0LL;
  *(_OWORD *)((char *)a1 + 584) = 0u;
  *(_OWORD *)((char *)a1 + 600) = 0u;
  *(_OWORD *)((char *)a1 + 6std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = 0u;
  int v11 = (system_properties *)std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.diskimages.band_unmap");
  unsigned int logical_cpus = system_properties::get_logical_cpus(v11);
  workqueue::workqueue::workqueue((char *)a1 + 640, __p, logical_cpus);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  DiskImageSparseBundle::init_bands_array_size(a1);
  *((void *)a1 + _Block_object_dispose(va, 8) = *(void *)(*((void *)a1 + 70) + 128LL);
  *((void *)a1 + 9) = a3;
  std::vector<sparse_bundles::band_ptr>::reserve((uint64_t *)a1 + 89, *((void *)a1 + 2));
  if (*((void *)a1 + 2))
  {
    unint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = operator new(0x28uLL);
      *uint64_t v14 = 1LL;
      v14[1] = v6;
      void v14[2] = 0LL;
      uint64_t v14[3] = v13;
      v14[4] = 1LL;
      __p[0] = v14;
      __p[1] = 0LL;
      uint64_t v30 = -1LL;
      unint64_t v15 = *((void *)a1 + 90);
      if (v15 >= *((void *)a1 + 91))
      {
        uint64_t v16 = std::vector<sparse_bundles::band_ptr>::__emplace_back_slow_path<sparse_bundles::band_ptr>( (uint64_t *)a1 + 89,  (uint64_t)__p);
      }

      else
      {
        sparse_bundles::band_ptr::band_ptr(*((void *)a1 + 90), (uint64_t)__p);
        uint64_t v16 = v15 + 24;
        *((void *)a1 + 90) = v15 + 24;
      }

      *((void *)a1 + 90) = v16;
      sparse_bundles::band_ptr::~band_ptr((unint64_t **)__p);
      ++v13;
    }

    while (v13 < *((void *)a1 + 2));
  }

  *(void *)&__int128 v27 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((void *)&v27 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 44LL;
  int v28 = 0;
  di_log::logger<di_log::log_printer<46ul>>::logger(__p, &v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v31,  (uint64_t)"Initialized bands array of size ",  32LL);
  std::ostream::operator<<();
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf((uint64_t)__p);
  MEMORY[0x1895BC2CC](&v32);
  SparseBundleBackend::open_bands_folder(*v10, __p);
  int v17 = __p[0];
  __p[0] = 0LL;
  uint64_t v18 = *((void *)a1 + 4);
  *((void *)a1 + 4) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 16LL))(v18);
    uint64_t v19 = __p[0];
    __p[0] = 0LL;
    if (v19) {
      (*(void (**)(void *))(*(void *)v19 + 16LL))(v19);
    }
  }

  if ((*(unsigned int (**)(DiskImageSparseBundle *))(*(void *)a1 + 40LL))(a1))
  {
    SparseBundleBackend::open_mapped_folder(*v10, __p);
    __int16 v20 = __p[0];
    __p[0] = 0LL;
    uint64_t v21 = *((void *)a1 + 5);
    *((void *)a1 + 5) = v20;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v21 + 16LL))(v21);
      __int16 v22 = __p[0];
      __p[0] = 0LL;
      if (v22) {
        (*(void (**)(void *))(*(void *)v22 + 16LL))(v22);
      }
    }

    SparseBundleBackend::get_existing_bands(*v10, __p);
    CFNumberRef v23 = __p[0];
    __p[0] = 0LL;
    uint64_t v24 = *((void *)a1 + 43);
    *((void *)a1 + 43) = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      CFNumberRef v25 = __p[0];
      __p[0] = 0LL;
      if (v25) {
        (*(void (**)(void *))(*(void *)v25 + 8LL))(v25);
      }
    }
  }

  return a1;
}

void sub_1880CBE38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t DiskImageSparseBundle::init_bands_array_size(DiskImageSparseBundle *this)
{
  uint64_t result = FileDescriptor::is_mounted_on_afp((FileDescriptor *)(*((void *)this + 70) + 24LL));
  if ((_DWORD)result)
  {
    *(void *)&__int128 v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 44LL;
    int v5 = 0;
    di_log::logger<di_log::log_printer<59ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Mounted on AFP, max open bands is set to ",  41LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf((uint64_t)v6);
    uint64_t result = MEMORY[0x1895BC2CC](&v8);
    uint64_t v3 = 3LL;
  }

  else
  {
    uint64_t v3 = 64LL;
  }

  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v3;
  return result;
}

void sub_1880CBF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t std::vector<sparse_bundles::band_ptr>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<iovec>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( result,  a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)v7);
  }

  return result;
}

void sub_1880CC03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *di_log::logger<di_log::log_printer<46ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<46ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DA560;
  a1[45] = &unk_18A1DA660;
  a1[46] = &unk_18A1DA688;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1DA560;
  a1[45] = &unk_18A1DA5E8;
  a1[46] = &unk_18A1DA610;
  return a1;
}

void sub_1880CC0D4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  return a1;
}

void workqueue::workqueue::~workqueue(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v2);
}

BOOL FileDescriptor::is_mounted_on_afp(FileDescriptor *this)
{
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1718642273 && v4 == 115;
  }

  else
  {
    BOOL v6 = 0LL;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }

  return v6;
}

void *di_log::logger<di_log::log_printer<59ul>>::logger(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<59ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DA780;
  a1[45] = &unk_18A1DA880;
  a1[46] = &unk_18A1DA8A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1DA780;
  a1[45] = &unk_18A1DA808;
  a1[46] = &unk_18A1DA830;
  return a1;
}

void sub_1880CC298(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::flush_open_bands(DiskImageSparseBundle *this)
{
  v12[18] = *(dispatch_group_t *)MEMORY[0x1895F89C0];
  unsigned int v11 = 0;
  workqueue::workqueue::create_transaction((DiskImageSparseBundle *)((char *)this + 352), 0LL, (uint64_t)v12);
  uint64_t v2 = (const sparse_bundles::band_ptr *)*((void *)this + 89);
  int v3 = (const sparse_bundles::band_ptr *)*((void *)this + 90);
  if (v2 != v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = MEMORY[0x1895F87A8];
    do
    {
      sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)&v9, v2);
      if (v10 && (*(_BYTE *)(v10 + 68) & 1) != 0)
      {
        v7[0] = v5;
        v7[1] = 1174405120LL;
        uint64_t v7[2] = ___ZN21DiskImageSparseBundle16flush_open_bandsEv_block_invoke;
        void v7[3] = &__block_descriptor_tmp_3;
        sparse_bundles::band_ptr::band_ptr((sparse_bundles::band_ptr *)v8, (const sparse_bundles::band_ptr *)&v9);
        void v8[3] = (unint64_t *)&v11;
        workqueue::transaction::add(v12, v7);
        ++v4;
        sparse_bundles::band_ptr::~band_ptr(v8);
      }

      sparse_bundles::band_ptr::~band_ptr(&v9);
      uint64_t v2 = (const sparse_bundles::band_ptr *)((char *)v2 + 24);
    }

    while (v2 != v3);
  }

  workqueue::transaction::~transaction((workqueue::transaction *)v12);
  return atomic_load(&v11);
}

void sub_1880CC448(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN21DiskImageSparseBundle16flush_open_bandsEv_block_invoke(uint64_t a1)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((void *)&v3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 47LL;
    int v4 = 2;
    di_log::logger<di_log::log_printer<80ul>>::logger(v5, &v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Flushing ", 9LL);
    sparse_bundles::operator<<(&v6);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf((uint64_t)v5);
    MEMORY[0x1895BC2CC](&v7);
  }

  uint64_t result = sparse_bundles::Band::flush(*(sparse_bundles::Band **)(a1 + 40));
  if ((_DWORD)result) {
    atomic_store(result, *(unsigned int **)(a1 + 56));
  }
  return result;
}

void sub_1880CC510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<80ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<80ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DA9A0;
  a1[45] = &unk_18A1DAAA0;
  a1[46] = &unk_18A1DAAC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1DA9A0;
  a1[45] = &unk_18A1DAA28;
  a1[46] = &unk_18A1DAA50;
  return a1;
}

void sub_1880CC5A8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t __copy_helper_block_e8_32c31_ZTSN14sparse_bundles8band_ptrE(uint64_t a1, uint64_t a2)
{
  return sparse_bundles::band_ptr::band_ptr( (sparse_bundles::band_ptr *)(a1 + 32),  (const sparse_bundles::band_ptr *)(a2 + 32));
}

void __destroy_helper_block_e8_32c31_ZTSN14sparse_bundles8band_ptrE(uint64_t a1)
{
}

uint64_t DiskImageSparseBundle::flush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
    int v8 = 2;
    di_log::logger<di_log::log_printer<101ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Starting flush", 14LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x1895BC2CC](v11);
  }

  std::mutex::lock((std::mutex *)(a1 + 576));
  sparse_bundles::eviction_t::start_flush(a1 + 80);
  uint64_t v5 = DiskImageSparseBundle::flush_open_bands((DiskImageSparseBundle *)a1);
  sparse_bundles::eviction_t::complete_flush((sparse_bundles::eviction_t *)(a1 + 80));
  if ((_DWORD)v5)
  {
    *(void *)&__int128 v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
    int v8 = 16;
    di_log::logger<di_log::log_printer<107ul>>::logger(v9, &v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)"Flush failed - returning ",  25LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf((uint64_t)v9);
    MEMORY[0x1895BC2CC](v11);
  }

  else
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v7 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
      int v8 = 2;
      di_log::logger<di_log::log_printer<111ul>>::logger(v9, &v7);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v10,  (uint64_t)" bands flushed, calling ",  24LL);
      operator<<(&v10, a3);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf((uint64_t)v9);
      MEMORY[0x1895BC2CC](v11);
    }

    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 16LL))(*(void *)(a1 + 560), a3);
  }

  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_1880CC808( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void *di_log::logger<di_log::log_printer<101ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<101ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DABC0;
  a1[45] = &unk_18A1DACC0;
  a1[46] = &unk_18A1DACE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1DABC0;
  a1[45] = &unk_18A1DAC48;
  a1[46] = &unk_18A1DAC70;
  return a1;
}

void sub_1880CC8DC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<107ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<107ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DADE0;
  a1[45] = &unk_18A1DAEE0;
  a1[46] = &unk_18A1DAF08;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1DADE0;
  a1[45] = &unk_18A1DAE68;
  a1[46] = &unk_18A1DAE90;
  return a1;
}

void sub_1880CC9C4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<111ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<111ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DB000;
  a1[45] = &unk_18A1DB100;
  a1[46] = &unk_18A1DB128;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_18A1DB000;
  a1[45] = &unk_18A1DB088;
  a1[46] = &unk_18A1DB0B0;
  return a1;
}

void sub_1880CCAAC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImageSparseBundle::get_band( uint64_t **this@<X0>, unint64_t a2@<X1>, int a3@<W2>, sparse_bundles::band_ptr *a4@<X8>)
{
  else {
    int v8 = 0;
  }
  if (a3) {
    int v9 = v8 | 0x200;
  }
  else {
    int v9 = v8;
  }
  DiskImageSparseBundle::find_band_in_array((DiskImageSparseBundle *)this, a2, (sparse_bundles::band_ptr *)&v10);
  if (v11)
  {
LABEL_10:
    sparse_bundles::band_ptr::band_ptr((uint64_t)a4, (uint64_t)&v10);
  }

  else
  {
    while (!sparse_bundles::open_bands_t::insert(this + 26, a2))
    {
      sparse_bundles::band_ptr::~band_ptr(&v10);
      DiskImageSparseBundle::find_band_in_array((DiskImageSparseBundle *)this, a2, (sparse_bundles::band_ptr *)&v10);
      if (v11) {
        goto LABEL_10;
      }
    }

    DiskImageSparseBundle::open_band((DiskImageSparseBundle *)this, a2, v9, a4);
  }

  sparse_bundles::band_ptr::~band_ptr(&v10);
}

void *DiskImageSparseBundle::find_band_in_array@<X0>( DiskImageSparseBundle *this@<X0>, uint64_t a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 2);
  if (!v5)
  {
LABEL_14:
    uint64_t result = operator new(0x28uLL);
    *uint64_t result = 1LL;
    result[1] = (char *)this + 24;
    result[3] = 0LL;
    result[4] = 0LL;
    result[2] = 0LL;
    *(void *)a3 = result;
    *((void *)a3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    *((void *)a3 + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = -1LL;
    return result;
  }

  uint64_t v7 = 0LL;
  int v8 = (const sparse_bundles::band_ptr *)*((void *)this + 89);
  while (*((void *)v8 + 2) != a2)
  {
    ++v7;
    int v8 = (const sparse_bundles::band_ptr *)((char *)v8 + 24);
    if (v5 == v7) {
      goto LABEL_14;
    }
  }

  sparse_bundles::band_ptr::band_ptr(a3, v8);
  uint64_t v9 = *((void *)a3 + 1);
  if (!v9 || *(void *)(v9 + 32) != a2)
  {
    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v11 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((void *)&v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 41LL;
      int v12 = 2;
      di_log::logger<di_log::log_printer<194ul>>::logger(v13, &v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Band ", 5LL);
      *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)" changed before retain completed",  32LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf((uint64_t)v13);
      MEMORY[0x1895BC2CC](v15);
    }

    sparse_bundles::band_ptr::~band_ptr((unint64_t **)a3);
    goto LABEL_14;
  }

  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v11 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((void *)&v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 41LL;
    int v12 = 2;
    di_log::logger<di_log::log_printer<190ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Found ", 6LL);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)" at index ", 10LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x1895BC2CC](v15);
  }

  uint64_t result = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)(*(void *)a3 + 16LL) = result;
  return result;
}

void DiskImageSparseBundle::open_band( DiskImageSparseBundle *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, sparse_bundles::band_ptr *a4@<X8>)
{
  uint64_t v16 = 0LL;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  uint64_t v19 = 0LL;
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
    int v12 = 2;
    di_log::logger<di_log::log_printer<154ul>>::logger(v13, &v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Opening band ", 13LL);
    *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x1895BC2CC](v15);
  }

  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 0x40000000LL;
  uint64_t v9[2] = ___ZN21DiskImageSparseBundle9open_bandEyi_block_invoke;
  v9[3] = &unk_18A1DA4B0;
  uint64_t v9[4] = &v16;
  v9[5] = this;
  v9[6] = a2;
  int v10 = a3;
  sparse_bundles::bundle_commons_t::run_in_high_tier((uint64_t)this + 24, (uint64_t)v9);
  DiskImageSparseBundle::replace_oldest_band(this, (sparse_bundles::Band *)v17[3], a4);
  if (!*((void *)a4 + 1))
  {
    uint64_t v8 = 0LL;
    do
    {
      if (!v8 && DIDebugLogsEnabled())
      {
        *(void *)&__int128 v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((void *)&v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
        int v12 = 2;
        di_log::logger<di_log::log_printer<172ul>>::logger(v13, &v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)"Failed to evict band to make room for ",  38LL);
        sparse_bundles::operator<<(&v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)", retrying", 10LL);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf((uint64_t)v13);
        MEMORY[0x1895BC2CC](v15);
      }

      usleep(0x3E8u);
      sparse_bundles::band_ptr::~band_ptr((unint64_t **)a4);
      ++v8;
      DiskImageSparseBundle::replace_oldest_band(this, (sparse_bundles::Band *)v17[3], a4);
    }

    while (!*((void *)a4 + 1));
  }

  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
    int v12 = 2;
    di_log::logger<di_log::log_printer<165ul>>::logger(v13, &v11);
    sparse_bundles::operator<<(&v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v14,  (uint64_t)" opened and replaced at attempt ",  32LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf((uint64_t)v13);
    MEMORY[0x1895BC2CC](v15);
  }

  _Block_object_dispose(&v16, 8);
}

void sub_1880CD1AC(_Unwind_Exception *a1)
{
}

void *di_log::logger<di_log::log_printer<154ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<154ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DB220;
  a1[45] = &unk_18A1DB320;
  a1[46] = &unk_18A1DB348;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DB220;
  a1[45] = &unk_18A1DB2A8;
  a1[46] = &unk_18A1DB2D0;
  return a1;
}

void sub_1880CD298(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *___ZN21DiskImageSparseBundle9open_bandEyi_block_invoke(uint64_t a1)
{
  uint64_t result = sparse_bundles::Band::new_band( *(void *)(a1 + 48),  *(void *)(a1 + 40) + 24LL,  *(_DWORD *)(a1 + 56),  (void *)(*(void *)(*(void *)(a1 + 40) + 560LL) + 96LL));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void DiskImageSparseBundle::replace_oldest_band( DiskImageSparseBundle *this@<X0>, sparse_bundles::Band *a2@<X1>, sparse_bundles::band_ptr *a3@<X8>)
{
  v24[128] = *MEMORY[0x1895F89C0];
  uint64_t v6 = v24;
  std::string __p = v24;
  __int128 v23 = xmmword_18817CED0;
  if (*((void *)this + 2))
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    do
    {
      unint64_t v9 = atomic_load(*(unint64_t **)(*((void *)this + 89) + v7));
      if (v9 == 1)
      {
        *(void *)&v19[0] = *(void *)(*(void *)(*((void *)this + 89) + v7) + 16LL);
        *((void *)&v19[0] + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v8;
        int v10 = (char *)__p + 16 * v23;
        if ((void)v23 == *((void *)&v23 + 1))
        {
          boost::container::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>,boost::container::new_allocator<void>,void>,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>*,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long>>>( &__p,  v10,  (const char *)1,  v19,  &v17);
        }

        else
        {
          *(_OWORD *)int v10 = v19[0];
          *(void *)&__int128 v23 = v23 + 1;
        }
      }

      ++v8;
      v7 += 24LL;
    }

    while (v8 < *((void *)this + 2));
    uint64_t v6 = __p;
    __int128 v11 = (uint64_t *)((char *)__p + 16 * v23);
    if ((void)v23)
    {
      uint64_t v12 = 126 - 2 * __clz(v23);
      goto LABEL_13;
    }
  }

  else
  {
    __int128 v11 = v24;
  }

  uint64_t v12 = 0LL;
LABEL_13:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>( (uint64_t)v6,  v11,  (uint64_t)v19,  v12,  1);
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v17 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 42LL;
    int v18 = 2;
    di_log::logger<di_log::log_printer<213ul>>::logger(v19, &v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v20,  (uint64_t)"Looking for an evictable slot for ",  34LL);
    sparse_bundles::operator<<(&v20);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf((uint64_t)v19);
    MEMORY[0x1895BC2CC](v21);
  }

  if ((void)v23)
  {
    unint64_t v13 = (uint64_t *)((char *)__p + 8);
    uint64_t v14 = 16 * v23;
    while (1)
    {
      uint64_t v15 = *v13;
      v13 += 2;
      sparse_bundles::band_ptr::replace_if_evictable((unint64_t **)(*((void *)this + 89) + 24 * v15), a2, a3);
      if (*((void *)a3 + 1)) {
        break;
      }
      if (DIDebugLogsEnabled())
      {
        *(void *)&__int128 v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
        *((void *)&v17 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 42LL;
        int v18 = 2;
        di_log::logger<di_log::log_printer<222ul>>::logger(v19, &v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v20,  (uint64_t)"Failed placing new ",  19LL);
        sparse_bundles::operator<<(&v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)" at index ", 10LL);
        std::ostream::operator<<();
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf((uint64_t)v19);
        MEMORY[0x1895BC2CC](v21);
      }

      sparse_bundles::band_ptr::~band_ptr((unint64_t **)a3);
      v14 -= 16LL;
      if (!v14) {
        goto LABEL_21;
      }
    }

    if (DIDebugLogsEnabled())
    {
      *(void *)&__int128 v17 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((void *)&v17 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 42LL;
      int v18 = 2;
      di_log::logger<di_log::log_printer<218ul>>::logger(v19, &v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Placed new ", 11LL);
      sparse_bundles::operator<<(&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)" at index ", 10LL);
      std::ostream::operator<<();
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf((uint64_t)v19);
      MEMORY[0x1895BC2CC](v21);
    }

    sparse_bundles::open_bands_t::mark_as_placed((DiskImageSparseBundle *)((char *)this + 208), *((void *)a2 + 4), 1);
  }

  else
  {
LABEL_21:
    uint64_t v16 = operator new(0x28uLL);
    *uint64_t v16 = 1LL;
    v16[1] = (char *)this + 24;
    v16[3] = 0LL;
    v16[4] = 0LL;
    v16[2] = 0LL;
    *(void *)a3 = v16;
    *((void *)a3 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
    *((void *)a3 + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = -1LL;
  }

  if (*((void *)&v23 + 1))
  {
    if (v24 != __p) {
      operator delete(__p);
    }
  }

void sub_1880CD6E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *di_log::logger<di_log::log_printer<165ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<165ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DB440;
  a1[45] = &unk_18A1DB540;
  a1[46] = &unk_18A1DB568;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DB440;
  a1[45] = &unk_18A1DB4C8;
  a1[46] = &unk_18A1DB4F0;
  return a1;
}

void sub_1880CD780(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<172ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<172ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DB660;
  a1[45] = &unk_18A1DB760;
  a1[46] = &unk_18A1DB788;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DB660;
  a1[45] = &unk_18A1DB6E8;
  a1[46] = &unk_18A1DB710;
  return a1;
}

void sub_1880CD868(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<190ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<190ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DB880;
  a1[45] = &unk_18A1DB980;
  a1[46] = &unk_18A1DB9A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DB880;
  a1[45] = &unk_18A1DB908;
  a1[46] = &unk_18A1DB930;
  return a1;
}

void sub_1880CD950(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<194ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<194ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DBAA0;
  a1[45] = &unk_18A1DBBA0;
  a1[46] = &unk_18A1DBBC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DBAA0;
  a1[45] = &unk_18A1DBB28;
  a1[46] = &unk_18A1DBB50;
  return a1;
}

void sub_1880CDA38(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<213ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<213ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DBCC0;
  a1[45] = &unk_18A1DBDC0;
  a1[46] = &unk_18A1DBDE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DBCC0;
  a1[45] = &unk_18A1DBD48;
  a1[46] = &unk_18A1DBD70;
  return a1;
}

void sub_1880CDB20(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<218ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<218ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DBEE0;
  a1[45] = &unk_18A1DBFE0;
  a1[46] = &unk_18A1DC008;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DBEE0;
  a1[45] = &unk_18A1DBF68;
  a1[46] = &unk_18A1DBF90;
  return a1;
}

void sub_1880CDC08(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<222ul>>::logger(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<222ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DC100;
  a1[45] = &unk_18A1DC200;
  a1[46] = &unk_18A1DC228;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DC100;
  a1[45] = &unk_18A1DC188;
  a1[46] = &unk_18A1DC1B0;
  return a1;
}

void sub_1880CDCF0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImageSparseBundle::~DiskImageSparseBundle(DiskImageSparseBundle *this)
{
  *(void *)this = &off_18A1DA3B8;
  *(void *)&__int128 v7 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((void *)&v7 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 45LL;
  int v8 = 0;
  di_log::logger<di_log::log_printer<231ul>>::logger(v9, &v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Closing bands", 13LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf((uint64_t)v9);
  MEMORY[0x1895BC2CC](&v11);
  unint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = 8LL;
    uint64_t v5 = MEMORY[0x1895F87A8];
    do
    {
      if (*(void *)(*((void *)this + 89) + v4))
      {
        v6[0] = v5;
        v6[1] = 0x40000000LL;
        v6[2] = ___ZN21DiskImageSparseBundleD2Ev_block_invoke;
        void v6[3] = &__block_descriptor_tmp_32;
        v6[4] = this;
        v6[5] = v3;
        workqueue::transaction::add((dispatch_group_t *)this + 52, v6);
        unint64_t v2 = *((void *)this + 2);
      }

      ++v3;
      v4 += 24LL;
    }

    while (v3 < v2);
  }

  workqueue::transaction::flush((dispatch_group_t *)this + 52, 0xFFFFFFFFFFFFFFFFLL);
  v9[0] = (void **)((char *)this + 712);
  std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100](v9);
  v9[0] = (void **)((char *)this + 664);
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](v9);
  std::mutex::~mutex((std::mutex *)this + 9);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  sparse_bundles::bundle_commons_t::~bundle_commons_t((DiskImageSparseBundle *)((char *)this + 24));
}

{
  void *v1;
  DiskImageSparseBundle::~DiskImageSparseBundle(this);
  operator delete(v1);
}

void *di_log::logger<di_log::log_printer<231ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<231ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DC320;
  a1[45] = &unk_18A1DC420;
  a1[46] = &unk_18A1DC448;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DC320;
  a1[45] = &unk_18A1DC3A8;
  a1[46] = &unk_18A1DC3D0;
  return a1;
}

void sub_1880CDF5C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t ___ZN21DiskImageSparseBundleD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v5 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v5 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 45LL;
    int v6 = 2;
    di_log::logger<di_log::log_printer<235ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Background close of band at index ",  34LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf((uint64_t)v7);
    MEMORY[0x1895BC2CC](v9);
  }

  unint64_t v3 = (unint64_t *)operator new(0x28uLL);
  unint64_t *v3 = 1LL;
  v3[1] = v2 + 24;
  v3[3] = 0LL;
  v3[4] = 0LL;
  v3[2] = 0LL;
  v7[0] = v3;
  v7[1] = 0LL;
  uint64_t v7[2] = (unint64_t *)-1LL;
  sparse_bundles::band_ptr::operator=((unint64_t **)(*(void *)(v2 + 712) + 24LL * *(void *)(a1 + 40)), v7);
  sparse_bundles::band_ptr::~band_ptr(v7);
  uint64_t result = DIDebugLogsEnabled();
  if ((_DWORD)result)
  {
    *(void *)&__int128 v5 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v5 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 45LL;
    int v6 = 2;
    di_log::logger<di_log::log_printer<237ul>>::logger(v7, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v8,  (uint64_t)"Closed band at index ",  21LL);
    std::ostream::operator<<();
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf((uint64_t)v7);
    return MEMORY[0x1895BC2CC](v9);
  }

  return result;
}

void sub_1880CE128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<235ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<235ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DC540;
  a1[45] = &unk_18A1DC640;
  a1[46] = &unk_18A1DC668;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DC540;
  a1[45] = &unk_18A1DC5C8;
  a1[46] = &unk_18A1DC5F0;
  return a1;
}

void sub_1880CE1E0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<237ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<237ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DC760;
  a1[45] = &unk_18A1DC860;
  a1[46] = &unk_18A1DC888;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DC760;
  a1[45] = &unk_18A1DC7E8;
  a1[46] = &unk_18A1DC810;
  return a1;
}

void sub_1880CE2C8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::perform_io(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = 0LL;
  uint64_t v99 = *MEMORY[0x1895F89C0];
  unint64_t v8 = *(void *)(a1 + 64);
  size_t v10 = a4[2];
  unint64_t v9 = a4[3];
  unint64_t v11 = v9 / v8;
  unint64_t v70 = v8;
  unint64_t v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v70 - v12) {
      size_t v13 = v70 - v12;
    }
    else {
      size_t v13 = v10;
    }
    uint64_t v14 = a4[4];
    uint64_t v15 = (std::__shared_weak_count *)a4[1];
    uint64_t v81 = *a4 + v7;
    int v82 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }

    size_t v83 = v13;
    unint64_t v84 = v12;
    uint64_t v85 = v14 - v7;
    char v86 = 0;
    DiskImageSparseBundle::get_band((uint64_t **)a1, v11, a3, (sparse_bundles::band_ptr *)&v79);
    int v18 = v80;
    if (!v80)
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&__int128 v76 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((void *)&v76 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 33LL;
        int v77 = 2;
        di_log::logger<di_log::log_printer<284ul>>::logger(v87, &v76);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Band ", 5LL);
        *(_DWORD *)((char *)v94 + *(void *)(v93 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(_DWORD *)((_BYTE *)v94 + *(void *)(v93 - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)((char *)v94 + *(void *)(v93 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(_DWORD *)((_BYTE *)v94 + *(void *)(v93 - 24)) & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v93,  (uint64_t)" doesn't exist, returning zeros",  31LL);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf((uint64_t)v87);
        MEMORY[0x1895BC2CC](v94);
      }

      bzero((void *)(*a4 + v7), v13);
      goto LABEL_96;
    }

    unint64_t v19 = v79[3];
    uint64_t v20 = 16 * v19;
    if (*(void *)(*(void *)(a2 + 16) + 16 * v19))
    {
      int v18 = v80;
    }

    sparse_bundles::Band::create_ctx(v18, v87);
    std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100](*(void *)(a2 + 16) + 16 * v19, v87);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v87[0] + 1);
    if (*((void *)&v87[0] + 1))
    {
      __int16 v22 = (unint64_t *)(*((void *)&v87[0] + 1) + 8LL);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

void sub_1880CE9C8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, __int128 a39, int a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unint64_t *a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sparse_bundles::band_ptr::~band_ptr(&a58);
    std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
    if (a2 == 2)
    {
      int v69 = __cxa_begin_catch(a1);
      *(void *)&a39 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((void *)&a39 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 33LL;
      a40 = 16;
      di_log::logger<di_log::log_printer<295ul>>::logger(&a67, &a39);
      if (a18) {
        unint64_t v70 = "Write error: ";
      }
      else {
        unint64_t v70 = "Read error: ";
      }
      if (a18) {
        uint64_t v71 = 13LL;
      }
      else {
        uint64_t v71 = 12LL;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)v70, v71);
      uint64_t v72 = (const char *)(*(uint64_t (**)(void *))(*(void *)v69 + 16LL))(v69);
      size_t v73 = strlen(v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)v72, v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)" (band ", 7LL);
      *(_DWORD *)((char *)&STACK[0x338] + *(void *)(STACK[0x338] - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(void *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      *(_DWORD *)((char *)&STACK[0x338] + *(void *)(STACK[0x338] - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(void *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)", err ", 6LL);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&STACK[0x338], (uint64_t)")", 1LL);
      di_log::logger<di_log::log_printer<295ul>>::~logger((uint64_t)&a67);
      __cxa_end_catch();
      JUMPOUT(0x1880CE984LL);
    }

    __clang_call_terminate(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1880CEC30(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1880CEC20LL);
  }
  JUMPOUT(0x1880CEACCLL);
}

uint64_t sparse_bundles::Band::ContextBand::has_null_backend(sparse_bundles::Band::ContextBand *this)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    if (result)
    {
      unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          unint64_t v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        do
          unint64_t v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }

      return 1LL;
    }
  }

  return result;
}

void *di_log::logger<di_log::log_printer<284ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<284ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DC980;
  a1[45] = &unk_18A1DCA80;
  a1[46] = &unk_18A1DCAA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DC980;
  a1[45] = &unk_18A1DCA08;
  a1[46] = &unk_18A1DCA30;
  return a1;
}

void sub_1880CED50(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<295ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<295ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DCBA0;
  a1[45] = &unk_18A1DCCA0;
  a1[46] = &unk_18A1DCCC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DCBA0;
  a1[45] = &unk_18A1DCC28;
  a1[46] = &unk_18A1DCC50;
  return a1;
}

void sub_1880CEE38(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::void_stackable_identifier(DiskImageSparseBundle *this)
{
  unsigned int v6 = 0;
  uint64_t v2 = (unint64_t *)((char *)this + 704);
  v5[0] = this;
  v5[1] = &v6;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    unint64_t v8 = v5;
    uint64_t v7 = &v8;
    std::__call_once( v2,  &v7,  (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<DiskImageSparseBundle::void_stackable_identifier(void)::$_0 &&>>);
  }

  return v6;
}

uint64_t DiskImageSparseBundle::write(DiskImageSparseBundle *a1, DiskImage::Context *a2, void *a3)
{
  int v6 = DiskImageSparseBundle::void_stackable_identifier(a1);
  if (v6)
  {
    if (v6 >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = -v6;
    }
    return -v7;
  }

  else
  {
    uint64_t v9 = DiskImageSparseBundle::perform_io((uint64_t)a1, (uint64_t)a2, 1, a3);
    uint64_t v8 = v9;
    if (v9 < 0 && (_DWORD)v9) {
      DiskImage::Context::terminate_di(a2);
    }
  }

  return v8;
}

uint64_t DiskImage::Context::terminate_di(DiskImage::Context *this)
{
  uint64_t v1 = *((void *)this + 1);
  *(void *)&__int128 v4 = "DiskImage::terminate()";
  *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 20LL;
  int v5 = 16;
  di_log::logger<di_log::log_printer<241ul>>::logger(v6, &v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated",  75LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf((uint64_t)v6);
  uint64_t v2 = (process_terminator *)MEMORY[0x1895BC2CC](&v8);
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return process_terminator::terminate(v2);
}

void sub_1880CF010( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

unint64_t DiskImageSparseBundle::get_num_blocks(DiskImageSparseBundle *this)
{
  unint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 70) + 40LL))(*((void *)this + 70));
  if (v2 % (*(uint64_t (**)(DiskImageSparseBundle *))(*(void *)this + 24LL))(this))
  {
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, "Size is not a multiple of block size", 0x16u);
  }

  return v2 / (*(uint64_t (**)(DiskImageSparseBundle *))(*(void *)this + 24LL))(this);
}

uint64_t DiskImageSparseBundle::try_unmap_band_extents_with_index( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v8 = v11 != 0LL;
  if (v11 && sparse_bundles::Band::unmap_extents(v11, a4))
  {
    sparse_bundles::band_ptr::~band_ptr(&v10);
    return sparse_bundles::band_ptr::erase_if_unmapped( (sparse_bundles::band_ptr *)(*(void *)(a1 + 712) + 24 * a2),  a3);
  }

  else
  {
    sparse_bundles::band_ptr::~band_ptr(&v10);
  }

  return v8;
}

void sub_1880CF16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t DiskImageSparseBundle::try_unmap_band_extents_without_list( uint64_t **a1, const sparse_bundles::bundle_commons_t *a2, void *a3)
{
  int v6 = (sparse_bundles::open_bands_t *)(a1 + 26);
  uint64_t v7 = sparse_bundles::open_bands_t::insert(a1 + 26, (unint64_t)a2);
  if ((_DWORD)v7)
  {
    BOOL v8 = (sparse_bundles::Band *)(a1 + 3);
    if ((uint64_t *)boost::icl::cardinality<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>(a3) == a1[8])
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&__int128 v19 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v19 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 58LL;
        int v20 = 2;
        di_log::logger<di_log::log_printer<387ul>>::logger(&v21, &v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unmapping band ", 15LL);
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" completely", 11LL);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf((uint64_t)&v21);
        MEMORY[0x1895BC2CC](v25);
      }

      sparse_bundles::Band::erase(v8, a2);
    }

    else
    {
      if (DIDebugLogsEnabled())
      {
        *(void *)&__int128 v19 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v19 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 58LL;
        int v20 = 2;
        di_log::logger<di_log::log_printer<390ul>>::logger(&v21, &v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Unmapping band ", 15LL);
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v24,  (uint64_t)" directly (without list)",  24LL);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf((uint64_t)&v21);
        MEMORY[0x1895BC2CC](v25);
      }

      sparse_bundles::mapped_blocks_t::mapped_blocks_t((uint64_t)&v21, (uint64_t)v8, (uint64_t)a2, 0LL, 0);
      unint64_t v11 = (void *)*a3;
      uint64_t v9 = a3 + 1;
      size_t v10 = v11;
      if (v11 != v9)
      {
        do
        {
          if ((v10[6] & 2) != 0) {
            unint64_t v12 = v10[4];
          }
          else {
            unint64_t v12 = v10[4] + 1LL;
          }
          sparse_bundles::mapped_blocks_t::unmap_interval(&v21, v12, (v10[6] & 1) + v10[5] - 1LL);
          size_t v13 = (void *)v10[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              size_t v13 = (void *)*v13;
            }

            while (v13);
          }

          else
          {
            do
            {
              uint64_t v14 = (void *)v10[2];
              BOOL v15 = *v14 == (void)v10;
              size_t v10 = v14;
            }

            while (!v15);
          }

          size_t v10 = v14;
        }

        while (v14 != v9);
      }

      if (lock_free::bitmap_t::is_reset(v22)) {
        sparse_bundles::Band::erase(v8, a2);
      }
      else {
        sparse_bundles::mapped_blocks_t::flush((sparse_bundles::mapped_blocks_t *)&v21);
      }
      uint64_t v16 = v23;
      uint64_t v23 = 0LL;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
      }
      unint64_t v17 = v22;
      __int16 v22 = 0LL;
      if (v17) {
        (*(void (**)(lock_free::bitmap_t *))(*(void *)v17 + 8LL))(v17);
      }
    }

    sparse_bundles::open_bands_t::remove(v6, (unint64_t)a2);
  }

  return v7;
}

void sub_1880CF474( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  if (a2 == 1)
  {
    uint64_t v16 = (const DiskImagesRuntimeException *)__cxa_begin_catch(exception_object);
    sparse_bundles::open_bands_t::remove(v15, v14);
    exception = (DiskImagesRuntimeException *)__cxa_allocate_exception(0x40uLL);
    DiskImagesRuntimeException::DiskImagesRuntimeException(exception, v16);
  }

  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<387ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<387ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DCFE0;
  a1[45] = &unk_18A1DD0E0;
  a1[46] = &unk_18A1DD108;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DCFE0;
  a1[45] = &unk_18A1DD068;
  a1[46] = &unk_18A1DD090;
  return a1;
}

void sub_1880CF5E8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<390ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<390ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DD200;
  a1[45] = &unk_18A1DD300;
  a1[46] = &unk_18A1DD328;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DD200;
  a1[45] = &unk_18A1DD288;
  a1[46] = &unk_18A1DD2B0;
  return a1;
}

void sub_1880CF6D0(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImagesRuntimeException::DiskImagesRuntimeException( DiskImagesRuntimeException *this, const DiskImagesRuntimeException *a2)
{
  *(void *)this = off_18A1E43B0;
  *(_OWORD *)((char *)this + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)((char *)a2 + 8);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]( (std::string *)this + 1,  (__int128 *)((char *)a2 + 24));
  *((void *)this + 7) = *((void *)a2 + 7);
}

void sub_1880CF780(_Unwind_Exception *a1)
{
}

uint64_t DiskImageSparseBundle::unmap_band_extents( uint64_t a1, const sparse_bundles::bundle_commons_t *a2, void *a3)
{
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v6) {
        break;
      }
      uint64_t v7 = 0LL;
      BOOL v8 = (const sparse_bundles::bundle_commons_t **)(*(void *)(a1 + 712) + 16LL);
      while (1)
      {
        uint64_t v9 = *v8;
        v8 += 3;
        if (v9 == a2) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }

      if (v7 < 0) {
        break;
      }
      uint64_t result = DiskImageSparseBundle::try_unmap_band_extents_with_index(a1, v7, (uint64_t)a2, a3);
      if ((result & 1) != 0) {
        return result;
      }
      usleep(0x3E8u);
    }

uint64_t DiskImageSparseBundle::unmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v38 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
    int v39 = 2;
    di_log::logger<di_log::log_printer<434ul>>::logger(&v30, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Starting unmap of ", 18LL);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)" extents", 8LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x1895BC2CC](v37);
  }

  unint64_t v6 = *(void *)(a1 + 64);
  unsigned int v29 = 0;
  v28[0] = 0LL;
  v28[1] = 0LL;
  unint64_t v27 = (uint64_t *)v28;
  if (*(void *)(a1 + 344))
  {
    uint64_t v7 = DiskImageSparseBundle::void_stackable_identifier((DiskImageSparseBundle *)a1);
    if (!(_DWORD)v7)
    {
      workqueue::workqueue::create_transaction((workqueue::workqueue *)(a1 + 640), 0LL, (uint64_t)&v38);
      if (a4)
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
        uint64_t v21 = a3;
        do
        {
          uint64_t v10 = *(void *)(a3 + 16 * v8);
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
          uint64_t v23 = v8;
          uint64_t v12 = *(void *)(a3 + 16 * v8 + 8);
          unint64_t v13 = v11 * v10;
          unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) * v12;
          if (DIDebugLogsEnabled())
          {
            *(void *)&__int128 v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((void *)&v25 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
            int v26 = 2;
            di_log::logger<di_log::log_printer<460ul>>::logger(&v30, &v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Extent ", 7LL);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)": [", 3LL);
            uint64_t v15 = v36;
            *(_DWORD *)&v37[*(void *)(v36 - 24)] |= 0x200u;
            *(_DWORD *)&v37[*(void *)(v15 - 24)] = *(_DWORD *)&v37[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"-", 1LL);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"]", 1LL);
            uint64_t v16 = v36;
            *(_DWORD *)&v37[*(void *)(v36 - 24)] &= ~0x200u;
            *(_DWORD *)&v37[*(void *)(v16 - 24)] = *(_DWORD *)&v37[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
            std::ostream::~ostream();
            di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf((uint64_t)&v30);
            MEMORY[0x1895BC2CC](v37);
          }

          if (v14)
          {
            unint64_t v17 = v13 / v6;
            unint64_t v18 = v13 % v6;
            do
            {
              if ((const sparse_bundles::bundle_commons_t *)v17 != v9 && v27 != (uint64_t *)v28)
              {
                unint64_t v30 = 0LL;
                uint64_t v31 = &v30;
                uint64_t v32 = 0x4002000000LL;
                unint64_t v33 = __Block_byref_object_copy__6;
                int v34 = __Block_byref_object_dispose__6;
                std::set<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::set[abi:ne180100]( (uint64_t)v35,  (uint64_t)&v27);
                v24[0] = MEMORY[0x1895F87A8];
                v24[1] = 0x40000000LL;
                v24[2] = ___ZN21DiskImageSparseBundle5unmapERN9DiskImage7ContextEPK14unmap_extent_tm_block_invoke;
                v24[3] = &unk_18A1DA4F8;
                v24[4] = &v30;
                v24[5] = a1;
                v24[6] = v9;
                v24[7] = &v29;
                workqueue::transaction::add((dispatch_group_t *)&v38, v24);
                std::__tree<boost::icl::discrete_interval<unsigned long long,std::less>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,std::allocator<boost::icl::discrete_interval<unsigned long long,std::less>>>::erase( &v27,  v27,  (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)v35,  v35[1]);
              }

              if (v14 >= v6 - v18) {
                unint64_t v19 = v6 - v18;
              }
              else {
                unint64_t v19 = v14;
              }
              if (lock_free::bitmap_t::get_bit(*(lock_free::bitmap_t **)(a1 + 344), v17))
              {
                unint64_t v30 = v18;
                uint64_t v31 = (unint64_t *)(v19 + v18);
                LOBYTE(vstd::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 32) = 2;
                boost::icl::interval_base_set<boost::icl::interval_set<unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>,unsigned long long,std::less,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>::_add( &v27,  (uint64_t)&v30);
                uint64_t v9 = (const sparse_bundles::bundle_commons_t *)v17;
              }

              unint64_t v18 = 0LL;
              ++v17;
              v14 -= v19;
            }

            while (v14);
          }

          uint64_t v8 = v23 + 1;
          a3 = v21;
        }

        while (v23 + 1 != a4);
      }

      else
      {
        uint64_t v9 = 0LL;
      }

      workqueue::transaction::~transaction((workqueue::transaction *)&v38);
      if (DIDebugLogsEnabled())
      {
        *(void *)&__int128 v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((void *)&v38 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
        int v39 = 2;
        di_log::logger<di_log::log_printer<498ul>>::logger(&v30, &v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unmap done", 10LL);
        std::ostream::~ostream();
        di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf((uint64_t)&v30);
        MEMORY[0x1895BC2CC](v37);
      }

      uint64_t v7 = atomic_load(&v29);
    }
  }

  else
  {
    *(void *)&__int128 v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v38 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 32LL;
    int v39 = 16;
    di_log::logger<di_log::log_printer<443ul>>::logger(&v30, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v36,  (uint64_t)"Unexpected unmap command received on read only image",  52LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf((uint64_t)&v30);
    MEMORY[0x1895BC2CC](v37);
    uint64_t v7 = 4294967277LL;
  }

  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)&v27,  v28[0]);
  return v7;
}

void sub_1880CFD48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, void *a27, uint64_t a28, uint64_t a29, char a30)
{
}

void *di_log::logger<di_log::log_printer<434ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<434ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DD420;
  a1[45] = &unk_18A1DD520;
  a1[46] = &unk_18A1DD548;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DD420;
  a1[45] = &unk_18A1DD4A8;
  a1[46] = &unk_18A1DD4D0;
  return a1;
}

void sub_1880CFFEC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<443ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<443ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DD640;
  a1[45] = &unk_18A1DD740;
  a1[46] = &unk_18A1DD768;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DD640;
  a1[45] = &unk_18A1DD6C8;
  a1[46] = &unk_18A1DD6F0;
  return a1;
}

void sub_1880D00D4(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<460ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<460ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DD860;
  a1[45] = &unk_18A1DD960;
  a1[46] = &unk_18A1DD988;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DD860;
  a1[45] = &unk_18A1DD8E8;
  a1[46] = &unk_18A1DD910;
  return a1;
}

void sub_1880D01BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *__Block_byref_object_copy__6(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  __int128 v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0LL;
    a2[7] = 0LL;
  }

  else
  {
    result[5] = v4;
  }

  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

uint64_t ___ZN21DiskImageSparseBundle5unmapERN9DiskImage7ContextEPK14unmap_extent_tm_block_invoke(uint64_t a1)
{
  return DiskImageSparseBundle::unmap_band_extents( *(void *)(a1 + 40),  *(const sparse_bundles::bundle_commons_t **)(a1 + 48),  (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL));
}

void *di_log::logger<di_log::log_printer<469ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<469ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DDA80;
  a1[45] = &unk_18A1DDB80;
  a1[46] = &unk_18A1DDBA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DDA80;
  a1[45] = &unk_18A1DDB08;
  a1[46] = &unk_18A1DDB30;
  return a1;
}

void sub_1880D0490(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<492ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<492ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DDCA0;
  a1[45] = &unk_18A1DDDA0;
  a1[46] = &unk_18A1DDDC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DDCA0;
  a1[45] = &unk_18A1DDD28;
  a1[46] = &unk_18A1DDD50;
  return a1;
}

void sub_1880D0578(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<498ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<498ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DDEC0;
  a1[45] = &unk_18A1DDFC0;
  a1[46] = &unk_18A1DDFE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DDEC0;
  a1[45] = &unk_18A1DDF48;
  a1[46] = &unk_18A1DDF70;
  return a1;
}

void sub_1880D0660(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::on_eject(DiskImageSparseBundle *this)
{
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v6 = "void DiskImageSparseBundle::on_eject()";
    *((void *)&v6 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 36LL;
    int v7 = 2;
    di_log::logger<di_log::log_printer<505ul>>::logger(v8, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)"Evicting all bands for eject",  28LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v8);
    MEMORY[0x1895BC2CC](v10);
  }

  if (*((void *)this + 2))
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
    do
    {
      sparse_bundles::band_ptr::replace_if_evictable( (unint64_t **)(*((void *)this + 89) + v2),  0LL,  (sparse_bundles::band_ptr *)v5);
      sparse_bundles::band_ptr::~band_ptr(v5);
      ++v3;
      v2 += 24LL;
    }

    while (v3 < *((void *)this + 2));
  }

  workqueue::transaction::flush((dispatch_group_t *)this + 52, 0xFFFFFFFFFFFFFFFFLL);
  *(void *)&__int128 v6 = "void DiskImageSparseBundle::on_eject()";
  *((void *)&v6 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 36LL;
  int v7 = 0;
  di_log::logger<di_log::log_printer<511ul>>::logger(v8, &v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Sparse bundle ejected", 21LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf((uint64_t)v8);
  return MEMORY[0x1895BC2CC](v10);
}

void sub_1880D0800( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void *di_log::logger<di_log::log_printer<505ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<505ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DE0E0;
  a1[45] = &unk_18A1DE1E0;
  a1[46] = &unk_18A1DE208;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DE0E0;
  a1[45] = &unk_18A1DE168;
  a1[46] = &unk_18A1DE190;
  return a1;
}

void sub_1880D08A8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  return a1;
}

void *di_log::logger<di_log::log_printer<511ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<511ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DE300;
  a1[45] = &unk_18A1DE400;
  a1[46] = &unk_18A1DE428;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DE300;
  a1[45] = &unk_18A1DE388;
  a1[46] = &unk_18A1DE3B0;
  return a1;
}

void sub_1880D0990(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t DiskImageSparseBundle::set_size(DiskImage *this, uint64_t a2)
{
  uint64_t result = DiskImage::set_size_unmap_data(this, a2);
  if (!(_DWORD)result)
  {
    unint64_t v5 = (a2 + 4095) & 0xFFFFFFFFFFFFF000LL;
    if (v5 < 0x200000000000001LL)
    {
      return (*(uint64_t (**)(void, unint64_t))(**((void **)this + 70) + 56LL))( *((void *)this + 70),  v5);
    }

    else
    {
      *(void *)&__int128 v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((void *)&v6 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 35LL;
      int v7 = 16;
      di_log::logger<di_log::log_printer<523ul>>::logger(v8, &v6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v9,  (uint64_t)" bytes are above the sparsebundle limit of ",  43LL);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)" bytes", 6LL);
      std::ostream::~ostream();
      di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf((uint64_t)v8);
      MEMORY[0x1895BC2CC](&v10);
      return 4294967269LL;
    }
  }

  return result;
}

void sub_1880D0AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t DiskImage::set_size_unmap_data(DiskImage *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 32LL))(this);
  unint64_t v5 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 24LL))(this) * v4;
  unint64_t v6 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 24LL))(this);
  unint64_t v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7) {
    return 0LL;
  }
  v11[0] = v7 / (*(uint64_t (**)(DiskImage *))(*(void *)this + 24LL))(this);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(DiskImage *))(*(void *)this + 24LL))(this);
  uint64_t v8 = (*(uint64_t (**)(DiskImage *))(*(void *)this + 136LL))(this);
  uint64_t v9 = (*(uint64_t (**)(DiskImage *, uint64_t, void *, uint64_t))(*(void *)this + 184LL))( this,  v8,  v11,  1LL);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40LL))(v8);
  }
  return v9;
}

void sub_1880D0C14(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *di_log::logger<di_log::log_printer<523ul>>::logger(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<523ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DE520;
  a1[45] = &unk_18A1DE620;
  a1[46] = &unk_18A1DE648;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DE520;
  a1[45] = &unk_18A1DE5A8;
  a1[46] = &unk_18A1DE5D0;
  return a1;
}

void sub_1880D0CB8(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  return a1;
}

  ;
}

uint64_t DiskImageSparseBundle::get_block_size(DiskImageSparseBundle *this)
{
  return *((void *)this + 9);
}

uint64_t DiskImageSparseBundle::is_writable(DiskImageSparseBundle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 70) + 48LL))(*((void *)this + 70));
}

info::DiskImageInfoSparseBundle *DiskImageSparseBundle::create_image_info@<X0>( DiskImageSparseBundle *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (info::DiskImageInfoSparseBundle *)operator new(0xB8uLL);
  uint64_t result = info::DiskImageInfoSparseBundle::DiskImageInfoSparseBundle(v4, this);
  *a2 = (char *)v4 + *(void *)(*(void *)v4 - 104LL);
  return result;
}

void sub_1880D0D88(_Unwind_Exception *a1)
{
}

uint64_t DiskImageSparseBundle::supports_unmap(DiskImageSparseBundle *this)
{
  return 1LL;
}

DiskImageSparseBundle::ContextSparseBundle *DiskImageSparseBundle::_create_ctx(DiskImageSparseBundle *this)
{
  uint64_t v2 = (DiskImageSparseBundle::ContextSparseBundle *)operator new(0x28uLL);
  DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(v2, this);
  return v2;
}

void sub_1880D0DD8(_Unwind_Exception *a1)
{
}

uint64_t DiskImageSparseBundle::read(uint64_t a1, uint64_t a2, void *a3)
{
  return DiskImageSparseBundle::perform_io(a1, a2, 0, a3);
}

uint64_t std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sparse_bundles::band_ptr>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>>( (uint64_t)(a1 + 2),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<sparse_bundles::band_ptr>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>,std::reverse_iterator<sparse_bundles::band_ptr*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (sparse_bundles::band_ptr *)(v11 + v10);
    v10 -= 24LL;
    sparse_bundles::band_ptr::band_ptr(v12, (const sparse_bundles::band_ptr *)(v10 + a3));
  }

  return a6;
}

uint64_t std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 16) = i - 24;
    sparse_bundles::band_ptr::~band_ptr((unint64_t **)(i - 24));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<sparse_bundles::band_ptr>::__emplace_back_slow_path<sparse_bundles::band_ptr>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::allocator<std::tuple<std::shared_ptr<DiskImage>,DiskImageStackable::role>>::allocate_at_least[abi:ne180100]( v7,  v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v13 = v10;
  unint64_t v14 = &v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sparse_bundles::band_ptr::band_ptr((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  std::vector<sparse_bundles::band_ptr>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<sparse_bundles::band_ptr>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1880D1038(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<46ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<46ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<46ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DA6F8;
  di_log::logger_buf<di_log::log_printer<46ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<46ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<46ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D13D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<46ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<46ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 46LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 46LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void std::vector<sparse_bundles::band_ptr>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unint64_t **)**a1;
  if (v2)
  {
    int v4 = (unint64_t **)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        sparse_bundles::band_ptr::~band_ptr(v4 - 3);
      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (dispatch_object_s **)**a1;
  if (v2)
  {
    int v4 = (dispatch_object_s **)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        gcd::gcd_group::~gcd_group(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sparse_bundles::bundle_commons_t::~bundle_commons_t(sparse_bundles::bundle_commons_t *this)
{
  int v5 = (void **)((char *)this + 352);
  std::vector<gcd::gcd_queue>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *((void *)this + 40);
  *((void *)this + 40) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 272));
  std::mutex::~mutex((std::mutex *)((char *)this + 208));
  std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::destroy( (uint64_t)this + 184,  *((void **)this + 24));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::mutex::~mutex((std::mutex *)this + 1);
  std::shared_ptr<char>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
  }
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<59ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<59ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<59ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DA918;
  di_log::logger_buf<di_log::log_printer<59ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<59ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<59ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D1B30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<59ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<59ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 59LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 59LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<80ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<80ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<80ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DAB38;
  di_log::logger_buf<di_log::log_printer<80ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<80ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<80ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D20DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<80ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<80ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 80LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 80LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<101ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<101ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<101ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DAD58;
  di_log::logger_buf<di_log::log_printer<101ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<101ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<101ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D2688( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<101ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<101ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 101LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 101LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<107ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<107ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<107ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DAF78;
  di_log::logger_buf<di_log::log_printer<107ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<107ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<107ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D2C34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<107ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<107ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 107LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 107LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<111ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<111ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<111ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DB198;
  di_log::logger_buf<di_log::log_printer<111ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<111ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<111ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D31E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<111ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<111ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 111LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 111LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<154ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<154ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<154ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DB3B8;
  di_log::logger_buf<di_log::log_printer<154ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<154ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<154ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D378C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<154ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<154ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 154LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 154LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<165ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<165ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<165ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DB5D8;
  di_log::logger_buf<di_log::log_printer<165ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<165ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<165ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D3D38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<165ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<165ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 165LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 165LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<172ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<172ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<172ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DB7F8;
  di_log::logger_buf<di_log::log_printer<172ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<172ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<172ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D42E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<172ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<172ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 172LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 172LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<190ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<190ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<190ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DBA18;
  di_log::logger_buf<di_log::log_printer<190ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<190ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<190ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D4890( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<190ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<190ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 190LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 190LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<194ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<194ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<194ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DBC38;
  di_log::logger_buf<di_log::log_printer<194ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<194ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<194ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D4E3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<194ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<194ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 194LL;
    __int16 v22 = 2082;
    uint64_t v23 = v8;
    unint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      uint64_t v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        unint64_t v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 194LL;
      __int16 v22 = 2082;
      uint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>( uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = (uint64_t *)result;
LABEL_2:
  unint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v26 = *(a2 - 2);
        uint64_t v27 = *v9;
        char v28 = -1;
        if (v26 >= *v9) {
          char v28 = 1;
        }
        if (v26 == *v9)
        {
          unint64_t v29 = *(a2 - 1);
          unint64_t v30 = v9[1];
          BOOL v31 = v29 >= v30;
          BOOL v32 = v29 == v30;
          char v28 = -1;
          if (v31) {
            char v28 = 1;
          }
          if (v32) {
            char v28 = 0;
          }
        }

        if (v28 < 0)
        {
          uint64_t v33 = v9[1];
          uint64_t v34 = *(a2 - 1);
          *unint64_t v9 = v26;
          v9[1] = v34;
          *(a2 - gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v27;
          *(a2 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v33;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  v9 + 2,  a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  v9 + 2,  v9 + 4,  a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  v9 + 2,  v9 + 4,  v9 + 6,  a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  a2);
          }
          else {
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  a2);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( &v9[2 * (v13 >> 1)],  v9,  a2 - 2);
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  &v9[2 * (v13 >> 1)],  a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9 + 2,  v15 - 2,  a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9 + 4,  &v9[2 * v14 + 2],  a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v15 - 2,  v15,  &v9[2 * v14 + 2]);
            __int128 v16 = *(_OWORD *)v9;
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v15;
            *(_OWORD *)uint64_t v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          uint64_t v17 = *(v9 - 2);
          BOOL v18 = v17 == *v9;
          if (v17 >= *v9) {
            char v19 = 1;
          }
          else {
            char v19 = -1;
          }
          if (v18)
          {
            unint64_t v20 = *(v9 - 1);
            unint64_t v21 = v9[1];
            BOOL v22 = v20 == v21;
            char v19 = v20 >= v21 ? 1 : -1;
            if (v22) {
              char v19 = 0;
            }
          }

          if ((v19 & 0x80) == 0)
          {
            uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>( v9,  a2);
            unint64_t v9 = (uint64_t *)result;
            goto LABEL_27;
          }

LABEL_22:
          uint64_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>( v9,  a2);
          if ((v24 & 1) == 0) {
            goto LABEL_25;
          }
          BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v9,  v23);
          unint64_t v9 = v23 + 2;
          uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( v23 + 2,  a2);
          if (!(_DWORD)result)
          {
            uint64_t v10 = v11 + 1;
            if (v25) {
              continue;
            }
LABEL_25:
            uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,false>( v8,  v23,  a3,  -v11,  a5 & 1);
            unint64_t v9 = v23 + 2;
LABEL_27:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v23;
          if (v25) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2) {
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( (char *)v9,  (char *)a2,  (char *)a2,  a3);
        }
        return result;
    }
  }

      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_) {
        break;
      }
    }

    *(_BYTE *)(a1 + 36std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      unint64_t v9 = 0LL;
      uint64_t v10 = 0;
      do
      {
        if (*(_BYTE *)(a1 + 16)) {
          break;
        }
        v10 |= di_asif::details::dir::defrag_table( (di_asif::details::dir *)a1,  (di_asif::details::ContextASIF *)v18,  v9) == 0;
        di_asif::details::dir::get_table( (di_asif::details::dir *)a1,  (di_asif::details::ContextASIF *)v18,  v9,  0,  1,  (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8]) {
            uint64_t v11 = (di_asif::details::table *)&__lk.__m_->__m_.__opaque[32];
          }
          else {
            uint64_t v11 = 0LL;
          }
          v10 |= di_asif::details::table::defrag(v11, (di_asif::details::ContextASIF *)v18);
        }

        ref::tagged_ptr<di_asif::details::table,unsigned long long>::reset((unint64_t *)&__lk);
        ++v9;
      }

      while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      if ((v10 & 1) != 0)
      {
        uint64_t v12 = *(void *)(a2 + 24);
        if (!v12) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 48LL))(v12, v18);
      }
    }
  }

  while (!*(_BYTE *)(a1 + 16));
LABEL_41:
  v18[0] = off_18A1D9CC8;
  unint64_t v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      uint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

    BOOL v31 = *a3;
    BOOL v32 = *v17;
    *(void *)&unint64_t v29 = std::__tree<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,std::__map_value_compare<boost::icl::discrete_interval<unsigned long long,std::less>,std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>,boost::icl::exclusive_less_than<boost::icl::discrete_interval<unsigned long long,std::less>>,true>,std::allocator<std::__value_type<boost::icl::discrete_interval<unsigned long long,std::less>,udif::details::run_info>>>::__emplace_hint_unique_key_args<boost::icl::discrete_interval<unsigned long long,std::less>,std::pair<boost::icl::discrete_interval<unsigned long long,std::less> const,udif::details::run_info> const&>( a1,  v15,  (uint64_t)&v29,  (uint64_t)&v29);
    boost::icl::segmental::join_left<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>( a1,  (uint64_t **)&v29);
    *a4 = (uint64_t *)boost::icl::segmental::join_right<boost::icl::interval_map<unsigned long long,udif::details::run_info,boost::icl::partial_absorber,std::less,boost::icl::inplace_plus,boost::icl::inter_section,boost::icl::discrete_interval<unsigned long long,std::less>,std::allocator>>( a1,  (uint64_t ***)&v29);
    goto LABEL_23;
  }

  sg_vec_ns::details::buffer_iterator::make_value((uint64_t)this, v3 & 1, (uint64_t)v22);
  std::shared_ptr<_di_plugin_t>::operator=[abi:ne180100]((uint64_t)this + 56, v22);
  *(_OWORD *)((char *)this + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v22[1];
  BOOL v18 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
  if (*((void *)&v22[0] + 1))
  {
    char v19 = (unint64_t *)(*((void *)&v22[0] + 1) + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return this;
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0LL;
      int v4 = result;
      do
      {
        int v5 = v2;
        uint64_t v6 = v4[2];
        uint64_t v7 = *v4;
        if (v6 >= *v4) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if (v6 == *v4)
        {
          unint64_t v9 = v4[3];
          unint64_t v10 = v4[1];
          BOOL v11 = v9 == v10;
          char v8 = v9 >= v10 ? 1 : -1;
          if (v11) {
            char v8 = 0;
          }
        }

        if (v8 < 0)
        {
          unint64_t v12 = v4[3];
          uint64_t v13 = v3;
          while (1)
          {
            unint64_t v14 = (char *)result + v13;
            uint64_t v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((void *)v14 + gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v7;
            *((void *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            uint64_t v7 = *((void *)v14 - 2);
            if (v6 >= v7) {
              char v16 = 1;
            }
            else {
              char v16 = -1;
            }
            if (v6 == v7)
            {
              unint64_t v17 = *(uint64_t *)((char *)result + v13 - 8);
              BOOL v18 = v12 == v17;
              if (v12 >= v17) {
                char v16 = 1;
              }
              else {
                char v16 = -1;
              }
              if (v18) {
                char v16 = 0;
              }
            }

            v13 -= 16LL;
            if ((v16 & 0x80) == 0)
            {
              char v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }

          char v19 = result;
LABEL_28:
          uint64_t *v19 = v6;
          v19[1] = v12;
        }

        uint64_t v2 = v5 + 2;
        v3 += 16LL;
        int v4 = v5;
      }

      while (v5 + 2 != a2);
    }
  }

  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (unint64_t *)(result + 3);
      do
      {
        int v4 = v2;
        uint64_t v5 = result[2];
        uint64_t v6 = *result;
        if (v5 >= *result) {
          char v7 = 1;
        }
        else {
          char v7 = -1;
        }
        if (v5 == *result)
        {
          unint64_t v8 = result[3];
          unint64_t v9 = result[1];
          BOOL v10 = v8 == v9;
          char v7 = v8 >= v9 ? 1 : -1;
          if (v10) {
            char v7 = 0;
          }
        }

        if (v7 < 0)
        {
          unint64_t v11 = result[3];
          unint64_t v12 = v3;
          do
          {
            *(v12 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v6;
            *unint64_t v12 = *(v12 - 2);
            uint64_t v6 = *(v12 - 5);
            if (v5 >= v6) {
              char v13 = 1;
            }
            else {
              char v13 = -1;
            }
            if (v5 == v6)
            {
              unint64_t v14 = *(v12 - 4);
              BOOL v15 = v11 == v14;
              if (v11 >= v14) {
                char v13 = 1;
              }
              else {
                char v13 = -1;
              }
              if (v15) {
                char v13 = 0;
              }
            }

            v12 -= 2;
          }

          while (v13 < 0);
          *(v12 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v5;
          *unint64_t v12 = v11;
        }

        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }

      while (v4 + 2 != a2);
    }
  }

  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 >= *a1) {
    char v5 = 1;
  }
  else {
    char v5 = -1;
  }
  if (*a2 == *a1)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = a1[1];
    BOOL v8 = v6 >= v7;
    BOOL v9 = v6 == v7;
    char v10 = -1;
    if (v8) {
      char v10 = 1;
    }
    if (v9) {
      char v5 = 0;
    }
    else {
      char v5 = v10;
    }
  }

  uint64_t v11 = *a3;
  char v12 = -1;
  if (*a3 >= v3) {
    char v12 = 1;
  }
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      unint64_t v18 = a3[1];
      unint64_t v19 = a2[1];
      BOOL v8 = v18 >= v19;
      BOOL v20 = v18 == v19;
      char v12 = -1;
      if (v8) {
        char v12 = 1;
      }
      if (v20) {
        char v12 = 0;
      }
    }

    if (v12 < 0)
    {
      uint64_t v36 = a1[1];
      uint64_t v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }

    else
    {
      unint64_t v21 = a1[1];
      uint64_t v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      char v23 = -1;
      if (*a3 >= v4) {
        char v23 = 1;
      }
      if (*a3 == v4)
      {
        unint64_t v24 = a3[1];
        BOOL v8 = v24 >= v21;
        BOOL v25 = v24 == v21;
        char v23 = -1;
        if (v8) {
          char v23 = 1;
        }
        if (v25) {
          char v23 = 0;
        }
      }

      if (v23 < 0)
      {
        uint64_t v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2LL;
      }
    }
  }

  else
  {
    if (v11 == v3)
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = a2[1];
      BOOL v8 = v13 >= v14;
      BOOL v15 = v13 == v14;
      char v16 = -1;
      if (v8) {
        char v16 = 1;
      }
      if (v15) {
        char v12 = 0;
      }
      else {
        char v12 = v16;
      }
    }

    if ((v12 & 0x80) == 0) {
      return 0LL;
    }
    *a2 = v11;
    *a3 = v3;
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    uint64_t v29 = *a1;
    char v30 = -1;
    if (v27 >= *a1) {
      char v30 = 1;
    }
    if (v27 == *a1)
    {
      unint64_t v31 = a2[1];
      unint64_t v32 = a1[1];
      BOOL v8 = v31 >= v32;
      BOOL v33 = v31 == v32;
      char v30 = -1;
      if (v8) {
        char v30 = 1;
      }
      if (v33) {
        char v30 = 0;
      }
    }

    if (v30 < 0)
    {
      uint64_t v34 = a1[1];
      uint64_t v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2LL;
    }
  }

  return 1LL;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>( void *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  BOOL v5 = *a1 == v4;
  if (*a1 >= v4) {
    char v6 = 1;
  }
  else {
    char v6 = -1;
  }
  if (v5)
  {
    unint64_t v7 = *(a2 - 1);
    BOOL v8 = v3 >= v7;
    BOOL v9 = v3 == v7;
    char v6 = -1;
    if (v8) {
      char v6 = 1;
    }
    if (v9) {
      char v6 = 0;
    }
  }

  if (v6 < 0)
  {
    BOOL v15 = a1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v16 = v11[2];
      v11 += 2;
      BOOL v17 = v2 == v16;
      if (v2 >= v16) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = v15[3];
        BOOL v20 = v3 == v19;
        char v18 = v3 >= v19 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }

      BOOL v15 = v11;
    }

    while ((v18 & 0x80) == 0);
  }

  else
  {
    char v10 = a1 + 2;
    do
    {
      uint64_t v11 = v10;
      if (v10 >= a2) {
        break;
      }
      if (v2 >= *v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v2 == *v10)
      {
        unint64_t v13 = v10[1];
        BOOL v14 = v3 == v13;
        char v12 = v3 >= v13 ? 1 : -1;
        if (v14) {
          char v12 = 0;
        }
      }

      v10 += 2;
    }

    while ((v12 & 0x80) == 0);
  }

  if (v11 >= a2)
  {
    unint64_t v21 = a2;
  }

  else
  {
    unint64_t v21 = a2;
    do
    {
      uint64_t v22 = *(v21 - 2);
      v21 -= 2;
      BOOL v23 = v2 == v22;
      if (v2 >= v22) {
        char v24 = 1;
      }
      else {
        char v24 = -1;
      }
      if (v23)
      {
        unint64_t v25 = *(a2 - 1);
        BOOL v26 = v3 == v25;
        char v24 = v3 >= v25 ? 1 : -1;
        if (v26) {
          char v24 = 0;
        }
      }

      a2 = v21;
    }

    while (v24 < 0);
  }

  if (v11 < v21)
  {
    uint64_t v27 = *v11;
    uint64_t v28 = *v21;
    do
    {
      uint64_t v29 = v11[1];
      uint64_t v30 = v21[1];
      void *v11 = v28;
      v11[1] = v30;
      *unint64_t v21 = v27;
      v21[1] = v29;
      unint64_t v31 = v11;
      do
      {
        uint64_t v32 = v11[2];
        v11 += 2;
        uint64_t v27 = v32;
        BOOL v33 = v2 == v32;
        if (v2 >= v32) {
          char v34 = 1;
        }
        else {
          char v34 = -1;
        }
        if (v33)
        {
          unint64_t v35 = v31[3];
          BOOL v36 = v3 == v35;
          char v34 = v3 >= v35 ? 1 : -1;
          if (v36) {
            char v34 = 0;
          }
        }

        unint64_t v31 = v11;
      }

      while ((v34 & 0x80) == 0);
      uint64_t v37 = v21;
      do
      {
        uint64_t v38 = *(v21 - 2);
        v21 -= 2;
        uint64_t v28 = v38;
        BOOL v39 = v2 == v38;
        if (v2 >= v38) {
          char v40 = 1;
        }
        else {
          char v40 = -1;
        }
        if (v39)
        {
          unint64_t v41 = *(v37 - 1);
          BOOL v42 = v3 == v41;
          char v40 = v3 >= v41 ? 1 : -1;
          if (v42) {
            char v40 = 0;
          }
        }

        uint64_t v37 = v21;
      }

      while (v40 < 0);
    }

    while (v11 < v21);
  }

  if (v11 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  }
  *(v11 - gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v2;
  *(v11 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v3;
  return v11;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::__less<void,void> &>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  do
  {
    uint64_t v5 = a1[v2 + 2];
    if (v5 >= v3) {
      char v6 = 1;
    }
    else {
      char v6 = -1;
    }
    if (v5 == v3)
    {
      unint64_t v7 = a1[v2 + 3];
      BOOL v8 = v7 == v4;
      char v6 = v7 >= v4 ? 1 : -1;
      if (v8) {
        char v6 = 0;
      }
    }

    v2 += 2LL;
  }

  while (v6 < 0);
  BOOL v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      char v10 = a2 - 2;
      uint64_t v16 = *(a2 - 2);
      BOOL v17 = v16 == v3;
      if (v16 >= v3) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = *(a2 - 1);
        BOOL v20 = v19 == v4;
        char v18 = v19 >= v4 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }

      a2 -= 2;
      if (v18 < 0) {
        goto LABEL_39;
      }
    }

    char v10 = a2;
  }

  else
  {
    char v10 = a2;
    do
    {
      uint64_t v11 = *(v10 - 2);
      v10 -= 2;
      BOOL v12 = v11 == v3;
      if (v11 >= v3) {
        char v13 = 1;
      }
      else {
        char v13 = -1;
      }
      if (v12)
      {
        unint64_t v14 = *(a2 - 1);
        BOOL v15 = v14 == v4;
        char v13 = v14 >= v4 ? 1 : -1;
        if (v15) {
          char v13 = 0;
        }
      }

      a2 = v10;
    }

    while ((v13 & 0x80) == 0);
  }

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      char v8 = -1;
      if (v6 >= *a1) {
        char v8 = 1;
      }
      if (v6 == *a1)
      {
        unint64_t v9 = *(a2 - 1);
        unint64_t v10 = a1[1];
        BOOL v11 = v9 >= v10;
        BOOL v12 = v9 == v10;
        char v8 = -1;
        if (v11) {
          char v8 = 1;
        }
        if (v12) {
          char v8 = 0;
        }
      }

      if (v8 < 0)
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - gcd::gcd_queue::resume((dispatch_object_t *)this + 2) = v7;
        *(a2 - std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v13;
      }

      return result;
    case 3LL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a1 + 2,  a2 - 2);
      return 1LL;
    case 4LL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a1 + 2,  a1 + 4,  a2 - 2);
      return 1LL;
    case 5LL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a1 + 2,  a1 + 4,  a1 + 6,  a2 - 2);
      return 1LL;
    default:
      BOOL v15 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a1 + 2,  a1 + 4);
      uint64_t v16 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1LL;
      }
      uint64_t v17 = 0LL;
      int v18 = 0;
      break;
  }

  while (1)
  {
    uint64_t v19 = *v16;
    uint64_t v20 = *v15;
    if (*v16 >= *v15) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (*v16 == *v15)
    {
      unint64_t v22 = v16[1];
      unint64_t v23 = v15[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }

    if (v21 < 0)
    {
      unint64_t v25 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = (uint64_t *)((char *)a1 + v26);
        uint64_t v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32) {
          break;
        }
        uint64_t v20 = v27[2];
        if (v19 >= v20) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v19 == v20)
        {
          unint64_t v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          BOOL v31 = v25 == v30;
          char v29 = v25 >= v30 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }

        v26 -= 16LL;
        if ((v29 & 0x80) == 0)
        {
          uint64_t v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }

      uint64_t v32 = a1;
LABEL_38:
      *uint64_t v32 = v19;
      v32[1] = v25;
      if (++v18 == 8) {
        return v16 + 2 == a2;
      }
    }

    BOOL v15 = v16;
    v17 += 16LL;
    v16 += 2;
    if (v16 == a2) {
      return 1LL;
    }
  }

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a2,  a3);
  uint64_t v9 = *a3;
  char v10 = -1;
  if (*a4 >= *a3) {
    char v10 = 1;
  }
  if (*a4 == *a3)
  {
    unint64_t v11 = a4[1];
    unint64_t v12 = a3[1];
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    char v10 = -1;
    if (v13) {
      char v10 = 1;
    }
    if (v14) {
      char v10 = 0;
    }
  }

  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    char v18 = -1;
    if (v15 >= *a2) {
      char v18 = 1;
    }
    if (v15 == *a2)
    {
      unint64_t v19 = a3[1];
      unint64_t v20 = a2[1];
      BOOL v13 = v19 >= v20;
      BOOL v21 = v19 == v20;
      char v18 = -1;
      if (v13) {
        char v18 = 1;
      }
      if (v21) {
        char v18 = 0;
      }
    }

    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      uint64_t v24 = *a1;
      char v25 = -1;
      if (v22 >= *a1) {
        char v25 = 1;
      }
      if (v22 == *a1)
      {
        unint64_t v26 = a2[1];
        unint64_t v27 = a1[1];
        BOOL v13 = v26 >= v27;
        BOOL v28 = v26 == v27;
        char v25 = -1;
        if (v13) {
          char v25 = 1;
        }
        if (v28) {
          char v25 = 0;
        }
      }

      if (v25 < 0)
      {
        uint64_t v29 = a1[1];
        uint64_t v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }

  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a2,  a3,  a4);
  uint64_t v11 = *a4;
  char v12 = -1;
  if (*a5 >= *a4) {
    char v12 = 1;
  }
  if (*a5 == *a4)
  {
    unint64_t v13 = a5[1];
    unint64_t v14 = a4[1];
    BOOL v15 = v13 >= v14;
    BOOL v16 = v13 == v14;
    char v12 = -1;
    if (v15) {
      char v12 = 1;
    }
    if (v16) {
      char v12 = 0;
    }
  }

  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = *a3;
    char v20 = -1;
    if (v17 >= *a3) {
      char v20 = 1;
    }
    if (v17 == *a3)
    {
      unint64_t v21 = a4[1];
      unint64_t v22 = a3[1];
      BOOL v15 = v21 >= v22;
      BOOL v23 = v21 == v22;
      char v20 = -1;
      if (v15) {
        char v20 = 1;
      }
      if (v23) {
        char v20 = 0;
      }
    }

    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      uint64_t v24 = *a3;
      uint64_t v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      uint64_t v26 = *a2;
      char v27 = -1;
      if (v24 >= *a2) {
        char v27 = 1;
      }
      if (v24 == *a2)
      {
        unint64_t v28 = a3[1];
        unint64_t v29 = a2[1];
        BOOL v15 = v28 >= v29;
        BOOL v30 = v28 == v29;
        char v27 = -1;
        if (v15) {
          char v27 = 1;
        }
        if (v30) {
          char v27 = 0;
        }
      }

      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        uint64_t v31 = *a2;
        uint64_t v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        uint64_t v33 = *a1;
        char v34 = -1;
        if (v31 >= *a1) {
          char v34 = 1;
        }
        if (v31 == *a1)
        {
          unint64_t v35 = a2[1];
          unint64_t v36 = a1[1];
          BOOL v15 = v35 >= v36;
          BOOL v37 = v35 == v36;
          char v34 = -1;
          if (v15) {
            char v34 = 1;
          }
          if (v37) {
            char v34 = 0;
          }
        }

        if (v34 < 0)
        {
          uint64_t v38 = a1[1];
          uint64_t v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }

  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( (uint64_t)a1,  a4,  v9,  v12);
        v12 -= 16;
        --v11;
      }

      while (v11);
    }

    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 >= *(void *)a1) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (*(void *)v14 == *(void *)a1)
        {
          unint64_t v17 = *((void *)v14 + 1);
          unint64_t v18 = *((void *)a1 + 1);
          BOOL v19 = v17 == v18;
          char v16 = v17 >= v18 ? 1 : -1;
          if (v19) {
            char v16 = 0;
          }
        }

        if (v16 < 0)
        {
          uint64_t v20 = *((void *)v14 + 1);
          uint64_t v21 = *((void *)a1 + 1);
          *(void *)unint64_t v14 = *(void *)a1;
          *((void *)v14 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v21;
          *(void *)a1 = v15;
          *((void *)a1 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( (uint64_t)a1,  a4,  v9,  a1);
        }

        v14 += 16;
      }

      while (v14 != a3);
      unint64_t v13 = a3;
    }

    if (v8 >= 17)
    {
      uint64_t v22 = (unint64_t)v8 >> 4;
      BOOL v23 = a2 - 16;
      do
      {
        uint64_t v25 = *(void *)a1;
        uint64_t v24 = *((void *)a1 + 1);
        uint64_t v26 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( a1,  a4,  v22);
        if (v23 == v26)
        {
          *(void *)uint64_t v26 = v25;
          *((void *)v26 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v24;
        }

        else
        {
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v23;
          *(void *)BOOL v23 = v25;
          *((void *)v23 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = v24;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( (uint64_t)a1,  (uint64_t)(v26 + 16),  a4,  (v26 + 16 - a1) >> 4);
        }

        v23 -= 16;
      }

      while (v22-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (void *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        BOOL v11 = *v8 == v10;
        if (*v8 >= v10) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if (v11)
        {
          unint64_t v13 = *(void *)(result + 16 * v7 + 8);
          unint64_t v14 = v8[3];
          BOOL v15 = v13 >= v14;
          BOOL v16 = v13 == v14;
          char v12 = -1;
          if (v15) {
            char v12 = 1;
          }
          if (v16) {
            char v12 = 0;
          }
        }

        if (v12 < 0)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }

      uint64_t v17 = *v8;
      uint64_t v18 = *a4;
      char v19 = -1;
      if (*v8 >= *a4) {
        char v19 = 1;
      }
      if (*v8 == *a4)
      {
        unint64_t v20 = v8[1];
        unint64_t v21 = a4[1];
        BOOL v15 = v20 >= v21;
        BOOL v22 = v20 == v21;
        char v19 = -1;
        if (v15) {
          char v19 = 1;
        }
        if (v22) {
          char v19 = 0;
        }
      }

      if ((v19 & 0x80) == 0)
      {
        unint64_t v23 = a4[1];
        do
        {
          uint64_t v24 = a4;
          a4 = v8;
          uint64_t v25 = v8[1];
          void *v24 = v17;
          v24[1] = v25;
          if (v5 < v7) {
            break;
          }
          uint64_t v26 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 16 * v26);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v26;
          }

          else
          {
            uint64_t v27 = v8[2];
            BOOL v28 = *v8 == v27;
            if (*v8 >= v27) {
              char v29 = 1;
            }
            else {
              char v29 = -1;
            }
            if (v28)
            {
              unint64_t v30 = *(void *)(result + 16 * v26 + 8);
              unint64_t v31 = v8[3];
              BOOL v32 = v30 == v31;
              char v29 = v30 >= v31 ? 1 : -1;
              if (v32) {
                char v29 = 0;
              }
            }

            if (v29 < 0) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v26;
            }
          }

          uint64_t v17 = *v8;
          if (*v8 >= v18) {
            char v33 = 1;
          }
          else {
            char v33 = -1;
          }
          if (*v8 == v18)
          {
            unint64_t v34 = v8[1];
            BOOL v35 = v34 == v23;
            if (v34 >= v23) {
              char v33 = 1;
            }
            else {
              char v33 = -1;
            }
            if (v35) {
              char v33 = 0;
            }
          }
        }

        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }

  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = &a1[v3 + 1];
    uint64_t v8 = (2 * v3) | 1;
    uint64_t v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7[2];
      BOOL v11 = *v7 == v10;
      if (*v7 >= v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unint64_t v13 = *((void *)&a1[v6] + 1);
        unint64_t v14 = v7[3];
        BOOL v15 = v13 == v14;
        if (v13 >= v14) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (v15) {
          char v12 = 0;
        }
        else {
          char v12 = v16;
        }
      }

      if (v12 < 0)
      {
        v7 += 2;
        uint64_t v8 = v9;
      }
    }

    *a1 = *(_OWORD *)v7;
    a1 = v7;
    uint64_t v3 = v8;
  }

  while (v8 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,unsigned long> *>( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void *)(a2 - 16);
    uint64_t v9 = *v6;
    char v10 = -1;
    if (*v6 >= v8) {
      char v10 = 1;
    }
    if (*v6 == v8)
    {
      unint64_t v11 = v6[1];
      unint64_t v12 = *(void *)(a2 - 8);
      BOOL v13 = v11 >= v12;
      BOOL v14 = v11 == v12;
      char v10 = -1;
      if (v13) {
        char v10 = 1;
      }
      if (v14) {
        char v10 = 0;
      }
    }

    if (v10 < 0)
    {
      unint64_t v15 = *(void *)(a2 - 8);
      do
      {
        char v16 = v7;
        uint64_t v7 = v6;
        uint64_t v17 = v6[1];
        *char v16 = v9;
        v16[1] = v17;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 16 * v5);
        uint64_t v9 = *v6;
        if (*v6 >= v8) {
          char v18 = 1;
        }
        else {
          char v18 = -1;
        }
        if (*v6 == v8)
        {
          unint64_t v19 = v6[1];
          BOOL v20 = v19 == v15;
          if (v19 >= v15) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if (v20) {
            char v18 = 0;
          }
        }
      }

      while (v18 < 0);
      *uint64_t v7 = v8;
      v7[1] = v15;
    }
  }

  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<213ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<213ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<213ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DBE58;
  di_log::logger_buf<di_log::log_printer<213ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<213ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<213ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D6550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<213ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<213ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 213LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 213LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<218ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<218ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<218ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DC078;
  di_log::logger_buf<di_log::log_printer<218ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<218ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<218ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D6AFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<218ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<218ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 218LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 218LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<222ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<222ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<222ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DC298;
  di_log::logger_buf<di_log::log_printer<222ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<222ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<222ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D70A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<222ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<222ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 222LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 222LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<231ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<231ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<231ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DC4B8;
  di_log::logger_buf<di_log::log_printer<231ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<231ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<231ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D7654( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<231ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<231ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 231LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 231LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<235ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<235ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<235ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DC6D8;
  di_log::logger_buf<di_log::log_printer<235ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<235ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<235ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D7C00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<235ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<235ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 235LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 235LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<237ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<237ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<237ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DC8F8;
  di_log::logger_buf<di_log::log_printer<237ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<237ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<237ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D81AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<237ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<237ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 237LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 237LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<284ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<284ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<284ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DCB18;
  di_log::logger_buf<di_log::log_printer<284ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<284ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<284ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D8758( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<284ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<284ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 284LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 284LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<295ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<295ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<295ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DCD38;
  di_log::logger_buf<di_log::log_printer<295ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<295ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<295ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D8D04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<295ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<295ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 295LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 295LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *di_log::logger<di_log::log_printer<241ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<241ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DCDC0;
  a1[45] = &unk_18A1DCEC0;
  a1[46] = &unk_18A1DCEE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DCDC0;
  a1[45] = &unk_18A1DCE48;
  a1[46] = &unk_18A1DCE70;
  return a1;
}

void sub_1880D8FAC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  return a1;
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1DCF58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880D9078(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DCF58;
  di_log::logger_buf<di_log::log_printer<241ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<241ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<241ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<241ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<241ul>>::~logger_buf(a1);
  operator delete(v1);
}

uint64_t di_log::logger_buf<di_log::log_printer<241ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    unsigned __int8 v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<241ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D942C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *di_log::log_printer<241ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 241LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 241LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<387ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<387ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<387ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DD178;
  di_log::logger_buf<di_log::log_printer<387ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<387ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<387ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D99C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<387ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<387ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 387LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 387LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<390ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<390ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<390ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DD398;
  di_log::logger_buf<di_log::log_printer<390ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<390ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<390ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880D9F6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<390ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<390ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 390LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 390LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]( std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>( a1,  a2);
  return a1;
}

void sub_1880DA1BC(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>( std::string *this, __int128 *a2)
{
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v3 = *a2;
      this->__r_.__value_.__l.__cap_ = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }

    this[1].__r_.__value_.__s.__data_[0] = 1;
  }

void non-virtual thunk to'di_log::logger<di_log::log_printer<434ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<434ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<434ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DD5B8;
  di_log::logger_buf<di_log::log_printer<434ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<434ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<434ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DA5B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<434ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<434ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 434LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 434LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<443ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<443ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<443ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DD7D8;
  di_log::logger_buf<di_log::log_printer<443ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<443ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<443ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DAB64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<443ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<443ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 443LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 443LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<460ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<460ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<460ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DD9F8;
  di_log::logger_buf<di_log::log_printer<460ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<460ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<460ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DB110( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<460ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<460ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 460LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 460LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<469ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<469ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<469ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DDC18;
  di_log::logger_buf<di_log::log_printer<469ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<469ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<469ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DB6BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<469ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<469ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 469LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 469LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<492ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<492ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<492ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DDE38;
  di_log::logger_buf<di_log::log_printer<492ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<492ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<492ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DBC68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<492ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<492ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 492LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 492LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<498ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<498ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<498ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DE058;
  di_log::logger_buf<di_log::log_printer<498ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<498ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<498ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DC214( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<498ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<498ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 498LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 498LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<505ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<505ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<505ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DE278;
  di_log::logger_buf<di_log::log_printer<505ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<505ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<505ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DC7C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<505ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<505ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 505LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 505LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<511ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<511ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<511ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DE498;
  di_log::logger_buf<di_log::log_printer<511ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<511ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<511ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DCD6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<511ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<511ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 511LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 511LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<523ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<523ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}

void di_log::logger<di_log::log_printer<523ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DE6B8;
  di_log::logger_buf<di_log::log_printer<523ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

uint64_t di_log::logger_buf<di_log::log_printer<523ul>>::_sync(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1 + 104, __p);
        di_log::log_printer<523ul>::log((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        std::stringbuf::str[abi:ne180100](a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1880DD318( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(uint64_t a1)
{
  uint64_t v1 = (void *)di_log::logger_buf<di_log::log_printer<523ul>>::~logger_buf(a1);
  operator delete(v1);
}

int *di_log::log_printer<523ul>::log(uint64_t *a1, uint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (DIForwardLogs())
  {
    DIOSLog = (os_log_s *)getDIOSLog();
    os_log_type_enabled(DIOSLog, *((os_log_type_t *)a1 + 16));
    uint64_t v7 = *a1;
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v17 = v4;
    __int16 v18 = 2080;
    uint64_t v19 = v7;
    __int16 v20 = 2048;
    uint64_t v21 = 523LL;
    __int16 v22 = 2082;
    unint64_t v23 = v8;
    uint64_t v9 = (const char *)_os_log_send_and_compose_impl();
    if (v9)
    {
      char v10 = (char *)v9;
      fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", v9);
      free(v10);
    }
  }

  else
  {
    unint64_t v11 = (os_log_s *)getDIOSLog();
    os_log_type_t v12 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *a1;
      else {
        BOOL v14 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v17 = v4;
      __int16 v18 = 2080;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = 523LL;
      __int16 v22 = 2082;
      unint64_t v23 = v14;
      _os_log_impl(&dword_188046000, v11, v12, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

DiskImageSparseBundle::ContextSparseBundle *DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle( DiskImageSparseBundle::ContextSparseBundle *this, DiskImageSparseBundle *a2)
{
  *(void *)this = off_18A1DE738;
  *((void *)this + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = a2;
  std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::vector( (void *)this + 2,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 90) - *((void *)a2 + 89)) >> 3));
  if (DIDebugLogsEnabled())
  {
    *(void *)&__int128 v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((void *)&v4 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 63LL;
    int v5 = 2;
    di_log::logger<di_log::log_printer<37ul>>::logger(v6, &v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v7,  (uint64_t)"Constructing sb context",  23LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf((uint64_t)v6);
    MEMORY[0x1895BC2CC](&v8);
  }

  return this;
}

void sub_1880DD60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *di_log::logger<di_log::log_printer<37ul>>::logger(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  a1[46] = MEMORY[0x189614770] + 16LL;
  di_log::logger_buf<di_log::log_printer<37ul>>::logger_buf((uint64_t)a1, a2);
  *a1 = off_18A1DE798;
  a1[45] = &unk_18A1DE898;
  a1[46] = &unk_18A1DE8C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_18A1DE798;
  a1[45] = &unk_18A1DE820;
  a1[46] = &unk_18A1DE848;
  return a1;
}

void sub_1880DD6BC(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  return a1;
}

void DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle( DiskImageSparseBundle::ContextSparseBundle *this)
{
}

{
  __int128 v2;
  int v3;
  void **v4[45];
  uint64_t v5;
  uint64_t v6;
  *(void *)this = off_18A1DE738;
  if (DIDebugLogsEnabled())
  {
    *(void *)&uint64_t v2 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((void *)&v2 + std::unique_ptr<io_rings_setup_params_out_t,std::function<void ()(io_rings_setup_params_out_t*)>>::~unique_ptr[abi:ne180100]((uint64_t *)this + 1) = 64LL;
    uint64_t v3 = 2;
    di_log::logger<di_log::log_printer<41ul>>::logger(v4, &v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>( &v5,  (uint64_t)"Destructing sb context",  22LL);
    std::ostream::~ostream();
    di_log::logger_buf<di_log::log_printer<41ul>>::~logger_buf((uint64_t)v4);
    MEMORY[0x1895BC2CC](&v6);
  }

  v4[0] = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<char>>::__destroy_vector::operator()[abi:ne180100](v4);
}

void *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::vector( void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__vallocate[abi:ne180100](a1, a2);
    __int128 v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }

  return a1;
}

void sub_1880DD7A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::shared_ptr<sparse_bundles::Band::ContextBand>>::__vallocate[abi:ne180100]( void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<iovec>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::allocator<iovec>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::logger_buf(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf() = off_18A1DE930;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = DIDebugLogsEnabled();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::shared_ptr<char>::~shared_ptr[abi:ne180100](v7 - 72) = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 96);
  return a1;
}

void sub_1880DD85C(_Unwind_Exception *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(uint64_t a1)
{
  *(void *)a1 = off_18A1DE930;
  di_log::logger_buf<di_log::log_printer<37ul>>::_sync(a1);
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)(a1 + 96) = *MEMORY[0x189614738];
  *(void *)(a1 + 96 + *(void *)(v3 - CFAutoRelease<__CFString const*>::~CFAutoRelease((const void **)(v10 + 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 104) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1895BC2CC](a1 + 208);
  return std::streambuf::~streambuf();
}

void di_log::logger<di_log::log_printer<37ul>>::~logger(char *a1)
{
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::xsputn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write();
  }
  return a3;
}

uint64_t di_log::logger_buf<di_log::log_printer<37ul>>::overflow(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put();
    }
  }

  return v2;
}

void non-virtual thunk to'di_log::logger<di_log::log_printer<37ul>>::~logger(uint64_t a1)
{
  uint64_t v1 = a1 - 360;
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  void *v2;
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf((uint64_t)v2);
  MEMORY[0x1895BC2CC](a1 + 8);
  operator delete(v2);
}

void virtual thunk to'di_log::logger<di_log::log_printer<37ul>>::~logger(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf(v1);
  JUMPOUT(0x1895BC2CCLL);
}

{
  char *v1;
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream();
  di_log::logger_buf<di_log::log_printer<37ul>>::~logger_buf((uint64_t)v1);
  MEMORY[0x1895BC2CC](v1 + 368);
  operator delete(v1);
}