void sub_100085AE4(char *a1)
{
  std::ostream::~ostream(a1 + 360, off_100183548);
  sub_100085A48((uint64_t)a1);
  std::ios::~ios(a1 + 368);
  operator delete(a1);
}

uint64_t sub_100085B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100085B5C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100085BA8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183548);
  sub_100085A48(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100085BE0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183548);
  sub_100085A48((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100085C20(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183548);
  sub_100085A48(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100085C60(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183548);
  sub_100085A48((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100085CAC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100085A48(a1);
  operator delete(v1);
}

uint64_t sub_100085CC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100085E10((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100085DE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100085E10(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 226LL;
    __int16 v25 = 2082;
    v26 = v10;
    v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 226LL;
      __int16 v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_100085FF4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182208;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008605C(_Unwind_Exception *a1)
{
}

uint64_t sub_100086070(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182428;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000860D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000860EC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182648;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100086154(_Unwind_Exception *a1)
{
}

uint64_t sub_100086168(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182868;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000861D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000861E4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182A88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008624C(_Unwind_Exception *a1)
{
}

uint64_t sub_100086260(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182CA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000862C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000862DC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100182EC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100086344(_Unwind_Exception *a1)
{
}

uint64_t sub_100086358(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001830E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000863C0(_Unwind_Exception *a1)
{
}

void sub_100086814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10008683C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_100086970( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100086998(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = 0LL;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_100086B0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100086B34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = 0LL;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_100086CBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100086CE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v6)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = 0LL;
    [v8 updateDiskImageParamsWithFrontend:v5 error:&v9];
    id v6 = v9;
  }

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

_OWORD *sub_100086D6C(_OWORD *a1, uint64_t a2)
{
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  char v4 = operator new[](0x40uLL);
  *char v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  unsigned int v5 = sub_100042FD0(a2, (uint64_t)v4, 64LL, 0LL);
  if (v5 != 64)
  {
    unsigned int v7 = v5;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    id v9 = std::generic_category();
    exception[1] = v7;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Couldn't read sparseimage header";
  }

  sub_100086E58((uint64_t)a1, (uint64_t)v4);
  operator delete[](v4);
  return a1;
}

void sub_100086E44(_Unwind_Exception *a1)
{
}

_DWORD *sub_100086E58(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14) = 1936879731;
  sub_100019FE4((uint64_t)"header_signature", v4, &v14, 1LL);
  *(_DWORD *)a1 = 1936879731;
  int v5 = bswap32(*(_DWORD *)(a2 + 4));
  uint64_t v14 = 0x200000001LL;
  int v15 = 3;
  sub_100019FE4((uint64_t)"version_t", v5, &v14, 3LL);
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)(a2 + 8));
  result = sub_10008700C(&v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a2 + 16));
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  *(void *)(a1 + 28) = bswap64(*(void *)(a2 + 28));
  __int128 v7 = *(_OWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 52) = v8;
  *(_OWORD *)(a1 + 36) = v7;
  if (!*(_DWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v13 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Band size in sparse is zero", 0x16u);
  }

  for (uint64_t i = 0LL; i != 28; ++i)
  {
    if (*(_BYTE *)(a1 + 36 + i))
    {
      v10 = __cxa_allocate_exception(0x40uLL);
      v11 = (void *)sub_100004494((uint64_t)v10, (uint64_t)"Reserved part isn't zeroed", 0x16u);
    }
  }

  return result;
}

_DWORD *sub_10008700C(_DWORD *result, int a2)
{
  _DWORD *result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100172A40;
    exception[1] = "flags_t";
    *((_DWORD *)exception + 8) = v2;
  }

  return result;
}

void sub_100087128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000872B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087414(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000875A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000875EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000875FC(uint64_t a1)
{
}

void sub_100087604(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    int v8 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v19 = 0LL;
      uint64_t v9 = sub_1000BE278();
      v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        uint64_t v11 = 3LL;
      }
      else {
        uint64_t v11 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      int v21 = 73;
      __int16 v22 = 2080;
      __int16 v23 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
      __int16 v24 = 2112;
      id v25 = v7;
      int v18 = 28;
      v12 = (char *)_os_log_send_and_compose_impl( v11,  &v19,  0LL,  0LL,  &_mh_execute_header,  v10,  16LL,  "%.*s: %@",  buf,  v18);

      if (v12)
      {
        fprintf(__stderrp, "%s\n", v12);
        free(v12);
      }
    }

    else
    {
      uint64_t v13 = sub_1000BE278();
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158210;
        int v21 = 73;
        __int16 v22 = 2080;
        __int16 v23 = "+[DIKeyRetriever requestSynchronousDataWithRequest:session:]_block_invoke";
        __int16 v24 = 2112;
        id v25 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%.*s: %@", buf, 0x1Cu);
      }
    }

    *__error() = v8;
  }

  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
  v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v6;
  id v17 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000877F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008802C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_25:
  return v17;
}

void sub_1000883C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_1000884A0()
{
  return &unk_1001A3DC0;
}

void *sub_1000884AC(uint64_t a1)
{
  unsigned int v2 = operator new(0x68uLL);
  sub_100088804((uint64_t)v2, a1);
  return v2;
}

void sub_1000884EC(_Unwind_Exception *a1, int a2)
{
  int v5 = v3;
  operator delete(v5);
  if (a2 == 1)
  {
    id v7 = __cxa_begin_catch(a1);
    sub_100088950(v7, v2);
    __cxa_end_catch();
    JUMPOUT(0x1000884D8LL);
  }

  _Unwind_Resume(a1);
}

double sub_100088544(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t, const char *))(a1 + 8))(a2, "fd");
  if ((v4 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_100183E00;
    uint64_t v14 = std::generic_category();
    exception[1] = v4;
    exception[2] = v14;
    exception[3] = "Cannot decode file descriptor";
  }

  uint64_t v19 = 0LL;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "path", &v19);
  unsigned int v6 = v5;
  if (v5 <= 0)
  {
    uint64_t v15 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v15 = &off_100183E00;
    v16 = std::generic_category();
    v15[1] = v6;
    v15[2] = v16;
    v15[3] = "Cannot decode path";
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19));
  (*(void (**)(char *))(a1 + 16))(v19);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *, char **))a1)(a2, "writable", &v19);
  unsigned int v9 = v8;
  if (v8 != 1)
  {
    id v17 = __cxa_allocate_exception(0x20uLL);
    *id v17 = &off_100183E00;
    int v18 = std::generic_category();
    v17[1] = v9;
    v17[2] = v18;
    v17[3] = "Cannot decode writable";
  }

  char v10 = *v19;
  (*(void (**)(void))(a1 + 16))();
  uint64_t v11 = operator new(0x68uLL);
  v11[11] = v7;
  *((_BYTE *)v11 + 96) = v10;
  *((_DWORD *)v11 + 25) = v4;
  *(void *)&double result = 88LL;
  void *v11 = 88LL;
  v11[1] = sub_100088BC0;
  v11[2] = sub_100088BC8;
  v11[3] = sub_100088BF0;
  v11[4] = sub_100088C00;
  v11[5] = sub_100088C08;
  v11[6] = sub_100088C10;
  v11[7] = sub_100088C14;
  v11[8] = sub_100088C18;
  v11[9] = sub_100088C1C;
  v11[10] = 0LL;
  return result;
}

void sub_100088784(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = __cxa_begin_catch(exception_object);
    sub_100088950(v3, v2);
    __cxa_end_catch();
    JUMPOUT(0x100088684LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000887E0(void *a1)
{
  return objc_claimAutoreleasedReturnValue([a1 objectForKeyedSubscript:@"path"]);
}

uint64_t sub_100088804(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a2 + 8) objectForKeyedSubscript:@"path"]);
  BOOL v5 = (*(_DWORD *)(a2 + 4) & 3) != 0;
  *(void *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 100) = -1;
  *(void *)a1 = 88LL;
  *(void *)(a1 + 8) = sub_100088BC0;
  *(void *)(a1 + 16) = sub_100088BC8;
  *(void *)(a1 + 24) = sub_100088BF0;
  *(void *)(a1 + 32) = sub_100088C00;
  *(void *)(a1 + 40) = sub_100088C08;
  *(void *)(a1 + 48) = sub_100088C10;
  *(void *)(a1 + 56) = sub_100088C14;
  *(void *)(a1 + 64) = sub_100088C18;
  *(void *)(a1 + 72) = sub_100088C1C;
  *(void *)(a1 + 80) = 0LL;
  int v6 = open((const char *)[v4 fileSystemRepresentation], *(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 100) = v6;
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = *__error();
    void *exception = &off_100183E00;
    char v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    exception[3] = "Failed opening the file";
  }

  return a1;
}

void sub_10008892C(_Unwind_Exception *a1)
{
}

uint64_t sub_100088950(_DWORD *a1, void *a2)
{
  int v4 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    uint64_t v5 = sub_1000BE278();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      uint64_t v7 = 3LL;
    }
    else {
      uint64_t v7 = 2LL;
    }
    uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
    int v9 = a1[2];
    *(_DWORD *)buf = 68158466;
    int v20 = 97;
    __int16 v21 = 2080;
    __int16 v22 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
    __int16 v23 = 2080;
    uint64_t v24 = v8;
    __int16 v25 = 1024;
    int v26 = v9;
    LODWORD(v16) = 34;
    char v10 = (char *)_os_log_send_and_compose_impl( v7,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  16LL,  "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)",  (int)buf,  v16,  v17);

    if (v10)
    {
      fprintf(__stderrp, "%s\n", v10);
      free(v10);
    }
  }

  else
  {
    uint64_t v11 = sub_1000BE278();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1);
      int v14 = a1[2];
      *(_DWORD *)buf = 68158466;
      int v20 = 97;
      __int16 v21 = 2080;
      __int16 v22 = "static di_plugin_image_t *rawTestPlugin_t::CreationError(const pluginException_t &, CFErrorRef *)";
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      __int16 v25 = 1024;
      int v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%.*s: Failed instantiating rawTestPlugin object: %s (code %d)",  buf,  0x22u);
    }
  }

  *__error() = v4;
  if (a2) {
    *a2 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  (int)a1[2],  0LL));
  }
  return 0LL;
}

void *sub_100088B70(void *a1, uint64_t a2, unsigned int a3)
{
  *a1 = &off_100183E00;
  int v6 = std::generic_category();
  a1[1] = a3;
  a1[2] = v6;
  a1[3] = a2;
  return a1;
}

uint64_t sub_100088BC0()
{
  return 512LL;
}

unint64_t sub_100088BC8(uint64_t a1)
{
  return (unint64_t)v2.st_size >> 9;
}

BOOL sub_100088BF0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 96) != 0;
}

uint64_t sub_100088C00()
{
  return 1024LL;
}

uint64_t sub_100088C08()
{
  return 1024LL;
}

void sub_100088C1C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)sub_10008B7C4(a1);
    operator delete(v1);
  }

uint64_t sub_100088C38@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 100), a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    int v4 = __error();
    uint64_t v5 = sub_100088B70(exception, (uint64_t)"fstat failed", *v4);
  }

  return result;
}

void sub_100088C98(_Unwind_Exception *a1)
{
}

CFUUIDRef sub_100088CAC(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  uint64_t v1 = sub_100088D3C( (uint64_t)v5,  (char *)[*(id *)(a1 + 88) UTF8String],  (uint64_t)objc_msgSend(*(id *)(a1 + 88), "length"));
  uint64_t v3 = v2;
  *(void *)&v6.byte0 = v1;
  *(void *)&v6.byte8 = v3;
  return CFUUIDCreateFromUUIDBytes(0LL, v6);
}

uint64_t sub_100088D3C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  __int128 v13 = xmmword_100146AC0;
  int v14 = -1009589776;
  unint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  uint64_t v16 = 0LL;
  do
  {
    char v7 = *(_BYTE *)(a1 + v6);
    uint64_t v8 = v16++;
    v15[v8] = v7;
    if (v16 == 64)
    {
      uint64_t v16 = 0LL;
      sub_100089010(&v13);
    }

    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0LL;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_10007ABD8(&v12);
      }

      ++v18;
    }

    else
    {
      v17 += 8LL;
    }

    ++v6;
  }

  while (v6 != 16);
  for (; a3; --a3)
  {
    char v9 = *a2;
    uint64_t v10 = v16++;
    v15[v10] = v9;
    if (v16 == 64)
    {
      uint64_t v16 = 0LL;
      sub_100089010(&v13);
    }

    if (v17 > 0xFFFFFFF7)
    {
      unint64_t v17 = 0LL;
      if (v18 > 0xFFFFFFFE)
      {
        std::runtime_error::runtime_error(&v12, "sha1 too many bytes");
        sub_10007ABD8(&v12);
      }

      ++v18;
    }

    else
    {
      v17 += 8LL;
    }

    ++a2;
  }

  return sub_100088F70(a1, &v13);
}

void sub_100088F50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_100088F70(uint64_t a1, _DWORD *a2)
{
  for (uint64_t i = 0LL; i != 4; ++i)
    *(_DWORD *)((char *)&v5 + i * 4) = bswap32(v4[i]);
  BYTE6(v5) = BYTE6(v5) & 0xF | 0x50;
  return v5;
}

_DWORD *sub_100089010(_DWORD *result)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = (const char *)(result + 5);
  int8x16x4_t v40 = vld4q_s8(v2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v40.val[0]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v40.val[1]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }

  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v40.val[2]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
  int8x16_t v15 = vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL),  (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v40.val[3]);
  v40.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v40.val[3].i8);
  v39[3] = vorrq_s8( vorrq_s8( vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), _Q18),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)),  (int8x16_t)vmovl_high_u16(v16));
  v39[2] = vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL),  (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)),  (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v39[1] = vorrq_s8( vorrq_s8( vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), _Q19),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)),  (int8x16_t)vmovl_high_u16((uint16x8_t)v40.val[0]));
  v39[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.val[0].i8));
  do
  {
    HIDWORD(v17) = *(_DWORD *)((char *)&v39[2] + v1) ^ *(_DWORD *)((char *)&v39[3] + v1 + 4) ^ *(_DWORD *)((char *)v39 + v1 + 8) ^ *(_DWORD *)((char *)v39 + v1);
    LODWORD(v17) = HIDWORD(v17);
    *(_DWORD *)((char *)&v39[4] + v1) = v17 >> 31;
    v1 += 4LL;
  }

  while (v1 != 256);
  unint64_t v18 = 0LL;
  int v19 = result[1];
  int v21 = result[3];
  int v20 = result[4];
  int v22 = v20;
  int v23 = result[2];
  int v24 = v21;
  int v25 = v23;
  int v26 = v19;
  int v27 = *result;
  do
  {
    int v28 = v27;
    int v29 = v25;
    int v30 = v24;
    int v31 = v25 ^ v26 ^ v24;
    int v32 = (v24 | v29) & v26 | v24 & v29;
    if (v18 <= 0x3B)
    {
      int v33 = -1894007588;
    }

    else
    {
      int v32 = v31;
      int v33 = -899497514;
    }

    if (v18 <= 0x27)
    {
      int v34 = 1859775393;
    }

    else
    {
      int v31 = v32;
      int v34 = v33;
    }

    if (v18 <= 0x13) {
      int v31 = v30 & ~v26 | v29 & v26;
    }
    HIDWORD(v36) = v28;
    LODWORD(v36) = v28;
    int v35 = v36 >> 27;
    if (v18 <= 0x13) {
      int v34 = 1518500249;
    }
    int v37 = v22 + v31 + v35 + v34;
    HIDWORD(v38) = v26;
    LODWORD(v38) = v26;
    int v25 = v38 >> 2;
    int v27 = v37 + *((_DWORD *)v39 + v18++);
    int v22 = v30;
    int v24 = v29;
    int v26 = v28;
  }

  while (v18 != 80);
  *result += v27;
  result[1] = v28 + v19;
  result[2] = v25 + v23;
  result[3] = v29 + v21;
  result[4] = v30 + v20;
  return result;
}

_DWORD *sub_100089248(_DWORD *result, _DWORD *a2)
{
  uint16x8_t v3 = result;
  uint64_t v4 = *((void *)result + 11);
  *((void *)result + 11) = v4 + 1;
  *((_BYTE *)result + v4 + 20) = 0x80;
  unint64_t v5 = *((void *)result + 11);
  if (v5 == 64)
  {
    *((void *)result + 11) = 0LL;
    uint64_t result = sub_100089010(result);
    unint64_t v5 = *((void *)v3 + 11);
  }

  if (v5 < 0x39)
  {
    if (v5 != 56)
    {
      do
      {
        *((void *)v3 + 11) = v5 + 1;
        *((_BYTE *)v3 + v5 + 20) = 0;
        unint64_t v5 = *((void *)v3 + 11);
      }

      while (v5 < 0x38);
    }
  }

  else
  {
    do
    {
      *((void *)v3 + 11) = v5 + 1;
      *((_BYTE *)v3 + v5 + 20) = 0;
      unint64_t v5 = *((void *)v3 + 11);
      if (v5 == 64)
      {
        *((void *)v3 + 11) = 0LL;
        uint64_t result = sub_100089010(v3);
        unint64_t v5 = *((void *)v3 + 11);
      }
    }

    while (v5);
    unint64_t v6 = 0LL;
    do
    {
      unint64_t v5 = v6 + 1;
      *((_BYTE *)v3 + v6 + 20) = 0;
    }

    while (v6++ < 0x37);
  }

  uint64_t v8 = *((void *)v3 + 13) >> 24;
  *((void *)v3 + 11) = v5 + 1;
  *((_BYTE *)v3 + v5 + 20) = v8;
  uint64_t v9 = *((void *)v3 + 11);
  if (v9 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v9 = *((void *)v3 + 11);
  }

  uint64_t v10 = *((void *)v3 + 13) >> 16;
  *((void *)v3 + 11) = v9 + 1;
  *((_BYTE *)v3 + v9 + 20) = v10;
  uint64_t v11 = *((void *)v3 + 11);
  if (v11 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v11 = *((void *)v3 + 11);
  }

  uint64_t v12 = *((void *)v3 + 13) >> 8;
  *((void *)v3 + 11) = v11 + 1;
  *((_BYTE *)v3 + v11 + 20) = v12;
  uint64_t v13 = *((void *)v3 + 11);
  if (v13 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v13 = *((void *)v3 + 11);
  }

  uint64_t v14 = *((void *)v3 + 13);
  *((void *)v3 + 11) = v13 + 1;
  *((_BYTE *)v3 + v13 + 20) = v14;
  uint64_t v15 = *((void *)v3 + 11);
  if (v15 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v15 = *((void *)v3 + 11);
  }

  uint64_t v16 = *((void *)v3 + 12) >> 24;
  *((void *)v3 + 11) = v15 + 1;
  *((_BYTE *)v3 + v15 + 20) = v16;
  uint64_t v17 = *((void *)v3 + 11);
  if (v17 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v17 = *((void *)v3 + 11);
  }

  uint64_t v18 = *((void *)v3 + 12) >> 16;
  *((void *)v3 + 11) = v17 + 1;
  *((_BYTE *)v3 + v17 + 20) = v18;
  uint64_t v19 = *((void *)v3 + 11);
  if (v19 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v19 = *((void *)v3 + 11);
  }

  uint64_t v20 = *((void *)v3 + 12) >> 8;
  *((void *)v3 + 11) = v19 + 1;
  *((_BYTE *)v3 + v19 + 20) = v20;
  uint64_t v21 = *((void *)v3 + 11);
  if (v21 == 64)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
    uint64_t v21 = *((void *)v3 + 11);
  }

  uint64_t v22 = *((void *)v3 + 12);
  *((void *)v3 + 11) = v21 + 1;
  *((_BYTE *)v3 + v21 + 20) = v22;
  if (*((void *)v3 + 11) == 64LL)
  {
    *((void *)v3 + 11) = 0LL;
    uint64_t result = sub_100089010(v3);
  }

  *a2 = *v3;
  a2[1] = v3[1];
  a2[2] = v3[2];
  a2[3] = v3[3];
  a2[4] = v3[4];
  return result;
}

void *sub_1000894D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[10] = 0LL;
  v4[11] = 0LL;
  v4[9] = 0LL;
  v4[12] = dispatch_queue_create("com.apple.di_raw_test_plugin", &_dispatch_queue_attr_concurrent);
  v4[13] = 850045863LL;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  v4[20] = 0LL;
  *uint64_t v4 = sub_100089590;
  v4[1] = sub_100089594;
  v4[2] = sub_100089598;
  v4[3] = sub_1000895A0;
  v4[4] = sub_1000895A4;
  _DWORD v4[5] = sub_1000895A8;
  v4[7] = a2;
  v4[8] = a1;
  v4[6] = sub_1000895AC;
  return v4;
}

uint64_t sub_100089598()
{
  return 1LL;
}

void sub_1000895AC(uint64_t a1)
{
  if (a1)
  {
    std::mutex::~mutex((std::mutex *)(a1 + 104));

    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }

    operator delete((void *)a1);
  }

uint64_t sub_1000895F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 80);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1000450A4(a1 + 88, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    char v7 = v14 + 8;
    uint64_t v17 = *(char **)(a1 + 72);
    uint64_t v16 = *(char **)(a1 + 80);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      uint64_t v16 = *(char **)(a1 + 72);
    }

    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 88) = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    *unint64_t v6 = a2;
    char v7 = v6 + 1;
  }

  *(void *)(a1 + 80) = v7;
  std::mutex::unlock(v4);
  return 0LL;
}

void sub_1000896F4(_Unwind_Exception *a1)
{
}

void sub_100089708(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  uint16x8_t v3 = *(void **)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  std::mutex::unlock(v2);
  unint64_t v5 = sub_10000552C(&std::cerr, (uint64_t)"raw plugin: going to execute ", 29LL);
  unint64_t v6 = (void *)std::ostream::operator<<(v5, (v4 - (uint64_t)v3) >> 3);
  char v7 = sub_10000552C(v6, (uint64_t)" SQEs", 5LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
  uint64_t v8 = std::locale::use_facet(&v15, &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale(&v15);
  std::ostream::put(v7, v9);
  std::ostream::flush(v7);
  uint64_t v10 = *(dispatch_queue_s **)(a1 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_10008988C;
  block[3] = &unk_100183740;
  block[4] = a1;
  __p = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_100089F20(&__p, v3, v4, (v4 - (uint64_t)v3) >> 3);
  dispatch_async(v10, block);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }

  if (v3) {
    operator delete(v3);
  }
}

void sub_100089864(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *sub_10008988C(void *result)
{
  uint64_t v1 = (uint64_t **)result[5];
  uint64_t v2 = (uint64_t **)result[6];
  if (v1 != v2)
  {
    uint64_t v3 = result[4];
    do
    {
      uint64_t v4 = *v1;
      unsigned int v5 = -45;
      switch(*(_BYTE *)*v1)
      {
        case 2:
          unsigned int v6 = sub_100089964(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_preadv);
          goto LABEL_7;
        case 4:
          unsigned int v6 = sub_100089BE0(*(void *)(v3 + 64), v4 + 3, (uint64_t (*)(void))&_pwritev);
          goto LABEL_7;
        case 5:
          unsigned int v6 = sub_100089E5C(*(void *)(v3 + 64));
LABEL_7:
          unsigned int v5 = v6;
          break;
        case 6:
          unsigned int v5 = 0;
          break;
        default:
          break;
      }

      uint64_t result = (void *)io_rings_return_status(*(void *)(v3 + 56), (uint64_t)v4, v5, 0);
      ++v1;
    }

    while (v1 != v2);
  }

  return result;
}

uint64_t sub_100089964(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }

    int v6 = -22;
  }

  else
  {
    int v6 = 0;
  }

void sub_100089BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100089BE0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    int v6 = 0;
    unint64_t v7 = v5 << 9;
    uint64_t v8 = (unint64_t *)(v4 + 8);
    while (1)
    {
      unint64_t v9 = *v8;
      v8 += 2;
      BOOL v10 = v7 >= v9;
      v7 -= v9;
      if (!v10) {
        break;
      }
      ++v6;
      if (!v7) {
        goto LABEL_8;
      }
    }

    int v6 = -22;
  }

  else
  {
    int v6 = 0;
  }

void sub_100089E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100089E5C(uint64_t a1)
{
  uint64_t result = fcntl(*(_DWORD *)(a1 + 100), 51, 0LL);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result) {
      return result;
    }
    goto LABEL_8;
  }

  if (*__error() != 22 && *__error() != 25 && *__error() != 45
    || (uint64_t result = fsync(*(_DWORD *)(a1 + 100)), (_DWORD)result))
  {
LABEL_8:
    int v3 = *__error();
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }

  return result;
}

void *sub_100089EEC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0LL;
  return sub_100089F20( v2,  *(const void **)(a2 + 40),  *(void *)(a2 + 48),  (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void sub_100089F08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }

void *sub_100089F20(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100089F98(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100089F7C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100089F98(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100045090();
  }
  uint64_t result = (char *)sub_1000450A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_100089FD8()
{
  *(void *)&__int128 v1 = "rawTestPlugin_t::subscriber_t::_suspend()";
  *((void *)&v1 + 1) = 39LL;
  int v2 = 0;
  sub_10008A070(v3, &v1);
  sub_10000552C(&v4, (uint64_t)"Suspended", 9LL);
  std::ostream::~ostream(&v4, off_100183850);
  sub_10008A1D4((uint64_t)v3);
  return std::ios::~ios(&v5);
}

void sub_10008A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10008A070(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10008A158((uint64_t)a1, a2);
  *a1 = off_100183788;
  a1[45] = &off_100183888;
  a1[46] = &off_1001838B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183788;
  a1[45] = off_100183810;
  a1[46] = off_100183838;
  return a1;
}

void sub_10008A0F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A118(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008A158(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100183920;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008A1C0(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A1D4(uint64_t a1)
{
  *(void *)a1 = off_100183920;
  sub_10008A44C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008A270(char *a1)
{
}

uint64_t sub_10008A2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008A2E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10008A334(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183850);
  sub_10008A1D4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10008A36C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183850);
  sub_10008A1D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10008A3AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183850);
  sub_10008A1D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10008A3EC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183850);
  sub_10008A1D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10008A438(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008A1D4(a1);
  operator delete(v1);
}

uint64_t sub_10008A44C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10008A59C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008A574( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10008A59C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 121LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 121LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_10008A790()
{
  *(void *)&__int128 v1 = "rawTestPlugin_t::subscriber_t::_resume()";
  *((void *)&v1 + 1) = 38LL;
  int v2 = 0;
  sub_10008A828(v3, &v1);
  sub_10000552C(&v4, (uint64_t)"Resumed", 7LL);
  std::ostream::~ostream(&v4, off_100183A70);
  sub_10008A98C((uint64_t)v3);
  return std::ios::~ios(&v5);
}

void sub_10008A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10008A828(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008A910((uint64_t)a1, a2);
  *a1 = off_1001839A8;
  a1[45] = &off_100183AA8;
  a1[46] = &off_100183AD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_1001839A8;
  a1[45] = off_100183A30;
  a1[46] = off_100183A58;
  return a1;
}

void sub_10008A8AC(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A8D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008A910(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100183B40;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008A978(_Unwind_Exception *a1)
{
}

uint64_t sub_10008A98C(uint64_t a1)
{
  *(void *)a1 = off_100183B40;
  sub_10008AC04(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008AA28(char *a1)
{
}

uint64_t sub_10008AA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008AAA0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10008AAEC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183A70);
  sub_10008A98C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10008AB24(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183A70);
  sub_10008A98C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10008AB64(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183A70);
  sub_10008A98C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10008ABA4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183A70);
  sub_10008A98C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10008ABF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008A98C(a1);
  operator delete(v1);
}

uint64_t sub_10008AC04(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10008AD54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008AD2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10008AD54(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 122LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 122LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_10008AF48(uint64_t a1)
{
  *(void *)&__int128 v2 = "rawTestPlugin_t::subscriber_t::_cancel()";
  *((void *)&v2 + 1) = 38LL;
  int v3 = 0;
  sub_10008AFF4(v4, &v2);
  sub_10000552C(&v5, (uint64_t)"Cancelled", 9LL);
  std::ostream::~ostream(&v5, off_100183CB0);
  sub_10008B158((uint64_t)v4);
  return std::ios::~ios(&v6);
}

void sub_10008AFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10008AFF4(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10008B0DC((uint64_t)a1, a2);
  *a1 = off_100183BE8;
  a1[45] = &off_100183CE8;
  a1[46] = &off_100183D10;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183BE8;
  a1[45] = off_100183C70;
  a1[46] = off_100183C98;
  return a1;
}

void sub_10008B078(_Unwind_Exception *a1)
{
}

uint64_t sub_10008B09C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008B0DC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100183D80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008B144(_Unwind_Exception *a1)
{
}

uint64_t sub_10008B158(uint64_t a1)
{
  *(void *)a1 = off_100183D80;
  sub_10008B3D0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008B1F4(char *a1)
{
}

uint64_t sub_10008B238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008B26C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10008B2B8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183CB0);
  sub_10008B158(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10008B2F0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183CB0);
  sub_10008B158((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10008B330(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183CB0);
  sub_10008B158(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10008B370(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183CB0);
  sub_10008B158((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10008B3BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008B158(a1);
  operator delete(v1);
}

uint64_t sub_10008B3D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10008B520((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008B4F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10008B520(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 118LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 118LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_10008B714( uint64_t a1, void (*a2)(uint64_t, const char *, id, char *), void (*a3)(uint64_t, const char *, void), uint64_t a4)
{
  return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a2)(a4, "writable", a1 + 96, 1LL);
}

void sub_10008B7A8(std::exception *a1)
{
}

uint64_t sub_10008B7BC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_10008B7C4(uint64_t a1)
{
  *(void *)&__int128 v3 = "rawTestPlugin_t::~rawTestPlugin_t()";
  *((void *)&v3 + 1) = 33LL;
  int v4 = 0;
  sub_10008B868(v5, &v3);
  sub_10000552C(&v6, (uint64_t)"Cleaning up!", 12LL);
  std::ostream::~ostream(&v6, off_100183EF8);
  sub_10008B9CC((uint64_t)v5);
  std::ios::~ios(&v7);

  return a1;
}

void *sub_10008B868(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10008B950((uint64_t)a1, a2);
  *a1 = off_100183E30;
  a1[45] = &off_100183F30;
  a1[46] = &off_100183F58;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 128) = -1;
  *a1 = off_100183E30;
  a1[45] = off_100183EB8;
  a1[46] = off_100183EE0;
  return a1;
}

void sub_10008B8EC(_Unwind_Exception *a1)
{
}

uint64_t sub_10008B910(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008B950(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100183FC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008B9B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10008B9CC(uint64_t a1)
{
  *(void *)a1 = off_100183FC8;
  sub_10008BC44(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10008BA68(char *a1)
{
}

uint64_t sub_10008BAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008BAE0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10008BB2C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183EF8);
  sub_10008B9CC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10008BB64(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183EF8);
  sub_10008B9CC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10008BBA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183EF8);
  sub_10008B9CC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10008BBE4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183EF8);
  sub_10008B9CC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10008BC30(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008B9CC(a1);
  operator delete(v1);
}

uint64_t sub_10008BC44(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10008BD94((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008BD6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10008BD94(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 325LL;
    __int16 v26 = 2082;
    uint64_t v27 = v11;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 325LL;
      __int16 v26 = 2082;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void sub_10008C3CC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(a1);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 reason]);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v14,  v10);

    objc_end_catch();
    JUMPOUT(0x10008C394LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10008C468(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008C478(uint64_t a1)
{
}

id sub_10008C480(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_10008C640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C8C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  int v14 = v13;

  if (__p) {
    operator delete[](__p);
  }
  if (a2 == 1)
  {
    BOOL v17 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(void *)v17 + 16LL))(v17);
    int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid public key: %s"));
    +[DIError failWithPOSIXCode:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:verboseInfo:error:",  22LL,  v18,  v12);

    __cxa_end_catch();
    JUMPOUT(0x10008C810LL);
  }

  _Unwind_Resume(a1);
}

void sub_10008CB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008CE44(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_10008CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D450( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008DB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008DD18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10008DE28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10008DF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008E080( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

_DWORD *sub_10008E0C0(_DWORD *result, int a2)
{
  int *result = a2;
  if (a2 != 128 && a2 != 256)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_100172A40;
    exception[1] = "encryption_key_bits_size_t";
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = a2;
  }

  return result;
}

void sub_10008E138(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_10001C610(&v24, (uint64_t *)&v26);
    sub_10011F1C0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    id v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      os_log_type_t v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  BOOL v17 = v25;
  if (v25)
  {
    int v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_10008E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10008E2E4(uint64_t *a1, void **a2)
{
  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[18] = 0LL;
  *a1 = (uint64_t)off_1001840B0;
  a1[1] = (uint64_t)off_1001840F8;
  a1[2] = (uint64_t)off_100184140;
  a1[3] = (uint64_t)off_100184188;
  a1[4] = (uint64_t)off_1001841D0;
  a1[5] = (uint64_t)off_100184218;
  a1[6] = (uint64_t)off_100184260;
  a1[7] = (uint64_t)off_1001842C0;
  a1[15] = (uint64_t)off_100184330;
  uint64_t v4 = (uint64_t *)(a2 + 2);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40LL))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + _Block_object_dispose(va, 8) = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 112) + 56) = 0LL;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v7 = ((uint64_t (*)(void **))(*a2)[3])(a2);
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  if (!*(_BYTE *)(v8 + 32)) {
    *(_BYTE *)(v8 + 32) = 1;
  }
  *(void *)(v8 + 24) = v7;
  sub_10008E138(v4, (uint64_t)a1 + *(void *)(*a1 - 104));
  return a1;
}

void sub_10008E400(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = off_1001843A0;
  *(void *)(v1 + 24) = off_1001843F8;
  sub_10003AF44(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_10008E42C(uint64_t *a1, void **a2)
{
  *((_BYTE *)a1 + 80) = 0;
  *((_BYTE *)a1 + 8_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 12_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[18] = 0LL;
  *a1 = (uint64_t)off_1001840B0;
  a1[1] = (uint64_t)off_1001840F8;
  a1[2] = (uint64_t)off_100184140;
  a1[3] = (uint64_t)off_100184188;
  a1[4] = (uint64_t)off_1001841D0;
  a1[5] = (uint64_t)off_100184218;
  a1[6] = (uint64_t)off_100184260;
  a1[7] = (uint64_t)off_1001842C0;
  a1[15] = (uint64_t)off_100184330;
  uint64_t v4 = (uint64_t *)(a2 + 2);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2[2] + 40LL))(a2[2]);
  uint64_t v6 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + _Block_object_dispose(va, 8) = v5;
  uint64_t v7 = (uint64_t)a1 + *(void *)(v6 - 112);
  *(void *)(v7 + 40) = *(void *)(v7 + 8);
  *(_BYTE *)(v7 + 4_Block_object_dispose(va, 8) = 1;
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 112);
  *(void *)(v8 + 24) = *(void *)(v8 + 8);
  *(_BYTE *)(v8 + 32) = 1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) = 0LL;
  uint64_t v9 = ((uint64_t (*)(void **))(*a2)[4])(a2);
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v9;
  sub_10008E138(v4, (uint64_t)a1 + *(void *)(v10 - 104));
  return a1;
}

void sub_10008E548(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = off_1001843A0;
  *(void *)(v1 + 24) = off_1001843F8;
  sub_10003AF44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E570(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001843A0;
  *(void *)(a1 + 24) = off_1001843F8;
  sub_10003AF44((const void **)(a1 + 144));
  return a1;
}

void sub_10008E5AC(uint64_t a1)
{
  *(void *)(a1 + 120) = off_1001843A0;
  *(void *)(a1 + 24) = off_1001843F8;
  sub_10003AF44((const void **)(a1 + 144));
  operator delete((void *)a1);
}

const void **sub_10008E5E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  v10[2] = @"Format Description";
  v10[3] = @"RAW read-write image";
  sub_100039DD4(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  sub_10003A0D8(a1 + *(void *)(*(void *)a1 - 120LL), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 4LL;
  sub_1000FF160(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100006B34(&v8);
  for (uint64_t i = 7LL; i != -1; i -= 2LL)
    uint64_t result = sub_100006B94((const void **)&v10[i]);
  return result;
}

void sub_10008E720(_Unwind_Exception *a1)
{
  for (uint64_t i = 56LL; i != -8; i -= 16LL)
    sub_100006B94((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10008E764()
{
  return @"RAW";
}

const void **sub_10008E770(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 15) = off_1001843A0;
  *((void *)v1 + 3) = off_1001843F8;
  return sub_10003AF44((const void **)v1 + 18);
}

void sub_10008E798(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 15) = off_1001843A0;
  *((void *)v1 + 3) = off_1001843F8;
  sub_10003AF44((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_10008E7DC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 15) = off_1001843A0;
  *((void *)v1 + 3) = off_1001843F8;
  return sub_10003AF44((const void **)v1 + 18);
}

void sub_10008E804(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 15) = off_1001843A0;
  *((void *)v1 + 3) = off_1001843F8;
  sub_10003AF44((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_10008E848@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10008E5E8((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_10008E858()
{
  return @"RAW";
}

uint64_t sub_10008E864(uint64_t a1, uint64_t *a2)
{
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)a1 = off_1001844D0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100184518;
  *(void *)(a1 + 16) = off_100184560;
  *(void *)(a1 + 24) = off_1001845A8;
  *(void *)(a1 + 32) = off_1001845F0;
  *(void *)(a1 + 40) = off_100184638;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100184680;
  *(void *)(a1 + 56) = off_1001846E0;
  sub_10011536C(*a2, (char *)a1);
  return a1;
}

void sub_10008E8DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = off_100184750;
  *(void *)(v1 + 24) = off_1001847A8;
  sub_10003AF44(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E904(uint64_t a1)
{
  *(void *)(a1 + 56) = off_100184750;
  *(void *)(a1 + 24) = off_1001847A8;
  sub_10003AF44((const void **)(a1 + 80));
  return a1;
}

void sub_10008E940(uint64_t a1)
{
  *(void *)(a1 + 56) = off_100184750;
  *(void *)(a1 + 24) = off_1001847A8;
  sub_10003AF44((const void **)(a1 + 80));
  operator delete((void *)a1);
}

const void **sub_10008E97C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  v10[2] = @"Format Description";
  v10[3] = @"Locked encrypted image";
  sub_10003A0D8(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Encryption Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 3LL;
  sub_1000FF160(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100006B34(&v8);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    uint64_t result = sub_100006B94((const void **)&v10[i]);
  return result;
}

void sub_10008EA78(_Unwind_Exception *a1)
{
  for (uint64_t i = 40LL; i != -8; i -= 16LL)
    sub_100006B94((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10008EAC0()
{
  return @"Unknown";
}

const void **sub_10008EACC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 7) = off_100184750;
  *((void *)v1 + 3) = off_1001847A8;
  return sub_10003AF44((const void **)v1 + 10);
}

void sub_10008EAF4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 7) = off_100184750;
  *((void *)v1 + 3) = off_1001847A8;
  sub_10003AF44((const void **)v1 + 10);
  operator delete(v1);
}

const void **sub_10008EB38(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 7) = off_100184750;
  *((void *)v1 + 3) = off_1001847A8;
  return sub_10003AF44((const void **)v1 + 10);
}

void sub_10008EB60(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 7) = off_100184750;
  *((void *)v1 + 3) = off_1001847A8;
  sub_10003AF44((const void **)v1 + 10);
  operator delete(v1);
}

const void **sub_10008EBA4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10008E97C((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_10008EBB4()
{
  return @"Unknown";
}

LABEL_59:
    if (-[BackendXPC tryCreatingCryptoHeader](v10, "tryCreatingCryptoHeader")) {
      unint64_t v11 = -[DiskImageParamsLocked_XPC initWithBackendXPC:]( objc_alloc(&OBJC_CLASS___DiskImageParamsLocked_XPC),  "initWithBackendXPC:",  v10);
    }
    else {
      unint64_t v11 = +[DiskImageParamsXPC newWithUnlockedBackendXPC:error:]( &OBJC_CLASS___DiskImageParamsXPC,  "newWithUnlockedBackendXPC:error:",  v10,  a5);
    }
    goto LABEL_3;
  }

void sub_10008F2FC()
{
}

void sub_10008F30C()
{
  JUMPOUT(0x10008F340LL);
}

void sub_10008F31C()
{
}

void sub_10008F328()
{
}

void sub_10008F354()
{
  JUMPOUT(0x10008F370LL);
}

void sub_10008F368(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 path]);
    objc_claimAutoreleasedReturnValue(+[DIError nilWithDIException:prefix:error:](&OBJC_CLASS___DIError, "nilWithDIException:prefix:error:", v6, v7, v3));

    __cxa_end_catch();
    JUMPOUT(0x10008EC48LL);
  }

  _Unwind_Resume(a1);
}

#error "10008F6A4: call analysis failed (funcsize=134)"
BOOL __cdecl +[DiskImageParamsXPC getAEAKeyFromSAKSWithMetadata:key:error:](id a1, SEL a2, id a3, char *a4, id *a5)
{
  id v7;
  BOOL v8;
  CC_LONG v9;
  char v11[88];
  uint64_t v7 = a3;
  uint64_t v8 = +[DIKeyRetriever decryptKeyWithData:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "decryptKeyWithData:destKey:destKeySize:error:",  v7,  v11,  88LL,  a5);
  if (v8)
  {
    uint64_t v9 = strnlen(v11, 0x58uLL);
    CC_SHA256(v11, v9, (unsigned __int8 *)a4);
  }

  return v8;
}

void sub_10008F86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008FA98( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, AEAAuthData a13, uint64_t a14)
{
  if (a2 == 1)
  {
    id v19 = +[DIError nilWithDIException:description:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:description:error:",  __cxa_begin_catch(a1),  @"Error while creating AEA backend",  v15);
    objc_claimAutoreleasedReturnValue(v19);
    __cxa_end_catch();
    JUMPOUT(0x10008FA7CLL);
  }

  _Unwind_Resume(a1);
}

void sub_10008FD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008FD40(void *a1, uint64_t a2, ...)
{
}

void sub_10008FD90(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10008FF14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::string *a19, void *a20, void *__p, std::string *buf, void *__pa, void *bufa, __int16 a25, uint64_t a26)
{
  __int16 v30 = __pa;
  __pa = 0LL;
  if (v30) {
    operator delete(v30);
  }
  if (a2 == 2)
  {
    id v31 = +[DIError nilWithDIException:description:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:description:error:",  __cxa_begin_catch(a1),  0LL,  v27);
    objc_claimAutoreleasedReturnValue(v31);
    __cxa_end_catch();
  }

  else
  {
    if (a2 != 1)
    {

      _Unwind_Resume(a1);
    }

    __cxa_begin_catch(a1);
    __cxa_end_catch();
    [v26 backend];
    sub_1000F97D0(&bufa, &a19);
    sub_100006224((uint64_t)&a19);
    sub_10009044C((uint64_t)bufa, &a19);
    __int16 v32 = objc_alloc(&OBJC_CLASS___DiskImageParamsUDIF_XPC);
    uint64_t v33 = a19;
    a19 = 0LL;
    buf = v33;
    -[DiskImageParamsUDIF_XPC initWithBackendXPC:header:](v32, "initWithBackendXPC:header:", v26, &buf);
    __int16 v34 = buf;
    buf = 0LL;
    if (v34) {
      operator delete(v34);
    }
    int v35 = a19;
    a19 = 0LL;
    if (v35) {
      operator delete(v35);
    }
    sub_100056C1C(&bufa);
  }

  JUMPOUT(0x10008FED8LL);
}

__n128 sub_10009044C@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x1F4uLL);
  *(void *)uint64_t v4 = 0x4796C6F6BLL;
  int v5 = *(_DWORD *)(a1 + 12);
  *((_DWORD *)v4 + 2) = 512;
  *((_DWORD *)v4 + 3) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v4 + 2) = v6;
  *((void *)v4 + 6) = *(void *)(a1 + 48);
  *((void *)v4 + 7) = *(void *)(a1 + 56);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  *((void *)v4 + 10) = *(void *)(a1 + 80);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v4 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v4 + 16_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a1 + 216);
  __int128 v7 = *(_OWORD *)(a1 + 232);
  __int128 v8 = *(_OWORD *)(a1 + 248);
  __int128 v9 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v4 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v4 + 280) = v9;
  *(_OWORD *)(v4 + 24_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(v4 + 232) = v7;
  __int128 v10 = *(_OWORD *)(a1 + 296);
  __int128 v11 = *(_OWORD *)(a1 + 312);
  __int128 v12 = *(_OWORD *)(a1 + 328);
  *((void *)v4 + 43) = *(void *)(a1 + 344);
  *(_OWORD *)(v4 + 312) = v11;
  *(_OWORD *)(v4 + 32_Block_object_dispose(va, 8) = v12;
  *(_OWORD *)(v4 + 296) = v10;
  *((void *)v4 + 44) = *(void *)(a1 + 352);
  *(_OWORD *)(v4 + 424) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(v4 + 456) = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(v4 + 472) = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(v4 + 360) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(v4 + 376) = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(v4 + 392) = *(_OWORD *)(a1 + 392);
  __n128 result = *(__n128 *)(a1 + 408);
  *(__n128 *)(v4 + 40_Block_object_dispose(va, 8) = result;
  *((_DWORD *)v4 + 122) = *(_DWORD *)(a1 + 488);
  *(void *)(v4 + 492) = *(void *)(a1 + 492);
  *a2 = v4;
  return result;
}

void sub_10009062C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000906EC(_Unwind_Exception *a1, int a2)
{
  __int128 v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Error encrypting new image",  v3);
    __cxa_end_catch();
    JUMPOUT(0x1000906D0LL);
  }

  _Unwind_Resume(a1);
}

void sub_100090808(_Unwind_Exception *a1, int a2)
{
  __int128 v6 = v5;

  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Error encrypting new image",  v3);
    __cxa_end_catch();
    JUMPOUT(0x1000907ECLL);
  }

  _Unwind_Resume(a1);
}

void sub_100090904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090C2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100090C3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint8_t buf, int a27, __int16 a28, uint64_t a29, __int16 a30, uint64_t a31)
{
}

void sub_100090C80()
{
}

#error "100090DC8: call analysis failed (funcsize=133)"
void sub_100090EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090EE8(_Unwind_Exception *a1)
{
}

void sub_100090F00(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x100090F08LL);
  }
  sub_1000052FC(a1);
}

void sub_1000910C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091B9C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint8_t buf,int a51,__int16 a52,__int16 a53,int a54,__int16 a55,__int16 a56,__int16 a57)
{
}

void sub_1000920D8(_Unwind_Exception *a1)
{
}

void sub_1000920FC(_Unwind_Exception *a1)
{
}

void sub_100092108(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100092124(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      sub_100045090();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v10) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_100059990(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    int v18 = v16;
    id v19 = &v16[24 * v12];
    uint64_t v20 = v19;
    int v21 = &v16[24 * v15];
    sub_1000959E0(&v18, a3);
    uint64_t v4 = sub_100095B2C(a1, &v18, v4);
    sub_1000599D4((uint64_t)&v18);
  }

  else if (a2 == v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0LL;
    a3->n128_u64[1] = 0LL;
    *(_DWORD *)(a2 + 16) = a3[1].n128_u32[0];
    a1[1] = a2 + 24;
  }

  else
  {
    sub_100095988((uint64_t)a1, a2, v6, a2 + 24);
    sub_1000198A4(v4, (__int128 *)a3);
    *(_DWORD *)(v4 + 16) = a3[1].n128_u32[0];
  }

  return v4;
}

void sub_10009227C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100092290(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100045090();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_100059990(v4, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v12];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_10005992C(a1, v16);
    uint64_t v8 = a1[1];
    sub_1000599D4((uint64_t)v16);
  }

  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }

  a1[1] = v8;
  return v8 - 24;
}

void sub_1000923B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000925CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000926CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000927D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000928AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100092AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100092CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100092E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "10009306C: call analysis failed (funcsize=169)"
void sub_100093188()
{
  __cxa_end_catch();
  JUMPOUT(0x100092EA8LL);
}

void sub_1000931C8(void *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  JUMPOUT(0x100092EA8LL);
}

void sub_100093240( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100093704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000938F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000939B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093A34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100093A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093E38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 16LL))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_100094198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13)
{
}

void sub_10009449C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_10009455C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009464C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100094794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100094878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100094FE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);

  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100095410( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_1000954EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000955FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100095648(uint64_t a1, const void **a2)
{
  return 1LL;
}

id sub_100095674(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000AD88(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }

  int v3 = SHIBYTE(v11);
  uint64_t v4 = (void **)__p[0];
  NSStringEncoding v5 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding", __p[0], __p[1], v11);
  if (v3 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v6, v5));
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  id v8 = [**(id **)(v2 + 24) getAEAKeyFromSAKSWithMetadata:v7 key:**(void **)(v2 + 32) error:**(void **)(v2 + 40)];

  return v8;
}

void sub_100095740( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_100095768(void ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  else {
    int v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v3, 4LL));
  NSStringEncoding v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v4));

  BOOL v6 = +[DIKeyRetriever KKMSKeyWithURL:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "KKMSKeyWithURL:destKey:destKeySize:error:",  v5,  **v2,  *v2[1],  *v2[2]);
  return v6;
}

void sub_100095804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100095820(void *a1, uint64_t *a2)
{
  int v3 = (void **)*a1;
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  NSStringEncoding v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v4, 1LL));
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v5));

  BOOL v7 = +[DIKeyRetriever WKMSKeyWithURL:authData:destKey:destKeySize:error:]( &OBJC_CLASS___DIKeyRetriever,  "WKMSKeyWithURL:authData:destKey:destKeySize:error:",  v6,  a2[3],  *v3[6],  *v3[7],  *v3[8]);
  return v7;
}

void sub_1000958C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000958E0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_100184838[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_100095938(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  if (v2) {
    operator delete[](v2);
  }
}

void sub_10009594C(uint64_t a1, uint64_t a2)
{
}

void sub_100095960(uint64_t a1, uint64_t a2)
{
}

void sub_100095974(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100095988(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0LL;
      *(void *)(v9 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v9 + 16);
      v8 += 24LL;
      v9 += 24LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  return sub_100095BE0(a2, v7, v6);
}

__n128 sub_1000959E0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v11 = v4 - v6;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556LL * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1LL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v28 = a1[4];
      unint64_t v15 = (char *)sub_100059990(v28, v13);
      BOOL v17 = &v15[24 * v14];
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2] - v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        int v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)int v21 = *(_OWORD *)v18;
          *(void *)unint64_t v18 = 0LL;
          *(void *)(v18 + _Block_object_dispose(va, 8) = 0LL;
          *((_DWORD *)v21 + 4) = *(_DWORD *)(v18 + 16);
          v21 += 24;
          v18 += 24LL;
        }

        while (v21 != v20);
        int64x2_t v22 = *(int64x2_t *)(a1 + 1);
      }

      else
      {
        int64x2_t v22 = vdupq_n_s64(v18);
        uint64_t v20 = &v15[24 * v14];
      }

      uint64_t v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v22;
      uint64_t v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      uint64_t v27 = v23;
      sub_1000599D4((uint64_t)&v25);
      uint64_t v4 = a1[2];
    }

    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -3 * (v8 >> 1);
      sub_100095C5C(v5, v4, v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }

  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  *(_DWORD *)(v4 + 16) = a2[1].n128_u32[0];
  a1[2] += 24LL;
  return result;
}

uint64_t sub_100095B2C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      __int128 v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24LL;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24LL;
      *(void *)uint64_t v7 = 0LL;
      *(void *)(v7 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
    }

    while (v7 != v5);
  }

  a2[1] = v6;
  uint64_t v9 = a1[1];
  uint64_t v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
      *(void *)a3 = 0LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(a3 + 16);
      v10 += 24LL;
      a3 += 24LL;
    }

    while (a3 != v9);
    uint64_t v6 = a2[1];
  }

  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100095BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1000198A4(a3 - 24, (__int128 *)(v6 - 24));
      *(_DWORD *)(a3 - _Block_object_dispose(va, 8) = *(_DWORD *)(v6 - 8);
      a3 -= 24LL;
      v6 -= 24LL;
    }

    while (v6 != a1);
  }

  return a2;
}

uint64_t sub_100095C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    sub_1000198A4(a3, (__int128 *)v4);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 16);
    a3 += 24LL;
    v4 += 24LL;
  }

  while (v4 != v5);
  return v5;
}

uint64_t sub_100095CC4(uint64_t result, int a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = 4 * a4;
    do
    {
      int v5 = *a3++;
      a2 &= ~v5;
      v4 -= 4LL;
    }

    while (v4);
  }

  if (a2)
  {
    uint64_t v6 = result;
    int v7 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100172A40;
    exception[1] = v6;
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = v7;
  }

  return result;
}

BOOL sub_100095D40(uint64_t a1)
{
  unint64_t v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 4)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v6 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    BOOL v3 = *(_DWORD *)v2 == 1936093281;
  }

  else
  {
    BOOL v3 = 0LL;
    if ((char)v6 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }

  return v3;
}

  ;
}

void *sub_100095DCC(void *a1)
{
  *a1 = off_100184868;
  sub_100006224((uint64_t)(a1 + 2));
  return a1;
}

void sub_100095DFC(void *a1)
{
  *a1 = off_100184868;
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_100095E2C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_100095E34(uint64_t a1)
{
}

uint64_t sub_100095E68()
{
  return 0LL;
}

uint64_t *sub_100095E70@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)operator new(0x98uLL);
  uint64_t result = sub_10008E42C(v4, a1);
  *a2 = (char *)v4 + *(void *)(*v4 - 104);
  return result;
}

void sub_100095EBC(_Unwind_Exception *a1)
{
}

uint64_t sub_100095ED0()
{
  return 4294967251LL;
}

__n128 sub_100095ED8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 40);
  __int128 v3 = *(_OWORD *)(a1 + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void *sub_100095EE8(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_100184968;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_100095F34(_Unwind_Exception *a1)
{
}

uint64_t sub_100095F48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v9);
  int v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_100095FDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100095FF0()
{
  return -102LL;
}

uint64_t sub_100095FF8()
{
  return 4294967251LL;
}

void *sub_100096000(void *a1)
{
  *a1 = off_100184968;
  sub_100006224((uint64_t)(a1 + 2));
  return a1;
}

void sub_100096030(void *a1)
{
  *a1 = off_100184968;
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

void *sub_100096060@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
  unint64_t v9 = a2[4];
  uint64_t v10 = *a2;
  __n128 result = sub_100120DCC();
  uint64_t v12 = result[1];
  *(void *)a3 = v10;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v15 = v6 / v7 * v7;
  unint64_t v16 = v8 - v15;
  unint64_t v17 = v5 + v6 + v7 - 1 - v15 - (v5 + v6 + v7 - 1) % v7;
  if (v9 < v17) {
    unint64_t v17 = v9;
  }
  if (v16 >= v17) {
    unint64_t v16 = v17;
  }
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = 0;
  return result;
}

void *sub_100096124(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &off_1001849C0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10009616C(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_100096184(_Unwind_Exception *a1)
{
}

void sub_10009619C(std::__shared_weak_count *a1)
{
}

void sub_1000961B0(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t sub_1000961C0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *sub_100096200(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &off_100184A20;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100096248(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_100096260(_Unwind_Exception *a1)
{
}

void sub_100096278(std::__shared_weak_count *a1)
{
}

void sub_10009628C(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t sub_10009629C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *sub_1000962DC@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x1008uLL);
  __n128 result = sub_10009634C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_100096338(_Unwind_Exception *a1)
{
}

void *sub_10009634C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100184A80;
  uint64_t v8 = sub_1000D36E0(*a2, a3);
  sub_1000D2F8C(a1 + 3, a2, a3, v8, v9, a4);
  return a1;
}

void sub_1000963B8(_Unwind_Exception *a1)
{
}

void sub_1000963CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100184A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000963DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100184A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000963FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

void *sub_10009640C@<X0>( unsigned __int16 *a1@<X1>, unsigned int *a2@<X2>, unint64_t *a3@<X3>, unint64_t *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, _OWORD *a7@<X7>, void *a8@<X8>, __int128 *a9)
{
  unint64_t v17 = operator new(0x1008uLL);
  __n128 result = sub_1000964BC(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1000964A8(_Unwind_Exception *a1)
{
}

void *sub_1000964BC( void *a1, unsigned __int16 *a2, unsigned int *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100184A80;
  unsigned int v10 = *a2;
  unsigned int v11 = *a3;
  unint64_t v12 = *a4;
  unint64_t v13 = *a5;
  __int128 v15 = *a9;
  char v16 = 1;
  sub_1000D36D4((uint64_t)(a1 + 3), v10, v11, v12, v13, a6, a7, a8, &v15);
  return a1;
}

void sub_100096550(_Unwind_Exception *a1)
{
}

void sub_100096564(char **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x470uLL);
  sub_1000965C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001C350((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000965B0(_Unwind_Exception *a1)
{
}

void *sub_1000965C4(void *a1, char **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100184AD0;
  sub_10009664C(a1 + 3, a2);
  return a1;
}

void sub_1000965F8(_Unwind_Exception *a1)
{
}

void sub_10009660C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100184AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10009661C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100184AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10009663C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_10009664C(void *a1, char **a2)
{
  uint64_t v3 = sub_100101F94((uint64_t)__p, 514LL);
  sub_100052AA8((uint64_t)a1, v3, 1LL, 0);
  *a1 = off_100191F80;
  a1[3] = off_100192060;
  a1[4] = off_100192098;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000966CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000966E8(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xA8uLL);
  sub_100096750(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10009673C(_Unwind_Exception *a1)
{
}

void *sub_100096750(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100175188;
  sub_10011FAE4(a1 + 3, a2, *a3);
  return a1;
}

void sub_100096788(_Unwind_Exception *a1)
{
}

BOOL sub_10009679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v5 = a4 - a3 + 2;
  uint64_t v6 = ~(-1LL << v5) << a3;
  if (a4 - a3 == 62) {
    uint64_t v6 = -1LL;
  }
  int v7 = *a5;
  int v8 = a5[1];
  if (v7 != v8)
  {
    if ((unint64_t)(a4 - a3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v12 = 0LL;
      unint64_t v13 = v5 >> 1;
      uint64_t v14 = v7 | (2 * v8);
      do
      {
        uint64_t v12 = v14 | (4 * v12);
        --v13;
      }

      while (v13);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v15 = v12 << a3;
    char v16 = (unint64_t *)(*(void *)(a1 + 8) + 8 * a2);
    unint64_t v17 = *v16;
    unint64_t v18 = *v16 & ~v6 | v15;
    unint64_t v19 = __ldaxr(v16);
    if (v19 == v17)
    {
      if (!__stlxr(v18, v16))
      {
LABEL_21:
        BOOL v11 = v17 == v18;
        return !v11;
      }
    }

    else
    {
      __clrex();
    }

    uint64_t v20 = ~v6;
    do
    {
      while (1)
      {
        unint64_t v17 = v19;
        int v21 = (unint64_t *)(*(void *)(a1 + 8) + 8 * a2);
        unint64_t v18 = v19 & v20 | v15;
        unint64_t v19 = __ldaxr(v21);
        if (v19 == v17) {
          break;
        }
        __clrex();
      }
    }

    while (__stlxr(v18, v21));
    goto LABEL_21;
  }

  uint64_t v9 = (unint64_t *)(*(void *)(a1 + 8) + 8 * a2);
  if (*a5)
  {
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 | v6, v9));
    BOOL v11 = (v6 & ~v10) == 0;
  }

  else
  {
    do
      unint64_t v22 = __ldaxr(v9);
    while (__stlxr(v22 & ~v6, v9));
    BOOL v11 = (v22 & v6) == 0;
  }

  return !v11;
}

unint64_t sub_1000968C8(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2LL * a4[1]) | (4 * v5);
      --v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if (a3 - a2 == 62) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = ~(-1LL << v4) << a2;
  }
  unint64_t v9 = ((v5 << a2) ^ v7 & a1 | (((v5 << a2) ^ v7 & a1) >> 1)) & 0x5555555555555555LL;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

unint64_t sub_100096940(unint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3 - a2 + 2;
  if ((unint64_t)(a3 - a2) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = v4 >> 1;
    do
    {
      uint64_t v5 = *a4 | (2LL * a4[1]) | (4 * v5);
      --v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if (a3 - a2 == 62) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = ~(-1LL << v4) << a2;
  }
  unint64_t v9 = v7 & ~((v5 << a2) ^ a1) & ((v7 & ~((v5 << a2) ^ a1)) >> 1) & 0x5555555555555555LL;
  BOOL v8 = v9 == 0;
  unint64_t v10 = __clz(__rbit64(v9));
  if (v8) {
    return a3 + 2;
  }
  else {
    return v10;
  }
}

uint64_t sub_1000969B8(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 > a3 || *(void *)(a1 + 16) <= a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v28);
    sub_10000552C(v28, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v28, a2);
    sub_10000552C(v28, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v28, a3);
    sub_100006AA8((uint64_t)exception, (uint64_t)v28, 0x16u);
  }

  unint64_t v4 = a2 >> 6;
  uint64_t v5 = a2 & 0x3F;
  uint64_t v6 = a3 & 0x3F;
  if (a2 >> 6 == a3 >> 6)
  {
    uint64_t v7 = v6 - v5 + 1;
    uint64_t v8 = ~(-1LL << v7) << v5;
    if (v7 == 64) {
      uint64_t v9 = -1LL;
    }
    else {
      uint64_t v9 = v8;
    }
    unint64_t v10 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v4);
    if ((_DWORD)a4)
    {
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 | v9, v10));
      uint64_t v5 = v9;
    }

    else
    {
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 & ~v9, v10));
      uint64_t v5 = 0LL;
    }

    LOBYTE(v5) = (v11 & v9) != v5;
  }

  else
  {
    unint64_t v12 = a3 >> 6;
    if ((a2 & 0x3F) != 0)
    {
      uint64_t v5 = ~(-1LL << -(char)v5) << v5;
      unint64_t v13 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v4);
      if ((_DWORD)a4)
      {
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 | v5, v13));
        uint64_t v15 = v5;
      }

      else
      {
        do
          unint64_t v14 = __ldaxr(v13);
        while (__stlxr(v14 & ~v5, v13));
        uint64_t v15 = 0LL;
      }

      LOBYTE(v5) = (v14 & v5) != v15;
      ++v4;
    }

    if (v6 != 63)
    {
      uint64_t v16 = -2LL << v6;
      uint64_t v17 = ~(-2LL << v6);
      unint64_t v18 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v12);
      if ((a4 & 1) != 0)
      {
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 | v17, v18));
        uint64_t v20 = v17;
      }

      else
      {
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 & v16, v18));
        uint64_t v20 = 0LL;
      }

      if ((v19 & v17) != v20) {
        LOBYTE(v5) = 1;
      }
      --v12;
    }

    if (v4 <= v12)
    {
      unint64_t v21 = a4 << 63 >> 63;
      do
      {
        unint64_t v22 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v4);
        do
          unint64_t v23 = __ldxr(v22);
        while (__stxr(v21, v22));
        LOBYTE(v5) = (v23 != v21) | v5;
        ++v4;
      }

      while (v4 <= v12);
    }
  }

  return v5 & 1;
}

void sub_100096BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100096C30(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v20);
    sub_10000552C(v20, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v20, a2);
    sub_10000552C(v20, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v20, a3);
    sub_100006AA8((uint64_t)exception, (uint64_t)v20, 0x16u);
  }

  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = v8 & 0x3F;
  if (a2 >> 6 == v8 >> 6) {
    return sub_10009679C(a1, a2 >> 6, v10, v8 & 0x3F, a4);
  }
  unint64_t v13 = v8 >> 6;
  uint64_t v14 = (a2 & 0x3F) != 0 && sub_10009679C(a1, v9++, v10, 62LL, a4);
  if (v11 <= 0x3D) {
    uint64_t v14 = sub_10009679C(a1, v13--, 0LL, v11, a4) | v14;
  }
  unint64_t v15 = 0LL;
  uint64_t v16 = 32LL;
  do
  {
    unint64_t v15 = *a4 | (2LL * a4[1]) | (4 * v15);
    --v16;
  }

  while (v16);
  while (v9 <= v13)
  {
    uint64_t v17 = (unint64_t *)(*(void *)(a1 + 8) + 8 * v9);
    if ((v14 & 1) != 0)
    {
      *uint64_t v17 = v15;
      uint64_t v14 = 1LL;
    }

    else
    {
      do
        unint64_t v18 = __ldxr(v17);
      while (__stxr(v15, v17));
      uint64_t v14 = v18 != v15;
    }

    ++v9;
  }

  return v14;
}

void sub_100096E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_100096E40(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v26);
    sub_10000552C(v26, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v26, a2);
    sub_10000552C(v26, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v26, v4);
    sub_100006AA8((uint64_t)exception, (uint64_t)v26, 0x16u);
  }

  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000968C8(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
  }

  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_1000968C8(v14, v10, 62LL, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
    }
    ++v9;
  }

  uint64_t v15 = 0LL;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v18 = 32LL;
  do
  {
    uint64_t v15 = *a4 | (2LL * a4[1]) | (4 * v15);
    --v18;
  }

  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v22 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v23 = sub_1000968C8(v22, 0LL, (v4 - 2) & 0x3F, a4);
      if (v23 != v11 + 2) {
        return v23 + (v8 & 0xFFFFFFFFFFFFFFC0LL);
      }
    }
  }

  else
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = v9 << 6;
    while (((*(void *)(v20 + 8 * v9) ^ v15 | ((*(void *)(v20 + 8 * v9) ^ (unint64_t)v15) >> 1)) & 0x5555555555555555LL) == 0)
    {
      ++v9;
      v21 += 64LL;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }

  return v4;
}

void sub_10009703C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_100097070(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = a3;
  if (a3 <= a2 || *(void *)(a1 + 16) < a3 || (((_DWORD)a3 - (_DWORD)a2) & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v27);
    sub_10000552C(v27, (uint64_t)"invalid bits range ", 19LL);
    std::ostream::operator<<(v27, a2);
    sub_10000552C(v27, (uint64_t)"-", 1LL);
    std::ostream::operator<<(v27, v4);
    sub_100006AA8((uint64_t)exception, (uint64_t)v27, 0x16u);
  }

  unint64_t v8 = a3 - 2;
  unint64_t v9 = a2 >> 6;
  uint64_t v10 = a2 & 0x3F;
  unint64_t v11 = (a3 - 2) & 0x3F;
  if (a2 >> 6 == (a3 - 2) >> 6)
  {
    unint64_t v12 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_100096940(v12, v10, (a3 - 2) & 0x3F, a4);
    return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
  }

  if (v10)
  {
    unint64_t v14 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v9));
    unint64_t v13 = sub_100096940(v14, v10, 62LL, a4);
    if (v13 != 64) {
      return v13 + (a2 & 0xFFFFFFFFFFFFFFC0LL);
    }
    ++v9;
  }

  uint64_t v15 = 0LL;
  unint64_t v16 = v8 >> 6;
  if (v11 >= 0x3E) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v18 = 32LL;
  do
  {
    uint64_t v15 = *a4 | (2LL * a4[1]) | (4 * v15);
    --v18;
  }

  while (v18);
  unint64_t v19 = v16 + v17;
  if (v9 > v19)
  {
LABEL_18:
    if (v11 <= 0x3D)
    {
      unint64_t v23 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * v16));
      unint64_t v24 = sub_100096940(v23, 0LL, (v4 - 2) & 0x3F, a4);
      if (v24 != v11 + 2) {
        return v24 + (v8 & 0xFFFFFFFFFFFFFFC0LL);
      }
    }
  }

  else
  {
    uint64_t v20 = v9 << 6;
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v9);
      unint64_t v22 = ((v15 ^ (unint64_t)~v21) >> 1) & ~(v15 ^ v21) & 0x5555555555555555LL;
      if (v22) {
        return __clz(__rbit64(v22)) + v20;
      }
      ++v9;
      v20 += 64LL;
      if (v9 > v19) {
        goto LABEL_18;
      }
    }
  }

  return v4;
}

void sub_100097274(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000972A8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63LL;
  if (v1 < 0x40) {
    return 1LL;
  }
  unint64_t v3 = v1 >> 6;
  unint64_t v4 = *(void **)(a1 + 8);
  if (v3 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*v4) {
    return 0LL;
  }
  uint64_t v6 = 1LL;
  do
  {
    unint64_t v7 = v6;
    if (v5 == v6) {
      break;
    }
  }

  while (!v4[v6++]);
  return v7 >= v3;
}

uint64_t sub_100097308(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16) + 63LL;
  if (v1 < 0x40) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v2 = 0LL;
  uint64_t v5 = (v1 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  do
  {
    unint64_t v6 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + v4));
    unint64_t v8 = v6;
    BYTE6(v9) = 1;
    v2 += sub_100097628((int8x8_t *)&v8, 0, (uint64_t)&v9, 0, (_BYTE *)&v9 + 6);
    v4 += 8LL;
  }

  while (v5 != v4);
  return v2;
}

uint64_t sub_1000973B8(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v7);
    sub_10000552C(v7, (uint64_t)"Bit ", 4LL);
    std::ostream::operator<<(v7, a2);
    sub_10000552C(v7, (uint64_t)" requested while there are only ", 32LL);
    std::ostream::operator<<(v7, *(void *)(a1 + 16));
    sub_10000552C(v7, (uint64_t)" bits in the bitmap", 19LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)v7, 0x16u);
  }

  unint64_t v2 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8 * (a2 >> 6)));
  return (v2 >> a2) & 1;
}

void sub_1000974A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000974D8(uint64_t a1, unint64_t a2, int a3)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v10);
    sub_10000552C(v10, (uint64_t)"Bit ", 4LL);
    std::ostream::operator<<(v10, a2);
    sub_10000552C(v10, (uint64_t)" requested while there are only ", 32LL);
    std::ostream::operator<<(v10, *(void *)(a1 + 16));
    sub_10000552C(v10, (uint64_t)" bits in the bitmap", 19LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)v10, 0x16u);
  }

  uint64_t v3 = 1LL << a2;
  uint64_t v4 = (unint64_t *)(*(void *)(a1 + 8) + 8 * (a2 >> 6));
  if (a3)
  {
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 | v3, v4));
  }

  else
  {
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 & ~v3, v4));
  }

  return (v5 & v3) == 0;
}

void sub_1000975F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100097628(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_100097648(a1, a2, v5);
  }
  else {
    return sub_1000976EC((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_100097648(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1LL << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }

  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64LL;
    }

    while (a3 > 0x3F);
  }

  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }

  return v3;
}

uint64_t sub_1000976EC(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1LL << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }

  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64LL;
    }

    while (a3 > 0x3F);
  }

  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }

  return v3;
}

uint64_t sub_100097798(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  sub_1001018F4(a1 + 16, "rings_queue");
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void sub_1000977DC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    io_rings_return_status(v3, a2, 0xFFFFFFA7, 0);
  }
  else {
    sub_10009895C(v3, a2);
  }
}

uint64_t sub_1000977FC(uint64_t a1)
{
  uint64_t v25 = 0LL;
  int64x2_t v26 = 0LL;
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    goto LABEL_37;
  }
  LODWORD(v3) = 0;
  int v4 = 0;
  uint64_t v5 = (dispatch_queue_t *)(a1 + 16);
  do
  {
    uint64_t v6 = sub_1000985E8(*(void *)(a1 + 8));
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    __dmb(9u);
    if ((*(_WORD *)(v6 + 2) & 1) != 0)
    {
      int v8 = 1;
      goto LABEL_8;
    }

    if (*(_BYTE *)(a1 + 24))
    {
      int v8 = 2;
LABEL_8:
      if (*(_BYTE *)(a1 + 24)) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      sub_100098D40(*(void *)(a1 + 8), v6, v9);
      char v10 = *(_BYTE *)(v7 + 2);
      goto LABEL_12;
    }

    char v10 = *(_WORD *)(v6 + 2);
LABEL_12:
    *(_BYTE *)(a1 + 24) = v10 & 1;
    sub_100098A34(*(void *)(a1 + 8), *(_DWORD *)(v7 + 8), &v23);
    if (v23)
    {
      if ((_DWORD)v3)
      {
        if (*(_DWORD *)(v7 + 8) != v4)
        {
          (*(void (**)(void))(v25 + 8))();
          uint64_t v3 = v26;
          uint64_t v25 = 0LL;
          int64x2_t v26 = 0LL;
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              unint64_t v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
              std::__shared_weak_count::__release_weak(v3);
            }

            LODWORD(v3) = 0;
          }
        }
      }

      if ((*(unsigned int (**)(void))(v23 + 16))())
      {
        (*(void (**)(uint64_t, uint64_t))v23)(v23, v7);
        if (!v25)
        {
          int v4 = *(_DWORD *)(v7 + 8);
          sub_10001C610(&v25, &v23);
          LODWORD(v3) = 1;
        }
      }

      else if (sub_100098740((unsigned __int8 *)v7))
      {
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 0x40000000LL;
        v22[2] = sub_100097AC0;
        v22[3] = &unk_100184B30;
        v22[4] = a1;
        v22[5] = v7;
        sub_100101988(v5, v22);
      }

      else
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 0x40000000LL;
        v21[2] = sub_100097B60;
        v21[3] = &unk_100184B50;
        v21[4] = a1;
        v21[5] = v7;
        sub_100101908(v5, v21);
      }
    }

    else
    {
      io_rings_return_status(*(void *)(a1 + 8), v7, 0xFFFFFFFA, 0);
    }

    unint64_t v13 = v24;
    if (v24)
    {
      unint64_t v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    unsigned int v16 = atomic_load((unsigned int *)a1);
  }

  while (v16 == 2);
  if ((_DWORD)v3) {
    (*(void (**)(void))(v25 + 8))();
  }
LABEL_37:
  uint64_t v17 = v26;
  if (v26)
  {
    uint64_t v18 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return 0LL;
}

void sub_100097A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100097AC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)v1);
  if (v2 == 1)
  {
    io_rings_return_status(*(void *)(v1 + 8), *(void *)(a1 + 40), 0xFFFFFFA7, 0);
  }

  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 0x40000000LL;
    v4[2] = sub_100097B4C;
    v4[3] = &unk_100184B10;
    uint64_t v3 = *(void *)(a1 + 40);
    v4[4] = v1;
    _DWORD v4[5] = v3;
    sub_100101908((dispatch_queue_t *)(v1 + 16), v4);
  }

void sub_100097B4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_1000977DC(v1, *(void *)(a1 + 40));
}

void sub_100097B60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __dmb(9u);
  sub_1000977DC(v1, *(void *)(a1 + 40));
}

uint64_t sub_100097B74(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 2) {
    return 4294967260LL;
  }
  atomic_store(0, (unsigned int *)a1);
  sub_100101998((dispatch_object_t *)(a1 + 16));
  return 0LL;
}

void sub_100097BA8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)a1);
  if (v1 != 1)
  {
    do
      unsigned int v3 = __ldaxr((unsigned int *)a1);
    while (__stlxr(1u, (unsigned int *)a1));
    if (v3 == 2) {
      sub_100101998((dispatch_object_t *)(a1 + 16));
    }
    sub_100098AF4(*(void *)(a1 + 8));
    sub_1001019A0((dispatch_object_t *)(a1 + 16));
    sub_1000977FC(a1);
    sub_100101990((dispatch_queue_t *)(a1 + 16), &stru_100184B90);
    sub_100101990((dispatch_queue_t *)(a1 + 16), &stru_100184BD0);
  }

uint64_t sub_100097C3C(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_100097C84(unsigned int a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = 4294967274LL;
  if (!a1 || !a2 || !a3 || !a4) {
    return v4;
  }
  if (*(_DWORD *)a2 > 1u) {
    return 4294967251LL;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if (v8 >= 0x10)
  {
    char v10 = *(_DWORD **)(a2 + 8);
    if (v10)
    {
      if (*v10) {
        return 4294967251LL;
      }
    }

    if (v8 >= 0x31
      && (*(_BYTE *)(a2 + 48) || memcmp((const void *)(a2 + 48), (const void *)(a2 + 49), v8 - 49)))
    {
      return 4294967251LL;
    }
  }

  unint64_t v11 = operator new(0x2D0uLL);
  bzero(v11, 0x2D0uLL);
  __int16 v36 = v11;
  *((_DWORD *)v11 + 17_Block_object_dispose(va, 8) = 2;
  unint64_t v12 = malloc(0x28uLL);
  if (!v12)
  {
    uint64_t v4 = 4294967284LL;
    goto LABEL_60;
  }

  unint64_t v13 = v12;
  *((void *)v12 + 4) = j__free;
  if (v8 >= 0x18)
  {
    v11[52] = *(void *)(a2 + 16);
    if (v8 >= 0x20)
    {
      v11[53] = *(void *)(a2 + 24);
      if (v8 >= 0x28)
      {
        v11[54] = *(void *)(a2 + 32);
      }
    }
  }

  v11[88] = a4;
  if (a1 >= 0x2000) {
    unsigned int v14 = 0x2000;
  }
  else {
    unsigned int v14 = a1;
  }
  if (a1 + 1 < 0x2000) {
    unsigned int v15 = a1 + 1;
  }
  else {
    unsigned int v15 = 0x2000;
  }
  if ((v15 & (v15 - 1)) != 0)
  {
    char v16 = 0;
    unsigned int v17 = 2 * v15;
    do
    {
      v17 >>= 1;
      ++v16;
    }

    while (v17 != 1);
    unsigned int v15 = 1 << v16;
  }

  uint64_t v18 = mmap(0LL, 88 * v14 + 8 + 4LL * v15, 3, 4097, 0, 0LL);
  unsigned int v19 = v15;
  else {
    uint64_t v20 = v18;
  }
  void *v11 = v20;
  uint64_t v21 = mmap(0LL, (16LL * v15) | 8, 3, 4097, 0, 0LL);
  else {
    unint64_t v22 = v21;
  }
  v11[1] = v22;
  uint64_t v4 = 4294967284LL;
  if (*v11 && v22)
  {
    sub_100098DE8((uint64_t)(v11 + 2));
    uint64_t v23 = *v11;
    uint64_t v24 = v11[1];
    v39 = &off_100184C28;
    int8x16x4_t v40 = v11;
    v41 = &v39;
    sub_100098F64((uint64_t)(v11 + 2), v23, v24, v14, v19, v19, (uint64_t)&v39);
    uint64_t v25 = v41;
    if (v41 == &v39)
    {
      uint64_t v26 = 4LL;
      uint64_t v25 = &v39;
    }

    else
    {
      if (!v41) {
        goto LABEL_45;
      }
      uint64_t v26 = 5LL;
    }

    (*v25)[v26]();
LABEL_45:
    *((_BYTE *)v11 + 264) = 1;
    sub_100099190((uint64_t)(v11 + 34));
    uint64_t v27 = *v11;
    uint64_t v28 = v11[1];
    v39 = &off_100184CB8;
    int8x16x4_t v40 = v11;
    v41 = &v39;
    v37[0] = &off_100184D38;
    v37[1] = v11;
    unint64_t v38 = v37;
    sub_100099390((uint64_t)(v11 + 34), v27, v28, v14, v19, v19, (uint64_t)&v39, (uint64_t)v37);
    int v29 = v38;
    if (v38 == v37)
    {
      uint64_t v30 = 4LL;
      int v29 = v37;
    }

    else
    {
      if (!v38) {
        goto LABEL_50;
      }
      uint64_t v30 = 5LL;
    }

    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_50:
    id v31 = v41;
    if (v41 == &v39)
    {
      uint64_t v32 = 4LL;
      id v31 = &v39;
    }

    else
    {
      if (!v41) {
        goto LABEL_55;
      }
      uint64_t v32 = 5LL;
    }

    (*v31)[v32]();
LABEL_55:
    *((_BYTE *)v11 + 40_Block_object_dispose(va, 8) = 1;
    if (*((_BYTE *)v11 + 264) && *((_BYTE *)v11 + 408))
    {
      uint64_t v4 = 0LL;
      uint64_t v33 = v36;
      *((_DWORD *)v36 + 17_Block_object_dispose(va, 8) = 0;
      _DWORD *v13 = *(_DWORD *)a2 != 0;
      v13[1] = 40;
      v13[2] = *((_DWORD *)v33 + 34);
      v13[3] = *((_DWORD *)v33 + 78) - 1;
      *((void *)v13 + 3) = v33;
      *a3 = v13;
      return v4;
    }

    uint64_t v4 = 4294967282LL;
  }

  free(v13);
  unint64_t v11 = v36;
LABEL_60:
  v11[88] = 0LL;
  sub_100098124((uint64_t)v11);
  __int16 v34 = v36;
  __int16 v36 = 0LL;
  if (v34) {
    sub_10009954C((uint64_t)&v36, v34);
  }
  return v4;
}

void sub_100098058( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v20 = a13;
  if (a13 == v17)
  {
    uint64_t v21 = 4LL;
    uint64_t v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  unint64_t v22 = a17;
  if (a17 == &a14)
  {
    uint64_t v23 = 4LL;
    unint64_t v22 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*(void *)v22 + 8 * v23))();
LABEL_11:
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100097F9CLL);
  }

  uint64_t v24 = a9;
  a9 = 0LL;
  if (v24) {
    sub_10009954C((uint64_t)&a9, v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t io_rings_get_max_version(uint64_t a1, int a2)
{
  if (a2) {
    unsigned int v2 = -22;
  }
  else {
    unsigned int v2 = 1;
  }
  if (a2 <= 0 && a1 == 0) {
    return v2;
  }
  else {
    return 4294967251LL;
  }
}

void sub_100098124(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 264) && *(_BYTE *)(a1 + 408))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 136);
    uint64_t v3 = *(unsigned int *)(a1 + 312);
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    sub_100098DE8(a1 + 16);
    sub_100099190(a1 + 272);
    if (*(void *)a1)
    {
      munmap(*(void **)a1, 4 * v4 + 88LL * v2 + 8);
      *(void *)a1 = 0LL;
    }

    uint64_t v5 = *(void **)(a1 + 8);
    if (v5)
    {
      munmap(v5, (16 * v3) | 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v6 = *(void *)(a1 + 704);
    *(void *)(a1 + 704) = 0LL;
    if (v6) {
      (*(void (**)(void))(v6 + 32))();
    }
    for (uint64_t i = 688LL; i != 432; i -= 16LL)
      sub_100006224(a1 + i);
    sub_100099448(a1 + 272);
    sub_1000994D0(a1 + 16);
    operator delete((void *)a1);
  }

uint64_t io_rings_setup(unsigned int a1, uint64_t a2, void *a3)
{
  uint64_t v6 = operator new(0x38uLL);
  v6[6] = 0LL;
  uint64_t v7 = (dispatch_object_s ***)(v6 + 6);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)off_100184BF0;
  *((_OWORD *)v6 + 1) = *(_OWORD *)off_100184C00;
  v6[4] = sub_1000995F0;
  v6[5] = 0LL;
  uint64_t v8 = sub_100097C84(a1, a2, a3, (uint64_t)v6);
  if ((_DWORD)v8)
  {
    sub_100099624(v7, 0LL);
    operator delete(v6);
  }

  else
  {
    uint64_t v9 = *(void *)(*a3 + 24LL);
    v6[5] = v9;
    char v10 = (dispatch_object_s **)operator new(0x20uLL);
    sub_100097798((uint64_t)v10, v9);
    sub_100099624(v7, v10);
  }

  return v8;
}

void sub_1000982D8(_Unwind_Exception *a1)
{
}

uint64_t io_rings_enter(uint64_t a1, int a2, int a3)
{
  if (a3) {
    return 4294967194LL;
  }
  if (*(_DWORD *)(a1 + 712) == 2) {
    return 4294967207LL;
  }
  return sub_100099660(a1 + 16, a2, 1);
}

double io_rings_sqe_allocate(uint64_t a1)
{
  uint64_t v1 = sub_100098354(a1 + 16);
  if (v1)
  {
    *(_DWORD *)(v1 + 12) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_DWORD *)(v1 + 1) = 0;
    *(_DWORD *)(v1 + 4) = 0;
  }

  return result;
}

uint64_t sub_100098354(uint64_t a1)
{
  uint64_t v2 = sub_10009989C((void *)(a1 + 104));
  if (v2 < 0) {
    return 0LL;
  }
  uint64_t v3 = (unsigned int *)(a1 + 48);
  do
    unsigned int v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  uint64_t v5 = (unsigned int *)(a1 + 8);
  do
    unsigned int v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_DWORD *)(*(void *)(a1 + 24) + 4LL * (*(_DWORD *)(a1 + 44) & v6)) = v2;
  return *(void *)(a1 + 96) + 88 * v2;
}

uint64_t io_rings_get_cqe(uint64_t a1)
{
  return sub_1000983D0(a1 + 272);
}

uint64_t sub_1000983D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    unsigned int v2 = atomic_load(*(unsigned int **)a1);
    *(_DWORD *)(a1 + 92) = v2;
    __dmb(9u);
    *(_BYTE *)(a1 + 96) = 0;
  }

  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 16));
  sub_100099920(a1, (uint64_t)&v5);
  if (!v7) {
    return 0LL;
  }
  if (v3 == *(_DWORD *)(a1 + 92)) {
    *(_BYTE *)(a1 + 96) = 1;
  }
  v6 |= 1u;
  return v5;
}

uint64_t io_rings_cq_get_overruns(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 372));
}

uint64_t io_rings_cq_clear_overruns(uint64_t result)
{
  return result;
}

uint64_t io_rings_suspend(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712)) {
    return 4294967274LL;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 16LL);
  if (!v3 || (uint64_t result = v3(), !(_DWORD)result))
  {
    sub_100098A50(a1 + 448);
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 712) = 1;
  }

  return result;
}

uint64_t io_rings_cancel(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 712) != 1) {
    return -16LL;
  }
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 704) + 8LL);
  if (v2 && (int v3 = v2()) != 0)
  {
    if (v3 < 0) {
      return v3;
    }
    else {
      return -v3;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 712) = 2;
    unint64_t v7 = sub_100099A4C(a1 + 16);
    if ((v7 & 0xFF00000000LL) != 0)
    {
      uint64_t v5 = 0LL;
      do
      {
        uint64_t v8 = *(void *)(a1 + 112);
        if (!v8) {
          break;
        }
        uint64_t v9 = v8 + 88LL * v7;
        sub_1000986C8(a1 + 272, *(void *)(v9 + 16), 0x1FFFFFFA7LL, 0);
        unint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((v9 - *(void *)(a1 + 112)) >> 3);
        uint64_t v11 = 1LL << v10;
        unint64_t v12 = (unint64_t *)(*(void *)(a1 + 128) + 8 * (v10 >> 6));
        do
          unint64_t v13 = __ldaxr(v12);
        while (__stlxr(v13 | v11, v12));
        ++v5;
        unint64_t v7 = sub_100099A4C(a1 + 16);
      }

      while ((v7 & 0xFF00000000LL) != 0);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t sub_1000985E8(uint64_t a1)
{
  unint64_t v2 = sub_100099A4C(a1 + 16);
  if ((v2 & 0xFF00000000LL) != 0) {
    return *(void *)(a1 + 112) + 88LL * v2;
  }
  else {
    return 0LL;
  }
}

void io_rings_unsubscribe_dest_object(uint64_t a1, unsigned int a2)
{
}

void sub_100098634(uint64_t a1, unsigned int a2)
{
  uint64_t v5 = 0LL;
  int v6 = 0LL;
  sub_100099CE4((uint64_t *)(a1 + 16LL * a2), &v5);
  unint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_10009869C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void io_rings_release(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 712) == 2) {
      sub_100098124(a1);
    }
  }

uint64_t sub_1000986C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = sub_100099BC0(a1, a2, a3);
  if (!(_DWORD)result) {
    return sub_100099660(a1, 1, a4);
  }
  if ((_DWORD)result == -28)
  {
    unint64_t v7 = (unsigned int *)(a1 + 100);
    do
      unsigned int v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (!v8) {
      sub_100099CA4(a1 + 104, 0, 4);
    }
    return 4294967268LL;
  }

  return result;
}

BOOL sub_100098740(unsigned __int8 *a1)
{
  return *a1 == 5;
}

uint64_t sub_100098750(uint64_t a1, uint64_t a2)
{
  return sub_100098758(a1 + 448, a2);
}

uint64_t sub_100098758(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 1LL;
  while (1)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    BOOL v6 = sub_100099D3C((void *)(a1 + 16 * v3), &v19, &v17);
    unint64_t v7 = v18;
    if (v18)
    {
      unsigned int v8 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    unint64_t v10 = v20;
    if (v20)
    {
      uint64_t v11 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    if (v6) {
      break;
    }
    if (++v3 == 16)
    {
      uint64_t v3 = 4294967268LL;
      break;
    }
  }

  unint64_t v13 = v22;
  if (v22)
  {
    unsigned int v14 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return v3;
}

void sub_100098888( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t io_rings_return_status(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v8 = sub_100098C74(a1 + 144, a2);
  __int16 v9 = *(_WORD *)(a2 + 2);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3LL * ((a2 - *(void *)(a1 + 112)) >> 3);
  uint64_t v12 = 1LL << v11;
  unint64_t v13 = (unint64_t *)(*(void *)(a1 + 128) + 8 * (v11 >> 6));
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 | v12, v13));
  if ((v9 & 4) != 0) {
    int v15 = 0;
  }
  else {
    int v15 = v8;
  }
  return sub_1000986C8(a1 + 272, v10, a3 | ((unint64_t)(a4 | 1u) << 32), v15);
}

void sub_10009895C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4 >= 5)
  {
    uint64_t v8 = 0LL;
    __int16 v9 = 0LL;
LABEL_6:
    io_rings_return_status(a1, a2, 0xFFFFFFFA, 0);
    goto LABEL_7;
  }

  sub_100099F14((void *)(a1 + 16 * v4 + 448), &v8);
  if (!v8) {
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_100098A1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100098A34(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 5)
  {
    sub_100099F14((void *)(a1 + 16LL * a2 + 448), a3);
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }

void sub_100098A50(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    sub_100099F14((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 24))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_100098AE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100098AF4(uint64_t a1)
{
}

void sub_100098AFC(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 16; ++i)
  {
    sub_100099F14((void *)(a1 + 16 * i), &v6);
    if (v6) {
      (*(void (**)(void))(v6 + 40))();
    }
    uint64_t v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

void sub_100098B8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100098BA0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(unsigned int **)(a1 + 112);
  if (a3)
  {
    if (v8) {
      *((_BYTE *)v8 + 4) = 1;
    }
    uint64_t v8 = (unsigned int *)operator new(8uLL);
    *uint64_t v8 = 0;
    *((_BYTE *)v8 + 4) = 0;
    *(void *)(a1 + 112) = v8;
  }

  else if (a4 && v8)
  {
    *((_BYTE *)v8 + 4) = 1;
  }

  do
    unsigned int v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  uint64_t v10 = *(void *)(a1 + 112);
  *(void *)&__int128 v11 = a2;
  *((void *)&v11 + 1) = v10;
  sub_100099F6C(a1 + 64, &v11, &v11);
  if (a4) {
    *(void *)(a1 + 112) = 0LL;
  }
  ++*(void *)(a1 + 104);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_100098C5C(_Unwind_Exception *a1)
{
}

uint64_t sub_100098C74(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  if (*(void *)(a1 + 104))
  {
    std::mutex::lock((std::mutex *)a1);
    uint64_t v3 = sub_10009A3F0((void *)(a1 + 64), &v7);
    if (v3)
    {
      --*(void *)(a1 + 104);
      uint64_t v4 = v3[3];
      sub_10009A4DC((void *)(a1 + 64), v3);
      std::mutex::unlock((std::mutex *)a1);
      if (v4)
      {
        do
          unsigned int v5 = __ldaxr((unsigned int *)v4);
        while (__stlxr(v5 - 1, (unsigned int *)v4));
        if (v5 != 1 || !*(_BYTE *)(v4 + 4)) {
          return 0LL;
        }
        operator delete((void *)v4);
      }
    }

    else
    {
      std::mutex::unlock((std::mutex *)a1);
    }
  }

  return 1LL;
}

void sub_100098D2C(_Unwind_Exception *a1)
{
}

void sub_100098D40(uint64_t a1, uint64_t a2, int a3)
{
  sub_100098BA0(a1 + 144, a2, a3 == 0, a3 == 2);
}

uint64_t di_plugin_register(char *a1, unsigned int *a2)
{
  uint64_t v4 = sub_100068614();
  sub_100006174(__p, a1);
  uint64_t v5 = sub_100069220(v4, (uint64_t)__p, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_100098DC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100098DE8(uint64_t result)
{
  if (*(_BYTE *)(result + 248))
  {
    uint64_t v1 = result;
    unint64_t v2 = (std::mutex *)(result + 128);
    sub_100098E64(result + 192);
    std::mutex::~mutex(v2);
    uint64_t v3 = *(void **)(v1 + 112);
    *(void *)(v1 + 112) = 0LL;
    if (v3) {
      operator delete[](v3);
    }
    uint64_t result = *(void *)(v1 + 80);
    if (result == v1 + 56)
    {
      uint64_t v4 = 4LL;
      uint64_t result = v1 + 56;
    }

    else
    {
      if (!result)
      {
LABEL_9:
        *(_BYTE *)(v1 + 24_Block_object_dispose(va, 8) = 0;
        return result;
      }

      uint64_t v4 = 5LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v4))();
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_100098E64(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_100098EB4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_100184C28;
  result[1] = v3;
  return result;
}

uint64_t sub_100098EE8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100184C28;
  a2[1] = v2;
  return result;
}

uint64_t (**sub_100098F04(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (***)(void))(*(void *)(a1 + 8) + 704LL);
  if (*result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t sub_100098F1C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100098F58()
{
  return &off_100184C98;
}

uint64_t sub_100098F64( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10 = a4;
  *(void *)&__int128 v13 = a2 + 88LL * a4;
  *((void *)&v13 + 1) = a5;
  uint64_t v11 = sub_100099054(a1, a2 + 4LL * a5 + 88LL * a4, a3 + 16LL * a6 + 4, &v13, a5, a7);
  *(void *)(v11 + 96) = a2;
  sub_1000990D4((void *)(v11 + 104), v10);
  *(_DWORD *)(a1 + 120) = a4;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 850045863LL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  return a1;
}

void sub_100099018(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 80);
  if (v3 == (void *)(v1 + 56))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v1 + 56);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100099054(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 40) = a5;
  if ((a5 & (a5 - 1)) != 0)
  {
    char v7 = 0;
    unsigned int v8 = 2 * a5;
    do
    {
      v8 >>= 1;
      ++v7;
    }

    while (v8 != 1);
    a5 = 1 << v7;
  }

  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 44) = a5 - 1;
  sub_100014938(a1 + 56, a6);
  *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  return a1;
}

void *sub_1000990D4(void *a1, uint64_t a2)
{
  char v2 = a2;
  *a1 = a2;
  unint64_t v4 = a2 + 63;
  unint64_t v5 = (unint64_t)(a2 + 63) >> 6;
  uint64_t v6 = (unint64_t *)operator new[](8 * v5);
  char v7 = v6;
  if (v4 > 0x3F)
  {
    bzero(v6, 8 * v5);
    a1[1] = v7;
    unint64_t v8 = v5 + 1;
    unsigned int v9 = v7;
    do
    {
      atomic_store(0xFFFFFFFFFFFFFFFFLL, v9++);
      --v8;
    }

    while (v8 > 1);
  }

  else
  {
    a1[1] = v6;
  }

  if ((v2 & 0x3F) != 0)
  {
    uint64_t v10 = &v7[v5 - 1];
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 & ~(-1LL << (v2 & 0x3F)), v10));
  }

  return a1;
}

uint64_t sub_100099190(uint64_t result)
{
  if (*(_BYTE *)(result + 136))
  {
    uint64_t v1 = result;
    char v2 = (void *)(result + 104);
    uint64_t v3 = *(void **)(result + 128);
    if (v3 == v2)
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = v2;
    }

    else
    {
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
    uint64_t result = *(void *)(v1 + 80);
    if (result == v1 + 56)
    {
      uint64_t v5 = 4LL;
      uint64_t result = v1 + 56;
    }

    else
    {
      if (!result)
      {
LABEL_12:
        *(_BYTE *)(v1 + 136) = 0;
        return result;
      }

      uint64_t v5 = 5LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v5))();
    goto LABEL_12;
  }

  return result;
}

void *sub_100099220(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_100184CB8;
  result[1] = v3;
  return result;
}

uint64_t sub_100099254(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100184CB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100099270(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(result + 432);
  if (v2) {
    return v2(result, *(void *)(result + 440));
  }
  return result;
}

uint64_t sub_100099288(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000992C4()
{
  return &off_100184D18;
}

void *sub_1000992D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_100184D38;
  result[1] = v3;
  return result;
}

uint64_t sub_10009930C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100184D38;
  a2[1] = v2;
  return result;
}

uint64_t sub_100099328(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(result + 416);
  if (v4) {
    return v4(result, *(void *)(result + 424), *a2, a3);
  }
  return result;
}

uint64_t sub_100099348(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100099384()
{
  return &off_100184DA8;
}

uint64_t sub_100099390( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  *(void *)&__int128 v12 = a3;
  *((void *)&v12 + 1) = a6;
  uint64_t v10 = sub_100099054(a1, a3 + 16LL * a6, 4LL * a5 + 88LL * a4 + a2 + 4, &v12, a6, a7);
  *(_BYTE *)(v10 + 96) = 1;
  *(_DWORD *)(v10 + 100) = 0;
  sub_100014938(v10 + 104, a8);
  return a1;
}

void sub_10009940C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 80);
  if (v3 == (void *)(v1 + 56))
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = (void *)(v1 + 56);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100099448(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 136)) {
    return a1;
  }
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2 == (void *)(a1 + 104))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 104);
    goto LABEL_6;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  uint64_t v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 56))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(a1 + 56);
    goto LABEL_11;
  }

  if (v4)
  {
    uint64_t v5 = 5LL;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

uint64_t sub_1000994D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248))
  {
    sub_100098E64(a1 + 192);
    std::mutex::~mutex((std::mutex *)(a1 + 128));
    uint64_t v2 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = 0LL;
    if (v2) {
      operator delete[](v2);
    }
    uint64_t v3 = *(void **)(a1 + 80);
    if (v3 == (void *)(a1 + 56))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(a1 + 56);
      goto LABEL_8;
    }

    if (v3)
    {
      uint64_t v4 = 5LL;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }

  return a1;
}

void sub_10009954C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[88];
    a2[88] = 0LL;
    if (v3) {
      (*(void (**)(void))(v3 + 32))();
    }
    for (uint64_t i = 86LL; i != 54; i -= 2LL)
      sub_100006224((uint64_t)&a2[i]);
    sub_100099448((uint64_t)(a2 + 34));
    sub_1000994D0((uint64_t)(a2 + 2));
    operator delete(a2);
  }

uint64_t sub_1000995BC(uint64_t a1)
{
  return sub_1000977FC(*(void *)(a1 + 48));
}

uint64_t sub_1000995C4(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_1000995E0(uint64_t a1)
{
  return sub_100097B74(*(void *)(a1 + 48));
}

uint64_t sub_1000995E8(uint64_t a1)
{
  return sub_100097C3C(*(void *)(a1 + 48));
}

void sub_1000995F0(dispatch_object_s ***a1)
{
  if (a1)
  {
    sub_100099624(a1 + 6, 0LL);
    operator delete(a1);
  }

void sub_100099624(dispatch_object_s ***a1, dispatch_object_s **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_100101848(v2 + 2);
    operator delete(v2);
  }

uint64_t sub_100099660(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = (unsigned int *)(a1 + 52);
  int v5 = *(_DWORD *)(a1 + 52);
  unsigned int v6 = __ldaxr((unsigned int *)(a1 + 52));
  if (v6 != v5)
  {
    __clrex();
LABEL_5:
    while (1)
    {
      unsigned int v7 = __ldaxr(v4);
      if (v7 != v6) {
        break;
      }
      if (__stlxr((v6 + 2 * a2) | a3, v4)) {
        goto LABEL_9;
      }
      int v8 = 1;
LABEL_10:
      unsigned int v6 = v7;
      if (v8) {
        goto LABEL_11;
      }
    }

    __clrex();
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }

  if (__stlxr((v5 + 2 * a2) | a3, v4)) {
    goto LABEL_5;
  }
LABEL_11:
  unsigned int v9 = (unsigned int *)(a1 + 48);
  do
  {
    unsigned int v10 = __ldaxr(v9);
    unsigned int v11 = v10 - a2;
  }

  while (__stlxr(v11, v9));
  if (!v11)
  {
    __int128 v12 = (unsigned __int8 *)(a1 + 89);
    do
      unsigned __int8 v13 = __ldaxr(v12);
    while (__stlxr(1u, v12));
    if ((v13 & 1) == 0)
    {
      while (1)
      {
        unint64_t v14 = *v4;
        if (atomic_load(v9)) {
          break;
        }
        unsigned int v16 = __ldaxr(v4);
        if (v16 == (_DWORD)v14)
        {
          if (!__stlxr(0, v4))
          {
            unint64_t v17 = (v14 >> 1) | ((v14 & 1) << 32);
            goto LABEL_23;
          }
        }

        else
        {
          __clrex();
        }
      }

      unint64_t v17 = 0LL;
LABEL_23:
      unint64_t v18 = HIDWORD(v17);
      uint64_t v19 = (unsigned __int8 *)(a1 + 88);
      if ((_DWORD)v17)
      {
LABEL_24:
        __dmb(0xBu);
        uint64_t v20 = *(unsigned int **)a1;
        do
          unsigned int v21 = __ldaxr(v20);
        while (__stlxr(v21 + v17, v20));
        unsigned int v22 = atomic_load(*(unsigned int **)(a1 + 16));
        if ((_DWORD)v17 + v21 != v22 && (_DWORD)v18 != 0)
        {
          while (1)
          {
            int v24 = __ldaxr(v19);
            if (v24 != 1) {
              break;
            }
            if (!__stlxr(0, v19))
            {
              uint64_t v25 = *(void *)(a1 + 80);
              if (!v25) {
                sub_100014B10();
              }
              (*(void (**)(uint64_t))(*(void *)v25 + 48LL))(v25);
              goto LABEL_34;
            }
          }

LABEL_39:
          __clrex();
        }

  ++*(void *)(a1 + 24);
  return i;
}

    unsigned int v11 = 0;
    goto LABEL_44;
  }

  int v15 = *(void *)(a1 + 56);
  unsigned int v16 = *(unint64_t **)(a1 + 160);
  unint64_t v17 = *v16;
  if (*v16 >= v15) {
    unsigned int v10 = *(void *)(a1 + 56);
  }
  else {
    unsigned int v10 = *v16;
  }
  if (v10 <= v3) {
    unsigned int v10 = v3;
  }
  if (v10 < v15 && v10 < v17) {
    goto LABEL_39;
  }
  if (v10 >= v17)
  {
    unint64_t v17 = v16[1];
  }

  else
  {
    if (v17 >= *(void *)(a1 + 64)) {
      unint64_t v17 = *(void *)(a1 + 64);
    }
    unsigned int v16 = (unint64_t *)(a1 + 56);
  }

  unsigned int v11 = *((_DWORD *)v16 + 6);
  uint64_t v3 = v10;
  if (*(void *)(a1 + 24) >= v17) {
    unsigned int v10 = v17;
  }
  else {
    unsigned int v10 = *(void *)(a1 + 24);
  }
LABEL_44:
  *(void *)a3 = v3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v10;
  *(_BYTE *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = v11;
  return result;
}

  if (v9 >= v10)
  {
    unsigned int v22 = v9;
  }

  else
  {
    unsigned int v21 = *v10;
    unsigned int v22 = v9;
    uint64_t v23 = v10;
    do
    {
      int v24 = v22[1];
      uint64_t v25 = v23[1];
      *unsigned int v22 = v21;
      v22[1] = v25;
      *uint64_t v23 = v5;
      v23[1] = v24;
      unsigned int v26 = v22;
      do
      {
        uint64_t v27 = v22[2];
        v22 += 2;
        int v5 = v27;
        unsigned int v28 = v27 == v3;
        if (v27 >= v3) {
          unsigned __int8 v29 = 1;
        }
        else {
          unsigned __int8 v29 = -1;
        }
        if (v28)
        {
          unsigned int v30 = v26[3];
          id v31 = v30 == v4;
          unsigned __int8 v29 = v30 >= v4 ? 1 : -1;
          if (v31) {
            unsigned __int8 v29 = 0;
          }
        }

        unsigned int v26 = v22;
      }

      while (v29 < 0);
      unsigned int v32 = v23;
      do
      {
        uint64_t v33 = *(v23 - 2);
        v23 -= 2;
        unsigned int v21 = v33;
        __int16 v34 = v33 == v3;
        if (v33 >= v3) {
          int v35 = 1;
        }
        else {
          int v35 = -1;
        }
        if (v34)
        {
          __int16 v36 = *(v32 - 1);
          int v37 = v36 == v4;
          int v35 = v36 >= v4 ? 1 : -1;
          if (v37) {
            int v35 = 0;
          }
        }

        unsigned int v32 = v23;
      }

      while ((v35 & 0x80) == 0);
    }

    while (v22 < v23);
  }

  if (v22 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v22 - 1);
  }
  *(v22 - 2) = v3;
  *(v22 - 1) = v4;
  return v22 - 2;
}

      unsigned int v22 = 1;
      goto LABEL_40;
    }
  }

  else
  {
  }

  unsigned int v22 = 0;
  if (a3) {
    *a3 = v8;
  }
LABEL_40:

  return v22;
}

LABEL_40:
      atomic_store(0, v12);
      __dmb(0xBu);
      if (*v4)
      {
        do
LABEL_41:
          unsigned __int8 v29 = __ldaxr(v12);
        while (__stlxr(1u, v12));
        if ((v29 & 1) == 0)
        {
          while (1)
          {
            unsigned int v30 = *v4;
            if (atomic_load(v9)) {
              break;
            }
            unsigned int v32 = __ldaxr(v4);
            if (v32 == v30)
            {
              if (!__stlxr(0, v4))
              {
                if (v30 > 1)
                {
                  LODWORD(v1_Block_object_dispose(va, 8) = v30 & 1;
                  LODWORD(v17) = v30 >> 1;
                  if ((_DWORD)v17) {
                    goto LABEL_24;
                  }
                  goto LABEL_40;
                }

                break;
              }
            }

            else
            {
              __clrex();
            }
          }

          atomic_store(0, v12);
          __dmb(0xBu);
          if (*v4)
          {
            if (!atomic_load(v9)) {
              goto LABEL_41;
            }
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_10009989C(void *a1)
{
  unint64_t v1 = *a1 + 63LL;
  if (v1 >= 0x40)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    uint64_t v4 = &v3[v1 >> 6];
    do
    {
      if (atomic_load(v3))
      {
        while (1)
        {
          unint64_t v6 = atomic_load(v3);
          if (!v6) {
            break;
          }
          unint64_t v7 = __clz(__rbit64(v6));
          do
            unint64_t v8 = __ldaxr(v3);
          while (__stlxr(v8 & ~(1LL << v7), v3));
          if ((v8 & (1LL << v7)) != 0) {
            return v7 + 8LL * ((void)v3 - a1[1]);
          }
        }
      }

      ++v3;
    }

    while (v3 != v4);
  }

  return -1LL;
}

uint64_t sub_100099920@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (unsigned __int8 *)(result + 88);
  while (1)
  {
    unsigned int v3 = atomic_load(*(unsigned int **)result);
    unsigned int v4 = atomic_load(*(unsigned int **)(result + 16));
    if (v3 == v4) {
      break;
    }
LABEL_8:
    unsigned int v9 = atomic_load(*(unsigned int **)(result + 16));
    unsigned int v10 = atomic_load(*(unsigned int **)result);
    if (v9 != v10)
    {
      unsigned int v11 = *(unsigned int **)(result + 16);
      unsigned int v12 = __ldaxr(v11);
      if (v12 == v9)
      {
        if (!__stlxr(v9 + 1, v11))
        {
          char v13 = 1;
LABEL_15:
          if ((v13 & 1) != 0) {
            goto LABEL_23;
          }
          while (2)
          {
            unsigned int v9 = v12;
            unsigned int v10 = atomic_load(*(unsigned int **)result);
            if (v12 == v10) {
              goto LABEL_9;
            }
            unint64_t v14 = *(unsigned int **)(result + 16);
            unsigned int v15 = __ldaxr(v14);
            if (v15 == v12)
            {
              if (!__stlxr(v12 + 1, v14))
              {
                char v16 = 1;
                goto LABEL_22;
              }
            }

            else
            {
              __clrex();
            }

            char v16 = 0;
LABEL_22:
            unsigned int v12 = v15;
            if ((v16 & 1) != 0) {
              goto LABEL_23;
            }
            continue;
          }
        }
      }

      else
      {
        __clrex();
      }

      char v13 = 0;
      goto LABEL_15;
    }

unint64_t sub_100099A4C(uint64_t a1)
{
  unsigned int v1 = atomic_load(*(unsigned int **)a1);
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v1 == v2)
  {
    unsigned int v3 = (unsigned __int8 *)(a1 + 88);
    do
      unsigned __int8 v4 = __ldaxr(v3);
    while (__stlxr(1u, v3));
    if ((v4 & 1) != 0
      || (v5 = atomic_load(*(unsigned int **)a1), unsigned int v6 = atomic_load(*(unsigned int **)(a1 + 16)), v5 == v6))
    {
      LOBYTE(a1) = 0;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v9 = 0;
    }

    else
    {
      while (1)
      {
        int v10 = __ldaxr(v3);
        if (v10 != 1) {
          break;
        }
        if (!__stlxr(0, v3)) {
          goto LABEL_9;
        }
      }

      LOBYTE(a1) = 0;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v9 = 0;
      __clrex();
    }
  }

  else
  {
LABEL_9:
    unsigned int v11 = atomic_load(*(unsigned int **)(a1 + 16));
    unsigned int v12 = atomic_load(*(unsigned int **)a1);
    if (v11 != v12)
    {
      char v13 = *(unsigned int **)(a1 + 16);
      unsigned int v14 = __ldaxr(v13);
      if (v14 == v11)
      {
        if (__stlxr(v11 + 1, v13)) {
          goto LABEL_14;
        }
LABEL_20:
        if (v11 != v12)
        {
          unint64_t v7 = 0LL;
          LODWORD(a1) = *(_DWORD *)(*(void *)(a1 + 24) + 4LL * (*(_DWORD *)(a1 + 44) & v11));
          int v9 = a1 & 0xFFFFFF00;
          uint64_t v8 = (uint64_t)&_mh_execute_header;
          return v8 | v7 | v9 | a1;
        }
      }

      else
      {
        __clrex();
LABEL_14:
        while (1)
        {
          unsigned int v12 = atomic_load(*(unsigned int **)a1);
          if (v14 == v12) {
            break;
          }
          unsigned int v11 = v14;
          unsigned int v15 = *(unsigned int **)(a1 + 16);
          unsigned int v14 = __ldaxr(v15);
          if (v14 == v11)
          {
            if (!__stlxr(v11 + 1, v15)) {
              goto LABEL_20;
            }
          }

          else
          {
            __clrex();
          }
        }
      }
    }

    a1 = sub_100099A4C();
    int v9 = a1 & 0xFFFFFF00;
    unint64_t v7 = a1 & 0xFFFFFF0000000000LL;
    uint64_t v8 = a1 & 0xFF00000000LL;
  }

  return v8 | v7 | v9 | a1;
}

uint64_t sub_100099BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (unsigned int *)(a1 + 48);
  do
    unsigned int v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  unsigned int v5 = (unsigned int *)(a1 + 8);
  unsigned int v6 = atomic_load((unsigned int *)(a1 + 8));
  unsigned int v7 = atomic_load(*(unsigned int **)(a1 + 16));
  unsigned int v8 = v7 - v6;
  if (v7 - v6 != 1)
  {
    while (v8 != 1 - *(_DWORD *)(a1 + 40))
    {
      unsigned int v9 = __ldaxr(v5);
      if (v9 == v6)
      {
        if (!__stlxr(v6 + 1, v5))
        {
          uint64_t v13 = 0LL;
          unsigned int v14 = (void *)(*(void *)(a1 + 24) + 16LL * (*(_DWORD *)(a1 + 44) & v6));
          *unsigned int v14 = a2;
          v14[1] = a3;
          return v13;
        }
      }

      else
      {
        __clrex();
      }

      unsigned int v10 = atomic_load(*(unsigned int **)(a1 + 16));
      unsigned int v8 = v10 - v9;
      unsigned int v6 = v9;
      if (v8 == 1) {
        goto LABEL_10;
      }
    }
  }

  do
LABEL_10:
    unsigned int v11 = __ldaxr(v3);
  while (__stlxr(v11 - 1, v3));
  if (v11 == 1) {
    sub_100099660(a1, 0, 1);
  }
  return 4294967268LL;
}

uint64_t sub_100099CA4(uint64_t a1, int a2, int a3)
{
  int v6 = a3;
  int v5 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100014B10();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48LL))(v3, &v5, &v6);
}

void sub_100099CE4(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;
  std::__sp_mut::unlock(sp_mut);
}

BOOL sub_100099D3C(void *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  unsigned int v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    sub_10001C610(a1, a3);
    unsigned int v9 = v7;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    sub_10001C610(a2, a1);
    unsigned int v9 = v8;
  }

  std::__sp_mut::unlock(sp_mut);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return v7 == v8;
}

void sub_100099E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100099E2C(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  *unsigned int v4 = &off_100184DC8;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100099E70(void *a1)
{
}

void sub_100099E88(_Unwind_Exception *a1)
{
}

void sub_100099EA0(std::__shared_weak_count *a1)
{
}

uint64_t sub_100099EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48LL))();
}

uint64_t sub_100099ED4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_100099F14(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  std::__sp_mut::unlock(sp_mut);
}

void *sub_100099F6C(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10009A1BC(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *unsigned int v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_10009A1A8(_Unwind_Exception *a1)
{
}

void sub_10009A1BC(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_10009A298(a1, prime);
  }

void sub_10009A298(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_100044D7C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void *sub_10009A3F0(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t sub_10009A4DC(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10009A51C(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0LL;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_10009A51C@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  *unint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose(va, 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_10009A650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &off_100184E70;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)a1 = off_100184E28;
  sub_1000EA2B8(a1 + 48, (void *)(a2 + 48));
  sub_1000EA2B8(a1 + 96, (void *)(a2 + 96));
  unint64_t v7 = *(_OWORD **)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + 152) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    unint64_t v7 = *(_OWORD **)(a1 + 144);
  }

  *(_OWORD *)(a1 + 160) = *v7;
  return a1;
}

void sub_10009A6F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009A714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  *(void *)a1 = &off_100184E70;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  uint64_t v10 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = a4;
  *(void *)a1 = off_100184E28;
  sub_1000EA2B8(a1 + 48, a5);
  sub_1000EA2B8(a1 + 96, a6);
  sub_10009B238(a7, (void *)(a1 + 144));
  unint64_t v11 = *(uint64_t **)(a1 + 144);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v12;
  if (v12 == v13) {
    unint64_t v14 = 0LL;
  }
  else {
    unint64_t v14 = *(void *)(v12 - 24);
  }
  if (*(void *)(a1 + 24) > v14) {
    unint64_t v14 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = 2;
  return a1;
}

void sub_10009A7E4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  uint64_t v5 = *v1;
  *uint64_t v1 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10009A828@<W0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 168);
  while (v7 != v6 && *(void *)(v7 + 8) <= a2)
  {
    v7 += 32LL;
    *(void *)(a1 + 160) = v7;
  }

  while (sub_1000EA3C0(a1 + 48, a1 + 96))
  {
    if (*(_DWORD *)(a1 + 80) == 3 || *(void *)(a1 + 64) > v3) {
      break;
    }
    sub_1000EA664((uint64_t *)(a1 + 48), (uint64_t)v19);
    uint64_t v8 = v19[0];
    v19[0] = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
    }
  }

  BOOL result = sub_1000EA3C0(a1 + 48, a1 + 96);
  if (result && *(_DWORD *)(a1 + 80) == 3)
  {
    unint64_t v10 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 56) > v3) {
      unint64_t v3 = *(void *)(a1 + 56);
    }
    int v11 = 3;
    goto LABEL_44;
  }

  BOOL result = sub_1000EA308(a1 + 48, a1 + 96);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 168);
  if (result && v12 == v13)
  {
    int v11 = 0;
    unint64_t v10 = *(void *)(a1 + 24);
    goto LABEL_44;
  }

  if (v12 == v13)
  {
    unint64_t v10 = *(void *)(a1 + 56);
    if (v10 <= v3)
    {
      unint64_t v10 = *(void *)(a1 + 64);
      int v11 = *(_DWORD *)(a1 + 80);
      goto LABEL_44;
    }

    goto LABEL_39;
  }

  BOOL result = sub_1000EA308(a1 + 48, a1 + 96);
  if (result)
  {
    unint64_t v14 = *(unint64_t **)(a1 + 160);
    unint64_t v10 = *v14;
    if (*v14 <= v3)
    {
      unint64_t v10 = v14[1];
      int v11 = *((_DWORD *)v14 + 6);
      goto LABEL_44;
    }

BOOL sub_10009AA0C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = sub_10009A828(a1, *(void *)(a1 + 40), (uint64_t)v9);
  int v5 = *(_DWORD *)&v9[24];
  unint64_t v6 = *(void *)&v9[8];
  uint64_t v7 = *(void *)v9;
  do
  {
    if (v6 >= *(void *)(a1 + 24)) {
      break;
    }
    if (v5 == 3) {
      break;
    }
    if (v5 != *(_DWORD *)&v9[24]) {
      break;
    }
    unint64_t v6 = *(void *)&v9[8];
    BOOL result = sub_10009A828(a1, *(unint64_t *)&v9[8], (uint64_t)v8);
    *(_OWORD *)unint64_t v9 = v8[0];
    *(_OWORD *)&v9[12] = *(_OWORD *)((char *)v8 + 12);
  }

  while (*(void *)&v8[0] == v6);
  *(void *)a2 = v7;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

void *sub_10009AAB8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL result = v10;
  if (v10 == v9)
  {
    uint64_t v8 = 4LL;
    BOOL result = v9;
  }

  else
  {
    if (!v10) {
      return result;
    }
    uint64_t v8 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_10009AB64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    unint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009ABA4(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v7 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v7;
  uint64_t v8 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0LL;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v9;
  unint64_t v10 = (void *)sub_10000C84C(a1 + 56, (uint64_t)a2 + 56);
  sub_1000148A0(v10, a3);
  __int128 v11 = *a4;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a4 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v11;
  return a1;
}

void sub_10009AC24(_Unwind_Exception *a1)
{
}

uint64_t sub_10009AC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 1) = 0LL;
  __int128 v7 = (unint64_t *)(v6 + 8);
  *((void *)v6 + 2) = 0LL;
  *(void *)unint64_t v6 = off_100184EA0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *((void *)v6 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  v49 = v6 + 24;
  v50 = (std::__shared_weak_count *)v6;
  sub_1000EA2B8((uint64_t)v46, v52);
  sub_1000EA2B8((uint64_t)v47, v51);
  *(void *)&__int128 v48 = v6 + 24;
  *((void *)&v48 + 1) = v6;
  do
    unint64_t v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  uint64_t v9 = *((void *)v6 + 4);
  if (v9 == *((void *)v6 + 3)) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *(void *)(v9 - 24);
  }
  if (*(void *)(a1 + 16) > v10) {
    unint64_t v10 = *(void *)(a1 + 16);
  }
  *(void *)&__int128 v44 = *(void *)(a1 + 8);
  *((void *)&v44 + 1) = v10;
  char v45 = 2;
  sub_1000EA2B8((uint64_t)&v35, v46);
  sub_1000EA2B8((uint64_t)&v39, v47);
  __int128 v43 = v48;
  if (*((void *)&v48 + 1))
  {
    __int128 v11 = (unint64_t *)(*((void *)&v48 + 1) + 8LL);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v54 = 0LL;
  uint64_t v13 = (char *)operator new(0x78uLL);
  uint64_t v14 = v35;
  *(void *)uint64_t v13 = off_100184EF0;
  *((void *)v13 + 1) = v14;
  __int128 v15 = v37;
  *((_OWORD *)v13 + 1) = v36;
  *((_OWORD *)v13 + 2) = v15;
  *((_DWORD *)v13 + 12) = v38;
  uint64_t v16 = v39;
  uint64_t v35 = 0LL;
  uint64_t v39 = 0LL;
  *((void *)v13 + 7) = v16;
  __int128 v17 = v41;
  *((_OWORD *)v13 + 4) = v40;
  *((_OWORD *)v13 + 5) = v17;
  *((_DWORD *)v13 + 24) = v42;
  *(_OWORD *)(v13 + 104) = v43;
  __int128 v43 = 0uLL;
  v54 = v13;
  sub_10009AAB8((__int128 *)a1, (uint64_t)v53, &v44, a3);
  unint64_t v18 = v54;
  if (v54 == v53)
  {
    uint64_t v19 = 4LL;
    unint64_t v18 = v53;
    goto LABEL_15;
  }

  if (v54)
  {
    uint64_t v19 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1))
  {
    unsigned int v21 = (unint64_t *)(*((void *)&v43 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v39;
  uint64_t v39 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
  }
  uint64_t v24 = v35;
  uint64_t v35 = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24LL))(v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v48 + 1);
  if (*((void *)&v48 + 1))
  {
    unsigned int v26 = (unint64_t *)(*((void *)&v48 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v47[0];
  v47[0] = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24LL))(v28);
  }
  uint64_t v29 = v46[0];
  v46[0] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  unsigned int v30 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  uint64_t v33 = v51[0];
  v51[0] = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
  }
  uint64_t result = v52[0];
  v52[0] = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_10009AF84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t v29 = *(void **)(v27 - 80);
  if (v29 == v26)
  {
    uint64_t v30 = 4LL;
    uint64_t v29 = (void *)(v27 - 104);
  }

  else
  {
    if (!v29) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  sub_10009B074(&a9);
  sub_10009B074(&a26);
  sub_100006224(v27 - 216);
  uint64_t v31 = *(void *)(v27 - 200);
  *(void *)(v27 - 200) = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 24LL))(v31);
  }
  uint64_t v32 = *(void *)(v27 - 152);
  *(void *)(v27 - 152) = 0LL;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 24LL))(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10009B074(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  return a1;
}

uint64_t sub_10009B0CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xB0uLL);
  uint64_t result = sub_10009A650((uint64_t)v4, a1);
  *a2 = v4;
  return result;
}

void sub_10009B10C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009B120(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  return a1;
}

void sub_10009B178(void *a1)
{
  uint64_t v2 = a1[12];
  a1[12] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  operator delete(a1);
}

void *sub_10009B1D0(void *a1)
{
  uint64_t v2 = a1 + 7;
  uint64_t v3 = (void *)a1[10];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = a1[4];
  a1[4] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40LL))(v5);
  }
  return a1;
}

uint64_t sub_10009B238@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_10009B290((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10009B27C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009B290(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(void *)a1 = off_100184EA0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0LL;
  sub_10009B340( (void *)(a1 + 24),  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  return a1;
}

void sub_10009B2E0(_Unwind_Exception *a1)
{
}

void sub_10009B2F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100184EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10009B304(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100184EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10009B324(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

void *sub_10009B340(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_10009B3B8(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10009B39C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10009B3B8(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100045090();
  }
  uint64_t result = (char *)sub_10009B3F8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_10009B3F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100044D7C();
  }
  return operator new(32 * a2);
}

void *sub_10009B42C(void *a1)
{
  *a1 = off_100184EF0;
  sub_100006224((uint64_t)(a1 + 13));
  uint64_t v2 = a1[7];
  a1[7] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  return a1;
}

void sub_10009B48C(void *a1)
{
  *a1 = off_100184EF0;
  sub_100006224((uint64_t)(a1 + 13));
  uint64_t v2 = a1[7];
  a1[7] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  operator delete(a1);
}

void *sub_10009B4EC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x78uLL);
  *uint64_t v2 = off_100184EF0;
  sub_10009B668((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10009B52C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009B540(uint64_t a1, void *a2)
{
  *a2 = off_100184EF0;
  return sub_10009B668((uint64_t)(a2 + 1), (void *)(a1 + 8));
}

uint64_t sub_10009B55C(uint64_t a1)
{
  return sub_10009B6E0((uint64_t *)(a1 + 8));
}

void sub_10009B564(uint64_t *a1)
{
}

uint64_t sub_10009B58C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 1;
  uint64_t v8 = *a3;
  uint64_t v9 = operator new(0xB0uLL);
  __int128 v11 = *(_OWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t result = sub_10009A714((uint64_t)v9, a2, (uint64_t)&v11, v8, v7, a1 + 7, a1[13]);
  *a4 = v9;
  return result;
}

void sub_10009B60C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009B620(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10009B65C()
{
}

uint64_t sub_10009B668(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1000EA2B8(a1, a2);
  sub_1000EA2B8(v4 + 48, a2 + 6);
  uint64_t v5 = a2[13];
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = v5;
  if (v5)
  {
    unint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return a1;
}

void sub_10009B6BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009B6E0(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t result = *a1;
  *a1 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_10009BA58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10009BA84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009BA94(uint64_t a1)
{
}

void sub_10009BA9C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

const void **sub_10009BB88(const __CFString *a1, void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    uint64_t v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v15 = CFGetTypeID(a1);
LABEL_19:
      uint64_t v16 = sub_10000A374(exception, v15, v7);
    }
  }

  int v8 = sub_1000FE8B0(a1);
  if (v8 == 1651272568 || v8 == 1970628964 || v8 == 1886155636)
  {
    __int128 v11 = __cxa_allocate_exception(0x40uLL);
    uint64_t v12 = "User data contains reserved key(s)";
    goto LABEL_16;
  }

  CFTypeID v9 = CFDataGetTypeID();
  if (!a2)
  {
    __int128 v11 = __cxa_allocate_exception(0x40uLL);
    uint64_t v12 = "Invalid user data content";
LABEL_16:
    uint64_t v13 = (void *)sub_100004494((uint64_t)v11, (uint64_t)v12, 0x16u);
  }

  uint64_t v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFTypeID v15 = CFGetTypeID(a2);
    goto LABEL_19;
  }

  sub_100006174(v21, "");
  LOBYTE(__p[0]) = 0;
  char v20 = 0;
  sub_100029E88(&v17, 80);
  sub_1000F8C70((uint64_t)v21, (uint64_t)__p, 0, &v17, a2, (CFDictionaryRef *)&v23);
  if (v20 && v19 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  __p[0] = v23;
  v21[0] = CFArrayCreate(kCFAllocatorDefault, (const void **)__p, 1LL, &kCFTypeArrayCallBacks);
  CFDictionarySetValue(a3, a1, v21[0]);
  sub_10002A0C0((const void **)v21);
  return sub_10000D8A4((const void **)&v23);
}

void sub_10009BD74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_10009BDDC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 284);
  if (v1) {
    uint64_t v2 = *(__int128 **)(a1 + 72);
  }
  else {
    uint64_t v2 = 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 280);
  if (v4)
  {
    __int128 v16 = *(_OWORD *)(a1 + 96);
    LOBYTE(v4) = 1;
  }

  else
  {
    LOBYTE(v16) = 0;
  }

  uint64_t v5 = *(__int128 **)(a1 + 80);
  BOOL v6 = v1 == 0;
  char v17 = v4;
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v22 = *(void *)(v7 + 352);
  __int128 v27 = *(_OWORD *)(v7 + 424);
  __int128 v28 = *(_OWORD *)(v7 + 440);
  __int128 v29 = *(_OWORD *)(v7 + 456);
  __int128 v30 = *(_OWORD *)(v7 + 472);
  __int128 v23 = *(_OWORD *)(v7 + 360);
  __int128 v24 = *(_OWORD *)(v7 + 376);
  __int128 v25 = *(_OWORD *)(v7 + 392);
  __int128 v26 = *(_OWORD *)(v7 + 408);
  *(void *)&__int128 v21 = sub_1000F3064((unsigned int *)&v22);
  *((void *)&v21 + 1) = v8;
  if (v6)
  {
    if (!v17) {
      return 1LL;
    }
  }

  else
  {
    CFTypeID v9 = *(void **)(v3 + 32);
    if (v9 == (void *)(v3 + 40) || v2 == v5) {
      goto LABEL_23;
    }
    BOOL v10 = 1;
    do
    {
      __int128 v20 = *v2;
      if (v10) {
        BOOL v10 = sub_1000F4984((_DWORD *)v9 + 15, (uint64_t)&v20);
      }
      sub_100006174(__p, "BLX");
      sub_1000F746C(v3, (uint64_t)__p, (uint64_t)&v20, (int *)v9 + 15);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      __int128 v21 = *(_OWORD *)sub_10009F8B8((uint64_t)&v21, (uint64_t)&v20);
      __int128 v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          __int128 v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          CFTypeID v9 = v12;
        }

        while (!v13);
      }

      if (v12 == (void *)(v3 + 40)) {
        break;
      }
      uint64_t v2 = (__int128 *)((char *)v2 + 184);
      CFTypeID v9 = v12;
    }

    while (v2 != v5);
    if (v10) {
LABEL_23:
    }
      BOOL v10 = sub_1000F4984(&v22, (uint64_t)&v21);
    sub_100006174(__p, "Master checksum");
    sub_1000F746C(v3, (uint64_t)__p, (uint64_t)&v21, (int *)&v22);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (!v17) {
      return v10;
    }
    if (!v10)
    {
      BOOL v14 = 0LL;
      goto LABEL_31;
    }
  }

  BOOL v14 = sub_1000F4984((_DWORD *)(*(void *)(v3 + 72) + 80LL), (uint64_t)&v16);
LABEL_31:
  sub_100006174(__p, "Data Fork");
  sub_1000F746C(v3, (uint64_t)__p, (uint64_t)&v16, (int *)(*(void *)(v3 + 72) + 80LL));
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_10009C074( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009C0A0(uint64_t a1)
{
  uint64_t v3 = &v4;
  uint64_t v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1 == -1) {
    sub_100026264();
  }
  uint64_t v5 = &v3;
  ((void (*)(unsigned __int8 ***, uint64_t))off_1001850E8[v1])(&v5, a1 + 4);
  return v4;
}

uint64_t sub_10009C0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24LL))(a2);
  uint64_t v5 = sub_1000F745C(*(void *)(a1 + 8));
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  uint64_t v7 = *(void *)(a3 + 72);
  uint64_t v8 = *(void *)(a1 + 16) * *(void *)(a3 + 80);
  v11[0] = 0LL;
  v11[1] = v8;
  char v12 = 2;
  sub_10009C1EC((__int128 *)(a1 + 40), (__int128 *)(a1 + 56), (uint64_t)v11, (unsigned int *)(v7 + 80), a1 + 96);
  else {
    int v9 = 0;
  }
  *(_DWORD *)(a1 + 284) = v9;
  *(_DWORD *)(a1 + 280) = sub_10009C0A0(a1 + 96) ^ 1;
  return a1;
}

void sub_10009C1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10009C1EC( __int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uLong v9 = sub_1000F3064(a4);
  *(void *)char v12 = 850045863LL;
  v14[0] = 0LL;
  v14[1] = 0LL;
  memset(&v12[8], 0, 60);
  BOOL v13 = v14;
  __int128 v15 = *a1;
  __int128 v16 = v15;
  __int128 v17 = *a2;
  char v19 = 0;
  uint64_t v11 = v15;
  if ((void)v15 != (void)v17)
  {
    uint64_t v11 = *(void *)(v15 + 32);
    if ((*(_BYTE *)(v15 + 48) & 2) == 0) {
      ++v11;
    }
    uint64_t v18 = v11;
  }

  v20[0] = v9;
  v20[1] = v10;
  memset(&v21[8], 0, 60);
  v23[0] = 0LL;
  v23[1] = 0LL;
  *(void *)__int128 v21 = 850045863LL;
  uint64_t v22 = v23;
  __int128 v24 = *a1;
  __int128 v25 = v24;
  __int128 v26 = *a2;
  uint64_t v27 = v11;
  char v28 = 0;
  char v29 = 0;
  sub_10009F994(a5, (uint64_t)v20, a3);
  sub_10009ED58((uint64_t)&v22, v23[0]);
  std::mutex::~mutex((std::mutex *)v21);
  sub_10009ED58((uint64_t)&v13, v14[0]);
  std::mutex::~mutex((std::mutex *)v12);
}

void sub_10009C364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41)
{
}

uint64_t sub_10009C398(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 16);
  sub_10009ED58(a1 + 88, *(void **)(a1 + 96));
  std::mutex::~mutex(v2);
  return a1;
}

uint64_t sub_10009C3D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_DWORD *)(sub_10009C0F4(a1, a2, a3) + 284) = 4 * (a4 & 1);
  if ((a4 & 2) != 0) {
    int v6 = sub_10009C0A0(a1 + 96) ^ 1;
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 280) = v6;
  return a1;
}

void sub_10009C41C(_Unwind_Exception *a1)
{
}

uint64_t sub_10009C430(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 112);
  sub_10009ED58(a1 + 184, *(void **)(a1 + 192));
  std::mutex::~mutex(v2);
  unsigned __int8 v4 = (void **)(a1 + 72);
  sub_10009EDA0(&v4);
  return a1;
}

uint64_t sub_10009C480(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned int *)(a2 + 1);
  uint64_t v3 = (unsigned int *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0LL;
  }
  LODWORD(v5) = 0;
  int v6 = (__int128 *)(a1 + 40);
  uint64_t v7 = (__int128 *)(a1 + 56);
  __int128 v15 = (uint64_t *)(a1 + 72);
  do
  {
    sub_10009C1EC(v6, v7, (uint64_t)(v3 + 8), v3 + 15, (uint64_t)v16);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 >= *(void *)(a1 + 88))
    {
      uint64_t v9 = sub_10009EE40(v15, (uint64_t)v16);
    }

    else
    {
      sub_10009EF5C(*(void *)(a1 + 80), (uint64_t)v16);
      uint64_t v9 = v8 + 184;
      *(void *)(a1 + 80) = v8 + 184;
    }

    *(void *)(a1 + 80) = v9;
    sub_10009ED58((uint64_t)v18, v18[1]);
    std::mutex::~mutex(&v17);
    unsigned int v10 = v3[15];
    BOOL v11 = v10 == 10 || v10 == 0;
    if (v11) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = 2LL;
    }
    char v12 = (unsigned int *)*((void *)v3 + 1);
    if (v12)
    {
      do
      {
        BOOL v13 = v12;
        char v12 = *(unsigned int **)v12;
      }

      while (v12);
    }

    else
    {
      do
      {
        BOOL v13 = (unsigned int *)*((void *)v3 + 2);
        BOOL v11 = *(void *)v13 == (void)v3;
        uint64_t v3 = v13;
      }

      while (!v11);
    }

    uint64_t v3 = v13;
  }

  while (v13 != v2);
  return v5;
}

void sub_10009C5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10009C600@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a5;
  uint64_t v62 = a2;
  uint64_t result = sub_10009FB54(a5, a4);
  if (a4)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = a4;
    v52 = a1;
    uint64_t v53 = v8;
    do
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 136LL))(*a1);
      uint64_t v61 = v12;
      __int128 v60 = 0uLL;
      __int128 v59 = 0uLL;
      if ((sub_10009CAB0(*a1) & 1) == 0)
      {
        BOOL v13 = *(std::__shared_weak_count **)(v12 + 48);
        v57 = *(const void **)(v12 + 40);
        v58 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }

        __int128 v16 = *(void **)(v12 + 16);
        if (v16 != (void *)(v12 + 24))
        {
          do
          {
            if ((void)v59)
            {
              if (!(void)v60)
              {
                sub_100047E34((void **)v59);
                __int128 v17 = v56;
                __int128 v56 = 0uLL;
                uint64_t v18 = (std::__shared_weak_count *)*((void *)&v60 + 1);
                __int128 v60 = v17;
                if (v18)
                {
                  char v19 = (unint64_t *)&v18->__shared_owners_;
                  do
                    unint64_t v20 = __ldaxr(v19);
                  while (__stlxr(v20 - 1, v19));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                    std::__shared_weak_count::__release_weak(v18);
                  }
                }

                __int128 v21 = (std::__shared_weak_count *)*((void *)&v56 + 1);
                if (*((void *)&v56 + 1))
                {
                  uint64_t v22 = (unint64_t *)(*((void *)&v56 + 1) + 8LL);
                  do
                    unint64_t v23 = __ldaxr(v22);
                  while (__stlxr(v23 - 1, v22));
                  if (!v23)
                  {
                    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                    std::__shared_weak_count::__release_weak(v21);
                  }
                }
              }
            }

            else
            {
              LODWORD(v63) = 1;
              BOOL v55 = a3 != 1;
              sub_10009FD3C((uint64_t)&v57, &v62, (int *)&v63, (unsigned __int8 *)&v55, &v56);
              __int128 v24 = v56;
              __int128 v56 = 0uLL;
              __int128 v25 = (std::__shared_weak_count *)*((void *)&v59 + 1);
              __int128 v59 = v24;
              if (v25)
              {
                __int128 v26 = (unint64_t *)&v25->__shared_owners_;
                do
                  unint64_t v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
              }

              char v28 = (std::__shared_weak_count *)*((void *)&v56 + 1);
              if (*((void *)&v56 + 1))
              {
                char v29 = (unint64_t *)(*((void *)&v56 + 1) + 8LL);
                do
                  unint64_t v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }

              sub_10001C610(&v60, (uint64_t *)&v59);
            }

            if (a3 == 1 || (const void *)v16[5] == v57)
            {
              unsigned int v54 = *((_DWORD *)v16 + 8);
              __int128 v56 = v60;
              if (*((void *)&v60 + 1))
              {
                __int128 v36 = (unint64_t *)(*((void *)&v60 + 1) + 8LL);
                do
                  unint64_t v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
              }

              v63 = &v54;
              int v38 = sub_10001E2F8((uint64_t **)(v12 + 16), &v54, (uint64_t)&unk_1001447DC, &v63);
              sub_10001C610(v38 + 5, (uint64_t *)&v56);
              uint64_t v33 = (std::__shared_weak_count *)*((void *)&v56 + 1);
              if (!*((void *)&v56 + 1)) {
                goto LABEL_48;
              }
              uint64_t v39 = (unint64_t *)(*((void *)&v56 + 1) + 8LL);
              do
                unint64_t v35 = __ldaxr(v39);
              while (__stlxr(v35 - 1, v39));
            }

            else
            {
              __int128 v56 = v60;
              if (*((void *)&v60 + 1))
              {
                uint64_t v31 = (unint64_t *)(*((void *)&v60 + 1) + 8LL);
                do
                  unint64_t v32 = __ldxr(v31);
                while (__stxr(v32 + 1, v31));
              }

              sub_10011EFD4((uint64_t)(v16 + 5), &v57, (uint64_t *)&v56);
              uint64_t v33 = (std::__shared_weak_count *)*((void *)&v56 + 1);
              if (!*((void *)&v56 + 1)) {
                goto LABEL_48;
              }
              __int16 v34 = (unint64_t *)(*((void *)&v56 + 1) + 8LL);
              do
                unint64_t v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
            }

            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }

void sub_10009CA40(_Unwind_Exception *a1)
{
}

uint64_t sub_10009CAB0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 168);
  uint64_t v2 = (void *)(a1 + 176);
  if (v1 == (void *)(a1 + 176)) {
    return 1LL;
  }
  do
  {
    sub_10011EBCC((uint64_t)(v1 + 5), &v13);
    uint64_t v3 = v1[5];
    uint64_t v5 = v13;
    unsigned __int8 v4 = v14;
    BOOL v6 = v3 == v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    if (v3 != v5) {
      break;
    }
    uint64_t v9 = (void *)v1[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)*v9;
      }

      while (v9);
    }

    else
    {
      do
      {
        uint64_t v10 = (void *)v1[2];
        BOOL v11 = *v10 == (void)v1;
        uint64_t v1 = v10;
      }

      while (!v11);
    }

    uint64_t v1 = v10;
  }

  while (v10 != v2);
  return v6;
}

void *sub_10009CB8C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  BOOL v6 = (char *)operator new(0x18uLL);
  uint64_t v7 = *a2;
  *a2 = 0LL;
  __int128 v8 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  unint64_t v9 = *(void *)(a1 + 24);
  *(void *)BOOL v6 = v7;
  *(_OWORD *)(v6 + _Block_object_dispose(va, 8) = v8;
  uint64_t v10 = *(void **)(a1 + 16);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = ((uint64_t)v10 - v12) >> 3;
    uint64_t v14 = v9 - v12;
    uint64_t v15 = v14 >> 2;
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      __int128 v17 = (char *)sub_1000450A4(a1 + 24, v16);
    }
    else {
      __int128 v17 = 0LL;
    }
    uint64_t v18 = &v17[8 * v13];
    char v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = v6;
    BOOL v11 = v18 + 8;
    __int128 v21 = *(char **)(a1 + 8);
    unint64_t v20 = *(char **)(a1 + 16);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }

      while (v20 != v21);
      unint64_t v20 = *(char **)(a1 + 8);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v18;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v19;
    if (v20) {
      operator delete(v20);
    }
  }

  else
  {
    void *v10 = v6;
    BOOL v11 = v10 + 1;
  }

  *(void *)(a1 + 16) = v11;
  uint64_t result = v11 - 1;
  ++*(_DWORD *)a1;
  return result;
}

uint64_t sub_10009CCA0(void *a1, uint64_t a2)
{
  unsigned __int8 v4 = sub_1000465AC();
  unint64_t v57 = (*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1);
  uint64_t v5 = (*(void *(**)(void *__return_ptr))(*(void *)*a1 + 72LL))(v89);
  else {
    unint64_t v6 = v89[0];
  }
  int v7 = *((_DWORD *)v4 + 2);
  if (v7 == 1)
  {
    unsigned int v8 = ((uint64_t (*)(void *))*v4)(v5);
  }

  else
  {
    if (v7) {
      sub_100026264();
    }
    unsigned int v8 = *(_DWORD *)v4;
  }

  unint64_t v9 = (unint64_t)v4[3] / v6;
  else {
    uint64_t v10 = v9;
  }
  (*(void (**)(void *__return_ptr))(*(void *)*a1 + 72LL))(v89);
  uint64_t v56 = v90 + v6;
  sub_1000FFFE4((uint64_t)v89, v90 + v6, 0, v10);
  uint64_t v85 = 0LL;
  v86 = 0LL;
  uint64_t v11 = a1[1];
  uint64_t v12 = sub_1000F745C(v11);
  BOOL v55 = v13;
  uint64_t v14 = (void *)v12;
  if (*((_DWORD *)a1 + 71))
  {
    int v15 = sub_10009C480((uint64_t)a1, (void *)(v11 + 32));
    *((_DWORD *)a1 + 71) = v15;
  }

  else
  {
    int v15 = 0;
  }

  int v16 = *((_DWORD *)a1 + 70);
  int v17 = sub_10009CAB0(*a1);
  if (v17)
  {
    a1[35] = vbic_s8((int8x8_t)0x200000002LL, (int8x8_t)vceqz_s32((int32x2_t)a1[35]));
    int v18 = 2;
  }

  else
  {
    int v18 = v16 | v15;
  }

  sub_10009C600(a1, v56, v18, v10, (uint64_t)v88);
  sub_10004D810(a2, v10, (uint64_t)v87);
  uint64_t v19 = a1[9];
  unsigned int v84 = 0;
  unint64_t v20 = *(void **)(v11 + 32);
  if (v20 != (void *)(v11 + 40) && v14 != v55)
  {
    unint64_t v21 = (v57 + v6 - 1) / v57;
    while ((unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v20[6] & 1) + v20[5] - 1)
    {
LABEL_23:
      uint64_t v22 = (void *)v20[1];
      if (v22)
      {
        do
        {
          unint64_t v23 = v22;
          uint64_t v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          unint64_t v23 = (void *)v20[2];
          BOOL v47 = *v23 == (void)v20;
          unint64_t v20 = v23;
        }

        while (!v47);
      }

      if (v23 != (void *)(v11 + 40))
      {
        v19 += 184LL;
        unint64_t v20 = v23;
        if (v14 != v55) {
          continue;
        }
      }

      goto LABEL_83;
    }

    __int128 v24 = v14;
    while (1)
    {
      __int128 v79 = *((_OWORD *)v20 + 2);
      uint64_t v80 = v20[6];
      sub_100063880((unint64_t *)&v79, v24 + 4, (uint64_t)&v81);
      unint64_t v25 = v81;
      if ((v83 & 2) == 0) {
        unint64_t v25 = v81 + 1;
      }
LABEL_69:
      v46 = (void *)v24[1];
      if (v46)
      {
        do
        {
          uint64_t v14 = v46;
          v46 = (void *)*v46;
        }

        while (v46);
      }

      else
      {
        do
        {
          uint64_t v14 = (void *)v24[2];
          BOOL v47 = *v14 == (void)v24;
          __int128 v24 = v14;
        }

        while (!v47);
      }

      BOOL v47 = (unint64_t)(v14[6] & 1) + v14[5] - 1 > (unint64_t)(v20[6] & 1) + v20[5] - 1 || v14 == v55;
      __int128 v24 = v14;
      if (v47) {
        goto LABEL_23;
      }
    }

    while (!atomic_load(&v84))
    {
      unint64_t v27 = v25 + v21;
      v75[0] = v25;
      v75[1] = v25 + v21;
      char v76 = 2;
      sub_100063880(v75, &v81, (uint64_t)&v77);
      if (v18 == 1)
      {
        uint64_t v73 = v85;
        v74 = v86;
        if (v86)
        {
          p_shared_owners = (unint64_t *)&v86->__shared_owners_;
          do
            unint64_t v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
      }

      else
      {
        sub_100100090((uint64_t)v89, &v73);
      }

      sub_10009D340((uint64_t)v88, &v71);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 1174405120LL;
      v58[2] = sub_10009D494;
      v58[3] = &unk_100184F88;
      __int128 v59 = v77;
      uint64_t v60 = v78;
      v58[4] = a1;
      unint64_t v61 = v57;
      uint64_t v62 = v73;
      v63 = v74;
      if (v74)
      {
        unint64_t v30 = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }

      uint64_t v64 = v56;
      uint64_t v65 = v71;
      v66 = v72;
      if (v72)
      {
        unint64_t v32 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }

      int v69 = v18;
      v67 = &v84;
      uint64_t v68 = v19;
      char v70 = v17;
      sub_10004D630(v87, v58);
      __int16 v34 = v66;
      if (v66)
      {
        unint64_t v35 = (unint64_t *)&v66->__shared_owners_;
        do
          unint64_t v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }

      unint64_t v37 = v63;
      if (v63)
      {
        int v38 = (unint64_t *)&v63->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      __int128 v40 = v72;
      if (v72)
      {
        uint64_t v41 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      uint64_t v43 = v74;
      if (v74)
      {
        __int128 v44 = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      unint64_t v25 = v27;
    }

    uint64_t v48 = a1[9];
    for (uint64_t i = a1[10]; v48 != i; v48 += 184LL)
    {
      *(_BYTE *)(v48 + 176) = 1;
      sub_10009FE10(v48 + 16);
    }

    *((_BYTE *)a1 + 272) = 1;
    sub_10009FE10((uint64_t)(a1 + 14));
  }

void sub_10009D2B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_10009D340(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(_BYTE *)(a1 + 144)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v13 = 0LL;
    __int128 v12 = 0uLL;
    sub_10009CB8C(a1, &v13, &v12);
    int v7 = (std::__shared_weak_count *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1))
    {
      unsigned int v8 = (unint64_t *)(*((void *)&v12 + 1) + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    uint64_t v10 = v13;
    uint64_t v13 = 0LL;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 40LL))(v10);
    }
    uint64_t v4 = *(void *)(a1 + 16);
  }

  else if (v5 == v4)
  {
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
      uint64_t v4 = *(void *)(a1 + 16);
    }

    while (*(void *)(a1 + 8) == v4);
  }

  uint64_t v11 = *(void *)(v4 - 8);
  *(void *)(a1 + 16) = v4 - 8;
  sub_10009FE58(a2, v11, a1);
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_10009D450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  uint64_t v15 = a12;
  a12 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 40LL))(v15);
  }
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void sub_10009D494(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = (*(void *)(a1 + 48) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v5;
  if ((v2 & 2) != 0) {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v7 = v3 + 1;
  }
  uint64_t v8 = v7 * v5;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v119 = *(void *)(a1 + 72);
  v120 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  unint64_t v121 = v6;
  uint64_t v122 = v8;
  uint64_t v123 = v9;
  char v124 = 0;
  uint64_t v13 = *(uint64_t **)(a1 + 96);
  sub_10003DA2C(&v119, (uint64_t *)&v131);
  sub_10003BD04((uint64_t)v136, (uint64_t)&v128);
  sub_10003BA04((uint64_t)v136, (uint64_t)&v125);
  uint64_t v14 = sub_100005380(*v13);
  uint64_t v16 = v15;
  int v17 = v127;
  if (v127)
  {
    int v18 = (unint64_t *)&v127->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = v126;
  if (v126)
  {
    unint64_t v21 = (unint64_t *)&v126->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  unint64_t v23 = v130;
  if (v130)
  {
    __int128 v24 = (unint64_t *)&v130->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  __int128 v26 = (std::__shared_weak_count *)*((void *)&v128 + 1);
  if (*((void *)&v128 + 1))
  {
    unint64_t v27 = (unint64_t *)(*((void *)&v128 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  unint64_t v29 = v143;
  if (v143)
  {
    unint64_t v30 = (unint64_t *)&v143->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  unint64_t v32 = v142;
  if (v142)
  {
    unint64_t v33 = (unint64_t *)&v142->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  unint64_t v35 = v141;
  if (v141)
  {
    unint64_t v36 = (unint64_t *)&v141->__shared_owners_;
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  int v38 = v140;
  if (v140)
  {
    unint64_t v39 = (unint64_t *)&v140->__shared_owners_;
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  uint64_t v41 = v139;
  if (v139)
  {
    unint64_t v42 = (unint64_t *)&v139->__shared_owners_;
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  __int128 v44 = v137;
  if (v137)
  {
    unint64_t v45 = (unint64_t *)&v137->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  if (v134 && &v135 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)&v131);
  if ((v14 & 0x8000000000000000LL) == 0 || !(_DWORD)v14)
  {
    uint64_t v47 = *(void *)(a1 + 80);
    *(void *)&__int128 v128 = *(void *)(a1 + 72) + v8 - v16;
    *((void *)&v128 + 1) = v47;
    if (v47)
    {
      uint64_t v48 = (unint64_t *)(v47 + 8);
      do
        unint64_t v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }

    uint64_t v50 = 0LL;
    unint64_t v51 = *(void *)(a1 + 64);
    unint64_t v52 = v122;
    if (v121 <= v51) {
      unint64_t v53 = *(void *)(a1 + 64);
    }
    else {
      unint64_t v53 = v121;
    }
    if (v121) {
      unint64_t v54 = v53;
    }
    else {
      unint64_t v54 = 0LL;
    }
    unint64_t v55 = v51 + v122 + v54 - 1;
    uint64_t v125 = 0LL;
    v126 = 0LL;
    if ((*(_BYTE *)(a1 + 128) & 1) != 0 && v8 == v16)
    {
      uint64_t v56 = *(void *)(a1 + 96);
      uint64_t v57 = *(void *)(v56 + 8);
      uint64_t v58 = *(void *)(v57 + 72);
      *(void *)&__int128 v131 = *(void *)(v57 + 64);
      *((void *)&v131 + 1) = v58;
      if (v58)
      {
        __int128 v59 = (unint64_t *)(v58 + 8);
        do
          unint64_t v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        unint64_t v61 = (std::__shared_weak_count *)*((void *)&v131 + 1);
        *(_OWORD *)v132 = *(_OWORD *)(v57 + 80);
        *(_OWORD *)&v132[9] = *(_OWORD *)(v57 + 89);
        if (*((void *)&v131 + 1))
        {
          uint64_t v62 = (unint64_t *)(*((void *)&v131 + 1) + 8LL);
          do
            unint64_t v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }

      sub_10001C610(&v125, (uint64_t *)&v131);
      uint64_t v64 = *(void *)(v56 + 8);
      uint64_t v65 = *(std::__shared_weak_count **)(v64 + 72);
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          unint64_t v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        uint64_t v50 = *(void *)(v64 + 80);
        do
          unint64_t v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }

      else
      {
        uint64_t v50 = *(void *)(v64 + 80);
      }
    }

    int v69 = *(_DWORD *)(v4 + 284);
    uint64_t v70 = v50;
    if (v69 != 1)
    {
      if (v69 != 2) {
        goto LABEL_120;
      }
      uint64_t v70 = v6;
    }

    if (v70)
    {
      uint64_t v71 = *(void *)(a1 + 120);
      if (v69 == 2)
      {
        uint64_t v73 = (std::__shared_weak_count *)*((void *)&v128 + 1);
        v117 = (std::__shared_weak_count *)*((void *)&v128 + 1);
        uint64_t v72 = v128;
        if (*((void *)&v128 + 1))
        {
          char v76 = (unint64_t *)(*((void *)&v128 + 1) + 8LL);
          do
            unint64_t v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
      }

      else
      {
        uint64_t v72 = v125;
        uint64_t v73 = v126;
        v117 = v126;
        if (v126)
        {
          v74 = (unint64_t *)&v126->__shared_owners_;
          do
            unint64_t v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
      }

      int v78 = *(_DWORD *)(v4 + 284);
      if (v78 == 1) {
        uint64_t v79 = v50;
      }
      else {
        uint64_t v79 = 0LL;
      }
      if (v78 == 2) {
        uint64_t v80 = v6;
      }
      else {
        uint64_t v80 = v79;
      }
      *(void *)&__int128 v131 = v52 / v51;
      *((void *)&v131 + 1) = v55 / v51;
      v132[0] = 2;
      *(void *)&v132[8] = v72;
      *(void *)&v132[16] = v73;
      if (v73)
      {
        unint64_t v81 = (unint64_t *)&v73->__shared_owners_;
        do
          unint64_t v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }

      *(void *)&v132[24] = v80;
      sub_10009DEA4(v71, &v131);
      char v83 = *(std::__shared_weak_count **)&v132[16];
      if (*(void *)&v132[16])
      {
        unsigned int v84 = (unint64_t *)(*(void *)&v132[16] + 8LL);
        do
          unint64_t v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }

      if (v117)
      {
        v86 = (unint64_t *)&v117->__shared_owners_;
        do
          unint64_t v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
    }

LABEL_120:
    int v88 = *(_DWORD *)(v4 + 280);
    uint64_t v89 = v50;
    if (v88 != 1)
    {
      if (v88 != 2)
      {
LABEL_151:
        if (!*(_BYTE *)(a1 + 132)) {
          sub_10001F3CC(*(void *)(*(void *)(a1 + 96) + 8LL));
        }
        v106 = v126;
        if (v126)
        {
          v107 = (unint64_t *)&v126->__shared_owners_;
          do
            unint64_t v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }

        v109 = (std::__shared_weak_count *)*((void *)&v128 + 1);
        if (*((void *)&v128 + 1))
        {
          v110 = (unint64_t *)(*((void *)&v128 + 1) + 8LL);
          do
            unint64_t v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }

        goto LABEL_163;
      }

      uint64_t v89 = v6;
    }

    if (v89)
    {
      if (v88 == 2)
      {
        v91 = (std::__shared_weak_count *)*((void *)&v128 + 1);
        v118 = (std::__shared_weak_count *)*((void *)&v128 + 1);
        uint64_t v90 = v128;
        if (*((void *)&v128 + 1))
        {
          v94 = (unint64_t *)(*((void *)&v128 + 1) + 8LL);
          do
            unint64_t v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
      }

      else
      {
        uint64_t v90 = v125;
        v91 = v126;
        v118 = v126;
        if (v126)
        {
          v92 = (unint64_t *)&v126->__shared_owners_;
          do
            unint64_t v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
      }

      int v96 = *(_DWORD *)(v4 + 280);
      if (v96 == 1) {
        uint64_t v97 = v50;
      }
      else {
        uint64_t v97 = 0LL;
      }
      if (v96 == 2) {
        uint64_t v98 = v6;
      }
      else {
        uint64_t v98 = v97;
      }
      *(void *)&__int128 v131 = v52 / v51;
      *((void *)&v131 + 1) = v55 / v51;
      v132[0] = 2;
      *(void *)&v132[8] = v90;
      *(void *)&v132[16] = v91;
      if (v91)
      {
        v99 = (unint64_t *)&v91->__shared_owners_;
        do
          unint64_t v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }

      *(void *)&v132[24] = v98;
      sub_10009DEA4(v4 + 96, &v131);
      v101 = *(std::__shared_weak_count **)&v132[16];
      if (*(void *)&v132[16])
      {
        v102 = (unint64_t *)(*(void *)&v132[16] + 8LL);
        do
          unint64_t v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }

      if (v118)
      {
        v104 = (unint64_t *)&v118->__shared_owners_;
        do
          unint64_t v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
    }

    goto LABEL_151;
  }

  v115 = *(unsigned int **)(a1 + 112);
  while (!__ldaxr(v115))
  {
    if (!__stlxr(v14, v115))
    {
      *(void *)&__int128 v128 = "details::udif_verify::calculate_checksums(workqueue::workqueue &)_block_invoke";
      *((void *)&v128 + 1) = 41LL;
      int v129 = 16;
      sub_10009DDBC(&v131, &v128);
      sub_10000552C(&v138, (uint64_t)"Error reading sectors for verify ", 33LL);
      std::ostream::operator<<(&v138, v14);
      sub_10009DE64((uint64_t)&v131);
      goto LABEL_163;
    }
  }

  __clrex();
LABEL_163:
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      unint64_t v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

void sub_10009DD18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void *sub_10009DDBC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000A0074((uint64_t)a1, a2);
  *a1 = off_100185110;
  a1[45] = &off_100185210;
  a1[46] = &off_100185238;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100185110;
  a1[45] = off_100185198;
  a1[46] = off_1001851C0;
  return a1;
}

void sub_10009DE40(_Unwind_Exception *a1)
{
}

uint64_t sub_10009DE64(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009DEA4(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = (std::mutex *)(a1 + 16);
  __int128 v50 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v51 = *((void *)a2 + 2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 4);
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0LL;
  unint64_t v52 = v5;
  uint64_t v7 = v50;
  int v53 = *(_DWORD *)((char *)&v51 + 1);
  HIBYTE(v53) = BYTE4(v51);
  std::mutex::lock((std::mutex *)(a1 + 16));
  if (*(_BYTE *)(a1 + 168))
  {
    std::mutex::unlock(v3);
  }

  else
  {
    *(_OWORD *)unint64_t v55 = v50;
    v55[16] = v51;
    *(_DWORD *)&v55[17] = v53;
    *(_DWORD *)&v55[20] = HIDWORD(v51);
    uint64_t v56 = a1;
    __int128 v57 = v50;
    uint64_t v58 = v51;
    uint64_t v59 = v4;
    unint64_t v52 = 0LL;
    unint64_t v60 = v5;
    uint64_t v61 = v6;
    sub_1000A00F0((uint64_t **)(a1 + 88), (unint64_t *)v55, (uint64_t)v55);
    uint64_t v8 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    if ((v51 & 2) == 0) {
      uint64_t v7 = v50 + 1;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    std::mutex::unlock(v3);
    if (v7 == v11)
    {
      unint64_t v12 = (uint64_t *)(a1 + 96);
      while (1)
      {
        *(void *)unint64_t v55 = &v56;
        *(_OWORD *)&v55[8] = xmmword_100142520;
        std::mutex::lock(v3);
        uint64_t v13 = *(uint64_t **)(a1 + 88);
        unint64_t v14 = *(void *)(a1 + 160);
        if (v13 != v12)
        {
          uint64_t v15 = *(void **)(a1 + 144);
          uint64_t v16 = *(void **)(a1 + 112);
          int v17 = *(uint64_t **)(a1 + 88);
          while (v16 != v15)
          {
            uint64_t v18 = v17[4];
            if ((v17[6] & 2) == 0) {
              ++v18;
            }
            if (v18 != v14) {
              break;
            }
            unint64_t v14 = v17[5] + (v17[6] & 1);
            for (uint64_t i = (v16[6] & 1) + v16[5]; v14 > i - 1; uint64_t i = (v16[6] & 1) + v16[5])
            {
              unint64_t v20 = (void *)v16[1];
              unint64_t v21 = v16;
              if (v20)
              {
                do
                {
                  uint64_t v16 = v20;
                  unint64_t v20 = (void *)*v20;
                }

                while (v20);
              }

              else
              {
                do
                {
                  uint64_t v16 = (void *)v21[2];
                  BOOL v22 = *v16 == (void)v21;
                  unint64_t v21 = v16;
                }

                while (!v22);
              }

              *(void *)(a1 + 112) = v16;
              if (v16 == v15)
              {
                uint64_t v16 = v15;
                break;
              }

              if ((v16[6] & 2) != 0) {
                unint64_t v14 = v16[4];
              }
              else {
                unint64_t v14 = v16[4] + 1LL;
              }
            }

            unint64_t v23 = (uint64_t *)v17[1];
            if (v23)
            {
              do
              {
                __int128 v24 = v23;
                unint64_t v23 = (uint64_t *)*v23;
              }

              while (v23);
            }

            else
            {
              do
              {
                __int128 v24 = (uint64_t *)v17[2];
                BOOL v22 = *v24 == (void)v17;
                int v17 = v24;
              }

              while (!v22);
            }

            int v17 = v24;
            if (v24 == v12)
            {
              int v17 = (uint64_t *)(a1 + 96);
              break;
            }
          }

          if (v13 != v17)
          {
            uint64_t v25 = 0LL;
            __int128 v26 = v13;
            do
            {
              unint64_t v27 = v25;
              unint64_t v28 = (uint64_t *)v26[1];
              if (v28)
              {
                do
                {
                  unint64_t v29 = v28;
                  unint64_t v28 = (uint64_t *)*v28;
                }

                while (v28);
              }

              else
              {
                do
                {
                  unint64_t v29 = (uint64_t *)v26[2];
                  BOOL v22 = *v29 == (void)v26;
                  __int128 v26 = v29;
                }

                while (!v22);
              }

              ++v25;
              __int128 v26 = v29;
            }

            while (v29 != v17);
            if (*(void *)&v55[16] <= v27)
            {
              if (v27 >= 0x249249249249249LL) {
                sub_10001A548("get_next_capacity, allocator's max size reached");
              }
              unint64_t v30 = operator new(56 * v25);
              sub_1000A0298((uint64_t *)v55, (uint64_t)v30, v25, *(void *)v55 + 56LL * *(void *)&v55[8], 0LL, 0LL);
            }

            do
            {
              uint64_t v31 = *(void *)v55;
              uint64_t v32 = *(void *)&v55[8];
              unint64_t v33 = (void *)(*(void *)v55 + 56LL * *(void *)&v55[8]);
              if (*(void *)&v55[8] == *(void *)&v55[16])
              {
                sub_1000A0438((uint64_t *)v55, (uint64_t)v33, 1LL, (uint64_t)(v13 + 7), v54);
              }

              else
              {
                *unint64_t v33 = v13[7];
                uint64_t v34 = v31 + 56 * v32;
                __int128 v35 = *((_OWORD *)v13 + 4);
                *(void *)(v34 + 24) = v13[10];
                *(_OWORD *)(v34 + _Block_object_dispose(va, 8) = v35;
                *(_OWORD *)(v34 + 32) = *(_OWORD *)(v13 + 11);
                v13[11] = 0LL;
                v13[12] = 0LL;
                *(void *)(v34 + 4_Block_object_dispose(va, 8) = v13[13];
                ++*(void *)&v55[8];
              }

              unint64_t v36 = sub_10000D0E4((uint64_t **)(a1 + 88), v13);
              sub_100006224((uint64_t)(v13 + 11));
              operator delete(v13);
              uint64_t v13 = v36;
            }

            while (v17 != v36);
          }
        }

        std::mutex::unlock(v3);
        if (*(void *)&v55[8])
        {
          unint64_t v37 = *(uint64_t **)v55;
          uint64_t v38 = *(void *)v55 + 56LL * *(void *)&v55[8];
          do
          {
            uint64_t v39 = *v37;
            uint64_t v40 = v37[6];
            v54[0] = v37[4];
            v54[1] = v40;
            sub_100029BE8(v39, (uint64_t)v54);
            v37 += 7;
          }

          while (v37 != (uint64_t *)v38);
          uint64_t v41 = *(void *)&v55[8];
          if (*(void *)&v55[8])
          {
            uint64_t v42 = *(void *)v55 + 32LL;
            do
            {
              --v41;
              uint64_t v42 = sub_100006224(v42) + 56;
            }

            while (v41);
          }
        }

        *(void *)&v55[8] = 0LL;
        std::mutex::lock(v3);
        *(void *)(a1 + 160) = v14;
        uint64_t v43 = *(void *)(a1 + 88);
        char v44 = *(_BYTE *)(v43 + 48);
        uint64_t v45 = *(void *)(v43 + 32);
        if ((v44 & 2) != 0) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = v45 + 1;
        }
        std::mutex::unlock(v3);
        if (v46 != v14) {
          goto LABEL_68;
        }
        sub_100020D34((uint64_t)v55);
      }

      std::mutex::unlock(v3);
LABEL_68:
      sub_100020D34((uint64_t)v55);
    }
  }

  if (v52)
  {
    uint64_t v47 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }

  return a1;
}

void sub_10009E398( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
}

void *sub_10009E3F4(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  uint64_t v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return result;
}

uint64_t sub_10009E438(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100006224(a1 + 96);
  return sub_100006224(v1);
}

const void **sub_10009E460@<X0>(uint64_t a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_10009E4EC, Mutable);
  *a2 = Mutable;
  return sub_10000D8A4((const void **)&theDict);
}

void sub_10009E4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10009E4EC(const __CFString *a1, const void *a2, __CFDictionary *a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v7 = TypeID;
    if (CFGetTypeID(a1) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v15 = CFGetTypeID(a1);
LABEL_16:
      uint64_t v16 = exception;
      uint64_t v17 = v7;
      goto LABEL_17;
    }
  }

  int v8 = sub_1000FE8B0(a1);
  switch(v8)
  {
    case 1651272568:
      return;
    case 1886155636:
      return;
    case 1970628964:
      return;
  }

  CFTypeID v9 = CFArrayGetTypeID();
  if (!a2) {
    return;
  }
  CFTypeID v7 = v9;
  if (CFGetTypeID(a2) != v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFTypeID v15 = CFGetTypeID(a2);
    goto LABEL_16;
  }

  if (CFArrayGetCount((CFArrayRef)a2) >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, 0LL);
    CFTypeID v11 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      CFTypeID v12 = v11;
      if (CFGetTypeID(ValueAtIndex) != v11)
      {
LABEL_19:
        unint64_t v19 = __cxa_allocate_exception(0x40uLL);
        CFTypeID v15 = CFGetTypeID(ValueAtIndex);
        uint64_t v16 = v19;
        uint64_t v17 = v12;
LABEL_17:
        uint64_t v18 = sub_10000A374(v16, v15, v17);
      }

      ValueAtIndex = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Data");
      CFTypeID v13 = CFDataGetTypeID();
      if (ValueAtIndex)
      {
        CFTypeID v12 = v13;
        if (CFGetTypeID(ValueAtIndex) == v13)
        {
          CFDictionaryAddValue(a3, a1, ValueAtIndex);
          return;
        }

        goto LABEL_19;
      }
    }
  }

void sub_10009E6A4(_Unwind_Exception *a1)
{
}

const void **sub_10009E6C4(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1 + 64;
  sub_1000F8100(a1 + 64, &theDict);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
  CFMutableDictionaryRef v14 = MutableCopy;
  if (!MutableCopy)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    unint64_t v10 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "Failed creating CFAutoRelease instance.";
  }

  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_10009BB88, MutableCopy);
  unint64_t v6 = sub_1000F4DC8(v4, v14);
  unsigned int v7 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 48) + 56LL))(*(void *)(a1 + 48), v6);
  if (v7)
  {
    CFTypeID v11 = "UDIFDiskImage: failed truncating image";
    goto LABEL_8;
  }

  unsigned int v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 2LL);
  if (v7)
  {
    CFTypeID v11 = "UDIFDiskImage: failed flush after user data write";
LABEL_8:
    CFTypeID v12 = __cxa_allocate_exception(0x40uLL);
    void *v12 = &off_100196FC8;
    CFTypeID v13 = std::generic_category();
    v12[1] = v7;
    v12[2] = v13;
    *((_BYTE *)v12 + 24) = 0;
    *((_BYTE *)v12 + 4_Block_object_dispose(va, 8) = 0;
    v12[7] = v11;
  }

  sub_100006B34((const void **)&v14);
  return sub_10000D8A4((const void **)&theDict);
}

void sub_10009E840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10009E870(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 64;
  if (a3)
  {
    sub_10009C3D0((uint64_t)v9, a1, v5, 3);
  }

  else
  {
    sub_10009C0F4((uint64_t)v9, a1, v5);
    if (!sub_10009CCA0(v9, a2))
    {
LABEL_6:
      uint64_t v6 = sub_10009BDDC((uint64_t)v9);
      goto LABEL_7;
    }
  }

  uint64_t v6 = 0LL;
LABEL_7:
  sub_10009ED58((uint64_t)v12, v12[1]);
  std::mutex::~mutex(&v11);
  int v8 = (void **)&v10;
  sub_10009EDA0(&v8);
  return v6;
}

void sub_10009E95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10009E97C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[5];
  uint64_t v4 = (void *)result[8];
  uint64_t v3 = (void *)result[9];
  if (v4 == v3)
  {
LABEL_9:
    int v8 = 0;
    int v9 = 1;
    uint64_t v4 = v3;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v5 = v4[5];
    if (v2 <= (v4[6] & 1) + v5 - 1) {
      break;
    }
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        unsigned int v7 = v6;
        uint64_t v6 = (void *)*v6;
      }

      while (v6);
    }

    else
    {
      do
      {
        unsigned int v7 = (void *)v4[2];
        BOOL v16 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }

      while (!v16);
    }

    result[8] = v7;
    uint64_t v4 = v7;
    if (v7 == v3) {
      goto LABEL_9;
    }
  }

  unint64_t v10 = v4[4];
  if ((v4[6] & 2) != 0)
  {
    if (v2 < v10) {
      goto LABEL_20;
    }
  }

  else if (v10 >= v2)
  {
    goto LABEL_20;
  }

  if ((v4[6] & 1) != 0)
  {
    if (v5 >= v2) {
      goto LABEL_18;
    }
LABEL_20:
    int v8 = 0;
    int v9 = 1;
    goto LABEL_21;
  }

  if (v2 >= v5) {
    goto LABEL_20;
  }
LABEL_18:
  int v11 = *((_DWORD *)v4 + 14);
  if (v11 != 1 && (v11 & 0xFF000000) != 0x80000000) {
    goto LABEL_20;
  }
  int v9 = 0;
  int v8 = 1;
LABEL_21:
  unint64_t v12 = result[3];
  unint64_t v13 = v2;
  if (v2 < v12)
  {
    unint64_t v13 = v2;
    do
    {
      unint64_t v14 = v12;
      if (v4 == v3) {
        goto LABEL_27;
      }
      unint64_t v14 = v4[4];
      if ((v4[6] & 2) == 0) {
        ++v14;
      }
      if (v14 > v13)
      {
LABEL_27:
        if ((v8 & 1) != 0) {
          break;
        }
      }

      else
      {
        if (v8)
        {
          int v15 = *((_DWORD *)v4 + 14);
          BOOL v16 = v15 == 1 || (v15 & 0xFF000000) == 0x80000000;
          if (!v16) {
            break;
          }
        }

        if (v9)
        {
          int v17 = *((_DWORD *)v4 + 14);
          if (v17 == 1 || (v17 & 0xFF000000) == 0x80000000) {
            break;
          }
        }

        uint64_t v18 = (void *)v4[1];
        unint64_t v19 = v4;
        if (v18)
        {
          do
          {
            unint64_t v20 = v18;
            uint64_t v18 = (void *)*v18;
          }

          while (v18);
        }

        else
        {
          do
          {
            unint64_t v20 = (void *)v19[2];
            BOOL v16 = *v20 == (void)v19;
            unint64_t v19 = v20;
          }

          while (!v16);
        }

        unint64_t v14 = (v4[6] & 1) + v4[5];
        result[8] = v20;
        uint64_t v4 = v20;
      }

      unint64_t v13 = v14;
    }

    while (v14 < v12);
  }

  *(void *)a2 = v2;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v13;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = v8;
  return result;
}

__n128 sub_10009EB34@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x50uLL);
  *(_OWORD *)(v4 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  *(void *)uint64_t v4 = off_100184FC8;
  __n128 result = *(__n128 *)(a1 + 48);
  __int128 v6 = *(_OWORD *)(a1 + 64);
  *((__n128 *)v4 + 3) = result;
  *((_OWORD *)v4 + 4) = v6;
  *a2 = v4;
  return result;
}

void *sub_10009EB94(void *a1)
{
  *a1 = &off_10017A820;
  uint64_t v2 = (uint64_t)(a1 + 6);
  sub_100019D3C((uint64_t)(a1 + 8));
  sub_100006224(v2);
  return a1;
}

void sub_10009EBD4(void *a1)
{
  *a1 = &off_10017A820;
  uint64_t v2 = (uint64_t)(a1 + 6);
  sub_100019D3C((uint64_t)(a1 + 8));
  sub_100006224(v2);
  operator delete(a1);
}

uint64_t sub_10009EC14()
{
  return 0LL;
}

uint64_t sub_10009EC1C@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  __int128 v6 = operator new(0x120uLL);
  uint64_t result = sub_100039358((uint64_t)v6, a1, a2);
  *a3 = (char *)v6 + *(void *)(*v6 - 104LL);
  return result;
}

void sub_10009EC70(_Unwind_Exception *a1)
{
}

uint64_t sub_10009EC84()
{
  return 1LL;
}

uint64_t sub_10009EC8C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v12 = operator new(0x50uLL);
  v12[1] = *(_OWORD *)a4;
  *((void *)v12 + 4) = *(void *)(a4 + 16);
  *((void *)v12 + 5) = a5;
  *((void *)v12 + 6) = a1;
  *((void *)v12 + 7) = a3;
  *(void *)unint64_t v12 = off_100184FC8;
  *((void *)v12 + 1) = a2;
  *((void *)v12 + _Block_object_dispose(va, 8) = 0LL;
  *((void *)v12 + 9) = 0LL;
  uint64_t result = sub_1000F7414(a1 + 64, (uint64_t)(v12 + 1));
  *((void *)v12 + _Block_object_dispose(va, 8) = result;
  *((void *)v12 + 9) = v14;
  *a6 = v12;
  return result;
}

void sub_10009ED18(_Unwind_Exception *a1)
{
}

uint64_t sub_10009ED2C()
{
  return -78LL;
}

_BYTE ***sub_10009ED34(_BYTE ***result)
{
  **void *result = 1;
  return result;
}

_BYTE ***sub_10009ED48(_BYTE ***result)
{
  **void *result = 0;
  return result;
}

void sub_10009ED58(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10009ED58(a1, *a2);
    sub_10009ED58(a1, a2[1]);
    sub_100006224((uint64_t)(a2 + 11));
    operator delete(a2);
  }

void sub_10009EDA0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10009EDE0((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }

void sub_10009EDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 184;
      __int128 v6 = (std::mutex *)(v4 - 168);
      sub_10009ED58(v4 - 96, *(void **)(v4 - 88));
      std::mutex::~mutex(v6);
      uint64_t v4 = v5;
    }

    while (v5 != a2);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
}

uint64_t sub_10009EE40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7LL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642LL) {
    sub_100045090();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7LL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21LL) {
    unint64_t v9 = 0x1642C8590B21642LL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10009F068(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[184 * v4];
  BOOL v16 = &v10[184 * v9];
  sub_10009EF5C((uint64_t)v14, a2);
  int v15 = v14 + 184;
  sub_10009EFF4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10009F278((uint64_t)&v13);
  return v11;
}

void sub_10009EF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_10009EF5C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 850045863LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(a2 + 88);
  uint64_t v2 = (void *)(a2 + 96);
  uint64_t v3 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v3;
  uint64_t v4 = a1 + 96;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 8_Block_object_dispose(va, 8) = v2;
    *uint64_t v2 = 0LL;
    *(void *)(a2 + 104) = 0LL;
  }

  else
  {
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v4;
  }

  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  __n128 result = *(__n128 *)(a2 + 144);
  *(__n128 *)(a1 + 144) = result;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 16_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return result;
}

uint64_t sub_10009EFF4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10009F0B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10009F068(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643LL) {
    sub_100044D7C();
  }
  return operator new(184 * a2);
}

uint64_t sub_10009F0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184LL;
      sub_10009EF5C(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184LL;
      *((void *)&v15 + 1) -= 184LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10009F168((uint64_t)v12);
  return v10;
}

void sub_10009F154( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10009F168(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10009F19C((uint64_t *)a1);
  }
  return a1;
}

void sub_10009F19C(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_10009F210(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_10009F210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (std::mutex *)(i + 16);
    sub_10009ED58(i + 88, *(void **)(i + 96));
    std::mutex::~mutex(v6);
    uint64_t i = *(void *)(a2 + 32) + 184LL;
  }

uint64_t sub_10009F278(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10009F2AC(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    uint64_t v5 = (std::mutex *)(i - 168);
    sub_10009ED58(i - 96, *(void **)(i - 88));
    std::mutex::~mutex(v5);
  }

uint64_t sub_10009F30C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001851D8);
  sub_10009F4D0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10009F344(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001851D8);
  sub_10009F4D0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10009F384(char *a1)
{
}

uint64_t sub_10009F3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10009F3FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10009F448(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001851D8);
  sub_10009F4D0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10009F488(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001851D8);
  sub_10009F4D0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10009F4D0(uint64_t a1)
{
  *(void *)a1 = off_1001852A8;
  sub_10009F56C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10009F56C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10009F6D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10009F694( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009F6C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10009F4D0(a1);
  operator delete(v1);
}

int *sub_10009F6D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 337LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    char v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 337LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_10009F8B8(uint64_t a1, uint64_t a2)
{
  int v4 = v15;
  __int128 v9 = v20;
  __int128 v10 = v21;
  __int128 v11 = v22;
  __int128 v12 = v23;
  __int128 v5 = v16;
  __int128 v6 = v17;
  __int128 v7 = v18;
  __int128 v8 = v19;
  sub_1000F4B00((uint64_t)&v4, (uint64_t)v13);
  int v4 = &v14;
  *(void *)&__int128 v5 = (unint64_t)HIDWORD(v15) >> 3;
  sub_100029BE8(a1, (uint64_t)&v4);
  return a1;
}

uint64_t sub_10009F994(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
    unint64_t v3 = *(void *)a3;
  }
  else {
    unint64_t v3 = *(void *)a3 + 1LL;
  }
  __int128 v5 = (_OWORD *)(a2 + 144);
  int v4 = *(void **)(a2 + 144);
  __int128 v6 = *(void **)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  if (v6 != v4)
  {
    while (1)
    {
      unint64_t v8 = v6[4];
      if ((v6[6] & 2) == 0) {
        ++v8;
      }
      if (v8 >= v3) {
        break;
      }
      __int128 v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          __int128 v10 = v9;
          __int128 v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          __int128 v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          __int128 v6 = v10;
        }

        while (!v11);
      }

      __int128 v6 = v10;
      if (v10 == v4) {
        goto LABEL_29;
      }
    }
  }

  if (v6 == v4)
  {
LABEL_29:
    int v17 = *(_DWORD *)(a2 + 80);
    *(void *)(result + 96) = 0LL;
    *(void *)(result + 16) = 850045863LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 72) = 0LL;
    *(_DWORD *)(result + 80) = v17;
    *(void *)(result + 104) = 0LL;
    *(void *)(result + 8_Block_object_dispose(va, 8) = result + 96;
    *(_OWORD *)(result + 112) = *v5;
    *(_OWORD *)(result + 12_Block_object_dispose(va, 8) = *v5;
    *(_OWORD *)(result + 144) = *v5;
    *(_BYTE *)(result + 16_Block_object_dispose(va, 8) = 0;
    __int128 v6 = *(void **)(result + 112);
    if (v6 == *(void **)(result + 144)) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }

  __int128 v12 = v6;
  while (1)
  {
    unint64_t v13 = v12[4];
    if ((v12[6] & 2) == 0) {
      ++v13;
    }
    uint64_t v14 = (void *)v12[1];
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      do
      {
        uint64_t v15 = (void *)v12[2];
        BOOL v11 = *v15 == (void)v12;
        __int128 v12 = v15;
      }

      while (!v11);
    }

    __int128 v12 = v15;
    if (v15 == v4)
    {
      __int128 v12 = *(void **)(a2 + 144);
      break;
    }
  }

  int v16 = *(_DWORD *)(a2 + 80);
  *(void *)(result + 96) = 0LL;
  *(void *)(result + 16) = 850045863LL;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(void *)(result + 72) = 0LL;
  *(_DWORD *)(result + 80) = v16;
  *(void *)(result + 8_Block_object_dispose(va, 8) = result + 96;
  *(void *)(result + 104) = 0LL;
  *(void *)(result + 112) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 12_Block_object_dispose(va, 8) = v6;
  *(void *)(result + 136) = v7;
  *(void *)(result + 144) = v12;
  *(void *)(result + 152) = v7;
  *(_BYTE *)(result + 16_Block_object_dispose(va, 8) = 0;
  if (v6 != v12)
  {
LABEL_30:
    char v18 = *((_BYTE *)v6 + 48);
    uint64_t v19 = v6[4];
    if ((v18 & 2) == 0) {
      ++v19;
    }
    *(void *)(result + 160) = v19;
  }

LABEL_33:
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t sub_10009FB54(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 850045863LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 1018212795LL;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2) {
    sub_10009FC10((void **)(a1 + 8), a2);
  }
  return a1;
}

void sub_10009FBE4(_Unwind_Exception *a1)
{
  __int128 v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

void sub_10009FC10(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100045090();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    __int128 v6 = (char *)sub_1000450A4(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    __int128 v9 = &v6[8 * v8];
    BOOL v11 = (char *)*a1;
    __int128 v10 = (char *)a1[1];
    __int128 v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }

      while (v10 != v11);
      __int128 v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_10009FCA4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = *v2;
      if (*v2)
      {
        sub_100006224((uint64_t)(v4 + 1));
        uint64_t v5 = *v4;
        *int v4 = 0LL;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40LL))(v5);
        }
        operator delete(v4);
      }

      ++v2;
    }

    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
  }

  *(void *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  __int128 v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
    operator delete(v6);
  }

  return a1;
}

void sub_10009FD3C( uint64_t a1@<X1>, void *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  __int128 v10 = operator new(0x90uLL);
  sub_10009FDBC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10001C350((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_10009FDA8(_Unwind_Exception *a1)
{
}

void *sub_10009FDBC(void *a1, uint64_t a2, void *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001730D8;
  sub_10011F364(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_10009FDFC(_Unwind_Exception *a1)
{
}

void sub_10009FE10(uint64_t a1)
{
  *(_BYTE *)(a1 + 152) = 1;
  sub_10009ED58(a1 + 72, *(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  std::mutex::unlock((std::mutex *)a1);
}

void *sub_10009FE58(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  __int128 v6 = operator new(0x28uLL);
  *__int128 v6 = &off_100185328;
  v6[1] = 0LL;
  v6[2] = 0LL;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_10009FEB8(void *a1, uint64_t a2, ...)
{
}

void sub_10009FED0(_Unwind_Exception *a1)
{
}

void sub_10009FEE4(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = (std::mutex *)(*a1 + 32LL);
  std::mutex::lock(v4);
  uint64_t v5 = *(void **)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 8);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1000450A4(v3 + 24, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 8;
    int v17 = *(char **)(v3 + 8);
    int v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int v16 = *(char **)(v3 + 8);
    }

    *(void *)(v3 + _Block_object_dispose(va, 8) = v14;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    *uint64_t v5 = a2;
    uint64_t v7 = v5 + 1;
  }

  *(void *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_10009FFE4(_Unwind_Exception *a1)
{
}

void sub_10009FFFC(std::__shared_weak_count *a1)
{
}

void sub_1000A0010(uint64_t a1)
{
}

uint64_t sub_1000A0034(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1000A0074(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001852A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000A00DC(_Unwind_Exception *a1)
{
}

_OWORD *sub_1000A00F0(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  __int128 v5 = (void **)sub_1000A01C4((uint64_t)a1, &v12, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x70uLL);
    v10[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 24);
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((void *)v6 + 7) = v8;
    v6[4] = *(_OWORD *)(a3 + 32);
    *((void *)v6 + 10) = *(void *)(a3 + 48);
    *(_OWORD *)((char *)v6 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 56);
    *(void *)(a3 + 56) = 0LL;
    *(void *)(a3 + 64) = 0LL;
    *((void *)v6 + 13) = *(void *)(a3 + 72);
    char v11 = 1;
    sub_10000CC04(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0LL;
    sub_1000A0254((uint64_t)v10, 0LL);
  }

  return v6;
}

void *sub_1000A01C4(uint64_t a1, void *a2, unint64_t *a3)
{
  __int128 v5 = (void *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        char v4 = (void *)*v7;
        __int128 v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      __int128 v5 = v7 + 1;
      char v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

void sub_1000A0254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100006224((uint64_t)v2 + 88);
    }
    operator delete(v2);
  }

void sub_1000A0298(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000A0360((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10 + 32;
      do
      {
        --v11;
        uint64_t v12 = sub_100006224(v12) + 56;
      }

      while (v11);
    }
  }

  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1000A033C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_1000A0360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    __int128 v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + _Block_object_dispose(va, 8) = v7;
    __n128 result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a5 + 32) = result;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    *(void *)(a5 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
    a5 += 56LL;
    a2 += 56LL;
  }

  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v10 = a5;
    do
    {
      *(void *)uint64_t v10 = *(void *)a7;
      __int128 v11 = *(_OWORD *)(a7 + 8);
      *(void *)(v10 + 24) = *(void *)(a7 + 24);
      *(_OWORD *)(v10 + _Block_object_dispose(va, 8) = v11;
      __n128 result = *(__n128 *)(a7 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(void *)(a7 + 32) = 0LL;
      *(void *)(a7 + 40) = 0LL;
      *(void *)(v10 + 4_Block_object_dispose(va, 8) = *(void *)(a7 + 48);
      a7 += 56LL;
      v10 += 56LL;
      --v9;
    }

    while (v9);
  }

  if (a3 != a4)
  {
    uint64_t v12 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v12 = *(void *)a3;
      __int128 v13 = *(_OWORD *)(a3 + 8);
      *(void *)(v12 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v12 + _Block_object_dispose(va, 8) = v13;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v12 + 32) = result;
      *(void *)(a3 + 32) = 0LL;
      *(void *)(a3 + 40) = 0LL;
      *(void *)(v12 + 4_Block_object_dispose(va, 8) = *(void *)(a3 + 48);
      a3 += 56LL;
      v12 += 56LL;
    }

    while (a3 != a4);
  }

  return result;
}

void sub_1000A0438(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000A04E8((uint64_t)a1, a3);
  if (v11 >= 0x24924924924924ALL) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  __int128 v13 = operator new(56 * v11);
  sub_1000A0568(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_1000A04E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x249249249249249LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x249249249249249LL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x249249249249249LL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000A0568(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000A0630((uint64_t)a1, *a1, a4, *a1 + 56 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = v10 + 32;
      do
      {
        --v11;
        uint64_t v12 = sub_100006224(v12) + 56;
      }

      while (v11);
    }
  }

  uint64_t v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1000A060C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_1000A0630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  while (a2 != a3)
  {
    *(void *)a5 = *(void *)a2;
    __int128 v7 = *(_OWORD *)(a2 + 8);
    *(void *)(a5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a5 + _Block_object_dispose(va, 8) = v7;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    *(void *)(a5 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
    a5 += 56LL;
    a2 += 56LL;
  }

  *(void *)a5 = *(void *)a7;
  __int128 v8 = *(_OWORD *)(a7 + 8);
  *(void *)(a5 + 24) = *(void *)(a7 + 24);
  *(_OWORD *)(a5 + _Block_object_dispose(va, 8) = v8;
  __n128 result = *(__n128 *)(a7 + 32);
  *(__n128 *)(a5 + 32) = result;
  *(void *)(a7 + 32) = 0LL;
  *(void *)(a7 + 40) = 0LL;
  *(void *)(a5 + 4_Block_object_dispose(va, 8) = *(void *)(a7 + 48);
  if (a3 != a4)
  {
    uint64_t v10 = a5 + 56 * a6;
    do
    {
      *(void *)uint64_t v10 = *(void *)a3;
      __int128 v11 = *(_OWORD *)(a3 + 8);
      *(void *)(v10 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v10 + _Block_object_dispose(va, 8) = v11;
      __n128 result = *(__n128 *)(a3 + 32);
      *(__n128 *)(v10 + 32) = result;
      *(void *)(a3 + 32) = 0LL;
      *(void *)(a3 + 40) = 0LL;
      *(void *)(v10 + 4_Block_object_dispose(va, 8) = *(void *)(a3 + 48);
      a3 += 56LL;
      v10 += 56LL;
    }

    while (a3 != a4);
  }

  return result;
}

uint64_t sub_1000A06EC(uint64_t a1, void *a2, uint64_t a3)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_100185388;
  uint64_t v6 = a1 + 24;
  sub_10004B93C(a1 + 24, a1);
  *(void *)(a1 + 560) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 56_Block_object_dispose(va, 8) = v7;
  if (v7)
  {
    __int128 v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint64_t v10 = (uint64_t *)(a1 + 560);
  *(void *)(a1 + 576) = 850045863LL;
  *(void *)(a1 + 632) = 0LL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  sub_100006174(__p, "com.apple.diskimages.band_unmap");
  sub_100046534();
  sub_10004D52C((void *)(a1 + 640));
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_1000A0A78(a1);
  *(void *)(a1 + 64) = *(void *)(*(void *)(a1 + 560) + 128LL);
  *(void *)(a1 + 72) = a3;
  sub_1000A0B44((uint64_t *)(a1 + 712), *(void *)(a1 + 16));
  if (*(void *)(a1 + 16))
  {
    unint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = operator new(0x28uLL);
      void *v12 = 1LL;
      v12[1] = v6;
      v12[2] = 0LL;
      void v12[3] = v11;
      v12[4] = 1LL;
      __p[0] = v12;
      __p[1] = 0LL;
      uint64_t v28 = -1LL;
      unint64_t v13 = *(void *)(a1 + 720);
      if (v13 >= *(void *)(a1 + 728))
      {
        uint64_t v14 = sub_1000A561C((uint64_t *)(a1 + 712), (uint64_t)__p);
      }

      else
      {
        sub_10007D200(*(void *)(a1 + 720), (uint64_t)__p);
        uint64_t v14 = v13 + 24;
        *(void *)(a1 + 720) = v13 + 24;
      }

      *(void *)(a1 + 720) = v14;
      sub_10007D134((uint64_t)__p);
      ++v11;
    }

    while (v11 < *(void *)(a1 + 16));
  }

  *(void *)&__int128 v25 = "DiskImageSparseBundle::DiskImageSparseBundle(const shared_ptr<SparseBundleBackend> &, size_t)";
  *((void *)&v25 + 1) = 44LL;
  int v26 = 0;
  sub_1000A0BF4(__p, &v25);
  sub_10000552C(&v29, (uint64_t)"Initialized bands array of size ", 32LL);
  std::ostream::operator<<(&v29, *(void *)(a1 + 16));
  std::ostream::~ostream(&v29, off_1001855F8);
  sub_1000A58E4((uint64_t)__p);
  std::ios::~ios(&v30);
  sub_100073E04(*v10, __p);
  uint64_t v15 = __p[0];
  __p[0] = 0LL;
  uint64_t v16 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 16LL))(v16);
    int v17 = __p[0];
    __p[0] = 0LL;
    if (v17) {
      (*(void (**)(void *))(*(void *)v17 + 16LL))(v17);
    }
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40LL))(a1))
  {
    sub_100073EB4(*v10, __p);
    uint64_t v18 = __p[0];
    __p[0] = 0LL;
    uint64_t v19 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 16LL))(v19);
      __int128 v20 = __p[0];
      __p[0] = 0LL;
      if (v20) {
        (*(void (**)(void *))(*(void *)v20 + 16LL))(v20);
      }
    }

    sub_1000740B8(*v10, __p);
    __int128 v21 = __p[0];
    __p[0] = 0LL;
    uint64_t v22 = *(void *)(a1 + 344);
    *(void *)(a1 + 344) = v21;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
      __int128 v23 = __p[0];
      __p[0] = 0LL;
      if (v23) {
        (*(void (**)(void *))(*(void *)v23 + 8LL))(v23);
      }
    }
  }

  return a1;
}

void sub_1000A09DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_1000A0A78(uint64_t a1)
{
  uint64_t result = sub_1000A0CE0(*(void *)(a1 + 560) + 24LL);
  if ((_DWORD)result)
  {
    *(void *)&__int128 v4 = "DiskImageSparseBundle::init_bands_array_size()";
    *((void *)&v4 + 1) = 44LL;
    int v5 = 0;
    sub_1000A0D70(v6, &v4);
    sub_10000552C(&v7, (uint64_t)"Mounted on AFP, max open bands is set to ", 41LL);
    std::ostream::operator<<(&v7, *(void *)(a1 + 16));
    std::ostream::~ostream(&v7, off_100185818);
    sub_1000A5FD0((uint64_t)v6);
    uint64_t result = std::ios::~ios(&v8);
    uint64_t v3 = 3LL;
  }

  else
  {
    uint64_t v3 = 64LL;
  }

  *(void *)(a1 + 16) = v3;
  return result;
}

void sub_1000A0B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000A0B44(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_100045090();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100059990(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1000A54CC(a1, v7);
    return sub_1000A55D0((uint64_t)v7);
  }

  return result;
}

void sub_1000A0BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1000A0BF4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B0FF0((uint64_t)a1, a2);
  *a1 = off_100185530;
  a1[45] = &off_100185630;
  a1[46] = &off_100185658;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100185530;
  a1[45] = off_1001855B8;
  a1[46] = off_1001855E0;
  return a1;
}

void sub_1000A0C78(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A0C9C(uint64_t a1)
{
  return a1;
}

BOOL sub_1000A0CE0(uint64_t a1)
{
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1718642273 && v4 == 115;
  }

  else
  {
    BOOL v6 = 0LL;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }

  return v6;
}

void *sub_1000A0D70(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000B106C((uint64_t)a1, a2);
  *a1 = off_100185750;
  a1[45] = &off_100185850;
  a1[46] = &off_100185878;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100185750;
  a1[45] = off_1001857D8;
  a1[46] = off_100185800;
  return a1;
}

void sub_1000A0DF4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A0E18(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A0E58(uint64_t a1)
{
  unsigned int v10 = 0;
  sub_10004D810(a1 + 352, 0LL, (uint64_t)v11);
  uint64_t v2 = *(void *)(a1 + 712);
  uint64_t v3 = *(void *)(a1 + 720);
  if (v2 != v3)
  {
    uint64_t v4 = 0LL;
    do
    {
      sub_10007D1FC(v8, v2);
      if (v9 && (*(_BYTE *)(v9 + 68) & 1) != 0)
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 1174405120LL;
        v6[2] = sub_1000A0FB4;
        v6[3] = &unk_100185448;
        sub_10007D1FC(v7, v8);
        v7[3] = &v10;
        sub_10004D630(v11, v6);
        ++v4;
        sub_10007D134((uint64_t)v7);
      }

      sub_10007D134((uint64_t)v8);
      v2 += 24LL;
    }

    while (v2 != v3);
  }

  sub_10004D790(v11);
  return atomic_load(&v10);
}

void sub_1000A0FA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0FB4(uint64_t a1)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v3 = "size_t> DiskImageSparseBundle::flush_open_bands()_block_invoke";
    *((void *)&v3 + 1) = 47LL;
    int v4 = 2;
    sub_1000A1080(v5, &v3);
    sub_10000552C(&v6, (uint64_t)"Flushing ", 9LL);
    sub_10007D064(&v6, *(void *)(a1 + 40));
    std::ostream::~ostream(&v6, off_100185A38);
    sub_1000A657C((uint64_t)v5);
    std::ios::~ios(&v7);
  }

  uint64_t result = sub_10007CE5C(*(void *)(a1 + 40));
  if ((_DWORD)result) {
    atomic_store(result, *(unsigned int **)(a1 + 56));
  }
  return result;
}

void sub_1000A106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000A1080(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B10E8((uint64_t)a1, a2);
  *a1 = off_100185970;
  a1[45] = &off_100185A70;
  a1[46] = &off_100185A98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100185970;
  a1[45] = off_1001859F8;
  a1[46] = off_100185A20;
  return a1;
}

void sub_1000A1104(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A1128(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A1168(uint64_t a1, uint64_t a2)
{
  return sub_10007D1FC(a1 + 32, a2 + 32);
}

uint64_t sub_1000A1174(uint64_t a1)
{
  return sub_10007D134(a1 + 32);
}

uint64_t sub_1000A117C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v9 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v9 + 1) = 32LL;
    int v10 = 2;
    sub_1000A13B4(v11, &v9);
    sub_10000552C(&v12, (uint64_t)"Starting flush", 14LL);
    std::ostream::~ostream(&v12, off_100185C58);
    sub_1000A6B28((uint64_t)v11);
    std::ios::~ios(v13);
  }

  std::mutex::lock((std::mutex *)(a1 + 576));
  sub_10004AF2C(a1 + 80);
  uint64_t v5 = sub_1000A0E58(a1);
  uint64_t v7 = v6;
  sub_10004AF48(a1 + 80);
  if ((_DWORD)v5)
  {
    *(void *)&__int128 v9 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
    *((void *)&v9 + 1) = 32LL;
    int v10 = 16;
    sub_100026DE0(v11, &v9);
    sub_10000552C(&v12, (uint64_t)"Flush failed - returning ", 25LL);
    std::ostream::operator<<(&v12, v5);
    std::ostream::~ostream(&v12, off_1001752F8);
    sub_1000274A8((uint64_t)v11);
    std::ios::~ios(v13);
  }

  else
  {
    if (sub_1000BE308())
    {
      *(void *)&__int128 v9 = "int DiskImageSparseBundle::flush(DiskImage::Context &, di_flush_mode)";
      *((void *)&v9 + 1) = 32LL;
      int v10 = 2;
      sub_1000A149C(v11, &v9);
      std::ostream::operator<<(&v12, v7);
      sub_10000552C(&v12, (uint64_t)" bands flushed, calling ", 24LL);
      sub_10011E968(&v12, a3);
      std::ostream::~ostream(&v12, off_100185E78);
      sub_1000A70D4((uint64_t)v11);
      std::ios::~ios(v13);
    }

    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 560) + 16LL))(*(void *)(a1 + 560), a3);
  }

  std::mutex::unlock((std::mutex *)(a1 + 576));
  return v5;
}

void sub_1000A1364( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void *sub_1000A13B4(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1164((uint64_t)a1, a2);
  *a1 = off_100185B90;
  a1[45] = &off_100185C90;
  a1[46] = &off_100185CB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100185B90;
  a1[45] = off_100185C18;
  a1[46] = off_100185C40;
  return a1;
}

void sub_1000A1438(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A145C(uint64_t a1)
{
  return a1;
}

void *sub_1000A149C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B11E0((uint64_t)a1, a2);
  *a1 = off_100185DB0;
  a1[45] = &off_100185EB0;
  a1[46] = &off_100185ED8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100185DB0;
  a1[45] = off_100185E38;
  a1[46] = off_100185E60;
  return a1;
}

void sub_1000A1520(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A1544(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A1584@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  else {
    int v8 = 0;
  }
  if (a3) {
    int v9 = v8 | 0x200;
  }
  else {
    int v9 = v8;
  }
  sub_1000A1708(a1, a2, (uint64_t)v11);
  if (v12)
  {
LABEL_10:
    sub_10007D200((uint64_t)a4, (uint64_t)v11);
  }

  else
  {
    while (!sub_10004AFCC(a1 + 208, a2))
    {
      sub_10007D134((uint64_t)v11);
      sub_1000A1708(a1, a2, (uint64_t)v11);
      if (v12) {
        goto LABEL_10;
      }
    }

    sub_1000A1934(a1, a2, v9, a4);
  }

  return sub_10007D134((uint64_t)v11);
}

std::chrono::steady_clock::time_point sub_1000A1708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_14:
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)operator new(0x28uLL);
    *(void *)result.__d_.__rep_ = 1LL;
    *(void *)(result.__d_.__rep_ + _Block_object_dispose(va, 8) = a1 + 24;
    *(void *)(result.__d_.__rep_ + 24) = 0LL;
    *(void *)(result.__d_.__rep_ + 32) = 0LL;
    *(void *)(result.__d_.__rep_ + 16) = 0LL;
    *(std::chrono::steady_clock::time_point *)a3 = result;
    *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a3 + 16) = -1LL;
    return result;
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = *(void *)(a1 + 712);
  while (*(void *)(v8 + 16) != a2)
  {
    ++v7;
    v8 += 24LL;
    if (v5 == v7) {
      goto LABEL_14;
    }
  }

  sub_10007D1FC(a3, v8);
  uint64_t v9 = *(void *)(a3 + 8);
  if (!v9 || *(void *)(v9 + 32) != a2)
  {
    if (sub_1000BE308())
    {
      *(void *)&__int128 v11 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
      *((void *)&v11 + 1) = 41LL;
      int v12 = 2;
      sub_1000A2340(v13, &v11);
      sub_10000552C(&v14, (uint64_t)"Band ", 5LL);
      *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v14, a2);
      *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 2;
      sub_10000552C(&v14, (uint64_t)" changed before retain completed", 32LL);
      std::ostream::~ostream(&v14, off_1001866F8);
      sub_1000A8784((uint64_t)v13);
      std::ios::~ios(v15);
    }

    sub_10007D134(a3);
    goto LABEL_14;
  }

  if (sub_1000BE308())
  {
    *(void *)&__int128 v11 = "DiskImageSparseBundle::find_band_in_array(uint64_t)";
    *((void *)&v11 + 1) = 41LL;
    int v12 = 2;
    sub_1000A2258(v13, &v11);
    sub_10000552C(&v14, (uint64_t)"Found ", 6LL);
    sub_10007D064(&v14, *(void *)(a3 + 8));
    sub_10000552C(&v14, (uint64_t)" at index ", 10LL);
    std::ostream::operator<<(&v14, v7);
    std::ostream::~ostream(&v14, off_1001864D8);
    sub_1000A81D8((uint64_t)v13);
    std::ios::~ios(v15);
  }

  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::steady_clock::time_point *)(*(void *)a3 + 16LL) = result;
  return result;
}

void sub_1000A1934(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v16 = 0LL;
  int v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  uint64_t v19 = 0LL;
  if (sub_1000BE308())
  {
    *(void *)&__int128 v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32LL;
    int v12 = 2;
    sub_10007CCAC(v13, &v11);
    sub_10000552C(&v14, (uint64_t)"Opening band ", 13LL);
    *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v14, a2);
    *(_DWORD *)&v15[*(void *)(v14 - 24)] = *(_DWORD *)&v15[*(void *)(v14 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v14, off_100181CF8);
    sub_100080FC8((uint64_t)v13);
    std::ios::~ios(v15);
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000LL;
  v9[2] = sub_1000A1C88;
  v9[3] = &unk_100185480;
  v9[4] = &v16;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  sub_10004B940(a1 + 24, (uint64_t)v9);
  sub_1000A1CC8(a1, (std::chrono::steady_clock::time_point *)v17[3], a4);
  if (a4[1])
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    do
    {
      if (!v8 && sub_1000BE308())
      {
        *(void *)&__int128 v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
        *((void *)&v11 + 1) = 32LL;
        int v12 = 2;
        sub_1000A2170(v13, &v11);
        sub_10000552C(&v14, (uint64_t)"Failed to evict band to make room for ", 38LL);
        sub_10007D064(&v14, v17[3]);
        sub_10000552C(&v14, (uint64_t)", retrying", 10LL);
        std::ostream::~ostream(&v14, off_1001862B8);
        sub_1000A7C2C((uint64_t)v13);
        std::ios::~ios(v15);
      }

      usleep(0x3E8u);
      sub_10007D134((uint64_t)a4);
      ++v8;
      sub_1000A1CC8(a1, (std::chrono::steady_clock::time_point *)v17[3], a4);
    }

    while (!a4[1]);
  }

  if (sub_1000BE308())
  {
    *(void *)&__int128 v11 = "DiskImageSparseBundle::open_band(uint64_t, int)";
    *((void *)&v11 + 1) = 32LL;
    int v12 = 2;
    sub_1000A2088(v13, &v11);
    sub_10007D064(&v14, a4[1]);
    sub_10000552C(&v14, (uint64_t)" opened and replaced at attempt ", 32LL);
    std::ostream::operator<<(&v14, v8);
    std::ostream::~ostream(&v14, off_100186098);
    sub_1000A7680((uint64_t)v13);
    std::ios::~ios(v15);
  }

  _Block_object_dispose(&v16, 8);
}

void sub_1000A1C20(_Unwind_Exception *a1)
{
}

void *sub_1000A1C88(uint64_t a1)
{
  std::chrono::steady_clock::time_point result = sub_10007C068( *(void *)(a1 + 48),  *(void *)(a1 + 40) + 24LL,  *(_DWORD *)(a1 + 56),  (void *)(*(void *)(*(void *)(a1 + 40) + 560LL) + 96LL));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000A1CC8(uint64_t a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = v25;
  __p = v25;
  __int128 v24 = xmmword_1001478B0;
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    do
    {
      unint64_t v9 = atomic_load(*(unint64_t **)(*(void *)(a1 + 712) + v7));
      if (v9 == 1)
      {
        *(void *)&v20[0] = *(void *)(*(void *)(*(void *)(a1 + 712) + v7) + 16LL);
        *((void *)&v20[0] + 1) = v8;
        int v10 = (char *)__p + 16 * v24;
        if ((void)v24 == *((void *)&v24 + 1))
        {
          sub_1000B144C(&__p, v10, 1LL, v20, &v18);
        }

        else
        {
          *(_OWORD *)int v10 = v20[0];
          *(void *)&__int128 v24 = v24 + 1;
        }
      }

      ++v8;
      v7 += 24LL;
    }

    while (v8 < *(void *)(a1 + 16));
    uint64_t v6 = __p;
    __int128 v11 = (uint64_t *)((char *)__p + 16 * v24);
    if ((void)v24)
    {
      uint64_t v12 = 126 - 2 * __clz(v24);
      goto LABEL_13;
    }
  }

  else
  {
    __int128 v11 = (uint64_t *)v25;
  }

  uint64_t v12 = 0LL;
LABEL_13:
  sub_1000A8B6C((uint64_t)v6, v11, (uint64_t)v20, v12, 1);
  if (sub_1000BE308())
  {
    *(void *)&__int128 v18 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
    *((void *)&v18 + 1) = 42LL;
    int v19 = 2;
    sub_1000A2428(v20, &v18);
    sub_10000552C(&v21, (uint64_t)"Looking for an evictable slot for ", 34LL);
    sub_10007D064(&v21, (uint64_t)a2);
    std::ostream::~ostream(&v21, off_100186918);
    sub_1000A9E98((uint64_t)v20);
    std::ios::~ios(v22);
  }

  if ((void)v24)
  {
    unint64_t v13 = (uint64_t *)((char *)__p + 8);
    uint64_t v14 = 16 * v24;
    while (1)
    {
      uint64_t v16 = *v13;
      v13 += 2;
      uint64_t v15 = v16;
      sub_10007D268((std::chrono::steady_clock::time_point **)(*(void *)(a1 + 712) + 24 * v16), a2, a3);
      if (a3[1]) {
        break;
      }
      if (sub_1000BE308())
      {
        *(void *)&__int128 v18 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
        *((void *)&v18 + 1) = 42LL;
        int v19 = 2;
        sub_1000A25F8(v20, &v18);
        sub_10000552C(&v21, (uint64_t)"Failed placing new ", 19LL);
        sub_10007D064(&v21, (uint64_t)a2);
        sub_10000552C(&v21, (uint64_t)" at index ", 10LL);
        std::ostream::operator<<(&v21, v15);
        std::ostream::~ostream(&v21, off_100186D58);
        sub_1000AA9F0((uint64_t)v20);
        std::ios::~ios(v22);
      }

      sub_10007D134((uint64_t)a3);
      v14 -= 16LL;
      if (!v14) {
        goto LABEL_21;
      }
    }

    if (sub_1000BE308())
    {
      *(void *)&__int128 v18 = "DiskImageSparseBundle::replace_oldest_band(Band *)";
      *((void *)&v18 + 1) = 42LL;
      int v19 = 2;
      sub_1000A2510(v20, &v18);
      sub_10000552C(&v21, (uint64_t)"Placed new ", 11LL);
      sub_10007D064(&v21, (uint64_t)a2);
      sub_10000552C(&v21, (uint64_t)" at index ", 10LL);
      std::ostream::operator<<(&v21, v15);
      std::ostream::~ostream(&v21, off_100186B38);
      sub_1000AA444((uint64_t)v20);
      std::ios::~ios(v22);
    }

    sub_10004B454(a1 + 208, a2[4].__d_.__rep_, 1);
  }

  else
  {
LABEL_21:
    int v17 = operator new(0x28uLL);
    *int v17 = 1LL;
    v17[1] = a1 + 24;
    v17[3] = 0LL;
    v17[4] = 0LL;
    v17[2] = 0LL;
    *a3 = v17;
    a3[1] = 0LL;
    a3[2] = -1LL;
  }

  if (*((void *)&v24 + 1))
  {
    if (v25 != __p) {
      operator delete(__p);
    }
  }

void sub_1000A2070(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_1000A2088(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B125C((uint64_t)a1, a2);
  *a1 = off_100185FD0;
  a1[45] = &off_1001860D0;
  a1[46] = &off_1001860F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100185FD0;
  a1[45] = off_100186058;
  a1[46] = off_100186080;
  return a1;
}

void sub_1000A210C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A2130(uint64_t a1)
{
  return a1;
}

void *sub_1000A2170(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B12D8((uint64_t)a1, a2);
  *a1 = off_1001861F0;
  a1[45] = &off_1001862F0;
  a1[46] = &off_100186318;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001861F0;
  a1[45] = off_100186278;
  a1[46] = off_1001862A0;
  return a1;
}

void sub_1000A21F4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A2218(uint64_t a1)
{
  return a1;
}

void *sub_1000A2258(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1354((uint64_t)a1, a2);
  *a1 = off_100186410;
  a1[45] = &off_100186510;
  a1[46] = &off_100186538;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100186410;
  a1[45] = off_100186498;
  a1[46] = off_1001864C0;
  return a1;
}

void sub_1000A22DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A2300(uint64_t a1)
{
  return a1;
}

void *sub_1000A2340(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B13D0((uint64_t)a1, a2);
  *a1 = off_100186630;
  a1[45] = &off_100186730;
  a1[46] = &off_100186758;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100186630;
  a1[45] = off_1001866B8;
  a1[46] = off_1001866E0;
  return a1;
}

void sub_1000A23C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A23E8(uint64_t a1)
{
  return a1;
}

void *sub_1000A2428(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B162C((uint64_t)a1, a2);
  *a1 = off_100186850;
  a1[45] = &off_100186950;
  a1[46] = &off_100186978;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100186850;
  a1[45] = off_1001868D8;
  a1[46] = off_100186900;
  return a1;
}

void sub_1000A24AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A24D0(uint64_t a1)
{
  return a1;
}

void *sub_1000A2510(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B16A8((uint64_t)a1, a2);
  *a1 = off_100186A70;
  a1[45] = &off_100186B70;
  a1[46] = &off_100186B98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100186A70;
  a1[45] = off_100186AF8;
  a1[46] = off_100186B20;
  return a1;
}

void sub_1000A2594(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A25B8(uint64_t a1)
{
  return a1;
}

void *sub_1000A25F8(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1724((uint64_t)a1, a2);
  *a1 = off_100186C90;
  a1[45] = &off_100186D90;
  a1[46] = &off_100186DB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100186C90;
  a1[45] = off_100186D18;
  a1[46] = off_100186D40;
  return a1;
}

void sub_1000A267C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A26A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A26E0(uint64_t a1)
{
  *(void *)a1 = off_100185388;
  *(void *)&__int128 v7 = "DiskImageSparseBundle::~DiskImageSparseBundle()";
  *((void *)&v7 + 1) = 45LL;
  int v8 = 0;
  sub_1000A2864(v9, &v7);
  sub_10000552C(&v10, (uint64_t)"Closing bands", 13LL);
  std::ostream::~ostream(&v10, off_100186F78);
  sub_1000AAF9C((uint64_t)v9);
  std::ios::~ios(&v11);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = 8LL;
    do
    {
      if (*(void *)(*(void *)(a1 + 712) + v4))
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 0x40000000LL;
        v6[2] = sub_1000A294C;
        v6[3] = &unk_1001854A0;
        void v6[4] = a1;
        v6[5] = v3;
        sub_10004D630((dispatch_group_t *)(a1 + 416), v6);
        unint64_t v2 = *(void *)(a1 + 16);
      }

      ++v3;
      v4 += 24LL;
    }

    while (v3 < v2);
  }

  sub_10004D744(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  v9[0] = (void **)(a1 + 712);
  sub_1000A5CCC(v9);
  v9[0] = (void **)(a1 + 664);
  sub_10000F974(v9);
  std::mutex::~mutex((std::mutex *)(a1 + 576));
  sub_100006224(a1 + 560);
  sub_1000A5D3C(a1 + 24);
  return a1;
}

void *sub_1000A2864(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B17A0((uint64_t)a1, a2);
  *a1 = off_100186EB0;
  a1[45] = &off_100186FB0;
  a1[46] = &off_100186FD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100186EB0;
  a1[45] = off_100186F38;
  a1[46] = off_100186F60;
  return a1;
}

void sub_1000A28E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A290C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A294C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_1000BE308())
  {
    *(void *)&__int128 v5 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v5 + 1) = 45LL;
    int v6 = 2;
    sub_1000A2AE8(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"Background close of band at index ", 34LL);
    std::ostream::operator<<(&v8, *(void *)(a1 + 40));
    std::ostream::~ostream(&v8, off_100187198);
    sub_1000AB548((uint64_t)v7);
    std::ios::~ios(v9);
  }

  unint64_t v3 = operator new(0x28uLL);
  *unint64_t v3 = 1LL;
  v3[1] = v2 + 24;
  v3[3] = 0LL;
  v3[4] = 0LL;
  v3[2] = 0LL;
  v7[0] = v3;
  v7[1] = 0LL;
  uint64_t v7[2] = -1LL;
  sub_10007D220(*(void *)(v2 + 712) + 24LL * *(void *)(a1 + 40), (uint64_t)v7);
  sub_10007D134((uint64_t)v7);
  uint64_t result = sub_1000BE308();
  if ((_DWORD)result)
  {
    *(void *)&__int128 v5 = "DiskImageSparseBundle::~DiskImageSparseBundle()_block_invoke";
    *((void *)&v5 + 1) = 45LL;
    int v6 = 2;
    sub_1000A2BD0(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"Closed band at index ", 21LL);
    std::ostream::operator<<(&v8, *(void *)(a1 + 40));
    std::ostream::~ostream(&v8, off_1001873B8);
    sub_1000ABAF4((uint64_t)v7);
    return std::ios::~ios(v9);
  }

  return result;
}

void sub_1000A2AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000A2AE8(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B181C((uint64_t)a1, a2);
  *a1 = off_1001870D0;
  a1[45] = &off_1001871D0;
  a1[46] = &off_1001871F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001870D0;
  a1[45] = off_100187158;
  a1[46] = off_100187180;
  return a1;
}

void sub_1000A2B6C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A2B90(uint64_t a1)
{
  return a1;
}

void *sub_1000A2BD0(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1898((uint64_t)a1, a2);
  *a1 = off_1001872F0;
  a1[45] = &off_1001873F0;
  a1[46] = &off_100187418;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001872F0;
  a1[45] = off_100187378;
  a1[46] = off_1001873A0;
  return a1;
}

void sub_1000A2C54(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A2C78(uint64_t a1)
{
  return a1;
}

void sub_1000A2CBC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A26E0(a1);
  operator delete(v1);
}

uint64_t sub_1000A2CD0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = 0LL;
  unint64_t v8 = *(void *)(a1 + 64);
  size_t v10 = a4[2];
  unint64_t v9 = a4[3];
  unint64_t v11 = v9 / v8;
  unint64_t v70 = v8;
  unint64_t v12 = v9 % v8;
  while (v10)
  {
    if (v10 >= v70 - v12) {
      size_t v13 = v70 - v12;
    }
    else {
      size_t v13 = v10;
    }
    uint64_t v14 = a4[4];
    uint64_t v15 = (std::__shared_weak_count *)a4[1];
    uint64_t v81 = *a4 + v7;
    unint64_t v82 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }

    size_t v83 = v13;
    unint64_t v84 = v12;
    uint64_t v85 = v14 - v7;
    char v86 = 0;
    sub_1000A1584(a1, v11, a3, &v79);
    uint64_t v18 = v80;
    if (!v80)
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v76 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
        *((void *)&v76 + 1) = 33LL;
        int v77 = 2;
        sub_1000A3658(v87, &v76);
        sub_10000552C(&v93, (uint64_t)"Band ", 5LL);
        *(_DWORD *)((char *)v94 + *(void *)(v93 - 24)) = *(_DWORD *)((_BYTE *)v94 + *(void *)(v93 - 24)) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<(&v93, v11);
        *(_DWORD *)((char *)v94 + *(void *)(v93 - 24)) = *(_DWORD *)((_BYTE *)v94 + *(void *)(v93 - 24)) & 0xFFFFFFB5 | 2;
        sub_10000552C(&v93, (uint64_t)" doesn't exist, returning zeros", 31LL);
        std::ostream::~ostream(&v93, off_1001875D8);
        sub_1000AC0A0((uint64_t)v87);
        std::ios::~ios(v94);
      }

      bzero((void *)(*a4 + v7), v13);
      goto LABEL_96;
    }

    uint64_t v19 = *(void *)(v79 + 24);
    uint64_t v20 = 16 * v19;
    if (*(void *)(*(void *)(a2 + 16) + 16 * v19))
    {
      uint64_t v18 = v80;
    }

    sub_10007CDAC(v18, v87);
    sub_1000198A4(*(void *)(a2 + 16) + 16 * v19, v87);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v87[0] + 1);
    if (*((void *)&v87[0] + 1))
    {
      uint64_t v22 = (unint64_t *)(*((void *)&v87[0] + 1) + 8LL);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

void sub_1000A3354( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, __int128 a39, int a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    sub_10007D134((uint64_t)&a58);
    sub_100006224((uint64_t)&a61);
    if (a2 == 2)
    {
      unint64_t v70 = (unsigned int *)__cxa_begin_catch(a1);
      *(void *)&a39 = "DiskImageSparseBundle::perform_io(ContextSparseBundle &, BOOL, const sg_entry &)";
      *((void *)&a39 + 1) = 33LL;
      a40 = 16;
      sub_1000A3740(&a67, &a39);
      if (a18) {
        uint64_t v71 = "Write error: ";
      }
      else {
        uint64_t v71 = "Read error: ";
      }
      if (a18) {
        uint64_t v72 = 13LL;
      }
      else {
        uint64_t v72 = 12LL;
      }
      sub_10000552C(&STACK[0x338], (uint64_t)v71, v72);
      uint64_t v73 = (const char *)(*(uint64_t (**)(unsigned int *))(*(void *)v70 + 16LL))(v70);
      size_t v74 = strlen(v73);
      sub_10000552C(&STACK[0x338], (uint64_t)v73, v74);
      sub_10000552C(&STACK[0x338], (uint64_t)" (band ", 7LL);
      *(_DWORD *)((char *)&STACK[0x338] + *(void *)(STACK[0x338] - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(void *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&STACK[0x338], v67);
      *(_DWORD *)((char *)&STACK[0x338] + *(void *)(STACK[0x338] - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&STACK[0x338]
                                                                                          + *(void *)(STACK[0x338] - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
      sub_10000552C(&STACK[0x338], (uint64_t)", err ", 6LL);
      std::ostream::operator<<(&STACK[0x338], v70[2]);
      sub_10000552C(&STACK[0x338], (uint64_t)")", 1LL);
      sub_1000A37E8((uint64_t)&a67);
      __cxa_end_catch();
      JUMPOUT(0x1000A3310LL);
    }

    sub_1000052FC(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1000A35BC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1000A35ACLL);
  }
  JUMPOUT(0x1000A3458LL);
}

uint64_t sub_1000A35CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    if (result)
    {
      unint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          unint64_t v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        do
          unint64_t v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }

      return 1LL;
    }
  }

  return result;
}

void *sub_1000A3658(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1914((uint64_t)a1, a2);
  *a1 = off_100187510;
  a1[45] = &off_100187610;
  a1[46] = &off_100187638;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100187510;
  a1[45] = off_100187598;
  a1[46] = off_1001875C0;
  return a1;
}

void sub_1000A36DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A3700(uint64_t a1)
{
  return a1;
}

void *sub_1000A3740(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1990((uint64_t)a1, a2);
  *a1 = off_100187730;
  a1[45] = &off_100187830;
  a1[46] = &off_100187858;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100187730;
  a1[45] = off_1001877B8;
  a1[46] = off_1001877E0;
  return a1;
}

void sub_1000A37C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A37E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A3828(uint64_t a1)
{
  unsigned int v6 = 0;
  uint64_t v2 = (unint64_t *)(a1 + 704);
  v5[0] = a1;
  v5[1] = &v6;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    unint64_t v8 = v5;
    uint64_t v7 = &v8;
    std::__call_once(v2, &v7, (void (__cdecl *)(void *))sub_1000B1A0C);
  }

  return v6;
}

uint64_t sub_1000A3884(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = sub_1000A3828(a1);
  if (v6)
  {
    if (v6 >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = -v6;
    }
    return -v7;
  }

  else
  {
    uint64_t v9 = sub_1000A2CD0(a1, a2, 1, a3);
    uint64_t v8 = v9;
    if (v9 < 0 && (_DWORD)v9) {
      sub_1000A3900(a2);
    }
  }

  return v8;
}

uint64_t sub_1000A3900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)&__int128 v3 = "DiskImage::terminate()";
  *((void *)&v3 + 1) = 20LL;
  int v4 = 16;
  sub_1000ACA34(v5, &v3);
  sub_10000552C(&v6, (uint64_t)"Encountered an inrecoverable I/O error, all future I/Os will be invalidated", 75LL);
  std::ostream::~ostream(&v6, off_100187A18);
  sub_1000ACB98((uint64_t)v5);
  std::ios::~ios(&v7);
  atomic_store(1u, (unsigned __int8 *)(v1 + 8));
  return sub_100120E78();
}

void sub_1000A399C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

unint64_t sub_1000A39CC(void **a1)
{
  unint64_t v2 = (*(uint64_t (**)(void *))(*a1[70] + 40LL))(a1[70]);
  if (v2 % ((uint64_t (*)(void **))(*a1)[3])(a1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Size is not a multiple of block size", 0x16u);
  }

  return v2 / ((uint64_t (*)(void **))(*a1)[3])(a1);
}

uint64_t sub_1000A3A58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v8 = v11 != 0;
  if (v11 && sub_10007BFD0(v11, a4))
  {
    sub_10007D134((uint64_t)v10);
    return sub_10007D910(*(void *)(a1 + 712) + 24 * a2, a3);
  }

  else
  {
    sub_10007D134((uint64_t)v10);
  }

  return v8;
}

void sub_1000A3AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000A3B0C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 208;
  uint64_t v7 = sub_10004AFCC(a1 + 208, a2);
  if ((_DWORD)v7)
  {
    uint64_t v8 = a1 + 24;
    if (sub_1000B2240(a3) == *(void *)(a1 + 64))
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v19 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v19 + 1) = 58LL;
        int v20 = 2;
        sub_10007DD04(&v21, &v19);
        sub_10000552C(&v24, (uint64_t)"Unmapping band ", 15LL);
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<(&v24, a2);
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 2;
        sub_10000552C(&v24, (uint64_t)" completely", 11LL);
        std::ostream::~ostream(&v24, off_1001829B8);
        sub_1000831D0((uint64_t)&v21);
        std::ios::~ios(v25);
      }

      sub_10007C284(v8, a2);
    }

    else
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v19 = "DiskImageSparseBundle::try_unmap_band_extents_without_list(uint64_t, const extents_set_t &)";
        *((void *)&v19 + 1) = 58LL;
        int v20 = 2;
        sub_10007DDEC(&v21, &v19);
        sub_10000552C(&v24, (uint64_t)"Unmapping band ", 15LL);
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 8;
        std::ostream::operator<<(&v24, a2);
        *(_DWORD *)&v25[*(void *)(v24 - 24)] = *(_DWORD *)&v25[*(void *)(v24 - 24)] & 0xFFFFFFB5 | 2;
        sub_10000552C(&v24, (uint64_t)" directly (without list)", 24LL);
        std::ostream::~ostream(&v24, off_100182BD8);
        sub_10008377C((uint64_t)&v21);
        std::ios::~ios(v25);
      }

      sub_10011C34C((uint64_t)&v21, v8, a2, 0LL, 0);
      uint64_t v11 = (void *)*a3;
      uint64_t v9 = a3 + 1;
      size_t v10 = v11;
      if (v11 != v9)
      {
        do
        {
          if ((v10[6] & 2) != 0) {
            unint64_t v12 = v10[4];
          }
          else {
            unint64_t v12 = v10[4] + 1LL;
          }
          sub_10011CAE0((uint64_t)&v21, v12, (v10[6] & 1) + v10[5] - 1LL);
          size_t v13 = (void *)v10[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              size_t v13 = (void *)*v13;
            }

            while (v13);
          }

          else
          {
            do
            {
              uint64_t v14 = (void *)v10[2];
              BOOL v15 = *v14 == (void)v10;
              size_t v10 = v14;
            }

            while (!v15);
          }

          size_t v10 = v14;
        }

        while (v14 != v9);
      }

      if (sub_1000972A8(v22)) {
        sub_10007C284(v8, a2);
      }
      else {
        sub_10011C680((uint64_t)&v21);
      }
      uint64_t v16 = v23;
      uint64_t v23 = 0LL;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
      }
      uint64_t v17 = v22;
      uint64_t v22 = 0LL;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      }
    }

    sub_10004B4E4(v6, a2);
  }

  return v7;
}

void sub_1000A3E00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  if (a2 == 1)
  {
    uint64_t v16 = __cxa_begin_catch(exception_object);
    sub_10004B4E4(v15, v14);
    exception = __cxa_allocate_exception(0x40uLL);
    sub_1000A3EF0((uint64_t)exception, (uint64_t)v16);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A3EF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100196FC8;
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a2 + 8);
  sub_1000AD144(a1 + 24, (__int128 *)(a2 + 24));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_1000A3F3C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A3F50(uint64_t a1, unint64_t a2, void *a3)
{
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      if (!v6) {
        break;
      }
      uint64_t v7 = 0LL;
      uint64_t v8 = (uint64_t *)(*(void *)(a1 + 712) + 16LL);
      while (1)
      {
        uint64_t v9 = *v8;
        v8 += 3;
        if (v9 == a2) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }

      if (v7 < 0) {
        break;
      }
      uint64_t result = sub_1000A3A58(a1, v7, a2, a3);
      if ((result & 1) != 0) {
        return result;
      }
      usleep(0x3E8u);
    }

uint64_t sub_1000A3FE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v38 + 1) = 32LL;
    int v39 = 2;
    sub_1000A4724(&v30, &v38);
    sub_10000552C(&v36, (uint64_t)"Starting unmap of ", 18LL);
    std::ostream::operator<<(&v36, a4);
    sub_10000552C(&v36, (uint64_t)" extents", 8LL);
    std::ostream::~ostream(&v36, off_100187C38);
    sub_1000AD3A8((uint64_t)&v30);
    std::ios::~ios(v37);
  }

  unint64_t v6 = a1[8];
  unsigned int v29 = 0;
  v28[0] = 0LL;
  v28[1] = 0LL;
  unint64_t v27 = (uint64_t *)v28;
  if (a1[43])
  {
    uint64_t v7 = sub_1000A3828((uint64_t)a1);
    if (!(_DWORD)v7)
    {
      sub_10004D810((uint64_t)(a1 + 80), 0LL, (uint64_t)&v38);
      if (a4)
      {
        uint64_t v8 = 0LL;
        unint64_t v9 = 0LL;
        uint64_t v21 = a3;
        do
        {
          uint64_t v10 = *(void *)(a3 + 16 * v8);
          uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
          uint64_t v23 = v8;
          uint64_t v12 = *(void *)(a3 + 16 * v8 + 8);
          unint64_t v13 = v11 * v10;
          unint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 24LL))(a1) * v12;
          if (sub_1000BE308())
          {
            *(void *)&__int128 v25 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
            *((void *)&v25 + 1) = 32LL;
            int v26 = 2;
            sub_1000A48F4(&v30, &v25);
            sub_10000552C(&v36, (uint64_t)"Extent ", 7LL);
            std::ostream::operator<<(&v36, v23);
            sub_10000552C(&v36, (uint64_t)": [", 3LL);
            uint64_t v15 = v36;
            *(_DWORD *)&v37[*(void *)(v36 - 24)] |= 0x200u;
            *(_DWORD *)&v37[*(void *)(v15 - 24)] = *(_DWORD *)&v37[*(void *)(v15 - 24)] & 0xFFFFFFB5 | 8;
            std::ostream::operator<<(&v36, v13);
            sub_10000552C(&v36, (uint64_t)"-", 1LL);
            std::ostream::operator<<(&v36, v13 + v14 - 1);
            sub_10000552C(&v36, (uint64_t)"]", 1LL);
            uint64_t v16 = v36;
            *(_DWORD *)&v37[*(void *)(v36 - 24)] &= ~0x200u;
            *(_DWORD *)&v37[*(void *)(v16 - 24)] = *(_DWORD *)&v37[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
            std::ostream::~ostream(&v36, off_100188078);
            sub_1000ADF00((uint64_t)&v30);
            std::ios::~ios(v37);
          }

          if (v14)
          {
            unint64_t v17 = v13 / v6;
            unint64_t v18 = v13 % v6;
            do
            {
              if (v17 != v9 && v27 != (uint64_t *)v28)
              {
                unint64_t v30 = 0LL;
                uint64_t v31 = &v30;
                uint64_t v32 = 0x4002000000LL;
                unint64_t v33 = sub_1000A49DC;
                uint64_t v34 = sub_1000A4A18;
                sub_1000B2434((uint64_t)v35, (uint64_t)&v27);
                v24[0] = _NSConcreteStackBlock;
                v24[1] = 0x40000000LL;
                v24[2] = sub_1000A4A28;
                v24[3] = &unk_1001854C8;
                v24[4] = &v30;
                v24[5] = a1;
                v24[6] = v9;
                v24[7] = &v29;
                sub_10004D630((dispatch_group_t *)&v38, v24);
                sub_10000D848(&v27, v27, (uint64_t *)v28);
                _Block_object_dispose(&v30, 8);
                sub_10000A494((uint64_t)v35, v35[1]);
              }

              if (v14 >= v6 - v18) {
                unint64_t v19 = v6 - v18;
              }
              else {
                unint64_t v19 = v14;
              }
              if (sub_1000973B8(a1[43], v17))
              {
                unint64_t v30 = v18;
                uint64_t v31 = (unint64_t *)(v19 + v18);
                LOBYTE(v32) = 2;
                sub_10000C9C4(&v27, (uint64_t)&v30);
                unint64_t v9 = v17;
              }

              unint64_t v18 = 0LL;
              ++v17;
              v14 -= v19;
            }

            while (v14);
          }

          uint64_t v8 = v23 + 1;
          a3 = v21;
        }

        while (v23 + 1 != a4);
      }

      else
      {
        unint64_t v9 = 0LL;
      }

      sub_10004D790(&v38);
      if (sub_1000BE308())
      {
        *(void *)&__int128 v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
        *((void *)&v38 + 1) = 32LL;
        int v39 = 2;
        sub_1000A4D98(&v30, &v38);
        sub_10000552C(&v36, (uint64_t)"Unmap done", 10LL);
        std::ostream::~ostream(&v36, off_1001886D8);
        sub_1000AF004((uint64_t)&v30);
        std::ios::~ios(v37);
      }

      uint64_t v7 = atomic_load(&v29);
    }
  }

  else
  {
    *(void *)&__int128 v38 = "int DiskImageSparseBundle::unmap(DiskImage::Context &, const unmap_extent_t *, size_t)";
    *((void *)&v38 + 1) = 32LL;
    int v39 = 16;
    sub_1000A480C(&v30, &v38);
    sub_10000552C(&v36, (uint64_t)"Unexpected unmap command received on read only image", 52LL);
    std::ostream::~ostream(&v36, off_100187E58);
    sub_1000AD954((uint64_t)&v30);
    std::ios::~ios(v37);
    uint64_t v7 = 4294967277LL;
  }

  sub_10000A494((uint64_t)&v27, v28[0]);
  return v7;
}

void sub_1000A4504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, void *a27, uint64_t a28, uint64_t a29, char a30)
{
}

void *sub_1000A4724(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B22C0((uint64_t)a1, a2);
  *a1 = off_100187B70;
  a1[45] = &off_100187C70;
  a1[46] = &off_100187C98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100187B70;
  a1[45] = off_100187BF8;
  a1[46] = off_100187C20;
  return a1;
}

void sub_1000A47A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A47CC(uint64_t a1)
{
  return a1;
}

void *sub_1000A480C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B233C((uint64_t)a1, a2);
  *a1 = off_100187D90;
  a1[45] = &off_100187E90;
  a1[46] = &off_100187EB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100187D90;
  a1[45] = off_100187E18;
  a1[46] = off_100187E40;
  return a1;
}

void sub_1000A4890(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A48B4(uint64_t a1)
{
  return a1;
}

void *sub_1000A48F4(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B23B8((uint64_t)a1, a2);
  *a1 = off_100187FB0;
  a1[45] = &off_1001880B0;
  a1[46] = &off_1001880D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100187FB0;
  a1[45] = off_100188038;
  a1[46] = off_100188060;
  return a1;
}

void sub_1000A4978(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A499C(uint64_t a1)
{
  return a1;
}

void *sub_1000A49DC(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  int v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0LL;
    a2[7] = 0LL;
  }

  else
  {
    result[5] = v4;
  }

  return result;
}

void sub_1000A4A18(uint64_t a1)
{
}

uint64_t sub_1000A4A28(void *a1)
{
  return sub_1000A3F50(a1[5], a1[6], (void *)(*(void *)(a1[4] + 8LL) + 40LL));
}

void *sub_1000A4BC8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B250C((uint64_t)a1, a2);
  *a1 = off_1001881D0;
  a1[45] = &off_1001882D0;
  a1[46] = &off_1001882F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001881D0;
  a1[45] = off_100188258;
  a1[46] = off_100188280;
  return a1;
}

void sub_1000A4C4C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A4C70(uint64_t a1)
{
  return a1;
}

void *sub_1000A4CB0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B2588((uint64_t)a1, a2);
  *a1 = off_1001883F0;
  a1[45] = &off_1001884F0;
  a1[46] = &off_100188518;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001883F0;
  a1[45] = off_100188478;
  a1[46] = off_1001884A0;
  return a1;
}

void sub_1000A4D34(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A4D58(uint64_t a1)
{
  return a1;
}

void *sub_1000A4D98(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B2604((uint64_t)a1, a2);
  *a1 = off_100188610;
  a1[45] = &off_100188710;
  a1[46] = &off_100188738;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100188610;
  a1[45] = off_100188698;
  a1[46] = off_1001886C0;
  return a1;
}

void sub_1000A4E1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A4E40(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A4E80(uint64_t a1)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v6 = "void DiskImageSparseBundle::on_eject()";
    *((void *)&v6 + 1) = 36LL;
    int v7 = 2;
    sub_100021A40(v8, &v6);
    sub_10000552C(&v9, (uint64_t)"Evicting all bands for eject", 28LL);
    std::ostream::~ostream(&v9, off_1001743B8);
    sub_1000223CC((uint64_t)v8);
    std::ios::~ios(v10);
  }

  if (*(void *)(a1 + 16))
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
    do
    {
      sub_10007D268((std::chrono::steady_clock::time_point **)(*(void *)(a1 + 712) + v2), 0LL, v5);
      sub_10007D134((uint64_t)v5);
      ++v3;
      v2 += 24LL;
    }

    while (v3 < *(void *)(a1 + 16));
  }

  sub_10004D744(a1 + 416, 0xFFFFFFFFFFFFFFFFLL);
  *(void *)&__int128 v6 = "void DiskImageSparseBundle::on_eject()";
  *((void *)&v6 + 1) = 36LL;
  int v7 = 0;
  sub_1000A4FE0(v8, &v6);
  sub_10000552C(&v9, (uint64_t)"Sparse bundle ejected", 21LL);
  std::ostream::~ostream(&v9, off_1001888F8);
  sub_1000AF5B0((uint64_t)v8);
  return std::ios::~ios(v10);
}

void sub_1000A4FBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void *sub_1000A4FE0(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B2680((uint64_t)a1, a2);
  *a1 = off_100188830;
  a1[45] = &off_100188930;
  a1[46] = &off_100188958;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100188830;
  a1[45] = off_1001888B8;
  a1[46] = off_1001888E0;
  return a1;
}

void sub_1000A5064(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A5088(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A50C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000A51E8(a1, a2);
  if (!(_DWORD)result)
  {
    unint64_t v5 = (a2 + 4095) & 0xFFFFFFFFFFFFF000LL;
    if (v5 < 0x200000000000001LL)
    {
      return (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 560) + 56LL))( *(void *)(a1 + 560),  v5);
    }

    else
    {
      *(void *)&__int128 v6 = "int DiskImageSparseBundle::set_size(uint64_t)";
      *((void *)&v6 + 1) = 35LL;
      int v7 = 16;
      sub_1000A5308(v8, &v6);
      std::ostream::operator<<(&v9, v5);
      sub_10000552C(&v9, (uint64_t)" bytes are above the sparsebundle limit of ", 43LL);
      std::ostream::operator<<(&v9, 0x200000000000000LL);
      sub_10000552C(&v9, (uint64_t)" bytes", 6LL);
      std::ostream::~ostream(&v9, off_100188B18);
      sub_1000AFB5C((uint64_t)v8);
      std::ios::~ios(&v10);
      return 4294967269LL;
    }
  }

  return result;
}

void sub_1000A51D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000A51E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1) * v4;
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  unint64_t v7 = (a2 + v6 - 1) / v6 * v6;
  if (v5 <= v7) {
    return 0LL;
  }
  v11[0] = v7 / (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v11[1] = (v5 - v7) / (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a1 + 184LL))(a1, v8, v11, 1LL);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40LL))(v8);
  }
  return v9;
}

void sub_1000A52E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000A5308(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B26FC((uint64_t)a1, a2);
  *a1 = off_100188A50;
  a1[45] = &off_100188B50;
  a1[46] = &off_100188B78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100188A50;
  a1[45] = off_100188AD8;
  a1[46] = off_100188B00;
  return a1;
}

void sub_1000A538C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A53B0(uint64_t a1)
{
  return a1;
}

  ;
}

uint64_t sub_1000A53F8(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1000A5400(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 560) + 48LL))(*(void *)(a1 + 560));
}

uint64_t sub_1000A5410@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xB8uLL);
  uint64_t result = sub_10003ED28((uint64_t)v4, a1);
  *a2 = (char *)v4 + *(void *)(*v4 - 104LL);
  return result;
}

void sub_1000A545C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A5470()
{
  return 1LL;
}

void *sub_1000A5478(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  sub_1000AFF44(v2, a1);
  return v2;
}

void sub_1000A54AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A54C0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000A2CD0(a1, a2, 0, a3);
}

uint64_t sub_1000A54CC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000A5540((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000A5540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 24LL;
    sub_10007D1FC(v12, v10 + a3);
  }

  return a6;
}

uint64_t sub_1000A55D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_10007D134(i - 24);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000A561C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100045090();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100059990(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v13 = v10;
  unint64_t v14 = &v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sub_10007D200((uint64_t)v14, a2);
  uint64_t v15 = v14 + 24;
  sub_1000A54CC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1000A55D0((uint64_t)&v13);
  return v11;
}

void sub_1000A570C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000A5720(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001855F8);
  sub_1000A58E4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A5758(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001855F8);
  sub_1000A58E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A5798(char *a1)
{
}

uint64_t sub_1000A57DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A5810(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A585C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001855F8);
  sub_1000A58E4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A589C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001855F8);
  sub_1000A58E4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A58E4(uint64_t a1)
{
  *(void *)a1 = off_1001856C8;
  sub_1000A5980(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A5980(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A5AE8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A5AA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A5AD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A58E4(a1);
  operator delete(v1);
}

int *sub_1000A5AE8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 46LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 46LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void sub_1000A5CCC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10007D134(v4 - 24);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1000A5D3C(uint64_t a1)
{
  char v6 = (void **)(a1 + 352);
  sub_10000F974(&v6);
  uint64_t v2 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  sub_10000A494(a1 + 184, *(void **)(a1 + 192));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  sub_100006224(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
  }
  return a1;
}

uint64_t sub_1000A5E0C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100185818);
  sub_1000A5FD0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A5E44(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185818);
  sub_1000A5FD0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A5E84(char *a1)
{
}

uint64_t sub_1000A5EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A5EFC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A5F48(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100185818);
  sub_1000A5FD0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A5F88(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185818);
  sub_1000A5FD0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A5FD0(uint64_t a1)
{
  *(void *)a1 = off_1001858E8;
  sub_1000A606C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A606C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A61D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A6194( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A61C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A5FD0(a1);
  operator delete(v1);
}

int *sub_1000A61D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 59LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 59LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A63B8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100185A38);
  sub_1000A657C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A63F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185A38);
  sub_1000A657C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A6430(char *a1)
{
}

uint64_t sub_1000A6474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A64A8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A64F4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100185A38);
  sub_1000A657C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A6534(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185A38);
  sub_1000A657C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A657C(uint64_t a1)
{
  *(void *)a1 = off_100185B08;
  sub_1000A6618(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A6618(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A6780((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A6740( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A676C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A657C(a1);
  operator delete(v1);
}

int *sub_1000A6780(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 80LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 80LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A6964(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100185C58);
  sub_1000A6B28(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A699C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185C58);
  sub_1000A6B28(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A69DC(char *a1)
{
}

uint64_t sub_1000A6A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A6A54(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A6AA0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100185C58);
  sub_1000A6B28((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A6AE0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185C58);
  sub_1000A6B28((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A6B28(uint64_t a1)
{
  *(void *)a1 = off_100185D28;
  sub_1000A6BC4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A6BC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A6D2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A6CEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A6D18(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A6B28(a1);
  operator delete(v1);
}

int *sub_1000A6D2C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 101LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 101LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A6F10(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100185E78);
  sub_1000A70D4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A6F48(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185E78);
  sub_1000A70D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A6F88(char *a1)
{
}

uint64_t sub_1000A6FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A7000(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A704C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100185E78);
  sub_1000A70D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A708C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100185E78);
  sub_1000A70D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A70D4(uint64_t a1)
{
  *(void *)a1 = off_100185F48;
  sub_1000A7170(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A7170(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A72D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A7298( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A72C4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A70D4(a1);
  operator delete(v1);
}

int *sub_1000A72D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 111LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 111LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A74BC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100186098);
  sub_1000A7680(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A74F4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186098);
  sub_1000A7680(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A7534(char *a1)
{
}

uint64_t sub_1000A7578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A75AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A75F8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100186098);
  sub_1000A7680((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A7638(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186098);
  sub_1000A7680((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A7680(uint64_t a1)
{
  *(void *)a1 = off_100186168;
  sub_1000A771C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A771C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A7884((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A7844( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A7870(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A7680(a1);
  operator delete(v1);
}

int *sub_1000A7884(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 165LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 165LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A7A68(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001862B8);
  sub_1000A7C2C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A7AA0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001862B8);
  sub_1000A7C2C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A7AE0(char *a1)
{
}

uint64_t sub_1000A7B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A7B58(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A7BA4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001862B8);
  sub_1000A7C2C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A7BE4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001862B8);
  sub_1000A7C2C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A7C2C(uint64_t a1)
{
  *(void *)a1 = off_100186388;
  sub_1000A7CC8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A7CC8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A7E30((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A7DF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A7E1C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A7C2C(a1);
  operator delete(v1);
}

int *sub_1000A7E30(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 172LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 172LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A8014(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001864D8);
  sub_1000A81D8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A804C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001864D8);
  sub_1000A81D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A808C(char *a1)
{
}

uint64_t sub_1000A80D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A8104(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A8150(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001864D8);
  sub_1000A81D8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A8190(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001864D8);
  sub_1000A81D8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A81D8(uint64_t a1)
{
  *(void *)a1 = off_1001865A8;
  sub_1000A8274(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A8274(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A83DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A839C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A83C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A81D8(a1);
  operator delete(v1);
}

int *sub_1000A83DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 190LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 190LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A85C0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001866F8);
  sub_1000A8784(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A85F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001866F8);
  sub_1000A8784(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A8638(char *a1)
{
}

uint64_t sub_1000A867C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A86B0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A86FC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001866F8);
  sub_1000A8784((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A873C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001866F8);
  sub_1000A8784((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A8784(uint64_t a1)
{
  *(void *)a1 = off_1001867C8;
  sub_1000A8820(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A8820(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000A8988((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000A8948( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000A8974(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A8784(a1);
  operator delete(v1);
}

int *sub_1000A8988(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 194LL;
    __int16 v25 = 2082;
    int v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    unint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 194LL;
      __int16 v25 = 2082;
      int v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000A8B6C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = (uint64_t *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v26 = *(a2 - 2);
        uint64_t v27 = *v9;
        char v28 = -1;
        if (v26 >= *v9) {
          char v28 = 1;
        }
        if (v26 == *v9)
        {
          unint64_t v29 = *(a2 - 1);
          unint64_t v30 = v9[1];
          BOOL v31 = v29 >= v30;
          BOOL v32 = v29 == v30;
          char v28 = -1;
          if (v31) {
            char v28 = 1;
          }
          if (v32) {
            char v28 = 0;
          }
        }

        if (v28 < 0)
        {
          uint64_t v33 = v9[1];
          uint64_t v34 = *(a2 - 1);
          *uint64_t v9 = v26;
          v9[1] = v34;
          *(a2 - 2) = v27;
          *(a2 - 1) = v33;
        }

        return result;
      case 3uLL:
        return sub_1000A9050(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_1000A9674(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_1000A9780(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0) {
            return (uint64_t)sub_1000A8EEC(v9, a2);
          }
          else {
            return (uint64_t)sub_1000A8FAC(v9, a2);
          }
        }

        if (v11 != 1)
        {
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1000A9050(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          else
          {
            sub_1000A9050(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_1000A9050(v9 + 2, v15 - 2, a2 - 4);
            sub_1000A9050(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_1000A9050(v15 - 2, v15, &v9[2 * v14 + 2]);
            __int128 v16 = *(_OWORD *)v9;
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v15;
            *(_OWORD *)uint64_t v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          uint64_t v17 = *(v9 - 2);
          BOOL v18 = v17 == *v9;
          if (v17 >= *v9) {
            char v19 = 1;
          }
          else {
            char v19 = -1;
          }
          if (v18)
          {
            unint64_t v20 = *(v9 - 1);
            unint64_t v21 = v9[1];
            BOOL v22 = v20 == v21;
            char v19 = v20 >= v21 ? 1 : -1;
            if (v22) {
              char v19 = 0;
            }
          }

          if ((v19 & 0x80) == 0)
          {
            uint64_t result = (uint64_t)sub_1000A91A4(v9, a2);
            uint64_t v9 = (uint64_t *)result;
            goto LABEL_27;
          }

uint64_t *sub_1000A8EEC(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0LL;
      int v4 = result;
      do
      {
        int v5 = v2;
        uint64_t v6 = v4[2];
        uint64_t v7 = *v4;
        if (v6 >= *v4) {
          char v8 = 1;
        }
        else {
          char v8 = -1;
        }
        if (v6 == *v4)
        {
          unint64_t v9 = v4[3];
          unint64_t v10 = v4[1];
          BOOL v11 = v9 == v10;
          char v8 = v9 >= v10 ? 1 : -1;
          if (v11) {
            char v8 = 0;
          }
        }

        if (v8 < 0)
        {
          unint64_t v12 = v4[3];
          uint64_t v13 = v3;
          while (1)
          {
            unint64_t v14 = (char *)result + v13;
            uint64_t v15 = *(uint64_t *)((char *)result + v13 + 8);
            *((void *)v14 + 2) = v7;
            *((void *)v14 + 3) = v15;
            if (!v13) {
              break;
            }
            uint64_t v7 = *((void *)v14 - 2);
            if (v6 >= v7) {
              char v16 = 1;
            }
            else {
              char v16 = -1;
            }
            if (v6 == v7)
            {
              unint64_t v17 = *(uint64_t *)((char *)result + v13 - 8);
              BOOL v18 = v12 == v17;
              if (v12 >= v17) {
                char v16 = 1;
              }
              else {
                char v16 = -1;
              }
              if (v18) {
                char v16 = 0;
              }
            }

            v13 -= 16LL;
            if ((v16 & 0x80) == 0)
            {
              char v19 = (uint64_t *)((char *)result + v13 + 16);
              goto LABEL_28;
            }
          }

          char v19 = result;
LABEL_28:
          *char v19 = v6;
          v19[1] = v12;
        }

        uint64_t v2 = v5 + 2;
        v3 += 16LL;
        int v4 = v5;
      }

      while (v5 + 2 != a2);
    }
  }

  return result;
}

uint64_t *sub_1000A8FAC(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (unint64_t *)(result + 3);
      do
      {
        int v4 = v2;
        uint64_t v5 = result[2];
        uint64_t v6 = *result;
        if (v5 >= *result) {
          char v7 = 1;
        }
        else {
          char v7 = -1;
        }
        if (v5 == *result)
        {
          unint64_t v8 = result[3];
          unint64_t v9 = result[1];
          BOOL v10 = v8 == v9;
          char v7 = v8 >= v9 ? 1 : -1;
          if (v10) {
            char v7 = 0;
          }
        }

        if (v7 < 0)
        {
          unint64_t v11 = result[3];
          unint64_t v12 = v3;
          do
          {
            *(v12 - 1) = v6;
            unint64_t *v12 = *(v12 - 2);
            uint64_t v6 = *(v12 - 5);
            if (v5 >= v6) {
              char v13 = 1;
            }
            else {
              char v13 = -1;
            }
            if (v5 == v6)
            {
              unint64_t v14 = *(v12 - 4);
              BOOL v15 = v11 == v14;
              if (v11 >= v14) {
                char v13 = 1;
              }
              else {
                char v13 = -1;
              }
              if (v15) {
                char v13 = 0;
              }
            }

            v12 -= 2;
          }

          while (v13 < 0);
          *(v12 - 1) = v5;
          unint64_t *v12 = v11;
        }

        uint64_t v2 = v4 + 2;
        v3 += 2;
        uint64_t result = v4;
      }

      while (v4 + 2 != a2);
    }
  }

  return result;
}

uint64_t sub_1000A9050(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 >= *a1) {
    char v5 = 1;
  }
  else {
    char v5 = -1;
  }
  if (*a2 == *a1)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = a1[1];
    BOOL v8 = v6 >= v7;
    BOOL v9 = v6 == v7;
    char v10 = -1;
    if (v8) {
      char v10 = 1;
    }
    if (v9) {
      char v5 = 0;
    }
    else {
      char v5 = v10;
    }
  }

  uint64_t v11 = *a3;
  char v12 = -1;
  if (*a3 >= v3) {
    char v12 = 1;
  }
  if (v5 < 0)
  {
    if (v11 == v3)
    {
      unint64_t v18 = a3[1];
      unint64_t v19 = a2[1];
      BOOL v8 = v18 >= v19;
      BOOL v20 = v18 == v19;
      char v12 = -1;
      if (v8) {
        char v12 = 1;
      }
      if (v20) {
        char v12 = 0;
      }
    }

    if (v12 < 0)
    {
      uint64_t v36 = a1[1];
      uint64_t v37 = a3[1];
      *a1 = v11;
      a1[1] = v37;
      *a3 = v4;
      a3[1] = v36;
    }

    else
    {
      unint64_t v21 = a1[1];
      uint64_t v22 = a2[1];
      *a1 = v3;
      a1[1] = v22;
      *a2 = v4;
      a2[1] = v21;
      char v23 = -1;
      if (*a3 >= v4) {
        char v23 = 1;
      }
      if (*a3 == v4)
      {
        unint64_t v24 = a3[1];
        BOOL v8 = v24 >= v21;
        BOOL v25 = v24 == v21;
        char v23 = -1;
        if (v8) {
          char v23 = 1;
        }
        if (v25) {
          char v23 = 0;
        }
      }

      if (v23 < 0)
      {
        uint64_t v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v4;
        a3[1] = v21;
        return 2LL;
      }
    }
  }

  else
  {
    if (v11 == v3)
    {
      unint64_t v13 = a3[1];
      unint64_t v14 = a2[1];
      BOOL v8 = v13 >= v14;
      BOOL v15 = v13 == v14;
      char v16 = -1;
      if (v8) {
        char v16 = 1;
      }
      if (v15) {
        char v12 = 0;
      }
      else {
        char v12 = v16;
      }
    }

    if ((v12 & 0x80) == 0) {
      return 0LL;
    }
    *a2 = v11;
    *a3 = v3;
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    a2[1] = a3[1];
    a3[1] = v28;
    uint64_t v29 = *a1;
    char v30 = -1;
    if (v27 >= *a1) {
      char v30 = 1;
    }
    if (v27 == *a1)
    {
      unint64_t v31 = a2[1];
      unint64_t v32 = a1[1];
      BOOL v8 = v31 >= v32;
      BOOL v33 = v31 == v32;
      char v30 = -1;
      if (v8) {
        char v30 = 1;
      }
      if (v33) {
        char v30 = 0;
      }
    }

    if (v30 < 0)
    {
      uint64_t v34 = a1[1];
      uint64_t v35 = a2[1];
      *a1 = v27;
      a1[1] = v35;
      *a2 = v29;
      a2[1] = v34;
      return 2LL;
    }
  }

  return 1LL;
}

void *sub_1000A91A4(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(a2 - 2);
  BOOL v5 = *a1 == v4;
  if (*a1 >= v4) {
    char v6 = 1;
  }
  else {
    char v6 = -1;
  }
  if (v5)
  {
    unint64_t v7 = *(a2 - 1);
    BOOL v8 = v3 >= v7;
    BOOL v9 = v3 == v7;
    char v6 = -1;
    if (v8) {
      char v6 = 1;
    }
    if (v9) {
      char v6 = 0;
    }
  }

  if (v6 < 0)
  {
    BOOL v15 = a1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v16 = v11[2];
      v11 += 2;
      BOOL v17 = v2 == v16;
      if (v2 >= v16) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = v15[3];
        BOOL v20 = v3 == v19;
        char v18 = v3 >= v19 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }

      BOOL v15 = v11;
    }

    while ((v18 & 0x80) == 0);
  }

  else
  {
    char v10 = a1 + 2;
    do
    {
      uint64_t v11 = v10;
      if (v10 >= a2) {
        break;
      }
      if (v2 >= *v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v2 == *v10)
      {
        unint64_t v13 = v10[1];
        BOOL v14 = v3 == v13;
        char v12 = v3 >= v13 ? 1 : -1;
        if (v14) {
          char v12 = 0;
        }
      }

      v10 += 2;
    }

    while ((v12 & 0x80) == 0);
  }

  if (v11 >= a2)
  {
    unint64_t v21 = a2;
  }

  else
  {
    unint64_t v21 = a2;
    do
    {
      uint64_t v22 = *(v21 - 2);
      v21 -= 2;
      BOOL v23 = v2 == v22;
      if (v2 >= v22) {
        char v24 = 1;
      }
      else {
        char v24 = -1;
      }
      if (v23)
      {
        unint64_t v25 = *(a2 - 1);
        BOOL v26 = v3 == v25;
        char v24 = v3 >= v25 ? 1 : -1;
        if (v26) {
          char v24 = 0;
        }
      }

      a2 = v21;
    }

    while (v24 < 0);
  }

  if (v11 < v21)
  {
    uint64_t v27 = *v11;
    uint64_t v28 = *v21;
    do
    {
      uint64_t v29 = v11[1];
      uint64_t v30 = v21[1];
      void *v11 = v28;
      v11[1] = v30;
      *unint64_t v21 = v27;
      v21[1] = v29;
      unint64_t v31 = v11;
      do
      {
        uint64_t v32 = v11[2];
        v11 += 2;
        uint64_t v27 = v32;
        BOOL v33 = v2 == v32;
        if (v2 >= v32) {
          char v34 = 1;
        }
        else {
          char v34 = -1;
        }
        if (v33)
        {
          unint64_t v35 = v31[3];
          BOOL v36 = v3 == v35;
          char v34 = v3 >= v35 ? 1 : -1;
          if (v36) {
            char v34 = 0;
          }
        }

        unint64_t v31 = v11;
      }

      while ((v34 & 0x80) == 0);
      uint64_t v37 = v21;
      do
      {
        uint64_t v38 = *(v21 - 2);
        v21 -= 2;
        uint64_t v28 = v38;
        BOOL v39 = v2 == v38;
        if (v2 >= v38) {
          char v40 = 1;
        }
        else {
          char v40 = -1;
        }
        if (v39)
        {
          unint64_t v41 = *(v37 - 1);
          BOOL v42 = v3 == v41;
          char v40 = v3 >= v41 ? 1 : -1;
          if (v42) {
            char v40 = 0;
          }
        }

        uint64_t v37 = v21;
      }

      while (v40 < 0);
    }

    while (v11 < v21);
  }

  if (v11 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
  }
  *(v11 - 2) = v2;
  *(v11 - 1) = v3;
  return v11;
}

uint64_t *sub_1000A932C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  do
  {
    uint64_t v5 = a1[v2 + 2];
    if (v5 >= v3) {
      char v6 = 1;
    }
    else {
      char v6 = -1;
    }
    if (v5 == v3)
    {
      unint64_t v7 = a1[v2 + 3];
      BOOL v8 = v7 == v4;
      char v6 = v7 >= v4 ? 1 : -1;
      if (v8) {
        char v6 = 0;
      }
    }

    v2 += 2LL;
  }

  while (v6 < 0);
  BOOL v9 = &a1[v2];
  if (v2 == 2)
  {
    while (v9 < a2)
    {
      char v10 = a2 - 2;
      uint64_t v16 = *(a2 - 2);
      BOOL v17 = v16 == v3;
      if (v16 >= v3) {
        char v18 = 1;
      }
      else {
        char v18 = -1;
      }
      if (v17)
      {
        unint64_t v19 = *(a2 - 1);
        BOOL v20 = v19 == v4;
        char v18 = v19 >= v4 ? 1 : -1;
        if (v20) {
          char v18 = 0;
        }
      }

      a2 -= 2;
      if (v18 < 0) {
        goto LABEL_39;
      }
    }

    char v10 = a2;
  }

  else
  {
    char v10 = a2;
    do
    {
      uint64_t v11 = *(v10 - 2);
      v10 -= 2;
      BOOL v12 = v11 == v3;
      if (v11 >= v3) {
        char v13 = 1;
      }
      else {
        char v13 = -1;
      }
      if (v12)
      {
        unint64_t v14 = *(a2 - 1);
        BOOL v15 = v14 == v4;
        char v13 = v14 >= v4 ? 1 : -1;
        if (v15) {
          char v13 = 0;
        }
      }

      a2 = v10;
    }

    while ((v13 & 0x80) == 0);
  }

BOOL sub_1000A9494(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      char v8 = -1;
      if (v6 >= *a1) {
        char v8 = 1;
      }
      if (v6 == *a1)
      {
        unint64_t v9 = *(a2 - 1);
        unint64_t v10 = a1[1];
        BOOL v11 = v9 >= v10;
        BOOL v12 = v9 == v10;
        char v8 = -1;
        if (v11) {
          char v8 = 1;
        }
        if (v12) {
          char v8 = 0;
        }
      }

      if (v8 < 0)
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v14;
        *(a2 - 2) = v7;
        *(a2 - 1) = v13;
      }

      return result;
    case 3LL:
      sub_1000A9050(a1, a1 + 2, a2 - 2);
      return 1LL;
    case 4LL:
      sub_1000A9674(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1LL;
    case 5LL:
      sub_1000A9780(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1LL;
    default:
      BOOL v15 = a1 + 4;
      sub_1000A9050(a1, a1 + 2, a1 + 4);
      uint64_t v16 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1LL;
      }
      uint64_t v17 = 0LL;
      int v18 = 0;
      break;
  }

  while (1)
  {
    uint64_t v19 = *v16;
    uint64_t v20 = *v15;
    if (*v16 >= *v15) {
      char v21 = 1;
    }
    else {
      char v21 = -1;
    }
    if (*v16 == *v15)
    {
      unint64_t v22 = v16[1];
      unint64_t v23 = v15[1];
      BOOL v24 = v22 == v23;
      char v21 = v22 >= v23 ? 1 : -1;
      if (v24) {
        char v21 = 0;
      }
    }

    if (v21 < 0)
    {
      unint64_t v25 = v16[1];
      uint64_t v26 = v17;
      while (1)
      {
        uint64_t v27 = (uint64_t *)((char *)a1 + v26);
        uint64_t v28 = *(uint64_t *)((char *)a1 + v26 + 40);
        v27[6] = v20;
        v27[7] = v28;
        if (v26 == -32) {
          break;
        }
        uint64_t v20 = v27[2];
        if (v19 >= v20) {
          char v29 = 1;
        }
        else {
          char v29 = -1;
        }
        if (v19 == v20)
        {
          unint64_t v30 = *(uint64_t *)((char *)a1 + v26 + 24);
          BOOL v31 = v25 == v30;
          char v29 = v25 >= v30 ? 1 : -1;
          if (v31) {
            char v29 = 0;
          }
        }

        v26 -= 16LL;
        if ((v29 & 0x80) == 0)
        {
          uint64_t v32 = (uint64_t *)((char *)a1 + v26 + 48);
          goto LABEL_38;
        }
      }

      uint64_t v32 = a1;
LABEL_38:
      *uint64_t v32 = v19;
      v32[1] = v25;
      if (++v18 == 8) {
        return v16 + 2 == a2;
      }
    }

    BOOL v15 = v16;
    v17 += 16LL;
    v16 += 2;
    if (v16 == a2) {
      return 1LL;
    }
  }

uint64_t sub_1000A9674(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_1000A9050(a1, a2, a3);
  uint64_t v9 = *a3;
  char v10 = -1;
  if (*a4 >= *a3) {
    char v10 = 1;
  }
  if (*a4 == *a3)
  {
    unint64_t v11 = a4[1];
    unint64_t v12 = a3[1];
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    char v10 = -1;
    if (v13) {
      char v10 = 1;
    }
    if (v14) {
      char v10 = 0;
    }
  }

  if (v10 < 0)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = *a2;
    char v18 = -1;
    if (v15 >= *a2) {
      char v18 = 1;
    }
    if (v15 == *a2)
    {
      unint64_t v19 = a3[1];
      unint64_t v20 = a2[1];
      BOOL v13 = v19 >= v20;
      BOOL v21 = v19 == v20;
      char v18 = -1;
      if (v13) {
        char v18 = 1;
      }
      if (v21) {
        char v18 = 0;
      }
    }

    if (v18 < 0)
    {
      *a2 = v15;
      *a3 = v17;
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      uint64_t v24 = *a1;
      char v25 = -1;
      if (v22 >= *a1) {
        char v25 = 1;
      }
      if (v22 == *a1)
      {
        unint64_t v26 = a2[1];
        unint64_t v27 = a1[1];
        BOOL v13 = v26 >= v27;
        BOOL v28 = v26 == v27;
        char v25 = -1;
        if (v13) {
          char v25 = 1;
        }
        if (v28) {
          char v25 = 0;
        }
      }

      if (v25 < 0)
      {
        uint64_t v29 = a1[1];
        uint64_t v30 = a2[1];
        *a1 = v22;
        a1[1] = v30;
        *a2 = v24;
        a2[1] = v29;
      }
    }
  }

  return result;
}

uint64_t sub_1000A9780(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1000A9674(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  char v12 = -1;
  if (*a5 >= *a4) {
    char v12 = 1;
  }
  if (*a5 == *a4)
  {
    unint64_t v13 = a5[1];
    unint64_t v14 = a4[1];
    BOOL v15 = v13 >= v14;
    BOOL v16 = v13 == v14;
    char v12 = -1;
    if (v15) {
      char v12 = 1;
    }
    if (v16) {
      char v12 = 0;
    }
  }

  if (v12 < 0)
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = *a3;
    char v20 = -1;
    if (v17 >= *a3) {
      char v20 = 1;
    }
    if (v17 == *a3)
    {
      unint64_t v21 = a4[1];
      unint64_t v22 = a3[1];
      BOOL v15 = v21 >= v22;
      BOOL v23 = v21 == v22;
      char v20 = -1;
      if (v15) {
        char v20 = 1;
      }
      if (v23) {
        char v20 = 0;
      }
    }

    if (v20 < 0)
    {
      *a3 = v17;
      *a4 = v19;
      uint64_t v24 = *a3;
      uint64_t v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      uint64_t v26 = *a2;
      char v27 = -1;
      if (v24 >= *a2) {
        char v27 = 1;
      }
      if (v24 == *a2)
      {
        unint64_t v28 = a3[1];
        unint64_t v29 = a2[1];
        BOOL v15 = v28 >= v29;
        BOOL v30 = v28 == v29;
        char v27 = -1;
        if (v15) {
          char v27 = 1;
        }
        if (v30) {
          char v27 = 0;
        }
      }

      if (v27 < 0)
      {
        *a2 = v24;
        *a3 = v26;
        uint64_t v31 = *a2;
        uint64_t v32 = a2[1];
        a2[1] = a3[1];
        a3[1] = v32;
        uint64_t v33 = *a1;
        char v34 = -1;
        if (v31 >= *a1) {
          char v34 = 1;
        }
        if (v31 == *a1)
        {
          unint64_t v35 = a2[1];
          unint64_t v36 = a1[1];
          BOOL v15 = v35 >= v36;
          BOOL v37 = v35 == v36;
          char v34 = -1;
          if (v15) {
            char v34 = 1;
          }
          if (v37) {
            char v34 = 0;
          }
        }

        if (v34 < 0)
        {
          uint64_t v38 = a1[1];
          uint64_t v39 = a2[1];
          *a1 = v31;
          a1[1] = v39;
          *a2 = v33;
          a2[1] = v38;
        }
      }
    }
  }

  return result;
}

char *sub_1000A98E0(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[16 * v10];
      do
      {
        sub_1000A9A50((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }

      while (v11);
    }

    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 >= *(void *)a1) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (*(void *)v14 == *(void *)a1)
        {
          unint64_t v17 = *((void *)v14 + 1);
          unint64_t v18 = *((void *)a1 + 1);
          BOOL v19 = v17 == v18;
          char v16 = v17 >= v18 ? 1 : -1;
          if (v19) {
            char v16 = 0;
          }
        }

        if (v16 < 0)
        {
          uint64_t v20 = *((void *)v14 + 1);
          uint64_t v21 = *((void *)a1 + 1);
          *(void *)unint64_t v14 = *(void *)a1;
          *((void *)v14 + 1) = v21;
          *(void *)a1 = v15;
          *((void *)a1 + 1) = v20;
          sub_1000A9A50((uint64_t)a1, a4, v9, a1);
        }

        v14 += 16;
      }

      while (v14 != a3);
      unint64_t v13 = a3;
    }

    if (v8 >= 17)
    {
      uint64_t v22 = (unint64_t)v8 >> 4;
      BOOL v23 = a2 - 16;
      do
      {
        uint64_t v25 = *(void *)a1;
        uint64_t v24 = *((void *)a1 + 1);
        uint64_t v26 = (char *)sub_1000A9BA4(a1, a4, v22);
        if (v23 == v26)
        {
          *(void *)uint64_t v26 = v25;
          *((void *)v26 + 1) = v24;
        }

        else
        {
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v23;
          *(void *)BOOL v23 = v25;
          *((void *)v23 + 1) = v24;
          sub_1000A9C38((uint64_t)a1, (uint64_t)(v26 + 16), a4, (v26 + 16 - a1) >> 4);
        }

        v23 -= 16;
      }

      while (v22-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_1000A9A50(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (void *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = v8[2];
        BOOL v11 = *v8 == v10;
        if (*v8 >= v10) {
          char v12 = 1;
        }
        else {
          char v12 = -1;
        }
        if (v11)
        {
          unint64_t v13 = *(void *)(result + 16 * v7 + 8);
          unint64_t v14 = v8[3];
          BOOL v15 = v13 >= v14;
          BOOL v16 = v13 == v14;
          char v12 = -1;
          if (v15) {
            char v12 = 1;
          }
          if (v16) {
            char v12 = 0;
          }
        }

        if (v12 < 0)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }

      uint64_t v17 = *v8;
      uint64_t v18 = *a4;
      char v19 = -1;
      if (*v8 >= *a4) {
        char v19 = 1;
      }
      if (*v8 == *a4)
      {
        unint64_t v20 = v8[1];
        unint64_t v21 = a4[1];
        BOOL v15 = v20 >= v21;
        BOOL v22 = v20 == v21;
        char v19 = -1;
        if (v15) {
          char v19 = 1;
        }
        if (v22) {
          char v19 = 0;
        }
      }

      if ((v19 & 0x80) == 0)
      {
        unint64_t v23 = a4[1];
        do
        {
          uint64_t v24 = a4;
          a4 = v8;
          uint64_t v25 = v8[1];
          *uint64_t v24 = v17;
          v24[1] = v25;
          if (v5 < v7) {
            break;
          }
          uint64_t v26 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 16 * v26);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v26;
          }

          else
          {
            uint64_t v27 = v8[2];
            BOOL v28 = *v8 == v27;
            if (*v8 >= v27) {
              char v29 = 1;
            }
            else {
              char v29 = -1;
            }
            if (v28)
            {
              unint64_t v30 = *(void *)(result + 16 * v26 + 8);
              unint64_t v31 = v8[3];
              BOOL v32 = v30 == v31;
              char v29 = v30 >= v31 ? 1 : -1;
              if (v32) {
                char v29 = 0;
              }
            }

            if (v29 < 0) {
              v8 += 2;
            }
            else {
              uint64_t v7 = v26;
            }
          }

          uint64_t v17 = *v8;
          if (*v8 >= v18) {
            char v33 = 1;
          }
          else {
            char v33 = -1;
          }
          if (*v8 == v18)
          {
            unint64_t v34 = v8[1];
            BOOL v35 = v34 == v23;
            if (v34 >= v23) {
              char v33 = 1;
            }
            else {
              char v33 = -1;
            }
            if (v35) {
              char v33 = 0;
            }
          }
        }

        while ((v33 & 0x80) == 0);
        *a4 = v18;
        a4[1] = v23;
      }
    }
  }

  return result;
}

void *sub_1000A9BA4(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = v3 + 1;
    uint64_t v7 = &a1[v3 + 1];
    uint64_t v8 = (2 * v3) | 1;
    uint64_t v9 = 2 * v3 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = v7[2];
      BOOL v11 = *v7 == v10;
      if (*v7 >= v10) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unint64_t v13 = *((void *)&a1[v6] + 1);
        unint64_t v14 = v7[3];
        BOOL v15 = v13 == v14;
        if (v13 >= v14) {
          char v16 = 1;
        }
        else {
          char v16 = -1;
        }
        if (v15) {
          char v12 = 0;
        }
        else {
          char v12 = v16;
        }
      }

      if (v12 < 0)
      {
        v7 += 2;
        uint64_t v8 = v9;
      }
    }

    *a1 = *(_OWORD *)v7;
    a1 = v7;
    uint64_t v3 = v8;
  }

  while (v8 <= v5);
  return v7;
}

uint64_t sub_1000A9C38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 16 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 16);
    uint64_t v8 = *(void *)(a2 - 16);
    uint64_t v9 = *v6;
    char v10 = -1;
    if (*v6 >= v8) {
      char v10 = 1;
    }
    if (*v6 == v8)
    {
      unint64_t v11 = v6[1];
      unint64_t v12 = *(void *)(a2 - 8);
      BOOL v13 = v11 >= v12;
      BOOL v14 = v11 == v12;
      char v10 = -1;
      if (v13) {
        char v10 = 1;
      }
      if (v14) {
        char v10 = 0;
      }
    }

    if (v10 < 0)
    {
      unint64_t v15 = *(void *)(a2 - 8);
      do
      {
        char v16 = v7;
        uint64_t v7 = v6;
        uint64_t v17 = v6[1];
        void *v16 = v9;
        v16[1] = v17;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 16 * v5);
        uint64_t v9 = *v6;
        if (*v6 >= v8) {
          char v18 = 1;
        }
        else {
          char v18 = -1;
        }
        if (*v6 == v8)
        {
          unint64_t v19 = v6[1];
          BOOL v20 = v19 == v15;
          if (v19 >= v15) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if (v20) {
            char v18 = 0;
          }
        }
      }

      while (v18 < 0);
      *uint64_t v7 = v8;
      v7[1] = v15;
    }
  }

  return result;
}

uint64_t sub_1000A9CD4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100186918);
  sub_1000A9E98(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000A9D0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186918);
  sub_1000A9E98(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000A9D4C(char *a1)
{
}

uint64_t sub_1000A9D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000A9DC4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000A9E10(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100186918);
  sub_1000A9E98((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000A9E50(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186918);
  sub_1000A9E98((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000A9E98(uint64_t a1)
{
  *(void *)a1 = off_1001869E8;
  sub_1000A9F34(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000A9F34(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AA09C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AA05C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AA088(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000A9E98(a1);
  operator delete(v1);
}

int *sub_1000AA09C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 213LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 213LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AA280(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100186B38);
  sub_1000AA444(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AA2B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186B38);
  sub_1000AA444(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AA2F8(char *a1)
{
}

uint64_t sub_1000AA33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AA370(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AA3BC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100186B38);
  sub_1000AA444((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AA3FC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186B38);
  sub_1000AA444((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AA444(uint64_t a1)
{
  *(void *)a1 = off_100186C08;
  sub_1000AA4E0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AA4E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AA648((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AA608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AA634(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AA444(a1);
  operator delete(v1);
}

int *sub_1000AA648(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 218LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 218LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AA82C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100186D58);
  sub_1000AA9F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AA864(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186D58);
  sub_1000AA9F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AA8A4(char *a1)
{
}

uint64_t sub_1000AA8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AA91C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AA968(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100186D58);
  sub_1000AA9F0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AA9A8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186D58);
  sub_1000AA9F0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AA9F0(uint64_t a1)
{
  *(void *)a1 = off_100186E28;
  sub_1000AAA8C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AAA8C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AABF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AABB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AABE0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AA9F0(a1);
  operator delete(v1);
}

int *sub_1000AABF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 222LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 222LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AADD8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100186F78);
  sub_1000AAF9C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AAE10(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186F78);
  sub_1000AAF9C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AAE50(char *a1)
{
}

uint64_t sub_1000AAE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AAEC8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AAF14(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100186F78);
  sub_1000AAF9C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AAF54(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100186F78);
  sub_1000AAF9C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AAF9C(uint64_t a1)
{
  *(void *)a1 = off_100187048;
  sub_1000AB038(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AB038(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AB1A0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AB160( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AB18C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AAF9C(a1);
  operator delete(v1);
}

int *sub_1000AB1A0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 231LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 231LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AB384(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187198);
  sub_1000AB548(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AB3BC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187198);
  sub_1000AB548(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AB3FC(char *a1)
{
}

uint64_t sub_1000AB440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AB474(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AB4C0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100187198);
  sub_1000AB548((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AB500(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187198);
  sub_1000AB548((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AB548(uint64_t a1)
{
  *(void *)a1 = off_100187268;
  sub_1000AB5E4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AB5E4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AB74C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AB70C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AB738(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AB548(a1);
  operator delete(v1);
}

int *sub_1000AB74C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 235LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 235LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AB930(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001873B8);
  sub_1000ABAF4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AB968(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001873B8);
  sub_1000ABAF4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AB9A8(char *a1)
{
}

uint64_t sub_1000AB9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000ABA20(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000ABA6C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001873B8);
  sub_1000ABAF4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000ABAAC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001873B8);
  sub_1000ABAF4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000ABAF4(uint64_t a1)
{
  *(void *)a1 = off_100187488;
  sub_1000ABB90(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ABB90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000ABCF8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000ABCB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ABCE4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000ABAF4(a1);
  operator delete(v1);
}

int *sub_1000ABCF8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 237LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 237LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000ABEDC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001875D8);
  sub_1000AC0A0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ABF14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001875D8);
  sub_1000AC0A0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ABF54(char *a1)
{
}

uint64_t sub_1000ABF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000ABFCC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AC018(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001875D8);
  sub_1000AC0A0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AC058(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001875D8);
  sub_1000AC0A0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AC0A0(uint64_t a1)
{
  *(void *)a1 = off_1001876A8;
  sub_1000AC13C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AC13C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AC2A4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AC264( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AC290(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AC0A0(a1);
  operator delete(v1);
}

int *sub_1000AC2A4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 284LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 284LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AC488(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001877F8);
  sub_1000AC64C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AC4C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001877F8);
  sub_1000AC64C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AC500(char *a1)
{
}

uint64_t sub_1000AC544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AC578(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AC5C4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001877F8);
  sub_1000AC64C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AC604(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001877F8);
  sub_1000AC64C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AC64C(uint64_t a1)
{
  *(void *)a1 = off_1001878C8;
  sub_1000AC6E8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AC6E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AC850((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AC810( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AC83C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AC64C(a1);
  operator delete(v1);
}

int *sub_1000AC850(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 295LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 295LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void *sub_1000ACA34(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000ACB1C((uint64_t)a1, a2);
  *a1 = off_100187950;
  a1[45] = &off_100187A50;
  a1[46] = &off_100187A78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100187950;
  a1[45] = off_1001879D8;
  a1[46] = off_100187A00;
  return a1;
}

void sub_1000ACAB8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000ACADC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000ACB1C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100187AE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000ACB84(_Unwind_Exception *a1)
{
}

uint64_t sub_1000ACB98(uint64_t a1)
{
  *(void *)a1 = off_100187AE8;
  sub_1000ACE10(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000ACC34(char *a1)
{
}

uint64_t sub_1000ACC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000ACCAC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000ACCF8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187A18);
  sub_1000ACB98(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000ACD30(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100187A18);
  sub_1000ACB98((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000ACD70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187A18);
  sub_1000ACB98(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ACDB0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187A18);
  sub_1000ACB98((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000ACDFC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000ACB98(a1);
  operator delete(v1);
}

uint64_t sub_1000ACE10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000ACF60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000ACF38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000ACF60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 241LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 241LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AD144(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_1000AD18C((_OWORD *)a1, a2);
  return a1;
}

void sub_1000AD170(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_100126370(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1000AD18C(_OWORD *__dst, __int128 *a2)
{
  if (*((_BYTE *)a2 + 24))
  {
    uint64_t v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      __dst = sub_10000AD88(__dst, *(void **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *__dst = v3;
    }

    v2[24] = 1;
  }

  return __dst;
}

uint64_t sub_1000AD1E4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187C38);
  sub_1000AD3A8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AD21C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187C38);
  sub_1000AD3A8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AD25C(char *a1)
{
}

uint64_t sub_1000AD2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AD2D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AD320(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100187C38);
  sub_1000AD3A8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AD360(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187C38);
  sub_1000AD3A8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AD3A8(uint64_t a1)
{
  *(void *)a1 = off_100187D08;
  sub_1000AD444(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AD444(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AD5AC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AD56C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AD598(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AD3A8(a1);
  operator delete(v1);
}

int *sub_1000AD5AC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 434LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 434LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AD790(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100187E58);
  sub_1000AD954(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AD7C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187E58);
  sub_1000AD954(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AD808(char *a1)
{
}

uint64_t sub_1000AD84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AD880(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AD8CC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100187E58);
  sub_1000AD954((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AD90C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100187E58);
  sub_1000AD954((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AD954(uint64_t a1)
{
  *(void *)a1 = off_100187F28;
  sub_1000AD9F0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AD9F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000ADB58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000ADB18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ADB44(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AD954(a1);
  operator delete(v1);
}

int *sub_1000ADB58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 443LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 443LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000ADD3C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188078);
  sub_1000ADF00(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ADD74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188078);
  sub_1000ADF00(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ADDB4(char *a1)
{
}

uint64_t sub_1000ADDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000ADE2C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000ADE78(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100188078);
  sub_1000ADF00((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000ADEB8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188078);
  sub_1000ADF00((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000ADF00(uint64_t a1)
{
  *(void *)a1 = off_100188148;
  sub_1000ADF9C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ADF9C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AE104((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AE0C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AE0F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000ADF00(a1);
  operator delete(v1);
}

int *sub_1000AE104(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 460LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 460LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AE2E8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188298);
  sub_1000AE4AC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AE320(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188298);
  sub_1000AE4AC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AE360(char *a1)
{
}

uint64_t sub_1000AE3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AE3D8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AE424(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100188298);
  sub_1000AE4AC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AE464(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188298);
  sub_1000AE4AC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AE4AC(uint64_t a1)
{
  *(void *)a1 = off_100188368;
  sub_1000AE548(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AE548(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AE6B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AE670( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AE69C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AE4AC(a1);
  operator delete(v1);
}

int *sub_1000AE6B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 469LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 469LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AE894(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001884B8);
  sub_1000AEA58(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AE8CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001884B8);
  sub_1000AEA58(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AE90C(char *a1)
{
}

uint64_t sub_1000AE950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AE984(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AE9D0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001884B8);
  sub_1000AEA58((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AEA10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001884B8);
  sub_1000AEA58((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AEA58(uint64_t a1)
{
  *(void *)a1 = off_100188588;
  sub_1000AEAF4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AEAF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AEC5C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AEC1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AEC48(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AEA58(a1);
  operator delete(v1);
}

int *sub_1000AEC5C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 492LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 492LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AEE40(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001886D8);
  sub_1000AF004(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AEE78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001886D8);
  sub_1000AF004(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AEEB8(char *a1)
{
}

uint64_t sub_1000AEEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AEF30(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AEF7C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001886D8);
  sub_1000AF004((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AEFBC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001886D8);
  sub_1000AF004((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AF004(uint64_t a1)
{
  *(void *)a1 = off_1001887A8;
  sub_1000AF0A0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AF0A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AF208((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AF1C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AF1F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AF004(a1);
  operator delete(v1);
}

int *sub_1000AF208(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 498LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 498LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AF3EC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001888F8);
  sub_1000AF5B0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AF424(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001888F8);
  sub_1000AF5B0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AF464(char *a1)
{
}

uint64_t sub_1000AF4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AF4DC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AF528(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001888F8);
  sub_1000AF5B0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AF568(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001888F8);
  sub_1000AF5B0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AF5B0(uint64_t a1)
{
  *(void *)a1 = off_1001889C8;
  sub_1000AF64C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AF64C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AF7B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AF774( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AF7A0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AF5B0(a1);
  operator delete(v1);
}

int *sub_1000AF7B4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 511LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 511LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000AF998(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188B18);
  sub_1000AFB5C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000AF9D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188B18);
  sub_1000AFB5C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000AFA10(char *a1)
{
}

uint64_t sub_1000AFA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000AFA88(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000AFAD4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100188B18);
  sub_1000AFB5C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000AFB14(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188B18);
  sub_1000AFB5C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000AFB5C(uint64_t a1)
{
  *(void *)a1 = off_100188BE8;
  sub_1000AFBF8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000AFBF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000AFD60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000AFD20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AFD4C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000AFB5C(a1);
  operator delete(v1);
}

int *sub_1000AFD60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 523LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 523LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void *sub_1000AFF44(void *a1, uint64_t a2)
{
  *a1 = off_100188C68;
  a1[1] = a2;
  sub_1000B0140(a1 + 2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 720) - *(void *)(a2 + 712)) >> 3));
  if (sub_1000BE308())
  {
    *(void *)&__int128 v4 = "DiskImageSparseBundle::ContextSparseBundle::ContextSparseBundle(DiskImageSparseBundle &)";
    *((void *)&v4 + 1) = 63LL;
    int v5 = 2;
    sub_1000B0040(v6, &v4);
    sub_10000552C(&v7, (uint64_t)"Constructing sb context", 23LL);
    std::ostream::~ostream(&v7, off_100188D90);
    sub_1000B0278((uint64_t)v6);
    std::ios::~ios(&v8);
  }

  return a1;
}

void sub_1000B0014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000B0040(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B01FC((uint64_t)a1, a2);
  *a1 = off_100188CC8;
  a1[45] = &off_100188DC8;
  a1[46] = &off_100188DF0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100188CC8;
  a1[45] = off_100188D50;
  a1[46] = off_100188D78;
  return a1;
}

void sub_1000B00C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B00E8(uint64_t a1)
{
  return a1;
}

void sub_1000B012C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000B0824(a1);
  operator delete(v1);
}

void *sub_1000B0140(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_1000B01BC(a1, a2);
    __int128 v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }

  return a1;
}

void sub_1000B01A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_1000B01BC(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100045090();
  }
  uint64_t result = (char *)sub_100061D04((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_1000B01FC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100188E60;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B0264(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B0278(uint64_t a1)
{
  *(void *)a1 = off_100188E60;
  sub_1000B04F0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000B0314(char *a1)
{
}

uint64_t sub_1000B0358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000B038C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000B03D8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188D90);
  sub_1000B0278(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000B0410(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100188D90);
  sub_1000B0278((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000B0450(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188D90);
  sub_1000B0278(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000B0490(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188D90);
  sub_1000B0278((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000B04DC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000B0278(a1);
  operator delete(v1);
}

uint64_t sub_1000B04F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000B0640((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000B0618( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000B0640(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 37LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 37LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000B0824(uint64_t a1)
{
  *(void *)a1 = off_100188C68;
  if (sub_1000BE308())
  {
    *(void *)&__int128 v3 = "DiskImageSparseBundle::ContextSparseBundle::~ContextSparseBundle()";
    *((void *)&v3 + 1) = 64LL;
    int v4 = 2;
    sub_1000B08E0(v5, &v3);
    sub_10000552C(&v6, (uint64_t)"Destructing sb context", 22LL);
    std::ostream::~ostream(&v6, off_100188FB0);
    sub_1000B0A44((uint64_t)v5);
    std::ios::~ios(&v7);
  }

  v5[0] = (void **)(a1 + 16);
  sub_10006806C(v5);
  return a1;
}

void *sub_1000B08E0(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000B09C8((uint64_t)a1, a2);
  *a1 = off_100188EE8;
  a1[45] = &off_100188FE8;
  a1[46] = &off_100189010;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100188EE8;
  a1[45] = off_100188F70;
  a1[46] = off_100188F98;
  return a1;
}

void sub_1000B0964(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B0988(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B09C8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100189080;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B0A30(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B0A44(uint64_t a1)
{
  *(void *)a1 = off_100189080;
  sub_1000B0CBC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000B0AE0(char *a1)
{
}

uint64_t sub_1000B0B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000B0B58(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000B0BA4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100188FB0);
  sub_1000B0A44(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000B0BDC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100188FB0);
  sub_1000B0A44((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000B0C1C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188FB0);
  sub_1000B0A44(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000B0C5C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100188FB0);
  sub_1000B0A44((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000B0CA8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000B0A44(a1);
  operator delete(v1);
}

uint64_t sub_1000B0CBC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000B0E0C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000B0DE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000B0E0C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 41LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 41LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000B0FF0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001856C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1058(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B106C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001858E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B10D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B10E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100185B08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1150(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1164(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100185D28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B11CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B11E0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100185F48;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1248(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B125C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100186168;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B12C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B12D8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100186388;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1340(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1354(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001865A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B13BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B13D0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001867C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1438(_Unwind_Exception *a1)
{
}

void sub_1000B144C(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, void *a5@<X8>)
{
  char v10 = *a1;
  unint64_t v11 = sub_1000B14E8((uint64_t)a1, a3);
  if (v11 >> 59) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v12 = (char *)v11;
  BOOL v13 = operator new(16 * v11);
  sub_1000B155C(a1, v13, v12, a2, a3, a4);
  *a5 = (char *)*a1 + a2 - v10;
}

unint64_t sub_1000B14E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x7FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000B155C(void **a1, _OWORD *__dst, char *a3, char *__src, uint64_t a5, _OWORD *a6)
{
  unint64_t v12 = (char *)*a1;
  BOOL v13 = (char *)a1[1];
  if (*a1) {
    BOOL v14 = __dst == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  BOOL v15 = v14 || v12 == __src;
  char v16 = __dst;
  if (!v15)
  {
    memmove(__dst, v12, __src - v12);
    char v16 = (_OWORD *)((char *)__dst + __src - v12);
  }

  _OWORD *v16 = *a6;
  if (__src)
  {
    uint64_t v17 = &v12[16 * (void)v13];
    if (v17 != __src && v16 != 0LL) {
      memmove(&v16[a5], __src, v17 - __src);
    }
  }

  if (v12 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  unint64_t v19 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v19;
  a1[2] = a3;
}

uint64_t sub_1000B162C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001869E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1694(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B16A8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100186C08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1710(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1724(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100186E28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B178C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B17A0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100187048;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1808(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B181C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100187268;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1884(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1898(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100187488;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1900(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1914(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001876A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B197C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1990(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001878C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B19F8(_Unwind_Exception *a1)
{
}

void sub_1000B1A0C(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 560);
  *(void *)(v3 + 136) = sub_100120D7C();
  *(void *)(v3 + 144) = v4;
  sub_1000721C8(*(void *)(v2 + 560));
}

void sub_1000B1A54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v64 = v60;
  if (a2 == 1)
  {
    unint64_t v61 = (unsigned int *)__cxa_begin_catch(exception_object);
    *(void *)&a11 = "DiskImageSparseBundle::void_stackable_identifier()::(anonymous class)::operator()() const";
    *((void *)&a11 + 1) = 81LL;
    a12 = 16;
    sub_1000B1B30(&a14, &a11);
    sub_100120CD8(&a59, v61);
    std::ostream::~ostream(&a59, off_1001891D0);
    sub_1000B1C94((uint64_t)&a14);
    std::ios::~ios(&a60);
    int v62 = v61[2];
    if (v62 < 0) {
      int v63 = v61[2];
    }
    else {
      int v63 = -v62;
    }
    **(_DWORD **)(v64 + _Block_object_dispose((const void *)(v2 - 120), 8) = v63;
    __cxa_end_catch();
    JUMPOUT(0x1000B1A40LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1000B1B30(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000B1C18((uint64_t)a1, a2);
  *a1 = off_100189108;
  a1[45] = &off_100189208;
  a1[46] = &off_100189230;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100189108;
  a1[45] = off_100189190;
  a1[46] = off_1001891B8;
  return a1;
}

void sub_1000B1BB4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1BD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B1C18(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001892A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B1C80(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B1C94(uint64_t a1)
{
  *(void *)a1 = off_1001892A0;
  sub_1000B1F0C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000B1D30(char *a1)
{
}

uint64_t sub_1000B1D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000B1DA8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000B1DF4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001891D0);
  sub_1000B1C94(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000B1E2C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001891D0);
  sub_1000B1C94((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000B1E6C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001891D0);
  sub_1000B1C94(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000B1EAC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001891D0);
  sub_1000B1C94((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000B1EF8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000B1C94(a1);
  operator delete(v1);
}

uint64_t sub_1000B1F0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000B205C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000B2034( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000B205C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 307LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        char v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 307LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000B2240(void *a1)
{
  uint64_t v1 = qword_1001A3B38;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      uint64_t v4 = sub_10000AE14(v3 + 4);
      int v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          int v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          char v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }

        while (!v7);
      }

      v1 += v4;
      uint64_t v3 = v6;
    }

    while (v6 != v2);
  }

  return v1;
}

uint64_t sub_1000B22C0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100187D08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B2328(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B233C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100187F28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B23A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B23B8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100188148;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B2420(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B2434(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1000B2488((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1000B2470(_Unwind_Exception *a1)
{
}

_OWORD *sub_1000B2488(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    __int128 v5 = (uint64_t **)result;
    char v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = sub_10000E74C(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }

        while (!v9);
      }

      char v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t sub_1000B250C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100188368;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B2574(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B2588(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100188588;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B25F0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B2604(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001887A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B266C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B2680(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001889C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B26E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000B26FC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100188BE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000B2764(_Unwind_Exception *a1)
{
}

void sub_1000B27E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B2858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B28B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B2A78(_Unwind_Exception *a1, int a2)
{
  char v6 = v5;

  if (a2 == 1)
  {
    BOOL v9 = +[DIError errorWithDIException:description:prefix:error:]( &OBJC_CLASS___DIError,  "errorWithDIException:description:prefix:error:",  __cxa_begin_catch(a1),  0LL,  0LL,  0LL);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
    unint64_t v11 = (void *)v3[6];
    v3[6] = v10;

    __cxa_end_catch();
    JUMPOUT(0x1000B2A58LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000B2B04()
{
}

void sub_1000B2B0C()
{
}

void sub_1000B2C38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B2DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B300C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v7 = [objc_begin_catch(a1) reason];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v8,  v2);

    objc_end_catch();
    JUMPOUT(0x1000B2FD4LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000B35E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3EE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20, __int16 a21, int a22)
{
  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"Failed opening the shadow/cache file(s)",  v23);
    __cxa_end_catch();
    JUMPOUT(0x1000B3EA0LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000B429C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B43E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B45C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1000B46F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B475C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B48A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B49A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4A58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B4B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B4EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B51C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B5270(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  char v6 = v5;
  uint64_t v7 = 514LL;
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41)) {
      uint64_t v7 = 514LL;
    }
    else {
      uint64_t v7 = 2562LL;
    }
  }

  if ([v5 isCache])
  {
    [v6 createBackendWithFlags:v7];
    int v8 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v40 = 0LL;
      uint64_t v9 = sub_1000BE278();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v11 = 3LL;
      }
      else {
        uint64_t v11 = 2LL;
      }
      unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 URL]);
      BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v12 path]);
      *(_DWORD *)buf = 68158211;
      int v42 = 61;
      __int16 v43 = 2080;
      char v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v45 = 2113;
      uint64_t v46 = v13;
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl( v11,  &v40,  0LL,  0LL,  &_mh_execute_header,  v10,  0LL,  "%.*s: Cache file %{private}@ opened with RW access",  buf,  28);

      if (v14)
      {
        fprintf(__stderrp, "%s\n", v14);
        free(v14);
      }
    }

    else
    {
      uint64_t v17 = sub_1000BE278();
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v6 URL]);
        int v20 = (void *)objc_claimAutoreleasedReturnValue([v19 path]);
        *(_DWORD *)buf = 68158211;
        int v42 = 61;
        __int16 v43 = 2080;
        char v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
        __int16 v45 = 2113;
        uint64_t v46 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%.*s: Cache file %{private}@ opened with RW access",  buf,  0x1Cu);
      }
    }

    goto LABEL_42;
  }

  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nodes]);
    else {
      uint64_t v16 = 0LL;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  [v6 createBackendWithFlags:v16];
  if ((v16 & 3) != 0)
  {
    int v8 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v40 = 0LL;
      uint64_t v21 = sub_1000BE278();
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v23 = 3LL;
      }
      else {
        uint64_t v23 = 2LL;
      }
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v6 URL]);
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 path]);
      *(_DWORD *)buf = 68158211;
      int v42 = 61;
      __int16 v43 = 2080;
      char v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v45 = 2113;
      uint64_t v46 = v25;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl( v23,  &v40,  0LL,  0LL,  &_mh_execute_header,  v22,  0LL,  "%.*s: Shadow file %{private}@ opened with RW access",  buf,  28);

      if (!v26) {
        goto LABEL_42;
      }
      goto LABEL_34;
    }

    uint64_t v32 = sub_1000BE278();
    char v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v6 URL]);
      BOOL v35 = (void *)objc_claimAutoreleasedReturnValue([v34 path]);
      *(_DWORD *)buf = 68158211;
      int v42 = 61;
      __int16 v43 = 2080;
      char v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v45 = 2113;
      uint64_t v46 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%.*s: Shadow file %{private}@ opened with RW access",  buf,  0x1Cu);
    }
  }

  else
  {
    int v8 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v40 = 0LL;
      uint64_t v27 = sub_1000BE278();
      BOOL v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v29 = 3LL;
      }
      else {
        uint64_t v29 = 2LL;
      }
      unint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v6 URL]);
      unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 path]);
      *(_DWORD *)buf = 68158211;
      int v42 = 61;
      __int16 v43 = 2080;
      char v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v45 = 2113;
      uint64_t v46 = v31;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl( v29,  &v40,  0LL,  0LL,  &_mh_execute_header,  v28,  0LL,  "%.*s: Using an existing shadow file: %{private}@",  buf,  28);

      if (!v26) {
        goto LABEL_42;
      }
LABEL_34:
      fprintf(__stderrp, "%s\n", v26);
      free(v26);
      goto LABEL_42;
    }

    uint64_t v36 = sub_1000BE278();
    BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v6 URL]);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 path]);
      *(_DWORD *)buf = 68158211;
      int v42 = 61;
      __int16 v43 = 2080;
      char v44 = "-[DIShadowChain openWritable:createNonExisting:]_block_invoke";
      __int16 v45 = 2113;
      uint64_t v46 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%.*s: Using an existing shadow file: %{private}@",  buf,  0x1Cu);
    }
  }

void sub_1000B5830( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, uint64_t a16, __int16 a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void sub_1000B5F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B611C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B618C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B62BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000B6360(id a1, DIShadowNode *a2, NSDictionary *a3)
{
  return !-[DIShadowNode isCache](a2, "isCache", a3);
}

void sub_1000B6750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21)
{
  if (a21) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a19);
  }
  sub_100006224((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1000B6920(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000B69E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000B6A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B72C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B72E4(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = 0LL;
  id v3 = a1;
  id v4 = [v3 decodeBytesForKey:@"crypto_header" returnedLength:&v8];
  if (v4)
  {
    if (v8 != 76)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100005148((uint64_t)v7);
      sub_10000552C(v7, (uint64_t)"Unexpected crypto header length (", 33LL);
      std::ostream::operator<<(v7, v8);
      sub_10000552C(v7, (uint64_t)")", 1LL);
      sub_100006AA8((uint64_t)exception, (uint64_t)v7, 0x9Au);
    }

    id v5 = operator new(0x4CuLL);
    sub_10011528C((uint64_t)v5, (uint64_t)v4);
  }

  else
  {
    id v5 = 0LL;
  }

  *a2 = v5;
}

void sub_1000B73E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_1000B7480( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000B76C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1000B779C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000B78D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B7B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B7EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  sub_10005FA88((uint64_t)va);

  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_1000B8004( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_1000B8300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B84B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B8654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(a1);
}

void sub_1000B87C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _Unwind_Resume(a1);
}

void sub_1000B8A9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void sub_1000B8B04()
{
}

void sub_1000B8B0C(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  id v5 = a1;
  id v6 = [v5 decodeBytesForKey:@"encKeys" returnedLength:&v23];
  id v7 = v5;
  id v8 = [v7 decodeBytesForKey:@"prngKeys" returnedLength:&v22];
  if (v6 && (uint64_t v9 = v8) != 0LL)
  {
    int v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v19 = 0LL;
    sub_1000BCB14(&v19, v6, (uint64_t)v6 + v23, v23);
    uint64_t v18 = 0LL;
    __n128 v17 = 0uLL;
    sub_1000BCB14(&v17, v9, (uint64_t)v9 + v22, v22);
    sub_1001170EC(v11, (uint64_t)&v19, &v17, a2);
    sub_100061C10(a3);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }

    uint64_t v10 = v14;
    uint64_t v14 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    if (v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }

    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }

    if (v17.n128_u64[0])
    {
      v17.n128_u64[1] = v17.n128_u64[0];
      operator delete((void *)v17.n128_u64[0]);
    }

    if (v19)
    {
      int v20 = v19;
      operator delete(v19);
    }
  }

  else
  {
    *a3 = 0LL;
    a3[1] = 0LL;
  }
}

void sub_1000B8C54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  uint64_t v24 = *(void **)(v22 - 96);
  if (v24)
  {
    *(void *)(v22 - 8_Block_object_dispose((const void *)(v2 - 120), 8) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_1000B8EA8(_Unwind_Exception *a1)
{
  sub_100006224(v4 - 48);
  _Unwind_Resume(a1);
}

void sub_1000B8F00(void *a1, void *a2)
{
  id v3 = a1;
  [v3 encodeBytes:a2[6] length:76 forKey:@"crypto_header"];
  [v3 encodeBytes:*a2 length:a2[1] - *a2 forKey:@"encKeys"];
  [v3 encodeBytes:a2[3] length:a2[4] - a2[3] forKey:@"prngKeys"];
}

void sub_1000B8F74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000B90A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B91F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000B93F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _Unwind_Resume(a1);
}

void sub_1000B958C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sub_1000B96A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(a1);
}

#error "1000B99B0: call analysis failed (funcsize=120)"
RamXPC *__cdecl -[RamXPC initWithCoder:](RamXPC *self, SEL a2, id a3)
{
  id v4;
  RamXPC *v5;
  uint64_t v6;
  id v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  id v18;
  objc_super v19;
  uint64_t v20[2];
  uint64_t v4 = a3;
  v19.receiver = self;
  v19.super_class = (Class)&OBJC_CLASS___RamXPC;
  id v5 = -[BackendXPC initWithCoder:](&v19, "initWithCoder:", v4);
  if (v5)
  {
    uint64_t v18 = [v4 decodeInt64ForKey:@"size"];
    id v7 = objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(NSUUID, v6), @"identifier");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v8 getUUIDBytes:v20];
    sub_1000BD670((uint64_t *)&v18, v20, &v16);
    __n128 v17 = v16;
    uint64_t v16 = 0uLL;
    -[BackendXPC setBackend:](v5, "setBackend:", &v17, 0LL);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    if (*((void *)&v17 + 1))
    {
      uint64_t v10 = (unint64_t *)(*((void *)&v17 + 1) + 8LL);
      do
        uint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (*((void *)&v16 + 1))
    {
      uint64_t v13 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
      do
        uint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  return v5;
}

void sub_1000B9C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(a1);
}

void sub_1000B9D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B9E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BA01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BA294( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _Unwind_Resume(a1);
}

void sub_1000BA418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  sub_100006224((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000BA55C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void sub_1000BA728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BA8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BA9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BAB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BAE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BAF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_100006224((uint64_t)va2);
  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000BB448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_1000BB550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BB80C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1000BBAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_100006224((uint64_t)va1);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t sub_1000BBB40(void *a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    id v5 = a1;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
    if (v8)
    {
      uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSData, v7);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0 && [v8 length])
      {
        uint64_t v10 = malloc((size_t)[v8 length]);
        *a3 = v10;
        if (v10)
        {
          uint64_t v11 = v10;
          id v12 = v8;
          memcpy(v11, [v12 bytes], (size_t)objc_msgSend(v12, "length"));
          uint64_t v13 = (uint64_t)[v12 length];
        }

        else
        {
          int v29 = *__error();
          if (sub_1000BE2F0())
          {
            uint64_t v39 = 0LL;
            uint64_t v30 = sub_1000BE278();
            unint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
            BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
            id v33 = [v8 length];
            *(_DWORD *)buf = 68158466;
            if (v32) {
              uint64_t v34 = 3LL;
            }
            else {
              uint64_t v34 = 2LL;
            }
            int v41 = 59;
            __int16 v42 = 2080;
            __int16 v43 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v44 = 2048;
            id v45 = v33;
            __int16 v46 = 2112;
            uint64_t v47 = v6;
            BOOL v35 = (char *)_os_log_send_and_compose_impl( v34,  &v39,  0LL,  0LL,  &_mh_execute_header,  v31,  16LL,  "%.*s: Out of memory, failed to allocated %zu bytes for key %@",  buf,  38);

            if (v35)
            {
              fprintf(__stderrp, "%s\n", v35);
              free(v35);
            }
          }

          else
          {
            uint64_t v36 = sub_1000BE278();
            BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68158466;
              int v41 = 59;
              __int16 v42 = 2080;
              __int16 v43 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
              __int16 v44 = 2048;
              id v45 = [v8 length];
              __int16 v46 = 2112;
              uint64_t v47 = v6;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%.*s: Out of memory, failed to allocated %zu bytes for key %@",  buf,  0x26u);
            }
          }

          *__error() = v29;
          uint64_t v13 = -12LL;
        }
      }

      else
      {
        int v21 = *__error();
        if (sub_1000BE2F0())
        {
          uint64_t v39 = 0LL;
          uint64_t v22 = sub_1000BE278();
          size_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            uint64_t v24 = 3LL;
          }
          else {
            uint64_t v24 = 2LL;
          }
          *(_DWORD *)buf = 68158210;
          int v41 = 59;
          __int16 v42 = 2080;
          __int16 v43 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
          __int16 v44 = 2112;
          id v45 = v6;
          __int16 v25 = (char *)_os_log_send_and_compose_impl( v24,  &v39,  0LL,  0LL,  &_mh_execute_header,  v23,  16LL,  "%.*s: Invalid key: %@",  buf,  28);

          if (v25)
          {
            fprintf(__stderrp, "%s\n", v25);
            free(v25);
          }
        }

        else
        {
          uint64_t v26 = sub_1000BE278();
          uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            int v41 = 59;
            __int16 v42 = 2080;
            __int16 v43 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
            __int16 v44 = 2112;
            id v45 = v6;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }

        *__error() = v21;
        uint64_t v13 = -22LL;
      }
    }

    else
    {
      uint64_t v13 = -2LL;
    }
  }

  else
  {
    int v14 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v39 = 0LL;
      uint64_t v15 = sub_1000BE278();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        uint64_t v17 = 3LL;
      }
      else {
        uint64_t v17 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v41 = 59;
      __int16 v42 = 2080;
      __int16 v43 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
      LODWORD(v3_Block_object_dispose((const void *)(v2 - 120), 8) = 18;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl( v17,  &v39,  0LL,  0LL,  &_mh_execute_header,  v16,  16LL,  "%.*s: Missing parameters",  (int)buf,  v38);

      if (v18)
      {
        fprintf(__stderrp, "%s\n", v18);
        free(v18);
      }
    }

    else
    {
      uint64_t v19 = sub_1000BE278();
      int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v41 = 59;
        __int16 v42 = 2080;
        __int16 v43 = "ssize_t plugin_decode_buffer(void *, const char *, void **)";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v14;
    return -22LL;
  }

  return v13;
}

void sub_1000BC098(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1000BC0F4(void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    id v3 = a1;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);
    if (v6)
    {
      uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSFileHandle, v5);
      if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
      {
        uint64_t v8 = dup((int)[v6 fileDescriptor]);
        if ((v8 & 0x80000000) != 0) {
          uint64_t v8 = -*__error();
        }
      }

      else
      {
        int v16 = *__error();
        if (sub_1000BE2F0())
        {
          uint64_t v25 = 0LL;
          uint64_t v17 = sub_1000BE278();
          uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            uint64_t v19 = 3LL;
          }
          else {
            uint64_t v19 = 2LL;
          }
          *(_DWORD *)buf = 68158210;
          int v27 = 42;
          __int16 v28 = 2080;
          int v29 = "int plugin_decode_fd(void *, const char *)";
          __int16 v30 = 2112;
          unint64_t v31 = v4;
          int v20 = (char *)_os_log_send_and_compose_impl( v19,  &v25,  0LL,  0LL,  &_mh_execute_header,  v18,  16LL,  "%.*s: Invalid key: %@",  buf,  28);

          if (v20)
          {
            fprintf(__stderrp, "%s\n", v20);
            free(v20);
          }
        }

        else
        {
          uint64_t v21 = sub_1000BE278();
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 68158210;
            int v27 = 42;
            __int16 v28 = 2080;
            int v29 = "int plugin_decode_fd(void *, const char *)";
            __int16 v30 = 2112;
            unint64_t v31 = v4;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%.*s: Invalid key: %@", buf, 0x1Cu);
          }
        }

        *__error() = v16;
        uint64_t v8 = 4294967274LL;
      }
    }

    else
    {
      uint64_t v8 = 4294967294LL;
    }
  }

  else
  {
    int v9 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v25 = 0LL;
      uint64_t v10 = sub_1000BE278();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        uint64_t v12 = 3LL;
      }
      else {
        uint64_t v12 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v27 = 42;
      __int16 v28 = 2080;
      int v29 = "int plugin_decode_fd(void *, const char *)";
      LODWORD(v24) = 18;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( v12,  &v25,  0LL,  0LL,  &_mh_execute_header,  v11,  16LL,  "%.*s: Missing parameters",  (int)buf,  v24);

      if (v13)
      {
        fprintf(__stderrp, "%s\n", v13);
        free(v13);
      }
    }

    else
    {
      uint64_t v14 = sub_1000BE278();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v27 = 42;
        __int16 v28 = 2080;
        int v29 = "int plugin_decode_fd(void *, const char *)";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v9;
    return 4294967274LL;
  }

  return v8;
}

void sub_1000BC480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BC5C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && a3 && a4)
  {
    id v17 = a1;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a3, a4));
    [v17 setObject:v8 forKeyedSubscript:v7];
  }

  else
  {
    int v9 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v18 = 0LL;
      uint64_t v10 = sub_1000BE278();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        uint64_t v12 = 3LL;
      }
      else {
        uint64_t v12 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v20 = 69;
      __int16 v21 = 2080;
      uint64_t v22 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
      LODWORD(v16) = 18;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( v12,  &v18,  0LL,  0LL,  &_mh_execute_header,  v11,  16LL,  "%.*s: Missing parameters",  (int)buf,  v16);

      if (v13)
      {
        fprintf(__stderrp, "%s\n", v13);
        free(v13);
      }
    }

    else
    {
      uint64_t v14 = sub_1000BE278();
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v20 = 69;
        __int16 v21 = 2080;
        uint64_t v22 = "void plugin_encode_buffer(void *, const char *, const void *, size_t)";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v9;
  }

void sub_1000BC7F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_1000BC828(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && (a3 & 0x80000000) == 0)
  {
    id v15 = a1;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
    uint64_t v6 = -[NSFileHandle initWithFileDescriptor:](objc_alloc(&OBJC_CLASS___NSFileHandle), "initWithFileDescriptor:", a3);
    [v15 setObject:v6 forKeyedSubscript:v5];
  }

  else
  {
    int v7 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v16 = 0LL;
      uint64_t v8 = sub_1000BE278();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        uint64_t v10 = 3LL;
      }
      else {
        uint64_t v10 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v18 = 48;
      __int16 v19 = 2080;
      int v20 = "void plugin_encode_fd(void *, const char *, int)";
      LODWORD(v14) = 18;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl( v10,  &v16,  0LL,  0LL,  &_mh_execute_header,  v9,  16LL,  "%.*s: Missing parameters",  (int)buf,  v14);

      if (v11)
      {
        fprintf(__stderrp, "%s\n", v11);
        free(v11);
      }
    }

    else
    {
      uint64_t v12 = sub_1000BE278();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        int v18 = 48;
        __int16 v19 = 2080;
        int v20 = "void plugin_encode_fd(void *, const char *, int)";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%.*s: Missing parameters", buf, 0x12u);
      }
    }

    *__error() = v7;
  }

void sub_1000BCA48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void *sub_1000BCB14(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10005FB60(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_1000BCB70(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1000BCB8C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = sub_1000BCC04(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1000BCBF0(_Unwind_Exception *a1)
{
}

void *sub_1000BCC04(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017C3E8;
  sub_100117A10((_DWORD)a1 + 24);
  return a1;
}

void sub_1000BCC40(_Unwind_Exception *a1)
{
}

void sub_1000BCC54(char **a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x470uLL);
  sub_1000BCCBC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BCCA8(_Unwind_Exception *a1)
{
}

void *sub_1000BCCBC(void *a1, char **a2, unsigned int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017AE58;
  sub_1000BCD04((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000BCCF0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000BCD04(uint64_t a1, char **a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = sub_100101F94((uint64_t)__p, v5);
  sub_100052AA8(a1, v6, (v5 & 3) != 0, 0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000BCD74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000BCD90(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  size_t v8 = operator new(0x470uLL);
  sub_1000BCE08(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000BCDF4(_Unwind_Exception *a1)
{
}

void *sub_1000BCE08(void *a1, unsigned int *a2, unsigned __int8 *a3, char *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017AE58;
  sub_100052AA8((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1000BCE48(_Unwind_Exception *a1)
{
}

void sub_1000BCE5C(unsigned int *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  sub_1000BCEDC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BCEC8(_Unwind_Exception *a1)
{
}

void *sub_1000BCEDC(void *a1, unsigned int *a2, unsigned __int8 *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001893B0;
  sub_1000720DC(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1000BCF18(_Unwind_Exception *a1)
{
}

void sub_1000BCF2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001893B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BCF3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001893B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BCF5C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BCF6C(char **a1@<X1>, _DWORD *a2@<X2>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  size_t v8 = operator new(0xB0uLL);
  sub_1000BCFE4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1000BCFD0(_Unwind_Exception *a1)
{
}

void *sub_1000BCFE4(void *a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001893B0;
  sub_1000BD02C((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000BD018(_Unwind_Exception *a1)
{
}

uint64_t sub_1000BD02C(uint64_t a1, char **a2, _DWORD *a3, unint64_t *a4)
{
  LODWORD(a3) = *a3;
  unint64_t v7 = *a4;
  *(void *)&__int128 v12 = sub_100120D7C();
  *((void *)&v12 + 1) = v8;
  sub_100071E00(a1, (uint64_t)__p, (__int16)a3, v7, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000BD0D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000BD0F8(char **a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  sub_1000BD160(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BD14C(_Unwind_Exception *a1)
{
}

void *sub_1000BD160(void *a1, char **a2, _DWORD *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001893B0;
  sub_1000BD1A8((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000BD194(_Unwind_Exception *a1)
{
}

uint64_t sub_1000BD1A8(uint64_t a1, char **a2, _DWORD *a3)
{
  LODWORD(a3) = *a3;
  *(void *)&__int128 v9 = sub_100120D7C();
  *((void *)&v9 + 1) = v5;
  sub_100071E00(a1, (uint64_t)__p, (__int16)a3, 0LL, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000BD240( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1000BD264(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  sub_1000BD2C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001C350((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000BD2B0(_Unwind_Exception *a1)
{
}

void *sub_1000BD2C4(void *a1, uint64_t *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100172B38;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_100120D7C();
  uint64_t v6 = v5;
  sub_10011EBA0(a1 + 3);
  a1[3] = &off_100172B88;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_1000BD328(_Unwind_Exception *a1)
{
}

void sub_1000BD33C(size_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x80uLL);
  sub_1000BD3A4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BD390(_Unwind_Exception *a1)
{
}

void *sub_1000BD3A4(void *a1, size_t *a2, uint64_t *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189400;
  sub_1000BD438(a1 + 3, *a2, *a3, a3[1]);
  return a1;
}

void sub_1000BD3E4(_Unwind_Exception *a1)
{
}

void sub_1000BD3F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100189400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BD408(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100189400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BD428(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_1000BD438(void *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = sub_10011EBA0(a1);
  *char v8 = off_100194F30;
  v8[3] = 0LL;
  __int128 v9 = v8 + 3;
  v8[7] = 0LL;
  v8[9] = a2;
  v8[10] = a3;
  v8[11] = a4;
  uint64_t v10 = valloc(a2);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    id v15 = std::bad_alloc::bad_alloc(exception);
  }

  v18[0] = &off_100189450;
  __int16 v19 = v18;
  uint64_t v16 = v10;
  sub_100043B68((uint64_t)&v17, (uint64_t)v18);
  char v11 = v19;
  if (v19 == v18)
  {
    uint64_t v12 = 4LL;
    char v11 = v18;
    goto LABEL_6;
  }

  if (v19)
  {
    uint64_t v12 = 5LL;
LABEL_6:
    (*(void (**)(void *))(*v11 + 8 * v12))(v11);
  }

  sub_1000BD59C(v9, (uint64_t *)&v16);
  sub_100043BCC((uint64_t *)&v16);
  a1[8] = a1[3];
  a1[12] = getpagesize();
  return a1;
}

void sub_1000BD57C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1000BD59C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  sub_100043C24(a1, v4);
  sub_100079B5C(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *sub_1000BD5E4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_100189450;
  return result;
}

void sub_1000BD608(uint64_t a1, void *a2)
{
  *a2 = &off_100189450;
}

void sub_1000BD620(uint64_t a1, void **a2)
{
}

uint64_t sub_1000BD628(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000BD664()
{
  return &off_1001894B0;
}

void sub_1000BD670(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  sub_1000BD6D8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BD6C4(_Unwind_Exception *a1)
{
}

void *sub_1000BD6D8(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100172B38;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  sub_10011EBA0(a1 + 3);
  a1[3] = &off_100172B88;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  return a1;
}

void sub_1000BD730(_Unwind_Exception *a1)
{
}

void sub_1000BD744(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  sub_1000BD7AC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BD798(_Unwind_Exception *a1)
{
}

void *sub_1000BD7AC(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017C438;
  int v5 = 0;
  sub_100118B44(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000BD7F0(_Unwind_Exception *a1)
{
}

void sub_1000BD804(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xE0uLL);
  sub_1000BD86C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BD858(_Unwind_Exception *a1)
{
}

void *sub_1000BD86C(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017C438;
  int v5 = 0;
  sub_100118B44(a1 + 3, a2, a3, &v5);
  return a1;
}

void sub_1000BD8B0(_Unwind_Exception *a1)
{
}

void sub_1000BD8C4(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_1000BD924(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001C350((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000BD910(_Unwind_Exception *a1)
{
}

void *sub_1000BD924(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001894D0;
  sub_1000EF06C(a1 + 3);
  return a1;
}

void sub_1000BD958(_Unwind_Exception *a1)
{
}

void sub_1000BD96C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001894D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BD97C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001894D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BD99C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BD9AC(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  sub_1000BDA0C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001C350((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000BD9F8(_Unwind_Exception *a1)
{
}

void *sub_1000BDA0C(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001894D0;
  sub_1000EF06C(a1 + 3);
  return a1;
}

void sub_1000BDA40(_Unwind_Exception *a1)
{
}

void sub_1000BDA54(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  sub_1000BDABC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  sub_10001C350((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_1000BDAA8(_Unwind_Exception *a1)
{
}

void *sub_1000BDABC(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189520;
  sub_100100714(a1 + 3);
  return a1;
}

void sub_1000BDAF0(_Unwind_Exception *a1)
{
}

void sub_1000BDB04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100189520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BDB14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100189520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BDB34(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_1000BDB44@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = sub_1000BDB9C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1000BDB88(_Unwind_Exception *a1)
{
}

void *sub_1000BDB9C(void *a1, char **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189570;
  sub_100006174(a1 + 3, *a2);
  return a1;
}

void sub_1000BDBD8(_Unwind_Exception *a1)
{
}

void sub_1000BDBEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100189570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BDC00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100189570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1000BDC24(uint64_t a1)
{
}

void sub_1000BDC3C(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  sub_1000BDCB4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000BDCA0(_Unwind_Exception *a1)
{
}

void *sub_1000BDCB4(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001895C0;
  sub_10010E318(a1 + 3, a2, *a3);
  return a1;
}

void sub_1000BDCEC(_Unwind_Exception *a1)
{
}

void sub_1000BDD00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001895C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BDD10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001895C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BDD30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_1000BDD40@<X0>(char **a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x40uLL);
  uint64_t result = sub_1000BDDB0(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1000BDD9C(_Unwind_Exception *a1)
{
}

void *sub_1000BDDB0(void *a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189610;
  sub_1000BDE34((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1000BDDE4(_Unwind_Exception *a1)
{
}

void sub_1000BDDF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100189610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BDE08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100189610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BDE28(uint64_t a1)
{
  return sub_1000BDECC(a1 + 24);
}

uint64_t sub_1000BDE34(uint64_t a1, char **a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *a4;
  memset(v10, 0, sizeof(v10));
  sub_100069FF0(a1, __p, v7, v8 | (unint64_t)&_mh_execute_header, v10, 0LL);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000BDEB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BDECC(uint64_t a1)
{
  return sub_100006224(a1);
}

void sub_1000BDEFC(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  sub_1000BDF5C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001C350((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1000BDF48(_Unwind_Exception *a1)
{
}

void *sub_1000BDF5C(void *a1, void *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189660;
  sub_10011EBA0(a1 + 3);
  a1[3] = off_1001896B0;
  uint64_t v4 = a2[1];
  a1[6] = *a2;
  a1[7] = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return a1;
}

void sub_1000BDFC0(_Unwind_Exception *a1)
{
}

void sub_1000BDFD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100189660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000BDFE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100189660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1000BE004(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *sub_1000BE014(void *a1)
{
  *a1 = off_1001896B0;
  sub_100006224((uint64_t)(a1 + 3));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1000BE050(void *a1)
{
  *a1 = off_1001896B0;
  sub_100006224((uint64_t)(a1 + 3));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(a1);
}

uint64_t sub_1000BE08C()
{
  return 4294967251LL;
}

uint64_t sub_1000BE094(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16LL))();
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 8LL))() * v2;
}

void *sub_1000BE0D8(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 24) + 24LL))(*(void **)(a1 + 24));
}

uint64_t sub_1000BE0E8()
{
  return 4294967251LL;
}

void *sub_1000BE0F0(uint64_t a1, void *a2)
{
  return sub_10000552C(a2, (uint64_t)"BackendPlugin", 13LL);
}

uint64_t sub_1000BE104()
{
  return 4294967251LL;
}

uint64_t sub_1000BE10C()
{
  return 4294967251LL;
}

uint64_t sub_1000BE114(uint64_t a1)
{
  return sub_1000674F4(*(void *)(a1 + 24));
}

void *sub_1000BE11C@<X0>( char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  char v12 = operator new(0x40uLL);
  uint64_t result = sub_1000BE1A4(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1000BE190(_Unwind_Exception *a1)
{
}

void *sub_1000BE1A4(void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189610;
  sub_1000BE1EC((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1000BE1D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000BE1EC(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1000BE25C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BE278()
{
  if (qword_1001A4808 != -1) {
    dispatch_once(&qword_1001A4808, &stru_100189798);
  }
  return qword_1001A4800;
}

void sub_1000BE2B8(id a1)
{
  qword_1001A4800 = (uint64_t)os_log_create("com.apple.DiskImages2", "Default");
}

uint64_t sub_1000BE2E4(uint64_t result)
{
  byte_1001A4810 = result;
  return result;
}

uint64_t sub_1000BE2F0()
{
  return byte_1001A4810;
}

uint64_t sub_1000BE2FC(uint64_t result)
{
  byte_1001A4811 = result;
  return result;
}

uint64_t sub_1000BE308()
{
  return byte_1001A4811;
}

const void **sub_1000BE314@<X0>(uint64_t a1@<X1>, char a2@<W2>, const __CFArray **a3@<X8>)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable( kCFAllocatorDefault,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4),  &kCFTypeArrayCallBacks);
  CFArrayRef theArray = Mutable;
  uint64_t v7 = *(int **)(a1 + 16);
  uint64_t v8 = *(int **)(a1 + 24);
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(char **__return_ptr, void, void))(**((void **)v7 + 3) + 48LL))( &v22,  *((void *)v7 + 3),  0LL);
      CFIndex Count = CFArrayGetCount(theArray);
      uint64_t v10 = @"Base";
      __int16 v21 = v10;
      char v11 = theArray;
      if ((a2 & 4) != 0)
      {
        uint64_t v24 = @"Role";
        uint64_t v25 = v10;
        CFRetain(v10);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)&v22[*(void *)(*(void *)v22 - 96LL)] + 16LL))(&v17);
        uint64_t v26 = @"Image";
        uint64_t v27 = v17;
        uint64_t v17 = 0LL;
        int v18 = &v24;
        uint64_t v19 = 2LL;
        sub_1000FF160((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_100006B34((const void **)&value);
        for (uint64_t i = 24LL; i != -8; i -= 16LL)
          sub_100006B94((const void **)((char *)&v24 + i));
        sub_10000D8A4((const void **)&v17);
      }

      else
      {
        uint64_t v24 = @"Role";
        uint64_t v25 = v10;
        CFRetain(v10);
        uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v22[*(void *)(*(void *)v22 - 96LL)] + 24LL))(&v22[*(void *)(*(void *)v22 - 96LL)]);
        uint64_t v26 = @"Image Format";
        uint64_t v27 = v12;
        int v18 = &v24;
        uint64_t v19 = 2LL;
        sub_1000FF160((uint64_t *)&v18, (CFMutableDictionaryRef *)&value);
        CFArrayAppendValue(v11, value);
        sub_100006B34((const void **)&value);
        for (uint64_t j = 24LL; j != -8; j -= 16LL)
          sub_100006B94((const void **)((char *)&v24 + j));
      }

      sub_10003AF44((const void **)&v21);
      id v15 = v22;
      uint64_t v22 = 0LL;
      if (v15) {
        (*(void (**)(char *))(*(void *)v15 + 8LL))(v15);
      }
      v7 += 12;
    }

    while (v7 != v8);
    CFMutableDictionaryRef Mutable = theArray;
  }

  *a3 = Mutable;
  CFArrayRef theArray = 0LL;
  return sub_10002B014((const void **)&theArray);
}

void sub_1000BE588( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, uint64_t a16, const void *a17, char a18)
{
  for (uint64_t i = 24LL; i != -8; i -= 16LL)
    sub_100006B94((const void **)(&a18 + i));
  sub_10000D8A4(&a11);
  sub_10003AF44(&a15);
  uint64_t v20 = a16;
  a16 = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  sub_10002B014(&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000BE654(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100189CF0;
  a1[7] = (uint64_t)off_100189E58;
  a1[8] = (uint64_t)off_100189EA0;
  a1[9] = (uint64_t)&off_10018A128;
  a1[3] = (uint64_t)off_10018A180;
  a1[4] = (uint64_t)off_100189D80;
  *((_BYTE *)a1 + 96) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 120) = 0;
  a1[17] = (uint64_t)off_10018A270;
  a1[5] = (uint64_t)off_10018A2C8;
  a1[6] = (uint64_t)off_100189E10;
  *((_BYTE *)a1 + 144) = 0;
  *((_BYTE *)a1 + 152) = 0;
  a1[20] = 0LL;
  sub_1000BE9E4(a1 + 21, (uint64_t *)&off_100189C70, a2);
  *a1 = (uint64_t)off_100189838;
  a1[3] = (uint64_t)off_100189880;
  a1[4] = (uint64_t)off_1001898C8;
  a1[5] = (uint64_t)off_100189910;
  a1[6] = (uint64_t)off_100189958;
  a1[7] = (uint64_t)off_1001899A0;
  a1[8] = (uint64_t)off_1001899E8;
  a1[9] = (uint64_t)off_100189A48;
  a1[17] = (uint64_t)off_100189AB8;
  a1[1] = 0LL;
  unint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[2] = 0LL;
  uint64_t v7 = (CFTypeRef *)(a1 + 2);
  a1[21] = (uint64_t)off_100189B28;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(std::__shared_weak_count **)(v8 + 32);
  v26[1] = v9;
  v26[2] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 48LL))(v26, v9, a3);
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(v26[0] + *(void *)(*(void *)v26[0] - 24LL)) + 16LL))(v26[0] + *(void *)(*(void *)v26[0] - 24LL));
  uint64_t v14 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = *(void *)(v13 + 16);
  *(uint64_t *)((char *)a1 + *(void *)(v14 - 112) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(v13 + 8);
  *(uint64_t *)((char *)a1 + *(void *)(v14 - 112) + 56) = *(void *)(v13 + 56);
  uint64_t v15 = (uint64_t)a1 + *(void *)(v14 - 112);
  uint64_t v16 = *(void *)(v13 + 40);
  *(_BYTE *)(v15 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = *(_BYTE *)(v13 + 48);
  *(void *)(v15 + 40) = v16;
  uint64_t v17 = (uint64_t)a1 + *(void *)(*a1 - 112);
  uint64_t v18 = *(void *)(v13 + 24);
  *(_BYTE *)(v17 + sub_100006224(v6 - 32) = *(_BYTE *)(v13 + 32);
  *(void *)(v17 + 24) = v18;
  uint64_t v19 = (*(uint64_t (**)(void))(*(void *)(v26[0] + *(void *)(*(void *)v26[0] - 64LL)) + 16LL))(v26[0] + *(void *)(*(void *)v26[0] - 64LL));
  sub_10002A190((CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128) + 16), (CFTypeRef *)(v19 + 16));
  sub_10002A190((CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128) + 24), (CFTypeRef *)(v19 + 24));
  sub_1000BE314(a2, a3, (const __CFArray **)&v25);
  if (*v6) {
    CFRelease(*v6);
  }
  *unint64_t v6 = v25;
  uint64_t v25 = 0LL;
  sub_10002A0C0(&v25);
  uint64_t v25 = v20;
  if (*v7)
  {
    CFRelease(*v7);
    uint64_t v20 = v25;
  }

  *uint64_t v7 = v20;
  uint64_t v25 = 0LL;
  sub_10003AF44(&v25);
  uint64_t v21 = v26[0];
  v26[0] = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  if (v10)
  {
    uint64_t v22 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return a1;
}

void sub_1000BE948( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, char a11)
{
  uint64_t v18 = a10;
  a10 = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  sub_100006224((uint64_t)&a11);
  sub_10003AF44(v14);
  sub_10002A0C0(v15);
  sub_1000397B0(v13, (uint64_t *)&off_100189C70);
  *(void *)(v11 + 136) = v16;
  *(void *)(v11 + 40) = v16 + 88;
  sub_10003AF44(v12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000BE9E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100177578;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  unint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v7 = sub_100062288(*(uint64_t (****)(void))(*(void *)(a3 + 16) + 24LL));
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  uint64_t v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  unint64_t v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }

  a1[1] = (uint64_t)v10;
  unint64_t v12 = 0LL;
  sub_10003AF44((const void **)&v12);
  sub_10003B07C((const void **)&v13);
  return a1;
}

void sub_1000BEAC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1000BEB10(uint64_t a1)
{
  *(void *)a1 = off_100189838;
  *(void *)(a1 + 24) = off_100189880;
  *(void *)(a1 + sub_100006224(v6 - 32) = off_1001898C8;
  *(void *)(a1 + 40) = off_100189910;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = off_100189958;
  *(void *)(a1 + 56) = off_1001899A0;
  *(void *)(a1 + 64) = off_1001899E8;
  *(void *)(a1 + 72) = off_100189A48;
  *(void *)(a1 + 136) = off_100189AB8;
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = off_100189B28;
  sub_10003AF44((const void **)(a1 + 16));
  sub_10002A0C0((const void **)(a1 + 8));
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = off_10018A3B8;
  *(void *)(a1 + 64) = off_10018A410;
  sub_10003AF44((const void **)(a1 + 192));
  sub_10003AF44((const void **)(a1 + 184));
  sub_10003AF44((const void **)(a1 + 176));
  *(void *)(a1 + 136) = off_10018A270;
  *(void *)(a1 + 40) = off_10018A2C8;
  sub_10003AF44((const void **)(a1 + 160));
  return a1;
}

void sub_1000BEBD0(void *a1)
{
  *(void *)a1 = off_100189838;
  *((void *)a1 + 3) = off_100189880;
  *((void *)a1 + 4) = off_1001898C8;
  *((void *)a1 + 5) = off_100189910;
  *((void *)a1 + 6) = off_100189958;
  *((void *)a1 + 7) = off_1001899A0;
  *((void *)a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_1001899E8;
  *((void *)a1 + 9) = off_100189A48;
  *((void *)a1 + 17) = off_100189AB8;
  *((void *)a1 + 21) = off_100189B28;
  sub_10003AF44((const void **)a1 + 2);
  sub_10002A0C0((const void **)a1 + 1);
  *((void *)a1 + 21) = off_10018A3B8;
  *((void *)a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_10018A410;
  sub_10003AF44((const void **)a1 + 24);
  sub_10003AF44((const void **)a1 + 23);
  sub_10003AF44((const void **)a1 + 22);
  *((void *)a1 + 17) = off_10018A270;
  *((void *)a1 + 5) = off_10018A2C8;
  sub_10003AF44((const void **)a1 + 20);
  operator delete(a1);
}

const void **sub_1000BEC90@<X0>(CFArrayRef *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*((uint64_t (**)(CFArrayRef *))*a1 + 3))(a1);
  v13[0] = @"Image Format";
  v13[1] = v4;
  v13[2] = @"Format Description";
  v13[3] = @"Stackable image";
  sub_100039DD4((uint64_t)a1 + *((void *)*a1 - 14), &valuePtr);
  v13[4] = @"Size Info";
  v13[5] = valuePtr;
  CFIndex valuePtr = 0LL;
  sub_10000D8A4((const void **)&valuePtr);
  sub_10003A0D8((uint64_t)a1 + *((void *)*a1 - 15), &valuePtr);
  v13[6] = @"Encryption Info";
  v13[7] = valuePtr;
  CFIndex valuePtr = 0LL;
  sub_10000D8A4((const void **)&valuePtr);
  sub_10003A844((CFArrayRef *)((char *)a1 + *((void *)*a1 - 16)), &valuePtr);
  _BYTE v13[8] = @"Identity Info";
  v13[9] = valuePtr;
  CFIndex valuePtr = 0LL;
  sub_10000D8A4((const void **)&valuePtr);
  CFIndex valuePtr = CFArrayGetCount(a1[1]);
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  v13[10] = @"Images Count";
  v13[11] = v5;
  uint64_t v9 = 0LL;
  CFArrayRef v6 = a1[1];
  v13[12] = @"Stack Info";
  v13[13] = v6;
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = (uint64_t)v13;
  v10[1] = 7LL;
  sub_1000FF160(v10, (CFMutableDictionaryRef *)&v11);
  *a2 = v11;
  uint64_t v11 = 0LL;
  sub_100006B34(&v11);
  for (uint64_t i = 13LL; i != -1; i -= 2LL)
    sub_100006B94((const void **)&v13[i]);
  return sub_100006B64(&v9);
}

void sub_1000BEE60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  do
  {
    sub_100006B94(v14 - 1);
    v14 -= 2;
  }

  while (v14 != (const void **)&a14);
  _Unwind_Resume(a1);
}

CFStringRef sub_1000BEEC8()
{
  return @"STCK";
}

const void **sub_1000BEED4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_100189838;
  *((void *)v1 + 3) = off_100189880;
  *((void *)v1 + 4) = off_1001898C8;
  *((void *)v1 + 5) = off_100189910;
  *((void *)v1 + 6) = off_100189958;
  *((void *)v1 + 7) = off_1001899A0;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_1001899E8;
  *((void *)v1 + 9) = off_100189A48;
  *((void *)v1 + 17) = off_100189AB8;
  *((void *)v1 + 21) = off_100189B28;
  sub_10003AF44((const void **)v1 + 2);
  sub_10002A0C0((const void **)v1 + 1);
  *((void *)v1 + 21) = off_10018A3B8;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_10018A410;
  sub_10003AF44((const void **)v1 + 24);
  sub_10003AF44((const void **)v1 + 23);
  sub_10003AF44((const void **)v1 + 22);
  *((void *)v1 + 17) = off_10018A270;
  *((void *)v1 + 5) = off_10018A2C8;
  return sub_10003AF44((const void **)v1 + 20);
}

void sub_1000BEF94(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_100189838;
  *((void *)v1 + 3) = off_100189880;
  *((void *)v1 + 4) = off_1001898C8;
  *((void *)v1 + 5) = off_100189910;
  *((void *)v1 + 6) = off_100189958;
  *((void *)v1 + 7) = off_1001899A0;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_1001899E8;
  *((void *)v1 + 9) = off_100189A48;
  *((void *)v1 + 17) = off_100189AB8;
  *((void *)v1 + 21) = off_100189B28;
  sub_10003AF44((const void **)v1 + 2);
  sub_10002A0C0((const void **)v1 + 1);
  *((void *)v1 + 21) = off_10018A3B8;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_10018A410;
  sub_10003AF44((const void **)v1 + 24);
  sub_10003AF44((const void **)v1 + 23);
  sub_10003AF44((const void **)v1 + 22);
  *((void *)v1 + 17) = off_10018A270;
  *((void *)v1 + 5) = off_10018A2C8;
  sub_10003AF44((const void **)v1 + 20);
  operator delete(v1);
}

const void **sub_1000BF05C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *(void *)uint64_t v1 = off_100189838;
  *((void *)v1 + 3) = off_100189880;
  *((void *)v1 + 4) = off_1001898C8;
  *((void *)v1 + 5) = off_100189910;
  *((void *)v1 + 6) = off_100189958;
  *((void *)v1 + 7) = off_1001899A0;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_1001899E8;
  *((void *)v1 + 9) = off_100189A48;
  *((void *)v1 + 17) = off_100189AB8;
  *((void *)v1 + 21) = off_100189B28;
  sub_10003AF44((const void **)v1 + 2);
  sub_10002A0C0((const void **)v1 + 1);
  *((void *)v1 + 21) = off_10018A3B8;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_10018A410;
  sub_10003AF44((const void **)v1 + 24);
  sub_10003AF44((const void **)v1 + 23);
  sub_10003AF44((const void **)v1 + 22);
  *((void *)v1 + 17) = off_10018A270;
  *((void *)v1 + 5) = off_10018A2C8;
  return sub_10003AF44((const void **)v1 + 20);
}

void sub_1000BF11C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *(void *)uint64_t v1 = off_100189838;
  *((void *)v1 + 3) = off_100189880;
  *((void *)v1 + 4) = off_1001898C8;
  *((void *)v1 + 5) = off_100189910;
  *((void *)v1 + 6) = off_100189958;
  *((void *)v1 + 7) = off_1001899A0;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_1001899E8;
  *((void *)v1 + 9) = off_100189A48;
  *((void *)v1 + 17) = off_100189AB8;
  *((void *)v1 + 21) = off_100189B28;
  sub_10003AF44((const void **)v1 + 2);
  sub_10002A0C0((const void **)v1 + 1);
  *((void *)v1 + 21) = off_10018A3B8;
  *((void *)v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = off_10018A410;
  sub_10003AF44((const void **)v1 + 24);
  sub_10003AF44((const void **)v1 + 23);
  sub_10003AF44((const void **)v1 + 22);
  *((void *)v1 + 17) = off_10018A270;
  *((void *)v1 + 5) = off_10018A2C8;
  sub_10003AF44((const void **)v1 + 20);
  operator delete(v1);
}

const void **sub_1000BF1E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000BEC90((CFArrayRef *)((char *)a1 + *(void *)(*a1 - 40LL)), a2);
}

CFStringRef sub_1000BF1F4()
{
  return @"STCK";
}

void sub_1000BF200(uint64_t *a1, uint64_t a2)
{
  if (*(void *)sub_1000C0EFC(a2 + 32, *(void *)(a2 + 176)))
  {
    uint64_t v4 = *(void *)(a2 + 352);
    uint64_t v5 = *(void *)(a2 + 360);
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    sub_1000C40EC(a2 + 200, v26);
    CFArrayRef v6 = a1 + 2;
    if (v4 == v5)
    {
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      do
      {
        unint64_t v9 = *(void *)(v4 + 8 * v8) * *(unsigned int *)(a2 + 96);
        if (v9)
        {
          ++*(uint64_t *)((char *)v6 + *(void *)(*a1 - 136));
          sub_1000CCE14(a2 + 200, (uint64_t)v26, v8, v9, 0, 1, (unint64_t *)buf);
          if (*(void *)buf && !*(_BYTE *)(*(void *)buf + 520LL))
          {
            if (*(_BYTE *)(*(void *)buf + 400LL)) {
              uint64_t v10 = *(void *)buf + 40LL;
            }
            else {
              uint64_t v10 = 0LL;
            }
            sub_1000C01AC(a1, v10, (uint64_t)v26, &v28);
          }

          sub_1000C0F7C((unint64_t *)buf);
        }

        ++v8;
        v7 += 8LL;
      }

      while (v4 + v7 != v5);
      uint64_t v11 = *((void *)&v28 + 1);
    }

    uint64_t v12 = *v6;
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 56) -= v12
    uint64_t v13 = *((void *)&v29 + 1);
    if (*((void *)&v29 + 1) && sub_1000BE308())
    {
      int v14 = *__error();
      if (sub_1000BE2F0())
      {
        uint64_t v25 = 0LL;
        uint64_t v15 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          uint64_t v16 = 3LL;
        }
        else {
          uint64_t v16 = 2LL;
        }
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 71;
        __int16 v31 = 2080;
        BOOL v32 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
        __int16 v33 = 2048;
        uint64_t v34 = v13;
        LODWORD(v23) = 28;
        uint64_t v17 = (const char *)_os_log_send_and_compose_impl( v16,  &v25,  0LL,  0LL,  &_mh_execute_header,  v15,  2LL,  "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)",  (int)buf,  v23,  v24);
        if (v17)
        {
          uint64_t v18 = (char *)v17;
          fprintf(__stderrp, "%s\n", v17);
          free(v18);
        }
      }

      else
      {
        uint64_t v19 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 71;
          __int16 v31 = 2080;
          BOOL v32 = "void info::DiskImageInfoASIF::count_used_extents(const DiskImageASIF &)";
          __int16 v33 = 2048;
          uint64_t v34 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%.*s: WARNING: Found %llu sectors with invalid flags (has_bitmap)",  buf,  0x1Cu);
        }
      }

      *__error() = v14;
    }

    v26[0] = off_10018B4F8;
    uint64_t v20 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }

void sub_1000BF510( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000BF570(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_10001C610(&v24, (uint64_t *)&v26);
    sub_10011F1C0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      uint64_t v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  uint64_t v17 = v25;
  if (v25)
  {
    uint64_t v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_1000BF6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va1);
  _Unwind_Resume(a1);
}

CFStringRef sub_1000BF71C(void *a1, void *a2)
{
  uint64_t v4 = sub_1000D4054(a2);
  v14[4] = v4;
  v14[5] = (const void *)v5;
  if ((unint64_t)v4 | v5)
  {
    *(void *)&v15.byte8 = v5;
    *(void *)&v15.byte0 = v4;
    v14[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v15);
    CFStringRef v6 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v14[0]);
    v13[0] = v6;
    unint64_t v7 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128LL));
    if (v7[3])
    {
      CFRelease(v7[3]);
      CFStringRef v6 = (CFStringRef)v13[0];
    }

    v7[3] = v6;
    v13[0] = 0LL;
    sub_10003AF44(v13);
    sub_10003B07C(v14);
  }

  uint64_t result = sub_1000D4048(a2);
  *(void *)&v9.byte8 = *(void *)&v9.byte0;
  v14[0] = result;
  v14[1] = *(const void **)&v9.byte0;
  if ((unint64_t)result | *(void *)&v9.byte0)
  {
    *(void *)&v9.byte0 = result;
    v13[0] = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v9);
    CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, (CFUUIDRef)v13[0]);
    uint64_t v12 = v10;
    unint64_t v11 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 128LL));
    if (v11[2])
    {
      CFRelease(v11[2]);
      CFStringRef v10 = v12;
    }

    void v11[2] = v10;
    uint64_t v12 = 0LL;
    sub_10003AF44((const void **)&v12);
    return (const __CFString *)sub_10003B07C(v13);
  }

  return result;
}

void sub_1000BF870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, const void *);
  sub_10003AF44((const void **)va);
  sub_10003B07C((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000BF8B8(void *a1, const void *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  v44[0] = Mutable;
  unint64_t v5 = (CFTypeRef *)((char *)a1 + *(void *)(*a1 - 136LL));
  if (v5[10])
  {
    CFRelease(v5[10]);
    CFMutableArrayRef Mutable = (CFMutableArrayRef)v44[0];
  }

  v5[10] = Mutable;
  v44[0] = 0LL;
  sub_10002B014(v44);
  sub_1000C40EC((uint64_t)a2 + 200, v37);
  CFStringRef v6 = *(const void **)((char *)a1 + *(void *)(*a1 - 112LL) + 16);
  v44[0] = a2;
  v44[1] = 0LL;
  v44[2] = v6;
  char v45 = 2;
  uint64_t v46 = 0LL;
  uint64_t v47 = v37;
  int v48 = 2;
  unint64_t v7 = v49;
  v49[0] = &off_1001723D8;
  __int128 v50 = v49;
  sub_10001321C((uint64_t)v44, (uint64_t)&v32);
  sub_1000132BC((uint64_t)v44, (uint64_t)v31);
  while (sub_1000EA3C0((uint64_t)&v32, (uint64_t)v31))
  {
    if (v36 == 3)
    {
      int v20 = *__error();
      if (sub_1000BE2F0())
      {
        uint64_t v30 = 0LL;
        uint64_t v21 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          uint64_t v22 = 3LL;
        }
        else {
          uint64_t v22 = 2LL;
        }
        value = (void *)0x4B04100302LL;
        __int16 v40 = 2080;
        int v41 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
        __int16 v42 = 2048;
        uint64_t v43 = v33;
        LODWORD(v2_Block_object_dispose((const void *)(v2 - 120), 8) = 28;
        __int128 v23 = (const char *)_os_log_send_and_compose_impl( v22,  &v30,  0LL,  0LL,  &_mh_execute_header,  v21,  16LL,  "%.*s: Failed during ASIF extents enumeration on offset: %llu",  (int)&value,  v28,  v29);
        if (v23)
        {
          uint64_t v24 = (char *)v23;
          fprintf(__stderrp, "%s\n", v23);
          free(v24);
        }
      }

      else
      {
        uint64_t v25 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          value = (void *)0x4B04100302LL;
          __int16 v40 = 2080;
          int v41 = "void info::DiskImageInfoASIF::examine_mapped_extents(const DiskImageASIF &)";
          __int16 v42 = 2048;
          uint64_t v43 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%.*s: Failed during ASIF extents enumeration on offset: %llu",  (uint8_t *)&value,  0x1Cu);
        }
      }

      *__error() = v20;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      uint64_t v27 = std::generic_category();
      exception[1] = 22LL;
      exception[2] = v27;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "Failed during ASIF extents enumeration.";
    }

    uint64_t v9 = v33;
    uint64_t v8 = v34;
    char v10 = v35;
    CFMutableArrayRef v11 = CFArrayCreateMutable(kCFAllocatorDefault, 2LL, &kCFTypeArrayCallBacks);
    value = v11;
    if ((v10 & 2) != 0) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v9 + 1;
    }
    sub_1000FE9B0(v11, v12);
    sub_1000FE9B0(value, (v10 & 1) + v8 - 1);
    CFArrayAppendValue(*(CFMutableArrayRef *)((char *)a1 + *(void *)(*a1 - 136LL) + 80), value);
    sub_10002B014((const void **)&value);
    sub_1000EA5F0(&v32);
  }

  uint64_t v13 = v31[0];
  v31[0] = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  uint64_t v14 = v32;
  uint64_t v32 = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
  }
  if (v50 == v49)
  {
    uint64_t v15 = 4LL;
  }

  else
  {
    if (!v50) {
      goto LABEL_19;
    }
    uint64_t v15 = 5LL;
    unint64_t v7 = v50;
  }

  (*(void (**)(void *))(*v7 + 8 * v15))(v7);
LABEL_19:
  uint64_t v16 = v46;
  uint64_t v46 = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 40LL))(v16);
  }
  v37[0] = off_10018B4F8;
  uint64_t v17 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

void sub_1000BFCD0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000BFDB8(uint64_t *a1, void *a2, char a3)
{
  *a1 = (uint64_t)off_10018AB08;
  a1[9] = (uint64_t)off_10018AC70;
  a1[10] = (uint64_t)off_10018ACB8;
  a1[11] = (uint64_t)&off_10018AF40;
  a1[5] = (uint64_t)off_10018AF98;
  a1[6] = (uint64_t)off_10018AB98;
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 120) = 0;
  *((_BYTE *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  *((_BYTE *)a1 + 136) = 0;
  a1[19] = (uint64_t)off_10018B088;
  a1[7] = (uint64_t)off_10018B0E0;
  a1[8] = (uint64_t)off_10018AC28;
  *((_BYTE *)a1 + 160) = 0;
  *((_BYTE *)a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  a1[22] = 0LL;
  sub_1000C0084(a1 + 23, (uint64_t *)&off_10018AA68, (uint64_t)a2);
  a1[29] = 0LL;
  a1[37] = 0LL;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *a1 = (uint64_t)off_10018A5B8;
  a1[5] = (uint64_t)off_10018A600;
  a1[6] = (uint64_t)off_10018A648;
  a1[7] = (uint64_t)off_10018A690;
  a1[8] = (uint64_t)off_10018A6D8;
  a1[9] = (uint64_t)off_10018A720;
  a1[10] = (uint64_t)off_10018A768;
  a1[11] = (uint64_t)off_10018A7C8;
  a1[19] = (uint64_t)off_10018A838;
  a1[23] = (uint64_t)off_10018A8A8;
  a1[27] = (uint64_t)off_10018A918;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  uint64_t v6 = (*(uint64_t (**)(void *))(*a2 + 32LL))(a2);
  uint64_t v7 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + 16) = v6;
  uint64_t v8 = *(uint64_t *)((char *)a1 + *(void *)(v7 - 112) + 16);
  uint64_t v9 = (*(uint64_t (**)(void *))(*a2 + 24LL))(a2);
  uint64_t v10 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 112) + _Block_object_dispose((const void *)(v2 - 120), 8) = v9 * v8;
  uint64_t v11 = *((unsigned int *)a2 + 24);
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + 24) = v11;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + 64) = a2[11];
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 136) + _Block_object_dispose((const void *)(v2 - 120), 8) = a2[476];
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 112) + 56) = *(uint64_t *)((char *)a1 + *(void *)(v10 - 112) + 8);
  uint64_t v12 = a2[13];
  if (v12)
  {
    uint64_t v13 = v12 * v11;
  }

  else
  {
    uint64_t v14 = a2[11];
    uint64_t v13 = (*(uint64_t (**)(void *))(*a2 + 24LL))(a2) * v14;
    uint64_t v10 = *a1;
  }

  uint64_t v15 = (uint64_t)a1 + *(void *)(v10 - 112);
  *(void *)(v15 + 40) = v13;
  *(_BYTE *)(v15 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 1;
  uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 112);
  uint64_t v17 = *((unsigned int *)a2 + 24);
  if (!*(_BYTE *)(v16 + 32)) {
    *(_BYTE *)(v16 + sub_100006224(v6 - 32) = 1;
  }
  *(void *)(v16 + 24) = v17;
  *((_BYTE *)a1 + *(void *)(*a1 - 136) + 72) = *((_BYTE *)a2 + 44) & 1;
  sub_1000BF200(a1, (uint64_t)a2);
  sub_1000BF570(a2 + 2, (uint64_t)a1 + *(void *)(*a1 - 104));
  sub_1000BF71C(a1, a2);
  if ((a3 & 2) != 0) {
    sub_1000BF8B8(a1, a2);
  }
  return a1;
}

void sub_1000C002C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 216) = off_10018B318;
  *(void *)(v1 + 72) = off_10018B370;
  sub_10002B014((const void **)(v1 + 296));
  sub_1000397B0(v3, (uint64_t *)&off_10018AA68);
  *(void *)(v1 + 152) = v4;
  *(void *)(v1 + 56) = v4 + 88;
  sub_10003AF44(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C0084(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100177578;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - sub_10003AF44((const void **)(v10 + 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - sub_10003AF44((const void **)(v10 + 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v7 = sub_1000D4060(a3);
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  uint64_t v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  uint64_t v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }

  a1[1] = (uint64_t)v10;
  uint64_t v12 = 0LL;
  sub_10003AF44((const void **)&v12);
  sub_10003B07C((const void **)&v13);
  return a1;
}

void sub_1000C0160( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1000C01AC(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = sub_1000C5100(a2, a2, (uint64_t)v22);
  unint64_t v7 = *(void *)(a2 + 352);
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 3;
  uint64_t v10 = a1 + 4;
  while (v22[0] != v22[5] || v22[1] != v22[6])
  {
    uint64_t v11 = (void *)sub_1000C1F98((uint64_t)v22);
    sub_1000C5184(a2, v11, (uint64_t)v21);
    while (v21[0] != v21[5] || v21[1] != v21[6])
    {
      *(_OWORD *)int v20 = *(_OWORD *)sub_1000C1F98((uint64_t)v21);
      int v12 = sub_1000C2ADC(v20);
      uint64_t v13 = *a1;
      unint64_t v14 = *(void *)((char *)v8 + *(void *)(*a1 - 112));
      BOOL v15 = v14 > v7;
      unint64_t v16 = v14 - v7;
      if (v15)
      {
        else {
          uint64_t v17 = v16;
        }
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      switch(v12)
      {
        case 0:
          ++*(void *)((char *)v10 + *(void *)(v13 - 136));
          *v8 += v17;
          break;
        case 1:
          ++*(uint64_t *)((char *)a1 + *(void *)(v13 - 136) + 40);
          a1[2] += v17;
          break;
        case 2:
          ++*(uint64_t *)((char *)a1 + *(void *)(v13 - 136) + 48);
          *v10 += v17;
          break;
        case 3:
          ++*(uint64_t *)((char *)a1 + *(void *)(v13 - 136) + 56);
          *v9 += v17;
          if (v17)
          {
            sub_1000C03DC(a1, a2, a3, v20[0], v20[1], a4, v17);
            uint64_t v13 = *a1;
          }

          break;
        default:
          break;
      }

      v7 += *(void *)((char *)v9 + *(void *)(v13 - 136));
      sub_1000C2160((uint64_t)v21, (uint64_t)v20);
    }

    uint64_t result = sub_1000C2050((uint64_t)v22, (uint64_t)v21);
  }

  return result;
}

void *sub_1000C03AC(void *a1)
{
  *a1 = off_10018B4F8;
  sub_100006224((uint64_t)(a1 + 2));
  return a1;
}

unint64_t *sub_1000C03DC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v28[0] = a4;
  v28[1] = a5;
  unint64_t v12 = sub_1000C2D94(v28);
  sub_1000C2AF8(a2, a3, v12, 0, 1LL, &v27);
  uint64_t v13 = (char *)a1 + *(void *)(*a1 - 112LL);
  unint64_t v14 = *((void *)v13 + 1);
  unint64_t v15 = *((void *)v13 + 2);
  if (v15 - 1 >= v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    __int128 v26 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v26;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Corrupted ASIF image.";
  }

  unint64_t v16 = sub_1000C2ECC(v28);
  unint64_t v17 = v16 + a7;
  if (v16 < v17)
  {
    int v18 = 0;
    unint64_t v19 = v14 / v15;
    do
    {
      while (1)
      {
        if (v27) {
          int v20 = *(_BYTE *)(v27 + 224) ? (void *)(v27 + 40) : 0LL;
        }
        else {
          int v20 = 0LL;
        }
        unint64_t v21 = sub_1000C2EF4(v20, a2, v18, v16, v17);
        uint64_t v22 = a6;
        unint64_t v23 = (v21 - v16) / v19;
        if (v18)
        {
          uint64_t v22 = a6 + 1;
          if (v18 == 2) {
            break;
          }
        }

        *v22 += v23;
        ++v18;
        unint64_t v16 = v21;
      }

      int v18 = 0;
      a6[2] += v23;
      unint64_t v16 = v21;
    }

    while (v21 < v17);
  }

  return sub_1000C1AC8(&v27);
}

void sub_1000C0578(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000C0594(uint64_t a1)
{
  *(void *)a1 = off_10018B778;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = off_10018B7D0;
  sub_10002B014((const void **)(a1 + 80));
  return a1;
}

void sub_1000C05D0(void *a1)
{
  *(void *)a1 = off_10018B778;
  *((void *)a1 + 11) = off_10018B7D0;
  sub_10002B014((const void **)a1 + 10);
  operator delete(a1);
}

const void **sub_1000C060C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v11 = (uint64_t **)@"Dir Pointer Version";
  uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v13 = @"Num Tables";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v14 = 0LL;
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  unint64_t v15 = @"Chunk Size";
  uint64_t valuePtr = *(void *)(a1 + 24);
  CFNumberRef v16 = 0LL;
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  unint64_t v17 = @"Uninitialized Entries";
  uint64_t valuePtr = *(void *)(a1 + 32);
  CFNumberRef v18 = 0LL;
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  unint64_t v19 = @"Full Entries";
  uint64_t valuePtr = *(void *)(a1 + 40);
  CFNumberRef v20 = 0LL;
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  unint64_t v21 = @"Unmapped Entries";
  uint64_t valuePtr = *(void *)(a1 + 48);
  CFNumberRef v22 = 0LL;
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  unint64_t v23 = @"Bitmapped Entries";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v24 = 0LL;
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v25 = @"Max Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 64);
  CFNumberRef v26 = 0LL;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  CFNumberRef v26 = v4;
  unint64_t v27 = @"Is Cache";
  uint64_t valuePtr = v5;
  CFNumberRef v28 = 0LL;
  CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v29 = (uint64_t *)&v11;
  uint64_t v30 = 9LL;
  sub_1000FF160((uint64_t *)&v29, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 17LL; i != -1; i -= 2LL)
    sub_100006B94((const void **)&(&v11)[i]);
  unint64_t v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    uint64_t v29 = (uint64_t *)@"Mapped Sectors";
    uint64_t v30 = (uint64_t)v7;
    CFRetain(v7);
    uint64_t v11 = &v29;
    uint64_t v12 = 1LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100006B94((const void **)&v30);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return sub_100006B34(&v9);
}

void sub_1000C0890(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000C0914()
{
}

CFStringRef sub_1000C091C()
{
  return @"ASIF Info";
}

const void **sub_1000C0930(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_10018B778;
  *((void *)v1 + 11) = off_10018B7D0;
  return sub_10002B014((const void **)v1 + 10);
}

void sub_1000C0958(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_10018B778;
  *((void *)v1 + 11) = off_10018B7D0;
  sub_10002B014((const void **)v1 + 10);
  operator delete(v1);
}

char *sub_1000C099C(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_1000C09AC(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

uint64_t sub_1000C09BC(uint64_t a1)
{
  *(void *)(a1 + 216) = off_10018B318;
  *(void *)(a1 + 72) = off_10018B370;
  sub_10002B014((const void **)(a1 + 296));
  *(void *)(a1 + 184) = off_10018B1D0;
  *(void *)(a1 + 80) = off_10018B228;
  sub_10003AF44((const void **)(a1 + 208));
  sub_10003AF44((const void **)(a1 + 200));
  sub_10003AF44((const void **)(a1 + 192));
  *(void *)(a1 + 152) = off_10018B088;
  *(void *)(a1 + 56) = off_10018B0E0;
  sub_10003AF44((const void **)(a1 + 176));
  return a1;
}

void sub_1000C0A40(uint64_t a1)
{
  *(void *)(a1 + 216) = off_10018B318;
  *(void *)(a1 + 72) = off_10018B370;
  sub_10002B014((const void **)(a1 + 296));
  *(void *)(a1 + 184) = off_10018B1D0;
  *(void *)(a1 + 80) = off_10018B228;
  sub_10003AF44((const void **)(a1 + 208));
  sub_10003AF44((const void **)(a1 + 200));
  sub_10003AF44((const void **)(a1 + 192));
  *(void *)(a1 + 152) = off_10018B088;
  *(void *)(a1 + 56) = off_10018B0E0;
  sub_10003AF44((const void **)(a1 + 176));
  operator delete((void *)a1);
}

const void **sub_1000C0AC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  uint64_t v10[2] = @"Format Description";
  v10[3] = @"Apple sparse image";
  sub_100039DD4(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  sub_10003A0D8(a1 + *(void *)(*(void *)a1 - 120LL), &v9);
  void v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  sub_1000C060C(a1 + *(void *)(*(void *)a1 - 136LL), &v9);
  _BYTE v10[8] = @"ASIF Info";
  v10[9] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  sub_10003A844((void *)(a1 + *(void *)(*(void *)a1 - 128LL)), &v9);
  v10[10] = @"Identity Info";
  v10[11] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 6LL;
  sub_1000FF160(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100006B34(&v8);
  for (uint64_t i = 11LL; i != -1; i -= 2LL)
    uint64_t result = sub_100006B94((const void **)&v10[i]);
  return result;
}

void sub_1000C0C70(_Unwind_Exception *a1)
{
  for (uint64_t i = 88LL; i != -8; i -= 16LL)
    sub_100006B94((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_1000C0CB4()
{
  return @"ASIF";
}

const void **sub_1000C0CC0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 27) = off_10018B318;
  *((void *)v1 + 9) = off_10018B370;
  sub_10002B014((const void **)v1 + 37);
  *((void *)v1 + 23) = off_10018B1D0;
  *((void *)v1 + 10) = off_10018B228;
  sub_10003AF44((const void **)v1 + 26);
  sub_10003AF44((const void **)v1 + 25);
  sub_10003AF44((const void **)v1 + 24);
  *((void *)v1 + 19) = off_10018B088;
  *((void *)v1 + 7) = off_10018B0E0;
  return sub_10003AF44((const void **)v1 + 22);
}

void sub_1000C0D44(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 27) = off_10018B318;
  *((void *)v1 + 9) = off_10018B370;
  sub_10002B014((const void **)v1 + 37);
  *((void *)v1 + 23) = off_10018B1D0;
  *((void *)v1 + 10) = off_10018B228;
  sub_10003AF44((const void **)v1 + 26);
  sub_10003AF44((const void **)v1 + 25);
  sub_10003AF44((const void **)v1 + 24);
  *((void *)v1 + 19) = off_10018B088;
  *((void *)v1 + 7) = off_10018B0E0;
  sub_10003AF44((const void **)v1 + 22);
  operator delete(v1);
}

const void **sub_1000C0DD0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 27) = off_10018B318;
  *((void *)v1 + 9) = off_10018B370;
  sub_10002B014((const void **)v1 + 37);
  *((void *)v1 + 23) = off_10018B1D0;
  *((void *)v1 + 10) = off_10018B228;
  sub_10003AF44((const void **)v1 + 26);
  sub_10003AF44((const void **)v1 + 25);
  sub_10003AF44((const void **)v1 + 24);
  *((void *)v1 + 19) = off_10018B088;
  *((void *)v1 + 7) = off_10018B0E0;
  return sub_10003AF44((const void **)v1 + 22);
}

void sub_1000C0E54(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 27) = off_10018B318;
  *((void *)v1 + 9) = off_10018B370;
  sub_10002B014((const void **)v1 + 37);
  *((void *)v1 + 23) = off_10018B1D0;
  *((void *)v1 + 10) = off_10018B228;
  sub_10003AF44((const void **)v1 + 26);
  sub_10003AF44((const void **)v1 + 25);
  sub_10003AF44((const void **)v1 + 24);
  *((void *)v1 + 19) = off_10018B088;
  *((void *)v1 + 7) = off_10018B0E0;
  sub_10003AF44((const void **)v1 + 22);
  operator delete(v1);
}

const void **sub_1000C0EE0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000C0AC4((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_1000C0EF0()
{
  return @"ASIF";
}

uint64_t sub_1000C0EFC(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    return a1 + 24;
  }
  if (a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v4 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"ASIF: invalid dir index to header", 0x16u);
  }

  return a1 + 16;
}

void sub_1000C0F4C(void *a1)
{
  *a1 = off_10018B4F8;
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

unint64_t *sub_1000C0F7C(unint64_t *a1)
{
  do
    uint64_t result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0LL, a1));
  if (result)
  {
    do
    {
      unint64_t v3 = __ldaxr(result);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, result));
    if (!v4)
    {
      uint64_t v5 = result[4];
      result[4] = -1LL;
      return (unint64_t *)sub_1000C0FBC((uint64_t)result, v5, 1u);
    }
  }

  return result;
}

uint64_t sub_1000C0FBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 520) || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2))
  {
    int v8 = (a3 >> 1) & 2;
    goto LABEL_9;
  }

  uint64_t v7 = sub_1000C1160(a1);
  int v8 = (a3 >> 1) & 2;
  if (!(_DWORD)v7)
  {
LABEL_9:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000C12BC((uint64_t *)(a1 + 40));
    sub_1000C1278(a1 + 408, a1, a2, v8);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1LL;
  }

  if ((a3 & 2) != 0)
  {
    *(void *)&__int128 v10 = "ref::details::ctrl_blk<di_asif::details::table, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::table, tag_t = unsigned long long]";
    *((void *)&v10 + 1) = 78LL;
    int v11 = 16;
    sub_1000C1190(v12, &v10);
    sub_10000552C(&v13, (uint64_t)"Got error when trying to close ", 31LL);
    std::ostream::operator<<(&v13, a2);
    sub_10000552C(&v13, (uint64_t)" with ret ", 10LL);
    std::ostream::operator<<(&v13, v7);
    sub_10000552C(&v13, (uint64_t)", Force closing.", 16LL);
    std::ostream::~ostream(&v13, off_10018B620);
    sub_1000C1398((uint64_t)v12);
    std::ios::~ios(&v14);
    goto LABEL_9;
  }

  if ((a3 & 1) != 0) {
    sub_1000C1278(a1 + 408, a1, a2, v8 | 1);
  }
  return 0LL;
}

void sub_1000C1148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000C1160(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 400)) {
    return 0LL;
  }
  uint64_t v1 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 496);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48LL))(v2, v1);
  }
  else {
    return sub_1000CC040(v1);
  }
}

void *sub_1000C1190(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000C131C((uint64_t)a1, a2);
  *a1 = off_10018B558;
  a1[45] = &off_10018B658;
  a1[46] = &off_10018B680;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018B558;
  a1[45] = off_10018B5E0;
  a1[46] = off_10018B608;
  return a1;
}

void sub_1000C1214(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C1238(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C1278(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100014B10();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *))(*(void *)v4 + 48LL))(v4, &v7, &v6, &v8);
}

uint64_t *sub_1000C12BC(uint64_t *result)
{
  if (*((_BYTE *)result + 360))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 35));
    sub_1000C1944(v1 + 29);
    std::mutex::~mutex((std::mutex *)(v1 + 21));
    std::mutex::~mutex((std::mutex *)(v1 + 13));
    uint64_t v2 = (void *)v1[9];
    if (v2)
    {
      v1[10] = (uint64_t)v2;
      operator delete(v2);
    }

    uint64_t result = sub_1000C1A24(v1 + 2);
    *((_BYTE *)v1 + 360) = 0;
  }

  return result;
}

uint64_t sub_1000C131C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018B6F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000C1384(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C1398(uint64_t a1)
{
  *(void *)a1 = off_10018B6F0;
  sub_1000C1610(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000C1434(char *a1)
{
}

uint64_t sub_1000C1478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000C14AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000C14F8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018B620);
  sub_1000C1398(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000C1530(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018B620);
  sub_1000C1398((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000C1570(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018B620);
  sub_1000C1398(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000C15B0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018B620);
  sub_1000C1398((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000C15FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000C1398(a1);
  operator delete(v1);
}

uint64_t sub_1000C1610(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000C1760((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000C1738( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000C1760(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 210LL;
    __int16 v25 = 2082;
    CFNumberRef v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFNumberRef v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 210LL;
      __int16 v25 = 2082;
      CFNumberRef v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000C1944(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000C19D8((uint64_t)a1);
}

uint64_t sub_1000C19D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1000C1A24(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *sub_1000C1A7C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  int *result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      sub_100014B10();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

unint64_t *sub_1000C1AC8(unint64_t *a1)
{
  do
    uint64_t result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0LL, a1));
  if (result)
  {
    do
    {
      unint64_t v3 = __ldaxr(result);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, result));
    if (!v4)
    {
      uint64_t v5 = result[4];
      result[4] = -1LL;
      return (unint64_t *)sub_1000C1B08((uint64_t)result, v5, 1u);
    }
  }

  return result;
}

uint64_t sub_1000C1B08(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 344)
    || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(_BYTE *)(a1 + 224)
    || (uint64_t v7 = *(void *)(a1 + 320)) == 0)
  {
    int v9 = (a3 >> 1) & 2;
    goto LABEL_11;
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48LL))(v7, a1 + 40);
  int v9 = (a3 >> 1) & 2;
  if (!(_DWORD)v8)
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000C1CC0((uint64_t *)(a1 + 40));
    sub_1000C1278(a1 + 232, a1, a2, v9);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1LL;
  }

  if ((a3 & 2) != 0)
  {
    *(void *)&__int128 v11 = "ref::details::ctrl_blk<di_asif::details::map_element, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = di_asif::details::map_element, tag_t = unsigned long long]";
    *((void *)&v11 + 1) = 84LL;
    int v12 = 16;
    sub_1000C1190(v13, &v11);
    sub_10000552C(&v14, (uint64_t)"Got error when trying to close ", 31LL);
    std::ostream::operator<<(&v14, a2);
    sub_10000552C(&v14, (uint64_t)" with ret ", 10LL);
    std::ostream::operator<<(&v14, v8);
    sub_10000552C(&v14, (uint64_t)", Force closing.", 16LL);
    std::ostream::~ostream(&v14, off_10018B620);
    sub_1000C1398((uint64_t)v13);
    std::ios::~ios(&v15);
    goto LABEL_11;
  }

  if ((a3 & 1) != 0) {
    sub_1000C1278(a1 + 232, a1, a2, v9 | 1);
  }
  return 0LL;
}

void sub_1000C1CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t *sub_1000C1CC0(uint64_t *result)
{
  if (*((_BYTE *)result + 184))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 15));
    v1[4] = (uint64_t)off_100180688;
    uint64_t result = sub_100079BEC(v1 + 7);
    *((_BYTE *)v1 + 184) = 0;
  }

  return result;
}

uint64_t sub_1000C1D84(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = v1 % (*(void *)(a1 + 48) + 1LL);
  uint64_t result = v1 - v2;
  if (v1 == v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Invalid chunk size", 0xFFFFFFEA);
  }

  return result;
}

unint64_t sub_1000C1DDC(uint64_t *a1)
{
  unint64_t v1 = (void *)a1[2];
  unint64_t v2 = a1[7];
  uint64_t v3 = v2 * *v1;
  unint64_t v4 = a1[5];
  unint64_t v5 = v3 + v4;
  unint64_t v6 = v1[1] * v2;
  if (v4 < v6) {
    return v5 / v2;
  }
  a1[5] = 0LL;
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  a1[2] = (uint64_t)(v1 + 2);
  if (v8 != ((uint64_t)v1 - v7 + 16) >> 4)
  {
    unint64_t v9 = v1[2] * v2;
    if (v9 < a1[9])
    {
      unint64_t v5 = v1[2] * v2;
      return v5 / v2;
    }
  }

  return 0LL;
}

uint64_t *sub_1000C1E98( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  *a1 = a2;
  a1[1] = a3;
  a1[5] = 0LL;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  unint64_t v9 = (uint64_t *)(a2 + 16 * a8);
  a1[9] = a7;
  if (a8 == a3)
  {
LABEL_6:
    a1[2] = (uint64_t)v9;
  }

  else
  {
    uint64_t v10 = 16 * a3 - 16 * a8;
    while (1)
    {
      uint64_t v11 = *v9;
      if ((v9[1] + *v9) * a5 >= a6) {
        break;
      }
      v9 += 2;
      v10 -= 16LL;
      if (!v10)
      {
        unint64_t v9 = (uint64_t *)(a2 + 16 * a3);
        goto LABEL_6;
      }
    }

    a1[2] = (uint64_t)v9;
    unint64_t v13 = v11 * a5;
    if (v11 * a5 < a7)
    {
      BOOL v14 = a6 >= v13;
      uint64_t v15 = a6 - v13;
      if (v15 != 0 && v14) {
        a1[5] = v15;
      }
      a1[3] = sub_1000C1DDC(a1);
      a1[4] = v16;
    }
  }

  return a1;
}

uint64_t sub_1000C1F34(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_1000D5F88( &v4,  a1,  *(void *)(v2 + 48)
  + (*(void *)(v2 + 48) + 1LL)
  * ((a2 / *(unsigned __int16 *)(v2 + 18) - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v2 + 18))
   / (*(void *)(v2 + 48)
    * (unint64_t)(*(_DWORD *)(v2 + 20) / *(unsigned __int16 *)(v2 + 18)))));
  return v4;
}

uint64_t sub_1000C1F98(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1000C1FA0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = *(void *)(a1 + 8)
     + *(unsigned __int16 *)(v3 + 18)
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  if (v4 >= *(void *)(v2 + 352) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0LL;
    unint64_t v6 = 0LL;
    int v8 = 0;
  }

  else
  {
    uint64_t v5 = sub_1000C1F34(v2, v4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00LL;
    uint64_t v7 = v5;
    int v8 = 1;
  }

  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(_BYTE *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }

  else if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + sub_100006224(v6 - 32) = 0;
  }

  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + sub_100006224(v6 - 32) = 1;
  }

  return a1;
}

uint64_t sub_1000C2050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + sub_100006224(v6 - 32) = *(void *)(a1 + 32);
  return sub_1000C1FA0(a1);
}

uint64_t sub_1000C2064(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(unsigned __int16 *)(v2 + 18);
  sub_1000D5F18( &v5,  a1,  ((a2 / v3 - *(void *)(a1 + 352) / v3) / (*(_DWORD *)(v2 + 20) / v3)
  return v5;
}

uint64_t sub_1000C20C0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(v2 + 8);
  unint64_t v4 = *(void *)(a1 + 8) + *(unsigned int *)(v3 + 20);
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  if (v4 >= *(void *)(v2 + 352) + *(void *)(v3 + 80))
  {
    uint64_t v7 = 0LL;
    unint64_t v6 = 0LL;
    int v8 = 0;
  }

  else
  {
    uint64_t v5 = sub_1000C2064(v2, v4);
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00LL;
    uint64_t v7 = v5;
    int v8 = 1;
  }

  if (*(unsigned __int8 *)(a1 + 32) == v8)
  {
    if (*(_BYTE *)(a1 + 32)) {
      *(void *)(a1 + 24) = v4;
    }
  }

  else if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + sub_100006224(v6 - 32) = 0;
  }

  else
  {
    *(void *)(a1 + 16) = v6 | v7;
    *(void *)(a1 + 24) = v4;
    *(_BYTE *)(a1 + sub_100006224(v6 - 32) = 1;
  }

  return a1;
}

uint64_t sub_1000C2160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(void *)(a2 + sub_100006224(v6 - 32) = *(void *)(a1 + 32);
  return sub_1000C20C0(a1);
}

uint64_t sub_1000C2174(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, int a6)
{
  char v6 = a6;
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = a2;
  sub_1000E22C0((uint64_t *)(a1 + 16), *(void *)(a2 + 56), a6);
  sub_1000D4674((void *)(a1 + 72), *(void *)(a2 + 64));
  *(void *)(a1 + 104) = 850045863LL;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 101) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = 850045863LL;
  *(void *)(a1 + 280) = 850045863LL;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0LL;
  *(_OWORD *)(a1 + 28_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0LL;
  *(void *)(a1 + 344) = a4;
  *(void *)(a1 + 352) = a5;
  if (a4 && a4 % *(unsigned int *)(a2 + 20))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    int v20 = std::generic_category();
    exception[1] = 4294967274LL;
    exception[2] = v20;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "ASIF: table is not aligned to chunk size";
  }

  if ((v6 & 1) != 0)
  {
    unsigned int v12 = 1;
  }

  else
  {
    unint64_t v13 = (std::__shared_weak_count *)a3[1];
    v21[0] = *a3;
    v21[1] = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }

    sub_1000C23A8((void *)a1, v21);
    if (v13)
    {
      uint64_t v16 = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    unsigned int v12 = 0;
  }

  atomic_store(v12, (unsigned int *)(a1 + 96));
  *(_BYTE *)(a1 + 100) = v12;
  return a1;
}

void sub_1000C2348(_Unwind_Exception *a1, uint64_t a2, uint64_t *a3, ...)
{
  unint64_t v9 = *v4;
  if (*v4)
  {
    *(void *)(v3 + 80) = v9;
    operator delete(v9);
  }

  sub_1000C1A24(a3);
  _Unwind_Resume(a1);
}

void sub_1000C23A8(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 56);
  size_t v6 = ((unint64_t)*(unsigned __int16 *)(v4 + 18) + 8 * v5 - 1)
  uint64_t v7 = operator new[](v6);
  bzero(v7, v6);
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 40LL))(*a2);
  unint64_t v9 = a1[43];
  size_t v10 = v8 - v9;
  if (v8 < v9) {
    size_t v10 = 0LL;
  }
  if (v10 >= v6) {
    size_t v11 = v6;
  }
  else {
    size_t v11 = v10;
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v24 = v7;
  __int16 v25 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  size_t v26 = v11;
  unint64_t v27 = v9;
  size_t v28 = v11;
  char v29 = 0;
  unsigned int v15 = (*(uint64_t (**)(void, void **))(*(void *)*a2 + 88LL))(*a2, &v24);
  if (v11 != v15)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    __int16 v23 = std::generic_category();
    exception[1] = v15;
    exception[2] = v23;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Read returned an error";
  }

  bzero(v7, v6 - v11);
  if (v5)
  {
    uint64_t v16 = 0LL;
    unint64_t v17 = (unint64_t *)v7;
    do
    {
      unint64_t v18 = *v17++;
      atomic_store(0LL, (unint64_t *)(a1[7] + v16));
      atomic_store(bswap64(v18), (unint64_t *)(a1[7] + v16 + 8));
      v16 += 16LL;
      --v5;
    }

    while (v5);
  }

  unint64_t v19 = v25;
  if (v25)
  {
    int v20 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  operator delete[](v7);
}

void sub_1000C2568(_Unwind_Exception *a1)
{
}

void sub_1000C2590(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v3 = (std::mutex *)(a1 + 280);
    std::mutex::lock((std::mutex *)(a1 + 280));
    sub_1000C25FC((void *)(a1 + 232), &v4);
    atomic_store(1u, (unsigned int *)(a1 + 96));
    std::mutex::unlock(v3);
  }

void sub_1000C25E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C25FC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000E254C(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }

  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF)) = *a2;
  uint64_t v10 = v8 + 1;
  a1[5] = v10;
  unint64_t v11 = v7 + v10;
  unsigned int v12 = (void *)(v5 + 8 * (v11 >> 9));
  uint64_t v13 = v11 & 0x1FF;
  if (v13) {
    uint64_t v14 = *v12 + 8 * v13;
  }
  else {
    uint64_t v14 = *(v12 - 1) + 4096LL;
  }
  return v14 - 8;
}

uint64_t sub_1000C26AC(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8));
  if (v3 >> 62 != 3) {
    return 0LL;
  }
  uint64_t v7 = (unint64_t *)(*(void *)(*a3 + 56LL) + 16LL * a3[1]);
  while (*v7)
  {
LABEL_10:
    if ((sub_1000DCB58(v7, 1) & 1) == 0)
    {
      char v45 = 0;
      uint64_t v43 = off_1001969E8;
      __int16 v44 = v7;
      uint64_t v46 = 0LL;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      uint64_t v10 = std::generic_category();
      exception[1] = 4294967291LL;
      exception[2] = v10;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "Can't take exclusive lock on entry";
    }
  }

  while (1)
  {
    unint64_t v8 = __ldaxr(v7);
    if (!v8) {
      break;
    }
    __clrex();
LABEL_9:
    if (v8) {
      goto LABEL_10;
    }
  }

  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v7)) {
    goto LABEL_9;
  }
  int v12 = 1;
  char v45 = 1;
  uint64_t v43 = off_1001969E8;
  __int16 v44 = v7;
  uint64_t v46 = 0LL;
  unint64_t v13 = atomic_load((unint64_t *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8));
  if (v13 >> 62 == 3)
  {
    uint64_t v14 = *(void *)(*a3 + 8LL);
    sub_1000C2AF8( a1,  a2,  (*(void *)(*a3 + 352LL)
     + (*(void *)(v14 + 48) + *(void *)(v14 + 48) * a3[1])
     / (unint64_t)(*(void *)(v14 + 48) + 1LL)
     * *(unsigned int *)(v14 + 20))
    / *(unsigned __int16 *)(v14 + 18),
      0,
      1LL,
      &v42);
    if (!v42 || *(_BYTE *)(v42 + 344))
    {
      uint64_t v15 = 0LL;
      BOOL v16 = 0;
      uint64_t v17 = 0LL;
      goto LABEL_17;
    }

    if (*(_BYTE *)(v42 + 224)) {
      uint64_t v18 = v42 + 40;
    }
    else {
      uint64_t v18 = 0LL;
    }
    unsigned int v19 = sub_1000C2E48(a3);
    uint64_t v20 = sub_1000C2DC4(v18, v19);
    uint64_t v21 = *(void *)(*a3 + 8LL);
    uint64_t v22 = *(void *)(v21 + 48);
    uint64_t v23 = *(unsigned int *)(v21 + 20);
    if (v42)
    {
      if (*(_BYTE *)(v42 + 224)) {
        __int16 v25 = (void *)(v42 + 40);
      }
      else {
        __int16 v25 = 0LL;
      }
    }

    else
    {
      __int16 v25 = 0LL;
    }

    unint64_t v24 = *(void *)(*a3 + 352LL) + (v22 + v22 * a3[1]) / (unint64_t)(v22 + 1) * v23;
    if (sub_1000CC334(v25, a1, v20, v24, v24 + v23, 0) == v24 + v23)
    {
      size_t v26 = (unint64_t *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8);
      unint64_t v27 = *v26;
      uint64_t v28 = *(unsigned int *)(*(void *)(*a3 + 8LL) + 20LL);
      BOOL v16 = v20 == 2;
      unint64_t v29 = *v26;
      unint64_t v30 = __ldaxr(v26);
      if (v30 == v29)
      {
        if (!__stlxr((v20 << 62) | v29 & 0x3FFFFFFFFFFFFFFFLL, v26))
        {
          char v31 = 1;
          goto LABEL_41;
        }
      }

      else
      {
        __clrex();
      }

      char v31 = 0;
LABEL_41:
      uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFLL;
      if ((v31 & 1) == 0)
      {
        while (2)
        {
          unint64_t v33 = __ldaxr(v26);
          if (v33 == v30)
          {
            if (!__stlxr(v30 & 0x3FFFFFFFFFFFFFFFLL | (v20 << 62), v26))
            {
              int v34 = 1;
              goto LABEL_47;
            }
          }

          else
          {
            __clrex();
          }

          int v34 = 0;
LABEL_47:
          unint64_t v30 = v33;
          if (v34) {
            break;
          }
          continue;
        }
      }

      uint64_t v15 = v32 * v28;
      if ((_DWORD)v20 != 1)
      {
        char v35 = (unint64_t *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8);
        if (*(_DWORD *)(*(void *)(*a3 + 8LL) + 20LL))
        {
          do
            unint64_t v36 = __ldxr(v35);
          while (__stxr(v36 & 0xFF80000000000000LL, v35));
          goto LABEL_64;
        }

        unint64_t v37 = *v35;
        unint64_t v38 = __ldxr(v35);
        if (v38 == v37)
        {
          if (!__stxr(v37 & 0xFF80000000000000LL, v35))
          {
            char v39 = 1;
LABEL_57:
            if ((v39 & 1) != 0) {
              goto LABEL_64;
            }
            while (2)
            {
              unint64_t v40 = __ldxr(v35);
              if (v40 == v38)
              {
                if (!__stxr(v38 & 0xFF80000000000000LL, v35))
                {
                  char v41 = 1;
                  goto LABEL_63;
                }
              }

              else
              {
                __clrex();
              }

              char v41 = 0;
LABEL_63:
              unint64_t v38 = v40;
              if ((v41 & 1) != 0) {
                goto LABEL_64;
              }
              continue;
            }
          }
        }

        else
        {
          __clrex();
        }

        char v39 = 0;
        goto LABEL_57;
      }

LABEL_64:
      int v12 = 0;
      uint64_t v17 = 1LL;
      atomic_store(1u, (unsigned int *)(a1 + 96));
    }

    else
    {
      uint64_t v15 = 0LL;
      BOOL v16 = 0;
      uint64_t v17 = 0LL;
      int v12 = 0;
    }

void sub_1000C2AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unint64_t v3 = va_arg(va1, void);
  sub_1000C1AC8((unint64_t *)va);
  sub_10011E8E0(va1);
  _Unwind_Resume(a1);
}

unint64_t sub_1000C2ADC(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8));
  return v1 >> 62;
}

void sub_1000C2AF8( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  unint64_t v12 = (a3 - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL))
      / (*(void *)(*(void *)(a1 + 8) + 48LL)
  unint64_t v13 = sub_1000C2FA4(a1, v12);
  sub_1000C3014((unint64_t *)(*(void *)(a1 + 72) + 8 * v12), v13, a6);
  if (!*a6 || *(_BYTE *)(*a6 + 344))
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v30 = *(void *)(v14 + 48)
        + (*(void *)(v14 + 48) + 1LL)
        * ((a3 - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v14 + 18))
         / (*(void *)(v14 + 48)
          * (unint64_t)(*(_DWORD *)(v14 + 20) / *(unsigned __int16 *)(v14 + 18))));
    sub_1000D5F88(&v27, a1, v30);
    uint64_t v15 = v27;
    uint64_t v16 = v28;
    if ((a4 & 1) != 0)
    {
      LOBYTE(v27) = 0;
      char v29 = 0;
    }

    else
    {
      uint64_t v17 = (unint64_t *)(*(void *)(v27 + 56) + 16 * v28);
      BOOL v18 = sub_1000DCACC(v17);
      v25[0] = (uint64_t)off_1001969C8;
      v25[1] = (uint64_t)v17;
      BOOL v26 = v18;
      sub_10011E748((uint64_t)&v27, (uint64_t)v25);
      char v29 = 1;
      sub_10011E7BC(v25);
    }

    (*(void (**)(uint64_t *__return_ptr, void, unint64_t, uint64_t))(**(void **)(a1 + 8) + 32LL))( v25,  *(void *)(a1 + 8),  v13,  a5);
    sub_1000C30B4(a6, (unint64_t *)v25);
    sub_1000C1AC8((unint64_t *)v25);
    if (*a6)
    {
      if (!*(_BYTE *)(*a6 + 344))
      {
        if (!*a6 || (unsigned int v19 = atomic_load((unsigned int *)(*a6 + 24)), v19 != 2))
        {
          unint64_t v20 = atomic_load(a6);
          v25[0] = v20;
          uint64_t v21 = *(void *)(a1 + 72);
          do
            unint64_t v22 = __ldaxr((unint64_t *)v25);
          while (__stlxr(0LL, (unint64_t *)v25));
          atomic_store(v22, (unint64_t *)(v21 + 8 * v12));
          v25[0] = (*(void *)(*(void *)(v15 + 56) + 16 * v16 + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(void *)(v15 + 8) + 20LL);
          if (v25[0])
          {
            sub_1000C30F8((uint64_t *)a6, a2, a1, (unint64_t *)&v30, v25);
          }

          else
          {
            uint64_t v24 = sub_1000C316C(*(unsigned int **)(a1 + 8), a2, 1);
            char v23 = 1;
            sub_1000C3298((uint64_t *)a6, a2, a1, (unint64_t *)&v30, &v24, &v23);
          }
        }
      }
    }

    if (v29) {
      sub_10011E7BC(&v27);
    }
  }

void sub_1000C2D44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    sub_10011E7BC(&a14);
  }
  sub_1000C1AC8(v17);
  _Unwind_Resume(a1);
}

unint64_t sub_1000C2D94(void *a1)
{
  uint64_t v1 = *(void *)(*a1 + 8LL);
  return (*(void *)(*a1 + 352LL)
        + (*(void *)(v1 + 48) + *(void *)(v1 + 48) * a1[1])
        / (unint64_t)(*(void *)(v1 + 48) + 1LL)
}

uint64_t sub_1000C2DC4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1 + 32;
  unsigned int v4 = sub_1000973B8(a1 + 32, a2);
  else {
    int v5 = 0;
  }
  uint64_t result = v5 | v4;
  if ((_DWORD)result == 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v8 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"bitmap flag value invalid", 0xFFFFFFEA);
  }

  return result;
}

unint64_t sub_1000C2E48(void *a1)
{
  unint64_t v1 = *(void *)(*a1 + 352LL);
  uint64_t v2 = *(void *)(*a1 + 8LL);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  unint64_t v5 = (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  unint64_t v6 = *(unsigned __int16 *)(v2 + 18);
  return ((2
         * ((v5
                         - ((v5 + v1) / v6 - v1 / v6)
                         / (v3
                          * (unint64_t)(v4 / v6))
                         * v3
                         * v4)
                        / v6)) | (((v4
                                  - v6
                                  + v5
                                  - ((v4 - v6 + v5 + v1) / v6 - v1 / v6)
                                  / (v3
                                   * (unint64_t)(v4 / v6))
                                  * v3
                                  * v4)
                                 / v6) << 33))
       + 0x200000000LL;
}

unint64_t sub_1000C2ECC(void *a1)
{
  return *(void *)(*a1 + 352LL)
       + (*(void *)(*(void *)(*a1 + 8LL) + 48LL) + *(void *)(*(void *)(*a1 + 8LL) + 48LL) * a1[1])
}

unint64_t sub_1000C2EF4(void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  return sub_1000CC334(a1, a2, a3, a4, a5, 0);
}

void *sub_1000C2EFC(void *result, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)(*result + 8LL) + 20LL);
  uint64_t v3 = (unint64_t *)(*(void *)(*result + 56LL) + 16LL * result[1] + 8);
  if (v2 > a2)
  {
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 & 0xFF80000000000000LL, v3));
    return result;
  }

  unint64_t v5 = *v3;
  unint64_t v6 = __ldxr(v3);
  unint64_t v7 = a2 / v2;
  if (v6 != v5)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      unint64_t v8 = __ldxr(v3);
      if (v8 != v6) {
        break;
      }
      if (__stxr(v6 & 0xFF80000000000000LL | v7, v3)) {
        goto LABEL_12;
      }
      int v9 = 1;
LABEL_13:
      unint64_t v6 = v8;
      if (v9) {
        return result;
      }
    }

    __clrex();
LABEL_12:
    int v9 = 0;
    goto LABEL_13;
  }

  if (__stxr(v5 & 0xFF80000000000000LL | v7, v3)) {
    goto LABEL_8;
  }
  return result;
}

unint64_t sub_1000C2FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if ((v3 & (v3 - 1)) != 0)
  {
    char v4 = 0;
    unint64_t v5 = 2 * v3;
    do
    {
      v5 >>= 1;
      ++v4;
    }

    while (v5 != 1);
    unint64_t v3 = 1 << v4;
  }

  unint64_t v6 = *(void *)(v2 + 80);
  if (v3 == 1)
  {
    char v7 = 0;
  }

  else
  {
    char v7 = 0;
    do
    {
      v3 >>= 1;
      ++v7;
    }

    while (v3 != 1);
  }

  return ((*(void *)(a1 + 352) / v6) << v7) | a2;
}

unint64_t *sub_1000C3014@<X0>( unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    unint64_t v6 = (unint64_t *)atomic_load(result);
    sub_1000E1018(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 344))
    {
      uint64_t v7 = *(void *)(v9 + 32);
      *a3 = 0LL;
      if (v7 == a2)
      {
        do
          unint64_t v8 = __ldaxr(&v9);
        while (__stlxr(0LL, &v9));
        atomic_store(v8, a3);
      }
    }

    else
    {
      *a3 = 0LL;
    }

    return sub_1000C1AC8(&v9);
  }

  else
  {
    *a3 = 0LL;
  }

  return result;
}

unint64_t *sub_1000C30B4(unint64_t *a1, unint64_t *a2)
{
  if (a2 != a1)
  {
    do
      unint64_t v3 = __ldaxr(a2);
    while (__stlxr(0LL, a2));
    sub_1000C1AC8(a1);
    atomic_store(v3, a1);
  }

  return a1;
}

void sub_1000C30F8(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_1000C3124( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*v10)
  {
    uint64_t v11 = *(void *)(*v10 + 288);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &a10, v10);
    }
  }

  __cxa_rethrow();
}

void sub_1000C3158(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C316C(unsigned int *a1, uint64_t a2, int a3)
{
  unint64_t v6 = (unint64_t *)(a1 + 2);
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  uint64_t v8 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 16LL))(a1);
  if (a3)
  {
    uint64_t v9 = a1[5];
    v14[0] = &off_10018BBD0;
    v14[1] = a2;
    v14[2] = v9;
    uint64_t v15 = v14;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  uint64_t v10 = sub_1000D46E8(v8, (uint64_t)v14);
  uint64_t v11 = v15;
  if (v15 == v14)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v14;
    goto LABEL_10;
  }

  if (v15)
  {
    uint64_t v12 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  return v10;
}

void sub_1000C325C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000C3298(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
}

void sub_1000C32C4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*v10)
  {
    uint64_t v11 = *(void *)(*v10 + 288);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &a10, v10);
    }
  }

  __cxa_rethrow();
}

void sub_1000C32F8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C330C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)(*(void *)(a3 + 56) + 16 * a4 + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(a3 + 8) + 20LL))
  {
    return 0LL;
  }

  unint64_t v8 = sub_1000C316C(*(unsigned int **)(a1 + 8), a2, 0);
  if (v8)
  {
    uint64_t v9 = *(void *)(a3 + 56) + 16 * a4;
    unint64_t v10 = *(void *)(v9 + 8);
    if ((v10 & 0x7FFFFFFFFFFFFFLL) == 0)
    {
      uint64_t v11 = (unint64_t *)(v9 + 8);
      unint64_t v12 = v8 / *(unsigned int *)(*(void *)(a3 + 8) + 20LL);
      while (1)
      {
        unint64_t v13 = __ldxr(v11);
        if (v13 != v10) {
          break;
        }
        if (__stxr(v10 & 0xFF80000000000000LL | v12, v11)) {
          goto LABEL_9;
        }
        char v14 = 1;
LABEL_10:
        if ((v14 & 1) != 0) {
          return 0LL;
        }
        unint64_t v10 = v13;
        if ((v13 & 0x7FFFFFFFFFFFFFLL) != 0) {
          goto LABEL_12;
        }
      }

      __clrex();
LABEL_9:
      char v14 = 0;
      goto LABEL_10;
    }

LABEL_12:
    sub_1000C33E8(*(unint64_t **)(a1 + 8), v8, a2);
    return 0LL;
  }

  return 4294967268LL;
}

    if ((v28 & 2) != 0) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = v8 + 1;
    }
    unint64_t v12 = v11 * *(unsigned __int16 *)(a1 + 18);
    sub_1000C446C(a1, a2, v12 / *(void *)(a1 + 80), 0, 1, &v26);
    if (v26 && *(_BYTE *)(v26 + 520))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      uint64_t v21 = std::generic_category();
      exception[1] = 4294967291LL;
      exception[2] = v21;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "Can't load table to get extents";
    }

    if (v26 && !*(_BYTE *)(v26 + 520))
    {
      if (*(_BYTE *)(v26 + 400)) {
        uint64_t v15 = v26 + 40;
      }
      else {
        uint64_t v15 = 0LL;
      }
      unint64_t v13 = sub_1000CE304(v15, a2, (uint64_t)&v27, (uint64_t)&v29);
    }

    else
    {
      unint64_t v13 = 0LL;
      char v14 = (*(void *)(a1 + 80) + *(void *)(a1 + 80) * (v12 / *(void *)(a1 + 80)) + 1)
          / *(unsigned __int16 *)(a1 + 18);
      if (v14 >= v9) {
        char v14 = v9;
      }
      char v29 = v11;
      uint64_t v30 = v14;
      char v31 = 2;
    }

    if ((_DWORD)v13 == (_DWORD)v7)
    {
LABEL_36:
      *((void *)&v32 + 1) = v30;
      unint64_t v33 = 2;
      unint64_t v22 = v27;
      char v23 = v28;
      sub_10000D72C((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v24);
      uint64_t v27 = v24;
      LOBYTE(v2_Block_object_dispose((const void *)(v2 - 120), 8) = v25;
      BOOL v18 = 1;
      unint64_t v7 = v13;
      goto LABEL_40;
    }

    if (v33)
    {
      if (v33 == 3)
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
      }

      else
      {
        uint64_t v16 = *((void *)&v32 + 1);
        uint64_t v17 = v32;
      }
    }

    else
    {
      uint64_t v16 = *((void *)&v32 + 1);
      uint64_t v17 = v32;
      if ((unint64_t)v32 < *((void *)&v32 + 1) && (unint64_t)(v32 + 1) < *((void *)&v32 + 1))
      {
LABEL_35:
        goto LABEL_39;
      }
    }

    if (!qword_1001A3B40) {
      goto LABEL_36;
    }
LABEL_39:
    BOOL v18 = 0;
LABEL_40:
    sub_1000C0F7C(&v26);
  }

  while ((v18 & 1) != 0);
  *(_OWORD *)a4 = v32;
  *(_BYTE *)(a4 + 16) = v33;
  return v7;
}

void *sub_1000C33E8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1);
  v11[0] = &off_10018BC60;
  v11[1] = a3;
  unint64_t v12 = v11;
  sub_1000D5274(v6, a2, (uint64_t)v11);
  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t v8 = 4LL;
    uint64_t result = v11;
    goto LABEL_5;
  }

  if (v12)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }

  uint64_t v9 = a1 + 1;
  do
    unint64_t v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  return result;
}

void sub_1000C34B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t *sub_1000C34EC( uint64_t a1, uint64_t a2, void *a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*a3 + 8LL);
  sub_1000C2AF8( a1,  a2,  (*(void *)(*a3 + 352LL)
   + (*(void *)(v11 + 48) + *(void *)(v11 + 48) * a3[1])
   / (unint64_t)(*(void *)(v11 + 48) + 1LL)
   * *(unsigned int *)(v11 + 20))
  / *(unsigned __int16 *)(v11 + 18),
    0,
    1LL,
    (unint64_t *)&v31);
  if (!(void)v31 || *(_BYTE *)(v31 + 344))
  {
    *(void *)&__int128 v34 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((void *)&v34 + 1) = 47LL;
    int v35 = 16;
    sub_1000C38C4(&v36, &v34);
    sub_10000552C(v38, (uint64_t)"Can't load bitmap while setting range", 37LL);
    sub_1000C396C((uint64_t)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v28 = std::generic_category();
    exception[1] = 5LL;
    exception[2] = v28;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Can't load bitmap while setting range";
  }

  BOOL v12 = (a6 & 0xFF00000000LL) == 0 || (_DWORD)a6 == 3;
  char v13 = v12;
  if (!v12)
  {
    if (*(_BYTE *)(v31 + 224)) {
      uint64_t v14 = v31 + 40;
    }
    else {
      uint64_t v14 = 0LL;
    }
    unint64_t v36 = sub_1000C2E48(a3);
    sub_1000C39AC(v14, a1, (unsigned int *)&v36, a6);
  }

  if ((void)v31)
  {
    if (*(_BYTE *)(v31 + 224)) {
      uint64_t v15 = v31 + 40;
    }
    else {
      uint64_t v15 = 0LL;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  sub_1000C39AC(v15, a1, a4, a5);
  uint64_t result = sub_1000C1AC8((unint64_t *)&v31);
  if ((v13 & 1) != 0) {
    return result;
  }
  uint64_t v17 = *(void *)(*a3 + 8LL);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = *(void *)(v18 + 48);
  sub_1000D5F88( &v36,  a1,  v19 + (v19 + 1)
  * (((*(void *)(*a3 + 352LL)
     + (*(void *)(v17 + 48) + *(void *)(v17 + 48) * a3[1])
     / (unint64_t)(*(void *)(v17 + 48) + 1LL)
     * *(unsigned int *)(v17 + 20))
    / *(unsigned __int16 *)(v17 + 18)
    - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v18 + 18))
   / (v19
    * (unint64_t)(*(_DWORD *)(v18 + 20) / *(unsigned __int16 *)(v18 + 18)))));
  v33[0] = v36;
  v33[1] = v37;
  unint64_t v20 = (unint64_t *)(*(void *)(v36 + 56) + 16 * v37);
  BOOL v21 = sub_1000DCACC(v20);
  *(void *)&__int128 v34 = off_1001969C8;
  *((void *)&v34 + 1) = v20;
  LOBYTE(v35) = v21;
  if (!v21)
  {
    *(void *)&__int128 v31 = "di_asif::details::table::set_entry_bitmap_range(ContextASIF &, data_entry_t &, const bits_range_t &, data_entry_t::flags, std::optional<data_entry_t::flags>)";
    *((void *)&v31 + 1) = 47LL;
    int v32 = 16;
    sub_1000C3AC4(&v36, &v31);
    sub_10000552C(v38, (uint64_t)"Couldn't lock entry ", 20LL);
    sub_1000C3A30((uint64_t)&v36, v33);
    sub_1000C3B6C((uint64_t)&v36);
    char v29 = __cxa_allocate_exception(0x40uLL);
    *char v29 = &off_100196FC8;
    uint64_t v30 = std::generic_category();
    v29[1] = 4294967282LL;
    v29[2] = v30;
    *((_BYTE *)v29 + 24) = 0;
    *((_BYTE *)v29 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v29[7] = "Couldn't lock entry";
  }

  unint64_t v22 = (unint64_t *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8);
  unint64_t v23 = *v22;
  unint64_t v24 = __ldaxr(v22);
  if (v24 != v23)
  {
    __clrex();
LABEL_25:
    while (1)
    {
      unint64_t v25 = __ldaxr(v22);
      if (v25 != v24) {
        break;
      }
      if (__stlxr(v24 | 0xC000000000000000LL, v22)) {
        goto LABEL_29;
      }
      int v26 = 1;
LABEL_30:
      unint64_t v24 = v25;
      if (v26) {
        goto LABEL_31;
      }
    }

    __clrex();
LABEL_29:
    int v26 = 0;
    goto LABEL_30;
  }

  if (__stlxr(v23 | 0xC000000000000000LL, v22)) {
    goto LABEL_25;
  }
LABEL_31:
  atomic_store(1u, (unsigned int *)(a1 + 96));
  return (unint64_t *)sub_10011E7BC(&v34);
}

void sub_1000C386C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_1000C38C4(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E2A14((uint64_t)a1, a2);
  *a1 = off_10018BCE8;
  a1[45] = &off_10018BDE8;
  a1[46] = &off_10018BE10;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018BCE8;
  a1[45] = off_10018BD70;
  a1[46] = off_10018BD98;
  return a1;
}

void sub_1000C3948(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C396C(uint64_t a1)
{
  return a1;
}

void *sub_1000C39AC(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  LOWORD(v11[0]) = a4 & 1 | (((a4 >> 1) & 1) << 8);
  uint64_t result = (void *)sub_100096C30(a1 + 32, v6, v7, (unsigned __int8 *)v11);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 113) = 1;
    uint64_t result = sub_1000D5F88(v11, a2, *(void *)a1);
    uint64_t v9 = (unint64_t *)(*(void *)(v11[0] + 56LL) + 16LL * v11[1] + 8);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 | 0x8000000000000000LL, v9));
  }

  return result;
}

uint64_t sub_1000C3A30(uint64_t a1, void *a2)
{
  unint64_t v4 = sub_10000552C((void *)(a1 + 360), (uint64_t)"table entry map@", 16LL);
  unint64_t v5 = (void *)std::ostream::operator<<( v4,  *(void *)(*a2 + 352LL)
                 + a2[1]
                 / (unint64_t)(*(void *)(*(void *)(*a2 + 8LL) + 48LL) + 1LL)
                 * *(void *)(*(void *)(*a2 + 8LL) + 48LL)
                 * *(unsigned int *)(*(void *)(*a2 + 8LL) + 20LL));
  unint64_t v6 = sub_10000552C(v5, (uint64_t)" = offset = ", 12LL);
  std::ostream::operator<<( v6,  (*(void *)(*(void *)(*a2 + 56LL) + 16LL * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
  * *(unsigned int *)(*(void *)(*a2 + 8LL) + 20LL));
  return a1;
}

void *sub_1000C3AC4(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E2A90((uint64_t)a1, a2);
  *a1 = off_10018BF08;
  a1[45] = &off_10018C008;
  a1[46] = &off_10018C030;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018BF08;
  a1[45] = off_10018BF90;
  a1[46] = off_10018BFB8;
  return a1;
}

void sub_1000C3B48(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C3B6C(uint64_t a1)
{
  return a1;
}

void *sub_1000C3BAC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1000D5F88(v14, a1, a2);
  unint64_t v6 = *(unsigned int *)(*(void *)(v14[0] + 8LL) + 20LL);
  unint64_t v7 = (unint64_t *)(*(void *)(v14[0] + 56LL) + 16LL * v14[1] + 8);
  if (v6 > a3)
  {
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 & 0xFF80000000000000LL, v7));
    goto LABEL_14;
  }

  unint64_t v9 = *v7;
  unint64_t v10 = __ldxr(v7);
  unint64_t v11 = a3 / v6;
  if (v10 != v9)
  {
    __clrex();
LABEL_8:
    while (1)
    {
      unint64_t v12 = __ldxr(v7);
      if (v12 != v10) {
        break;
      }
      if (__stxr(v10 & 0xFF80000000000000LL | v11, v7)) {
        goto LABEL_12;
      }
      int v13 = 1;
LABEL_13:
      unint64_t v10 = v12;
      if (v13) {
        goto LABEL_14;
      }
    }

    __clrex();
LABEL_12:
    int v13 = 0;
    goto LABEL_13;
  }

  if (__stxr(v9 & 0xFF80000000000000LL | v11, v7)) {
    goto LABEL_8;
  }
LABEL_14:
  atomic_store(1u, (unsigned int *)(a1 + 96));
  return result;
}

__n128 sub_1000C3C94@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v13 = v15[3];
  *(_OWORD *)(a7 + sub_100006224(v6 - 32) = v15[2];
  *(_OWORD *)(a7 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = v13;
  *(_OWORD *)(a7 + 64) = v15[4];
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a7 = v15[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

void sub_1000C3D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  v18[0] = off_10018B4F8;
  v18[1] = v3;
  (*(void (**)(void))(**(void **)(v3 + 16) + 72LL))(*(void *)(v3 + 16));
  if (*(_BYTE *)(a1 + 16)) {
    goto LABEL_41;
  }
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 3680);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 3680));
    while (!*(_BYTE *)(a1 + 16) && !*(_BYTE *)(a1 + 3672))
      std::condition_variable::wait((std::condition_variable *)(a1 + 3624), &__lk);
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
    while (!*(_BYTE *)(a1 + 16) && v4.__d_.__rep_ > std::chrono::steady_clock::now().__d_.__rep_)
    {
      v5.__d_.__rep_ = v4.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v6.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0LL;
          goto LABEL_18;
        }

        if (v6.__d_.__rep_ < 1)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_18;
          }

void sub_1000C409C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1000C40C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 - 120) = off_10018B4F8;
  sub_100006224(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C40EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *a2 = off_10018B4F8;
  a2[1] = v2;
  return (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 72LL))(*(void *)(v2 + 16));
}

uint64_t sub_1000C411C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 8));
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  uint64_t v5 = *(void *)(*(void *)(a1 + 152) + 8 * a3) * v4;
  uint64_t v26 = v5;
  if (v5 && 3 * v5 > 4 * v3 * v4)
  {
    unint64_t v9 = (unint64_t *)(*(void *)(a1 + 128) + 8 * a3);
    sub_1000CD2B0(v9, a3, (unint64_t *)&v25);
    if (v25 && !*(_BYTE *)(v25 + 520))
    {
      uint64_t v11 = *(void *)(v25 + 464);
      if (v11)
      {
        uint64_t v27 = v25;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &v27, &v25);
      }

      sub_1000CD2B0(v9, a3, (unint64_t *)&v27);
      sub_1000CD184((unint64_t *)&v25, (unint64_t *)&v27);
      sub_1000C0F7C((unint64_t *)&v27);
      if (v25)
      {
        if (!*(_BYTE *)(v25 + 520))
        {
LABEL_15:
          (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
LABEL_16:
          uint64_t v10 = 4294967248LL;
LABEL_17:
          sub_1000C0F7C((unint64_t *)&v25);
          return v10;
        }
      }
    }

    sub_1000CCF9C(a1 + 280, a3, 1, (unint64_t *)&v27);
    sub_1000CD184((unint64_t *)&v25, (unint64_t *)&v27);
    sub_1000C0F7C((unint64_t *)&v27);
    if (!v25 || *(_BYTE *)(v25 + 520) || (unsigned int v13 = atomic_load((unsigned int *)(v25 + 24)), v13 == 2))
    {
      if (!v25 || *(_BYTE *)(v25 + 520)) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }

    uint64_t v14 = valloc(*(unsigned int *)(a1 + 20));
    if (!v14)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v24 = std::bad_alloc::bad_alloc(exception);
    }

    v29[0] = &off_10018C340;
    uint64_t v30 = v29;
    uint64_t v27 = (uint64_t)v14;
    sub_100043B68((uint64_t)&v28, (uint64_t)v29);
    unint64_t v15 = v30;
    if (v30 == v29)
    {
      uint64_t v16 = 4LL;
      unint64_t v15 = v29;
    }

    else
    {
      if (!v30)
      {
LABEL_26:
        unint64_t v17 = *(unsigned int *)(a1 + 20);
        uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40LL))(*(void *)(a2 + 16));
        if (v18 - v26 >= v17) {
          uint64_t v19 = v17;
        }
        else {
          uint64_t v19 = v18 - v26;
        }
        uint64_t v10 = sub_1000C4AA4((unsigned int *)a1, a2, v27, v19, v26);
        uint64_t v21 = v20;
        if (v25)
        {
          uint64_t v22 = *(void *)(v25 + 464);
          if (v22)
          {
            v29[0] = v25;
            (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v22 + 48LL))(v22, v29, &v25);
          }
        }

        if ((v10 & 0x8000000000000000LL) == 0)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, *(void *)(a1 + 80) * a3, v21);
          std::mutex::lock((std::mutex *)(a1 + 3792));
          sub_1000C25FC((void *)(a1 + 3744), &v26);
          atomic_store(1u, (unsigned int *)(a1 + 3592));
          std::mutex::unlock((std::mutex *)(a1 + 3792));
          uint64_t v10 = 0LL;
        }

        sub_100043BCC(&v27);
        goto LABEL_17;
      }

      uint64_t v16 = 5LL;
    }

    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_26;
  }

  return 4294967274LL;
}

void sub_1000C43FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

unint64_t *sub_1000C446C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  __n128 result = sub_1000CD2B0((unint64_t *)(*(void *)(a1 + 128) + 8 * a3), a3, a6);
  if (!*a6 || *(_BYTE *)(*a6 + 520))
  {
    sub_1000CCE14(a1, a2, a3, *(void *)(*(void *)(a1 + 152) + 8 * a3) * *(unsigned int *)(a1 + 20), a4, a5, &v16);
    sub_1000CD184(a6, &v16);
    __n128 result = sub_1000C0F7C(&v16);
    if (*a6 && !*(_BYTE *)(*a6 + 520))
    {
      unint64_t v13 = atomic_load(a6);
      unint64_t v16 = v13;
      uint64_t v14 = *(void *)(a1 + 128);
      do
        unint64_t v15 = __ldaxr(&v16);
      while (__stlxr(0LL, &v16));
      atomic_store(v15, (unint64_t *)(v14 + 8 * a3));
    }
  }

  return result;
}

void sub_1000C4550(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4568(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load((unint64_t *)(*(void *)(a1 + 8) + 8LL));
  size_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 20LL);
  std::chrono::system_clock::time_point v6 = valloc(v5);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v17 = std::bad_alloc::bad_alloc(exception);
  }

  v20[0] = &off_10018C340;
  uint64_t v22 = v20;
  uint64_t v25 = (uint64_t)v6;
  sub_100043B68((uint64_t)&v26, (uint64_t)v20);
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = v22;
  if (v22 == v20)
  {
    uint64_t v9 = 4LL;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = v20;
    goto LABEL_6;
  }

  if (v22)
  {
    uint64_t v9 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }

  sub_1000C5100(a1, v7, (uint64_t)v20);
  char v10 = 0;
  uint64_t v11 = v4 * v5;
  while ((v20[0] != v23 || v20[1] != v24) && !*(_BYTE *)(*(void *)(a1 + 8) + 16LL))
  {
    int v12 = sub_1000C4D74(a1, a2, &v21, v11, v25);
    sub_1000C5184(a1, &v21, (uint64_t)v18);
    for (BOOL i = v12 == 0; ; BOOL i = v14 != 0)
    {
      v10 |= i;
      if (v18[0] == v19[3] && v18[1] == v19[4]) {
        break;
      }
      if (*(_BYTE *)(*(void *)(a1 + 8) + 16LL)) {
        break;
      }
      int v14 = sub_1000C48B0(a1, a2, v19, v11, v25);
      sub_1000C20C0((uint64_t)v18);
    }

    sub_1000C1FA0((uint64_t)v20);
  }

  sub_100043BCC(&v25);
  return v10 & 1;
}

void sub_1000C4764(_Unwind_Exception *a1)
{
}

void *sub_1000C478C(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E2B0C((uint64_t)a1, a2);
  *a1 = off_10018C128;
  a1[45] = &off_10018C228;
  a1[46] = &off_10018C250;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018C128;
  a1[45] = off_10018C1B0;
  a1[46] = off_10018C1D8;
  return a1;
}

void sub_1000C4810(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C4834(uint64_t a1)
{
  return a1;
}

void sub_1000C4874(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(_BYTE *)(a1 + 3672) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
}

uint64_t sub_1000C48B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *(void *)(*a3 + 56LL);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*a3 + 8LL) + 20LL);
  uint64_t v9 = (unint64_t *)(v6 + 16 * v5);
  if (*v9)
  {
LABEL_4:
    char v16 = 0;
    int v14 = off_1001969E8;
    unint64_t v15 = v9;
    uint64_t v17 = 0LL;
    (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
    sub_10011E8E0(&v14);
    return 4294967282LL;
  }

  while (1)
  {
    unint64_t v12 = __ldaxr(v9);
    if (!v12) {
      break;
    }
    __clrex();
LABEL_10:
    if (v12) {
      goto LABEL_4;
    }
  }

  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9)) {
    goto LABEL_10;
  }
  char v16 = 1;
  int v14 = off_1001969E8;
  unint64_t v15 = v9;
  uint64_t v17 = 0LL;
  uint64_t v13 = (*(void *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
      * *(unsigned int *)(*(void *)(*a3 + 8LL) + 20LL);
  uint64_t v10 = sub_1000C4A14(a1, a2, a3, v13, a5);
  sub_10011E8E0(&v14);
  if ((v10 & 0x80000000) == 0)
  {
    atomic_store(1u, (unsigned int *)(a1 + 96));
    sub_1000C2590(a1, v13);
  }

  return v10;
}

void sub_1000C4A00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000C4A14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return 0LL;
  }
  unint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 20LL);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40LL))(*(void *)(a2 + 16));
  if (v11 - a4 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11 - a4;
  }
  uint64_t result = sub_1000C4AA4(*(unsigned int **)(a1 + 8), a2, a5, v12, a4);
  if ((result & 0x8000000000000000LL) == 0)
  {
    sub_1000C2EFC(a3, v14);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000C4AA4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v32 = a3;
  unint64_t v33 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  char v37 = 0;
  int v13 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v32);
  if (v13 != a4)
  {
    *(void *)&__int128 v27 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((void *)&v27 + 1) = 46LL;
    int v28 = 16;
    sub_1000CD350(v29, &v27);
    sub_10000552C(&v30, (uint64_t)"Can't read for defrag", 21LL);
    std::ostream::~ostream(&v30, off_10018DE10);
    sub_1000DD354((uint64_t)v29);
    std::ios::~ios(v31);
    if (v13 < 0) {
      int v22 = v13;
    }
    else {
      int v22 = -5;
    }
    goto LABEL_21;
  }

  uint64_t v14 = sub_1000C316C(a1, a2, 0);
  if (!v14)
  {
    a4 = -28LL;
    goto LABEL_23;
  }

  unint64_t v15 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  if (v15)
  {
    char v16 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  uint64_t v18 = v33;
  uint64_t v32 = a3;
  unint64_t v33 = v15;
  if (v18)
  {
    uint64_t v19 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  uint64_t v34 = a4;
  uint64_t v35 = v14;
  uint64_t v36 = a4;
  char v37 = 0;
  int v21 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 80LL))(*(void *)(a2 + 16), &v32);
  if (v21 != a4)
  {
    *(void *)&__int128 v27 = "di_asif::details::dir_base::move_realloc_chunk(ContextASIF &, char *, size_t, uint64_t)";
    *((void *)&v27 + 1) = 46LL;
    int v28 = 16;
    sub_1000CD438(v29, &v27);
    sub_10000552C(&v30, (uint64_t)"Can't write table for defrag", 28LL);
    std::ostream::~ostream(&v30, off_10018E030);
    sub_1000DD900((uint64_t)v29);
    std::ios::~ios(v31);
    sub_1000C33E8((unint64_t *)a1, v14, a2);
    if (v21 < 0) {
      int v22 = v21;
    }
    else {
      int v22 = -5;
    }
LABEL_21:
    a4 = -(uint64_t)-v22;
  }

LABEL_23:
  uint64_t v23 = v33;
  if (v33)
  {
    uint64_t v24 = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  return a4;
}

      v11 += v15;
      v5 -= v15;
      if (!v5) {
        return;
      }
    }

    int v13 = v11 + v5;
LABEL_11:
    if (v13 - v11 >= v5) {
      unint64_t v15 = v5;
    }
    else {
      unint64_t v15 = v13 - v11;
    }
    sub_100020B9C((int *)&v29, 0);
    uint64_t v30 = 0uLL;
    *(void *)&__int128 v31 = v11;
    *((void *)&v31 + 1) = v15;
    uint64_t v32 = v11 - a2;
    unint64_t v33 = v15;
    unint64_t v17 = a4[1];
    uint64_t v18 = *a4 + (v17 << 6);
    if (v17 == a4[2])
    {
      sub_1000FE1C0(a4, v18, 1LL, (uint64_t)&v29, &v34);
    }

    else
    {
      *(_DWORD *)uint64_t v18 = v29;
      uint64_t v19 = v30;
      unint64_t v20 = v31;
      int v21 = v32;
      *(void *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 40) = v21;
      *(_OWORD *)(v18 + 24) = v20;
      *(_OWORD *)(v18 + _Block_object_dispose((const void *)(v2 - 120), 8) = v19;
      ++a4[1];
    }

    goto LABEL_23;
  }

void sub_1000C4D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000C4D74(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *(void *)(*a3 + 56LL);
  uint64_t v7 = (*(void *)(v6 + 16 * v5 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(*a3 + 8LL) + 20LL);
  uint64_t v9 = (unint64_t *)(v6 + 16 * v5);
  if (*v9)
  {
LABEL_4:
    char v27 = 0;
    unint64_t v25 = off_1001969E8;
    uint64_t v26 = v9;
    uint64_t v28 = 0LL;
    (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
    sub_10011E8E0(&v25);
    return 4294967274LL;
  }

  while (1)
  {
    unint64_t v15 = __ldaxr(v9);
    if (!v15) {
      break;
    }
    __clrex();
LABEL_10:
    if (v15) {
      goto LABEL_4;
    }
  }

  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v9)) {
    goto LABEL_10;
  }
  char v27 = 1;
  unint64_t v25 = off_1001969E8;
  uint64_t v26 = v9;
  uint64_t v28 = 0LL;
  uint64_t v16 = *(void *)(a1 + 8);
  unint64_t v17 = *(unsigned __int16 *)(v16 + 18);
  unint64_t v18 = ((*(void *)(*a3 + 352LL)
        + a3[1]
        / (unint64_t)(*(void *)(*(void *)(*a3 + 8LL) + 48LL) + 1LL)
        * *(void *)(*(void *)(*a3 + 8LL) + 48LL)
        * *(unsigned int *)(*(void *)(*a3 + 8LL) + 20LL))
       / v17
       - *(void *)(a1 + 352) / v17)
      / (*(void *)(v16 + 48)
       * (unint64_t)(*(_DWORD *)(v16 + 20) / v17));
  unint64_t v19 = sub_1000C2FA4(a1, v18);
  sub_1000C3014((unint64_t *)(*(void *)(a1 + 72) + 8 * v18), v19, &v24);
  if (!v24 || *(_BYTE *)(v24 + 344)) {
    goto LABEL_14;
  }
  uint64_t v20 = *(void *)(v24 + 288);
  if (v20)
  {
    unint64_t v29 = v24;
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(void *)v20 + 48LL))(v20, &v29, &v24);
  }

  sub_1000C3014((unint64_t *)(*(void *)(a1 + 72) + 8 * v18), v19, &v29);
  sub_1000C30B4(&v24, &v29);
  sub_1000C1AC8(&v29);
  if (!v24 || *(_BYTE *)(v24 + 344))
  {
LABEL_14:
    (*(void (**)(unint64_t *__return_ptr, void, unint64_t, uint64_t))(**(void **)(a1 + 8)
                                                                                              + 32LL))( &v29,  *(void *)(a1 + 8),  v19,  1LL);
    sub_1000C30B4(&v24, &v29);
    sub_1000C1AC8(&v29);
    if (!v24 || *(_BYTE *)(v24 + 344) || (unsigned int v22 = atomic_load((unsigned int *)(v24 + 24)), v22 == 2))
    {
      if (v24 && !*(_BYTE *)(v24 + 344))
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
        uint64_t v10 = 4294967248LL;
      }

      else
      {
        uint64_t v10 = 4294967274LL;
      }
    }

    else
    {
      uint64_t v7 = (*(void *)(*(void *)(*a3 + 56LL) + 16LL * a3[1] + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(*a3 + 8LL) + 20LL);
      uint64_t v10 = sub_1000C4A14(a1, a2, a3, v7, a5);
    }

    if (v24)
    {
      if (!*(_BYTE *)(v24 + 344))
      {
        uint64_t v23 = *(void *)(v24 + 288);
        if (v23)
        {
          unint64_t v29 = v24;
          (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(void *)v23 + 48LL))( v23,  &v29,  &v24);
        }
      }
    }

    int v21 = 1;
  }

  else
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
    int v21 = 0;
    uint64_t v10 = 4294967274LL;
  }

  sub_1000C1AC8(&v24);
  sub_10011E8E0(&v25);
  if (!v21) {
    return 4294967248LL;
  }
  if (!(_DWORD)v10)
  {
    atomic_store(1u, (unsigned int *)(a1 + 96));
    sub_1000C2590(a1, v7);
  }

  return v10;
}

void sub_1000C50C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
}

uint64_t sub_1000C5100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 352);
  unint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80LL) + v5;
  if (v5 >= v6)
  {
    char v8 = 0;
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = sub_1000C1F34(a1, *(void *)(a1 + 352));
    unint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80LL) + *(void *)(a1 + 352);
    char v8 = 1;
  }

  *(void *)a3 = a1;
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = a2;
  *(_BYTE *)(a3 + sub_100006224(v6 - 32) = v8;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = v6;
  *(void *)(a3 + 56) = 0LL;
  *(_BYTE *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_1000C5184@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(void *)(*a2 + 352LL)
     + a2[1]
     / (unint64_t)(*(void *)(*(void *)(*a2 + 8LL) + 48LL) + 1LL)
     * *(void *)(*(void *)(*a2 + 8LL) + 48LL)
     * *(unsigned int *)(*(void *)(*a2 + 8LL) + 20LL);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 352) + *(void *)(v7 + 80);
  if (v6 >= v8)
  {
    uint64_t v12 = 0LL;
    unint64_t v11 = 0LL;
    char v17 = 0;
    unint64_t v16 = *(void *)(*a2 + 352LL)
        + a2[1]
        / (unint64_t)(*(void *)(*(void *)(*a2 + 8LL) + 48LL) + 1LL)
        * *(void *)(*(void *)(*a2 + 8LL) + 48LL)
        * *(unsigned int *)(*(void *)(*a2 + 8LL) + 20LL);
  }

  else
  {
    uint64_t v10 = sub_1000C2064(a1, v6);
    unint64_t v3 = a2;
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFF00LL;
    uint64_t v12 = v10;
    uint64_t v13 = *(void *)(*a2 + 8LL);
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = *(unsigned int *)(v13 + 20);
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v16 = *(void *)(*a2 + 352LL) + a2[1] / (unint64_t)(v14 + 1) * v14 * v15;
    unint64_t v8 = *(void *)(a1 + 352) + *(void *)(v7 + 80);
    char v17 = 1;
  }

  unsigned int v18 = *(unsigned __int16 *)(v7 + 18);
  unsigned int v19 = *(_DWORD *)(v7 + 20) / v18;
  uint64_t v20 = *(void *)(v7 + 48);
  unint64_t v21 = v16 + v18 * (unint64_t)v19 * v20;
  if (v21 >= v8)
  {
    char v23 = 0;
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = sub_1000C2064(a1, v16 + v18 * (unint64_t)v19 * v20);
    char v23 = 1;
  }

  *(void *)a3 = a1;
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v6;
  *(void *)(a3 + 16) = v11 | v12;
  *(void *)(a3 + 24) = v3;
  *(_BYTE *)(a3 + sub_100006224(v6 - 32) = v17;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = v21;
  *(void *)(a3 + 56) = result;
  *(void *)(a3 + 64) = a2;
  *(_BYTE *)(a3 + 72) = v23;
  return result;
}

uint64_t sub_1000C52B8(uint64_t a1)
{
  *(void *)a1 = off_10018B800;
  uint64_t v2 = (std::mutex *)(a1 + 3680);
  std::mutex::lock((std::mutex *)(a1 + 3680));
  *(_BYTE *)(a1 + 16) = 1;
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 3624));
  std::mutex::unlock(v2);
  std::thread::join((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3792));
  sub_1000C1944((void *)(a1 + 3744));
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 3624));
  std::thread::~thread((std::thread *)(a1 + 3616));
  std::mutex::~mutex((std::mutex *)(a1 + 3528));
  sub_1000E35BC(a1 + 2080);
  sub_1000E2B88(a1 + 280);
  sub_10000A494(a1 + 248, *(void **)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 184));
  unint64_t v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }

  unint64_t v5 = *(void **)(a1 + 112);
  if (v5 == (void *)(a1 + 88))
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = (void *)(a1 + 88);
    goto LABEL_9;
  }

  if (v5)
  {
    uint64_t v6 = 5LL;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return a1;
}

uint64_t sub_1000C53C8(uint64_t a1)
{
  return a1;
}

void sub_1000C5400(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000C52B8(a1);
  operator delete(v1);
}

__n128 sub_1000C5414@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8 = v10[3];
  *(_OWORD *)(a4 + sub_100006224(v6 - 32) = v10[2];
  *(_OWORD *)(a4 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = v8;
  *(_OWORD *)(a4 + 64) = v10[4];
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a4 = v10[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

void sub_1000C54A4(void *a1, uint64_t a2, uint64_t a3)
{
  __int128 v43 = v39;
  if ((*(void *)(*(void *)(v39 + 56) + 16LL * *((void *)&v39 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(v39 + 8) + 20LL))
  {
    sub_1000C5184((uint64_t)a1, &v43, (uint64_t)&v39);
    __int128 v36 = v39;
    __int128 v37 = v40;
    uint64_t v38 = v41;
    while (v36 != v42)
    {
      unint64_t v5 = atomic_load((unint64_t *)(*(void *)(v37 + 56) + 16LL * *((void *)&v37 + 1) + 8));
      if (v5 >> 62 == 3) {
        return;
      }
      sub_1000C20C0((uint64_t)&v36);
    }

    if ((*(void *)(*(void *)(v43 + 56) + 16LL * *((void *)&v43 + 1) + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(v43 + 8) + 20LL))
    {
      __int128 v36 = v39;
      if (v38 == v41)
      {
        if ((_BYTE)v38) {
          *((void *)&v37 + 1) = *((void *)&v40 + 1);
        }
      }

      else if ((_BYTE)v38)
      {
        LOBYTE(v3_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      }

      else
      {
        __int128 v37 = v40;
        LOBYTE(v3_Block_object_dispose((const void *)(v2 - 120), 8) = 1;
      }

      uint64_t v33 = 0LL;
      unint64_t v34 = 0LL;
      unint64_t v35 = 0LL;
      while (v36 != v42)
      {
        uint64_t v6 = (unint64_t *)(*(void *)(v37 + 56) + 16LL * *((void *)&v37 + 1));
        do
        {
          if (!*v6)
          {
            do
            {
              unint64_t v7 = __ldaxr(v6);
              if (v7)
              {
                __clrex();
              }

              else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v6))
              {
                char v8 = 1;
                goto LABEL_25;
              }
            }

            while (!v7);
          }
        }

        while ((sub_1000DCB58(v6, 1) & 1) != 0);
        char v8 = 0;
LABEL_25:
        char v31 = v8;
        unint64_t v29 = (void **)off_1001969E8;
        uint64_t v30 = v6;
        uint64_t v32 = 0LL;
        uint64_t v9 = (void *)v34;
        if (v34 >= v35)
        {
          uint64_t v10 = sub_1000D6620(&v33, (uint64_t)&v29);
        }

        else
        {
          sub_10011E748(v34, (uint64_t)&v29);
          *uint64_t v9 = off_1001969E8;
          v9[3] = v32;
          uint64_t v10 = (uint64_t)(v9 + 4);
        }

        unint64_t v34 = v10;
        sub_10011E8E0(&v29);
        unint64_t v11 = atomic_load((unint64_t *)(*(void *)(v37 + 56) + 16LL * *((void *)&v37 + 1) + 8));
        if (v11 >> 62 == 3) {
          goto LABEL_54;
        }
        sub_1000C20C0((uint64_t)&v36);
      }

      uint64_t v12 = (unint64_t *)(*(void *)(v43 + 56) + 16LL * *((void *)&v43 + 1));
      if ((v12[1] & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(*(void *)(v43 + 8) + 20LL))
      {
        do
        {
          if (!*v12)
          {
            do
            {
              unint64_t v13 = __ldaxr(v12);
              if (v13)
              {
                __clrex();
              }

              else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v12))
              {
                char v14 = 1;
                goto LABEL_40;
              }
            }

            while (!v13);
          }
        }

        while ((sub_1000DCB58(v12, 1) & 1) != 0);
        char v14 = 0;
LABEL_40:
        char v31 = v14;
        unint64_t v29 = (void **)off_1001969E8;
        uint64_t v30 = v12;
        uint64_t v32 = 0LL;
        __int128 v15 = v43;
        uint64_t v16 = *(void *)(v43 + 8);
        uint64_t v17 = *(unsigned int *)(v16 + 20);
        if ((*(void *)(*(void *)(v43 + 56) + 16LL * *((void *)&v43 + 1) + 8) & 0x7FFFFFFFFFFFFFLL) * v17)
        {
          sub_1000C2AF8( (uint64_t)a1,  a2,  (*(void *)(v43 + 352)
           + *(void *)(v16 + 48) * v17 * (*((void *)&v43 + 1) / (unint64_t)(*(void *)(v16 + 48) + 1LL)))
          / *(unsigned __int16 *)(a1[1] + 18LL),
            1,
            1LL,
            &v28);
          if (v28 && !*(_BYTE *)(v28 + 344))
          {
            if (*(_BYTE *)(v28 + 224)) {
              uint64_t v18 = v28 + 40;
            }
            else {
              uint64_t v18 = 0LL;
            }
            uint64_t v19 = *(void *)(v18 + 16);
            *(void *)(v18 + 16) = 0LL;
            *(void *)(v18 + 24) = v19;
            *(_BYTE *)(v18 + sub_100006224(v4 - 112) = 0;
            if (v28)
            {
              uint64_t v20 = *(void *)(v28 + 288);
              if (v20)
              {
                unint64_t v44 = v28;
                (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(void *)v20 + 48LL))( v20,  &v44,  &v28);
              }
            }

            uint64_t v21 = a1[1];
            unint64_t v22 = *(unsigned __int16 *)(v21 + 18);
            unint64_t v23 = (*(void *)(v15 + 352)
                 + *((void *)&v15 + 1)
                 / (unint64_t)(*(void *)(*(void *)(v15 + 8) + 48LL) + 1LL)
                 * *(void *)(*(void *)(v15 + 8) + 48LL)
                 * *(unsigned int *)(*(void *)(v15 + 8) + 20LL))
                / v22
                - a1[44] / v22;
            unint64_t v24 = *(void *)(v21 + 48) * (*(_DWORD *)(v21 + 20) / v22);
            unint64_t v44 = 0LL;
            uint64_t v25 = a1[9];
            unint64_t v26 = v23 / v24;
            do
              unint64_t v27 = __ldaxr(&v44);
            while (__stlxr(0LL, &v44));
            atomic_store(v27, (unint64_t *)(v25 + 8 * v26));
          }

          sub_1000C1AC8(&v28);
        }

        sub_10011E8E0(&v29);
      }

void sub_1000C58EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a10 = (void **)&a14;
  sub_1000D689C(&a10);
  _Unwind_Resume(a1);
}

void *sub_1000C5948(void *a1, void *a2)
{
  unint64_t v3 = sub_10000552C(a1, (uint64_t)"table entry data@", 17LL);
  uint64_t v4 = (void *)std::ostream::operator<<( v3,  *(void *)(*a2 + 352LL)
                 + (*(void *)(*(void *)(*a2 + 8LL) + 48LL) + *(void *)(*(void *)(*a2 + 8LL) + 48LL) * a2[1])
  unint64_t v5 = sub_10000552C(v4, (uint64_t)" = offset = ", 12LL);
  uint64_t v6 = (void *)std::ostream::operator<<( v5,  (*(void *)(*(void *)(*a2 + 56LL) + 16LL * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
                 * *(unsigned int *)(*(void *)(*a2 + 8LL) + 20LL));
  unint64_t v7 = sub_10000552C(v6, (uint64_t)", flags = ", 10LL);
  unint64_t v8 = atomic_load((unint64_t *)(*(void *)(*a2 + 56LL) + 16LL * a2[1] + 8));
  int v10 = v8 >> 62;
  return sub_1000CF9F4(v7, &v10);
}

__n128 sub_1000C5A0C@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v71 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  sub_1000C3C94( a3,  a4,  *(unsigned int *)(*(void *)(a1 + 8) + 20LL),  *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL),  *(void *)(a1 + 352),  *(void *)(*(void *)(a1 + 8) + 80LL) + *(void *)(a1 + 352),  (uint64_t)v84);
  int v9 = 0;
  LOBYTE(v82) = 0;
  char v83 = 0;
  int v72 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 24LL) + 184LL);
LABEL_2:
  while (*(void *)v84 != v87
       || *(_OWORD *)&v84[8] != v88
       || *(void *)&v84[16] != *(void *)v84 + 16LL * *(void *)&v84[8]
       && (*(_OWORD *)&v85[8] != v89 || *(void *)&v85[24] != v90))
  {
    uint64_t v10 = *(void *)&v84[24];
    uint64_t v11 = *(void *)v85;
    *(void *)&v85[8] += *(void *)&v85[24] * *(void *)v85;
    *(void *)&v84[24] = sub_1000C1DDC((uint64_t *)v84);
    *(void *)uint64_t v85 = v12;
    unint64_t v13 = v10 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL);
    uint64_t v14 = sub_1000C2064(a1, v13);
    uint64_t v16 = (void *)v14;
    uint64_t v17 = v15;
    *(void *)&__int128 v81 = v14;
    *((void *)&v81 + 1) = v15;
    if (v83)
    {
      uint64_t v18 = v82;
      if (*(void *)(v14 + 352) != *(void *)(v82 + 352) || v15 != *((void *)&v82 + 1))
      {
        v9 |= sub_1000C26AC(a1, a2, &v82);
        uint64_t v20 = *(void *)(v18 + 8);
        unint64_t v21 = (*(void *)(v18 + 352)
             + (*(void *)(v20 + 48) + *(void *)(v20 + 48) * *((void *)&v82 + 1))
             / (unint64_t)(*(void *)(v20 + 48) + 1LL)
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(v22 + 48);
        unsigned int v24 = *(_DWORD *)(v22 + 20);
        unint64_t v25 = *(unsigned __int16 *)(v22 + 18);
        unint64_t v26 = v23 * (v24 / v25);
        unint64_t v27 = *(void *)(a1 + 352) / v25;
        ++v23;
        uint64_t v28 = v23 + v23 * ((v21 - v27) / v26);
        uint64_t v29 = v16[1];
        if (v28 != v23
                  + v23
                  * (((v16[44]
                     + (*(void *)(v29 + 48) + *(void *)(v29 + 48) * v17)
                     / (unint64_t)(*(void *)(v29 + 48) + 1LL)
                     * *(unsigned int *)(v29 + 20))
                    / *(unsigned __int16 *)(v29 + 18)
                    - v27)
                   / v26)
          && (v9 & 1) != 0)
        {
          sub_1000C54A4((void *)a1, a2, v28 - 1);
          int v9 = 0;
        }
      }

      *((void *)&v82 + 1) = v17;
    }

    else
    {
      __int128 v82 = v81;
      char v83 = 1;
    }

    unint64_t v30 = atomic_load((unint64_t *)(v16[7] + 16 * v17 + 8));
    unint64_t v31 = v30 >> 62;
    if (v30 >> 62 != 2)
    {
      uint64_t v32 = *(void *)(v81 + 8);
      uint64_t v33 = *(void *)(v32 + 48);
      uint64_t v34 = *(unsigned int *)(v32 + 20);
      if (*(void *)(v81 + 352) + (v33 + v33 * *((void *)&v81 + 1)) / (unint64_t)(v33 + 1) * v34 == v13
        && v11 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL) == v34)
      {
        unint64_t v35 = (unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1));
        while (*v35)
        {
LABEL_28:
          if ((sub_1000DCB58(v35, 1) & 1) == 0)
          {
            char v79 = 0;
            int v78 = v35;
            int v77 = off_1001969E8;
            uint64_t v80 = 0LL;
            *(void *)&__int128 v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
            *((void *)&v73 + 1) = 30LL;
            int v74 = 16;
            sub_1000C63B0(v75, &v73);
            sub_10000552C(v76, (uint64_t)"Couldn't lock entry ", 20LL);
            sub_1000C5948(v76, &v81);
            sub_1000C6458((uint64_t)v75);
            exception = __cxa_allocate_exception(0x40uLL);
            void *exception = &off_100196FC8;
            char v65 = std::generic_category();
            exception[1] = 4294967282LL;
            exception[2] = v65;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
            exception[7] = "Couldn't lock entry";
          }
        }

        while (1)
        {
          unint64_t v36 = __ldaxr(v35);
          if (!v36) {
            break;
          }
          __clrex();
LABEL_27:
          if (v36) {
            goto LABEL_28;
          }
        }

        if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v35)) {
          goto LABEL_27;
        }
        char v79 = 1;
        int v78 = v35;
        int v77 = off_1001969E8;
        uint64_t v80 = 0LL;
        unint64_t v42 = atomic_load((unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1) + 8));
        if ((_DWORD)v31 != 1 && (v42 & 0xC000000000000000LL) == 0x4000000000000000LL) {
          goto LABEL_49;
        }
        __int128 v43 = (unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1) + 8);
        unint64_t v44 = *v43;
        unint64_t v45 = __ldaxr(v43);
        if (v45 == v44)
        {
          if (!__stlxr(v44 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000LL, v43)) {
            goto LABEL_56;
          }
        }

        else
        {
          __clrex();
        }

        do
        {
          while (1)
          {
            unint64_t v44 = v45;
            unint64_t v45 = __ldaxr(v43);
            if (v45 == v44) {
              break;
            }
            __clrex();
          }
        }

        while (__stlxr(v44 & 0x3FFFFFFFFFFFFFFFLL | 0x8000000000000000LL, v43));
LABEL_56:
        BOOL v48 = v44 >> 62 == 3;
        unint64_t v49 = (unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1) + 8);
        unint64_t v50 = *v49;
        uint64_t v51 = *(unsigned int *)(*(void *)(v81 + 8) + 20LL);
        if ((_DWORD)v51)
        {
          do
            unint64_t v52 = __ldxr(v49);
          while (__stxr(v52 & 0xFF80000000000000LL, v49));
          goto LABEL_69;
        }

        unint64_t v53 = *v49;
        unint64_t v54 = __ldxr(v49);
        if (v54 != v53)
        {
          __clrex();
LABEL_63:
          while (1)
          {
            unint64_t v55 = __ldxr(v49);
            if (v55 != v54) {
              break;
            }
            if (__stxr(v54 & 0xFF80000000000000LL, v49)) {
              goto LABEL_67;
            }
            int v56 = 1;
LABEL_68:
            unint64_t v54 = v55;
            if (v56) {
              goto LABEL_69;
            }
          }

          __clrex();
LABEL_67:
          int v56 = 0;
          goto LABEL_68;
        }

        if (__stxr(v53 & 0xFF80000000000000LL, v49)) {
          goto LABEL_63;
        }
LABEL_69:
        v9 |= v48;
        uint64_t v57 = (v50 & 0x7FFFFFFFFFFFFFLL) * v51;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        sub_10011E8E0(&v77);
        if (v57) {
          sub_1000C2590(a1, v57);
        }
      }

      else
      {
        if ((v30 & 0x4000000000000000LL) == 0)
        {
          if (v72) {
            continue;
          }
          __int128 v37 = (unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1));
          while (*v37)
          {
LABEL_40:
            if ((sub_1000DCB58(v37, 1) & 1) == 0)
            {
              char v79 = 0;
              int v78 = v37;
              int v77 = off_1001969E8;
              uint64_t v80 = 0LL;
              *(void *)&__int128 v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
              *((void *)&v73 + 1) = 30LL;
              int v74 = 16;
              sub_1000C6580(v75, &v73);
              sub_10000552C(v76, (uint64_t)"Couldn't exclusively lock entry ", 32LL);
              sub_1000C5948(v76, &v81);
              sub_1000C6628((uint64_t)v75);
              v66 = __cxa_allocate_exception(0x40uLL);
              void *v66 = &off_100196FC8;
              uint64_t v67 = std::generic_category();
              v66[1] = 4294967282LL;
              v66[2] = v67;
              *((_BYTE *)v66 + 24) = 0;
              *((_BYTE *)v66 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
              v66[7] = "Couldn't lock entry";
            }
          }

          while (1)
          {
            unint64_t v38 = __ldaxr(v37);
            if (v38)
            {
              __clrex();
            }

            else if (!__stlxr(0xFFFFFFFFFFFFFFFFLL, v37))
            {
              char v79 = 1;
              int v78 = v37;
              int v77 = off_1001969E8;
              uint64_t v80 = 0LL;
              unint64_t v46 = atomic_load((unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1) + 8));
              uint64_t v47 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL);
              *(void *)unint64_t v75 = sub_1000CC3F0(a1, v10 * v47, v11 * v47);
              sub_1000C34EC( a1,  a2,  &v81,  v75,  2u,  (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFFFFCLL | (v46 >> 62));
LABEL_49:
              sub_10011E8E0(&v77);
              goto LABEL_2;
            }

            if (v38) {
              goto LABEL_40;
            }
          }
        }

        __int128 v39 = (unint64_t *)(*(void *)(v81 + 56) + 16LL * *((void *)&v81 + 1));
        BOOL v40 = sub_1000DCACC(v39);
        int v77 = off_1001969C8;
        int v78 = v39;
        char v79 = v40;
        if (!v40)
        {
          *(void *)&__int128 v73 = "di_asif::details::table::unmap(ContextASIF &, const unmap_extent_t *, size_t)";
          *((void *)&v73 + 1) = 30LL;
          int v74 = 16;
          sub_1000C6498(v75, &v73);
          sub_10000552C(v76, (uint64_t)"Couldn't lock entry ", 20LL);
          sub_1000C5948(v76, &v81);
          sub_1000C6540((uint64_t)v75);
          unint64_t v68 = __cxa_allocate_exception(0x40uLL);
          *unint64_t v68 = &off_100196FC8;
          int v69 = std::generic_category();
          v68[1] = 4294967282LL;
          v68[2] = v69;
          *((_BYTE *)v68 + 24) = 0;
          *((_BYTE *)v68 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
          v68[7] = "Couldn't lock entry";
        }

        uint64_t v41 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL);
        *(void *)unint64_t v75 = sub_1000CC3F0(a1, v10 * v41, v11 * v41);
        sub_1000C34EC(a1, a2, &v81, v75, 2u, v31 | (unint64_t)&_mh_execute_header);
        sub_10011E7BC(&v77);
      }
    }
  }

  if (v83 && ((sub_1000C26AC(a1, a2, &v82) | v9) & 1) != 0)
  {
    uint64_t v58 = *(void *)(v82 + 8);
    uint64_t v59 = *(void *)(a1 + 8);
    uint64_t v60 = *(void *)(v59 + 48);
    sub_1000C54A4( (void *)a1,  a2,  v60 + (v60 + 1)
    * (((*(void *)(v82 + 352)
       + (*(void *)(v58 + 48) + *(void *)(v58 + 48) * *((void *)&v82 + 1))
       / (unint64_t)(*(void *)(v58 + 48) + 1LL)
       * *(unsigned int *)(v58 + 20))
      / *(unsigned __int16 *)(v58 + 18)
      - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v59 + 18))
     / (v60
      * (unint64_t)(*(_DWORD *)(v59 + 20) / *(unsigned __int16 *)(v59 + 18)))));
  }

  __int128 v61 = *(_OWORD *)&v85[16];
  a5[2] = *(_OWORD *)v85;
  a5[3] = v61;
  a5[4] = v86;
  __int128 v62 = *(_OWORD *)&v84[16];
  *a5 = *(_OWORD *)v84;
  a5[1] = v62;
  std::mutex::unlock(v71);
  return result;
}

void sub_1000C6318( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::mutex *a11)
{
}

void *sub_1000C63B0(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E3A40((uint64_t)a1, a2);
  *a1 = off_10018C3C8;
  a1[45] = &off_10018C4C8;
  a1[46] = &off_10018C4F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018C3C8;
  a1[45] = off_10018C450;
  a1[46] = off_10018C478;
  return a1;
}

void sub_1000C6434(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6458(uint64_t a1)
{
  return a1;
}

void *sub_1000C6498(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E3ABC((uint64_t)a1, a2);
  *a1 = off_10018C5E8;
  a1[45] = &off_10018C6E8;
  a1[46] = &off_10018C710;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018C5E8;
  a1[45] = off_10018C670;
  a1[46] = off_10018C698;
  return a1;
}

void sub_1000C651C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6540(uint64_t a1)
{
  return a1;
}

void *sub_1000C6580(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E3B38((uint64_t)a1, a2);
  *a1 = off_10018C808;
  a1[45] = &off_10018C908;
  a1[46] = &off_10018C930;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018C808;
  a1[45] = off_10018C890;
  a1[46] = off_10018C8B8;
  return a1;
}

void sub_1000C6604(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C6628(uint64_t a1)
{
  return a1;
}

BOOL sub_1000C6668(uint64_t a1, uint64_t a2)
{
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v68 = 0u;
  uint64_t v2 = (unsigned int *)(a1 + 96);
  do
    unsigned int v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  unsigned int v57 = v3;
  std::mutex::lock((std::mutex *)(a1 + 280));
  __int128 v4 = v68;
  __int128 v5 = v69;
  __int128 v6 = *(_OWORD *)(a1 + 248);
  __int128 v7 = *(_OWORD *)(a1 + 264);
  __int128 v68 = *(_OWORD *)(a1 + 232);
  __int128 v69 = v6;
  *(_OWORD *)(a1 + 2sub_100006224(v6 - 32) = v4;
  *(_OWORD *)(a1 + 24_Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  __int128 v8 = v70;
  __int128 v70 = v7;
  *(_OWORD *)(a1 + 264) = v8;
  std::mutex::unlock((std::mutex *)(a1 + 280));
  size_t v9 = ((unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL)
      + 8LL * *(void *)(*(void *)(a1 + 8) + 56LL)
      - 1)
  uint64_t v10 = valloc(v9);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v55 = std::bad_alloc::bad_alloc(exception);
  }

  v73[0] = &off_10018C340;
  unint64_t v75 = (unint64_t)v73;
  uint64_t v78 = (uint64_t)v10;
  sub_100043B68((uint64_t)&v79, (uint64_t)v73);
  uint64_t v11 = (void *)v75;
  if ((void *)v75 == v73)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v73;
    goto LABEL_8;
  }

  if (v75)
  {
    uint64_t v12 = 5LL;
LABEL_8:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  uint64_t v13 = v78;
  std::mutex::lock((std::mutex *)(a1 + 168));
  sub_1000C5100(a1, v14, (uint64_t)v73);
  uint64_t v15 = 0LL;
  size_t v16 = v13 + v9;
  uint64_t v67 = *(void *)(a1 + 344);
  char v66 = 0;
  *(void *)&__int128 v64 = a2;
  *((void *)&v64 + 1) = &v67;
  *(void *)&__int128 v65 = v13;
  *((void *)&v65 + 1) = &v66;
  uint64_t v17 = (void *)v13;
  while (v73[0] != v76 || v73[1] != v77)
  {
    uint64_t v18 = (unint64_t *)(v74[7] + 16 * v75 + 8);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 & 0x7FFFFFFFFFFFFFFFLL, v18));
    if ((v19 & 0x8000000000000000LL) != 0)
    {
      sub_1000C2AF8( a1,  a2,  (v74[44] + v75 / (*(void *)(v74[1] + 48LL) + 1LL) * *(void *)(v74[1] + 48LL) * *(unsigned int *)(v74[1] + 20LL))
      / *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL),
        0,
        0LL,
        v59);
      if (v59[0] && !*(_BYTE *)(v59[0] + 344))
      {
        if (*(_BYTE *)(v59[0] + 224)) {
          uint64_t v20 = v59[0] + 40;
        }
        else {
          uint64_t v20 = 0LL;
        }
        int v21 = sub_1000C70B4(v20, a2, a1);
        if (v21)
        {
          sub_1000A3900(a2);
          unint64_t v50 = __cxa_allocate_exception(0x40uLL);
          uint64_t v51 = v50;
          if (v21 < 0) {
            uint64_t v52 = v21;
          }
          else {
            uint64_t v52 = -v21;
          }
          void *v50 = &off_100196FC8;
          unint64_t v53 = std::generic_category();
          v51[1] = v52;
          v51[2] = v53;
          *((_BYTE *)v51 + 24) = 0;
          *((_BYTE *)v51 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
          v51[7] = "Can't flush asif, bitmap flush failed";
        }

        char v66 = 1;
      }

      sub_1000C1AC8(v59);
    }

    uint64_t v22 = (unint64_t *)(v74[7] + 16 * v75);
    while (*v22)
    {
LABEL_31:
      if ((sub_1000DCB58(v22, 1) & 1) == 0)
      {
        char v24 = 0;
        goto LABEL_33;
      }
    }

    while (1)
    {
      unint64_t v23 = __ldaxr(v22);
      if (!v23) {
        break;
      }
      __clrex();
LABEL_30:
      if (v23) {
        goto LABEL_31;
      }
    }

    if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v22)) {
      goto LABEL_30;
    }
    char v24 = 1;
LABEL_33:
    char v62 = v24;
    v61[0] = off_1001969E8;
    v61[1] = v22;
    uint64_t v63 = 0LL;
    unint64_t v25 = (unint64_t *)(v74[7] + 16 * v75 + 8);
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 & 0x7FFFFFFFFFFFFFFFLL, v25));
    sub_1000C7128(&v74);
    if ((v26 & 0x8000000000000000LL) != 0)
    {
      sub_1000C2AF8( a1,  a2,  (v74[44] + v75 / (*(void *)(v74[1] + 48LL) + 1LL) * *(void *)(v74[1] + 48LL) * *(unsigned int *)(v74[1] + 20LL))
      / *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL),
        1,
        0LL,
        v59);
      if (v59[0] && !*(_BYTE *)(v59[0] + 344))
      {
        if (*(_BYTE *)(v59[0] + 224)) {
          uint64_t v27 = v59[0] + 40;
        }
        else {
          uint64_t v27 = 0LL;
        }
        int v28 = sub_1000C70B4(v27, a2, a1);
        if (v28)
        {
          sub_1000A3900(a2);
          unint64_t v46 = __cxa_allocate_exception(0x40uLL);
          uint64_t v47 = v46;
          if (v28 < 0) {
            uint64_t v48 = v28;
          }
          else {
            uint64_t v48 = -v28;
          }
          void *v46 = &off_100196FC8;
          unint64_t v49 = std::generic_category();
          v47[1] = v48;
          v47[2] = v49;
          *((_BYTE *)v47 + 24) = 0;
          *((_BYTE *)v47 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
          v47[7] = "Can't flush asif, bitmap flush failed";
        }

        char v66 = 1;
      }

      sub_1000C1AC8(v59);
    }

    ++v15;
    if (!v57)
    {
      if (v17 != (void *)v13) {
        sub_1000C7218((uint64_t)&v64, (uint64_t)v17);
      }
      uint64_t v67 = *(void *)(a1 + 344) + 8 * (v15 + v15 * *(void *)(*(void *)(a1 + 8) + 48LL));
      goto LABEL_66;
    }

    sub_1000C5184(a1, &v74, (uint64_t)v59);
    while (2)
    {
      if (v59[0] != v60[3] || v59[1] != v60[4])
      {
        sub_1000C73DC(v60);
        unint64_t v29 = atomic_load((unint64_t *)(*(void *)(v60[0] + 56LL) + 16LL * v60[1] + 8));
        *v17++ = bswap64(v29);
        unint64_t v30 = operator new(0x28uLL);
        *(void *)unint64_t v30 = &off_10018EEB0;
        __int128 v31 = v65;
        *(_OWORD *)(v30 + _Block_object_dispose((const void *)(v2 - 120), 8) = v64;
        *(_OWORD *)(v30 + 24) = v31;
        int v72 = v30;
        sub_1000C7218((uint64_t)(v30 + 8), (uint64_t)v17);
        unint64_t v30 = v72;
        uint64_t v17 = (void *)v13;
        if (v72 != v71)
        {
          if (v72)
          {
            uint64_t v17 = (void *)v13;
LABEL_52:
            uint64_t v32 = 5LL;
LABEL_54:
            (*(void (**)(void))(*(void *)v30 + 8 * v32))();
          }

          sub_1000C20C0((uint64_t)v59);
          continue;
        }

        unint64_t v30 = v71;
        uint64_t v32 = 4LL;
        goto LABEL_54;
      }

      break;
    }

    unint64_t v33 = atomic_load((unint64_t *)(v74[7] + 16 * v75 + 8));
    *v17++ = bswap64(v33);
    uint64_t v34 = operator new(0x28uLL);
    *(void *)uint64_t v34 = &off_10018EEB0;
    __int128 v35 = v65;
    *(_OWORD *)(v34 + _Block_object_dispose((const void *)(v2 - 120), 8) = v64;
    *(_OWORD *)(v34 + 24) = v35;
    int v72 = v34;
    sub_1000C7218((uint64_t)(v34 + 8), (uint64_t)v17);
    uint64_t v34 = v72;
    uint64_t v17 = (void *)v13;
    if (v72 == v71)
    {
      uint64_t v34 = v71;
      uint64_t v36 = 4LL;
      goto LABEL_65;
    }

    if (v72)
    {
      uint64_t v17 = (void *)v13;
LABEL_60:
      uint64_t v36 = 5LL;
LABEL_65:
      (*(void (**)(void))(*(void *)v34 + 8 * v36))();
    }

LABEL_66:
    sub_10011E8E0(v61);
    sub_1000C1FA0((uint64_t)v73);
  }

  if (v17 != (void *)v13)
  {
    unint64_t v37 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL);
    size_t v38 = v37 + ((unint64_t)v17 - v13) / v37 * v37 - ((void)v17 - v13);
    bzero(v17, v38);
    sub_1000C7218((uint64_t)&v64, (uint64_t)v17 + v38);
  }

  std::mutex::unlock((std::mutex *)(a1 + 168));
  sub_100043BCC(&v78);
  uint64_t v39 = *((void *)&v70 + 1);
  BOOL v40 = (unint64_t **)(*((void *)&v68 + 1) + 8 * ((unint64_t)v70 >> 9));
  if ((void)v69 == *((void *)&v68 + 1))
  {
    uint64_t v41 = 0LL;
    __int128 v43 = 0LL;
    unint64_t v42 = (char *)(*((void *)&v68 + 1) + 8LL * (((void)v70 + *((void *)&v70 + 1)) >> 9));
  }

  else
  {
    uint64_t v41 = &(*v40)[v70 & 0x1FF];
    unint64_t v42 = (char *)(*((void *)&v68 + 1) + 8LL * (((void)v70 + *((void *)&v70 + 1)) >> 9));
    __int128 v43 = (unint64_t *)(*(void *)v42 + 8 * ((v70 + *((void *)&v70 + 1)) & 0x1FF));
  }

  sub_1000C7514(*(unint64_t **)(a1 + 8), v40, v41, v42, v43, a2);
  if (v39) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
  }
  int v44 = *(unsigned __int8 *)(a1 + 100);
  if (*(_BYTE *)(a1 + 100))
  {
    (*(void (**)(void, void, void))(**(void **)(a1 + 8) + 40LL))( *(void *)(a1 + 8),  *(void *)(a1 + 352),  *(void *)(a1 + 344));
    *(_BYTE *)(a1 + 100) = 0;
  }

  sub_1000C1944(&v68);
  return v44 != 0;
}

void sub_1000C6E98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::mutex *a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, unint64_t a41, uint64_t a42)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::mutex::lock(a11);
    unint64_t v46 = a16[33] + a16[34];
    uint64_t v47 = a16[30];
    uint64_t v48 = (char *)(v47 + 8 * (v46 >> 9));
    if (a16[31] == v47) {
      uint64_t v49 = 0LL;
    }
    else {
      uint64_t v49 = *(void *)v48 + 8 * (v46 & 0x1FF);
    }
    unint64_t v50 = (char *)(a38 + 8 * (a41 >> 9));
    if (a39 == a38)
    {
      uint64_t v51 = 0LL;
      uint64_t v52 = 0LL;
      unint64_t v53 = (char *)(a38 + 8 * ((a42 + a41) >> 9));
    }

    else
    {
      uint64_t v51 = (char *)(*(void *)v50 + 8 * (a41 & 0x1FF));
      unint64_t v53 = (char *)(a38 + 8 * ((a42 + a41) >> 9));
      uint64_t v52 = (char *)(*(void *)v53 + 8 * ((a42 + a41) & 0x1FF));
    }

    sub_1000C74E0(a10, v48, v49, v50, v51, v53, v52);
    std::mutex::unlock(a11);
    do
      unsigned int v54 = __ldaxr(v42);
    while (__stlxr(v54 | ((_DWORD)a15 != 0), v42));
    __cxa_rethrow();
  }

  sub_1000C1944(&a37);
  _Unwind_Resume(a1);
}

void sub_1000C7078()
{
}

uint64_t sub_1000C70B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  uint64_t v7 = sub_1000CC6A8(a1, a2, a3, *(unsigned int *)(*(void *)(a3 + 8) + 20LL));
  std::mutex::unlock(v6);
  return v7;
}

void sub_1000C7114(_Unwind_Exception *a1)
{
}

BOOL sub_1000C7128(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8));
  if ((v1 & 0x7F80000000000000LL) != 0)
  {
    *(void *)&__int128 v3 = "di_asif::details::table_entry_map::validate() const";
    *((void *)&v3 + 1) = 43LL;
    int v4 = 16;
    sub_10008B868(v5, &v3);
    sub_10000552C(&v6, (uint64_t)"Diskimages2 - ASIF - bad map entry reserved bits ", 49LL);
    *(_DWORD *)((char *)&v6 + *(void *)(v6 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v6 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v6, v1);
    std::ostream::~ostream(&v6, off_100183EF8);
    sub_10008B9CC((uint64_t)v5);
    std::ios::~ios(&v7);
  }

  return (v1 & 0x7F80000000000000LL) == 0;
}

void sub_1000C7204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1000C7218(uint64_t a1, uint64_t a2)
{
  if (**(_BYTE **)(a1 + 24))
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)a1 + 16LL) + 16LL))( *(void *)(*(void *)a1 + 16LL),  0LL);
    if (v4)
    {
      uint64_t v21 = *(void *)a1;
      int v22 = v4;
      sub_1000A3900(v21);
      exception = __cxa_allocate_exception(0x40uLL);
      if (v22 < 0) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = -v22;
      }
      unint64_t v25 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Can't flush asif, backend flush failed", v24);
    }

    **(_BYTE **)(a1 + 24) = 0;
  }

  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2 - v5;
  uint64_t v7 = **(void **)(a1 + 8);
  __int128 v8 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v26 = v5;
  uint64_t v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v28 = v6;
  uint64_t v29 = v7;
  uint64_t v30 = v6;
  char v31 = 0;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(*(void *)a1 + 16LL) + 80LL))( *(void *)(*(void *)a1 + 16LL),  &v26);
  **(void **)(a1 + 8) += v6;
  if (v6 != v11)
  {
    uint64_t v15 = *(void *)a1;
    int v16 = v11;
    sub_1000A3900(v15);
    LODWORD(v17) = v16;
    uint64_t v18 = __cxa_allocate_exception(0x40uLL);
    unint64_t v19 = v18;
    else {
      uint64_t v17 = -(int)v17;
    }
    *uint64_t v18 = &off_100196FC8;
    uint64_t v20 = std::generic_category();
    v19[1] = v17;
    v19[2] = v20;
    *((_BYTE *)v19 + 24) = 0;
    *((_BYTE *)v19 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v19[7] = "Can't flush asif";
  }

  uint64_t v12 = v27;
  if (v27)
  {
    uint64_t v13 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_1000C73C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1000C73DC(void *a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8));
  if ((v1 & 0x3F80000000000000LL) != 0)
  {
    *(void *)&__int128 v3 = "di_asif::details::table_entry_data::validate() const";
    *((void *)&v3 + 1) = 44LL;
    int v4 = 16;
    sub_1000D7A2C(v5, &v3);
    sub_10000552C(&v6, (uint64_t)"Diskimages2 - ASIF - bad reserved bits ", 39LL);
    *(_DWORD *)((char *)&v6 + *(void *)(v6 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v6 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v6, v1);
    std::ostream::~ostream(&v6, off_10018CAF0);
    sub_1000D7B90((uint64_t)v5);
    std::ios::~ios(&v7);
  }

  return (v1 & 0x3F80000000000000LL) == 0;
}

void sub_1000C74CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000C74E0(void **a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7)
{
  if (a7 == a5) {
    unint64_t v7 = 0LL;
  }
  else {
    unint64_t v7 = ((uint64_t)&a7[-*(void *)a6] >> 3) + ((a6 - a4) << 6) - ((uint64_t)&a5[-*(void *)a4] >> 3);
  }
  return sub_1000E3C78(a1, a2, a3, a4, a5, a6, a7, v7);
}

void *sub_1000C7514( unint64_t *a1, unint64_t **a2, unint64_t *a3, char *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v12 = (*(uint64_t (**)(unint64_t *))(*a1 + 16))(a1);
  v18[0] = &off_10018BC60;
  v18[1] = a6;
  unint64_t v19 = v18;
  sub_1000E5040(v12, a2, a3, (uint64_t)a4, a5, (uint64_t)v18);
  __n128 result = v19;
  if (v19 == v18)
  {
    uint64_t v14 = 4LL;
    __n128 result = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_6;
    }
    uint64_t v14 = 5LL;
  }

  __n128 result = (void *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_6:
  if (a5 == a3) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = (((char *)a2 - a4) << 6) - (((uint64_t)a5 - *(void *)a4) >> 3) + a3 - *a2;
  }
  int v16 = a1 + 1;
  do
    unint64_t v17 = __ldaxr(v16);
  while (__stlxr(v17 + v15, v16));
  return result;
}

void sub_1000C7630( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000C7668(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(_WORD *)uint64_t v119 = 0;
  char v121 = 0;
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v106 = *a3;
  v107 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  *(_OWORD *)unint64_t v108 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v108[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v109 = a3[6];
  __int128 v110 = *(_OWORD *)(a3 + 7);
  __int128 v111 = *(_OWORD *)(a3 + 9);
  __int128 v112 = *(_OWORD *)(a3 + 11);
  char v113 = *((_BYTE *)a3 + 104);
  unint64_t v10 = (std::__shared_weak_count *)a3[15];
  uint64_t v114 = a3[14];
  v115 = v10;
  if (v10)
  {
    int v11 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  unint64_t v79 = 0LL;
  __int128 v116 = *((_OWORD *)a3 + 8);
  uint64_t v117 = a3[18];
  char v118 = *((_BYTE *)a3 + 152);
  while (!sub_10003B85C((uint64_t)&v106, a4))
  {
    v104 = (void *)sub_1000C2064(a1, *(unint64_t *)&v108[8]);
    uint64_t v105 = v13;
    uint64_t v14 = v104[1];
    uint64_t v15 = *(void *)(v14 + 48);
    uint64_t v16 = *(unsigned int *)(v14 + 20);
    v94[0] = v104[44] + (v15 + v15 * v13) / (unint64_t)(v15 + 1) * v16;
    v94[1] = v94[0] + v16;
    char v95 = 2;
    sub_10003CE10((uint64_t)&v106, (uint64_t)v94, a4, (uint64_t)v98);
    if (sub_10003B85C((uint64_t)v98, (uint64_t)&v101))
    {
      *(void *)&__int128 v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((void *)&v84 + 1) = 30LL;
      LODWORD(v85) = 16;
      sub_1000C822C(v94, &v84);
      sub_10000552C(&v96, (uint64_t)"Couldn't trim entry in write ", 29LL);
      sub_10011E9EC(&v96, &v106);
      std::ostream::~ostream(&v96, off_10018CD10);
      sub_1000D8300((uint64_t)v94);
      std::ios::~ios(v97);
      int v17 = 1;
      unint64_t v18 = -34LL;
      goto LABEL_73;
    }

    unint64_t v19 = (unint64_t *)(v104[7] + 16 * v105);
    BOOL v20 = sub_1000DCACC(v19);
    v92[0] = off_1001969C8;
    v92[1] = v19;
    BOOL v93 = v20;
    if (!v20)
    {
      *(void *)&__int128 v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((void *)&v84 + 1) = 30LL;
      LODWORD(v85) = 16;
      sub_1000C8314(v94, &v84);
      sub_10000552C(&v96, (uint64_t)"Couldn't lock entry ", 20LL);
      sub_1000C5948(&v96, &v104);
      sub_1000C83BC((uint64_t)v94);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      int v74 = std::generic_category();
      exception[1] = 4294967282LL;
      exception[2] = v74;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "Couldn't lock entry";
    }

    uint64_t v21 = v105;
    uint64_t v22 = v104[7];
    uint64_t v23 = (*(void *)(v22 + 16 * v105 + 8) & 0x7FFFFFFFFFFFFFLL) * *(unsigned int *)(v104[1] + 20LL);
    if (!v23)
    {
      unint64_t v18 = sub_1000C330C(a1, a2, (uint64_t)v104, v105);
      if ((_DWORD)v18)
      {
        *(void *)&__int128 v84 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v84 + 1) = 30LL;
        LODWORD(v85) = 16;
        sub_1000C83FC(v94, &v84);
        sub_10000552C(&v96, (uint64_t)"couldn't allocate space for entry ", 34LL);
        sub_1000C5948(&v96, &v104);
        sub_10000552C(&v96, (uint64_t)" ret: ", 6LL);
        std::ostream::operator<<(&v96, v18);
        std::ostream::~ostream(&v96, off_10018D150);
        sub_1000D8E58((uint64_t)v94);
        std::ios::~ios(v97);
        unint64_t v18 = (int)v18;
        goto LABEL_71;
      }

      uint64_t v21 = v105;
      uint64_t v22 = v104[7];
    }

    unint64_t v24 = atomic_load((unint64_t *)(v22 + 16 * v21 + 8));
    unint64_t v25 = sub_1000C84E4(&v104, a2, (uint64_t)v98, (uint64_t)&v101);
    unint64_t v18 = v25;
    unint64_t v27 = v26;
    if ((v25 & 0x8000000000000000LL) != 0 && (_DWORD)v25)
    {
      if (v23) {
        goto LABEL_71;
      }
      sub_10011E7D4((uint64_t)v92, 0LL, (uint64_t)v94);
      if (!v95) {
        goto LABEL_70;
      }
      unint64_t v28 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      if ((v28 & 0x4000000000000000LL) != 0) {
        goto LABEL_70;
      }
      uint64_t v29 = (unint64_t *)(v104[7] + 16 * v105 + 8);
      unint64_t v30 = *v29;
      uint64_t v31 = *(unsigned int *)(v104[1] + 20LL);
      if ((_DWORD)v31)
      {
        do
          unint64_t v32 = __ldxr(v29);
        while (__stxr(v32 & 0xFF80000000000000LL, v29));
LABEL_66:
        uint64_t v48 = (v30 & 0x7FFFFFFFFFFFFFLL) * v31;
        sub_10011E8E0(v94);
        if (v48) {
          sub_1000C33E8(*(unint64_t **)(a1 + 8), v48, a2);
        }
        goto LABEL_71;
      }

      unint64_t v44 = *v29;
      unint64_t v45 = __ldxr(v29);
      if (v45 == v44)
      {
        if (__stxr(v44 & 0xFF80000000000000LL, v29)) {
          goto LABEL_60;
        }
LABEL_70:
        sub_10011E8E0(v94);
LABEL_71:
        int v17 = 1;
        goto LABEL_72;
      }

      __clrex();
LABEL_60:
      while (2)
      {
        unint64_t v46 = __ldxr(v29);
        if (v46 == v45)
        {
          if (!__stxr(v45 & 0xFF80000000000000LL, v29))
          {
            char v47 = 1;
            goto LABEL_65;
          }
        }

        else
        {
          __clrex();
        }

        char v47 = 0;
LABEL_65:
        unint64_t v45 = v46;
        if ((v47 & 1) != 0) {
          goto LABEL_66;
        }
        continue;
      }
    }

    unint64_t v33 = v24 >> 62;
    *(void *)&__int128 v84 = &v106;
    *((void *)&v84 + 1) = a4;
    uint64_t v85 = &v119[1];
    __int128 v86 = &v104;
    uint64_t v87 = v119;
    uint64_t v88 = a1;
    unint64_t v89 = v25;
    unint64_t v90 = v26;
    uint64_t v91 = a2;
    if ((_DWORD)v33 == 1) {
      goto LABEL_55;
    }
    uint64_t v34 = v104[1];
    uint64_t v35 = *(unsigned int *)(v34 + 20);
    if (v25 == v35
      && v104[44]
       + (*(void *)(v34 + 48) + *(void *)(v34 + 48) * v105) / (unint64_t)(*(void *)(v34 + 48) + 1LL) * v35 == v26)
    {
      sub_10011E7D4((uint64_t)v92, 0LL, (uint64_t)v82);
      if (!v83)
      {
        *(void *)&__int128 v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v80 + 1) = 30LL;
        int v81 = 16;
        sub_1000C92B4(v94, &v80);
        sub_10000552C(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28LL);
        sub_1000C5948(&v96, &v104);
        sub_1000C935C((uint64_t)v94);
        unint64_t v75 = __cxa_allocate_exception(0x40uLL);
        *unint64_t v75 = &off_100196FC8;
        uint64_t v76 = std::generic_category();
        v75[1] = 4294967282LL;
        unint64_t v75[2] = v76;
        *((_BYTE *)v75 + 24) = 0;
        *((_BYTE *)v75 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
        v75[7] = "Couldn't upgrade lock entry";
      }

      unint64_t v36 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      if ((_DWORD)v33 == 2 || (v36 & 0xC000000000000000LL) != 0x8000000000000000LL)
      {
        unint64_t v37 = (unint64_t *)(v104[7] + 16 * v105 + 8);
        unint64_t v38 = *v37;
        unint64_t v39 = __ldaxr(v37);
        if (v39 == v38)
        {
          if (!__stlxr(v38 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000LL, v37)) {
            goto LABEL_47;
          }
        }

        else
        {
          __clrex();
        }

        do
        {
          while (1)
          {
            unint64_t v38 = v39;
            unint64_t v39 = __ldaxr(v37);
            if (v39 == v38) {
              break;
            }
            __clrex();
          }
        }

        while (__stlxr(v38 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000LL, v37));
LABEL_47:
        if (v119[0]) {
          BOOL v42 = 1;
        }
        else {
          BOOL v42 = v38 >> 62 == 3;
        }
        char v43 = v42;
        v119[0] = v43;
        atomic_store(1u, (unsigned int *)(a1 + 96));
      }

void sub_1000C813C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void *sub_1000C822C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E524C((uint64_t)a1, a2);
  *a1 = off_10018CC48;
  a1[45] = &off_10018CD48;
  a1[46] = &off_10018CD70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018CC48;
  a1[45] = off_10018CCD0;
  a1[46] = off_10018CCF8;
  return a1;
}

void sub_1000C82B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C82D4(uint64_t a1)
{
  return a1;
}

void *sub_1000C8314(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E52C8((uint64_t)a1, a2);
  *a1 = off_10018CE68;
  a1[45] = &off_10018CF68;
  a1[46] = &off_10018CF90;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018CE68;
  a1[45] = off_10018CEF0;
  a1[46] = off_10018CF18;
  return a1;
}

void sub_1000C8398(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C83BC(uint64_t a1)
{
  return a1;
}

void *sub_1000C83FC(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E5344((uint64_t)a1, a2);
  *a1 = off_10018D088;
  a1[45] = &off_10018D188;
  a1[46] = &off_10018D1B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018D088;
  a1[45] = off_10018D110;
  a1[46] = off_10018D138;
  return a1;
}

void sub_1000C8480(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C84A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000C84E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(*a1 + 8LL);
  uint64_t v6 = *(unsigned int *)(v5 + 20);
  if (!((*(void *)(*(void *)(*a1 + 56LL) + 16 * v4 + 8) & 0x7FFFFFFFFFFFFFLL) * v6))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v109 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"ASIF: No data offset found (write)", 0xFFFFFFEA);
  }

  __p = (void *)(*(void *)(*a1 + 352LL)
               + (*(void *)(v5 + 48) + *(void *)(v5 + 48) * v4)
  *(void *)&__int128 v192 = (char *)__p + v6;
  BYTE8(v192) = 2;
  sub_10003CE10(a3, (uint64_t)&__p, a4, (uint64_t)v123);
  if (sub_10003B85C((uint64_t)v123, (uint64_t)&v126))
  {
    uint64_t v10 = -34LL;
  }

  else
  {
    __p = v193;
    __int128 v192 = xmmword_100142520;
    __int128 v11 = *(_OWORD *)(a3 + 72);
    __int128 v181 = *(_OWORD *)(a3 + 56);
    __int128 v182 = v11;
    __int128 v183 = *(_OWORD *)(a3 + 88);
    char v184 = *(_BYTE *)(a3 + 104);
    unint64_t v12 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v185 = *(void *)(a3 + 112);
    v186 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    __int128 v187 = *(_OWORD *)(a3 + 128);
    uint64_t v15 = *(void *)(a4 + 56);
    uint64_t v16 = *(void *)(a4 + 64);
    *(void *)&__int128 v167 = v15;
    *((void *)&v167 + 1) = v16;
    __int128 v17 = *(_OWORD *)(a4 + 88);
    __int128 v168 = *(_OWORD *)(a4 + 72);
    __int128 v169 = v17;
    char v170 = *(_BYTE *)(a4 + 104);
    unint64_t v18 = *(std::__shared_weak_count **)(a4 + 120);
    uint64_t v171 = *(void *)(a4 + 112);
    v172 = v18;
    if (v18)
    {
      unint64_t v19 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

    size_t v21 = 0LL;
    unint64_t v22 = 0LL;
    uint64_t v110 = a3 + 128;
    __int128 v173 = *(_OWORD *)(a4 + 128);
    while (1)
    {
      BOOL v23 = (void)v181 == v15 && *((void *)&v181 + 1) == v16;
      if (v23 && (void)v182 == (void)v168) {
        break;
      }
      ++v22;
      v21 += 40LL;
      sub_10003B36C((uint64_t)&v181);
    }

    if (v18)
    {
      unint64_t v24 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    unint64_t v26 = v186;
    if (v186)
    {
      unint64_t v27 = (unint64_t *)&v186->__shared_owners_;
      do
        unint64_t v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    if (*((void *)&v192 + 1) < v22)
    {
      if (v22 >= 0x333333333333334LL) {
        sub_10001A548("get_next_capacity, allocator's max size reached");
      }
      uint64_t v29 = operator new(v21);
      sub_10001CE68((uint64_t *)&__p, (unint64_t)v29, v22, (uint64_t)__p + 40 * v192, 0LL, 0LL);
    }

    uint64_t v30 = *(void *)a3;
    uint64_t v31 = *(std::__shared_weak_count **)(a3 + 8);
    if (v31)
    {
      unint64_t v32 = (unint64_t *)&v31->__shared_owners_;
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    *(_OWORD *)__int128 v116 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v116[9] = *(_OWORD *)(a3 + 25);
    __int128 v117 = *(_OWORD *)(a3 + 72);
    uint64_t v34 = *(void *)(a3 + 48);
    uint64_t v35 = *(void *)(a3 + 56);
    uint64_t v36 = *(void *)(a3 + 64);
    __int128 v118 = *(_OWORD *)(a3 + 88);
    char v119 = *(_BYTE *)(a3 + 104);
    uint64_t v37 = *(void *)(a3 + 112);
    unint64_t v38 = *(std::__shared_weak_count **)(a3 + 120);
    if (v38)
    {
      unint64_t v39 = (unint64_t *)&v38->__shared_owners_;
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    __int128 v120 = *(_OWORD *)v110;
    unint64_t v121 = *(void *)(a3 + 144);
    char v122 = *(_BYTE *)(a3 + 152);
    uint64_t v41 = *(void *)a4;
    BOOL v42 = *(std::__shared_weak_count **)(a4 + 8);
    if (v42)
    {
      char v43 = (unint64_t *)&v42->__shared_owners_;
      do
        unint64_t v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }

    *(_OWORD *)__int128 v112 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v112[9] = *(_OWORD *)(a4 + 25);
    __int128 v113 = *(_OWORD *)(a4 + 72);
    uint64_t v46 = *(void *)(a4 + 48);
    uint64_t v45 = *(void *)(a4 + 56);
    uint64_t v47 = *(void *)(a4 + 64);
    __int128 v114 = *(_OWORD *)(a4 + 88);
    char v115 = *(_BYTE *)(a4 + 104);
    uint64_t v49 = *(void *)(a4 + 112);
    uint64_t v48 = *(std::__shared_weak_count **)(a4 + 120);
    if (v48)
    {
      unint64_t v50 = (unint64_t *)&v48->__shared_owners_;
      do
        unint64_t v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }

    uint64_t v52 = 0LL;
    v145[0] = *(_OWORD *)v116;
    *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)&v116[9];
    __int128 v148 = v117;
    __int128 v149 = v118;
    __int128 v153 = v120;
    v131[0] = *(_OWORD *)v112;
    *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)&v112[9];
    __int128 v136 = v114;
    uint64_t v143 = v30;
    v144 = v31;
    uint64_t v146 = v34;
    *(void *)&__int128 v147 = v35;
    *((void *)&v147 + 1) = v36;
    char v150 = v119;
    uint64_t v151 = v37;
    v152 = v38;
    unint64_t v154 = v121;
    char v155 = v122;
    uint64_t v129 = v41;
    v130 = v42;
    uint64_t v132 = v46;
    uint64_t v133 = v45;
    uint64_t v134 = v47;
    char v137 = v115;
    __int128 v135 = v113;
    uint64_t v138 = v49;
    v139 = v48;
    __int128 v140 = *(_OWORD *)(a4 + 128);
    char v142 = *(_BYTE *)(a4 + 152);
    unint64_t v141 = *(void *)(a4 + 144);
    unint64_t v53 = v141;
    LOBYTE(v181) = 0;
    char v188 = 0;
    while (!sub_10003B85C((uint64_t)&v143, (uint64_t)&v129))
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v177 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1765:32)]";
        *((void *)&v177 + 1) = 104LL;
        LODWORD(v17_Block_object_dispose((const void *)(v2 - 120), 8) = 2;
        sub_100018E78(&v167, &v177);
        sub_10000552C(&v175, (uint64_t)"sg: ", 4LL);
        sub_10011E9EC(&v175, &v143);
        std::ostream::~ostream(&v175, off_100172858);
        sub_100019104((uint64_t)&v167);
        std::ios::~ios(&v176);
      }

      *(void *)&__int128 v167 = 0LL;
      *((void *)&v167 + 1) = v53;
      LOBYTE(v16_Block_object_dispose((const void *)(v2 - 120), 8) = 2;
      sub_10007B490(&v143, (uint64_t)&v167, (uint64_t)&v177);
      int64_t v55 = v178;
      uint64_t v56 = *(void *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8);
      unint64_t v57 = *(unsigned int *)(*(void *)(*a1 + 8LL) + 20LL);
      unint64_t v58 = v179;
      uint64_t v59 = v180;
      __int128 v167 = v177;
      if (*((void *)&v177 + 1))
      {
        unint64_t v60 = (unint64_t *)(*((void *)&v177 + 1) + 8LL);
        do
          unint64_t v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }

      *(void *)&__int128 v168 = v55;
      *((void *)&v168 + 1) = v58 % v57 + (v56 & 0x7FFFFFFFFFFFFFLL) * v57;
      *(void *)&__int128 v169 = v59;
      BYTE8(v169) = 0;
      (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(a2 + 16) + 136LL))( v189,  *(void *)(a2 + 16),  &v167);
      if ((void)v192 == *((void *)&v192 + 1))
      {
        sub_10001EAB8((uint64_t *)&__p, (uint64_t)__p + 40 * v192, 1LL, (uint64_t)v189, &v190);
      }

      else
      {
        sub_10001C2DC((unint64_t)__p + 40 * v192, (uint64_t)v189);
        *(void *)&__int128 v192 = v192 + 1;
      }

      unint64_t v62 = v179;
      int64_t v63 = v178;
      uint64_t v64 = (std::__shared_weak_count *)*((void *)&v167 + 1);
      if (*((void *)&v167 + 1))
      {
        uint64_t v65 = (unint64_t *)(*((void *)&v167 + 1) + 8LL);
        do
          unint64_t v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }

      BOOL v67 = v63 >= 0 || (_DWORD)v63 == 0;
      char v68 = v67;
      if (v67)
      {
        if (sub_10003DA10((uint64_t)&v143, (uint64_t)&v129, v62, v63))
        {
          v156[0] = v143;
          v156[1] = v144;
          if (v144)
          {
            __int128 v73 = (unint64_t *)&v144->__shared_owners_;
            do
              unint64_t v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }

          v157[0] = v145[0];
          *(_OWORD *)((char *)v157 + 9) = *(_OWORD *)((char *)v145 + 9);
          __int128 v159 = v147;
          __int128 v160 = v148;
          __int128 v161 = v149;
          char v162 = v150;
          uint64_t v158 = v146;
          v163[0] = v151;
          v163[1] = v152;
          if (v152)
          {
            unint64_t v75 = (unint64_t *)&v152->__shared_owners_;
            do
              unint64_t v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }

          __int128 v164 = v153;
          unint64_t v165 = v154;
          char v166 = v155;
          sub_10003D9D4((uint64_t)v156, (uint64_t)&v129, v62, v63, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v167);
          sub_100018F60((uint64_t)&v181, (uint64_t)&v167);
          sub_100018FA4((uint64_t)&v167);
          sub_100006224((uint64_t)v163);
          sub_100006224((uint64_t)v156);
          sub_10003BD04((uint64_t)&v181, (uint64_t)&v167);
          sub_100018FFC((uint64_t)&v143, (uint64_t)&v167);
          sub_100006224((uint64_t)v174);
          sub_100006224((uint64_t)&v167);
          sub_10003BA04((uint64_t)&v181, (uint64_t)&v167);
          sub_100018FFC((uint64_t)&v129, (uint64_t)&v167);
          sub_100006224((uint64_t)v174);
          sub_100006224((uint64_t)&v167);
        }

        sub_10003CA5C((uint64_t)&v143, v63);
        uint64_t v52 = (_OWORD *)((char *)v52 + v63);
      }

      else
      {
        else {
          uint64_t v72 = -(int)v63;
        }
        uint64_t v110 = -v72;
      }

      __int128 v69 = (std::__shared_weak_count *)*((void *)&v177 + 1);
      if (*((void *)&v177 + 1))
      {
        __int128 v70 = (unint64_t *)(*((void *)&v177 + 1) + 8LL);
        do
          unint64_t v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }

      if ((v68 & 1) == 0) {
        goto LABEL_91;
      }
    }

    uint64_t v110 = (uint64_t)v52;
LABEL_91:
    sub_100019A28((uint64_t)&v181);
    uint64_t v77 = v139;
    if (v139)
    {
      uint64_t v78 = (unint64_t *)&v139->__shared_owners_;
      do
        unint64_t v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }

    __int128 v80 = v130;
    if (v130)
    {
      int v81 = (unint64_t *)&v130->__shared_owners_;
      do
        unint64_t v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }

    char v83 = v152;
    uint64_t v10 = v110;
    if (v152)
    {
      __int128 v84 = (unint64_t *)&v152->__shared_owners_;
      do
        unint64_t v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }

    __int128 v86 = v144;
    if (v144)
    {
      uint64_t v87 = (unint64_t *)&v144->__shared_owners_;
      do
        unint64_t v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }

    if ((v110 & 0x8000000000000000LL) == 0 || !(_DWORD)v110)
    {
      (*(void (**)(void))(**(void **)(a2 + 16) + 144LL))(*(void *)(a2 + 16));
      if ((void)v192)
      {
        int v89 = 0;
        unint64_t v90 = (unsigned int *)__p;
        uint64_t v91 = 40 * v192;
        do
        {
          int v92 = sub_10001CCB0(v90);
          if (v92 < 0) {
            break;
          }
          v89 += v92;
          v90 += 10;
          int v92 = v89;
          v91 -= 40LL;
        }

        while (v91);
      }

      else
      {
        int v92 = 0;
      }

      int v93 = v92 < 0 ? v92 : -5;
      uint64_t v94 = -v93;
      if (v110 != v92) {
        uint64_t v10 = -v94;
      }
    }

    if (*((void *)&v192 + 1) && v193 != __p) {
      operator delete(__p);
    }
  }

  char v95 = v128;
  if (v128)
  {
    uint64_t v96 = (unint64_t *)&v128->__shared_owners_;
    do
      unint64_t v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }

  uint64_t v98 = v127;
  if (v127)
  {
    v99 = (unint64_t *)&v127->__shared_owners_;
    do
      unint64_t v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }

  uint64_t v101 = v125;
  if (v125)
  {
    v102 = (unint64_t *)&v125->__shared_owners_;
    do
      unint64_t v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }

  v104 = v124;
  if (v124)
  {
    uint64_t v105 = (unint64_t *)&v124->__shared_owners_;
    do
      unint64_t v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }

  return v10;
}

void sub_1000C91A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x990])
  {
    if (a23 != STACK[0x980]) {
      operator delete((void *)STACK[0x980]);
    }
  }

  sub_10006337C((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void *sub_1000C92B4(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E53C0((uint64_t)a1, a2);
  *a1 = off_10018D2A8;
  a1[45] = &off_10018D3A8;
  a1[46] = &off_10018D3D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018D2A8;
  a1[45] = off_10018D330;
  a1[46] = off_10018D358;
  return a1;
}

void sub_1000C9338(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C935C(uint64_t a1)
{
  return a1;
}

void *sub_1000C939C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E543C((uint64_t)a1, a2);
  *a1 = off_10018D4C8;
  a1[45] = &off_10018D5C8;
  a1[46] = &off_10018D5F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018D4C8;
  a1[45] = off_10018D550;
  a1[46] = off_10018D578;
  return a1;
}

void sub_1000C9420(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C9444(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000C9484(uint64_t *a1)
{
  __int128 v3 = (void *)a1[5];
  unint64_t v2 = a1[6];
  if ((v2 & 0x8000000000000000LL) == 0 || !a1[6])
  {
    sub_10003C884(*a1, v2);
    uint64_t v4 = a1[2];
    if (*(_BYTE *)(v4 + 16))
    {
      uint64_t v5 = (void *)a1[3];
      if (*(void *)(*v5 + 352LL) != *(void *)(*(void *)v4 + 352LL) || v5[1] != *(void *)(v4 + 8))
      {
        char v6 = sub_1000C26AC((uint64_t)v3, a1[8], (void *)v4);
        unint64_t v7 = (_BYTE *)a1[4];
        BOOL v8 = (v6 & 1) != 0 || *v7 != 0;
        *unint64_t v7 = v8;
        uint64_t v4 = a1[2];
        if (v8)
        {
          uint64_t v9 = *(void *)(*(void *)v4 + 8LL);
          uint64_t v10 = v3[1];
          uint64_t v11 = *(void *)(v10 + 48);
          unsigned int v12 = *(_DWORD *)(v10 + 20);
          unint64_t v13 = *(unsigned __int16 *)(v10 + 18);
          unint64_t v14 = v11 * (v12 / v13);
          unint64_t v15 = v3[44] / v13;
          ++v11;
          uint64_t v16 = v11
              + v11
              * (((*(void *)(*(void *)v4 + 352LL)
                 + (*(void *)(v9 + 48) + *(void *)(v9 + 48) * *(void *)(v4 + 8))
                 / (unint64_t)(*(void *)(v9 + 48) + 1LL)
                 * *(unsigned int *)(v9 + 20))
                / *(unsigned __int16 *)(v9 + 18)
                - v15)
               / v14);
          __int128 v17 = (void *)a1[3];
          uint64_t v18 = *(void *)(*v17 + 8LL);
          if (v16 != v11
                    + v11
                    * (((*(void *)(*v17 + 352LL)
                       + (*(void *)(v18 + 48) + *(void *)(v18 + 48) * v17[1])
                       / (unint64_t)(*(void *)(v18 + 48) + 1LL)
                       * *(unsigned int *)(v18 + 20))
                      / *(unsigned __int16 *)(v18 + 18)
                      - v15)
                     / v14))
          {
            sub_1000C54A4(v3, a1[8], v16 - 1);
            *(_BYTE *)a1[4] = 0;
            uint64_t v4 = a1[2];
          }
        }
      }
    }

    uint64_t v19 = a1[3];
    if (*(_BYTE *)(v4 + 16))
    {
      *(void *)(v4 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(v19 + 8);
    }

    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v19;
      *(_BYTE *)(v4 + 16) = 1;
    }
  }

  return a1;
}

uint64_t sub_1000C9610(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v133 = a3[3];
  uint64_t v7 = *a3;
  BOOL v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v181 = *a3;
  __int128 v182 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  *(_OWORD *)__int128 v183 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v183[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v184 = a3[6];
  __int128 v185 = *(_OWORD *)(a3 + 7);
  __int128 v186 = *(_OWORD *)(a3 + 9);
  __int128 v187 = *(_OWORD *)(a3 + 11);
  char v188 = *((_BYTE *)a3 + 104);
  uint64_t v11 = (std::__shared_weak_count *)a3[15];
  uint64_t v189 = a3[14];
  uint64_t v190 = v11;
  if (v11)
  {
    unsigned int v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    BOOL v8 = v182;
  }

  __int128 v191 = *((_OWORD *)a3 + 8);
  uint64_t v192 = a3[18];
  char v193 = *((_BYTE *)a3 + 152);
  *(void *)&__int128 v194 = -78LL;
  LOBYTE(v233[0]) = 0;
  char v237 = 0;
  uint64_t v238 = v7;
  v239 = v8;
  if (v8)
  {
    unint64_t v14 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  *(_OWORD *)((char *)v240 + 9) = *(_OWORD *)&v183[9];
  v240[0] = *(_OWORD *)v183;
  __int128 v242 = v185;
  __int128 v243 = v186;
  uint64_t v241 = v184;
  char v245 = v188;
  __int128 v244 = v187;
  uint64_t v246 = v189;
  v247 = v190;
  if (v190)
  {
    uint64_t v16 = (unint64_t *)&v190->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  uint64_t v18 = &v266;
  __int128 v248 = v191;
  char v250 = v193;
  uint64_t v249 = v192;
  v251[0] = v7;
  v251[1] = v182;
  if (v182)
  {
    uint64_t v19 = (unint64_t *)&v182->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  *(_OWORD *)((char *)v252 + 9) = *(_OWORD *)&v183[9];
  v252[0] = *(_OWORD *)v183;
  __int128 v254 = v185;
  __int128 v255 = v186;
  uint64_t v253 = v184;
  __int128 v256 = v187;
  char v257 = v188;
  uint64_t v258 = v189;
  v259 = v190;
  if (v190)
  {
    size_t v21 = (unint64_t *)&v190->__shared_owners_;
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  uint64_t v137 = 0LL;
  char v262 = v193;
  __int128 v260 = v191;
  uint64_t v261 = v192;
  uint64_t v263 = a2;
  v264[0] = (uint64_t)&v265;
  v264[1] = 0LL;
  v264[2] = 16LL;
  LOBYTE(v266) = 0;
  char v267 = 0;
  v268 = &v271;
  uint64_t v269 = 0LL;
  uint64_t v270 = 16LL;
  uint64_t v272 = 0LL;
  v180[0] = (uint64_t)v233;
  v180[1] = (uint64_t)&v194;
  v180[2] = a2;
  while (!sub_10003B85C((uint64_t)&v181, a4))
  {
    *(void *)&__int128 v179 = sub_1000C2064(v6, *(unint64_t *)&v183[8]);
    *((void *)&v179 + 1) = v23;
    uint64_t v24 = *(void *)(v179 + 8);
    uint64_t v25 = *(void *)(v24 + 48);
    uint64_t v26 = *(unsigned int *)(v24 + 20);
    *(void *)&__int128 v273 = *(void *)(v179 + 352) + (v25 + v25 * v23) / (unint64_t)(v25 + 1) * v26;
    *((void *)&v273 + 1) = v273 + v26;
    v274[0] = 2;
    sub_10003CE10((uint64_t)&v181, (uint64_t)&v273, a4, (uint64_t)&v154);
    if (sub_10003B85C((uint64_t)&v154, (uint64_t)&v166))
    {
      *(void *)&__int128 v301 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
      *((void *)&v301 + 1) = 29LL;
      LODWORD(v302) = 16;
      sub_1000CAE90(&v273, &v301);
      sub_10000552C(&v298, (uint64_t)"Couldn't trim entry in read ", 28LL);
      sub_10011E9EC(&v298, &v181);
      std::ostream::~ostream(&v298, off_10018D7B0);
      sub_1000D9F5C((uint64_t)&v273);
      std::ios::~ios(v299);
      *(void *)&__int128 v194 = -34LL;
      int v27 = 3;
    }

    else
    {
      if (v267 && !sub_1000CC510(&v179, &v266) && (uint64_t v70 = sub_1000DA344((uint64_t)v233), v70 < 0) && (_DWORD)v70)
      {
        *(void *)&__int128 v149 = v70;
        *((void *)&v149 + 1) = v71;
        char v150 = v233;
        int v151 = 0;
        v152[0] = 0;
        char v153 = 0;
      }

      else
      {
        __int128 v266 = v179;
        char v267 = 1;
        unint64_t v28 = (unint64_t *)(*(void *)(v179 + 56) + 16LL * *((void *)&v179 + 1));
        BOOL v29 = sub_1000DCACC(v28);
        *(void *)&__int128 v301 = off_1001969C8;
        *((void *)&v301 + 1) = v28;
        LOBYTE(v302) = v29;
        if (v29)
        {
          uint64_t v30 = 0LL;
        }

        else
        {
          *(void *)&__int128 v220 = "di_asif::details::table::read(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)::data_entries_vectorizer_t::add_data_entry(const data_entry_t &)";
          *((void *)&v220 + 1) = 139LL;
          LODWORD(v221[0]) = 16;
          sub_1000DA414(&v273, &v220);
          sub_10000552C(&v298, (uint64_t)"Couldn't lock entry ", 20LL);
          sub_1000C5948(&v298, &v179);
          std::ostream::~ostream(&v298, off_10018D9D0);
          sub_1000DA604((uint64_t)&v273);
          std::ios::~ios(v299);
          uint64_t v30 = -5LL;
        }

        unint64_t v31 = atomic_load((unint64_t *)(*(void *)(v266 + 56) + 16LL * *((void *)&v266 + 1) + 8));
        *(void *)&__int128 v149 = v30;
        char v150 = v233;
        int v151 = v31 >> 62;
        sub_10011E748((uint64_t)v152, (uint64_t)&v301);
        char v153 = 1;
        sub_10011E7BC(&v301);
      }

      __int128 v194 = v149;
      if ((v149 & 0x8000000000000000LL) != 0 && (_DWORD)v194)
      {
LABEL_171:
        int v27 = 3;
      }

      else
      {
        switch(v151)
        {
          case 0:
          case 2:
            __int128 v32 = v154;
            if (*((void *)&v154 + 1))
            {
              unint64_t v33 = (unint64_t *)(*((void *)&v154 + 1) + 8LL);
              do
                unint64_t v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }

            *(_OWORD *)char v142 = v155[0];
            *(_OWORD *)&v142[9] = *(_OWORD *)((char *)v155 + 9);
            uint64_t v35 = v156;
            uint64_t v36 = v157;
            __int128 v143 = v158;
            __int128 v144 = v159;
            char v145 = v160;
            uint64_t v37 = *((void *)&v157 + 1);
            uint64_t v38 = v161;
            unint64_t v39 = v162;
            if (v162)
            {
              unint64_t v40 = (unint64_t *)&v162->__shared_owners_;
              do
                unint64_t v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }

            __int128 v146 = v163;
            unint64_t v147 = v164;
            char v148 = v165;
            uint64_t v42 = v166;
            char v43 = v167;
            if (v167)
            {
              unint64_t v44 = (unint64_t *)&v167->__shared_owners_;
              do
                unint64_t v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }

            *(_OWORD *)uint64_t v138 = v168[0];
            *(_OWORD *)&v138[9] = *(_OWORD *)((char *)v168 + 9);
            uint64_t v46 = v169;
            __int128 v47 = v170;
            uint64_t v48 = v174;
            __int128 v139 = v171;
            __int128 v140 = v172;
            char v141 = v173;
            uint64_t v49 = v175;
            if (v175)
            {
              unint64_t v50 = (unint64_t *)&v175->__shared_owners_;
              do
                unint64_t v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }

            uint64_t v52 = 0LL;
            int v53 = 0;
            uint64_t v54 = 0LL;
            __int128 v208 = v32;
            v209[0] = *(_OWORD *)v142;
            *(_OWORD *)((char *)v209 + 9) = *(_OWORD *)&v142[9];
            uint64_t v210 = v35;
            *(void *)&__int128 v211 = v36;
            __int128 v212 = v143;
            __int128 v213 = v144;
            char v214 = v145;
            *((void *)&v211 + 1) = v37;
            uint64_t v215 = v38;
            v216 = v39;
            __int128 v217 = v146;
            unint64_t v218 = v147;
            char v219 = v148;
            uint64_t v195 = v42;
            v196 = v43;
            v197[0] = *(_OWORD *)v138;
            *(_OWORD *)((char *)v197 + 9) = *(_OWORD *)&v138[9];
            uint64_t v198 = v46;
            __int128 v199 = v47;
            char v202 = v141;
            __int128 v200 = v139;
            __int128 v201 = v140;
            uint64_t v203 = v48;
            v204 = v49;
            __int128 v205 = v176;
            char v207 = v178;
            unint64_t v206 = v177;
            unint64_t v55 = v177;
            LOBYTE(v273) = 0;
            v299[160] = 0;
            while (!sub_10003B85C((uint64_t)&v208, (uint64_t)&v195))
            {
              if (v218 >= v55 || v54 == -1) {
                break;
              }
              if (sub_1000BE308())
              {
                *(void *)&__int128 v231 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1462:30)]";
                *((void *)&v231 + 1) = 104LL;
                int v232 = 2;
                sub_100018E78(&v301, &v231);
                sub_10000552C(&v306, (uint64_t)"sg: ", 4LL);
                sub_10011E9EC(&v306, &v208);
                std::ostream::~ostream(&v306, off_100172858);
                sub_100019104((uint64_t)&v301);
                std::ios::~ios(&v307);
              }

              *(void *)&__int128 v301 = 0LL;
              *((void *)&v301 + 1) = v55;
              LOBYTE(v302) = 2;
              sub_10007B490(&v208, (uint64_t)&v301, (uint64_t)&v231);
              int64_t v57 = sub_1000CC5DC(&v179, &v231);
              unint64_t v59 = v57;
              BOOL v60 = v57 >= 0 || (_DWORD)v57 == 0;
              char v61 = v60;
              if (v60)
              {
                uint64_t v18 = (__int128 *)v58;
                if (!v53) {
                  uint64_t v52 = (__int128 *)v58;
                }
                if (sub_10003DA10((uint64_t)&v208, (uint64_t)&v195, v58, v57))
                {
                  __int128 v220 = v208;
                  if (*((void *)&v208 + 1))
                  {
                    unint64_t v66 = (unint64_t *)(*((void *)&v208 + 1) + 8LL);
                    do
                      unint64_t v67 = __ldxr(v66);
                    while (__stxr(v67 + 1, v66));
                  }

                  v221[0] = v209[0];
                  *(_OWORD *)((char *)v221 + 9) = *(_OWORD *)((char *)v209 + 9);
                  __int128 v223 = v211;
                  __int128 v224 = v212;
                  __int128 v225 = v213;
                  char v226 = v214;
                  uint64_t v222 = v210;
                  v227[0] = v215;
                  v227[1] = v216;
                  if (v216)
                  {
                    char v68 = (unint64_t *)&v216->__shared_owners_;
                    do
                      unint64_t v69 = __ldxr(v68);
                    while (__stxr(v69 + 1, v68));
                  }

                  __int128 v228 = v217;
                  unint64_t v229 = v218;
                  char v230 = v219;
                  sub_10003D9D4((uint64_t)&v220, (uint64_t)&v195, (uint64_t)v18, v59, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v301);
                  sub_100018F60((uint64_t)&v273, (uint64_t)&v301);
                  sub_100018FA4((uint64_t)&v301);
                  sub_100006224((uint64_t)v227);
                  sub_100006224((uint64_t)&v220);
                  sub_10003BD04((uint64_t)&v273, (uint64_t)&v301);
                  sub_100018FFC((uint64_t)&v208, (uint64_t)&v301);
                  sub_100006224((uint64_t)v305);
                  sub_100006224((uint64_t)&v301);
                  sub_10003BA04((uint64_t)&v273, (uint64_t)&v301);
                  sub_100018FFC((uint64_t)&v195, (uint64_t)&v301);
                  sub_100006224((uint64_t)v305);
                  sub_100006224((uint64_t)&v301);
                }

                sub_10003CA5C((uint64_t)&v208, v59);
                v54 += v59;
                int v53 = 1;
              }

              else
              {
                else {
                  uint64_t v65 = -(int)v57;
                }
                uint64_t v136 = -v65;
              }

              unint64_t v62 = (std::__shared_weak_count *)*((void *)&v231 + 1);
              if (*((void *)&v231 + 1))
              {
                int64_t v63 = (unint64_t *)(*((void *)&v231 + 1) + 8LL);
                do
                  unint64_t v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }

              if ((v61 & 1) == 0) {
                goto LABEL_90;
              }
            }

            if (v53) {
              uint64_t v18 = v52;
            }
            else {
              uint64_t v18 = 0LL;
            }
            uint64_t v136 = v54;
LABEL_90:
            sub_100019A28((uint64_t)&v273);
            uint64_t v72 = v204;
            uint64_t v6 = a1;
            if (v204)
            {
              __int128 v73 = (unint64_t *)&v204->__shared_owners_;
              do
                unint64_t v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }

            unint64_t v75 = v196;
            uint64_t v5 = a2;
            if (v196)
            {
              unint64_t v76 = (unint64_t *)&v196->__shared_owners_;
              do
                unint64_t v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }

            uint64_t v78 = v216;
            if (v216)
            {
              unint64_t v79 = (unint64_t *)&v216->__shared_owners_;
              do
                unint64_t v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }

            int v81 = (std::__shared_weak_count *)*((void *)&v208 + 1);
            if (*((void *)&v208 + 1))
            {
              unint64_t v82 = (unint64_t *)(*((void *)&v208 + 1) + 8LL);
              do
                unint64_t v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }

            *(void *)&__int128 v194 = v136;
            *((void *)&v194 + 1) = v18;
            uint64_t v18 = &v266;
            goto LABEL_169;
          case 1:
            goto LABEL_166;
          case 3:
            uint64_t v84 = *(void *)(v179 + 8);
            unint64_t v85 = (*(void *)(v179 + 352)
                 + (*(void *)(v84 + 48) + *(void *)(v84 + 48) * *((void *)&v179 + 1))
                 / (unint64_t)(*(void *)(v84 + 48) + 1LL)
            if (!v237)
            {
              uint64_t v86 = 0LL;
LABEL_115:
              *(void *)&__int128 v301 = 0LL;
              *((void *)&v301 + 1) = v6;
              v302 = &v304;
              __int128 v303 = xmmword_100142520;
              sub_1000C2AF8(v6, v263, v85, 0, 1LL, (unint64_t *)&v220);
              sub_1000C30B4((unint64_t *)&v301, (unint64_t *)&v220);
              sub_1000C1AC8((unint64_t *)&v220);
              uint64_t v18 = &v266;
              if ((void)v301 && !*(_BYTE *)(v301 + 344))
              {
                sub_1000DB7A8((unint64_t *)&v273, (unint64_t *)&v301);
                *((void *)&v273 + 1) = *((void *)&v301 + 1);
                *(void *)v274 = &v274[24];
                *(_OWORD *)&v274[8] = xmmword_100142520;
                *(void *)&__int128 v220 = v302;
                *(void *)&__int128 v208 = &v302[40 * v303];
                sub_1000DBAA8((uint64_t *)v274, (uint64_t *)&v220, (uint64_t *)&v208);
                char v88 = 1;
              }

              else
              {
                uint64_t v87 = std::generic_category();
                char v88 = 0;
                *(void *)&__int128 v273 = 5LL;
                *((void *)&v273 + 1) = v87;
              }

              char v300 = v88;
              sub_1000DAC04((uint64_t)&v301);
              if (!v300)
              {
                else {
                  uint64_t v125 = -(int)v273;
                }
                uint64_t v86 = -v125;
                goto LABEL_164;
              }

              if (v237)
              {
                sub_1000DAC04((uint64_t)v233);
                char v237 = 0;
              }

              sub_1000DB7A8(v233, (unint64_t *)&v273);
              v233[1] = *((void *)&v273 + 1);
              v234 = &v236;
              __int128 v235 = xmmword_100142520;
              *(void *)&__int128 v301 = *(void *)v274;
              *(void *)&__int128 v220 = *(void *)v274 + 320LL * *(void *)&v274[8];
              sub_1000DBAA8((uint64_t *)&v234, (uint64_t *)&v301, (uint64_t *)&v220);
              char v237 = 1;
              if (v300) {
                sub_1000DAC04((uint64_t)&v273);
              }
              goto LABEL_129;
            }

            if (*(void *)(v233[0] + 40) == (v85
                                             - *(void *)(v6 + 352)
                                             / (unint64_t)*(unsigned __int16 *)(*(void *)(v6 + 8) + 18LL))
                                            / (*(void *)(*(void *)(v6 + 8) + 48LL)
                                             * (unint64_t)(*(_DWORD *)(*(void *)(v6 + 8) + 20LL)
                                                                / *(unsigned __int16 *)(*(void *)(v6 + 8) + 18LL))))
            {
              uint64_t v86 = 0LL;
              goto LABEL_129;
            }

            uint64_t v89 = sub_1000DABB0((uint64_t)v233);
            uint64_t v86 = v89;
            if (v89 < 0 && (_DWORD)v89)
            {
              uint64_t v18 = &v266;
              goto LABEL_164;
            }

            uint64_t v136 = v90;
            if (!v237) {
              goto LABEL_115;
            }
LABEL_129:
            __int128 v273 = v154;
            if (*((void *)&v154 + 1))
            {
              uint64_t v91 = (unint64_t *)(*((void *)&v154 + 1) + 8LL);
              do
                unint64_t v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }

            *(_OWORD *)v274 = v155[0];
            *(_OWORD *)&v274[9] = *(_OWORD *)((char *)v155 + 9);
            __int128 v276 = v157;
            __int128 v277 = v158;
            __int128 v278 = v159;
            char v279 = v160;
            uint64_t v275 = v156;
            uint64_t v280 = v161;
            v281 = v162;
            if (v162)
            {
              int v93 = (unint64_t *)&v162->__shared_owners_;
              do
                unint64_t v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
            }

            __int128 v282 = v163;
            unint64_t v283 = v164;
            char v284 = v165;
            uint64_t v285 = v166;
            v286 = v167;
            if (v167)
            {
              char v95 = (unint64_t *)&v167->__shared_owners_;
              do
                unint64_t v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }

            v287[0] = v168[0];
            *(_OWORD *)((char *)v287 + 9) = *(_OWORD *)((char *)v168 + 9);
            __int128 v289 = v170;
            __int128 v290 = v171;
            __int128 v291 = v172;
            char v292 = v173;
            uint64_t v288 = v169;
            uint64_t v293 = v174;
            v294 = v175;
            if (v175)
            {
              unint64_t v97 = (unint64_t *)&v175->__shared_owners_;
              do
                unint64_t v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
            }

            __int128 v295 = v176;
            unint64_t v296 = v177;
            char v297 = v178;
            if ((void)v235 == *((void *)&v235 + 1))
            {
              sub_1000DBDB4((uint64_t *)&v234, (uint64_t)&v234[40 * v235], 1LL, (uint64_t)&v273, &v301);
            }

            else
            {
              __n128 v99 = sub_1000DBE60((uint64_t)&v234[40 * v235], (uint64_t)&v273);
              *(void *)&__int128 v235 = v235 + 1;
            }

            unint64_t v100 = v294;
            if (v294)
            {
              uint64_t v101 = (unint64_t *)&v294->__shared_owners_;
              do
                unint64_t v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v100->__on_zero_shared)(v100, v99);
                std::__shared_weak_count::__release_weak(v100);
              }
            }

            unint64_t v103 = v286;
            if (v286)
            {
              v104 = (unint64_t *)&v286->__shared_owners_;
              do
                unint64_t v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v103->__on_zero_shared)(v103, v99);
                std::__shared_weak_count::__release_weak(v103);
              }
            }

            unint64_t v106 = v281;
            if (v281)
            {
              v107 = (unint64_t *)&v281->__shared_owners_;
              do
                unint64_t v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, v99);
                std::__shared_weak_count::__release_weak(v106);
              }
            }

            uint64_t v109 = (std::__shared_weak_count *)*((void *)&v273 + 1);
            if (*((void *)&v273 + 1))
            {
              uint64_t v110 = (unint64_t *)(*((void *)&v273 + 1) + 8LL);
              do
                unint64_t v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v99);
                std::__shared_weak_count::__release_weak(v109);
              }
            }

            uint64_t v18 = &v266;
            uint64_t v90 = v136;
LABEL_164:
            *(void *)&__int128 v194 = v86;
            *((void *)&v194 + 1) = v90;
            if ((v86 & 0x8000000000000000LL) == 0 || !(_DWORD)v86)
            {
LABEL_166:
              sub_1000CAF78(&v179, v5, (uint64_t)&v154, (uint64_t)&v166, v264, (unint64_t *)&v273);
              __int128 v194 = v273;
              if ((v273 & 0x8000000000000000LL) == 0 || !(_DWORD)v194) {
                v272 += *(void *)v274;
              }
            }

LABEL_169:
            uint64_t v112 = v194;
            if ((v194 & 0x8000000000000000LL) != 0 && (_DWORD)v194) {
              goto LABEL_171;
            }
            sub_10003C884((uint64_t)&v181, v194);
            v137 += v112;
            sub_1000DA4FC((uint64_t)v251, (uint64_t)&v181);
            int v27 = 0;
            break;
          default:
            goto LABEL_169;
        }
      }

      sub_1000CBE98((uint64_t)&v149);
    }

    __int128 v113 = v175;
    if (v175)
    {
      __int128 v114 = (unint64_t *)&v175->__shared_owners_;
      do
        unint64_t v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }

    __int128 v116 = v167;
    if (v167)
    {
      __int128 v117 = (unint64_t *)&v167->__shared_owners_;
      do
        unint64_t v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }

    char v119 = v162;
    if (v162)
    {
      __int128 v120 = (unint64_t *)&v162->__shared_owners_;
      do
        unint64_t v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }

    char v122 = (std::__shared_weak_count *)*((void *)&v154 + 1);
    if (!*((void *)&v154 + 1)) {
      goto LABEL_193;
    }
    uint64_t v123 = (unint64_t *)(*((void *)&v154 + 1) + 8LL);
    do
      unint64_t v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
      if (v27) {
        break;
      }
    }

    else
    {
LABEL_193:
      if (v27) {
        break;
      }
    }
  }

  if ((v194 & 0x8000000000000000LL) == 0 || !(_DWORD)v194)
  {
    *(void *)&__int128 v194 = v137;
    *((void *)&v194 + 1) = v133;
  }

  sub_1000CBF58(v180);
  sub_1000CBFA8((uint64_t)v233);
  uint64_t v126 = v190;
  if (v190)
  {
    v127 = (unint64_t *)&v190->__shared_owners_;
    do
      unint64_t v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }

  uint64_t v129 = v182;
  if (v182)
  {
    v130 = (unint64_t *)&v182->__shared_owners_;
    do
      unint64_t v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }

  return v194;
}

void sub_1000CAC74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void *sub_1000CAE90(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E54B8((uint64_t)a1, a2);
  *a1 = off_10018D6E8;
  a1[45] = &off_10018D7E8;
  a1[46] = &off_10018D810;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018D6E8;
  a1[45] = off_10018D770;
  a1[46] = off_10018D798;
  return a1;
}

void sub_1000CAF14(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CAF38(uint64_t a1)
{
  return a1;
}

void sub_1000CAF78( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v9 = *(void *)(*a1 + 8LL);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)&__int128 v229 = *(void *)(*a1 + 352LL) + (v10 + v10 * a1[1]) / (unint64_t)(v10 + 1) * v11;
  *((void *)&v229 + 1) = v229 + v11;
  LOBYTE(v230[0]) = 2;
  sub_10003CE10(a3, (uint64_t)&v229, a4, (uint64_t)&v149);
  if (sub_10003B85C((uint64_t)&v149, (uint64_t)&v163))
  {
    *a6 = -34LL;
    a6[2] = 0LL;
  }

  else
  {
    uint64_t v12 = v149;
    if ((*(void *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL)
       * *(unsigned int *)(*(void *)(*a1 + 8LL) + 20LL))
    {
      unint64_t v13 = v150;
      if (v150)
      {
        p_shared_owners = (unint64_t *)&v150->__shared_owners_;
        do
          unint64_t v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }

      *(_OWORD *)uint64_t v133 = v151[0];
      *(_OWORD *)&v133[9] = *(_OWORD *)((char *)v151 + 9);
      uint64_t v16 = v152;
      uint64_t v17 = v153;
      uint64_t v18 = v154;
      __int128 v134 = v155;
      __int128 v135 = v156;
      char v136 = v157;
      uint64_t v19 = v158;
      unint64_t v20 = v159;
      if (v159)
      {
        size_t v21 = (unint64_t *)&v159->__shared_owners_;
        do
          unint64_t v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }

      uint64_t v126 = a6;
      __int128 v137 = v160;
      unint64_t v138 = v161;
      char v139 = v162;
      __int128 v23 = v163;
      if (*((void *)&v163 + 1))
      {
        uint64_t v24 = (unint64_t *)(*((void *)&v163 + 1) + 8LL);
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }

      *(_OWORD *)uint64_t v129 = v164[0];
      *(_OWORD *)&v129[9] = *(_OWORD *)((char *)v164 + 9);
      uint64_t v26 = v165;
      __int128 v27 = v166;
      __int128 v130 = v167;
      __int128 v131 = v168;
      char v132 = v169;
      uint64_t v28 = v170;
      BOOL v29 = v171;
      if (v171)
      {
        uint64_t v30 = (unint64_t *)&v171->__shared_owners_;
        do
          unint64_t v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }

      unint64_t v127 = 0LL;
      unint64_t v32 = 0LL;
      int v33 = 0;
      unint64_t v34 = 0LL;
      v189[0] = *(_OWORD *)v133;
      *(_OWORD *)((char *)v189 + 9) = *(_OWORD *)&v133[9];
      __int128 v192 = v134;
      __int128 v193 = v135;
      __int128 v197 = v137;
      v176[0] = *(_OWORD *)v129;
      *(_OWORD *)((char *)v176 + 9) = *(_OWORD *)&v129[9];
      __int128 v180 = v131;
      __int128 v179 = v130;
      uint64_t v187 = v12;
      char v188 = v13;
      uint64_t v190 = v16;
      *(void *)&__int128 v191 = v17;
      *((void *)&v191 + 1) = v18;
      char v194 = v136;
      uint64_t v195 = v19;
      v196 = v20;
      unint64_t v198 = v138;
      char v199 = v139;
      __int128 v175 = v23;
      uint64_t v177 = v26;
      __int128 v178 = v27;
      char v181 = v132;
      uint64_t v182 = v28;
      __int128 v183 = v29;
      __int128 v184 = v172;
      char v186 = v174;
      unint64_t v185 = v173;
      unint64_t v35 = v173;
      LOBYTE(v229) = 0;
      char v242 = 0;
      while (!sub_10003B85C((uint64_t)&v187, (uint64_t)&v175))
      {
        if (v198 >= v35 || v34 == -1LL) {
          break;
        }
        if (sub_1000BE308())
        {
          *(void *)&__int128 v245 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1729:32)]";
          *((void *)&v245 + 1) = 104LL;
          LODWORD(v246) = 2;
          sub_100018E78(&v211, &v245);
          sub_10000552C(&v223, (uint64_t)"sg: ", 4LL);
          sub_10011E9EC(&v223, &v187);
          std::ostream::~ostream(&v223, off_100172858);
          sub_100019104((uint64_t)&v211);
          std::ios::~ios(&v224);
        }

        *(void *)&__int128 v211 = 0LL;
        *((void *)&v211 + 1) = v35;
        v212[0] = 2;
        sub_10007B490(&v187, (uint64_t)&v211, (uint64_t)&v225);
        int64_t v37 = v226;
        uint64_t v38 = *(void *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8);
        unint64_t v39 = *(unsigned int *)(*(void *)(*a1 + 8LL) + 20LL);
        unint64_t v40 = v227;
        uint64_t v41 = v228;
        __int128 v211 = v225;
        if (*((void *)&v225 + 1))
        {
          uint64_t v42 = (unint64_t *)(*((void *)&v225 + 1) + 8LL);
          do
            unint64_t v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }

        *(void *)__int128 v212 = v37;
        *(void *)&v212[8] = v40 % v39 + (v38 & 0x7FFFFFFFFFFFFFLL) * v39;
        *(void *)&v212[16] = v41;
        v212[24] = 0;
        uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40LL))(*(void *)(a2 + 16));
        v243[0] = 0LL;
        v243[1] = v44;
        char v244 = 2;
        sub_10007B490(&v211, (uint64_t)v243, (uint64_t)&v245);
        if (v246)
        {
          (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(a2 + 16) + 128LL))( v243,  *(void *)(a2 + 16),  &v245);
          uint64_t v45 = a5[1];
          if (v45 == a5[2])
          {
            sub_10001EAB8(a5, *a5 + 40 * v45, 1LL, (uint64_t)v243, &v247);
          }

          else
          {
            sub_10001C2DC(*a5 + 40 * v45, (uint64_t)v243);
            ++a5[1];
          }

          v127 += v246;
        }

        unint64_t v46 = v227;
        int64_t v47 = v226;
        uint64_t v48 = (std::__shared_weak_count *)*((void *)&v245 + 1);
        if (*((void *)&v245 + 1))
        {
          uint64_t v49 = (unint64_t *)(*((void *)&v245 + 1) + 8LL);
          do
            unint64_t v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }

        unint64_t v51 = (std::__shared_weak_count *)*((void *)&v211 + 1);
        if (*((void *)&v211 + 1))
        {
          uint64_t v52 = (unint64_t *)(*((void *)&v211 + 1) + 8LL);
          do
            unint64_t v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }

        BOOL v54 = v47 >= 0 || (_DWORD)v47 == 0;
        char v55 = v54;
        if (v54)
        {
          if (!v33) {
            unint64_t v32 = v46;
          }
          if (sub_10003DA10((uint64_t)&v187, (uint64_t)&v175, v46, v47))
          {
            v200[0] = v187;
            v200[1] = v188;
            if (v188)
            {
              BOOL v60 = (unint64_t *)&v188->__shared_owners_;
              do
                unint64_t v61 = __ldxr(v60);
              while (__stxr(v61 + 1, v60));
            }

            v201[0] = v189[0];
            *(_OWORD *)((char *)v201 + 9) = *(_OWORD *)((char *)v189 + 9);
            __int128 v203 = v191;
            __int128 v204 = v192;
            __int128 v205 = v193;
            char v206 = v194;
            uint64_t v202 = v190;
            v207[0] = v195;
            v207[1] = v196;
            if (v196)
            {
              unint64_t v62 = (unint64_t *)&v196->__shared_owners_;
              do
                unint64_t v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }

            __int128 v208 = v197;
            unint64_t v209 = v198;
            char v210 = v199;
            sub_10003D9D4((uint64_t)v200, (uint64_t)&v175, v46, v47, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v211);
            sub_100018F60((uint64_t)&v229, (uint64_t)&v211);
            sub_100018FA4((uint64_t)&v211);
            sub_100006224((uint64_t)v207);
            sub_100006224((uint64_t)v200);
            sub_10003BD04((uint64_t)&v229, (uint64_t)&v211);
            sub_100018FFC((uint64_t)&v187, (uint64_t)&v211);
            sub_100006224((uint64_t)&v218);
            sub_100006224((uint64_t)&v211);
            sub_10003BA04((uint64_t)&v229, (uint64_t)&v211);
            sub_100018FFC((uint64_t)&v175, (uint64_t)&v211);
            sub_100006224((uint64_t)&v218);
            sub_100006224((uint64_t)&v211);
          }

          sub_10003CA5C((uint64_t)&v187, v47);
          v34 += v47;
          int v33 = 1;
        }

        else
        {
          else {
            uint64_t v59 = -(int)v47;
          }
          unint64_t v125 = -v59;
        }

        uint64_t v56 = (std::__shared_weak_count *)*((void *)&v225 + 1);
        if (*((void *)&v225 + 1))
        {
          int64_t v57 = (unint64_t *)(*((void *)&v225 + 1) + 8LL);
          do
            unint64_t v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }

        if ((v55 & 1) == 0) {
          goto LABEL_76;
        }
      }

      if (v33) {
        unint64_t v46 = v32;
      }
      else {
        unint64_t v46 = 0LL;
      }
      unint64_t v125 = v34;
LABEL_76:
      sub_100019A28((uint64_t)&v229);
      unint64_t v64 = v183;
      if (v183)
      {
        uint64_t v65 = (unint64_t *)&v183->__shared_owners_;
        do
          unint64_t v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }

      unint64_t v67 = (std::__shared_weak_count *)*((void *)&v175 + 1);
      if (*((void *)&v175 + 1))
      {
        char v68 = (unint64_t *)(*((void *)&v175 + 1) + 8LL);
        do
          unint64_t v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }

      uint64_t v70 = v196;
      if (v196)
      {
        uint64_t v71 = (unint64_t *)&v196->__shared_owners_;
        do
          unint64_t v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

      __int128 v73 = v188;
      if (v188)
      {
        unint64_t v74 = (unint64_t *)&v188->__shared_owners_;
        do
          unint64_t v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }

      unint64_t *v126 = v125;
      v126[1] = v46;
      if ((v125 & 0x8000000000000000LL) != 0 && (_DWORD)v125) {
        v126[2] = 0LL;
      }
      else {
        v126[2] = v127;
      }
    }

    else
    {
      unint64_t v76 = v150;
      __int128 v140 = v150;
      if (v150)
      {
        unint64_t v77 = (unint64_t *)&v150->__shared_owners_;
        do
          unint64_t v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }

      *(_OWORD *)char v141 = v151[0];
      *(_OWORD *)&v141[9] = *(_OWORD *)((char *)v151 + 9);
      uint64_t v79 = v152;
      uint64_t v80 = v153;
      uint64_t v81 = v154;
      __int128 v142 = v155;
      __int128 v143 = v156;
      char v144 = v157;
      uint64_t v82 = v158;
      unint64_t v83 = v159;
      char v145 = v159;
      if (v159)
      {
        uint64_t v84 = (unint64_t *)&v159->__shared_owners_;
        do
          unint64_t v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }

      __int128 v146 = v160;
      unint64_t v147 = v161;
      char v148 = v162;
      *(void *)&__int128 v229 = v12;
      *((void *)&v229 + 1) = v76;
      if (v76)
      {
        uint64_t v86 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }

      v230[0] = *(_OWORD *)v141;
      *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)&v141[9];
      __int128 v234 = v142;
      uint64_t v231 = v79;
      uint64_t v232 = v80;
      uint64_t v233 = v81;
      __int128 v235 = v143;
      char v236 = v144;
      uint64_t v237 = v82;
      uint64_t v238 = v83;
      if (v83)
      {
        char v88 = (unint64_t *)&v83->__shared_owners_;
        do
          unint64_t v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }

      __int128 v239 = v146;
      unint64_t v240 = v147;
      char v241 = v148;
      __int128 v211 = v163;
      if (*((void *)&v163 + 1))
      {
        uint64_t v90 = (unint64_t *)(*((void *)&v163 + 1) + 8LL);
        do
          unint64_t v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }

      *(_OWORD *)__int128 v212 = v164[0];
      *(_OWORD *)&v212[9] = *(_OWORD *)((char *)v164 + 9);
      uint64_t v213 = v165;
      __int128 v214 = v166;
      __int128 v215 = v167;
      __int128 v216 = v168;
      char v217 = v169;
      uint64_t v218 = v170;
      char v219 = v171;
      if (v171)
      {
        unint64_t v92 = (unint64_t *)&v171->__shared_owners_;
        do
          unint64_t v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }

      __int128 v220 = v172;
      unint64_t v221 = v173;
      char v222 = v174;
      unint64_t v94 = sub_1000DCC44((uint64_t (*)(__int128 *))sub_10007B464, &v229, &v211, 0xFFFFFFFFFFFFFFFFLL);
      unint64_t v96 = v95;
      unint64_t v97 = v219;
      if (v219)
      {
        unint64_t v98 = (unint64_t *)&v219->__shared_owners_;
        do
          unint64_t v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }

      unint64_t v100 = (std::__shared_weak_count *)*((void *)&v211 + 1);
      if (*((void *)&v211 + 1))
      {
        uint64_t v101 = (unint64_t *)(*((void *)&v211 + 1) + 8LL);
        do
          unint64_t v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }

      unint64_t v103 = v238;
      if (v238)
      {
        v104 = (unint64_t *)&v238->__shared_owners_;
        do
          unint64_t v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }

      unint64_t v106 = (std::__shared_weak_count *)*((void *)&v229 + 1);
      if (*((void *)&v229 + 1))
      {
        v107 = (unint64_t *)(*((void *)&v229 + 1) + 8LL);
        do
          unint64_t v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }

      *a6 = v94;
      a6[1] = v96;
      a6[2] = 0LL;
      if (v145)
      {
        uint64_t v109 = (unint64_t *)&v145->__shared_owners_;
        do
          unint64_t v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }

      if (v140)
      {
        unint64_t v111 = (unint64_t *)&v140->__shared_owners_;
        do
          unint64_t v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
    }
  }

  __int128 v113 = v171;
  if (v171)
  {
    __int128 v114 = (unint64_t *)&v171->__shared_owners_;
    do
      unint64_t v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }

  __int128 v116 = (std::__shared_weak_count *)*((void *)&v163 + 1);
  if (*((void *)&v163 + 1))
  {
    __int128 v117 = (unint64_t *)(*((void *)&v163 + 1) + 8LL);
    do
      unint64_t v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }

  char v119 = v159;
  if (v159)
  {
    __int128 v120 = (unint64_t *)&v159->__shared_owners_;
    do
      unint64_t v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }

  char v122 = v150;
  if (v150)
  {
    uint64_t v123 = (unint64_t *)&v150->__shared_owners_;
    do
      unint64_t v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }

void sub_1000CBD88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

uint64_t sub_1000CBE98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(_BYTE *)(v2 + 6184) && (*(_DWORD *)(a1 + 24) | 2) != 2)
    {
      uint64_t v3 = *(void *)(v2 + 6200);
      if (v3 == *(void *)(v2 + 6208))
      {
        sub_1000DC1C4((uint64_t *)(v2 + 6192), *(void *)(v2 + 6192) + 24 * v3, 1LL, a1 + 32, &v5);
      }

      else
      {
        sub_10011E748(*(void *)(v2 + 6192) + 24 * v3, a1 + 32);
        ++*(void *)(v2 + 6200);
      }
    }

    if (*(_BYTE *)(a1 + 56)) {
      sub_10011E7BC(a1 + 32);
    }
  }

  return a1;
}

uint64_t *sub_1000CBF58(uint64_t *a1)
{
  uint64_t v2 = sub_1000DABB0(*a1);
  if (v2 < 0)
  {
    if ((_DWORD)v2)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      if ((*v4 & 0x8000000000000000LL) == 0 || !*v4)
      {
        *uint64_t v4 = v2;
        v4[1] = v3;
      }
    }
  }

  return a1;
}

uint64_t sub_1000CBFA8(uint64_t a1)
{
  if (*(void *)(a1 + 5520))
  {
    uint64_t v2 = *(void **)(a1 + 5504);
  }

  sub_100006224(a1 + 5440);
  sub_100006224(a1 + 5328);
  sub_100006224(a1 + 5280);
  sub_100006224(a1 + 5168);
  if (*(_BYTE *)(a1 + 5160)) {
    sub_1000DAC04(a1);
  }
  return a1;
}

uint64_t sub_1000CC040(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24LL);
  unint64_t v14 = off_10018B4F8;
  uint64_t v15 = v3;
  uint64_t v4 = (uint64_t)&v16;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v3 + 16) + 72LL))(&v16);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    char v6 = 0;
    uint64_t v4 = 4294967290LL;
  }

  else
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t, void))(*(void *)v16 + 16LL))(v16, 0LL);
    if ((_DWORD)v5)
    {
      sub_1000A3900((uint64_t)&v14);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v12 = exception;
      else {
        uint64_t v5 = -(int)v5;
      }
      void *exception = &off_100196FC8;
      unint64_t v13 = std::generic_category();
      v12[1] = v5;
      v12[2] = v13;
      *((_BYTE *)v12 + 24) = 0;
      *((_BYTE *)v12 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v12[7] = "Can't flush asif on bitmap close, backend flush failed";
    }

    sub_1000C6668(a1, (uint64_t)&v14);
    char v6 = 1;
  }

  unint64_t v14 = off_10018B4F8;
  uint64_t v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) == 0) {
        return v4;
      }
      return 0LL;
    }
  }

  if ((v6 & 1) != 0) {
    return 0LL;
  }
  return v4;
}

void *sub_1000CC24C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E5534((uint64_t)a1, a2);
  *a1 = off_10018DB28;
  a1[45] = &off_10018DC28;
  a1[46] = &off_10018DC50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018DB28;
  a1[45] = off_10018DBB0;
  a1[46] = off_10018DBD8;
  return a1;
}

void sub_1000CC2D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CC2F4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000CC334(void *a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, int a6)
{
  if (a5 != a4)
  {
    unint64_t v10 = sub_1000CC3F0(a2, a4, a5 - a4);
    unsigned int v11 = v10;
    unint64_t v12 = HIDWORD(v10);
    uint64_t v13 = (uint64_t)(a1 + 4);
    if (a6)
    {
      __int16 v17 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t v14 = sub_100097070(v13, v11, v12, (unsigned __int8 *)&v17);
    }

    else
    {
      __int16 v16 = a3 & 1 | (((a3 & 2) != 0) << 8);
      unint64_t v14 = sub_100096E40(v13, v11, v12, (unsigned __int8 *)&v16);
    }

    return *(void *)(a2 + 352)
         + *a1
         / (unint64_t)(*(void *)(*(void *)(a2 + 8) + 48LL) + 1LL)
         * *(void *)(*(void *)(a2 + 8) + 48LL)
  }

  return a4;
}

unint64_t sub_1000CC3F0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(unsigned __int16 *)(v3 + 18);
  if (v4 <= a3) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = *(unsigned __int16 *)(v3 + 18);
  }
  if (!a3) {
    unint64_t v5 = 0LL;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 20);
  uint64_t v7 = *(void *)(v3 + 48);
  return ((2
         * ((a2
                         - (*(void *)(a1 + 352)
                          + v7
                          * v6
                          * ((a2 / v4 - *(void *)(a1 + 352) / v4)
                           / (v7
                            * (unint64_t)(v6 / v4)))))
                        / v4)) | (((v5
                                  + a2
                                  - v4
                                  - (*(void *)(a1 + 352)
                                   + ((v5 + a2 - v4) / v4 - *(void *)(a1 + 352) / v4)
                                   / (v7
                                    * (unint64_t)(v6 / v4))
                                   * v7
                                   * v6))
                                 / v4) << 33))
       + 0x200000000LL;
}

uint64_t sub_1000CC470@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (unint64_t *)result;
  while (*v4)
  {
LABEL_9:
    __n128 result = sub_1000DCB58(v4, 1);
    if ((result & 1) == 0)
    {
      char v7 = 0;
      goto LABEL_11;
    }
  }

  while (1)
  {
    unint64_t v6 = __ldaxr(v4);
    if (!v6) {
      break;
    }
    __clrex();
LABEL_8:
    if (v6) {
      goto LABEL_9;
    }
  }

  if (__stlxr(0xFFFFFFFFFFFFFFFFLL, v4)) {
    goto LABEL_8;
  }
  char v7 = 1;
LABEL_11:
  *(_BYTE *)(a3 + 16) = v7;
  *(void *)a3 = off_1001969E8;
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  *(void *)(a3 + 24) = a2;
  return result;
}

BOOL sub_1000CC510(void *a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(*a1 + 8LL) + 20LL);
  uint64_t v3 = (*(void *)(*(void *)(*a1 + 56LL) + 16LL * a1[1] + 8) & 0x7FFFFFFFFFFFFFLL) * v2;
  uint64_t v4 = (*(void *)(*(void *)(*a2 + 56LL) + 16LL * a2[1] + 8) & 0x7FFFFFFFFFFFFFLL)
     * *(unsigned int *)(*(void *)(*a2 + 8LL) + 20LL);
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  return v5 || v3 == v4 + v2;
}

uint64_t sub_1000CC574(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0LL;
  }
  LODWORD(sub_10009FEE4((uint64_t *)va, v2) = 0;
  uint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = 40 * v1;
  while (1)
  {
    uint64_t v5 = sub_10001CCB0(v3);
    if ((v5 & 0x80000000) != 0) {
      break;
    }
    uint64_t v2 = (v5 + v2);
    v3 += 10;
    v4 -= 40LL;
    if (!v4) {
      return v2;
    }
  }

  return v5;
}

size_t sub_1000CC5DC(void *a1, void *a2)
{
  uint64_t v2 = *(void *)(*a1 + 8LL);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(unsigned int *)(v2 + 20);
  v10[0] = *(void *)(*a1 + 352LL) + (v3 + v3 * a1[1]) / (unint64_t)(v3 + 1) * v4;
  v10[1] = v10[0] + v4;
  char v11 = 2;
  sub_10007B490(a2, (uint64_t)v10, (uint64_t)&v12);
  if (v14)
  {
    bzero(v12, v14);
    size_t v5 = v14;
  }

  else
  {
    size_t v5 = -34LL;
  }

  unint64_t v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return v5;
}

uint64_t sub_1000CC6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(_BYTE *)(a1 + 113)) {
    goto LABEL_23;
  }
  *(_BYTE *)(a1 + 113) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    uint64_t v22 = v9;
    __int128 v23 = v10;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    uint64_t v24 = a4;
    uint64_t v25 = v6;
    uint64_t v26 = a4;
    char v27 = 1;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  else
  {
    uint64_t v22 = v9;
    __int128 v23 = 0LL;
    uint64_t v24 = a4;
    uint64_t v25 = v6;
    uint64_t v26 = a4;
    char v27 = 1;
  }

  int v15 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 80LL))(*(void *)(a2 + 16), &v22);
  uint64_t v16 = v24;
  if (v24 != v15)
  {
    *(_BYTE *)(a1 + 113) = 1;
    sub_1000A3900(a2);
    if (v15 < 0) {
      a4 = v15;
    }
    else {
      a4 = -v15;
    }
  }

  __int16 v17 = v23;
  if (v23)
  {
    uint64_t v18 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if (v16 == v15)
  {
LABEL_23:
    a4 = 0LL;
    if (a3)
    {
      if (*(_BYTE *)(a1 + 112))
      {
        *(_BYTE *)(a1 + sub_100006224(v4 - 112) = 0;
        sub_1000C3BAC(a3, *(void *)a1, *(void *)(a1 + 16));
        a4 = 0LL;
        if (!*(void *)(a1 + 16))
        {
          uint64_t v20 = *(void *)(a1 + 24);
          if (v20) {
            sub_1000C2590(a3, v20);
          }
          return 0LL;
        }
      }
    }
  }

  return a4;
}

void sub_1000CC858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_1000CC86C(unint64_t result, uint64_t a2, char **a3)
{
  unint64_t v3 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 18LL);
  uint64_t v4 = a3[3];
  unint64_t v5 = (unint64_t)v4 / v3 * v3;
  unint64_t v6 = (unint64_t)&v4[(void)a3[2]];
  unint64_t v7 = (v3 + v6 - 1) / v3 * v3;
  if (v5 < v7)
  {
    uint64_t v9 = (void *)result;
    unint64_t v10 = (unint64_t)v4 % v3;
    char v11 = *a3;
    do
    {
      unint64_t v12 = sub_1000CC334(v9, a2, 1, v5, v7, 1);
      unint64_t v13 = v12;
      if (v6 >= v12) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v6;
      }
      unint64_t v15 = v5 + v10;
      if (v14 >= v5 + v10)
      {
        else {
          size_t v16 = (size_t)&(*a3)[a3[2] - v11];
        }
        bzero(v11, v16);
      }

      __n128 result = sub_1000CC334(v9, a2, 1, v13, v7, 0);
      unint64_t v5 = result;
      if (result < v14 + v10)
      {
        unint64_t v17 = 0LL;
      }

      else
      {
        unint64_t v10 = 0LL;
        unint64_t v17 = result - v15;
      }

      v11 += v17;
    }

    while (result < v6);
  }

  return result;
}

void sub_1000CC98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(*(void *)(a3 + 8) + 20LL);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v21 = v6;
  uint64_t v22 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v7;
  char v26 = 0;
  int v12 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v21);
  if (v23 != v12)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v18 = exception;
    if (v12 < 0) {
      uint64_t v19 = v12;
    }
    else {
      uint64_t v19 = -v12;
    }
    void *exception = &off_100196FC8;
    uint64_t v20 = std::generic_category();
    v18[1] = v19;
    void v18[2] = v20;
    *((_BYTE *)v18 + 24) = 0;
    *((_BYTE *)v18 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v18[7] = "Can't load bitmap from backend";
  }

  if (*(void *)(*(void *)(a3 + 8) + 48LL)
     * (*(_DWORD *)(*(void *)(a3 + 8) + 20LL)
      / *(unsigned __int16 *)(*(void *)(a3 + 8) + 18LL)))
  {
    unint64_t v13 = 0LL;
    do
    {
      sub_1000C2DC4(a1, v13);
      v13 += 2LL;
    }

    while (*(void *)(*(void *)(a3 + 8) + 48LL)
  }

  unint64_t v14 = v22;
  if (v22)
  {
    unint64_t v15 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

void sub_1000CCB0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000CCB24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = a4;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned int *)(v9 + 20);
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a3 + 352) + a4 / (v10 + 1) * v10 * v11;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0LL;
  char v12 = a6 ^ 1;
  sub_100079804((void *)(a1 + 32), 2 * v10 * (v11 / *(unsigned __int16 *)(v9 + 18)), a6 ^ 1);
  *(void *)(a1 + 120) = 850045863LL;
  *(_WORD *)(a1 + sub_100006224(v4 - 112) = 0;
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0LL;
  if ((v12 & 1) != 0)
  {
    sub_1000CC98C(a1, a2, a3);
  }

  else
  {
    *(_WORD *)(a1 + sub_100006224(v4 - 112) = 257;
    sub_1000D5F88(v16, a3, *(void *)a1);
    unint64_t v13 = (unint64_t *)(*(void *)(v16[0] + 56LL) + 16LL * v16[1] + 8);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 | 0x8000000000000000LL, v13));
  }

  return a1;
}

void sub_1000CCC28(_Unwind_Exception *a1)
{
  *(void *)(v1 + sub_100006224(v6 - 32) = off_100180688;
  sub_100079BEC((uint64_t *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1000CCC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_BYTE *)(*(void *)(a2 + 8) + 8LL) & 1) == 0)
  {
    uint64_t v8 = (std::mutex *)(a1 + 120);
    std::mutex::lock((std::mutex *)(a1 + 120));
    int v9 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), 0LL);
    if (v9)
    {
      sub_1000A3900(a2);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v19 = exception;
      if (v9 < 0) {
        uint64_t v20 = v9;
      }
      else {
        uint64_t v20 = -v9;
      }
      void *exception = &off_100196FC8;
      uint64_t v21 = std::generic_category();
      v19[1] = v20;
      v19[2] = v21;
      *((_BYTE *)v19 + 24) = 0;
      *((_BYTE *)v19 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v19[7] = "Can't flush asif on bitmap close, backend flush failed";
    }

    if (!a3) {
      goto LABEL_28;
    }
    sub_1000D5F88(&v22, a3, *(void *)a1);
    uint64_t v10 = (unint64_t *)(*(void *)(v22 + 56) + 16 * v23 + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 & 0x7FFFFFFFFFFFFFFFLL, v10));
    if ((v11 & 0x8000000000000000LL) != 0)
    {
      int v12 = 1;
    }

    else
    {
LABEL_28:
      if (*(_BYTE *)(a1 + 113))
      {
        int v12 = 0;
      }

      else
      {
        int v12 = 0;
        if (!*(_BYTE *)(a1 + 112))
        {
          uint64_t v13 = 0LL;
LABEL_20:
          std::mutex::unlock(v8);
          return v13;
        }
      }
    }

    uint64_t v13 = sub_1000CC6A8(a1, a2, a3, a4);
    if ((_DWORD)v13) {
      int v14 = v12;
    }
    else {
      int v14 = 0;
    }
    if (a3 && v14)
    {
      sub_1000D5F88(&v22, a3, *(void *)a1);
      unint64_t v15 = (unint64_t *)(*(void *)(v22 + 56) + 16 * v23 + 8);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 | 0x8000000000000000LL, v15));
    }

    goto LABEL_20;
  }

  return 4294967290LL;
}

void sub_1000CCDF4(_Unwind_Exception *a1)
{
}

void sub_1000CCE14( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, char a6@<W5>, unint64_t *a7@<X8>)
{
  unint64_t v19 = a4;
  *a7 = 0LL;
  if (a4 || a5)
  {
    sub_1000CCF9C(a1 + 280, a3, a6, &v18);
    sub_1000CD184(a7, &v18);
    sub_1000C0F7C(&v18);
    unint64_t v12 = *a7;
    if (*a7) {
      LOBYTE(v12) = *(_BYTE *)(v12 + 520) == 0;
    }
    if ((v12 & 1) != 0 || (a6 & 1) != 0)
    {
      if (!*a7 || (unsigned int v13 = atomic_load((unsigned int *)(*a7 + 24)), v13 != 2))
      {
        if (!*a7 || !*(_BYTE *)(*a7 + 520))
        {
          if (v19 | (*(void *)(*(void *)(a1 + 152) + 8 * a3) * *(unsigned int *)(a1 + 20)))
          {
            if (v19) {
              unint64_t v14 = v19;
            }
            else {
              unint64_t v14 = *(void *)(*(void *)(a1 + 152) + 8 * a3) * *(unsigned int *)(a1 + 20);
            }
            unint64_t v18 = *(void *)(a1 + 80) * a3;
            unint64_t v19 = v14;
            sub_1000CD23C((uint64_t *)a7, a1, (void *)(a2 + 16), &v19, (uint64_t *)&v18);
          }

          else
          {
            uint64_t v15 = sub_1000C316C((unsigned int *)a1, a2, 1);
            uint64_t v17 = *(void *)(a1 + 80) * a3;
            unint64_t v18 = v15;
            unsigned __int8 v16 = 1;
            sub_1000CD1C8((uint64_t *)a7, a1, (void *)(a2 + 16), &v18, &v17, &v16);
            *(void *)(*(void *)(a1 + 152) + 8 * a3) = v18 / *(unsigned int *)(a1 + 20);
          }
        }
      }
    }
  }

void sub_1000CCF74(_Unwind_Exception *a1)
{
}

unint64_t *sub_1000CCF9C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unsigned __int8 v16 = 0LL;
  uint64_t v17 = a2;
  sub_1000E55B0(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 520) || v14 && *(_BYTE *)(v14 + 520))
  {
    *a4 = 0LL;
    do
      unint64_t v7 = __ldaxr(&v14);
    while (__stlxr(0LL, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return sub_1000C0F7C(&v14);
  }

  if (*(_BYTE *)(a1 + 912) && v15 != (void *)(a1 + 936))
  {
    do
    {
      sub_1000E5A70(a1, a2, &v12);
      unsigned __int8 v16 = v12;
      sub_1000CD184(&v14, &v13);
      sub_1000C0F7C(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 520)) {
          break;
        }
      }

      uint64_t v8 = (unint64_t *)sub_1000E5BFC((void *)a1);
      if (v8)
      {
        unsigned __int8 v16 = v8;
        sub_1000E5CA0(a1, v8, a2, (unint64_t *)&v12);
        sub_1000CD184(&v14, (unint64_t *)&v12);
        sub_1000C0F7C((unint64_t *)&v12);
        break;
      }
    }

    while (*(_BYTE *)(a1 + 912));
    std::mutex::lock((std::mutex *)(a1 + 952));
    int v9 = sub_1000E2084((uint64_t **)(a1 + 928), v15, (unint64_t *)&v17, &v17, (uint64_t *)&v16);
    if (!v10) {
      v9[5] = (uint64_t)v16;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
    std::mutex::unlock((std::mutex *)(a1 + 952));
    sub_1000E3088(a1, 0, 0LL, 0);
    *a4 = 0LL;
    do
      unint64_t v7 = __ldaxr(&v14);
    while (__stlxr(0LL, &v14));
    goto LABEL_21;
  }

  *a4 = 0LL;
  return sub_1000C0F7C(&v14);
}

void sub_1000CD144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

unint64_t *sub_1000CD184(unint64_t *a1, unint64_t *a2)
{
  if (a2 != a1)
  {
    do
      unint64_t v3 = __ldaxr(a2);
    while (__stlxr(0LL, a2));
    sub_1000C0F7C(a1);
    atomic_store(v3, a1);
  }

  return a1;
}

void sub_1000CD1C8( uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
}

void sub_1000CD1F4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*v10)
  {
    uint64_t v11 = *(void *)(*v10 + 464);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &a10, v10);
    }
  }

  __cxa_rethrow();
}

void sub_1000CD228(_Unwind_Exception *a1)
{
}

void sub_1000CD23C(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
}

void sub_1000CD268( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*v10)
  {
    uint64_t v11 = *(void *)(*v10 + 464);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &a10, v10);
    }
  }

  __cxa_rethrow();
}

void sub_1000CD29C(_Unwind_Exception *a1)
{
}

unint64_t *sub_1000CD2B0@<X0>( unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    sub_1000E5F78(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 520))
    {
      uint64_t v7 = *(void *)(v9 + 32);
      *a3 = 0LL;
      if (v7 == a2)
      {
        do
          unint64_t v8 = __ldaxr(&v9);
        while (__stlxr(0LL, &v9));
        atomic_store(v8, a3);
      }
    }

    else
    {
      *a3 = 0LL;
    }

    return sub_1000C0F7C(&v9);
  }

  else
  {
    *a3 = 0LL;
  }

  return result;
}

void *sub_1000CD350(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6A64((uint64_t)a1, a2);
  *a1 = off_10018DD48;
  a1[45] = &off_10018DE48;
  a1[46] = &off_10018DE70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018DD48;
  a1[45] = off_10018DDD0;
  a1[46] = off_10018DDF8;
  return a1;
}

void sub_1000CD3D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CD3F8(uint64_t a1)
{
  return a1;
}

void *sub_1000CD438(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6AE0((uint64_t)a1, a2);
  *a1 = off_10018DF68;
  a1[45] = &off_10018E068;
  a1[46] = &off_10018E090;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018DF68;
  a1[45] = off_10018DFF0;
  a1[46] = off_10018E018;
  return a1;
}

void sub_1000CD4BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CD4E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CD520(uint64_t a1, uint64_t a2)
{
  int v4 = sub_1000E0DFC(a1 + 2080, 0, 0LL, 0);
  if (v4 == -1) {
    return 4294967282LL;
  }
  if (v4 == 1)
  {
    LODWORD(result) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))( *(void *)(a2 + 16),  0LL);
    int v6 = result;
    uint64_t result = (int)result < 0 ? result : -(int)result;
    if (v6) {
      return result;
    }
  }

  int v7 = sub_1000E3088(a1 + 280, 0, 0LL, 0);
  if (v7 == -1) {
    return 4294967282LL;
  }
  if (v7 != 1) {
    return 0LL;
  }
  LODWORD(result) = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))( *(void *)(a2 + 16),  0LL);
  int v8 = result;
  uint64_t result = (int)result < 0 ? result : -(int)result;
  if (!v8) {
    return 0LL;
  }
  return result;
}

uint64_t sub_1000CD5DC(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v44 = 0u;
  int v6 = (std::mutex *)(a1 + 3792);
  std::mutex::lock((std::mutex *)(a1 + 3792));
  __int128 v7 = *(_OWORD *)(a1 + 3744);
  *(_OWORD *)(a1 + 3744) = 0u;
  __int128 v8 = *(_OWORD *)(a1 + 3760);
  __int128 v44 = v7;
  __int128 v45 = v8;
  *(_OWORD *)(a1 + 3760) = 0u;
  __int128 v9 = v46;
  __int128 v46 = *(_OWORD *)(a1 + 3776);
  *(_OWORD *)(a1 + 3776) = v9;
  std::mutex::unlock(v6);
  size_t v10 = (*(void *)(a1 + 160) - *(void *)(a1 + 152) + (unint64_t)*(unsigned __int16 *)(a1 + 18) + 7)
  uint64_t v11 = valloc(v10);
  if (!v11)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v43 = std::bad_alloc::bad_alloc(exception);
  }

  int64_t v47 = &off_10018C340;
  unint64_t v50 = &v47;
  unint64_t v53 = v11;
  sub_100043B68((uint64_t)&v54, (uint64_t)&v47);
  unint64_t v12 = v50;
  if (v50 == &v47)
  {
    uint64_t v13 = 4LL;
    unint64_t v12 = &v47;
    goto LABEL_6;
  }

  if (v50)
  {
    uint64_t v13 = 5LL;
LABEL_6:
    ((void (*)(uint64_t (***)()))(*v12)[v13])(v12);
  }

  unint64_t v14 = v53;
  unint64_t v15 = *(void *)(a1 + 3608);
  *(void *)(a1 + 360_Block_object_dispose((const void *)(v2 - 120), 8) = v15 + 1;
  *unint64_t v14 = bswap64(v15);
  unsigned __int8 v16 = v14 + 1;
  uint64_t v17 = *(unint64_t **)(a1 + 152);
  unint64_t v18 = *(unint64_t **)(a1 + 160);
  while (v17 != v18)
  {
    unint64_t v19 = *v17++;
    *v16++ = bswap64(v19);
  }

  bzero(v16, (size_t)v53 + v10 - (void)v16);
  sub_1000CD9C0(a1 + 2080);
  sub_1000CDA68(a1 + 280);
  uint64_t v20 = sub_1000CD520(a1, a2);
  if (!(_DWORD)v20)
  {
    uint64_t v22 = (uint64_t)v53;
    uint64_t v23 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
    int64_t v47 = (uint64_t (**)())v22;
    uint64_t v48 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        unint64_t v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }

    size_t v49 = v10;
    unint64_t v50 = a3;
    size_t v51 = v10;
    char v52 = 0;
    int v26 = (*(uint64_t (**)(void, uint64_t (***)()))(**(void **)(a2 + 16) + 80LL))( *(void *)(a2 + 16),  &v47);
    if (v10 == v26)
    {
      char v27 = (unint64_t **)(*((void *)&v44 + 1) + 8 * ((unint64_t)v46 >> 9));
      if ((void)v45 == *((void *)&v44 + 1))
      {
        uint64_t v28 = 0LL;
        uint64_t v30 = 0LL;
        BOOL v29 = (char *)(*((void *)&v44 + 1) + 8LL * ((*((void *)&v46 + 1) + (void)v46) >> 9));
      }

      else
      {
        uint64_t v28 = &(*v27)[v46 & 0x1FF];
        BOOL v29 = (char *)(*((void *)&v44 + 1) + 8LL * ((*((void *)&v46 + 1) + (void)v46) >> 9));
        uint64_t v30 = (unint64_t *)(*(void *)v29 + 8 * ((*((void *)&v46 + 1) + v46) & 0x1FF));
      }

      sub_1000C7514((unint64_t *)a1, v27, v28, v29, v30, a2);
      uint64_t v20 = 1LL;
    }

    else
    {
      *(void *)(a1 + 360_Block_object_dispose((const void *)(v2 - 120), 8) = v15;
      std::mutex::lock(v6);
      unint64_t v31 = *(void *)(a1 + 3776) + *(void *)(a1 + 3784);
      uint64_t v32 = *(void *)(a1 + 3752);
      int v33 = (char *)(v32 + 8 * (v31 >> 9));
      if (*(void *)(a1 + 3760) == v32) {
        uint64_t v34 = 0LL;
      }
      else {
        uint64_t v34 = *(void *)v33 + 8 * (v31 & 0x1FF);
      }
      unint64_t v35 = (char *)(*((void *)&v44 + 1) + 8 * ((unint64_t)v46 >> 9));
      if ((void)v45 == *((void *)&v44 + 1))
      {
        uint64_t v36 = 0LL;
        uint64_t v38 = 0LL;
        int64_t v37 = (char *)(*((void *)&v44 + 1) + 8LL * ((*((void *)&v46 + 1) + (void)v46) >> 9));
      }

      else
      {
        uint64_t v36 = (char *)(*(void *)v35 + 8 * (v46 & 0x1FF));
        int64_t v37 = (char *)(*((void *)&v44 + 1) + 8LL * ((*((void *)&v46 + 1) + (void)v46) >> 9));
        uint64_t v38 = (char *)(*(void *)v37 + 8 * ((*((void *)&v46 + 1) + v46) & 0x1FF));
      }

      sub_1000C74E0((void **)(a1 + 3744), v33, v34, v35, v36, v37, v38);
      if (v26 >= 0) {
        uint64_t v20 = 4294967291LL;
      }
      else {
        uint64_t v20 = v26;
      }
      std::mutex::unlock(v6);
    }

    unint64_t v39 = v48;
    if (v48)
    {
      unint64_t v40 = (unint64_t *)&v48->__shared_owners_;
      do
        unint64_t v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }

  sub_100043BCC((uint64_t *)&v53);
  sub_1000C1944(&v44);
  return v20;
}

void sub_1000CD96C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
}

void sub_1000CD9C0(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 608)))
  {
    unint64_t v3 = (unint64_t *)(a1 + 616);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 624);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 624));
    do
      unint64_t v7 = __ldaxr(v3);
    while (__stlxr(v7 - 1, v3));
    if (v8.__owns_) {
      std::mutex::unlock(v8.__m_);
    }
  }

void sub_1000CDA68(uint64_t a1)
{
  if (atomic_load((unint64_t *)(a1 + 784)))
  {
    unint64_t v3 = (unint64_t *)(a1 + 792);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 800);
    v8.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 800));
    do
      unint64_t v7 = __ldaxr(v3);
    while (__stlxr(v7 - 1, v3));
    if (v8.__owns_) {
      std::mutex::unlock(v8.__m_);
    }
  }

uint64_t sub_1000CDB10(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v8 = *(void *)(a4 + 144) - a3[18];
  unint64_t v9 = a3[3];
  size_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v56 = *a3;
  int64_t v57 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  v58[0] = *((_OWORD *)a3 + 1);
  uint64_t v13 = v8 & ~(v8 >> 63);
  *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v59 = a3[6];
  __int128 v60 = *(_OWORD *)(a3 + 7);
  __int128 v61 = *(_OWORD *)(a3 + 9);
  __int128 v62 = *(_OWORD *)(a3 + 11);
  char v63 = *((_BYTE *)a3 + 104);
  unint64_t v14 = (std::__shared_weak_count *)a3[15];
  uint64_t v64 = a3[14];
  uint64_t v65 = v14;
  if (v14)
  {
    unint64_t v15 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  uint64_t v17 = 0LL;
  __int128 v66 = *((_OWORD *)a3 + 8);
  uint64_t v67 = a3[18];
  char v68 = *((_BYTE *)a3 + 152);
  int v18 = a5 ^ 1;
  while (1)
  {
    uint64_t v19 = v9 / *(void *)(a1 + 80);
    sub_1000C446C(a1, a2, v19, v18, 1, &v55);
    if (v55 && *(_BYTE *)(v55 + 520))
    {
      if ((a5 & 1) == 0) {
        sub_1000A3900(a2);
      }
      int v20 = 1;
      uint64_t v5 = -5LL;
      goto LABEL_38;
    }

    sub_10003D540((uint64_t)&v56, *(void *)(a1 + 80) + *(void *)(a1 + 80) * v19, a4, 0LL, (uint64_t)&v48);
    if (!v55 || *(_BYTE *)(v55 + 520))
    {
      unint64_t v21 = 0LL;
      do
      {
        size_t v22 = v50;
        bzero(v48, v50);
        sub_10003CA5C((uint64_t)&v48, v22);
        v21 += v22;
      }

      while (!sub_10003B85C((uint64_t)&v48, (uint64_t)&v52));
      goto LABEL_17;
    }

    if (a5)
    {
      if (*(_BYTE *)(v55 + 400)) {
        uint64_t v35 = v55 + 40;
      }
      else {
        uint64_t v35 = 0LL;
      }
      uint64_t v37 = sub_1000C9610(v35, a2, (uint64_t *)&v48, (uint64_t)&v52);
      uint64_t v5 = v37;
      if ((v37 & 0x8000000000000000LL) == 0 || !(_DWORD)v37) {
        goto LABEL_55;
      }
    }

    else
    {
      if (*(_BYTE *)(v55 + 400)) {
        uint64_t v36 = v55 + 40;
      }
      else {
        uint64_t v36 = 0LL;
      }
      unint64_t v38 = sub_1000C7668(v36, a2, (uint64_t *)&v48, (uint64_t)&v52);
      uint64_t v5 = v38;
      if ((v38 & 0x8000000000000000LL) == 0 || !(_DWORD)v38)
      {
LABEL_55:
        unint64_t v21 = v5;
LABEL_17:
        sub_10003C884((uint64_t)&v56, v21);
        int v20 = 0;
        v9 += v21;
        v17 += v21;
        goto LABEL_18;
      }

      sub_1000A3900(a2);
    }

    int v20 = 1;
LABEL_18:
    uint64_t v23 = v54;
    if (v54)
    {
      uint64_t v24 = (unint64_t *)&v54->__shared_owners_;
      do
        unint64_t v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }

    int v26 = v53;
    if (v53)
    {
      char v27 = (unint64_t *)&v53->__shared_owners_;
      do
        unint64_t v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    BOOL v29 = v51;
    if (v51)
    {
      uint64_t v30 = (unint64_t *)&v51->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    uint64_t v32 = v49;
    if (v49)
    {
      int v33 = (unint64_t *)&v49->__shared_owners_;
      do
        unint64_t v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }

void sub_1000CDF20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

double sub_1000CDF70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(_BYTE *)(a1 + 32) & 1) + *(void *)(a1 + 24);
  v10[0] = *(void *)(a1 + 40);
  v10[1] = v3;
  char v11 = 2;
  *(void *)&__int128 v8 = qword_1001A3B40;
  *((void *)&v8 + 1) = qword_1001A3B40;
  LOBYTE(v9) = 2;
  unsigned int v4 = sub_1000CE020(*(void *)(a1 + 64), *(void *)(a1 + 56), v10, (uint64_t)&v8);
  if (v4 >= 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v7 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Can't convert ASIF flag.", 5u);
  }

  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

unint64_t sub_1000CE020(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v7 = 0LL;
  *(void *)&__int128 v32 = *a3;
  *((void *)&v32 + 1) = v32;
  uint64_t v29 = qword_1001A3B40;
  uint64_t v30 = qword_1001A3B40;
  unsigned __int8 v33 = 2;
  char v31 = 2;
  __int128 v27 = *(_OWORD *)a3;
  uint64_t v28 = a3[2];
  do
  {
    if ((_BYTE)v28)
    {
      if (v28 == 3)
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
      }

      else
      {
        unint64_t v9 = *((void *)&v27 + 1);
        uint64_t v8 = v27;
      }
    }

    else
    {
      unint64_t v9 = *((void *)&v27 + 1);
      uint64_t v8 = v27;
      if ((unint64_t)v27 >= *((void *)&v27 + 1) || (unint64_t)(v27 + 1) >= *((void *)&v27 + 1))
      {
LABEL_5:
        if (!qword_1001A3B40) {
          break;
        }
        goto LABEL_12;
      }
    }

void sub_1000CE2E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

unint64_t sub_1000CE304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)a3;
  unint64_t v6 = *(void *)(a3 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a3 + 16);
  v62[0] = *(_DWORD *)(a3 + 17);
  *(_DWORD *)((char *)v62 + 3) = *(_DWORD *)(a3 + 20);
  if ((v7 & 2) != 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v5 + 1;
  }
  unint64_t v9 = (void *)sub_1000C2064(a1, v8 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL));
  unint64_t v11 = atomic_load((unint64_t *)(v9[7] + 16 * v10 + 8));
  unint64_t v48 = v11 >> 62;
  if (v11 >> 62 == 3)
  {
    uint64_t v12 = v9[1];
    sub_1000C2AF8( a1,  a2,  (v9[44] + (*(void *)(v12 + 48) + *(void *)(v12 + 48) * v10)
     / (unint64_t)(*(void *)(v12 + 48) + 1LL)
     * *(unsigned int *)(v12 + 20))
    / *(unsigned __int16 *)(v12 + 18),
      0,
      1LL,
      v55);
    uint64_t v13 = *(void *)(a1 + 8);
    if (v55[0])
    {
      if (*(_BYTE *)(v55[0] + 224)) {
        uint64_t v15 = v55[0] + 40;
      }
      else {
        uint64_t v15 = 0LL;
      }
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    unint64_t v14 = *(unsigned __int16 *)(v13 + 18);
    unint64_t v48 = sub_1000C2DC4( v15,  2 * ((v8 * v14 - (*(void *)(a1 + 352)
             + *(void *)(v13 + 48)
             * *(unsigned int *)(v13 + 20)
             * ((v8 * v14 / v14 - *(void *)(a1 + 352) / v14)
              / (*(void *)(v13 + 48)
    sub_1000C1AC8(v55);
  }

  while (1)
  {
    if ((_BYTE)v7)
    {
      if (v7 == 3)
      {
        if (v6 >= v5) {
          goto LABEL_17;
        }
      }

      else if (v6 > v5)
      {
        goto LABEL_17;
      }
    }

    else if (v6 > v5 && v5 + 1 < v6)
    {
LABEL_17:
      goto LABEL_21;
    }

    if (!qword_1001A3B40) {
      goto LABEL_41;
    }
LABEL_21:
    if ((v7 & 2) != 0) {
      unint64_t v16 = v5;
    }
    else {
      unint64_t v16 = v5 + 1;
    }
    uint64_t v17 = *(void *)(a1 + 8);
    unint64_t v18 = v16 * *(unsigned __int16 *)(v17 + 18);
    if (v18 >= *(void *)(v17 + 80) + *(void *)(a1 + 352)) {
      goto LABEL_41;
    }
    uint64_t v19 = (void *)sub_1000C2064(a1, v18);
    unint64_t v21 = v19;
    uint64_t v22 = v20;
    __int128 v60 = v19;
    uint64_t v61 = v20;
    uint64_t v23 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL);
    uint64_t v24 = v19[1];
    unint64_t v25 = (*(void *)(v24 + 48) + *(void *)(v24 + 48) * v20) / (unint64_t)(*(void *)(v24 + 48) + 1LL);
    uint64_t v26 = *(unsigned int *)(v24 + 20);
    else {
      unint64_t v27 = v19[44] + v26 + v25 * v26;
    }
    uint64_t v28 = (unint64_t *)(v19[7] + 16 * v20);
    BOOL v29 = sub_1000DCACC(v28);
    v58[0] = off_1001969C8;
    v58[1] = v28;
    BOOL v59 = v29;
    if (!v29)
    {
      *(void *)&__int128 v53 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v53 + 1) = 40LL;
      int v54 = 16;
      sub_1000CE8AC(v55, &v53);
      sub_10000552C(v57, (uint64_t)"Couldn't lock entry ", 20LL);
      sub_1000C5948(v57, &v60);
      sub_1000CE954((uint64_t)v55);
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      unint64_t v41 = std::generic_category();
      exception[1] = 5LL;
      exception[2] = v41;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "Can't lock entry";
    }

    unint64_t v30 = atomic_load((unint64_t *)(v21[7] + 16 * v22 + 8));
    unint64_t v31 = v30 >> 62;
    if ((_DWORD)v48 == (_DWORD)v31)
    {
      uint64_t v32 = *(void *)(a1 + 8);
      unint64_t v47 = v27 / *(unsigned __int16 *)(v32 + 18);
      goto LABEL_39;
    }

    if ((_DWORD)v31 != 3) {
      break;
    }
    uint64_t v33 = v60[1];
    sub_1000C2AF8( a1,  a2,  (v60[44] + (*(void *)(v33 + 48) + *(void *)(v33 + 48) * v61)
     / (unint64_t)(*(void *)(v33 + 48) + 1LL)
     * *(unsigned int *)(v33 + 20))
    / *(unsigned __int16 *)(v33 + 18),
      0,
      1LL,
      &v52);
    if (!v52 || *(_BYTE *)(v52 + 344))
    {
      *(void *)&__int128 v53 = "di_asif::details::table::get_next_extent(ContextASIF &, const interval_sectors &, interval_sectors &)";
      *((void *)&v53 + 1) = 40LL;
      int v54 = 16;
      sub_1000CE994(v55, &v53);
      sub_10000552C(v57, (uint64_t)"Can't read bitmap", 17LL);
      sub_1000CEA3C((uint64_t)v55);
      uint64_t v42 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v42 = &off_100196FC8;
      unint64_t v43 = std::generic_category();
      v42[1] = 5LL;
      v42[2] = v43;
      *((_BYTE *)v42 + 24) = 0;
      *((_BYTE *)v42 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v42[7] = "Can't read bitmap";
    }

    unint64_t v34 = *(_BYTE *)(v52 + 224) ? (void *)(v52 + 40) : 0LL;
    unint64_t v35 = sub_1000CC334(v34, a1, v48, v18, v27, 0);
    unint64_t v36 = *(unsigned __int16 *)(*(void *)(a1 + 8) + 18LL);
    sub_1000C1AC8(&v52);
    unint64_t v47 = v35 / v36;
    if (v35 < v27) {
      break;
    }
    uint64_t v32 = *(void *)(a1 + 8);
LABEL_39:
    v49[0] = v5;
    v49[1] = v6;
    char v50 = v7;
    *(_DWORD *)size_t v51 = v62[0];
    *(_DWORD *)&v51[3] = *(_DWORD *)((char *)v62 + 3);
    unint64_t v37 = v27 / *(unsigned __int16 *)(v32 + 18);
    *(void *)&__int128 v53 = v16;
    *((void *)&v53 + 1) = v37;
    LOBYTE(v54) = 2;
    sub_10000D72C((uint64_t)v49, (uint64_t)&v53, (uint64_t)v55);
    unint64_t v5 = v55[0];
    unint64_t v6 = v55[1];
    unsigned int v7 = v56;
    sub_10011E7BC(v58);
  }

  sub_10011E7BC(v58);
LABEL_41:
  if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
    uint64_t v38 = *(void *)a3;
  }
  else {
    uint64_t v38 = *(void *)a3 + 1LL;
  }
  *(void *)a4 = v38;
  *(void *)(a4 + _Block_object_dispose((const void *)(v2 - 120), 8) = v47;
  *(_BYTE *)(a4 + 16) = 2;
  return v48;
}

void sub_1000CE838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void *sub_1000CE8AC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6B5C((uint64_t)a1, a2);
  *a1 = off_10018E188;
  a1[45] = &off_10018E288;
  a1[46] = &off_10018E2B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018E188;
  a1[45] = off_10018E210;
  a1[46] = off_10018E238;
  return a1;
}

void sub_1000CE930(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CE954(uint64_t a1)
{
  return a1;
}

void *sub_1000CE994(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000E6BD8((uint64_t)a1, a2);
  *a1 = off_10018E3A8;
  a1[45] = &off_10018E4A8;
  a1[46] = &off_10018E4D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018E3A8;
  a1[45] = off_10018E430;
  a1[46] = off_10018E458;
  return a1;
}

void sub_1000CEA18(_Unwind_Exception *a1)
{
}

uint64_t sub_1000CEA3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CEA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 184LL);
  while (v32 != v40 || v33 != v41 || v34 != v42 || v34 != v32 + 16 * v33 && (v37 != v43 || v38 != v44 || v39 != v45))
  {
    unint64_t v10 = v35 * *(unsigned __int16 *)(a1 + 18);
    sub_1000C446C(a1, a2, v10 / *(void *)(a1 + 80), v9 == 0, 1, &v31);
    if (v31 && !*(_BYTE *)(v31 + 520))
    {
      if (*(_BYTE *)(v31 + 400)) {
        uint64_t v15 = v31 + 40;
      }
      else {
        uint64_t v15 = 0LL;
      }
      sub_1000C5A0C(v15, a2, a3, a4, &v18);
      uint64_t v34 = v19;
      uint64_t v37 = v22;
      if (v33 != (v19 - v32) >> 4)
      {
        unint64_t v35 = sub_1000C1DDC(&v32);
        uint64_t v36 = v16;
      }

      int v12 = 0;
      goto LABEL_37;
    }

    if (v31)
    {
      if (*(_BYTE *)(v31 + 520)) {
        uint64_t v11 = 4294967291LL;
      }
      else {
        uint64_t v11 = 0LL;
      }
      if (!(*(unsigned __int8 *)(v31 + 520) | v9))
      {
LABEL_19:
        sub_1000C3C94( a3,  a4,  *(unsigned int *)(a1 + 20),  *(unsigned __int16 *)(a1 + 18),  v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80),  *(void *)(a1 + 80) + v10 / *(void *)(a1 + 80) * *(void *)(a1 + 80),  (uint64_t)&v18);
        while ((void)v18 != v25
             || *((void *)&v18 + 1) != v26
             || v19 != v27
             || v19 != (void)v18 + 16LL * *((void *)&v18 + 1) && (v22 != v28 || v23 != v29 || v24 != v30))
        {
          v22 += v24 * v21;
          unint64_t v20 = sub_1000C1DDC((uint64_t *)&v18);
          uint64_t v21 = v13;
        }

        uint64_t v34 = v19;
        uint64_t v37 = v22;
        if (v33 != (v19 - v32) >> 4)
        {
          unint64_t v35 = sub_1000C1DDC(&v32);
          uint64_t v36 = v14;
        }

        int v12 = 2;
        goto LABEL_37;
      }

      int v12 = 1;
      uint64_t v4 = v11;
    }

    else
    {
      if (!v9) {
        goto LABEL_19;
      }
      uint64_t v4 = 0LL;
      int v12 = 1;
    }

uint64_t sub_1000CED6C(uint64_t a1, uint64_t a2, uint64_t (***a3)())
{
  unint64_t v6 = (std::mutex *)(a1 + 3528);
  std::mutex::lock((std::mutex *)(a1 + 3528));
  sub_1000CD9C0(a1 + 2080);
  sub_1000CDA68(a1 + 280);
  unsigned int v7 = (unsigned int *)(a1 + 3592);
  do
    unsigned int v8 = __ldaxr(v7);
  while (__stlxr(0, v7));
  int v9 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), 0LL);
  if (v9) {
    goto LABEL_4;
  }
  uint64_t v10 = sub_1000CD520(a1, a2);
  if ((_DWORD)v10)
  {
LABEL_10:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t v13 = *(unint64_t **)(a1 + 128);
  uint64_t v14 = *(unint64_t **)(a1 + 136);
  if (v13 == v14)
  {
    uint64_t v10 = 0LL;
    if (v8) {
      goto LABEL_24;
    }
LABEL_27:
    if (*(uint64_t (****)())(a1 + 3600) == a3)
    {
LABEL_29:
      if (!v8 && (v10 & 0x80000000) == 0)
      {
        uint64_t v10 = 0LL;
        goto LABEL_8;
      }

      goto LABEL_10;
    }

LABEL_28:
    uint64_t v10 = sub_1000CD5DC(a1, a2, a3);
    goto LABEL_29;
  }

  uint64_t v10 = 0LL;
  unint64_t v15 = 0LL;
  do
  {
    sub_1000CD2B0(v13, v15 / *(void *)(a1 + 80), &v18);
    if (v18 && !*(_BYTE *)(v18 + 520))
    {
      if (*(_BYTE *)(v18 + 400)) {
        uint64_t v16 = v18 + 40;
      }
      else {
        uint64_t v16 = 0LL;
      }
      BOOL v17 = sub_1000C6668(v16, a2);
      if (v8) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = v17;
      }
    }

    v15 += *(void *)(a1 + 80);
    sub_1000C0F7C(&v18);
    ++v13;
  }

  while (v13 != v14);
  if (!v8) {
    goto LABEL_27;
  }
LABEL_24:
  int v9 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), 0LL);
  if (!v9) {
    goto LABEL_28;
  }
LABEL_4:
  if (v9 < 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = -v9;
  }
  do
LABEL_7:
    unsigned int v11 = __ldaxr(v7);
  while (__stlxr(v11 | v8, v7));
LABEL_8:
  std::mutex::unlock(v6);
  return v10;
}

void sub_1000CEF70()
{
}

uint64_t sub_1000CEF90( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t (***a6)(), uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v17 = (void *)sub_1000CF608(a1, a2, a4, a5);
  *BOOL v17 = off_10018B800;
  v17[11] = &off_10018F700;
  v17[12] = v17;
  uint64_t v43 = (uint64_t)(v17 + 11);
  v17[14] = v17 + 11;
  v17[15] = a3;
  sub_1000DE840(v17 + 16, (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  sub_1000DE8B4((void *)(a1 + 152), (unint64_t)(*(void *)(a1 + 80) + a3 - 1) / *(void *)(a1 + 80));
  *(void *)(a1 + 176) = a4;
  uint64_t v41 = a5 + 7LL;
  uint64_t v42 = a5 - 1LL;
  unint64_t v18 = (a4
       - 1LL
       + (v42 + (unint64_t)a6) / a5 * a5
       + (v41 + 8 * ((unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 80) - 1LL) / *(void *)(a1 + 80)))
       / a5
       * a5
       * a7)
      / a4;
  *(void *)(a1 + 184) = 850045863LL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 24_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 256;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = v18 * a4;
  unint64_t v48 = 0LL;
  sub_1000E6C54(a1 + 280, 2uLL, 0LL, (uint64_t)&v46);
  uint64_t v19 = v48;
  if (v48 == &v46)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &v46;
  }

  else
  {
    if (!v48) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  uint64_t v21 = sub_1000465AC();
  uint64_t v22 = (int *)(a2 + 188);
  if (!*(_BYTE *)(a2 + 192)) {
    uint64_t v22 = (int *)(v21 + 4);
  }
  int v23 = *v22;
  uint64_t v24 = 64LL;
  if (v23 == 1) {
    uint64_t v24 = 32LL;
  }
  if (v23) {
    unint64_t v25 = v24;
  }
  else {
    unint64_t v25 = 16LL;
  }
  sub_1000E7B2C(a1 + 2080, v25, 2LL, v43);
  *(void *)(a1 + 352_Block_object_dispose((const void *)(v2 - 120), 8) = 850045863LL;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 356_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(a1 + 3584) = 0LL;
  *(_DWORD *)(a1 + 3592) = a8 == 0;
  *(void *)(a1 + 3600) = a6;
  uint64_t v40 = (pthread_t *)(a1 + 3616);
  *(_OWORD *)(a1 + 360_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(a1 + 3624) = 1018212795LL;
  *(_OWORD *)(a1 + 36sub_100006224(v6 - 32) = 0u;
  *(_OWORD *)(a1 + 364_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 3657) = 0u;
  *(void *)(a1 + 3680) = 850045863LL;
  *(void *)(a1 + 3784) = 0LL;
  *(_OWORD *)(a1 + 368_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 376_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(a1 + 3792) = 850045863LL;
  *(_OWORD *)(a1 + 3800) = 0u;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 38sub_100006224(v6 - 32) = 0u;
  *(void *)(a1 + 384_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  if (*(void *)(a1 + 80) == 1LL && a3 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v39 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v39;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "asif: chunk size is too small, too many dir indices";
  }

  if (a8
    && (a6 != (uint64_t (***)())512
     || (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a8 + 40LL))(a8) >= 0x201))
  {
    *(void *)(a1 + 360_Block_object_dispose((const void *)(v2 - 120), 8) = sub_1000CF688( a8,  a6,  *(unsigned __int16 *)(a1 + 18),  (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3,  *(void **)(a1 + 152))
                           + 1;
  }

  unint64_t v26 = a4
      - 1LL
      + ((unint64_t)a6 + v42) / a5 * a5
      + (v41 + 8 * ((unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 80) - 1LL) / *(void *)(a1 + 80)))
      / a5
      * a5
      * a7;
  unint64_t v27 = (~(v26 % a4) + a4 + v26) / a4;
  uint64_t v28 = (unint64_t *)(a1 + 8);
  do
    unint64_t v29 = __ldaxr(v28);
  while (__stlxr(v29 + v27, v28));
  uint64_t v46 = a1;
  uint64_t v30 = v47;
  sub_100014938((uint64_t)v47, a9);
  unint64_t v31 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v31);
  uint64_t v32 = operator new(0x30uLL);
  uint64_t v33 = v46;
  uint64_t v34 = v49;
  *uint64_t v32 = v31;
  v32[1] = v33;
  if (!v34) {
    goto LABEL_24;
  }
  if (v34 != v47)
  {
    uint64_t v34 = (void *)(*(uint64_t (**)(void *))(*v34 + 16LL))(v34);
LABEL_24:
    v32[5] = v34;
    goto LABEL_26;
  }

  v32[5] = v32 + 2;
  (*(void (**)(void *))(v47[0] + 24LL))(v47);
LABEL_26:
  uint64_t v45 = v32;
  int v35 = pthread_create(&v44, 0LL, (void *(__cdecl *)(void *))sub_1000E8BEC, v32);
  if (v35)
  {
    std::__throw_system_error(v35, "thread constructor failed");
    __break(1u);
LABEL_36:
    std::terminate();
  }

  uint64_t v45 = 0LL;
  sub_1000E8CF8((uint64_t *)&v45);
  if (*v40) {
    goto LABEL_36;
  }
  *uint64_t v40 = v44;
  pthread_t v44 = 0LL;
  std::thread::~thread((std::thread *)&v44);
  if (v49 == v47)
  {
    uint64_t v36 = 4LL;
    goto LABEL_32;
  }

  if (v49)
  {
    uint64_t v36 = 5LL;
    uint64_t v30 = v49;
LABEL_32:
    (*(void (**)(void *))(*v30 + 8 * v36))(v30);
  }

  return a1;
}

void sub_1000CF480( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::condition_variable *a9, uint64_t a10, uint64_t a11, void **a12, void **a13, std::thread *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, char a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29)
{
  if (a29 == v32)
  {
    uint64_t v36 = 4LL;
  }

  else
  {
    if (!a29) {
      goto LABEL_6;
    }
    uint64_t v36 = 5LL;
    uint64_t v32 = a29;
  }

  (*(void (**)(void *))(*v32 + 8 * v36))(v32);
LABEL_6:
  std::mutex::~mutex(v30);
  sub_1000C1944((void *)(v29 + 3744));
  std::mutex::~mutex(v34);
  std::condition_variable::~condition_variable(a9);
  std::thread::~thread(a14);
  std::mutex::~mutex((std::mutex *)(v29 + 3528));
  sub_1000E35BC(a10);
  sub_1000E2B88(a11);
  sub_1000C53C8(v31);
  uint64_t v37 = *a12;
  if (*a12)
  {
    *(void *)(v29 + 160) = v37;
    operator delete(v37);
  }

  uint64_t v38 = *a13;
  if (*a13)
  {
    *(void *)(v29 + 136) = v38;
    operator delete(v38);
  }

  uint64_t v39 = *(void **)(v29 + 112);
  if (v39 == a19)
  {
    uint64_t v40 = 4LL;
  }

  else
  {
    if (!v39) {
      goto LABEL_15;
    }
    uint64_t v40 = 5LL;
    a19 = *(void **)(v29 + 112);
  }

  (*(void (**)(void))(*a19 + 8 * v40))();
LABEL_15:
  _Unwind_Resume(a1);
}

void sub_1000CF600()
{
}

uint64_t sub_1000CF608(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  *(void *)a1 = off_10018E5C0;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 1_Block_object_dispose((const void *)(v2 - 120), 8) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + sub_100006224(v6 - 32) = a3 >> 3;
  unint64_t v5 = a3 / a4;
  unint64_t v6 = 4LL * a3;
  if (v6 < v5) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = v6 / v5;
  }
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = v7;
  uint64_t v8 = sub_1000C1D84(a1);
  unint64_t v9 = (*(void *)(a1 + 48) + v8) / (unint64_t)(*(void *)(a1 + 48) + 1LL);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  unint64_t v10 = v8 - v9;
  unint64_t v11 = v10 * *(unsigned int *)(a1 + 20);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  return a1;
}

unint64_t sub_1000CF688( uint64_t a1, uint64_t (***a2)(), unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a4;
  size_t v9 = (a3 + 8 * a4 + 7) / a3 * a3;
  unint64_t v10 = (unint64_t *)valloc(v9);
  if (!v10)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v26 = std::bad_alloc::bad_alloc(exception);
  }

  uint64_t v31 = &off_10018C340;
  uint64_t v34 = &v31;
  uint64_t v37 = v10;
  sub_100043B68((uint64_t)&v38, (uint64_t)&v31);
  unint64_t v11 = v34;
  if (v34 == &v31)
  {
    uint64_t v12 = 4LL;
    unint64_t v11 = &v31;
  }

  else
  {
    if (!v34) {
      goto LABEL_7;
    }
    uint64_t v12 = 5LL;
  }

  (*v11)[v12]();
LABEL_7:
  uint64_t v13 = v37;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v31 = (uint64_t (**)())v13;
  uint64_t v32 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  size_t v33 = v9;
  uint64_t v34 = a2;
  size_t v35 = v9;
  char v36 = 0;
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t (***)()))(*(void *)a1 + 88LL))(a1, &v31);
  if (v9 != v17)
  {
    unint64_t v27 = __cxa_allocate_exception(0x40uLL);
    uint64_t v28 = v27;
    if (v17 >= 0) {
      uint64_t v29 = 4294967291LL;
    }
    else {
      uint64_t v29 = v17;
    }
    *unint64_t v27 = &off_100196FC8;
    uint64_t v30 = std::generic_category();
    v28[1] = v29;
    void v28[2] = v30;
    *((_BYTE *)v28 + 24) = 0;
    *((_BYTE *)v28 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v28[7] = "Can't load asif dir table";
  }

  unint64_t v18 = *v13;
  if (v6)
  {
    uint64_t v19 = v13 + 1;
    do
    {
      unint64_t v20 = *v19++;
      *a5++ = bswap64(v20);
      --v6;
    }

    while (v6);
  }

  uint64_t v21 = v32;
  if (v32)
  {
    uint64_t v22 = (unint64_t *)&v32->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  sub_100043BCC((uint64_t *)&v37);
  return bswap64(v18);
}

void sub_1000CF898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

unint64_t sub_1000CF8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  unint64_t v15 = &v21;
  unint64_t v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  uint64_t v17 = 8LL;
  uint64_t v18 = a2;
  uint64_t v19 = 8LL;
  char v20 = 0;
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, unint64_t **))(*(void *)a1 + 88LL))(a1, &v15);
  if ((_DWORD)a1 != 8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v13 = exception;
    else {
      a1 = a1;
    }
    void *exception = &off_100196FC8;
    uint64_t v14 = std::generic_category();
    v13[1] = a1;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v13[7] = "Can't load asif dir version";
  }

  unint64_t v7 = bswap64(v21);
  unint64_t v21 = v7;
  uint64_t v8 = v16;
  if (v16)
  {
    size_t v9 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_1000CF9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1000CF9F4(void *result, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = "uninit";
      uint64_t v3 = 6LL;
      goto LABEL_3;
    case 1:
      uint64_t v2 = "fully";
      uint64_t v3 = 5LL;
      goto LABEL_3;
    case 2:
      uint64_t v2 = "unmapped";
      uint64_t v3 = 8LL;
      goto LABEL_3;
    case 3:
      uint64_t v2 = "has_bitmap";
      uint64_t v3 = 10LL;
LABEL_3:
      double result = sub_10000552C(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }

  return result;
}

void sub_1000CFA5C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(void *)(*(void *)(a1 + 152) + 8 * (a2 / *(void *)(a1 + 80))) = a3 / *(unsigned int *)(a1 + 20);
  atomic_store(1u, (unsigned int *)(a1 + 3592));
}

void *sub_1000CFA84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  v6[0] = &off_10018BC60;
  v6[1] = a2;
  unint64_t v7 = v6;
  sub_1000CFB64(v3, (uint64_t)v6);
  double result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    double result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1000CFB28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1000CFB64(void *a1, uint64_t a2)
{
  if (a1[11])
  {
    char v4 = 0;
    uint64_t v5 = (uint64_t **)(a1 + 9);
    unint64_t v6 = (uint64_t **)(a1 + 10);
    while (1)
    {
      unint64_t v7 = *v6;
      uint64_t v8 = *v6;
      size_t v9 = v6;
      if (*v6)
      {
        do
        {
          unint64_t v10 = (uint64_t **)v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }

        while (v8);
      }

      else
      {
        do
        {
          unint64_t v10 = (uint64_t **)v9[2];
          BOOL v11 = *v10 == (uint64_t *)v9;
          size_t v9 = v10;
        }

        while (v11);
      }

      uint64_t v12 = (uint64_t)v10[4] + *a1;
      uint64_t v13 = a1[12];
      if (v12 != v13) {
        break;
      }
      uint64_t v14 = (uint64_t *)v6;
      if (v7)
      {
        do
        {
          uint64_t v15 = v7;
          unint64_t v7 = (uint64_t *)v7[1];
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v14[2];
          BOOL v11 = *v15 == (void)v14;
          uint64_t v14 = v15;
        }

        while (v11);
      }

      sub_10000D0E4(v5, v15);
      operator delete(v15);
      uint64_t v16 = a1[11];
      uint64_t v13 = a1[12] - *a1;
      a1[12] = v13;
      char v4 = 1;
      if (!v16) {
        goto LABEL_15;
      }
    }

    if ((v4 & 1) == 0) {
      return;
    }
LABEL_15:
    uint64_t v17 = *(void *)(a2 + 24);
    if (v17)
    {
      v22[0] = v13;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 48LL))(v17, v22);
      if ((_DWORD)v18)
      {
        uint64_t v19 = v18;
        *(void *)&__int128 v20 = "space_allocators::FixedSize::trim_largest(const size_changed_fn_t &)";
        *((void *)&v20 + 1) = 41LL;
        int v21 = 16;
        sub_1000DE928(v22, &v20);
        sub_10000552C(&v23, (uint64_t)"trim largest: size change callback failed with ", 47LL);
        std::ostream::operator<<(&v23, v19);
        std::ostream::~ostream(&v23, off_10018E6D0);
        sub_1000DEA8C((uint64_t)v22);
        std::ios::~ios(&v24);
      }
    }
  }

void sub_1000CFCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

_OWORD *sub_1000CFD04(_OWORD *a1, uint64_t a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40LL))(a2) <= 0x1FF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40LL))(a2);
    void *exception = &off_10018E820;
    exception[1] = "asif_header";
    exception[2] = 512LL;
    exception[3] = v10;
  }

  char v4 = operator new[](0x200uLL);
  *char v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  _DWORD v4[5] = 0u;
  void v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  v4[17] = 0u;
  v4[18] = 0u;
  v4[19] = 0u;
  v4[20] = 0u;
  v4[21] = 0u;
  v4[22] = 0u;
  v4[23] = 0u;
  v4[24] = 0u;
  v4[25] = 0u;
  v4[26] = 0u;
  v4[27] = 0u;
  v4[28] = 0u;
  v4[29] = 0u;
  v4[30] = 0u;
  v4[31] = 0u;
  if (sub_100042FD0(a2, (uint64_t)v4, 512LL, 0LL) != 512)
  {
    BOOL v11 = __cxa_allocate_exception(0x40uLL);
    void *v11 = &off_100196FC8;
    uint64_t v12 = std::generic_category();
    v11[1] = 152LL;
    void v11[2] = v12;
    *((_BYTE *)v11 + 24) = 0;
    *((_BYTE *)v11 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v11[7] = "Couldn't read asif's header";
  }

  sub_1000CFF14((uint64_t)a1, (uint64_t)v4);
  for (uint64_t i = 80LL; i != 512; ++i)
  {
    if (*((_BYTE *)v4 + i))
    {
      unint64_t v7 = __cxa_allocate_exception(0x40uLL);
      *unint64_t v7 = &off_100196FC8;
      uint64_t v8 = std::generic_category();
      v7[1] = 161LL;
      uint64_t v7[2] = v8;
      *((_BYTE *)v7 + 24) = 0;
      *((_BYTE *)v7 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v7[7] = "Unsupported ASIF, contains data beyond current header struct size";
    }
  }

  operator delete[](v4);
  return a1;
}

void sub_1000CFEE8(_Unwind_Exception *a1)
{
}

_WORD *sub_1000CFF14(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  LODWORD(v14[0]) = 2003069043;
  sub_100019FE4((uint64_t)"header_signature", v4, v14, 1LL);
  *(_DWORD *)a1 = 2003069043;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap32(*(_DWORD *)(a2 + 8));
  sub_1000E039C(v14, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = v14[0];
  *(void *)(a1 + 16) = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a2 + 48));
  *(void *)(a1 + 56) = bswap64(*(void *)(a2 + 56));
  *(_DWORD *)(a1 + 64) = bswap32(*(_DWORD *)(a2 + 64));
  *(_WORD *)(a1 + 6_Block_object_dispose((const void *)(v2 - 120), 8) = bswap32(*(unsigned __int16 *)(a2 + 68)) >> 16;
  double result = sub_1000E8D94(v14, *(unsigned __int16 *)(a2 + 70));
  *(_WORD *)(a1 + 70) = v14[0];
  *(void *)(a1 + 72) = bswap64(*(void *)(a2 + 72));
  if (*(_DWORD *)(a1 + 4) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v14);
    sub_10000552C(v14, (uint64_t)"Unsupported ASIF version ", 25LL);
    std::ostream::operator<<(v14, *(unsigned int *)(a1 + 4));
    sub_100006AA8((uint64_t)exception, (uint64_t)v14, 0xA1u);
  }

  if ((*(_DWORD *)(a1 + 8) - 1048577) <= 0xFFF0004E)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = "Invalid ASIF header size";
LABEL_15:
    unsigned int v12 = 152;
    goto LABEL_19;
  }

  unint64_t v6 = *(unsigned __int16 *)(a1 + 68);
  if (!*(_WORD *)(a1 + 68))
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = "Shadow block size is invalid (0)";
    goto LABEL_15;
  }

  unsigned int v7 = *(_DWORD *)(a1 + 64);
  if (v7 < v6 || v7 % v6)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = "ASIF max_write size in header exceed the limit";
LABEL_18:
    unsigned int v12 = 22;
LABEL_19:
    uint64_t v13 = (void *)sub_100004494((uint64_t)v9, (uint64_t)v10, v12);
  }

  if ((v6 & 0x1FF) != 0)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = "ASIF block size isn't multiple of 512";
    goto LABEL_15;
  }

  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= 0xFFFFFFFFFFFFFFFFLL / v6)
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = "Max sector count is too large";
    goto LABEL_18;
  }

  if (v8 < *(void *)(a1 + 48))
  {
    size_t v9 = __cxa_allocate_exception(0x40uLL);
    uint64_t v10 = "Sector count is too large";
    goto LABEL_18;
  }

  return result;
}

void sub_1000D0174(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_1000D01AC(_OWORD *a1, uint64_t a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  a1[3] = *(_OWORD *)(a2 + 48);
  a1[4] = v4;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_1000D01D8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(_OWORD *)(a2 + sub_100006224(v6 - 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a1 + 48));
  *(void *)(a2 + 56) = bswap64(*(void *)(a1 + 56));
  *(_DWORD *)(a2 + 64) = bswap32(*(_DWORD *)(a1 + 64));
  *(_WORD *)(a2 + 6_Block_object_dispose((const void *)(v2 - 120), 8) = bswap32(*(unsigned __int16 *)(a1 + 68)) >> 16;
  *(_WORD *)(a2 + 70) = *(_WORD *)(a1 + 70);
  *(void *)(a2 + 72) = bswap64(*(void *)(a1 + 72));
  return a2 + 80;
}

uint64_t sub_1000D0274( uint64_t a1, _DWORD *a2, _OWORD *a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  *(_DWORD *)a1 = 2003069043;
  int v18 = 2003069043;
  sub_100019FE4((uint64_t)"header_signature", 2003069043, &v18, 1LL);
  *(void *)(a1 + 4) = 0x20000000001LL;
  *(_DWORD *)(a1 + 12) = *a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = 0u;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = a4;
  *(void *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 64) = a6;
  *(_WORD *)(a1 + 6_Block_object_dispose((const void *)(v2 - 120), 8) = a7;
  sub_1000E8D94((_WORD *)(a1 + 70), 0);
  *(void *)(a1 + 72) = 0LL;
  if (!is_mul_ok(a5, a7) || !is_mul_ok(a4, a7) || (unint64_t v14 = a4 * a7 + 2LL * a6, __CFADD__(a4 * a7, 2LL * a6)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v17 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"ASIF header calculation overflow", 0x16u);
  }

  if (v14 <= a5 * a7) {
    unint64_t v14 = a5 * a7;
  }
  *(void *)(a1 + 56) = v14 / a7;
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = *a3;
  return a1;
}

uint64_t sub_1000D03A0(uint64_t a1, uint64_t a2)
{
  else {
    size_t v4 = *(unsigned __int16 *)(a1 + 68);
  }
  uint64_t v5 = operator new[](v4);
  bzero(v5, v4);
  unint64_t v6 = (_BYTE *)sub_1000D01D8(a1, (uint64_t)v5);
  int64_t v7 = (_BYTE *)v5 + v4 - v6;
  if (v7 >= 1) {
    bzero(v6, v7);
  }
  int v8 = sub_1000474C8(a2, (uint64_t)v5, v4, 0LL);
  if (v8 >= 0) {
    unsigned int v9 = -5;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v4 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = v9;
  }
  operator delete[](v5);
  return v10;
}

void sub_1000D0440(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D0454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1635018093;
  int v7 = 1635018093;
  sub_100019FE4((uint64_t)"header_signature", 1635018093, &v7, 1LL);
  *(_DWORD *)(a1 + 4) = 1;
  int v8 = 1;
  sub_100019FE4((uint64_t)"version_t", 1, &v8, 1LL);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 512;
  int v9 = 512;
  sub_100019FE4((uint64_t)"header_size_t", 512, &v9, 1LL);
  *(void *)(a1 + 12) = a2;
  *(void *)(a1 + 20) = a3;
  return a1;
}

uint64_t *sub_1000D0508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = valloc(0x200uLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v54 = std::bad_alloc::bad_alloc(exception);
  }

  v66[0] = (uint64_t)&off_10018C340;
  uint64_t v67 = v66;
  unint64_t v78 = v8;
  sub_100043B68((uint64_t)&v79, (uint64_t)v66);
  int v9 = v67;
  if (v67 == v66)
  {
    uint64_t v10 = 4LL;
    int v9 = v66;
  }

  else
  {
    if (!v67) {
      goto LABEL_7;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  BOOL v11 = v78;
  *unint64_t v78 = *(_DWORD *)a1;
  v11[1] = bswap32(*(_DWORD *)(a1 + 4));
  void v11[2] = bswap32(*(_DWORD *)(a1 + 8));
  *(void *)(v11 + 3) = bswap64(*(void *)(a1 + 12));
  *(void *)(v11 + 5) = bswap64(*(void *)(a1 + 20));
  unsigned int v12 = v78;
  int64_t v13 = (char *)v78 - (char *)(v11 + 7) + 512;
  if (v13 >= 1) {
    bzero(v11 + 7, v13);
  }
  uint64_t v14 = *((void *)sub_100120DCC() + 1);
  *(void *)&__int128 v60 = v12;
  *((void *)&v60 + 1) = v14;
  if (v14)
  {
    uint64_t v15 = (unint64_t *)(v14 + 8);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  uint64_t v61 = 512LL;
  uint64_t v62 = a4;
  uint64_t v63 = 512LL;
  char v64 = 0;
  sub_100061DFC(v66, &v60);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v60 + 1);
  if (*((void *)&v60 + 1))
  {
    int v18 = (unint64_t *)(*((void *)&v60 + 1) + 8LL);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  sub_10003BD04((uint64_t)v71, (uint64_t)&v60);
  sub_10003BA04((uint64_t)v71, (uint64_t)&v57);
  uint64_t v20 = sub_1000CDB10(a3, a2, (uint64_t *)&v60, (uint64_t)&v57, 0);
  int v21 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  uint64_t v24 = v58;
  if (v58)
  {
    unint64_t v25 = (unint64_t *)&v58->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  unint64_t v27 = v65;
  if (v65)
  {
    uint64_t v28 = (unint64_t *)&v65->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v60 + 1);
  if (!*((void *)&v60 + 1)) {
    goto LABEL_36;
  }
  uint64_t v31 = (unint64_t *)(*((void *)&v60 + 1) + 8LL);
  do
    unint64_t v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if ((v20 & 0x8000000000000000LL) == 0) {
      goto LABEL_38;
    }
  }

  else
  {
LABEL_36:
    if ((v20 & 0x8000000000000000LL) == 0) {
      goto LABEL_38;
    }
  }

  uint64_t v33 = v20;
  if ((_DWORD)v20)
  {
    unint64_t v55 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v55 = &off_100196FC8;
    unsigned __int8 v56 = std::generic_category();
    v55[1] = v33;
    unint64_t v55[2] = v56;
    *((_BYTE *)v55 + 24) = 0;
    *((_BYTE *)v55 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v55[7] = "Failed to write metadata header";
  }

void sub_1000D09C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

uint64_t sub_1000D0A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  int v8 = valloc(0x200uLL);
  if (!v8)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v63 = std::bad_alloc::bad_alloc(exception);
  }

  v78[0] = (uint64_t)&off_10018C340;
  uint64_t v79 = v78;
  uint64_t v90 = v8;
  sub_100043B68((uint64_t)&v91, (uint64_t)v78);
  int v9 = v79;
  if (v79 == v78)
  {
    uint64_t v10 = 4LL;
    int v9 = v78;
  }

  else
  {
    if (!v79) {
      goto LABEL_7;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  uint64_t v11 = (uint64_t)v90;
  uint64_t v12 = *((void *)sub_100120DCC() + 1);
  *(void *)&__int128 v71 = v11;
  *((void *)&v71 + 1) = v12;
  if (v12)
  {
    int64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  uint64_t v72 = 512LL;
  uint64_t v73 = a4;
  uint64_t v74 = 512LL;
  char v75 = 0;
  sub_100061DFC(v78, &v71);
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
    unint64_t v16 = (unint64_t *)(*((void *)&v71 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  v18.n128_f64[0] = sub_10003BA04((uint64_t)v83, (uint64_t)&v71);
  unint64_t v19 = *(void *)(a3 + 120);
  unint64_t v20 = v77;
  int v21 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v18);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  uint64_t v24 = (std::__shared_weak_count *)*((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
    unint64_t v25 = (unint64_t *)(*((void *)&v71 + 1) + 8LL);
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v18);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  if (v20 > v19)
  {
    char v64 = __cxa_allocate_exception(0x40uLL);
    *char v64 = &off_100196FC8;
    uint64_t v65 = std::generic_category();
    v64[1] = 152LL;
    v64[2] = v65;
    *((_BYTE *)v64 + 24) = 0;
    *((_BYTE *)v64 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v64[7] = "Metadata offset is invalid";
  }

  sub_10003BD04((uint64_t)v83, (uint64_t)&v71);
  sub_10003BA04((uint64_t)v83, (uint64_t)&v68);
  uint64_t v27 = sub_1000CDB10(a3, a2, (uint64_t *)&v71, (uint64_t)&v68, 1);
  uint64_t v28 = v70;
  if (v70)
  {
    unint64_t v29 = (unint64_t *)&v70->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  uint64_t v31 = v69;
  if (v69)
  {
    unint64_t v32 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  uint64_t v34 = v76;
  if (v76)
  {
    size_t v35 = (unint64_t *)&v76->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  uint64_t v37 = (std::__shared_weak_count *)*((void *)&v71 + 1);
  if (!*((void *)&v71 + 1)) {
    goto LABEL_45;
  }
  uint64_t v38 = (unint64_t *)(*((void *)&v71 + 1) + 8LL);
  do
    unint64_t v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((v27 & 0x8000000000000000LL) == 0) {
      goto LABEL_47;
    }
  }

  else
  {
LABEL_45:
    if ((v27 & 0x8000000000000000LL) == 0) {
      goto LABEL_47;
    }
  }

  if ((_DWORD)v27)
  {
    __int128 v66 = __cxa_allocate_exception(0x40uLL);
    void *v66 = &off_100196FC8;
    uint64_t v67 = std::generic_category();
    v66[1] = v27;
    v66[2] = v67;
    *((_BYTE *)v66 + 24) = 0;
    *((_BYTE *)v66 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v66[7] = "ASIF meta header failed to read";
  }

LABEL_47:
  sub_1000D1090(a1, (uint64_t)v90, a3);
  for (uint64_t i = 28LL; i != 512; ++i)
  {
    if (v90[i])
    {
      __int128 v60 = __cxa_allocate_exception(0x40uLL);
      *__int128 v60 = &off_100196FC8;
      uint64_t v61 = std::generic_category();
      v60[1] = 152LL;
      v60[2] = v61;
      *((_BYTE *)v60 + 24) = 0;
      *((_BYTE *)v60 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v60[7] = "ASIF meta header trailer isn't equal to zero";
    }
  }

  uint64_t v41 = v89;
  if (v89)
  {
    unint64_t v42 = (unint64_t *)&v89->__shared_owners_;
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  pthread_t v44 = v88;
  if (v88)
  {
    unint64_t v45 = (unint64_t *)&v88->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  unint64_t v47 = v87;
  if (v87)
  {
    unint64_t v48 = (unint64_t *)&v87->__shared_owners_;
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  char v50 = v86;
  if (v86)
  {
    unint64_t v51 = (unint64_t *)&v86->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  __int128 v53 = v85;
  if (v85)
  {
    int v54 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  unsigned __int8 v56 = v84;
  if (v84)
  {
    uint64_t v57 = (unint64_t *)&v84->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  if (v81 && &v82 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v78);
  sub_100043BCC((uint64_t *)&v90);
  return a1;
}

      unint64_t v32 = v4 + 7;
      do
      {
        unint64_t v33 = v19;
        if (v19 >= 1)
        {
          if (*(v32 - 5) >= v19) {
            unint64_t v33 = v19;
          }
          else {
            unint64_t v33 = *(v32 - 5);
          }
        }

        uint64_t v34 = *v32;
        *(_DWORD *)uint64_t v34 = v33;
        *(_BYTE *)(v34 + 4) = 1;
        sub_10001C27C((uint64_t)v32);
        v19 -= v33 & ~(v33 >> 63);
        size_t v35 = v32 + 8;
        unint64_t v36 = v32 + 1;
        v32 += 8;
      }

      while ((unint64_t)v36 <= v8);
      if (*((void *)&v42 + 1))
      {
        if (v43 != (void *)v41) {
          operator delete(v41);
        }
      }

      size_t v4 = v35 - 7;
      __int128 v3 = (void *)v2[8];
      uint64_t v1 = v2[9];
      if (v35 - 7 == &v3[8 * v1]) {
        return sub_10010DEBC(v37);
      }
    }
  }

  return result;
}

void sub_1000D1018( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
}

uint64_t sub_1000D1090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2;
  int v14 = 1635018093;
  sub_100019FE4((uint64_t)"header_signature", v6, &v14, 1LL);
  *(_DWORD *)a1 = 1635018093;
  int v7 = bswap32(*(_DWORD *)(a2 + 4));
  int v15 = 1;
  sub_100019FE4((uint64_t)"version_t", v7, &v15, 1LL);
  *(_DWORD *)(a1 + 4) = 1;
  int v8 = bswap32(*(_DWORD *)(a2 + 8));
  int v16 = 512;
  uint64_t result = sub_100019FE4((uint64_t)"header_size_t", v8, &v16, 1LL);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 512;
  unint64_t v10 = bswap64(*(void *)(a2 + 12));
  *(void *)(a1 + 12) = v10;
  *(void *)(a1 + 20) = bswap64(*(void *)(a2 + 20));
  if (v10 > (unint64_t)*(unsigned int *)(a3 + 20) - 512)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v12 = "ASIF meta header size exceeds its maximum";
    goto LABEL_6;
  }

  if (v10 % *(unsigned __int16 *)(a3 + 18))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v12 = "ASIF meta header data is unaligned";
LABEL_6:
    int64_t v13 = (void *)sub_100004494((uint64_t)exception, (uint64_t)v12, 0x98u);
  }

  return result;
}

uint64_t sub_1000D11BC(void *a1, uint64_t a2)
{
  if (!*(void *)(*a1 + 72LL)) {
    return 0LL;
  }
  sub_1000D1244(a1, a2, (uint64_t *)&v4);
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7LL * ((v5 - v4) >> 2);
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }

  return v2;
}

uint64_t sub_1000D1244@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = a1[1];
  unint64_t v16 = *(void *)(*a1 + 72LL) * *(unsigned int *)(v6 + 20);
  uint64_t result = sub_1000DFFB8(a3, a2, v6, (uint64_t *)&v16);
LABEL_2:
  for (unint64_t i = result; ; a3[1] = i)
  {
    a3[1] = i;
    uint64_t v9 = *(void *)(i - 8);
    if (!v9) {
      break;
    }
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    unint64_t v12 = v9 * *(unsigned int *)(v10 + 20);
    unint64_t v16 = v12;
    uint64_t v13 = *(unsigned __int16 *)(v10 + 18);
    if (v12 < *(void *)(v11 + 48) * v13 || *(void *)(v11 + 56) * v13 <= v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      int v15 = std::generic_category();
      exception[1] = 152LL;
      exception[2] = v15;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "ASIF: metadata header out of range";
    }

    if (i >= a3[2])
    {
      uint64_t result = sub_1000E0174(a3, a2, v10, (uint64_t *)&v16);
      goto LABEL_2;
    }

    uint64_t result = sub_1000D0A34(i, a2, v10, v12);
    i += 28LL;
  }

  return result;
}

void sub_1000D1370(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000D13A0(void *a1@<X0>, uint64_t a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  if (!*(void *)(*a1 + 72LL))
  {
    keys = @"internal metadata";
    uint64_t v63 = @"user metadata";
    sub_1000FEB60((CFMutableDictionaryRef *)&v53);
    sub_1000FEB60((CFMutableDictionaryRef *)&v56);
    values = v53;
    BOOL v59 = v56;
    sub_1000FEAC4((const void **)&keys, (const void **)&values, 2LL, a3);
    sub_100006B34((const void **)&v56);
    sub_100006B34((const void **)&v53);
    return;
  }

  sub_1000D1BCC(a1, a2, (uint64_t *)&v56);
  uint64_t v6 = (uint64_t *)v56;
  int v7 = v57;
  if (v56 == (std::__shared_weak_count *)v57)
  {
LABEL_65:
    int v41 = 0;
    goto LABEL_66;
  }

  do
  {
    sub_10001A338((uint64_t *)&keys, v6);
    uint64_t v8 = a1[1];
    sub_10003BD04((uint64_t)v67, (uint64_t)&values);
    sub_10003BA04((uint64_t)v67, (uint64_t)&v53);
    uint64_t v9 = sub_1000CDB10(v8, a2, (uint64_t *)&values, (uint64_t)&v53, 1);
    uint64_t v10 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    uint64_t v13 = v54;
    if (v54)
    {
      int v14 = (unint64_t *)&v54->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    unint64_t v16 = v61;
    if (v61)
    {
      unint64_t v17 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    unint64_t v19 = v59;
    if (!v59) {
      goto LABEL_22;
    }
    unint64_t v20 = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((v9 & 0x8000000000000000LL) == 0) {
        goto LABEL_24;
      }
    }

    else
    {
LABEL_22:
      if ((v9 & 0x8000000000000000LL) == 0) {
        goto LABEL_24;
      }
    }

    if ((_DWORD)v9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      uint64_t v50 = std::generic_category();
      exception[1] = v9;
      exception[2] = v50;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "ASIF: failed to deserialize metadata";
    }

void sub_1000D18B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, const void *a29)
{
}

const void **sub_1000D1B00@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  keys[0] = @"internal metadata";
  keys[1] = @"user metadata";
  sub_1000FEB60((CFMutableDictionaryRef *)&v4);
  sub_1000FEB60((CFMutableDictionaryRef *)&v3);
  values[0] = v4;
  values[1] = v3;
  sub_1000FEAC4((const void **)keys, (const void **)values, 2LL, a1);
  sub_100006B34((const void **)&v3);
  return sub_100006B34((const void **)&v4);
}

void sub_1000D1BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  __int128 v3 = va_arg(va1, const void *);
  sub_100006B34((const void **)va);
  sub_100006B34((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1000D1BCC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  sub_1000D1244(a1, a2, (uint64_t *)&v26);
  uint64_t v5 = v27;
  if (v27 != v26)
  {
    unint64_t v6 = 0LL;
    uint64_t v5 = v26;
    do
    {
      size_t v7 = *(void *)&v5[28 * v6 + 12];
      size_t v25 = v7;
      uint64_t v8 = (std::__shared_weak_count_vtbl *)valloc(v7);
      if (!v8)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        unint64_t v21 = std::bad_alloc::bad_alloc(exception);
      }

      uint64_t v9 = v8;
      unint64_t v23 = v8;
      uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
      v10->__shared_owners_ = 0LL;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_10018EC90;
      v10->__shared_weak_owners_ = 0LL;
      v10[1].__vftable = v9;
      unint64_t v24 = v10;
      uint64_t v12 = *(unsigned int *)(a1[1] + 20LL);
      uint64_t v13 = *(void *)(*a1 + 72LL) * v12 + 512;
      uint64_t v22 = v13;
      if (v6)
      {
        uint64_t v13 = *(void *)&v5[28 * v6 - 8] * v12 + 512;
        uint64_t v22 = v13;
      }

      unint64_t v14 = a3[1];
      if (v14 >= a3[2])
      {
        uint64_t v16 = sub_1000DFDB0(a3, &v23, (uint64_t *)&v25, &v22, (uint64_t *)&v25);
      }

      else
      {
        *(void *)unint64_t v14 = v9;
        *(void *)(v14 + _Block_object_dispose((const void *)(v2 - 120), 8) = v10;
        do
          unint64_t v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        *(void *)(v14 + 16) = v7;
        *(void *)(v14 + 24) = v13;
        *(void *)(v14 + sub_100006224(v6 - 32) = v7;
        uint64_t v16 = v14 + 48;
        *(_BYTE *)(v14 + 40) = 0;
      }

      a3[1] = v16;
      unint64_t v17 = v24;
      if (v24)
      {
        unint64_t v18 = (unint64_t *)&v24->__shared_owners_;
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }

      ++v6;
      uint64_t v5 = v26;
    }

    while (v6 < 0x6DB6DB6DB6DB6DB7LL * ((v27 - v26) >> 2));
  }

  if (v5)
  {
    unint64_t v27 = v5;
    operator delete(v5);
  }

void sub_1000D1D90( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void sub_1000D1DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  if (a14)
  {
    a15 = a14;
    operator delete(a14);
  }

  sub_1000DF188(&a14);
  _Unwind_Resume(a1);
}

void *sub_1000D1DF8(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E8E7C((uint64_t)a1, a2);
  *a1 = off_10018E858;
  a1[45] = &off_10018E958;
  a1[46] = &off_10018E980;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018E858;
  a1[45] = off_10018E8E0;
  a1[46] = off_10018E908;
  return a1;
}

void sub_1000D1E7C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D1EA0(uint64_t a1)
{
  return a1;
}

void *sub_1000D1EE0(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000E8E00((uint64_t)a1, a2);
  *a1 = off_10018EA78;
  a1[45] = &off_10018EB78;
  a1[46] = &off_10018EBA0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018EA78;
  a1[45] = off_10018EB00;
  a1[46] = off_10018EB28;
  return a1;
}

void sub_1000D1F64(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D1F88(uint64_t a1)
{
  return a1;
}

const void **sub_1000D1FC8(const void **result, uint64_t a2, CFPropertyListRef propertyList, uint64_t *a4)
{
  if (propertyList)
  {
    unint64_t v6 = (uint64_t *)result;
    size_t v7 = *result;
    uint64_t v8 = (unsigned int *)result[1];
    unint64_t v9 = v8[5];
    unint64_t v10 = *((void *)*result + 9) * v9;
    uint64_t v11 = *((unsigned __int16 *)v8 + 9);
    if (!v10) {
      unint64_t v10 = (v7[7] * v11 - v9) / v9 * v9;
    }
    if (v10 < v7[6] * v11)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v80 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Not enough space for metadata", 0x1Cu);
    }

    sub_1000FEBA4(propertyList, (const __CFData **)v100);
    unint64_t v12 = (unint64_t)v100[1];
    CFTypeRef cf = v100[0];
    v100[0] = 0LL;
    sub_10002A0F0(v100);
    uint64_t v13 = *v6;
    uint64_t v14 = v6[1];
    uint64_t v15 = *(unsigned int *)(v14 + 20);
    size_t v16 = v15 - 512;
    unint64_t v17 = v12 + v15 - 512 - 1;
    unint64_t v18 = v17 / (v15 - 512);
    if (v18 * v15 > v10 + v15 - *(void *)(*v6 + 48) * *(unsigned __int16 *)(v14 + 18))
    {
      uint64_t v81 = __cxa_allocate_exception(0x40uLL);
      *uint64_t v81 = &off_100196FC8;
      uint64_t v82 = std::generic_category();
      v81[1] = 28LL;
      v81[2] = v82;
      *((_BYTE *)v81 + 24) = 0;
      *((_BYTE *)v81 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v81[7] = "Not enough space for metadata";
    }

    if (v16 <= v17)
    {
      unint64_t v85 = a4;
      uint64_t v19 = 0LL;
      unint64_t v20 = v18 - 1;
      unint64_t v88 = v10;
      if (v18 <= 1) {
        unint64_t v18 = 1LL;
      }
      unint64_t v86 = v18;
      unint64_t v87 = v20;
      while (1)
      {
        if (v19 == v20)
        {
          uint64_t v21 = 0LL;
          uint64_t v22 = v6[1];
          uint64_t v23 = v10 - v20 * *(unsigned int *)(v22 + 20);
          size_t v24 = v12 % v16;
        }

        else
        {
          uint64_t v22 = v6[1];
          unint64_t v25 = *(unsigned int *)(v22 + 20);
          uint64_t v23 = v10 - v19 * v25;
          uint64_t v21 = (v23 - v25) / v25;
          size_t v24 = v16;
        }

        size_t v26 = v24 - 1;
        sub_1000D0454( (uint64_t)v98,  (v24 - 1 + *(unsigned __int16 *)(v22 + 18))
        / *(unsigned __int16 *)(v22 + 18)
        * *(unsigned __int16 *)(v22 + 18),
          v21);
        sub_1000D0508((uint64_t)v98, a2, v6[1], v23);
        if (v12 - v24 >= v19 * v16) {
          unint64_t v27 = v19 * v16;
        }
        else {
          unint64_t v27 = v12 - v24;
        }
        unint64_t v28 = *(unsigned __int16 *)(v6[1] + 18);
        unint64_t v29 = (char *)valloc((v26 + v28) / v28 * v28);
        if (!v29)
        {
          char v75 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          unint64_t v76 = std::bad_alloc::bad_alloc(v75);
        }

        v100[0] = &off_10018C340;
        uint64_t v101 = v100;
        unint64_t v112 = v29;
        sub_100043B68((uint64_t)&v113, (uint64_t)v100);
        unint64_t v30 = v101;
        if (v101 == v100)
        {
          unint64_t v30 = v100;
          uint64_t v31 = 4LL;
        }

        else
        {
          if (!v101) {
            goto LABEL_22;
          }
          uint64_t v31 = 5LL;
        }

        (*((void (**)(void))*v30 + v31))();
LABEL_22:
        unint64_t v32 = v112;
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        memcpy(v32, &BytePtr[v27], v24);
        unint64_t v34 = *(unsigned __int16 *)(v6[1] + 18);
        if (v24 % v34)
        {
          bzero(&v112[v24], v34 - v24 % v34);
          unint64_t v34 = *(unsigned __int16 *)(v6[1] + 18);
        }

        uint64_t v35 = (uint64_t)v112;
        uint64_t v36 = *((void *)sub_100120DCC() + 1);
        *(void *)&__int128 v92 = v35;
        *((void *)&v92 + 1) = v36;
        if (v36)
        {
          uint64_t v37 = (unint64_t *)(v36 + 8);
          do
            unint64_t v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }

        size_t v93 = (v26 + v34) / v34 * v34;
        uint64_t v94 = v23 + 512;
        size_t v95 = v93;
        char v96 = 0;
        sub_100061DFC((uint64_t *)v100, &v92);
        unint64_t v39 = (std::__shared_weak_count *)*((void *)&v92 + 1);
        if (*((void *)&v92 + 1))
        {
          uint64_t v40 = (unint64_t *)(*((void *)&v92 + 1) + 8LL);
          do
            unint64_t v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }

        uint64_t v42 = v6[1];
        sub_10003BD04((uint64_t)v105, (uint64_t)&v92);
        sub_10003BA04((uint64_t)v105, (uint64_t)v89);
        uint64_t v43 = sub_1000CDB10(v42, a2, (uint64_t *)&v92, (uint64_t)v89, 0);
        pthread_t v44 = v91;
        if (v91)
        {
          p_shared_owners = (unint64_t *)&v91->__shared_owners_;
          do
            unint64_t v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }

        unint64_t v47 = v90;
        if (v90)
        {
          int v48 = (unint64_t *)&v90->__shared_owners_;
          do
            unint64_t v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }

        uint64_t v50 = v97;
        if (v97)
        {
          unint64_t v51 = (unint64_t *)&v97->__shared_owners_;
          do
            unint64_t v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }

        __int128 v53 = (std::__shared_weak_count *)*((void *)&v92 + 1);
        if (!*((void *)&v92 + 1)) {
          goto LABEL_51;
        }
        int v54 = (unint64_t *)(*((void *)&v92 + 1) + 8LL);
        do
          unint64_t v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
          if (v43 < 0)
          {
LABEL_52:
            if ((_DWORD)v43)
            {
              unint64_t v77 = __cxa_allocate_exception(0x40uLL);
              *unint64_t v77 = &off_100196FC8;
              unint64_t v78 = std::generic_category();
              v77[1] = v43;
              v77[2] = v78;
              *((_BYTE *)v77 + 24) = 0;
              *((_BYTE *)v77 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
              v77[7] = "Failed to write metadata";
            }
          }
        }

        else
        {
LABEL_51:
          if (v43 < 0) {
            goto LABEL_52;
          }
        }

        unsigned __int8 v56 = v111;
        if (v111)
        {
          uint64_t v57 = (unint64_t *)&v111->__shared_owners_;
          do
            unint64_t v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }

        BOOL v59 = v110;
        if (v110)
        {
          __int128 v60 = (unint64_t *)&v110->__shared_owners_;
          do
            unint64_t v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }

        uint64_t v62 = v109;
        if (v109)
        {
          uint64_t v63 = (unint64_t *)&v109->__shared_owners_;
          do
            unint64_t v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }

        uint64_t v65 = v108;
        if (v108)
        {
          uint64_t v66 = (unint64_t *)&v108->__shared_owners_;
          do
            unint64_t v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }

        uint64_t v68 = v107;
        if (v107)
        {
          uint64_t v69 = (unint64_t *)&v107->__shared_owners_;
          do
            unint64_t v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }

        __int128 v71 = v106;
        if (v106)
        {
          uint64_t v72 = (unint64_t *)&v106->__shared_owners_;
          do
            unint64_t v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }

        if (v103 && &v104 != __p) {
          operator delete(__p);
        }
        sub_10000627C((uint64_t)v100);
        sub_100043BCC((uint64_t *)&v112);
        ++v19;
        unint64_t v20 = v87;
        unint64_t v10 = v88;
        if (v19 == v86)
        {
          uint64_t v13 = *v6;
          a4 = v85;
          break;
        }
      }
    }

    if (!*(void *)(v13 + 72))
    {
      *(void *)(v13 + 72) = v10 / *(unsigned int *)(v6[1] + 20);
      unsigned int v74 = sub_1000D03A0(v13, *a4);
      if (v74)
      {
        unint64_t v83 = __cxa_allocate_exception(0x40uLL);
        *unint64_t v83 = &off_100196FC8;
        uint64_t v84 = std::generic_category();
        v83[1] = v74;
        v83[2] = v84;
        *((_BYTE *)v83 + 24) = 0;
        *((_BYTE *)v83 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
        v83[7] = "Failed to update asif header";
      }
    }

    return sub_10002A0F0(&cf);
  }

  return result;
}

void sub_1000D272C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,const void *a62)
{
}

void sub_1000D27D0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v14 = (uint64_t *)&v15;
  if (*(void *)sub_1000C0EFC(a1 + 32, *(void *)(a1 + 176)))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
    uint64_t v5 = *(void *)(a1 + 352);
    uint64_t v6 = *(void *)(a1 + 360);
    if (v5 != v6)
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      do
      {
        unint64_t v9 = *(void *)(v5 + 8 * v8) * *(unsigned int *)(a1 + 96);
        unint64_t v13 = v9;
        if (v9)
        {
          sub_1000D2958(a1 + 200, v4, v8, v9, (uint64_t)&v14, (uint64_t)v14);
          sub_1000D5308(&v14, &v13, (uint64_t *)&v13);
        }

        ++v8;
        v7 += 8LL;
      }

      while (v5 + v7 != v6);
    }

    unint64_t v10 = v15;
    *a2 = v14;
    a2[1] = v10;
    uint64_t v11 = a2 + 1;
    uint64_t v12 = v16;
    a2[2] = v16;
    if (v12)
    {
      void v10[2] = v11;
      uint64_t v14 = (uint64_t *)&v15;
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      if (!v4) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    *a2 = v11;
    if (v4) {
LABEL_12:
    }
      (*(void (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
  }

  else
  {
    a2[2] = 0LL;
    a2[1] = 0LL;
    *a2 = a2 + 1;
  }

void sub_1000D2920( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

unint64_t *sub_1000D2958( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (v11 && !*(_BYTE *)(v11 + 520))
  {
    if (*(_BYTE *)(v11 + 400)) {
      uint64_t v9 = v11 + 40;
    }
    else {
      uint64_t v9 = 0LL;
    }
    sub_1000E8EF8(v9, a2, a5, a6);
  }

  return sub_1000C0F7C(&v11);
}

void sub_1000D29E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_1000D2A00(void *result, void *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7 = result;
  if (a2[2])
  {
    uint64_t v8 = a2 + 1;
    uint64_t v9 = (void *)a2[1];
    if (v9)
    {
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      do
      {
        unint64_t v10 = (void *)v8[2];
        BOOL v11 = *v10 == (void)v8;
        uint64_t v8 = v10;
      }

      while (v11);
    }

    unint64_t v12 = v10[4] + a4;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(result[25] + 16LL))(result + 25);
    if (result[12] <= v12) {
      result[12] = v12;
    }
  }

  uint64_t v15 = (void *)*a2;
  unint64_t v13 = a2 + 1;
  uint64_t v14 = v15;
  if (v15 != v13)
  {
    uint64_t v16 = (uint64_t)(v7 + 25);
    unint64_t v17 = v7 + 26;
    do
    {
      uint64_t v18 = v14[4];
      do
        unint64_t v19 = __ldaxr(v17);
      while (__stlxr(v19 + 1, v17));
      __int128 v24 = a3;
      uint64_t v25 = a4;
      if ((v18 - a3) % a4) {
        unint64_t v20 = (v18 - a3) / a4 + 1;
      }
      else {
        unint64_t v20 = (v18 - a3) / a4;
      }
      v23[0] = a3;
      v23[1] = v20;
      v23[2] = a4;
      uint64_t result = sub_1000D2B44(v16, &v24, (uint64_t)v23);
      uint64_t v21 = (void *)v14[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          uint64_t v22 = (void *)v14[2];
          BOOL v11 = *v22 == (void)v14;
          uint64_t v14 = v22;
        }

        while (!v11);
      }

      a3 = v18 + a4;
      uint64_t v14 = v22;
    }

    while (v22 != v13);
  }

  return result;
}

void *sub_1000D2B44(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  __int128 v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  __int128 v8 = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 16);
  unint64_t v13 = 0LL;
  sub_1000E9068(v5, (uint64_t *)&v10, &v8, (uint64_t)v12);
  uint64_t result = v13;
  if (v13 == v12)
  {
    uint64_t v7 = 4LL;
    uint64_t result = v12;
  }

  else
  {
    if (!v13) {
      return result;
    }
    uint64_t v7 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_1000D2C08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v21 = a19;
  if (a19 == v19)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &a16;
  }

  else
  {
    if (!a19) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D2C40( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(), uint64_t *a6)
{
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  *(void *)a1 = off_10018B840;
  *(void *)(a1 + 16) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 24) = v11;
  if (v11)
  {
    unint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  *(_DWORD *)(a1 + sub_100006224(v6 - 32) = 2003069043;
  *(void *)(a1 + 36) = *(void *)(a3 + 4);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 12);
  __int128 v14 = *(_OWORD *)(a3 + 16);
  __int128 v15 = *(_OWORD *)(a3 + 32);
  __int128 v16 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 94) = *(void *)(a3 + 62);
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = v14;
  *(_WORD *)(a1 + 102) = 0;
  *(void *)(a1 + 104) = *(void *)(a3 + 72);
  *(void *)(a1 + sub_100006224(v49 + 112) = 850045863LL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 176) = a4;
  uint64_t v17 = *a6;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a6 + 2);
  *(void *)(a1 + 184) = v17;
  uint64_t v18 = *(void *)(a3 + 56);
  uint64_t v19 = *(unsigned __int16 *)(a3 + 68);
  unsigned int v20 = *(_DWORD *)(a3 + 64);
  uint64_t v21 = *a2;
  unint64_t v33 = &off_10018ECF0;
  unint64_t v34 = (void *)a1;
  uint64_t v35 = &v33;
  sub_1000CEF90(a1 + 200, a1, v18 * v19, v20, v19, a5, 2LL, v21, (uint64_t)&v33);
  uint64_t v22 = v35;
  if (v35 == &v33)
  {
    uint64_t v23 = 4LL;
    uint64_t v22 = &v33;
  }

  else
  {
    if (!v35) {
      goto LABEL_9;
    }
    uint64_t v23 = 5LL;
  }

  (*v22)[v23]();
LABEL_9:
  *(void *)(a1 + 4056) = a1 + 32;
  *(void *)(a1 + 4064) = a1 + 200;
  *(void *)(a1 + 4072) = 0LL;
  sub_1000D27D0(a1, &v33);
  unint64_t v24 = *(unsigned __int16 *)(a3 + 68);
  unint64_t v25 = *(unsigned int *)(a3 + 64);
  sub_1000D2A00( (void *)a1,  &v33,  (v24 + v25 - ((int)v24 + 511) % v24 + 2 * (v24 + 8 * ((unint64_t)(*(void *)(a1 + 320) + *(void *)(a1 + 280) - 1LL) / *(void *)(a1 + 280)) + 7)
   / v24
   * v24
   + 510)
  / v25
  * v25,
    v25);
  sub_10000A494((uint64_t)&v33, v34);
  uint64_t v26 = *(void *)(a1 + 176);
  if (v26 == 1) {
    uint64_t v27 = 0LL;
  }
  else {
    uint64_t v27 = v26 + 1;
  }
  *(void *)(a1 + 176) = v27;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  sub_1000CFA84(a1 + 200, v28);
  if (!*((_BYTE *)a6 + 2))
  {
    unint64_t v29 = atomic_load((unint64_t *)(a1 + 4072));
    if (v29 != -1LL)
    {
      unint64_t v33 = (uint64_t (**)())&v31;
      unint64_t v32 = &v33;
      std::__call_once((unint64_t *)(a1 + 4072), &v32, (void (__cdecl *)(void *))nullsub_111);
    }
  }

  (*(void (**)(uint64_t))(*(void *)v28 + 40LL))(v28);
  return a1;
}

void sub_1000D2EFC(_Unwind_Exception *a1)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
  }
  sub_1000C52B8(v3);
  std::mutex::~mutex(v2);
  sub_100006224(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2F90( uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  *(void *)a1 = off_10018B840;
  *(void *)(a1 + 16) = *a6;
  uint64_t v17 = a6[1];
  *(void *)(a1 + 24) = v17;
  if (v17)
  {
    uint64_t v18 = (unint64_t *)(v17 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  sub_1000E039C(&v33, *((unsigned __int8 *)a7 + 1));
  sub_1000D0274(a1 + 32, &v33, a8, a4, a5, a3, a2);
  *(void *)(a1 + sub_100006224(v49 + 112) = 850045863LL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  uint64_t v20 = *a7;
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 184) = v20;
  *(void *)&__int128 v35 = &off_10018ECF0;
  *((void *)&v35 + 1) = a1;
  uint64_t v36 = &v35;
  sub_1000CEF90(a1 + 200, a1, a2 * a5, a3, a2, (uint64_t (***)())0x200, 2LL, 0LL, (uint64_t)&v35);
  uint64_t v21 = v36;
  if (v36 == &v35)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &v35;
  }

  else
  {
    if (!v36) {
      goto LABEL_9;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_9:
  *(void *)(a1 + 4056) = a1 + 32;
  *(void *)(a1 + 4064) = a1 + 200;
  *(void *)(a1 + 4072) = 0LL;
  if ((a2 & 0x1FF) != 0)
  {
    uint64_t v27 = "ASIF: Block size isn't a multiple of 512";
    goto LABEL_21;
  }

  if (*(_DWORD *)(a1 + 40) <= 0x50u)
  {
    uint64_t v27 = "ASIF: Header size is less than the min header size";
LABEL_21:
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    unint64_t v29 = std::generic_category();
    exception[1] = 152LL;
    exception[2] = v29;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = v27;
  }

  if (!*((_BYTE *)a7 + 2))
  {
    unint64_t v23 = atomic_load((unint64_t *)(a1 + 4072));
    if (v23 != -1LL)
    {
      *(void *)&__int128 v35 = &v32;
      unint64_t v34 = &v35;
      std::__call_once((unint64_t *)(a1 + 4072), &v34, (void (__cdecl *)(void *))nullsub_112);
    }
  }

  unsigned int v24 = sub_1000D03A0(a1 + 32, *a6);
  if (v24)
  {
    unint64_t v30 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v30 = &off_100196FC8;
    char v31 = std::generic_category();
    v30[1] = v24;
    v30[2] = v31;
    *((_BYTE *)v30 + 24) = 0;
    *((_BYTE *)v30 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v30[7] = "Couldn't write asif's header";
  }

  if (*((_BYTE *)a9 + 16))
  {
    __int128 v35 = *a9;
  }

  else
  {
    *(void *)&__int128 v35 = sub_100120D7C();
    *((void *)&v35 + 1) = v25;
  }

  sub_1000D32F4((uint64_t *)a1, @"stable uuid", (uint64_t)&v35);
  return a1;
}

void sub_1000D3288( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_1000D32F4(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 136))(a1);
  sub_1000D13A0(a1 + 507, v6, &theDict);
  uint64_t v7 = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v20 = std::generic_category();
    exception[1] = 152LL;
    exception[2] = v20;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }

  uint64_t v9 = TypeID;
  if (CFGetTypeID(v7) != TypeID)
  {
    uint64_t v21 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v22 = CFGetTypeID(v7);
    unint64_t v23 = sub_10000A37C(v21, v22, v9);
  }

  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v7);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 1, (CFDictionaryRef)v7);
  value = MutableCopy;
  unint64_t v12 = "ASIF: can't copy metadata to mutable copy";
  if (!MutableCopy)
  {
    uint64_t v24 = 4294967284LL;
    goto LABEL_14;
  }

  unint64_t v13 = operator new(0x28uLL);
  __p = v13;
  __int128 v32 = xmmword_100145B50;
  _OWORD *v13 = 0u;
  v13[1] = 0u;
  *(void *)((char *)v13 + 29) = 0LL;
  sub_100077528(a3, v13);
  BOOL v14 = sub_1000FF07C(MutableCopy, a2, (uint64_t)&__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  if (!v14)
  {
    unint64_t v12 = "ASIF: can't set requested uuid";
    uint64_t v24 = 150LL;
LABEL_14:
    uint64_t v25 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v25 = &off_100196FC8;
    uint64_t v26 = std::generic_category();
    v25[1] = v24;
    uint64_t v25[2] = v26;
    *((_BYTE *)v25 + 24) = 0;
    *((_BYTE *)v25 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v25[7] = v12;
  }

  CFIndex v15 = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, v15 + 1, theDict);
  __p = v16;
  if (!v16)
  {
    uint64_t v27 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v27 = &off_100196FC8;
    uint64_t v28 = std::generic_category();
    v27[1] = 4294967284LL;
    v27[2] = v28;
    *((_BYTE *)v27 + 24) = 0;
    *((_BYTE *)v27 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v27[7] = "ASIF: can't copy metadata to mutable copy";
  }

  CFDictionarySetValue(v16, @"internal metadata", value);
  sub_1000D1FC8((const void **)a1 + 507, v6, __p, a1 + 2);
  unsigned int v17 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*a1 + 176))(a1, v6, 0LL);
  if (v17)
  {
    unint64_t v29 = __cxa_allocate_exception(0x40uLL);
    *unint64_t v29 = &off_100196FC8;
    unint64_t v30 = std::generic_category();
    v29[1] = v17;
    v29[2] = v30;
    *((_BYTE *)v29 + 24) = 0;
    *((_BYTE *)v29 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v29[7] = "ASIF: failed to write metadata";
  }

  sub_100006B34((const void **)&__p);
  sub_100006B34((const void **)&value);
  sub_10000D8A4((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40LL))(v6);
}

void sub_1000D3640( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, const void *a18)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 40LL))(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D36D4( uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t *a6, uint64_t *a7, _OWORD *a8, __int128 *a9)
{
  return sub_1000D2F90(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1000D36E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  int v5 = 0;
  int64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t v10 = *(void *)sub_1000C0EFC(a2, v4);
    if (v10)
    {
      int64_t v11 = sub_1000CF8BC(a1, v10);
      if (!v5 || v6 < v11)
      {
        int v5 = 1;
        uint64_t v7 = v4;
        int64_t v6 = v11;
      }
    }

    char v8 = 0;
    uint64_t v4 = 1LL;
  }

  while ((v9 & 1) != 0);
  return v7;
}

uint64_t sub_1000D378C(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v3 = (unint64_t *)(a1 + 4072);
  v6[0] = a1;
  v6[1] = &v7;
  v6[2] = a2;
  unint64_t v4 = atomic_load(v3);
  if (v4 != -1LL)
  {
    char v9 = v6;
    char v8 = &v9;
    std::__call_once(v3, &v8, (void (__cdecl *)(void *))sub_1000E9208);
  }

  if (v7 < 0) {
    return v7;
  }
  else {
    return -v7;
  }
}

uint64_t sub_1000D37F4(uint64_t a1, uint64_t a2, int a3)
{
  int64_t v6 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  int v7 = *(uint64_t (****)())sub_1000C0EFC(a1 + 32, *(void *)(a1 + 176));
  char v8 = v7;
  if (!v7)
  {
    unint64_t v9 = *(unsigned __int16 *)(a1 + 100);
    uint64_t v10 = *(void *)(a1 + 176);
    uint64_t v11 = *(void *)(a1 + 320);
    unint64_t v12 = *(void *)(a1 + 280);
    unint64_t v13 = (void *)sub_1000C0EFC(a1 + 32, v10);
    char v8 = (uint64_t (***)())(v9
                                    + 511
                                    - ((int)v9 + 511) % v9
                                    + (8 * ((v11 + v12 - 1) / v12) + v9 + 7) / v9 * v9 * v10);
    void *v13 = v8;
  }

  uint64_t v14 = sub_1000CED6C(a1 + 200, a2, v8);
  uint64_t v15 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if ((_DWORD)v14 == 1)
    {
      uint64_t v16 = *(void *)(a1 + 176);
      if (v16 == 1) {
        uint64_t v17 = 0LL;
      }
      else {
        uint64_t v17 = v16 + 1;
      }
      *(void *)(a1 + 176) = v17;
    }

    if (v7
      || (uint64_t v15 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), 0LL),
          !(_DWORD)v15)
      && (uint64_t v15 = sub_1000D03A0(a1 + 32, *(void *)(a2 + 16)), !(_DWORD)v15))
    {
      uint64_t v15 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 16) + 16LL))( *(void *)(a2 + 16),  2 * (a3 == 2));
    }
  }

  std::mutex::unlock(v6);
  return v15;
}

void sub_1000D3948(_Unwind_Exception *a1)
{
}

__n128 sub_1000D398C@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unint64_t a5@<X4>, __n128 **a6@<X8>)
{
  unint64_t v12 = a1 + 200;
  unint64_t v13 = (__n128 *)operator new(0x48uLL);
  __n128 result = *a4;
  v13[1] = *a4;
  v13[2].n128_u64[0] = a4[1].n128_u64[0];
  v13[2].n128_u64[1] = a5;
  v13[3].n128_u64[0] = a1;
  v13[3].n128_u64[1] = a3;
  v13->n128_u64[0] = (unint64_t)off_10018B940;
  v13->n128_u64[1] = a2;
  v13[4].n128_u64[0] = v12;
  *a6 = v13;
  return result;
}

uint64_t sub_1000D3A08@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  sub_1000D13A0(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"user metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    uint64_t v7 = TypeID;
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v11 = CFGetTypeID(Value);
      unint64_t v12 = sub_10000A37C(exception, v11, v7);
    }

    CFTypeID v8 = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != v8)
    {
      unint64_t v13 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v14 = CFGetTypeID(Value);
      uint64_t v15 = sub_10000A37C(v13, v14, v8);
    }

    CFRetain(Value);
    *a2 = Value;
  }

  else
  {
    sub_1000FEB60((CFMutableDictionaryRef *)&v16);
    *a2 = v16;
    uint64_t v16 = 0LL;
    sub_100006B34(&v16);
  }

  sub_10000D8A4((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
}

void sub_1000D3B64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 40LL))(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D3BB0(uint64_t *a1, const void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 136))(a1);
  sub_1000D13A0(a1 + 507, v4, &theDict);
  if (!theDict)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v10 = std::generic_category();
    exception[1] = 4294967284LL;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "ASIF: can't read/allocate asif metadata";
  }

  CFIndex Count = CFDictionaryGetCount(theDict);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, theDict);
  CFPropertyListRef propertyList = MutableCopy;
  if (!MutableCopy)
  {
    CFTypeID v11 = __cxa_allocate_exception(0x40uLL);
    void *v11 = &off_100196FC8;
    unint64_t v12 = std::generic_category();
    v11[1] = 4294967284LL;
    void v11[2] = v12;
    *((_BYTE *)v11 + 24) = 0;
    *((_BYTE *)v11 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v11[7] = "ASIF: can't copy metadata to mutable copy";
  }

  CFDictionarySetValue(MutableCopy, @"user metadata", a2);
  sub_1000D1FC8((const void **)a1 + 507, v4, propertyList, a1 + 2);
  unsigned int v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 176))(a1, v4, 2LL);
  if (v7)
  {
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    void *v13 = &off_100196FC8;
    CFTypeID v14 = std::generic_category();
    v13[1] = v7;
    v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v13[7] = "ASIF: failed to write metadata";
  }

  sub_100006B34(&propertyList);
  sub_10000D8A4((const void **)&theDict);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
}

void sub_1000D3D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  _Unwind_Resume(a1);
}

CFStringRef sub_1000D3DD8(void *a1, const void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 136LL))(a1);
  sub_1000D13A0(a1 + 507, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"internal metadata");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v15 = std::generic_category();
    exception[1] = 152LL;
    exception[2] = v15;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "ASIF: missing internal metadata key";
  }

  uint64_t v7 = TypeID;
  if (CFGetTypeID(Value) != TypeID)
  {
    uint64_t v16 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v17 = CFGetTypeID(Value);
    uint64_t v18 = sub_10000A37C(v16, v17, v7);
  }

  CFTypeID v8 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, a2);
  CFTypeID v9 = CFStringGetTypeID();
  if (v8)
  {
    uint64_t v10 = v9;
    if (CFGetTypeID(v8) != v9)
    {
      unint64_t v19 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v20 = CFGetTypeID(v8);
      uint64_t v21 = sub_10000A37C(v19, v20, v10);
    }

    sub_1000FE7CC(v8, __p);
    unint64_t v11 = v23;
    if ((v23 & 0x80u) == 0) {
      unint64_t v12 = (unsigned __int8 *)__p;
    }
    else {
      unint64_t v12 = (unsigned __int8 *)__p[0];
    }
    if ((v23 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)__p[1];
    }
    CFTypeID v8 = (const __CFString *)sub_10007A910((uint64_t)&v24, v12, &v12[v11]);
  }

  sub_10000D8A4((const void **)&theDict);
  (*(void (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
  return v8;
}

void sub_1000D3FCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, const void *a17)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40LL))(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4038(uint64_t *a1, uint64_t a2)
{
  return sub_1000D32F4(a1, @"source uuid", a2);
}

CFStringRef sub_1000D4048(void *a1)
{
  return sub_1000D3DD8(a1, @"stable uuid");
}

CFStringRef sub_1000D4054(void *a1)
{
  return sub_1000D3DD8(a1, @"source uuid");
}

uint64_t sub_1000D4060(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_1000D406C(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 64) = *a2;
  return sub_1000D03A0(a1 + 32, *(void *)(a1 + 16));
}

uint64_t sub_1000D4084(uint64_t *a1)
{
  v4[0] = sub_100120D7C();
  v4[1] = v2;
  return sub_1000D32F4(a1, @"stable uuid", (uint64_t)v4);
}

  ;
}

uint64_t sub_1000D40F8(uint64_t a1)
{
  *(void *)a1 = off_10018B840;
  uint64_t v2 = a1 + 16;
  sub_1000C52B8(a1 + 200);
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  sub_100006224(v2);
  return a1;
}

void sub_1000D4140(char *a1)
{
  *(void *)a1 = off_10018B840;
  uint64_t v2 = (uint64_t)(a1 + 16);
  sub_1000C52B8((uint64_t)(a1 + 200));
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  sub_100006224(v2);
  operator delete(a1);
}

uint64_t sub_1000D4188(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 218);
}

uint64_t sub_1000D4190(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1000D4198(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
}

uint64_t *sub_1000D41A8@<X0>(void *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  int64_t v6 = (uint64_t *)operator new(0x130uLL);
  __n128 result = sub_1000BFDB8(v6, a1, a2);
  *a3 = (char *)v6 + *(void *)(*v6 - 104);
  return result;
}

void sub_1000D41FC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D4210(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A51E8((uint64_t)a1, a2);
  if (!(_DWORD)v4)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    unint64_t v6 = (a2 + v5 - 1) / v5;
    if (v6 <= a1[11])
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 136))(a1);
      uint64_t v8 = a1[11];
      if (v8 - v6 >= sub_1000D11BC(a1 + 507, v7))
      {
        a1[10] = v6;
        sub_1000D03A0((uint64_t)(a1 + 4), a1[2]);
        uint64_t v4 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 176))(a1, v7, 2LL);
      }

      else
      {
        uint64_t v4 = 4294967269LL;
      }

      (*(void (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
    }

    else
    {
      return 4294967269LL;
    }
  }

  return v4;
}

void sub_1000D42EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D430C()
{
  return 1LL;
}

uint64_t sub_1000D4314()
{
  return 1LL;
}

void *sub_1000D431C(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_10018B4F8;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_1000D4368(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D437C(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = ((*(void *)(a4 + 144) - a3[18]) & ~((*(void *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  uint64_t v9 = a1[10];
  else {
    return sub_1000CDB10((uint64_t)(a1 + 25), a2, a3, a4, 1);
  }
}

uint64_t sub_1000D4438(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = ((*(void *)(a4 + 144) - a3[18]) & ~((*(void *)(a4 + 144) - a3[18]) >> 63)) + a3[3];
  uint64_t v9 = a1[10];
  int v10 = sub_1000D378C((uint64_t)a1, a2 + 16);
  if (!v10) {
    return sub_1000CDB10((uint64_t)(a1 + 25), a2, a3, a4, 0);
  }
  if (v10 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = -v10;
  }
  return -v11;
}

uint64_t sub_1000D4514(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v8 = (void *)(a3 + 8);
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t v10 = *v8 + *(v8 - 1);
      unint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24LL))(a1) * v10;
      uint64_t v12 = a1[10];
      v8 += 2;
      if (!--v9) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    uint64_t result = sub_1000D378C((uint64_t)a1, a2 + 16);
    if (!(_DWORD)result) {
      return sub_1000CEA7C((uint64_t)(a1 + 25), a2, a3, a4);
    }
  }

  return result;
}

__n128 sub_1000D45FC@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 48);
  *((__n128 *)v4 + 3) = result;
  *(void *)uint64_t v4 = off_10018B940;
  *((void *)v4 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a1 + 64);
  *a2 = v4;
  return result;
}

uint64_t sub_1000D4664(uint64_t a1)
{
  return a1 + 176;
}

unint64_t *sub_1000D466C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  return sub_1000E040C(a1 + 2080, a2, a3, a4);
}

void *sub_1000D4674(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100089F98(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_1000D46CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D46E8(uint64_t a1, uint64_t a2)
{
  CFTypeID v14 = (std::mutex *)(a1 + 8);
  char v15 = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(void *)(a1 + 88))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 72);
    uint64_t v5 = v4[4];
    sub_10000D0E4((uint64_t **)(a1 + 72), v4);
    operator delete(v4);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *(void *)a1 + v5;
    sub_10001ED54((uint64_t)&v14);
    uint64_t v7 = *(void *)(a2 + 24);
    if (v7)
    {
      v11[0] = *(void *)a1 + v5;
      uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 48LL))(v7, v11);
      if ((_DWORD)v8)
      {
        *(void *)&__int128 v9 = "space_allocators::FixedSize::allocate(const size_changed_fn_t &)";
        *((void *)&v9 + 1) = 37LL;
        int v10 = 16;
        sub_1000D4850(v11, &v9);
        sub_10000552C(&v12, (uint64_t)"allocated: size change callback failed with ", 44LL);
        std::ostream::operator<<(&v12, v8);
        std::ostream::~ostream(&v12, off_10018BA80);
        sub_1000D49B4((uint64_t)v11);
        std::ios::~ios(&v13);
      }
    }
  }

  if (v15) {
    std::mutex::unlock(v14);
  }
  return v5;
}

void sub_1000D481C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (*(_BYTE *)(v12 - 40)) {
    std::mutex::unlock(*(std::mutex **)(v12 - 48));
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000D4850(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000D4938((uint64_t)a1, a2);
  *a1 = off_10018B9B8;
  a1[45] = &off_10018BAB8;
  a1[46] = &off_10018BAE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018B9B8;
  a1[45] = off_10018BA40;
  a1[46] = off_10018BA68;
  return a1;
}

void sub_1000D48D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D48F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D4938(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018BB50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000D49A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D49B4(uint64_t a1)
{
  *(void *)a1 = off_10018BB50;
  sub_1000D4C2C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000D4A50(char *a1)
{
}

uint64_t sub_1000D4A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D4AC8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000D4B14(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018BA80);
  sub_1000D49B4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000D4B4C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018BA80);
  sub_1000D49B4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000D4B8C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018BA80);
  sub_1000D49B4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D4BCC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018BA80);
  sub_1000D49B4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000D4C18(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D49B4(a1);
  operator delete(v1);
}

uint64_t sub_1000D4C2C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D4D7C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D4D54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000D4D7C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 137LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 137LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  int *result = v5;
  return result;
}

__n128 sub_1000D4F68(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_10018BBD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose((const void *)(v2 - 120), 8) = result;
  return result;
}

__n128 sub_1000D4FA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10018BBD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = result;
  return result;
}

uint64_t sub_1000D4FC0(uint64_t a1, uint64_t *a2)
{
  return sub_1000D5014((uint64_t *)(a1 + 8), *a2);
}

uint64_t sub_1000D4FCC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000D5008()
{
  return &off_10018BC40;
}

uint64_t sub_1000D5014(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 16);
  int v5 = valloc(a1[1]);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v12 = std::bad_alloc::bad_alloc(exception);
  }

  v15[0] = &off_10018C340;
  uint64_t v16 = v15;
  uint64_t v13 = v5;
  sub_100043B68((uint64_t)&v14, (uint64_t)v15);
  char v6 = v16;
  if (v16 == v15)
  {
    uint64_t v7 = 4LL;
    char v6 = v15;
  }

  else
  {
    if (!v16) {
      goto LABEL_7;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  bzero(v13, a1[1]);
  int v8 = sub_1000474C8(v4, (uint64_t)v13, a1[1], a2 - a1[1]);
  if (a1[1] == v8)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    if (v8 >= 0) {
      uint64_t v9 = 4294967291LL;
    }
    else {
      uint64_t v9 = v8;
    }
    sub_1000A3900(*a1);
  }

  sub_100043BCC((uint64_t *)&v13);
  return v9;
}

void sub_1000D5148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1000D5168(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018BC60;
  result[1] = v3;
  return result;
}

uint64_t sub_1000D519C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018BC60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000D51B8(uint64_t a1, unint64_t *a2)
{
  return sub_1000D5208((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_1000D51C0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000D51FC()
{
  return &off_10018BCC0;
}

uint64_t sub_1000D5208(uint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a1 + 16);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40LL))(v4) > v3
    && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v4 + 56LL))(v4, v3))
  {
    sub_1000A3900(*a1);
  }

  return 0LL;
}

void sub_1000D5274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  sub_1000D5308((uint64_t **)(a1 + 72), (unint64_t *)&v7, &v7);
  unint64_t v6 = *(void *)a1 + v7;
  if (*(void *)(a1 + 96) <= v6) {
    *(void *)(a1 + 96) = v6;
  }
  sub_1000CFB64((void *)a1, a3);
  std::mutex::unlock(v5);
}

void sub_1000D52F4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000D5308(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_10000CC04(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t sub_1000D53C0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018BDB0);
  sub_1000D5584(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D53F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018BDB0);
  sub_1000D5584(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D5438(char *a1)
{
}

uint64_t sub_1000D547C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D54B0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D54FC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018BDB0);
  sub_1000D5584((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D553C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018BDB0);
  sub_1000D5584((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D5584(uint64_t a1)
{
  *(void *)a1 = off_10018BE80;
  sub_1000D5620(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D5620(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D5788((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D5748( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D5774(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D5584(a1);
  operator delete(v1);
}

int *sub_1000D5788(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 436LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 436LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D596C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018BFD0);
  sub_1000D5B30(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D59A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018BFD0);
  sub_1000D5B30(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D59E4(char *a1)
{
}

uint64_t sub_1000D5A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D5A5C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D5AA8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018BFD0);
  sub_1000D5B30((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D5AE8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018BFD0);
  sub_1000D5B30((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D5B30(uint64_t a1)
{
  *(void *)a1 = off_10018C0A0;
  sub_1000D5BCC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D5BCC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D5D34((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D5CF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D5D20(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D5B30(a1);
  operator delete(v1);
}

int *sub_1000D5D34(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 450LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 450LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  int *result = v5;
  return result;
}

void *sub_1000D5F18(void *result, uint64_t a2, uint64_t a3)
{
  int *result = a2;
  result[1] = a3;
  atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x3F80000000000000LL) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }

  return result;
}

void *sub_1000D5F88(void *result, uint64_t a2, uint64_t a3)
{
  int *result = a2;
  result[1] = a3;
  unint64_t v3 = atomic_load((unint64_t *)(*(void *)(a2 + 56) + 16 * a3 + 8));
  if ((v3 & 0x7F80000000000000LL) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    int v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"ASIF: data entry - invalid reserved bits", 0x16u);
  }

  return result;
}

uint64_t sub_1000D5FE0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C1F0);
  sub_1000D61A4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D6018(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C1F0);
  sub_1000D61A4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D6058(char *a1)
{
}

uint64_t sub_1000D609C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D60D0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D611C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018C1F0);
  sub_1000D61A4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D615C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C1F0);
  sub_1000D61A4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D61A4(uint64_t a1)
{
  *(void *)a1 = off_10018C2C0;
  sub_1000D6240(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D6240(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D63A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D6368( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D6394(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D61A4(a1);
  operator delete(v1);
}

int *sub_1000D63A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 547LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 547LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  int *result = v5;
  return result;
}

void *sub_1000D6594()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018C340;
  return result;
}

void sub_1000D65B8(uint64_t a1, void *a2)
{
  *a2 = &off_10018C340;
}

void sub_1000D65D0(uint64_t a1, void **a2)
{
}

uint64_t sub_1000D65D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000D6614()
{
  return &off_10018C3A0;
}

uint64_t sub_1000D6620(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_10009B3F8(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  os_log_type_t v14 = v10;
  uint64_t v15 = &v10[32 * v4];
  uint64_t v16 = (uint64_t)v15;
  uint64_t v17 = &v10[32 * v9];
  unint64_t v11 = (void *)sub_10011E748((uint64_t)v15, a2);
  void *v11 = off_1001969E8;
  void v11[3] = *(void *)(a2 + 24);
  v16 += 32LL;
  sub_1000D671C(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000D684C((uint64_t)&v14);
  return v12;
}

void sub_1000D6708(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000D671C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000D6790((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000D6790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      *(void *)sub_10011E748(a7 + v11 - 32, a3 + v11 - sub_100006224(v6 - 32) = off_1001969E8;
      *(void *)(a7 + v11 - _Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a3 + v11 - 8);
      v11 -= 32LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_1000D6824(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 32LL)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D684C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000D689C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }

      while (!v9);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1000D6928(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C490);
  sub_1000D6AEC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D6960(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C490);
  sub_1000D6AEC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D69A0(char *a1)
{
}

uint64_t sub_1000D69E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D6A18(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D6A64(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018C490);
  sub_1000D6AEC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D6AA4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C490);
  sub_1000D6AEC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D6AEC(uint64_t a1)
{
  *(void *)a1 = off_10018C560;
  sub_1000D6B88(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D6B88(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D6CF0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D6CB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D6CDC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D6AEC(a1);
  operator delete(v1);
}

int *sub_1000D6CF0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 863LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 863LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D6ED4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C6B0);
  sub_1000D7098(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D6F0C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C6B0);
  sub_1000D7098(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D6F4C(char *a1)
{
}

uint64_t sub_1000D6F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D6FC4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D7010(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018C6B0);
  sub_1000D7098((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D7050(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C6B0);
  sub_1000D7098((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D7098(uint64_t a1)
{
  *(void *)a1 = off_10018C780;
  sub_1000D7134(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D7134(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D729C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D725C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7288(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D7098(a1);
  operator delete(v1);
}

int *sub_1000D729C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 888LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 888LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D7480(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018C8D0);
  sub_1000D7644(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D74B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C8D0);
  sub_1000D7644(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D74F8(char *a1)
{
}

uint64_t sub_1000D753C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D7570(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D75BC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018C8D0);
  sub_1000D7644((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D75FC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018C8D0);
  sub_1000D7644((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D7644(uint64_t a1)
{
  *(void *)a1 = off_10018C9A0;
  sub_1000D76E0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D76E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D7848((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D7808( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D7834(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D7644(a1);
  operator delete(v1);
}

int *sub_1000D7848(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 900LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 900LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void *sub_1000D7A2C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000D7B14((uint64_t)a1, a2);
  *a1 = off_10018CA28;
  a1[45] = &off_10018CB28;
  a1[46] = &off_10018CB50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018CA28;
  a1[45] = off_10018CAB0;
  a1[46] = off_10018CAD8;
  return a1;
}

void sub_1000D7AB0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D7AD4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D7B14(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018CBC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000D7B7C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D7B90(uint64_t a1)
{
  *(void *)a1 = off_10018CBC0;
  sub_1000D7E08(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000D7C2C(char *a1)
{
}

uint64_t sub_1000D7C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D7CA4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000D7CF0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CAF0);
  sub_1000D7B90(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000D7D28(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018CAF0);
  sub_1000D7B90((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000D7D68(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018CAF0);
  sub_1000D7B90(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D7DA8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018CAF0);
  sub_1000D7B90((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000D7DF4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D7B90(a1);
  operator delete(v1);
}

uint64_t sub_1000D7E08(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D7F58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D7F30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000D7F58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 258LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 258LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D813C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CD10);
  sub_1000D8300(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D8174(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018CD10);
  sub_1000D8300(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D81B4(char *a1)
{
}

uint64_t sub_1000D81F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D822C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D8278(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018CD10);
  sub_1000D8300((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D82B8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018CD10);
  sub_1000D8300((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D8300(uint64_t a1)
{
  *(void *)a1 = off_10018CDE0;
  sub_1000D839C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D839C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D8504((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D84C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D84F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D8300(a1);
  operator delete(v1);
}

int *sub_1000D8504(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1075LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1075LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D86E8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018CF30);
  sub_1000D88AC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D8720(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018CF30);
  sub_1000D88AC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D8760(char *a1)
{
}

uint64_t sub_1000D87A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D87D8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D8824(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018CF30);
  sub_1000D88AC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D8864(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018CF30);
  sub_1000D88AC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D88AC(uint64_t a1)
{
  *(void *)a1 = off_10018D000;
  sub_1000D8948(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D8948(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D8AB0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D8A70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D8A9C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D88AC(a1);
  operator delete(v1);
}

int *sub_1000D8AB0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1081LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1081LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D8C94(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D150);
  sub_1000D8E58(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D8CCC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D150);
  sub_1000D8E58(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D8D0C(char *a1)
{
}

uint64_t sub_1000D8D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D8D84(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D8DD0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018D150);
  sub_1000D8E58((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D8E10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D150);
  sub_1000D8E58((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D8E58(uint64_t a1)
{
  *(void *)a1 = off_10018D220;
  sub_1000D8EF4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D8EF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D905C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D901C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D9048(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D8E58(a1);
  operator delete(v1);
}

int *sub_1000D905C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1090LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1090LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D9240(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D370);
  sub_1000D9404(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D9278(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D370);
  sub_1000D9404(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D92B8(char *a1)
{
}

uint64_t sub_1000D92FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D9330(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D937C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018D370);
  sub_1000D9404((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D93BC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D370);
  sub_1000D9404((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D9404(uint64_t a1)
{
  *(void *)a1 = off_10018D440;
  sub_1000D94A0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D94A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D9608((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D95C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D95F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D9404(a1);
  operator delete(v1);
}

int *sub_1000D9608(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1151LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1151LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D97EC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D590);
  sub_1000D99B0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D9824(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D590);
  sub_1000D99B0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D9864(char *a1)
{
}

uint64_t sub_1000D98A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D98DC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D9928(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018D590);
  sub_1000D99B0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D9968(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D590);
  sub_1000D99B0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D99B0(uint64_t a1)
{
  *(void *)a1 = off_10018D660;
  sub_1000D9A4C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D9A4C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000D9BB4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000D9B74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000D9BA0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D99B0(a1);
  operator delete(v1);
}

int *sub_1000D9BB4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1188LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1188LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000D9D98(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D7B0);
  sub_1000D9F5C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000D9DD0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D7B0);
  sub_1000D9F5C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000D9E10(char *a1)
{
}

uint64_t sub_1000D9E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000D9E88(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000D9ED4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018D7B0);
  sub_1000D9F5C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000D9F14(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D7B0);
  sub_1000D9F5C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000D9F5C(uint64_t a1)
{
  *(void *)a1 = off_10018D880;
  sub_1000D9FF8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000D9FF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DA160((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DA120( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DA14C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000D9F5C(a1);
  operator delete(v1);
}

int *sub_1000DA160(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1441LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1441LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000DA344(uint64_t a1)
{
  int v2 = sub_1000CC574(a1 + 5504);
  uint64_t v3 = *(void *)(a1 + 6600);
  if (v3 == v2)
  {
    sub_1000DA4FC(a1 + 5168, a1 + 5328);
    *(void *)(a1 + 5512) = 0LL;
    uint64_t v4 = *(void *)(a1 + 6200);
    if (v4)
    {
      int v5 = *(void (****)(void))(a1 + 6192);
      do
      {
        --v4;
        char v6 = *v5;
        v5 += 3;
        (*v6)();
      }

      while (v4);
    }

    *(void *)(a1 + 6200) = 0LL;
    if (*(_BYTE *)(a1 + 6184)) {
      *(_BYTE *)(a1 + 6184) = 0;
    }
    *(void *)(a1 + 6600) = 0LL;
  }

  else
  {
    if (v2 < 0) {
      int v7 = v2;
    }
    else {
      int v7 = -5;
    }
    return -(uint64_t)-v7;
  }

  return v3;
}

void *sub_1000DA414(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000DA588((uint64_t)a1, a2);
  *a1 = off_10018D908;
  a1[45] = &off_10018DA08;
  a1[46] = &off_10018DA30;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018D908;
  a1[45] = off_10018D990;
  a1[46] = off_10018D9B8;
  return a1;
}

void sub_1000DA498(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DA4BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DA4FC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  sub_10001C610((void *)(a1 + 112), (uint64_t *)(a2 + 112));
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  return a1;
}

uint64_t sub_1000DA588(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018DAA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000DA5F0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DA604(uint64_t a1)
{
  *(void *)a1 = off_10018DAA0;
  sub_1000DA87C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000DA6A0(char *a1)
{
}

uint64_t sub_1000DA6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DA718(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000DA764(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018D9D0);
  sub_1000DA604(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000DA79C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018D9D0);
  sub_1000DA604((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000DA7DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D9D0);
  sub_1000DA604(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DA81C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018D9D0);
  sub_1000DA604((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000DA868(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DA604(a1);
  operator delete(v1);
}

uint64_t sub_1000DA87C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DA9CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DA9A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000DA9CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1409LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1409LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000DABB0(uint64_t a1)
{
  uint64_t v2 = sub_1000DA344(a1);
  if (*(_BYTE *)(a1 + 5160))
  {
    sub_1000DAC04(a1);
    *(_BYTE *)(a1 + 5160) = 0;
  }

  return v2;
}

uint64_t sub_1000DAC04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v91 = &v3[40 * v2];
    do
    {
      uint64_t v5 = *v3;
      int v4 = (std::__shared_weak_count *)v3[1];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }

      *(_OWORD *)char v96 = *((_OWORD *)v3 + 1);
      *(_OWORD *)&v96[9] = *(_OWORD *)((char *)v3 + 25);
      uint64_t v8 = v3[6];
      __int128 v9 = *(_OWORD *)(v3 + 7);
      __int128 v10 = *(_OWORD *)(v3 + 11);
      __int128 v155 = *(_OWORD *)(v3 + 9);
      __int128 v156 = v10;
      char v157 = *((_BYTE *)v3 + 104);
      uint64_t v12 = v3[14];
      uint64_t v11 = (std::__shared_weak_count *)v3[15];
      if (v11)
      {
        uint64_t v13 = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      __int128 v95 = *((_OWORD *)v3 + 8);
      unint64_t v93 = v3[18];
      char v94 = *((_BYTE *)v3 + 152);
      uint64_t v16 = v3[20];
      uint64_t v15 = (std::__shared_weak_count *)v3[21];
      if (v15)
      {
        uint64_t v17 = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }

      *(_OWORD *)__int128 v92 = *((_OWORD *)v3 + 11);
      *(_OWORD *)&v92[9] = *(_OWORD *)((char *)v3 + 185);
      uint64_t v19 = v3[26];
      __int128 v20 = *(_OWORD *)(v3 + 27);
      __int128 v21 = *(_OWORD *)(v3 + 31);
      __int128 v152 = *(_OWORD *)(v3 + 29);
      __int128 v153 = v21;
      char v154 = *((_BYTE *)v3 + 264);
      uint64_t v23 = v3[34];
      uint64_t v22 = (std::__shared_weak_count *)v3[35];
      if (v22)
      {
        uint64_t v24 = (unint64_t *)&v22->__shared_owners_;
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }

      uint64_t v26 = 0LL;
      unint64_t v108 = (std::__shared_weak_count *)v3[38];
      char v109 = *((_BYTE *)v3 + 312);
      __int128 v107 = *((_OWORD *)v3 + 18);
      uint64_t v110 = v5;
      unint64_t v111 = v4;
      v112[0] = *(_OWORD *)v96;
      *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)&v96[9];
      __int128 v114 = v9;
      __int128 v115 = v155;
      __int128 v116 = v156;
      char v117 = v157;
      uint64_t v113 = v8;
      uint64_t v118 = v12;
      char v119 = v11;
      __int128 v120 = v95;
      char v122 = v94;
      unint64_t v121 = v93;
      uint64_t v97 = v16;
      unint64_t v98 = v15;
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v92[9];
      v99[0] = *(_OWORD *)v92;
      __int128 v101 = v20;
      char v104 = v154;
      __int128 v102 = v152;
      __int128 v103 = v153;
      uint64_t v100 = v19;
      uint64_t v105 = v23;
      unint64_t v106 = v22;
      uint64_t v27 = v108;
      v151[0] = 0;
      v151[528] = 0;
      while (!sub_10003B85C((uint64_t)&v110, (uint64_t)&v97))
      {
        if (sub_1000BE308())
        {
          *(void *)&__int128 v148 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/asif.cpp:1274:32)]";
          *((void *)&v148 + 1) = 104LL;
          LODWORD(v149) = 2;
          sub_100018E78(&v136, &v148);
          sub_10000552C(&v144, (uint64_t)"sg: ", 4LL);
          sub_10011E9EC(&v144, &v110);
          std::ostream::~ostream(&v144, off_100172858);
          sub_100019104((uint64_t)&v136);
          std::ios::~ios(&v145);
        }

        uint64_t v136 = 0LL;
        __int128 v137 = v27;
        char v138 = 2;
        sub_10007B490(&v110, (uint64_t)&v136, (uint64_t)&v148);
        unint64_t v29 = *(void *)a1;
        if (*(void *)a1)
        {
          if (*(_BYTE *)(v29 + 224)) {
            unint64_t v30 = v29 + 40;
          }
          else {
            unint64_t v30 = 0LL;
          }
        }

        else
        {
          unint64_t v30 = 0LL;
        }

        sub_1000CC86C(v30, *(void *)(a1 + 8), (char **)&v148);
        unint64_t v31 = v149;
        BOOL v32 = v149 >= 0 || (_DWORD)v149 == 0;
        char v33 = v32;
        if (v32)
        {
          uint64_t v34 = v150;
          if (sub_10003DA10((uint64_t)&v110, (uint64_t)&v97, v150, v149))
          {
            uint64_t v123 = v110;
            unint64_t v124 = v111;
            if (v111)
            {
              unint64_t v38 = (unint64_t *)&v111->__shared_owners_;
              do
                unint64_t v39 = __ldxr(v38);
              while (__stxr(v39 + 1, v38));
            }

            v125[0] = v112[0];
            *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v112 + 9);
            uint64_t v126 = v113;
            __int128 v127 = v114;
            __int128 v128 = v115;
            __int128 v129 = v116;
            char v130 = v117;
            uint64_t v131 = v118;
            char v132 = v119;
            if (v119)
            {
              uint64_t v40 = (unint64_t *)&v119->__shared_owners_;
              do
                unint64_t v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }

            __int128 v133 = v120;
            unint64_t v134 = v121;
            char v135 = v122;
            sub_10003D9D4((uint64_t)&v123, (uint64_t)&v97, v34, v31, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v136);
            sub_100018F60((uint64_t)v151, (uint64_t)&v136);
            uint64_t v42 = v147;
            if (v147)
            {
              uint64_t v43 = (unint64_t *)&v147->__shared_owners_;
              do
                unint64_t v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }

            uint64_t v45 = v146;
            if (v146)
            {
              unint64_t v46 = (unint64_t *)&v146->__shared_owners_;
              do
                unint64_t v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }

            int v48 = v143;
            if (v143)
            {
              unint64_t v49 = (unint64_t *)&v143->__shared_owners_;
              do
                unint64_t v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }

            unint64_t v51 = v142;
            if (v142)
            {
              unint64_t v52 = (unint64_t *)&v142->__shared_owners_;
              do
                unint64_t v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }

            int v54 = v141;
            if (v141)
            {
              unint64_t v55 = (unint64_t *)&v141->__shared_owners_;
              do
                unint64_t v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }

            uint64_t v57 = v139;
            if (v139)
            {
              unint64_t v58 = (unint64_t *)&v139->__shared_owners_;
              do
                unint64_t v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }

            __int128 v60 = v132;
            if (v132)
            {
              unint64_t v61 = (unint64_t *)&v132->__shared_owners_;
              do
                unint64_t v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }

            uint64_t v63 = v124;
            if (v124)
            {
              unint64_t v64 = (unint64_t *)&v124->__shared_owners_;
              do
                unint64_t v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }

            sub_10003BD04((uint64_t)v151, (uint64_t)&v136);
            sub_100018FFC((uint64_t)&v110, (uint64_t)&v136);
            uint64_t v66 = v140;
            if (v140)
            {
              unint64_t v67 = (unint64_t *)&v140->__shared_owners_;
              do
                unint64_t v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }

            uint64_t v69 = v137;
            if (v137)
            {
              unint64_t v70 = (unint64_t *)&v137->__shared_owners_;
              do
                unint64_t v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }

            sub_10003BA04((uint64_t)v151, (uint64_t)&v136);
            sub_100018FFC((uint64_t)&v97, (uint64_t)&v136);
            uint64_t v72 = v140;
            if (v140)
            {
              unint64_t v73 = (unint64_t *)&v140->__shared_owners_;
              do
                unint64_t v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }

            char v75 = v137;
            if (v137)
            {
              unint64_t v76 = (unint64_t *)&v137->__shared_owners_;
              do
                unint64_t v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
          }

          sub_10003C884((uint64_t)&v110, v31);
          v26 += v31;
        }

        __int128 v35 = (std::__shared_weak_count *)*((void *)&v148 + 1);
        if (!*((void *)&v148 + 1)) {
          goto LABEL_42;
        }
        uint64_t v36 = (unint64_t *)(*((void *)&v148 + 1) + 8LL);
        do
          unint64_t v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if ((v33 & 1) == 0) {
            break;
          }
        }

        else
        {
LABEL_42:
          if ((v33 & 1) == 0) {
            break;
          }
        }
      }

      sub_100019A28((uint64_t)v151);
      unint64_t v78 = v106;
      if (v106)
      {
        uint64_t v79 = (unint64_t *)&v106->__shared_owners_;
        do
          unint64_t v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }

      uint64_t v81 = v98;
      if (v98)
      {
        uint64_t v82 = (unint64_t *)&v98->__shared_owners_;
        do
          unint64_t v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }

      uint64_t v84 = v119;
      if (v119)
      {
        unint64_t v85 = (unint64_t *)&v119->__shared_owners_;
        do
          unint64_t v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }

      unint64_t v87 = v111;
      if (v111)
      {
        unint64_t v88 = (unint64_t *)&v111->__shared_owners_;
        do
          unint64_t v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }

      v3 += 40;
    }

    while (v3 != v91);
  }

  sub_1000DB728((void **)(a1 + 16));
  sub_1000C1AC8((unint64_t *)a1);
  return a1;
}

void sub_1000DB4A4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  unint64_t v59 = (std::__shared_weak_count *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  sub_100019A28((uint64_t)&STACK[0x508]);
  sub_100006224(a10);
  sub_100006224((uint64_t)&a38);
  sub_100006224(a11);
  sub_100006224((uint64_t)&a58);
  sub_1000052FC(a1);
}

void **sub_1000DB728(void **a1)
{
  uint64_t v2 = (char *)a1[1];
  if (v2)
  {
    uint64_t v3 = (char *)*a1;
    do
    {
      --v2;
      sub_100006224((uint64_t)(v3 + 272));
      sub_100006224((uint64_t)(v3 + 160));
      sub_100006224((uint64_t)(v3 + 112));
      sub_100006224((uint64_t)v3);
      v3 += 320;
    }

    while (v2);
  }

  if (a1[2] && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  return a1;
}

unint64_t *sub_1000DB7A8(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0LL;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v4 = atomic_load(v3);
  if (!v4) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }

    if (!__stlxr(v4 + 1, v3)) {
      break;
    }
LABEL_7:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_8;
    }
  }

  unint64_t v7 = (unint64_t *)v3[41];
  if (v7)
  {
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[42] = v8;
  }

  if (!sub_1000DB878((uint64_t)v3))
  {
    do
      unint64_t v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      uint64_t v10 = v3[4];
      v3[4] = -1LL;
      sub_1000C1B08((uint64_t)v3, v10, 1u);
    }

BOOL sub_1000DB878(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }

  else
  {
    char v6 = (unint64_t *)(a1 + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    unsigned int v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 344)) {
      sub_1000DB924(a1 + 24, 1u, 5u);
    }
    do
      unint64_t v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    unint64_t v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0LL;
    }

    else
    {
      unsigned int v11 = atomic_load(v2);
      return v11 == 2;
    }
  }

BOOL sub_1000DB924(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&__int128 v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  __int128 v6 = v4;
  return sub_1000DB964((uint64_t)&v4, (uint64_t)&v5, 0LL);
}

BOOL sub_1000DB964( uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v7 = 0;
  while (1)
  {
    unsigned int v8 = *(unsigned int **)a1;
    int v9 = *(_DWORD *)(a1 + 12);
    else {
      unsigned int v10 = *v8;
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (v10 != v11) {
      break;
    }
    if (v7 <= 0x3F)
    {
      ++v7;
    }

    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
    }
  }

  return v10 != v11;
}

uint64_t sub_1000DBA1C(uint64_t a1, uint64_t a2)
{
  if (a2 < 64001)
  {
    if (a2 >= 4001) {
      sched_yield();
    }
    return 0LL;
  }

  std::__cxx_contention_t v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  __int128 v4 = *(unsigned int **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  else {
    unsigned int v6 = *v4;
  }
  if (v6 == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0LL;
  }

  return 1LL;
}

void sub_1000DBAA8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int64_t v4 = *a3 - *a2;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 6);
  if (v5 <= a1[2])
  {
    uint64_t v11 = *a2;
    sub_1000DBC90((uint64_t)a1, &v11, v5, *a1, a1[1]);
    a1[1] = v5;
  }

  else
  {
    if (v5 >= 0x66666666666667LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    unsigned int v8 = operator new(v4);
    int v9 = (uint64_t *)*a1;
    if (*a1)
    {
      sub_1000DBB9C(a1);
      if (a1 + 3 != v9) {
        operator delete(v9);
      }
    }

    a1[1] = 0LL;
    a1[2] = v5;
    *a1 = (uint64_t)v8;
    uint64_t v10 = *a2;
    uint64_t v12 = *a3;
    uint64_t v13 = v10;
    sub_1000DBC00(a1, &v13, &v12);
  }

uint64_t *sub_1000DBB9C(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2)
  {
    uint64_t v3 = *result;
    do
    {
      --v2;
      sub_100006224(v3 + 272);
      sub_100006224(v3 + 160);
      sub_100006224(v3 + 112);
      uint64_t result = (uint64_t *)sub_100006224(v3);
      v3 += 320LL;
    }

    while (v2);
  }

  v1[1] = 0LL;
  return result;
}

void sub_1000DBC00(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1 + 320 * v4;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = v5;
  if (*a2 != *a3)
  {
    do
    {
      sub_100019A88(v8, v6);
      sub_100019A88(v8 + 160, v6 + 160);
      v6 += 320LL;
      v8 += 320LL;
    }

    while (v6 != v7);
    uint64_t v4 = a1[1];
  }

  a1[1] = v4 - 0x3333333333333333LL * ((v8 - v5) >> 6);
}

void sub_1000DBC90(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      uint64_t v13 = *a2;
      unint64_t v14 = a3;
      do
      {
        --v14;
        sub_1000DA4FC(a4, v13);
        sub_1000DA4FC(a4 + 160, v13 + 160);
        a4 += 320LL;
        v13 += 320LL;
      }

      while (v14);
    }

    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      do
      {
        sub_100006224(a4 + 272);
        sub_100006224(a4 + 160);
        sub_100006224(a4 + 112);
        sub_100006224(a4);
        a4 += 320LL;
        BOOL v12 = __CFADD__(v15++, 1LL);
      }

      while (!v12);
    }
  }

  else
  {
    uint64_t v10 = *a2;
    if (a5)
    {
      unint64_t v11 = a5;
      do
      {
        --v11;
        sub_1000DA4FC(a4, v10);
        sub_1000DA4FC(a4 + 160, v10 + 160);
        v10 += 320LL;
        a4 += 320LL;
      }

      while (v11);
    }

    *a2 = v10;
    if (a3 != a5)
    {
      do
      {
        sub_100019A88(a4, v10);
        sub_100019A88(a4 + 160, v10 + 160);
        v10 += 320LL;
        a4 += 320LL;
        BOOL v12 = __CFADD__(v9++, 1LL);
      }

      while (!v12);
    }
  }

void sub_1000DBDB4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000DBF44((uint64_t)a1, a3);
  if (v11 >= 0x66666666666667LL) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(320 * v11);
  sub_1000DBFBC(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

__n128 sub_1000DBE60(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v3 = *(_OWORD *)(a2 + 72);
  __int128 v4 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + sub_100006224(v49 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + sub_100006224(v49 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a2 + 128);
  uint64_t v5 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0LL;
  *(void *)(a2 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  __int128 v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 20_Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  __int128 v7 = *(_OWORD *)(a2 + 232);
  __int128 v8 = *(_OWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_OWORD *)(a1 + 24_Block_object_dispose((const void *)(v2 - 120), 8) = v8;
  *(_OWORD *)(a1 + 2sub_100006224(v6 - 32) = v7;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a2 + 272) = 0LL;
  *(void *)(a2 + 280) = 0LL;
  __n128 result = *(__n128 *)(a2 + 288);
  *(__n128 *)(a1 + 28_Block_object_dispose((const void *)(v2 - 120), 8) = result;
  uint64_t v10 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v10;
  return result;
}

unint64_t sub_1000DBF44(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x66666666666666LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x66666666666666LL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x66666666666666LL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000DBFBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000DC0A8((uint64_t)a1, *a1, a4, *a1 + 320 * a1[1], a2, a5, a6);
  if (v10)
  {
    for (uint64_t i = a1[1]; i; v10 += 320LL)
    {
      --i;
      sub_100006224(v10 + 272);
      sub_100006224(v10 + 160);
      sub_100006224(v10 + 112);
      sub_100006224(v10);
    }
  }

  uint64_t v12 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v12;
  a1[2] = a3;
}

void sub_1000DC084(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000DC0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  void v16[2] = a1;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_1000DBE60(a5, v12);
      v12 += 320LL;
      a5 += 320LL;
    }

    while (v12 != v11);
  }

  sub_1000DBE60(a5, a7);
  if (v11 != a4)
  {
    uint64_t v13 = a5 + 320 * a6;
    do
    {
      sub_1000DBE60(v13, v11);
      v11 += 320LL;
      uint64_t v13 = v14 + 320;
    }

    while (v11 != a4);
  }

  v16[0] = 0LL;
  v16[1] = 0LL;
  return sub_1000DC158(v16);
}

uint64_t *sub_1000DC158(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      sub_100006224(v2 + 272);
      sub_100006224(v2 + 160);
      sub_100006224(v2 + 112);
      sub_100006224(v2);
      uint64_t v3 = a1[1];
      uint64_t v2 = *a1 + 320;
      *a1 = v2;
    }

    while (v2 != v3);
  }

  return a1;
}

void sub_1000DC1C4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10006833C((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556LL) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(24 * v11);
  sub_1000DC270(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

void sub_1000DC270(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_1000DC34C((uint64_t)a1, *a1, a4, *a1 + 24 * a1[1], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = (void (***)(uint64_t))v10;
      do
      {
        --v11;
        uint64_t v13 = *v12;
        v12 += 3;
        (*v13)(v10);
        uint64_t v10 = (uint64_t)v12;
      }

      while (v11);
    }
  }

  uint64_t v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_1000DC328(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DC34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a5;
  if (a2 != a3)
  {
    uint64_t v14 = 0LL;
    do
    {
      sub_10011E748(a5 + v14, a2 + v14);
      v14 += 24LL;
    }

    while (a2 + v14 != a3);
    uint64_t v12 = a5 + v14;
  }

  uint64_t result = sub_10011E748(v12, a7);
  if (a3 != a4)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = v12 + 24 * a6;
    do
    {
      uint64_t result = sub_10011E748(v17 + v16, a3 + v16);
      v16 += 24LL;
    }

    while (a3 + v16 != a4);
  }

  return result;
}

void sub_1000DC400(_Unwind_Exception *exception_object)
{
  if (v2 != v1)
  {
    unint64_t v4 = v1;
    do
    {
      unint64_t v5 = *v4;
      v4 += 3;
      (*v5)(v1);
      uint64_t v1 = v4;
    }

    while (v4 != v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000DC4B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))a1;
    do
    {
      --v2;
      unint64_t v4 = *v3;
      v3 += 3;
      (*v4)();
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000DC520(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DBF0);
  sub_1000DC6E4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DC558(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018DBF0);
  sub_1000DC6E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DC598(char *a1)
{
}

uint64_t sub_1000DC5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DC610(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DC65C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018DBF0);
  sub_1000DC6E4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DC69C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018DBF0);
  sub_1000DC6E4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DC6E4(uint64_t a1)
{
  *(void *)a1 = off_10018DCC0;
  sub_1000DC780(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DC780(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DC8E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DC8A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DC8D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DC6E4(a1);
  operator delete(v1);
}

int *sub_1000DC8E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 1513LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 1513LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

BOOL sub_1000DCACC(unint64_t *a1)
{
  while (1)
  {
    unint64_t v2 = *a1;
    if ((*a1 & 0x8000000000000000LL) != 0)
    {
      unint64_t v3 = *a1;
    }

    else
    {
      do
      {
        unint64_t v3 = __ldaxr(a1);
        if (v3 == v2)
        {
          if (!__stlxr(v2 + 1, a1)) {
            return v2 != -1LL;
          }
        }

        else
        {
          __clrex();
        }

        unint64_t v2 = v3;
      }

      while ((v3 & 0x8000000000000000LL) == 0);
    }

    unint64_t v2 = v3;
    if (v3 != -1LL) {
      break;
    }
    if ((sub_1000DCB58(a1, 0) & 1) == 0)
    {
      unint64_t v2 = -1LL;
      return v2 != -1LL;
    }
  }

  return v2 != -1LL;
}

uint64_t sub_1000DCB58(unint64_t *a1, int a2)
{
  unint64_t v2 = atomic_load(a1);
  BOOL v3 = v2 == 0;
  BOOL v4 = v2 != -1LL;
  if (a2) {
    BOOL v4 = v3;
  }
  if (!v4)
  {
    v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4((unint64_t)a1);
    v16.__owns_ = 1;
    std::mutex::lock(v16.__m_);
    uint64_t v7 = sub_10011E684((unint64_t)a1);
    unint64_t v8 = atomic_load(a1);
    BOOL v9 = v8 == 0;
    BOOL v10 = v8 != -1LL;
    if (a2) {
      BOOL v10 = v9;
    }
    if (!v10)
    {
      uint64_t v11 = (std::condition_variable *)v7;
      do
      {
        std::condition_variable::wait(v11, &v16);
        unint64_t v12 = atomic_load(a1);
        BOOL v13 = v12 == 0;
        BOOL v14 = v12 != -1LL;
        if (a2) {
          BOOL v14 = v13;
        }
      }

      while (!v14);
    }

    if (v16.__owns_) {
      std::mutex::unlock(v16.__m_);
    }
  }

  return 1LL;
}

void sub_1000DCC30(_Unwind_Exception *a1)
{
}

unint64_t sub_1000DCC44( uint64_t (*a1)(__int128 *), __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  unint64_t v15 = sub_1000DCE60(a1, &v40, (uint64_t)&v29, a4, 0);
  std::unique_lock<std::mutex> v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    int v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    __int16 v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  __int16 v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    uint64_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_1000DCE34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

unint64_t sub_1000DCE60( uint64_t (*a1)(__int128 *), void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *(void *)(a3 + 144);
  v34[0] = 0;
  v34[528] = 0;
  while (!sub_10003B85C((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000BE308())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = io_result_t (&)(const sg_entry &)]";
      *((void *)&v32 + 1) = 119LL;
      int v33 = 2;
      sub_100018E78(v27, &v32);
      sub_10000552C(&v30, (uint64_t)"sg: ", 4LL);
      sub_10011E9EC(&v30, a2);
      std::ostream::~ostream(&v30, off_100172858);
      sub_100019104((uint64_t)v27);
      std::ios::~ios(&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    sub_10007B490(a2, (uint64_t)v27, (uint64_t)&v32);
    int64_t v10 = a1(&v32);
    unint64_t v12 = v10;
    BOOL v13 = v10 >= 0 || (_DWORD)v10 == 0;
    char v14 = v13;
    if (v13)
    {
      uint64_t v15 = v11;
      if (sub_10003DA10((uint64_t)a2, a3, v11, v10))
      {
        sub_100019A88((uint64_t)v25, (uint64_t)a2);
        sub_10003D9D4((uint64_t)v25, a3, v15, v12, a4, (uint64_t)v27);
        sub_100018F60((uint64_t)v34, (uint64_t)v27);
        sub_100018FA4((uint64_t)v27);
        sub_100006224((uint64_t)&v26);
        sub_100006224((uint64_t)v25);
        sub_10003BD04((uint64_t)v34, (uint64_t)v27);
        sub_100018FFC((uint64_t)a2, (uint64_t)v27);
        sub_100006224((uint64_t)v29);
        sub_100006224((uint64_t)v27);
        sub_10003BA04((uint64_t)v34, (uint64_t)v27);
        sub_100018FFC(a3, (uint64_t)v27);
        sub_100006224((uint64_t)v29);
        sub_100006224((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sub_10003C884((uint64_t)a2, v12);
      }
      else {
        sub_10003CA5C((uint64_t)a2, v12);
      }
      v7 += v12;
    }

    else
    {
      else {
        uint64_t v19 = -(int)v10;
      }
      unint64_t v21 = -v19;
    }

    std::unique_lock<std::mutex> v16 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      uint64_t v17 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if ((v14 & 1) == 0) {
      goto LABEL_35;
    }
  }

  unint64_t v21 = v7;
LABEL_35:
  sub_100019A28((uint64_t)v34);
  return v21;
}

void sub_1000DD11C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DD190(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018DE10);
  sub_1000DD354(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DD1C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018DE10);
  sub_1000DD354(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DD208(char *a1)
{
}

uint64_t sub_1000DD24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DD280(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DD2CC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018DE10);
  sub_1000DD354((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DD30C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018DE10);
  sub_1000DD354((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DD354(uint64_t a1)
{
  *(void *)a1 = off_10018DEE0;
  sub_1000DD3F0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DD3F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DD558((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DD518( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DD544(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DD354(a1);
  operator delete(v1);
}

int *sub_1000DD558(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 2061LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        std::unique_lock<std::mutex> v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 2061LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000DD73C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E030);
  sub_1000DD900(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DD774(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E030);
  sub_1000DD900(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DD7B4(char *a1)
{
}

uint64_t sub_1000DD7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DD82C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DD878(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018E030);
  sub_1000DD900((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DD8B8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E030);
  sub_1000DD900((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DD900(uint64_t a1)
{
  *(void *)a1 = off_10018E100;
  sub_1000DD99C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DD99C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DDB04((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DDAC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DDAF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DD900(a1);
  operator delete(v1);
}

int *sub_1000DDB04(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 2071LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        std::unique_lock<std::mutex> v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 2071LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000DDCE8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E250);
  sub_1000DDEAC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DDD20(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E250);
  sub_1000DDEAC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DDD60(char *a1)
{
}

uint64_t sub_1000DDDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DDDD8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DDE24(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018E250);
  sub_1000DDEAC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DDE64(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E250);
  sub_1000DDEAC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DDEAC(uint64_t a1)
{
  *(void *)a1 = off_10018E320;
  sub_1000DDF48(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DDF48(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DE0B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DE070( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DE09C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DDEAC(a1);
  operator delete(v1);
}

int *sub_1000DE0B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 2311LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        std::unique_lock<std::mutex> v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 2311LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000DE294(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E470);
  sub_1000DE458(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DE2CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E470);
  sub_1000DE458(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DE30C(char *a1)
{
}

uint64_t sub_1000DE350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DE384(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DE3D0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018E470);
  sub_1000DE458((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DE410(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E470);
  sub_1000DE458((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DE458(uint64_t a1)
{
  *(void *)a1 = off_10018E540;
  sub_1000DE4F4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DE4F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DE65C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DE61C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DE648(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DE458(a1);
  operator delete(v1);
}

int *sub_1000DE65C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 2321LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        std::unique_lock<std::mutex> v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 2321LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void *sub_1000DE840(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100089F98(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_1000DE898(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1000DE8B4(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100089F98(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_1000DE90C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1000DE928(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000DEA10((uint64_t)a1, a2);
  *a1 = off_10018E608;
  a1[45] = &off_10018E708;
  a1[46] = &off_10018E730;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018E608;
  a1[45] = off_10018E690;
  a1[46] = off_10018E6B8;
  return a1;
}

void sub_1000DE9AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DE9D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DEA10(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018E7A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000DEA78(_Unwind_Exception *a1)
{
}

uint64_t sub_1000DEA8C(uint64_t a1)
{
  *(void *)a1 = off_10018E7A0;
  sub_1000DED04(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000DEB28(char *a1)
{
}

uint64_t sub_1000DEB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DEBA0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000DEBEC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E6D0);
  sub_1000DEA8C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000DEC24(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018E6D0);
  sub_1000DEA8C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000DEC64(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E6D0);
  sub_1000DEA8C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DECA4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E6D0);
  sub_1000DEA8C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000DECF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DEA8C(a1);
  operator delete(v1);
}

uint64_t sub_1000DED04(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DEE54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DEE2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000DEE54(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 158LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    BOOL v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        std::unique_lock<std::mutex> v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 158LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void sub_1000DF038(std::exception *a1)
{
}

const char *sub_1000DF04C()
{
  return "File too small.";
}

void sub_1000DF058(void *a1@<X0>, void *a2@<X8>)
{
  int v4 = (char *)(*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  sub_100006174(v17, v4);
  sub_10000AC5C((uint64_t)v12);
  if ((v18 & 0x80u) == 0) {
    int v5 = v17;
  }
  else {
    int v5 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v18;
  }
  else {
    uint64_t v6 = (uint64_t)v17[1];
  }
  uint64_t v7 = sub_10000552C(&v13, (uint64_t)v5, v6);
  uint64_t v8 = sub_10000552C(v7, (uint64_t)" header size ", 13LL);
  uint64_t v9 = (void *)std::ostream::operator<<(v8, a1[2]);
  int64_t v10 = sub_10000552C(v9, (uint64_t)", but file size only ", 21LL);
  std::ostream::operator<<(v10, a1[3]);
  sub_100005F24((uint64_t)v14, a2);
  *(void *)((char *)v12
  uint64_t v13 = v11;
  if (v15 < 0) {
    operator delete((void *)v14[8]);
  }
  std::streambuf::~streambuf(v14);
  std::ios::~ios(&v16);
}

void sub_1000DF188(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100006224(v4 - 48);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1000DF1F8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018E920);
  sub_1000DF3BC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DF230(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E920);
  sub_1000DF3BC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DF270(char *a1)
{
}

uint64_t sub_1000DF2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DF2E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DF334(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018E920);
  sub_1000DF3BC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DF374(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018E920);
  sub_1000DF3BC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DF3BC(uint64_t a1)
{
  *(void *)a1 = off_10018E9F0;
  sub_1000DF458(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DF458(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DF5C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DF580( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DF5AC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DF3BC(a1);
  operator delete(v1);
}

int *sub_1000DF5C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 2831LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 2831LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000DF7A4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018EB40);
  sub_1000DF968(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000DF7DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018EB40);
  sub_1000DF968(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000DF81C(char *a1)
{
}

uint64_t sub_1000DF860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000DF894(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000DF8E0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018EB40);
  sub_1000DF968((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000DF920(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018EB40);
  sub_1000DF968((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000DF968(uint64_t a1)
{
  *(void *)a1 = off_10018EC10;
  sub_1000DFA04(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000DFA04(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000DFB6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000DFB2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000DFB58(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000DF968(a1);
  operator delete(v1);
}

int *sub_1000DFB6C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 2828LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 2828LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

void sub_1000DFD54(std::__shared_weak_count *a1)
{
}

void sub_1000DFD68(uint64_t a1)
{
}

uint64_t sub_1000DFD70(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1000DFDB0(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555LL) {
    sub_100045090();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v15 = 0x555555555555555LL;
  }
  else {
    unint64_t v15 = v8;
  }
  v27[4] = a1 + 2;
  if (v15) {
    uint64_t v16 = (char *)sub_100067678(v13, v15);
  }
  else {
    uint64_t v16 = 0LL;
  }
  uint64_t v17 = &v16[48 * v7];
  v27[0] = v16;
  v27[1] = v17;
  v27[3] = &v16[48 * v15];
  uint64_t v18 = *a3;
  uint64_t v19 = *a4;
  uint64_t v20 = *a5;
  *(void *)uint64_t v17 = *a2;
  uint64_t v21 = a2[1];
  *((void *)v17 + 1) = v21;
  if (v21)
  {
    uint64_t v22 = (unint64_t *)(v21 + 8);
    do
      unint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  uint64_t v24 = &v16[48 * v7];
  *((void *)v24 + 2) = v18;
  *((void *)v24 + 3) = v19;
  *((void *)v24 + 4) = v20;
  v24[40] = 0;
  void v27[2] = v17 + 48;
  sub_1000DFF00(a1, v27);
  uint64_t v25 = a1[1];
  sub_1000DFF6C((uint64_t)v27);
  return v25;
}

void sub_1000DFEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1000DFF00(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    __int128 v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48LL;
    *(_OWORD *)(v4 - 4_Block_object_dispose((const void *)(v2 - 120), 8) = v5;
    v4 -= 48LL;
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
    __int128 v6 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 25) = *(_OWORD *)(v2 + 25);
    *(_OWORD *)(v4 + 16) = v6;
  }

  a2[1] = v4;
  uint64_t v7 = *result;
  int *result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1000DFF6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_100006224(i - 48);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000DFFB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v5 = (char *)*a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492LL) {
    unint64_t v13 = 0x924924924924924LL;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    unint64_t v14 = (char *)sub_1000E012C(v11, v13);
    uint64_t v16 = v15;
  }

  else
  {
    unint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  uint64_t v17 = sub_1000D0A34((uint64_t)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = v17 + 28;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    uint64_t v21 = 0LL;
    do
    {
      uint64_t v22 = v17 + v21;
      *(void *)(v22 - 2_Block_object_dispose((const void *)(v2 - 120), 8) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28LL;
    }

    while (&v19[v21] != v20);
    uint64_t v19 = (char *)*a1;
    v17 += v21;
  }

  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_1000E0114(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E012C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925LL) {
    sub_100044D7C();
  }
  return operator new(28 * a2);
}

uint64_t sub_1000E0174(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v5 = (char *)*a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((a1[2] - (uint64_t)v5) >> 2);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x492492492492492LL) {
    unint64_t v13 = 0x924924924924924LL;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    unint64_t v14 = (char *)sub_1000E012C(v11, v13);
    uint64_t v16 = v15;
  }

  else
  {
    unint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  uint64_t v17 = sub_1000D0A34((uint64_t)&v14[28 * v6], a2, a3, *a4);
  uint64_t v18 = v17 + 28;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    uint64_t v21 = 0LL;
    do
    {
      uint64_t v22 = v17 + v21;
      *(void *)(v22 - 2_Block_object_dispose((const void *)(v2 - 120), 8) = 0x16174656DLL;
      *(_DWORD *)(v22 - 20) = 512;
      *(_OWORD *)(v22 - 16) = *(_OWORD *)&v19[v21 - 16];
      v21 -= 28LL;
    }

    while (&v19[v21] != v20);
    uint64_t v19 = (char *)*a1;
    v17 += v21;
  }

  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v14[28 * v16];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_1000E02D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E02F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018ECF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E0324(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018ECF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E0340(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 176LL))( *(void *)(a1 + 8),  a2,  0LL);
}

uint64_t sub_1000E0354(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E0390()
{
}

_DWORD *sub_1000E039C(_DWORD *result, int a2)
{
  void *result = a2;
  if ((a2 & 0xFFFFFFFE) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFE;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100172A40;
    exception[1] = "header_flags";
    *((_DWORD *)exception + _Block_object_dispose((const void *)(v2 - 120), 8) = v2;
  }

  return result;
}

unint64_t *sub_1000E040C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = a2;
  sub_1000E05F4(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 344) || v14 && *(_BYTE *)(v14 + 344))
  {
    *a4 = 0LL;
    do
      unint64_t v7 = __ldaxr(&v14);
    while (__stlxr(0LL, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return sub_1000C1AC8(&v14);
  }

  if (*(_BYTE *)(a1 + 736) && v15 != (void *)(a1 + 760))
  {
    do
    {
      sub_1000E0AB4(a1, a2, &v12);
      uint64_t v16 = v12;
      sub_1000C30B4(&v14, &v13);
      sub_1000C1AC8(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 344)) {
          break;
        }
      }

      uint64_t v8 = (unint64_t *)sub_1000E0C3C((void *)a1);
      if (v8)
      {
        uint64_t v16 = v8;
        sub_1000E0CE0(a1, v8, a2, (unint64_t *)&v12);
        sub_1000C30B4(&v14, (unint64_t *)&v12);
        sub_1000C1AC8((unint64_t *)&v12);
        break;
      }
    }

    while (*(_BYTE *)(a1 + 736));
    std::mutex::lock((std::mutex *)(a1 + 776));
    uint64_t v9 = sub_1000E2084((uint64_t **)(a1 + 752), v15, (unint64_t *)&v17, &v17, (uint64_t *)&v16);
    if (!v10) {
      v9[5] = (uint64_t)v16;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
    std::mutex::unlock((std::mutex *)(a1 + 776));
    sub_1000E0DFC(a1, 0, 0LL, 0);
    *a4 = 0LL;
    do
      unint64_t v7 = __ldaxr(&v14);
    while (__stlxr(0LL, &v14));
    goto LABEL_21;
  }

  *a4 = 0LL;
  return sub_1000C1AC8(&v14);
}

void sub_1000E05B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000E05F4(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v50 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 776);
  uint64_t v8 = (void *)(a1 + 760);
  uint64_t v9 = (unint64_t *)(a1 + 1008);
  char v10 = (unint64_t *)(a1 + 592);
  __int128 v43 = (unint64_t *)(a1 + 104);
  __int128 v44 = (std::condition_variable *)(a1 + 840);
  __int128 v45 = (uint64_t **)(a1 + 752);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v50;
    }

    else
    {
      uint64_t v16 = (void *)*v8;
      if (!*v8) {
        goto LABEL_20;
      }
      uint64_t v11 = v50;
      uint64_t v17 = v8;
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= v50;
        if (v18 >= v50) {
          uint64_t v20 = v16;
        }
        else {
          uint64_t v20 = v16 + 1;
        }
        if (v19) {
          uint64_t v17 = v16;
        }
        uint64_t v16 = (void *)*v20;
      }

      while (*v20);
      if (v17 == v8 || v50 < v17[4] || (unint64_t *)v17[5] == v9)
      {
LABEL_20:
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v21 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C1AC8((unint64_t *)&v51);
        goto LABEL_23;
      }
    }

    unint64_t v51 = (unint64_t *)v11;
    unint64_t v52 = v9;
    unint64_t v12 = sub_1000E0F60(v45, (unint64_t *)&v51, (uint64_t *)&v51);
    unint64_t v13 = v12;
    if (v14)
    {
      unint64_t v51 = 0LL;
      *a4 = 0LL;
      do
        unint64_t v15 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0LL, (unint64_t *)&v51));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      sub_1000C1AC8((unint64_t *)&v51);
LABEL_23:
      int v22 = 1;
      goto LABEL_24;
    }

    __int128 v48 = (unint64_t *)v12[5];
    if (v48 == v9)
    {
      char v28 = (void *)*v8;
      if (*v8)
      {
        unint64_t v29 = v50;
        uint64_t v30 = v8;
        while (1)
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= v29;
          if (v31 >= v29) {
            int v33 = v28;
          }
          else {
            int v33 = v28 + 1;
          }
          if (v32) {
            uint64_t v30 = v28;
          }
          char v28 = (void *)*v33;
          if (!*v33)
          {
            if (v30 == v8) {
              break;
            }
            if (v29 < v30[4]) {
              break;
            }
            __int128 v34 = (unint64_t *)v30[5];
            if (v34 != v9)
            {
              unint64_t v35 = v34[45];
              if (v35)
              {
                if (!*(_BYTE *)(v35 + 344)) {
                  break;
                }
              }
            }

            if (!*(_BYTE *)(a1 + 736)) {
              break;
            }
            std::condition_variable::wait(v44, &__lk);
            char v28 = (void *)*v8;
            uint64_t v30 = v8;
            if (!*v8) {
              break;
            }
          }
        }
      }

      int v22 = 0;
      goto LABEL_24;
    }

    sub_10001ED54((uint64_t)&__lk);
    sub_1000DB7A8(&v47, v48 + 45);
    if (v47 && !*(_BYTE *)(v47 + 344))
    {
      uint64_t v23 = v50;
      if (*(void *)(v47 + 32) == v50)
      {
        *a4 = 0LL;
        do
          unint64_t v37 = __ldaxr(&v47);
        while (__stlxr(0LL, &v47));
        atomic_store(v37, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }

      if (*(void *)(v47 + 32) == -1LL)
      {
        uint64_t v24 = v43;
        if ((a3 & 1) == 0)
        {
          unint64_t v51 = 0LL;
          *a4 = 0LL;
          do
            unint64_t v36 = __ldaxr((unint64_t *)&v51);
          while (__stlxr(0LL, (unint64_t *)&v51));
          goto LABEL_83;
        }

        goto LABEL_35;
      }
    }

    else
    {
      if (!a3)
      {
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v36 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        goto LABEL_83;
      }

      uint64_t v23 = v50;
    }

    uint64_t v24 = v43;
LABEL_35:
    if (sub_1000E0DFC(a1, 0, v23, 1u) != -1)
    {
      do
        unint64_t v25 = __ldaxr(v10);
      while (__stlxr(v25 + 1, v10));
      v46.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4((unint64_t)v48);
      v46.__owns_ = 1;
      std::mutex::lock(v46.__m_);
      uint64_t v26 = sub_10011E684((unint64_t)v48);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      unint64_t v51 = (unint64_t *)&v48;
      unint64_t v52 = &v47;
      unint64_t v53 = &v50;
      sub_1000E10EC((std::condition_variable *)v26, &v46, &v54, (uint64_t)&v51);
      do
        unint64_t v27 = __ldaxr(v10);
      while (__stlxr(v27 - 1, v10));
      if (v46.__owns_) {
        std::mutex::unlock(v46.__m_);
      }
      int v22 = 3;
      goto LABEL_85;
    }

    unint64_t v51 = 0LL;
    unint64_t v38 = atomic_load(v24);
    if (!v38) {
      goto LABEL_81;
    }
    while (1)
    {
      unint64_t v39 = __ldaxr(v24);
      if (v39 != v38)
      {
        __clrex();
        goto LABEL_71;
      }

      if (!__stlxr(v38 + 1, v24)) {
        break;
      }
LABEL_71:
      unint64_t v38 = v39;
      if (!v39) {
        goto LABEL_81;
      }
    }

    __int128 v40 = *(unint64_t **)(a1 + 432);
    unint64_t v38 = (unint64_t)v24;
    if (v40)
    {
      do
        unint64_t v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(void *)(a1 + 440) = v41;
      unint64_t v38 = (unint64_t)v24;
    }

LABEL_81:
    atomic_store(v38, (unint64_t *)&v51);
    *a4 = 0LL;
    do
      unint64_t v36 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0LL, (unint64_t *)&v51));
LABEL_83:
    atomic_store(v36, a4);
    a4[1] = (unint64_t)v8;
    sub_1000C1AC8((unint64_t *)&v51);
LABEL_84:
    int v22 = 1;
LABEL_85:
    sub_1000C1AC8(&v47);
LABEL_24:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 736))
      {
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v42 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        atomic_store(v42, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C1AC8((unint64_t *)&v51);
        return;
      }

      continue;
    }

    break;
  }

    atomic_store(v38, (unint64_t *)&v51);
    *a4 = 0LL;
    do
      unint64_t v36 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0LL, (unint64_t *)&v51));
LABEL_83:
    atomic_store(v36, a4);
    a4[1] = (unint64_t)v8;
    sub_1000C0F7C((unint64_t *)&v51);
LABEL_84:
    int v22 = 1;
LABEL_85:
    sub_1000C0F7C(&v47);
LABEL_24:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 912))
      {
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v42 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        atomic_store(v42, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C0F7C((unint64_t *)&v51);
        return;
      }

      continue;
    }

    break;
  }

    atomic_store(v38, (unint64_t *)&v51);
    *a4 = 0LL;
    do
      unint64_t v36 = __ldaxr((unint64_t *)&v51);
    while (__stlxr(0LL, (unint64_t *)&v51));
LABEL_83:
    atomic_store(v36, a4);
    a4[1] = (unint64_t)v8;
    sub_1000EFDE8((unint64_t *)&v51);
LABEL_84:
    int v22 = 1;
LABEL_85:
    sub_1000EFDE8(&v47);
LABEL_24:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v22 != 1)
    {
      if (!*(_BYTE *)(a1 + 704))
      {
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v42 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        atomic_store(v42, a4);
        a4[1] = (unint64_t)v8;
        sub_1000EFDE8((unint64_t *)&v51);
        return;
      }

      continue;
    }

    break;
  }

void sub_1000E0A54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_1000E0AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  unint64_t v12 = 0LL;
  uint64_t v6 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v7 = *(void *)(a1 + 512);
  if (v7)
  {
    ++*(void *)(a1 + 504);
    *(void *)(a1 + 512) = v7 - 1;
    sub_1000E1270(a1 + 472, 1);
    sub_1000E0CE0(a1, v8, a2, v13);
    sub_1000C30B4(&v12, v13);
    sub_1000C1AC8(v13);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 608));
  if (v9 + v7 >= *(void *)(a1 + 464))
  {
    sub_1000E0DFC(a1, 0, 0LL, 0);
  }

  else
  {
    v13[0] = (unint64_t)_NSConcreteStackBlock;
    v13[1] = 0x40000000LL;
    v13[2] = (unint64_t)sub_1000E12CC;
    v13[3] = (unint64_t)&unk_10018ED70;
    v13[4] = a1;
    sub_100101908((dispatch_queue_t *)(a1 + 744), v13);
  }

  *a3 = v8;
  a3[1] = 0LL;
  do
    unint64_t v10 = __ldaxr(&v12);
  while (__stlxr(0LL, &v12));
  atomic_store(v10, (unint64_t *)a3 + 1);
  return sub_1000C1AC8(&v12);
}

void sub_1000E0C08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
}

unint64_t sub_1000E0C3C(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 75);
  uint64_t v2 = a1[57];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  int v4 = 0;
  unint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = a1[73];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 344) != -1LL)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }

    ++v3;
  }

  while (v2 != v3);
  if (!v5) {
    return 0LL;
  }
  uint64_t v8 = (unint64_t *)(a1[73] + 8LL * v4);
  do
  {
    unint64_t v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0LL;
    }
  }

  while (__stlxr(0LL, v8));
  return v5;
}

unint64_t *sub_1000E0CE0@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = a2 + 1;
  unint64_t v17 = 0LL;
  unint64_t v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    uint64_t v7 = 0LL;
    goto LABEL_11;
  }

  while (1)
  {
    unint64_t v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(v8 + 1, v7)) {
      break;
    }
LABEL_6:
    unint64_t v8 = v9;
    if (!v9) {
      goto LABEL_7;
    }
  }

  unint64_t v10 = (unint64_t *)a2[42];
  if (v10)
  {
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[43] = v11;
  }

LABEL_11:
  atomic_store((unint64_t)v7, &v17);
  if (*(void *)(a1 + 456))
  {
    uint64_t v12 = 0LL;
    while (2)
    {
      unint64_t v13 = (unint64_t *)(*(void *)(a1 + 584) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0LL;
          do
            unint64_t v15 = __ldaxr(&v17);
          while (__stlxr(0LL, &v17));
          atomic_store(v15, a4);
          return sub_1000C1AC8(&v17);
        }
      }

      __clrex();
      break;
    }
  }

  *a4 = 0LL;
  return sub_1000C1AC8(&v17);
}

  atomic_store(v4, &v12);
  sub_1000C30B4((unint64_t *)(a1 + 360), &v12);
  uint64_t result = sub_1000C1AC8(&v12);
  do
  {
    unint64_t v9 = __ldaxr(v3);
    unint64_t v10 = v9 - 1;
  }

  while (__stlxr(v10, v3));
  if (!v10)
  {
    unint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1LL;
    return (unint64_t *)sub_1000C1B08((uint64_t)v3, v11, 1u);
  }

  return result;
}

  atomic_store((unint64_t)v7, &v17);
  if (*(void *)(a1 + 632))
  {
    uint64_t v12 = 0LL;
    while (2)
    {
      unint64_t v13 = (unint64_t *)(*(void *)(a1 + 760) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0LL;
          do
            unint64_t v15 = __ldaxr(&v17);
          while (__stlxr(0LL, &v17));
          atomic_store(v15, a4);
          return sub_1000C0F7C(&v17);
        }
      }

      __clrex();
      break;
    }
  }

  *a4 = 0LL;
  return sub_1000C0F7C(&v17);
}

  atomic_store(v4, &v12);
  sub_1000CD184((unint64_t *)(a1 + 536), &v12);
  uint64_t result = sub_1000C0F7C(&v12);
  do
  {
    unint64_t v9 = __ldaxr(v3);
    unint64_t v10 = v9 - 1;
  }

  while (__stlxr(v10, v3));
  if (!v10)
  {
    unint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1LL;
    return (unint64_t *)sub_1000C0FBC((uint64_t)v3, v11, 1u);
  }

  return result;
}

  atomic_store((unint64_t)v7, &v17);
  if (*(void *)(a1 + 424))
  {
    uint64_t v12 = 0LL;
    while (2)
    {
      unint64_t v13 = (unint64_t *)(*(void *)(a1 + 552) + 8 * v12);
      while (!__ldaxr(v13))
      {
        if (!__stlxr((unint64_t)a2, v13))
        {
          *a4 = 0LL;
          do
            unint64_t v15 = __ldaxr(&v17);
          while (__stlxr(0LL, &v17));
          atomic_store(v15, a4);
          return sub_1000EFDE8(&v17);
        }
      }

      __clrex();
      break;
    }
  }

  *a4 = 0LL;
  return sub_1000EFDE8(&v17);
}

  atomic_store(v4, &v12);
  sub_1000EEFB4((unint64_t *)(a1 + 328), &v12);
  uint64_t result = sub_1000EFDE8(&v12);
  do
  {
    unint64_t v9 = __ldaxr(v3);
    unint64_t v10 = v9 - 1;
  }

  while (__stlxr(v10, v3));
  if (!v10)
  {
    unint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = -1LL;
    return (unint64_t *)sub_1000EFB8C((uint64_t)v3, v11, 1u);
  }

  return result;
}

  sub_10000D8A4((const void **)&theDict);
  return Value;
}

  return v13;
}

uint64_t sub_1000E0DFC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 968)) {
    return 0LL;
  }
  BOOL v19 = (std::mutex *)(a1 + 888);
  std::mutex::lock((std::mutex *)(a1 + 888));
  if (*(void *)(a1 + 968))
  {
    unint64_t v8 = *(uint64_t **)(a1 + 960);
    if (v8 == (uint64_t *)(a1 + 952))
    {
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1LL;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000C1B08(v12 + 8, v8[3], v10) | a2) == 1)
        {
          unint64_t v13 = sub_10011E5C4(v12);
          std::mutex::lock((std::mutex *)v13);
          char v14 = (unsigned int *)(v12 + 368);
          do
            unsigned int v15 = __ldaxr(v14);
          while (__stlxr(v15 & 0xFFFFFFFB, v14));
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v16 = *v8;
          unint64_t v17 = (uint64_t *)v8[1];
          *(void *)(v16 + _Block_object_dispose((const void *)(v2 - 120), 8) = v17;
          *(void *)v8[1] = v16;
          --*(void *)(a1 + 968);
          operator delete(v8);
          unint64_t v8 = v17;
        }

        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          unint64_t v8 = (uint64_t *)v8[1];
        }
      }

      while (v8 != (uint64_t *)(a1 + 952));
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  std::mutex::unlock(v19);
  return v11;
}

void sub_1000E0F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t *sub_1000E0F60(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    _OWORD v10[5] = v11;
    sub_10000CC04(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

unint64_t *sub_1000E1018(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = a2;
  *a1 = 0LL;
  if (!a2) {
    goto LABEL_9;
  }
  unint64_t v5 = atomic_load(a2);
  if (!v5) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }

    if (!__stlxr(v5 + 1, a2)) {
      break;
    }
LABEL_7:
    unint64_t v5 = v6;
    if (!v6) {
      goto LABEL_8;
    }
  }

  unint64_t v8 = (unint64_t *)a2[41];
  if (v8)
  {
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[42] = v9;
  }

  if (a3 && !sub_1000DB878((uint64_t)a2))
  {
    do
      unint64_t v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      uint64_t v11 = v3[4];
      v3[4] = -1LL;
      sub_1000C1B08((uint64_t)v3, v11, 1u);
    }

BOOL sub_1000E10EC( std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if ((*(_DWORD *)(**(void **)a4 + 368LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(_BYTE *)(*(void *)v8 + 344LL) && *(void *)(*(void *)v8 + 32LL) == **(void **)(a4 + 16)) {
        return 1LL;
      }
    }

    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000LL;
            goto LABEL_17;
          }
        }

        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0LL;
      }

uint64_t sub_1000E1270(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 512LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_1000E12CC(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_1000E0C3C(v1);
  if (v2) {
    sub_1000E1310((uint64_t)v1, v2);
  }
  return sub_1000E0DFC((uint64_t)v1, 0, 0LL, 0);
}

void sub_1000E1310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 520);
  std::mutex::lock((std::mutex *)(a1 + 520));
  sub_1000E136C((void *)(a1 + 472), &v4);
  std::mutex::unlock(v3);
}

void sub_1000E1358(_Unwind_Exception *a1)
{
}

void sub_1000E136C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000E13F0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000E13F0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000450A4(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }

    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      sub_1000E1704(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    sub_1000E1818((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      __int128 v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }

    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      sub_1000E1704(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    sub_1000E1818((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      __int128 v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }

    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      sub_1000E1704(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    sub_1000E1818((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      __int128 v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)a1[1];
    }

    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&__int128 v54 = operator new(0x1000uLL);
      sub_1000E1704(a1, &v54);
      return;
    }

    *(void *)&__int128 v54 = operator new(0x1000uLL);
    sub_1000E1818((uint64_t)a1, &v54);
    __int128 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      __int128 v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

LABEL_30:
      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int128 v54 = sub_1000450A4((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_1000E1934(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000E1A48((uint64_t)&v54, v27);
  }

  unint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int128 v54 = sub_1000450A4((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_1000E1934(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000E1A48((uint64_t)&v54, v27);
  }

  unint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int128 v54 = sub_1000450A4((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_1000E1934(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000E1A48((uint64_t)&v54, v27);
  }

  unint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

      __int128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }

      goto LABEL_33;
    }

    goto LABEL_5;
  }

  if (v23 == *a1) {
    unint64_t v25 = 1LL;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&__int128 v54 = sub_1000450A4((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&__int128 v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_1000E1934(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7LL - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8LL;
    sub_1000E1A48((uint64_t)&v54, v27);
  }

  unint64_t v29 = (char *)*a1;
  __int128 v30 = v54;
  __int128 v31 = v55;
  *(void *)&__int128 v54 = *a1;
  *((void *)&v54 + 1) = v27;
  __int128 v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  __int128 v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&__int128 v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8LL);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1000E16B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000E1704(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      BOOL v19 = (char *)sub_1000450A4(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_1000E1818(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    uint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_1000450A4(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_1000E1934(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_1000450A4(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void sub_1000E1A48(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(_BYTE **)(a1 + 16);
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_1000450A4(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8LL;
        }

        while (v18);
      }

      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

uint64_t sub_1000E1B60(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8 = a3 & 0x100;
  uint64_t v9 = (a3 >> 8) & 1;
  uint64_t v10 = (unint64_t *)(a1 + 608);
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    uint64_t v12 = (unint64_t *)(a1 + 592);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }

  uint64_t v14 = (unsigned int *)(a2 + 368);
  do
    unsigned int v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  sub_1000C1AC8((unint64_t *)(a2 + 360));
  if (a4) {
    sub_1000C1AC8(a4);
  }
  if ((a3 & 1) != 0)
  {
    char v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      uint64_t v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0) {
          break;
        }
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 520));
          uint64_t v18 = *(void *)(a1 + 512);
          std::mutex::unlock((std::mutex *)(a1 + 520));
          if (v18) {
            break;
          }
        }

        if (sub_1000E0DFC(a1, v17, 0LL, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v24 = sub_10011E684(a2);
          v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v35 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = v25.__d_.__rep_ + 200000;
          unint64_t v32 = a2;
          char v33 = v9;
          *(_DWORD *)__int128 v34 = *(_DWORD *)v38;
          *(_DWORD *)&v34[3] = *(_DWORD *)&v38[3];
          sub_1000E1DB8((std::condition_variable *)v24, &__lk, &v36, (uint64_t)&v32);
        }

        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v19 = sub_10011E684(a2);
          char v20 = atomic_load(v14);
          if ((v20 & 4) == 0)
          {
            uint64_t v21 = (std::condition_variable *)v19;
            do
            {
              if ((*v14 & 1) != 0) {
                break;
              }
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 520));
                uint64_t v22 = *(void *)(a1 + 512);
                std::mutex::unlock((std::mutex *)(a1 + 520));
                if (v22) {
                  break;
                }
              }

              std::condition_variable::wait(v21, &__lk);
              char v23 = atomic_load(v14);
            }

            while ((v23 & 4) == 0);
          }
        }

        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        unsigned int v26 = *v14;
        if (!v8 || (v26 & 1) != 0)
        {
          if ((v26 & 1) != 0) {
            break;
          }
        }

        else if (*(void *)(a1 + 512))
        {
          break;
        }

        char v27 = atomic_load(v14);
      }

      while ((v27 & 4) == 0);
    }

    uint64_t v28 = (unint64_t *)(a1 + 592);
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }

  do
    unsigned int v30 = __ldaxr(v14);
  while (__stlxr(v30 & 0xFFFFFFFD, v14));
  return v30 & 1;
}

void sub_1000E1D90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E1DB8( std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 368LL));
    if ((v9 & 4) != 0) {
      return 1LL;
    }
    if ((*(_DWORD *)(*(void *)a4 + 368LL) & 1) != 0) {
      return 1LL;
    }
    if (*(_BYTE *)(a4 + 8))
    {
      uint64_t v10 = (std::mutex *)(v8 + 520);
      std::mutex::lock((std::mutex *)(v8 + 520));
      uint64_t v11 = *(void *)(v8 + 512);
      std::mutex::unlock(v10);
      if (v11) {
        return 1LL;
      }
    }

    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0LL;
      goto LABEL_14;
    }

    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09LL)
      {
        v14.__d_.__rep_ = 0x8000000000000000LL;
        goto LABEL_14;
      }
    }

    else if ((unint64_t)v13 > 0x20C49BA5E353F7LL)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }

    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }

  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 368LL));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 368LL) & 1) != 0) {
    return 1LL;
  }
  if (!*(_BYTE *)(a4 + 8)) {
    return 0LL;
  }
  std::mutex::lock((std::mutex *)(v15 + 520));
  BOOL v17 = *(void *)(v15 + 512) != 0LL;
  std::mutex::unlock((std::mutex *)(v15 + 520));
  return v17;
}

unint64_t *sub_1000E1F28(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (unint64_t *)(a1 + 8);
  sub_1000E2018(a1 + 8, a2);
  unint64_t v12 = 0LL;
  unint64_t v4 = atomic_load(v3);
  if (!v4) {
    goto LABEL_11;
  }
  while (1)
  {
    unint64_t v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(v4 + 1, v3)) {
      break;
    }
LABEL_6:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_11;
    }
  }

  uint64_t v6 = *(unint64_t **)(a1 + 336);
  unint64_t v4 = (unint64_t)v3;
  if (v6)
  {
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(void *)(a1 + 344) = v7;
    unint64_t v4 = (unint64_t)v3;
  }

uint64_t *sub_1000E2018(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + sub_100006224(v6 - 32) = a2;
  *(_BYTE *)(a1 + 344) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0LL, (unint64_t *)(a1 + 8));
  atomic_store(0LL, (unint64_t *)(a1 + 16));
  uint64_t result = sub_1000C1CC0((uint64_t *)(a1 + 40));
  unint64_t v4 = *(unint64_t **)(a1 + 328);
  if (v4)
  {
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(void *)(a1 + 336) = v5;
  }

  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

uint64_t *sub_1000E2084(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = (uint64_t **)sub_1000E2118(a1, a2, &v14, &v13, a3);
  unint64_t v9 = *v8;
  if (!*v8)
  {
    unint64_t v10 = v8;
    unint64_t v9 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = *a5;
    v9[4] = *a4;
    v9[5] = v11;
    sub_10000CC04(a1, v14, v10, v9);
  }

  return v9;
}

void *sub_1000E2118(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      unint64_t v9 = (void *)*a2;
      do
      {
        unint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v13 = a2;
      do
      {
        unint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }

      while (v14);
    }

    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    char v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          char v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        char v16 = (void *)v17[1];
      }

      while (v16);
    }

    else
    {
      BOOL v17 = a1 + 1;
    }

uint64_t *sub_1000E22C0(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t result = sub_1000E2310(a1, a2);
  result[5] = *result;
  result[6] = v4;
  if (v4 && a3)
  {
    uint64_t v6 = 0LL;
    do
    {
      unint64_t v7 = (void *)(*result + v6);
      *unint64_t v7 = 0LL;
      v7[1] = 0LL;
      v6 += 16LL;
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t *sub_1000E2310(uint64_t *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[4] = 0LL;
  BOOL v3 = valloc(16 * a2);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v8 = std::bad_alloc::bad_alloc(exception);
  }

  v9[0] = &off_10018EDA0;
  unint64_t v10 = v9;
  uint64_t v11 = v3;
  sub_1000E24E8((uint64_t)&v12, (uint64_t)v9);
  sub_1000E2414(a1, (uint64_t *)&v11);
  sub_1000C1A24((uint64_t *)&v11);
  uint64_t v4 = v10;
  if (v10 == v9)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v9;
    goto LABEL_6;
  }

  if (v10)
  {
    uint64_t v5 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_1000E2400(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000E2414(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  sub_1000C1A7C(a1, v4);
  sub_100079B5C(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *sub_1000E245C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10018EDA0;
  return result;
}

void sub_1000E2480(uint64_t a1, void *a2)
{
  *a2 = &off_10018EDA0;
}

void sub_1000E2498(uint64_t a1, void **a2)
{
}

uint64_t sub_1000E24A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E24DC()
{
}

uint64_t sub_1000E24E8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    BOOL v3 = (void *)(a1 + 24);
  }

  *BOOL v3 = 0LL;
  return a1;
}

void sub_1000E254C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_1000450A4(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1000E2814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000E2860(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v10 = a1 + 40;
  sub_1000C1CC0((uint64_t *)(a1 + 40));
  sub_1000CCB24(v10, a2, a3, *a4, *a5, 0);
  *(_BYTE *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000E2920(a1);
}

void sub_1000E28E8(void *a1)
{
  *(_BYTE *)(v1 + 344) = 1;
  sub_1000E2920(v1);
  __cxa_rethrow();
}

void sub_1000E290C(_Unwind_Exception *a1)
{
}

void sub_1000E2920(uint64_t a1)
{
}

void sub_1000E2948(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, char *a6)
{
  *(void *)(a1 + 336) = **(void **)(a1 + 328);
  uint64_t v12 = a1 + 40;
  sub_1000C1CC0((uint64_t *)(a1 + 40));
  sub_1000CCB24(v12, a2, a3, *a4, *a5, *a6);
  *(_BYTE *)(a1 + 224) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000E2920(a1);
}

void sub_1000E29DC(void *a1)
{
  *(_BYTE *)(v1 + 344) = 1;
  sub_1000E2920(v1);
  __cxa_rethrow();
}

void sub_1000E2A00(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E2A14(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018BE80;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E2A7C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E2A90(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018C0A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E2AF8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E2B0C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018C2C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E2B74(_Unwind_Exception *a1)
{
}

void *sub_1000E2B88(uint64_t a1)
{
  *(_BYTE *)(a1 + 912) = 0;
  if (*(void *)(a1 + 632))
  {
    unint64_t v3 = 0LL;
    do
    {
      char v4 = (unint64_t *)(*(void *)(a1 + 760) + 8 * v3);
      do
        __int128 v5 = (unint64_t *)__ldaxr(v4);
      while (__stlxr(0LL, v4));
      if (v5)
      {
        unint64_t v1 = v1 & 0xFFFFFFFFFF000000LL | 0x10001;
        sub_1000E2DF8(a1, (unint64_t)v5, v1, 0LL);
        sub_1000C0F7C(v5 + 67);
        sub_1000E335C(v5 + 1);
        operator delete(v5);
      }

      ++v3;
    }

    while (*(void *)(a1 + 632) > v3);
  }

  sub_100101990((dispatch_queue_t *)(a1 + 920), &stru_10018EE40);
  uint64_t v6 = *(void **)(a1 + 760);
  if (v6) {
    operator delete[](v6);
  }
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v7 = *(void *)(a1 + 656);
  if (*(void *)(a1 + 664) != v7)
  {
    unint64_t v8 = *(void *)(a1 + 680);
    unint64_t v9 = (void *)(v7 + 8 * (v8 >> 9));
    uint64_t v10 = (unint64_t **)(*v9 + 8 * (v8 & 0x1FF));
    uint64_t v11 = *(void *)(v7 + (((*(void *)(a1 + 688) + v8) >> 6) & 0x3FFFFFFFFFFFFF8LL))
        + 8 * ((*(void *)(a1 + 688) + v8) & 0x1FF);
    while (v10 != (unint64_t **)v11)
    {
      uint64_t v12 = *v10;
      if (*v10)
      {
        sub_1000C0F7C(v12 + 67);
        sub_1000E335C(v12 + 1);
        operator delete(v12);
      }

      if ((unint64_t **)((char *)++v10 - *v9) == (unint64_t **)4096)
      {
        uint64_t v13 = (unint64_t **)v9[1];
        ++v9;
        uint64_t v10 = v13;
      }
    }
  }

  std::mutex::unlock((std::mutex *)(a1 + 696));
  BOOL v14 = *(void **)(a1 + 1792);
  if (v14 == (void *)(a1 + 1768))
  {
    uint64_t v15 = 4LL;
    BOOL v14 = (void *)(a1 + 1768);
  }

  else
  {
    if (!v14) {
      goto LABEL_22;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_22:
  uint64_t v16 = *(void **)(a1 + 1760);
  if (v16 == (void *)(a1 + 1736))
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = (void *)(a1 + 1736);
  }

  else
  {
    if (!v16) {
      goto LABEL_27;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  sub_1000C0F7C((unint64_t *)(a1 + 1720));
  sub_1000E335C((void *)(a1 + 1192));
  uint64_t v18 = *(void **)(a1 + 1176);
  if (v18 == (void *)(a1 + 1152))
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = (void *)(a1 + 1152);
    goto LABEL_31;
  }

  if (v18)
  {
    uint64_t v19 = 5LL;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }

  sub_1000E3474((void *)(a1 + 1128));
  std::mutex::~mutex((std::mutex *)(a1 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  sub_10000A494(a1 + 928, *(void **)(a1 + 936));
  sub_100101848((dispatch_object_s **)(a1 + 920));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 864));
  std::mutex::~mutex((std::mutex *)(a1 + 800));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  sub_1000C1944((void *)(a1 + 648));
  return sub_1000E34D4((void *)a1);
}

uint64_t sub_1000E2DF8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8 = a3 & 0x100;
  uint64_t v9 = (a3 >> 8) & 1;
  uint64_t v10 = (unint64_t *)(a1 + 784);
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    uint64_t v12 = (unint64_t *)(a1 + 768);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }

  BOOL v14 = (unsigned int *)(a2 + 544);
  do
    unsigned int v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  sub_1000C0F7C((unint64_t *)(a2 + 536));
  if (a4) {
    sub_1000C0F7C(a4);
  }
  if ((a3 & 1) != 0)
  {
    char v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      uint64_t v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0) {
          break;
        }
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 696));
          uint64_t v18 = *(void *)(a1 + 688);
          std::mutex::unlock((std::mutex *)(a1 + 696));
          if (v18) {
            break;
          }
        }

        if (sub_1000E3088(a1, v17, 0LL, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v24 = sub_10011E684(a2);
          v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v35 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = v25.__d_.__rep_ + 200000;
          unint64_t v32 = a2;
          char v33 = v9;
          *(_DWORD *)__int128 v34 = *(_DWORD *)v38;
          *(_DWORD *)&v34[3] = *(_DWORD *)&v38[3];
          sub_1000E31EC((std::condition_variable *)v24, &__lk, &v36, (uint64_t)&v32);
        }

        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v19 = sub_10011E684(a2);
          char v20 = atomic_load(v14);
          if ((v20 & 4) == 0)
          {
            uint64_t v21 = (std::condition_variable *)v19;
            do
            {
              if ((*v14 & 1) != 0) {
                break;
              }
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 696));
                uint64_t v22 = *(void *)(a1 + 688);
                std::mutex::unlock((std::mutex *)(a1 + 696));
                if (v22) {
                  break;
                }
              }

              std::condition_variable::wait(v21, &__lk);
              char v23 = atomic_load(v14);
            }

            while ((v23 & 4) == 0);
          }
        }

        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        unsigned int v26 = *v14;
        if (!v8 || (v26 & 1) != 0)
        {
          if ((v26 & 1) != 0) {
            break;
          }
        }

        else if (*(void *)(a1 + 688))
        {
          break;
        }

        char v27 = atomic_load(v14);
      }

      while ((v27 & 4) == 0);
    }

    uint64_t v28 = (unint64_t *)(a1 + 768);
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }

  do
    unsigned int v30 = __ldaxr(v14);
  while (__stlxr(v30 & 0xFFFFFFFD, v14));
  return v30 & 1;
}

void sub_1000E3028( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000E3050(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E3088(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 1144)) {
    return 0LL;
  }
  uint64_t v19 = (std::mutex *)(a1 + 1064);
  std::mutex::lock((std::mutex *)(a1 + 1064));
  if (*(void *)(a1 + 1144))
  {
    uint64_t v8 = *(uint64_t **)(a1 + 1136);
    if (v8 == (uint64_t *)(a1 + 1128))
    {
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1LL;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000C0FBC(v12 + 8, v8[3], v10) | a2) == 1)
        {
          unint64_t v13 = sub_10011E5C4(v12);
          std::mutex::lock((std::mutex *)v13);
          BOOL v14 = (unsigned int *)(v12 + 544);
          do
            unsigned int v15 = __ldaxr(v14);
          while (__stlxr(v15 & 0xFFFFFFFB, v14));
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v16 = *v8;
          uint64_t v17 = (uint64_t *)v8[1];
          *(void *)(v16 + _Block_object_dispose((const void *)(v2 - 120), 8) = v17;
          *(void *)v8[1] = v16;
          --*(void *)(a1 + 1144);
          operator delete(v8);
          uint64_t v8 = v17;
        }

        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          uint64_t v8 = (uint64_t *)v8[1];
        }
      }

      while (v8 != (uint64_t *)(a1 + 1128));
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  std::mutex::unlock(v19);
  return v11;
}

void sub_1000E31D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_1000E31EC( std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 544LL));
    if ((v9 & 4) != 0) {
      return 1LL;
    }
    if ((*(_DWORD *)(*(void *)a4 + 544LL) & 1) != 0) {
      return 1LL;
    }
    if (*(_BYTE *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 696);
      std::mutex::lock((std::mutex *)(v8 + 696));
      uint64_t v11 = *(void *)(v8 + 688);
      std::mutex::unlock(v10);
      if (v11) {
        return 1LL;
      }
    }

    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0LL;
      goto LABEL_14;
    }

    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09LL)
      {
        v14.__d_.__rep_ = 0x8000000000000000LL;
        goto LABEL_14;
      }
    }

    else if ((unint64_t)v13 > 0x20C49BA5E353F7LL)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }

    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }

  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 544LL));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 544LL) & 1) != 0) {
    return 1LL;
  }
  if (!*(_BYTE *)(a4 + 8)) {
    return 0LL;
  }
  std::mutex::lock((std::mutex *)(v15 + 696));
  BOOL v17 = *(void *)(v15 + 688) != 0LL;
  std::mutex::unlock((std::mutex *)(v15 + 696));
  return v17;
}

void *sub_1000E335C(void *a1)
{
  unint64_t v2 = a1 + 59;
  unint64_t v3 = (void *)a1[62];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  __int128 v5 = (void *)a1[58];
  if (v5 == a1 + 55)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = a1 + 55;
  }

  else
  {
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t v7 = (void *)a1[54];
  if (v7 == a1 + 51)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = a1 + 51;
    goto LABEL_15;
  }

  if (v7)
  {
    uint64_t v8 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  sub_1000E3414((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1000E3414(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 360))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 280));
    sub_1000C1944((void *)(a1 + 232));
    std::mutex::~mutex((std::mutex *)(a1 + 168));
    std::mutex::~mutex((std::mutex *)(a1 + 104));
    unint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }

    sub_1000C1A24((uint64_t *)(a1 + 16));
  }

  return a1;
}

void *sub_1000E3474(void *result)
{
  if (result[2])
  {
    unint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(*v1 + 8LL);
    **(void **)(v2 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    v1[2] = 0LL;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }

      while (v4 != v1);
    }
  }

  return result;
}

void *sub_1000E34D4(void *a1)
{
  uint64_t v2 = a1 + 13;
  do
  {
    unint64_t v3 = __ldaxr(v2);
    unint64_t v4 = v3 - 1;
  }

  while (__stlxr(v4, v2));
  if (!v4)
  {
    uint64_t v5 = a1[17];
    a1[17] = -1LL;
    sub_1000C0FBC((uint64_t)(a1 + 13), v5, 1u);
  }

  sub_1000E335C(v2);
  uint64_t v6 = (void *)a1[11];
  if (v6 == a1 + 8)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = a1 + 8;
  }

  else
  {
    if (!v6) {
      goto LABEL_10;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  uint64_t v8 = (void *)a1[7];
  if (v8 == a1 + 4)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = a1 + 4;
  }

  else
  {
    if (!v8) {
      goto LABEL_15;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  unsigned int v10 = (void *)a1[3];
  if (v10 == a1)
  {
    uint64_t v11 = 4LL;
    unsigned int v10 = a1;
    goto LABEL_19;
  }

  if (v10)
  {
    uint64_t v11 = 5LL;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  return a1;
}

void *sub_1000E35BC(uint64_t a1)
{
  *(_BYTE *)(a1 + 736) = 0;
  if (*(void *)(a1 + 456))
  {
    unint64_t v3 = 0LL;
    do
    {
      unint64_t v4 = (unint64_t *)(*(void *)(a1 + 584) + 8 * v3);
      do
        uint64_t v5 = (unint64_t *)__ldaxr(v4);
      while (__stlxr(0LL, v4));
      if (v5)
      {
        unint64_t v1 = v1 & 0xFFFFFFFFFF000000LL | 0x10001;
        sub_1000E1B60(a1, (unint64_t)v5, v1, 0LL);
        sub_1000C1AC8(v5 + 45);
        sub_1000E385C(v5 + 1);
        operator delete(v5);
      }

      ++v3;
    }

    while (*(void *)(a1 + 456) > v3);
  }

  sub_100101990((dispatch_queue_t *)(a1 + 744), &stru_10018EE80);
  uint64_t v6 = *(void **)(a1 + 584);
  if (v6) {
    operator delete[](v6);
  }
  std::mutex::lock((std::mutex *)(a1 + 520));
  uint64_t v7 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) != v7)
  {
    unint64_t v8 = *(void *)(a1 + 504);
    uint64_t v9 = (void *)(v7 + 8 * (v8 >> 9));
    unsigned int v10 = (unint64_t **)(*v9 + 8 * (v8 & 0x1FF));
    uint64_t v11 = *(void *)(v7 + (((*(void *)(a1 + 512) + v8) >> 6) & 0x3FFFFFFFFFFFFF8LL))
        + 8 * ((*(void *)(a1 + 512) + v8) & 0x1FF);
    while (v10 != (unint64_t **)v11)
    {
      std::chrono::system_clock::time_point v12 = *v10;
      if (*v10)
      {
        sub_1000C1AC8(v12 + 45);
        sub_1000E385C(v12 + 1);
        operator delete(v12);
      }

      if ((unint64_t **)((char *)++v10 - *v9) == (unint64_t **)4096)
      {
        uint64_t v13 = (unint64_t **)v9[1];
        ++v9;
        unsigned int v10 = v13;
      }
    }
  }

  std::mutex::unlock((std::mutex *)(a1 + 520));
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14 = *(void **)(a1 + 1440);
  if (v14 == (void *)(a1 + 1416))
  {
    uint64_t v15 = 4LL;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14 = (void *)(a1 + 1416);
  }

  else
  {
    if (!v14) {
      goto LABEL_22;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_22:
  char v16 = *(void **)(a1 + 1408);
  if (v16 == (void *)(a1 + 1384))
  {
    uint64_t v17 = 4LL;
    char v16 = (void *)(a1 + 1384);
  }

  else
  {
    if (!v16) {
      goto LABEL_27;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  sub_1000C1AC8((unint64_t *)(a1 + 1368));
  sub_1000E385C((void *)(a1 + 1016));
  uint64_t v18 = *(void **)(a1 + 1000);
  if (v18 == (void *)(a1 + 976))
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = (void *)(a1 + 976);
    goto LABEL_31;
  }

  if (v18)
  {
    uint64_t v19 = 5LL;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }

  sub_1000E3474((void *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 840));
  std::mutex::~mutex((std::mutex *)(a1 + 776));
  sub_10000A494(a1 + 752, *(void **)(a1 + 760));
  sub_100101848((dispatch_object_s **)(a1 + 744));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 688));
  std::mutex::~mutex((std::mutex *)(a1 + 624));
  std::mutex::~mutex((std::mutex *)(a1 + 520));
  sub_1000C1944((void *)(a1 + 472));
  return sub_1000E3958((void *)a1);
}

uint64_t sub_1000E3824(uint64_t a1)
{
  return a1;
}

void *sub_1000E385C(void *a1)
{
  uint64_t v2 = a1 + 37;
  unint64_t v3 = (void *)a1[40];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = (void *)a1[36];
  if (v5 == a1 + 33)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = a1 + 33;
  }

  else
  {
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t v7 = (void *)a1[32];
  if (v7 == a1 + 29)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = a1 + 29;
    goto LABEL_15;
  }

  if (v7)
  {
    uint64_t v8 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  sub_1000E3914((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1000E3914(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 120));
    *(void *)(a1 + sub_100006224(v6 - 32) = off_100180688;
    sub_100079BEC((uint64_t *)(a1 + 56));
  }

  return a1;
}

void *sub_1000E3958(void *a1)
{
  uint64_t v2 = a1 + 13;
  do
  {
    unint64_t v3 = __ldaxr(v2);
    unint64_t v4 = v3 - 1;
  }

  while (__stlxr(v4, v2));
  if (!v4)
  {
    uint64_t v5 = a1[17];
    a1[17] = -1LL;
    sub_1000C1B08((uint64_t)(a1 + 13), v5, 1u);
  }

  sub_1000E385C(v2);
  uint64_t v6 = (void *)a1[11];
  if (v6 == a1 + 8)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = a1 + 8;
  }

  else
  {
    if (!v6) {
      goto LABEL_10;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  uint64_t v8 = (void *)a1[7];
  if (v8 == a1 + 4)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = a1 + 4;
  }

  else
  {
    if (!v8) {
      goto LABEL_15;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  unsigned int v10 = (void *)a1[3];
  if (v10 == a1)
  {
    uint64_t v11 = 4LL;
    unsigned int v10 = a1;
    goto LABEL_19;
  }

  if (v10)
  {
    uint64_t v11 = 5LL;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  return a1;
}

uint64_t sub_1000E3A40(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018C560;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E3AA8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E3ABC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018C780;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E3B24(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E3B38(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018C9A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E3BA0(_Unwind_Exception *a1)
{
}

__n128 sub_1000E3BBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10018EEB0;
  *(_OWORD *)(v2 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1000E3BFC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10018EEB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = result;
  return result;
}

void sub_1000E3C24(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000E3C30(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000E3C6C()
{
}

void *sub_1000E3C78( void **a1, char *a2, uint64_t a3, void *a4, char *a5, void *a6, char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = (unint64_t)a1[4];
  unint64_t v15 = v14 >> 9;
  char v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = &v16[8 * (v14 >> 9)];
  if (v17 == v16) {
    uint64_t v19 = 0LL;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  if (a3 == v19) {
    unint64_t v20 = 0LL;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(void *)v18) >> 3);
  }
  uint64_t v21 = (char *)a1[5];
  if (v20 >= (unint64_t)&v21[-v20])
  {
    uint64_t v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16) {
      uint64_t v24 = 0LL;
    }
    unint64_t v25 = (unint64_t)&v21[v14];
    unint64_t v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_1000E4744(a1, a8 - v26);
      uint64_t v21 = (char *)a1[5];
      char v16 = a1[1];
      uint64_t v17 = a1[2];
      unint64_t v25 = (unint64_t)&v21[(void)a1[4]];
    }

    unint64_t v88 = (char **)a6;
    char v27 = (char **)&v16[8 * (v25 >> 9)];
    if (v17 == v16) {
      uint64_t v28 = 0LL;
    }
    else {
      uint64_t v28 = &(*v27)[8 * (v25 & 0x1FF)];
    }
    v90.n128_u64[0] = (unint64_t)&v16[8 * (v25 >> 9)];
    v90.n128_u64[1] = (unint64_t)v28;
    unint64_t v31 = (unint64_t)&v21[-v20];
    unint64_t v87 = (char **)a4;
    if ((unint64_t)&v21[-v20] >= v8)
    {
      __int128 v34 = a7;
      if (!v8) {
        goto LABEL_90;
      }
      goto LABEL_78;
    }

    if (v31 >= v8 >> 1)
    {
      uint64_t v32 = (uint64_t)&v21[-v20 - v8 + ((a7 - *v88) >> 3)];
      if (v32 >= 1)
      {
        v88 += (unint64_t)v32 >> 9;
        char v33 = *v88;
        goto LABEL_39;
      }

      unint64_t v37 = 511 - v32;
      __int16 v38 = ~(_WORD)v37;
      v88 -= v37 >> 9;
      uint64_t v39 = *v88;
    }

    else
    {
      if (!v31)
      {
        unint64_t v88 = (char **)a4;
        __int128 v34 = a5;
        goto LABEL_69;
      }

      uint64_t v32 = v31 + ((uint64_t)&a5[-*a4] >> 3);
      if (v32 >= 1)
      {
        unint64_t v88 = (char **)&a4[(unint64_t)v32 >> 9];
        char v33 = *v88;
LABEL_39:
        __int128 v34 = &v33[8 * (v32 & 0x1FF)];
        goto LABEL_69;
      }

      unint64_t v64 = 511 - v32;
      __int16 v38 = ~(_WORD)v64;
      unint64_t v88 = (char **)&a4[-(v64 >> 9)];
      uint64_t v39 = *v88;
    }

    __int128 v34 = &v39[8 * (v38 & 0x1FF)];
LABEL_69:
    if (v34 != a7)
    {
      unint64_t v65 = *v27;
      uint64_t v66 = v88;
      unint64_t v67 = v34;
      do
      {
        *(void *)uint64_t v28 = *(void *)v67;
        v28 += 8;
        if (v28 - v65 == 4096)
        {
          unint64_t v68 = v27[1];
          ++v27;
          unint64_t v65 = v68;
          uint64_t v28 = v68;
        }

        v67 += 8;
        if (v67 - *v66 == 4096)
        {
          uint64_t v69 = v66[1];
          ++v66;
          unint64_t v67 = v69;
        }

        ++v21;
      }

      while (v67 != a7);
      a1[5] = v21;
    }

    unint64_t v8 = v31;
    if (!v31) {
      goto LABEL_90;
    }
LABEL_78:
    unint64_t v70 = (char **)sub_1000E4CCC((uint64_t)&v90, v8);
    uint64_t v72 = v70;
    unint64_t v73 = v71;
    unint64_t v74 = (char *)v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v71)
    {
      char v75 = (char *)a1[5];
      unint64_t v76 = *v27;
      unint64_t v77 = v70;
      unint64_t v78 = v71;
      do
      {
        *(void *)uint64_t v28 = *(void *)v78;
        v28 += 8;
        if (v28 - v76 == 4096)
        {
          uint64_t v79 = v27[1];
          ++v27;
          unint64_t v76 = v79;
          uint64_t v28 = v79;
        }

        v78 += 8;
        if (&v78[-*v77] == (char *)4096)
        {
          unint64_t v80 = (char *)v77[1];
          ++v77;
          unint64_t v78 = v80;
        }

        ++v75;
      }

      while (v78 != v74);
      a1[5] = v75;
    }

    if (v8 >= v31)
    {
      unint64_t v83 = (void *)v90.n128_u64[0];
    }

    else
    {
      uint64_t v81 = (char **)sub_1000E4CCC((uint64_t)&v90, v31);
      sub_1000E4EBC(v81, v82, v72, v73, v90.n128_u64[0], (char *)v90.n128_u64[1], &v91);
      unint64_t v74 = (char *)v92.n128_u64[1];
      unint64_t v83 = (void *)v92.n128_u64[0];
      __n128 v90 = v92;
    }

    sub_1000E4EBC(v87, a5, v88, v34, v83, v74, &v91);
    goto LABEL_90;
  }

  if (a8 > v14)
  {
    sub_1000E4218(a1, a8 - v14);
    unint64_t v14 = (unint64_t)a1[4];
    char v16 = a1[1];
    uint64_t v17 = a1[2];
    unint64_t v15 = v14 >> 9;
  }

  uint64_t v22 = (uint64_t *)&v16[8 * v15];
  if (v17 == v16) {
    uint64_t v23 = 0LL;
  }
  else {
    uint64_t v23 = *v22 + 8 * (v14 & 0x1FF);
  }
  v90.n128_u64[0] = (unint64_t)&v16[8 * v15];
  v90.n128_u64[1] = v23;
  if (v8 <= v20)
  {
    unsigned int v30 = a5;
    if (!v8) {
      goto LABEL_90;
    }
    goto LABEL_55;
  }

  if (v20 >= v8 >> 1)
  {
    uint64_t v29 = v8 - v20 + ((uint64_t)&a5[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }

    unint64_t v35 = 511 - v29;
    __int16 v36 = ~(_WORD)v35;
    a4 -= v35 >> 9;
  }

  else
  {
    if (!v20)
    {
      a4 = a6;
      unsigned int v30 = a7;
      goto LABEL_46;
    }

    uint64_t v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      unsigned int v30 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }

    unint64_t v40 = 511 - v29;
    __int16 v36 = ~(_WORD)v40;
    a4 = &a6[-(v40 >> 9)];
  }

  unsigned int v30 = (char *)(*a4 + 8LL * (v36 & 0x1FF));
LABEL_46:
  if (v30 != a5)
  {
    unint64_t v41 = (char *)a1[5];
    uint64_t v42 = *v22;
    __int128 v43 = (char **)a4;
    __int128 v44 = v30;
    do
    {
      if (v23 == v42)
      {
        uint64_t v45 = *--v22;
        uint64_t v42 = v45;
        uint64_t v23 = v45 + 4096;
      }

      if (v44 == *v43)
      {
        uint64_t v46 = (uint64_t)*--v43;
        __int128 v44 = (char *)(v46 + 4096);
      }

      uint64_t v47 = *((void *)v44 - 1);
      v44 -= 8;
      *(void *)(v23 - _Block_object_dispose((const void *)(v2 - 120), 8) = v47;
      v23 -= 8LL;
      --v14;
      ++v41;
    }

    while (v44 != a5);
    a1[4] = (void *)v14;
    a1[5] = v41;
  }

  unint64_t v8 = v20;
  if (v20)
  {
LABEL_55:
    unint64_t v89 = (char **)a6;
    __int128 v48 = (char **)a4;
    uint64_t v49 = (char **)sub_1000E46E0((uint64_t)&v90, v8);
    unint64_t v51 = v49;
    uint64_t v52 = v50;
    unint64_t v53 = v90.n128_u64[1];
    if ((char *)v90.n128_u64[1] != v50)
    {
      int64x2_t v54 = *((int64x2_t *)a1 + 2);
      uint64_t v55 = *v22;
      unint64_t v56 = v49;
      uint64_t v57 = v50;
      do
      {
        if (v23 == v55)
        {
          uint64_t v58 = *--v22;
          uint64_t v55 = v58;
          uint64_t v23 = v58 + 4096;
        }

        if (v57 == *v56)
        {
          uint64_t v59 = (uint64_t)*--v56;
          uint64_t v57 = (char *)(v59 + 4096);
        }

        uint64_t v60 = *((void *)v57 - 1);
        v57 -= 8;
        *(void *)(v23 - _Block_object_dispose((const void *)(v2 - 120), 8) = v60;
        v23 -= 8LL;
        int64x2_t v54 = vaddq_s64(v54, (int64x2_t)xmmword_100148780);
      }

      while (v57 != (char *)v53);
      *((int64x2_t *)a1 + 2) = v54;
    }

    if (v8 >= v20)
    {
      unint64_t v63 = v90.n128_u64[0];
    }

    else
    {
      unint64_t v61 = (char **)sub_1000E46E0((uint64_t)&v90, v20);
      __n128 v91 = v90;
      sub_1000E4D34(v51, v52, v61, v62, (uint64_t)&v91);
      unint64_t v53 = v91.n128_u64[1];
      unint64_t v63 = v91.n128_u64[0];
      __n128 v90 = v91;
    }

    v91.n128_u64[0] = v63;
    v91.n128_u64[1] = v53;
    sub_1000E4D34(v48, v30, v89, a7, (uint64_t)&v91);
  }

LABEL_90:
  uint64_t v84 = a1[1];
  if (a1[2] == v84) {
    uint64_t v85 = 0LL;
  }
  else {
    uint64_t v85 = v84[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  v91.n128_u64[0] = (unint64_t)&v84[(unint64_t)a1[4] >> 9];
  v91.n128_u64[1] = v85;
  return sub_1000E46E0((uint64_t)&v91, v20);
}

void sub_1000E4218(void **a1, unint64_t a2)
{
  unint64_t v3 = a1[1];
  char v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 6) - 1;
  }
  if ((v6 & 0x1FF) != 0) {
    unint64_t v8 = (v6 >> 9) + 1;
  }
  else {
    unint64_t v8 = v6 >> 9;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 9) {
    unint64_t v11 = v10 >> 9;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      uint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_1000E1818((uint64_t)a1, __p);
    }
  }

  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000E1704(a1, __p);
            --v22;
          }

          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }

        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_1000E1818((uint64_t)a1, __p);
            unint64_t v20 = a1[1];
            uint64_t v21 = (_BYTE *)a1[2] - v20 == 8 ? 511LL : 512LL;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }

      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_1000E1818((uint64_t)a1, __p);
      }
    }

    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      unint64_t v70 = a1 + 3;
      if (v17) {
        uint64_t v18 = (char *)sub_1000450A4(v12, v17);
      }
      else {
        uint64_t v18 = 0LL;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      unint64_t v68 = v18;
      uint64_t v69 = &v18[8 * v17];
      do
      {
        uint64_t v66 = operator new(0x1000uLL);
        sub_1000E1934(__p, &v66);
        --v13;
      }

      while (v13);
      unint64_t v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1LL;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            __int16 v36 = (char *)sub_1000450A4((uint64_t)v70, v35);
            __int16 v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8LL)];
              uint64_t v40 = 8 * (v39 >> 3);
              unint64_t v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)unint64_t v41 = v42;
                v41 += 8;
                v40 -= 8LL;
              }

              while (v40);
            }

            __int128 v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            unint64_t v68 = i;
            uint64_t v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }

          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            uint64_t v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }

            __int128 v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            unint64_t v68 = &v32[v33];
          }
        }

        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        unint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }

      __int128 v44 = (char *)a1[1];
      if (v44 == v25)
      {
        __int128 v44 = v25;
      }

      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1LL;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              unint64_t v53 = (char *)sub_1000450A4((uint64_t)v70, v52);
              uint64_t v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8LL;
                }

                while (v57);
              }

              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              unint64_t v68 = i;
              uint64_t v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }

            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              uint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }

              unint64_t v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              unint64_t v68 = &v49[v50];
            }
          }

          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }

        while (v44 != a1[2]);
        unint64_t v25 = (char *)a1[1];
      }

      unint64_t v62 = v69;
      unint64_t v63 = (char *)a1[3];
      unint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      unint64_t v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      unint64_t v68 = v44;
      uint64_t v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        unint64_t v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }

void sub_1000E466C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E46E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }

  return result;
}

void sub_1000E4744(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }

          int64_t v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000E1704(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000E1818((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 511LL;
          }
          else {
            uint64_t v64 = 512LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          unint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          unint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              unint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              char v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }

              unint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __n128 v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_1000450A4((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0LL;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        unint64_t v88 = operator new(0x1000uLL);
        sub_1000E1934(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000450A4((uint64_t)v91, v48);
              unint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000E1A48((uint64_t)__p, v57);
      }

      uint64_t v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_1000E4C58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000E4CCC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }

  return result;
}

double sub_1000E4D34(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    unint64_t v8 = a1 + 1;
    sub_1000E4E00(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      unint64_t v9 = *v8++;
      sub_1000E4E00(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    unint64_t v12 = *(char **)(a5 + 8);
  }

  sub_1000E4E00(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1000E4E00@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  unint64_t v6 = a4;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }

    __dst += 8 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

__n128 sub_1000E4EBC@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    unint64_t v16 = a6;
  }

  else
  {
    unint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    __int128 v15 = a5;
    unint64_t v16 = a6;
    while (1)
    {
      sub_1000E4F88(v12, v14, v15, v16, &v21);
      unint64_t v16 = (char *)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      unint64_t v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4096;
    }

    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }

  sub_1000E4F88(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1000E4F88@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    unint64_t v9 = a1;
  }

  else
  {
    unint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 3;
      }
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 8 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }

    if ((char *)(*v6 + 4096LL) == a4)
    {
      unint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_1000E5040( uint64_t a1, unint64_t **a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  if (a3 != a5)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a3;
    unint64_t v14 = a3;
    uint64_t v15 = a2;
    while (1)
    {
      if ((char *)++v14 - (char *)v12 == 4096)
      {
        unint64_t v16 = v15[1];
        ++v15;
        uint64_t v12 = v16;
        unint64_t v14 = v16;
      }

      if (v14 == a5) {
        break;
      }
      if (*v13 < *v14) {
        uint64_t v13 = v14;
      }
    }

    std::mutex::lock((std::mutex *)(a1 + 8));
    sub_1000E5150((uint64_t *)(a1 + 72), a2, a3, a4, a5);
    if (*v13 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + *v13;
    }
    sub_1000CFB64((void *)a1, a6);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }

void sub_1000E513C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000E5150(uint64_t *result, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    unint64_t v8 = (uint64_t **)result;
    unint64_t v9 = result + 1;
    do
    {
      __n128 result = sub_1000E51C8(v8, v9, v6, (uint64_t *)v6);
      if ((unint64_t *)((char *)++v6 - *a2) == (unint64_t *)4096)
      {
        uint64_t v10 = (unint64_t *)a2[1];
        ++a2;
        unint64_t v6 = v10;
      }
    }

    while (v6 != a5);
  }

  return result;
}

uint64_t *sub_1000E51C8(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)sub_1000E2118(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_10000CC04(a1, v11, v8, v7);
  }

  return v7;
}

uint64_t sub_1000E524C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018CDE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E52B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E52C8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018D000;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E5330(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E5344(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018D220;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E53AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E53C0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018D440;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E5428(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E543C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018D660;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E54A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E54B8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018D880;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E5520(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E5534(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018DCC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E559C(_Unwind_Exception *a1)
{
}

void sub_1000E55B0(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v50 = a2;
  unint64_t v7 = (std::mutex *)(a1 + 952);
  unint64_t v8 = (void *)(a1 + 936);
  unint64_t v9 = (unint64_t *)(a1 + 1184);
  uint64_t v10 = (unint64_t *)(a1 + 768);
  uint64_t v43 = (unint64_t *)(a1 + 104);
  uint64_t v44 = (std::condition_variable *)(a1 + 1016);
  int64_t v45 = (uint64_t **)(a1 + 928);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v50;
    }

    else
    {
      unint64_t v16 = (void *)*v8;
      if (!*v8) {
        goto LABEL_20;
      }
      uint64_t v11 = v50;
      unint64_t v17 = v8;
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= v50;
        if (v18 >= v50) {
          uint64_t v20 = v16;
        }
        else {
          uint64_t v20 = v16 + 1;
        }
        if (v19) {
          unint64_t v17 = v16;
        }
        unint64_t v16 = (void *)*v20;
      }

      while (*v20);
      if (v17 == v8 || v50 < v17[4] || (unint64_t *)v17[5] == v9)
      {
LABEL_20:
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v21 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        sub_1000C0F7C((unint64_t *)&v51);
        goto LABEL_23;
      }
    }

    unint64_t v51 = (unint64_t *)v11;
    uint64_t v52 = v9;
    uint64_t v12 = sub_1000E0F60(v45, (unint64_t *)&v51, (uint64_t *)&v51);
    uint64_t v13 = v12;
    if (v14)
    {
      unint64_t v51 = 0LL;
      *a4 = 0LL;
      do
        unint64_t v15 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0LL, (unint64_t *)&v51));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      sub_1000C0F7C((unint64_t *)&v51);
LABEL_23:
      int v22 = 1;
      goto LABEL_24;
    }

    unint64_t v48 = (unint64_t *)v12[5];
    if (v48 == v9)
    {
      unint64_t v28 = (void *)*v8;
      if (*v8)
      {
        unint64_t v29 = v50;
        uint64_t v30 = v8;
        while (1)
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= v29;
          if (v31 >= v29) {
            uint64_t v33 = v28;
          }
          else {
            uint64_t v33 = v28 + 1;
          }
          if (v32) {
            uint64_t v30 = v28;
          }
          unint64_t v28 = (void *)*v33;
          if (!*v33)
          {
            if (v30 == v8) {
              break;
            }
            if (v29 < v30[4]) {
              break;
            }
            uint64_t v34 = (unint64_t *)v30[5];
            if (v34 != v9)
            {
              unint64_t v35 = v34[67];
              if (v35)
              {
                if (!*(_BYTE *)(v35 + 520)) {
                  break;
                }
              }
            }

            if (!*(_BYTE *)(a1 + 912)) {
              break;
            }
            std::condition_variable::wait(v44, &__lk);
            unint64_t v28 = (void *)*v8;
            uint64_t v30 = v8;
            if (!*v8) {
              break;
            }
          }
        }
      }

      int v22 = 0;
      goto LABEL_24;
    }

    sub_10001ED54((uint64_t)&__lk);
    sub_1000E5DBC(&v47, v48 + 67);
    if (v47 && !*(_BYTE *)(v47 + 520))
    {
      uint64_t v23 = v50;
      if (*(void *)(v47 + 32) == v50)
      {
        *a4 = 0LL;
        do
          unint64_t v37 = __ldaxr(&v47);
        while (__stlxr(0LL, &v47));
        atomic_store(v37, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }

      if (*(void *)(v47 + 32) == -1LL)
      {
        uint64_t v24 = v43;
        if ((a3 & 1) == 0)
        {
          unint64_t v51 = 0LL;
          *a4 = 0LL;
          do
            unint64_t v36 = __ldaxr((unint64_t *)&v51);
          while (__stlxr(0LL, (unint64_t *)&v51));
          goto LABEL_83;
        }

        goto LABEL_35;
      }
    }

    else
    {
      if (!a3)
      {
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v36 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        goto LABEL_83;
      }

      uint64_t v23 = v50;
    }

    uint64_t v24 = v43;
LABEL_35:
    if (sub_1000E3088(a1, 0, v23, 1u) != -1)
    {
      do
        unint64_t v25 = __ldaxr(v10);
      while (__stlxr(v25 + 1, v10));
      v46.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4((unint64_t)v48);
      v46.__owns_ = 1;
      std::mutex::lock(v46.__m_);
      int64_t v26 = sub_10011E684((unint64_t)v48);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      unint64_t v51 = (unint64_t *)&v48;
      uint64_t v52 = &v47;
      uint64_t v53 = &v50;
      sub_1000E604C((std::condition_variable *)v26, &v46, &v54, (uint64_t)&v51);
      do
        unint64_t v27 = __ldaxr(v10);
      while (__stlxr(v27 - 1, v10));
      if (v46.__owns_) {
        std::mutex::unlock(v46.__m_);
      }
      int v22 = 3;
      goto LABEL_85;
    }

    unint64_t v51 = 0LL;
    unint64_t v38 = atomic_load(v24);
    if (!v38) {
      goto LABEL_81;
    }
    while (1)
    {
      unint64_t v39 = __ldaxr(v24);
      if (v39 != v38)
      {
        __clrex();
        goto LABEL_71;
      }

      if (!__stlxr(v38 + 1, v24)) {
        break;
      }
LABEL_71:
      unint64_t v38 = v39;
      if (!v39) {
        goto LABEL_81;
      }
    }

    uint64_t v40 = *(unint64_t **)(a1 + 608);
    unint64_t v38 = (unint64_t)v24;
    if (v40)
    {
      do
        unint64_t v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(void *)(a1 + 616) = v41;
      unint64_t v38 = (unint64_t)v24;
    }

void sub_1000E5A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_1000E5A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  unint64_t v13 = 0LL;
  unint64_t v6 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  uint64_t v7 = *(void *)(a1 + 688);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 680);
    unint64_t v9 = *(unint64_t **)(*(void *)(*(void *)(a1 + 656) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF));
    *(void *)(a1 + 68_Block_object_dispose((const void *)(v2 - 120), 8) = v7 - 1;
    *(void *)(a1 + 680) = v8 + 1;
    sub_1000E1270(a1 + 648, 1);
    sub_1000E5CA0(a1, v9, a2, v14);
    sub_1000CD184(&v13, v14);
    sub_1000C0F7C(v14);
  }

  else
  {
    unint64_t v9 = 0LL;
  }

  std::mutex::unlock(v6);
  unint64_t v10 = atomic_load((unint64_t *)(a1 + 784));
  if (v10 + v7 >= *(void *)(a1 + 640))
  {
    sub_1000E3088(a1, 0, 0LL, 0);
  }

  else
  {
    v14[0] = (unint64_t)_NSConcreteStackBlock;
    v14[1] = 0x40000000LL;
    void v14[2] = (unint64_t)sub_1000E61D0;
    void v14[3] = (unint64_t)&unk_10018EF30;
    v14[4] = a1;
    sub_100101908((dispatch_queue_t *)(a1 + 920), v14);
  }

  *a3 = v9;
  a3[1] = 0LL;
  do
    unint64_t v11 = __ldaxr(&v13);
  while (__stlxr(0LL, &v13));
  atomic_store(v11, (unint64_t *)a3 + 1);
  return sub_1000C0F7C(&v13);
}

void sub_1000E5BC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
}

unint64_t sub_1000E5BFC(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 97);
  uint64_t v2 = a1[79];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  int v4 = 0;
  unint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = a1[95];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 520) != -1LL)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }

    ++v3;
  }

  while (v2 != v3);
  if (!v5) {
    return 0LL;
  }
  unint64_t v8 = (unint64_t *)(a1[95] + 8LL * v4);
  do
  {
    unint64_t v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0LL;
    }
  }

  while (__stlxr(0LL, v8));
  return v5;
}

unint64_t *sub_1000E5CA0@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = a2 + 1;
  unint64_t v17 = 0LL;
  unint64_t v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    uint64_t v7 = 0LL;
    goto LABEL_11;
  }

  while (1)
  {
    unint64_t v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(v8 + 1, v7)) {
      break;
    }
LABEL_6:
    unint64_t v8 = v9;
    if (!v9) {
      goto LABEL_7;
    }
  }

  unint64_t v10 = (unint64_t *)a2[64];
  if (v10)
  {
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[65] = v11;
  }

unint64_t *sub_1000E5DBC(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0LL;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v4 = atomic_load(v3);
  if (!v4) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }

    if (!__stlxr(v4 + 1, v3)) {
      break;
    }
LABEL_7:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_8;
    }
  }

  uint64_t v7 = (unint64_t *)v3[63];
  if (v7)
  {
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[64] = v8;
  }

  if (!sub_1000E5E8C((uint64_t)v3))
  {
    do
      unint64_t v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      uint64_t v10 = v3[4];
      v3[4] = -1LL;
      sub_1000C0FBC((uint64_t)v3, v10, 1u);
    }

BOOL sub_1000E5E8C(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }

  else
  {
    uint64_t v6 = (unint64_t *)(a1 + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    unsigned int v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 520)) {
      sub_1000E5F38(a1 + 24, 1u, 5u);
    }
    do
      unint64_t v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    unint64_t v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0LL;
    }

    else
    {
      unsigned int v11 = atomic_load(v2);
      return v11 == 2;
    }
  }

BOOL sub_1000E5F38(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&__int128 v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  __int128 v6 = v4;
  return sub_1000DB964((uint64_t)&v4, (uint64_t)&v5, 0LL);
}

unint64_t *sub_1000E5F78(unint64_t *a1, unint64_t *a2, int a3)
{
  unsigned int v3 = a2;
  *a1 = 0LL;
  if (!a2) {
    goto LABEL_9;
  }
  unint64_t v5 = atomic_load(a2);
  if (!v5) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }

    if (!__stlxr(v5 + 1, a2)) {
      break;
    }
LABEL_7:
    unint64_t v5 = v6;
    if (!v6) {
      goto LABEL_8;
    }
  }

  unsigned int v8 = (unint64_t *)a2[63];
  if (v8)
  {
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[64] = v9;
  }

  if (a3 && !sub_1000E5E8C((uint64_t)a2))
  {
    do
      unint64_t v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      uint64_t v11 = v3[4];
      v3[4] = -1LL;
      sub_1000C0FBC((uint64_t)v3, v11, 1u);
    }

BOOL sub_1000E604C( std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if ((*(_DWORD *)(**(void **)a4 + 544LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(_BYTE *)(*(void *)v8 + 520LL) && *(void *)(*(void *)v8 + 32LL) == **(void **)(a4 + 16)) {
        return 1LL;
      }
    }

    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000LL;
            goto LABEL_17;
          }
        }

        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0LL;
      }

uint64_t sub_1000E61D0(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_1000E5BFC(v1);
  if (v2) {
    sub_1000E6214((uint64_t)v1, v2);
  }
  return sub_1000E3088((uint64_t)v1, 0, 0LL, 0);
}

void sub_1000E6214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unsigned int v3 = (std::mutex *)(a1 + 696);
  std::mutex::lock((std::mutex *)(a1 + 696));
  sub_1000E6270((void *)(a1 + 648), &v4);
  std::mutex::unlock(v3);
}

void sub_1000E625C(_Unwind_Exception *a1)
{
}

void sub_1000E6270(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000E62F4(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000E62F4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000450A4(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1000E65BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_1000E6608(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (unint64_t *)(a1 + 8);
  sub_1000E66F8(a1 + 8, a2);
  unint64_t v12 = 0LL;
  unint64_t v4 = atomic_load(v3);
  if (!v4) {
    goto LABEL_11;
  }
  while (1)
  {
    unint64_t v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(v4 + 1, v3)) {
      break;
    }
LABEL_6:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_11;
    }
  }

  uint64_t v6 = *(unint64_t **)(a1 + 512);
  unint64_t v4 = (unint64_t)v3;
  if (v6)
  {
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(void *)(a1 + 520) = v7;
    unint64_t v4 = (unint64_t)v3;
  }

uint64_t *sub_1000E66F8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + sub_100006224(v6 - 32) = a2;
  *(_BYTE *)(a1 + 520) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0LL, (unint64_t *)(a1 + 8));
  atomic_store(0LL, (unint64_t *)(a1 + 16));
  __n128 result = sub_1000C12BC((uint64_t *)(a1 + 40));
  unint64_t v4 = *(unint64_t **)(a1 + 504);
  if (v4)
  {
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(void *)(a1 + 512) = v5;
  }

  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void sub_1000E6764( uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v12 = a1 + 40;
  sub_1000C12BC((uint64_t *)(a1 + 40));
  sub_1000E6858(v12, a2, a3, a4, a5, a6);
  *(_BYTE *)(a1 + 400) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000E6830(a1);
}

void sub_1000E67F8(void *a1)
{
  *(_BYTE *)(v1 + 520) = 1;
  sub_1000E6830(v1);
  __cxa_rethrow();
}

void sub_1000E681C(_Unwind_Exception *a1)
{
}

void sub_1000E6830(uint64_t a1)
{
}

uint64_t sub_1000E6858( uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5, unsigned __int8 *a6)
{
  unint64_t v7 = (std::__shared_weak_count *)a3[1];
  v13[0] = *a3;
  v13[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_1000C2174(a1, a2, v13, *a4, *a5, *a6);
  if (v7)
  {
    unint64_t v10 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

void sub_1000E68EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000E6900(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  *(void *)(a1 + 512) = **(void **)(a1 + 504);
  uint64_t v10 = a1 + 40;
  sub_1000C12BC((uint64_t *)(a1 + 40));
  sub_1000E69BC(v10, a2, a3, a4, a5);
  *(_BYTE *)(a1 + 400) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000E6830(a1);
}

void sub_1000E6984(void *a1)
{
  *(_BYTE *)(v1 + 520) = 1;
  sub_1000E6830(v1);
  __cxa_rethrow();
}

void sub_1000E69A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E69BC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  v12[0] = *a3;
  v12[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  sub_1000C2174(a1, a2, v12, *a4, *a5, 0);
  if (v6)
  {
    unint64_t v9 = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return a1;
}

void sub_1000E6A50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000E6A64(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018DEE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E6ACC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E6AE0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018E100;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E6B48(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E6B5C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018E320;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E6BC4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E6BD8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018E540;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E6C40(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E6C54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000E7058(a1);
  *(void *)(v8 + 6sub_100006224(v6 - 32) = a2;
  *(void *)(v8 + 640) = a3;
  unint64_t v9 = (void *)(v8 + 648);
  *(_OWORD *)(v8 + 64_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 680) = 0u;
  *(void *)(v8 + 696) = 850045863LL;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 720) = 0u;
  *(_OWORD *)(v8 + 736) = 0u;
  *(void *)(v8 + 752) = 0LL;
  *(_OWORD *)(v8 + 76_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v8 + 784) = 0u;
  *(void *)(v8 + 800) = 850045863LL;
  *(_OWORD *)(v8 + 80_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(void *)(v8 + 856) = 0LL;
  *(void *)(v8 + 864) = 1018212795LL;
  *(void *)(v8 + 904) = 0LL;
  *(_OWORD *)(v8 + 88_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_BYTE *)(v8 + 912) = 1;
  *(_OWORD *)(v8 + 872) = 0u;
  uint64_t v16 = (dispatch_object_t *)(v8 + 920);
  sub_1001018F4(v8 + 920, "dealloc_queue");
  *(void *)(a1 + 944) = 0LL;
  *(void *)(a1 + 936) = 0LL;
  *(void *)(a1 + 92_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 936;
  *(void *)(a1 + 952) = 850045863LL;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(void *)(a1 + 100_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 1016) = 1018212795LL;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1056) = 0LL;
  *(void *)(a1 + 1064) = 850045863LL;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 108_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1120) = 0LL;
  *(void *)(a1 + 112_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 1128;
  *(void *)(a1 + 1136) = a1 + 1128;
  *(void *)(a1 + 1144) = 0LL;
  sub_100014938(a1 + 1152, a4);
  sub_1000E7414(a1 + 1184, a1);
  *(void *)(a1 + 1736) = &off_10018F210;
  *(void *)(a1 + 1744) = a1;
  *(void *)(a1 + 1760) = a1 + 1736;
  *(void *)(a1 + 176_Block_object_dispose((const void *)(v2 - 120), 8) = &off_10018F2A0;
  *(void *)(a1 + 1776) = a1;
  *(void *)(a1 + 1792) = a1 + 1768;
  if (a2 >> 61) {
    size_t v10 = -1LL;
  }
  else {
    size_t v10 = 8 * a2;
  }
  unint64_t v11 = operator new[](v10);
  uint64_t v12 = v11;
  if (a2) {
    bzero(v11, 8 * a2);
  }
  *(void *)(a1 + 760) = v12;
  sub_1001019A8(v16, 3);
  if (a2)
  {
    uint64_t v13 = 0LL;
    do
    {
      BOOL v14 = operator new(0x228uLL);
      sub_1000E7414((uint64_t)v14, a1);
      uint64_t v17 = v14;
      sub_1000E6F9C(v9, &v17);
      atomic_store(0LL, (unint64_t *)(*(void *)(a1 + 760) + 8 * v13++));
    }

    while (a2 != v13);
  }

  return a1;
}

void sub_1000E6E60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::condition_variable *a11, void *a12, dispatch_object_s **a13)
{
  uint64_t v18 = *(void **)(v13 + 1176);
  if (v18 == a12)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = a12;
  }

  else
  {
    if (!v18) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_1000E3474(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 1064));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 1016));
  std::mutex::~mutex((std::mutex *)(v13 + 952));
  sub_10000A494(v13 + 928, *a10);
  sub_100101848(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 696));
  sub_1000C1944(v14);
  sub_1000E34D4((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E6F9C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000E62F4(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }

  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0LL;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096LL;
  }
  return v13 - 8;
}

uint64_t sub_1000E7058(uint64_t a1)
{
  *(void *)(a1 + sub_100006224(v6 - 32) = &off_10018EFF0;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)a1 = &off_10018EF60;
  *(void *)(a1 + 64) = &off_10018F080;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 64;
  *(void *)(a1 + 96) = 0LL;
  uint64_t v2 = sub_1000E7300(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000E66F8(v2, -1LL);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 624) = 1;
  return a1;
}

void sub_1000E70FC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 88);
  if (v4 == v2)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    uint64_t v2 = *(void **)(v1 + 88);
  }

  (*(void (**)(void *))(*v2 + 8 * v5))(v2);
LABEL_6:
  sub_1001263E4();
  _Unwind_Resume(a1);
}

void *sub_1000E7154()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018EF60;
  return result;
}

void sub_1000E7178(uint64_t a1, void *a2)
{
  *a2 = &off_10018EF60;
}

uint64_t sub_1000E7194(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E71D0()
{
}

void *sub_1000E71E4()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018EFF0;
  return result;
}

void sub_1000E7208(uint64_t a1, void *a2)
{
  *a2 = &off_10018EFF0;
}

uint64_t sub_1000E7224(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E7260()
{
}

void *sub_1000E7274()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018F080;
  return result;
}

void sub_1000E7298(uint64_t a1, void *a2)
{
  *a2 = &off_10018F080;
}

uint64_t sub_1000E72B0()
{
  return 0LL;
}

uint64_t sub_1000E72B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E72F4()
{
}

uint64_t sub_1000E7300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + sub_100006224(v6 - 32) = -1LL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  sub_100014938(a1 + 408, a2);
  sub_100014938(a1 + 440, a3);
  sub_100014938(a1 + 472, a4);
  *(void *)(a1 + 504) = a5;
  *(void *)(a1 + 512) = 0LL;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_1000E7394(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v2 + 464);
  if (v6 == v4)
  {
    uint64_t v7 = 4LL;
  }

  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
    uint64_t v4 = *(void **)(v2 + 464);
  }

  (*(void (**)(void *))(*v4 + 8 * v7))(v4);
LABEL_6:
  uint64_t v8 = *(void **)(v2 + 432);
  if (v8 == v3)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v3;
  }

  else
  {
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  sub_1000E3414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E7414(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v10[0] = &off_10018F110;
  v10[1] = a1;
  uint64_t v11 = v10;
  v8[0] = &off_10018F190;
  v8[1] = a1;
  uint64_t v9 = v8;
  sub_1000E7300(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 1152, a2 + 776);
  BOOL v3 = v9;
  if (v9 == v8)
  {
    uint64_t v4 = 4LL;
    BOOL v3 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = v11;
  if (v11 == v10)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v10;
    goto LABEL_10;
  }

  if (v11)
  {
    uint64_t v6 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  *(void *)(a1 + 536) = 0LL;
  *(_DWORD *)(a1 + 544) = 0;
  return a1;
}

void sub_1000E750C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v19 = a13;
  if (a13 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  uint64_t v21 = a17;
  if (a17 == &a14)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *sub_1000E757C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F110;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E75B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F110;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E75CC(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1000C1278(**(void **)(a1 + 8) + 1736LL, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1000E75E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E7620()
{
}

void *sub_1000E7634(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F190;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E7668(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F190;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E7684(uint64_t a1)
{
  return sub_1000E76D4((uint64_t **)(a1 + 8));
}

uint64_t sub_1000E768C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E76C8()
{
}

uint64_t sub_1000E76D4(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v4 = *a1;
  uint64_t v2 = *(void *)(v1 + 1792);
  if (!v2) {
    sub_100014B10();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v2 + 48LL))(v2, &v4);
}

void *sub_1000E771C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F210;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E7750(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F210;
  a2[1] = v2;
  return result;
}

void sub_1000E776C(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_1000E7780(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E77BC()
{
}

void sub_1000E77C8(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if ((*(_DWORD *)(a2 + 544) & 1) == 0)
  {
    uint64_t v7 = (unsigned int *)(a2 + 544);
    if ((a4 & 3) == 1LL)
    {
      uint64_t v8 = (char *)(a1 + 1064);
      std::mutex::lock((std::mutex *)(a1 + 1064));
      uint64_t v9 = operator new(0x20uLL);
      v9[2] = a2;
      void v9[3] = a3;
      uint64_t v10 = *(void *)(a1 + 1128);
      *uint64_t v9 = v10;
      v9[1] = a1 + 1128;
      *(void *)(v10 + _Block_object_dispose((const void *)(v2 - 120), 8) = v9;
      *(void *)(a1 + 112_Block_object_dispose((const void *)(v2 - 120), 8) = v9;
      ++*(void *)(a1 + 1144);
      do
        unsigned int v11 = __ldaxr(v7);
      while (__stlxr(v11 | 4, v7));
      uint64_t v12 = sub_10011E5C4(a2);
      std::mutex::lock((std::mutex *)v12);
      uint64_t v13 = sub_10011E684(a2);
      std::condition_variable::notify_all((std::condition_variable *)v13);
      std::mutex::unlock((std::mutex *)v12);
LABEL_20:
      std::mutex::unlock((std::mutex *)v8);
      return;
    }

    sub_1000E7974(a1, a3);
    sub_1000C0F7C((unint64_t *)(a2 + 536));
    do
      unsigned int v14 = __ldaxr(v7);
    while (__stlxr(v14 | 1, v7));
    if ((v14 & 2) == 0) {
      sub_1000E6214(a1, a2);
    }
    uint64_t v15 = (unint64_t *)(a1 + 784);
    do
    {
      unint64_t v16 = __ldaxr(v15);
      unint64_t v17 = v16 - 1;
    }

    while (__stlxr(v17, v15));
    if (!v17)
    {
      if (atomic_load((unint64_t *)(a1 + 792)))
      {
        std::mutex::lock((std::mutex *)(a1 + 800));
        std::mutex::unlock((std::mutex *)(a1 + 800));
      }
    }

    uint64_t v20 = (unint64_t *)(a1 + 768);
    if (atomic_load(v20))
    {
      uint64_t v8 = sub_10011E5C4(a2);
      std::mutex::lock((std::mutex *)v8);
      if (atomic_load(v20))
      {
        uint64_t v23 = sub_10011E684(a2);
        std::condition_variable::notify_all((std::condition_variable *)v23);
      }

      goto LABEL_20;
    }
  }

void sub_1000E7948(_Unwind_Exception *a1)
{
}

void sub_1000E7974(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 952);
  std::mutex::lock((std::mutex *)(a1 + 952));
  sub_10004D090(a1 + 928, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1016));
  std::mutex::unlock(v3);
}

void sub_1000E79C4(_Unwind_Exception *a1)
{
}

void *sub_1000E79E0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F2A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E7A14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F2A0;
  a2[1] = v2;
  return result;
}

void sub_1000E7A30(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
}

uint64_t sub_1000E7A3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E7A78()
{
}

void sub_1000E7A84(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 632);
  if (v3 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(a1 + 760);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8LL;
      if (v7 + v6 >= v8) {
        return;
      }
    }

    if ((v6 & 0x8000000000000000LL) == 0)
    {
      uint64_t v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        unint64_t v10 = __ldaxr(v9);
        if (v10 != a2) {
          break;
        }
        if (!__stlxr(0LL, v9))
        {
          sub_1000E2DF8(a1, a2, 1uLL, a3);
          sub_1000E6214(a1, a2);
          return;
        }
      }

      __clrex();
    }
  }

uint64_t sub_1000E7B2C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000E7F24(a1);
  *(void *)(v8 + 456) = a2;
  *(void *)(v8 + 464) = a3;
  uint64_t v9 = (void *)(v8 + 472);
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 48_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(void *)(v8 + 520) = 850045863LL;
  *(_OWORD *)(v8 + 52_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v8 + 544) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(void *)(v8 + 576) = 0LL;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 60_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(v8 + 624) = 850045863LL;
  *(_OWORD *)(v8 + 6sub_100006224(v6 - 32) = 0u;
  *(_OWORD *)(v8 + 64_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  *(void *)(v8 + 680) = 0LL;
  *(void *)(v8 + 68_Block_object_dispose((const void *)(v2 - 120), 8) = 1018212795LL;
  *(void *)(v8 + 72_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_OWORD *)(v8 + 712) = 0u;
  *(_BYTE *)(v8 + 736) = 1;
  *(_OWORD *)(v8 + 696) = 0u;
  unint64_t v16 = (dispatch_object_t *)(v8 + 744);
  sub_1001018F4(v8 + 744, "dealloc_queue");
  *(void *)(a1 + 76_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 760) = 0LL;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 776) = 850045863LL;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 8sub_100006224(v6 - 32) = 0LL;
  *(void *)(a1 + 840) = 1018212795LL;
  *(_OWORD *)(a1 + 84_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 880) = 0LL;
  *(void *)(a1 + 88_Block_object_dispose((const void *)(v2 - 120), 8) = 850045863LL;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 92_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(a1 + 944) = 0LL;
  *(void *)(a1 + 952) = a1 + 952;
  *(void *)(a1 + 960) = a1 + 952;
  *(void *)(a1 + 96_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  sub_100014938(a1 + 976, a4);
  sub_1000E82E0(a1 + 1008, a1);
  *(void *)(a1 + 1384) = &off_10018F5E0;
  *(void *)(a1 + 1392) = a1;
  *(void *)(a1 + 140_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 1384;
  *(void *)(a1 + 1416) = &off_10018F670;
  *(void *)(a1 + 1424) = a1;
  *(void *)(a1 + 1440) = a1 + 1416;
  if (a2 >> 61) {
    size_t v10 = -1LL;
  }
  else {
    size_t v10 = 8 * a2;
  }
  unsigned int v11 = operator new[](v10);
  uint64_t v12 = v11;
  if (a2) {
    bzero(v11, 8 * a2);
  }
  *(void *)(a1 + 584) = v12;
  sub_1001019A8(v16, 3);
  if (a2)
  {
    uint64_t v13 = 0LL;
    do
    {
      unsigned int v14 = operator new(0x178uLL);
      sub_1000E82E0((uint64_t)v14, a1);
      unint64_t v17 = v14;
      sub_1000E7E68(v9, &v17);
      atomic_store(0LL, (unint64_t *)(*(void *)(a1 + 584) + 8 * v13++));
    }

    while (a2 != v13);
  }

  return a1;
}

void sub_1000E7D2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::condition_variable *a11, void *a12, dispatch_object_s **a13)
{
  uint64_t v18 = *(void **)(v13 + 1000);
  if (v18 == a12)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = a12;
  }

  else
  {
    if (!v18) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_1000E3474(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 840));
  std::mutex::~mutex((std::mutex *)(v13 + 776));
  sub_10000A494(v13 + 752, *a10);
  sub_100101848(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 520));
  sub_1000C1944(v14);
  sub_1000E3958((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E7E68(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000E13F0(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }

  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0LL;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096LL;
  }
  return v13 - 8;
}

uint64_t sub_1000E7F24(uint64_t a1)
{
  *(void *)(a1 + sub_100006224(v6 - 32) = &off_10018F3C0;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)a1 = &off_10018F330;
  *(void *)(a1 + 64) = &off_10018F450;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 64;
  *(void *)(a1 + 96) = 0LL;
  uint64_t v2 = sub_1000E81CC(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000E2018(v2, -1LL);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 44_Block_object_dispose((const void *)(v2 - 120), 8) = 1;
  return a1;
}

void sub_1000E7FC8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 88);
  if (v4 == v2)
  {
    uint64_t v5 = 4LL;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
    uint64_t v2 = *(void **)(v1 + 88);
  }

  (*(void (**)(void *))(*v2 + 8 * v5))(v2);
LABEL_6:
  sub_1001263E4();
  _Unwind_Resume(a1);
}

void *sub_1000E8020()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018F330;
  return result;
}

void sub_1000E8044(uint64_t a1, void *a2)
{
  *a2 = &off_10018F330;
}

uint64_t sub_1000E8060(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E809C()
{
}

void *sub_1000E80B0()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018F3C0;
  return result;
}

void sub_1000E80D4(uint64_t a1, void *a2)
{
  *a2 = &off_10018F3C0;
}

uint64_t sub_1000E80F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E812C()
{
}

void *sub_1000E8140()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_10018F450;
  return result;
}

void sub_1000E8164(uint64_t a1, void *a2)
{
  *a2 = &off_10018F450;
}

uint64_t sub_1000E817C()
{
  return 0LL;
}

uint64_t sub_1000E8184(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E81C0()
{
}

uint64_t sub_1000E81CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + sub_100006224(v6 - 32) = -1LL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  sub_100014938(a1 + 232, a2);
  sub_100014938(a1 + 264, a3);
  sub_100014938(a1 + 296, a4);
  *(void *)(a1 + 32_Block_object_dispose((const void *)(v2 - 120), 8) = a5;
  *(void *)(a1 + 336) = 0LL;
  *(_BYTE *)(a1 + 344) = 0;
  return a1;
}

void sub_1000E8260(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v2 + 288);
  if (v6 == v4)
  {
    uint64_t v7 = 4LL;
  }

  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
    uint64_t v4 = *(void **)(v2 + 288);
  }

  (*(void (**)(void *))(*v4 + 8 * v7))(v4);
LABEL_6:
  uint64_t v8 = *(void **)(v2 + 256);
  if (v8 == v3)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v3;
  }

  else
  {
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  sub_1000E3914(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E82E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v10[0] = &off_10018F4E0;
  v10[1] = a1;
  uint64_t v11 = v10;
  v8[0] = &off_10018F560;
  v8[1] = a1;
  uint64_t v9 = v8;
  sub_1000E81CC(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 976, a2 + 600);
  uint64_t v3 = v9;
  if (v9 == v8)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = v11;
  if (v11 == v10)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v10;
    goto LABEL_10;
  }

  if (v11)
  {
    uint64_t v6 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  *(void *)(a1 + 360) = 0LL;
  *(_DWORD *)(a1 + 36_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  return a1;
}

void sub_1000E83D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v19 = a13;
  if (a13 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  uint64_t v21 = a17;
  if (a17 == &a14)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *sub_1000E8448(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F4E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E847C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F4E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E8498(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1000C1278(**(void **)(a1 + 8) + 1384LL, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1000E84B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E84EC()
{
}

void *sub_1000E8500(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F560;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E8534(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F560;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E8550(uint64_t a1)
{
  return sub_1000E85A0((uint64_t **)(a1 + 8));
}

uint64_t sub_1000E8558(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E8594()
{
}

uint64_t sub_1000E85A0(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v4 = *a1;
  uint64_t v2 = *(void *)(v1 + 1440);
  if (!v2) {
    sub_100014B10();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v2 + 48LL))(v2, &v4);
}

void *sub_1000E85E8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F5E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E861C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F5E0;
  a2[1] = v2;
  return result;
}

void sub_1000E8638(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_1000E864C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E8688()
{
}

void sub_1000E8694(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if ((*(_DWORD *)(a2 + 368) & 1) == 0)
  {
    uint64_t v7 = (unsigned int *)(a2 + 368);
    if ((a4 & 3) == 1LL)
    {
      uint64_t v8 = (char *)(a1 + 888);
      std::mutex::lock((std::mutex *)(a1 + 888));
      uint64_t v9 = operator new(0x20uLL);
      v9[2] = a2;
      void v9[3] = a3;
      uint64_t v10 = *(void *)(a1 + 952);
      *uint64_t v9 = v10;
      v9[1] = a1 + 952;
      *(void *)(v10 + _Block_object_dispose((const void *)(v2 - 120), 8) = v9;
      *(void *)(a1 + 952) = v9;
      ++*(void *)(a1 + 968);
      do
        unsigned int v11 = __ldaxr(v7);
      while (__stlxr(v11 | 4, v7));
      uint64_t v12 = sub_10011E5C4(a2);
      std::mutex::lock((std::mutex *)v12);
      uint64_t v13 = sub_10011E684(a2);
      std::condition_variable::notify_all((std::condition_variable *)v13);
      std::mutex::unlock((std::mutex *)v12);
LABEL_20:
      std::mutex::unlock((std::mutex *)v8);
      return;
    }

    sub_1000E8840(a1, a3);
    sub_1000C1AC8((unint64_t *)(a2 + 360));
    do
      unsigned int v14 = __ldaxr(v7);
    while (__stlxr(v14 | 1, v7));
    if ((v14 & 2) == 0) {
      sub_1000E1310(a1, a2);
    }
    uint64_t v15 = (unint64_t *)(a1 + 608);
    do
    {
      unint64_t v16 = __ldaxr(v15);
      unint64_t v17 = v16 - 1;
    }

    while (__stlxr(v17, v15));
    if (!v17)
    {
      if (atomic_load((unint64_t *)(a1 + 616)))
      {
        std::mutex::lock((std::mutex *)(a1 + 624));
        std::mutex::unlock((std::mutex *)(a1 + 624));
      }
    }

    uint64_t v20 = (unint64_t *)(a1 + 592);
    if (atomic_load(v20))
    {
      uint64_t v8 = sub_10011E5C4(a2);
      std::mutex::lock((std::mutex *)v8);
      if (atomic_load(v20))
      {
        uint64_t v23 = sub_10011E684(a2);
        std::condition_variable::notify_all((std::condition_variable *)v23);
      }

      goto LABEL_20;
    }
  }

void sub_1000E8814(_Unwind_Exception *a1)
{
}

void sub_1000E8840(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 776);
  std::mutex::lock((std::mutex *)(a1 + 776));
  sub_10004D090(a1 + 752, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 840));
  std::mutex::unlock(v3);
}

void sub_1000E8890(_Unwind_Exception *a1)
{
}

void *sub_1000E88AC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F670;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E88E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F670;
  a2[1] = v2;
  return result;
}

void sub_1000E88FC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
}

uint64_t sub_1000E8908(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000E8944()
{
}

void sub_1000E8950(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 456);
  if (v3 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(a1 + 584);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8LL;
      if (v7 + v6 >= v8) {
        return;
      }
    }

    if ((v6 & 0x8000000000000000LL) == 0)
    {
      uint64_t v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        unint64_t v10 = __ldaxr(v9);
        if (v10 != a2) {
          break;
        }
        if (!__stlxr(0LL, v9))
        {
          sub_1000E1B60(a1, a2, 1uLL, a3);
          sub_1000E1310(a1, a2);
          return;
        }
      }

      __clrex();
    }
  }

void *sub_1000E8A00(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10018F700;
  result[1] = v3;
  return result;
}

uint64_t sub_1000E8A34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10018F700;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000E8A50(uint64_t a1, uint64_t a2)
{
  return sub_1000E8AA0((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_1000E8A58(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000E8A94()
{
  return &off_10018F760;
}

uint64_t sub_1000E8AA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 24);
  v12[0] = off_10018B4F8;
  v12[1] = v4;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 16) + 72LL))(&v13);
  if (*(_BYTE *)(a2 + 113)) {
    sub_1000C446C(v3, (uint64_t)v12, *(void *)(a2 + 8) / *(void *)(v3 + 80), 0, 0, &v11);
  }
  else {
    unint64_t v11 = 0LL;
  }
  if (v11 && !*(_BYTE *)(v11 + 520))
  {
    if (*(_BYTE *)(v11 + 400)) {
      uint64_t v5 = v11 + 40;
    }
    else {
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = sub_1000CCC54(a2, (uint64_t)v12, v5, *(unsigned int *)(v3 + 20));
  sub_1000C0F7C(&v11);
  v12[0] = off_10018B4F8;
  uint64_t v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return v6;
}

void sub_1000E8BBC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E8BEC(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v1 = std::__thread_local_data();
  uint64_t v2 = *(const void **)v7;
  *(void *)uint64_t v7 = 0LL;
  pthread_setspecific(v1->__key_, v2);
  uint64_t v3 = *(void *)(v7 + 8);
  sub_100014938((uint64_t)v8, v7 + 16);
  sub_1000C3D3C(v3, (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  sub_1000E8CF8(&v7);
  return 0LL;
}

void sub_1000E8CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  sub_1000E8CF8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000E8CF8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 == (void *)(v2 + 16))
    {
      uint64_t v4 = 4LL;
      uint64_t v3 = (void *)(v2 + 16);
    }

    else
    {
      if (!v3)
      {
LABEL_7:
        sub_1000E8D68((std::__thread_struct **)v2, 0LL);
        operator delete((void *)v2);
        return a1;
      }

      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }

  return a1;
}

void sub_1000E8D68(std::__thread_struct **a1, std::__thread_struct *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    std::__thread_struct::~__thread_struct(v3);
    operator delete(v4);
  }

_WORD *sub_1000E8D94(_WORD *result, int a2)
{
  void *result = 0;
  if (a2)
  {
    __int16 v2 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_1001756D8;
    exception[1] = "total_segments_t";
    *((_WORD *)exception + 16) = v2;
  }

  return result;
}

uint64_t sub_1000E8E00(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018EC10;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E8E68(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E8E7C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018E9F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000E8EE4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E8EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[0] = a3;
  v14[1] = a4;
  uint64_t result = sub_1000C5100(a1, a2, (uint64_t)v12);
  while (v12[0] != v13[3] || v12[1] != v13[4])
  {
    v7[0] = (*(void *)(*(void *)(v13[0] + 56LL) + 16LL * v13[1] + 8) & 0x7FFFFFFFFFFFFFLL)
          * *(unsigned int *)(*(void *)(v13[0] + 8LL) + 20LL);
    if (v7[0]) {
      sub_1000E9000((uint64_t)v14, v7);
    }
    sub_1000C5184(a1, v13, (uint64_t)v7);
    while (v7[0] != v10 || v7[1] != v11)
    {
      uint64_t v6 = (*(void *)(*(void *)(v8 + 56) + 16 * v9 + 8) & 0x7FFFFFFFFFFFFFLL)
         * *(unsigned int *)(*(void *)(v8 + 8) + 20LL);
      if (v6) {
        sub_1000E9000((uint64_t)v14, (unint64_t *)&v6);
      }
      sub_1000C20C0((uint64_t)v7);
    }

    uint64_t result = sub_1000C1FA0((uint64_t)v12);
  }

  return result;
}

uint64_t sub_1000E9000(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = sub_1000E51C8(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
  char v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      __int128 v5 = v4;
      char v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      __int128 v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  return a1;
}

void sub_1000E9068(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *((void *)a3 + 1);
  if (v4 != v5)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[2];
    uint64_t v12 = v4 + 1;
    if (v4 + 1 != v5)
    {
      unint64_t v13 = v10 + v11 * v12;
      uint64_t v14 = a2[1];
      do
      {
        if (v10 + v14 * v11 < v13)
        {
          uint64_t v4 = v12;
          uint64_t v14 = v12;
        }

        ++v12;
        v13 += v11;
      }

      while (v5 != v12);
    }

    std::mutex::lock((std::mutex *)(a1 + 8));
    __int128 v18 = *(_OWORD *)a2;
    uint64_t v19 = a2[2];
    __int128 v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    sub_1000E917C((uint64_t *)(a1 + 72), &v18, (uint64_t)&v16);
    unint64_t v15 = v10 + v4 * v11;
    if (v15 >= *(void *)(a1 + 96)) {
      *(void *)(a1 + 96) = *(void *)a1 + v15;
    }
    sub_1000CFB64((void *)a1, a4);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }

void sub_1000E9168(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000E917C(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (v3 != *(void *)(a3 + 8))
  {
    BOOL v6 = (uint64_t **)result;
    uint64_t v7 = result + 1;
    do
    {
      uint64_t v8 = *a2 + a2[2] * v3;
      uint64_t result = sub_1000E51C8(v6, v7, (unint64_t *)&v8, &v8);
      uint64_t v3 = a2[1] + 1LL;
      a2[1] = v3;
    }

    while (v3 != *(void *)(a3 + 8));
  }

  return result;
}

uint64_t ****sub_1000E9208(uint64_t ****result)
{
  uint64_t v1 = **result;
  __int16 v2 = *v1;
  if (*((_DWORD *)*v1 + 11) != 1)
  {
    v2[8] = sub_100120D7C();
    v2[9] = v3;
    uint64_t result = (uint64_t ****)sub_1000D03A0((uint64_t)(v2 + 4), v2[2]);
    *(_DWORD *)v1[1] = (_DWORD)result;
  }

  return result;
}

uint64_t sub_1000E9258(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000E9260@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void *))(*a1 + 8 * a2))(a1);
}

  ;
}

void sub_1000E933C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E9458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E95C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  _Unwind_Resume(a1);
}

AAByteStream *sub_1000E9680@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 176LL))(*a1);
  if (v3 < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    BOOL v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"AEAHelper: Invalid file descriptor.", 0x16u);
  }

  AEAContext v7 = AAFileStreamOpenWithFD(v3, 0);
  sub_1000EE6D8(&v8, &v7);
  sub_1000EE7AC(&v7, &v8);
  sub_1000EEA24(a2, &v7);
  sub_1000EE7B0(&v7);
  return sub_1000EE6DC(&v8);
}

void sub_1000E9724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AEAContext a9, AAByteStream a10)
{
}

void sub_1000E9748(AEAAuthData *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = operator new[](0x20uLL);
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  v23[0] = 0LL;
  v23[1] = 0LL;
  uint64_t v24 = 0LL;
  char v25 = 1;
  sub_100006174(__p, "encryption_key");
  sub_1000E9BD8(a1, (uint64_t)__p, (uint64_t)&__dst);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (!v30)
  {
    sub_100006174(v21, "com.apple.wkms.fcs-key-url");
    sub_1000E9BD8(a1, (uint64_t)v21, (uint64_t)&__dst);
    int v9 = *(unsigned __int8 *)(sub_1000E9EA0((uint64_t)v23, &__dst) + 24);
    if (v30 && SHIBYTE(v29) < 0) {
      operator delete((void *)__dst);
    }
    if (v22 < 0)
    {
      operator delete(v21[0]);
      if (v9) {
        goto LABEL_21;
      }
    }

    else if (v9)
    {
LABEL_21:
      if (SHIBYTE(v24) < 0)
      {
        sub_10000AD88(&__dst, v23[0], (unint64_t)v23[1]);
      }

      else
      {
        __int128 __dst = *(_OWORD *)v23;
        uint64_t v29 = v24;
      }

      *(_OWORD *)a2 = __dst;
      *(void *)(a2 + 16) = v29;
      *(void *)(a2 + 24) = a1;
      int v11 = 3;
LABEL_46:
      *(_DWORD *)(a2 + sub_100006224(v6 - 32) = v11;
      goto LABEL_47;
    }

    sub_100006174(v19, "saksKey");
    sub_1000E9BD8(a1, (uint64_t)v19, (uint64_t)&__dst);
    int v10 = *(unsigned __int8 *)(sub_1000E9EA0((uint64_t)v23, &__dst) + 24);
    if (v30 && SHIBYTE(v29) < 0) {
      operator delete((void *)__dst);
    }
    if (v20 < 0)
    {
      operator delete(v19[0]);
      if (v10) {
        goto LABEL_29;
      }
    }

    else if (v10)
    {
LABEL_29:
      if (SHIBYTE(v24) < 0)
      {
        sub_10000AD88(&__dst, v23[0], (unint64_t)v23[1]);
      }

      else
      {
        __int128 __dst = *(_OWORD *)v23;
        uint64_t v29 = v24;
      }

      *(_OWORD *)a2 = __dst;
      *(void *)(a2 + 16) = v29;
      int v11 = 1;
      goto LABEL_46;
    }

    sub_100006174(v17, "com.apple.knox.url");
    sub_1000E9BD8(a1, (uint64_t)v17, (uint64_t)&__dst);
    int v12 = *(unsigned __int8 *)(sub_1000E9EA0((uint64_t)v23, &__dst) + 24);
    if (v30 && SHIBYTE(v29) < 0) {
      operator delete((void *)__dst);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (!v12)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      __int128 v16 = std::generic_category();
      exception[1] = 22LL;
      exception[2] = v16;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      exception[7] = "Missing Expected AUTH DATA in AEA.";
    }

    if (SHIBYTE(v24) < 0)
    {
      sub_10000AD88(&__dst, v23[0], (unint64_t)v23[1]);
    }

    else
    {
      __int128 __dst = *(_OWORD *)v23;
      uint64_t v29 = v24;
    }

    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v29;
    int v11 = 2;
    goto LABEL_46;
  }

  if (v29 >= 0) {
    p_dst = (const char *)&__dst;
  }
  else {
    p_dst = (const char *)__dst;
  }
  if (strlen(p_dst) != 64)
  {
    AEAContext v7 = "Key is not 32 bytes size.";
LABEL_54:
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    void *v13 = &off_100196FC8;
    uint64_t v14 = std::generic_category();
    v13[1] = 22LL;
    void v13[2] = v14;
    *((_BYTE *)v13 + 24) = 0;
    *((_BYTE *)v13 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v13[7] = v7;
  }

  uint64_t v6 = 0LL;
  char v32 = 0;
  AEAContext v7 = "Key is not hexadecimal number.";
  do
  {
    *(_WORD *)__str = *(_WORD *)&p_dst[2 * v6];
    char v8 = strtol(__str, 0LL, 16);
    *((_BYTE *)v4 + v6) = v8;
    ++v6;
  }

  while (v6 != 32);
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + sub_100006224(v6 - 32) = 0;
  uint64_t v4 = 0LL;
LABEL_47:
  if (v25 && SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  if (v4) {
    operator delete[](v4);
  }
}

void sub_1000E9B20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, char a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a33)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
  }

  operator delete[](v42);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000E9BD8@<X0>(AEAAuthData *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char *)valloc(0x800uLL);
  if (!v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v23 = std::bad_alloc::bad_alloc(exception);
  }

  __s = (char *)&off_10018F780;
  p_s = &__s;
  __s2 = v6;
  sub_100043B68((uint64_t)&v31, (uint64_t)&__s);
  AEAContext v7 = p_s;
  if (p_s == &__s)
  {
    uint64_t v8 = 4LL;
    AEAContext v7 = &__s;
  }

  else
  {
    if (!p_s) {
      goto LABEL_7;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))&(*v7)[8 * v8])();
LABEL_7:
  int v9 = sub_1000EEA54(a1);
  if (!v9)
  {
LABEL_15:
    uint64_t v14 = std::generic_category();
    uint64_t v15 = 22LL;
    goto LABEL_16;
  }

  uint32_t v10 = 0;
  int v11 = __s2;
  while (1)
  {
    bzero(v11, 0x800uLL);
    if (sub_1000EEA5C(a1, v10, 0x800uLL, v11, 0LL, 0LL, 0LL, &v26))
    {
      uint64_t v14 = std::generic_category();
      *(_DWORD *)a3 = 1;
      goto LABEL_18;
    }

    if (*(char *)(a2 + 23) < 0)
    {
      unint64_t v13 = *(const char **)a2;
      size_t v12 = *(void *)(a2 + 8);
    }

    else
    {
      size_t v12 = *(unsigned __int8 *)(a2 + 23);
      unint64_t v13 = (const char *)a2;
    }

    int v11 = __s2;
    if (!strncmp(v13, __s2, v12)) {
      break;
    }
    if (v9 == ++v10) {
      goto LABEL_15;
    }
  }

  if (v26 < 0x100000)
  {
    uint64_t v17 = (char *)valloc(v26 + 1);
    if (!v17)
    {
      uint64_t v24 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      char v25 = std::bad_alloc::bad_alloc(v24);
    }

    v32[0] = &off_10018F780;
    unint64_t v33 = v32;
    __s = v17;
    sub_100043B68((uint64_t)&v28, (uint64_t)v32);
    char v18 = v33;
    if (v33 == v32)
    {
      uint64_t v19 = 4LL;
      char v18 = v32;
    }

    else
    {
      if (!v33)
      {
LABEL_28:
        bzero(__s, v26 + 1);
        if (sub_1000EEA5C(a1, v10, 0x800uLL, __s2, 0LL, v26, (uint8_t *)__s, 0LL))
        {
          char v20 = std::generic_category();
          char v21 = 0;
          *(_DWORD *)a3 = 1;
          *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v20;
        }

        else
        {
          sub_100006174((void *)a3, __s);
          char v21 = 1;
        }

        *(_BYTE *)(a3 + 24) = v21;
        sub_100043BCC((uint64_t *)&__s);
        return sub_100043BCC((uint64_t *)&__s2);
      }

      uint64_t v19 = 5LL;
    }

    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_28;
  }

  uint64_t v14 = std::generic_category();
  uint64_t v15 = 84LL;
LABEL_16:
  *(void *)a3 = v15;
LABEL_18:
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v14;
  *(_BYTE *)(a3 + 24) = 0;
  return sub_100043BCC((uint64_t *)&__s2);
}

void sub_1000E9E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100043BCC((uint64_t *)va);
  sub_100043BCC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E9EA0(uint64_t a1, __int128 *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    int v4 = *(char *)(a1 + 23);
    if (*((_BYTE *)a2 + 24))
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      __int128 v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }

    else
    {
      if (v4 < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 24) = 0;
    }
  }

  else if (*((_BYTE *)a2 + 24))
  {
    __int128 v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  else
  {
    *(_OWORD *)a1 = *a2;
  }

  return a1;
}

AEAAuthData *sub_1000E9F4C(AEAAuthData *a1, void *a2)
{
  return a1;
}

void sub_1000E9F84(_Unwind_Exception *a1)
{
}

void *sub_1000E9FA4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10018F780;
  return result;
}

void sub_1000E9FC8(uint64_t a1, void *a2)
{
  *a2 = &off_10018F780;
}

void sub_1000E9FE0(uint64_t a1, void **a2)
{
}

uint64_t sub_1000E9FE8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000EA024()
{
  return &off_10018F7E0;
}

void sub_1000EA030()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void sub_1000EA064()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"User data is not supported in this image format", 0x2Du);
}

void *sub_1000EA098(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (*(void *)(a2 + 8) >= *(void *)a2)
      {
LABEL_4:
        if ((v4 & 2) != 0) {
          __int128 v5 = "[";
        }
        else {
          __int128 v5 = "(";
        }
        sub_100006174(&v26, v5);
        if ((v28 & 0x80u) == 0) {
          __int128 v6 = &v26;
        }
        else {
          __int128 v6 = v26;
        }
        if ((v28 & 0x80u) == 0) {
          uint64_t v7 = v28;
        }
        else {
          uint64_t v7 = v27;
        }
        uint64_t v8 = sub_10000552C(a1, (uint64_t)v6, v7);
        int v9 = (void *)std::ostream::operator<<(v8, *(void *)a2);
        uint32_t v10 = sub_10000552C(v9, (uint64_t)",", 1LL);
        int v11 = (void *)std::ostream::operator<<(v10, *(void *)(a2 + 8));
        if ((*(_BYTE *)(a2 + 16) & 1) != 0) {
          size_t v12 = "]";
        }
        else {
          size_t v12 = ")";
        }
        sub_100006174(&__p, v12);
        if ((v25 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v25 & 0x80u) == 0) {
          uint64_t v14 = v25;
        }
        else {
          uint64_t v14 = v24;
        }
        goto LABEL_45;
      }
    }

    else if (*(void *)a2 < *(void *)(a2 + 8))
    {
      goto LABEL_4;
    }
  }

  else
  {
    unint64_t v15 = *(void *)(a2 + 8);
    if (*(void *)a2 < v15 && *(void *)a2 + 1LL < v15) {
      goto LABEL_4;
    }
  }

  if ((v4 & 2) != 0) {
    uint64_t v17 = "[";
  }
  else {
    uint64_t v17 = "(";
  }
  sub_100006174(&v26, v17);
  if ((v28 & 0x80u) == 0) {
    char v18 = &v26;
  }
  else {
    char v18 = v26;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v19 = v28;
  }
  else {
    uint64_t v19 = v27;
  }
  int v11 = sub_10000552C(a1, (uint64_t)v18, v19);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0) {
    char v20 = "]";
  }
  else {
    char v20 = ")";
  }
  sub_100006174(&__p, v20);
  if ((v25 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v14 = v25;
  }
  else {
    uint64_t v14 = v24;
  }
LABEL_45:
  char v21 = sub_10000552C(v11, (uint64_t)p_p, v14);
  return v21;
}

void sub_1000EA274( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EA2B8(uint64_t a1, void *a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  return a1;
}

BOOL sub_1000EA308(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1000EA348(*(void *)a1, *(void *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return result;
}

BOOL sub_1000EA348(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(void *)v2 != *(void *)v3) {
    return 0LL;
  }
  BOOL result = sub_10000E514((unint64_t *)(v2 + 8), (unint64_t *)(v3 + 8));
  if (result)
  {
    if (*(_DWORD *)(v2 + 48) == *(_DWORD *)(v3 + 48)) {
      return *(void *)(a1 + 40) == *(void *)(a2 + 40);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_1000EA3C0(uint64_t a1, uint64_t a2)
{
  return !sub_1000EA348(*(void *)a1, *(void *)a2) || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40);
}

void *sub_1000EA408@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = *(void **)a1;
  unint64_t v5 = result[5];
  unint64_t v6 = result[3];
  *(void *)a2 = v5;
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = v6;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 3;
  if ((*(_BYTE *)(*(void *)result[1] + 8LL) & 1) != 0)
  {
    BOOL result = (void *)sub_1000BE308();
    if ((_DWORD)result)
    {
      *(void *)uint64_t v7 = "DiskImage::const_extents_iterator_t::make_val() const";
      *(void *)&v7[8] = 45LL;
      *(_DWORD *)&v7[16] = 2;
      sub_100047598(v8, (__int128 *)v7);
      sub_10000552C(&v9, (uint64_t)"Disk image is terminated, skipping ...", 38LL);
      std::ostream::~ostream(&v9, off_100179560);
      sub_1000493A8((uint64_t)v8);
      return (void *)std::ios::~ios(&v10);
    }
  }

  else if (v5 < v6 && a1[8] != 3)
  {
    BOOL result = (*(void *(**)(_BYTE *__return_ptr))*result)(v8);
    if (*(_DWORD *)&v8[24] != 3 && (a1[10] & (1 << v8[24])) == 0)
    {
      do
      {
        BOOL result = *(void **)a1;
        if (*(void *)(*(void *)a1 + 40LL) >= (unint64_t)(*(_BYTE *)(*(void *)a1 + 32LL) & 1)
                                                + *(void *)(*(void *)a1 + 24LL))
          break;
        result[5] = (v8[16] & 1) + *(void *)&v8[8];
        BOOL result = (*(void *(**)(_BYTE *__return_ptr))*result)(v7);
        *(_OWORD *)&v8[12] = *(_OWORD *)&v7[12];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
        if (*(_DWORD *)&v7[24] == 3) {
          break;
        }
      }

      while ((a1[10] & (1 << v7[24])) == 0);
    }

    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v8[12];
  }

  return result;
}

void sub_1000EA59C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v15 = *(void *)(*(void *)v14 + 24LL);
    *(void *)uint64_t v13 = *(void *)(*(void *)v14 + 40LL);
    *(void *)(v13 + _Block_object_dispose((const void *)(v2 - 120), 8) = v15;
    *(_BYTE *)(v13 + 16) = 2;
    *(_DWORD *)(v13 + 24) = 3;
    __cxa_end_catch();
    JUMPOUT(0x1000EA588LL);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_1000EA5F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (a1[3] & 1) + a1[2];
  *(void *)(v2 + 40) = v3;
  if (v3 < (unint64_t)(*(_BYTE *)(v2 + 32) & 1) + *(void *)(v2 + 24))
  {
    sub_1000EA408(a1, (uint64_t)v5);
    *(_OWORD *)(a1 + 1) = v5[0];
    *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)v5 + 12);
  }

  return a1;
}

uint64_t *sub_1000EA664@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)*a1 + 8LL))((void *)a2);
  *(_OWORD *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_DWORD *)(a2 + 40) = *((_DWORD *)a1 + 10);
  return sub_1000EA5F0(a1);
}

void sub_1000EA6B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EA6DC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  *(_DWORD *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + sub_100006224(v6 - 32) = 0LL;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + sub_100006224(v6 - 32) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40LL))(v6);
    uint64_t v5 = *(void *)(a1 + 32);
  }

  *(void *)(a1 + 40) = v5;
  sub_100079B5C((void *)(a1 + 56), a2 + 56);
  return a1;
}

uint64_t sub_1000EA750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = qword_1001A3B40;
  *(void *)a2 = qword_1001A3B40;
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  *(_BYTE *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  sub_10001321C(a1, (uint64_t)v12);
  sub_1000132BC(a1, (uint64_t)v10);
  while (!sub_1000EA348(v12[0], v10[0]) || v13 != v11)
  {
    sub_1000EA664(v12, (uint64_t)&v8);
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v9 + 12);
    uint64_t v5 = v8;
    uint64_t v8 = 0LL;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
    }
  }

  uint64_t v6 = v10[0];
  v10[0] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t result = v12[0];
  v12[0] = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_1000EA834( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *(void *)(v15 - 64);
  *(void *)(v15 - 64) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24LL))(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EA87C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24LL))(a3);
  if (v7 != (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24LL))(a4))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)&__p);
    sub_10000552C(&__p, (uint64_t)"Block size mismatch between source (", 36LL);
    std::ostream::operator<<(&__p, v7);
    sub_10000552C(&__p, (uint64_t)") and dest disk image (", 23LL);
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24LL))(a4);
    std::ostream::operator<<(&__p, v65);
    sub_10000552C(&__p, (uint64_t)")", 1LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)&__p, 0xFFFFFFED);
  }

  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a3 + 72LL))(v107, a3);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a4 + 72LL))(v106, a4);
  unint64_t v8 = v106[3] / v7 * v7;
  uint64_t v9 = sub_1000465AC();
  uint64_t v10 = v9;
  if (!v8) {
    unint64_t v8 = (unint64_t)v9[2] / v7 * v7;
  }
  unint64_t v11 = v8;
  if (v107[0]) {
    unint64_t v11 = (v8 + (v7 + v107[0] - 1) / v7 * v7 - 1) / ((v7 + v107[0] - 1) / v7 * v7) * (v7 + v107[0] - 1) / v7 * v7;
  }
  uint64_t v12 = v107[2];
  int v13 = *((_DWORD *)v9 + 2);
  if (v13 == 1)
  {
    int v14 = (*v9)();
  }

  else
  {
    if (v13) {
      sub_100026264();
    }
    int v14 = *(_DWORD *)v9;
  }

  unint64_t v15 = v12 + v11;
  unsigned int v16 = v14 << (*((_DWORD *)v10 + 8) == 2);
  if (v16 <= 1) {
    unsigned int v17 = 1;
  }
  else {
    unsigned int v17 = v16;
  }
  sub_1000ED9D0((uint64_t)v110, v17);
  sub_1000FFFE4((uint64_t)v109, v15, v17, 0LL);
  unint64_t v18 = v8 / v7;
  do
  {
    *(void *)&__int128 __p = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 136LL))(a3);
    v108[0] = (dispatch_group_t)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 136LL))(a4);
    sub_1000EB39C((uint64_t)v110, (uint64_t *)&__p, (uint64_t *)v108);
    dispatch_group_t v19 = v108[0];
    v108[0] = 0LL;
    if (v19) {
      (*(void (**)(dispatch_group_t))(*(void *)v19 + 40LL))(v19);
    }
    uint64_t v20 = __p;
    *(void *)&__int128 __p = 0LL;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 40LL))(v20);
    }
    --v17;
  }

  while (v17);
  unsigned int v105 = 0;
  sub_100006174(&__p, "DI Conversion Queue");
  sub_10004D52C(__dst);
  if (SHIBYTE(v99) < 0) {
    operator delete((void *)__p);
  }
  sub_10004D810((uint64_t)__dst, 0LL, (uint64_t)v108);
  char v94 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)";
  *(void *)&__int128 v95 = 7LL;
  DWORD2(v95) = 0;
  sub_1000EB4AC(&__p, (__int128 *)&v94);
  sub_10000552C(&v100, (uint64_t)"Conversion started", 18LL);
  std::ostream::~ostream(&v100, off_10018F928);
  sub_1000EC4E4((uint64_t)&__p);
  std::ios::~ios(v101);
  sub_1000EA2B8((uint64_t)&v94, a1);
  while (1)
  {
    if (!sub_1000EA3C0((uint64_t)&v94, a2))
    {
      int v47 = 5;
      goto LABEL_107;
    }

    __int128 v92 = v95;
    uint64_t v93 = v96;
    if (v97 == 1) {
      break;
    }
    if (v97 == 2)
    {
      sub_1000EB594((uint64_t)v110, &v88);
      uint64_t v21 = v92;
      if ((v93 & 2) == 0) {
        uint64_t v21 = v92 + 1;
      }
      uint64_t v77 = v21;
      uint64_t v78 = *((void *)&v92 + 1) + (v93 & 1) - v21;
      uint64_t v22 = sub_100045644(*(void **)(v88 + 8));
      uint64_t v23 = v22;
      if ((_DWORD)v22)
      {
        uint64_t v75 = v88;
        int64_t v76 = v89;
        if (v89)
        {
          p_shared_owners = (unint64_t *)&v89->__shared_owners_;
          do
            unint64_t v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }

        do
        {
          if (__ldaxr(&v105))
          {
            int v27 = 0;
            __clrex();
            goto LABEL_74;
          }
        }

        while (__stlxr(v22, &v105));
        int v27 = 1;
        if (v75) {
          sub_1000144E8(*(void **)(v75 + 8));
        }
LABEL_74:
        unint64_t v48 = v76;
        if (!v76) {
          goto LABEL_78;
        }
        uint64_t v49 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
          if (v27)
          {
LABEL_79:
            *(void *)&__int128 v73 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)";
            *((void *)&v73 + 1) = 7LL;
            int v74 = 16;
            sub_10002A1D4(&__p, &v73);
            sub_10000552C(&v100, (uint64_t)"Conversion: unmap error ", 24LL);
            std::ostream::operator<<(&v100, v23);
            std::ostream::~ostream(&v100, off_1001757D8);
            sub_10002A420((uint64_t)&__p);
            std::ios::~ios(v101);
          }
        }

        else
        {
LABEL_78:
          if (v27) {
            goto LABEL_79;
          }
        }

        int v47 = 1;
      }

      else
      {
        int v47 = 8;
      }

      unint64_t v51 = v89;
      if (v89)
      {
        uint64_t v52 = (unint64_t *)&v89->__shared_owners_;
        do
          unint64_t v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }

      if ((_DWORD)v23) {
        goto LABEL_107;
      }
      goto LABEL_87;
    }

    if (v97 == 3)
    {
      uint64_t v71 = 0LL;
      uint64_t v72 = 0LL;
      do
      {
        if (__ldaxr(&v105))
        {
          int v56 = 0;
          __clrex();
          goto LABEL_99;
        }
      }

      while (__stlxr(0xFFFFFFF2, &v105));
      int v56 = 1;
      if (v71) {
        sub_1000144E8(*(void **)(v71 + 8));
      }
LABEL_99:
      uint64_t v57 = v72;
      if (v72)
      {
        uint64_t v58 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }

      if (v56)
      {
        *(void *)&__int128 v73 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)";
        *((void *)&v73 + 1) = 7LL;
        int v74 = 16;
        sub_1000EC238(&__p, &v73);
        sub_10000552C(&v100, (uint64_t)"Conversion: extents enumeration error ", 38LL);
        std::ostream::operator<<(&v100, 4294967282LL);
        std::ostream::~ostream(&v100, off_10018FF88);
        sub_1000ED5E8((uint64_t)&__p);
        std::ios::~ios(v101);
      }

      int v47 = 1;
      goto LABEL_107;
    }

LABEL_87:
    sub_1000EA664((uint64_t *)&v94, (uint64_t)v70);
    uint64_t v54 = v70[0];
    v70[0] = 0LL;
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 24LL))(v54);
    }
  }

  unint64_t v28 = v92;
  if ((v93 & 2) == 0) {
    unint64_t v28 = v92 + 1;
  }
  while (!atomic_load(&v105))
  {
    unint64_t v30 = v28 + v18;
    v90[0] = v28;
    v90[1] = v28 + v18;
    char v91 = 2;
    sub_100063880(v90, (unint64_t *)&v92, (uint64_t)&__p);
    sub_100100090((uint64_t)v109, &v73);
    sub_1000EB594((uint64_t)v110, &v88);
    v79[0] = _NSConcreteStackBlock;
    v79[1] = 1174405120LL;
    v79[2] = sub_1000EB6C8;
    v79[3] = &unk_10018F818;
    __int128 v80 = __p;
    uint64_t v81 = v99;
    unint64_t v82 = v7;
    __int128 v83 = v73;
    if (*((void *)&v73 + 1))
    {
      uint64_t v31 = (unint64_t *)(*((void *)&v73 + 1) + 8LL);
      do
        unint64_t v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }

    unint64_t v84 = v15;
    uint64_t v85 = v88;
    uint64_t v86 = v89;
    if (v89)
    {
      unint64_t v33 = (unint64_t *)&v89->__shared_owners_;
      do
        unint64_t v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }

    unint64_t v87 = &v105;
    sub_10004D630(v108, v79);
    unint64_t v35 = v86;
    if (v86)
    {
      uint64_t v36 = (unint64_t *)&v86->__shared_owners_;
      do
        unint64_t v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }

    unint64_t v38 = (std::__shared_weak_count *)*((void *)&v83 + 1);
    if (*((void *)&v83 + 1))
    {
      uint64_t v39 = (unint64_t *)(*((void *)&v83 + 1) + 8LL);
      do
        unint64_t v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }

    unint64_t v41 = v89;
    if (v89)
    {
      uint64_t v42 = (unint64_t *)&v89->__shared_owners_;
      do
        unint64_t v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }

    uint64_t v44 = (std::__shared_weak_count *)*((void *)&v73 + 1);
    if (*((void *)&v73 + 1))
    {
      uint64_t v45 = (unint64_t *)(*((void *)&v73 + 1) + 8LL);
      do
        unint64_t v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }

    unint64_t v28 = v30;
  }

  int v47 = 12;
LABEL_107:
  __int128 v60 = v94;
  char v94 = 0LL;
  if (v60) {
    (*(void (**)(char *))(*(void *)v60 + 24LL))(v60);
  }
  if (v47 == 5) {
    int v61 = 0;
  }
  else {
    int v61 = v47;
  }
  sub_10004D790(v108);
  *(void *)&__int128 __p = &v104;
  sub_10000F974((void ***)&__p);
  if (v103 < 0)
  {
    operator delete(__dst[0]);
    if (v61) {
      goto LABEL_116;
    }
    goto LABEL_117;
  }

  if (!v61) {
    goto LABEL_117;
  }
LABEL_116:
  if (v61 == 12)
  {
LABEL_117:
    if (atomic_load(&v105))
    {
      uint64_t v66 = __cxa_allocate_exception(0x40uLL);
      uint64_t v67 = atomic_load(&v105);
      void *v66 = &off_100196FC8;
      unint64_t v68 = std::generic_category();
      v66[1] = v67;
      v66[2] = v68;
      *((_BYTE *)v66 + 24) = 0;
      *((_BYTE *)v66 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
      v66[7] = "conversion failed";
    }
  }

  sub_10010008C(v109);
  return sub_1000EDA8C((uint64_t)v110);
}

void sub_1000EB1F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p)
{
}

void *sub_1000EB39C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x10uLL);
  uint64_t v7 = *a2;
  *a2 = 0LL;
  uint64_t v8 = *a3;
  *a3 = 0LL;
  unint64_t v9 = *(void *)(a1 + 24);
  *uint64_t v6 = v7;
  v6[1] = v8;
  uint64_t v10 = *(void **)(a1 + 16);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = ((uint64_t)v10 - v12) >> 3;
    uint64_t v14 = v9 - v12;
    uint64_t v15 = v14 >> 2;
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unsigned int v17 = (char *)sub_1000450A4(a1 + 24, v16);
    }
    else {
      unsigned int v17 = 0LL;
    }
    unint64_t v18 = &v17[8 * v13];
    dispatch_group_t v19 = &v17[8 * v16];
    *(void *)unint64_t v18 = v6;
    unint64_t v11 = v18 + 8;
    uint64_t v21 = *(char **)(a1 + 8);
    uint64_t v20 = *(char **)(a1 + 16);
    if (v20 != v21)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }

      while (v20 != v21);
      uint64_t v20 = *(char **)(a1 + 8);
    }

    *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v18;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v19;
    if (v20) {
      operator delete(v20);
    }
  }

  else
  {
    void *v10 = v6;
    unint64_t v11 = v10 + 1;
  }

  *(void *)(a1 + 16) = v11;
  uint64_t result = v11 - 1;
  ++*(_DWORD *)a1;
  return result;
}

void *sub_1000EB4AC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000EDB34((uint64_t)a1, a2);
  *a1 = off_10018F860;
  a1[45] = &off_10018F960;
  a1[46] = &off_10018F988;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018F860;
  a1[45] = off_10018F8E8;
  a1[46] = off_10018F910;
  return a1;
}

void sub_1000EB530(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EB554(uint64_t a1)
{
  return a1;
}

void sub_1000EB594(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(_BYTE *)(a1 + 144)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    sub_1000EB39C(a1, &v11, &v10);
    uint64_t v7 = v10;
    uint64_t v10 = 0LL;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
    }
    uint64_t v8 = v11;
    uint64_t v11 = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 40LL))(v8);
    }
    uint64_t v4 = *(void *)(a1 + 16);
  }

  else if (v5 == v4)
  {
    do
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 96), &__lk);
      uint64_t v4 = *(void *)(a1 + 16);
    }

    while (*(void *)(a1 + 8) == v4);
  }

  uint64_t v9 = *(void *)(v4 - 8);
  *(void *)(a1 + 16) = v4 - 8;
  sub_1000EDBB0(a2, v9, a1);
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1000EB680( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  uint64_t v13 = a9;
  a9 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 40LL))(v13);
  }
  sub_10012644C((uint64_t)&a9, &a10);
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_1000EB6C8(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = (*(void *)(a1 + 40) - v3 + (v2 & 1) + (int)(((v2 >> 1) & 1) - 1)) * v4;
  if ((v2 & 2) != 0) {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  uint64_t v7 = v6 * v4;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v106 = *(void *)(a1 + 64);
  __int128 v107 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  uint64_t v108 = v5;
  uint64_t v109 = v7;
  uint64_t v110 = v8;
  char v111 = 0;
  uint64_t v12 = *(uint64_t **)(a1 + 88);
  sub_10003DA2C(&v106, v118);
  sub_10003BD04((uint64_t)v122, (uint64_t)&v115);
  sub_10003BA04((uint64_t)v122, (uint64_t)v112);
  uint64_t v13 = sub_100005380(*v12);
  uint64_t v15 = v14;
  unint64_t v16 = v114;
  if (v114)
  {
    unsigned int v17 = (unint64_t *)&v114->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  dispatch_group_t v19 = v113;
  if (v113)
  {
    uint64_t v20 = (unint64_t *)&v113->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = v117;
  if (v117)
  {
    uint64_t v23 = (unint64_t *)&v117->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = (std::__shared_weak_count *)*((void *)&v115 + 1);
  if (*((void *)&v115 + 1))
  {
    size_t v26 = (unint64_t *)(*((void *)&v115 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  unint64_t v28 = v129;
  if (v129)
  {
    uint64_t v29 = (unint64_t *)&v129->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  uint64_t v31 = v128;
  if (v128)
  {
    unint64_t v32 = (unint64_t *)&v128->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  unint64_t v34 = v127;
  if (v127)
  {
    unint64_t v35 = (unint64_t *)&v127->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  unint64_t v37 = v126;
  if (v126)
  {
    unint64_t v38 = (unint64_t *)&v126->__shared_owners_;
    do
      unint64_t v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  unint64_t v40 = v125;
  if (v125)
  {
    unint64_t v41 = (unint64_t *)&v125->__shared_owners_;
    do
      unint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  unint64_t v43 = v123;
  if (v123)
  {
    uint64_t v44 = (unint64_t *)&v123->__shared_owners_;
    do
      unint64_t v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  if (v120 && v121 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v118);
  uint64_t v46 = *(void *)(a1 + 88);
  if (v13 < 0 && (_DWORD)v13)
  {
    uint64_t v87 = *(void *)(a1 + 96);
    v105[0] = *(void *)(a1 + 88);
    v105[1] = v87;
    if (v87)
    {
      uint64_t v88 = (unint64_t *)(v87 + 8);
      do
        unint64_t v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }

    __int128 v90 = *(unsigned int **)(a1 + 104);
    while (!__ldaxr(v90))
    {
      if (!__stlxr(v13, v90))
      {
        if (v105[0]) {
          sub_1000144E8(*(void **)(v105[0] + 8LL));
        }
        sub_100006224((uint64_t)v105);
        *(void *)&__int128 v115 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)_block_invoke";
        *((void *)&v115 + 1) = 7LL;
        int v116 = 16;
        sub_1000EBFFC(v118, &v115);
        sub_10000552C(&v124, (uint64_t)"Conversion: read error ", 23LL);
        std::ostream::operator<<(&v124, v13);
        sub_1000EC0A4((uint64_t)v118);
        goto LABEL_124;
      }
    }

    __clrex();
    int v97 = v105;
LABEL_152:
    sub_100006224((uint64_t)v97);
  }

  else
  {
    uint64_t v47 = v110;
    uint64_t v99 = v106 + v7 - v15;
    uint64_t v100 = v107;
    if (v107)
    {
      unint64_t v48 = (unint64_t *)&v107->__shared_owners_;
      do
        unint64_t v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }

    uint64_t v101 = v5;
    uint64_t v102 = v7;
    uint64_t v103 = v47 - (v7 - v15);
    char v104 = 0;
    sub_10003DA2C(&v99, v118);
    sub_10003BD04((uint64_t)v122, (uint64_t)&v115);
    sub_10003BA04((uint64_t)v122, (uint64_t)v112);
    uint64_t v50 = sub_1000062D4(*(void **)(v46 + 8));
    unint64_t v51 = v114;
    if (v114)
    {
      uint64_t v52 = (unint64_t *)&v114->__shared_owners_;
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

    uint64_t v54 = v113;
    if (v113)
    {
      __int128 v55 = (unint64_t *)&v113->__shared_owners_;
      do
        unint64_t v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }

    uint64_t v57 = v117;
    if (v117)
    {
      uint64_t v58 = (unint64_t *)&v117->__shared_owners_;
      do
        unint64_t v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }

    __int128 v60 = (std::__shared_weak_count *)*((void *)&v115 + 1);
    if (*((void *)&v115 + 1))
    {
      int v61 = (unint64_t *)(*((void *)&v115 + 1) + 8LL);
      do
        unint64_t v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }

    unint64_t v63 = v129;
    if (v129)
    {
      uint64_t v64 = (unint64_t *)&v129->__shared_owners_;
      do
        unint64_t v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }

    uint64_t v66 = v128;
    if (v128)
    {
      uint64_t v67 = (unint64_t *)&v128->__shared_owners_;
      do
        unint64_t v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }

    uint64_t v69 = v127;
    if (v127)
    {
      uint64_t v70 = (unint64_t *)&v127->__shared_owners_;
      do
        unint64_t v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }

    uint64_t v72 = v126;
    if (v126)
    {
      __int128 v73 = (unint64_t *)&v126->__shared_owners_;
      do
        unint64_t v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }

    uint64_t v75 = v125;
    if (v125)
    {
      int64_t v76 = (unint64_t *)&v125->__shared_owners_;
      do
        unint64_t v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }

    uint64_t v78 = v123;
    if (v123)
    {
      uint64_t v79 = (unint64_t *)&v123->__shared_owners_;
      do
        unint64_t v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }

    if (v120 && v121 != __p) {
      operator delete(__p);
    }
    sub_10000627C((uint64_t)v118);
    uint64_t v81 = v100;
    if (!v100) {
      goto LABEL_122;
    }
    unint64_t v82 = (unint64_t *)&v100->__shared_owners_;
    do
      unint64_t v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      if ((v50 & 0x8000000000000000LL) == 0) {
        goto LABEL_124;
      }
    }

    else
    {
LABEL_122:
      if ((v50 & 0x8000000000000000LL) == 0) {
        goto LABEL_124;
      }
    }

    if ((_DWORD)v50)
    {
      uint64_t v92 = *(void *)(a1 + 96);
      v98[0] = *(void *)(a1 + 88);
      v98[1] = v92;
      if (v92)
      {
        uint64_t v93 = (unint64_t *)(v92 + 8);
        do
          unint64_t v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }

      __int128 v95 = *(unsigned int **)(a1 + 104);
      do
      {
        if (__ldaxr(v95))
        {
          __clrex();
          int v97 = v98;
          goto LABEL_152;
        }
      }

      while (__stlxr(v50, v95));
      if (v98[0]) {
        sub_1000144E8(*(void **)(v98[0] + 8LL));
      }
      sub_100006224((uint64_t)v98);
      *(void *)&__int128 v115 = "convert(DiskImage::const_extents_iterator_t, DiskImage::const_extents_iterator_t, DiskImage &, DiskImage &)_block_invoke";
      *((void *)&v115 + 1) = 7LL;
      int v116 = 16;
      sub_1000EC0E4(v118, &v115);
      sub_10000552C(&v124, (uint64_t)"Conversion: write error ", 24LL);
      std::ostream::operator<<(&v124, v50);
      sub_1000EC18C((uint64_t)v118);
    }
  }

LABEL_124:
  unint64_t v84 = v107;
  if (v107)
  {
    uint64_t v85 = (unint64_t *)&v107->__shared_owners_;
    do
      unint64_t v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

void sub_1000EBF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *sub_1000EBFFC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000EDDCC((uint64_t)a1, a2);
  *a1 = off_10018FA80;
  a1[45] = &off_10018FB80;
  a1[46] = &off_10018FBA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018FA80;
  a1[45] = off_10018FB08;
  a1[46] = off_10018FB30;
  return a1;
}

void sub_1000EC080(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EC0A4(uint64_t a1)
{
  return a1;
}

void *sub_1000EC0E4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000EDE48((uint64_t)a1, a2);
  *a1 = off_10018FCA0;
  a1[45] = &off_10018FDA0;
  a1[46] = &off_10018FDC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018FCA0;
  a1[45] = off_10018FD28;
  a1[46] = off_10018FD50;
  return a1;
}

void sub_1000EC168(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EC18C(uint64_t a1)
{
  return a1;
}

void *sub_1000EC1CC(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  uint64_t v5 = a2[12];
  result[11] = a2[11];
  result[12] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return result;
}

uint64_t sub_1000EC210(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  sub_100006224(a1 + 88);
  return sub_100006224(v1);
}

void *sub_1000EC238(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000EDEC4((uint64_t)a1, a2);
  *a1 = off_10018FEC0;
  a1[45] = &off_10018FFC0;
  a1[46] = &off_10018FFE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_10018FEC0;
  a1[45] = off_10018FF48;
  a1[46] = off_10018FF70;
  return a1;
}

void sub_1000EC2BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EC2E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000EC320(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018F928);
  sub_1000EC4E4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000EC358(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018F928);
  sub_1000EC4E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000EC398(char *a1)
{
}

uint64_t sub_1000EC3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000EC410(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000EC45C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018F928);
  sub_1000EC4E4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000EC49C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018F928);
  sub_1000EC4E4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000EC4E4(uint64_t a1)
{
  *(void *)a1 = off_10018F9F8;
  sub_1000EC580(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000EC580(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000EC6E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000EC6A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000EC6D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000EC4E4(a1);
  operator delete(v1);
}

int *sub_1000EC6E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 81LL;
    __int16 v25 = 2082;
    size_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 81LL;
      __int16 v25 = 2082;
      size_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000EC8CC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FB48);
  sub_1000ECA90(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000EC904(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018FB48);
  sub_1000ECA90(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000EC944(char *a1)
{
}

uint64_t sub_1000EC988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000EC9BC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000ECA08(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018FB48);
  sub_1000ECA90((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000ECA48(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018FB48);
  sub_1000ECA90((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000ECA90(uint64_t a1)
{
  *(void *)a1 = off_10018FC18;
  sub_1000ECB2C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ECB2C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000ECC94((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000ECC54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ECC80(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000ECA90(a1);
  operator delete(v1);
}

int *sub_1000ECC94(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 114LL;
    __int16 v25 = 2082;
    size_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 114LL;
      __int16 v25 = 2082;
      size_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000ECE78(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FD68);
  sub_1000ED03C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ECEB0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018FD68);
  sub_1000ED03C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ECEF0(char *a1)
{
}

uint64_t sub_1000ECF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000ECF68(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000ECFB4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018FD68);
  sub_1000ED03C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000ECFF4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018FD68);
  sub_1000ED03C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000ED03C(uint64_t a1)
{
  *(void *)a1 = off_10018FE38;
  sub_1000ED0D8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ED0D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000ED240((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000ED200( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ED22C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000ED03C(a1);
  operator delete(v1);
}

int *sub_1000ED240(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 123LL;
    __int16 v25 = 2082;
    size_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 123LL;
      __int16 v25 = 2082;
      size_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000ED424(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10018FF88);
  sub_1000ED5E8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000ED45C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018FF88);
  sub_1000ED5E8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000ED49C(char *a1)
{
}

uint64_t sub_1000ED4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000ED514(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000ED560(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10018FF88);
  sub_1000ED5E8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000ED5A0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10018FF88);
  sub_1000ED5E8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000ED5E8(uint64_t a1)
{
  *(void *)a1 = off_100190058;
  sub_1000ED684(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000ED684(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000ED7EC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000ED7AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000ED7D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000ED5E8(a1);
  operator delete(v1);
}

int *sub_1000ED7EC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 144LL;
    __int16 v25 = 2082;
    size_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 144LL;
      __int16 v25 = 2082;
      size_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000ED9D0(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + sub_100006224(v6 - 32) = 850045863LL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 96) = 1018212795LL;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  if (a2) {
    sub_10009FC10((void **)(a1 + 8), a2);
  }
  return a1;
}

void sub_1000EDA60(_Unwind_Exception *a1)
{
  char v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000EDA8C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  uint64_t v3 = *(uint64_t ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      int v4 = *v2;
      if (*v2)
      {
        uint64_t v5 = v4[1];
        v4[1] = 0LL;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40LL))(v5);
        }
        uint64_t v6 = *v4;
        *int v4 = 0LL;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40LL))(v6);
        }
        operator delete(v4);
      }

      ++v2;
    }

    while (v2 != v3);
    uint64_t v2 = *(uint64_t ***)(a1 + 8);
  }

  *(void *)(a1 + 16) = v2;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }

  return a1;
}

uint64_t sub_1000EDB34(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018F9F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000EDB9C(_Unwind_Exception *a1)
{
}

void *sub_1000EDBB0(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  uint64_t v6 = operator new(0x28uLL);
  *uint64_t v6 = &off_1001900D8;
  v6[1] = 0LL;
  v6[2] = 0LL;
  void v6[3] = a2;
  void v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1000EDC10(void *a1, uint64_t a2, ...)
{
}

void sub_1000EDC28(_Unwind_Exception *a1)
{
}

void sub_1000EDC3C(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = (std::mutex *)(*a1 + 32LL);
  std::mutex::lock(v4);
  __int128 v5 = *(void **)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 8);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1000450A4(v3 + 24, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    os_log_type_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)os_log_type_t v14 = a2;
    uint64_t v7 = v14 + 8;
    unsigned int v17 = *(char **)(v3 + 8);
    unint64_t v16 = *(char **)(v3 + 16);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      unint64_t v16 = *(char **)(v3 + 8);
    }

    *(void *)(v3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v14;
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    *__int128 v5 = a2;
    uint64_t v7 = v5 + 1;
  }

  *(void *)(v3 + 16) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 96));
}

void sub_1000EDD3C(_Unwind_Exception *a1)
{
}

void sub_1000EDD54(std::__shared_weak_count *a1)
{
}

void sub_1000EDD68(uint64_t a1)
{
}

uint64_t sub_1000EDD8C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1000EDDCC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018FC18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000EDE34(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EDE48(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10018FE38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000EDEB0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EDEC4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100190058;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000EDF2C(_Unwind_Exception *a1)
{
}

void sub_1000EE1FC(id a1)
{
  int v1 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v9 = 0LL;
    uint64_t v2 = sub_1000BE278();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v11 = 60;
    __int16 v12 = 2080;
    uint64_t v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    LODWORD(v_Block_object_dispose((const void *)(v2 - 120), 8) = 18;
    __int128 v5 = (char *)_os_log_send_and_compose_impl( v4,  &v9,  0LL,  0LL,  &_mh_execute_header,  v3,  0LL,  "%.*s: Reached an invalidation handler for the IO daemon connection",  (int)buf,  v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }

  else
  {
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v11 = 60;
      __int16 v12 = 2080;
      uint64_t v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%.*s: Reached an invalidation handler for the IO daemon connection",  buf,  0x12u);
    }
  }

  *__error() = v1;
}

void sub_1000EE388(id a1)
{
  int v1 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v9 = 0LL;
    uint64_t v2 = sub_1000BE278();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v11 = 60;
    __int16 v12 = 2080;
    uint64_t v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
    LODWORD(v_Block_object_dispose((const void *)(v2 - 120), 8) = 18;
    __int128 v5 = (char *)_os_log_send_and_compose_impl( v4,  &v9,  0LL,  0LL,  &_mh_execute_header,  v3,  0LL,  "%.*s: Reached an interruption handler for the IO daemon connection",  (int)buf,  v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }

  else
  {
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v11 = 60;
      __int16 v12 = 2080;
      uint64_t v13 = "-[DIClient2IODaemonXPCHandler createConnection]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%.*s: Reached an interruption handler for the IO daemon connection",  buf,  0x12u);
    }
  }

  *__error() = v1;
}

void sub_1000EE5E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000EE610(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t *sub_1000EE690(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int *result = *a2;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v4 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Error opening ByteStream", 0x16u);
  }

  return result;
}

AAByteStream *sub_1000EE6DC(AAByteStream *a1)
{
  return a1;
}

ssize_t sub_1000EE708(AAByteStream *a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*a1, a2, a3, a4);
}

uint64_t *sub_1000EE710@<X0>( AAByteStream *a1@<X0>, AEAContext *a2@<X1>, size_t a3@<X2>, AAFlagSet a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  AAByteStream v8 = AEADecryptionRandomAccessInputStreamOpen(*a1, *a2, a3, a4, a5);
  return sub_1000EE690(a6, (uint64_t *)&v8);
}

AEAContext *sub_1000EE750(AEAContext *a1, AAByteStream *a2)
{
  AEAContext v3 = AEAContextCreateWithEncryptedStream(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Context creation failed.", 0x16u);
  }

  return a1;
}

AEAContext *sub_1000EE7B0(AEAContext *a1)
{
  return a1;
}

uint64_t sub_1000EE7DC(AEAContext *a1, uint8_t *buf, size_t buf_size)
{
  uint64_t result = AEAContextSetFieldBlob(*a1, 9u, 0, buf, buf_size);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    __int128 v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Context setup failed.", 0x16u);
  }

  return result;
}

uint64_t (**sub_1000EE834(AEAContext_impl **a1))()
{
  int v1 = *a1;
  size_t buf_size = 0LL;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, 0LL, 0LL, &buf_size) < 0) {
    return 0LL;
  }
  size_t v2 = buf_size;
  if (buf_size >= 0x100000) {
    size_t v3 = 0x100000LL;
  }
  else {
    size_t v3 = buf_size;
  }
  uint64_t v4 = (uint8_t *)valloc(v3);
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    __int16 v12 = std::bad_alloc::bad_alloc(exception);
  }

  __int128 __dst = &off_100190178;
  p_dst = &__dst;
  buf = v4;
  sub_100043B68((uint64_t)&v15, (uint64_t)&__dst);
  __int128 v5 = p_dst;
  if (p_dst == &__dst)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = &__dst;
    goto LABEL_11;
  }

  if (p_dst)
  {
    uint64_t v6 = 5LL;
LABEL_11:
    (*v5)[v6]();
  }

  AAByteStream v8 = buf;
  if (AEAContextGetFieldBlob(v1, 0x12u, 0, v3, buf, 0LL) < 0)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    if (v2 >= 0x10) {
      size_t v9 = 16LL;
    }
    else {
      size_t v9 = v2;
    }
    memcpy(&__dst, v8, v9);
    uint64_t v7 = __dst;
  }

  sub_100043BCC((uint64_t *)&buf);
  return v7;
}

void sub_1000EE9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

AEAAuthData *sub_1000EE9C8(AEAAuthData *a1, AEAContext *a2)
{
  AEAAuthData v3 = AEAAuthDataCreateWithContext(*a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Authentication Data creation failed.", 0x16u);
  }

  return a1;
}

AEAAuthData *sub_1000EEA28(AEAAuthData *a1)
{
  return a1;
}

uint64_t sub_1000EEA54(AEAAuthData *a1)
{
  return AEAAuthDataGetEntryCount(*a1);
}

uint64_t sub_1000EEA5C( AEAAuthData *a1, uint32_t a2, size_t a3, char *a4, size_t *a5, size_t a6, uint8_t *a7, size_t *a8)
{
  return AEAAuthDataGetEntry(*a1, a2, a3, a4, a5, a6, a7, a8);
}

void *sub_1000EEA64(void *result, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a3;
  int *result = *a2;
  *a2 = 0LL;
  result[1] = v4;
  *a3 = 0LL;
  result[2] = *a4;
  *a4 = 0LL;
  return result;
}

uint64_t sub_1000EEA8C(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 4u);
}

uint64_t sub_1000EEA98(uint64_t a1)
{
  return AEAContextGetFieldUInt(*(AEAContext *)(a1 + 8), 0xDu);
}

ssize_t sub_1000EEAA4(uint64_t a1, void *a2, size_t a3, off_t a4)
{
  return AAByteStreamPRead(*(AAByteStream *)(a1 + 16), a2, a3, a4);
}

void *sub_1000EEAB4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_100190178;
  return result;
}

void sub_1000EEAD8(uint64_t a1, void *a2)
{
  *a2 = &off_100190178;
}

void sub_1000EEAF0(uint64_t a1, void **a2)
{
}

uint64_t sub_1000EEAF8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000EEB34()
{
  return &off_1001901D8;
}

void *sub_1000EEB40(void *a1, void *a2)
{
  AEAAuthData v3 = sub_10004683C(a1, a2);
  *AEAAuthData v3 = off_1001901F8;
  *(_OWORD *)(v3 + 5) = 0u;
  uint64_t v4 = (uint64_t **)(v3 + 5);
  *(_OWORD *)(v3 + 7) = 0u;
  __int128 v5 = v3 + 7;
  v3[9] = 0LL;
  uint64_t v6 = v3 + 9;
  uint64_t v7 = sub_1000465AC();
  int v8 = *((_DWORD *)v7 + 2);
  if (v8 == 1)
  {
    unsigned int v9 = (*v7)();
  }

  else
  {
    if (v8) {
      sub_100026264();
    }
    unsigned int v9 = *(_DWORD *)v7;
  }

  LODWORD(v25) = v9 + 1;
  int v26 = 0;
  sub_1000EFE28((unsigned int *)&v25, &v26, &v27);
  sub_1000198A4((uint64_t)v5, &v27);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    int v11 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  uint64_t v13 = operator new(0x18uLL);
  sub_1000EF95C(v13, v9);
  sub_1000F1CB4(&v27, (uint64_t)v13);
  sub_1000198A4((uint64_t)v4, &v27);
  os_log_type_t v14 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    uint64_t v15 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  sub_1000EEDCC(*v5, -2LL, 1, (unint64_t *)&v27);
  sub_1000EEFB4(v6, (unint64_t *)&v27);
  sub_1000EFDE8((unint64_t *)&v27);
  __int128 v27 = 0uLL;
  uint64_t v25 = 0LL;
  sub_1000EEFF8((uint64_t *)v6, (uint64_t *)&v27, &v25);
  unsigned int v17 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    uint64_t v18 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((*v4)[1] != **v4)
  {
    unint64_t v20 = 0LL;
    do
    {
      *(void *)&__int128 v27 = 0LL;
      unint64_t v21 = atomic_load(v6);
      atomic_store(v21, (unint64_t *)&v27);
      uint64_t v22 = **v4;
      do
        unint64_t v23 = __ldaxr((unint64_t *)&v27);
      while (__stlxr(0LL, (unint64_t *)&v27));
      atomic_store(v23, (unint64_t *)(v22 + 8 * v20++));
    }

    while (v20 < ((*v4)[1] - **v4) >> 3);
  }

  return a1;
}

void sub_1000EED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

unint64_t *sub_1000EEDCC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v16 = 0LL;
  uint64_t v17 = a2;
  sub_1000F1DB8(a1, a2, a3, &v14);
  if (v14 && !*(_BYTE *)(v14 + 312) || v14 && *(_BYTE *)(v14 + 312))
  {
    *a4 = 0LL;
    do
      unint64_t v7 = __ldaxr(&v14);
    while (__stlxr(0LL, &v14));
LABEL_21:
    atomic_store(v7, a4);
    return sub_1000EFDE8(&v14);
  }

  if (*(_BYTE *)(a1 + 704) && v15 != (void *)(a1 + 728))
  {
    do
    {
      sub_1000F2278(a1, a2, &v12);
      unint64_t v16 = v12;
      sub_1000EEFB4(&v14, &v13);
      sub_1000EFDE8(&v13);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 312)) {
          break;
        }
      }

      int v8 = (unint64_t *)sub_1000F2400((void *)a1);
      if (v8)
      {
        unint64_t v16 = v8;
        sub_1000F24A4(a1, v8, a2, (unint64_t *)&v12);
        sub_1000EEFB4(&v14, (unint64_t *)&v12);
        sub_1000EFDE8((unint64_t *)&v12);
        break;
      }
    }

    while (*(_BYTE *)(a1 + 704));
    std::mutex::lock((std::mutex *)(a1 + 744));
    unsigned int v9 = sub_1000E2084((uint64_t **)(a1 + 720), v15, (unint64_t *)&v17, &v17, (uint64_t *)&v16);
    if (!v10) {
      v9[5] = (uint64_t)v16;
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
    std::mutex::unlock((std::mutex *)(a1 + 744));
    sub_1000F168C(a1, 0, 0LL, 0);
    *a4 = 0LL;
    do
      unint64_t v7 = __ldaxr(&v14);
    while (__stlxr(0LL, &v14));
    goto LABEL_21;
  }

  *a4 = 0LL;
  return sub_1000EFDE8(&v14);
}

void sub_1000EEF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

unint64_t *sub_1000EEFB4(unint64_t *a1, unint64_t *a2)
{
  if (a2 != a1)
  {
    do
      unint64_t v3 = __ldaxr(a2);
    while (__stlxr(0LL, a2));
    sub_1000EFDE8(a1);
    atomic_store(v3, a1);
  }

  return a1;
}

void sub_1000EEFF8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void sub_1000EF024( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*v10)
  {
    uint64_t v11 = *(void *)(*v10 + 256);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &a10, v10);
    }
  }

  __cxa_rethrow();
}

void sub_1000EF058(_Unwind_Exception *a1)
{
}

unint64_t *sub_1000EF070@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[3];
  unint64_t v7 = *(unint64_t ***)(a1 + 40);
  int v8 = *v7;
  unsigned int v9 = v7[1];
  while (v8 != v9)
  {
    sub_1000EF318(v8, v6, (unint64_t *)&v26);
    if (v26 && !*(_BYTE *)(v26 + 312))
    {
      sub_1000EF9D0((unint64_t *)&v24, (unint64_t *)&v26);
      uint64_t v25 = -2LL;
      *(void *)a3 = 0LL;
      do
        unint64_t v22 = __ldaxr((unint64_t *)&v24);
      while (__stlxr(0LL, (unint64_t *)&v24));
      atomic_store(v22, (unint64_t *)a3);
      *(_DWORD *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v25;
      sub_1000EFDE8((unint64_t *)&v24);
      return sub_1000EFDE8((unint64_t *)&v26);
    }

    sub_1000EFDE8((unint64_t *)&v26);
    ++v8;
  }

  sub_1000EEDCC(*(void *)(a1 + 56), v6, 1, (unint64_t *)&v26);
  if (!v26 || (unsigned int v10 = atomic_load((unsigned int *)(v26 + 24)), v10 != 2))
  {
    uint64_t v24 = a2[3];
    sub_1000EF3B8(&v26, a2, &v24);
    unint64_t v12 = *(unint64_t ***)(a1 + 40);
    unint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    if (*v12 == v14)
    {
      int v15 = 0;
      goto LABEL_37;
    }

    int v15 = 0;
    while (1)
    {
      unint64_t v16 = atomic_load(v13);
      while (!v16 || *(void *)(v16 + 32) == -2LL)
      {
        unint64_t v17 = atomic_load((unint64_t *)&v26);
        unint64_t v18 = __ldaxr(v13);
        if (v18 != v16)
        {
          __clrex();
LABEL_20:
          int v19 = 0;
          goto LABEL_21;
        }

        if (__stlxr(v17, v13)) {
          goto LABEL_20;
        }
        int v19 = 1;
LABEL_21:
        unint64_t v16 = v18;
        if (v19)
        {
          sub_1000EF9D0((unint64_t *)&v24, (unint64_t *)&v26);
          goto LABEL_24;
        }
      }

      uint64_t v24 = 0LL;
      atomic_store(0LL, (unint64_t *)&v24);
LABEL_24:
      if (v24) {
        int v20 = *(unsigned __int8 *)(v24 + 312) == 0;
      }
      else {
        int v20 = 0;
      }
      if (v26) {
        int v21 = *(unsigned __int8 *)(v26 + 312) == 0;
      }
      else {
        int v21 = 0;
      }
      sub_1000EFDE8((unint64_t *)&v24);
      if (v20 != v21)
      {
        ++v15;
        if (++v13 != v14) {
          continue;
        }
      }

void sub_1000EF2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

unint64_t *sub_1000EF318@<X0>( unint64_t *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = atomic_load(result);
  if (v4 && *(void *)(v4 + 32) == a2)
  {
    uint64_t v6 = (unint64_t *)atomic_load(result);
    sub_1000F25C0(&v9, v6, 1);
    if (v9 && !*(_BYTE *)(v9 + 312))
    {
      uint64_t v7 = *(void *)(v9 + 32);
      *a3 = 0LL;
      if (v7 == a2)
      {
        do
          unint64_t v8 = __ldaxr(&v9);
        while (__stlxr(0LL, &v9));
        atomic_store(v8, a3);
      }
    }

    else
    {
      *a3 = 0LL;
    }

    return sub_1000EFDE8(&v9);
  }

  else
  {
    *a3 = 0LL;
  }

  return result;
}

void sub_1000EF3B8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void sub_1000EF3E4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*v10)
  {
    uint64_t v11 = *(void *)(*v10 + 256);
    if (v11)
    {
      a10 = *v10;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48LL))(v11, &a10, v10);
    }
  }

  __cxa_rethrow();
}

void sub_1000EF418(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EF42C(uint64_t a1, uint64_t *a2, int *a3, void **a4)
{
  if (*(_BYTE *)(*a2 + 192)) {
    uint64_t v4 = *a2 + 40;
  }
  else {
    uint64_t v4 = 0LL;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 140));
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *(_BYTE *)(*a2 + 192) ? *a2 + 40 : 0LL;
    size_t v8 = atomic_load((unsigned int *)(v7 + 144));
    *a3 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      unint64_t v9 = *a4;
      if (*(_BYTE *)(*a2 + 192)) {
        uint64_t v10 = *a2 + 40;
      }
      else {
        uint64_t v10 = 0LL;
      }
      uint64_t v11 = *(const void **)v10;
      unint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        memcpy(v9, v11, *a3);
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      else
      {
        memcpy(v9, v11, v8);
      }

      uint64_t v16 = *a2;
      if (*a2)
      {
        if (*(_BYTE *)(v16 + 192)) {
          v16 += 40LL;
        }
        else {
          uint64_t v16 = 0LL;
        }
      }

      unint64_t v17 = (unsigned int *)(v16 + 136);
      do
        unsigned int v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
    }
  }

  return v5 & 1;
}

void sub_1000EF538(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v3 + 192)) {
      v3 += 40LL;
    }
    else {
      uint64_t v3 = 0LL;
    }
  }

  uint64_t v4 = (std::mutex *)(v3 + 72);
  std::mutex::lock((std::mutex *)(v3 + 72));
  if (*(_BYTE *)(*a2 + 192)) {
    uint64_t v5 = *a2 + 40;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (atomic_load((unsigned int *)(v5 + 136)))
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v7 + 192)) {
        v7 += 40LL;
      }
      else {
        uint64_t v7 = 0LL;
      }
    }

    std::condition_variable::notify_all((std::condition_variable *)(v7 + 24));
  }

  std::mutex::unlock(v4);
}

uint64_t sub_1000EF5BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v6 + 192)) {
      v6 += 40LL;
    }
    else {
      uint64_t v6 = 0LL;
    }
  }

  uint64_t v7 = (std::mutex *)(v6 + 72);
  std::mutex::lock((std::mutex *)(v6 + 72));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 88LL))(*(void *)(a1 + 24), a3);
  uint64_t v9 = v8;
  if (*(_BYTE *)(*a2 + 192)) {
    uint64_t v10 = *a2 + 40;
  }
  else {
    uint64_t v10 = 0LL;
  }
  atomic_store(v8, (unsigned int *)(v10 + 144));
  if (*(_BYTE *)(*a2 + 192)) {
    uint64_t v11 = *a2 + 40;
  }
  else {
    uint64_t v11 = 0LL;
  }
  atomic_store(1u, (unsigned __int8 *)(v11 + 140));
  std::mutex::unlock(v7);
  return v9;
}

void sub_1000EF66C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EF680(uint64_t a1, uint64_t *a2)
{
  uint64_t p_shared_owners = (uint64_t)a2;
  uint64_t v4 = sub_1000EF070(a1, a2, (uint64_t)&v29);
  unint64_t v5 = v30;
  if (v30 != -2)
  {
    uint64_t v13 = sub_1000EF5BC(a1, &v29, p_shared_owners);
    unsigned int v31 = v13;
    sub_1000EF538(v13, &v29);
    if (v5 < (uint64_t)(*(void *)(*(void *)(a1 + 40) + 8LL) - **(void **)(a1 + 40)) >> 3)
    {
      __lk.__m_ = 0LL;
      unint64_t v14 = atomic_load((unint64_t *)(a1 + 72));
      atomic_store(v14, (unint64_t *)&__lk);
      uint64_t v15 = **(void **)(a1 + 40);
      do
        unint64_t v16 = __ldaxr((unint64_t *)&__lk);
      while (__stlxr(0LL, (unint64_t *)&__lk));
      atomic_store(v16, (unint64_t *)(v15 + 8 * v5));
    }

    if (v29)
    {
      uint64_t v17 = *(void *)(v29 + 256);
      if (v17)
      {
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v29;
        (*(void (**)(uint64_t, std::unique_lock<std::mutex> *, uint64_t *))(*(void *)v17 + 48LL))( v17,  &__lk,  &v29);
      }
    }

    goto LABEL_44;
  }

  uint64_t v6 = v29;
  if (v29)
  {
    if (*(_BYTE *)(v29 + 192)) {
      uint64_t v6 = v29 + 40;
    }
    else {
      uint64_t v6 = 0LL;
    }
  }

  uint64_t v7 = (unsigned int *)(v6 + 136);
  do
    unsigned int v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  uint64_t v9 = v29;
  if (v29)
  {
    if (*(_BYTE *)(v29 + 192)) {
      uint64_t v9 = v29 + 40;
    }
    else {
      uint64_t v9 = 0LL;
    }
  }

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v9 + 72);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v9 + 72));
  int v11 = sub_1000EF42C(v10, &v29, (int *)&v31, (void **)p_shared_owners);
  char v12 = v11;
  if (v11)
  {
    uint64_t p_shared_owners = v31;
  }

  else
  {
    uint64_t v18 = v29;
    if (v29)
    {
      if (*(_BYTE *)(v29 + 192)) {
        uint64_t v18 = v29 + 40;
      }
      else {
        uint64_t v18 = 0LL;
      }
    }

    std::condition_variable::wait((std::condition_variable *)(v18 + 24), &__lk);
    if (*(_BYTE *)(v29 + 192)) {
      uint64_t v19 = v29 + 40;
    }
    else {
      uint64_t v19 = 0LL;
    }
    size_t v20 = atomic_load((unsigned int *)(v19 + 144));
    unsigned int v31 = v20;
    if ((int)v20 >= 1)
    {
      int v21 = *(void **)p_shared_owners;
      if (*(_BYTE *)(v29 + 192)) {
        uint64_t v22 = v29 + 40;
      }
      else {
        uint64_t v22 = 0LL;
      }
      unint64_t v23 = *(const void **)v22;
      uint64_t v24 = *(std::__shared_weak_count **)(v22 + 8);
      if (v24)
      {
        uint64_t p_shared_owners = (uint64_t)&v24->__shared_owners_;
        do
          unint64_t v25 = __ldxr((unint64_t *)p_shared_owners);
        while (__stxr(v25 + 1, (unint64_t *)p_shared_owners));
        memcpy(v21, v23, v20);
        do
          unint64_t v26 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v26 - 1, (unint64_t *)p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      else
      {
        memcpy(v21, v23, v20);
      }
    }
  }

  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if ((v12 & 1) == 0) {
LABEL_44:
  }
    uint64_t p_shared_owners = v31;
  sub_1000EFDE8((unint64_t *)&v29);
  return p_shared_owners;
}

void sub_1000EF8B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, unint64_t a13)
{
  if (a11) {
    std::mutex::unlock(a10);
  }
  sub_1000EFDE8(&a13);
  _Unwind_Resume(a1);
}

double sub_1000EF8F0@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void sub_1000EF934(void *a1)
{
  int v1 = sub_1000EFD84(a1);
  operator delete(v1);
}

void *sub_1000EF948(uint64_t a1, void *a2)
{
  return sub_10000552C(a2, (uint64_t)"readSynchronizer", 16LL);
}

void *sub_1000EF95C(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100089F98(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }

  return a1;
}

void sub_1000EF9B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

unint64_t *sub_1000EF9D0(unint64_t *a1, unint64_t *a2)
{
  *a1 = 0LL;
  uint64_t v3 = (unint64_t *)atomic_load(a2);
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v4 = atomic_load(v3);
  if (!v4) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_7;
    }

    if (!__stlxr(v4 + 1, v3)) {
      break;
    }
LABEL_7:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_8;
    }
  }

  uint64_t v7 = (unint64_t *)v3[37];
  if (v7)
  {
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v3[38] = v8;
  }

  if (!sub_1000EFAA0((uint64_t)v3))
  {
    do
      unint64_t v9 = __ldaxr(v3);
    while (__stlxr(v9 - 1, v3));
    if (v9 == 1)
    {
      uint64_t v10 = v3[4];
      v3[4] = -1LL;
      sub_1000EFB8C((uint64_t)v3, v10, 1u);
    }

BOOL sub_1000EFAA0(uint64_t a1)
{
  size_t v2 = (unsigned int *)(a1 + 24);
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 24));
  if (v3 == 2)
  {
    unint64_t v4 = atomic_load((unint64_t *)a1);
    return v4 > 1;
  }

  else
  {
    uint64_t v6 = (unint64_t *)(a1 + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    unsigned int v8 = atomic_load(v2);
    if (v8 != 2 && !*(_BYTE *)(a1 + 312)) {
      sub_1000EFB4C(a1 + 24, 1u, 5u);
    }
    do
      unint64_t v9 = __ldaxr(v6);
    while (__stlxr(v9 - 1, v6));
    unint64_t v10 = atomic_load((unint64_t *)a1);
    if (v10 < 2)
    {
      return 0LL;
    }

    else
    {
      unsigned int v11 = atomic_load(v2);
      return v11 == 2;
    }
  }

BOOL sub_1000EFB4C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)&__int128 v4 = a1;
  *((void *)&v4 + 1) = __PAIR64__(a3, a2);
  uint64_t v5 = a1;
  __int128 v6 = v4;
  return sub_1000DB964((uint64_t)&v4, (uint64_t)&v5, 0LL);
}

uint64_t sub_1000EFB8C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 312)
    || (unsigned int v6 = atomic_load((unsigned int *)(a1 + 24)), v6 != 2)
    || !*(_BYTE *)(a1 + 192)
    || (uint64_t v7 = *(void *)(a1 + 288)) == 0)
  {
    int v9 = (a3 >> 1) & 2;
    goto LABEL_11;
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48LL))(v7, a1 + 40);
  int v9 = (a3 >> 1) & 2;
  if (!(_DWORD)v8)
  {
LABEL_11:
    atomic_store(0, (unsigned int *)(a1 + 24));
    sub_1000EFD44(a1 + 40);
    sub_1000C1278(a1 + 200, a1, a2, v9);
    std::__cxx_atomic_notify_all((const void *)(a1 + 24));
    return 1LL;
  }

  if ((a3 & 2) != 0)
  {
    *(void *)&__int128 v11 = "ref::details::ctrl_blk<CurrentReader, unsigned long long>::reset_val(tag_t, details::reset_val_option_set) [T = CurrentReader, tag_t = unsigned long long]";
    *((void *)&v11 + 1) = 68LL;
    int v12 = 16;
    sub_1000C1190(v13, &v11);
    sub_10000552C(&v14, (uint64_t)"Got error when trying to close ", 31LL);
    std::ostream::operator<<(&v14, a2);
    sub_10000552C(&v14, (uint64_t)" with ret ", 10LL);
    std::ostream::operator<<(&v14, v8);
    sub_10000552C(&v14, (uint64_t)", Force closing.", 16LL);
    std::ostream::~ostream(&v14, off_10018B620);
    sub_1000C1398((uint64_t)v13);
    std::ios::~ios(&v15);
    goto LABEL_11;
  }

  if ((a3 & 1) != 0) {
    sub_1000C1278(a1 + 200, a1, a2, v9 | 1);
  }
  return 0LL;
}

void sub_1000EFD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000EFD44(uint64_t result)
{
  if (*(_BYTE *)(result + 152))
  {
    uint64_t v1 = result;
    std::mutex::~mutex((std::mutex *)(result + 72));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 24));
    double result = sub_100006224(v1);
    *(_BYTE *)(v1 + 152) = 0;
  }

  return result;
}

void *sub_1000EFD84(void *a1)
{
  *a1 = off_1001901F8;
  sub_1000EFDE8(a1 + 9);
  sub_100006224((uint64_t)(a1 + 7));
  sub_100006224((uint64_t)(a1 + 5));
  *a1 = off_100178D68;
  sub_100006224((uint64_t)(a1 + 3));
  size_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

unint64_t *sub_1000EFDE8(unint64_t *a1)
{
  do
    double result = (unint64_t *)__ldaxr(a1);
  while (__stlxr(0LL, a1));
  if (result)
  {
    do
    {
      unint64_t v3 = __ldaxr(result);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, result));
    if (!v4)
    {
      uint64_t v5 = result[4];
      result[4] = -1LL;
      return (unint64_t *)sub_1000EFB8C((uint64_t)result, v5, 1u);
    }
  }

  return result;
}

void *sub_1000EFE28@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x580uLL);
  double result = sub_1000EFE88(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1000EFE74(_Unwind_Exception *a1)
{
}

void *sub_1000EFE88(void *a1, unsigned int *a2, int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001902D8;
  sub_1000EFF0C((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1000EFEBC(_Unwind_Exception *a1)
{
}

void sub_1000EFED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001902D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000EFEE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001902D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void *sub_1000EFF00(uint64_t a1)
{
  return sub_1000F1A48(a1 + 24);
}

uint64_t sub_1000EFF0C(uint64_t a1, unsigned int *a2, int *a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  unint64_t v10 = 0LL;
  sub_1000EFFDC(a1, v4, v5, (uint64_t)v9);
  unsigned int v6 = v10;
  if (v10 == v9)
  {
    uint64_t v7 = 4LL;
    unsigned int v6 = v9;
    goto LABEL_5;
  }

  if (v10)
  {
    uint64_t v7 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return a1;
}

void sub_1000EFFA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000EFFDC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000F0408(a1);
  *(void *)(v8 + 424) = a2;
  *(void *)(v8 + 4sub_100006224(v6 - 32) = a3;
  int v9 = (void *)(v8 + 440);
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(void *)(v8 + 48_Block_object_dispose((const void *)(v2 - 120), 8) = 850045863LL;
  *(_OWORD *)(v8 + 496) = 0u;
  *(_OWORD *)(v8 + 512) = 0u;
  *(_OWORD *)(v8 + 52_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(v8 + 544) = 0LL;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(void *)(v8 + 592) = 850045863LL;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 6sub_100006224(v6 - 32) = 0u;
  *(void *)(v8 + 64_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(v8 + 656) = 1018212795LL;
  *(void *)(v8 + 696) = 0LL;
  *(_OWORD *)(v8 + 680) = 0u;
  *(_BYTE *)(v8 + 704) = 1;
  *(_OWORD *)(v8 + 664) = 0u;
  uint64_t v16 = (dispatch_object_t *)(v8 + 712);
  sub_1001018F4(v8 + 712, "dealloc_queue");
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 72_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 720) = a1 + 728;
  *(void *)(a1 + 744) = 850045863LL;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 76_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(void *)(a1 + 800) = 0LL;
  *(void *)(a1 + 80_Block_object_dispose((const void *)(v2 - 120), 8) = 1018212795LL;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 8sub_100006224(v6 - 32) = 0u;
  *(void *)(a1 + 84_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 856) = 850045863LL;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = 0LL;
  *(void *)(a1 + 920) = a1 + 920;
  *(void *)(a1 + 92_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 920;
  *(void *)(a1 + 936) = 0LL;
  sub_100014938(a1 + 944, a4);
  sub_1000F0928(a1 + 976, a1);
  *(void *)(a1 + 1320) = &off_1001905D8;
  *(void *)(a1 + 132_Block_object_dispose((const void *)(v2 - 120), 8) = a1;
  *(void *)(a1 + 1344) = a1 + 1320;
  *(void *)(a1 + 1352) = &off_100190668;
  *(void *)(a1 + 1360) = a1;
  *(void *)(a1 + 1376) = a1 + 1352;
  if (a2 >> 61) {
    size_t v10 = -1LL;
  }
  else {
    size_t v10 = 8 * a2;
  }
  __int128 v11 = operator new[](v10);
  int v12 = v11;
  if (a2) {
    bzero(v11, 8 * a2);
  }
  *(void *)(a1 + 552) = v12;
  sub_1001019A8(v16, 3);
  if (a2)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = operator new(0x158uLL);
      sub_1000F0928((uint64_t)v14, a1);
      uint64_t v17 = v14;
      sub_1000F0318(v9, &v17);
      atomic_store(0LL, (unint64_t *)(*(void *)(a1 + 552) + 8 * v13++));
    }

    while (a2 != v13);
  }

  return a1;
}

void sub_1000F01DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::condition_variable *a11, void *a12, dispatch_object_s **a13)
{
  uint64_t v18 = *(void **)(v13 + 968);
  if (v18 == a12)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = a12;
  }

  else
  {
    if (!v18) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  sub_1000E3474(v16);
  std::mutex::~mutex((std::mutex *)(v13 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(v13 + 808));
  std::mutex::~mutex((std::mutex *)(v13 + 744));
  sub_10000A494(v13 + 720, *a10);
  sub_100101848(a13);
  std::condition_variable::~condition_variable(a11);
  std::mutex::~mutex(v15);
  std::mutex::~mutex((std::mutex *)(v13 + 488));
  sub_1000C1944(v14);
  sub_1000F1960((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0318(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_1000F0FCC(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }

  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  int v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0LL;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096LL;
  }
  return v13 - 8;
}

uint64_t sub_1000F03D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F0408(uint64_t a1)
{
  *(void *)(a1 + sub_100006224(v6 - 32) = &off_1001903B8;
  *(void *)(a1 + 56) = a1 + 32;
  *(void *)a1 = &off_100190328;
  *(void *)(a1 + 64) = &off_100190448;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 64;
  *(void *)(a1 + 96) = 0LL;
  uint64_t v2 = sub_1000F071C(a1 + 104, a1, a1 + 32, a1 + 64, a1 + 96);
  sub_1000F04FC(v2, -1LL);
  atomic_store(0, (unsigned int *)(a1 + 128));
  *(_BYTE *)(a1 + 416) = 1;
  return a1;
}

void sub_1000F04AC(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void **)(v1 + 88);
  if (v7 == v5)
  {
    uint64_t v8 = 4LL;
  }

  else
  {
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
    uint64_t v5 = *(void **)(v1 + 88);
  }

  (*(void (**)(void *))(*v5 + 8 * v8))(v5);
LABEL_6:
  sub_100126474(v4, v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F04FC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + sub_100006224(v6 - 32) = a2;
  *(_BYTE *)(a1 + 312) = 0;
  atomic_store(1uLL, (unint64_t *)a1);
  atomic_store(0LL, (unint64_t *)(a1 + 8));
  atomic_store(0LL, (unint64_t *)(a1 + 16));
  uint64_t result = sub_1000EFD44(a1 + 40);
  uint64_t v4 = *(unint64_t **)(a1 + 296);
  if (v4)
  {
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(void *)(a1 + 304) = v5;
  }

  atomic_store(1u, (unsigned int *)(a1 + 24));
  __dmb(0xBu);
  return result;
}

void *sub_1000F0570()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_100190328;
  return result;
}

void sub_1000F0594(uint64_t a1, void *a2)
{
  *a2 = &off_100190328;
}

uint64_t sub_1000F05B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F05EC()
{
}

void *sub_1000F0600()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_1001903B8;
  return result;
}

void sub_1000F0624(uint64_t a1, void *a2)
{
  *a2 = &off_1001903B8;
}

uint64_t sub_1000F0640(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F067C()
{
}

void *sub_1000F0690()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_100190448;
  return result;
}

void sub_1000F06B4(uint64_t a1, void *a2)
{
  *a2 = &off_100190448;
}

uint64_t sub_1000F06CC()
{
  return 0LL;
}

uint64_t sub_1000F06D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F0710()
{
}

uint64_t sub_1000F071C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + sub_100006224(v6 - 32) = -1LL;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  sub_100014938(a1 + 200, a2);
  sub_100014938(a1 + 232, a3);
  sub_100014938(a1 + 264, a4);
  *(void *)(a1 + 296) = a5;
  *(void *)(a1 + 304) = 0LL;
  *(_BYTE *)(a1 + 312) = 0;
  return a1;
}

void sub_1000F07B0(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v2 + 256);
  if (v6 == v4)
  {
    uint64_t v7 = 4LL;
  }

  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
    uint64_t v4 = *(void **)(v2 + 256);
  }

  (*(void (**)(void *))(*v4 + 8 * v7))(v4);
LABEL_6:
  uint64_t v8 = *(void **)(v2 + 224);
  if (v8 == v3)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v3;
  }

  else
  {
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  sub_1000F0830(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0830(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 72));
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 24));
    sub_100006224(a1);
  }

  return a1;
}

void *sub_1000F0870(void *a1)
{
  uint64_t v2 = a1 + 33;
  unint64_t v3 = (void *)a1[36];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  unint64_t v5 = (void *)a1[32];
  if (v5 == a1 + 29)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = a1 + 29;
  }

  else
  {
    if (!v5) {
      goto LABEL_11;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  uint64_t v7 = (void *)a1[28];
  if (v7 == a1 + 25)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = a1 + 25;
    goto LABEL_15;
  }

  if (v7)
  {
    uint64_t v8 = 5LL;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  sub_1000F0830((uint64_t)(a1 + 5));
  return a1;
}

uint64_t sub_1000F0928(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v10[0] = &off_1001904D8;
  v10[1] = a1;
  uint64_t v11 = v10;
  v8[0] = &off_100190558;
  v8[1] = a1;
  uint64_t v9 = v8;
  sub_1000F071C(a1 + 8, (uint64_t)v10, (uint64_t)v8, a2 + 944, a2 + 568);
  unint64_t v3 = v9;
  if (v9 == v8)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v8;
  }

  else
  {
    if (!v9) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  unint64_t v5 = v11;
  if (v11 == v10)
  {
    uint64_t v6 = 4LL;
    unint64_t v5 = v10;
    goto LABEL_10;
  }

  if (v11)
  {
    uint64_t v6 = 5LL;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  *(void *)(a1 + 32_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_DWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_1000F0A20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v19 = a13;
  if (a13 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  int v21 = a17;
  if (a17 == &a14)
  {
    uint64_t v22 = 4LL;
    int v21 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *sub_1000F0A90(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_1001904D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000F0AC4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001904D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000F0AE0(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  return sub_1000C1278(**(void **)(a1 + 8) + 1320LL, *(void *)(a1 + 8), *a3, *a4);
}

uint64_t sub_1000F0AF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F0B34()
{
}

void *sub_1000F0B48(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_100190558;
  result[1] = v3;
  return result;
}

uint64_t sub_1000F0B7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100190558;
  a2[1] = v2;
  return result;
}

uint64_t sub_1000F0B98(uint64_t a1)
{
  return sub_1000F0BE8((uint64_t **)(a1 + 8));
}

uint64_t sub_1000F0BA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F0BDC()
{
}

uint64_t sub_1000F0BE8(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v4 = *a1;
  uint64_t v2 = *(void *)(v1 + 1376);
  if (!v2) {
    sub_100014B10();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v2 + 48LL))(v2, &v4);
}

void *sub_1000F0C30(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_1001905D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1000F0C64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001905D8;
  a2[1] = v2;
  return result;
}

void sub_1000F0C80(uint64_t a1, unint64_t *a2, unint64_t *a3, _DWORD *a4)
{
}

uint64_t sub_1000F0C94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F0CD0()
{
}

void sub_1000F0CDC(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  if ((*(_DWORD *)(a2 + 336) & 1) == 0)
  {
    uint64_t v7 = (unsigned int *)(a2 + 336);
    if ((a4 & 3) == 1LL)
    {
      uint64_t v8 = (char *)(a1 + 856);
      std::mutex::lock((std::mutex *)(a1 + 856));
      uint64_t v9 = operator new(0x20uLL);
      _OWORD v9[2] = a2;
      void v9[3] = a3;
      uint64_t v10 = *(void *)(a1 + 920);
      *uint64_t v9 = v10;
      v9[1] = a1 + 920;
      *(void *)(v10 + _Block_object_dispose((const void *)(v2 - 120), 8) = v9;
      *(void *)(a1 + 920) = v9;
      ++*(void *)(a1 + 936);
      do
        unsigned int v11 = __ldaxr(v7);
      while (__stlxr(v11 | 4, v7));
      int v12 = sub_10011E5C4(a2);
      std::mutex::lock((std::mutex *)v12);
      uint64_t v13 = sub_10011E684(a2);
      std::condition_variable::notify_all((std::condition_variable *)v13);
      std::mutex::unlock((std::mutex *)v12);
LABEL_20:
      std::mutex::unlock((std::mutex *)v8);
      return;
    }

    sub_1000F0E88(a1, a3);
    sub_1000EFDE8((unint64_t *)(a2 + 328));
    do
      unsigned int v14 = __ldaxr(v7);
    while (__stlxr(v14 | 1, v7));
    if ((v14 & 2) == 0) {
      sub_1000F0EEC(a1, a2);
    }
    uint64_t v15 = (unint64_t *)(a1 + 576);
    do
    {
      unint64_t v16 = __ldaxr(v15);
      unint64_t v17 = v16 - 1;
    }

    while (__stlxr(v17, v15));
    if (!v17)
    {
      if (atomic_load((unint64_t *)(a1 + 584)))
      {
        std::mutex::lock((std::mutex *)(a1 + 592));
        std::mutex::unlock((std::mutex *)(a1 + 592));
      }
    }

    uint64_t v20 = (unint64_t *)(a1 + 560);
    if (atomic_load(v20))
    {
      uint64_t v8 = sub_10011E5C4(a2);
      std::mutex::lock((std::mutex *)v8);
      if (atomic_load(v20))
      {
        unint64_t v23 = sub_10011E684(a2);
        std::condition_variable::notify_all((std::condition_variable *)v23);
      }

      goto LABEL_20;
    }
  }

void sub_1000F0E5C(_Unwind_Exception *a1)
{
}

void sub_1000F0E88(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 744);
  std::mutex::lock((std::mutex *)(a1 + 744));
  sub_10004D090(a1 + 720, &v4);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 808));
  std::mutex::unlock(v3);
}

void sub_1000F0ED8(_Unwind_Exception *a1)
{
}

void sub_1000F0EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v3 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  sub_1000F0F48((void *)(a1 + 440), &v4);
  std::mutex::unlock(v3);
}

void sub_1000F0F34(_Unwind_Exception *a1)
{
}

void sub_1000F0F48(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1000F0FCC(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1000F0FCC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000450A4(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1000F1294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1000F12E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_100190668;
  result[1] = v3;
  return result;
}

uint64_t sub_1000F131C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_100190668;
  a2[1] = v2;
  return result;
}

void sub_1000F1338(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
}

uint64_t sub_1000F1344(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000F1380()
{
}

void sub_1000F138C(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 424);
  if (v3 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(a1 + 552);
    unint64_t v8 = v7 + 8 * v3;
    while (!(v7 + v6) || *(void *)(v7 + v6) != a2)
    {
      v6 += 8LL;
      if (v7 + v6 >= v8) {
        return;
      }
    }

    if ((v6 & 0x8000000000000000LL) == 0)
    {
      uint64_t v9 = (unint64_t *)(v7 + v6);
      while (1)
      {
        unint64_t v10 = __ldaxr(v9);
        if (v10 != a2) {
          break;
        }
        if (!__stlxr(0LL, v9))
        {
          sub_1000F1434(a1, a2, 1uLL, a3);
          sub_1000F0EEC(a1, a2);
          return;
        }
      }

      __clrex();
    }
  }

uint64_t sub_1000F1434(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8 = a3 & 0x100;
  uint64_t v9 = (a3 >> 8) & 1;
  unint64_t v10 = (unint64_t *)(a1 + 576);
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((a3 & 1) != 0)
  {
    uint64_t v12 = (unint64_t *)(a1 + 560);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }

  BOOL v14 = (unsigned int *)(a2 + 336);
  do
    unsigned int v15 = __ldaxr(v14);
  while (__stlxr(v15 | 2, v14));
  sub_1000EFDE8((unint64_t *)(a2 + 328));
  if (a4) {
    sub_1000EFDE8(a4);
  }
  if ((a3 & 1) != 0)
  {
    char v16 = atomic_load(v14);
    if ((v16 & 4) == 0)
    {
      uint64_t v17 = (a3 >> 16) & 1;
      do
      {
        if ((*v14 & 1) != 0) {
          break;
        }
        if ((_DWORD)v9)
        {
          std::mutex::lock((std::mutex *)(a1 + 488));
          uint64_t v18 = *(void *)(a1 + 480);
          std::mutex::unlock((std::mutex *)(a1 + 488));
          if (v18) {
            break;
          }
        }

        if (sub_1000F168C(a1, v17, 0LL, 0) == -1)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v24 = sub_10011E684(a2);
          v25.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v35 = a1;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36 = v25.__d_.__rep_ + 200000;
          unint64_t v32 = a2;
          char v33 = v9;
          *(_DWORD *)unint64_t v34 = *(_DWORD *)v38;
          *(_DWORD *)&v34[3] = *(_DWORD *)&v38[3];
          sub_1000F17F0((std::condition_variable *)v24, &__lk, &v36, (uint64_t)&v32);
        }

        else
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4(a2);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v19 = sub_10011E684(a2);
          char v20 = atomic_load(v14);
          if ((v20 & 4) == 0)
          {
            uint64_t v21 = (std::condition_variable *)v19;
            do
            {
              if ((*v14 & 1) != 0) {
                break;
              }
              if ((_DWORD)v9)
              {
                std::mutex::lock((std::mutex *)(a1 + 488));
                uint64_t v22 = *(void *)(a1 + 480);
                std::mutex::unlock((std::mutex *)(a1 + 488));
                if (v22) {
                  break;
                }
              }

              std::condition_variable::wait(v21, &__lk);
              char v23 = atomic_load(v14);
            }

            while ((v23 & 4) == 0);
          }
        }

        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        unsigned int v26 = *v14;
        if (!v8 || (v26 & 1) != 0)
        {
          if ((v26 & 1) != 0) {
            break;
          }
        }

        else if (*(void *)(a1 + 480))
        {
          break;
        }

        char v27 = atomic_load(v14);
      }

      while ((v27 & 4) == 0);
    }

    uint64_t v28 = (unint64_t *)(a1 + 560);
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }

  do
    unsigned int v30 = __ldaxr(v14);
  while (__stlxr(v30 & 0xFFFFFFFD, v14));
  return v30 & 1;
}

void sub_1000F1664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15)
{
  if (a15) {
    std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F168C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  if (!*(void *)(a1 + 936)) {
    return 0LL;
  }
  uint64_t v19 = (std::mutex *)(a1 + 856);
  std::mutex::lock((std::mutex *)(a1 + 856));
  if (*(void *)(a1 + 936))
  {
    uint64_t v8 = *(uint64_t **)(a1 + 928);
    if (v8 == (uint64_t *)(a1 + 920))
    {
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v9 = a4;
      if (a2) {
        unsigned int v10 = 6;
      }
      else {
        unsigned int v10 = 4;
      }
      uint64_t v11 = 1LL;
      do
      {
        unint64_t v12 = v8[2];
        if ((sub_1000EFB8C(v12 + 8, v8[3], v10) | a2) == 1)
        {
          unint64_t v13 = sub_10011E5C4(v12);
          std::mutex::lock((std::mutex *)v13);
          BOOL v14 = (unsigned int *)(v12 + 336);
          do
            unsigned int v15 = __ldaxr(v14);
          while (__stlxr(v15 & 0xFFFFFFFB, v14));
          std::mutex::unlock((std::mutex *)v13);
          uint64_t v16 = *v8;
          uint64_t v17 = (uint64_t *)v8[1];
          *(void *)(v16 + _Block_object_dispose((const void *)(v2 - 120), 8) = v17;
          *(void *)v8[1] = v16;
          --*(void *)(a1 + 936);
          operator delete(v8);
          uint64_t v8 = v17;
        }

        else
        {
          if (!v9 || v8[3] == a3) {
            uint64_t v11 = 0xFFFFFFFFLL;
          }
          uint64_t v8 = (uint64_t *)v8[1];
        }
      }

      while (v8 != (uint64_t *)(a1 + 920));
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  std::mutex::unlock(v19);
  return v11;
}

void sub_1000F17D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
}

uint64_t sub_1000F17F0( std::condition_variable *a1, std::unique_lock<std::mutex> *a2, uint64_t *a3, uint64_t a4)
{
  do
  {
    uint64_t v8 = *(void *)(a4 + 16);
    char v9 = atomic_load((unsigned int *)(*(void *)a4 + 336LL));
    if ((v9 & 4) != 0) {
      return 1LL;
    }
    if ((*(_DWORD *)(*(void *)a4 + 336LL) & 1) != 0) {
      return 1LL;
    }
    if (*(_BYTE *)(a4 + 8))
    {
      unsigned int v10 = (std::mutex *)(v8 + 488);
      std::mutex::lock((std::mutex *)(v8 + 488));
      uint64_t v11 = *(void *)(v8 + 480);
      std::mutex::unlock(v10);
      if (v11) {
        return 1LL;
      }
    }

    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v13 = *a3;
    if (*a3 <= v12.__d_.__rep_) {
      break;
    }
    if (!v13)
    {
      v14.__d_.__rep_ = 0LL;
      goto LABEL_14;
    }

    if (v13 < 1)
    {
      if ((unint64_t)v13 < 0xFFDF3B645A1CAC09LL)
      {
        v14.__d_.__rep_ = 0x8000000000000000LL;
        goto LABEL_14;
      }
    }

    else if ((unint64_t)v13 > 0x20C49BA5E353F7LL)
    {
      v14.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_14;
    }

    v14.__d_.__rep_ = 1000 * v13;
LABEL_14:
    std::condition_variable::__do_timed_wait(a1, a2, v14);
  }

  while (std::chrono::system_clock::now().__d_.__rep_ < *a3);
  uint64_t v15 = *(void *)(a4 + 16);
  char v16 = atomic_load((unsigned int *)(*(void *)a4 + 336LL));
  if ((v16 & 4) != 0 || (*(_DWORD *)(*(void *)a4 + 336LL) & 1) != 0) {
    return 1LL;
  }
  if (!*(_BYTE *)(a4 + 8)) {
    return 0LL;
  }
  std::mutex::lock((std::mutex *)(v15 + 488));
  BOOL v17 = *(void *)(v15 + 480) != 0LL;
  std::mutex::unlock((std::mutex *)(v15 + 488));
  return v17;
}

void *sub_1000F1960(void *a1)
{
  uint64_t v2 = a1 + 13;
  do
  {
    unint64_t v3 = __ldaxr(v2);
    unint64_t v4 = v3 - 1;
  }

  while (__stlxr(v4, v2));
  if (!v4)
  {
    uint64_t v5 = a1[17];
    a1[17] = -1LL;
    sub_1000EFB8C((uint64_t)(a1 + 13), v5, 1u);
  }

  sub_1000F0870(v2);
  uint64_t v6 = (void *)a1[11];
  if (v6 == a1 + 8)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = a1 + 8;
  }

  else
  {
    if (!v6) {
      goto LABEL_10;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_10:
  uint64_t v8 = (void *)a1[7];
  if (v8 == a1 + 4)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = a1 + 4;
  }

  else
  {
    if (!v8) {
      goto LABEL_15;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_15:
  unsigned int v10 = (void *)a1[3];
  if (v10 == a1)
  {
    uint64_t v11 = 4LL;
    unsigned int v10 = a1;
    goto LABEL_19;
  }

  if (v10)
  {
    uint64_t v11 = 5LL;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }

  return a1;
}

void *sub_1000F1A48(uint64_t a1)
{
  *(_BYTE *)(a1 + 704) = 0;
  if (*(void *)(a1 + 424))
  {
    unint64_t v3 = 0LL;
    do
    {
      unint64_t v4 = (unint64_t *)(*(void *)(a1 + 552) + 8 * v3);
      do
        uint64_t v5 = (unint64_t *)__ldaxr(v4);
      while (__stlxr(0LL, v4));
      if (v5)
      {
        unint64_t v1 = v1 & 0xFFFFFFFFFF000000LL | 0x10001;
        sub_1000F1434(a1, (unint64_t)v5, v1, 0LL);
        sub_1000EFDE8(v5 + 41);
        sub_1000F0870(v5 + 1);
        operator delete(v5);
      }

      ++v3;
    }

    while (*(void *)(a1 + 424) > v3);
  }

  sub_100101990((dispatch_queue_t *)(a1 + 712), &stru_100190708);
  uint64_t v6 = *(void **)(a1 + 552);
  if (v6) {
    operator delete[](v6);
  }
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v7 = *(void *)(a1 + 448);
  if (*(void *)(a1 + 456) != v7)
  {
    unint64_t v8 = *(void *)(a1 + 472);
    uint64_t v9 = (void *)(v7 + 8 * (v8 >> 9));
    unsigned int v10 = (unint64_t **)(*v9 + 8 * (v8 & 0x1FF));
    uint64_t v11 = *(void *)(v7 + (((*(void *)(a1 + 480) + v8) >> 6) & 0x3FFFFFFFFFFFFF8LL))
        + 8 * ((*(void *)(a1 + 480) + v8) & 0x1FF);
    while (v10 != (unint64_t **)v11)
    {
      std::chrono::system_clock::time_point v12 = *v10;
      if (*v10)
      {
        sub_1000EFDE8(v12 + 41);
        sub_1000F0870(v12 + 1);
        operator delete(v12);
      }

      if ((unint64_t **)((char *)++v10 - *v9) == (unint64_t **)4096)
      {
        uint64_t v13 = (unint64_t **)v9[1];
        ++v9;
        unsigned int v10 = v13;
      }
    }
  }

  std::mutex::unlock((std::mutex *)(a1 + 488));
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14 = *(void **)(a1 + 1376);
  if (v14 == (void *)(a1 + 1352))
  {
    uint64_t v15 = 4LL;
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v14 = (void *)(a1 + 1352);
  }

  else
  {
    if (!v14) {
      goto LABEL_22;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_22:
  char v16 = *(void **)(a1 + 1344);
  if (v16 == (void *)(a1 + 1320))
  {
    uint64_t v17 = 4LL;
    char v16 = (void *)(a1 + 1320);
  }

  else
  {
    if (!v16) {
      goto LABEL_27;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  sub_1000EFDE8((unint64_t *)(a1 + 1304));
  sub_1000F0870((void *)(a1 + 984));
  uint64_t v18 = *(void **)(a1 + 968);
  if (v18 == (void *)(a1 + 944))
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = (void *)(a1 + 944);
    goto LABEL_31;
  }

  if (v18)
  {
    uint64_t v19 = 5LL;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }

  sub_1000E3474((void *)(a1 + 920));
  std::mutex::~mutex((std::mutex *)(a1 + 856));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 808));
  std::mutex::~mutex((std::mutex *)(a1 + 744));
  sub_10000A494(a1 + 720, *(void **)(a1 + 728));
  sub_100101848((dispatch_object_s **)(a1 + 712));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 656));
  std::mutex::~mutex((std::mutex *)(a1 + 592));
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  sub_1000C1944((void *)(a1 + 440));
  return sub_1000F1960((void *)a1);
}

void *sub_1000F1CB4(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &off_100190738;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1000F1D00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0LL;
  if (v10) {
    sub_1000F1D80((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F1D24(std::__shared_weak_count *a1)
{
}

void sub_1000F1D38(uint64_t a1)
{
}

uint64_t sub_1000F1D40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void sub_1000F1D80(int a1, void **__p)
{
  if (__p)
  {
    unint64_t v3 = *__p;
    if (*__p)
    {
      __p[1] = v3;
      operator delete(v3);
    }

    operator delete(__p);
  }

void sub_1000F1DB8(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v50 = a2;
  uint64_t v7 = (std::mutex *)(a1 + 744);
  unint64_t v8 = (void *)(a1 + 728);
  uint64_t v9 = (unint64_t *)(a1 + 976);
  unsigned int v10 = (unint64_t *)(a1 + 560);
  unint64_t v43 = (unint64_t *)(a1 + 104);
  uint64_t v44 = (std::condition_variable *)(a1 + 808);
  uint64_t v45 = (uint64_t **)(a1 + 720);
  while (2)
  {
    __lk.__m_ = v7;
    __lk.__owns_ = 1;
    std::mutex::lock(v7);
    if (a3)
    {
      uint64_t v11 = v50;
    }

    else
    {
      char v16 = (void *)*v8;
      if (!*v8) {
        goto LABEL_20;
      }
      uint64_t v11 = v50;
      uint64_t v17 = v8;
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= v50;
        if (v18 >= v50) {
          char v20 = v16;
        }
        else {
          char v20 = v16 + 1;
        }
        if (v19) {
          uint64_t v17 = v16;
        }
        char v16 = (void *)*v20;
      }

      while (*v20);
      if (v17 == v8 || v50 < v17[4] || (unint64_t *)v17[5] == v9)
      {
LABEL_20:
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v21 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        atomic_store(v21, a4);
        a4[1] = (unint64_t)v8;
        sub_1000EFDE8((unint64_t *)&v51);
        goto LABEL_23;
      }
    }

    unint64_t v51 = (unint64_t *)v11;
    uint64_t v52 = v9;
    std::chrono::system_clock::time_point v12 = sub_1000E0F60(v45, (unint64_t *)&v51, (uint64_t *)&v51);
    uint64_t v13 = v12;
    if (v14)
    {
      unint64_t v51 = 0LL;
      *a4 = 0LL;
      do
        unint64_t v15 = __ldaxr((unint64_t *)&v51);
      while (__stlxr(0LL, (unint64_t *)&v51));
      atomic_store(v15, a4);
      a4[1] = (unint64_t)v12;
      sub_1000EFDE8((unint64_t *)&v51);
LABEL_23:
      int v22 = 1;
      goto LABEL_24;
    }

    unint64_t v48 = (unint64_t *)v12[5];
    if (v48 == v9)
    {
      uint64_t v28 = (void *)*v8;
      if (*v8)
      {
        unint64_t v29 = v50;
        unsigned int v30 = v8;
        while (1)
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= v29;
          if (v31 >= v29) {
            char v33 = v28;
          }
          else {
            char v33 = v28 + 1;
          }
          if (v32) {
            unsigned int v30 = v28;
          }
          uint64_t v28 = (void *)*v33;
          if (!*v33)
          {
            if (v30 == v8) {
              break;
            }
            if (v29 < v30[4]) {
              break;
            }
            unint64_t v34 = (unint64_t *)v30[5];
            if (v34 != v9)
            {
              unint64_t v35 = v34[41];
              if (v35)
              {
                if (!*(_BYTE *)(v35 + 312)) {
                  break;
                }
              }
            }

            if (!*(_BYTE *)(a1 + 704)) {
              break;
            }
            std::condition_variable::wait(v44, &__lk);
            uint64_t v28 = (void *)*v8;
            unsigned int v30 = v8;
            if (!*v8) {
              break;
            }
          }
        }
      }

      int v22 = 0;
      goto LABEL_24;
    }

    sub_10001ED54((uint64_t)&__lk);
    sub_1000EF9D0(&v47, v48 + 41);
    if (v47 && !*(_BYTE *)(v47 + 312))
    {
      uint64_t v23 = v50;
      if (*(void *)(v47 + 32) == v50)
      {
        *a4 = 0LL;
        do
          unint64_t v37 = __ldaxr(&v47);
        while (__stlxr(0LL, &v47));
        atomic_store(v37, a4);
        a4[1] = (unint64_t)v13;
        goto LABEL_84;
      }

      if (*(void *)(v47 + 32) == -1LL)
      {
        uint64_t v24 = v43;
        if ((a3 & 1) == 0)
        {
          unint64_t v51 = 0LL;
          *a4 = 0LL;
          do
            unint64_t v36 = __ldaxr((unint64_t *)&v51);
          while (__stlxr(0LL, (unint64_t *)&v51));
          goto LABEL_83;
        }

        goto LABEL_35;
      }
    }

    else
    {
      if (!a3)
      {
        unint64_t v51 = 0LL;
        *a4 = 0LL;
        do
          unint64_t v36 = __ldaxr((unint64_t *)&v51);
        while (__stlxr(0LL, (unint64_t *)&v51));
        goto LABEL_83;
      }

      uint64_t v23 = v50;
    }

    uint64_t v24 = v43;
LABEL_35:
    if (sub_1000F168C(a1, 0, v23, 1u) != -1)
    {
      do
        unint64_t v25 = __ldaxr(v10);
      while (__stlxr(v25 + 1, v10));
      v46.__m_ = (std::unique_lock<std::mutex>::mutex_type *)sub_10011E5C4((unint64_t)v48);
      v46.__owns_ = 1;
      std::mutex::lock(v46.__m_);
      unsigned int v26 = sub_10011E684((unint64_t)v48);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54 = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      unint64_t v51 = (unint64_t *)&v48;
      uint64_t v52 = &v47;
      unint64_t v53 = &v50;
      sub_1000F2694((std::condition_variable *)v26, &v46, &v54, (uint64_t)&v51);
      do
        unint64_t v27 = __ldaxr(v10);
      while (__stlxr(v27 - 1, v10));
      if (v46.__owns_) {
        std::mutex::unlock(v46.__m_);
      }
      int v22 = 3;
      goto LABEL_85;
    }

    unint64_t v51 = 0LL;
    unint64_t v38 = atomic_load(v24);
    if (!v38) {
      goto LABEL_81;
    }
    while (1)
    {
      unint64_t v39 = __ldaxr(v24);
      if (v39 != v38)
      {
        __clrex();
        goto LABEL_71;
      }

      if (!__stlxr(v38 + 1, v24)) {
        break;
      }
LABEL_71:
      unint64_t v38 = v39;
      if (!v39) {
        goto LABEL_81;
      }
    }

    uint64_t v40 = *(unint64_t **)(a1 + 400);
    unint64_t v38 = (unint64_t)v24;
    if (v40)
    {
      do
        unint64_t v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(void *)(a1 + 40_Block_object_dispose((const void *)(v2 - 120), 8) = v41;
      unint64_t v38 = (unint64_t)v24;
    }

void sub_1000F2218( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, int a14, unint64_t a15, uint64_t a16, std::mutex *a17, char a18)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_1000F2278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  unint64_t v12 = 0LL;
  uint64_t v6 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v7 = *(void *)(a1 + 480);
  if (v7)
  {
    ++*(void *)(a1 + 472);
    *(void *)(a1 + 480) = v7 - 1;
    sub_1000E1270(a1 + 440, 1);
    sub_1000F24A4(a1, v8, a2, v13);
    sub_1000EEFB4(&v12, v13);
    sub_1000EFDE8(v13);
  }

  else
  {
    unint64_t v8 = 0LL;
  }

  std::mutex::unlock(v6);
  unint64_t v9 = atomic_load((unint64_t *)(a1 + 576));
  if (v9 + v7 >= *(void *)(a1 + 432))
  {
    sub_1000F168C(a1, 0, 0LL, 0);
  }

  else
  {
    v13[0] = (unint64_t)_NSConcreteStackBlock;
    v13[1] = 0x40000000LL;
    void v13[2] = (unint64_t)sub_1000F2818;
    v13[3] = (unint64_t)&unk_1001907A0;
    v13[4] = a1;
    sub_100101908((dispatch_queue_t *)(a1 + 712), v13);
  }

  *a3 = v8;
  a3[1] = 0LL;
  do
    unint64_t v10 = __ldaxr(&v12);
  while (__stlxr(0LL, &v12));
  atomic_store(v10, (unint64_t *)a3 + 1);
  return sub_1000EFDE8(&v12);
}

void sub_1000F23CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
}

unint64_t sub_1000F2400(void *a1)
{
  unint64_t v1 = atomic_load(a1 + 71);
  uint64_t v2 = a1[53];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  int v4 = 0;
  unint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = a1[69];
    uint64_t v7 = *(void *)(v6 + 8 * v3);
    if (v7 && v1 - *(void *)(v7 + 312) != -1LL)
    {
      unint64_t v5 = *(void *)(v6 + 8 * v3);
      int v4 = v3;
    }

    ++v3;
  }

  while (v2 != v3);
  if (!v5) {
    return 0LL;
  }
  unint64_t v8 = (unint64_t *)(a1[69] + 8LL * v4);
  do
  {
    unint64_t v9 = __ldaxr(v8);
    if (v9 != v5)
    {
      __clrex();
      return 0LL;
    }
  }

  while (__stlxr(0LL, v8));
  return v5;
}

unint64_t *sub_1000F24A4@<X0>( uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v7 = a2 + 1;
  unint64_t v17 = 0LL;
  unint64_t v8 = atomic_load(a2 + 1);
  if (!v8)
  {
LABEL_7:
    uint64_t v7 = 0LL;
    goto LABEL_11;
  }

  while (1)
  {
    unint64_t v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(v8 + 1, v7)) {
      break;
    }
LABEL_6:
    unint64_t v8 = v9;
    if (!v9) {
      goto LABEL_7;
    }
  }

  unint64_t v10 = (unint64_t *)a2[38];
  if (v10)
  {
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    a2[39] = v11;
  }

unint64_t *sub_1000F25C0(unint64_t *a1, unint64_t *a2, int a3)
{
  uint64_t v3 = a2;
  *a1 = 0LL;
  if (!a2) {
    goto LABEL_9;
  }
  unint64_t v5 = atomic_load(a2);
  if (!v5) {
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v6 = __ldaxr(a2);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_7;
    }

    if (!__stlxr(v5 + 1, a2)) {
      break;
    }
LABEL_7:
    unint64_t v5 = v6;
    if (!v6) {
      goto LABEL_8;
    }
  }

  unint64_t v8 = (unint64_t *)a2[37];
  if (v8)
  {
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2[38] = v9;
  }

  if (a3 && !sub_1000EFAA0((uint64_t)a2))
  {
    do
      unint64_t v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (v10 == 1)
    {
      uint64_t v11 = v3[4];
      v3[4] = -1LL;
      sub_1000EFB8C((uint64_t)v3, v11, 1u);
    }

BOOL sub_1000F2694( std::condition_variable *a1, std::unique_lock<std::mutex> *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4)
{
  do
  {
    if ((*(_DWORD *)(**(void **)a4 + 336LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t v8 = *(void *)(a4 + 8);
    if (*(void *)v8)
    {
      if (!*(_BYTE *)(*(void *)v8 + 312LL) && *(void *)(*(void *)v8 + 32LL) == **(void **)(a4 + 16)) {
        return 1LL;
      }
    }

    if (*a3 <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = *a3;
    v10.__d_.__rep_ = v9 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v10.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v11.__d_.__rep_)
      {
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ < 0xFFDF3B645A1CAC09LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000LL;
            goto LABEL_17;
          }
        }

        else if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7LL)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_15;
        }

        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
      }

      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0LL;
      }

uint64_t sub_1000F2818(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = sub_1000F2400(v1);
  if (v2) {
    sub_1000F0EEC((uint64_t)v1, v2);
  }
  return sub_1000F168C((uint64_t)v1, 0, 0LL, 0);
}

unint64_t *sub_1000F285C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + 8);
  sub_1000F04FC(a1 + 8, a2);
  unint64_t v12 = 0LL;
  unint64_t v4 = atomic_load(v3);
  if (!v4) {
    goto LABEL_11;
  }
  while (1)
  {
    unint64_t v5 = __ldaxr(v3);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }

    if (!__stlxr(v4 + 1, v3)) {
      break;
    }
LABEL_6:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_11;
    }
  }

  unint64_t v6 = *(unint64_t **)(a1 + 304);
  unint64_t v4 = (unint64_t)v3;
  if (v6)
  {
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    *(void *)(a1 + 312) = v7;
    unint64_t v4 = (unint64_t)v3;
  }

void sub_1000F294C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  uint64_t v6 = a1 + 40;
  sub_1000EFD44(a1 + 40);
  sub_1000F2A18(v6, a2, a3);
  *(_BYTE *)(a1 + 192) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000F29F0(a1);
}

void sub_1000F29B8(void *a1)
{
  *(_BYTE *)(v1 + 312) = 1;
  sub_1000F29F0(v1);
  __cxa_rethrow();
}

void sub_1000F29DC(_Unwind_Exception *a1)
{
}

void sub_1000F29F0(uint64_t a1)
{
}

uint64_t sub_1000F2A18(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v6 = *a3;
  *(void *)a1 = v4;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  if (v5)
  {
    uint64_t p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = 1018212795LL;
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 850045863LL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + sub_100006224(v49 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v5)
  {
    unint64_t v9 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_1000F2AC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 304) = **(void **)(a1 + 296);
  uint64_t v6 = a1 + 40;
  sub_1000EFD44(a1 + 40);
  sub_1000F2B6C(v6, a2, a3);
  *(_BYTE *)(a1 + 192) = 1;
  atomic_store(2u, (unsigned int *)(a1 + 24));
  sub_1000F29F0(a1);
}

void sub_1000F2B34(void *a1)
{
  *(_BYTE *)(v1 + 312) = 1;
  sub_1000F29F0(v1);
  __cxa_rethrow();
}

void sub_1000F2B58(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F2B6C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    uint64_t p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    uint64_t v8 = *a3;
    *(void *)a1 = v4;
    *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v8 = *a3;
    *(void *)a1 = v4;
    *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  }

  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = 1018212795LL;
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 850045863LL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + sub_100006224(v49 + 112) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  if (v5)
  {
    unint64_t v10 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return a1;
}

void sub_1000F2C34(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x68uLL);
  sub_1000F2C9C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1000F2C88(_Unwind_Exception *a1)
{
}

void *sub_1000F2C9C(void *a1, void *a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001894D0;
  sub_1000F2CE4(a1 + 3, a2, a3);
  return a1;
}

void sub_1000F2CD0(_Unwind_Exception *a1)
{
}

void *sub_1000F2CE4(void *a1, void *a2, void *a3)
{
  unint64_t v5 = sub_10004683C(a1, a3);
  *unint64_t v5 = off_1001901F8;
  uint64_t v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6)
  {
    unint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  sub_1000EF9D0(a1 + 9, a2 + 9);
  return a1;
}

void sub_1000F2D7C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F2DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)a1 = 2037149547;
  LODWORD(v29) = 2037149547;
  sub_100019FE4((uint64_t)"header_signature", 2037149547, &v29, 1LL);
  *(_DWORD *)(a1 + 4) = 4;
  LODWORD(v29) = 4;
  sub_100019FE4((uint64_t)"version_t", 4, &v29, 1LL);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 512;
  LODWORD(v29) = 512;
  sub_100019FE4((uint64_t)"header_size_t", 512, &v29, 1LL);
  sub_1000FCE3C((_DWORD *)(a1 + 12), 1);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + sub_100006224(v6 - 32) = a3;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  unint64_t v29 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_num_t", 0, &v29, 2LL);
  *(_DWORD *)(a1 + 60) = 0;
  unint64_t v29 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_count_t", 0, &v29, 2LL);
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = *(void *)a4;
  __int128 v14 = *(_OWORD *)(a4 + 72);
  __int128 v15 = *(_OWORD *)(a4 + 88);
  __int128 v16 = *(_OWORD *)(a4 + 104);
  __int128 v17 = *(_OWORD *)(a4 + 120);
  __int128 v18 = *(_OWORD *)(a4 + 8);
  __int128 v19 = *(_OWORD *)(a4 + 24);
  __int128 v20 = *(_OWORD *)(a4 + 40);
  __int128 v21 = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 120) = v20;
  *(_OWORD *)(a1 + 104) = v19;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v18;
  *(_OWORD *)(a1 + 200) = v17;
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  *(void *)(a1 + 216) = a5;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = *(void *)a6;
  __int128 v22 = *(_OWORD *)(a6 + 8);
  __int128 v23 = *(_OWORD *)(a6 + 24);
  __int128 v24 = *(_OWORD *)(a6 + 40);
  *(_OWORD *)(a1 + 40_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a6 + 56);
  *(_OWORD *)(a1 + 392) = v24;
  *(_OWORD *)(a1 + 376) = v23;
  *(_OWORD *)(a1 + 360) = v22;
  __int128 v25 = *(_OWORD *)(a6 + 72);
  __int128 v26 = *(_OWORD *)(a6 + 88);
  __int128 v27 = *(_OWORD *)(a6 + 104);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a6 + 120);
  *(_OWORD *)(a1 + 456) = v27;
  *(_OWORD *)(a1 + 440) = v26;
  *(_OWORD *)(a1 + 424) = v25;
  *(_DWORD *)(a1 + 48_Block_object_dispose((const void *)(v2 - 120), 8) = 2;
  unint64_t v29 = &_mh_execute_header;
  int v30 = 2;
  sub_100019FE4((uint64_t)"image_variant_type", 2, &v29, 3LL);
  *(void *)(a1 + 492) = a7;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  unint64_t v29 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_num_t", 1, &v29, 2LL);
  *(_DWORD *)(a1 + 56) = 1;
  unint64_t v29 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_count_t", 1, &v29, 2LL);
  *(_DWORD *)(a1 + 60) = 1;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  return a1;
}

uLong sub_1000F3064(unsigned int *a1)
{
  uLong result = *a1;
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 2)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Unknown checksum found", 0x16u);
    }

    return crc32(0LL, 0LL, 0) << 32;
  }

  return result;
}

uint64_t sub_1000F30CC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = 0u;
  unint64_t v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v37 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_num_t", 0, &v37, 2LL);
  *(_DWORD *)(a1 + 60) = 0;
  unint64_t v37 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_count_t", 0, &v37, 2LL);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 20_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + sub_100006224(v49 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_100019F4C((_DWORD *)(a1 + 80));
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 2sub_100006224(v6 - 32) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  sub_100019F4C((_DWORD *)(a1 + 352));
  *(_DWORD *)(a1 + 356) = 0;
  *(_DWORD *)(a1 + 48_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  unint64_t v37 = &_mh_execute_header;
  LODWORD(v3_Block_object_dispose((const void *)(v2 - 120), 8) = 2;
  sub_100019FE4((uint64_t)"image_variant_type", 0, &v37, 3LL);
  *(void *)(a1 + 492) = 0LL;
  int v6 = *(_DWORD *)a2;
  LODWORD(v37) = 2037149547;
  sub_100019FE4((uint64_t)"header_signature", v6, &v37, 1LL);
  *(_DWORD *)a1 = 2037149547;
  int v7 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v37) = 4;
  sub_100019FE4((uint64_t)"version_t", v7, &v37, 1LL);
  *(_DWORD *)(a1 + 4) = 4;
  int v8 = bswap32(*(_DWORD *)(a2 + 8));
  LODWORD(v37) = 512;
  sub_100019FE4((uint64_t)"header_size_t", v8, &v37, 1LL);
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 512;
  sub_1000FCE3C(&v37, bswap32(*(_DWORD *)(a2 + 12)));
  *(_DWORD *)(a1 + 12) = (_DWORD)v37;
  *uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *unint64_t v5 = bswap64(*(void *)(a2 + 32));
  *(void *)(a1 + 40) = bswap64(*(void *)(a2 + 40));
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a2 + 48));
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 56));
  unint64_t v37 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_num_t", (int)v5, &v37, 2LL);
  *(_DWORD *)(a1 + 56) = (_DWORD)v5;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 60));
  unint64_t v37 = &_mh_execute_header;
  sub_100019FE4((uint64_t)"segment_count_t", (int)v5, &v37, 2LL);
  *(_DWORD *)(a1 + 60) = (_DWORD)v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_100019F4C(v36);
  __int128 v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v36[112] = v9;
  *(void *)&v36[128] = *(void *)(a2 + 208);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v36[32] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v36[48] = v10;
  __int128 v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v36[80] = v11;
  __int128 v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)unint64_t v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v36[16] = v12;
  __int128 v42 = *(_OWORD *)&v36[72];
  __int128 v43 = *(_OWORD *)&v36[88];
  __int128 v44 = *(_OWORD *)&v36[104];
  __int128 v45 = *(_OWORD *)&v36[120];
  __int128 v38 = *(_OWORD *)&v36[8];
  __int128 v39 = *(_OWORD *)&v36[24];
  __int128 v40 = *(_OWORD *)&v36[40];
  __int128 v41 = *(_OWORD *)&v36[56];
  unint64_t v37 = *(const mach_header_64 **)v36;
  sub_1000F48C0((uint64_t)&v37, (int *)&v27);
  *(void *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 152) = v32;
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = v33;
  *(_OWORD *)(a1 + 184) = v34;
  *(_OWORD *)(a1 + 200) = v35;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v28;
  *(_OWORD *)(a1 + 104) = v29;
  *(_OWORD *)(a1 + 120) = v30;
  *(_OWORD *)(a1 + 136) = v31;
  *(void *)(a1 + 216) = bswap64(*(void *)(a2 + 216));
  *(void *)(a1 + 224) = bswap64(*(void *)(a2 + 224));
  __int128 v13 = *(_OWORD *)(a2 + 232);
  __int128 v14 = *(_OWORD *)(a2 + 248);
  __int128 v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v15;
  *(_OWORD *)(a1 + 24_Block_object_dispose((const void *)(v2 - 120), 8) = v14;
  *(_OWORD *)(a1 + 2sub_100006224(v6 - 32) = v13;
  *(void *)(a1 + 296) = bswap64(*(void *)(a2 + 296));
  *(void *)(a1 + 304) = bswap64(*(void *)(a2 + 304));
  __int128 v16 = *(_OWORD *)(a2 + 312);
  __int128 v17 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 32_Block_object_dispose((const void *)(v2 - 120), 8) = v17;
  sub_100019F4C(v36);
  __int128 v18 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)&v36[96] = *(_OWORD *)(a2 + 448);
  *(_OWORD *)&v36[112] = v18;
  *(void *)&v36[128] = *(void *)(a2 + 480);
  __int128 v19 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)&v36[32] = *(_OWORD *)(a2 + 384);
  *(_OWORD *)&v36[48] = v19;
  __int128 v20 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a2 + 416);
  *(_OWORD *)&v36[80] = v20;
  __int128 v21 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)unint64_t v36 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)&v36[16] = v21;
  __int128 v42 = *(_OWORD *)&v36[72];
  __int128 v43 = *(_OWORD *)&v36[88];
  __int128 v44 = *(_OWORD *)&v36[104];
  __int128 v45 = *(_OWORD *)&v36[120];
  __int128 v38 = *(_OWORD *)&v36[8];
  __int128 v39 = *(_OWORD *)&v36[24];
  __int128 v40 = *(_OWORD *)&v36[40];
  __int128 v41 = *(_OWORD *)&v36[56];
  unint64_t v37 = *(const mach_header_64 **)v36;
  sub_1000F48C0((uint64_t)&v37, (int *)&v27);
  *(void *)(a1 + 352) = v27;
  __int128 v22 = v33;
  *(_OWORD *)(a1 + 424) = v32;
  *(_OWORD *)(a1 + 440) = v22;
  __int128 v23 = v35;
  *(_OWORD *)(a1 + 456) = v34;
  *(_OWORD *)(a1 + 472) = v23;
  __int128 v24 = v29;
  *(_OWORD *)(a1 + 360) = v28;
  *(_OWORD *)(a1 + 376) = v24;
  __int128 v25 = v31;
  *(_OWORD *)(a1 + 392) = v30;
  *(_OWORD *)(a1 + 40_Block_object_dispose((const void *)(v2 - 120), 8) = v25;
  LODWORD(v5) = bswap32(*(_DWORD *)(a2 + 488));
  unint64_t v37 = &_mh_execute_header;
  LODWORD(v3_Block_object_dispose((const void *)(v2 - 120), 8) = 2;
  sub_100019FE4((uint64_t)"image_variant_type", (int)v5, &v37, 3LL);
  *(_DWORD *)(a1 + 48_Block_object_dispose((const void *)(v2 - 120), 8) = (_DWORD)v5;
  *(void *)(a1 + 492) = bswap64(*(void *)(a2 + 492));
  return a1;
}

void sub_1000F35B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F35CC(uint64_t a1, uint64_t a2)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v13 = "*udif::header::write(char *)";
    *((void *)&v13 + 1) = 20LL;
    int v14 = 2;
    sub_1000F3780(v15, &v13);
    uint64_t v4 = sub_1000F3868(&v16, a1);
    std::ostream::~ostream(v4, off_100190900);
    sub_1000F99E0((uint64_t)v15);
    std::ios::~ios(&v17);
  }

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap32(*(_DWORD *)(a1 + 8));
  *(_DWORD *)(a2 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(void *)(a2 + sub_100006224(v6 - 32) = bswap64(*(void *)(a1 + 32));
  *(void *)(a2 + 40) = bswap64(*(void *)(a1 + 40));
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a1 + 48));
  *(_DWORD *)(a2 + 56) = bswap32(*(_DWORD *)(a1 + 56));
  *(_DWORD *)(a2 + 60) = bswap32(*(_DWORD *)(a1 + 60));
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  uint64_t v5 = sub_1000F4B00(a1 + 80, a2 + 80);
  *(void *)uint64_t v5 = bswap64(*(void *)(a1 + 216));
  *(void *)(v5 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a1 + 224));
  __int128 v6 = *(_OWORD *)(a1 + 232);
  __int128 v7 = *(_OWORD *)(a1 + 248);
  __int128 v8 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(v5 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(v5 + 64) = v8;
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + sub_100006224(v6 - 32) = v7;
  *(void *)(v5 + 80) = bswap64(*(void *)(a1 + 296));
  *(void *)(v5 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a1 + 304));
  __int128 v10 = *(_OWORD *)(a1 + 312);
  __int128 v9 = *(_OWORD *)(a1 + 328);
  *(void *)(v5 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = *(void *)(a1 + 344);
  *(_OWORD *)(v5 + 96) = v10;
  *(_OWORD *)(v5 + sub_100006224(v49 + 112) = v9;
  uint64_t v11 = sub_1000F4B00(a1 + 352, v5 + 136);
  *(_DWORD *)uint64_t v11 = bswap32(*(_DWORD *)(a1 + 488));
  *(void *)(v11 + 4) = bswap64(*(void *)(a1 + 492));
  return v11 + 12;
}

void sub_1000F376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000F3780(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FCF0C((uint64_t)a1, a2);
  *a1 = off_100190838;
  a1[45] = &off_100190938;
  a1[46] = &off_100190960;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100190838;
  a1[45] = off_1001908C0;
  a1[46] = off_1001908E8;
  return a1;
}

void sub_1000F3804(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F3828(uint64_t a1)
{
  return a1;
}

void *sub_1000F3868(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000552C(a1, (uint64_t)"header (", 8LL);
  uint64_t v5 = (void *)std::ostream::operator<<(v4, 500LL);
  __int128 v6 = sub_10000552C(v5, (uint64_t)"):", 2LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24LL)));
  __int128 v7 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v6, v8);
  std::ostream::flush(v6);
  int v9 = *(_DWORD *)(a2 + 12);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v157 = *(_DWORD *)(a2 + 60);
  int v158 = *(_DWORD *)(a2 + 56);
  uint64_t v155 = *(void *)(a2 + 72);
  uint64_t v156 = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 80);
  __int128 v16 = *(_OWORD *)(a2 + 168);
  __int128 v179 = *(_OWORD *)(a2 + 152);
  __int128 v180 = v16;
  __int128 v17 = *(_OWORD *)(a2 + 200);
  __int128 v181 = *(_OWORD *)(a2 + 184);
  __int128 v182 = v17;
  __int128 v18 = *(_OWORD *)(a2 + 104);
  __int128 v175 = *(_OWORD *)(a2 + 88);
  __int128 v176 = v18;
  __int128 v19 = *(_OWORD *)(a2 + 136);
  __int128 v177 = *(_OWORD *)(a2 + 120);
  __int128 v178 = v19;
  uint64_t v153 = *(void *)(a2 + 224);
  uint64_t v154 = *(void *)(a2 + 216);
  __int128 v20 = *(_OWORD *)(a2 + 248);
  __int128 v171 = *(_OWORD *)(a2 + 232);
  __int128 v172 = v20;
  __int128 v21 = *(_OWORD *)(a2 + 280);
  __int128 v173 = *(_OWORD *)(a2 + 264);
  __int128 v174 = v21;
  uint64_t v151 = *(void *)(a2 + 304);
  uint64_t v152 = *(void *)(a2 + 296);
  __int128 v22 = *(_OWORD *)(a2 + 328);
  __int128 v168 = *(_OWORD *)(a2 + 312);
  __int128 v169 = v22;
  uint64_t v170 = *(void *)(a2 + 344);
  uint64_t v23 = *(void *)(a2 + 352);
  __int128 v24 = *(_OWORD *)(a2 + 440);
  __int128 v164 = *(_OWORD *)(a2 + 424);
  __int128 v165 = v24;
  __int128 v25 = *(_OWORD *)(a2 + 472);
  __int128 v166 = *(_OWORD *)(a2 + 456);
  __int128 v167 = v25;
  __int128 v26 = *(_OWORD *)(a2 + 376);
  __int128 v160 = *(_OWORD *)(a2 + 360);
  __int128 v161 = v26;
  __int128 v27 = *(_OWORD *)(a2 + 408);
  __int128 v162 = *(_OWORD *)(a2 + 392);
  __int128 v163 = v27;
  int v150 = *(_DWORD *)(a2 + 488);
  uint64_t v149 = *(void *)(a2 + 492);
  __int128 v28 = sub_10000552C(a1, (uint64_t)"signature", 9LL);
  __int128 v29 = sub_10000552C(v28, (uint64_t)": ", 2LL);
  v183[23] = 4;
  strcpy(v183, "koly");
  __int128 v30 = sub_10000552C(v29, (uint64_t)v183, 4LL);
  if ((v183[23] & 0x80000000) != 0) {
    operator delete(*(void **)v183);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
  __int128 v31 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v30, v32);
  std::ostream::flush(v30);
  __int128 v33 = sub_10000552C(a1, (uint64_t)"version", 7LL);
  __int128 v34 = sub_10000552C(v33, (uint64_t)": ", 2LL);
  __int128 v35 = (void *)std::ostream::operator<<(v34, 4LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24LL)));
  unint64_t v36 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v35, v37);
  std::ostream::flush(v35);
  __int128 v38 = sub_10000552C(a1, (uint64_t)"header_size", 11LL);
  __int128 v39 = sub_10000552C(v38, (uint64_t)": ", 2LL);
  __int128 v40 = (void *)std::ostream::operator<<(v39, 512LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24LL)));
  __int128 v41 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v40, v42);
  std::ostream::flush(v40);
  __int128 v43 = sub_10000552C(a1, (uint64_t)"flags", 5LL);
  __int128 v44 = sub_10000552C(v43, (uint64_t)": ", 2LL);
  LODWORD(v159.__locale_) = v9;
  __int128 v45 = sub_1000FCF88(v44, (int *)&v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24LL)));
  std::unique_lock<std::mutex> v46 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v47 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v45, v47);
  std::ostream::flush(v45);
  unint64_t v48 = sub_10000552C(a1, (uint64_t)"run_data_fork_offset", 20LL);
  uint64_t v49 = sub_10000552C(v48, (uint64_t)": ", 2LL);
  uint64_t v50 = *v49;
  unint64_t v51 = (char *)v49 + *(void *)(*v49 - 24);
  LODWORD(v47) = *((_DWORD *)v51 + 2);
  *((_DWORD *)v51 + 2) = v47 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v49 + *(void *)(v50 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  uint64_t v52 = sub_10000EDBC(v49, v183);
  std::ostream::operator<<(v52, v10);
  uint64_t v53 = *v49;
  *(_DWORD *)((char *)v49 + *(void *)(*v49 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = v47;
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(v53 - 24)));
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v49, v55);
  std::ostream::flush(v49);
  unint64_t v56 = sub_10000552C(a1, (uint64_t)"data_fork_offset", 16LL);
  uint64_t v57 = sub_10000552C(v56, (uint64_t)": ", 2LL);
  uint64_t v58 = *v57;
  unint64_t v59 = (char *)v57 + *(void *)(*v57 - 24);
  LODWORD(v49) = *((_DWORD *)v59 + 2);
  *((_DWORD *)v59 + 2) = v49 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v57 + *(void *)(v58 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  __int128 v60 = sub_10000EDBC(v57, v183);
  std::ostream::operator<<(v60, v11);
  uint64_t v61 = *v57;
  *(_DWORD *)((char *)v57 + *(void *)(*v57 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = (_DWORD)v49;
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(v61 - 24)));
  unint64_t v62 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v57, v63);
  std::ostream::flush(v57);
  uint64_t v64 = sub_10000552C(a1, (uint64_t)"data_fork_len", 13LL);
  unint64_t v65 = sub_10000552C(v64, (uint64_t)": ", 2LL);
  uint64_t v66 = (void *)std::ostream::operator<<(v65, v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24LL)));
  uint64_t v67 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v66, v68);
  std::ostream::flush(v66);
  uint64_t v69 = sub_10000552C(a1, (uint64_t)"rsrc_fork_offset", 16LL);
  uint64_t v70 = sub_10000552C(v69, (uint64_t)": ", 2LL);
  uint64_t v71 = *v70;
  uint64_t v72 = (char *)v70 + *(void *)(*v70 - 24);
  LODWORD(v6_Block_object_dispose((const void *)(v2 - 120), 8) = *((_DWORD *)v72 + 2);
  *((_DWORD *)v72 + 2) = v68 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v70 + *(void *)(v71 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  __int128 v73 = sub_10000EDBC(v70, v183);
  std::ostream::operator<<(v73, v12);
  uint64_t v74 = *v70;
  *(_DWORD *)((char *)v70 + *(void *)(*v70 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = v68;
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(void *)(v74 - 24)));
  uint64_t v75 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v76 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v70, v76);
  std::ostream::flush(v70);
  unint64_t v77 = sub_10000552C(a1, (uint64_t)"rsrc_fork_len", 13LL);
  uint64_t v78 = sub_10000552C(v77, (uint64_t)": ", 2LL);
  uint64_t v79 = (void *)std::ostream::operator<<(v78, v14);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(void *)(*v79 - 24LL)));
  unint64_t v80 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v81 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v79, v81);
  std::ostream::flush(v79);
  unint64_t v82 = sub_10000552C(a1, (uint64_t)"segment_num", 11LL);
  unint64_t v83 = sub_10000552C(v82, (uint64_t)": ", 2LL);
  LODWORD(v159.__locale_) = v158;
  unint64_t v84 = sub_1000FD044(v83, &v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24LL)));
  uint64_t v85 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v86 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v84, v86);
  std::ostream::flush(v84);
  uint64_t v87 = sub_10000552C(a1, (uint64_t)"segment_count", 13LL);
  uint64_t v88 = sub_10000552C(v87, (uint64_t)": ", 2LL);
  LODWORD(v159.__locale_) = v157;
  unint64_t v89 = sub_1000FD088(v88, &v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24LL)));
  __int128 v90 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v91 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v89, v91);
  std::ostream::flush(v89);
  *(void *)__int128 v183 = v156;
  *(void *)&v183[8] = v155;
  uint64_t v92 = sub_10000552C(a1, (uint64_t)"segment_id", 10LL);
  uint64_t v93 = sub_10000552C(v92, (uint64_t)": ", 2LL);
  sub_1000FD0CC(v93, (uint64_t)v183, 16LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24LL)));
  unint64_t v94 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  uint64_t v95 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10LL);
  std::locale::~locale(&v159);
  std::ostream::put(v93, v95);
  std::ostream::flush(v93);
  *(void *)__int128 v183 = v15;
  __int128 v184 = v179;
  __int128 v185 = v180;
  __int128 v186 = v181;
  __int128 v187 = v182;
  *(_OWORD *)&v183[8] = v175;
  *(_OWORD *)&v183[24] = v176;
  *(_OWORD *)&v183[40] = v177;
  *(_OWORD *)&v183[56] = v178;
  uint64_t v96 = sub_10000552C(a1, (uint64_t)"data_fork_checksum", 18LL);
  int v97 = sub_10000552C(v96, (uint64_t)": ", 2LL);
  sub_1000F5A58(v97, (int *)v183);
  std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(void *)(*v97 - 24LL)));
  unint64_t v98 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  uint64_t v99 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10LL);
  std::locale::~locale(&v159);
  std::ostream::put(v97, v99);
  std::ostream::flush(v97);
  uint64_t v100 = sub_10000552C(a1, (uint64_t)"xml_offset", 10LL);
  uint64_t v101 = sub_10000552C(v100, (uint64_t)": ", 2LL);
  uint64_t v102 = *v101;
  uint64_t v103 = (char *)v101 + *(void *)(*v101 - 24);
  LODWORD(v99) = *((_DWORD *)v103 + 2);
  *((_DWORD *)v103 + 2) = v99 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v101 + *(void *)(v102 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  char v104 = sub_10000EDBC(v101, v183);
  std::ostream::operator<<(v104, v154);
  uint64_t v105 = *v101;
  *(_DWORD *)((char *)v101 + *(void *)(*v101 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = v99;
  std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(void *)(v105 - 24)));
  uint64_t v106 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v107 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v101, v107);
  std::ostream::flush(v101);
  uint64_t v108 = sub_10000552C(a1, (uint64_t)"xml_length", 10LL);
  uint64_t v109 = sub_10000552C(v108, (uint64_t)": ", 2LL);
  uint64_t v110 = (void *)std::ostream::operator<<(v109, v153);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(void *)(*v110 - 24LL)));
  char v111 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v112 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v110, v112);
  std::ostream::flush(v110);
  *(_OWORD *)__int128 v183 = v171;
  *(_OWORD *)&v183[16] = v172;
  *(_OWORD *)&v183[32] = v173;
  *(_OWORD *)&v183[48] = v174;
  uint64_t v113 = sub_10000552C(a1, (uint64_t)"external", 8LL);
  __int128 v114 = sub_10000552C(v113, (uint64_t)": ", 2LL);
  sub_1000FD0CC(v114, (uint64_t)v183, 64LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(void *)(*v114 - 24LL)));
  __int128 v115 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  uint64_t v116 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10LL);
  std::locale::~locale(&v159);
  std::ostream::put(v114, v116);
  std::ostream::flush(v114);
  char v117 = sub_10000552C(a1, (uint64_t)"code_sign_offset", 16LL);
  uint64_t v118 = sub_10000552C(v117, (uint64_t)": ", 2LL);
  uint64_t v119 = *v118;
  uint64_t v120 = (char *)v118 + *(void *)(*v118 - 24);
  LODWORD(v116) = *((_DWORD *)v120 + 2);
  *((_DWORD *)v120 + 2) = v116 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v118 + *(void *)(v119 - 24) + 8) |= 0x200u;
  v183[0] = 48;
  unint64_t v121 = sub_10000EDBC(v118, v183);
  std::ostream::operator<<(v121, v152);
  uint64_t v122 = *v118;
  *(_DWORD *)((char *)v118 + *(void *)(*v118 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = v116;
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(void *)(v122 - 24)));
  uint64_t v123 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v124 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v118, v124);
  std::ostream::flush(v118);
  unint64_t v125 = sub_10000552C(a1, (uint64_t)"code_sign_length", 16LL);
  uint64_t v126 = sub_10000552C(v125, (uint64_t)": ", 2LL);
  __int128 v127 = (void *)std::ostream::operator<<(v126, v151);
  std::ios_base::getloc((const std::ios_base *)((char *)v127 + *(void *)(*v127 - 24LL)));
  __int128 v128 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v129 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v127, v129);
  std::ostream::flush(v127);
  *(_OWORD *)__int128 v183 = v168;
  *(_OWORD *)&v183[16] = v169;
  *(void *)&v183[32] = v170;
  char v130 = sub_10000552C(a1, (uint64_t)"reserved", 8LL);
  uint64_t v131 = sub_10000552C(v130, (uint64_t)": ", 2LL);
  sub_1000FD0CC(v131, (uint64_t)v183, 40LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v131 + *(void *)(*v131 - 24LL)));
  char v132 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  uint64_t v133 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v132->__vftable[2].~facet_0)(v132, 10LL);
  std::locale::~locale(&v159);
  std::ostream::put(v131, v133);
  std::ostream::flush(v131);
  *(void *)__int128 v183 = v23;
  __int128 v184 = v164;
  __int128 v185 = v165;
  __int128 v186 = v166;
  __int128 v187 = v167;
  *(_OWORD *)&v183[8] = v160;
  *(_OWORD *)&v183[24] = v161;
  *(_OWORD *)&v183[40] = v162;
  *(_OWORD *)&v183[56] = v163;
  unint64_t v134 = sub_10000552C(a1, (uint64_t)"master_checksum", 15LL);
  char v135 = sub_10000552C(v134, (uint64_t)": ", 2LL);
  sub_1000F5A58(v135, (int *)v183);
  std::ios_base::getloc((const std::ios_base *)((char *)v135 + *(void *)(*v135 - 24LL)));
  uint64_t v136 = std::locale::use_facet(&v159, &std::ctype<char>::id);
  uint64_t v137 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v136->__vftable[2].~facet_0)(v136, 10LL);
  std::locale::~locale(&v159);
  std::ostream::put(v135, v137);
  std::ostream::flush(v135);
  char v138 = sub_10000552C(a1, (uint64_t)"image_variant", 13LL);
  char v139 = sub_10000552C(v138, (uint64_t)": ", 2LL);
  LODWORD(v159.__locale_) = v150;
  __int128 v140 = sub_1000FD218(v139, &v159);
  std::ios_base::getloc((const std::ios_base *)((char *)v140 + *(void *)(*v140 - 24LL)));
  char v141 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v142 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v141->__vftable[2].~facet_0)(v141, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v140, v142);
  std::ostream::flush(v140);
  __int128 v143 = sub_10000552C(a1, (uint64_t)"sector_count", 12LL);
  uint64_t v144 = sub_10000552C(v143, (uint64_t)": ", 2LL);
  uint64_t v145 = (void *)std::ostream::operator<<(v144, v149);
  std::ios_base::getloc((const std::ios_base *)((char *)v145 + *(void *)(*v145 - 24LL)));
  __int128 v146 = std::locale::use_facet((const std::locale *)v183, &std::ctype<char>::id);
  uint64_t v147 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v146->__vftable[2].~facet_0)(v146, 10LL);
  std::locale::~locale((std::locale *)v183);
  std::ostream::put(v145, v147);
  std::ostream::flush(v145);
  return a1;
}

void sub_1000F482C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

__n128 sub_1000F48C0@<Q0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  *a2 = v8;
  a2[1] = 0;
  unsigned int v7 = bswap32(*(_DWORD *)(a1 + 4));
  sub_10002976C(a2 + 1, &v7);
  int v5 = *a2;
  if (*a2) {
    BOOL v6 = v5 == 10;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 == 2)
    {
      a2[2] = bswap32(*(_DWORD *)(a1 + 8));
    }

    else
    {
      *(_OWORD *)(a2 + 1_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a2 + 26) = *(_OWORD *)(a1 + 104);
      *(_OWORD *)(a2 + 30) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 40);
      __n128 result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 14) = result;
    }
  }

  return result;
}

BOOL sub_1000F4984(_DWORD *a1, uint64_t a2)
{
  return sub_100057718(a1, v4);
}

uint64_t sub_1000F49E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == -1) {
    sub_100026264();
  }
  BOOL v6 = &v5;
  ((void (*)(uint64_t *__return_ptr, char **, uint64_t))off_100190A40[v2])(&v7, &v6, a2 + 4);
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v13;
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

unsigned int *sub_1000F4ABC@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v3 = bswap32(*result);
  if ((v3 & 0x80000000) != 0)
  {
    __n128 result = sub_1000F9F78(&v4, v3);
    unsigned int v3 = v4;
  }

  *a2 = v3;
  return result;
}

uint64_t sub_1000F4B00(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  uint64_t v2 = (_OWORD *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1) {
    BOOL v4 = v3 == 10;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = 0LL;
  }

  else if (v3 == 2)
  {
    *(_DWORD *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap32(*(_DWORD *)(a1 + 8));
    uint64_t v2 = (_OWORD *)(a2 + 12);
    uint64_t v5 = 4LL;
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a1 + 8);
    __int128 v7 = *(_OWORD *)(a1 + 24);
    __int128 v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 56) = v8;
    *uint64_t v2 = v6;
    *(_OWORD *)(a2 + 24) = v7;
    __int128 v9 = *(_OWORD *)(a1 + 72);
    __int128 v10 = *(_OWORD *)(a1 + 88);
    __int128 v11 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 120) = v11;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v10;
    uint64_t v5 = 128LL;
  }

  bzero(v2, 128 - v5);
  return (uint64_t)v2 - v5 + 128;
}

uint64_t sub_1000F4BB8(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)__n128 result = *a2;
  *(_OWORD *)(result + 4) = 0u;
  *(_OWORD *)(result + 20) = 0u;
  *(_DWORD *)(result + 36) = 0;
  if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
    uint64_t v6 = *(void *)a3 - a4;
  }
  else {
    uint64_t v6 = *(void *)a3 - a4 + 1;
  }
  *(void *)(result + _Block_object_dispose((const void *)(v2 - 120), 8) = v6;
  *(void *)(result + 16) = *(void *)(a3 + 8)
                           - *(void *)a3
                           + (*(_BYTE *)(a3 + 16) & 1)
  *(void *)(result + 24) = a5;
  *(void *)(result + sub_100006224(v6 - 32) = a6;
  return result;
}

int *sub_1000F4C18(int *a1)
{
  __n128 result = sub_100020B9C(a1, 2);
  *((void *)result + 1) = 0LL;
  *((void *)result + 2) = 0LL;
  return result;
}

BOOL sub_1000F4C34(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_1000F4C70@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(result + 8) + v3;
  unint64_t v5 = v4 + *(void *)(result + 16);
  *(void *)a3 = v4;
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  *(_BYTE *)(a3 + 16) = 2;
  if (v4 < v5 && (v4 < v3 || v3 + *(void *)(a2 + 16) - 1 < v5 - 1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    __int128 v7 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Invalid UDIF, run is not within block boundary", 0x16u);
  }

  return result;
}

uint64_t sub_1000F4CF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 72);
  size_t v5 = *(void *)(v4 + 224);
  uint64_t v6 = operator new[](v5);
  bzero(v6, v5);
  *a2 = v6;
  uint64_t result = sub_100042FD0(*(void *)(a1 + 56), (uint64_t)v6, v5, *(void *)(v4 + 216));
  if ((result & 0x80000000) != 0)
  {
    unsigned int v8 = result;
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    __int128 v10 = std::generic_category();
    exception[1] = v8;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Can't read UDIF trailer";
  }

  return result;
}

void sub_1000F4DB0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  operator delete[](v2);
  _Unwind_Resume(a1);
}

unint64_t sub_1000F4DC8(uint64_t a1, void *a2)
{
  values = a2;
  keys = @"resource-fork";
  sub_1000FEAC4((const void **)&keys, (const void **)&values, 1LL, (CFMutableDictionaryRef *)&propertyList);
  if (sub_1000BE308())
  {
    int v3 = *__error();
    if (sub_1000BE2F0())
    {
      v37[0] = 0LL;
      uint64_t v4 = (os_log_s *)sub_1000BE278();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        uint64_t v5 = 3LL;
      }
      else {
        uint64_t v5 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 41;
      *(_WORD *)__int128 v40 = 2080;
      *(void *)&v40[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
      *(_WORD *)&v40[10] = 2114;
      *(void *)&v40[12] = propertyList;
      uint64_t v6 = (const char *)_os_log_send_and_compose_impl( v5,  v37,  0LL,  0LL,  &_mh_execute_header,  v4,  2LL,  "%.*s: res_dict: %{public}@",  buf,  28);
      if (v6)
      {
        __int128 v7 = (char *)v6;
        fprintf(__stderrp, "%s\n", v6);
        free(v7);
      }
    }

    else
    {
      unsigned int v8 = (os_log_s *)sub_1000BE278();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 41;
        *(_WORD *)__int128 v40 = 2080;
        *(void *)&v40[2] = "udif::details::UDIF_base::write_resources(CFDictionaryRef)";
        *(_WORD *)&v40[10] = 2114;
        *(void *)&v40[12] = propertyList;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%.*s: res_dict: %{public}@", buf, 0x1Cu);
      }
    }

    *__error() = v3;
  }

  sub_1000FEBA4(propertyList, (const __CFData **)v37);
  uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 216LL);
  uint64_t v10 = *(void *)(a1 + 56);
  __int128 v11 = (char *)v37[1];
  BytePtr = CFDataGetBytePtr((CFDataRef)v37[0]);
  uint64_t v13 = *((void *)sub_100120DCC() + 1);
  *(void *)buf = BytePtr;
  *(void *)__int128 v40 = v13;
  if (v13)
  {
    __int128 v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  *(void *)&v40[8] = v11;
  *(void *)&v40[16] = v9;
  __int128 v41 = v11;
  char v42 = 0;
  unsigned int v16 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v10 + 96LL))(v10, buf);
  __int128 v17 = *(std::__shared_weak_count **)v40;
  if (*(void *)v40)
  {
    uint64_t v18 = (unint64_t *)(*(void *)v40 + 8LL);
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    __int128 v34 = std::generic_category();
    exception[1] = v16;
    exception[2] = v34;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Can't write UDIF resource part";
  }

  uint64_t v20 = *(void *)(a1 + 72);
  *(void *)(v20 + 224) = v11;
  __int128 v21 = &v11[v9];
  unint64_t v22 = (unint64_t)(v21 + 511) & 0xFFFFFFFFFFFFFE00LL;
  uint64_t v23 = operator new[](v22 - (void)v21 + 512);
  bzero(v23, v22 - (void)v21 + 512);
  sub_1000F35CC(v20, (uint64_t)v23 + v22 - (void)v21);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *((void *)sub_100120DCC() + 1);
  *(void *)buf = v23;
  *(void *)__int128 v40 = v25;
  if (v25)
  {
    __int128 v26 = (unint64_t *)(v25 + 8);
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  *(void *)&v40[8] = v22 - (void)v21 + 512;
  *(void *)&v40[16] = v21;
  __int128 v41 = *(char **)&v40[8];
  char v42 = 0;
  unsigned int v28 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v24 + 96LL))(v24, buf);
  __int128 v29 = *(std::__shared_weak_count **)v40;
  if (*(void *)v40)
  {
    __int128 v30 = (unint64_t *)(*(void *)v40 + 8LL);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  if ((v28 & 0x80000000) != 0)
  {
    __int128 v35 = __cxa_allocate_exception(0x40uLL);
    *__int128 v35 = &off_100196FC8;
    unint64_t v36 = std::generic_category();
    v35[1] = v28;
    v35[2] = v36;
    *((_BYTE *)v35 + 24) = 0;
    *((_BYTE *)v35 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v35[7] = "Can't write UDIF header";
  }

  operator delete[](v23);
  sub_10002A0F0(v37);
  sub_10000D8A4(&propertyList);
  return v22 + 512;
}

void sub_1000F51D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_1000F5248(void *a1, _DWORD *a2)
{
  if ((*a2 & 0x80000000) != 0)
  {
    uint64_t v5 = sub_10000552C(a1, (uint64_t)"special: ", 9LL);
    if (*a2 == -1) {
      uint64_t v6 = "ddm";
    }
    else {
      uint64_t v6 = "entire_device";
    }
    if (*a2 == -1) {
      uint64_t v7 = 3LL;
    }
    else {
      uint64_t v7 = 13LL;
    }
    return sub_10000552C(v5, (uint64_t)v6, v7);
  }

  else
  {
    int v3 = sub_10000552C(a1, (uint64_t)"partition_num: ", 15LL);
    return (void *)std::ostream::operator<<(v3, *a2);
  }

void *sub_1000F52C4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000552C(a1, (uint64_t)"Blocks header", 13LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24LL)));
  uint64_t v5 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v4, v6);
  std::ostream::flush(v4);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(unsigned int *)(a2 + 32);
  int v11 = *(_DWORD *)(a2 + 36);
  __int128 v79 = *(_OWORD *)(a2 + 40);
  uint64_t v80 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  __int128 v13 = *(_OWORD *)(a2 + 152);
  __int128 v75 = *(_OWORD *)(a2 + 136);
  __int128 v76 = v13;
  __int128 v14 = *(_OWORD *)(a2 + 184);
  __int128 v77 = *(_OWORD *)(a2 + 168);
  __int128 v78 = v14;
  __int128 v15 = *(_OWORD *)(a2 + 88);
  __int128 v71 = *(_OWORD *)(a2 + 72);
  __int128 v72 = v15;
  __int128 v16 = *(_OWORD *)(a2 + 120);
  __int128 v73 = *(_OWORD *)(a2 + 104);
  __int128 v74 = v16;
  uint64_t v17 = *(unsigned int *)(a2 + 200);
  uint64_t v18 = sub_10000552C(a1, (uint64_t)"signature", 9LL);
  unint64_t v19 = sub_10000552C(v18, (uint64_t)": ", 2LL);
  v81[23] = 4;
  strcpy(v81, "mish");
  uint64_t v20 = sub_10000552C(v19, (uint64_t)v81, 4LL);
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24LL)));
  __int128 v21 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v22 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v20, v22);
  std::ostream::flush(v20);
  uint64_t v23 = sub_10000552C(a1, (uint64_t)"version", 7LL);
  uint64_t v24 = sub_10000552C(v23, (uint64_t)": ", 2LL);
  uint64_t v25 = (void *)std::ostream::operator<<(v24, 1LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24LL)));
  __int128 v26 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v25, v27);
  std::ostream::flush(v25);
  unsigned int v28 = sub_10000552C(a1, (uint64_t)"first_sector_number", 19LL);
  __int128 v29 = sub_10000552C(v28, (uint64_t)": ", 2LL);
  __int128 v30 = (void *)std::ostream::operator<<(v29, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24LL)));
  unint64_t v31 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v30, v32);
  std::ostream::flush(v30);
  __int128 v33 = sub_10000552C(a1, (uint64_t)"sector_count", 12LL);
  __int128 v34 = sub_10000552C(v33, (uint64_t)": ", 2LL);
  __int128 v35 = (void *)std::ostream::operator<<(v34, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24LL)));
  unint64_t v36 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v35, v37);
  std::ostream::flush(v35);
  __int128 v38 = sub_10000552C(a1, (uint64_t)"data_start", 10LL);
  __int128 v39 = sub_10000552C(v38, (uint64_t)": ", 2LL);
  uint64_t v40 = *v39;
  __int128 v41 = (char *)v39 + *(void *)(*v39 - 24);
  LODWORD(v37) = *((_DWORD *)v41 + 2);
  *((_DWORD *)v41 + 2) = v37 & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v39 + *(void *)(v40 - 24) + 8) |= 0x200u;
  v81[0] = 48;
  char v42 = sub_10000EDBC(v39, v81);
  std::ostream::operator<<(v42, v9);
  uint64_t v43 = *v39;
  *(_DWORD *)((char *)v39 + *(void *)(*v39 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = v37;
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(v43 - 24)));
  __int128 v44 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v39, v45);
  std::ostream::flush(v39);
  std::unique_lock<std::mutex> v46 = sub_10000552C(a1, (uint64_t)"decompression_buffer_req", 24LL);
  uint64_t v47 = sub_10000552C(v46, (uint64_t)": ", 2LL);
  unint64_t v48 = (void *)std::ostream::operator<<(v47, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24LL)));
  uint64_t v49 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v50 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v48, v50);
  std::ostream::flush(v48);
  LODWORD(v70.__locale_) = v11;
  unint64_t v51 = sub_10000552C(a1, (uint64_t)"descriptor", 10LL);
  uint64_t v52 = sub_10000552C(v51, (uint64_t)": ", 2LL);
  uint64_t v53 = sub_1000F5248(v52, &v70);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24LL)));
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v54 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v55 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v53, v55);
  std::ostream::flush(v53);
  *(_OWORD *)uint64_t v81 = v79;
  *(void *)&v81[16] = v80;
  unint64_t v56 = sub_10000552C(a1, (uint64_t)"reserved", 8LL);
  uint64_t v57 = sub_10000552C(v56, (uint64_t)": ", 2LL);
  sub_1000FD0CC(v57, (uint64_t)v81, 24LL);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24LL)));
  uint64_t v58 = std::locale::use_facet(&v70, &std::ctype<char>::id);
  uint64_t v59 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10LL);
  std::locale::~locale(&v70);
  std::ostream::put(v57, v59);
  std::ostream::flush(v57);
  *(void *)uint64_t v81 = v12;
  __int128 v85 = v75;
  __int128 v86 = v76;
  __int128 v87 = v77;
  __int128 v88 = v78;
  *(_OWORD *)&v81[8] = v71;
  __int128 v82 = v72;
  __int128 v83 = v73;
  __int128 v84 = v74;
  __int128 v60 = sub_10000552C(a1, (uint64_t)"checksum", 8LL);
  uint64_t v61 = sub_10000552C(v60, (uint64_t)": ", 2LL);
  sub_1000F5A58(v61, (int *)v81);
  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24LL)));
  unint64_t v62 = std::locale::use_facet(&v70, &std::ctype<char>::id);
  uint64_t v63 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10LL);
  std::locale::~locale(&v70);
  std::ostream::put(v61, v63);
  std::ostream::flush(v61);
  uint64_t v64 = sub_10000552C(a1, (uint64_t)"run_count", 9LL);
  unint64_t v65 = sub_10000552C(v64, (uint64_t)": ", 2LL);
  uint64_t v66 = (void *)std::ostream::operator<<(v65, v17);
  std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24LL)));
  uint64_t v67 = std::locale::use_facet((const std::locale *)v81, &std::ctype<char>::id);
  uint64_t v68 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10LL);
  std::locale::~locale((std::locale *)v81);
  std::ostream::put(v66, v68);
  std::ostream::flush(v66);
  return a1;
}

void sub_1000F59F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000F5A58(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 8);
  uint64_t v5 = sub_10000552C(a1, (uint64_t)"type: ", 6LL);
  int v17 = *a2;
  uint64_t v6 = sub_1000398B4(v5, &v17);
  uint64_t v7 = sub_10000552C(v6, (uint64_t)" ", 1LL);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v7 + *(void *)(*v7 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  char v16 = 48;
  uint64_t v8 = sub_10000EDBC(v7, &v16);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2LL;
  int v10 = *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8);
  int v11 = sub_10000552C(v8, (uint64_t)"len: ", 5LL);
  uint64_t v12 = (void *)std::ostream::operator<<(v11, a2[1]);
  __int128 v13 = sub_10000552C(v12, (uint64_t)" data: ", 7LL);
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v13 + *(void *)(*v13 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v14 = a2[1];
  if ((_DWORD)v14) {
    sub_1000FD0CC(v8, (uint64_t)(a2 + 2), v14);
  }
  else {
    sub_10000552C(v8, (uint64_t)"(empty)", 7LL);
  }
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = v10;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  return a1;
}

uint64_t sub_1000F5BB8(void *a1, uint64_t a2)
{
  int v3 = sub_10000552C(a1, (uint64_t)"plst: count = ", 14LL);
  int v4 = (void *)std::ostream::operator<<(v3, *(unsigned __int16 *)(a2 + 518));
  uint64_t v5 = sub_10000552C(v4, (uint64_t)" max =", 6LL);
  return std::ostream::operator<<(v5, *(unsigned __int16 *)(a2 + 516));
}

void *sub_1000F5C00()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1001A4830);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A4830))
  {
    sub_100020B9C(v2, -2147483643);
    v2[1] = 0;
    sub_100020B9C(v3, -2147483641);
    v3[1] = 1;
    sub_100020B9C(v4, -2147483640);
    v4[1] = 2;
    sub_100020B9C(v5, -2147483642);
    v5[1] = 4;
    sub_1000FD25C((uint64_t)&unk_1001A4818, (unsigned int *)v2, 4LL);
    __cxa_atexit((void (*)(void *))sub_1000F5D40, &unk_1001A4818, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A4830);
  }

  return &unk_1001A4818;
}

void sub_1000F5D18(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F5D40(uint64_t a1)
{
  return a1;
}

void *sub_1000F5D68@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = qword_1001A4820;
  if (!qword_1001A4820) {
    goto LABEL_12;
  }
  unsigned int v5 = *a1;
  uint64_t v6 = &qword_1001A4820;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }

  while (*v9);
  if (v6 != &qword_1001A4820 && v5 >= *((_DWORD *)v6 + 7))
  {
    uint64_t result = sub_1000F5C00();
    *(_DWORD *)a2 = *((_DWORD *)v6 + 8);
    char v11 = 1;
  }

  else
  {
LABEL_12:
    uint64_t result = sub_1000F5C00();
    char v11 = 0;
    *(_BYTE *)a2 = 0;
  }

  *(_BYTE *)(a2 + 4) = v11;
  return result;
}

uint64_t **sub_1000F5DFC(uint64_t **result, uint64_t **a2, _DWORD *a3, uint64_t *a4, uint64_t *a5)
{
  if (HIBYTE(*a3) == 128)
  {
    uint64_t v9 = result;
    int v14 = *a3;
    ((void (*)(_DWORD **__return_ptr, uint64_t **, int *))(*result)[2])(v13, result, &v14);
    if (!BYTE4(v13[0]))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100005148((uint64_t)v13);
      sub_10000552C(v13, (uint64_t)"Unsupported compressed run (", 28LL);
      int v15 = *a3;
      sub_10003AF74(v13, &v15);
      sub_10000552C(v13, (uint64_t)")", 1LL);
      sub_100006AA8((uint64_t)exception, (uint64_t)v13, 0x2Du);
    }

    v13[0] = a3;
    int v10 = sub_1000FD504(a2, a3, (uint64_t)&unk_1001447DC, v13)[5];
    if (v10)
    {
      v13[0] = a3;
      int v10 = sub_1000FD504(a2, a3, (uint64_t)&unk_1001447DC, v13)[5];
    }

    if (v10 > a4) {
      a4 = v10;
    }
    v13[0] = a3;
    uint64_t result = sub_1000FD504(a2, a3, (uint64_t)&unk_1001447DC, v13);
    result[5] = a4;
    *((_BYTE *)v9 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 1;
    char v11 = v9[12];
    if (v11 <= a5) {
      char v11 = a5;
    }
    v9[12] = v11;
  }

  return result;
}

void sub_1000F5F7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000F5FB0(uint64_t a1, void *a2)
{
  uint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  unsigned int v5 = v6;
  if (v6 != v4)
  {
    do
    {
      int v10 = *((_DWORD *)v5 + 8);
      sub_1000F6058(a1, &v10, v5[5]);
      unsigned int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unsigned int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          unsigned int v5 = v8;
        }

        while (!v9);
      }

      unsigned int v5 = v8;
    }

    while (v8 != v4);
  }

void sub_1000F6058(uint64_t a1, _DWORD *a2, size_t a3)
{
  if (*a2 == 1)
  {
    sub_100020B9C((int *)&v17, 1);
    *(void *)&__int128 v14 = &v17;
    uint64_t v4 = sub_10001E2F8((uint64_t **)(a1 + 104), (unsigned int *)&v17, (uint64_t)&unk_1001447DC, (_DWORD **)&v14);
    sub_10001C610(v4 + 5, (uint64_t *)(a1 + 56));
  }

  else
  {
    int v15 = *a2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *))(*(void *)a1 + 16LL))(&v16, a1, &v15);
    if (!BYTE4(v16))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v12 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"UDIF: compression algo is invalid", 0x16u);
    }

    int v13 = v16;
    sub_100046744((void *)(a1 + 56), &v13, a3, &v14);
    int v17 = a2;
    unsigned int v7 = sub_10001E2F8((uint64_t **)(a1 + 104), a2, (uint64_t)&unk_1001447DC, &v17);
    sub_1000198A4((uint64_t)(v7 + 5), &v14);
    BOOL v8 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (*((void *)&v14 + 1))
    {
      BOOL v9 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

void sub_1000F61B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000F61C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v35 = 0LL;
  uint64_t v36 = 0LL;
  __int128 v34 = (uint64_t *)&v35;
  (*(void (**)(__int128 *__return_ptr))(**(void **)(a1 + 56) + 72LL))(&v33);
  uint64_t v4 = *(unsigned int **)(a1 + 104);
  if (v4 != (unsigned int *)(a1 + 112))
  {
    do
    {
      unsigned int v5 = (const void *)*((void *)v4 + 5);
      if (v5 == *(const void **)(a1 + 56))
      {
        unint64_t v31 = v4 + 8;
        uint64_t v22 = sub_10001E2F8(&v34, v4 + 8, (uint64_t)&unk_1001447DC, &v31);
        sub_10001C610(v22 + 5, (uint64_t *)&v33);
      }

      else if (v5)
      {
        if (v6)
        {
          unsigned int v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
          unint64_t v31 = v6;
          uint64_t v32 = v7;
          if (v7)
          {
            uint64_t p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              unint64_t v9 = __ldxr(p_shared_owners);
            while (__stxr(v9 + 1, p_shared_owners));
          }

          __int128 v29 = v33;
          if (*((void *)&v33 + 1))
          {
            unint64_t v10 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
            do
              unint64_t v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }

          (*(void (**)(__int128 *__return_ptr, _DWORD *, __int128 *))(*(void *)v6 + 176LL))(&v30, v6, &v29);
          uint64_t v37 = v4 + 8;
          uint64_t v12 = sub_10001E2F8(&v34, v4 + 8, (uint64_t)&unk_1001447DC, &v37);
          sub_1000198A4((uint64_t)(v12 + 5), &v30);
          int v13 = (std::__shared_weak_count *)*((void *)&v30 + 1);
          if (*((void *)&v30 + 1))
          {
            __int128 v14 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
            do
              unint64_t v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }

          uint64_t v16 = (std::__shared_weak_count *)*((void *)&v29 + 1);
          if (*((void *)&v29 + 1))
          {
            int v17 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
            do
              unint64_t v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }

          unint64_t v19 = v32;
          if (v32)
          {
            uint64_t v20 = (unint64_t *)&v32->__shared_owners_;
            do
              unint64_t v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }

      uint64_t v23 = (unsigned int *)*((void *)v4 + 1);
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = *(unsigned int **)v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          uint64_t v24 = (unsigned int *)*((void *)v4 + 2);
          BOOL v25 = *(void *)v24 == (void)v4;
          uint64_t v4 = v24;
        }

        while (!v25);
      }

      uint64_t v4 = v24;
    }

    while (v24 != (unsigned int *)(a1 + 112));
  }

  __int128 v26 = v35;
  *(void *)a2 = v34;
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = v26;
  uint64_t v27 = a2 + 8;
  uint64_t v28 = v36;
  *(void *)(a2 + 16) = v36;
  if (v28)
  {
    v26[2] = v27;
    __int128 v34 = (uint64_t *)&v35;
    __int128 v35 = 0LL;
    uint64_t v36 = 0LL;
    __int128 v26 = 0LL;
  }

  else
  {
    *(void *)a2 = v27;
  }

  *(_OWORD *)(a2 + 24) = v33;
  sub_100019E30((uint64_t)&v34, v26);
}

void sub_1000F6450( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t sub_1000F64A0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  if (v1 != (void *)(result + 16))
  {
    do
    {
      if (*((unsigned __int8 *)v1 + 59) == 128
        && (v1[5] - v1[4] + (unint64_t)(v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9 > 0x400000)
      {
        uint64_t v7 = (v1[5] - v1[4] + (v1[6] & 1) + ((*((unsigned __int8 *)v1 + 48) >> 1) & 1) - 1) << 9;
        BOOL v8 = v1;
        *(void *)&__int128 v10 = "udif::details::UDIF_base::validate_runs()";
        *((void *)&v10 + sub_100020B9C(&v11, 1) = 39LL;
        int v11 = 16;
        sub_1000F66A4(v12, &v10);
        sub_10000552C(v13, (uint64_t)"Run interval: ", 14LL);
        sub_1000EA098(v13, (uint64_t)(v8 + 4));
        sub_10000552C(v13, (uint64_t)" of type ", 9LL);
        LODWORD(v9) = *((_DWORD *)v8 + 14);
        sub_10003AF74(v13, &v9);
        sub_10000552C(v13, (uint64_t)" has size ", 10LL);
        std::ostream::operator<<(v13, v7);
        sub_10000552C(v13, (uint64_t)"which is larger than allowed ", 29LL);
        std::ostream::operator<<(v13, 0x400000LL);
        sub_10000552C(v13, (uint64_t)" or exceeds size_t size ", 24LL);
        uint64_t v9 = -1LL;
        sub_1000F6678((uint64_t)v12, &v9);
        sub_1000F674C((uint64_t)v12);
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"UDIF: compressed runs should be <= 1MB", 0x16u);
      }

      uint64_t v2 = (void *)v1[1];
      if (v2)
      {
        do
        {
          int v3 = v2;
          uint64_t v2 = (void *)*v2;
        }

        while (v2);
      }

      else
      {
        do
        {
          int v3 = (void *)v1[2];
          BOOL v4 = *v3 == (void)v1;
          uint64_t v1 = v3;
        }

        while (!v4);
      }

      uint64_t v1 = v3;
    }

    while (v3 != (void *)(result + 16));
  }

  return result;
}

void sub_1000F665C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1000F6678(uint64_t a1, void *a2)
{
  return a1;
}

void *sub_1000F66A4(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000FD5C4((uint64_t)a1, a2);
  *a1 = off_100190A68;
  a1[45] = &off_100190B68;
  a1[46] = &off_100190B90;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100190A68;
  a1[45] = off_100190AF0;
  a1[46] = off_100190B18;
  return a1;
}

void sub_1000F6728(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F674C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000F678C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5 = (uint64_t **)(a1 + 32);
  if (a1 + 40 != sub_1000FD640(a1 + 32, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    __int128 v10 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Invalid UDIF format, contains intersected blocks", 0x16u);
  }

  int v6 = *((_DWORD *)a3 + 2);
  __int128 v19 = *(_OWORD *)((char *)a3 + 76);
  __int128 v20 = *(_OWORD *)((char *)a3 + 92);
  __int128 v21 = *(_OWORD *)((char *)a3 + 108);
  __int128 v22 = *(_OWORD *)((char *)a3 + 124);
  __int128 v15 = *(_OWORD *)((char *)a3 + 12);
  __int128 v16 = *(_OWORD *)((char *)a3 + 28);
  __int128 v17 = *(_OWORD *)((char *)a3 + 44);
  __int128 v18 = *(_OWORD *)((char *)a3 + 60);
  uint64_t v7 = *a3;
  uint64_t v12 = *(void *)(a2 + 16);
  __int128 v11 = *(_OWORD *)a2;
  uint64_t v13 = v7;
  int v14 = v6;
  char v23 = 1;
  return sub_1000FD6C4(v5, (uint64_t)&v11);
}

void sub_1000F68A8(uint64_t a1, CFArrayRef theArray)
{
  unint64_t Count = CFArrayGetCount(theArray);
  CFIndex v5 = Count;
  if (Count >> 61) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8 * Count;
  }
  uint64_t v7 = operator new[](v6);
  bzero(v7, v6);
  v45[0] = 0LL;
  v45[1] = 0LL;
  __int128 v44 = (uint64_t *)v45;
  v69.location = 0LL;
  v69.length = v5;
  __int128 __p = v7;
  CFArrayGetValues(theArray, v69, (const void **)v7);
  if (v5 < 1)
  {
    unint64_t v26 = 0LL;
  }

  else
  {
    unint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    unsigned int v36 = 0;
    CFIndex v33 = v5;
    do
    {
      uint64_t v35 = v9;
      __int128 v10 = (const void *)__p[v9];
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (v10)
      {
        CFTypeID v12 = TypeID;
        if (CFGetTypeID(v10) != TypeID)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          CFTypeID v30 = CFGetTypeID(v10);
          unint64_t v31 = exception;
          uint64_t v32 = v12;
LABEL_34:
          sub_10000A37C(v31, v30, v32);
        }
      }

      Value = CFDictionaryGetValue((CFDictionaryRef)v10, @"Data");
      CFTypeID v14 = CFDataGetTypeID();
      if (!Value)
      {
        uint64_t v27 = __cxa_allocate_exception(0x40uLL);
        *uint64_t v27 = &off_100196FC8;
        uint64_t v28 = std::generic_category();
        v27[1] = 22LL;
        void v27[2] = v28;
        *((_BYTE *)v27 + 24) = 0;
        *((_BYTE *)v27 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
        v27[7] = "UDIF: Can't find data key in dictionary";
      }

      CFTypeID v15 = v14;
      if (CFGetTypeID(Value) != v14)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        CFTypeID v30 = CFGetTypeID(Value);
        unint64_t v31 = exception;
        uint64_t v32 = v15;
        goto LABEL_34;
      }

      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      __int128 v17 = operator new[](Length);
      bzero(v17, Length);
      v70.length = CFDataGetLength((CFDataRef)Value);
      v70.location = 0LL;
      CFDataGetBytes((CFDataRef)Value, v70, (UInt8 *)v17);
      sub_1000F8508((uint64_t)&v55, (uint64_t)v17);
      if (sub_1000BE308())
      {
        *(void *)&__int128 v40 = "udif::details::UDIF_base::generate_blocks(CFArrayRef)";
        *((void *)&v40 + sub_100020B9C(&v11, 1) = 41LL;
        int v41 = 2;
        sub_1000F6EAC(v46, &v40);
        sub_1000F52C4(&v53, (uint64_t)&v55);
        std::ios_base::getloc((const std::ios_base *)&v54[*(void *)(v53 - 24) - 8]);
        __int128 v18 = std::locale::use_facet(v38, &std::ctype<char>::id);
        uint64_t v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10LL);
        std::locale::~locale(v38);
        std::ostream::put(&v53, v19);
        std::ostream::flush(&v53);
        std::ostream::~ostream(&v53, off_100190D50);
        sub_1000FA758((uint64_t)v46);
        std::ios::~ios(v54);
      }

      *(void *)&__int128 v40 = *((void *)&v55 + 1);
      *((void *)&v40 + sub_100020B9C(&v11, 1) = v56 + *((void *)&v55 + 1);
      LOBYTE(v4sub_100020B9C(&v11, 1) = 2;
      *(_DWORD *)std::unique_lock<std::mutex> v46 = v58;
      *(void *)&v46[4] = v59;
      __int128 v49 = v64;
      __int128 v50 = v65;
      __int128 v51 = v66;
      __int128 v52 = v67;
      *(_OWORD *)&v46[12] = v60;
      *(_OWORD *)uint64_t v47 = v61;
      *(_OWORD *)&v47[16] = v62;
      __int128 v48 = v63;
      sub_1000F678C(a1, (uint64_t)&v40, (uint64_t *)v46);
      if (v68)
      {
        unsigned int v20 = 0;
        uint64_t v21 = (uint64_t)v17 + 204;
        do
        {
          sub_1000F8780((uint64_t)&v40, v21);
          sub_1000F4C70((uint64_t)&v40, (uint64_t)&v55, (uint64_t)v38);
          if (v40 < 2 || (v40 & 0xFF000000) == 0x80000000)
          {
            int v37 = v40;
            sub_1000F5DFC( (uint64_t **)a1,  &v44,  &v37,  v43,  (uint64_t *)((v38[1].__locale_ - v38[0].__locale_ + (v39 & 1) + ((v39 >> 1) & 1) - 1) << 9));
            uint64_t v23 = v57 + v42 + *(void *)(*(void *)(a1 + 72) + 24LL);
            *(_OWORD *)std::unique_lock<std::mutex> v46 = *(_OWORD *)&v38[0].__locale_;
            *(void *)&v46[16] = v39;
            *(_DWORD *)&v46[24] = v40;
            *(void *)&v47[4] = v23;
            *(void *)&v47[12] = v43;
            sub_100021B28((uint64_t **)(a1 + 8), (uint64_t)v46);
            unint64_t v24 = v42;
            if (v42 < v8) {
              *(_BYTE *)(a1 + 89) = 0;
            }
          }

          else
          {
            unint64_t v24 = v8;
          }

          ++v20;
          v21 += 40LL;
          unint64_t v8 = v24;
        }

        while (v20 < v68);
      }

      else
      {
        unint64_t v24 = v8;
      }

      if (v36 <= v58) {
        unsigned int v25 = v58;
      }
      else {
        unsigned int v25 = v36;
      }
      unsigned int v36 = v25;
      operator delete[](v17);
      uint64_t v9 = v35 + 1;
      unint64_t v8 = v24;
    }

    while (v35 + 1 != v33);
    unint64_t v26 = (unint64_t)v36 << 9;
  }

  sub_1000F64A0(a1);
  *(void *)&__int128 v55 = "udif::details::UDIF_base::generate_blocks(CFArrayRef)";
  *((void *)&v55 + sub_100020B9C(&v11, 1) = 41LL;
  LODWORD(v56) = 0;
  sub_1000F6F98(v46, &v55);
  sub_10000552C(&v53, (uint64_t)"UDIF - max compressed run size: ", 32LL);
  std::ostream::operator<<(&v53, *(void *)(a1 + 96));
  sub_10000552C(&v53, (uint64_t)", required decompression buffer size: ", 38LL);
  std::ostream::operator<<(&v53, v26);
  std::ostream::~ostream(&v53, off_100190F70);
  sub_1000FAD04((uint64_t)v46);
  std::ios::~ios(v54);
  sub_1000F5FB0(a1, &v44);
  sub_10000A494((uint64_t)&v44, v45[0]);
  operator delete[](__p);
}

void sub_1000F6E04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, void *a27, uint64_t a28, char a29)
{
}

void *sub_1000F6EAC(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000FDE28((uint64_t)a1, a2);
  *a1 = off_100190C88;
  a1[45] = &off_100190D88;
  a1[46] = &off_100190DB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100190C88;
  a1[45] = off_100190D10;
  a1[46] = off_100190D38;
  return a1;
}

void sub_1000F6F30(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F6F54(uint64_t a1)
{
  return a1;
}

void *sub_1000F6F98(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000FDEA4((uint64_t)a1, a2);
  *a1 = off_100190EA8;
  a1[45] = &off_100190FA8;
  a1[46] = &off_100190FD0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100190EA8;
  a1[45] = off_100190F30;
  a1[46] = off_100190F58;
  return a1;
}

void sub_1000F701C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F7040(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000F7080()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1001A4850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A4850))
  {
    sub_100020B9C(&v2, 0);
    __int128 v3 = xmmword_10014C110;
    char v4 = 2;
    int v5 = v2;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    sub_1000FDF20((uint64_t)&qword_1001A4838, (unint64_t *)&v3, 1LL);
    __cxa_atexit((void (*)(void *))sub_1000F7180, &qword_1001A4838, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A4850);
  }

  return &qword_1001A4838;
}

void sub_1000F7164(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F7180(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F71A8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  v6[0] = a2 / a4;
  v6[1] = (a3 + a2) / a4;
  char v7 = 2;
  uint64_t result = sub_10000D800(a1 + 8, (uint64_t)v6);
  if (a1 + 16 == result)
  {
    sub_1000F7080();
    return qword_1001A4838;
  }

  return result;
}

void sub_1000F7208(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5 = a3;
  uint64_t v8 = sub_1000F71A8(a1, a2, a3, 0x200uLL);
  if (v5)
  {
    uint64_t v9 = (void *)v8;
    uint64_t v10 = a1 + 16;
    unint64_t v11 = a2;
    while (v9 != (void *)v10)
    {
      uint64_t v12 = v9[4];
      unint64_t v13 = v12 << 9;
      if (v11 < v12 << 9) {
        goto LABEL_11;
      }
      uint64_t v14 = (v9[5] - v12) << 9;
      if (v14 - (v11 - v13) >= v5) {
        unint64_t v15 = v5;
      }
      else {
        unint64_t v15 = v14 - (v11 - v13);
      }
      unsigned int v16 = *((_DWORD *)v9 + 14);
      unsigned int v29 = v16;
      if (HIBYTE(v16) == 128)
      {
        __int128 v30 = *((_OWORD *)v9 + 4);
        *(void *)&__int128 v31 = v13;
        *((void *)&v31 + sub_100020B9C(&v11, 1) = v14;
        *(void *)&__int128 v32 = v11 - a2;
        *((void *)&v32 + sub_100020B9C(&v11, 1) = v11 - v13;
      }

      else
      {
        *(void *)&__int128 v30 = v9[8] + v11 - v13;
        *((void *)&v30 + sub_100020B9C(&v11, 1) = v15;
        *(void *)&__int128 v31 = v11;
        *((void *)&v31 + sub_100020B9C(&v11, 1) = v15;
        __int128 v32 = v11 - a2;
      }

      unint64_t v33 = v15;
      uint64_t v22 = a4[1];
      uint64_t v23 = *a4 + (v22 << 6);
      if (v22 == a4[2])
      {
        sub_1000FE1C0(a4, v23, 1LL, (uint64_t)&v29, &v34);
      }

      else
      {
        *(_DWORD *)uint64_t v23 = v16;
        __int128 v24 = v30;
        __int128 v25 = v31;
        __int128 v26 = v32;
        *(void *)(v23 + 56) = v33;
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + _Block_object_dispose((const void *)(v2 - 120), 8) = v24;
        ++a4[1];
      }

      uint64_t v27 = (void *)v9[1];
      if (v27)
      {
        do
        {
          uint64_t v9 = v27;
          uint64_t v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          uint64_t v28 = v9;
          uint64_t v9 = (void *)v9[2];
        }

        while ((void *)*v9 != v28);
      }

uint64_t sub_1000F7414(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_10000D800(a1 + 8, a2);
  sub_10000D4D8(v3, a2);
  return v4;
}

uint64_t sub_1000F745C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1000F746C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (sub_100057718(a4, v16))
  {
    *(void *)&__int128 v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + sub_100020B9C(&v11, 1) = 60LL;
    int v15 = 0;
    sub_1000F7658(v16, &v14);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v17, v8, v9);
    sub_10000552C(&v17, (uint64_t)" - same ", 8LL);
    sub_1000FE464((uint64_t)&v17, a3);
    std::ostream::~ostream(&v17, off_100191190);
    sub_1000FB2B0((uint64_t)v16);
  }

  else
  {
    *(void *)&__int128 v14 = "udif::details::UDIF_base::print_checksum_verification_status(const std::string &, const csum_any &, const details::checksum &) const";
    *((void *)&v14 + sub_100020B9C(&v11, 1) = 60LL;
    int v15 = 0;
    sub_1000F7740(v16, &v14);
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v17, v11, v12);
    sub_10000552C(&v17, (uint64_t)" - different calculated: <", 26LL);
    sub_1000FE464((uint64_t)&v17, a3);
    sub_10000552C(&v17, (uint64_t)"> real: <", 9LL);
    sub_1000F5A58(&v17, a4);
    sub_10000552C(&v17, (uint64_t)">", 1LL);
    std::ostream::~ostream(&v17, off_1001913B0);
    sub_1000FB85C((uint64_t)v16);
  }

  return std::ios::~ios(&v18);
}

void sub_1000F762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_1000F7658(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE3E8((uint64_t)a1, a2);
  *a1 = off_1001910C8;
  a1[45] = &off_1001911C8;
  a1[46] = &off_1001911F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001910C8;
  a1[45] = off_100191150;
  a1[46] = off_100191178;
  return a1;
}

void sub_1000F76DC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F7700(uint64_t a1)
{
  return a1;
}

void *sub_1000F7740(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE504((uint64_t)a1, a2);
  *a1 = off_1001912E8;
  a1[45] = &off_1001913E8;
  a1[46] = &off_100191410;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001912E8;
  a1[45] = off_100191370;
  a1[46] = off_100191398;
  return a1;
}

void sub_1000F77C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F77E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F7828(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 16) = 0LL;
  uint64_t v3 = (void *)(a1 + 16);
  *(void *)a1 = off_1001907D0;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 16;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + sub_100006224(v6 - 32) = a1 + 40;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 56) = a2[1];
  uint64_t v5 = a2[2];
  *(void *)(a1 + 64) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = *a2;
  *a2 = 0LL;
  *(void *)(a1 + sub_100006224(v49 + 112) = 0LL;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  sub_1000F5C00();
  sub_1000F7080();
  *(_BYTE *)(a1 + 89) = *(void *)(*(void *)(a1 + 72) + 216LL) >= *(void *)(*(void *)(a1 + 72) + 32LL)
                                                                   + *(void *)(*(void *)(a1 + 72) + 24LL);
  sub_1000F7C10(a1, (uint64_t)&v36);
  while (1)
  {
    if (v36 != v41) {
      goto LABEL_15;
    }
    int v9 = v44;
    BOOL v10 = !v39 || v44 == 0;
    if (!v10) {
      break;
    }
    if ((v39 != 0) == (v44 != 0)) {
      goto LABEL_14;
    }
LABEL_15:
    int v11 = sub_1000F92BC(&v36);
    sub_1000F93B0((uint64_t)&v36);
    if (v11 == 1651272568)
    {
      sub_1000F92BC(&v36);
      uint64_t v12 = (const __CFArray *)sub_1000F93B0((uint64_t)&v36);
      sub_1000F68A8(a1, v12);
    }

    sub_100029DB4((uint64_t)v32, &v36);
    ++v40;
    if (v35) {
      sub_10000D8A4(&v34);
    }
    unint64_t v13 = v33;
    if (v33)
    {
      uint64_t p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  if (v38 != v43) {
    goto LABEL_15;
  }
LABEL_14:
  if (v40 != v45) {
    goto LABEL_15;
  }
  uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 492LL);
  *(void *)(a1 + 80) = v16;
  if (!v16 && (void *)*v4 != v3)
  {
    uint64_t v17 = (void *)*v3;
    if (*v3)
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = (void *)v17[1];
      }

      while (v17);
    }

    else
    {
      __int128 v19 = v3;
      do
      {
        uint64_t v18 = (void *)v19[2];
        BOOL v10 = *v18 == (void)v19;
        __int128 v19 = v18;
      }

      while (v10);
    }

    *(void *)(a1 + 80) = v18[5];
    *(void *)&__int128 v27 = "udif::details::UDIF_base::UDIF_base(UDIF_header &&)";
    *((void *)&v27 + sub_100020B9C(&v11, 1) = 35LL;
    int v28 = 0;
    sub_1000F7E2C(v29, &v27);
    sub_10000552C(&v30, (uint64_t)"UDIF header doesn't contain a valid sector count, using runs upper value: ", 74LL);
    std::ostream::operator<<(&v30, *(void *)(a1 + 80));
    std::ostream::~ostream(&v30, off_1001915D0);
    sub_1000FBE08((uint64_t)v29);
    std::ios::~ios(&v31);
    int v9 = v44;
  }

  if (v9) {
    sub_10000D8A4(&v43);
  }
  __int128 v20 = v42;
  if (v42)
  {
    __int128 v21 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (v39) {
    sub_10000D8A4(&v38);
  }
  uint64_t v23 = v37;
  if (v37)
  {
    __int128 v24 = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  return a1;
}

void sub_1000F7B98(_Unwind_Exception *a1)
{
  BOOL v10 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_100006224(v4);
  sub_10000A494(v3, *v6);
  sub_10000A494(v2, *v7);
  _Unwind_Resume(a1);
}

const void **sub_1000F7C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t Count = CFDictionaryGetCount(v29);
  uint64_t v4 = Count;
  if (Count >> 61) {
    size_t v5 = -1LL;
  }
  else {
    size_t v5 = 8 * Count;
  }
  uint64_t v6 = operator new[](v5);
  sub_1000FE5FC(&v27, (uint64_t)v6);
  if (!v27)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v18 = std::generic_category();
    exception[1] = 12LL;
    exception[2] = v18;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "UDIF: Can't get types array from UDIF";
  }

  CFDictionaryGetKeysAndValues(v29, v27, 0LL);
  sub_1000FC1F0((uint64_t)v23, &v27, (const void **)&v29, 0LL);
  sub_1000FC1F0((uint64_t)v19, &v27, (const void **)&v29, v4);
  sub_1000FC268(a2, (uint64_t)v23, (uint64_t)v19);
  if (v22) {
    sub_10000D8A4(&v21);
  }
  unint64_t v7 = v20;
  if (v20)
  {
    uint64_t p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v26) {
    sub_10000D8A4(&v25);
  }
  BOOL v10 = v24;
  if (v24)
  {
    int v11 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unint64_t v13 = v28;
  if (v28)
  {
    __int128 v14 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return sub_10000D8A4((const void **)&v29);
}

void sub_1000F7DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_1000138E0((uint64_t)va);
  sub_1000138E0((uint64_t)va1);
  sub_100006224(v2 - 40);
  sub_10000D8A4((const void **)(v2 - 24));
  _Unwind_Resume(a1);
}

void *sub_1000F7E2C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE580((uint64_t)a1, a2);
  *a1 = off_100191508;
  a1[45] = &off_100191608;
  a1[46] = &off_100191630;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100191508;
  a1[45] = off_100191590;
  a1[46] = off_1001915B8;
  return a1;
}

void sub_1000F7EB0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F7ED4(uint64_t a1)
{
  return a1;
}

const void *sub_1000F7F14(uint64_t a1)
{
  Value = CFDictionaryGetValue(theDict, @"uuid");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value)
  {
    uint64_t v3 = TypeID;
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v13 = CFGetTypeID(Value);
      __int128 v14 = sub_10000A37C(exception, v13, v3);
    }

    if (CFArrayGetCount((CFArrayRef)Value) < 1) {
      goto LABEL_10;
    }
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, 0LL);
    CFTypeID v5 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      uint64_t v6 = v5;
      if (CFGetTypeID(ValueAtIndex) != v5)
      {
        unint64_t v15 = __cxa_allocate_exception(0x40uLL);
        CFTypeID v16 = CFGetTypeID(ValueAtIndex);
        uint64_t v17 = sub_10000A37C(v15, v16, v6);
      }
    }

    uint64_t v7 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Data");
    CFTypeID v8 = CFDataGetTypeID();
    if (!v7)
    {
      Value = 0LL;
      goto LABEL_11;
    }

    uint64_t v9 = v8;
    if (CFGetTypeID(v7) != v8)
    {
      uint64_t v18 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v19 = CFGetTypeID(v7);
      __int128 v20 = sub_10000A37C(v18, v19, v9);
    }

    BytePtr = CFDataGetBytePtr((CFDataRef)v7);
    if (BytePtr) {
      Value = *(const void **)BytePtr;
    }
    else {
LABEL_10:
    }
      Value = 0LL;
  }

void sub_1000F80C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1000F8100(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFIndex v4 = *(void *)(*(void *)(a1 + 72) + 224LL);
  CFTypeID v5 = bytes;
  sub_1000FED00(bytes, v4, &theDict);
  Value = CFDictionaryGetValue(theDict, @"resource-fork");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    CFTypeID v16 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v16;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "UDIF: Can't create dictionary resource fork";
  }

  uint64_t v8 = TypeID;
  if (CFGetTypeID(Value) != TypeID)
  {
    uint64_t v17 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v18 = CFGetTypeID(Value);
    CFTypeID v19 = sub_10000A37C(v17, v18, v8);
  }

  if (sub_1000BE308())
  {
    int v9 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v20 = 0LL;
      BOOL v10 = (os_log_s *)sub_1000BE278();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        uint64_t v11 = 3LL;
      }
      else {
        uint64_t v11 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      int v24 = 39;
      __int16 v25 = 2080;
      char v26 = "udif::details::UDIF_base::get_resources() const";
      __int16 v27 = 2114;
      int v28 = Value;
      unint64_t v12 = (const char *)_os_log_send_and_compose_impl( v11,  &v20,  0LL,  0LL,  &_mh_execute_header,  v10,  2LL,  "%.*s: XML_RSRC_FORK: %{public}@",  buf,  28);
      if (v12)
      {
        CFTypeID v13 = (char *)v12;
        fprintf(__stderrp, "%s\n", v12);
        free(v13);
      }
    }

    else
    {
      __int128 v14 = (os_log_s *)sub_1000BE278();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        int v24 = 39;
        __int16 v25 = 2080;
        char v26 = "udif::details::UDIF_base::get_resources() const";
        __int16 v27 = 2114;
        int v28 = Value;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%.*s: XML_RSRC_FORK: %{public}@", buf, 0x1Cu);
      }
    }

    *__error() = v9;
  }

  CFRetain(Value);
  *a2 = Value;
  sub_10000D8A4((const void **)&theDict);
  if (v5) {
    operator delete[](v5);
  }
}

void sub_1000F83B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  if (v5) {
    operator delete[](v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F83FC(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_1001907D0;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + sub_100006224(v6 - 32) = a1 + 40;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 56) = *a2;
  *(void *)(a1 + 64) = v4;
  if (v4)
  {
    CFTypeID v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)(a1 + sub_100006224(v49 + 112) = 0LL;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 256;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  sub_1000F5C00();
  sub_1000F7080();
  return a1;
}

void sub_1000F84BC(_Unwind_Exception *a1)
{
  uint64_t v8 = v5;
  sub_100019E30(v8, *(void **)(v3 + 112));
  BOOL v10 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = 0LL;
  if (v10) {
    operator delete(v10);
  }
  sub_100006224(v4);
  sub_10000A494(v2, *v7);
  sub_10000A494(v1, *v6);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F8508(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (void *)(a1 + 16);
  *(void *)(a1 + sub_100006224(v6 - 32) = 0xFFFFFFFE00000000LL;
  uint64_t v5 = (_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 40;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  sub_100019F4C((_DWORD *)(a1 + 64));
  *(_DWORD *)(a1 + 6_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  int v7 = *(_DWORD *)a2;
  LODWORD(v25) = 1752394093;
  sub_100019FE4((uint64_t)"blocks_signature", v7, &v25, 1LL);
  *(_DWORD *)a1 = 1752394093;
  int v8 = bswap32(*(_DWORD *)(a2 + 4));
  LODWORD(v25) = 1;
  sub_100019FE4((uint64_t)"version", v8, &v25, 1LL);
  *(_DWORD *)(a1 + 4) = 1;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a2 + 8));
  *uint64_t v4 = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *uint64_t v5 = bswap32(*(_DWORD *)(a2 + 32));
  LODWORD(v25) = *(_DWORD *)(a2 + 36);
  sub_1000F4ABC((unsigned int *)&v25, (unsigned int *)v24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)v24;
  __int128 v9 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 16) = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t v6 = v9;
  sub_100019F4C(v24);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v24[96] = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v24[112] = v10;
  *(void *)&v24[128] = *(void *)(a2 + 192);
  __int128 v11 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v24[32] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v24[48] = v11;
  __int128 v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v24[64] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v24[80] = v12;
  __int128 v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)int v24 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v24[16] = v13;
  __int128 v30 = *(_OWORD *)&v24[72];
  __int128 v31 = *(_OWORD *)&v24[88];
  __int128 v32 = *(_OWORD *)&v24[104];
  __int128 v33 = *(_OWORD *)&v24[120];
  __int128 v26 = *(_OWORD *)&v24[8];
  __int128 v27 = *(_OWORD *)&v24[24];
  __int128 v28 = *(_OWORD *)&v24[40];
  __int128 v29 = *(_OWORD *)&v24[56];
  uint64_t v25 = *(void *)v24;
  sub_1000F48C0((uint64_t)&v25, (int *)&v15);
  *(void *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = v22;
  *(_OWORD *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v17;
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 120) = v19;
  *(_DWORD *)(a1 + 200) = bswap32(*(_DWORD *)(a2 + 200));
  return a1;
}

void sub_1000F8774(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000F8780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001ABD4((_DWORD *)a1);
  v4[9] = 0;
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + sub_100020B9C(&v11, 1) = 0u;
  sub_100020B9C(&v6, bswap32(*(_DWORD *)a2));
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = bswap32(*(_DWORD *)(a2 + 4));
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a2 + 8));
  *(void *)(a1 + 16) = bswap64(*(void *)(a2 + 16));
  *(void *)(a1 + 24) = bswap64(*(void *)(a2 + 24));
  *(void *)(a1 + sub_100006224(v6 - 32) = bswap64(*(void *)(a2 + 32));
  return a1;
}

uint64_t sub_1000F8814( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6, uint64_t a7, int a8)
{
  *(_DWORD *)a1 = 1752394093;
  int v23 = 1752394093;
  sub_100019FE4((uint64_t)"blocks_signature", 1752394093, &v23, 1LL);
  *(_DWORD *)(a1 + 4) = 1;
  int v24 = 1;
  sub_100019FE4((uint64_t)"version", 1, &v24, 1LL);
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + sub_100006224(v6 - 32) = a5;
  *(_DWORD *)(a1 + 36) = *a6;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 64) = *(void *)a7;
  __int128 v16 = *(_OWORD *)(a7 + 8);
  __int128 v17 = *(_OWORD *)(a7 + 24);
  __int128 v18 = *(_OWORD *)(a7 + 40);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a7 + 56);
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = v17;
  *(_OWORD *)(a1 + 72) = v16;
  __int128 v19 = *(_OWORD *)(a7 + 72);
  __int128 v20 = *(_OWORD *)(a7 + 88);
  __int128 v21 = *(_OWORD *)(a7 + 104);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a7 + 120);
  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v2 - 120), 8) = v21;
  *(_OWORD *)(a1 + 152) = v20;
  *(_OWORD *)(a1 + 136) = v19;
  *(_DWORD *)(a1 + 200) = a8;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  return a1;
}

uint64_t sub_1000F893C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a1);
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a1 + 8));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(void *)(a2 + sub_100006224(v6 - 32) = bswap64(*(void *)(a1 + 32));
  return a2 + 40;
}

_DWORD *sub_1000F898C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(a1 + 4));
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = bswap64(*(void *)(a1 + 8));
  *(void *)(a2 + 16) = bswap64(*(void *)(a1 + 16));
  *(void *)(a2 + 24) = bswap64(*(void *)(a1 + 24));
  *(_DWORD *)(a2 + sub_100006224(v6 - 32) = bswap32(*(_DWORD *)(a1 + 32));
  *(_DWORD *)(a2 + 36) = bswap32(*(_DWORD *)(a1 + 36));
  __int128 v3 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v3;
  uint64_t v4 = (_DWORD *)sub_1000F4B00(a1 + 64, a2 + 64);
  *uint64_t v4 = bswap32(*(_DWORD *)(a1 + 200));
  return v4 + 1;
}

_DWORD *sub_1000F8A20(_DWORD *a1)
{
  a1[129] = 65537;
  return a1;
}

_WORD *sub_1000F8A50(unsigned __int16 *a1, _WORD *a2)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v5 = "*udif::details::plst::write(char *)";
    *((void *)&v5 + sub_100020B9C(&v11, 1) = 27LL;
    int v6 = 2;
    sub_1000F8B50(v7, &v5);
    sub_1000F5BB8(&v8, (uint64_t)a1);
    std::ostream::~ostream(&v8, off_1001917F0);
    sub_1000FC4A8((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  memcpy(a2, a1, 0x204uLL);
  a2[258] = bswap32(a1[258]) >> 16;
  a2[259] = bswap32(a1[259]) >> 16;
  memcpy(a2 + 260, a1 + 260, 0x200uLL);
  return a2 + 516;
}

void sub_1000F8B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000F8B50(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE6D4((uint64_t)a1, a2);
  *a1 = off_100191728;
  a1[45] = &off_100191828;
  a1[46] = &off_100191850;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100191728;
  a1[45] = off_1001917B0;
  a1[46] = off_1001917D8;
  return a1;
}

void sub_1000F8BD4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F8BF8(uint64_t a1)
{
  return a1;
}

CFDataRef sub_1000F8C38@<X0>(uint64_t a1@<X0>, CFDataRef *a2@<X8>)
{
  CFDataRef result = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

const void **sub_1000F8C70@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int16 *a4@<X3>, void *a5@<X4>, CFDictionaryRef *a6@<X8>)
{
  else {
    __int128 v11 = *(const char **)a1;
  }
  CFTypeRef cf = 0LL;
  CFStringRef v23 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
  if (*(_BYTE *)(a2 + 24))
  {
    else {
      __int128 v12 = *(const char **)a2;
    }
    CFTypeRef cf = CFStringCreateWithCString(kCFAllocatorDefault, v12, 0x8000100u);
  }

  else
  {
    CFTypeRef cf = &stru_10019A4D8;
  }

  keys[0] = 0LL;
  sub_10003AF44((const void **)keys);
  std::to_string(&v21, a3);
  if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v13 = &v21;
  }
  else {
    __int128 v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  CFStringRef v20 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v13, 0x600u);
  sub_10000AC5C((uint64_t)keys);
  sub_10000552C(&v26, (uint64_t)"0x", 2LL);
  *(_DWORD *)((char *)&v26 + *(void *)(v26 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v26 + *(void *)(v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(values[0]) = 48;
  sub_10000EDBC(&v26, (char *)values);
  *(void *)&v28[*(void *)(v26 - 24)] = 4LL;
  std::ostream::operator<<(&v26, *a4);
  sub_100029A84((uint64_t)&v26 + 8, &v19);
  *(void **)((char *)keys
  *(void *)&__int128 v26 = v14;
  if (v30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf((char *)&v26 + 8);
  std::ios::~ios(&v31);
  if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v15 = &v19;
  }
  else {
    uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v15, 0x600u);
  *(_OWORD *)keys = *(_OWORD *)off_1001907E8;
  __int128 v26 = *(_OWORD *)off_1001907F8;
  __int128 v27 = @"CFName";
  values[0] = a5;
  values[1] = (void *)v23;
  values[2] = (void *)v20;
  values[3] = (void *)v18;
  if (*(_BYTE *)(a2 + 24)) {
    CFIndex v16 = 5LL;
  }
  else {
    CFIndex v16 = 4LL;
  }
  values[4] = (void *)cf;
  *a6 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  v16,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_10003AF44((const void **)&v18);
  sub_10003AF44((const void **)&v20);
  sub_10003AF44(&cf);
  return sub_10003AF44((const void **)&v23);
}

void sub_1000F8F58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, const void *a24, const void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, const void *a31)
{
}

uint64_t sub_1000F8FF0(uint64_t a1)
{
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 16) = v3;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

void *sub_1000F9078(void *a1, int *a2)
{
  int v4 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 8);
  __int128 v5 = sub_10000552C(a1, (uint64_t)"type: ", 6LL);
  int v27 = *a2;
  int v6 = sub_10003AF74(v5, &v27);
  int v7 = sub_10000552C(v6, (uint64_t)" data: ", 7LL);
  uint64_t v8 = *v7;
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) |= 0x200u;
  uint64_t v9 = (void *)std::ostream::operator<<(v7, *((void *)a2 + 1));
  __int128 v10 = sub_10000552C(v9, (uint64_t)"/", 1LL);
  uint64_t v11 = *v10;
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v10 + *(void *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) &= ~0x200u;
  __int128 v12 = (void *)std::ostream::operator<<(v10, *((void *)a2 + 2));
  __int128 v13 = sub_10000552C(v12, (uint64_t)" logical: ", 10LL);
  uint64_t v14 = *v13;
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) |= 0x200u;
  uint64_t v15 = (void *)std::ostream::operator<<(v13, *((void *)a2 + 3));
  CFIndex v16 = sub_10000552C(v15, (uint64_t)"/", 1LL);
  uint64_t v17 = *v16;
  *(_DWORD *)((char *)v16 + *(void *)(*v16 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v16 + *(void *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v16 + *(void *)(v17 - 24) + 8) &= ~0x200u;
  CFStringRef v18 = (void *)std::ostream::operator<<(v16, *((void *)a2 + 4));
  std::string v19 = sub_10000552C(v18, (uint64_t)" io: ", 5LL);
  uint64_t v20 = *v19;
  *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) |= 0x200u;
  std::string v21 = (void *)std::ostream::operator<<(v19, *((void *)a2 + 5));
  __int128 v22 = sub_10000552C(v21, (uint64_t)",", 1LL);
  uint64_t v23 = *v22;
  *(_DWORD *)((char *)v22 + *(void *)(*v22 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v22 + *(void *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(_DWORD *)((char *)v22 + *(void *)(v23 - 24) + 8) &= ~0x200u;
  int v24 = (void *)std::ostream::operator<<(v22, *((void *)a2 + 6));
  uint64_t v25 = sub_10000552C(v24, (uint64_t)"/", 1LL);
  std::ostream::operator<<(v25, *((void *)a2 + 7));
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = v4;
  return a1;
}

uint64_t sub_1000F92BC(void *a1)
{
  uint64_t result = sub_1000FE8B0(*(const __CFString **)(*a1 + 8LL * a1[4]));
  if (!(_DWORD)result)
  {
    uint64_t v3 = a1;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v5);
    sub_10000552C(v5, (uint64_t)"UDIF: Failed converting type array string (", 43LL);
    std::ostream::operator<<(v5, *(void *)(*v3 + 8LL * v3[4]));
    sub_10000552C(v5, (uint64_t)") to type", 9LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)v5, 0x16u);
  }

  return result;
}

void sub_1000F937C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

const void *sub_1000F93B0(uint64_t a1)
{
  uint64_t result = CFDictionaryGetValue( *(CFDictionaryRef *)(a1 + 16),  *(const void **)(*(void *)a1 + 8LL * *(void *)(a1 + 32)));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"UDIF: Can't get resource array", 0x16u);
  }

  return result;
}

BOOL sub_1000F9408(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0LL;
  }
  int v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 24) != 0) == (v3 != 0)) {
      return *(void *)(a1 + 32) == *(void *)(a2 + 32);
    }
    return 0LL;
  }

  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t *sub_1000F9474(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = *a2;
  uint64_t v4 = a2[1];
  a1[2] = v4;
  if (v4)
  {
    __int128 v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  int v7 = operator new[](0x1F4uLL);
  v7[124] = 0;
  *((_OWORD *)v7 + 29) = 0u;
  *((_OWORD *)v7 + 30) = 0u;
  *((_OWORD *)v7 + 27) = 0u;
  *((_OWORD *)v7 + 2_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *((_OWORD *)v7 + 25) = 0u;
  *((_OWORD *)v7 + 26) = 0u;
  *((_OWORD *)v7 + 23) = 0u;
  *((_OWORD *)v7 + 24) = 0u;
  *((_OWORD *)v7 + 2sub_100020B9C(&v11, 1) = 0u;
  *((_OWORD *)v7 + 22) = 0u;
  *((_OWORD *)v7 + 19) = 0u;
  *((_OWORD *)v7 + 20) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 1_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 1sub_100020B9C(&v11, 1) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + sub_100020B9C(&v11, 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_OWORD *)int v7 = 0u;
  unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 40LL))(*a2);
  if (v8 <= 0x1FF)
  {
    unint64_t v14 = v8;
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_10018E820;
    exception[1] = "UDIF_header";
    exception[2] = 8LL;
    exception[3] = v14;
  }

  unsigned int v9 = sub_100042FD0(*a2, (uint64_t)v7, 500LL, v8 - 512);
  if ((v9 & 0x80000000) != 0)
  {
    CFIndex v16 = __cxa_allocate_exception(0x40uLL);
    void *v16 = &off_100196FC8;
    uint64_t v17 = std::generic_category();
    v16[1] = v9;
    void v16[2] = v17;
    *((_BYTE *)v16 + 24) = 0;
    *((_BYTE *)v16 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v16[7] = "UDIF: Can't read UDIF trailer";
  }

  __int128 v10 = operator new(0x1F4uLL);
  sub_1000F30CC((uint64_t)v10, (uint64_t)v7);
  uint64_t v11 = (void *)*a1;
  *a1 = (uint64_t)v10;
  if (v11) {
    operator delete(v11);
  }
  if (sub_1000BE308())
  {
    *(void *)&__int128 v18 = "UDIF_header::UDIF_header(const std::shared_ptr<Backend> &)";
    *((void *)&v18 + sub_100020B9C(&v11, 1) = 24LL;
    int v19 = 2;
    sub_1000F96E8(v20, &v18);
    __int128 v12 = sub_1000F3868(&v21, *a1);
    std::ostream::~ostream(v12, off_100191A10);
    sub_1000FCA54((uint64_t)v20);
    std::ios::~ios(&v22);
  }

  operator delete[](v7);
  return a1;
}

void sub_1000F9684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t v8 = *v4;
  *uint64_t v4 = 0LL;
  if (v8) {
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_1000F96E8(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000FE750((uint64_t)a1, a2);
  *a1 = off_100191948;
  a1[45] = &off_100191A48;
  a1[46] = &off_100191A70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100191948;
  a1[45] = off_1001919D0;
  a1[46] = off_1001919F8;
  return a1;
}

void sub_1000F976C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F9790(uint64_t a1)
{
  return a1;
}

void *sub_1000F97D4(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0LL;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  const void *result = v3;
  result[1] = v5;
  result[2] = v4;
  if (v4)
  {
    unint64_t v6 = (unint64_t *)(v4 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return result;
}

void sub_1000F9808(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100019D3C(a1);
  operator delete(v1);
}

uint64_t sub_1000F981C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190900);
  sub_1000F99E0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000F9854(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190900);
  sub_1000F99E0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000F9894(char *a1)
{
}

uint64_t sub_1000F98D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000F990C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000F9958(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100190900);
  sub_1000F99E0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000F9998(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190900);
  sub_1000F99E0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000F99E0(uint64_t a1)
{
  *(void *)a1 = off_1001909D0;
  sub_1000F9A7C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000F9A7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000F9BE4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000F9BA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000F9BD0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000F99E0(a1);
  operator delete(v1);
}

int *sub_1000F9BE4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 85LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 85LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000F9DC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F9DE0(a1);
}

uint64_t sub_1000F9DD4@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1000F9E84(a2, (uint64_t)a1, a1);
}

uint64_t sub_1000F9DE0(uint64_t a1)
{
  *(void *)a1 = v3;
  int v4 = 0;
  sub_10002976C(v5, &v4);
  *(_DWORD *)(a1 + 4) = v5[0];
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_1000296D8((int *)&v3, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_1000296D8((int *)&v3, 0) = 0u;
  return a1;
}

uint64_t sub_1000F9E84(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(a3) = *a3;
  int v7 = 32;
  sub_10002976C(&v8, &v7);
  *(_DWORD *)uint64_t v9 = (_DWORD)a3;
  memset(&v9[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v8;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = *(_OWORD *)&v9[64];
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)&v9[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v9[96];
  *(_OWORD *)(a1 + 12sub_1000296D8((int *)&v3, 0) = *(_OWORD *)&v9[112];
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v9[16];
  *(_OWORD *)(a1 + 4sub_1000296D8((int *)&v3, 0) = *(_OWORD *)&v9[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v9[48];
  return a1;
}

unsigned int *sub_1000F9F78(unsigned int *result, unsigned int a2)
{
  int *result = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_100171AC8;
    exception[1] = "descriptor_special";
    *((_DWORD *)exception + _Block_object_dispose((const void *)(v2 - 120), 8) = a2;
  }

  return result;
}

uint64_t sub_1000F9FE8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190B30);
  sub_1000FA1AC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FA020(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190B30);
  sub_1000FA1AC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FA060(char *a1)
{
}

uint64_t sub_1000FA0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FA0D8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FA124(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100190B30);
  sub_1000FA1AC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FA164(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190B30);
  sub_1000FA1AC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FA1AC(uint64_t a1)
{
  *(void *)a1 = off_100190C00;
  sub_1000FA248(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FA248(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FA3B0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FA370( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FA39C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FA1AC(a1);
  operator delete(v1);
}

int *sub_1000FA3B0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 417LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 417LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FA594(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190D50);
  sub_1000FA758(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FA5CC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190D50);
  sub_1000FA758(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FA60C(char *a1)
{
}

uint64_t sub_1000FA650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FA684(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FA6D0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100190D50);
  sub_1000FA758((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FA710(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190D50);
  sub_1000FA758((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FA758(uint64_t a1)
{
  *(void *)a1 = off_100190E20;
  sub_1000FA7F4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FA7F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FA95C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FA91C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FA948(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FA758(a1);
  operator delete(v1);
}

int *sub_1000FA95C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 458LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 458LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FAB40(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100190F70);
  sub_1000FAD04(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FAB78(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190F70);
  sub_1000FAD04(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FABB8(char *a1)
{
}

uint64_t sub_1000FABFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FAC30(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FAC7C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100190F70);
  sub_1000FAD04((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FACBC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100190F70);
  sub_1000FAD04((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FAD04(uint64_t a1)
{
  *(void *)a1 = off_100191040;
  sub_1000FADA0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FADA0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FAF08((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FAEC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FAEF4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FAD04(a1);
  operator delete(v1);
}

int *sub_1000FAF08(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 500LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 500LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FB0EC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191190);
  sub_1000FB2B0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FB124(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100191190);
  sub_1000FB2B0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FB164(char *a1)
{
}

uint64_t sub_1000FB1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FB1DC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FB228(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100191190);
  sub_1000FB2B0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FB268(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100191190);
  sub_1000FB2B0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FB2B0(uint64_t a1)
{
  *(void *)a1 = off_100191260;
  sub_1000FB34C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FB34C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FB4B4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FB474( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FB4A0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FB2B0(a1);
  operator delete(v1);
}

int *sub_1000FB4B4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 601LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 601LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FB698(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001913B0);
  sub_1000FB85C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FB6D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001913B0);
  sub_1000FB85C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FB710(char *a1)
{
}

uint64_t sub_1000FB754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FB788(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FB7D4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001913B0);
  sub_1000FB85C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FB814(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001913B0);
  sub_1000FB85C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FB85C(uint64_t a1)
{
  *(void *)a1 = off_100191480;
  sub_1000FB8F8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FB8F8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FBA60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FBA20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FBA4C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FB85C(a1);
  operator delete(v1);
}

int *sub_1000FBA60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 603LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 603LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FBC44(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001915D0);
  sub_1000FBE08(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FBC7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001915D0);
  sub_1000FBE08(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FBCBC(char *a1)
{
}

uint64_t sub_1000FBD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FBD34(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FBD80(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001915D0);
  sub_1000FBE08((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FBDC0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001915D0);
  sub_1000FBE08((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FBE08(uint64_t a1)
{
  *(void *)a1 = off_1001916A0;
  sub_1000FBEA4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FBEA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FC00C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FBFCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FBFF8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FBE08(a1);
  operator delete(v1);
}

int *sub_1000FC00C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 638LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 638LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FC1F0(uint64_t a1, void *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(void *)(a1 + 16) = 0LL;
  uint64_t v9 = *a3;
  *(void *)(a1 + 16) = *a3;
  if (v9) {
    CFRetain(v9);
  }
  *(_BYTE *)(a1 + 24) = 1;
  *(void *)(a1 + sub_100006224(v6 - 32) = a4;
  return a1;
}

void sub_1000FC254(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FC268(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 1;
  }

  *(void *)(result + sub_100006224(v6 - 32) = *(void *)(a2 + 32);
  *(_OWORD *)(result + 4sub_1000296D8((int *)&v3, 0) = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(void *)(result + 56) = 0LL;
    *(void *)(result + 56) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0LL;
    *(_BYTE *)(result + 64) = 1;
  }

  *(void *)(result + 7sub_1000296D8(&v6, 2) = *(void *)(a3 + 32);
  return result;
}

uint64_t sub_1000FC2E4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001917F0);
  sub_1000FC4A8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FC31C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001917F0);
  sub_1000FC4A8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FC35C(char *a1)
{
}

uint64_t sub_1000FC3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FC3D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FC420(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001917F0);
  sub_1000FC4A8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FC460(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001917F0);
  sub_1000FC4A8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FC4A8(uint64_t a1)
{
  *(void *)a1 = off_1001918C0;
  sub_1000FC544(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FC544(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FC6AC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FC66C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FC698(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FC4A8(a1);
  operator delete(v1);
}

int *sub_1000FC6AC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 768LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 768LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1000FC890(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100191A10);
  sub_1000FCA54(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000FC8C8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100191A10);
  sub_1000FCA54(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000FC908(char *a1)
{
}

uint64_t sub_1000FC94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000FC980(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000FC9CC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100191A10);
  sub_1000FCA54((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000FCA0C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100191A10);
  sub_1000FCA54((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000FCA54(uint64_t a1)
{
  *(void *)a1 = off_100191AE0;
  sub_1000FCAF0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000FCAF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000FCC58((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000FCC18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FCC44(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000FCA54(a1);
  operator delete(v1);
}

int *sub_1000FCC58(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 898LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        CFIndex v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 898LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  int *result = v5;
  return result;
}

_DWORD *sub_1000FCE3C(_DWORD *result, int a2)
{
  uint64_t v2 = 0LL;
  int *result = a2;
  uint64_t v5 = 0x200000001LL;
  int v6 = 4;
  do
  {
    a2 &= ~*(_DWORD *)((char *)&v5 + v2);
    v2 += 4LL;
  }

  while (v2 != 12);
  if (a2)
  {
    int v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100172A40;
    exception[1] = "header_flags";
    *((_DWORD *)exception + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
  }

  return result;
}

uint64_t sub_1000FCF0C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_1001909D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FCF74(_Unwind_Exception *a1)
{
}

void *sub_1000FCF88(void *a1, int *a2)
{
  int v3 = *a2;
  if (!*a2) {
    return sub_10000552C(a1, (uint64_t)"none", 4LL);
  }
  for (uint64_t i = 0LL; i != 18; i += 6LL)
  {
    int v5 = dword_100191B50[i];
    if ((v5 & v3) != 0)
    {
      v3 &= ~v5;
      sub_10000552C(a1, *(void *)&dword_100191B50[i + 2], *(void *)&dword_100191B50[i + 4]);
      if (v3)
      {
        char v7 = 44;
        sub_10000552C(a1, (uint64_t)&v7, 1LL);
      }
    }
  }

  return a1;
}

void *sub_1000FD044(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100191B98[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 12)
    {
      int v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  int v5 = &dword_100191B98[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

void *sub_1000FD088(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100191BC8[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 12)
    {
      int v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  int v5 = &dword_100191BC8[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

void *sub_1000FD0CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = *(void *)(*a1 - 24LL);
  int v6 = *(_DWORD *)((char *)a1 + v5 + 8);
  if (a3 == 1)
  {
    int v11 = *(_DWORD *)((char *)a1 + v5 + 8);
  }

  else
  {
    uint64_t v8 = a3 - 1;
    do
    {
      *(_DWORD *)((char *)v4 + *(void *)(*a1 - 24LL)) = *(_DWORD *)((_BYTE *)v4 + *(void *)(*a1 - 24LL)) & 0xFFFFFFB5 | 8;
      char v15 = 48;
      uint64_t v9 = sub_10000EDBC(a1, &v15);
      *(void *)((char *)v9 + *(void *)(*v9 - 24LL) + 24) = 2LL;
      ++a2;
      __int128 v10 = (void *)std::ostream::operator<<();
      sub_10000552C(v10, (uint64_t)" ", 1LL);
      --v8;
    }

    while (v8);
    uint64_t v5 = *(void *)(*a1 - 24LL);
    int v11 = *(_DWORD *)((char *)a1 + v5 + 8);
  }

  *(_DWORD *)((char *)a1 + v5 + _Block_object_dispose((const void *)(v2 - 120), 8) = v11 & 0xFFFFFFB5 | 8;
  char v14 = 48;
  __int128 v12 = sub_10000EDBC(a1, &v14);
  *(void *)((char *)v12 + *(void *)(*v12 - 24LL) + 24) = 2LL;
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = v6;
  return a1;
}

void *sub_1000FD218(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100191BF8[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 18)
    {
      int v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_100191BF8[v2];
  int v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

uint64_t sub_1000FD25C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1000FD2D8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1000FD2C0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000FD2D8(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = sub_1000FD35C(a1, a2, &v11, &v10, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    char v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 2_Block_object_dispose((const void *)(v2 - 120), 8) = *a4;
    sub_10000CC04(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_1000FD35C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      __int128 v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        __int128 v13 = v10;
      }

      while (v14);
    }

    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      uint64_t v17 = a1 + 1;
    }

uint64_t **sub_1000FD504(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    _BYTE v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_10000CC04(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t sub_1000FD5C4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_100190C00;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FD62C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FD640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = (*(_BYTE *)(a2 + 16) & 2) != 0 ? *(void *)a2 : *(void *)a2 + 1LL;
  uint64_t v6 = v2;
  do
  {
    unint64_t v7 = (*(_BYTE *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1LL;
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v3;
    }
    else {
      uint64_t v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }

  while (*v9);
  if (v6 == v2) {
    return v2;
  }
  unint64_t v10 = *(void *)(v6 + 32);
  if ((*(_BYTE *)(v6 + 48) & 2) == 0) {
    ++v10;
  }
  return v6;
}

uint64_t *sub_1000FD6C4(uint64_t **a1, uint64_t a2)
{
  __int128 v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
    }

    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }

  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }

  unint64_t v5 = (uint64_t *)(a2 + 24);
  if (sub_1000FD7E0(a2 + 24)) {
    return (uint64_t *)(a1 + 1);
  }
  uint64_t result = sub_1000FDC74(a1, a2, a2);
  if ((v7 & 1) == 0)
  {
    BOOL v8 = (uint64_t *)sub_10000D800((uint64_t)a1, (uint64_t)&v14);
    uint64_t v9 = (uint64_t **)sub_10000D4D8((uint64_t)a1, (uint64_t)&v14);
    unint64_t v10 = *v9;
    if (*v9)
    {
      do
      {
        uint64_t v11 = v10;
        unint64_t v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      do
      {
        uint64_t v11 = v9[2];
        BOOL v12 = *v11 == (void)v9;
        uint64_t v9 = (uint64_t **)v11;
      }

      while (v12);
    }

    __int128 v13 = v11;
    uint64_t v16 = v8;
    sub_1000FD8A0(a1, &v14, v5, &v16, &v13);
    return v16;
  }

  return result;
}

BOOL sub_1000FD7E0(uint64_t a1)
{
  LOBYTE(sub_1000EDC3C((uint64_t *)va, v2) = 0;
  char v12 = 0;
  if (byte_1001A3F94)
  {
    uint64_t v2 = qword_1001A3F08;
    int v3 = dword_1001A3F10;
    __int128 v8 = unk_1001A3F54;
    __int128 v9 = unk_1001A3F64;
    __int128 v10 = unk_1001A3F74;
    __int128 v11 = unk_1001A3F84;
    __int128 v4 = *(_OWORD *)algn_1001A3F14;
    __int128 v5 = unk_1001A3F24;
    __int128 v6 = unk_1001A3F34;
    __int128 v7 = unk_1001A3F44;
    char v12 = 1;
  }

  return sub_1000FDC20(a1, (uint64_t)&v2);
}

uint64_t sub_1000FD8A0(uint64_t **a1, __int128 *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  __int128 v8 = *a5;
  __int128 v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      __int128 v10 = v9;
      __int128 v9 = (uint64_t *)*v9;
    }

    while (v9);
  }

  else
  {
    __int128 v11 = *a5;
    do
    {
      __int128 v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      __int128 v11 = v10;
    }

    while (!v12);
  }

  __int128 v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }

  else
  {
    __int128 v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        __int128 v14 = (uint64_t *)v14[1];
      }

      while (v14);
    }

    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }

      while (v12);
    }
  }

  __int128 v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&__int128 v37 = qword_1001A3B40;
  *((void *)&v37 + sub_100020B9C(&v11, 1) = qword_1001A3B40;
  char v38 = 2;
  __int128 v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    uint64_t v17 = (__int128 *)((char *)a3 + 12);
    do
    {
      __int128 v37 = *((_OWORD *)v13 + 2);
      char v38 = *((_BYTE *)v13 + 48);
      __int128 v33 = v39;
      uint64_t v34 = v40;
      sub_10000D658((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v41);
      if ((_BYTE)v42)
      {
        if (v42 == 3)
        {
        }

        else if ((unint64_t)v41 < *((void *)&v41 + 1))
        {
          goto LABEL_24;
        }
      }

      else if ((unint64_t)v41 < *((void *)&v41 + 1) && (unint64_t)(v41 + 1) < *((void *)&v41 + 1))
      {
LABEL_24:
        LOBYTE(v43) = 0;
        char v53 = 0;
        if (*((_BYTE *)a3 + 140))
        {
          uint64_t v43 = *a3;
          int v44 = *((_DWORD *)a3 + 2);
          __int128 v18 = *(_OWORD *)((char *)a3 + 92);
          __int128 v49 = *(_OWORD *)((char *)a3 + 76);
          __int128 v50 = v18;
          __int128 v19 = *(_OWORD *)((char *)a3 + 124);
          __int128 v51 = *(_OWORD *)((char *)a3 + 108);
          __int128 v52 = v19;
          __int128 v20 = *(_OWORD *)((char *)a3 + 28);
          __int128 v45 = *v17;
          __int128 v46 = v20;
          __int128 v21 = *(_OWORD *)((char *)a3 + 60);
          __int128 v47 = *(_OWORD *)((char *)a3 + 44);
          __int128 v48 = v21;
          char v53 = 1;
        }

        *a4 = sub_1000FDDA8(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
      }

      __int128 v31 = v39;
      uint64_t v32 = v40;
      sub_10000D72C((uint64_t)&v31, (uint64_t)&v37, (uint64_t)&v41);
      __int128 v39 = v41;
      LOBYTE(v4sub_1000296D8((int *)&v3, 0) = v42;
      uint64_t v15 = *a4;
      unsigned int v22 = (uint64_t *)(*a4)[1];
      __int16 v23 = *a4;
      if (v22)
      {
        do
        {
          __int128 v13 = v22;
          unsigned int v22 = (uint64_t *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          __int128 v13 = (uint64_t *)v23[2];
          BOOL v12 = *v13 == (void)v23;
          __int16 v23 = v13;
        }

        while (!v12);
      }

      *a4 = v13;
    }

    while (v13 != v10);
  }

  __int128 v27 = v39;
  uint64_t v28 = v40;
  uint64_t result = sub_10000D72C((uint64_t)&v27, (uint64_t)&v35, (uint64_t)&v29);
  if (!(_BYTE)v30)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    unint64_t v26 = v29 + 1;
    goto LABEL_40;
  }

  if (v30 != 3)
  {
    unint64_t v25 = *((void *)&v29 + 1);
    unint64_t v26 = v29;
LABEL_40:
    if (v26 >= v25) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }

BOOL sub_1000FDC20(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 140)) {
    BOOL v2 = *(_BYTE *)(a2 + 140) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(_BYTE *)(a1 + 140) != 0) == (*(_BYTE *)(a2 + 140) != 0);
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return sub_100057718((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  }
  return 0LL;
}

uint64_t *sub_1000FDC74(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = (uint64_t **)sub_10000CB80((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_1000FDCF0((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10000CC04(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

_OWORD *sub_1000FDCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0xC8uLL);
  *(void *)a3 = result;
  *(void *)(a3 + _Block_object_dispose((const void *)(v2 - 120), 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((void *)result + 6) = *(void *)(a2 + 16);
  *((_BYTE *)result + 56) = 0;
  *((_BYTE *)result + 196) = 0;
  if (*(_BYTE *)(a2 + 164))
  {
    *((void *)result + 7) = *(void *)(a2 + 24);
    *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)((char *)result + 1sub_100006224(v6 - 32) = *(_OWORD *)(a2 + 100);
    *(_OWORD *)((char *)result + 14_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a2 + 116);
    *(_OWORD *)((char *)result + 164) = *(_OWORD *)(a2 + 132);
    *(_OWORD *)((char *)result + 18sub_1000296D8((int *)&v3, 0) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)((char *)result + 6_Block_object_dispose((const void *)(v2 - 120), 8) = *(_OWORD *)(a2 + 36);
    *(_OWORD *)((char *)result + 84) = *(_OWORD *)(a2 + 52);
    *(_OWORD *)((char *)result + 10sub_1000296D8((int *)&v3, 0) = *(_OWORD *)(a2 + 68);
    *(_OWORD *)((char *)result + 116) = *(_OWORD *)(a2 + 84);
    *((_BYTE *)result + 196) = 1;
  }

  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_1000FDDA8(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = (uint64_t **)sub_10000E2B0(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1000FDCF0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10000CC04(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

uint64_t sub_1000FDE28(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_100190E20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FDE90(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FDEA4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_100191040;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FDF0C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FDF20(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_1000FDFA0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 6;
      v6 -= 48LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1000FDF88(_Unwind_Exception *a1)
{
}

_OWORD *sub_1000FDFA0(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6 = sub_1000FE03C(a1, a2, &v11, &v10, a3);
  __int128 v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    __int128 v7 = operator new(0x50uLL);
    unint64_t v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    void v7[4] = *(_OWORD *)(a4 + 32);
    sub_10000CC04(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_1000FE03C(void *a1, void *a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  __int128 v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_100020C3C(a5, a2 + 4))
  {
    if ((void *)*a1 == a2)
    {
      BOOL v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    uint64_t v11 = (void *)*a2;
    if (*a2)
    {
      do
      {
        BOOL v12 = v11;
        uint64_t v11 = (void *)v11[1];
      }

      while (v11);
    }

    else
    {
      uint64_t v16 = a2;
      do
      {
        BOOL v12 = (void *)v16[2];
        BOOL v17 = *v12 == (void)v16;
        uint64_t v16 = v12;
      }

      while (v17);
    }

    return sub_1000A01C4((uint64_t)a1, a3, a5);
  }

  if (sub_100020C3C(a2 + 4, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      __int128 v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        __int128 v14 = (void *)*v14;
      }

      while (v14);
    }

    else
    {
      __int128 v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        __int128 v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = a2;
    }

    return a4;
  }

  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_1000FE1C0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_1000FE25C((uint64_t)a1, a3);
  if (v11 >> 57) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(v11 << 6);
  sub_1000FE2D0(a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_1000FE25C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x1FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x1FFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x1FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000FE2D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)*a1;
  uint64_t v11 = *a1 + (a1[1] << 6);
  uint64_t v12 = a2;
  if (*a1 != a4)
  {
    uint64_t v13 = (void *)*a1;
    uint64_t v12 = a2;
    do
    {
      *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
      __int128 v14 = *(_OWORD *)(v13 + 1);
      __int128 v15 = *(_OWORD *)(v13 + 3);
      __int128 v16 = *(_OWORD *)(v13 + 5);
      *(void *)(v12 + 56) = v13[7];
      *(_OWORD *)(v12 + 4sub_1000296D8((int *)&v3, 0) = v16;
      *(_OWORD *)(v12 + 24) = v15;
      *(_OWORD *)(v12 + _Block_object_dispose((const void *)(v2 - 120), 8) = v14;
      v12 += 64LL;
      v13 += 8;
    }

    while (v13 != (void *)a4);
  }

  *(_DWORD *)uint64_t v12 = *(_DWORD *)a6;
  __int128 v17 = *(_OWORD *)(a6 + 8);
  __int128 v18 = *(_OWORD *)(a6 + 24);
  __int128 v19 = *(_OWORD *)(a6 + 40);
  *(void *)(v12 + 56) = *(void *)(a6 + 56);
  *(_OWORD *)(v12 + 4sub_1000296D8((int *)&v3, 0) = v19;
  *(_OWORD *)(v12 + 24) = v18;
  *(_OWORD *)(v12 + _Block_object_dispose((const void *)(v2 - 120), 8) = v17;
  if (v11 != a4)
  {
    uint64_t v20 = v12 + (a5 << 6);
    do
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)a4;
      __int128 v21 = *(_OWORD *)(a4 + 8);
      __int128 v22 = *(_OWORD *)(a4 + 24);
      __int128 v23 = *(_OWORD *)(a4 + 40);
      *(void *)(v20 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(v20 + 4sub_1000296D8((int *)&v3, 0) = v23;
      *(_OWORD *)(v20 + 24) = v22;
      *(_OWORD *)(v20 + _Block_object_dispose((const void *)(v2 - 120), 8) = v21;
      a4 += 64LL;
      v20 += 64LL;
    }

    while (a4 != v11);
  }

  if (v10)
  {
    uint64_t v24 = (void *)*a1;
    if (a1 + 3 != (void *)*a1) {
      operator delete(v24);
    }
  }

  uint64_t v25 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v25;
  a1[2] = a3;
}

uint64_t sub_1000FE3E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_100191260;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FE450(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2 == -1) {
    sub_100026264();
  }
  __int128 v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_100191C40[v2])(&v5, a2 + 4);
}

void *sub_1000FE4B0(void ***a1)
{
  return sub_1000FE4C8(**a1);
}

void *sub_1000FE4BC(void ***a1, unsigned int *a2)
{
  return sub_1000272CC(**a1, a2);
}

void *sub_1000FE4C8(void *a1)
{
  uint64_t v1 = sub_10000552C(a1, (uint64_t)"none {", 6LL);
  uint64_t v2 = sub_10000552C(v1, (uint64_t)"[empty]", 7LL);
  return sub_10000552C(v2, (uint64_t)"}", 1LL);
}

uint64_t sub_1000FE504(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_100191480;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FE56C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE580(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_1001916A0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FE5E8(_Unwind_Exception *a1)
{
}

void *sub_1000FE5FC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &off_100191C60;
  v4[1] = 0LL;
  int v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1000FE640(void *a1)
{
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_1000FE658(_Unwind_Exception *a1)
{
}

void sub_1000FE670(std::__shared_weak_count *a1)
{
}

void sub_1000FE684(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t sub_1000FE694(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1000FE6D4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_1001918C0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FE73C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE750(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(asub_100020B9C(&v11, 1) = off_100191AE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000FE7B8(_Unwind_Exception *a1)
{
}

void sub_1000FE7CC(const __CFString *a1@<X0>, void *a2@<X8>)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  unint64_t v6 = operator new[](v5);
  bzero(v6, v5);
  if (!CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    unint64_t v8 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v8;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Couldn't convert CFStringRef to a proper std string";
  }

  sub_100006174(a2, (char *)v6);
  operator delete[](v6);
}

void sub_1000FE89C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FE8B0(const __CFString *a1)
{
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFIndex v5 = "Invalid resource key";
    goto LABEL_8;
  }

  unint64_t Length = CFStringGetLength(a1);
  if (Length >= 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFIndex v5 = "Resource name is too long to fit uint32_t";
    goto LABEL_8;
  }

  v8.length = Length;
  v8.location = 0LL;
  if (CFStringGetBytes(a1, v8, 0, 0, 0, buffer, 4LL, 0LL) != 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFIndex v5 = "Can't get key in cstring format";
LABEL_8:
    unint64_t v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)v5, 0x16u);
  }

  return bswap32(*(unsigned int *)buffer);
}

CFStringRef sub_1000FE970(unsigned int a1)
{
  *(_DWORD *)bytes = bswap32(a1);
  return CFStringCreateWithBytes(kCFAllocatorDefault, bytes, 4LL, 0, 0);
}

BOOL sub_1000FE9B4(__CFArray *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v5 = v3;
  if (v3) {
    CFArrayAppendValue(a1, v3);
  }
  sub_100006B64((const void **)&v5);
  return v3 != 0LL;
}

void sub_1000FEA20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL sub_1000FEA34(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v7 = v5;
  if (v5) {
    CFDictionarySetValue(a1, a2, v5);
  }
  sub_100006B64((const void **)&v7);
  return v5 != 0LL;
}

void sub_1000FEAB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

__CFDictionary *sub_1000FEAC4@<X0>( const void **keys@<X0>, const void **values@<X1>, CFIndex numValues@<X2>, CFMutableDictionaryRef *a4@<X8>)
{
  if (keys && values && numValues)
  {
    uint64_t result = CFDictionaryCreate( kCFAllocatorDefault,  keys,  values,  numValues,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFMutableDictionaryRef Mutable = result;
  }

  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFNumberRef v7 = 0LL;
    uint64_t result = (__CFDictionary *)sub_100006B34(&v7);
  }

  *a4 = Mutable;
  return result;
}

CFMutableDictionaryRef sub_1000FEB60@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *a1 = result;
  return result;
}

const void **sub_1000FEBA4@<X0>(CFPropertyListRef propertyList@<X0>, const __CFData **a2@<X8>)
{
  CFErrorRef error = 0LL;
  CFNumberRef v3 = CFPropertyListCreateData(kCFAllocatorDefault, propertyList, kCFPropertyListXMLFormat_v1_0, 0LL, &error);
  char v4 = v3;
  if (v3) {
    BOOL v5 = error == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v10 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Can't serialize property list";
  }

  CFIndex Length = CFDataGetLength(v3);
  CFTypeID TypeID = CFDataGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v12 = CFGetTypeID(v4);
    uint64_t v13 = sub_10000A37C(v11, v12, TypeID);
  }

  __int128 v14 = 0LL;
  *a2 = v4;
  a2[1] = (const __CFData *)Length;
  sub_10002A0F0(&v14);
  return sub_10007AD04((const void **)&error);
}

void sub_1000FECD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

const void **sub_1000FED00@<X0>(UInt8 *bytes@<X0>, CFIndex length@<X1>, void *a3@<X8>)
{
  CFErrorRef error = 0LL;
  CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, bytes, length);
  CFDataRef v19 = v4;
  if (v4) {
    BOOL v5 = error == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v11 = std::generic_category();
    exception[1] = 12LL;
    exception[2] = v11;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    exception[7] = "Can't create data for plist deserialization";
  }

  CFPropertyListFormat format = kCFPropertyListXMLFormat_v1_0;
  CFPropertyListRef v6 = CFPropertyListCreateWithData(kCFAllocatorDefault, v4, 0LL, &format, &error);
  if (v6) {
    BOOL v7 = error == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    CFTypeID v12 = __cxa_allocate_exception(0x40uLL);
    unsigned int Code = CFErrorGetCode(error);
    void *v12 = &off_100196FC8;
    __int128 v14 = std::generic_category();
    v12[1] = Code;
    void v12[2] = v14;
    *((_BYTE *)v12 + 24) = 0;
    *((_BYTE *)v12 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v12[7] = "Can't convert data to property list";
  }

  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v6) != TypeID)
  {
    __int128 v15 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v16 = CFGetTypeID(v6);
    __int128 v17 = sub_10000A37C(v15, v16, TypeID);
  }

  *a3 = v6;
  sub_10002A0F0((const void **)&v19);
  return sub_10007AD04((const void **)&error);
}

void sub_1000FEEB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
}

char *sub_1000FEEF8@<X0>( const __CFData *a1@<X0>, unsigned int a2@<W1>, size_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t Length = CFDataGetLength(a1);
  if (!a3) {
    a3 = Length;
  }
  unint64_t v9 = a3 + a2;
  if (__CFADD__(a3, a2) || Length < v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v13 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Unable to convert data to vector.", 0x16u);
  }

  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  BytePtr = CFDataGetBytePtr(a1);
  sub_1000FEFD4(a4, a3);
  return sub_1000FF1C8((uint64_t)a4, (char *)*a4, (char *)&BytePtr[a2], (char *)&BytePtr[v9], a3);
}

void sub_1000FEFB4(_Unwind_Exception *exception_object)
{
  CFNumberRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1000FEFD4(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000LL) != 0) {
      sub_100045090();
    }
    BOOL v5 = (char *)a1[1];
    CFPropertyListRef v6 = operator new(__sz);
    BOOL v7 = &v5[(void)v6 - v2];
    CFRange v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }

      while (v5 != (char *)v2);
      CFRange v8 = v6;
    }

    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2) {
      operator delete((void *)v2);
    }
  }

BOOL sub_1000FF07C(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  else {
    BOOL v5 = *(const char **)a3;
  }
  CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  CFStringRef v8 = v6;
  if (v6) {
    CFDictionarySetValue(a1, a2, v6);
  }
  sub_10003AF44((const void **)&v8);
  return v6 != 0LL;
}

void sub_1000FF104(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000FF118(CFMutableDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *a2 + 16 * v2;
    do
    {
      CFStringRef v6 = *(const void **)v4;
      BOOL v7 = *(const void **)(v4 + 8);
      v4 += 16LL;
      CFDictionaryAddValue(*a1, v6, v7);
    }

    while (v4 != v5);
  }

void sub_1000FF160(uint64_t *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  *a2 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_1000FF118(a2, a1);
}

void sub_1000FF1B4(_Unwind_Exception *a1)
{
}

char *sub_1000FF1C8(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_100045090();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      __int128 v17 = (char *)operator new(v15);
    }

    else
    {
      size_t v16 = 0LL;
      __int128 v17 = 0LL;
    }

    __int128 v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }

      while (v13);
      char v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }

    uint64_t v30 = &v27[a5];
    __int128 v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }

  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    CFDataRef v19 = &__src[a5];
    __int128 v21 = *(char **)(a1 + 8);
LABEL_17:
    __int128 v22 = &v5[a5];
    __int128 v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }

      while (v25);
    }

    *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }

  CFDataRef v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  __int128 v21 = &v10[v20];
  *(void *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1000FF7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FFB80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1000FFD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FFE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FFE80(uint64_t a1)
{
  uint64_t v2 = operator new[](*(void *)a1);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 32);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
    uint64_t v8 = v3 - v6;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)sub_1000450A4(a1 + 40, v10);
    }
    else {
      uint64_t v11 = 0LL;
    }
    uint64_t v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    *(void *)uint64_t v12 = v2;
    uint64_t v5 = v12 + 8;
    size_t v15 = *(char **)(a1 + 24);
    unint64_t v14 = *(char **)(a1 + 32);
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - sub_100020B9C(&v11, 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      unint64_t v14 = *(char **)(a1 + 24);
    }

    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + sub_100006224(v6 - 32) = v5;
    *(void *)(a1 + 4sub_1000296D8((int *)&v3, 0) = v13;
    if (v14) {
      operator delete(v14);
    }
  }

  else
  {
    *uint64_t v4 = v2;
    uint64_t v5 = v4 + 1;
  }

  *(void *)(a1 + sub_100006224(v6 - 32) = v5;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t sub_1000FFF70(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 24);
  unint64_t v3 = *(void ***)(a1 + 32);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        operator delete[](*v2);
      }
      ++v2;
    }

    while (v2 != v3);
    uint64_t v2 = *(void ***)(a1 + 24);
  }

  *(void *)(a1 + sub_100006224(v6 - 32) = v2;
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + sub_100006224(v6 - 32) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t sub_1000FFFE4(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  unsigned int v4 = a3;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  *(void *)(a1 + sub_100006224(v6 - 32) = 0LL;
  *(void *)(a1 + 4sub_1000296D8((int *)&v3, 0) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v6 = (void **)(a1 + 24);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 1018212795LL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v6, 2) = 0u;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v2 - 120), 8) = 0LL;
  *(void *)(a1 + 96) = 850045863LL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_1000296D8((int *)&v3, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 15sub_1000296D8(&v6, 2) = 0LL;
  if (a3 <= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a3;
  }
  *(void *)(a1 + 16) = v7;
  sub_10009FC10(v6, a3);
  for (; v4; --v4)
    sub_1000FFE80(a1);
  return a1;
}

void sub_100100074(_Unwind_Exception *a1)
{
}

void sub_100100090(uint64_t a1@<X0>, void *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 96);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 24) == v4)
  {
    if (*(void *)(a1 + 16) <= (unint64_t)*(unsigned int *)(a1 + 8))
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(a1 + 48), &__lk);
        uint64_t v4 = *(void *)(a1 + 32);
      }

      while (*(void *)(a1 + 24) == v4);
    }

    else
    {
      sub_1000FFE80(a1);
      uint64_t v4 = *(void *)(a1 + 32);
    }
  }

  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(a1 + sub_100006224(v6 - 32) = v4 - 8;
  uint64_t v8 = a1;
  *a2 = v5;
  uint64_t v6 = operator new(0x28uLL);
  *uint64_t v6 = &off_100191D00;
  v6[1] = 0LL;
  void v6[2] = 0LL;
  void v6[3] = v5;
  void v6[4] = a1;
  a2[1] = v6;
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_10010015C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_1001001A0(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::mutex *)(*a1 + 96LL);
  std::mutex::lock(v4);
  uint64_t v5 = *(void **)(v3 + 32);
  unint64_t v6 = *(void *)(v3 + 40);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t v9 = ((uint64_t)v5 - v8) >> 3;
    uint64_t v10 = v6 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1000450A4(v3 + 40, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = a2;
    unint64_t v7 = v14 + 8;
    __int128 v17 = *(char **)(v3 + 24);
    uint64_t v16 = *(char **)(v3 + 32);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - sub_100020B9C(&v11, 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      uint64_t v16 = *(char **)(v3 + 24);
    }

    *(void *)(v3 + 24) = v14;
    *(void *)(v3 + sub_100006224(v6 - 32) = v7;
    *(void *)(v3 + 4sub_1000296D8((int *)&v3, 0) = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    *uint64_t v5 = a2;
    unint64_t v7 = v5 + 1;
  }

  *(void *)(v3 + sub_100006224(v6 - 32) = v7;
  std::mutex::unlock(v4);
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 48));
}

void sub_1001002A0(_Unwind_Exception *a1)
{
}

void sub_1001002B8(std::__shared_weak_count *a1)
{
}

void sub_1001002CC(uint64_t a1)
{
}

uint64_t sub_1001002F0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void *sub_100100330(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = sub_10004683C(a1, a2);
  *unint64_t v6 = off_100191D60;
  unint64_t v7 = (uint64_t **)(v6 + 5);
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  __int128 v27 = v9;
  if (v9)
  {
    uint64_t p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176LL))(v8);
  uint64_t v14 = *a3;
  uint64_t v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    size_t v15 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  __int128 v17 = operator new(0x38uLL);
  v17[1] = 0LL;
  v17[2] = 0LL;
  *__int128 v17 = off_100191E40;
  v17[3] = 0LL;
  uint64_t v18 = (char *)(v17 + 3);
  *((_DWORD *)v17 + _Block_object_dispose((const void *)(v2 - 120), 8) = v12;
  v17[5] = v14;
  v17[6] = v13;
  if (v13)
  {
    CFDataRef v19 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    a1[5] = v18;
    a1[6] = v17;
    do
      unint64_t v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  else
  {
    a1[5] = v18;
    a1[6] = v17;
  }

  if (v27)
  {
    __int128 v22 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  a1[7] = 0LL;
  a1[8] = 0LL;
  uint64_t v24 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v24 = 850045863LL;
  *(_OWORD *)(v24 + _Block_object_dispose((const void *)(v2 - 120), 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 4sub_1000296D8((int *)&v3, 0) = 0u;
  *((void *)v24 + 7) = 0LL;
  sub_10010097C(a1 + 9, (uint64_t)v24);
  sub_10010054C((uint64_t)a1, *(_DWORD *)(a1[5] + 8LL));
  int64_t v25 = *v7;
  *int64_t v25 = sub_1000EEA98(a1[7]);
  return a1;
}

void sub_1001004F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10010054C(uint64_t a1, int a2)
{
  uint64_t v4 = *(std::mutex **)(a1 + 72);
  std::mutex::lock(v4);
  lseek(a2, 0LL, 0);
  AAByteStream v18 = AAFileStreamOpenWithFD(a2, 0);
  sub_1000EE6D8(&v21, &v18);
  sub_1000EE7AC(&v20, &v21);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(uint8_t **)(v5 + 16);
  unint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
  AAByteStream v18 = (AAByteStream)v6;
  CFDataRef v19 = v7;
  if (v7)
  {
    uint64_t p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_1000EE7DC(&v20, v6, 0x20uLL);
  sub_1000EE710(&v21, &v20, 0xFFFFFFFFFFFFFFFFLL, 0x4000000000000000uLL, 1, (uint64_t *)&v17);
  sub_100100A58(&v21, (uint64_t *)&v20, &v17, &v16);
  sub_1000198A4(a1 + 56, &v16);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    unint64_t v11 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  sub_1000EE6DC(&v17);
  uint64_t v13 = v19;
  if (v19)
  {
    uint64_t v14 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  sub_1000EE7B0(&v20);
  sub_1000EE6DC(&v21);
  std::mutex::unlock(v4);
}

void sub_1001006C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AAByteStream v5 = va_arg(va1, AAByteStream);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  AEAContext v10 = va_arg(va3, AEAContext);
  sub_1000EE6DC((AAByteStream *)va);
  sub_100006224((uint64_t)va1);
  sub_1000EE7B0((AEAContext *)va2);
  sub_1000EE6DC((AAByteStream *)va3);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void *sub_100100718(void *a1, void *a2, void *a3)
{
  AAByteStream v5 = sub_10004683C(a1, a3);
  *AAByteStream v5 = off_100191D60;
  uint64_t v6 = a2[6];
  v5[5] = a2[5];
  v5[6] = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  a1[7] = 0LL;
  a1[8] = 0LL;
  uint64_t v9 = a2[10];
  a1[9] = a2[9];
  a1[10] = v9;
  if (v9)
  {
    AEAContext v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  sub_10010054C((uint64_t)a1, *(_DWORD *)(a1[5] + 8LL));
  return a1;
}

void sub_1001007C8(_Unwind_Exception *a1)
{
}

double sub_1001007F4@<D0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

ssize_t sub_100100834(uint64_t a1, uint64_t a2)
{
  return sub_1000EEAA4(*(void *)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_100100858(uint64_t a1)
{
  return **(void **)(a1 + 40);
}

uint64_t sub_100100864(uint64_t a1)
{
  return sub_1000EEA8C(*(void *)(a1 + 56));
}

void *sub_10010086C(void *a1)
{
  *a1 = off_100191D60;
  sub_100006224((uint64_t)(a1 + 9));
  sub_100006224((uint64_t)(a1 + 7));
  sub_100006224((uint64_t)(a1 + 5));
  *a1 = off_100178D68;
  sub_100006224((uint64_t)(a1 + 3));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1001008CC(void *a1)
{
  *a1 = off_100191D60;
  sub_100006224((uint64_t)(a1 + 9));
  sub_100006224((uint64_t)(a1 + 7));
  sub_100006224((uint64_t)(a1 + 5));
  *a1 = off_100178D68;
  sub_100006224((uint64_t)(a1 + 3));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(a1);
}

void *sub_10010092C(uint64_t a1, void *a2)
{
  return sub_10000552C(a2, (uint64_t)"AEA", 3LL);
}

void sub_100100940(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100191E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100100950(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100191E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100100970(uint64_t a1)
{
  return sub_100006224(a1 + 40);
}

void *sub_10010097C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &off_100191E90;
  v4[1] = 0LL;
  int v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1001009C0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::mutex::~mutex(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1001009E0(std::__shared_weak_count *a1)
{
}

void sub_1001009F4(uint64_t a1)
{
  uint64_t v1 = *(std::mutex **)(a1 + 24);
  if (v1)
  {
    std::mutex::~mutex(v1);
    operator delete(v2);
  }

uint64_t sub_100100A18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

void *sub_100100A58@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x30uLL);
  double result = sub_100100AC8(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_100100AB4(_Unwind_Exception *a1)
{
}

void *sub_100100AC8(void *a1, void *a2, uint64_t *a3, void *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100191F08;
  sub_1000EEA64(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_100100AFC(_Unwind_Exception *a1)
{
}

void sub_100100B10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100191F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100100B20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100191F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

AAByteStream *sub_100100B40(AAByteStream *a1)
{
  uint64_t v2 = a1 + 3;
  sub_1000EE6DC(a1 + 5);
  sub_1000EE7B0(a1 + 4);
  return sub_1000EE6DC(v2);
}

void sub_100100B78(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  sub_100100BE0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100100BCC(_Unwind_Exception *a1)
{
}

void *sub_100100BE0(void *a1, void *a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100189520;
  sub_100100718(a1 + 3, a2, a3);
  return a1;
}

void sub_100100C14(_Unwind_Exception *a1)
{
}

dispatch_group_t *sub_100101820(dispatch_group_t *a1)
{
  *a1 = dispatch_group_create();
  return a1;
}

dispatch_object_s **sub_100101848(dispatch_object_s **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    dispatch_release(v2);
  }
  return a1;
}

uint64_t sub_100101874(dispatch_group_t *a1, dispatch_time_t a2)
{
  return dispatch_group_wait(*a1, a2);
}

dispatch_queue_t *sub_10010187C(dispatch_queue_t *a1, char *label, int a3)
{
  switch(a3)
  {
    case 2:
      uint64_t v6 = &_dispatch_queue_attr_concurrent;
      AAByteStream v5 = label;
      goto LABEL_6;
    case 1:
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
      dispatch_queue_t v7 = dispatch_queue_create_with_target_V2(label, 0LL, global_queue);
      goto LABEL_8;
    case 0:
      AAByteStream v5 = label;
      uint64_t v6 = 0LL;
LABEL_6:
      dispatch_queue_t v7 = dispatch_queue_create(v5, v6);
LABEL_8:
      *a1 = v7;
      break;
  }

  return a1;
}

void *sub_1001018F8(void *result, void *a2)
{
  void *result = *a2;
  *a2 = 0LL;
  return result;
}

void sub_100101908(dispatch_queue_t *a1, void *a2)
{
}

void sub_100101910(dispatch_queue_t *a1, dispatch_group_t *a2, void *a3)
{
}

void sub_100101920(dispatch_queue_t *a1, dispatch_block_t *a2, uint64_t a3)
{
  dispatch_block_t v4 = *a2;
  if (v4)
  {
    if (a3)
    {
      dispatch_time_t v6 = dispatch_time(0LL, 1000 * a3);
      dispatch_after(v6, *a1, *a2);
    }

    else
    {
      dispatch_async(*a1, v4);
    }
  }

void sub_100101980(dispatch_queue_t *a1, void *a2)
{
}

void sub_100101988(dispatch_queue_t *a1, void *a2)
{
}

void sub_100101990(dispatch_queue_t *a1, void *a2)
{
}

void sub_100101998(dispatch_object_t *a1)
{
}

void sub_1001019A0(dispatch_object_t *a1)
{
}

uint64_t sub_1001019A8(dispatch_object_t *a1, int a2)
{
  else {
    uint64_t v3 = *(void *)&asc_10014C8C0[8 * a2 - 8];
  }
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v3, 0LL);
  if (!global_queue) {
    return 22LL;
  }
  dispatch_set_target_queue(*a1, global_queue);
  return 0LL;
}

dispatch_semaphore_t *sub_100101A08(dispatch_semaphore_t *a1, uint64_t value)
{
  *a1 = dispatch_semaphore_create(value);
  return a1;
}

uint64_t sub_100101A34(dispatch_semaphore_t *a1, dispatch_time_t a2)
{
  return dispatch_semaphore_wait(*a1, a2);
}

uint64_t sub_100101A3C(dispatch_semaphore_t *a1)
{
  return dispatch_semaphore_signal(*a1);
}

dispatch_block_t *sub_100101A44(dispatch_block_t *a1, void *a2)
{
  *a1 = dispatch_block_create((dispatch_block_flags_t)0LL, a2);
  return a1;
}

void sub_100101A70(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    dispatch_block_cancel(v1);
  }
}

const void **sub_100101A80(const void **a1)
{
  uint64_t v2 = (void *)*a1;
  if (v2)
  {
    dispatch_block_cancel(v2);
    if (*a1) {
      _Block_release(*a1);
    }
  }

  return a1;
}

uint64_t sub_100101AC0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  AEAContext v10 = sub_10000552C(&v42, (uint64_t)"Couldn't open ", 14LL);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  uint64_t v14 = sub_10000552C(v10, v12, v13);
  unint64_t v15 = sub_10000552C(v14, (uint64_t)"' with flags ", 13LL);
  uint64_t v16 = *v15;
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) |= 0x200u;
  AAByteStream v17 = (void *)std::ostream::operator<<(v15, a3);
  *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v17 + *(void *)(*v17 - 24LL) + 8) & 0xFFFFFFB5 | 2;
  if (a4 == 13)
  {
    else {
      AAByteStream v18 = *(const char **)a2;
    }
    if (fstatat(a1, v18, &v40, 0))
    {
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"std::string FileDescriptorWrapper::handle_open_from_error_message(int, const std::string &, int, int)";
      v39.__r_.__value_.__l.__size_ = 65LL;
      LODWORD(v39.__r_.__value_.__r.__words[2]) = 16;
      sub_100101EAC(&v36, (__int128 *)&v39);
      sub_10000552C(&v37, (uint64_t)"fstatfs failed with err code", 28LL);
      CFDataRef v19 = __error();
      std::ostream::operator<<(&v37, *v19);
      sub_10000552C(&v37, (uint64_t)" trying to check permission after EACCES", 40LL);
      std::ostream::~ostream(&v37, off_100192348);
      sub_1001063D4((uint64_t)&v36);
      std::ios::~ios(&v38);
    }

    else
    {
      std::to_string(&v36, v40.st_gid);
      AEAContext v20 = getgrgid(v40.st_gid);
      if (v20) {
        sub_10004CEA0(&v36, v20->gr_name);
      }
      AAByteStream v21 = sub_10000552C(&v42, (uint64_t)", UID:GID(Name)=", 16LL);
      std::to_string(&v39, v40.st_uid);
      if ((v39.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v22 = &v39;
      }
      else {
        __int128 v22 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = v39.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v24 = sub_10000552C(v21, (uint64_t)v22, size);
      int64_t v25 = sub_10000552C(v24, (uint64_t)":", 1LL);
      if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v26 = &v36;
      }
      else {
        char v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = v36.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v27 = v36.__r_.__value_.__l.__size_;
      }
      sub_10000552C(v25, (uint64_t)v26, v27);
      uint64_t v28 = sub_10000552C(&v42, (uint64_t)" mode=", 6LL);
      uint64_t v29 = *v28;
      *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v28 + *(void *)(*v28 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v28 + *(void *)(v29 - 24) + 8) |= 0x200u;
      uint64_t v30 = (void *)std::ostream::operator<<(v28, v40.st_mode);
      *(_DWORD *)((char *)v30 + *(void *)(*v30 - 24LL) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)v30 + *(void *)(*v30 - 24LL) + 8) & 0xFFFFFFB5 | 2;
      __int128 v31 = sub_10000552C(v30, (uint64_t)" (our euid is ", 14LL);
      uint64_t v32 = geteuid();
      __int128 v33 = (void *)std::ostream::operator<<(v31, v32);
      sub_10000552C(v33, (uint64_t)")", 1LL);
    }
  }

  sub_100005F24((uint64_t)v43, a5);
  *(void *)((char *)v41
  uint64_t v42 = v34;
  if (v44 < 0) {
    operator delete((void *)v43[8]);
  }
  std::streambuf::~streambuf(v43);
  return std::ios::~ios(&v45);
}

void sub_100101E48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000F8FF0((uint64_t)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void *sub_100101EAC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010CB90((uint64_t)a1, a2);
  *a1 = off_100192280;
  a1[45] = &off_100192380;
  a1[46] = &off_1001923A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100192280;
  a1[45] = off_100192308;
  a1[46] = off_100192330;
  return a1;
}

void sub_100101F30(_Unwind_Exception *a1)
{
}

uint64_t sub_100101F54(uint64_t a1)
{
  return a1;
}

uint64_t sub_100101F94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = open((const char *)a1, a2, 438LL);
  if ((_DWORD)v4 == -1)
  {
    int v12 = *__error();
    if (sub_1000BE2F0())
    {
      *(void *)&__int128 v24 = 0LL;
      uint64_t v13 = (os_log_s *)sub_1000BE278();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        uint64_t v14 = 3LL;
      }
      else {
        uint64_t v14 = 2LL;
      }
      int v15 = *__error();
      *(_DWORD *)buf = 68158467;
      *(_DWORD *)&uint8_t buf[4] = 69;
      __int16 v27 = 2080;
      uint64_t v28 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
      __int16 v29 = 2081;
      uint64_t v30 = v3;
      __int16 v31 = 1024;
      int v32 = v15;
      int v23 = 34;
      uint64_t v16 = (const char *)_os_log_send_and_compose_impl( v14,  &v24,  0LL,  0LL,  &_mh_execute_header,  v13,  16LL,  "%.*s: Failed opening %{private}s, errno %d",  buf,  v23);
      if (v16)
      {
        AAByteStream v17 = (char *)v16;
        fprintf(__stderrp, "%s\n", v16);
        free(v17);
      }
    }

    else
    {
      AAByteStream v18 = (os_log_s *)sub_1000BE278();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v19 = *__error();
        *(_DWORD *)buf = 68158467;
        *(_DWORD *)&uint8_t buf[4] = 69;
        __int16 v27 = 2080;
        uint64_t v28 = "static int FileDescriptorWrapper::open_file(const std::string &, int)";
        __int16 v29 = 2081;
        uint64_t v30 = v3;
        __int16 v31 = 1024;
        int v32 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%.*s: Failed opening %{private}s, errno %d",  buf,  0x22u);
      }
    }

    *__error() = v12;
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)buf);
    sub_10000552C(buf, (uint64_t)"Couldn't open file with flags ", 30LL);
    uint64_t v21 = *(void *)buf;
    *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 8] = *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 8] & 0xFFFFFFB5 | 8;
    *(_DWORD *)&buf[*(void *)(v21 - 24) + 8] |= 0x200u;
    std::ostream::operator<<(buf, a2);
    __int128 v22 = __error();
    sub_100006AA8((uint64_t)exception, (uint64_t)buf, *v22);
  }

  uint64_t v5 = v4;
  if (sub_1000BE308())
  {
    *(void *)&__int128 v24 = "int FileDescriptorWrapper::open_file(const std::string &, int)";
    *((void *)&v24 + sub_100020B9C(&v11, 1) = 36LL;
    int v25 = 2;
    sub_1001023C8(buf, &v24);
    sub_10000552C(&v33, (uint64_t)"'", 1LL);
    int v6 = *(char *)(v3 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = *(void *)v3;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v8 = *(void *)(v3 + 8);
    }
    sub_10000552C(&v33, v7, v8);
    sub_10000552C(&v33, (uint64_t)"' opened successfully with flags ", 33LL);
    uint64_t v9 = v33;
    *(_DWORD *)((char *)&v33 + *(void *)(v33 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v33 + *(void *)(v33 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v33 + *(void *)(v9 - 24) + 8) |= 0x200u;
    std::ostream::operator<<(&v33, a2);
    uint64_t v10 = v33;
    *(_DWORD *)((char *)&v33 + *(void *)(v33 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v33 + *(void *)(v10 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v33 + *(void *)(v10 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_10000552C(&v33, (uint64_t)", fd=", 5LL);
    std::ostream::operator<<(&v33, v5);
    std::ostream::~ostream(&v33, off_100192568);
    sub_100106980((uint64_t)buf);
    std::ios::~ios(&v34);
  }

  return v5;
}

void sub_10010237C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_1001023C8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010CC0C((uint64_t)a1, a2);
  *a1 = off_1001924A0;
  a1[45] = &off_1001925A0;
  a1[46] = &off_1001925C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001924A0;
  a1[45] = off_100192528;
  a1[46] = off_100192550;
  return a1;
}

void sub_10010244C(_Unwind_Exception *a1)
{
}

uint64_t sub_100102470(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001024B0(int a1, uint64_t a2, int a3)
{
  uint64_t v5 = a3 | 0x100u;
  int v26 = a3 | 0x100;
  __int16 v27 = 438;
  else {
    uint64_t v6 = *(void *)a2;
  }
  uint64_t v28 = v6;
  uint64_t v7 = fcntl(a1, 56, &v26);
  if ((_DWORD)v7 == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v20);
    uint64_t v16 = __error();
    sub_100101AC0(a1, a2, v5, *v16, &v23);
    if ((v25 & 0x80u) == 0) {
      AAByteStream v17 = &v23;
    }
    else {
      AAByteStream v17 = (__int128 *)v23;
    }
    if ((v25 & 0x80u) == 0) {
      uint64_t v18 = v25;
    }
    else {
      uint64_t v18 = *((void *)&v23 + 1);
    }
    sub_10000552C(v20, (uint64_t)v17, v18);
    int v19 = __error();
    sub_100006AA8((uint64_t)exception, (uint64_t)v20, *v19);
  }

  uint64_t v8 = v7;
  if (sub_1000BE308())
  {
    *(void *)&__int128 v23 = "int FileDescriptorWrapper::open_from(int, const std::string &, int)";
    *((void *)&v23 + sub_100020B9C(&v11, 1) = 36LL;
    int v24 = 2;
    sub_100102750(v20, &v23);
    sub_10000552C(&v21, (uint64_t)"'", 1LL);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v21, v10, v11);
    sub_10000552C(&v21, (uint64_t)"' opened successfully with flags ", 33LL);
    uint64_t v12 = v21;
    *(_DWORD *)((char *)&v21 + *(void *)(v21 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v21 + *(void *)(v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)&v21 + *(void *)(v12 - 24) + 8) |= 0x200u;
    std::ostream::operator<<(&v21, v5);
    uint64_t v13 = v21;
    *(_DWORD *)((char *)&v21 + *(void *)(v21 - 24) + 8) &= ~0x200u;
    *(_DWORD *)((char *)&v21 + *(void *)(v13 - 24) + _Block_object_dispose((const void *)(v2 - 120), 8) = *(_DWORD *)((_BYTE *)&v21 + *(void *)(v13 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_10000552C(&v21, (uint64_t)", fd=", 5LL);
    std::ostream::operator<<(&v21, v8);
    std::ostream::~ostream(&v21, off_100192788);
    sub_100106F2C((uint64_t)v20);
    std::ios::~ios(&v22);
  }

  return v8;
}

void sub_1001026E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  if (*(char *)(v5 - 65) < 0)
  {
    operator delete(*(void **)(v5 - 88));
    sub_100005234((uint64_t)va);
    if ((v4 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else
  {
    sub_100005234((uint64_t)va);
    if (!v4) {
      goto LABEL_6;
    }
  }

  __cxa_free_exception(v3);
  goto LABEL_6;
}

void *sub_100102750(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010CC88((uint64_t)a1, a2);
  *a1 = off_1001926C0;
  a1[45] = &off_1001927C0;
  a1[46] = &off_1001927E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001926C0;
  a1[45] = off_100192748;
  a1[46] = off_100192770;
  return a1;
}

void sub_1001027D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001027F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100102838(uint64_t a1)
{
  *(void *)a1 = off_100191F58;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != -1)
  {
    close(v2);
    if (sub_1000BE308())
    {
      *(void *)&__int128 v4 = "FileDescriptorWrapper::~FileDescriptorWrapper()";
      *((void *)&v4 + sub_100020B9C(&v11, 1) = 45LL;
      int v5 = 2;
      sub_100102914(v6, &v4);
      sub_10000552C(&v7, (uint64_t)"File descriptor ", 16LL);
      std::ostream::operator<<(&v7, *(unsigned int *)(a1 + 8));
      sub_10000552C(&v7, (uint64_t)" closed", 7LL);
      std::ostream::~ostream(&v7, off_1001929A8);
      sub_1001074D8((uint64_t)v6);
      std::ios::~ios(&v8);
    }
  }

  return a1;
}

void *sub_100102914(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010CD04((uint64_t)a1, a2);
  *a1 = off_1001928E0;
  a1[45] = &off_1001929E0;
  a1[46] = &off_100192A08;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001928E0;
  a1[45] = off_100192968;
  a1[46] = off_100192990;
  return a1;
}

void sub_100102998(_Unwind_Exception *a1)
{
}

uint64_t sub_1001029BC(uint64_t a1)
{
  return a1;
}

void sub_100102A00(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100102838(a1);
  operator delete(v1);
}

uint64_t sub_100102A14(uint64_t a1, int a2, char a3)
{
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v2 - 120), 8) = a2;
  *(void *)a1 = off_10017A3B8;
  *(_BYTE *)(a1 + 1sub_1000296D8(&v6, 2) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_100006224(v6 - 32) = 0u;
  sub_100102A68(a1);
  return a1;
}

void sub_100102A54(_Unwind_Exception *a1)
{
}

uint64_t sub_100102A68(uint64_t a1)
{
  uint64_t result = sub_100102E60(a1, &v35);
  if ((v35.st_mode & 0xB000) != 0x2000)
  {
    *(void *)(a1 + 16) = v35.st_size;
    goto LABEL_17;
  }

  bzero(v38, 0x400uLL);
  bzero(bsdName, 0x400uLL);
  if (fcntl(*(_DWORD *)(a1 + 8), 50, v38) < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    AEAContext v20 = __error();
    uint64_t v21 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"get path failed", *v20);
  }

  if (!basename_r(v38, bsdName))
  {
    uint64_t v22 = __cxa_allocate_exception(0x40uLL);
    __int128 v23 = __error();
    int v24 = (void *)sub_100004494((uint64_t)v22, (uint64_t)"basename_r failed", *v23);
  }

  uint64_t v3 = IOBSDNameMatching(kIOMainPortDefault, 0, bsdName);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  io_registry_entry_t v5 = MatchingService;
  if (!MatchingService)
  {
    unsigned __int8 v25 = __cxa_allocate_exception(0x40uLL);
    int v26 = (void *)sub_100004494((uint64_t)v25, (uint64_t)"device not found in registry", 0x13u);
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"Size", kCFAllocatorDefault, 0);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (CFProperty)
  {
    uint64_t v8 = TypeID;
    if (CFGetTypeID(CFProperty) != TypeID)
    {
      __int16 v27 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v28 = CFGetTypeID(CFProperty);
      __int16 v29 = sub_10000A374(v27, v28, v8);
    }
  }

  CFTypeRef cf = CFProperty;
  CFTypeRef v9 = IORegistryEntryCreateCFProperty(v5, @"Preferred Block Size", kCFAllocatorDefault, 0);
  CFTypeID v10 = CFNumberGetTypeID();
  if (v9)
  {
    uint64_t v11 = v10;
    if (CFGetTypeID(v9) != v10)
    {
      uint64_t v30 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v31 = CFGetTypeID(v9);
      int v32 = sub_10000A37C(v30, v31, v11);
    }
  }

  CFTypeRef v33 = v9;
  IOObjectRelease(v5);
  if (!cf || (CFTypeID v12 = CFGetTypeID(cf), v12 != CFNumberGetTypeID()))
  {
    int v15 = "device size not found in registry";
LABEL_20:
    uint64_t v16 = 19LL;
    goto LABEL_22;
  }

  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr))
  {
LABEL_21:
    int v15 = "Failed converting CFNumber to longlong";
    uint64_t v16 = 22LL;
LABEL_22:
    AAByteStream v17 = __cxa_allocate_exception(0x40uLL);
    *AAByteStream v17 = &off_100196FC8;
    uint64_t v18 = std::generic_category();
    v17[1] = v16;
    v17[2] = v18;
    *((_BYTE *)v17 + 24) = 0;
    *((_BYTE *)v17 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
    v17[7] = v15;
  }

  *(void *)(a1 + 16) = valuePtr;
  if (!v33 || (CFTypeID v13 = CFGetTypeID(v33), v13 != CFNumberGetTypeID()))
  {
    int v15 = "device block size not found in registry";
    goto LABEL_20;
  }

  if (!CFNumberGetValue((CFNumberRef)v33, kCFNumberLongLongType, &valuePtr)) {
    goto LABEL_21;
  }
  *(void *)(a1 + 24) = valuePtr;
  sub_100006B64(&v33);
  uint64_t result = (uint64_t)sub_100006B64(&cf);
LABEL_17:
  __darwin_ino64_t st_ino = v35.st_ino;
  *(void *)(a1 + sub_100006224(v6 - 32) = v35.st_dev;
  *(void *)(a1 + 4sub_1000296D8((int *)&v3, 0) = st_ino;
  return result;
}

void sub_100102E08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13)
{
}

uint64_t sub_100102E60@<X0>(uint64_t a1@<X0>, stat *a2@<X8>)
{
  uint64_t result = fstat(*(_DWORD *)(a1 + 8), a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    __int128 v4 = __error();
    io_registry_entry_t v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"fstat failed", *v4);
  }

  return result;
}

void sub_100102EC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100102ED4@<X0>(uint64_t a1@<X0>, statfs *a2@<X8>)
{
  uint64_t result = fstatfs(*(_DWORD *)(a1 + 8), a2);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    __int128 v4 = __error();
    io_registry_entry_t v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"fstatfs failed", *v4);
  }

  return result;
}

void sub_100102F34(_Unwind_Exception *a1)
{
}

BOOL sub_100102F48(uint64_t a1)
{
  return (*(_WORD *)(a1 + 4) & 0xB000) == 0x2000;
}

BOOL sub_100102F60(uint64_t a1)
{
  return (v2.st_mode & 0xB000) == 0x2000;
}

uint64_t sub_100102F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&__int128 v7 = "FileDescriptor::get_mounted_on_fs() const";
  *((void *)&v7 + sub_100020B9C(&v11, 1) = 33LL;
  int v8 = 2;
  sub_100005444(&__src, &v7);
  sub_10000552C(&__src.f_mntonname[272], (uint64_t)"File system is ", 15LL);
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  sub_10000552C(&__src.f_mntonname[272], v4, v5);
  std::ostream::~ostream(&__src.f_mntonname[272], off_100171488);
  sub_100005978((uint64_t)&__src);
  return std::ios::~ios(&__src.f_mntonname[280]);
}

void sub_1001030B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

BOOL sub_10010312C(uint64_t a1, uint64_t a2)
{
  int32_t v3 = v7.f_fsid.val[0];
  int32_t v4 = v7.f_fsid.val[1];
  sub_100102ED4(a2, &v7);
  return v3 == v7.f_fsid.val[0] && v4 == v7.f_fsid.val[1];
}

void sub_1001031CC(uint64_t a1)
{
  stat v2 = (unint64_t *)(a1 + 144);
  uint64_t v4 = a1;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    uint64_t v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_10010CD80);
  }

uint64_t sub_10010321C(int a1, uint64_t *a2)
{
  else {
    stat v2 = (uint64_t *)*a2;
  }
  if (fcntl(a1, 57, v2) < 0) {
    return -*__error();
  }
  else {
    return 0LL;
  }
}

off_t sub_100103268(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*__error() != 13 && *__error() != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v13);
    sub_10000552C(v13, (uint64_t)"Cannot stat ", 12LL);
    int v9 = *(char *)(v2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = v2;
    }
    else {
      uint64_t v10 = *(void *)v2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v2 + 8);
    }
    sub_10000552C(v13, v10, v11);
    uint64_t v12 = __error();
    sub_100006AA8((uint64_t)exception, (uint64_t)v13, *v12);
  }

  uint64_t v4 = operator new(0x458uLL);
  uint64_t v5 = sub_1001024B0(a1, v2, 0);
  sub_100052AA8((uint64_t)v4, v5, 0LL, 0);
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v4 + 40LL))(v4);
  (*(void (**)(void *))(*(void *)v4 + 8LL))(v4);
  return v6;
}

void sub_1001033B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10010340C(uint64_t a1, uint64_t a2)
{
  ssize_t v4 = pwrite(**(_DWORD **)(a1 + 56), *(const void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v5 = v4;
  if (v4 < 0 || v4 != *(void *)(a2 + 16))
  {
    *(void *)&__int128 v12 = "int FileLocal::write(const sg_entry &)";
    *((void *)&v12 + sub_100020B9C(&v11, 1) = 20LL;
    int v13 = 16;
    sub_1001035A4(v14, &v12);
    sub_10000552C(&v15, (uint64_t)"Error writing file @ ", 21LL);
    sub_10011E9EC(&v15, (void *)a2);
    sub_10000552C(&v15, (uint64_t)". returned ", 11LL);
    std::ostream::operator<<(&v15, v5);
    sub_10000552C(&v15, (uint64_t)" with errno: ", 13LL);
    uint64_t v10 = __error();
    std::ostream::operator<<(&v15, *v10);
    std::ostream::~ostream(&v15, off_100192BC8);
    sub_100107A84((uint64_t)v14);
    std::ios::~ios(&v16);
    if (v5 == -1) {
      return -*__error();
    }
    else {
      return 4294967291LL;
    }
  }

  else
  {
    unint64_t v6 = *(void *)(a2 + 24) + v4;
    statfs v7 = (unint64_t *)(*(void *)(a1 + 40) + 64LL);
    unint64_t v8 = atomic_load(v7);
    if (v8 < v6)
    {
      do
      {
        unint64_t v9 = __ldaxr(v7);
        if (v9 == v8)
        {
          if (!__stlxr(v6, v7)) {
            return v5;
          }
        }

        else
        {
          __clrex();
        }

        unint64_t v8 = v9;
      }

      while (v9 < v6);
    }
  }

  return v5;
}

void sub_100103590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1001035A4(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010D808((uint64_t)a1, a2);
  *a1 = off_100192B00;
  a1[45] = &off_100192C00;
  a1[46] = &off_100192C28;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100192B00;
  a1[45] = off_100192B88;
  a1[46] = off_100192BB0;
  return a1;
}

void sub_100103628(_Unwind_Exception *a1)
{
}

uint64_t sub_10010364C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10010368C(uint64_t a1, uint64_t a2)
{
  ssize_t v3 = pread(**(_DWORD **)(a1 + 56), *(void **)a2, *(void *)(a2 + 16), *(void *)(a2 + 24));
  ssize_t v4 = v3;
  if (v3 < 0 || v3 != *(void *)(a2 + 16))
  {
    *(void *)&__int128 v7 = "int FileLocal::read(const sg_entry &)";
    *((void *)&v7 + sub_100020B9C(&v11, 1) = 19LL;
    int v8 = 16;
    sub_1001037C8(v9, &v7);
    sub_10000552C(&v10, (uint64_t)"Error reading file @ ", 21LL);
    sub_10011E9EC(&v10, (void *)a2);
    sub_10000552C(&v10, (uint64_t)". returned ", 11LL);
    std::ostream::operator<<(&v10, v4);
    sub_10000552C(&v10, (uint64_t)" with errno: ", 13LL);
    ssize_t v5 = __error();
    std::ostream::operator<<(&v10, *v5);
    std::ostream::~ostream(&v10, off_100192DE8);
    sub_100108030((uint64_t)v9);
    std::ios::~ios(&v11);
    if (v4 == -1) {
      return -*__error();
    }
    else {
      return 4294967291LL;
    }
  }

  return v4;
}

void sub_1001037B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1001037C8(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010D884((uint64_t)a1, a2);
  *a1 = off_100192D20;
  a1[45] = &off_100192E20;
  a1[46] = &off_100192E48;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100192D20;
  a1[45] = off_100192DA8;
  a1[46] = off_100192DD0;
  return a1;
}

void sub_10010384C(_Unwind_Exception *a1)
{
}

uint64_t sub_100103870(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001038B0(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  if (v4 < a2)
  {
    char __buf = 0;
    ssize_t v5 = pwrite(**(_DWORD **)(a1 + 56), &__buf, 1uLL, a2 - 1);
    if (v5 != 1)
    {
      ssize_t v6 = v5;
      *(void *)&__int128 v10 = "int FileLocal::truncate(uint64_t)";
      *((void *)&v10 + sub_100020B9C(&v11, 1) = 23LL;
      int v11 = 16;
      sub_10007D500(v12, &v10);
      sub_10000552C(&v13, (uint64_t)"Failed to increase file size, pwrite returned ", 46LL);
      std::ostream::operator<<(&v13, v6);
      sub_10000552C(&v13, (uint64_t)" errno: ", 8LL);
      __int128 v7 = __error();
      std::ostream::operator<<(&v13, *v7);
      std::ostream::~ostream(&v13, off_100182138);
      sub_100081B20((uint64_t)v12);
      std::ios::~ios(v14);
      if (v6 != -1) {
        return 4294967291LL;
      }
      return -*__error();
    }

void sub_100103A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100103A94(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010D900((uint64_t)a1, a2);
  *a1 = off_100192F40;
  a1[45] = &off_100193040;
  a1[46] = &off_100193068;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100192F40;
  a1[45] = off_100192FC8;
  a1[46] = off_100192FF0;
  return a1;
}

void sub_100103B18(_Unwind_Exception *a1)
{
}

uint64_t sub_100103B3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100103B7C(uint64_t a1, uint64_t a2)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v17 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v17 + sub_100020B9C(&v11, 1) = 20LL;
    int v18 = 2;
    sub_100073B38(v19, &v17);
    sub_10000552C(&v20, (uint64_t)"Calling ", 8LL);
    sub_10011E968(&v20, a2);
    sub_10000552C(&v20, (uint64_t)" on ", 4LL);
    sub_10011EBB4((uint64_t)&v20, a1);
    std::ostream::~ostream(&v20, off_100180318);
    sub_100078E14((uint64_t)v19);
    std::ios::~ios(v21);
  }

  if ((_DWORD)a2 == 1)
  {
    if (fsync(**(_DWORD **)(a1 + 56)) == -1)
    {
      uint64_t v4 = -*__error();
      goto LABEL_6;
    }

    return 0LL;
  }

  if ((_DWORD)a2 == 2) {
    uint64_t v5 = 2LL;
  }
  else {
    uint64_t v5 = 1LL;
  }
  if ((*(void *)(*(void *)(a1 + 40) + 56LL) & v5) != 0)
  {
    if (sub_1000BE308())
    {
      *(void *)&__int128 v17 = "int FileLocal::flush(di_flush_mode)";
      *((void *)&v17 + sub_100020B9C(&v11, 1) = 20LL;
      int v18 = 2;
      sub_100103F44(v19, &v17);
      sub_10011E968(&v20, a2);
      sub_10000552C(&v20, (uint64_t)" is not supported", 17LL);
      std::ostream::~ostream(&v20, off_100193228);
      sub_100108B88((uint64_t)v19);
      std::ios::~ios(v21);
    }

    return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 16LL))(a1, (_DWORD)a2 != 2);
  }

  int v7 = **(_DWORD **)(a1 + 56);
  if ((_DWORD)a2 == 2) {
    int v8 = fcntl(v7, 51, 0LL);
  }
  else {
    int v8 = fcntl(v7, 85, 0LL);
  }
  if (v8 != -1) {
    return 0LL;
  }
  __int128 v10 = __error();
  uint64_t v4 = -*v10;
  unsigned int v11 = 45 - *v10;
  if (v11 <= 0x17 && ((1 << v11) & 0x900001) != 0)
  {
    __int128 v12 = (unint64_t *)(*(void *)(a1 + 40) + 56LL);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 | v5, v12));
    *(void *)&__int128 v17 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v17 + sub_100020B9C(&v11, 1) = 20LL;
    int v18 = 0;
    sub_10010402C(v19, &v17);
    sub_10011E968(&v20, a2);
    sub_10000552C(&v20, (uint64_t)" is not supported (err code ", 28LL);
    stat v14 = __error();
    std::ostream::operator<<(&v20, *v14);
    sub_10000552C(&v20, (uint64_t)")", 1LL);
    std::ostream::~ostream(&v20, off_100193448);
    sub_100109134((uint64_t)v19);
    std::ios::~ios(v21);
    if ((_DWORD)a2 == 2) {
      return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16LL))(a1, 0LL);
    }
    uint64_t v15 = (unint64_t *)(*(void *)(a1 + 40) + 56LL);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 | 2, v15));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16LL))(a1, 1LL);
  }

void sub_100103F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_100103F44(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010D97C((uint64_t)a1, a2);
  *a1 = off_100193160;
  a1[45] = &off_100193260;
  a1[46] = &off_100193288;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100193160;
  a1[45] = off_1001931E8;
  a1[46] = off_100193210;
  return a1;
}

void sub_100103FC8(_Unwind_Exception *a1)
{
}

uint64_t sub_100103FEC(uint64_t a1)
{
  return a1;
}

void *sub_10010402C(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010D9F8((uint64_t)a1, a2);
  *a1 = off_100193380;
  a1[45] = &off_100193480;
  a1[46] = &off_1001934A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100193380;
  a1[45] = off_100193408;
  a1[46] = off_100193430;
  return a1;
}

void sub_1001040B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001040D4(uint64_t a1)
{
  return a1;
}

void *sub_100104114(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DA74((uint64_t)a1, a2);
  *a1 = off_1001935A0;
  a1[45] = &off_1001936A0;
  a1[46] = &off_1001936C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001935A0;
  a1[45] = off_100193628;
  a1[46] = off_100193650;
  return a1;
}

void sub_100104198(_Unwind_Exception *a1)
{
}

uint64_t sub_1001041BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001041FC(uint64_t a1, unint64_t a2, size_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  sub_1001031CC(v6);
  size_t v7 = *(void *)(v6 + 72);
  int v8 = *(unsigned __int8 *)(v6 + 88);
  uint64_t v9 = *(void *)(a1 + 40);
  sub_1001031CC(v9);
  if (!*(_BYTE *)(v9 + 136) || !v8)
  {
    *(void *)&__int128 v40 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
    *((void *)&v40 + sub_100020B9C(&v11, 1) = 26LL;
    LODWORD(v4sub_100020B9C(&v11, 1) = 0;
    sub_10010471C(&v42, &v40);
    sub_10000552C(&v48, (uint64_t)"fd block size retrieval failed (err code ", 41LL);
    std::ostream::operator<<(&v48, v7);
    sub_10000552C(&v48, (uint64_t)")", 1LL);
    std::ostream::~ostream(&v48, off_100193888);
    sub_100109C8C((uint64_t)&v42);
    goto LABEL_14;
  }

  __int128 v10 = *(void **)(v9 + 96);
  unint64_t v11 = (a2 + v7 - 1) / v7 * v7;
  unint64_t v12 = a3 + a2;
  if (a2 <= v11 && v11 < v12)
  {
    unint64_t v14 = a2 - v11 + a3;
    size_t v15 = v14 / v7 * v7;
    unint64_t v16 = v14 == v14 % v7 ? 0LL : (a2 + v7 - 1) / v7 * v7;
    if (v14 != v14 % v7)
    {
      *(void *)&__int128 v40 = 0LL;
      *((void *)&v40 + sub_100020B9C(&v11, 1) = v16;
      size_t v41 = v14 / v7 * v7;
      size_t v20 = fcntl(**(_DWORD **)(a1 + 56), 99, &v40);
      if (!(_DWORD)v20)
      {
        unint64_t v22 = v16 - a2;
        if (v16 != a2)
        {
          __int128 v23 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
          uint64_t v42 = v10;
          uint64_t v43 = v23;
          if (v23)
          {
            uint64_t p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }

          unint64_t v44 = v16 - a2;
          unint64_t v45 = a2;
          unint64_t v46 = v16 - a2;
          char v47 = 0;
          size_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 80LL))(a1, &v42);
          int v26 = v43;
          if (v43)
          {
            __int16 v27 = (unint64_t *)&v43->__shared_owners_;
            do
              unint64_t v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }

          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&__int128 v38 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v38 + sub_100020B9C(&v11, 1) = 26LL;
            int v39 = 16;
            sub_1001048EC(&v42, &v38);
            sub_10000552C(&v48, (uint64_t)"Write zeros to unmap unaligned start region failed (err code", 60LL);
            uint64_t v37 = __error();
            std::ostream::operator<<(&v48, *v37);
            sub_10000552C(&v48, (uint64_t)")", 1LL);
            sub_100104994((uint64_t)&v42);
            return v7;
          }
        }

        if (v15 + v16 < v12)
        {
          size_t v29 = a3 - (v22 + v15);
          uint64_t v30 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
          uint64_t v42 = v10;
          uint64_t v43 = v30;
          if (v30)
          {
            CFTypeID v31 = (unint64_t *)&v30->__shared_owners_;
            do
              unint64_t v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }

          unint64_t v44 = v29;
          unint64_t v45 = v15 + v16;
          unint64_t v46 = v29;
          char v47 = 0;
          size_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 80LL))(a1, &v42);
          CFTypeRef v33 = v43;
          if (v43)
          {
            uint64_t v34 = (unint64_t *)&v43->__shared_owners_;
            do
              unint64_t v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }

          if ((v7 & 0x80000000) != 0)
          {
            *(void *)&__int128 v38 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
            *((void *)&v38 + sub_100020B9C(&v11, 1) = 26LL;
            int v39 = 16;
            sub_1001049D4(&v42, &v38);
            sub_10000552C(&v48, (uint64_t)"Write zeros to unmap unaligned end region failed (err code", 58LL);
            std::string v36 = __error();
            std::ostream::operator<<(&v48, *v36);
            sub_10000552C(&v48, (uint64_t)")", 1LL);
            sub_100104A7C((uint64_t)&v42);
            return v7;
          }
        }

        return 0LL;
      }

      size_t v7 = v20;
      *(void *)&__int128 v38 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
      *((void *)&v38 + sub_100020B9C(&v11, 1) = 26LL;
      int v39 = 0;
      sub_100104804(&v42, &v38);
      sub_10000552C(&v48, (uint64_t)"Punch hole is not supported (err code ", 38LL);
      uint64_t v21 = __error();
      std::ostream::operator<<(&v48, *v21);
      sub_10000552C(&v48, (uint64_t)")", 1LL);
      std::ostream::~ostream(&v48, off_100193AA8);
      sub_10010A238((uint64_t)&v42);
LABEL_14:
      std::ios::~ios(v49);
      return v7;
    }
  }

  ssize_t v17 = sub_100104ABC(a1, a2, a3, v7, v10);
  if (v17 == a3) {
    return 0LL;
  }
  size_t v7 = v17;
  *(void *)&__int128 v40 = "int FileLocal::unmap_range(uint64_t, uint64_t)";
  *((void *)&v40 + sub_100020B9C(&v11, 1) = 26LL;
  LODWORD(v4sub_100020B9C(&v11, 1) = 16;
  sub_100104C74(&v42, &v40);
  sub_10000552C(&v48, (uint64_t)"Write zeros to unmap region failed (err code", 44LL);
  int v19 = __error();
  std::ostream::operator<<(&v48, *v19);
  sub_10000552C(&v48, (uint64_t)")", 1LL);
  std::ostream::~ostream(&v48, off_100194108);
  sub_10010B33C((uint64_t)&v42);
  std::ios::~ios(v49);
  if ((v7 & 0x8000000000000000LL) == 0LL) {
    return 4294967291LL;
  }
  else {
    return v7;
  }
}

void sub_1001046B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void *sub_10010471C(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DAF0((uint64_t)a1, a2);
  *a1 = off_1001937C0;
  a1[45] = &off_1001938C0;
  a1[46] = &off_1001938E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001937C0;
  a1[45] = off_100193848;
  a1[46] = off_100193870;
  return a1;
}

void sub_1001047A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001047C4(uint64_t a1)
{
  return a1;
}

void *sub_100104804(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DB6C((uint64_t)a1, a2);
  *a1 = off_1001939E0;
  a1[45] = &off_100193AE0;
  a1[46] = &off_100193B08;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001939E0;
  a1[45] = off_100193A68;
  a1[46] = off_100193A90;
  return a1;
}

void sub_100104888(_Unwind_Exception *a1)
{
}

uint64_t sub_1001048AC(uint64_t a1)
{
  return a1;
}

void *sub_1001048EC(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DBE8((uint64_t)a1, a2);
  *a1 = off_100193C00;
  a1[45] = &off_100193D00;
  a1[46] = &off_100193D28;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100193C00;
  a1[45] = off_100193C88;
  a1[46] = off_100193CB0;
  return a1;
}

void sub_100104970(_Unwind_Exception *a1)
{
}

uint64_t sub_100104994(uint64_t a1)
{
  return a1;
}

void *sub_1001049D4(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DC64((uint64_t)a1, a2);
  *a1 = off_100193E20;
  a1[45] = &off_100193F20;
  a1[46] = &off_100193F48;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100193E20;
  a1[45] = off_100193EA8;
  a1[46] = off_100193ED0;
  return a1;
}

void sub_100104A58(_Unwind_Exception *a1)
{
}

uint64_t sub_100104A7C(uint64_t a1)
{
  return a1;
}

ssize_t sub_100104ABC(uint64_t a1, off_t a2, size_t a3, size_t a4, void *a5)
{
  size_t v7 = a3;
  unint64_t v22 = 0LL;
  __int128 v23 = 0LL;
  int v24 = 0LL;
  sub_100104D5C((void **)&v22, (a3 + a4 - 1) / a4 * a4);
  if (v7)
  {
    __int128 v10 = v23;
    do
    {
      if (v7 >= a4) {
        size_t v11 = a4;
      }
      else {
        size_t v11 = v7;
      }
      if (v10 >= v24)
      {
        uint64_t v12 = v10 - v22;
        unint64_t v13 = ((char *)v24 - (char *)v22) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          size_t v15 = (char *)sub_100061D04((uint64_t)&v24, v14);
        }
        else {
          size_t v15 = 0LL;
        }
        unint64_t v16 = (iovec *)&v15[16 * v12];
        v16->iov_base = a5;
        v16->iov_len = v11;
        int v18 = v22;
        ssize_t v17 = v23;
        int v19 = v16;
        if (v23 != v22)
        {
          do
          {
            v19[-1] = v17[-1];
            --v19;
            --v17;
          }

          while (v17 != v18);
          ssize_t v17 = v22;
        }

        __int128 v10 = v16 + 1;
        unint64_t v22 = v19;
        __int128 v23 = v16 + 1;
        int v24 = (iovec *)&v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        v10->iov_base = a5;
        v10->iov_len = v11;
        ++v10;
      }

      __int128 v23 = v10;
      v7 -= v11;
    }

    while (v7);
  }

  else
  {
    __int128 v10 = v23;
  }

  ssize_t v20 = pwritev(**(_DWORD **)(a1 + 56), v22, (unint64_t)((char *)v10 - (char *)v22) >> 4, a2);
  if (v22)
  {
    __int128 v23 = v22;
    operator delete(v22);
  }

  return v20;
}

void sub_100104C50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100104C74(void *a1, __int128 *a2)
{
  ssize_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DCE0((uint64_t)a1, a2);
  *a1 = off_100194040;
  a1[45] = &off_100194140;
  a1[46] = &off_100194168;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100194040;
  a1[45] = off_1001940C8;
  a1[46] = off_1001940F0;
  return a1;
}

void sub_100104CF8(_Unwind_Exception *a1)
{
}

uint64_t sub_100104D1C(uint64_t a1)
{
  return a1;
}

void sub_100104D5C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100045090();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)sub_100061D04(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0LL];
    uint64_t v9 = &v6[16 * v8];
    size_t v11 = (char *)*a1;
    __int128 v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - sub_100020B9C(&v11, 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }

      while (v10 != v11);
      __int128 v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_100104DFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v1 + 48)
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1) & 1) == 0 && sub_100052D24(*(void *)(a1 + 40)))
  {
    return 0LL;
  }

  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  if (v4) {
    int v5 = 6;
  }
  else {
    int v5 = 5;
  }
  if (!flock(**(_DWORD **)(a1 + 56), v5))
  {
    *(void *)&__int128 v10 = "int FileLocal::lock()";
    *((void *)&v10 + sub_100020B9C(&v11, 1) = 19LL;
    int v11 = 0;
    sub_10005C6A4(v12, &v10);
    sub_10000552C(&v13, (uint64_t)"File (fd ", 9LL);
    std::ostream::operator<<(&v13, **(unsigned int **)(a1 + 56));
    sub_10000552C(&v13, (uint64_t)") is locked", 11LL);
    std::ostream::~ostream(&v13, off_10017B3B8);
    sub_10005C808((uint64_t)v12);
    std::ios::~ios(v14);
    uint64_t result = 0LL;
    *(_BYTE *)(v1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 1;
    return result;
  }

  if (*__error() != 35)
  {
    *(void *)&__int128 v10 = "int FileLocal::lock()";
    *((void *)&v10 + sub_100020B9C(&v11, 1) = 19LL;
    int v11 = 0;
    sub_1000A4CB0(v12, &v10);
    sub_10000552C(&v13, (uint64_t)"flock returned errno ", 21LL);
    uint64_t v9 = __error();
    std::ostream::operator<<(&v13, *v9);
    sub_10000552C(&v13, (uint64_t)", keeping file unlocked", 23LL);
    std::ostream::~ostream(&v13, off_1001884B8);
    sub_1000AEA58((uint64_t)v12);
    std::ios::~ios(v14);
    return 0LL;
  }

  *(void *)&__int128 v10 = "int FileLocal::lock()";
  *((void *)&v10 + sub_100020B9C(&v11, 1) = 19LL;
  int v11 = 16;
  sub_1001050AC(v12, &v10);
  sub_10000552C(&v13, (uint64_t)"Cannot acquire ", 15LL);
  if (v4) {
    uint64_t v6 = "exclusive";
  }
  else {
    uint64_t v6 = "shared";
  }
  if (v4) {
    uint64_t v7 = 9LL;
  }
  else {
    uint64_t v7 = 6LL;
  }
  sub_10000552C(&v13, (uint64_t)v6, v7);
  sub_10000552C(&v13, (uint64_t)" lock, errno ", 13LL);
  uint64_t v8 = __error();
  std::ostream::operator<<(&v13, *v8);
  std::ostream::~ostream(&v13, off_100194328);
  sub_10010B8E8((uint64_t)v12);
  std::ios::~ios(v14);
  return -*__error();
}

void sub_100105074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1001050AC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DD5C((uint64_t)a1, a2);
  *a1 = off_100194260;
  a1[45] = &off_100194360;
  a1[46] = &off_100194388;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100194260;
  a1[45] = off_1001942E8;
  a1[46] = off_100194310;
  return a1;
}

void sub_100105130(_Unwind_Exception *a1)
{
}

uint64_t sub_100105154(uint64_t a1)
{
  return a1;
}

uint64_t sub_100105194(uint64_t a1)
{
  return sub_100104DFC(a1 - 24);
}

uint64_t sub_10010519C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!*(_BYTE *)(v1 + 48)) {
    return 0LL;
  }
  if (flock(**(_DWORD **)(a1 + 56), 8))
  {
    *(void *)&__int128 v5 = "int FileLocal::unlock_all()";
    *((void *)&v5 + sub_100020B9C(&v11, 1) = 25LL;
    int v6 = 16;
    sub_10010533C(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"Failed unlocking file with fd ", 30LL);
    std::ostream::operator<<(&v8, **(unsigned int **)(a1 + 56));
    sub_10000552C(&v8, (uint64_t)", errno ", 8LL);
    uint64_t v3 = __error();
    std::ostream::operator<<(&v8, *v3);
    std::ostream::~ostream(&v8, off_100194548);
    sub_10010BE94((uint64_t)v7);
    std::ios::~ios(v9);
    return -*__error();
  }

  else
  {
    *(void *)&__int128 v5 = "int FileLocal::unlock_all()";
    *((void *)&v5 + sub_100020B9C(&v11, 1) = 25LL;
    int v6 = 0;
    sub_100021A40(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"File (fd ", 9LL);
    std::ostream::operator<<(&v8, **(unsigned int **)(a1 + 56));
    sub_10000552C(&v8, (uint64_t)") is unlocked", 13LL);
    std::ostream::~ostream(&v8, off_1001743B8);
    sub_1000223CC((uint64_t)v7);
    std::ios::~ios(v9);
    uint64_t result = 0LL;
    *(_BYTE *)(v1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  }

  return result;
}

void sub_100105318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10010533C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DDD8((uint64_t)a1, a2);
  *a1 = off_100194480;
  a1[45] = &off_100194580;
  a1[46] = &off_1001945A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_100194480;
  a1[45] = off_100194508;
  a1[46] = off_100194530;
  return a1;
}

void sub_1001053C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001053E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100105424(uint64_t a1)
{
  return sub_10010519C(a1 - 24);
}

uint64_t sub_10010542C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 40) + 48LL);
}

uint64_t sub_100105438(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 48LL);
}

uint64_t sub_100105444(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = *(unsigned __int8 *)(v1 + 48);
  *(_BYTE *)(v1 + 4_Block_object_dispose((const void *)(v2 - 120), 8) = 0;
  return result;
}

void *sub_100105454(void *result)
{
  uint64_t v1 = result[9];
  if (v1)
  {
    uint64_t v2 = result;
    int v38 = *(unsigned __int8 *)(result[5] + 49LL);
    uint64_t v37 = result + 8;
    uint64_t v3 = (void *)result[8];
    int v4 = v3;
    while (1)
    {
      size_t v41 = (iovec *)v43;
      uint64_t v5 = v4[2];
      v43[0] = *v4;
      v43[1] = v5;
      __int128 v42 = xmmword_10014C8E0;
      int v6 = &v3[8 * v1];
      __int128 v40 = &v41;
      if (v4 == v6)
      {
        uint64_t v7 = 1LL;
        unint64_t v8 = (unint64_t)v4;
      }

      else
      {
        uint64_t v7 = 1LL;
        unint64_t v8 = (unint64_t)v4;
        if (v4 + 8 != v6)
        {
          uint64_t v9 = v4;
          while (v9[2] + v9[3] == v9[11] && *((_DWORD *)v9 + 12) == *((_DWORD *)v9 + 28))
          {
            *(void *)&__int128 v39 = v9[8];
            *((void *)&v39 + sub_100020B9C(&v11, 1) = v9[10];
            sub_10010DE54((uint64_t *)&v40, &v39);
            unint64_t v8 = (unint64_t)(v9 + 8);
            __int128 v10 = v9 + 16;
            v9 += 8;
            if (v10 == v6) {
              goto LABEL_11;
            }
          }

          unint64_t v8 = (unint64_t)v9;
LABEL_11:
          uint64_t v7 = v42;
        }
      }

      unint64_t v11 = v8 + 64;
      int v12 = *((_DWORD *)v4 + 12);
      if (v12 == 1)
      {
        uint64_t v15 = v4[3];
        int v16 = *(_DWORD *)v2[7];
        if (v7 == 1) {
          ssize_t v17 = pwrite(v16, v41->iov_base, v41->iov_len, v4[3]);
        }
        else {
          ssize_t v17 = pwritev(v16, v41, (v11 - (unint64_t)v4) >> 6, v4[3]);
        }
        uint64_t v19 = v17;
        if (v17 < 1) {
          goto LABEL_45;
        }
        unint64_t v28 = v17 + v15;
        size_t v29 = (unint64_t *)(v2[5] + 64LL);
        unint64_t v30 = atomic_load(v29);
        if (v30 < v17 + v15)
        {
          do
          {
            unint64_t v31 = __ldaxr(v29);
            if (v31 == v30)
            {
              if (!__stlxr(v28, v29)) {
                goto LABEL_45;
              }
            }

            else
            {
              __clrex();
            }

            unint64_t v30 = v31;
          }

          while (v31 < v28);
          goto LABEL_45;
        }
      }

      else
      {
        if (!v12)
        {
          off_t v13 = v4[3];
          if (v7 == 1)
          {
            ssize_t v14 = pread(*(_DWORD *)v2[7], v41->iov_base, v41->iov_len, v4[3]);
LABEL_44:
            uint64_t v19 = v14;
LABEL_45:
            if (v19 == -1) {
              uint64_t v19 = -(uint64_t)*__error();
            }
            goto LABEL_47;
          }

          if (!v38)
          {
            ssize_t v14 = preadv(*(_DWORD *)v2[7], v41, (v11 - (unint64_t)v4) >> 6, v13);
            goto LABEL_44;
          }

          uint64_t v18 = v11 - (void)v4;
          if ((v11 - (void)v4) << 26)
          {
            uint64_t v19 = 0LL;
            uint64_t v20 = 0LL;
            int v21 = *(_DWORD *)v2[7];
            uint64_t v22 = 16LL * (int)(v18 >> 6);
            p_iov_len = &v41->iov_len;
            do
            {
              if ((v20 & 0x8000000000000000LL) == 0)
              {
                ssize_t v24 = pread(v21, (void *)*(p_iov_len - 1), *p_iov_len, v20 + v13);
                size_t v25 = *p_iov_len;
                uint64_t v26 = v19 + v24;
                uint64_t v27 = -5LL;
                if (v24 == -1) {
                  uint64_t v27 = -1LL;
                }
                if (v24 == v25) {
                  v19 += v24;
                }
                else {
                  uint64_t v19 = v27;
                }
                if (v24 == v25) {
                  uint64_t v20 = v26;
                }
                else {
                  uint64_t v20 = v27;
                }
              }

              p_iov_len += 2;
              v22 -= 16LL;
            }

            while (v22);
            goto LABEL_45;
          }
        }

        uint64_t v19 = 0LL;
      }

void sub_1001057BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    if (v18 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_1001057F4(uint64_t a1, uint64_t a2)
{
  return sub_10010312C(*(void *)(a1 + 40), *(void *)(a2 + 40));
}

uint64_t sub_100105800(uint64_t a1)
{
  *(void *)a1 = off_100191F80;
  *(void *)(a1 + 24) = off_100192060;
  *(void *)(a1 + sub_100006224(v6 - 32) = off_100192098;
  if (futimes(**(_DWORD **)(a1 + 56), 0LL))
  {
    *(void *)&__int128 v5 = "PurgeableFileBackend::~PurgeableFileBackend()";
    *((void *)&v5 + sub_100020B9C(&v11, 1) = 43LL;
    int v6 = 16;
    sub_100105928(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"futimes failed on ", 18LL);
    sub_10011EBB4((uint64_t)&v8, a1);
    sub_10000552C(&v8, (uint64_t)", errno ", 8LL);
    uint64_t v2 = __error();
    std::ostream::operator<<(&v8, *v2);
    std::ostream::~ostream(&v8, off_100194768);
    sub_10010C440((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  *(void *)a1 = off_1001920D8;
  *(void *)(a1 + 24) = off_1001921B8;
  *(void *)(a1 + sub_100006224(v6 - 32) = off_1001921F0;
  sub_100052E00(a1 + 64);
  sub_100006224(a1 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_100105928(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10010DF04((uint64_t)a1, a2);
  *a1 = off_1001946A0;
  a1[45] = &off_1001947A0;
  a1[46] = &off_1001947C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose((const void *)(v2 - 120), 8) = -1;
  *a1 = off_1001946A0;
  a1[45] = off_100194728;
  a1[46] = off_100194750;
  return a1;
}

void sub_1001059AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1001059D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100105A14(uint64_t a1)
{
  return sub_100105800(a1 - 24);
}

uint64_t sub_100105A1C(uint64_t a1)
{
  return sub_100105800(a1 - 32);
}

void sub_100105A24(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100105800(a1);
  operator delete(v1);
}

void sub_100105A38(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100105800(a1 - 24);
  operator delete(v1);
}

void sub_100105A50(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100105800(a1 - 32);
  operator delete(v1);
}

uint64_t sub_100105A68(uint64_t a1)
{
  uint64_t v1 = *(const void **)a1;
  if (!*(void *)a1) {
    return 0xFFFFFFFFLL;
  }
  if (!v3)
  {
    if (v11)
    {
      int v4 = *(std::__shared_weak_count **)(a1 + 8);
      if (v4)
      {
        uint64_t p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }

      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v11 + 176LL))(v11);
      if (v4)
      {
        ssize_t v14 = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15) {
          goto LABEL_13;
        }
      }

      return v7;
    }

    return 0xFFFFFFFFLL;
  }

  int v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    __int128 v5 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  uint64_t v7 = (**v3)(v3);
  if (v4)
  {
    uint64_t v8 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
LABEL_13:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v7;
}

void sub_100105BBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100105BE0(void *a1)
{
  *a1 = off_1001920D8;
  a1[3] = off_1001921B8;
  a1[4] = off_1001921F0;
  sub_100052E00((uint64_t)(a1 + 8));
  sub_100006224((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(a1);
}

BOOL sub_100105C34(uint64_t a1)
{
  return sub_100095D40(*(void *)(a1 + 40));
}

unint64_t sub_100105C3C(uint64_t a1)
{
  return atomic_load((unint64_t *)(*(void *)(a1 + 40) + 64LL));
}

uint64_t sub_100105C4C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 40) + 12LL);
}

void *sub_100105C58(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10000552C(a2, (uint64_t)"file(", 5LL);
  int v4 = (void *)std::ostream::operator<<(v3, **(unsigned int **)(a1 + 56));
  return sub_10000552C(v4, (uint64_t)")", 1LL);
}

double sub_100105CA4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

unint64_t sub_100105CE0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v2sub_100020B9C(&v11, 1) = 0;
  BYTE4(v2sub_100020B9C(&v11, 1) = 0;
  uint64_t v22 = 0LL;
  *(void *)&v23[0] = sub_10011E5C4((unint64_t)&v21);
  unint64_t v6 = sub_10011E684((unint64_t)&v21);
  unint64_t v28 = &v21;
  *((void *)&v23[0] + sub_100020B9C(&v11, 1) = v6;
  *(void *)&v23[1] = &v28;
  sub_10001C2DC((unint64_t)v26, (uint64_t)&v21);
  uint64_t v7 = v28;
  uint64_t v27 = v28;
  v28[4] = (uint64_t)&v27;
  uint64_t v8 = *a2;
  unint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  uint64_t v22 = v9;
  if (v9)
  {
    uint64_t p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    uint64_t v7 = v27;
  }

  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a2 + 25);
  v23[0] = *((_OWORD *)a2 + 1);
  int v24 = 0;
  size_t v25 = v7;
  uint64_t v27 = 0LL;
  void v7[4] = (uint64_t)&v25;
  uint64_t v12 = a1[9];
  uint64_t v13 = a1[8] + (v12 << 6);
  if (v12 == a1[10])
  {
    sub_10010C944(a1 + 8, v13, 1LL, (uint64_t)&v21, &v28);
    if (v25) {
      v25[4] = 0LL;
    }
  }

  else
  {
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + _Block_object_dispose((const void *)(v2 - 120), 8) = v9;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    __int128 v14 = v23[0];
    *(_OWORD *)(v13 + 25) = *(_OWORD *)((char *)v23 + 9);
    *(_OWORD *)(v13 + 16) = v14;
    int v15 = v24;
    *(void *)(v13 + 56) = v25;
    uint64_t v16 = v13 + 56;
    *(_DWORD *)(v16 - _Block_object_dispose((const void *)(v2 - 120), 8) = v15;
    size_t v25 = 0LL;
    *(void *)(*(void *)v16 + 32LL) = v16;
    ++a1[9];
  }

  ssize_t v17 = v22;
  if (v22)
  {
    uint64_t v18 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t result = sub_10001C2DC(a3, (uint64_t)v26);
  if (v27) {
    v27[4] = 0LL;
  }
  return result;
}

void sub_100105E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + sub_100006224(v6 - 32) = 0LL;
  }
  sub_100006224((uint64_t)&a10);
  if (a23) {
    *(void *)(a23 + sub_100006224(v6 - 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

void sub_100105EB0()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x100105EA8LL);
  }
  JUMPOUT(0x100105EA4LL);
}

unint64_t sub_100105EC0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  LOBYTE(v2sub_100020B9C(&v11, 1) = 0;
  BYTE4(v2sub_100020B9C(&v11, 1) = 0;
  uint64_t v22 = 0LL;
  *(void *)&v23[0] = sub_10011E5C4((unint64_t)&v21);
  unint64_t v6 = sub_10011E684((unint64_t)&v21);
  unint64_t v28 = &v21;
  *((void *)&v23[0] + sub_100020B9C(&v11, 1) = v6;
  *(void *)&v23[1] = &v28;
  sub_10001C2DC((unint64_t)v26, (uint64_t)&v21);
  uint64_t v7 = v28;
  uint64_t v27 = v28;
  v28[4] = (uint64_t)&v27;
  uint64_t v8 = *a2;
  unint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  uint64_t v22 = v9;
  if (v9)
  {
    uint64_t p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    uint64_t v7 = v27;
  }

  *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)((char *)a2 + 25);
  v23[0] = *((_OWORD *)a2 + 1);
  int v24 = 1;
  size_t v25 = v7;
  uint64_t v27 = 0LL;
  void v7[4] = (uint64_t)&v25;
  uint64_t v12 = a1[9];
  uint64_t v13 = a1[8] + (v12 << 6);
  if (v12 == a1[10])
  {
    sub_10010C944(a1 + 8, v13, 1LL, (uint64_t)&v21, &v28);
    if (v25) {
      v25[4] = 0LL;
    }
  }

  else
  {
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + _Block_object_dispose((const void *)(v2 - 120), 8) = v9;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    __int128 v14 = v23[0];
    *(_OWORD *)(v13 + 25) = *(_OWORD *)((char *)v23 + 9);
    *(_OWORD *)(v13 + 16) = v14;
    int v15 = v24;
    *(void *)(v13 + 56) = v25;
    uint64_t v16 = v13 + 56;
    *(_DWORD *)(v16 - _Block_object_dispose((const void *)(v2 - 120), 8) = v15;
    size_t v25 = 0LL;
    *(void *)(*(void *)v16 + 32LL) = v16;
    ++a1[9];
  }

  ssize_t v17 = v22;
  if (v22)
  {
    uint64_t v18 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t result = sub_10001C2DC(a3, (uint64_t)v26);
  if (v27) {
    v27[4] = 0LL;
  }
  return result;
}

void sub_100106060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (a17) {
    *(void *)(a17 + sub_100006224(v6 - 32) = 0LL;
  }
  sub_100006224((uint64_t)&a10);
  if (a23) {
    *(void *)(a23 + sub_100006224(v6 - 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

void sub_100106094()
{
  if (!*(void *)(v0 - 40)) {
    JUMPOUT(0x10010608CLL);
  }
  JUMPOUT(0x100106088LL);
}

uint64_t sub_1001060A4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 32LL);
}

uint64_t sub_1001060B0(uint64_t a1)
{
  return **(unsigned int **)(a1 + 56);
}

void sub_1001060BC(void *a1)
{
  *(a1 - 3) = off_1001920D8;
  *a1 = off_1001921B8;
  a1[1] = off_1001921F0;
  sub_100052E00((uint64_t)(a1 + 5));
  sub_100006224((uint64_t)(a1 + 2));
  uint64_t v2 = (std::__shared_weak_count *)*(a1 - 1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100106108(void *a1)
{
  *(a1 - 3) = off_1001920D8;
  uint64_t v2 = a1 - 3;
  *a1 = off_1001921B8;
  a1[1] = off_1001921F0;
  sub_100052E00((uint64_t)(a1 + 5));
  sub_100006224((uint64_t)(a1 + 2));
  uint64_t v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
}

uint64_t sub_10010615C(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

void sub_100106168(void *a1)
{
  *(a1 - 4) = off_1001920D8;
  *(a1 - sub_100020B9C(&v11, 1) = off_1001921B8;
  *a1 = off_1001921F0;
  sub_100052E00((uint64_t)(a1 + 4));
  sub_100006224((uint64_t)(a1 + 1));
  uint64_t v2 = (std::__shared_weak_count *)*(a1 - 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1001061B8(void *a1)
{
  *(a1 - 4) = off_1001920D8;
  uint64_t v2 = a1 - 4;
  *(a1 - sub_100020B9C(&v11, 1) = off_1001921B8;
  *a1 = off_1001921F0;
  sub_100052E00((uint64_t)(a1 + 4));
  sub_100006224((uint64_t)(a1 + 1));
  uint64_t v3 = (std::__shared_weak_count *)*(a1 - 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
}

uint64_t sub_100106210(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192348);
  sub_1001063D4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100106248(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192348);
  sub_1001063D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100106288(char *a1)
{
}

uint64_t sub_1001062CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100106300(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10010634C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100192348);
  sub_1001063D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10010638C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192348);
  sub_1001063D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1001063D4(uint64_t a1)
{
  *(void *)a1 = off_100192418;
  sub_100106470(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100106470(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1001065D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100106598( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001065C4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1001063D4(a1);
  operator delete(v1);
}

int *sub_1001065D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 66LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 66LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1001067BC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192568);
  sub_100106980(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1001067F4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192568);
  sub_100106980(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100106834(char *a1)
{
}

uint64_t sub_100106878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1001068AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1001068F8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100192568);
  sub_100106980((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100106938(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192568);
  sub_100106980((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100106980(uint64_t a1)
{
  *(void *)a1 = off_100192638;
  sub_100106A1C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100106A1C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100106B84((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100106B44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100106B70(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100106980(a1);
  operator delete(v1);
}

int *sub_100106B84(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 78LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 78LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_100106D68(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192788);
  sub_100106F2C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100106DA0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192788);
  sub_100106F2C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100106DE0(char *a1)
{
}

uint64_t sub_100106E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100106E58(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100106EA4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100192788);
  sub_100106F2C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100106EE4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192788);
  sub_100106F2C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100106F2C(uint64_t a1)
{
  *(void *)a1 = off_100192858;
  sub_100106FC8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100106FC8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100107130((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1001070F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010711C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100106F2C(a1);
  operator delete(v1);
}

int *sub_100107130(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 95LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 95LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_100107314(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001929A8);
  sub_1001074D8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10010734C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001929A8);
  sub_1001074D8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10010738C(char *a1)
{
}

uint64_t sub_1001073D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100107404(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100107450(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001929A8);
  sub_1001074D8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100107490(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001929A8);
  sub_1001074D8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1001074D8(uint64_t a1)
{
  *(void *)a1 = off_100192A78;
  sub_100107574(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100107574(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1001076DC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10010769C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001076C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1001074D8(a1);
  operator delete(v1);
}

int *sub_1001076DC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 103LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 103LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1001078C0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192BC8);
  sub_100107A84(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1001078F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192BC8);
  sub_100107A84(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100107938(char *a1)
{
}

uint64_t sub_10010797C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1001079B0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1001079FC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100192BC8);
  sub_100107A84((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100107A3C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192BC8);
  sub_100107A84((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100107A84(uint64_t a1)
{
  *(void *)a1 = off_100192C98;
  sub_100107B20(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100107B20(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100107C88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100107C48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100107C74(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100107A84(a1);
  operator delete(v1);
}

int *sub_100107C88(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 298LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 298LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_100107E6C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100192DE8);
  sub_100108030(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100107EA4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192DE8);
  sub_100108030(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100107EE4(char *a1)
{
}

uint64_t sub_100107F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100107F5C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100107FA8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100192DE8);
  sub_100108030((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100107FE8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100192DE8);
  sub_100108030((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100108030(uint64_t a1)
{
  *(void *)a1 = off_100192EB8;
  sub_1001080CC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1001080CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100108234((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1001081F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100108220(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100108030(a1);
  operator delete(v1);
}

int *sub_100108234(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 313LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 313LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_100108418(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100193008);
  sub_1001085DC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100108450(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100193008);
  sub_1001085DC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100108490(char *a1)
{
}

uint64_t sub_1001084D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100108508(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100108554(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100193008);
  sub_1001085DC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100108594(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100193008);
  sub_1001085DC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1001085DC(uint64_t a1)
{
  *(void *)a1 = off_1001930D8;
  sub_100108678(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100108678(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1001087E0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1001087A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001087CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1001085DC(a1);
  operator delete(v1);
}

int *sub_1001087E0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 336LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 336LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  int *result = v5;
  return result;
}

uint64_t sub_1001089C4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100193228);
  sub_100108B88(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1001089FC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100193228);
  sub_100108B88(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100108A3C(char *a1)
{
}

uint64_t sub_100108A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100108AB4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}