uint64_t sub_1000042E4(const __CFAllocator *a1, void *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *exception;
  uint64_t v9;
  const std::error_category *v10;
  CFNumberRef v11;
  CFMutableDictionaryRef theDict;
  __CFDictionary *Mutable;
  unsigned int v14;
  int valuePtr;
  Mutable = CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  theDict = CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  else {
    v4 = 18;
  }
  valuePtr = v4;
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(theDict, @"attributes", v11);
  CFDictionarySetValue(theDict, @"valid", v11);
  CFDictionarySetValue(Mutable, @"Characteristics", theDict);
  v5 = MKMediaCreate(a1, a2, &unk_100171360, Mutable, &v14);
  if (v14)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    v9 = v14;
    *exception = &off_100196FC8;
    v10 = std::generic_category();
    exception[1] = v9;
    exception[2] = v10;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 48) = 0;
    exception[7] = "Can't create MediaKitRef";
  }

  v6 = v5;
  sub_100006B64((const void **)&v11);
  sub_100006B34((const void **)&theDict);
  sub_100006B34((const void **)&Mutable);
  return v6;
}

void sub_10000445C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  v3 = va_arg(va1, const void *);
  sub_100006B34((const void **)va);
  sub_100006B34((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100004494(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_100196FC8;
  v6 = std::generic_category();
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  return a1;
}

uint64_t sub_1000044EC()
{
  return 0LL;
}

__CFDictionary *sub_1000044FC(void *a1, __CFDictionary *cf1)
{
  Mutable = cf1;
  if (cf1)
  {
    if (CFEqual(cf1, @"Geometry"))
    {
      Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 32LL))(*a1);
      uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1);
      sub_1000FEA34(Mutable, @"Sector Count", (unint64_t)(v5 * v4) >> 9);
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1);
      sub_1000FEA34(Mutable, @"Block Size", v6);
      sub_1000FEA34(Mutable, @"Maximum Transfer Sector Count", 0LL);
    }

    else if (CFEqual(Mutable, @"Writable"))
    {
      int v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 40LL))(*a1);
      v8 = &kCFBooleanTrue;
      if (!v7) {
        v8 = &kCFBooleanFalse;
      }
      return *v8;
    }

    else
    {
      return 0LL;
    }
  }

  return Mutable;
}

__CFDictionary *sub_10000462C(void *a1)
{
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    v3 = sub_1000044FC(a1, (__CFDictionary *)@"Geometry");
    CFTypeRef cf = v3;
    if (v3) {
      CFDictionarySetValue(Mutable, @"Geometry", v3);
    }
    uint64_t v4 = sub_1000044FC(a1, (__CFDictionary *)@"Writable");
    uint64_t v6 = v4;
    if (cf)
    {
      CFRelease(cf);
      uint64_t v4 = v6;
    }

    uint64_t v6 = 0LL;
    CFTypeRef cf = v4;
    sub_100006B94((const void **)&v6);
    if (cf) {
      CFDictionarySetValue(Mutable, @"Writable", cf);
    }
    sub_100006B94(&cf);
  }

  return Mutable;
}

void sub_100004700( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_100004728()
{
  return 102LL;
}

CFStringRef sub_100004730()
{
  return @"New disk image";
}

uint64_t sub_10000475C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = sub_10000478C(a1, a2, a3, a4);
  if (a5)
  {
    if (!(_DWORD)result) {
      *a5 = a3;
    }
  }

  return result;
}

uint64_t sub_10000478C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 << 9;
  uint64_t v7 = a2 << 9;
  v8 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v46 = a4;
  v47 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v48 = v6;
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  char v51 = 0;
  sub_10003DA2C(&v46, v58);
  sub_10003BD04((uint64_t)v62, (uint64_t)v55);
  sub_10003BA04((uint64_t)v62, (uint64_t)v52);
  uint64_t v11 = sub_100005380(*(void *)(a1 + 8));
  v12 = v54;
  if (v54)
  {
    v13 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  v15 = v53;
  if (v53)
  {
    v16 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  v18 = v57;
  if (v57)
  {
    v19 = (unint64_t *)&v57->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  v21 = v56;
  if (v56)
  {
    v22 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  v24 = v68;
  if (v68)
  {
    v25 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  v27 = v67;
  if (v67)
  {
    v28 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  v30 = v66;
  if (v66)
  {
    v31 = (unint64_t *)&v66->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  v33 = v65;
  if (v65)
  {
    v34 = (unint64_t *)&v65->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  v36 = v64;
  if (v64)
  {
    v37 = (unint64_t *)&v64->__shared_owners_;
    do
      unint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      unint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  if (v60 && &v61 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v58);
  v42 = v47;
  if (v47)
  {
    v43 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  if (v11 < 0) {
    return v11;
  }
  else {
    return 0LL;
  }
}

void sub_100004B04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

uint64_t sub_100004B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = sub_100004B8C(a1, a2, a3, a4);
  if (a5)
  {
    if (!(_DWORD)result) {
      *a5 = a3;
    }
  }

  return result;
}

uint64_t sub_100004B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 << 9;
  uint64_t v7 = a2 << 9;
  v8 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v46 = a4;
  v47 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v48 = v6;
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  char v51 = 0;
  sub_10003DA2C(&v46, v58);
  sub_10003BD04((uint64_t)v62, (uint64_t)v55);
  sub_10003BA04((uint64_t)v62, (uint64_t)v52);
  uint64_t v11 = sub_1000062D4(*(void **)(a1 + 8));
  v12 = v54;
  if (v54)
  {
    v13 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  v15 = v53;
  if (v53)
  {
    v16 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  v18 = v57;
  if (v57)
  {
    v19 = (unint64_t *)&v57->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  v21 = v56;
  if (v56)
  {
    v22 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  v24 = v68;
  if (v68)
  {
    v25 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  v27 = v67;
  if (v67)
  {
    v28 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  v30 = v66;
  if (v66)
  {
    v31 = (unint64_t *)&v66->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  v33 = v65;
  if (v65)
  {
    v34 = (unint64_t *)&v65->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  v36 = v64;
  if (v64)
  {
    v37 = (unint64_t *)&v64->__shared_owners_;
    do
      unint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      unint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  if (v60 && &v61 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v58);
  v42 = v47;
  if (v47)
  {
    v43 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  if (v11 < 0) {
    return v11;
  }
  else {
    return 0LL;
  }
}

void sub_100004F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

unint64_t sub_100004F5C(void *a1)
{
  return (unint64_t)(*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1) >> 9;
}

unint64_t sub_100004F80(void *a1, CFNumberRef number, const char *a3)
{
  if (!number)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)valuePtr);
    sub_10000552C(valuePtr, (uint64_t)"Couldn't parse ", 15LL);
    size_t v8 = strlen(a3);
    sub_10000552C(valuePtr, (uint64_t)a3, v8);
    sub_100006AA8((uint64_t)exception, (uint64_t)valuePtr, 0x16u);
  }

  if (!CFNumberGetValue(number, kCFNumberLongLongType, valuePtr))
  {
    v9 = __cxa_allocate_exception(0x40uLL);
    unint64_t v10 = (void *)sub_100004494((uint64_t)v9, (uint64_t)"Failed converting CFNumber to longlong", 0x16u);
  }

  unint64_t v5 = valuePtr[0];
  if (v5 % ((unint64_t)(*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1) >> 9))
  {
    uint64_t v11 = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)valuePtr);
    size_t v12 = strlen(a3);
    sub_10000552C(valuePtr, (uint64_t)a3, v12);
    sub_10000552C(valuePtr, (uint64_t)" is not aligned to block size", 29LL);
    sub_100006AA8((uint64_t)v11, (uint64_t)valuePtr, 0x16u);
  }

  return v5 / ((unint64_t)(*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1) >> 9);
}

void sub_100005108(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100005148(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v4;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0LL;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_10000520C(_Unwind_Exception *a1)
{
}

uint64_t sub_100005234(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

void sub_1000052B8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_100196FC8;
  if (LOBYTE(this[6].__vftable) && SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

void sub_1000052FC(void *a1)
{
}

uint64_t sub_10000530C(uint64_t a1)
{
  uint64_t v2 = a1 + 576;
  sub_100006224(a1 + 688);
  sub_100006224(v2);
  sub_100006224(a1 + 528);
  sub_100006224(a1 + 416);
  sub_100006224(a1 + 360);
  sub_100006224(a1 + 272);
  if (*(void *)(a1 + 160))
  {
    uint64_t v3 = *(void **)(a1 + 144);
  }

  return sub_10000627C(a1);
}

uint64_t sub_100005380(uint64_t a1)
{
  if ((*(_BYTE *)(*(void *)(a1 + 8) + 8LL) & 1) == 0) {
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (sub_1000BE308())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::read(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 24LL;
    int v3 = 2;
    sub_100005444(v4, &v2);
    sub_10000552C(&v5, (uint64_t)"Disk image is terminated, skipping read", 39LL);
    std::ostream::~ostream(&v5, off_100171488);
    sub_100005978((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return -6LL;
}

void sub_100005430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100005444(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000058FC((uint64_t)a1, a2);
  *a1 = off_1001713C0;
  a1[45] = &off_1001714C0;
  a1[46] = &off_1001714E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_1001713C0;
  a1[45] = off_100171448;
  a1[46] = off_100171470;
  return a1;
}

void sub_1000054C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000054EC(uint64_t a1)
{
  return a1;
}

void *sub_10000552C(void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      unint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100005690(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_100005634( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_10000567C(_Unwind_Exception *a1)
{
}

uint64_t sub_100005690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      sub_1000057CC(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_1000057B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000057CC(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005874();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_100005874()
{
}

void sub_100005888(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000058D8(exception, a1);
}

void sub_1000058C4(_Unwind_Exception *a1)
{
}

std::logic_error *sub_1000058D8(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

uint64_t sub_1000058FC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171558;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100005964(_Unwind_Exception *a1)
{
}

uint64_t sub_100005978(uint64_t a1)
{
  *(void *)a1 = off_100171558;
  sub_100005BF0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100005A14(char *a1)
{
}

uint64_t sub_100005A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100005A8C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100005AD8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171488);
  sub_100005978(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100005B10(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171488);
  sub_100005978((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100005B50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171488);
  sub_100005978(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100005B90(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171488);
  sub_100005978((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100005BDC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100005978(a1);
  operator delete(v1);
}

uint64_t sub_100005BF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100005D40((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100005D18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100005D40(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      unint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 159LL;
    __int16 v25 = 2082;
    unint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 159LL;
      __int16 v25 = 2082;
      unint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100005F24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100005FC0(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005874();
  }
  int v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000LL;
    *a2 = v9;
    a2 = v9;
  }

  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }

  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t sub_100005FC0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = v3;
    }
    return *(void *)(a1 + 40);
  }

  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }

  else
  {
    return 0LL;
  }
}

void sub_10000600C(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 64;
  __int128 v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  sub_100006064(a1);
}

void sub_100006064(uint64_t a1)
{
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0LL;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = v4;
      }

      if (v5) {
        *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = (char *)v4 + v5;
      }
    }
  }

void *sub_100006174(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005874();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_100006224(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

uint64_t sub_10000627C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    char v3 = *(void **)a1;
    do
    {
      --v2;
      char v3 = (void *)(sub_100006224((uint64_t)v3) + 24);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000062D4(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 8LL))(a1);
  }
  if (sub_1000BE308())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::write(const sg_vec::iterator &, const sg_vec::iterator &)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    sub_100006398(v4, &v2);
    sub_10000552C(&v5, (uint64_t)"Disk image is terminated, skipping write", 40LL);
    std::ostream::~ostream(&v5, off_1001716A8);
    sub_1000064FC((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return -6LL;
}

void sub_100006384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100006398(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_100006480((uint64_t)a1, a2);
  *a1 = off_1001715E0;
  a1[45] = &off_1001716E0;
  a1[46] = &off_100171708;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_1001715E0;
  a1[45] = off_100171668;
  a1[46] = off_100171690;
  return a1;
}

void sub_10000641C(_Unwind_Exception *a1)
{
}

uint64_t sub_100006440(uint64_t a1)
{
  return a1;
}

uint64_t sub_100006480(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171778;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000064E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000064FC(uint64_t a1)
{
  *(void *)a1 = off_100171778;
  sub_100006774(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100006598(char *a1)
{
}

uint64_t sub_1000065DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100006610(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10000665C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001716A8);
  sub_1000064FC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100006694(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001716A8);
  sub_1000064FC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000066D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001716A8);
  sub_1000064FC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100006714(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001716A8);
  sub_1000064FC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100006760(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000064FC(a1);
  operator delete(v1);
}

uint64_t sub_100006774(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000068C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10000689C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000068C4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      unint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 166LL;
    __int16 v25 = 2082;
    unint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 166LL;
      __int16 v25 = 2082;
      unint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100006AA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_100196FC8;
  char v6 = std::generic_category();
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a3;
  *(void *)(a1 + 16) = v6;
  sub_100005F24(a2 + 8, &v8);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 1;
  return a1;
}

void sub_100006B20(_Unwind_Exception *a1)
{
}

const void **sub_100006B34(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_100006B64(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_100006B94(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_100006BC4@<X0>(CFDictionaryRef theDict@<X1>, void *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)a4 = a4 + 8;
  Value = CFDictionaryGetValue(theDict, @"Data Runs");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    v37 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v37;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::ostream::~ostream(v2, v3 + 8) = 0;
    exception[7] = "Couldn't get runs array from Media Kit";
  }

  uint64_t v8 = TypeID;
  if (CFGetTypeID(Value) != TypeID)
  {
    unint64_t v38 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v39 = CFGetTypeID(Value);
    v40 = sub_10000A37C(v38, v39, v8);
  }

  uint64_t result = CFArrayGetCount((CFArrayRef)Value);
  uint64_t v10 = result;
  if (result >= 1)
  {
    CFIndex v11 = 0LL;
    unint64_t v12 = 0LL;
    char v13 = 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v11);
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        uint64_t v16 = v15;
        if (CFGetTypeID(ValueAtIndex) != v15)
        {
          v27 = __cxa_allocate_exception(0x40uLL);
          CFTypeID v28 = CFGetTypeID(ValueAtIndex);
          unint64_t v29 = sub_10000A37C(v27, v28, v16);
        }
      }

      unint64_t v17 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Origin");
      CFTypeID v18 = CFNumberGetTypeID();
      if (v17)
      {
        uint64_t v19 = v18;
        if (CFGetTypeID(v17) != v18)
        {
          v30 = __cxa_allocate_exception(0x40uLL);
          CFTypeID v31 = CFGetTypeID(v17);
          unint64_t v32 = sub_10000A37C(v30, v31, v19);
        }
      }

      unint64_t v20 = sub_100004F80(a2, (CFNumberRef)v17, "run offset");
      __int16 v21 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Length");
      CFTypeID v22 = CFNumberGetTypeID();
      if (v21)
      {
        uint64_t v23 = v22;
        if (CFGetTypeID(v21) != v22)
        {
          v33 = __cxa_allocate_exception(0x40uLL);
          CFTypeID v34 = CFGetTypeID(v21);
          unint64_t v35 = sub_10000A37C(v33, v34, v23);
        }
      }

      unint64_t v24 = sub_100004F80(a2, (CFNumberRef)v21, "run length");
      unint64_t v25 = v20 + a3;
      if ((v13 & 1) == 0)
      {
        unint64_t v42 = v12;
        unint64_t v43 = v25;
        char v44 = 2;
        uint64_t v26 = qword_1001A3B40;
        if (v25 > v12) {
          uint64_t v26 = v25 - v12;
        }
      }

      unint64_t v12 = v24 + v25;
      unint64_t v42 = v25;
      unint64_t v43 = v24 + v25;
      char v44 = 2;
      uint64_t result = (uint64_t)sub_10000C9C4((uint64_t **)a4, (uint64_t)&v42);
      char v13 = 0;
      ++v11;
    }

    while (v10 != v11);
  }

  return result;
}

void sub_100006EDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

const void **sub_100006F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"Record On Bits", kCFBooleanTrue);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = sub_100004F5C((void *)a1);
  unint64_t v10 = sub_100004F5C((void *)a1);
  CFIndex v11 = (const void *)MKMediaCreateWithSubRange(kCFAllocatorDefault, v8, v9 * a2, v10 * a3, &v30);
  v27 = v11;
  if (v30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v22 = v30;
    void *exception = &off_100196FC8;
    uint64_t v23 = std::generic_category();
    exception[1] = v22;
    exception[2] = v23;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::ostream::~ostream(v2, v3 + 8) = 0;
    exception[7] = "Couldn't create MediaKit subrange object";
  }

  CFDictionaryRef theDict = (CFDictionaryRef)MKCFCreateFSInfo(v11, Mutable, &v29);
  if (v29)
  {
    *(void *)&__int128 v24 = "MediaInfo::process_mapped_data(uint64_t, uint64_t)";
    *((void *)&v24 + 1) = 30LL;
    int v25 = 0;
    sub_1000073C4(buf, &v24);
    sub_10000552C(&v36, (uint64_t)"Couldn't get mapped sectors for [offset: ", 41LL);
    std::ostream::operator<<(&v36, a2);
    sub_10000552C(&v36, (uint64_t)", size ", 7LL);
    std::ostream::operator<<(&v36, a3);
    sub_10000552C(&v36, (uint64_t)"] from MediaKit - errno ", 24LL);
    std::ostream::operator<<(&v36, v29);
    sub_10000552C(&v36, (uint64_t)", taking as mapped data", 23LL);
    std::ios_base::getloc((const std::ios_base *)((char *)&v36 + *(void *)(v36 - 24)));
    unint64_t v12 = std::locale::use_facet(&v31, &std::ctype<char>::id);
    uint64_t v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10LL);
    std::locale::~locale(&v31);
    std::ostream::put(&v36, v13);
    std::ostream::flush(&v36);
    std::ostream::~ostream(&v36, off_100171960);
    sub_10000A698((uint64_t)buf);
    std::ios::~ios(&v37);
    *(_BYTE *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 1;
    *(void *)buf = a2;
    *(void *)v33 = a3 + a2;
    v33[8] = 2;
    sub_10000D950(a4, (uint64_t)buf);
  }

  else
  {
    if (sub_1000BE308())
    {
      int v14 = *__error();
      if (sub_1000BE2F0())
      {
        *(void *)&__int128 v24 = 0LL;
        CFTypeID v15 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          uint64_t v16 = 3LL;
        }
        else {
          uint64_t v16 = 2LL;
        }
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 30;
        *(_WORD *)v33 = 2080;
        *(void *)&v33[2] = "MediaInfo::process_mapped_data(uint64_t, uint64_t)";
        __int16 v34 = 2114;
        CFDictionaryRef v35 = theDict;
        unint64_t v17 = (const char *)_os_log_send_and_compose_impl( v16,  &v24,  0LL,  0LL,  &_mh_execute_header,  v15,  2LL,  "%.*s: %{public}@",  buf,  28);
        if (v17)
        {
          CFTypeID v18 = (char *)v17;
          fprintf(__stderrp, "%s\n", v17);
          free(v18);
        }
      }

      else
      {
        uint64_t v19 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 30;
          *(_WORD *)v33 = 2080;
          *(void *)&v33[2] = "MediaInfo::process_mapped_data(uint64_t, uint64_t)";
          __int16 v34 = 2114;
          CFDictionaryRef v35 = theDict;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%.*s: %{public}@", buf, 0x1Cu);
        }
      }

      *__error() = v14;
    }

    sub_100006BC4(theDict, (void *)a1, a2, a4);
  }

  sub_10000D8A4((const void **)&theDict);
  sub_10000C994(&v27);
  return sub_100006B34((const void **)&Mutable);
}

void sub_100007354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, const void *a16, uint64_t a17, std::locale a18, char a19)
{
}

void *sub_1000073C4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000D8D4((uint64_t)a1, a2);
  *a1 = off_100171898;
  a1[45] = &off_100171998;
  a1[46] = &off_1001719C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100171898;
  a1[45] = off_100171920;
  a1[46] = off_100171948;
  return a1;
}

void sub_100007448(_Unwind_Exception *a1)
{
}

uint64_t sub_10000746C(uint64_t a1)
{
  return a1;
}

void sub_1000074AC(uint64_t a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t Value = (uint64_t)CFDictionaryGetValue(theDict, @"Offset");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value)
  {
    CFTypeID v8 = TypeID;
    if (CFGetTypeID((CFTypeRef)Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v16 = CFGetTypeID((CFTypeRef)Value);
LABEL_33:
      unint64_t v17 = exception;
      uint64_t v18 = v8;
      goto LABEL_36;
    }
  }

  unint64_t v9 = CFDictionaryGetValue(theDict, @"Size");
  CFTypeID v10 = CFNumberGetTypeID();
  if (v9)
  {
    CFTypeID v8 = v10;
    if (CFGetTypeID(v9) != v10)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v16 = CFGetTypeID(v9);
      goto LABEL_33;
    }
  }

  unint64_t v11 = sub_100004F80((void *)a1, (CFNumberRef)v9, "partition size");
  unint64_t v12 = (const __CFString *)CFDictionaryGetValue(theDict, @"Name");
  CFTypeID v13 = CFStringGetTypeID();
  if (!v12)
  {
    unint64_t v12 = (const __CFString *)CFDictionaryGetValue(theDict, @"Type");
    CFTypeID v19 = CFStringGetTypeID();
    if (!v12)
    {
      int v25 = __cxa_allocate_exception(0x40uLL);
      uint64_t v26 = (void *)sub_100004494((uint64_t)v25, (uint64_t)"Couldn't parse partition name or type", 0x16u);
    }

    CFTypeID v20 = v19;
    if (CFGetTypeID(v12) == v19) {
      goto LABEL_10;
    }
    v27 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v16 = CFGetTypeID(v12);
    unint64_t v17 = v27;
    uint64_t v18 = v20;
LABEL_36:
    CFTypeID v28 = sub_10000A374(v17, v16, v18);
  }

  CFTypeID v14 = v13;
  if (CFGetTypeID(v12) != v13)
  {
    CFTypeID v15 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v16 = CFGetTypeID(v12);
    unint64_t v17 = v15;
    uint64_t v18 = v14;
    goto LABEL_36;
  }

LABEL_10:
  if (Value) {
    uint64_t Value = sub_100004F80((void *)a1, (CFNumberRef)Value, "partition offset");
  }
  sub_1000FE7CC(v12, v38);
  if (Value < 0 || (v11 & 0x8000000000000000LL) != 0)
  {
    uint64_t v22 = __cxa_allocate_exception(0x40uLL);
    void *v22 = &off_100196FC8;
    uint64_t v23 = std::generic_category();
    v22[1] = 22LL;
    v22[2] = v23;
    *((_BYTE *)v22 + 24) = 0;
    *((_BYTE *)v22 + 4std::ostream::~ostream(v2, v3 + 8) = 0;
    v22[7] = "Invalid negative partition size of offset";
  }

  uint64_t v21 = *a3;
  if (Value != *a3)
  {
    sub_100006174(v29, "Apple_Free");
    int v31 = 0;
    v40 = &_mh_execute_header;
    int v41 = 2;
    sub_10000AA80(0LL, &v40, 3LL);
    uint64_t v32 = v21;
    v33 = (void *)Value;
    char v34 = 2;
    *(_OWORD *)__p = *(_OWORD *)v29;
    uint64_t v36 = v30;
    v29[0] = 0LL;
    v29[1] = 0LL;
    uint64_t v30 = 0LL;
    int v37 = v31;
    sub_10000D99C((uint64_t **)(a1 + 32), (uint64_t)&v32);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
    *a3 = Value;
  }

  *a3 = Value + v11;
  if (SHIBYTE(v39) < 0)
  {
    sub_10000AD88(v29, v38[0], (unint64_t)v38[1]);
  }

  else
  {
    *(_OWORD *)unsigned int v29 = *(_OWORD *)v38;
    uint64_t v30 = v39;
  }

  int v31 = 2;
  v40 = &_mh_execute_header;
  int v41 = 2;
  sub_10000AA80(2LL, &v40, 3LL);
  uint64_t v32 = Value;
  v33 = (void *)(Value + v11);
  char v34 = 2;
  *(_OWORD *)__p = *(_OWORD *)v29;
  uint64_t v36 = v30;
  v29[0] = 0LL;
  v29[1] = 0LL;
  uint64_t v30 = 0LL;
  int v37 = v31;
  sub_10000D99C((uint64_t **)(a1 + 32), (uint64_t)&v32);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  sub_100006F3C(a1, Value, v11, (uint64_t)&v32);
  sub_100007990((uint64_t **)(a1 + 56), &v32);
  sub_10000A494((uint64_t)&v32, v33);
  if (SHIBYTE(v39) < 0) {
    operator delete(v38[0]);
  }
}

void sub_1000078C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
}

uint64_t sub_100007960(uint64_t a1)
{
  return a1;
}

uint64_t **sub_100007990(uint64_t **a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  int v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    int v5 = (uint64_t *)(a1 + 1);
    do
    {
      int v5 = sub_10000E428(a1, v5, (uint64_t)(v4 + 4));
      char v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          char v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          int v4 = v7;
        }

        while (!v8);
      }

      int v4 = v7;
    }

    while (v7 != v3);
  }

  return a1;
}

void sub_100007A14(uint64_t **a1, CFDictionaryRef theDict, uint64_t *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t Value = CFDictionaryGetValue(theDict, @"Offset");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value)
  {
    CFTypeID v12 = TypeID;
    if (CFGetTypeID(Value) != TypeID)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      CFTypeID v46 = CFGetTypeID(Value);
      v47 = exception;
      uint64_t v48 = v12;
LABEL_58:
      uint64_t v61 = sub_10000A374(v47, v46, v48);
    }
  }

  LOBYTE(v74[0]) = 0;
  char v77 = 0;
  unint64_t v13 = sub_100004F80(a1, (CFNumberRef)Value, "section offset");
  CFTypeID v14 = CFDictionaryGetValue(theDict, @"Media Block Size");
  CFTypeID v15 = CFNumberGetTypeID();
  if (!v14)
  {
    unint64_t v43 = __cxa_allocate_exception(0x40uLL);
    char v44 = (void *)sub_100004494((uint64_t)v43, (uint64_t)"Couldn't parse media block size", 0x16u);
  }

  CFTypeID v16 = v15;
  if (CFGetTypeID(v14) != v15)
  {
    v45 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v46 = CFGetTypeID(v14);
    v47 = v45;
    uint64_t v48 = v16;
    goto LABEL_58;
  }

  if (!CFNumberGetValue((CFNumberRef)v14, kCFNumberLongType, &valuePtr))
  {
    uint64_t v49 = __cxa_allocate_exception(0x40uLL);
    uint64_t v50 = (void *)sub_100004494((uint64_t)v49, (uint64_t)"Failed converting CFNumber to long", 0x16u);
  }

  unint64_t v17 = valuePtr;
  if (v17 % (*(uint64_t (**)(uint64_t *))(**a1 + 24))(*a1))
  {
    char v51 = __cxa_allocate_exception(0x40uLL);
    v52 = (void *)sub_100004494((uint64_t)v51, (uint64_t)"Invalid media block size", 0x16u);
  }

  uint64_t v18 = CFDictionaryGetValue(theDict, @"Section Block Count");
  CFTypeID v19 = CFNumberGetTypeID();
  if (v18)
  {
    uint64_t v20 = v19;
    if (CFGetTypeID(v18) != v19)
    {
      v62 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v63 = CFGetTypeID(v18);
      v64 = sub_10000A374(v62, v63, v20);
    }
  }

  unint64_t v21 = sub_100004F80(a1, (CFNumberRef)v18, "media block count");
  uint64_t v22 = v21;
  unint64_t v23 = (unint64_t)a1[10];
  if (v23 <= v21) {
    unint64_t v23 = v21;
  }
  a1[10] = (uint64_t *)v23;
  if ((v21 & 0x8000000000000000LL) != 0)
  {
    v53 = __cxa_allocate_exception(0x40uLL);
    v54 = (void *)sub_100004494((uint64_t)v53, (uint64_t)"Invalid negative media block count", 0x16u);
  }

  uint64_t v24 = *((unsigned __int8 *)a5 + 23);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0LL) {
    uint64_t v24 = *((void *)a5 + 1);
  }
  if (v24 == 3
    && (v25 >= 0 ? (uint64_t v26 = a5) : (uint64_t v26 = *(unsigned __int16 **)a5),
        (v27 = *v26, v28 = *((unsigned __int8 *)v26 + 2), v27 == 20551) ? (BOOL v29 = v28 == 84) : (BOOL v29 = 0),
        v29))
  {
    v74[0] = *a3;
    v74[1] = v13;
    char v75 = 2;
    unint64_t v76 = v21;
    char v77 = 1;
    sub_1000080B4((uint64_t)v74, a1 + 4, a1 + 7);
  }

  else
  {
    unint64_t v30 = *a3;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_10000AD88(v65, *(void **)a4, *(void *)(a4 + 8));
    }

    else
    {
      *(_OWORD *)v65 = *(_OWORD *)a4;
      uint64_t v66 = *(void *)(a4 + 16);
    }

    int v67 = 1;
    v78 = &_mh_execute_header;
    int v79 = 2;
    sub_10000AA80(1LL, &v78, 3LL);
    unint64_t valuePtr = v30;
    unint64_t v69 = v13;
    char v70 = 2;
    *(_OWORD *)__p = *(_OWORD *)v65;
    uint64_t v72 = v66;
    v65[0] = 0LL;
    v65[1] = 0LL;
    uint64_t v66 = 0LL;
    int v73 = v67;
    sub_10000D99C(a1 + 4, (uint64_t)&valuePtr);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    unint64_t valuePtr = *a3;
    unint64_t v69 = v13;
    char v70 = 2;
    sub_10000EB88(a1 + 7, (uint64_t)&valuePtr);
  }

  *a3 = v13;
  int v31 = CFDictionaryGetValue(theDict, @"Partitions");
  CFTypeID v32 = CFArrayGetTypeID();
  if (!v31)
  {
    v55 = __cxa_allocate_exception(0x40uLL);
    uint64_t v56 = (void *)sub_100004494((uint64_t)v55, (uint64_t)"Couldn't find partitions key", 0x16u);
  }

  uint64_t v33 = v32;
  if (CFGetTypeID(v31) != v32)
  {
    v57 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v58 = CFGetTypeID(v31);
    v59 = sub_10000A374(v57, v58, v33);
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)v31);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v31, i);
      CFTypeID v37 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        uint64_t v38 = v37;
        if (CFGetTypeID(ValueAtIndex) != v37)
        {
          v40 = __cxa_allocate_exception(0x40uLL);
          CFTypeID v41 = CFGetTypeID(ValueAtIndex);
          unint64_t v42 = sub_10000A374(v40, v41, v38);
        }
      }

      sub_1000074AC((uint64_t)a1, (CFDictionaryRef)ValueAtIndex, a3);
    }
  }

  if (v77) {
    uint64_t v22 = v22 - sub_10000AE14(v74) + 1;
  }
  uint64_t v39 = *a3;
  if (*a3 != v22)
  {
    sub_100006174(v65, "Apple_Free");
    int v67 = 0;
    v78 = &_mh_execute_header;
    int v79 = 2;
    sub_10000AA80(0LL, &v78, 3LL);
    unint64_t valuePtr = v39;
    unint64_t v69 = v22;
    char v70 = 2;
    *(_OWORD *)__p = *(_OWORD *)v65;
    uint64_t v72 = v66;
    v65[0] = 0LL;
    v65[1] = 0LL;
    uint64_t v66 = 0LL;
    int v73 = v67;
    sub_10000D99C(a1 + 4, (uint64_t)&valuePtr);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    *a3 = v22;
  }

  if (v77)
  {
    sub_10000837C(v74, a1 + 4, a1 + 7);
    *a3 = sub_10000AE14(v74) + *a3 - 1;
  }

void sub_100008050( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t **sub_1000080B4(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v5 = *(void *)a1;
  if ((*(_BYTE *)(a1 + 16) & 2) == 0) {
    ++v5;
  }
  *(void *)&__int128 v19 = v5;
  *((void *)&v19 + 1) = v5 + 1;
  LOBYTE(v20) = 2;
  *(void *)&__int128 v17 = v5 + 1;
  *((void *)&v17 + 1) = v5 + 2;
  LOBYTE(v1std::ostream::~ostream(v2, v3 + 8) = 2;
  *(void *)&__int128 v15 = v5 + 2;
  *((void *)&v15 + 1) = sub_10000AE14((unint64_t *)a1);
  LOBYTE(v16) = 2;
  sub_100006174(v7, "MBR");
  int v9 = 1;
  unint64_t v21 = &_mh_execute_header;
  int v22 = 2;
  sub_10000AA80(1LL, &v21, 3LL);
  __int128 v10 = v19;
  uint64_t v11 = v20;
  *(_OWORD *)__p = *(_OWORD *)v7;
  uint64_t v13 = v8;
  v7[0] = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = 0LL;
  int v14 = v9;
  sub_10000D99C(a2, (uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  sub_10000EB88(a3, (uint64_t)&v19);
  sub_100006174(v7, "Primary GPT Header");
  int v9 = 1;
  unint64_t v21 = &_mh_execute_header;
  int v22 = 2;
  sub_10000AA80(1LL, &v21, 3LL);
  __int128 v10 = v17;
  uint64_t v11 = v18;
  *(_OWORD *)__p = *(_OWORD *)v7;
  uint64_t v13 = v8;
  v7[0] = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = 0LL;
  int v14 = v9;
  sub_10000D99C(a2, (uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  sub_10000EB88(a3, (uint64_t)&v17);
  sub_100006174(v7, "Primary GPT Table");
  int v9 = 1;
  unint64_t v21 = &_mh_execute_header;
  int v22 = 2;
  sub_10000AA80(1LL, &v21, 3LL);
  __int128 v10 = v15;
  uint64_t v11 = v16;
  *(_OWORD *)__p = *(_OWORD *)v7;
  uint64_t v13 = v8;
  v7[0] = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = 0LL;
  int v14 = v9;
  sub_10000D99C(a2, (uint64_t)&v10);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return sub_10000EB88(a3, (uint64_t)&v15);
}

void sub_100008330( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10000837C(unint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v6 = a1[3];
  *(void *)&__int128 v20 = v6 - 1;
  *((void *)&v20 + 1) = v6;
  LOBYTE(v21) = 2;
  uint64_t v7 = sub_10000AE14(a1);
  uint64_t v8 = a1[3] - 1;
  *(void *)&__int128 v18 = v6 - v7 + 1;
  *((void *)&v18 + 1) = v8;
  LOBYTE(v19) = 2;
  sub_100006174(v10, "Backup GPT Header");
  int v12 = 1;
  int v22 = &_mh_execute_header;
  int v23 = 2;
  sub_10000AA80(1LL, &v22, 3LL);
  __int128 v13 = v20;
  uint64_t v14 = v21;
  *(_OWORD *)__p = *(_OWORD *)v10;
  uint64_t v16 = v11;
  v10[0] = 0LL;
  v10[1] = 0LL;
  uint64_t v11 = 0LL;
  int v17 = v12;
  sub_10000D99C(a2, (uint64_t)&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  sub_10000EB88(a3, (uint64_t)&v20);
  sub_100006174(v10, "Backup GPT Table");
  int v12 = 1;
  int v22 = &_mh_execute_header;
  int v23 = 2;
  sub_10000AA80(1LL, &v22, 3LL);
  __int128 v13 = v18;
  uint64_t v14 = v19;
  *(_OWORD *)__p = *(_OWORD *)v10;
  uint64_t v16 = v11;
  v10[0] = 0LL;
  v10[1] = 0LL;
  uint64_t v11 = 0LL;
  int v17 = v12;
  sub_10000D99C(a2, (uint64_t)&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return sub_10000EB88(a3, (uint64_t)&v18);
}

void sub_100008558( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000859C(uint64_t **a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Name");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v24 = "Couldn't parse scheme name";
    goto LABEL_21;
  }

  CFTypeID v8 = TypeID;
  if (CFGetTypeID(Value) != TypeID)
  {
    int v25 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v26 = CFGetTypeID(Value);
    int v27 = v25;
    uint64_t v28 = v8;
    goto LABEL_23;
  }

  int v9 = (const __CFString *)CFDictionaryGetValue(theDict, @"ID");
  CFTypeID v10 = CFStringGetTypeID();
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v24 = "Couldn't parse scheme id";
LABEL_21:
    BOOL v29 = (void *)sub_100004494((uint64_t)exception, (uint64_t)v24, 0x16u);
  }

  CFTypeID v11 = v10;
  if (CFGetTypeID(v9) != v10)
  {
    unint64_t v30 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v26 = CFGetTypeID(v9);
    int v27 = v30;
    uint64_t v28 = v11;
LABEL_23:
    int v31 = sub_10000A374(v27, v26, v28);
  }

  sub_1000FE7CC(Value, v39);
  sub_1000FE7CC(v9, __p);
  int v12 = CFDictionaryGetValue(theDict, @"Sections");
  CFTypeID v13 = CFArrayGetTypeID();
  if (!v12)
  {
    CFTypeID v32 = __cxa_allocate_exception(0x40uLL);
    *CFTypeID v32 = &off_100196FC8;
    uint64_t v33 = std::generic_category();
    v32[1] = 22LL;
    v32[2] = v33;
    *((_BYTE *)v32 + 24) = 0;
    *((_BYTE *)v32 + 4std::ostream::~ostream(v2, v3 + 8) = 0;
    v32[7] = "Can't get section values from dictionary";
  }

  uint64_t v14 = v13;
  if (CFGetTypeID(v12) != v13)
  {
    char v34 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v35 = CFGetTypeID(v12);
    uint64_t v36 = sub_10000A37C(v34, v35, v14);
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)v12);
  if (Count >= 1)
  {
    CFIndex v16 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v12, v16);
      CFTypeID v18 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        uint64_t v19 = v18;
        if (CFGetTypeID(ValueAtIndex) != v18)
        {
          __int128 v20 = __cxa_allocate_exception(0x40uLL);
          CFTypeID v21 = CFGetTypeID(ValueAtIndex);
          int v22 = sub_10000A37C(v20, v21, v19);
        }
      }

      sub_100007A14(a1, (CFDictionaryRef)ValueAtIndex, a3, (uint64_t)v39, (unsigned __int16 *)__p);
      ++v16;
    }

    while (Count != v16);
  }

  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
}

void sub_100008878( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1000088E0(uint64_t **a1, CFDictionaryRef theDict)
{
  uint64_t Value = CFDictionaryGetValue(theDict, @"Block Size");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    CFTypeID v13 = (void *)sub_100004494( (uint64_t)exception,  (uint64_t)"Couldn't parse media block size in whole disk mode",  0x16u);
  }

  uint64_t v6 = TypeID;
  if (CFGetTypeID(Value) != TypeID)
  {
    uint64_t v14 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v15 = CFGetTypeID(Value);
    CFIndex v16 = sub_10000A374(v14, v15, v6);
  }

  if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberLongType, &valuePtr))
  {
    int v17 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v18 = (void *)sub_100004494((uint64_t)v17, (uint64_t)"Failed converting CFNumber to long", 0x16u);
  }

  uint64_t v7 = valuePtr;
  if (v7 != (*(uint64_t (**)(uint64_t *))(**a1 + 24))(*a1))
  {
    uint64_t v19 = __cxa_allocate_exception(0x40uLL);
    __int128 v20 = (void *)sub_100004494((uint64_t)v19, (uint64_t)"MediaKit returned unsupported block size", 0x2Du);
  }

  CFTypeID v8 = CFDictionaryGetValue(theDict, @"Sector Count");
  CFTypeID v9 = CFNumberGetTypeID();
  if (v8)
  {
    uint64_t v10 = v9;
    if (CFGetTypeID(v8) != v9)
    {
      int v23 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v24 = CFGetTypeID(v8);
      int v25 = sub_10000A374(v23, v24, v10);
    }
  }

  CFTypeID v11 = (void *)sub_100004F80(a1, (CFNumberRef)v8, "media block count");
  if (!v11)
  {
    CFTypeID v21 = __cxa_allocate_exception(0x40uLL);
    int v22 = (void *)sub_100004494( (uint64_t)v21,  (uint64_t)"Can't parse disk image with MediaKit. No partition scheme or partition scheme not supported by MediaKit",  0x16u);
  }

  sub_100006174(v26, "Whole_Disk");
  int v28 = 2;
  CFTypeID v35 = &_mh_execute_header;
  int v36 = 2;
  sub_10000AA80(2LL, &v35, 3LL);
  uint64_t valuePtr = 0LL;
  unint64_t v30 = v11;
  char v31 = 2;
  *(_OWORD *)__p = *(_OWORD *)v26;
  uint64_t v33 = v27;
  v26[0] = 0LL;
  v26[1] = 0LL;
  uint64_t v27 = 0LL;
  int v34 = v28;
  sub_10000D99C(a1 + 4, (uint64_t)&valuePtr);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  a1[10] = v11;
  sub_100006F3C((uint64_t)a1, 0LL, (uint64_t)v11, (uint64_t)&valuePtr);
  sub_100007990(a1 + 7, &valuePtr);
  sub_10000A494((uint64_t)&valuePtr, v30);
}

void sub_100008BD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

uint64_t sub_100008C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000042E4(kCFAllocatorDefault, (void *)a1);
  *(void *)(a1 + 40) = 0LL;
  v47 = (void *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  unint64_t v5 = (void *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_BYTE *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0;
  uint64_t v54 = 0LL;
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"Include all", kCFBooleanTrue);
  CFDictionaryRef theDict = (CFDictionaryRef)MKCFReadMedia(Mutable, *(void *)(a1 + 16), &v53);
  if (v53)
  {
    uint64_t v6 = (const void *)MKMediaCopyProperty(*(void *)(a1 + 16), @"Geometry");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!v6)
    {
      *(void *)buf = 0LL;
      exception = __cxa_allocate_exception(0x40uLL);
      void *exception = &off_100196FC8;
      char v38 = std::generic_category();
      exception[1] = 22LL;
      exception[2] = v38;
      *((_BYTE *)exception + 24) = 0;
      *((_BYTE *)exception + 4std::ostream::~ostream(v2, v3 + 8) = 0;
      exception[7] = "Can't get geometry values from MediaKit";
    }

    uint64_t v8 = TypeID;
    if (CFGetTypeID(v6) != TypeID)
    {
      uint64_t v39 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v40 = CFGetTypeID(v6);
      CFTypeID v41 = sub_10000A37C(v39, v40, v8);
    }

    *(void *)buf = v6;
    sub_1000088E0((uint64_t **)a1, (CFDictionaryRef)v6);
    sub_10000D8A4((const void **)buf);
  }

  else
  {
    if (sub_1000BE308())
    {
      int v9 = *__error();
      if (sub_1000BE2F0())
      {
        *(void *)&__int128 v49 = 0LL;
        uint64_t v10 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          uint64_t v11 = 3LL;
        }
        else {
          uint64_t v11 = 2LL;
        }
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 20;
        __int16 v57 = 2080;
        CFTypeID v58 = "MediaInfo::MediaInfo(DiskImage &)";
        __int16 v59 = 2114;
        CFDictionaryRef v60 = theDict;
        int v12 = (const char *)_os_log_send_and_compose_impl( v11,  &v49,  0LL,  0LL,  &_mh_execute_header,  v10,  2LL,  "%.*s: %{public}@",  buf,  28);
        if (v12)
        {
          CFTypeID v13 = (char *)v12;
          fprintf(__stderrp, "%s\n", v12);
          free(v13);
        }
      }

      else
      {
        uint64_t v14 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 20;
          __int16 v57 = 2080;
          CFTypeID v58 = "MediaInfo::MediaInfo(DiskImage &)";
          __int16 v59 = 2114;
          CFDictionaryRef v60 = theDict;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%.*s: %{public}@", buf, 0x1Cu);
        }
      }

      *__error() = v9;
    }

    uint64_t Value = CFDictionaryGetValue(theDict, @"Schemes");
    CFTypeID v16 = CFArrayGetTypeID();
    if (!Value)
    {
      unint64_t v42 = __cxa_allocate_exception(0x40uLL);
      void *v42 = &off_100196FC8;
      unint64_t v43 = std::generic_category();
      v42[1] = 22LL;
      v42[2] = v43;
      *((_BYTE *)v42 + 24) = 0;
      *((_BYTE *)v42 + 4std::ostream::~ostream(v2, v3 + 8) = 0;
      v42[7] = "Can't get scheme values from dictionary";
    }

    uint64_t v17 = v16;
    if (CFGetTypeID(Value) != v16)
    {
      char v44 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v45 = CFGetTypeID(Value);
      CFTypeID v46 = sub_10000A37C(v44, v45, v17);
    }

    CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
        CFTypeID v21 = CFDictionaryGetTypeID();
        if (ValueAtIndex)
        {
          uint64_t v22 = v21;
          if (CFGetTypeID(ValueAtIndex) != v21)
          {
            int v34 = __cxa_allocate_exception(0x40uLL);
            CFTypeID v35 = CFGetTypeID(ValueAtIndex);
            int v36 = sub_10000A37C(v34, v35, v22);
          }
        }

        sub_10000859C((uint64_t **)a1, (CFDictionaryRef)ValueAtIndex, &v54);
      }
    }

    if (sub_1000BE308())
    {
      *(void *)&__int128 v49 = "MediaInfo::MediaInfo(DiskImage &)";
      *((void *)&v49 + 1) = 20LL;
      int v50 = 2;
      sub_10000957C(buf, &v49);
      int v23 = *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 8];
      std::ostream::~ostream(&v61, off_100171C28);
      sub_10000B238((uint64_t)buf);
      std::ios::~ios(v62);
      *(void *)&__int128 v49 = "MediaInfo::MediaInfo(DiskImage &)";
      *((void *)&v49 + 1) = 20LL;
      int v50 = 2;
      sub_100009664(buf, &v49);
      sub_10000552C(&v61, (uint64_t)"Partitions: ", 12LL);
      std::ios_base::getloc((const std::ios_base *)&v62[*(void *)(v61 - 24) - 8]);
      CFTypeID v24 = std::locale::use_facet(&v55, &std::ctype<char>::id);
      uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
      std::locale::~locale(&v55);
      std::ostream::put(&v61, v25);
      std::ostream::flush(&v61);
      std::ostream::~ostream(&v61, off_100171E48);
      sub_10000B7E4((uint64_t)buf);
      std::ios::~ios(v62);
      CFTypeID v26 = (void *)*v5;
      if ((void *)*v5 != v47)
      {
        do
        {
          *(void *)&__int128 v49 = "MediaInfo::MediaInfo(DiskImage &)";
          *((void *)&v49 + 1) = 20LL;
          int v50 = 2;
          sub_10000974C(buf, &v49);
          *(_DWORD *)&v62[*(void *)(v61 - 24)] = *(_DWORD *)&v62[*(void *)(v61 - 24)] & 0xFFFFFFB5 | 8;
          char v48 = 48;
          sub_10000EDBC(&v61, &v48);
          *(void *)&v62[*(void *)(v61 - 24) + 16] = 2LL;
          if ((v26[6] & 2) != 0) {
            uint64_t v27 = v26[4];
          }
          else {
            uint64_t v27 = v26[4] + 1LL;
          }
          std::ostream::operator<<(&v61, v27);
          sub_10000552C(&v61, (uint64_t)" - ", 3LL);
          std::ostream::operator<<(&v61, (v26[6] & 1) + v26[5] - 1LL);
          sub_10000552C(&v61, (uint64_t)" -> ", 4LL);
          sub_100009BC4(&v61, (uint64_t)(v26 + 7));
          std::ios_base::getloc((const std::ios_base *)&v62[*(void *)(v61 - 24) - 8]);
          int v28 = std::locale::use_facet(&v55, &std::ctype<char>::id);
          uint64_t v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10LL);
          std::locale::~locale(&v55);
          std::ostream::put(&v61, v29);
          std::ostream::flush(&v61);
          std::ostream::~ostream(&v61, off_100172068);
          sub_10000BD90((uint64_t)buf);
          std::ios::~ios(v62);
          unint64_t v30 = (void *)v26[1];
          if (v30)
          {
            do
            {
              char v31 = v30;
              unint64_t v30 = (void *)*v30;
            }

            while (v30);
          }

          else
          {
            do
            {
              char v31 = (void *)v26[2];
              BOOL v32 = *v31 == (void)v26;
              CFTypeID v26 = v31;
            }

            while (!v32);
          }

          CFTypeID v26 = v31;
        }

        while (v31 != v47);
      }

      *(void *)&__int128 v49 = "MediaInfo::MediaInfo(DiskImage &)";
      *((void *)&v49 + 1) = 20LL;
      int v50 = 2;
      sub_100009834(buf, &v49);
      *(_DWORD *)&buf[*(void *)(*(void *)buf - 24LL) + 8] = v23;
      std::ostream::~ostream(&v61, off_100172288);
      sub_10000C33C((uint64_t)buf);
      std::ios::~ios(v62);
    }
  }

  sub_100006B34((const void **)&theDict);
  sub_100006B34((const void **)&Mutable);
  return a1;
}

void sub_10000944C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20, const void *a21, uint64_t a22, uint64_t a23, std::locale a24, char a25)
{
}

void *sub_10000957C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000EC48((uint64_t)a1, a2);
  *a1 = off_100171B60;
  a1[45] = &off_100171C60;
  a1[46] = &off_100171C88;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100171B60;
  a1[45] = off_100171BE8;
  a1[46] = off_100171C10;
  return a1;
}

void sub_100009600(_Unwind_Exception *a1)
{
}

uint64_t sub_100009624(uint64_t a1)
{
  return a1;
}

void *sub_100009664(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000ECC4((uint64_t)a1, a2);
  *a1 = off_100171D80;
  a1[45] = &off_100171E80;
  a1[46] = &off_100171EA8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100171D80;
  a1[45] = off_100171E08;
  a1[46] = off_100171E30;
  return a1;
}

void sub_1000096E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10000970C(uint64_t a1)
{
  return a1;
}

void *sub_10000974C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000ED40((uint64_t)a1, a2);
  *a1 = off_100171FA0;
  a1[45] = &off_1001720A0;
  a1[46] = &off_1001720C8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_100171FA0;
  a1[45] = off_100172028;
  a1[46] = off_100172050;
  return a1;
}

void sub_1000097D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000097F4(uint64_t a1)
{
  return a1;
}

void *sub_100009834(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10000EE5C((uint64_t)a1, a2);
  *a1 = off_1001721C0;
  a1[45] = &off_1001722C0;
  a1[46] = &off_1001722E8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::ostream::~ostream(v2, v3 + 8) = -1;
  *a1 = off_1001721C0;
  a1[45] = off_100172248;
  a1[46] = off_100172270;
  return a1;
}

void sub_1000098B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000098DC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10000991C(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  return a1;
}

void *sub_10000996C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void *)result[7];
  if (v2 == (void *)result[8])
  {
    int v9 = 0;
    uint64_t v10 = result[3];
    *(void *)a2 = result[5];
    *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v10;
LABEL_11:
    *(_BYTE *)(a2 + 16) = 2;
    goto LABEL_12;
  }

  uint64_t v3 = result[5];
  uint64_t v4 = v2 + 4;
  uint64_t v5 = v2[4];
  if (v3 != v5)
  {
    int v9 = 0;
    *(void *)a2 = v3;
    *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v5;
    goto LABEL_11;
  }

  uint64_t v6 = (void *)v2[1];
  if (v6)
  {
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = (void *)*v6;
    }

    while (v6);
  }

  else
  {
    do
    {
      uint64_t v7 = (void *)v2[2];
      BOOL v8 = *v7 == (void)v2;
      uint64_t v2 = v7;
    }

    while (!v8);
  }

  result[7] = v7;
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(void *)(a2 + 16) = v4[2];
  int v9 = 1;
LABEL_12:
  *(_DWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_100009A00@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 56;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 136LL))(v6);
  uint64_t v18 = v6;
  *(void *)&__int128 v19 = 0LL;
  *((void *)&v19 + 1) = v7;
  LOBYTE(v20) = 2;
  uint64_t v21 = v8;
  uint64_t v22 = v8;
  int v23 = a2;
  int v9 = v24;
  v24[0] = &off_1001723D8;
  uint64_t v25 = v24;
  v16[0] = &off_1001724B0;
  v16[1] = v5;
  uint64_t v17 = v16;
  __int128 v14 = v19;
  uint64_t v15 = v20;
  sub_10009AAB8((__int128 *)&v18, (uint64_t)v16, &v14, a3);
  uint64_t v10 = v17;
  if (v17 == v16)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  if (v25 == v24)
  {
    uint64_t v12 = 4LL;
  }

  else
  {
    if (!v25) {
      goto LABEL_11;
    }
    uint64_t v12 = 5LL;
    int v9 = v25;
  }

  (*(void (**)(void *))(*v9 + 8 * v12))(v9);
LABEL_11:
  uint64_t result = v21;
  uint64_t v21 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

void sub_100009B74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v21 = a16;
  if (a16 == v19)
  {
    uint64_t v22 = 4LL;
    uint64_t v21 = &a13;
  }

  else
  {
    if (!a16) {
      goto LABEL_6;
    }
    uint64_t v22 = 5LL;
  }

  (*(void (**)(void))(*(void *)v21 + 8 * v22))();
LABEL_6:
  sub_1001260AC(v18, v16, v17);
  _Unwind_Resume(a1);
}

void *sub_100009BC4(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10000552C(a1, (uint64_t)"name: ", 6LL);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = sub_10000552C(v3, v5, v6);
  uint64_t v8 = sub_10000552C(v7, (uint64_t)" ", 1LL);
  int v9 = sub_10000552C(v8, (uint64_t)" status: ", 9LL);
  int v11 = *(_DWORD *)(a2 + 24);
  return sub_100009C44(v9, &v11);
}

void *sub_100009C44(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100172458[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 18)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_100172458[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

void sub_100009C88(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 16);
  uint64_t v4 = a1;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    uint64_t v6 = &v4;
    uint64_t v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))sub_10000EFE0);
  }

uint64_t sub_100009CD8(uint64_t a1, unint64_t a2, int a3, int a4)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a4;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v8 = std::system_category();
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 113) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 20std::ostream::~ostream(v2, v3 + 8) = 0;
  if (a3 == 2)
  {
    uint64_t v9 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 32LL))(a2);
    uint64_t v10 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 136LL))(a2);
    __int128 v22 = a2;
    uint64_t v23 = v9;
    char v24 = 2;
    uint64_t v25 = v10;
    uint64_t v26 = v10;
    int v27 = a4;
    int v11 = v28;
    v28[0] = &off_1001723D8;
    uint64_t v29 = v28;
    sub_10000A020(a1 + 120, (uint64_t)&v22);
    if (v29 == v28)
    {
      uint64_t v12 = 4LL;
    }

    else
    {
      if (!v29) {
        goto LABEL_25;
      }
      uint64_t v12 = 5LL;
      int v11 = v29;
    }

    (*(void (**)(void *))(*v11 + 8 * v12))(v11);
    goto LABEL_25;
  }

  sub_100009C88(a1);
  char v13 = *(_BYTE *)(a1 + 113);
  if (v13)
  {
    *(void *)&__int128 v22 = a1 + 24;
    char v13 = 1;
  }

  else
  {
    __int128 v22 = *(_OWORD *)(a1 + 24);
  }

  LOBYTE(v23) = v13;
  uint64_t v14 = sub_10000A094(&v22, (uint64_t)"Could not get media info");
  if ((*(unsigned int (**)(unint64_t))(*(void *)a2 + 88LL))(a2))
  {
    if (a3 == 1) {
      BOOL v15 = sub_10000A144(v14);
    }
    else {
      BOOL v15 = sub_10000A144(v14) || *(_BYTE *)(v14 + 88) != 0;
    }
    *(_BYTE *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v15;
    if (!v15) {
      goto LABEL_19;
    }
  }

  else if (!*(_BYTE *)(a1 + 8))
  {
LABEL_19:
    sub_100009A00(v14, a4, (uint64_t)&v22);
    goto LABEL_20;
  }

  uint64_t v16 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 32LL))(a2);
  uint64_t v17 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 136LL))(a2);
  __int128 v22 = a2;
  uint64_t v23 = v16;
  char v24 = 2;
  uint64_t v25 = v17;
  uint64_t v26 = v17;
  int v27 = a4;
  v28[0] = &off_1001723D8;
  uint64_t v29 = v28;
LABEL_20:
  sub_10000A020(a1 + 120, (uint64_t)&v22);
  uint64_t v18 = v29;
  if (v29 == v28)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = v28;
  }

  else
  {
    if (!v29) {
      goto LABEL_25;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void *))(*v18 + 8 * v19))(v18);
LABEL_25:
  uint64_t v20 = v25;
  uint64_t v25 = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 40LL))(v20);
  }
  return a1;
}

void sub_100009F6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  char v24 = a19;
  if (a19 == (void *)(v22 + 56))
  {
    uint64_t v25 = 4LL;
    char v24 = (void *)(v22 + 56);
  }

  else
  {
    if (!a19) {
      goto LABEL_6;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void *))(*v24 + 8 * v25))(v24);
LABEL_6:
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 40LL))(a13);
  }
  sub_10000C8B0(v21);
  if (*(_BYTE *)(v19 + 113)) {
    sub_10000C920(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000A020(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 88))
  {
    sub_1000EA6DC(a1, a2);
  }

  else
  {
    __int128 v3 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)a1 = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a1 + 32) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)(a2 + 48);
    *(void *)(a1 + 40) = v5;
    sub_10000C84C(a1 + 56, a2 + 56);
    *(_BYTE *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 1;
  }

  return a1;
}

uint64_t sub_10000A094(_BYTE *a1, uint64_t a2)
{
  if (!a1[16])
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v6 = *(_OWORD *)a1;
    *(void *)exception = &off_100196FC8;
    *(_OWORD *)(exception + std::ostream::~ostream(v2, v3 + 8) = v6;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = a2;
  }

  return *(void *)a1;
}

void sub_10000A0FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (_OWORD *)(a1 + 24);
  char v5 = *(_BYTE *)(a1 + 113);
  if (v5)
  {
    *(void *)a2 = v4;
    char v5 = 1;
  }

  else
  {
    *(_OWORD *)a2 = *v4;
  }

  *(_BYTE *)(a2 + 16) = v5;
}

BOOL sub_10000A144(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 == a1 + 40) {
    return 0LL;
  }
  uint64_t v2 = *(unsigned __int8 *)(v1 + 79);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0LL) {
    uint64_t v2 = *(void *)(v1 + 64);
  }
  if (v2 != 10) {
    return 0LL;
  }
  __int128 v6 = *(uint64_t **)(v1 + 56);
  uint64_t v4 = (uint64_t *)(v1 + 56);
  char v5 = v6;
  if (v3 < 0) {
    uint64_t v4 = v5;
  }
  uint64_t v7 = *v4;
  int v8 = *((unsigned __int16 *)v4 + 4);
  return v7 == 0x69445F656C6F6857LL && v8 == 27507;
}

uint64_t sub_10000A1B0@<X0>(unint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_10000F198(a4, (uint64_t)v8);
  *(_BYTE *)(a4 + 216) = 1;
  if (!v13) {
    goto LABEL_9;
  }
  __int128 v6 = v12;
  if (v12 == v11)
  {
    uint64_t v7 = 4LL;
    __int128 v6 = v11;
  }

  else
  {
    if (!v12) {
      goto LABEL_7;
    }
    uint64_t v7 = 5LL;
  }

  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
  uint64_t result = v10;
  uint64_t v10 = 0LL;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
LABEL_9:
  if (v9[89]) {
    return sub_10000C920((uint64_t)v9);
  }
  return result;
}

void sub_10000A29C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
  if (a36) {
    sub_100126108(&a9);
  }
  if (a24) {
    sub_10000C920((uint64_t)&a12);
  }
  if (a2 == 1)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)((char *)__cxa_begin_catch(exception_object) + 8);
    *(_BYTE *)(v36 + 216) = 0;
    __cxa_end_catch();
    JUMPOUT(0x10000A26CLL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10000A304(uint64_t a1)
{
  return a1 + 120;
}

__n128 sub_10000A30C@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v4 + std::ostream::~ostream(v2, v3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  *(void *)uint64_t v4 = off_1001717F8;
  __n128 result = *(__n128 *)(a1 + 48);
  *((__n128 *)v4 + 3) = result;
  *((void *)v4 + std::ostream::~ostream(v2, v3 + 8) = *(void *)(a1 + 64);
  *a2 = v4;
  return result;
}

void *sub_10000A37C(void *a1, uint64_t a2, uint64_t a3)
{
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf(v8);
  std::ios::~ios(&v10);
  *a1 = &off_100171868;
  return a1;
}

void sub_10000A480(std::exception *a1)
{
}

void sub_10000A494(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10000A494(a1, *a2);
    sub_10000A494(a1, a2[1]);
    operator delete(a2);
  }

uint64_t sub_10000A4D4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171960);
  sub_10000A698(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10000A50C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171960);
  sub_10000A698(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10000A54C(char *a1)
{
}

uint64_t sub_10000A590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10000A5C4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10000A610(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171960);
  sub_10000A698((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10000A650(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171960);
  sub_10000A698((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10000A698(uint64_t a1)
{
  *(void *)a1 = off_100171A30;
  sub_10000A734(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10000A734(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10000A89C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10000A85C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000A888(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000A698(a1);
  operator delete(v1);
}

int *sub_10000A89C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 100LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    char v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 100LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10000AA80(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if (!a3)
  {
LABEL_5:
    int v4 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_100171AC8;
    exception[1] = "status";
    *((_DWORD *)exception + std::ostream::~ostream(v2, v3 + 8) = v4;
  }

  uint64_t v3 = 4 * a3;
  while (*a2 != (_DWORD)result)
  {
    ++a2;
    v3 -= 4LL;
    if (!v3) {
      goto LABEL_5;
    }
  }

  return result;
}

void sub_10000AB08(std::exception *a1)
{
}

void sub_10000AB1C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)sub_1001110BC(a1);
  sub_100006174(v15, v3);
  sub_10000AC5C((uint64_t)v10);
  if ((v16 & 0x80u) == 0) {
    int v4 = v15;
  }
  else {
    int v4 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)v15[1];
  }
  char v6 = sub_10000552C(&v11, (uint64_t)v4, v5);
  uint64_t v7 = sub_10000552C(v6, (uint64_t)" [", 2LL);
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24LL) + std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v7 + *(void *)(*v7 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_10000552C(v8, (uint64_t)"]", 1LL);
  sub_100005F24((uint64_t)v12, a2);
  *(void *)((char *)v10
  uint64_t v11 = v9;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf(v12);
  std::ios::~ios(&v14);
}

uint64_t sub_10000AC5C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = a1 + 24;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  char v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v8;
  *(void *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10000AD60(_Unwind_Exception *a1)
{
}

void *sub_10000AD88(_BYTE *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_100005874();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_10000AE14(unint64_t *a1)
{
  unsigned int v1 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v1 == 3)
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (v2 >= *a1) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }

    else
    {
      unint64_t v3 = *a1;
      unint64_t v2 = a1[1];
      if (*a1 < v2) {
        return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
      }
    }
  }

  else
  {
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
    if (*a1 < v2 && *a1 + 1 < v2) {
      return (v1 & 1) + (uint64_t)(int)(((v1 >> 1) & 1) - 1) + v2 - v3;
    }
  }

  return qword_1001A3B38;
}

void *sub_10000AE7C(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x50uLL);
  v4[8] = 0;
  *(void *)uint64_t v4 = off_1001784B0;
  *((void *)v4 + 2) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 72LL))(a2);
  v4[56] = 0;
  sub_10000AF6C((void *)v4 + 8);
  *a1 = v4;
  a1[1] = 0LL;
  uint64_t v5 = (*(uint64_t (**)(_BYTE *))(*(void *)v4 + 136LL))(v4);
  uint64_t v6 = a1[1];
  a1[1] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40LL))(v6);
  }
  return a1;
}

void sub_10000AF20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[1];
  v1[1] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }
  uint64_t v4 = *v1;
  *unsigned int v1 = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000AF6C(void *a1)
{
  *a1 = 0LL;
  unint64_t v2 = operator new(0x20uLL);
  *unint64_t v2 = &off_100171AF8;
  v2[1] = 0LL;
  v2[2] = 0LL;
  v2[3] = 0LL;
  a1[1] = v2;
  return a1;
}

void sub_10000AFAC(void *a1)
{
}

void sub_10000AFB8(_Unwind_Exception *a1)
{
}

void sub_10000AFD0(std::__shared_weak_count *a1)
{
}

uint64_t sub_10000AFE8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

BOOL sub_10000B028(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

uint64_t sub_10000B074(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171C28);
  sub_10000B238(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10000B0AC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171C28);
  sub_10000B238(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10000B0EC(char *a1)
{
}

uint64_t sub_10000B130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10000B164(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10000B1B0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171C28);
  sub_10000B238((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10000B1F0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171C28);
  sub_10000B238((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10000B238(uint64_t a1)
{
  *(void *)a1 = off_100171CF8;
  sub_10000B2D4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10000B2D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10000B43C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10000B3FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000B428(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000B238(a1);
  operator delete(v1);
}

int *sub_10000B43C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 358LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    char v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unsigned __int8 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 358LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10000B620(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100171E48);
  sub_10000B7E4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10000B658(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171E48);
  sub_10000B7E4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10000B698(char *a1)
{
}

uint64_t sub_10000B6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10000B710(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10000B75C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100171E48);
  sub_10000B7E4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10000B79C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100171E48);
  sub_10000B7E4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10000B7E4(uint64_t a1)
{
  *(void *)a1 = off_100171F18;
  sub_10000B880(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10000B880(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10000B9E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10000B9A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000B9D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000B7E4(a1);
  operator delete(v1);
}

int *sub_10000B9E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 359LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    char v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unsigned __int8 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 359LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10000BBCC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172068);
  sub_10000BD90(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10000BC04(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172068);
  sub_10000BD90(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10000BC44(char *a1)
{
}

uint64_t sub_10000BC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10000BCBC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10000BD08(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172068);
  sub_10000BD90((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10000BD48(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172068);
  sub_10000BD90((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10000BD90(uint64_t a1)
{
  *(void *)a1 = off_100172138;
  sub_10000BE2C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10000BE2C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10000BF94((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10000BF54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000BF80(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000BD90(a1);
  operator delete(v1);
}

int *sub_10000BF94(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 361LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    char v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unsigned __int8 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 361LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10000C178(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172288);
  sub_10000C33C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10000C1B0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172288);
  sub_10000C33C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10000C1F0(char *a1)
{
}

uint64_t sub_10000C234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10000C268(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10000C2B4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172288);
  sub_10000C33C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10000C2F4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172288);
  sub_10000C33C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10000C33C(uint64_t a1)
{
  *(void *)a1 = off_100172358;
  sub_10000C3D8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10000C3D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10000C540((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10000C500( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000C52C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10000C33C(a1);
  operator delete(v1);
}

int *sub_10000C540(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 373LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    char v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unsigned __int8 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 373LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void sub_10000C724(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10000C724(a1, *(void *)a2);
    sub_10000C724(a1, *((void *)a2 + 1));
    if (a2[79] < 0) {
      operator delete(*((void **)a2 + 7));
    }
    operator delete(a2);
  }

void *sub_10000C77C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_1001723D8;
  return result;
}

void sub_10000C7A0(uint64_t a1, void *a2)
{
  *a2 = &off_1001723D8;
}

void *sub_10000C7B8@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  __n128 result = (*(void *(**)(uint64_t *__return_ptr, void, void *, void, void *, void))(*(void *)*a1 + 128LL))( &v5,  *a1,  a1,  a1[5],  a1 + 1,  *a2);
  *a3 = v5;
  return result;
}

uint64_t sub_10000C804(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10000C840()
{
  return &off_100172448;
}

uint64_t sub_10000C84C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t sub_10000C8B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 88)) {
    return a1;
  }
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2 == (void *)(a1 + 56))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 56);
  }

  else
  {
    if (!v2) {
      goto LABEL_7;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40LL))(v4);
  }
  return a1;
}

uint64_t sub_10000C920(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  uint64_t result = *(void *)a1;
  *(void *)a1 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

const void **sub_10000C994(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t **sub_10000C9C4(uint64_t **a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 16))
  {
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 < v11 && *(void *)a2 + 1LL < v11) {
      goto LABEL_4;
    }
    return a1 + 1;
  }

  if (*(_BYTE *)(a2 + 16) == 3)
  {
    if (*(void *)(a2 + 8) >= *(void *)a2) {
      goto LABEL_4;
    }
    return a1 + 1;
  }

  if (*(void *)a2 >= *(void *)(a2 + 8)) {
    return a1 + 1;
  }
LABEL_4:
  uint64_t v4 = (uint64_t *)sub_10000CAF8(a1, a2, a2);
  if ((v5 & 1) != 0)
  {
    char v13 = v4;
    sub_10000CDF0(a1, &v13);
    return sub_10000CEEC(a1, (uint64_t ***)&v13);
  }

  else
  {
    char v6 = (void *)sub_10000D4D8((uint64_t)a1, a2);
    uint64_t v7 = (void *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)v7[1];
      }

      while (v7);
    }

    else
    {
      do
      {
        uint64_t v8 = (void *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        char v6 = v8;
      }

      while (v9);
    }

    return sub_10000CAB4(a1, (unint64_t *)a2, (uint64_t)v8);
  }

uint64_t **sub_10000CAB4(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  char v5 = (uint64_t *)sub_10000D520(a1, a2, a3);
  sub_10000CDF0(a1, &v5);
  return sub_10000CEEC(a1, (uint64_t ***)&v5);
}

_OWORD *sub_10000CAF8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void **)sub_10000CB80((uint64_t)a1, &v9, a2);
  char v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    char v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_10000CC04(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

void *sub_10000CB80(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
      unint64_t v6 = *(void *)a3;
    }
    else {
      unint64_t v6 = *(void *)a3 + 1LL;
    }
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        char v8 = *(_BYTE *)(v4 + 48);
        unint64_t v9 = v7[4];
        if ((v8 & 2) == 0) {
          ++v9;
        }
        uint64_t v4 = *v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_14;
        }
      }

      uint64_t result = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = result;
  }

LABEL_14:
  *a2 = v7;
  return result;
}

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams shadowChain](self, "shadowChain"));
  uint64_t v18 = [v17 isEmpty];

  if ((v18 & 1) != 0) {
    return 1;
  }
  int v20 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams shadowChain](self, "shadowChain"));
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 statWithError:a3]);
  uint64_t v19 = v21 != 0LL;

  return v19;
}

uint64_t *sub_10000CC04(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  uint64_t result = sub_10000CC58(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_10000CC58(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }

            v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

uint64_t *sub_10000CDF0(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v4 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }

    while (v4);
  }

  else
  {
    uint64_t v6 = (uint64_t)*a2;
    do
    {
      uint64_t v5 = *(void *)(v6 + 16);
      BOOL v7 = *(void *)v5 == v6;
      uint64_t v6 = v5;
    }

    while (v7);
  }

  uint64_t v8 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v8;
  }
  if (v8 == (*(_BYTE *)(v5 + 48) & 1) + *(void *)(v5 + 40))
  {
    __int128 v14 = *((_OWORD *)v2 + 2);
    uint64_t v15 = v2[6];
    sub_10000D0E4(a1, v2);
    operator delete(v2);
    __int128 v10 = *(_OWORD *)(v5 + 32);
    uint64_t v11 = *(void *)(v5 + 48);
    sub_10000CFF0((unint64_t *)&v10, (unint64_t *)&v14, (uint64_t)&v12);
    *(_OWORD *)(v5 + 32) = v12;
    *(_BYTE *)(v5 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v13;
    *a2 = (uint64_t *)v5;
    return (uint64_t *)v5;
  }

  return v2;
}

uint64_t **sub_10000CEEC(uint64_t **a1, uint64_t ***a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      BOOL v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }

    while (v6);
  }

  else
  {
    uint64_t v8 = *a2;
    do
    {
      BOOL v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      uint64_t v8 = v7;
    }

    while (!v9);
  }

  if (v7 != v3)
  {
    __int128 v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      __int128 v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      __int128 v17 = *((_OWORD *)v7 + 2);
      uint64_t v18 = v7[6];
      sub_10000D0E4(a1, (uint64_t *)v7);
      operator delete(v7);
      uint64_t v11 = *a2;
      __int128 v13 = *((_OWORD *)*a2 + 2);
      __int128 v14 = v11[6];
      sub_10000CFF0((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
      __int128 v12 = *a2;
      *((_OWORD *)v12 + 2) = v15;
      *((_BYTE *)v12 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v16;
      return *a2;
    }
  }

  return result;
}

unint64_t *sub_10000CFF0@<X0>( unint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v3 == 3)
    {
      uint64_t v5 = (uint64_t *)*a2;
      unint64_t v4 = a2[1];
      if (v4 >= *a2) {
        goto LABEL_4;
      }
LABEL_24:
      *(_OWORD *)a3 = *(_OWORD *)result;
      unint64_t v15 = result[2];
LABEL_33:
      *(void *)(a3 + 16) = v15;
      return result;
    }

    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4) {
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v5 = (uint64_t *)*a2;
    unint64_t v4 = a2[1];
    if (*a2 >= v4 || *a2 + 1 >= v4) {
      goto LABEL_24;
    }
  }

LABEL_4:
  int v6 = *((unsigned __int8 *)result + 16);
  if (!*((_BYTE *)result + 16))
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7 && *result + 1 < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  if (v6 != 3)
  {
    uint64_t v8 = (uint64_t *)*result;
    unint64_t v7 = result[1];
    if (*result < v7) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  uint64_t v8 = (uint64_t *)*result;
  unint64_t v7 = result[1];
  if (v7 < *result)
  {
LABEL_32:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    unint64_t v15 = a2[2];
    goto LABEL_33;
  }

  if (a1[10] >> 62) {
    fwrite("  requesting Westgate token from the Knox server\n", 0x31uLL, 1uLL, __stderrp);
  }
  uint64_t v8 = (AAByteStream_impl *)AATempStreamOpen(0x100000LL);
  if (!v8)
  {
    int v13 = "AATempStreamOpen";
    __int128 v14 = 491;
    unint64_t v15 = 0;
LABEL_16:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  v14,  125,  v15,  v13,  v6,  v7,  v115);
    int v20 = 0LL;
    goto LABEL_17;
  }

  char v9 = strlen(__s);
  unint64_t v10 = v9 + 200;
  if (v9 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
    goto LABEL_15;
  }

  char v16 = malloc(v9 + 200);
  if (!v16)
  {
LABEL_15:
    unint64_t v15 = *__error();
    int v13 = "malloc";
    __int128 v14 = 495;
    goto LABEL_16;
  }

  __int128 v17 = v16;
  uint64_t v18 = strlen(v5);
  uint64_t v19 = v18 + 200;
  if (v18 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_91:
    v84 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  498,  125,  *v84,  "malloc",  v85,  v86,  v115);
    int v20 = 0LL;
    __int16 v21 = 0LL;
    goto LABEL_18;
  }

  int v67 = (char *)malloc(v18 + 200);
  if (!v67) {
    goto LABEL_91;
  }
  __int16 v21 = v67;
  snprintf(v67, v19, "Authorization: Bearer %s", v5);
  v120[0] = v21;
  v120[1] = 0LL;
  snprintf((char *)v17, v10, "https://%s/westgate/token", __s);
  if ((sub_1000363DC((uint64_t)a1, 2u, (char *)v17, v120, (uint64_t)v8) & 0x80000000) != 0)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  505,  125,  0,  "Knox request failed: %s",  v68,  v69,  (char)v17);
    int v20 = 0LL;
    goto LABEL_18;
  }

  AAByteStreamSeek(v8, 0LL, 0);
  char v70 = (void **)sub_100038128((uint64_t)v8);
  int v20 = v70;
  if (!v70)
  {
    v82 = "AAJSONInputStreamOpen";
    v83 = 510;
    goto LABEL_106;
  }

  if ((sub_100038258((uint64_t)v70, (int *)&__sa, v71, v72, v73, v74, v75, v76) & 0x80000000) != 0)
  {
LABEL_90:
    v82 = "parsing JSON";
    v83 = 516;
LABEL_106:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  v83,  125,  0,  v82,  v75,  v76,  v115);
    goto LABEL_18;
  }

  v81 = 0;
  while (1)
  {
    if (__sa < 2)
    {
      ++v81;
      goto LABEL_88;
    }

    if ((_DWORD)__sa == 2) {
      break;
    }
    if ((_DWORD)__sa != 3 || v81 != 1 || !__s1) {
      goto LABEL_88;
    }
    if (!strcasecmp(__s1, "password") && (sub_100037450((uint64_t)a1, 4u, v119, 0LL) & 0x80000000) != 0)
    {
      v82 = "password";
      v83 = 529;
      goto LABEL_106;
    }

    v81 = 1;
LABEL_89:
  }

  --v81;
LABEL_88:
  if (v81) {
    goto LABEL_89;
  }
  v89 = (const char *)a1[4];
  if (!v89 || strncmp(v89, "WGTKN", 5uLL))
  {
    v82 = "invalid/missing token";
    v83 = 537;
    goto LABEL_106;
  }

  sub_100038210(v20);
  AAByteStreamClose(v8);
  free(v17);
  free(v21);
  if (!a1[4])
  {
    uint64_t v24 = "invalid Westgate token";
    __int16 v25 = 658;
    goto LABEL_102;
  }

  return 0LL;
}

  return v12;
}

LABEL_7:
  char v9 = v6 & 2;
  if ((v6 & 2) != 0) {
    unint64_t v10 = (unint64_t)v8;
  }
  else {
    unint64_t v10 = (unint64_t)v8 + 1;
  }
  char v11 = v3 & 2;
  if ((v3 & 2) != 0) {
    uint64_t result = (unint64_t *)v5;
  }
  else {
    uint64_t result = (unint64_t *)((char *)v5 + 1);
  }
  int v12 = v6 & 1;
  int v13 = v3 & 1;
  else {
    uint64_t v5 = v8;
  }
  if (v7 + v12 - 1 >= v4 + v13 - 1)
  {
    unint64_t v4 = v7;
    LOBYTE(v13) = v12;
  }

  *(void *)a3 = v5;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  *(_BYTE *)(a3 + 16) = v13 | v9;
  return result;
}

    uint64_t result = 0LL;
    atomic_store(a2, (unint64_t *)(*(void *)(a1 + 40) + 64LL));
    return result;
  }

  if (v4 <= a2 || ftruncate(**(_DWORD **)(a1 + 56), a2) != -1) {
    goto LABEL_7;
  }
  *(void *)&unint64_t v10 = "int FileLocal::truncate(uint64_t)";
  *((void *)&v10 + 1) = 23LL;
  char v11 = 16;
  sub_100103A94(v12, &v10);
  sub_10000552C(&v13, (uint64_t)"ftruncate failed, errno: ", 25LL);
  char v9 = __error();
  std::ostream::operator<<(&v13, *v9);
  std::ostream::~ostream(&v13, off_100193008);
  sub_1001085DC((uint64_t)v12);
  std::ios::~ios(v14);
  return -*__error();
}

uint64_t *sub_10000D0E4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    unint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      unint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10000D154(v6, a2);
  return v3;
}

uint64_t *sub_10000D154(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }

    do
    {
      int v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0LL;
      uint64_t result = (uint64_t *)v2;
    }

    else
    {
      unint64_t v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + std::iostream::~basic_iostream(v2, v3 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }

    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      char v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        char v16 = v7;
      }

      else
      {
        unint64_t v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + std::iostream::~basic_iostream(v2, v3 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      uint64_t *v24 = v23;
      goto LABEL_72;
    }

    char v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    __int128 v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      __int128 v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    unint64_t v7 = *(uint64_t **)v12;
  }

  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  int v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    __int128 v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    int v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    *int v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_10000D4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = (*(_BYTE *)(a2 + 16) & 1) + *(void *)(a2 + 8) - 1LL;
    do
    {
      unint64_t v6 = *(void *)(v3 + 32);
      if ((*(_BYTE *)(v3 + 48) & 2) == 0) {
        ++v6;
      }
      BOOL v7 = v5 >= v6;
      if (v5 >= v6) {
        int v8 = (uint64_t *)(v3 + 8);
      }
      else {
        int v8 = (uint64_t *)v3;
      }
      if (!v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
  }

  return result;
}

uint64_t sub_10000D520(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D800((uint64_t)a1, (uint64_t)a2);
  uint64_t v7 = v6;
  int v8 = *(uint64_t **)(v6 + 8);
  if (v8)
  {
    do
    {
      uint64_t v9 = v8;
      int v8 = (uint64_t *)*v8;
    }

    while (v8);
  }

  else
  {
    uint64_t v10 = v6;
    do
    {
      uint64_t v9 = *(uint64_t **)(v10 + 16);
      BOOL v11 = *v9 == v10;
      uint64_t v10 = (uint64_t)v9;
    }

    while (!v11);
  }

  uint64_t v12 = *(uint64_t **)(a3 + 8);
  if (v12)
  {
    do
    {
      int v13 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    uint64_t v14 = (uint64_t *)a3;
    do
    {
      int v13 = (uint64_t *)v14[2];
      BOOL v11 = *v13 == (void)v14;
      uint64_t v14 = v13;
    }

    while (!v11);
  }

  __int128 v24 = *(_OWORD *)(v6 + 32);
  uint64_t v25 = *(void *)(v6 + 48);
  sub_10000D658((unint64_t *)&v24, (uint64_t)a2, (uint64_t)&v26);
  __int128 v21 = *(_OWORD *)(a3 + 32);
  uint64_t v22 = *(void *)(a3 + 48);
  sub_10000D72C((uint64_t)&v21, (uint64_t)a2, (uint64_t)v23);
  sub_10000D848(a1, v9, v13);
  __int128 v16 = v26;
  uint64_t v17 = v27;
  sub_10000CFF0((unint64_t *)&v16, a2, (uint64_t)v18);
  sub_10000CFF0(v18, v23, (uint64_t)&v19);
  *(_OWORD *)(v7 + 32) = v19;
  *(_BYTE *)(v7 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v20;
  return v7;
}

unint64_t *sub_10000D658@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)result + 16);
  if (*((_BYTE *)result + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (v5 < *result) {
        goto LABEL_27;
      }
    }

    else
    {
      unint64_t v4 = *result;
      unint64_t v5 = result[1];
      if (*result >= v5) {
        goto LABEL_27;
      }
    }
  }

  else
  {
    unint64_t v4 = *result;
    unint64_t v5 = result[1];
    if (*result >= v5 || *result + 1 >= v5) {
      goto LABEL_27;
    }
  }

  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v9 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v9 || *(void *)a2 + 1LL >= v9) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }

  if (v7 != 3)
  {
    unint64_t v8 = *(void *)a2;
    if (*(void *)a2 < *(void *)(a2 + 8)) {
      goto LABEL_23;
    }
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = result[2];
    return result;
  }

  unint64_t v8 = *(void *)a2;
  if (*(void *)(a2 + 8) < *(void *)a2) {
    goto LABEL_27;
  }
LABEL_23:
  unint64_t v11 = (v3 & 1) + v5 - 1;
  if ((v7 & 2) != 0) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = v8 + 1;
  }
  if (v11 < v12) {
    goto LABEL_27;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v3 & 2 | ((~v7 & 2) != 0);
  return result;
}

uint64_t sub_10000D72C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (v4 < *(void *)a2) {
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v4) {
        goto LABEL_26;
      }
    }
  }

  else
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v4 || *(void *)a2 + 1LL >= v4) {
      goto LABEL_26;
    }
  }

  int v6 = *(unsigned __int8 *)(result + 16);
  if (!*(_BYTE *)(result + 16))
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result >= v7 || *(void *)result + 1LL >= v7) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }

  if (v6 != 3)
  {
    unint64_t v8 = *(void *)result;
    unint64_t v7 = *(void *)(result + 8);
    if (*(void *)result < v7) {
      goto LABEL_23;
    }
LABEL_26:
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(void *)(a3 + 16) = *(void *)(result + 16);
    return result;
  }

  unint64_t v8 = *(void *)result;
  unint64_t v7 = *(void *)(result + 8);
  if (v7 < *(void *)result) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v6 & 2) == 0) {
    ++v8;
  }
  if ((v3 & 1) + v4 - 1 < v8) {
    goto LABEL_26;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v6 & 1 | (2 * ((v3 & 1) == 0));
  return result;
}

uint64_t sub_10000D800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = a1 + 8;
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = *(void *)a2;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
      ++v5;
    }
    do
    {
      unint64_t v6 = (*(_BYTE *)(v3 + 48) & 1) + *(void *)(v3 + 40) - 1LL;
      BOOL v7 = v6 >= v5;
      if (v6 >= v5) {
        unint64_t v8 = (uint64_t *)v3;
      }
      else {
        unint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t result = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
  }

  return result;
}

uint64_t *sub_10000D848(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v6 = sub_10000D0E4(a1, v4);
      operator delete(v4);
      uint64_t v4 = v6;
    }

    while (v6 != a3);
  }

  return a3;
}

const void **sub_10000D8A4(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10000D8D4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171A30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10000D93C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000D950(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10000C9C4((uint64_t **)a1, a2);
  return a1;
}

void sub_10000D984(_Unwind_Exception *a1)
{
}

uint64_t *sub_10000D99C(uint64_t **a1, uint64_t a2)
{
  __int128 v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
    }

    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return (uint64_t *)(a1 + 1);
    }
  }

  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return (uint64_t *)(a1 + 1);
  }

  __int128 v5 = (__int128 *)(a2 + 24);
  uint64_t result = sub_10000E058(a1, a2, (__int128 *)a2);
  if ((v7 & 1) == 0)
  {
    unint64_t v8 = (uint64_t *)sub_10000D800((uint64_t)a1, (uint64_t)&v14);
    unint64_t v9 = (uint64_t **)sub_10000D4D8((uint64_t)a1, (uint64_t)&v14);
    uint64_t v10 = *v9;
    if (*v9)
    {
      do
      {
        unint64_t v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      do
      {
        unint64_t v11 = v9[2];
        BOOL v12 = *v11 == (void)v9;
        unint64_t v9 = (uint64_t **)v11;
      }

      while (v12);
    }

    int v13 = v11;
    __int128 v16 = v8;
    sub_10000DB24(a1, &v14, v5, &v16, &v13);
    return v16;
  }

  return result;
}

BOOL sub_10000DAB8(unsigned __int8 *a1)
{
  BOOL v2 = sub_10000DE5C(a1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_10000DB08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000DB24(uint64_t **a1, __int128 *a2, __int128 *a3, uint64_t **a4, uint64_t **a5)
{
  unint64_t v8 = *a5;
  unint64_t v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      uint64_t v10 = v9;
      unint64_t v9 = (uint64_t *)*v9;
    }

    while (v9);
  }

  else
  {
    unint64_t v11 = *a5;
    do
    {
      uint64_t v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      unint64_t v11 = v10;
    }

    while (!v12);
  }

  int v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }

  else
  {
    __int128 v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        __int128 v14 = (uint64_t *)v14[1];
      }

      while (v14);
    }

    else
    {
      __int128 v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        __int128 v16 = v15;
      }

      while (v12);
    }
  }

  __int128 v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&__int128 v37 = qword_1001A3B40;
  *((void *)&v37 + 1) = qword_1001A3B40;
  char v38 = 2;
  __int128 v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  while (v13 != v10)
  {
    __int128 v37 = *((_OWORD *)v13 + 2);
    char v38 = *((_BYTE *)v13 + 48);
    __int128 v33 = v39;
    uint64_t v34 = v40;
    sub_10000D658((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v28);
    if ((_BYTE)v29)
    {
      if (v29 == 3)
      {
      }

      else if ((unint64_t)v28 < *((void *)&v28 + 1))
      {
        goto LABEL_23;
      }
    }

    else if ((unint64_t)v28 < *((void *)&v28 + 1) && (unint64_t)(v28 + 1) < *((void *)&v28 + 1))
    {
LABEL_23:
      if (*((char *)a3 + 23) < 0)
      {
        sub_10000AD88(&__p, *(void **)a3, *((void *)a3 + 1));
      }

      else
      {
        __int128 __p = *a3;
        uint64_t v31 = *((void *)a3 + 2);
      }

      int v32 = *((_DWORD *)a3 + 6);
      uint64_t v17 = (uint64_t *)sub_10000E204(a1, v15, (uint64_t)&v28, (uint64_t)&v28);
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__p);
      }
      *a4 = v17;
    }

    __int128 v26 = v39;
    uint64_t v27 = v40;
    sub_10000D72C((uint64_t)&v26, (uint64_t)&v37, (uint64_t)&v28);
    __int128 v39 = v28;
    LOBYTE(v40) = v29;
    uint64_t v15 = *a4;
    uint64_t v18 = (uint64_t *)(*a4)[1];
    __int128 v19 = *a4;
    if (v18)
    {
      do
      {
        int v13 = v18;
        uint64_t v18 = (uint64_t *)*v18;
      }

      while (v18);
    }

    else
    {
      do
      {
        int v13 = (uint64_t *)v19[2];
        BOOL v12 = *v13 == (void)v19;
        __int128 v19 = v13;
      }

      while (!v12);
    }

    *a4 = v13;
  }

  __int128 v22 = v39;
  uint64_t v23 = v40;
  sub_10000D72C((uint64_t)&v22, (uint64_t)&v35, (uint64_t)&v24);
  if (!(_BYTE)v25)
  {
    unint64_t v20 = *((void *)&v24 + 1);
    unint64_t v21 = v24 + 1;
    goto LABEL_42;
  }

  if (v25 != 3)
  {
    unint64_t v20 = *((void *)&v24 + 1);
    unint64_t v21 = v24;
LABEL_42:
    if (v21 >= v20) {
      goto LABEL_48;
    }
    goto LABEL_43;
  }

LABEL_43:
  __int128 v28 = v24;
  uint64_t v29 = v25;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10000AD88(&__p, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 __p = *a3;
    uint64_t v31 = *((void *)a3 + 2);
  }

  int v32 = *((_DWORD *)a3 + 6);
  uint64_t v15 = (uint64_t *)sub_10000E204(a1, v15, (uint64_t)&v28, (uint64_t)&v28);
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
LABEL_48:
  *a4 = v15;
}

    unint64_t v9 = 0;
    goto LABEL_24;
  }

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(-[DIEncryptionFrontend diParams](self, "diParams"));
  uint64_t v15 = [v14 hasUnlockedBackend];

  if ((v15 & 1) == 0)
  {
    if (!-[DIEncryptionFrontend allowStoringInKeychain](self, "allowStoringInKeychain")) {
      goto LABEL_3;
    }
    if (-[DIEncryptionUnlocker lookupLegacyKeychainWithXpcHandler:error:]( self,  "lookupLegacyKeychainWithXpcHandler:error:",  v6,  a4))
    {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[DIEncryptionFrontend diParams](self, "diParams"));
      __int128 v26 = [v25 hasUnlockedBackend];

      if ((v26 & 1) == 0) {
        goto LABEL_3;
      }
      goto LABEL_18;
    }

void sub_10000DE3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000DE5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0LL) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0LL;
  }
  unint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    return 0LL;
  }

  if (a1[23])
  {
    for (CFIndex i = a1; *i == *a2; ++i)
    {
      ++a2;
      if (!--v2) {
        return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
      }
    }

    return 0LL;
  }

  return *((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6);
}

void sub_10000DF0C(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1001A3B68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001A3B68))
  {
    xmmword_1001A3B48 = 0uLL;
    dword_1001A3B60 = 0;
    unk_1001A3B58 = 0LL;
    uint64_t v3 = &_mh_execute_header;
    int v4 = 2;
    sub_10000AA80(0LL, &v3, 3LL);
    __cxa_atexit((void (*)(void *))sub_100007960, &xmmword_1001A3B48, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A3B68);
  }

  if (byte_1001A3B5F < 0)
  {
    sub_10000AD88((_BYTE *)a1, (void *)xmmword_1001A3B48, *((unint64_t *)&xmmword_1001A3B48 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_1001A3B48;
    *(void *)(a1 + 16) = unk_1001A3B58;
  }

  *(_DWORD *)(a1 + 24) = dword_1001A3B60;
}

void sub_10000E028(_Unwind_Exception *a1)
{
  if (byte_1001A3B5F < 0) {
    sub_100126164();
  }
  __cxa_guard_abort(&qword_1001A3B68);
  _Unwind_Resume(a1);
}

uint64_t *sub_10000E058(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  int v5 = (uint64_t **)sub_10000CB80((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_10000E0D4((uint64_t)a1, a3, (uint64_t)&v7);
    sub_10000CC04(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

uint64_t sub_10000E0D4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_10000E154((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10000E138(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10000E1B8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E154(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10000AD88((_BYTE *)v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 24);
    *(void *)(v5 + 16) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }

  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *((_DWORD *)a2 + 12);
  return a1;
}

void sub_10000E1B8(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

_OWORD *sub_10000E204(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = sub_10000E2B0(a1, a2, &v11, &v10, a3);
  char v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    char v7 = operator new(0x58uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)(a4 + 24);
    *((void *)v7 + 9) = *(void *)(a4 + 40);
    *(void *)(a4 + 24) = 0LL;
    *(void *)(a4 + 32) = 0LL;
    *(void *)(a4 + 40) = 0LL;
    *((_DWORD *)v7 + 20) = *(_DWORD *)(a4 + 48);
    sub_10000CC04(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_10000E2B0(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  char v5 = *(_BYTE *)(a5 + 16);
  unint64_t v6 = (v5 & 1) + *(void *)(a5 + 8) - 1LL;
  unint64_t v7 = a2[4];
  if ((a2[6] & 2) == 0) {
    ++v7;
  }
  if (v6 < v7)
  {
LABEL_5:
    uint64_t v8 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_23:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v11 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }

      while (v11);
    }

    unint64_t v16 = *(void *)a5;
    if ((*(_BYTE *)(a5 + 16) & 2) == 0) {
      ++v16;
    }
    return sub_10000CB80((uint64_t)a1, a3, a5);
  }

  BOOL v11 = (v5 & 2) == 0;
  unint64_t v12 = *(void *)a5;
  if (v11) {
    ++v12;
  }
  if ((unint64_t)(a2[6] & 1) + a2[5] - 1 < v12)
  {
    uint64_t v13 = a2[1];
    if (v13)
    {
      __int128 v14 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v14;
        __int128 v14 = (uint64_t *)*v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v11 = *a4 == v17;
        uint64_t v17 = (uint64_t *)a4;
      }

      while (!v11);
    }

    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unint64_t v18 = (unint64_t)a4[4];
    if (((_BYTE)a4[6] & 2) == 0) {
      ++v18;
    }
    if (v6 < v18)
    {
LABEL_34:
      if (v13)
      {
        *a3 = (uint64_t *)a4;
      }

      else
      {
        *a3 = a2;
        return a2 + 1;
      }

      return (uint64_t *)a4;
    }

    return sub_10000CB80((uint64_t)a1, a3, a5);
  }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_10000E428(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  __int128 v4 = (unint64_t *)a2;
  if (*(_BYTE *)(a3 + 16))
  {
    if (*(_BYTE *)(a3 + 16) == 3)
    {
      if (*(void *)(a3 + 8) < *(void *)a3) {
        return (uint64_t *)v4;
      }
    }

    else if (*(void *)a3 >= *(void *)(a3 + 8))
    {
      return (uint64_t *)v4;
    }
  }

  else
  {
    unint64_t v6 = *(void *)(a3 + 8);
    if (*(void *)a3 >= v6 || *(void *)a3 + 1LL >= v6) {
      return (uint64_t *)v4;
    }
  }

  __int128 v4 = (unint64_t *)sub_10000E74C(a1, a2, a3, a3);
  unint64_t v9 = (uint64_t **)sub_10000D4D8((uint64_t)a1, a3);
  uint64_t v10 = *v9;
  if (*v9)
  {
    do
    {
      BOOL v11 = v10;
      uint64_t v10 = (uint64_t *)v10[1];
    }

    while (v10);
  }

  else
  {
    do
    {
      BOOL v11 = v9[2];
      BOOL v12 = *v11 == (void)v9;
      unint64_t v9 = (uint64_t **)v11;
    }

    while (v12);
  }

  return sub_10000E5EC(a1, a3, v11);
}

BOOL sub_10000E514(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1) {
        goto LABEL_21;
      }
    }

    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_21;
      }
    }
  }

  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_21;
    }
  }

  if (!*((_BYTE *)a2 + 16))
  {
    unint64_t v7 = a2[1];
    if (*a2 < v7 && *a2 + 1 < v7) {
      goto LABEL_21;
    }
    return 1LL;
  }

  if (*((_BYTE *)a2 + 16) == 3)
  {
    if (a2[1] < *a2) {
      return 1LL;
    }
  }

  else if (*a2 >= a2[1])
  {
    return 1LL;
  }

LABEL_21:
  if ((v2 & 2) != 0) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v4 + 1;
  }
  unint64_t v10 = *a2;
  if ((a2[2] & 2) == 0) {
    ++v10;
  }
  return v10 == v9 && (a2[2] & 1) + a2[1] == (v2 & 1) + v3;
}

uint64_t *sub_10000E5EC(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = a3;
  uint64_t v5 = sub_10000D800((uint64_t)a1, a2);
  unint64_t v16 = (uint64_t *)v5;
  __int128 v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  __int128 v21 = *(_OWORD *)(v5 + 32);
  uint64_t v22 = *(void *)(v5 + 48);
  sub_10000D658((unint64_t *)&v21, (uint64_t)&v13, (uint64_t)&v23);
  if (!v25)
  {
    unint64_t v6 = v24;
    if (v23 >= v24) {
      goto LABEL_17;
    }
    unint64_t v7 = v23 + 1;
    goto LABEL_8;
  }

  if (v25 != 3)
  {
    unint64_t v7 = v23;
    unint64_t v6 = v24;
LABEL_8:
    if (v7 >= v6) {
      goto LABEL_17;
    }
    goto LABEL_9;
  }

  if (v24 < v23) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v8 = v5 + 32;
  if (*a1 == (uint64_t *)v5)
  {
    unint64_t v10 = (uint64_t *)(a1 + 1);
  }

  else
  {
    uint64_t v9 = *(void *)v5;
    if (*(void *)v5)
    {
      do
      {
        unint64_t v10 = (uint64_t *)v9;
        uint64_t v9 = *(void *)(v9 + 8);
      }

      while (v9);
    }

    else
    {
      do
      {
        unint64_t v10 = *(uint64_t **)(v5 + 16);
        BOOL v11 = *v10 == v5;
        uint64_t v5 = (uint64_t)v10;
      }

      while (v11);
    }
  }

  __int128 v17 = *(_OWORD *)v8;
  uint64_t v18 = *(void *)(v8 + 16);
  sub_10000D72C((uint64_t)&v17, (uint64_t)&v23, (uint64_t)&v19);
  *(_OWORD *)uint64_t v8 = v19;
  *(_BYTE *)(v8 + 16) = v20;
  sub_10000E74C(a1, v10, (uint64_t)&v23, (uint64_t)&v23);
LABEL_17:
  sub_10000E7D8(a1, &v13, &v16, &v15);
  sub_10000E960(a1, (uint64_t)&v13, &v16);
  return v16;
}

_OWORD *sub_10000E74C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = sub_10000E2B0(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_10000CC04(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

double sub_10000E7D8(uint64_t **a1, __int128 *a2, uint64_t **a3, uint64_t **a4)
{
  unint64_t v4 = *a3;
  if (*a3 != *a4)
  {
    uint64_t v9 = (uint64_t *)(a1 + 1);
    do
    {
      __int128 v22 = *((_OWORD *)v4 + 2);
      char v23 = *((_BYTE *)v4 + 48);
      __int128 v24 = *a2;
      uint64_t v25 = *((void *)a2 + 2);
      sub_10000D658((unint64_t *)&v24, (uint64_t)(v4 + 4), (uint64_t)&v26);
      if (v27)
      {
        if (v27 == 3)
        {
          goto LABEL_17;
        }

        unint64_t v10 = *((void *)&v26 + 1);
        unint64_t v11 = v26;
      }

      else
      {
        unint64_t v10 = *((void *)&v26 + 1);
        unint64_t v11 = v26 + 1;
      }

      if (v11 < v10)
      {
LABEL_11:
        BOOL v12 = *a3;
        __int128 v13 = v9;
        if (*a1 != *a3)
        {
          uint64_t v14 = (uint64_t *)*v12;
          if (*v12)
          {
            do
            {
              __int128 v13 = v14;
              uint64_t v14 = (uint64_t *)v14[1];
            }

            while (v14);
          }

          else
          {
            do
            {
              __int128 v13 = (uint64_t *)v12[2];
              BOOL v15 = *v13 == (void)v12;
              BOOL v12 = v13;
            }

            while (v15);
          }
        }

        sub_10000E74C(a1, v13, (uint64_t)&v26, (uint64_t)&v26);
      }

LABEL_17:
      unint64_t v16 = *a3;
      __int128 v17 = (uint64_t *)(*a3)[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          __int128 v17 = (uint64_t *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (uint64_t *)v16[2];
          BOOL v15 = *v18 == (void)v16;
          unint64_t v16 = v18;
        }

        while (!v15);
      }

      *a3 = v18;
      __int128 v20 = *a2;
      uint64_t v21 = *((void *)a2 + 2);
      sub_10000D72C((uint64_t)&v20, (uint64_t)&v22, (uint64_t)&v26);
      double result = *(double *)&v26;
      *a2 = v26;
      *((_BYTE *)a2 + 16) = v27;
      unint64_t v4 = *a3;
    }

    while (*a3 != *a4);
  }

  return result;
}

      uint64_t v21 = (void *)v6[1];
      if (v21)
      {
        do
        {
          __int128 v22 = v21;
          uint64_t v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          __int128 v22 = (void *)v6[2];
          char v23 = *v22 == (void)v6;
          unint64_t v6 = v22;
        }

        while (!v23);
      }

      unint64_t v6 = v22;
      if (v22 == v7) {
        goto LABEL_35;
      }
    }
  }

  uint64_t v8 = 0;
LABEL_35:
  unint64_t v30 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 40) + 16LL))(*(void *)(a2 + 40), a3);
  if ((_DWORD)v30)
  {
    *(void *)&uint64_t v34 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v34 + 1) = 1005LL;
    __int128 v35 = 16;
    sub_100022C40(&v36, &v34);
    sub_10000552C(&v39, (uint64_t)"Flush failed. Backend = ", 24LL);
    std::ostream::operator<<(&v39, *(void *)(a2 + 40));
    sub_10000552C(&v39, (uint64_t)" ret = ", 7LL);
    std::ostream::operator<<(&v39, v30);
    std::ios_base::getloc((const std::ios_base *)&v40[*(void *)(v39 - 24) - 8]);
    uint64_t v31 = std::locale::use_facet(&v41, &std::ctype<char>::id);
    int v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10LL);
    std::locale::~locale(&v41);
    std::ostream::put(&v39, v32);
    std::ostream::flush(&v39);
    std::ostream::~ostream(&v39, off_100174C38);
    sub_10002404C((uint64_t)&v36);
    std::ios::~ios(v40);
  }

  if (v8) {
    return v8;
  }
  else {
    return v30;
  }
}

    sub_1000C1AC8(&v42);
  }

  else
  {
    BOOL v15 = 0LL;
    unint64_t v16 = 0;
    __int128 v17 = 0LL;
  }

  sub_10011E8E0(&v43);
  if (v12) {
    double result = 0LL;
  }
  else {
    double result = v17;
  }
  if (!v12 && v16)
  {
    sub_1000C2590(a1, v15);
    return v17;
  }

  return result;
}

          unint64_t v7 = 1000 * v6.__d_.__rep_;
LABEL_18:
          if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 3624), &__lk, v8);
            std::chrono::steady_clock::now();
            goto LABEL_22;
          }
        }

        v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
        goto LABEL_21;
      }

      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }

  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(void **)a4 + 368LL) & 1) != 0) {
    return 1LL;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(_BYTE *)(*(void *)v14 + 344LL)
      && *(void *)(*(void *)v14 + 32LL) == **(void **)(a4 + 16);
}

      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }

  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(void **)a4 + 544LL) & 1) != 0) {
    return 1LL;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(_BYTE *)(*(void *)v14 + 520LL)
      && *(void *)(*(void *)v14 + 32LL) == **(void **)(a4 + 16);
}

      v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
      goto LABEL_18;
    }
  }

  while (std::chrono::steady_clock::now().__d_.__rep_ < *a3);
  if ((*(_DWORD *)(**(void **)a4 + 336LL) & 1) != 0) {
    return 1LL;
  }
  uint64_t v14 = *(void *)(a4 + 8);
  return *(void *)v14
      && !*(_BYTE *)(*(void *)v14 + 312LL)
      && *(void *)(*(void *)v14 + 32LL) == **(void **)(a4 + 16);
}

uint64_t sub_10000E960(uint64_t **a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v6 = *a3;
  if (*a1 == *a3)
  {
    uint64_t v8 = (uint64_t *)(a1 + 1);
  }

  else
  {
    unint64_t v7 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        uint64_t v8 = v7;
        unint64_t v7 = (uint64_t *)v7[1];
      }

      while (v7);
    }

    else
    {
      uint64_t v9 = *a3;
      do
      {
        uint64_t v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        uint64_t v9 = v8;
      }

      while (v10);
    }
  }

  __int128 v42 = *((_OWORD *)v6 + 2);
  uint64_t v43 = v6[6];
  __int128 v37 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  sub_10000D658((unint64_t *)&v37, (uint64_t)&v42, (uint64_t)&v39);
  if (!v41)
  {
    unint64_t v11 = v40;
    if (v39 >= v40) {
      goto LABEL_17;
    }
    unint64_t v12 = v39 + 1;
LABEL_15:
    if (v12 >= v11) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (v41 != 3)
  {
    unint64_t v12 = v39;
    unint64_t v11 = v40;
    goto LABEL_15;
  }

  if (v40 >= v39) {
LABEL_16:
  }
    sub_10000E74C(a1, v8, (uint64_t)&v39, (uint64_t)&v39);
LABEL_17:
  __int128 v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  sub_10000D72C((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v34);
  if (!v36)
  {
    unint64_t v13 = v35;
    if (v34 >= v35) {
      goto LABEL_26;
    }
    unint64_t v14 = v34 + 1;
LABEL_24:
    if (v14 >= v13) {
      goto LABEL_26;
    }
LABEL_25:
    BOOL v15 = *a3;
    unint64_t v16 = &v34;
    __int128 v17 = &v34;
LABEL_35:
    uint64_t result = (uint64_t)sub_10000E74C(a1, v15, (uint64_t)v16, (uint64_t)v17);
    *a3 = (uint64_t *)result;
    return result;
  }

  if (v36 != 3)
  {
    unint64_t v14 = v34;
    unint64_t v13 = v35;
    goto LABEL_24;
  }

  if (v35 >= v34) {
    goto LABEL_25;
  }
LABEL_26:
  __int128 v27 = v42;
  uint64_t v28 = v43;
  uint64_t result = sub_10000D72C((uint64_t)&v27, a2, (uint64_t)&v29);
  if (!v31)
  {
    unint64_t v19 = v30;
    if (v29 >= v30) {
      return result;
    }
    unint64_t v20 = v29 + 1;
LABEL_33:
    if (v20 >= v19) {
      return result;
    }
    goto LABEL_34;
  }

  if (v31 != 3)
  {
    unint64_t v20 = v29;
    unint64_t v19 = v30;
    goto LABEL_33;
  }

  if (v30 >= v29)
  {
LABEL_34:
    uint64_t v21 = *a3;
    __int128 v23 = *((_OWORD *)*a3 + 2);
    uint64_t v24 = v21[6];
    sub_10000D658((unint64_t *)&v23, (uint64_t)&v29, (uint64_t)&v25);
    __int128 v22 = *a3;
    *((_OWORD *)v22 + 2) = v25;
    *((_BYTE *)v22 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v26;
    BOOL v15 = *a3;
    unint64_t v16 = &v29;
    __int128 v17 = &v29;
    goto LABEL_35;
  }

  return result;
}

uint64_t **sub_10000EB88(uint64_t **a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (*(void *)(a2 + 8) < *(void *)a2) {
        return a1;
      }
    }

    else if (*(void *)a2 >= *(void *)(a2 + 8))
    {
      return a1;
    }
  }

  else
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v4 || *(void *)a2 + 1LL >= v4) {
      return a1;
    }
  }

  sub_10000CAF8(a1, a2, a2);
  if ((v6 & 1) == 0)
  {
    unint64_t v7 = (uint64_t **)sub_10000D4D8((uint64_t)a1, a2);
    uint64_t v8 = *v7;
    if (*v7)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t *)v8[1];
      }

      while (v8);
    }

    else
    {
      do
      {
        uint64_t v9 = v7[2];
        BOOL v10 = *v9 == (void)v7;
        unint64_t v7 = (uint64_t **)v9;
      }

      while (v10);
    }

    sub_10000E5EC(a1, a2, v9);
  }

  return a1;
}

uint64_t sub_10000EC48(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171CF8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10000ECB0(_Unwind_Exception *a1)
{
}

uint64_t sub_10000ECC4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100171F18;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10000ED2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000ED40(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172138;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10000EDA8(_Unwind_Exception *a1)
{
}

void *sub_10000EDBC(void *a1, char *a2)
{
  unint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    __int128 v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10000EE48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10000EE5C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172358;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10000EEC4(_Unwind_Exception *a1)
{
}

void *sub_10000EEE0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &off_1001724B0;
  result[1] = v3;
  return result;
}

uint64_t sub_10000EF14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_1001724B0;
  a2[1] = v2;
  return result;
}

__n128 sub_10000EF30@<Q0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, __n128 **a4@<X8>)
{
  unint64_t v7 = *a3;
  std::locale v8 = (__n128 *)operator new(0x48uLL);
  uint64_t v9 = *(unint64_t **)(a1 + 8);
  __n128 result = *(__n128 *)(a2 + 8);
  v8[1] = result;
  v8[2].n128_u64[0] = *(void *)(a2 + 24);
  v8[2].n128_u64[1] = v7;
  v8->n128_u64[0] = (unint64_t)off_1001717F8;
  v8->n128_u64[1] = a2;
  v8[3].n128_u64[0] = (unint64_t)v9;
  v8[3].n128_u64[1] = *v9;
  v8[4].n128_u64[0] = (unint64_t)(v9 + 1);
  *a4 = v8;
  return result;
}

uint64_t sub_10000EF98(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10000EFD4()
{
  return &off_100172510;
}

uint64_t sub_10000EFE0(uint64_t ***a1)
{
  uint64_t result = ***a1;
  if (!*(_BYTE *)(result + 113)) {
    return sub_10000F000(result + 24, *(void *)result);
  }
  return result;
}

uint64_t sub_10000F000(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v7;
  uint64_t v7 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }
  uint64_t v4 = v6;
  uint64_t v6 = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
  }
  return a1;
}

uint64_t sub_10000F0A8(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 89)) {
    sub_10000C920(a1);
  }
  uint64_t result = sub_10000F0EC(a1, a2);
  *(_BYTE *)(a1 + 89) = 1;
  return result;
}

uint64_t sub_10000F0EC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *(void *)uint64_t result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0LL;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  *(void *)(result + 16) = 0LL;
  uint64_t v4 = a2[3];
  *(void *)(result + 16) = a2[2];
  a2[2] = 0LL;
  *(void *)(result + 24) = v4;
  *(void *)(result + 32) = a2[4];
  __int128 v5 = a2 + 5;
  uint64_t v6 = a2[5];
  *(void *)(result + 40) = v6;
  uint64_t v7 = result + 40;
  uint64_t v8 = a2[6];
  *(void *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    a2[4] = (uint64_t)v5;
    *__int128 v5 = 0LL;
    a2[6] = 0LL;
  }

  else
  {
    *(void *)(result + 32) = v7;
  }

  *(void *)(result + 56) = a2[7];
  uint64_t v9 = a2 + 8;
  uint64_t v10 = a2[8];
  *(void *)(result + 64) = v10;
  uint64_t v11 = result + 64;
  uint64_t v12 = a2[9];
  *(void *)(result + 72) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    a2[7] = (uint64_t)v9;
    void *v9 = 0LL;
    a2[9] = 0LL;
  }

  else
  {
    *(void *)(result + 56) = v11;
  }

  uint64_t v13 = a2[10];
  *(_BYTE *)(result + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((_BYTE *)a2 + 88);
  *(void *)(result + 80) = v13;
  return result;
}

uint64_t sub_10000F198(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = 0LL;
  __int128 v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (uint64_t *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 113);
  if (v7)
  {
    sub_10000F0EC(a1 + 24, v6);
    int v4 = *(unsigned __int8 *)(a1 + 8);
    char v7 = 1;
  }

  else
  {
    *__int128 v5 = *(_OWORD *)v6;
  }

  *(_BYTE *)(a1 + 113) = v7;
  if (v4)
  {
    sub_10000F30C(a1 + 120, (__int128 *)(a2 + 120));
    return a1;
  }

  sub_100009A00((uint64_t)v5, *(_DWORD *)(a2 + 12), (uint64_t)v14);
  *(_OWORD *)(a1 + 120) = v14[0];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)((char *)v14 + 9);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  uint64_t v15 = 0LL;
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 160) = v9;
  *(_DWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v17;
  sub_10000C84C(a1 + 176, (uint64_t)v18);
  *(_BYTE *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  uint64_t v10 = v19;
  if (v19 == v18)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  uint64_t v12 = v15;
  uint64_t v15 = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 40LL))(v12);
  }
  return a1;
}

void sub_10000F2F0(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 113)) {
    sub_10000C920(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000F30C(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    __int128 v3 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    *((void *)a2 + 4) = 0LL;
    *(void *)(a1 + 32) = v4;
    uint64_t v5 = *((void *)a2 + 5);
    *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *((_DWORD *)a2 + 12);
    *(void *)(a1 + 40) = v5;
    sub_10000C84C(a1 + 56, (uint64_t)a2 + 56);
    *(_BYTE *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  }

  return a1;
}

uint64_t sub_10000F37C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
}

void sub_10000F3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }
  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"verify failed",  v20);
    __cxa_end_catch();
    JUMPOUT(0x10000F7C8LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10000F90C(uint64_t a1)
{
  __int128 v3 = (void **)(a1 + 24);
  sub_10000F974(&v3);
  return a1;
}

void sub_10000F974(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (dispatch_object_s **)**a1;
  if (v2)
  {
    uint64_t v4 = (dispatch_object_s **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_100101848(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_10000FA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000FE44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }
  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(exception_object),  @"user data embedding failed",  v12);
    __cxa_end_catch();
    JUMPOUT(0x10000FE08LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100010398( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14)
{
  sub_10000D8A4(&a13);
  uint64_t v20 = a14;
  a14 = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 16LL))(v20);
  }
  if (a2 == 1)
  {
    +[DIError failWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "failWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"user data retrieving failed",  v14);
    __cxa_end_catch();
    JUMPOUT(0x10001035CLL);
  }

  _Unwind_Resume(a1);
}

void sub_100010598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001061C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000107C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_150:
        v117 = (std::__shared_weak_count *)*((void *)&v297 + 1);
        if (*((void *)&v297 + 1))
        {
          v118 = (unint64_t *)(*((void *)&v297 + 1) + 8LL);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }

        v120 = (void *)v55[1];
        if (v120)
        {
          do
          {
            v121 = v120;
            v120 = (void *)*v120;
          }

          while (v120);
        }

        else
        {
          do
          {
            v121 = (void *)v55[2];
            v93 = *v121 == (void)v55;
            std::locale v55 = v121;
          }

          while (!v93);
        }

        std::locale v55 = v121;
        if (v121 == v261) {
          goto LABEL_164;
        }
      }

      do
      {
        v74 = (uint64_t **)v85;
        v85 = (uint64_t *)v85[1];
      }

      while (v85);
LABEL_95:
      v88 = v74;
      do
      {
        v89 = v88;
        v88 = (uint64_t **)v88[2];
      }

      while (*v88 != (uint64_t *)v89);
      goto LABEL_97;
    }

LABEL_164:
    v122 = v260;
    if (sub_1000BE308())
    {
      *(void *)&v295 = "DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::UDIFWritable(const MediaInfo::logical_disk_entities_map &, std::shared_ptr<Backend>, Checksum &&, uint64_t, const boost::uuids::uuid &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
      *((void *)&v295 + 1) = 156LL;
      LODWORD(v296) = 2;
      sub_100026DE0(v378, &v295);
      v123 = (uint64_t *)v328;
      if (v328 != &v329)
      {
        do
        {
          if ((v123[6] & 2) != 0) {
            v124 = v123[4];
          }
          else {
            v124 = v123[4] + 1;
          }
          v125 = (void *)std::ostream::operator<<(&v390, v124);
          v126 = sub_10000552C(v125, (uint64_t)" - ", 3LL);
          v127 = (void *)std::ostream::operator<<(v126, (v123[6] & 1) + v123[5] - 1);
          v128 = sub_10000552C(v127, (uint64_t)" -> ", 4LL);
          v129 = sub_100027270(v128, v123[7]);
          std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(void *)(*v129 - 24LL)));
          v130 = std::locale::use_facet(v266, &std::ctype<char>::id);
          v131 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10LL);
          std::locale::~locale(v266);
          std::ostream::put(v129, v131);
          std::ostream::flush(v129);
          v132 = (uint64_t *)v123[1];
          if (v132)
          {
            do
            {
              v133 = (uint64_t **)v132;
              v132 = (uint64_t *)*v132;
            }

            while (v132);
          }

          else
          {
            do
            {
              v133 = (uint64_t **)v123[2];
              v93 = *v133 == v123;
              v123 = (uint64_t *)v133;
            }

            while (!v93);
          }

          v123 = (uint64_t *)v133;
        }

        while (v133 != &v329);
      }

      std::ostream::~ostream(&v390, off_1001752F8);
      sub_1000274A8((uint64_t)v378);
      std::ios::~ios(v391);
      v122 = v260;
    }

    v134 = (void *)(v258 + 32);
    if (sub_1000BE308())
    {
      *(void *)&v295 = "DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::UDIFWritable(const MediaInfo::logical_disk_entities_map &, std::shared_ptr<Backend>, Checksum &&, uint64_t, const boost::uuids::uuid &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
      *((void *)&v295 + 1) = 156LL;
      LODWORD(v296) = 2;
      sub_100026EC8(v378, &v295);
      v135 = sub_10000D800((uint64_t)&v328, *v134 + 32LL);
      sub_100027270(&v390, *(void *)(v135 + 56));
      std::ostream::~ostream(&v390, off_100175518);
      sub_100027AE0((uint64_t)v378);
      std::ios::~ios(v391);
    }

    atomic_store(0LL, &v331);
    sub_100020B9C((int *)v378, 1);
    sub_1000F6058((uint64_t)v298, v378, 0LL);
    v136 = (std::__shared_weak_count *)*((void *)&v278 + 1);
    if (*((void *)&v278 + 1))
    {
      v137 = (unint64_t *)(*((void *)&v278 + 1) + 8LL);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }

    v139 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v122, "convertParams"));
    v140 = (size_t)[v139 maxRawUDIFRunSize];

    if (v140)
    {
      if (!(v140 >> 20))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        void *exception = &off_100196FC8;
        v248 = std::generic_category();
        exception[1] = 22LL;
        exception[2] = v248;
        *((_BYTE *)exception + 24) = 0;
        *((_BYTE *)exception + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        exception[7] = "Raw run size limit cannot be smaller than compressed run size limit";
      }

      v336 = 0;
    }

    *(void *)&v382 = 0LL;
    *((void *)&v381 + 1) = 0LL;
    *(_OWORD *)&v378[8] = 0u;
    v379 = 0u;
    memset(v380, 0, 28);
    *(void *)v378 = 850045863LL;
    *(void *)&v381 = (char *)&v381 + 8;
    sub_1000EA2B8((uint64_t)&v382 + 8, v276);
    sub_1000EA2B8((uint64_t)v385, v276);
    sub_1000EA2B8((uint64_t)v388, v274);
    v389 = 0;
    if (!sub_1000EA308((uint64_t)&v382 + 8, (uint64_t)v388))
    {
      v141 = v383;
      if ((v384 & 2) == 0) {
        v141 = v383 + 1;
      }
      v388[7] = v141;
    }

    v142 = (void *)*v134;
    if ((void *)*v134 == v261)
    {
      v145 = qword_1001A3B40 + 1;
    }

    else
    {
      v143 = *((_BYTE *)v142 + 48);
      v144 = v142[4];
      if ((v143 & 2) != 0) {
        v145 = v144;
      }
      else {
        v145 = v144 + 1;
      }
    }

    v146 = sub_100014BF0(v134);
    *(void *)&v295 = v145;
    *((void *)&v295 + 1) = v146 + 1;
    LOBYTE(v296) = 2;
    v147 = (unint64_t *)operator new(0x140uLL);
    v147[1] = 0LL;
    v148 = v147 + 1;
    v147[2] = 0LL;
    *v147 = (unint64_t)off_100174D88;
    sub_100024644((uint64_t)(v147 + 3), (uint64_t *)&v338, (uint64_t)&v295);
    v266[0].__locale_ = (std::locale::__imp *)(v147 + 3);
    v266[1].__locale_ = (std::locale::__imp *)v147;
    v149 = (char *)operator new(0x4C8uLL);
    v150 = (uint64_t)v149;
    v149[8] = 0;
    *(void *)v149 = &off_1001726B8;
    v151 = v277;
    *((void *)v149 + 6) = v277;
    v262 = v149 + 48;
    *((void *)v149 + 7) = *((void *)&v151 + 1);
    if (*((void *)&v151 + 1))
    {
      v152 = (unint64_t *)(*((void *)&v151 + 1) + 8LL);
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
    }

    v263 = v149 + 64;
    sub_100019B24((uint64_t)(v149 + 64), (uint64_t)v298);
    *(void *)(v150 + 64) = off_1001729A8;
    *(void *)(v150 + 360) = v304;
    sub_100019E78(v150 + 368, (uint64_t)&v305);
    *(_BYTE *)(v150 + 64std::iostream::~basic_iostream(v2, v3 + 8) = v326;
    *(void *)(v150 + 656) = v150 + 360;
    *(void *)(v150 + 664) = v328;
    v154 = v150 + 672;
    v155 = v329;
    *(void *)(v150 + 672) = v329;
    v156 = v330;
    *(void *)(v150 + 680) = v330;
    if (v156)
    {
      v155[2] = v154;
      v328 = &v329;
      v329 = 0LL;
      v330 = 0LL;
    }

    else
    {
      *(void *)(v150 + 664) = v154;
    }

    *(void *)(v150 + 68std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
    *(void *)(v150 + 696) = v332;
    v157 = v150 + 704;
    v158 = v333;
    *(void *)(v150 + 704) = v333;
    v159 = v334;
    *(void *)(v150 + 712) = v334;
    if (v159)
    {
      v158[2] = v157;
      v332 = &v333;
      v333 = 0LL;
      v334 = 0LL;
    }

    else
    {
      *(void *)(v150 + 696) = v157;
    }

    sub_100019F4C((_DWORD *)(v150 + 720));
    *(_DWORD *)(v150 + 724) = 0;
    *(_BYTE *)(v150 + 856) = v336;
    *(_OWORD *)(v150 + 857) = v337;
    if (v299)
    {
      v160 = 2 * v300;
      *(void *)(v150 + 16) = v300;
      *(void *)(v150 + 24) = 1LL;
      *(void *)(v150 + 32) = v160;
      *(void *)(v150 + 40) = 0LL;
    }

    else
    {
      *(_OWORD *)(v150 + 16) = 0u;
      *(_OWORD *)(v150 + 32) = 0u;
    }

    *(void *)v150 = off_1001725A0;
    *(void *)(v150 + 880) = 0LL;
    *(void *)(v150 + 88std::iostream::~basic_iostream(v2, v3 + 8) = v147 + 3;
    *(void *)(v150 + 896) = v147;
    do
      v161 = __ldxr(v148);
    while (__stxr(v161 + 1, v148));
    v162 = *(_DWORD *)&v380[24];
    *(void *)(v150 + 904) = 850045863LL;
    *(_OWORD *)(v150 + 912) = 0u;
    *(_OWORD *)(v150 + 92std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
    *(_OWORD *)(v150 + 944) = 0u;
    *(void *)(v150 + 960) = 0LL;
    *(_DWORD *)(v150 + 96std::iostream::~basic_iostream(v2, v3 + 8) = v162;
    *(void *)(v150 + 992) = 0LL;
    *(void *)(v150 + 984) = 0LL;
    *(void *)(v150 + 976) = v150 + 984;
    sub_1000EA2B8(v150 + 1000, v385);
    sub_1000EA2B8(v150 + 1056, v385);
    sub_1000EA2B8(v150 + 1112, v388);
    *(_BYTE *)(v150 + 1176) = 0;
    if (!sub_1000EA308(v150 + 1000, v150 + 1112))
    {
      v163 = *(void *)(v150 + 1008);
      if ((*(_BYTE *)(v150 + 1024) & 2) == 0) {
        ++v163;
      }
      *(void *)(v150 + 116std::iostream::~basic_iostream(v2, v3 + 8) = v163;
    }

    sub_10001ABD4((_DWORD *)(v150 + 1184));
    *(_BYTE *)(v150 + 1216) = 0;
    *(_OWORD *)(v150 + 1200) = 0u;
    sub_10001365C(cf, 2LL);
    sub_10001347C(v150, cf, 0LL);
    do
      v164 = __ldaxr(v148);
    while (__stlxr(v164 - 1, v148));
    if (!v164)
    {
      (*(void (**)(unint64_t *))(*v147 + 16))(v147);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v147);
    }

    sub_100013408((uint64_t)v378);
    v165 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
    v166 = [v165 outputFormat] == (id)2;

    if (v166)
    {
      if (v140)
      {
        sub_10001365C(&v271, 2LL);
        sub_10001347C(v150, &v271, v140);
      }
    }

    else
    {
      v167 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
      sub_10001365C(&v272, (uint64_t)[v167 outputFormat]);
      sub_10001347C(v150, &v272, 0x100000uLL);
    }

    sub_10001321C((uint64_t)&v361, (uint64_t)v270);
    sub_1000132BC((uint64_t)&v361, (uint64_t)v269);
    sub_1000EA87C(v270, (uint64_t)v269, *v257, v150);
    v168 = v269[0];
    v269[0] = 0LL;
    if (v168) {
      (*(void (**)(uint64_t))(*(void *)v168 + 24LL))(v168);
    }
    v169 = v270[0];
    v270[0] = 0LL;
    if (v169) {
      (*(void (**)(uint64_t))(*(void *)v169 + 24LL))(v169);
    }
    v170 = *v257;
    if (*v257
    {
      sub_1000F7C10((uint64_t)v171 + 64, (uint64_t)v378);
      sub_100013734(v150, (uint64_t *)v378, v380);
      if (v380[24]) {
        sub_10000D8A4((const void **)&v380[16]);
      }
      v172 = *(std::__shared_weak_count **)&v380[8];
      if (*(void *)&v380[8])
      {
        v173 = (unint64_t *)(*(void *)&v380[8] + 8LL);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }

      if ((_BYTE)v379) {
        sub_10000D8A4((const void **)&v378[16]);
      }
      v175 = *(std::__shared_weak_count **)&v378[8];
      if (*(void *)&v378[8])
      {
        v176 = (unint64_t *)(*(void *)&v378[8] + 8LL);
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
    }

    else
    {
      (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v170 + 104LL))(cf, v170);
      CFDictionaryRef theDict = (CFDictionaryRef)cf[0];
      if (cf[0]) {
        CFRetain(cf[0]);
      }
      crc32(0LL, 0LL, 0);
      sub_100028158((uint64_t)v378, *(_DWORD **)(v150 + 888));
      *(void *)(v150 + 720) = *(void *)v378;
      *(_OWORD *)(v150 + 792) = v381;
      *(_OWORD *)(v150 + 80std::iostream::~basic_iostream(v2, v3 + 8) = v382;
      *(_OWORD *)(v150 + 824) = v383;
      *(_OWORD *)(v150 + 840) = v384;
      *(_OWORD *)(v150 + 72std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)&v378[8];
      *(_OWORD *)(v150 + 744) = v379;
      *(_OWORD *)(v150 + 760) = *(_OWORD *)v380;
      *(_OWORD *)(v150 + 776) = *(_OWORD *)&v380[16];
      LOBYTE(v379) = 0;
      *((void *)&v379 + 1) = 0LL;
      memset(v378, 0, 17);
      LOBYTE(v297) = 0;
      *((void *)&v297 + 1) = 0LL;
      v295 = 0uLL;
      LOBYTE(v296) = 0;
      sub_1000283B4((uint64_t)v263, (uint64_t *)v378, &v295, &v266[0].__locale_);
      if ((_BYTE)v297) {
        sub_10000D8A4((const void **)&v296);
      }
      v178 = (std::__shared_weak_count *)*((void *)&v295 + 1);
      if (*((void *)&v295 + 1))
      {
        v179 = (unint64_t *)(*((void *)&v295 + 1) + 8LL);
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }

      if ((_BYTE)v379) {
        sub_10000D8A4((const void **)&v378[16]);
      }
      v181 = *(std::__shared_weak_count **)&v378[8];
      if (*(void *)&v378[8])
      {
        v182 = (unint64_t *)(*(void *)&v378[8] + 8LL);
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }

      MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v266[0].__locale_);
      *(void *)v378 = MutableCopy;
      if (!MutableCopy)
      {
        v249 = __cxa_allocate_exception(0x40uLL);
        *v249 = &off_100196FC8;
        v250 = std::generic_category();
        v249[1] = 22LL;
        v249[2] = v250;
        *((_BYTE *)v249 + 24) = 0;
        *((_BYTE *)v249 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        v249[7] = "Failed creating CFAutoRelease instance.";
      }

      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_10009BB88, MutableCopy);
      *(void *)&v295 = *(void *)v378;
      *(void *)v378 = 0LL;
      v185 = sub_10002824C(v263, (void **)&v295);
      sub_10000D8A4((const void **)&v295);
      v186 = (*(uint64_t (**)(void, unint64_t))(*(void *)*v262 + 56LL))(*v262, v185);
      if (v186)
      {
        v251 = __cxa_allocate_exception(0x40uLL);
        *v251 = &off_100196FC8;
        v252 = std::generic_category();
        v251[1] = v186;
        v251[2] = v252;
        *((_BYTE *)v251 + 24) = 0;
        *((_BYTE *)v251 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
        v251[7] = "UDIFDiskImage: failed truncating image";
      }

      sub_100006B34((const void **)v378);
      sub_10000D8A4((const void **)&v266[0].__locale_);
      sub_10000D8A4((const void **)&theDict);
      sub_10000D8A4(cf);
    }

    *v259 = v150;
    *(void *)&v298[0] = off_1001729A8;
    sub_10000A494((uint64_t)&v332, v333);
    sub_10001A1BC(v329);
    sub_100024B00((uint64_t)&v305);
    *(void *)&v298[0] = off_100172A00;
    std::condition_variable::~condition_variable(&v303);
    std::condition_variable::~condition_variable(&v302);
    std::mutex::~mutex(&v301);
    sub_100019D3C((uint64_t)v298);
    sub_100024B00((uint64_t)&v338 + 8);
    sub_100024B00((uint64_t)&v341);
    v187 = v274[0];
    v274[0] = 0LL;
    if (v187) {
      (*(void (**)(uint64_t))(*(void *)v187 + 24LL))(v187);
    }
    v188 = v276[0];
    v276[0] = 0LL;
    if (v188) {
      (*(void (**)(uint64_t *))(*v188 + 24))(v188);
    }
    v189 = v367;
    if (v367 == v366)
    {
      v190 = 4LL;
      v189 = v366;
    }

    else
    {
      if (!v367) {
        goto LABEL_269;
      }
      v190 = 5LL;
    }

    (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_269:
    v191 = v365;
    v365 = 0LL;
    if (v191) {
      v191 = (*(uint64_t (**)(uint64_t))(*(void *)v191 + 40LL))(v191);
    }
    if (!v374) {
      goto LABEL_279;
    }
    v192 = v373;
    if (v373 == v372)
    {
      v193 = 4LL;
      v192 = v372;
    }

    else
    {
      if (!v373) {
        goto LABEL_277;
      }
      v193 = 5LL;
    }

    (*(void (**)(void))(*v192 + 8 * v193))();
LABEL_277:
    v191 = v371;
    v371 = 0LL;
    if (v191) {
      v191 = (*(uint64_t (**)(uint64_t))(*(void *)v191 + 40LL))(v191);
    }
LABEL_279:
    if (v370[89]) {
      v191 = sub_10000C920((uint64_t)v370);
    }
    if (v376) {
      v191 = sub_100024B70((uint64_t)v375);
    }
    v194 = (std::__shared_weak_count *)*((void *)&v277 + 1);
    if (*((void *)&v277 + 1))
    {
      v195 = (unint64_t *)(*((void *)&v277 + 1) + 8LL);
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }

    return (unique_ptr<DiskImage, std::default_delete<DiskImage>>)v191;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
  else {
    uint64_t v15 = 0;
  }
  sub_10000A1B0(*(void *)a3, v15, 7, (uint64_t)v298);

  sub_1000131AC((uint64_t)v298, (uint64_t)"Could not get mapping information", (uint64_t)v378);
  uint64_t v16 = (uint64_t *)sub_10000A304((uint64_t)v378);
  sub_1000147D8((uint64_t)&v340, v16);
  int v17 = (*(uint64_t (**)(void))(**(void **)a3 + 32LL))(*(void *)a3);
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)a3 + 24LL))(*(void *)a3);
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
  uint64_t v20 = v18 * v17;
  if ([v19 outputFormat] == (id)1)
  {

LABEL_15:
    *(void *)&v375[0] = 0LL;
    DWORD2(v375[0]) = 0;
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
    char v26 = [v25 outputFormat] == (id)1;

    if (v26)
    {
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager outputParams](v260, "outputParams"));
      uint64_t v28 = v27;
      if (v27) {
        [v27 backend];
      }
      else {
        v338 = 0uLL;
      }
      v197 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
      v198 = [v197 rawBlockSize];
      v199 = (__int128 *)operator new(0x28uLL);
      sub_100024BAC((uint64_t)v199, &v338, (unint64_t)v198);
      v368 = v199;
      sub_10002B044((uint64_t)v375, (uint64_t *)&v368);
      v200 = (uint64_t)v368;
      v368 = 0LL;
      if (v200) {
        (*(void (**)(uint64_t))(*(void *)v200 + 16LL))(v200);
      }

      v201 = (std::__shared_weak_count *)*((void *)&v338 + 1);
      if (*((void *)&v338 + 1))
      {
        v202 = (unint64_t *)(*((void *)&v338 + 1) + 8LL);
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }

      char v31 = v260;
    }

    else
    {
      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
      unint64_t v30 = [v29 outputFormat] == (id)8;

      char v31 = v260;
      if (v30)
      {
        v276[0] = 0LL;
        __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
        uint64_t v33 = [v32 conversionMethod] == (id)2;

        if (v33)
        {
          unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager outputParams](v260, "outputParams"));
          unint64_t v35 = v34;
          if (v34)
          {
            [v34 backend];
          }

          else
          {
            v369 = 0LL;
            v368 = 0LL;
          }

          sub_1000D01A8(&v338, v368);
          v221 = (uint64_t *)operator new(0xFF0uLL);
          v222 = sub_1000D36E0((uint64_t)v368, (uint64_t)&v338);
          sub_1000D2F8C(v221, &v368, &v338, v222, v223, &unk_100143460);
          v276[0] = v221;
          sub_1000D4084(v221);
          v224 = v369;
          if (v369)
          {
            p_shared_owners = (unint64_t *)&v369->__shared_owners_;
            do
              v226 = __ldaxr(p_shared_owners);
            while (__stlxr(v226 - 1, p_shared_owners));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
        }

        else
        {
          v361 = 1;
          v362 = 0;
          v363 = 0LL;
          v364 = 0;
          v214 = *(void *)a3;
          if (*(void *)a3)
          {
            if (v215) {
              HIBYTE(v361) = v215[185];
            }
          }

          v216 = (*(uint64_t (**)(unint64_t))(*(void *)v214 + 24LL))(v214);
          v217 = (*(uint64_t (**)(void))(**(void **)a3 + 32LL))(*(void *)a3);
          v218 = (*(uint64_t (**)(void))(**(void **)a3 + 24LL))(*(void *)a3);
          v219 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager outputParams](v260, "outputParams"));
          v220 = v219;
          if (v219)
          {
            [v219 backend];
          }

          else
          {
            v369 = 0LL;
            v368 = 0LL;
          }

          v227 = (uint64_t *)operator new(0xFF0uLL);
          LOBYTE(v33std::iostream::~basic_iostream(v2, v3 + 8) = 0;
          LOBYTE(v339) = 0;
          sub_1000D36D4( (uint64_t)v227,  v216,  0x100000u,  v217,  0x10000000000000LL / v218,  (uint64_t *)&v368,  (uint64_t *)&v361,  &v377,  &v338);
          v276[0] = v227;
          v228 = v369;
          if (v369)
          {
            v229 = (unint64_t *)&v369->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }

          v231 = *(const void **)a3;
          if (*(void *)a3)
          {
            if (v232)
            {
              *(void *)&v338 = sub_1000D4054(v232);
              *((void *)&v338 + 1) = v233;
              sub_1000D4038(v276[0], (uint64_t)&v338);
            }

            else
            {
              if (v234)
              {
                *(void *)&v338 = sub_100066B70((uint64_t)v234);
                *((void *)&v338 + 1) = v235;
                sub_1000D4038(v276[0], (uint64_t)&v338);
              }
            }
          }
        }

        char v31 = v260;
        sub_10002B0A8((uint64_t)v375, (uint64_t *)v276);
        v236 = v276[0];
        v276[0] = 0LL;
        if (v236) {
          (*(void (**)(uint64_t *))(*v236 + 16))(v236);
        }
      }
    }

    *(void *)&v338 = a3;
    *((void *)&v338 + 1) = &v340;
    v339 = v20;
    if (DWORD2(v375[0]) == -1) {
      sub_100026264();
    }
    v368 = &v338;
    ((void (*)(__int128 **, _OWORD *))off_100174F38[DWORD2(v375[0])])(&v368, v375);
    v237 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v31, "convertParams"));
    if ([v237 outputFormat] == (id)8)
    {
      v238 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v31, "convertParams"));
      v239 = [v238 conversionMethod] == (id)2;

      if (v239)
      {
        if (*(void *)a3)
        {
          if (v240)
          {
            v241 = *v259;
            *(void *)&v338 = sub_100066B7C((uint64_t)v240);
            *((void *)&v338 + 1) = v242;
            sub_1000D406C(v241, &v338);
          }
        }
      }
    }

    else
    {
    }

    sub_1000264F4((uint64_t)v375);
    goto LABEL_340;
  }

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
  uint64_t v24 = [v23 outputFormat] == (id)8;

  if (v24) {
    goto LABEL_15;
  }
  char v36 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
  __int128 v37 = [v36 outputFormat] == (id)7;

  if (!v37)
  {
    v253 = __cxa_allocate_exception(0x40uLL);
    *v253 = &off_100196FC8;
    v254 = std::generic_category();
    v253[1] = 45LL;
    v253[2] = v254;
    *((_BYTE *)v253 + 24) = 0;
    *((_BYTE *)v253 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v253[7] = "Destination image format is unknown";
  }

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager outputParams](v260, "outputParams"));
  unint64_t v39 = v38;
  if (v38)
  {
    [v38 backend];
    unint64_t v40 = v375[0];
  }

  else
  {
    unint64_t v40 = 0uLL;
  }

  v338 = v40;
  v375[0] = 0uLL;

  v204 = (*(uint64_t (**)(void, uint64_t))(*(void *)v338 + 56LL))(v338, v20);
  if (v204)
  {
    v255 = __cxa_allocate_exception(0x40uLL);
    *v255 = &off_100196FC8;
    v256 = std::generic_category();
    v255[1] = v204;
    v255[2] = v256;
    *((_BYTE *)v255 + 24) = 0;
    *((_BYTE *)v255 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    v255[7] = "failed to set the bundle's size";
  }

  v205 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](v260, "convertParams"));
  v206 = [v205 rawBlockSize];
  v207 = operator new(0x2E0uLL);
  sub_1000A0CDC(v207, &v338, v206);

  sub_10001321C((uint64_t)&v340, (uint64_t)v265);
  sub_1000132BC((uint64_t)&v340, (uint64_t)v264);
  sub_1000EA87C(v265, (uint64_t)v264, *(void *)a3, (uint64_t)v207);
  v208 = v264[0];
  v264[0] = 0LL;
  if (v208) {
    (*(void (**)(uint64_t))(*(void *)v208 + 24LL))(v208);
  }
  v209 = v265[0];
  v265[0] = 0LL;
  if (v209) {
    (*(void (**)(uint64_t))(*(void *)v209 + 24LL))(v209);
  }
  v210 = v338;
  *(_OWORD *)(v338 + 136) = v377;
  sub_1000721C8(v210);
  *v259 = (uint64_t)v207;
  v211 = (std::__shared_weak_count *)*((void *)&v338 + 1);
  if (*((void *)&v338 + 1))
  {
    v212 = (unint64_t *)(*((void *)&v338 + 1) + 8LL);
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }

LABEL_340:
  v243 = v344;
  if (v344 == (uint64_t *)v343)
  {
    v244 = 4LL;
    v243 = (uint64_t *)v343;
  }

  else
  {
    if (!v344) {
      goto LABEL_345;
    }
    v244 = 5LL;
  }

  (*(void (**)(void))(*v243 + 8 * v244))();
LABEL_345:
  v191 = v342;
  v342 = 0LL;
  if (v191) {
    v191 = (*(uint64_t (**)(uint64_t))(*(void *)v191 + 40LL))(v191);
  }
  if (!LOBYTE(v388[0])) {
    goto LABEL_355;
  }
  v245 = v387;
  if (v387 == v386)
  {
    v246 = 4LL;
    v245 = v386;
  }

  else
  {
    if (!v387) {
      goto LABEL_353;
    }
    v246 = 5LL;
  }

  (*(void (**)(void))(*v245 + 8 * v246))();
LABEL_353:
  v191 = v385[0];
  v385[0] = 0LL;
  if (v191) {
    v191 = (*(uint64_t (**)(uint64_t))(*(void *)v191 + 40LL))(v191);
  }
LABEL_355:
  if (BYTE9(v383)) {
    v191 = sub_10000C920((uint64_t)&v379);
  }
  if (v302.__cv_.__opaque[16]) {
    return (unique_ptr<DiskImage, std::default_delete<DiskImage>>)sub_100024B70((uint64_t)v298);
  }
  return (unique_ptr<DiskImage, std::default_delete<DiskImage>>)v191;
}

void sub_10001285C()
{
  unint64_t v0 = STACK[0x218];
  STACK[0x218] = 0LL;
  if (v0) {
    (*(void (**)(unint64_t))(*(void *)v0 + 16LL))(v0);
  }
  JUMPOUT(0x100012E2CLL);
}

void sub_100012D5C()
{
}

void sub_100012DE4()
{
}

void sub_100012E0C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000052FC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100012E1C()
{
  JUMPOUT(0x100012F34LL);
}

void sub_100012E28(_Unwind_Exception *a1)
{
  uint64_t v2 = (unint64_t *)STACK[0x7E8];
  if ((unint64_t *)STACK[0x7E8] == &STACK[0x7D0])
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = &STACK[0x7D0];
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  unint64_t v4 = STACK[0x7B8];
  STACK[0x7B8] = 0LL;
  if (v4) {
    (*(void (**)(unint64_t))(*(void *)v4 + 40LL))(v4);
  }
  sub_100013980((uint64_t)&STACK[0xAF0]);
  if (LOBYTE(STACK[0x418])) {
    sub_100024B70((uint64_t)&STACK[0x340]);
  }
  _Unwind_Resume(a1);
}

void sub_100012E44()
{
}

void sub_100012E4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0xB10]) {
    sub_1001261D0(STACK[0xB10]);
  }
  CFTypeID v63 = (std::__shared_weak_count *)STACK[0x330];
  if (STACK[0x330])
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      unint64_t v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  sub_10000A494(a15, (void *)STACK[0x5C0]);
  sub_10001A1BC((void *)STACK[0x5A0]);
  sub_100024B00(a16);
  STACK[0x340] = (unint64_t)off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x430]);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x400]);
  std::mutex::~mutex((std::mutex *)&STACK[0x3C0]);
  sub_100019D3C((uint64_t)&STACK[0x340]);
  sub_100006224((uint64_t)&STACK[0x268]);
  sub_100024B00((uint64_t)&STACK[0x678]);
  sub_100024B00((uint64_t)&STACK[0x7A0]);
  if (a63) {
    (*(void (**)(uint64_t))(*(void *)a63 + 24LL))(a63);
  }
  unint64_t v66 = STACK[0x218];
  STACK[0x218] = 0LL;
  if (v66) {
    (*(void (**)(unint64_t))(*(void *)v66 + 24LL))(v66);
  }
  int v67 = (unint64_t *)STACK[0x910];
  if ((unint64_t *)STACK[0x910] == &STACK[0x8F8])
  {
    uint64_t v68 = 4LL;
    int v67 = &STACK[0x8F8];
  }

  else
  {
    if (!v67) {
      goto LABEL_17;
    }
    uint64_t v68 = 5LL;
  }

  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_17:
  unint64_t v69 = STACK[0x8E0];
  STACK[0x8E0] = 0LL;
  if (v69) {
    (*(void (**)(unint64_t))(*(void *)v69 + 40LL))(v69);
  }
  sub_100013980((uint64_t)&STACK[0x918]);
  if (LOBYTE(STACK[0xAC8])) {
    sub_100024B70((uint64_t)&STACK[0x9F0]);
  }
  sub_100006224((uint64_t)&STACK[0x250]);
  JUMPOUT(0x1000131A4LL);
}

void sub_100012E60()
{
}

void sub_100012F04()
{
}

void sub_100012F14()
{
}

void sub_100012F1C()
{
}

void sub_100012F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012FD0()
{
}

void sub_10001300C()
{
}

void sub_100013014( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0xB10]) {
    sub_1001261D0(STACK[0xB10]);
  }
  CFTypeID v63 = (std::__shared_weak_count *)STACK[0x330];
  if (STACK[0x330])
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      unint64_t v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  sub_10000A494(a15, (void *)STACK[0x5C0]);
  sub_10001A1BC((void *)STACK[0x5A0]);
  sub_100024B00(a16);
  STACK[0x340] = (unint64_t)off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x430]);
  std::condition_variable::~condition_variable((std::condition_variable *)&STACK[0x400]);
  std::mutex::~mutex((std::mutex *)&STACK[0x3C0]);
  sub_100019D3C((uint64_t)&STACK[0x340]);
  sub_100006224((uint64_t)&STACK[0x268]);
  sub_100024B00((uint64_t)&STACK[0x678]);
  sub_100024B00((uint64_t)&STACK[0x7A0]);
  if (a63) {
    (*(void (**)(uint64_t))(*(void *)a63 + 24LL))(a63);
  }
  unint64_t v66 = STACK[0x218];
  STACK[0x218] = 0LL;
  if (v66) {
    (*(void (**)(unint64_t))(*(void *)v66 + 24LL))(v66);
  }
  int v67 = (unint64_t *)STACK[0x910];
  if ((unint64_t *)STACK[0x910] == &STACK[0x8F8])
  {
    uint64_t v68 = 4LL;
    int v67 = &STACK[0x8F8];
  }

  else
  {
    if (!v67) {
      goto LABEL_17;
    }
    uint64_t v68 = 5LL;
  }

  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_17:
  unint64_t v69 = STACK[0x8E0];
  STACK[0x8E0] = 0LL;
  if (v69) {
    (*(void (**)(unint64_t))(*(void *)v69 + 40LL))(v69);
  }
  sub_100013980((uint64_t)&STACK[0x918]);
  if (LOBYTE(STACK[0xAC8])) {
    sub_100024B70((uint64_t)&STACK[0x9F0]);
  }
  sub_100006224((uint64_t)&STACK[0x250]);
  JUMPOUT(0x1000131A4LL);
}

void sub_100013028(_Unwind_Exception *a1)
{
}

uint64_t sub_1000131AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(_BYTE *)(a1 + 216))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v7 = *(_OWORD *)a1;
    *(void *)exception = &off_100196FC8;
    *(_OWORD *)(exception + std::iostream::~basic_iostream(v2, v3 + 8) = v7;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = a2;
  }

  return sub_10000F198(a3, a1);
}

uint64_t sub_10001321C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4) {
    sub_100014B10();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48LL))(&v6, v4, a1, &v7);
  sub_100014B5C(a2, &v6, *(_DWORD *)(a1 + 48));
  uint64_t result = v6;
  uint64_t v6 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_100013298( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000132BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4) {
    sub_100014B10();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48LL))(&v6, v4, a1, &v7);
  sub_100014B5C(a2, &v6, *(_DWORD *)(a1 + 48));
  uint64_t result = v6;
  uint64_t v6 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
  }
  return result;
}

void sub_100013338( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001335C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = crc32(0LL, 0LL, 0);
  sub_100019E78(a3 + 8, (uint64_t)v4);
  *(_BYTE *)(a3 + 28std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  sub_100024B00((uint64_t)v4);
}

void sub_1000133EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100013408(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  sub_10000A494(a1 + 72, *(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_10001347C(uint64_t a1, void *a2, size_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_1001A4770);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1001A4770))
  {
    sub_10001ABD4(&unk_1001A4718);
    byte_1001A471C = 0;
    byte_1001A4720 = 0;
    sub_10001ABD4(&algn_1001A4721[3]);
    byte_1001A4728 = 0;
    byte_1001A472C = 0;
    sub_100020B9C(&v15, 1);
    dword_1001A4730 = v15;
    byte_1001A4734 = 0;
    byte_1001A4738 = 0;
    sub_100020B9C(&v14, -2147483643);
    dword_1001A473C = v14;
    byte_1001A4740 = 0;
    byte_1001A4744 = 0;
    sub_100020B9C(&v13, -2147483641);
    dword_1001A4748 = v13;
    byte_1001A474C = 0;
    byte_1001A4750 = 0;
    sub_100020B9C(&v12, -2147483640);
    dword_1001A4754 = v12;
    byte_1001A4758 = 0;
    byte_1001A475C = 0;
    sub_100020B9C(&v11, -2147483643);
    dword_1001A4760 = v11;
    *(_DWORD *)algn_1001A4764 = 3;
    byte_1001A4768 = 1;
    __cxa_guard_release(&qword_1001A4770);
  }

  uint64_t v7 = (char *)&unk_1001A4718 + 12 * *a2;
  unsigned int v8 = *(_DWORD *)v7;
  if (v7[8])
  {
    unsigned int v10 = *(_DWORD *)v7;
    int v9 = *((_DWORD *)v7 + 1);
    uint64_t v16 = &v10;
    *((_DWORD *)sub_10002809C((uint64_t **)(a1 + 696), &v10, (uint64_t)&unk_1001447DC, &v16) + std::iostream::~basic_iostream(v2, v3 + 8) = v9;
  }

  *(_DWORD *)(a1 + 1184) = v8;
  *(void *)(a1 + 1192) = a3;
  LODWORD(v16) = v8;
  sub_1000F6058(a1 + 64, &v16, a3);
}

void sub_100013644(_Unwind_Exception *a1)
{
}

void *sub_10001365C(void *result, uint64_t a2)
{
  uint64_t v2 = 0LL;
  *uint64_t result = a2;
  v5[0] = xmmword_100142500;
  v5[1] = xmmword_100142510;
  uint64_t v6 = 6LL;
  while (*(void *)((char *)v5 + v2) != a2)
  {
    v2 += 8LL;
    if (v2 == 40)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[2] = "invalid value";
      exception[3] = "value validator";
      void *exception = &off_100174DF0;
      exception[1] = "format_type";
      exception[4] = a2;
    }
  }

  return result;
}

uint64_t sub_100013734(uint64_t a1, uint64_t *a2, void *a3)
{
  *(void *)(a1 + 72crc32(0LL, 0LL, 0) = v11;
  *(_OWORD *)(a1 + 792) = v16;
  *(_OWORD *)(a1 + 80std::iostream::~basic_iostream(v2, v3 + 8) = v17;
  *(_OWORD *)(a1 + 824) = v18;
  *(_OWORD *)(a1 + 84crc32(0LL, 0LL, 0) = v19;
  *(_OWORD *)(a1 + 72std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  *(_OWORD *)(a1 + 744) = v13;
  *(_OWORD *)(a1 + 76crc32(0LL, 0LL, 0) = v14;
  *(_OWORD *)(a1 + 776) = v15;
  sub_1000283B4(a1 + 64, a2, a3, (CFDictionaryRef *)&v11);
  unint64_t v6 = sub_10002824C((void *)(a1 + 64), &v11);
  sub_10000D8A4((const void **)&v11);
  uint64_t result = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 48) + 56LL))( *(void *)(a1 + 48),  v6);
  unsigned int v8 = result;
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v10 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"UDIFDiskImage: failed truncating image", v8);
  }

  return result;
}

void sub_100013878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_100013894(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  if (*(_BYTE *)(a1 + 64)) {
    sub_10000D8A4((const void **)(a1 + 56));
  }
  sub_100006224(v2);
  if (*(_BYTE *)(a1 + 24)) {
    sub_10000D8A4((const void **)(a1 + 16));
  }
  return sub_100006224(a1);
}

uint64_t sub_1000138E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24)) {
    sub_10000D8A4((const void **)(a1 + 16));
  }
  return sub_100006224(a1);
}

uint64_t sub_100013910(uint64_t a1)
{
  *(void *)a1 = off_1001729A8;
  sub_10000A494(a1 + 632, *(void **)(a1 + 640));
  sub_10001A1BC(*(void **)(a1 + 608));
  sub_100024B00(a1 + 304);
  *(void *)a1 = off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  return sub_100019D3C(a1);
}

uint64_t sub_100013980(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 113)) {
    sub_10000C920(a1 + 24);
  }
  return a1;
}

void sub_100013BC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 1)
  {
    if (*((_DWORD *)__cxa_begin_catch(exception_object) + 2) == 45)
    {
      __cxa_end_catch();
      JUMPOUT(0x100013B94LL);
    }

    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

LABEL_8:
  __int128 v16 = *__error();
  if (sub_1000BE2F0())
  {
    v52 = 0LL;
    __int128 v17 = sub_1000BE278();
    __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      __int128 v19 = 3LL;
    }
    else {
      __int128 v19 = 2LL;
    }
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](self, "convertParams"));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[DIHelpers stringWithImageFormat:]( DIHelpers,  "stringWithImageFormat:",  [v20 outputFormat]));
    *(_DWORD *)buf = 68158210;
    *(_DWORD *)&uint8_t buf[4] = 33;
    uint64_t v54 = 2080;
    std::locale v55 = "-[DIConvertManager runWithError:]";
    uint64_t v56 = 2114;
    __int16 v57 = (uint64_t)v21;
    unsigned int v8 = _os_log_send_and_compose_impl( v19,  &v52,  0LL,  0LL,  &_mh_execute_header,  v18,  0LL,  "%.*s: Converting to %{public}@",  buf,  28);

    if (v8)
    {
      fprintf(__stderrp, "%s\n", (const char *)v8);
      free((void *)v8);
    }
  }

  else
  {
    __int128 v22 = sub_1000BE278();
    __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager convertParams](self, "convertParams"));
      unsigned int v8 = objc_claimAutoreleasedReturnValue( +[DIHelpers stringWithImageFormat:]( DIHelpers,  "stringWithImageFormat:",  [v24 outputFormat]));
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 33;
      uint64_t v54 = 2080;
      std::locale v55 = "-[DIConvertManager runWithError:]";
      uint64_t v56 = 2114;
      __int16 v57 = v8;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%.*s: Converting to %{public}@", buf, 0x1Cu);
    }
  }

  *__error() = v16;
  if (!-[DIConvertManager validateFormatsWithDiskImage:error:](self, "validateFormatsWithDiskImage:error:", v50, a3)) {
    goto LABEL_23;
  }
  -[DIConvertManager convertWithDiskImage:error:](self, "convertWithDiskImage:error:", &v50, a3);
  -[DIConvertManager convertUserDataWithDiskImage:destination:]( self,  "convertUserDataWithDiskImage:destination:",  &v50,  buf);
  __int128 v25 = (void *)(*(uint64_t (**)(void))(**(void **)buf + 136LL))(*(void *)buf);
  char v26 = sub_1000144E8(v25);
  if ((_DWORD)v26)
  {
    LOBYTE(vstd::iostream::~basic_iostream(v2, v3 + 8) = +[DIError failWithPOSIXCode:error:](&OBJC_CLASS___DIError, "failWithPOSIXCode:error:", v26, a3);
    __int128 v27 = 1;
    if (!v25) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  __int128 v27 = 0;
  if (v25) {
LABEL_20:
  }
    (*(void (**)(void *))(*v25 + 40LL))(v25);
LABEL_21:
  uint64_t v28 = *(void *)buf;
  *(void *)buf = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 16LL))(v28);
  }
LABEL_24:
  unint64_t v29 = v50;
  int v50 = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 16LL))(v29);
  }
  if (!v27)
  {
    unint64_t v30 = *__error();
    if (sub_1000BE2F0())
    {
      v52 = 0LL;
      char v31 = sub_1000BE278();
      __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v33 = 3LL;
      }
      else {
        uint64_t v33 = 2LL;
      }
      unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager outputParams](self, "outputParams"));
      [v34 backend];
      unint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 40LL))(v50);
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 33;
      uint64_t v54 = 2080;
      std::locale v55 = "-[DIConvertManager runWithError:]";
      uint64_t v56 = 2048;
      __int16 v57 = v35;
      LODWORD(v4std::iostream::~basic_iostream(v2, v3 + 8) = 28;
      char v36 = (char *)_os_log_send_and_compose_impl( v33,  &v52,  0LL,  0LL,  &_mh_execute_header,  v32,  0LL,  "%.*s: Conversion completed, output file size: %llu bytes",  (int)buf,  v48,  v49);
      __int128 v37 = v51;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      if (v36)
      {
        fprintf(__stderrp, "%s\n", v36);
        free(v36);
      }
    }

    else
    {
      unint64_t v40 = sub_1000BE278();
      char v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertManager outputParams](self, "outputParams"));
        [v42 backend];
        uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 40LL))(v50);
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 33;
        uint64_t v54 = 2080;
        std::locale v55 = "-[DIConvertManager runWithError:]";
        uint64_t v56 = 2048;
        __int16 v57 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%.*s: Conversion completed, output file size: %llu bytes",  buf,  0x1Cu);
        char v44 = v51;
        if (v51)
        {
          CFTypeID v45 = (unint64_t *)&v51->__shared_owners_;
          do
            CFTypeID v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
    }

    *__error() = v30;
    LOBYTE(vstd::iostream::~basic_iostream(v2, v3 + 8) = 1;
  }

  return v8 & 1;
}

    _Unwind_Resume(a1);
  }

  __cxa_begin_catch(a1);
  uint64_t v7 = 0;
  sub_100056E48((uint64_t)v8, (uint64_t)&v5);
  int v11 = 0;
  sub_100056E48(v2, (uint64_t)v8);
  *(_DWORD *)(v2 + 512) = v11;
  *(_BYTE *)(v2 + 52crc32(0LL, 0LL, 0) = 1;
  sub_100056FB0((uint64_t)v8);
  sub_100056FB0((uint64_t)&v5);
LABEL_7:
  __cxa_end_catch();
}

  int v11 = a2[1] << 9;
  __int128 v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  __int128 v14 = *__error();
  if (sub_1000BE2F0())
  {
    __int128 v27 = 0LL;
    __int128 v15 = sub_1000BE278();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    __int128 v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    __int128 v18 = *__error();
    if (v17) {
      __int128 v19 = 3LL;
    }
    else {
      __int128 v19 = 2LL;
    }
    *(_DWORD *)buf = 68158722;
    unint64_t v29 = 132;
    unint64_t v30 = 2080;
    char v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_read_iov_t]";
    __int128 v32 = 2048;
    uint64_t v33 = v11;
    unint64_t v34 = 1024;
    unint64_t v35 = v6;
    char v36 = 1024;
    __int128 v37 = v18;
    LODWORD(v25) = 40;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl( v19,  &v27,  0LL,  0LL,  &_mh_execute_header,  v16,  16LL,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  (int)buf,  v25,  v26);

    if (v20)
    {
      fprintf(__stderrp, "%s\n", v20);
      free(v20);
    }
  }

  else
  {
    uint64_t v21 = sub_1000BE278();
    __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int128 v23 = *__error();
      *(_DWORD *)buf = 68158722;
      unint64_t v29 = 132;
      unint64_t v30 = 2080;
      char v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_read_iov_t]";
      __int128 v32 = 2048;
      uint64_t v33 = v11;
      unint64_t v34 = 1024;
      unint64_t v35 = v6;
      char v36 = 1024;
      __int128 v37 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  buf,  0x28u);
    }
  }

  *__error() = v14;
  uint64_t v24 = *__error();
  if (v24 < 0) {
    return v24;
  }
  else {
    return -v24;
  }
}

  int v11 = a2[1] << 9;
  __int128 v12 = a3(*(unsigned int *)(a1 + 100));
  if ((v12 & 0x80000000) == 0) {
    return v12 >> 9;
  }
  __int128 v14 = *__error();
  if (sub_1000BE2F0())
  {
    __int128 v27 = 0LL;
    __int128 v15 = sub_1000BE278();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    __int128 v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    __int128 v18 = *__error();
    if (v17) {
      __int128 v19 = 3LL;
    }
    else {
      __int128 v19 = 2LL;
    }
    *(_DWORD *)buf = 68158722;
    unint64_t v29 = 133;
    unint64_t v30 = 2080;
    char v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_ri"
          "ngs_sqe_op_write_iov_t]";
    __int128 v32 = 2048;
    uint64_t v33 = v11;
    unint64_t v34 = 1024;
    unint64_t v35 = v6;
    char v36 = 1024;
    __int128 v37 = v18;
    LODWORD(v25) = 40;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl( v19,  &v27,  0LL,  0LL,  &_mh_execute_header,  v16,  16LL,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  (int)buf,  v25,  v26);

    if (v20)
    {
      fprintf(__stderrp, "%s\n", v20);
      free(v20);
    }
  }

  else
  {
    uint64_t v21 = sub_1000BE278();
    __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int128 v23 = *__error();
      *(_DWORD *)buf = 68158722;
      unint64_t v29 = 133;
      unint64_t v30 = 2080;
      char v31 = "int rawTestPlugin_t::do_io(const IOV_OP &, ssize_t (*)(int, const struct iovec *, int, off_t)) [IOV_OP = io_"
            "rings_sqe_op_write_iov_t]";
      __int128 v32 = 2048;
      uint64_t v33 = v11;
      unint64_t v34 = 1024;
      unint64_t v35 = v6;
      char v36 = 1024;
      __int128 v37 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%.*s: I/O error at offset %lld iov_count %d errno %d",  buf,  0x28u);
    }
  }

  *__error() = v14;
  uint64_t v24 = *__error();
  if (v24 < 0) {
    return v24;
  }
  else {
    return -v24;
  }
}

    uint64_t v3 = 0LL;
  }

    uint64_t v3 = 0LL;
  }

    uint64_t v3 = 0LL;
  }

    uint64_t v3 = 0LL;
  }

    uint64_t v3 = 0LL;
  }

    uint64_t v3 = 0LL;
  }

  return v9;
}

void sub_10001429C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000144E8(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  }
  if (sub_1000BE308())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::flush(di_flush_mode)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    sub_100026584(v4, &v2);
    sub_10000552C(&v5, (uint64_t)"Disk image is terminated, skipping flush", 40LL);
    std::ostream::~ostream(&v5, off_100175038);
    sub_1000266E8((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return 4294967290LL;
}

void sub_1000145A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100014728( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  a9.super_class = (Class)&OBJC_CLASS___DIConvertManager;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

uint64_t sub_1000147D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  __int128 v5 = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136LL))(v4);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v6;
  *(_DWORD *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = &off_1001723D8;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = a1 + 56;
  sub_1000148A0((void *)(a1 + 56), (uint64_t)(a2 + 7));
  return a1;
}

void sub_100014858(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void **)(v2 + 80);
  if (v6 == v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = 4LL;
  }

  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
    uint64_t v7 = *(void **)(v2 + 80);
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  sub_100126200(v1);
  _Unwind_Resume(a1);
}

void *sub_1000148A0(void *a1, uint64_t a2)
{
  int v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    int v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t sub_100014938(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void *sub_10001499C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    __int128 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100014B04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000052FC(a1);
}

void sub_100014B10()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_100172578;
}

void sub_100014B48(std::exception *a1)
{
}

uint64_t sub_100014B5C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v4;
  uint64_t v5 = qword_1001A3B40;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = qword_1001A3B40;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4crc32(0LL, 0LL, 0) = a3;
  sub_1000EA408((_DWORD *)a1, (uint64_t)v8);
  _OWORD *v6 = v8[0];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v8 + 12);
  return a1;
}

void sub_100014BCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014BF0(void *a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v1 = a1 + 1;
  if (v2 == v1) {
    return qword_1001A3B40;
  }
  uint64_t v3 = *v1;
  if (*v1)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
    }

    while (v3);
  }

  else
  {
    do
    {
      uint64_t v4 = v1[2];
      BOOL v5 = *(void *)v4 == (void)v1;
      uint64_t v1 = (uint64_t *)v4;
    }

    while (v5);
  }

  return (*(_BYTE *)(v4 + 48) & 1) + *(void *)(v4 + 40) - 1LL;
}

void sub_100014C4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  sub_10001AB88(*(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)a1);
}

  ;
}

uint64_t sub_100014CC4(uint64_t a1)
{
  *(void *)a1 = off_1001725A0;
  sub_100006224(a1 + 1200);
  sub_100014C4C(a1 + 904);
  sub_100006224(a1 + 888);
  *(void *)a1 = &off_1001726B8;
  *(void *)(a1 + 64) = off_1001729A8;
  sub_10000A494(a1 + 696, *(void **)(a1 + 704));
  sub_10001A1BC(*(void **)(a1 + 672));
  sub_100024B00(a1 + 368);
  *(void *)(a1 + 64) = off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 256));
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  sub_100019D3C(a1 + 64);
  sub_100006224(a1 + 48);
  return a1;
}

void sub_100014D80(char *a1)
{
  *(void *)a1 = off_1001725A0;
  sub_100006224((uint64_t)(a1 + 1200));
  sub_100014C4C((uint64_t)(a1 + 904));
  sub_100006224((uint64_t)(a1 + 888));
  *(void *)a1 = &off_1001726B8;
  *((void *)a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_1001729A8;
  sub_10000A494((uint64_t)(a1 + 696), *((void **)a1 + 88));
  sub_10001A1BC(*((void **)a1 + 84));
  sub_100024B00((uint64_t)(a1 + 368));
  *((void *)a1 + std::iostream::~basic_iostream(v2, v3 + 8) = off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 256));
  std::mutex::~mutex((std::mutex *)a1 + 3);
  sub_100019D3C((uint64_t)(a1 + 64));
  sub_100006224((uint64_t)(a1 + 48));
  operator delete(a1);
}

uint64_t sub_100014E3C()
{
  return 512LL;
}

uint64_t sub_100014E44(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_100014E4C()
{
  return 1LL;
}

void sub_100014E54()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v1 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Image info is not supported for the given image type", 0x16u);
}

uint64_t sub_100014E88()
{
  return 1LL;
}

uint64_t sub_100014E90()
{
  return 4294967218LL;
}

uint64_t sub_100014E98@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  uint64_t v2 = *(void *)(result + 1192);
  a2[2] = 0LL;
  a2[3] = v2;
  return result;
}

uint64_t sub_100014EA8()
{
  return 0LL;
}

uint64_t sub_100014EB0()
{
  return 0LL;
}

uint64_t sub_100014EB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

__n128 sub_100014EC4@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unint64_t a5@<X4>, __n128 **a6@<X8>)
{
  __int128 v12 = (__n128 *)operator new(0x40uLL);
  __n128 result = *a4;
  v12[1] = *a4;
  v12[2].n128_u64[0] = a4[1].n128_u64[0];
  v12[2].n128_u64[1] = a5;
  v12[3].n128_u64[0] = a1;
  v12[3].n128_u64[1] = a3;
  v12->n128_u64[0] = (unint64_t)off_100172AD8;
  v12->n128_u64[1] = a2;
  *a6 = v12;
  return result;
}

void *sub_100014F30(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 1200);
  if (!*(void *)(a1 + 1200))
  {
    *(void *)&__int128 v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40LL))(*(void *)(a1 + 48));
    sub_10001ACF4((uint64_t *)&v36, &v33);
    sub_1000198A4((uint64_t)v2, &v33);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      int v9 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

  uint64_t v3 = operator new(0x38uLL);
  int v31 = 1;
  unsigned __int8 v30 = 0;
  sub_10001C400(v2, (void *)(a1 + 1192), &v31, &v30, &v32);
  void *v3 = off_100173128;
  v3[1] = a1;
  v3[3] = 0LL;
  uint64_t v4 = v3 + 3;
  v3[2] = v3 + 3;
  BOOL v5 = v3 + 2;
  v3[4] = 0LL;
  v3[5] = 0LL;
  v3[6] = 0LL;
  sub_1000F61C4(a1 + 64, (uint64_t)&v33);
  sub_100019E30((uint64_t)(v3 + 2), (void *)v3[3]);
  uint64_t v6 = (void *)*((void *)&v33 + 1);
  v3[2] = v33;
  v3[3] = v6;
  uint64_t v7 = v34;
  v3[4] = v34;
  if (v7)
  {
    v6[2] = v4;
    *(void *)&__int128 v33 = (char *)&v33 + 8;
    *((void *)&v33 + 1) = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v6 = 0LL;
  }

  else
  {
    *BOOL v5 = v4;
  }

  __int128 v11 = v35;
  __int128 v35 = 0uLL;
  __int128 v36 = v11;
  sub_100019E30((uint64_t)&v33, v6);
  __int128 v12 = (void *)*v5;
  if ((void *)*v5 != v4)
  {
    while (1)
    {
      __int128 v33 = v32;
      if (*((void *)&v32 + 1))
      {
        __int128 v13 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      int v15 = sub_10011EFD4((uint64_t)(v12 + 5), (const void **)&v36, (uint64_t *)&v33);
      int v16 = v15;
      __int128 v17 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (*((void *)&v33 + 1))
      {
        __int128 v18 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19) {
          break;
        }
      }

      if (v15) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v20 = (void *)v12[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          uint64_t v21 = (void *)v12[2];
          BOOL v22 = *v21 == (void)v12;
          __int128 v12 = v21;
        }

        while (!v22);
      }

      __int128 v12 = v21;
      if (v21 == v4) {
        goto LABEL_29;
      }
    }

    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16) {
      goto LABEL_20;
    }
LABEL_19:
    sub_10001C5B4(v12 + 5);
    goto LABEL_20;
  }

LABEL_29:
  sub_10001C610(v3 + 5, (uint64_t *)&v36);
  __int128 v23 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v24 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  char v26 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    __int128 v27 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v3;
}

  if (!v23) {
    goto LABEL_33;
  }
  uint64_t v24 = 5LL;
LABEL_32:
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_33:
  unint64_t v28 = v41;
  if (v41 == v40)
  {
    unint64_t v29 = 4LL;
    unint64_t v28 = v40;
    goto LABEL_37;
  }

  if (v41)
  {
    unint64_t v29 = 5LL;
LABEL_37:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }

  return a1;
}

  __int128 v17 = v24;
  if (v24)
  {
    __int128 v18 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return v10;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }

  __int128 v11 = a2[1];
  if (v11)
  {
    __int128 v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      __int128 v12 = (void *)*v12;
    }

    while (v12);
  }

  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      unint64_t v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          BOOL v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  __int128 v11 = a2[1];
  if (v11)
  {
    __int128 v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      __int128 v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      unint64_t v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          BOOL v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

void sub_1000151F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100015274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v193 = v195;
  __int128 v194 = xmmword_100142520;
  __int128 __p = v192;
  __int128 v191 = xmmword_100142520;
  unint64_t v7 = sub_10001C700(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    int v9 = operator new(40 * v7);
    sub_10001CE68((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v191, 0LL, 0LL);
  }

  uint64_t v10 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  sub_10001C894(a1 + 64, *(void *)(a3 + 24), v10 & ~(v10 >> 63), (uint64_t *)&v193);
  __int128 v11 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v176 = *(void *)a4;
  v177 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }

  __int128 v14 = *(_OWORD *)(a4 + 56);
  v178[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v178 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v179 = *(void *)(a4 + 48);
  __int128 v180 = v14;
  __int128 v15 = *(_OWORD *)(a4 + 88);
  __int128 v181 = *(_OWORD *)(a4 + 72);
  __int128 v182 = v15;
  char v183 = *(_BYTE *)(a4 + 104);
  int v16 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v184 = *(void *)(a4 + 112);
  v185 = v16;
  if (v16)
  {
    __int128 v17 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  __int128 v186 = *(_OWORD *)(a4 + 128);
  uint64_t v187 = *(void *)(a4 + 144);
  char v188 = *(_BYTE *)(a4 + 152);
  v174[0] = 0;
  char v175 = 0;
  unint64_t v19 = (char *)v193;
  uint64_t v139 = *((void *)v193 + 3);
  uint64_t v20 = *(void *)(a3 + 8);
  *(void *)&__int128 v162 = *(void *)a3;
  *((void *)&v162 + 1) = v20;
  if (v20)
  {
    uint64_t v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  uint64_t v23 = a3 + 56;
  __int128 v24 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)v163 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v163[9] = *(_OWORD *)(a3 + 25);
  uint64_t v164 = *(void *)(a3 + 48);
  __int128 v165 = v24;
  __int128 v25 = *(_OWORD *)(a3 + 88);
  __int128 v166 = *(_OWORD *)(a3 + 72);
  __int128 v167 = v25;
  char v168 = *(_BYTE *)(a3 + 104);
  char v26 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v169 = *(void *)(a3 + 112);
  v170 = v26;
  if (v26)
  {
    __int128 v27 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }

  __int128 v171 = *(_OWORD *)(a3 + 128);
  uint64_t v172 = *(void *)(a3 + 144);
  char v173 = *(_BYTE *)(a3 + 152);
  uint64_t v138 = a2;
  if (!(void)v194)
  {
    uint64_t v29 = 0LL;
    uint64_t v142 = 0LL;
    goto LABEL_138;
  }

  uint64_t v136 = a3;
  uint64_t v29 = 0LL;
  v141 = &v19[64 * (void)v194];
  uint64_t v142 = 0LL;
  v140 = (uint64_t **)(a2 + 16);
  while (1)
  {
    size_t v30 = *((void *)v19 + 4);
    if (v30)
    {
    }

    if (v30 > *(void *)&v163[16]) {
      sub_10003CC34((uint64_t)&v162);
    }
    if (sub_10003B85C((uint64_t)&v162, (uint64_t)&v176))
    {
      *(void *)&__int128 v160 = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
      *((void *)&v160 + 1) = 264LL;
      *(_DWORD *)v161 = 16;
      sub_10001C9F8(&v143, &v160);
      sub_10000552C(&v150, (uint64_t)"Udif: advanced buffer, needs to read ", 37LL);
      sub_1000F9078(&v150, (int *)v19);
      sub_10000552C(&v150, (uint64_t)" but buffer is full", 19LL);
      std::ios_base::getloc((const std::ios_base *)((char *)&v150 + *(void *)(v150 - 24)));
      v108 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
      uint64_t v109 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 10LL);
      std::locale::~locale((std::locale *)&__dst);
      std::ostream::put(&v150, v109);
      std::ostream::flush(&v150);
      std::ostream::~ostream(&v150, off_100173470);
      sub_10001D704((uint64_t)&v143);
      goto LABEL_137;
    }

    __int128 v31 = v162;
    __int128 v160 = v162;
    if (*((void *)&v162 + 1))
    {
      __int128 v32 = (unint64_t *)(*((void *)&v162 + 1) + 8LL);
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    *(_OWORD *)&v161[9] = *(_OWORD *)&v163[9];
    *(_OWORD *)v161 = *(_OWORD *)v163;
    size_t v34 = *(_OWORD *)&v163[9] >> 56;
    if (v30 > v34)
    {
      *(void *)&__int128 __dst = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
      *((void *)&__dst + 1) = 264LL;
      v157.i32[0] = 16;
      sub_10001CAE0(&v143, &__dst);
      sub_10000552C(&v150, (uint64_t)"Udif: needs to read ", 20LL);
      sub_1000F9078(&v150, (int *)v19);
      sub_10000552C(&v150, (uint64_t)" but buffer is too small ", 25LL);
      std::ostream::operator<<(&v150, v34);
      std::ios_base::getloc((const std::ios_base *)((char *)&v150 + *(void *)(v150 - 24)));
      __int128 v35 = std::locale::use_facet((const std::locale *)&v154, &std::ctype<char>::id);
      uint64_t v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10LL);
      std::locale::~locale((std::locale *)&v154);
      std::ostream::put(&v150, v36);
      std::ostream::flush(&v150);
      std::ostream::~ostream(&v150, off_100173690);
      sub_10001DD3C((uint64_t)&v143);
      std::ios::~ios(&v151);
      int v37 = 2;
      uint64_t v29 = -28LL;
      goto LABEL_45;
    }

    if (!*(_DWORD *)v19)
    {
      bzero((void *)v31, v30);
      sub_10003CA5C((uint64_t)&v162, v30);
LABEL_44:
      int v37 = 0;
      v142 += v30;
      goto LABEL_45;
    }

    int8x16_t v38 = *(int8x16_t *)(v19 + 8);
    uint64_t v39 = *((void *)v19 + 4);
    __int128 __dst = v31;
    if (*((void *)&v31 + 1))
    {
      unint64_t v40 = (unint64_t *)(*((void *)&v31 + 1) + 8LL);
      do
        unint64_t v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }

    int8x16_t v157 = vextq_s8(v38, v38, 8uLL);
    uint64_t v158 = v39;
    char v159 = 0;
    if (v142)
    {
      *(void *)&__int128 v154 = v19;
      __int128 v42 = sub_10001E2F8(v140, (unsigned int *)v19, (uint64_t)&unk_1001447DC, (_DWORD **)&v154);
      (*(void (**)(_DWORD **__return_ptr, uint64_t *, __int128 *))(*v42[5] + 128))(&v143, v42[5], &__dst);
      if ((void)v191 == *((void *)&v191 + 1))
      {
        sub_10001EAB8((uint64_t *)&__p, (uint64_t)__p + 40 * v191, 1LL, (uint64_t)&v143, &v154);
      }

      else
      {
        sub_10001C2DC((unint64_t)__p + 40 * v191, (uint64_t)&v143);
        *(void *)&__int128 v191 = v191 + 1;
      }

      sub_10003CA5C((uint64_t)&v162, v30);
    }

    else
    {
      v143 = v19;
      int v50 = sub_10001E2F8(v140, (unsigned int *)v19, (uint64_t)&unk_1001447DC, &v143);
      int v51 = (*(uint64_t (**)(uint64_t *, __int128 *))(*v50[5] + 88))(v50[5], &__dst);
      uint64_t v29 = v51;
      if (v51 < 0)
      {
        char v43 = 0;
        int v37 = 2;
        goto LABEL_37;
      }

      if (*(_BYTE *)(v138 + 56) && *((int *)v19 + 8) > (uint64_t)v51)
      {
        *(void *)&__int128 v154 = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
        *((void *)&v154 + 1) = 264LL;
        int v155 = 16;
        sub_10001CBC8(&v143, &v154);
        sub_10000552C(&v150, (uint64_t)"Error: Not enough data read. expected: ", 39LL);
        std::ostream::operator<<(&v150, *((void *)v19 + 4));
        sub_10000552C(&v150, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<(&v150, v29);
        sub_10000552C(&v150, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<(&v150, *(void *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v150 + *(void *)(v150 - 24)));
        v52 = std::locale::use_facet(&v189, &std::ctype<char>::id);
        uint64_t v53 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10LL);
        std::locale::~locale(&v189);
        std::ostream::put(&v150, v53);
        std::ostream::flush(&v150);
        std::ostream::~ostream(&v150, off_1001738B0);
        sub_10001E49C((uint64_t)&v143);
        std::ios::~ios(&v151);
        char v43 = 0;
        int v37 = 2;
        uint64_t v29 = -5LL;
        goto LABEL_37;
      }

      if (!(void)v194) {
        goto LABEL_71;
      }
      size_t v54 = 0LL;
      uint64_t v55 = 0LL;
      uint64_t v56 = (void)v194 << 6;
      __int16 v57 = (uint64_t *)((char *)v193 + 32);
      do
      {
        uint64_t v59 = *v57;
        v57 += 8;
        uint64_t v58 = v59;
        uint64_t v60 = v59 + v54;
        uint64_t v61 = v59 + v55;
        uint64_t v62 = v34 - v55;
        BOOL v63 = v59 + v55 > v34;
        if (v59 + v55 >= v34) {
          uint64_t v55 = 0LL;
        }
        else {
          uint64_t v55 = v61;
        }
        if (v63)
        {
          uint64_t v55 = v58;
          uint64_t v64 = v62;
        }

        else
        {
          uint64_t v64 = 0LL;
        }

        size_t v54 = v60 + v64;
        v56 -= 64LL;
      }

      while (v56);
      if (v54 > v34 + v34 * *(void *)(a1 + 24))
      {
        uint64_t v65 = *((void *)v19 + 6);
        memmove((void *)__dst, (const void *)(__dst + v65), *((void *)v19 + 4) - v65);
      }

      else
      {
LABEL_71:
        uint64_t v65 = 0LL;
      }

      v30 -= v65;
      sub_10003CA5C((uint64_t)&v162, v30);
      if ((void)v194)
      {
        uint64_t v66 = 0LL;
        uint64_t v67 = 0LL;
        uint64_t v68 = (void)v194 << 6;
        unint64_t v69 = (uint64_t *)((char *)v193 + 32);
        do
        {
          uint64_t v71 = *v69;
          v69 += 8;
          uint64_t v70 = v71;
          uint64_t v72 = v71 + v66;
          uint64_t v73 = v71 + v67;
          uint64_t v74 = v34 - v67;
          BOOL v75 = v71 + v67 > v34;
          if (v71 + v67 >= v34) {
            uint64_t v67 = 0LL;
          }
          else {
            uint64_t v67 = v73;
          }
          if (v75)
          {
            uint64_t v67 = v70;
            uint64_t v76 = v74;
          }

          else
          {
            uint64_t v76 = 0LL;
          }

          uint64_t v66 = v72 + v76;
          v68 -= 64LL;
        }

        while (v68);
      }

      else
      {
        uint64_t v66 = 0LL;
      }

      char v77 = sub_10003D9C8(v136);
      v139 += v65;
      sub_10003BB60((uint64_t)&v143, v23, a4 + 56, v139, v66 - v65, v77);
      sub_10001EA58((uint64_t)v174);
      sub_100019908((uint64_t)v174, (uint64_t)&v143);
      char v175 = 1;
      v78 = v153;
      if (v153)
      {
        int v79 = (unint64_t *)&v153->__shared_owners_;
        do
          unint64_t v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }

      v81 = v152;
      if (v152)
      {
        v82 = (unint64_t *)&v152->__shared_owners_;
        do
          unint64_t v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }

      v84 = v149;
      if (v149)
      {
        v85 = (unint64_t *)&v149->__shared_owners_;
        do
          unint64_t v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }

      v87 = v148;
      if (v148)
      {
        v88 = (unint64_t *)&v148->__shared_owners_;
        do
          unint64_t v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }

      v90 = v147;
      if (v147)
      {
        v91 = (unint64_t *)&v147->__shared_owners_;
        do
          unint64_t v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }

      v93 = v145;
      if (v145)
      {
        v94 = (unint64_t *)&v145->__shared_owners_;
        do
          unint64_t v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }

      sub_10003BD04((uint64_t)v174, (uint64_t)&v143);
      sub_100018FFC((uint64_t)&v162, (uint64_t)&v143);
      v96 = v146;
      if (v146)
      {
        v97 = (unint64_t *)&v146->__shared_owners_;
        do
          unint64_t v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }

      v99 = v144;
      if (v144)
      {
        v100 = (unint64_t *)&v144->__shared_owners_;
        do
          unint64_t v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }

      sub_10003C884((uint64_t)&v162, v30);
      sub_10003BA04((uint64_t)v174, (uint64_t)&v143);
      sub_100018FFC((uint64_t)&v176, (uint64_t)&v143);
      v102 = v146;
      if (v146)
      {
        v103 = (unint64_t *)&v146->__shared_owners_;
        do
          unint64_t v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }

      v105 = v144;
      if (v144)
      {
        v106 = (unint64_t *)&v144->__shared_owners_;
        do
          unint64_t v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
    }

    int v37 = 0;
    char v43 = 1;
LABEL_37:
    char v44 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (!*((void *)&__dst + 1)) {
      goto LABEL_41;
    }
    CFTypeID v45 = (unint64_t *)(*((void *)&__dst + 1) + 8LL);
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if ((v43 & 1) != 0) {
        goto LABEL_44;
      }
    }

    else
    {
LABEL_41:
      if ((v43 & 1) != 0) {
        goto LABEL_44;
      }
    }

LABEL_45:
    v47 = (std::__shared_weak_count *)*((void *)&v160 + 1);
    if (*((void *)&v160 + 1))
    {
      char v48 = (unint64_t *)(*((void *)&v160 + 1) + 8LL);
      do
        unint64_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if (!v37)
    {
      v19 += 64;
      if (v19 != v141) {
        continue;
      }
    }

    goto LABEL_138;
  }

  *(void *)&__int128 v160 = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
  *((void *)&v160 + 1) = 264LL;
  *(_DWORD *)v161 = 16;
  sub_10001C910(&v143, &v160);
  sub_10000552C(&v150, (uint64_t)"Udif: needs to read ", 20LL);
  sub_1000F9078(&v150, (int *)v19);
  sub_10000552C(&v150, (uint64_t)" but buffer is full", 19LL);
  std::ios_base::getloc((const std::ios_base *)((char *)&v150 + *(void *)(v150 - 24)));
  v110 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  uint64_t v111 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10LL);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put(&v150, v111);
  std::ostream::flush(&v150);
  std::ostream::~ostream(&v150, off_100173250);
  sub_10001D0CC((uint64_t)&v143);
LABEL_137:
  std::ios::~ios(&v151);
  uint64_t v29 = -28LL;
LABEL_138:
  v112 = *(void **)(v138 + 16);
  if (v112 != (void *)(v138 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v112[5] + 144LL))(v112[5]);
      v113 = (void *)v112[1];
      if (v113)
      {
        do
        {
          v114 = v113;
          v113 = (void *)*v113;
        }

        while (v113);
      }

      else
      {
        do
        {
          v114 = (void *)v112[2];
          BOOL v115 = *v114 == (void)v112;
          v112 = v114;
        }

        while (!v115);
      }

      v112 = v114;
    }

    while (v114 != (void *)(v138 + 24));
  }

  if (v29 < 0)
  {
LABEL_156:
    uint64_t v142 = v29;
  }

  else if ((void)v191)
  {
    v116 = (unsigned int *)__p;
    v117 = (unsigned int *)((char *)__p + 40 * v191);
    v118 = v193;
    while (1)
    {
      do
      {
        int v119 = v118[16];
        v118 += 16;
      }

      while (!v119);
      int v120 = sub_10001CCB0(v116);
      uint64_t v29 = v120;
      if (v120 < 0) {
        goto LABEL_156;
      }
      if (*(_BYTE *)(v138 + 56) && (int)v118[8] > (uint64_t)v120)
      {
        *(void *)&__int128 v160 = "io_result_t DiskImageUDIFRead<UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, std::integral_constant<BOOL, false>>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>, UDIFVariant = std::integral_constant<BOOL, false>]";
        *((void *)&v160 + 1) = 264LL;
        *(_DWORD *)v161 = 16;
        sub_10001CD80(&v143, &v160);
        sub_10000552C(&v150, (uint64_t)"Error: Not enough data read. expected: ", 39LL);
        std::ostream::operator<<(&v150, *((void *)v118 + 4));
        sub_10000552C(&v150, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<(&v150, v29);
        sub_10000552C(&v150, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<(&v150, *(void *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v150 + *(void *)(v150 - 24)));
        v121 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
        uint64_t v122 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v121->__vftable[2].~facet_0)(v121, 10LL);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put(&v150, v122);
        std::ostream::flush(&v150);
        std::ostream::~ostream(&v150, off_100173AD0);
        sub_10001EE10((uint64_t)&v143);
        std::ios::~ios(&v151);
        uint64_t v29 = -5LL;
        goto LABEL_156;
      }

      v116 += 10;
      if (v116 == v117)
      {
        if ((v120 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_156;
      }
    }
  }

  v123 = v170;
  if (v170)
  {
    v124 = (unint64_t *)&v170->__shared_owners_;
    do
      unint64_t v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }

  v126 = (std::__shared_weak_count *)*((void *)&v162 + 1);
  if (*((void *)&v162 + 1))
  {
    v127 = (unint64_t *)(*((void *)&v162 + 1) + 8LL);
    do
      unint64_t v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }

  sub_100019A28((uint64_t)v174);
  v129 = v185;
  if (v185)
  {
    v130 = (unint64_t *)&v185->__shared_owners_;
    do
      unint64_t v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }

  v132 = v177;
  if (v177)
  {
    v133 = (unint64_t *)&v177->__shared_owners_;
    do
      unint64_t v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }

  if (*((void *)&v191 + 1) && v192 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v194 + 1) && v195 != v193) {
    operator delete(v193);
  }
  return v142;
}

      *__error() = v19;
      [v14 setObject:v13 forKeyedSubscript:@"DIErrorVerboseInfo"];
      goto LABEL_54;
    }

    __int128 v27 = *__error();
    if (!sub_1000BE2F0())
    {
      unint64_t v41 = sub_1000BE278();
      __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68158466;
        char v48 = 62;
        unint64_t v49 = 2080;
        int v50 = "+[DIError errorWithDomain:code:description:verboseInfo:error:]";
        int v51 = 2114;
        v52 = v11;
        uint64_t v53 = 2114;
        size_t v54 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "%.*s: %{public}@ error %{public}@",  buf,  0x26u);
      }

      goto LABEL_53;
    }

    unint64_t v46 = 0LL;
    size_t v34 = sub_1000BE278();
    __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    *(_DWORD *)buf = 68158466;
    char v48 = 62;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      uint64_t v36 = 3LL;
    }
    else {
      uint64_t v36 = 2LL;
    }
    unint64_t v49 = 2080;
    int v50 = "+[DIError errorWithDomain:code:description:verboseInfo:error:]";
    int v51 = 2114;
    v52 = v11;
    uint64_t v53 = 2114;
    size_t v54 = v18;
    __int128 v31 = (char *)_os_log_send_and_compose_impl( v36,  &v46,  0LL,  0LL,  &_mh_execute_header,  v35,  16LL,  "%.*s: %{public}@ error %{public}@",  buf,  38);

    if (v31)
    {
LABEL_41:
      fprintf(__stderrp, "%s\n", v31);
      free(v31);
    }
  }

    unint64_t v46 = (std::__shared_weak_count *)*((void *)&v147 + 1);
    if (*((void *)&v147 + 1))
    {
      v47 = (unint64_t *)(*((void *)&v147 + 1) + 8LL);
      do
        char v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    if (!v36)
    {
      v19 += 64;
      if (v19 != v128) {
        continue;
      }
    }

    goto LABEL_126;
  }

  *(void *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
  *((void *)&v147 + 1) = 75LL;
  *(_DWORD *)v148 = 16;
  sub_10001C910(&v130, &v147);
  sub_10000552C(&v137, (uint64_t)"Udif: needs to read ", 20LL);
  sub_1000F9078(&v137, (int *)v19);
  sub_10000552C(&v137, (uint64_t)" but buffer is full", 19LL);
  std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
  unint64_t v98 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
  v99 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10LL);
  std::locale::~locale((std::locale *)&v143);
  std::ostream::put(&v137, v99);
  std::ostream::flush(&v137);
  std::ostream::~ostream(&v137, off_100173250);
  sub_10001D0CC((uint64_t)&v130);
LABEL_125:
  std::ios::~ios(&v138);
  unint64_t v28 = -28LL;
LABEL_126:
  v100 = *(void **)(v124 + 16);
  if (v100 != (void *)(v124 + 24))
  {
    do
    {
      (*(void (**)(void))(*(void *)v100[5] + 144LL))(v100[5]);
      unint64_t v101 = (void *)v100[1];
      if (v101)
      {
        do
        {
          v102 = v101;
          unint64_t v101 = (void *)*v101;
        }

        while (v101);
      }

      else
      {
        do
        {
          v102 = (void *)v100[2];
          v103 = *v102 == (void)v100;
          v100 = v102;
        }

        while (!v103);
      }

      v100 = v102;
    }

    while (v102 != (void *)(v124 + 24));
  }

  if (v28 < 0)
  {
LABEL_144:
    v129 = v28;
  }

  else if ((void)v178)
  {
    unint64_t v104 = (unsigned int *)__p;
    v105 = (unsigned int *)((char *)__p + 40 * v178);
    v106 = v180;
    while (1)
    {
      do
      {
        unint64_t v107 = v106[16];
        v106 += 16;
      }

      while (!v107);
      v108 = sub_10001CCB0(v104);
      unint64_t v28 = v108;
      if (v108 < 0) {
        goto LABEL_144;
      }
      if (*(_BYTE *)(v124 + 56) && (int)v106[8] > (uint64_t)v108)
      {
        *(void *)&v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((void *)&v147 + 1) = 75LL;
        *(_DWORD *)v148 = 16;
        sub_10001CD80(&v130, &v147);
        sub_10000552C(&v137, (uint64_t)"Error: Not enough data read. expected: ", 39LL);
        std::ostream::operator<<(&v137, *((void *)v106 + 4));
        sub_10000552C(&v137, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<(&v137, v28);
        sub_10000552C(&v137, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<(&v137, *(void *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
        uint64_t v109 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
        v110 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10LL);
        std::locale::~locale((std::locale *)&v143);
        std::ostream::put(&v137, v110);
        std::ostream::flush(&v137);
        std::ostream::~ostream(&v137, off_100173AD0);
        sub_10001EE10((uint64_t)&v130);
        std::ios::~ios(&v138);
        unint64_t v28 = -5LL;
        goto LABEL_144;
      }

      v104 += 10;
      if (v104 == v105)
      {
        if ((v108 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_144;
      }
    }
  }

  uint64_t v111 = v157;
  if (v157)
  {
    v112 = (unint64_t *)&v157->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }

  v114 = (std::__shared_weak_count *)*((void *)&v149 + 1);
  if (*((void *)&v149 + 1))
  {
    BOOL v115 = (unint64_t *)(*((void *)&v149 + 1) + 8LL);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }

  sub_100019A28((uint64_t)v161);
  v117 = v172;
  if (v172)
  {
    v118 = (unint64_t *)&v172->__shared_owners_;
    do
      int v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }

  int v120 = v164;
  if (v164)
  {
    v121 = (unint64_t *)&v164->__shared_owners_;
    do
      uint64_t v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }

  if (*((void *)&v178 + 1) && v179 != __p) {
    operator delete(__p);
  }
  if (*((void *)&v181 + 1) && v182 != v180) {
    operator delete(v180);
  }
  return v129;
}

void sub_100016220( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (STACK[0x650] && a11 != STACK[0x640]) {
    operator delete((void *)STACK[0x640]);
  }
  if (STACK[0x8E8])
  {
    if (a12 != STACK[0x8D8]) {
      operator delete((void *)STACK[0x8D8]);
    }
  }

  _Unwind_Resume(a1);
}

unint64_t sub_1000163A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v54 = xmmword_100142530;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&__int128 v42 = *(void *)a3;
  *((void *)&v42 + 1) = v4;
  if (v4)
  {
    BOOL v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  v43[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v44 = *(void *)(a3 + 48);
  __int128 v45 = *(_OWORD *)(a3 + 56);
  __int128 v46 = *(_OWORD *)(a3 + 72);
  __int128 v47 = *(_OWORD *)(a3 + 88);
  char v48 = *(_BYTE *)(a3 + 104);
  unint64_t v7 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v49 = *(void *)(a3 + 112);
  int v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v51 = *(_OWORD *)(a3 + 128);
  uint64_t v52 = *(void *)(a3 + 144);
  char v53 = *(_BYTE *)(a3 + 152);
  uint64_t v10 = *(void *)(a4 + 8);
  *(void *)&__int128 v30 = *(void *)a4;
  *((void *)&v30 + 1) = v10;
  if (v10)
  {
    __int128 v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v31[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v32 = *(void *)(a4 + 48);
  __int128 v33 = *(_OWORD *)(a4 + 56);
  __int128 v34 = *(_OWORD *)(a4 + 72);
  __int128 v35 = *(_OWORD *)(a4 + 88);
  char v36 = *(_BYTE *)(a4 + 104);
  unint64_t v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v37 = *(void *)(a4 + 112);
  int8x16_t v38 = v13;
  if (v13)
  {
    __int128 v14 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  __int128 v39 = *(_OWORD *)(a4 + 128);
  uint64_t v40 = *(void *)(a4 + 144);
  char v41 = *(_BYTE *)(a4 + 152);
  unint64_t v16 = sub_10001890C((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  __int128 v17 = v38;
  if (v38)
  {
    unint64_t v18 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v50;
  if (v50)
  {
    __int128 v24 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  char v26 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    __int128 v27 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v16;
}

void sub_100016614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100016640(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5 = sub_10003BA04((uint64_t)v48, (uint64_t)v38);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(void *)a1 + 144LL))( a1,  a2,  v41,  v38,  v5);
  unint64_t v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v39;
  if (v39)
  {
    __int128 v11 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  unint64_t v13 = v43;
  if (v43)
  {
    __int128 v14 = (unint64_t *)&v43->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v42;
  if (v42)
  {
    __int128 v17 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = v54;
  if (v54)
  {
    uint64_t v20 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v53;
  if (v53)
  {
    uint64_t v23 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = v52;
  if (v52)
  {
    char v26 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  unint64_t v28 = v51;
  if (v51)
  {
    uint64_t v29 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  __int128 v31 = v50;
  if (v50)
  {
    uint64_t v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  __int128 v34 = v49;
  if (v49)
  {
    __int128 v35 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (v46 && &v47 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v44);
  return v6;
}

void sub_100016950( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t sub_1000169A0(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v7 = a3[2];
  unint64_t v6 = a3[3];
  uint64_t v8 = a3 + 2;
  uint64_t v9 = 512LL;
  if (v7 > 0x200) {
    uint64_t v9 = a3[2];
  }
  if (!v7) {
    uint64_t v9 = 0LL;
  }
  *(void *)&__int128 v212 = v6 >> 9;
  *((void *)&v212 + 1) = (v6 + v9 + 511) >> 9;
  LOBYTE(v213) = 2;
  uint64_t v10 = sub_10000D800(a1 + 664, (uint64_t)&v212);
  uint64_t v188 = a1;
  uint64_t v11 = a1 + 672;
  if (a1 + 672 != v10) {
    uint64_t v11 = *(void *)(v10 + 56);
  }
  uint64_t v12 = v11 + 24;
  *(_OWORD *)__int128 __p = v212;
  __p[16] = v213;
  uint64_t v13 = a3[1];
  *(void *)&__p[24] = *a3;
  *(void *)&__int128 v226 = v13;
  if (v13)
  {
    __int128 v14 = (unint64_t *)(v13 + 8);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  *((void *)&v226 + 1) = v7;
  sub_10001F668(v12, (__int128 *)__p);
  unint64_t v16 = (std::__shared_weak_count *)v226;
  if ((void)v226)
  {
    __int128 v17 = (unint64_t *)(v226 + 8);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = *((unsigned int *)a3 + 4);
  uint64_t v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v209 = *a3;
  v210 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }

  v211[0] = *v8;
  *(_OWORD *)((char *)v211 + 9) = *(_OWORD *)((char *)v8 + 9);
  unsigned int v208 = *(_DWORD *)(v188 + 1184);
  *(void *)__int128 __p = &v208;
  uint64_t v23 = sub_10001E2F8((uint64_t **)(a2 + 16), &v208, (uint64_t)&unk_1001447DC, (_DWORD **)__p);
  unint64_t v24 = v23[5];
  unint64_t v25 = v23[6];
  v206 = v24;
  v207 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    char v26 = (unint64_t *)(v25 + 1);
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  if (v24)
  {
    uint64_t v28 = (*(uint64_t (**)(uint64_t *, void *))(*v24 + 80))(v24, a3);
    sub_10011ED18((uint64_t)&v206, (uint64_t)__p);
    uint64_t v29 = *(void *)__p;
    unint64_t v30 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8])
    {
      __int128 v31 = (unint64_t *)(*(void *)&__p[8] + 8LL);
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }

    if ((int)v28 < 1)
    {
      if ((_DWORD)v28 == -5)
      {
        uint64_t v40 = v207;
        v206 = 0LL;
        v207 = 0LL;
        if (v40)
        {
          char v41 = (unint64_t *)&v40->__shared_owners_;
          do
            unint64_t v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }

        uint64_t v28 = v19;
      }
    }

    else
    {
      uint64_t v33 = *(void *)(v29 + 64);
      __int128 v34 = *(std::__shared_weak_count **)(v29 + 72);
      if (v34)
      {
        __int128 v35 = (unint64_t *)&v34->__shared_owners_;
        do
          unint64_t v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }

      *(_OWORD *)__int128 __p = *(_OWORD *)(v29 + 80);
      *(_OWORD *)&__p[9] = *(_OWORD *)(v29 + 89);
      uint64_t v37 = v210;
      uint64_t v209 = v33;
      v210 = v34;
      if (v37)
      {
        int8x16_t v38 = (unint64_t *)&v37->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      v211[0] = *(_OWORD *)__p;
      *(_OWORD *)((char *)v211 + 9) = *(_OWORD *)&__p[9];
    }

    sub_10001F3CC(v29);
    uint64_t v19 = v28;
  }

  if ((int)v19 <= 0)
  {
    *(void *)&__int128 v217 = "io_result_t DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::write(DiskImage::Context &, const sg_entry &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v217 + 1) = 1016LL;
    LODWORD(v21std::iostream::~basic_iostream(v2, v3 + 8) = 16;
    sub_10001F450(__p, &v217);
    sub_10000552C(&v236, (uint64_t)"DiskImageUDIFWritable: context backend returned ", 48LL);
    std::ostream::operator<<(&v236, v19);
    sub_10000552C(&v236, (uint64_t)" while writing ", 15LL);
    sub_10011E9EC(&v236, a3);
    std::ostream::~ostream(&v236, off_100173CF0);
    sub_10001FDF8((uint64_t)__p);
    std::ios::~ios(&v237);
    sub_10001F538(v188);
    else {
      uint64_t v60 = (int)v19;
    }
    goto LABEL_264;
  }

  if (!v206)
  {
    sub_100020B9C((int *)__p, 1);
    unsigned int v208 = *(_DWORD *)__p;
  }

  uint64_t v43 = *(void *)(v188 + 888);
  *(_OWORD *)__int128 __p = v212;
  __p[16] = v213;
  uint64_t v44 = *(void *)&v211[0];
  *(void *)&__p[24] = v209;
  *(void *)&__int128 v226 = v210;
  if (v210)
  {
    __int128 v45 = (unint64_t *)&v210->__shared_owners_;
    do
      unint64_t v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }

  *((void *)&v226 + 1) = v44;
  sub_10001F668(v43, (__int128 *)__p);
  uint64_t v47 = (std::__shared_weak_count *)v226;
  if ((void)v226)
  {
    char v48 = (unint64_t *)(v226 + 8);
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  v185 = (uint64_t *)v8;
  __int128 v51 = v210;
  uint64_t v50 = *(void *)&v211[0];
  __int128 v200 = v212;
  unsigned int v52 = v208;
  uint64_t v201 = v213;
  uint64_t v53 = v209;
  v203 = v210;
  if (v210)
  {
    __int128 v54 = (unint64_t *)&v210->__shared_owners_;
    do
      unint64_t v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }

  *(_OWORD *)v204 = v211[0];
  *(_OWORD *)&v204[9] = *(_OWORD *)((char *)v211 + 9);
  uint64_t v57 = *(void *)(a2 + 40);
  uint64_t v56 = *(std::__shared_weak_count **)(a2 + 48);
  v205 = v56;
  if (v56)
  {
    uint64_t v58 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }

  v214[0] = *(_DWORD *)((char *)&v201 + 1);
  *(_DWORD *)((char *)v214 + 3) = HIDWORD(v201);
  std::locale v189 = (std::mutex *)(v188 + 904);
  std::mutex::lock((std::mutex *)(v188 + 904));
  if (*(_BYTE *)(v188 + 1176))
  {
    std::mutex::unlock(v189);
    LODWORD(v6crc32(0LL, 0LL, 0) = -53;
    uint64_t v61 = v188;
    goto LABEL_64;
  }

  *(_OWORD *)__int128 __p = v200;
  __p[16] = v201;
  *(_DWORD *)&__p[17] = v214[0];
  *(_DWORD *)&__p[20] = *(_DWORD *)((char *)v214 + 3);
  __int128 v226 = v200;
  uint64_t v227 = v201;
  *(void *)&__int128 v228 = v50;
  *(void *)&__p[24] = &off_100174280;
  char v230 = 0;
  *((void *)&v228 + 1) = v202;
  uint64_t v229 = v188 + 880;
  *(void *)&__int128 v231 = v53;
  *((void *)&v231 + 1) = v51;
  v203 = 0LL;
  *(_OWORD *)((char *)v232 + 9) = *(_OWORD *)&v204[9];
  v232[0] = *(_OWORD *)v204;
  *(void *)&__int128 v233 = v188;
  *((void *)&v233 + 1) = v57;
  v234 = v56;
  v205 = 0LL;
  unsigned int v235 = v52;
  uint64_t v62 = (void *)(v188 + 984);
  BOOL v63 = (void *)(v188 + 984);
  __int128 v186 = (void *)(v188 + 984);
  uint64_t v64 = *(void **)(v188 + 984);
  if (!v64) {
    goto LABEL_79;
  }
  BOOL v63 = (void *)(v188 + 984);
  while (1)
  {
    while (1)
    {
      uint64_t v62 = v64;
      uint64_t v65 = v64 + 4;
      uint64_t v64 = (void *)*v62;
      BOOL v63 = v62;
      if (!*v62) {
        goto LABEL_79;
      }
    }

    BOOL v63 = v62 + 1;
    uint64_t v64 = (void *)v62[1];
    if (!v64) {
      goto LABEL_79;
    }
  }

  if (!*v63)
  {
LABEL_79:
    uint64_t v66 = operator new(0xC8uLL);
    v66[2] = *(_OWORD *)__p;
    v66[4] = v226;
    *((void *)v66 + 1crc32(0LL, 0LL, 0) = v227;
    *(_OWORD *)((char *)v66 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v228;
    uint64_t v67 = v234;
    *((void *)v66 + 6) = *(void *)&__p[16];
    *((void *)v66 + 7) = &off_100174280;
    *((void *)v66 + 13) = v229;
    *((_BYTE *)v66 + sub_100006224(v50 + 112) = v230;
    *(_OWORD *)((char *)v66 + 12crc32(0LL, 0LL, 0) = v231;
    __int128 v231 = 0uLL;
    *(_OWORD *)((char *)v66 + 145) = *(_OWORD *)((char *)v232 + 9);
    *(_OWORD *)((char *)v66 + 136) = v232[0];
    *(_OWORD *)((char *)v66 + 16std::iostream::~basic_iostream(v2, v3 + 8) = v233;
    *((void *)v66 + 23) = v67;
    *((void *)&v233 + 1) = 0LL;
    v234 = 0LL;
    *((_DWORD *)v66 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v235;
    *(void *)uint64_t v66 = 0LL;
    *((void *)v66 + 1) = 0LL;
    *((void *)v66 + 2) = v62;
    void *v63 = v66;
    uint64_t v68 = **(void **)(v188 + 976);
    if (v68)
    {
      *(void *)(v188 + 976) = v68;
      uint64_t v66 = (_OWORD *)*v63;
    }

    sub_10000CC58(*(uint64_t **)(v188 + 984), (uint64_t *)v66);
    ++*(void *)(v188 + 992);
  }

  unint64_t v69 = v234;
  uint64_t v61 = v188;
  if (v234)
  {
    uint64_t v70 = (unint64_t *)&v234->__shared_owners_;
    do
      unint64_t v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  uint64_t v72 = (std::__shared_weak_count *)*((void *)&v231 + 1);
  if (*((void *)&v231 + 1))
  {
    uint64_t v73 = (unint64_t *)(*((void *)&v231 + 1) + 8LL);
    do
      unint64_t v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

  if ((v201 & 2) != 0) {
    uint64_t v75 = v200;
  }
  else {
    uint64_t v75 = v200 + 1;
  }
  uint64_t v76 = *(void *)(v188 + 1168);
  std::mutex::unlock(v189);
  if (v75 != v76)
  {
LABEL_253:
    uint64_t v60 = *v185;
    goto LABEL_254;
  }

  uint64_t v198 = v188 + 1112;
  v199 = (uint64_t *)(v188 + 1000);
  uint64_t v184 = &unk_100142000;
  do
  {
    *(void *)__int128 __p = &__p[24];
    *(_OWORD *)&__p[8] = xmmword_100142520;
    std::mutex::lock(v189);
    char v77 = *(void **)(v61 + 976);
    unint64_t v78 = *(void *)(v61 + 1168);
    if (v77 != v186)
    {
      int v79 = *(void **)(v61 + 976);
      uint64_t v80 = v188 + 1000;
      while (!sub_1000EA308(v80, v198))
      {
        uint64_t v81 = v79[4];
        if ((v79[6] & 2) == 0) {
          ++v81;
        }
        if (v81 != v78) {
          break;
        }
        unint64_t v78 = v79[5] + (v79[6] & 1);
        uint64_t v82 = *(void *)(v61 + 1016);
        char v83 = *(_BYTE *)(v61 + 1024);
        while (v78 > (unint64_t)(v83 & 1) + v82 - 1)
        {
          sub_1000EA5F0(v199);
          char v83 = *(_BYTE *)(v61 + 1024);
          if ((v83 & 2) != 0) {
            unint64_t v78 = *(void *)(v61 + 1008);
          }
          else {
            unint64_t v78 = *(void *)(v61 + 1008) + 1LL;
          }
          uint64_t v82 = *(void *)(v61 + 1016);
        }

        v84 = (void *)v79[1];
        if (v84)
        {
          do
          {
            v85 = v84;
            v84 = (void *)*v84;
          }

          while (v84);
        }

        else
        {
          do
          {
            v85 = (void *)v79[2];
            BOOL v86 = *v85 == (void)v79;
            int v79 = v85;
          }

          while (!v86);
        }

        int v79 = v85;
        uint64_t v80 = v188 + 1000;
        if (v85 == v186)
        {
          int v79 = (void *)(v188 + 984);
          break;
        }
      }

      if (v77 != v79)
      {
        unint64_t v87 = 0LL;
        v88 = v77;
        do
        {
          unint64_t v89 = v87;
          v90 = (void *)v88[1];
          if (v90)
          {
            do
            {
              v91 = v90;
              v90 = (void *)*v90;
            }

            while (v90);
          }

          else
          {
            do
            {
              v91 = (void *)v88[2];
              BOOL v86 = *v91 == (void)v88;
              v88 = v91;
            }

            while (!v86);
          }

          ++v87;
          v88 = v91;
        }

        while (v91 != v79);
        if (*(void *)&__p[16] <= v89)
        {
          if (v89 >= 0xE38E38E38E38E3LL) {
            sub_10001A548("get_next_capacity, allocator's max size reached");
          }
          unint64_t v92 = (char *)operator new(144 * v87);
          v93 = v92;
          uint64_t v94 = *(void *)__p;
          v218 = __p;
          if (*(void *)&__p[8])
          {
            uint64_t v95 = 0LL;
            uint64_t v96 = 144LL * *(void *)&__p[8];
            do
            {
              v97 = &v92[v95];
              unint64_t v98 = (void *)(v94 + v95);
              __int128 v99 = *(_OWORD *)(v94 + v95 + 8);
              *((void *)v97 + 3) = *(void *)(v94 + v95 + 24);
              *(_OWORD *)(v97 + std::iostream::~basic_iostream(v2, v3 + 8) = v99;
              *((_OWORD *)v97 + 2) = *(_OWORD *)(v94 + v95 + 32);
              *(void *)v97 = &off_100174280;
              uint64_t v100 = *(void *)(v94 + v95 + 48);
              v97[56] = *(_BYTE *)(v94 + v95 + 56);
              *((void *)v97 + 6) = v100;
              *((_OWORD *)v97 + 4) = *(_OWORD *)(v94 + v95 + 64);
              __int128 v101 = *(_OWORD *)(v94 + v95 + 80);
              __int128 v102 = *(_OWORD *)(v94 + v95 + 89);
              v98[8] = 0LL;
              v98[9] = 0LL;
              *(_OWORD *)(v97 + 89) = v102;
              *((_OWORD *)v97 + 5) = v101;
              *((void *)v97 + 14) = *(void *)(v94 + v95 + 112);
              *(_OWORD *)(v97 + 12crc32(0LL, 0LL, 0) = *(_OWORD *)(v94 + v95 + 120);
              v98[15] = 0LL;
              v98[16] = 0LL;
              *((_DWORD *)v97 + 34) = *(_DWORD *)(v94 + v95 + 136);
              v95 += 144LL;
            }

            while (v96 != v95);
          }

          __int128 v217 = 0uLL;
          sub_100021718((uint64_t *)&v217);
          if (v94)
          {
            uint64_t v103 = *(void *)&__p[8];
            if (*(void *)&__p[8])
            {
              uint64_t v104 = v94 + 64;
              do
              {
                --v103;
                sub_100006224(v104 + 56);
                sub_100006224(v104);
                v104 += 144LL;
              }

              while (v103);
            }

            if (&__p[24] != *(_BYTE **)__p) {
              operator delete(*(void **)__p);
            }
          }

          *(void *)__int128 __p = v93;
          *(void *)&__p[16] = v87;
        }

        do
        {
          uint64_t v105 = *(void *)__p;
          uint64_t v106 = *(void *)&__p[8];
          uint64_t v107 = *(void *)__p + 144LL * *(void *)&__p[8];
          if (*(void *)&__p[8] == *(void *)&__p[16])
          {
            sub_100021768((uint64_t)__p, (_BYTE *)v107, (uint64_t)(v77 + 7), &v217);
          }

          else
          {
            *(void *)uint64_t v107 = &off_1001742C8;
            __int128 v108 = *((_OWORD *)v77 + 4);
            *(void *)(v107 + 24) = v77[10];
            *(_OWORD *)(v107 + std::iostream::~basic_iostream(v2, v3 + 8) = v108;
            *(_OWORD *)(v107 + 32) = *(_OWORD *)(v77 + 11);
            *(void *)uint64_t v107 = &off_100174280;
            uint64_t v109 = v77[13];
            *(_BYTE *)(v107 + 56) = *((_BYTE *)v77 + 112);
            *(void *)(v107 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v109;
            uint64_t v110 = v105 + 144 * v106;
            *(_OWORD *)(v110 + 64) = *(_OWORD *)(v77 + 15);
            v77[15] = 0LL;
            v77[16] = 0LL;
            __int128 v111 = *(_OWORD *)(v77 + 17);
            *(_OWORD *)(v110 + 89) = *(_OWORD *)((char *)v77 + 145);
            *(_OWORD *)(v110 + 8crc32(0LL, 0LL, 0) = v111;
            *(void *)(v110 + sub_100006224(v50 + 112) = v77[21];
            *(_OWORD *)(v110 + 12crc32(0LL, 0LL, 0) = *((_OWORD *)v77 + 11);
            v77[22] = 0LL;
            v77[23] = 0LL;
            *(_DWORD *)(v110 + 136) = *((_DWORD *)v77 + 48);
            ++*(void *)&__p[8];
          }

          v112 = (void *)v77[1];
          v113 = v77;
          if (v112)
          {
            do
            {
              v114 = v112;
              v112 = (void *)*v112;
            }

            while (v112);
          }

          else
          {
            do
            {
              v114 = (void *)v113[2];
              BOOL v86 = *v114 == (void)v113;
              v113 = v114;
            }

            while (!v86);
          }

          if (*(void **)(v61 + 976) == v77) {
            *(void *)(v61 + 976) = v114;
          }
          --*(void *)(v61 + 992);
          sub_10000D154(*(uint64_t **)(v61 + 984), v77);
          sub_100006224((uint64_t)(v77 + 22));
          sub_100006224((uint64_t)(v77 + 15));
          operator delete(v77);
          char v77 = v114;
        }

        while (v114 != v79);
      }
    }

    std::mutex::unlock(v189);
    if (!*(void *)&__p[8])
    {
      int v115 = 0;
      goto LABEL_234;
    }

    int v115 = 0;
    uint64_t v116 = *(void *)__p;
    uint64_t v197 = *(void *)__p + 144LL * *(void *)&__p[8];
    do
    {
      uint64_t v117 = *(void *)(v116 + 120);
      v118 = *(_BYTE **)(v116 + 80);
      if (*(_BYTE *)(v116 + 56))
      {
        unint64_t v119 = *(void *)(v116 + 40);
      }

      else
      {
        *(_BYTE *)(v116 + 56) = 1;
        int v120 = *(unint64_t **)(v116 + 48);
        uint64_t v121 = *(void *)(v116 + 32);
        do
          unint64_t v119 = __ldaxr(v120);
        while (__stlxr(v119 + v121, v120));
        *(void *)(v116 + 4crc32(0LL, 0LL, 0) = v119;
      }

      unint64_t v122 = *(void *)(v116 + 96);
      uint64_t v123 = *(void *)(v116 + 72);
      *(void *)&__int128 v217 = *(void *)(v116 + 64);
      *((void *)&v217 + 1) = v123;
      if (v123)
      {
        v124 = (unint64_t *)(v123 + 8);
        do
          unint64_t v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
      }

      v218 = v118;
      unint64_t v219 = v119;
      unint64_t v220 = v122;
      LOBYTE(v221) = 0;
      uint64_t v126 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v117 + 96LL))(v117, &v217);
      v127 = (std::__shared_weak_count *)*((void *)&v217 + 1);
      if (*((void *)&v217 + 1))
      {
        unint64_t v128 = (unint64_t *)(*((void *)&v217 + 1) + 8LL);
        do
          unint64_t v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }

      uint64_t v130 = *(void *)(v116 + 112);
      if ((int)v126 < 1)
      {
        sub_10001F538(*(void *)(v116 + 112));
        *(void *)&__int128 v215 = "DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::work::execute() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
        *((void *)&v215 + 1) = 974LL;
        int v216 = 16;
        sub_100021A40(&v217, &v215);
        sub_10000552C(&v222, (uint64_t)"DiskImageUDIFWritable: Sink backend returned ", 45LL);
        std::ostream::operator<<(&v222, v126);
        sub_10000552C(&v222, (uint64_t)" while writing ", 15LL);
        sub_10011E9EC(&v222, (void *)(v116 + 64));
        std::ostream::~ostream(&v222, off_1001743B8);
        sub_1000223CC((uint64_t)&v217);
        std::ios::~ios(v223);
        goto LABEL_222;
      }

      if (*(_BYTE *)(v116 + 56))
      {
        unint64_t v131 = *(void *)(v116 + 40);
      }

      else
      {
        *(_BYTE *)(v116 + 56) = 1;
        v132 = *(unint64_t **)(v116 + 48);
        uint64_t v133 = *(void *)(v116 + 32);
        do
          unint64_t v131 = __ldaxr(v132);
        while (__stlxr(v131 + v133, v132));
        *(void *)(v116 + 4crc32(0LL, 0LL, 0) = v131;
      }

      int v134 = *(_DWORD *)(v116 + 136);
      uint64_t v135 = sub_10000D800(v130 + 664, v116 + 8);
      if (v130 + 672 == v135)
      {
        unint64_t v136 = 0LL;
      }

      else
      {
        LOBYTE(v196) = *(_BYTE *)(v135 + 48);
        unint64_t v136 = *(void *)(v135 + 32);
        uint64_t v195 = *(void *)(v135 + 40);
      }

      v137 = (unint64_t *)(v130 + 688);
      unint64_t v138 = atomic_load((unint64_t *)(v130 + 688));
      unint64_t v139 = v131 + v126;
      do
      {
        unint64_t v140 = __ldaxr(v137);
        if (v140 != v138)
        {
          __clrex();
          while (1)
          {
            unint64_t v141 = __ldaxr(v137);
            if (v141 != v140) {
              break;
            }
            if (!__stlxr(v139, v137))
            {
              int v142 = 1;
LABEL_183:
              unint64_t v140 = v141;
              if (v142) {
                goto LABEL_184;
              }
            }
          }

          int v142 = 0;
          __clrex();
          goto LABEL_183;
        }
      }

      while (__stlxr(v139, v137));
LABEL_184:
      *(void *)&__int128 v215 = v130 + 192;
      BYTE8(v215) = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v130 + 192));
      if (v134 == 1 && *(_BYTE *)(v130 + 856))
      {
        uint64_t v192 = v126;
        uint64_t v143 = *(void *)(v116 + 8);
        uint64_t v144 = *(void *)(v116 + 16);
        char v145 = *(_BYTE *)(v116 + 24);
        char v146 = v145;
        v224[0] = *(_DWORD *)(v116 + 25);
        *(_DWORD *)((char *)v224 + 3) = *(_DWORD *)(v116 + 28);
        char v147 = v196;
        if ((v196 & 2) != 0) {
          unint64_t v148 = v136;
        }
        else {
          unint64_t v148 = v136 + 1;
        }
        uint64_t v193 = v143;
        if ((v145 & 2) != 0) {
          uint64_t v149 = v143;
        }
        else {
          uint64_t v149 = v143 + 1;
        }
        if (v148 == v149)
        {
          uint64_t v150 = v195;
        }

        else
        {
          char v187 = v145;
          uint64_t v190 = v144;
          *(void *)&__int128 v217 = v149 - 1;
          *((void *)&v217 + 1) = v149;
          LOBYTE(v21std::iostream::~basic_iostream(v2, v3 + 8) = 2;
          uint64_t v152 = sub_10000D800(v130 + 72, (uint64_t)&v217);
          sub_10000D4D8(v130 + 72, (uint64_t)&v217);
          if (v130 + 80 == v152)
          {
            uint64_t v144 = v190;
            uint64_t v150 = v195;
            char v147 = v196;
          }

          else
          {
            char v153 = *(_BYTE *)(v152 + 48);
            uint64_t v154 = (v153 & 1) + *(void *)(v152 + 40);
            if (v154 - 1 < v148)
            {
              uint64_t v144 = v190;
              uint64_t v150 = v195;
            }

            else
            {
              uint64_t v150 = v195;
              if (v149 == v154 && *(_DWORD *)(v152 + 56) == 1)
              {
                unint64_t v131 = *(void *)(v152 + 64);
                BOOL v86 = (v153 & 2) == 0;
                uint64_t v155 = *(void *)(v152 + 32);
                if (v86) {
                  ++v155;
                }
                uint64_t v192 = *(void *)(v152 + 72) + v126;
                uint64_t v193 = v155;
                sub_10000D0E4((uint64_t **)(v130 + 72), (uint64_t *)v152);
                v156 = (void *)v152;
                uint64_t v144 = (v187 & 1) + v190;
                operator delete(v156);
                uint64_t v150 = v195;
                char v146 = 2;
              }

              else
              {
                uint64_t v144 = v190;
              }
            }

            char v147 = v196;
          }
        }

        uint64_t v157 = v144 + (v146 & 1) - 1;
        if (v150 + (v147 & 1) - 1 == v157)
        {
          uint64_t v158 = v192;
          uint64_t v159 = v193;
          goto LABEL_220;
        }

        unint64_t v196 = v150 + (v147 & 1) - 1;
        uint64_t v191 = v144;
        *(void *)&__int128 v217 = v144 + (v146 & 1) - 1;
        *((void *)&v217 + 1) = v157 + 1;
        LOBYTE(v21std::iostream::~basic_iostream(v2, v3 + 8) = 2;
        uint64_t v160 = sub_10000D800(v130 + 72, (uint64_t)&v217);
        sub_10000D4D8(v130 + 72, (uint64_t)&v217);
        if (v130 + 80 == v160) {
          goto LABEL_214;
        }
        uint64_t v161 = *(void *)(v160 + 32);
        if ((*(_BYTE *)(v160 + 48) & 2) == 0) {
          ++v161;
        }
        if (v157 != v161)
        {
LABEL_214:
          uint64_t v144 = v191;
          uint64_t v158 = v192;
          uint64_t v159 = v193;
        }

        else
        {
          uint64_t v159 = v193;
          if ((unint64_t)(*(_BYTE *)(v160 + 48) & 1) + *(void *)(v160 + 40) - 1 > v196)
          {
            uint64_t v158 = v192;
            goto LABEL_219;
          }

          uint64_t v158 = v192;
          if (*(_DWORD *)(v160 + 56) == 1)
          {
            if ((v146 & 2) == 0) {
              uint64_t v159 = v193 + 1;
            }
            uint64_t v194 = v159;
            uint64_t v162 = (*(_BYTE *)(v160 + 48) & 1) + *(void *)(v160 + 40);
            uint64_t v163 = *(void *)(v160 + 72) + v192;
            sub_10000D0E4((uint64_t **)(v130 + 72), (uint64_t *)v160);
            uint64_t v164 = (void *)v160;
            uint64_t v144 = v162;
            uint64_t v159 = v194;
            operator delete(v164);
            uint64_t v158 = v163;
            char v146 = 2;
          }

          else
          {
LABEL_219:
            uint64_t v144 = v191;
          }
        }

LABEL_220:
        *(void *)&__int128 v217 = v159;
        *((void *)&v217 + 1) = v144;
        LOBYTE(v21std::iostream::~basic_iostream(v2, v3 + 8) = v146;
        *(_DWORD *)((char *)&v218 + 1) = v224[0];
        HIDWORD(v21std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((char *)v224 + 3);
        LODWORD(v219) = 1;
        unint64_t v220 = v131;
        uint64_t v221 = v158;
        sub_100021B28((uint64_t **)(v130 + 72), (uint64_t)&v217);
      }

      else
      {
        __int128 v151 = *(_OWORD *)(v116 + 8);
        v218 = *(_BYTE **)(v116 + 24);
        __int128 v217 = v151;
        LODWORD(v219) = v134;
        unint64_t v220 = v131;
        uint64_t v221 = v126;
        sub_100021B28((uint64_t **)(v130 + 72), (uint64_t)&v217);
      }

      sub_10001D01C((uint64_t)&v215);
LABEL_222:
      if ((v126 & 0x80000000) != 0)
      {
        *(void *)&__int128 v215 = "ExecutionSchedulerSortedConsecutiveIt<DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::work, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::run_vectored_works(works_t &) [Context = DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::work, LockingPolicy = locks::Std, iterator_type = boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>]";
        *((void *)&v215 + 1) = 1703LL;
        int v216 = 16;
        sub_100020F7C(&v217, &v215);
        sub_10000552C(&v222, (uint64_t)"ExecutionSchedulerSorted: work returned ", 40LL);
        std::ostream::operator<<(&v222, v126 & ((int)v126 >> 31));
        std::ostream::~ostream(&v222, off_100174130);
        sub_1000210E0((uint64_t)&v217);
        std::ios::~ios(v223);
      }

      if (!v115) {
        int v115 = v126 & ((int)v126 >> 31);
      }
      v116 += 144LL;
    }

    while (v116 != v197);
    uint64_t v61 = v188;
    if (v115 && !*(_DWORD *)(v188 + 968))
    {
      sub_10002049C((uint64_t)v189);
      int v168 = 1;
      LODWORD(v184) = v115;
    }

    else
    {
      uint64_t v165 = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        uint64_t v166 = *(void *)__p + 64LL;
        do
        {
          --v165;
          sub_100006224(v166 + 56);
          sub_100006224(v166);
          v166 += 144LL;
        }

        while (v165);
      }

LABEL_234:
      *(void *)&__p[8] = 0LL;
      std::mutex::lock(v189);
      *(void *)(v61 + 116std::iostream::~basic_iostream(v2, v3 + 8) = v78;
      uint64_t v167 = *(void *)(v61 + 976);
      if ((void *)v167 == v186 || sub_1000EA308((uint64_t)v199, v198))
      {
        std::mutex::unlock(v189);
        int v168 = 3;
      }

      else
      {
        uint64_t v169 = *(void *)(v167 + 32);
        if ((*(_BYTE *)(v167 + 48) & 2) == 0) {
          ++v169;
        }
        BOOL v170 = v169 == *(void *)(v61 + 1168);
        std::mutex::unlock(v189);
        if (v170) {
          int v168 = 0;
        }
        else {
          int v168 = 3;
        }
      }
    }

    uint64_t v171 = *(void *)&__p[8];
    if (*(void *)&__p[8])
    {
      uint64_t v172 = *(void *)__p + 64LL;
      do
      {
        --v171;
        sub_100006224(v172 + 56);
        sub_100006224(v172);
        v172 += 144LL;
      }

      while (v171);
    }

    if (*(void *)&__p[16] && &__p[24] != *(_BYTE **)__p) {
      operator delete(*(void **)__p);
    }
  }

  while (!v168);
  LODWORD(v6crc32(0LL, 0LL, 0) = (_DWORD)v184;
  if (v168 == 3) {
    LODWORD(v6crc32(0LL, 0LL, 0) = v115;
  }
  if (!(_DWORD)v60) {
    goto LABEL_253;
  }
LABEL_64:
  sub_10001F538(v61);
  else {
    uint64_t v60 = (int)v60;
  }
LABEL_254:
  if (v205)
  {
    char v173 = (unint64_t *)&v205->__shared_owners_;
    do
      unint64_t v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }

  if (v203)
  {
    char v175 = (unint64_t *)&v203->__shared_owners_;
    do
      unint64_t v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }

LABEL_264:
  v177 = v207;
  if (v207)
  {
    v178 = (unint64_t *)&v207->__shared_owners_;
    do
      unint64_t v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }

  __int128 v180 = v210;
  if (v210)
  {
    __int128 v181 = (unint64_t *)&v210->__shared_owners_;
    do
      unint64_t v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }

  return v60;
}

void sub_100017D9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, std::mutex *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char a56)
{
}

uint64_t sub_100017EB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 3)
  {
    *(void *)&__int128 v34 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
    *((void *)&v34 + 1) = 1005LL;
    int v35 = 16;
    sub_100022988(&v36, &v34);
    sub_10000552C(&v39, (uint64_t)"DiskImageUDIFWritable: got a flush with error, aborting", 55LL);
    std::ostream::~ostream(&v39, off_1001745D8);
    sub_100022DA4((uint64_t)&v36);
    std::ios::~ios(v40);
    sub_10001F538(a1);
    return 4294967274LL;
  }

  unint64_t v6 = *(void **)(a2 + 16);
  unint64_t v7 = (void *)(a2 + 24);
  if (v6 != (void *)(a2 + 24))
  {
    unsigned int v8 = 0;
    while (1)
    {
      uint64_t v9 = v6 + 5;
      if (v6[5])
      {
        sub_10011ED18((uint64_t)(v6 + 5), (uint64_t)&v36);
        uint64_t v11 = v36;
        uint64_t v10 = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            unint64_t v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }

        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16LL))(v11, 1LL);
        if ((_DWORD)v14)
        {
          uint64_t v15 = v14;
          *(void *)&__int128 v34 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
          *((void *)&v34 + 1) = 1005LL;
          int v35 = 16;
          sub_100022A70(&v36, &v34);
          sub_10000552C(&v39, (uint64_t)"Flush failed. BackendSG = ", 26LL);
          sub_10011EBB4((uint64_t)&v39, v11);
          sub_10000552C(&v39, (uint64_t)" ret = ", 7LL);
          std::ostream::operator<<(&v39, v15);
          std::ios_base::getloc((const std::ios_base *)&v40[*(void *)(v39 - 24) - 8]);
          unint64_t v16 = std::locale::use_facet(&v41, &std::ctype<char>::id);
          uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
          std::locale::~locale(&v41);
          std::ostream::put(&v39, v17);
          std::ostream::flush(&v39);
          std::ostream::~ostream(&v39, off_1001747F8);
          sub_1000233DC((uint64_t)&v36);
        }

        else
        {
          uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 16LL))(*v9, 1LL);
          if (!(_DWORD)v18)
          {
            unint64_t v24 = *(std::__shared_weak_count **)(v11 + 72);
            uint64_t v36 = *(void *)(v11 + 64);
            uint64_t v37 = v24;
            if (v24)
            {
              unint64_t v25 = (unint64_t *)&v24->__shared_owners_;
              do
                unint64_t v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }

            v38[0] = *(_OWORD *)(v11 + 80);
            *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v11 + 89);
            if (*(void *)&v38[0])
            {
              (*(void (**)(void, uint64_t *))(**(void **)(a2 + 40) + 96LL))(*(void *)(a2 + 40), &v36);
              sub_10001F3CC(v11);
            }

            unint64_t v27 = v37;
            if (v37)
            {
              uint64_t v28 = (unint64_t *)&v37->__shared_owners_;
              do
                unint64_t v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }

            goto LABEL_17;
          }

          uint64_t v15 = v18;
          *(void *)&__int128 v34 = "int DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::flush(DiskImage::Context &, di_flush_mode) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
          *((void *)&v34 + 1) = 1005LL;
          int v35 = 16;
          sub_100022B58(&v36, &v34);
          sub_10000552C(&v39, (uint64_t)"Flush failed. Backend = ", 24LL);
          std::ostream::operator<<(&v39, *v9);
          sub_10000552C(&v39, (uint64_t)" ret = ", 7LL);
          std::ostream::operator<<(&v39, v15);
          std::ios_base::getloc((const std::ios_base *)&v40[*(void *)(v39 - 24) - 8]);
          uint64_t v19 = std::locale::use_facet(&v41, &std::ctype<char>::id);
          uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
          std::locale::~locale(&v41);
          std::ostream::put(&v39, v20);
          std::ostream::flush(&v39);
          std::ostream::~ostream(&v39, off_100174A18);
          sub_100023A14((uint64_t)&v36);
        }

        std::ios::~ios(v40);
        if (!v8) {
          unsigned int v8 = v15;
        }
      }

void sub_1000183B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_100018438()
{
  return 4294967251LL;
}

__n128 sub_100018448@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void *sub_100018454(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = off_100172A70;
  v2[1] = a1;
  v2[3] = 0LL;
  __int128 v3 = (char *)(v2 + 3);
  v2[2] = v2 + 3;
  v2[4] = 0LL;
  v2[5] = 0LL;
  v2[6] = 0LL;
  sub_1000F61C4(a1 + 64, (uint64_t)&v10);
  sub_100019E30((uint64_t)(v2 + 2), (void *)v2[3]);
  uint64_t v4 = v11;
  v2[2] = v10;
  v2[3] = v4;
  uint64_t v5 = v12;
  v2[4] = v12;
  if (v5)
  {
    v4[2] = v3;
    uint64_t v10 = &v11;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    v2[2] = v3;
  }

  sub_1000198A4((uint64_t)(v2 + 5), &v13);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    unint64_t v7 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_100019E30((uint64_t)&v10, v11);
  *((_BYTE *)v2 + 56) = 1;
  return v2;
}

void sub_100018568(_Unwind_Exception *a1)
{
}

uint64_t sub_100018590(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5 = sub_10003BA04((uint64_t)v48, (uint64_t)v38);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, double))(*(void *)a1 + 152LL))( a1,  a2,  v41,  v38,  v5);
  unint64_t v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v39;
  if (v39)
  {
    uint64_t v11 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  __int128 v13 = v43;
  if (v43)
  {
    uint64_t v14 = (unint64_t *)&v43->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = v42;
  if (v42)
  {
    uint64_t v17 = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = v54;
  if (v54)
  {
    uint64_t v20 = (unint64_t *)&v54->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v53;
  if (v53)
  {
    BOOL v23 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = v52;
  if (v52)
  {
    unint64_t v26 = (unint64_t *)&v52->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v51;
  if (v51)
  {
    unint64_t v29 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  __int128 v31 = v50;
  if (v50)
  {
    uint64_t v32 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  __int128 v34 = v49;
  if (v49)
  {
    int v35 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  if (v46 && &v47 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v44);
  return v6;
}

void sub_1000188A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t sub_1000188F0()
{
  return 4294967251LL;
}

double sub_1000188F8@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100018904()
{
  return 0LL;
}

unint64_t sub_10001890C(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  unint64_t v15 = sub_100018B28(a1, &v40, (uint64_t)&v29, a4, 0);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    uint64_t v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    BOOL v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  unint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    unint64_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_100018AFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

unint64_t sub_100018B28(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v8 = 0LL;
  unint64_t v9 = *(void *)(a3 + 144);
  v37[0] = 0;
  v37[528] = 0;
  while (!sub_10003B85C((uint64_t)a2, a3))
  {
    if (a2[18] >= v9 || v8 >= a4) {
      break;
    }
    if (sub_1000BE308())
    {
      *(void *)&__int128 v35 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = std::__bind<io_result_t (DiskImage::*)(DiskImage::Context &, const sg_entry &), DiskImage *, std::reference_wrapper<DiskImage::Context>, const std::placeholders::__ph<1> &>]";
      *((void *)&v35 + 1) = 142LL;
      int v36 = 2;
      sub_100018E78(v30, &v35);
      sub_10000552C(&v33, (uint64_t)"sg: ", 4LL);
      sub_10011E9EC(&v33, a2);
      std::ostream::~ostream(&v33, off_100172858);
      sub_100019104((uint64_t)v30);
      std::ios::~ios(&v34);
    }

    v30[0] = 0LL;
    v30[1] = v9;
    char v31 = 2;
    sub_10007B490(a2, (uint64_t)v30, (uint64_t)&v35);
    uint64_t v11 = *(void *)(a1 + 8);
    __int128 v12 = *(uint64_t (**)(void *, void, __int128 *))a1;
    __int128 v13 = (void *)(*(void *)(a1 + 16) + (v11 >> 1));
    if ((v11 & 1) != 0) {
      __int128 v12 = *(uint64_t (**)(void *, void, __int128 *))(*v13 + v12);
    }
    int64_t v14 = v12(v13, *(void *)(a1 + 24), &v35);
    unint64_t v16 = v14;
    BOOL v17 = v14 >= 0 || (_DWORD)v14 == 0;
    char v18 = v17;
    if (v17)
    {
      uint64_t v19 = v15;
      if (sub_10003DA10((uint64_t)a2, a3, v15, v14))
      {
        sub_100019A88((uint64_t)v28, (uint64_t)a2);
        sub_10003D9D4((uint64_t)v28, a3, v19, v16, a4, (uint64_t)v30);
        sub_100018F60((uint64_t)v37, (uint64_t)v30);
        sub_100018FA4((uint64_t)v30);
        sub_100006224((uint64_t)&v29);
        sub_100006224((uint64_t)v28);
        sub_10003BD04((uint64_t)v37, (uint64_t)v30);
        sub_100018FFC((uint64_t)a2, (uint64_t)v30);
        sub_100006224((uint64_t)v32);
        sub_100006224((uint64_t)v30);
        sub_10003BA04((uint64_t)v37, (uint64_t)v30);
        sub_100018FFC(a3, (uint64_t)v30);
        sub_100006224((uint64_t)v32);
        sub_100006224((uint64_t)v30);
      }

      if ((a5 & 1) != 0) {
        sub_10003C884((uint64_t)a2, v16);
      }
      else {
        sub_10003CA5C((uint64_t)a2, v16);
      }
      v8 += v16;
    }

    else
    {
      else {
        uint64_t v23 = -(int)v14;
      }
      unint64_t v25 = -v23;
    }

    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      unint64_t v21 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    if ((v18 & 1) == 0) {
      goto LABEL_37;
    }
  }

  unint64_t v25 = v8;
LABEL_37:
  sub_100019A28((uint64_t)v37);
  return v25;
}

void sub_100018E04(_Unwind_Exception *a1)
{
}

void *sub_100018E78(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100019088((uint64_t)a1, a2);
  *a1 = off_100172790;
  a1[45] = &off_100172890;
  a1[46] = &off_1001728B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172790;
  a1[45] = off_100172818;
  a1[46] = off_100172840;
  return a1;
}

void sub_100018EFC(_Unwind_Exception *a1)
{
}

uint64_t sub_100018F20(uint64_t a1)
{
  return a1;
}

uint64_t sub_100018F60(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_1000196C0(a1, a2);
  }

  else
  {
    sub_100019908(a1, a2);
    *(_BYTE *)(a1 + 52std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  }

  return a1;
}

uint64_t sub_100018FA4(uint64_t a1)
{
  uint64_t v2 = a1 + 368;
  sub_100006224(a1 + 480);
  sub_100006224(v2);
  sub_100006224(a1 + 320);
  sub_100006224(a1 + 208);
  sub_100006224(a1 + 152);
  sub_100006224(a1 + 64);
  return a1;
}

uint64_t sub_100018FFC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  sub_1000198A4(a1 + 112, (__int128 *)(a2 + 112));
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v7;
  return a1;
}

uint64_t sub_100019088(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172928;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000190F0(_Unwind_Exception *a1)
{
}

uint64_t sub_100019104(uint64_t a1)
{
  *(void *)a1 = off_100172928;
  sub_10001937C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000191A0(char *a1)
{
}

uint64_t sub_1000191E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100019218(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100019264(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172858);
  sub_100019104(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001929C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172858);
  sub_100019104((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000192DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172858);
  sub_100019104(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001931C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172858);
  sub_100019104((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100019368(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100019104(a1);
  operator delete(v1);
}

uint64_t sub_10001937C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000194CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000194A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000194CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 545LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    int64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        BOOL v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 545LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_1000196C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  sub_1000198A4(a1 + 64, (__int128 *)(a2 + 64));
  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + sub_100006224(v50 + 112) = v8;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  sub_1000198A4(a1 + 152, (__int128 *)(a2 + 152));
  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 20crc32(0LL, 0LL, 0) = *(_BYTE *)(a2 + 200);
  sub_10003BB5C(&v22, a1, v4, 1LL);
  sub_100018FFC(a1 + 368, (uint64_t)&v22);
  uint64_t v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  __int128 v12 = v23;
  if (v23)
  {
    uint64_t v13 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_10003BB5C(&v22, a1, a1 + 96, 0LL);
  sub_100018FFC(a1 + 208, (uint64_t)&v22);
  os_log_type_t v15 = v24;
  if (v24)
  {
    uint64_t v16 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  char v18 = v23;
  if (v23)
  {
    uint64_t v19 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return a1;
}

uint64_t sub_1000198A4(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

uint64_t sub_100019908(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + sub_100006224(v50 + 112) = v7;
  *(_OWORD *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = v8;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a2 + 152) = 0LL;
  *(void *)(a2 + 16crc32(0LL, 0LL, 0) = 0LL;
  *(_OWORD *)(a1 + 16std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 20crc32(0LL, 0LL, 0) = *(_BYTE *)(a2 + 200);
  sub_10003BB5C(a1 + 208, a1, a1 + 96, 0LL);
  sub_10003BB5C(a1 + 368, a1, v4, 1LL);
  return a1;
}

void sub_1000199F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100019A28(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    sub_100006224(a1 + 480);
    sub_100006224(a1 + 368);
    sub_100006224(a1 + 320);
    sub_100006224(a1 + 208);
    sub_100006224(a1 + 152);
    sub_100006224(a1 + 64);
  }

  return a1;
}

__n128 sub_100019A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 4std::iostream::~basic_iostream(v2, v3 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  __int128 v7 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + sub_100006224(v50 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = result;
  uint64_t v12 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  return result;
}

uint64_t sub_100019B24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100019C5C(a1, a2);
  *(void *)uint64_t v3 = off_100172A00;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v3 + 128));
  return a1;
}

void sub_100019B58(_Unwind_Exception *a1)
{
}

void sub_100019B6C(uint64_t a1)
{
  *(void *)a1 = off_1001729A8;
  sub_10000A494(a1 + 632, *(void **)(a1 + 640));
  sub_10001A1BC(*(void **)(a1 + 608));
  sub_100024B00(a1 + 304);
  *(void *)a1 = off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = (void *)sub_100019D3C(a1);
  operator delete(v2);
}

void *sub_100019BE0@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[80];
  unsigned int v4 = *a2;
  if (!v3) {
    goto LABEL_12;
  }
  __int128 v5 = result + 80;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      __int128 v5 = (_DWORD *)v3;
    }
    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v5 != (_DWORD *)(result + 80) && v4 >= v5[7])
  {
    *(_DWORD *)a3 = v5[8];
    *(_BYTE *)(a3 + 4) = 1;
  }

  else
  {
LABEL_12:
    unsigned int v9 = *a2;
    return sub_1000F5D68(&v9, a3);
  }

  return result;
}

uint64_t sub_100019C5C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = off_1001907D0;
  *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v2;
  uint64_t v3 = (void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v4;
  uint64_t v5 = result + 16;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(result + 24) = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = v3;
    void *v3 = 0LL;
    *(void *)(a2 + 24) = 0LL;
  }

  else
  {
    *(void *)(result + std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  }

  *(void *)(result + 32) = *(void *)(a2 + 32);
  BOOL v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(result + 4crc32(0LL, 0LL, 0) = v8;
  uint64_t v9 = result + 40;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(result + 4std::iostream::~basic_iostream(v2, v3 + 8) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 32) = v7;
    *BOOL v7 = 0LL;
    *(void *)(a2 + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

  else
  {
    *(void *)(result + 32) = v9;
  }

  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0LL;
  *(void *)(result + 72) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 8crc32(0LL, 0LL, 0) = v12;
  *(void *)(result + 104) = *(void *)(a2 + 104);
  uint64_t v13 = (void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(result + sub_100006224(v50 + 112) = v14;
  uint64_t v15 = result + 112;
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(result + 12crc32(0LL, 0LL, 0) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *(void *)(a2 + 104) = v13;
    void *v13 = 0LL;
    *(void *)(a2 + 12crc32(0LL, 0LL, 0) = 0LL;
  }

  else
  {
    *(void *)(result + 104) = v15;
  }

  return result;
}

uint64_t sub_100019D3C(uint64_t a1)
{
  *(void *)a1 = off_1001907D0;
  sub_100019E30(a1 + 104, *(void **)(a1 + 112));
  uint64_t v2 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  sub_100006224(a1 + 56);
  sub_10000A494(a1 + 32, *(void **)(a1 + 40));
  sub_10000A494(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100019DA4(uint64_t a1)
{
  *(void *)a1 = off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  return sub_100019D3C(a1);
}

void sub_100019DE8(uint64_t a1)
{
  *(void *)a1 = off_100172A00;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 192));
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = (void *)sub_100019D3C(a1);
  operator delete(v2);
}

void sub_100019E30(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100019E30(a1, *a2);
    sub_100019E30(a1, a2[1]);
    sub_100006224((uint64_t)(a2 + 5));
    operator delete(a2);
  }

__n128 sub_100019E78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 850045863LL;
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v2 = (void *)(a2 + 80);
  uint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = v3;
  uint64_t v4 = a1 + 80;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 72) = v2;
    *uint64_t v2 = 0LL;
    *(void *)(a2 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  }

  else
  {
    *(void *)(a1 + 72) = v4;
  }

  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a1 + 96) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 12crc32(0LL, 0LL, 0) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0LL;
  *(void *)(a1 + 152) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 160);
  __int128 v11 = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 16crc32(0LL, 0LL, 0) = v10;
  *(_OWORD *)(a1 + 176) = v11;
  uint64_t v12 = *(void *)(a2 + 208);
  *(void *)(a2 + 20std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = v12;
  __n128 result = *(__n128 *)(a2 + 216);
  __int128 v14 = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 24std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v14;
  *(__n128 *)(a1 + 216) = result;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_BYTE *)(a1 + 272) = 0;
  return result;
}

_DWORD *sub_100019F4C(_DWORD *a1)
{
  *a1 = 0;
  v3[0] = xmmword_100142540;
  v3[1] = xmmword_100142550;
  uint64_t v4 = 0x900000008LL;
  int v5 = 10;
  sub_100019FE4((uint64_t)"checksum_type", 0, v3, 11LL);
  return a1;
}

uint64_t sub_100019FE4(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  if (!a4)
  {
LABEL_5:
    uint64_t v5 = result;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid value";
    exception[3] = "value validator";
    void *exception = &off_100172A40;
    exception[1] = v5;
    *((_DWORD *)exception + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  }

  uint64_t v4 = 4 * a4;
  while (*a3 != a2)
  {
    ++a3;
    v4 -= 4LL;
    if (!v4) {
      goto LABEL_5;
    }
  }

  return result;
}

void sub_10001A068(std::exception *a1)
{
}

void sub_10001A07C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)sub_1001110BC(a1);
  sub_100006174(v16, v4);
  sub_10000AC5C((uint64_t)v11);
  if ((v17 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  __int128 v7 = sub_10000552C(&v12, (uint64_t)v5, v6);
  __int128 v8 = sub_10000552C(v7, (uint64_t)" [", 2LL);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(*v8 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v9 = (void *)std::ostream::operator<<(v8, *(unsigned int *)(a1 + 32));
  sub_10000552C(v9, (uint64_t)"]", 1LL);
  sub_100005F24((uint64_t)v13, a2);
  *(void *)((char *)v11
  uint64_t v12 = v10;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
}

void sub_10001A1BC(void *a1)
{
  if (a1)
  {
    sub_10001A1BC(*a1);
    sub_10001A1BC(a1[1]);
    sub_10001A1FC((uint64_t)(a1 + 7));
    operator delete(a1);
  }

uint64_t sub_10001A1FC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

uint64_t sub_10001A254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 144LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t sub_10001A270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 152LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t sub_10001A28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 184LL))( *(void *)(a1 + 8),  a1,  a2,  a3);
}

uint64_t sub_10001A2A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 176LL))( *(void *)(a1 + 8),  a1,  a2);
}

uint64_t sub_10001A2C0(uint64_t a1)
{
  *(void *)a1 = off_100172A70;
  sub_100006224(a1 + 40);
  sub_100019E30(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10001A2FC(void **a1)
{
  *a1 = off_100172A70;
  sub_100006224((uint64_t)(a1 + 5));
  sub_100019E30((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

uint64_t *sub_10001A338(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = sub_100120DCC();
  uint64_t v5 = *a2;
  uint64_t v6 = v4[1];
  if (v6)
  {
    __int128 v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  uint64_t v9 = a2[4];
  v17[0] = 0LL;
  v17[1] = 0LL;
  v18[2] = v9;
  uint64_t v19 = v21;
  v21[0] = v5;
  v21[1] = v6;
  v18[0] = 0LL;
  v18[1] = 0LL;
  v21[2] = v9;
  __int128 v20 = xmmword_100142560;
  sub_10001A464((uint64_t)a1, (uint64_t *)&v19);
  sub_10000627C((uint64_t)&v19);
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v13 = (unint64_t *)a1[18];
  uint64_t v12 = a1[19];
  uint64_t v14 = a1[1];
  uint64_t v19 = (void *)*a1;
  v18[0] = (uint64_t)&v19[3 * v14];
  uint64_t v16 = &v13[v12];
  v17[0] = v13;
  sub_10003BB64((uint64_t)(a1 + 26), (uint64_t *)&v19, v18, v17, &v16, v10, v11);
  return a1;
}

void sub_10001A430(_Unwind_Exception *a1)
{
}

uint64_t sub_10001A464(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = a1 + 24;
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = xmmword_100142570;
  sub_10001A598((void *)a1, a2);
  *(void *)(a1 + 144) = a1 + 168;
  unint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 152) = xmmword_100142570;
  sub_10001A86C(a1 + 144, v3);
  return a1;
}

void sub_10001A4DC(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 160))
  {
    if (v3 != *v2) {
      operator delete(*v2);
    }
  }

  sub_10000627C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A50C(uint64_t a1)
{
  if (*(void *)(a1 + 160))
  {
    uint64_t v2 = *(void **)(a1 + 144);
  }

  return sub_10000627C(a1);
}

void sub_10001A548(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000058D8(exception, a1);
}

void sub_10001A584(_Unwind_Exception *a1)
{
}

void *sub_10001A598(void *result, uint64_t *a2)
{
  unint64_t v4 = a2 + 3;
  uint64_t v3 = *a2;
  if (v4 == (uint64_t *)v3)
  {
    __n128 result = sub_10001A610(result, v3, v3 + 24 * a2[1]);
    uint64_t v5 = a2[1];
    if (v5)
    {
      __n128 result = (void *)*a2;
      do
      {
        --v5;
        __n128 result = (void *)(sub_100006224((uint64_t)result) + 24);
      }

      while (v5);
    }

    a2[1] = 0LL;
  }

  else
  {
    *__n128 result = v3;
    *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 1);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  return result;
}

void *sub_10001A610(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  if (v5 <= a1[2])
  {
    __n128 result = (void *)sub_10001A770((uint64_t)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3), *a1, a1[1]);
    a1[1] = v5;
  }

  else
  {
    if (v5 >= 0x555555555555556LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    __int128 v7 = operator new(a3 - a2);
    unint64_t v8 = (uint64_t *)*a1;
    if (*a1)
    {
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = *a1;
        do
        {
          --v9;
          uint64_t v10 = sub_100006224(v10) + 24;
        }

        while (v9);
      }

      a1[1] = 0LL;
      if (a1 + 3 != v8) {
        operator delete(v8);
      }
    }

    a1[1] = 0LL;
    a1[2] = v5;
    *a1 = (uint64_t)v7;
    return sub_10001A714(a1, a2, a3);
  }

  return result;
}

void *sub_10001A714(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *result + 24 * v3;
  uint64_t v5 = v4;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      *(void *)a2 = 0LL;
      *(void *)(a2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      v5 += 24LL;
      a2 += 24LL;
    }

    while (a2 != a3);
    uint64_t v3 = result[1];
  }

  result[1] = v3 - 0x5555555555555555LL * ((v5 - v4) >> 3);
  return result;
}

uint64_t sub_10001A770(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = a2;
  unint64_t v9 = a5 - a3;
  if (a5 >= a3)
  {
    if (a3)
    {
      unint64_t v14 = a3;
      do
      {
        --v14;
        uint64_t result = sub_1000198A4(a4, (__int128 *)v8);
        *(void *)(a4 + 16) = *(void *)(v8 + 16);
        a4 += 24LL;
        v8 += 24LL;
      }

      while (v14);
    }

    if (a5 != a3)
    {
      unint64_t v15 = a3 - a5;
      do
      {
        uint64_t result = sub_100006224(a4);
        a4 += 24LL;
        BOOL v13 = __CFADD__(v15++, 1LL);
      }

      while (!v13);
    }
  }

  else
  {
    if (a5)
    {
      uint64_t v10 = a2;
      uint64_t v8 = a2 + 24 * a5;
      unint64_t v11 = a5;
      do
      {
        --v11;
        uint64_t result = sub_1000198A4(a4, (__int128 *)v10);
        *(void *)(a4 + 16) = *(void *)(v10 + 16);
        a4 += 24LL;
        v10 += 24LL;
      }

      while (v11);
    }

    if (a3 != a5)
    {
      do
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(void *)uint64_t v8 = 0LL;
        *(void *)(v8 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
        *(void *)(a4 + 16) = *(void *)(v8 + 16);
        v8 += 24LL;
        a4 += 24LL;
        BOOL v13 = __CFADD__(v9++, 1LL);
      }

      while (!v13);
    }
  }

  return result;
}

void sub_10001A86C(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = a2 - v3;
  if (a2 >= v3)
  {
    uint64_t v5 = (char *)(*(void *)a1 + 8 * v3);
    if (*(void *)(a1 + 16) - v3 < v4)
    {
      sub_10001A8EC((void **)a1, v5, v4, &v6);
    }

    else
    {
      sub_10001A978(a1, v5, v5, v4);
      *(void *)(a1 + 8) += v4;
    }
  }

  else
  {
    *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2;
  }

void sub_10001A8EC(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a1;
  unint64_t v9 = sub_10001AA48((uint64_t)a1, a3);
  if (v9 >> 60) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v10 = (char *)v9;
  unint64_t v11 = (char *)operator new(8 * v9);
  sub_10001AABC(a1, v11, v10, a2, a3);
  *a4 = (char *)*a1 + a2 - v8;
}

void sub_10001A978(int a1, _BYTE *__src, _BYTE *__dst, unint64_t a4)
{
  if (a4)
  {
    int64_t v7 = __dst - __src;
    if (__dst == __src)
    {
      size_t v9 = 8 * a4;
      goto LABEL_9;
    }

    if (a4 <= v7 >> 3)
    {
      uint64_t v11 = 8 * a4;
      uint64_t v12 = &__dst[-8 * a4];
      memmove(__dst, v12, 8 * a4);
      if (v12 != __src) {
        memmove(&__dst[-(v12 - __src)], __src, v12 - __src);
      }
      uint64_t v10 = __src;
      size_t v9 = v11;
      goto LABEL_13;
    }

    uint64_t v8 = v7 >> 3;
    if (__src) {
      memmove(&__src[8 * a4], __src, __dst - __src);
    }
    bzero(__src, v7);
    if (a4 != v8)
    {
      size_t v9 = 8 * (a4 - v8);
LABEL_9:
      uint64_t v10 = __dst;
LABEL_13:
      bzero(v10, v9);
    }
  }

unint64_t sub_10001AA48(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10001AABC(void **a1, char *__dst, char *a3, char *__src, uint64_t a5)
{
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (*a1) {
    BOOL v12 = __dst == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = v12 || v10 == __src;
  unint64_t v14 = __dst;
  if (!v13)
  {
    memmove(__dst, v10, __src - v10);
    unint64_t v14 = &__dst[__src - v10];
  }

  if (a5) {
    bzero(v14, 8 * a5);
  }
  if (__src)
  {
    unint64_t v15 = &v10[8 * (void)v11];
    if (v15 != __src && v14 != 0LL) {
      memmove(&v14[8 * a5], __src, v15 - __src);
    }
  }

  if (v10 && a1 + 3 != *a1) {
    operator delete(*a1);
  }
  unsigned __int8 v17 = (char *)a1[1] + a5;
  *a1 = __dst;
  a1[1] = v17;
  a1[2] = a3;
}

void sub_10001AB88(void *a1)
{
  if (a1)
  {
    sub_10001AB88(*a1);
    sub_10001AB88(a1[1]);
    sub_100006224((uint64_t)(a1 + 22));
    sub_100006224((uint64_t)(a1 + 15));
    operator delete(a1);
  }

_DWORD *sub_10001ABD4(_DWORD *a1)
{
  *a1 = 0;
  v3[0] = xmmword_100142580;
  v3[1] = xmmword_100142590;
  _OWORD v3[2] = xmmword_1001425A0;
  unint64_t v4 = 0x8000000880000007LL;
  int v5 = -1;
  sub_100019FE4((uint64_t)"run_type", 0, v3, 15LL);
  return a1;
}

__n128 sub_10001AC78@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  a2[1].n128_u32[2] = 1;
  return result;
}

__n128 sub_10001AC94@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v4 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 48);
  *((__n128 *)v4 + 3) = result;
  *(void *)unint64_t v4 = off_100172AD8;
  *a2 = v4;
  return result;
}

void sub_10001ACF4(uint64_t *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x48uLL);
  sub_10001AD54(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001C350((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10001AD40(_Unwind_Exception *a1)
{
}

void *sub_10001AD54(void *a1, uint64_t *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100172B38;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_100120D7C();
  uint64_t v6 = v5;
  sub_10011EBA0(a1 + 3);
  a1[3] = &off_100172B88;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_10001ADB8(_Unwind_Exception *a1)
{
}

void sub_10001ADCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100172B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001ADDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100172B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10001ADFC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10001AE0C(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10001AE38(void *__p)
{
  unint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t sub_10001AE64()
{
  return 0LL;
}

uint64_t sub_10001AE6C()
{
  return 4294967251LL;
}

uint64_t sub_10001AE74()
{
  return 0LL;
}

uint64_t sub_10001AE7C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_10001AE84()
{
  return 1LL;
}

uint64_t sub_10001AE8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 0LL;
}

void *sub_10001AE98(uint64_t a1, void *a2)
{
  return sub_10000552C(a2, (uint64_t)"BackendNull", 11LL);
}

void *sub_10001AEAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10001B3C8(a2, (void *)(a1 + 8));
}

uint64_t sub_10001AEB8(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10001AEC0(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_10001AEC8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 80LL))(a1, &v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    uint64_t v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_10001AF4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001AF60(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v9 = v2;
  v10[0] = v3;
  *(_OWORD *)((char *)v10 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, &v9);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    uint64_t v6 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v4;
}

void sub_10001AFE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001AFF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48LL;
    v5 -= 48LL;
    if (!v5) {
      return 0LL;
    }
  }

  uint64_t v7 = v6;
  *(void *)&__int128 v9 = "int Backend::read(const elements_t &)";
  *((void *)&v9 + 1) = 17LL;
  int v10 = 16;
  sub_10001B43C(v11, &v9);
  sub_10000552C(&v12, (uint64_t)"Backend: failed reading element in vector", 41LL);
  std::ostream::~ostream(&v12, off_100172D68);
  sub_10001B5A0((uint64_t)v11);
  std::ios::~ios(&v13);
  return v7;
}

void sub_10001B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10001B0E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = 48 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v4);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    v4 += 48LL;
    v5 -= 48LL;
    if (!v5) {
      return 0LL;
    }
  }

  uint64_t v7 = v6;
  *(void *)&__int128 v9 = "int Backend::write(const elements_t &)";
  *((void *)&v9 + 1) = 18LL;
  int v10 = 16;
  sub_10001BB5C(v11, &v9);
  sub_10000552C(&v12, (uint64_t)"Backend: failed writing element in vector", 41LL);
  std::ostream::~ostream(&v12, off_100172F88);
  sub_10001BCC0((uint64_t)v11);
  std::ios::~ios(&v13);
  return v7;
}

void sub_10001B1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

unint64_t sub_10001B1D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[4] = 0;
  uint64_t v13 = 0LL;
  unint64_t v14 = sub_10011E5C4((unint64_t)v12);
  uint64_t v11 = v12;
  unint64_t v15 = sub_10011E684((unint64_t)v12);
  uint64_t v16 = &v11;
  sub_10001C2DC((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_10001C27C((uint64_t)&v10);
  unint64_t result = sub_10001C2DC(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0LL;
  }
  return result;
}

void sub_10001B2A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10001B2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[4] = 0;
  uint64_t v13 = 0LL;
  unint64_t v14 = sub_10011E5C4((unint64_t)v12);
  uint64_t v11 = v12;
  unint64_t v15 = sub_10011E684((unint64_t)v12);
  uint64_t v16 = &v11;
  sub_10001C2DC((unint64_t)v9, (uint64_t)v12);
  int v10 = v11;
  *((void *)v11 + 4) = &v10;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, a2);
  uint64_t v7 = v10;
  *(_DWORD *)int v10 = v6;
  v7[4] = 1;
  sub_10001C27C((uint64_t)&v10);
  unint64_t result = sub_10001C2DC(a3, (uint64_t)v9);
  if (v10) {
    *((void *)v10 + 4) = 0LL;
  }
  return result;
}

void sub_10001B388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    *(void *)(a14 + 32) = 0LL;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10001B3AC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
}

uint64_t sub_10001B3B8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_10001B3C8(void *a1, void *a2)
{
  __int128 v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0LL;
LABEL_5:
    sub_10001B408();
  }

  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_10001B408()
{
  exception = __cxa_allocate_exception(8uLL);
}

void *sub_10001B43C(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10001B524((uint64_t)a1, a2);
  *a1 = off_100172CA0;
  a1[45] = &off_100172DA0;
  a1[46] = &off_100172DC8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172CA0;
  a1[45] = off_100172D28;
  a1[46] = off_100172D50;
  return a1;
}

void sub_10001B4C0(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B4E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001B524(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100172E38;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001B58C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B5A0(uint64_t a1)
{
  *(void *)a1 = off_100172E38;
  sub_10001B818(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001B63C(char *a1)
{
}

uint64_t sub_10001B680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001B6B4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001B700(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172D68);
  sub_10001B5A0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001B738(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172D68);
  sub_10001B5A0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001B778(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172D68);
  sub_10001B5A0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001B7B8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172D68);
  sub_10001B5A0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001B804(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001B5A0(a1);
  operator delete(v1);
}

uint64_t sub_10001B818(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001B968((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001B940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001B968(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 124LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 124LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_10001BB5C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001BC44((uint64_t)a1, a2);
  *a1 = off_100172EC0;
  a1[45] = &off_100172FC0;
  a1[46] = &off_100172FE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100172EC0;
  a1[45] = off_100172F48;
  a1[46] = off_100172F70;
  return a1;
}

void sub_10001BBE0(_Unwind_Exception *a1)
{
}

uint64_t sub_10001BC04(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001BC44(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173058;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001BCAC(_Unwind_Exception *a1)
{
}

uint64_t sub_10001BCC0(uint64_t a1)
{
  *(void *)a1 = off_100173058;
  sub_10001BF38(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001BD5C(char *a1)
{
}

uint64_t sub_10001BDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001BDD4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001BE20(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100172F88);
  sub_10001BCC0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001BE58(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100172F88);
  sub_10001BCC0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001BE98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172F88);
  sub_10001BCC0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001BED8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100172F88);
  sub_10001BCC0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001BF24(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001BCC0(a1);
  operator delete(v1);
}

uint64_t sub_10001BF38(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001C088((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001C060( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001C088(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 135LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 135LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_10001C27C(uint64_t a1)
{
  if (*(void *)(*(void *)a1 + 8LL))
  {
    uint64_t v2 = *(std::mutex **)(*(void *)a1 + 16LL);
    std::mutex::lock(v2);
    std::mutex::unlock(v2);
  }

unint64_t sub_10001C2DC(unint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = sub_10011E5C4(a1);
  *(void *)(a1 + 24) = sub_10011E684(a1);
  if (*(_BYTE *)(a2 + 4))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = 1;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0LL;
  int v4 = *(unint64_t **)(a1 + 32);
  if (v4) {
    *int v4 = a1;
  }
  return a1;
}

void sub_10001C350(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    int v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        int v4 = (std::__shared_weak_count *)a2[1];
      }

      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        uint64_t v10 = (unint64_t *)&v5->__shared_owners_;
        do
          unint64_t v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }

void sub_10001C400( uint64_t *a1@<X1>, void *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x90uLL);
  sub_10001C480(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_10001C350((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_10001C46C(_Unwind_Exception *a1)
{
}

void *sub_10001C480(void *a1, uint64_t *a2, void *a3, int *a4, unsigned __int8 *a5)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1001730D8;
  sub_10001C508((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_10001C4B4(_Unwind_Exception *a1)
{
}

void sub_10001C4C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001730D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10001C4D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001730D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10001C4F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10001C508(uint64_t a1, uint64_t *a2, void *a3, int *a4, unsigned __int8 *a5)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  unint64_t v14 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  sub_10011F364(a1, &v13, *a3, *a4, *a5);
  unint64_t v9 = v14;
  if (v14)
  {
    uint64_t v10 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return a1;
}

void sub_10001C5A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10001C5B4(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0LL;
  a1[1] = 0LL;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void *sub_10001C610(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    int v5 = (unint64_t *)(v3 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

uint64_t sub_10001C688(uint64_t a1)
{
  *(void *)a1 = off_100173128;
  sub_100006224(a1 + 40);
  sub_100019E30(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10001C6C4(void **a1)
{
  *a1 = off_100173128;
  sub_100006224((uint64_t)(a1 + 5));
  sub_100019E30((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

uint64_t sub_10001C700(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 72);
  __int128 v20 = *(_OWORD *)(a1 + 56);
  __int128 v21 = v2;
  __int128 v22 = *(_OWORD *)(a1 + 88);
  char v23 = *(_BYTE *)(a1 + 104);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 112);
  uint64_t v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v26 = *(_OWORD *)(a1 + 128);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  __int128 v19 = *(_OWORD *)(a2 + 72);
  unint64_t v8 = *(std::__shared_weak_count **)(a2 + 120);
  if (v8)
  {
    unint64_t v9 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    BOOL v12 = (void)v20 == v6 && *((void *)&v20 + 1) == v7;
    if (v12 && (void)v21 == (void)v19) {
      break;
    }
    sub_10003B36C((uint64_t)&v20);
  }

  if (v8)
  {
    uint64_t v13 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  os_log_type_t v15 = v25;
  if (v25)
  {
    uint64_t v16 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return i;
}

void sub_10001C878(_Unwind_Exception *a1)
{
}

uint64_t sub_10001C894(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a1 + 128;
  char v10 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 128));
  sub_1000F7208(a1, a2, a3, a4);
  return sub_10001D01C((uint64_t)&v9);
}

void sub_10001C8FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10001C910(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001D050((uint64_t)a1, a2);
  *a1 = off_100173188;
  a1[45] = &off_100173288;
  a1[46] = &off_1001732B0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173188;
  a1[45] = off_100173210;
  a1[46] = off_100173238;
  return a1;
}

void sub_10001C994(_Unwind_Exception *a1)
{
}

uint64_t sub_10001C9B8(uint64_t a1)
{
  return a1;
}

void *sub_10001C9F8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001D688((uint64_t)a1, a2);
  *a1 = off_1001733A8;
  a1[45] = &off_1001734A8;
  a1[46] = &off_1001734D0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001733A8;
  a1[45] = off_100173430;
  a1[46] = off_100173458;
  return a1;
}

void sub_10001CA7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001CAA0(uint64_t a1)
{
  return a1;
}

void *sub_10001CAE0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001DCC0((uint64_t)a1, a2);
  *a1 = off_1001735C8;
  a1[45] = &off_1001736C8;
  a1[46] = &off_1001736F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001735C8;
  a1[45] = off_100173650;
  a1[46] = off_100173678;
  return a1;
}

void sub_10001CB64(_Unwind_Exception *a1)
{
}

uint64_t sub_10001CB88(uint64_t a1)
{
  return a1;
}

void *sub_10001CBC8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001E420((uint64_t)a1, a2);
  *a1 = off_1001737E8;
  a1[45] = &off_1001738E8;
  a1[46] = &off_100173910;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001737E8;
  a1[45] = off_100173870;
  a1[46] = off_100173898;
  return a1;
}

void sub_10001CC4C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001CC70(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001CCB0(unsigned int *a1)
{
  if (*((_BYTE *)a1 + 4)) {
    return *a1;
  }
  uint64_t v4 = (unint64_t *)(a1 + 2);
  do
    unint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  uint64_t v6 = (std::mutex *)*((void *)a1 + 2);
  v9.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)a1 + 2);
  v9.__owns_ = 1;
  std::mutex::lock(v6);
  if (!*((_BYTE *)a1 + 4))
  {
    uint64_t v7 = (std::condition_variable *)*((void *)a1 + 3);
    do
      std::condition_variable::wait(v7, &v9);
    while (!*((_BYTE *)a1 + 4));
  }

  do
    unint64_t v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  sub_10001ED54((uint64_t)&v9);
  uint64_t v2 = *a1;
  if (v9.__owns_) {
    std::mutex::unlock(v9.__m_);
  }
  return v2;
}

void sub_10001CD64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10001CD80(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001ED94((uint64_t)a1, a2);
  *a1 = off_100173A08;
  a1[45] = &off_100173B08;
  a1[46] = &off_100173B30;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173A08;
  a1[45] = off_100173A90;
  a1[46] = off_100173AB8;
  return a1;
}

void sub_10001CE04(_Unwind_Exception *a1)
{
}

uint64_t sub_10001CE28(uint64_t a1)
{
  return a1;
}

void sub_10001CE68(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10001CF14((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10001CEF0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

void sub_10001CF14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      sub_10001C2DC(a5, v12);
      v12 += 40LL;
      a5 += 40LL;
    }

    while (v12 != v11);
  }

  if (a6)
  {
    uint64_t v13 = a6;
    unint64_t v14 = a5;
    do
    {
      unint64_t v15 = sub_10001C2DC(v14, a7);
      a7 += 40LL;
      unint64_t v14 = v15 + 40;
      --v13;
    }

    while (v13);
  }

  if (v11 != a4)
  {
    unint64_t v16 = a5 + 40 * a6;
    do
    {
      unint64_t v17 = sub_10001C2DC(v16, v11);
      v11 += 40LL;
      unint64_t v16 = v17 + 40;
    }

    while (v11 != a4);
  }

void sub_10001CFC4(void *a1)
{
}

void sub_10001CFCC()
{
}

void sub_10001D008()
{
}

uint64_t sub_10001D01C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

uint64_t sub_10001D050(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173320;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001D0B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10001D0CC(uint64_t a1)
{
  *(void *)a1 = off_100173320;
  sub_10001D344(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001D168(char *a1)
{
}

uint64_t sub_10001D1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001D1E0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001D22C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173250);
  sub_10001D0CC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001D264(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173250);
  sub_10001D0CC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001D2A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173250);
  sub_10001D0CC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001D2E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173250);
  sub_10001D0CC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001D330(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001D0CC(a1);
  operator delete(v1);
}

uint64_t sub_10001D344(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001D494((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001D46C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001D494(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 175LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 175LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10001D688(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173540;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001D6F0(_Unwind_Exception *a1)
{
}

uint64_t sub_10001D704(uint64_t a1)
{
  *(void *)a1 = off_100173540;
  sub_10001D97C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001D7A0(char *a1)
{
}

uint64_t sub_10001D7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001D818(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001D864(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173470);
  sub_10001D704(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001D89C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173470);
  sub_10001D704((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001D8DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173470);
  sub_10001D704(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001D91C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173470);
  sub_10001D704((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001D968(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001D704(a1);
  operator delete(v1);
}

uint64_t sub_10001D97C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001DACC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001DAA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001DACC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 184LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 184LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10001DCC0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173760;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001DD28(_Unwind_Exception *a1)
{
}

uint64_t sub_10001DD3C(uint64_t a1)
{
  *(void *)a1 = off_100173760;
  sub_10001DFB4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001DDD8(char *a1)
{
}

uint64_t sub_10001DE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001DE50(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001DE9C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173690);
  sub_10001DD3C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001DED4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173690);
  sub_10001DD3C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001DF14(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173690);
  sub_10001DD3C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001DF54(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173690);
  sub_10001DD3C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001DFA0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001DD3C(a1);
  operator delete(v1);
}

uint64_t sub_10001DFB4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001E104((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001E0DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001E104(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 193LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 193LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t **sub_10001E2F8(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x38uLL);
    v14[1] = v7;
    _BYTE v12[8] = **a4;
    *((void *)v12 + 5) = 0LL;
    *((void *)v12 + 6) = 0LL;
    char v15 = 1;
    sub_10000CC04(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0LL;
    sub_10001E3DC((uint64_t)v14, 0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void sub_10001E3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100006224((uint64_t)v2 + 40);
    }
    operator delete(v2);
  }

uint64_t sub_10001E420(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173980;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001E488(_Unwind_Exception *a1)
{
}

uint64_t sub_10001E49C(uint64_t a1)
{
  *(void *)a1 = off_100173980;
  sub_10001E714(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001E538(char *a1)
{
}

uint64_t sub_10001E57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001E5B0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001E5FC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001738B0);
  sub_10001E49C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001E634(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001738B0);
  sub_10001E49C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001E674(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001738B0);
  sub_10001E49C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001E6B4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001738B0);
  sub_10001E49C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001E700(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001E49C(a1);
  operator delete(v1);
}

uint64_t sub_10001E714(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001E864((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001E83C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001E864(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unsigned int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 214LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 214LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_10001EA58(uint64_t result)
{
  if (*(_BYTE *)(result + 528))
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 368;
    sub_100006224(result + 480);
    sub_100006224(v2);
    sub_100006224(v1 + 320);
    sub_100006224(v1 + 208);
    sub_100006224(v1 + 152);
    unint64_t result = sub_100006224(v1 + 64);
    *(_BYTE *)(v1 + 52std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  }

  return result;
}

void sub_10001EAB8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10001EB64((uint64_t)a1, a3);
  if (v11 >= 0x333333333333334LL) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(40 * v11);
  sub_10001EBDC(a1, (unint64_t)v13, v12, a2, a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t sub_10001EB64(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x333333333333333LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x333333333333333LL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x333333333333333LL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10001EBDC(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  sub_10001EC88((uint64_t)a1, *a1, a4, *a1 + 40 * a1[1], a2, a5, a6);
  uint64_t v11 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v11;
  a1[2] = a3;
}

void sub_10001EC64(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

unint64_t sub_10001EC88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    do
    {
      unint64_t v13 = sub_10001C2DC(a5, v12);
      v12 += 40LL;
      a5 = v13 + 40;
    }

    while (v12 != v11);
  }

  unint64_t result = sub_10001C2DC(a5, a7);
  if (v11 != a4)
  {
    result += 40 * a6;
    do
    {
      unint64_t v15 = sub_10001C2DC(result, v11);
      v11 += 40LL;
      unint64_t result = v15 + 40;
    }

    while (v11 != a4);
  }

  return result;
}

void sub_10001ED18(void *a1)
{
}

void sub_10001ED20()
{
}

void sub_10001ED40()
{
}

void sub_10001ED54(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  }

  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_10001ED94();
  }

uint64_t sub_10001ED94(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173BA0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001EDFC(_Unwind_Exception *a1)
{
}

uint64_t sub_10001EE10(uint64_t a1)
{
  *(void *)a1 = off_100173BA0;
  sub_10001F088(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001EEAC(char *a1)
{
}

uint64_t sub_10001EEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001EF24(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001EF70(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173AD0);
  sub_10001EE10(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001EFA8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173AD0);
  sub_10001EE10((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001EFE8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173AD0);
  sub_10001EE10(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10001F028(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173AD0);
  sub_10001EE10((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10001F074(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001EE10(a1);
  operator delete(v1);
}

uint64_t sub_10001F088(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10001F1D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10001F1B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10001F1D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 254LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 254LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_10001F3CC(uint64_t a1)
{
  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = v5[1];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)&v5[1] + 9);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v5[0] + 1);
  if (*((void *)&v5[0] + 1))
  {
    uint64_t v3 = (unint64_t *)(*((void *)&v5[0] + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void *sub_10001F450(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10001FD7C((uint64_t)a1, a2);
  *a1 = off_100173C28;
  a1[45] = &off_100173D28;
  a1[46] = &off_100173D50;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173C28;
  a1[45] = off_100173CB0;
  a1[46] = off_100173CD8;
  return a1;
}

void sub_10001F4D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10001F4F8(uint64_t a1)
{
  return a1;
}

void sub_10001F538(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 1216);
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      return;
    }
  }

  while (__stlxr(1u, v2));
  *(void *)&__int128 v11 = "DiskImageUDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, space_allocators::Rolling, ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking>::abort() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, Scheduler = ExecutionSchedulerSortedConsecutiveIt<dummy_context, locks::Std, boost::iterators::transform_iterator<(lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/DiskImagesController/DIConvertManager.mm:100:24), DiskImage::const_extents_iterator_t>>::rebind_context, Allocator = space_allocators::Rolling, ChecksumDataFork = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>::rebind_locking]";
  *((void *)&v11 + 1) = 966LL;
  int v12 = 0;
  sub_1000203B4(v13, &v11);
  sub_10000552C(&v14, (uint64_t)"DiskImageUDIFWritable: aborting", 31LL);
  std::ostream::~ostream(&v14, off_100173F10);
  sub_10002055C((uint64_t)v13);
  std::ios::~ios(&v15);
  sub_10002049C(a1 + 904);
  uint64_t v4 = *(void *)(a1 + 888);
  *(_BYTE *)(v4 + 28std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  sub_100020B18(v4 + 8);
  int v5 = *(void **)(a1 + 664);
  uint64_t v6 = (void *)(a1 + 672);
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = v5[7];
      *(_BYTE *)(v7 + 312) = 1;
      sub_100020B18(v7 + 32);
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          int v5 = v9;
        }

        while (!v10);
      }

      int v5 = v9;
    }

    while (v9 != v6);
  }

void sub_10001F654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10001F668(uint64_t a1, __int128 *a2)
{
  __int128 v66 = *a2;
  uint64_t v65 = (std::mutex *)(a1 + 8);
  uint64_t v3 = *((void *)a2 + 3);
  uint64_t v67 = *((void *)a2 + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 4);
  uint64_t v5 = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0LL;
  uint64_t v68 = v4;
  uint64_t v6 = v66;
  int v69 = *(_DWORD *)((char *)&v67 + 1);
  HIBYTE(v69) = BYTE4(v67);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 280))
  {
    std::mutex::unlock(v65);
    goto LABEL_97;
  }

  *(_OWORD *)__int128 __p = v66;
  __p[16] = v67;
  *(_DWORD *)&__p[17] = v69;
  *(_DWORD *)&__p[20] = HIDWORD(v67);
  uint64_t v72 = a1;
  __int128 v73 = v66;
  uint64_t v74 = v67;
  *(void *)&__int128 v75 = v3;
  *((void *)&v75 + 1) = v4;
  uint64_t v76 = v5;
  uint64_t v8 = (void *)(a1 + 88);
  uint64_t v7 = *(void **)(a1 + 88);
  uint64_t v9 = (void *)(a1 + 88);
  uint64_t v68 = 0LL;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v9 = (void *)(a1 + 88);
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v7;
      BOOL v10 = v7 + 4;
      uint64_t v7 = (void *)*v8;
      uint64_t v9 = v8;
      if (!*v8) {
        goto LABEL_12;
      }
    }

    uint64_t v9 = v8 + 1;
    uint64_t v7 = (void *)v8[1];
    if (!v7) {
      goto LABEL_12;
    }
  }

  if (!*v9)
  {
LABEL_12:
    __int128 v11 = operator new(0x70uLL);
    void v11[2] = *(_OWORD *)__p;
    uint64_t v12 = v72;
    *((void *)v11 + 6) = *(void *)&__p[16];
    *((void *)v11 + 7) = v12;
    v11[4] = v73;
    *((void *)v11 + 1crc32(0LL, 0LL, 0) = v74;
    *(_OWORD *)((char *)v11 + 8std::iostream::~basic_iostream(v2, v3 + 8) = v75;
    __int128 v75 = 0uLL;
    *((void *)v11 + 13) = v76;
    *(void *)__int128 v11 = 0LL;
    *((void *)v11 + 1) = 0LL;
    *((void *)v11 + 2) = v8;
    void *v9 = v11;
    uint64_t v13 = **(void **)(a1 + 80);
    if (v13)
    {
      *(void *)(a1 + 8crc32(0LL, 0LL, 0) = v13;
      __int128 v11 = (_OWORD *)*v9;
    }

    sub_10000CC58(*(uint64_t **)(a1 + 88), (uint64_t *)v11);
    ++*(void *)(a1 + 96);
  }

  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v75 + 1);
  uint64_t v16 = v65;
  uint64_t v15 = (void *)(a1 + 88);
  if (*((void *)&v75 + 1))
  {
    unint64_t v17 = (unint64_t *)(*((void *)&v75 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if ((v67 & 2) == 0) {
    uint64_t v6 = v66 + 1;
  }
  uint64_t v19 = *(void *)(a1 + 272);
  std::mutex::unlock(v65);
  if (v6 == v19)
  {
    while (1)
    {
      *(void *)__int128 __p = &v72;
      *(_OWORD *)&__p[8] = xmmword_100142520;
      std::mutex::lock(v16);
      __int128 v20 = *(void **)(a1 + 80);
      unint64_t v21 = *(void *)(a1 + 272);
      if (v20 == v15) {
        goto LABEL_76;
      }
      __int16 v22 = *(void **)(a1 + 80);
      while (!sub_1000EA308(a1 + 104, a1 + 216))
      {
        uint64_t v23 = v22[4];
        if ((v22[6] & 2) == 0) {
          ++v23;
        }
        if (v23 != v21) {
          break;
        }
        unint64_t v21 = v22[5] + (v22[6] & 1);
        for (uint64_t i = (*(_BYTE *)(a1 + 128) & 1) + *(void *)(a1 + 120);
              v21 > i - 1;
              uint64_t i = (*(_BYTE *)(a1 + 128) & 1) + *(void *)(a1 + 120))
        {
          sub_1000EA5F0((uint64_t *)(a1 + 104));
          if (sub_1000EA308(a1 + 104, a1 + 216)) {
            break;
          }
          if ((*(_BYTE *)(a1 + 128) & 2) != 0) {
            unint64_t v21 = *(void *)(a1 + 112);
          }
          else {
            unint64_t v21 = *(void *)(a1 + 112) + 1LL;
          }
        }

        uint64_t v25 = (void *)v22[1];
        if (v25)
        {
          do
          {
            __int16 v26 = v25;
            uint64_t v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            __int16 v26 = (void *)v22[2];
            BOOL v27 = *v26 == (void)v22;
            __int16 v22 = v26;
          }

          while (!v27);
        }

        __int16 v22 = v26;
        if (v26 == v15)
        {
          __int16 v22 = v15;
          break;
        }
      }

      if (v20 == v22) {
        goto LABEL_76;
      }
      unint64_t v28 = 0LL;
      uint64_t v29 = v20;
      do
      {
        unint64_t v30 = v28;
        char v31 = (void *)v29[1];
        if (v31)
        {
          do
          {
            __int128 v32 = v31;
            char v31 = (void *)*v31;
          }

          while (v31);
        }

        else
        {
          do
          {
            __int128 v32 = (void *)v29[2];
            BOOL v27 = *v32 == (void)v29;
            uint64_t v29 = v32;
          }

          while (!v27);
        }

        ++v28;
        uint64_t v29 = v32;
      }

      while (v32 != v22);
      if (*(void *)&__p[16] <= v30) {
        break;
      }
      do
      {
LABEL_64:
        uint64_t v42 = *(void *)__p;
        uint64_t v43 = *(void *)&__p[8];
        __int128 v44 = (char *)(*(void *)__p + 56LL * *(void *)&__p[8]);
        if (*(void *)&__p[8] == *(void *)&__p[16])
        {
          sub_100020D90((void **)__p, v44, (uint64_t)(v20 + 7), &v70);
        }

        else
        {
          *(void *)__int128 v44 = v20[7];
          uint64_t v45 = v42 + 56 * v43;
          __int128 v46 = *((_OWORD *)v20 + 4);
          *(void *)(v45 + 24) = v20[10];
          *(_OWORD *)(v45 + std::iostream::~basic_iostream(v2, v3 + 8) = v46;
          *(_OWORD *)(v45 + 32) = *(_OWORD *)(v20 + 11);
          v20[11] = 0LL;
          v20[12] = 0LL;
          *(void *)(v45 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v20[13];
          ++*(void *)&__p[8];
        }

        __int128 v47 = (void *)v20[1];
        __int128 v48 = v20;
        if (v47)
        {
          do
          {
            uint64_t v49 = v47;
            __int128 v47 = (void *)*v47;
          }

          while (v47);
        }

        else
        {
          do
          {
            uint64_t v49 = (void *)v48[2];
            BOOL v27 = *v49 == (void)v48;
            __int128 v48 = v49;
          }

          while (!v27);
        }

        if (*(void **)(a1 + 80) == v20) {
          *(void *)(a1 + 8crc32(0LL, 0LL, 0) = v49;
        }
        char v50 = *(uint64_t **)(a1 + 88);
        --*(void *)(a1 + 96);
        sub_10000D154(v50, v20);
        sub_100006224((uint64_t)(v20 + 11));
        operator delete(v20);
        __int128 v20 = v49;
      }

      while (v49 != v22);
LABEL_76:
      std::mutex::unlock(v16);
      if (*(void *)&__p[8])
      {
        __int128 v51 = *(unsigned int ***)__p;
        uint64_t v52 = *(void *)__p + 56LL * *(void *)&__p[8];
        do
        {
          uint64_t v53 = *v51;
          unsigned int *v53 = crc32(**v51, (const Bytef *)v51[4], *((_DWORD *)v51 + 12));
          v51 += 7;
        }

        while (v51 != (unsigned int **)v52);
        uint64_t v54 = *(void *)&__p[8];
        uint64_t v15 = (void *)(a1 + 88);
        if (*(void *)&__p[8])
        {
          uint64_t v55 = *(void *)__p + 32LL;
          do
          {
            --v54;
            uint64_t v55 = sub_100006224(v55) + 56;
          }

          while (v54);
        }
      }

      *(void *)&__p[8] = 0LL;
      std::mutex::lock(v16);
      *(void *)(a1 + 272) = v21;
      uint64_t v56 = *(void *)(a1 + 80);
      if ((void *)v56 == v15 || sub_1000EA308(a1 + 104, a1 + 216))
      {
        std::mutex::unlock(v16);
        int v57 = 3;
      }

      else
      {
        uint64_t v58 = *(void *)(v56 + 32);
        if ((*(_BYTE *)(v56 + 48) & 2) == 0) {
          ++v58;
        }
        BOOL v59 = v58 == *(void *)(a1 + 272);
        std::mutex::unlock(v16);
        if (v59) {
          int v57 = 0;
        }
        else {
          int v57 = 3;
        }
      }

      uint64_t v60 = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        uint64_t v61 = *(void *)__p + 32LL;
        do
        {
          --v60;
          uint64_t v61 = sub_100006224(v61) + 56;
        }

        while (v60);
      }

      if (v57) {
        goto LABEL_97;
      }
    }

    if (v30 >= 0x249249249249249LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    uint64_t v33 = (char *)operator new(56 * v28);
    uint64_t v34 = *(char **)__p;
    uint64_t v35 = *(void *)&__p[8];
    if (*(void *)&__p[8])
    {
      uint64_t v36 = 0LL;
      uint64_t v37 = *(void *)__p + 56LL * *(void *)&__p[8];
      do
      {
        uint64_t v38 = &v34[v36];
        char v39 = &v33[v36];
        *(void *)char v39 = *(void *)&v34[v36];
        __int128 v40 = *(_OWORD *)&v34[v36 + 8];
        *((void *)v39 + 3) = *(void *)&v34[v36 + 24];
        *(_OWORD *)(v39 + std::iostream::~basic_iostream(v2, v3 + 8) = v40;
        *((_OWORD *)v39 + 2) = *(_OWORD *)&v34[v36 + 32];
        *((void *)v38 + 4) = 0LL;
        *((void *)v38 + 5) = 0LL;
        *((void *)v39 + 6) = *(void *)&v34[v36 + 48];
        v36 += 56LL;
      }

      while (v38 + 56 != (char *)v37);
      if (v34)
      {
        uint64_t v41 = (uint64_t)(v34 + 32);
        do
        {
          --v35;
          uint64_t v41 = sub_100006224(v41) + 56;
        }

        while (v35);
        uint64_t v34 = *(char **)__p;
LABEL_61:
      }
    }

    else if (*(void *)__p)
    {
      goto LABEL_61;
    }

    *(void *)__int128 __p = v33;
    *(void *)&__p[16] = v28;
    uint64_t v16 = v65;
    uint64_t v15 = (void *)(a1 + 88);
    goto LABEL_64;
  }

LABEL_97:
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  return a1;
}

void sub_10001FD0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

uint64_t sub_10001FD7C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173DC0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10001FDE4(_Unwind_Exception *a1)
{
}

uint64_t sub_10001FDF8(uint64_t a1)
{
  *(void *)a1 = off_100173DC0;
  sub_100020070(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10001FE94(char *a1)
{
}

uint64_t sub_10001FED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10001FF0C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10001FF58(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173CF0);
  sub_10001FDF8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10001FF90(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173CF0);
  sub_10001FDF8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10001FFD0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173CF0);
  sub_10001FDF8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100020010(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173CF0);
  sub_10001FDF8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10002005C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10001FDF8(a1);
  operator delete(v1);
}

uint64_t sub_100020070(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000201C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100020198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000201C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      __int128 v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 587LL;
    __int16 v26 = 2082;
    BOOL v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 587LL;
      __int16 v26 = 2082;
      BOOL v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void *sub_1000203B4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000204E0((uint64_t)a1, a2);
  *a1 = off_100173E48;
  a1[45] = &off_100173F48;
  a1[46] = &off_100173F70;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100173E48;
  a1[45] = off_100173ED0;
  a1[46] = off_100173EF8;
  return a1;
}

void sub_100020438(_Unwind_Exception *a1)
{
}

uint64_t sub_10002045C(uint64_t a1)
{
  return a1;
}

void sub_10002049C(uint64_t a1)
{
  *(_BYTE *)(a1 + 272) = 1;
  sub_10001AB88(*(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t sub_1000204E0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100173FE0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100020548(_Unwind_Exception *a1)
{
}

uint64_t sub_10002055C(uint64_t a1)
{
  *(void *)a1 = off_100173FE0;
  sub_1000207D4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000205F8(char *a1)
{
}

uint64_t sub_10002063C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100020670(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000206BC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100173F10);
  sub_10002055C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000206F4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100173F10);
  sub_10002055C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100020734(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173F10);
  sub_10002055C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100020774(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100173F10);
  sub_10002055C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000207C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10002055C(a1);
  operator delete(v1);
}

uint64_t sub_1000207D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100020924((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000208FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100020924(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      __int128 v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 535LL;
    __int16 v26 = 2082;
    BOOL v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 535LL;
      __int16 v26 = 2082;
      BOOL v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

void sub_100020B18(uint64_t a1)
{
  *(_BYTE *)(a1 + 272) = 1;
  sub_100020B5C(*(void **)(a1 + 80));
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
  std::mutex::unlock((std::mutex *)a1);
}

void sub_100020B5C(void *a1)
{
  if (a1)
  {
    sub_100020B5C(*a1);
    sub_100020B5C(a1[1]);
    sub_100006224((uint64_t)(a1 + 11));
    operator delete(a1);
  }

int *sub_100020B9C(int *a1, int a2)
{
  *a1 = a2;
  v4[0] = xmmword_100142580;
  v4[1] = xmmword_100142590;
  v4[2] = xmmword_1001425A0;
  unint64_t v5 = 0x8000000880000007LL;
  int v6 = -1;
  sub_100019FE4((uint64_t)"run_type", a2, v4, 15LL);
  return a1;
}

uint64_t sub_100020C3C(unint64_t *a1, unint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (v3 >= *a1)
      {
LABEL_4:
        if ((v2 & 2) != 0) {
          unint64_t v5 = v4;
        }
        else {
          unint64_t v5 = v4 + 1;
        }
        unint64_t v6 = *a2;
        if ((a2[2] & 2) == 0) {
          ++v6;
        }
        if (v5 < v6) {
          return 1LL;
        }
        if (v6 == v5) {
          return (v2 & 1) + v3 - 1 < (a2[2] & 1) + a2[1] - 1;
        }
        return 0LL;
      }
    }

    else
    {
      unint64_t v4 = *a1;
      unint64_t v3 = a1[1];
      if (*a1 < v3) {
        goto LABEL_4;
      }
    }
  }

  else
  {
    unint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    if (*a1 < v3 && *a1 + 1 < v3) {
      goto LABEL_4;
    }
  }

  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3) {
      BOOL v9 = a2[1] < *a2;
    }
    else {
      BOOL v9 = *a2 >= a2[1];
    }
  }

  else
  {
    unint64_t v10 = a2[1];
    BOOL v9 = *a2 >= v10 || *a2 + 1 >= v10;
  }

  return !v9;
}

uint64_t sub_100020D34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 32LL;
    do
    {
      --v2;
      uint64_t v3 = sub_100006224(v3) + 56;
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100020D90(void **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t v7 = v6 >> 61;
  unint64_t v8 = 8 * v6;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x249249249249249LL) {
    unint64_t v10 = 0x249249249249249LL;
  }
  unint64_t v11 = (unint64_t)(v5 + 1) > v10 ? (unint64_t)(v5 + 1) : v10;
  if (v11 > 0x249249249249249LL) {
LABEL_26:
  }
    sub_10001A548("get_next_capacity, allocator's max size reached");
  os_log_type_t v15 = (char *)*a1;
  uint64_t v16 = (char *)operator new(56 * v11);
  unint64_t v17 = v16;
  unint64_t v18 = (char *)*a1;
  uint64_t v19 = (uint64_t)*a1 + 56 * (void)a1[1];
  __int128 v20 = v16;
  if (*a1 != a2)
  {
    int v21 = (char *)*a1;
    __int128 v20 = v16;
    do
    {
      *(void *)__int128 v20 = *(void *)v21;
      __int128 v22 = *(_OWORD *)(v21 + 8);
      *((void *)v20 + 3) = *((void *)v21 + 3);
      *(_OWORD *)(v20 + std::iostream::~basic_iostream(v2, v3 + 8) = v22;
      *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
      *((void *)v21 + 4) = 0LL;
      *((void *)v21 + 5) = 0LL;
      *((void *)v20 + 6) = *((void *)v21 + 6);
      v20 += 56;
      v21 += 56;
    }

    while (v21 != a2);
  }

  *(void *)__int128 v20 = *(void *)a3;
  __int128 v23 = *(_OWORD *)(a3 + 8);
  *((void *)v20 + 3) = *(void *)(a3 + 24);
  *(_OWORD *)(v20 + std::iostream::~basic_iostream(v2, v3 + 8) = v23;
  *((_OWORD *)v20 + 2) = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 32) = 0LL;
  *(void *)(a3 + 4crc32(0LL, 0LL, 0) = 0LL;
  *((void *)v20 + 6) = *(void *)(a3 + 48);
  if ((char *)v19 != a2)
  {
    __int16 v24 = v20 + 104;
    uint64_t v25 = a2;
    do
    {
      *(v24 - 6) = *(void *)v25;
      __int128 v26 = *(_OWORD *)(v25 + 8);
      *(v24 - 3) = *((void *)v25 + 3);
      *(_OWORD *)(v24 - 5) = v26;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 + 2);
      *((void *)v25 + 4) = 0LL;
      *((void *)v25 + 5) = 0LL;
      void *v24 = *((void *)v25 + 6);
      v24 += 7;
      v25 += 56;
    }

    while (v25 != (char *)v19);
  }

  if (v18)
  {
    BOOL v27 = (char *)a1[1];
    if (v27)
    {
      uint64_t v28 = (uint64_t)(v18 + 32);
      do
      {
        --v27;
        uint64_t v28 = sub_100006224(v28) + 56;
      }

      while (v27);
    }

    if (a1 + 3 != *a1) {
      operator delete(*a1);
    }
  }

  uint64_t v29 = (uint64_t)a1[1] + 1;
  *a1 = v17;
  a1[1] = (void *)v29;
  a1[2] = (void *)v11;
  *a4 = &v17[a2 - v15];
}

void *sub_100020F7C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100021064((uint64_t)a1, a2);
  *a1 = off_100174068;
  a1[45] = &off_100174168;
  a1[46] = &off_100174190;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174068;
  a1[45] = off_1001740F0;
  a1[46] = off_100174118;
  return a1;
}

void sub_100021000(_Unwind_Exception *a1)
{
}

uint64_t sub_100021024(uint64_t a1)
{
  return a1;
}

uint64_t sub_100021064(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174200;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000210CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000210E0(uint64_t a1)
{
  *(void *)a1 = off_100174200;
  sub_100021358(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10002117C(char *a1)
{
}

uint64_t sub_1000211C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000211F4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100021240(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174130);
  sub_1000210E0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100021278(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174130);
  sub_1000210E0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000212B8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174130);
  sub_1000210E0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000212F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174130);
  sub_1000210E0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100021344(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000210E0(a1);
  operator delete(v1);
}

uint64_t sub_100021358(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000214A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100021480( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000214A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 132LL;
    __int16 v26 = 2082;
    BOOL v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unint64_t v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 132LL;
      __int16 v26 = 2082;
      BOOL v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  unint64_t result = __error();
  *unint64_t result = v5;
  return result;
}

uint64_t sub_1000216A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a1 + 64LL;
    do
    {
      --v2;
      sub_100006224(v3 + 56);
      sub_100006224(v3);
      v3 += 144LL;
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_100021718(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      sub_100006224(v2 + 120);
      sub_100006224(v2 + 64);
      uint64_t v3 = a1[1];
      uint64_t v2 = *a1 + 144;
      *a1 = v2;
    }

    while (v2 != v3);
  }

  return a1;
}

void sub_100021768(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (0xE38E38E38E38E3LL - v6 < v5 - v6 + 1) {
    goto LABEL_27;
  }
  unint64_t v7 = v6 >> 61;
  unint64_t v8 = 8 * v6;
  if (v7 > 4) {
    uint64_t v9 = -1LL;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 >= 0xE38E38E38E38E3LL) {
    unint64_t v10 = 0xE38E38E38E38E3LL;
  }
  unint64_t v11 = v5 + 1 > v10 ? v5 + 1 : v10;
  if (v11 > 0xE38E38E38E38E3LL) {
LABEL_27:
  }
    sub_10001A548("get_next_capacity, allocator's max size reached");
  os_log_type_t v15 = *(_BYTE **)a1;
  uint64_t v16 = (char *)operator new(144 * v11);
  unint64_t v17 = v16;
  unint64_t v18 = *(_BYTE **)a1;
  uint64_t v19 = *(void *)a1 + 144LL * *(void *)(a1 + 8);
  v38[0] = (uint64_t)v16;
  v38[2] = a1;
  __int128 v20 = v16;
  if (v18 != a2)
  {
    uint64_t v21 = 0LL;
    do
    {
      __int16 v22 = &v18[v21];
      uint64_t v23 = &v16[v21];
      __int128 v24 = *(_OWORD *)&v18[v21 + 8];
      *((void *)v23 + 3) = *(void *)&v18[v21 + 24];
      *(_OWORD *)(v23 + std::iostream::~basic_iostream(v2, v3 + 8) = v24;
      *((_OWORD *)v23 + 2) = *(_OWORD *)&v18[v21 + 32];
      *(void *)uint64_t v23 = &off_100174280;
      uint64_t v25 = *(void *)&v18[v21 + 48];
      v23[56] = v18[v21 + 56];
      *((void *)v23 + 6) = v25;
      *((_OWORD *)v23 + 4) = *(_OWORD *)&v18[v21 + 64];
      v22[8] = 0LL;
      v22[9] = 0LL;
      __int128 v26 = *(_OWORD *)&v18[v21 + 80];
      *(_OWORD *)(v23 + 89) = *(_OWORD *)&v18[v21 + 89];
      *((_OWORD *)v23 + 5) = v26;
      *((void *)v23 + 14) = *(void *)&v18[v21 + 112];
      *(_OWORD *)(v23 + 12crc32(0LL, 0LL, 0) = *(_OWORD *)&v18[v21 + 120];
      v22[15] = 0LL;
      v22[16] = 0LL;
      *((_DWORD *)v23 + 34) = *(_DWORD *)&v18[v21 + 136];
      v21 += 144LL;
    }

    while (&v18[v21] != a2);
    __int128 v20 = &v16[v21];
  }

  __int128 v27 = *(_OWORD *)(a3 + 8);
  *((void *)v20 + 3) = *(void *)(a3 + 24);
  *(_OWORD *)(v20 + std::iostream::~basic_iostream(v2, v3 + 8) = v27;
  *((_OWORD *)v20 + 2) = *(_OWORD *)(a3 + 32);
  *(void *)__int128 v20 = &off_100174280;
  uint64_t v28 = *(void *)(a3 + 48);
  v20[56] = *(_BYTE *)(a3 + 56);
  *((void *)v20 + 6) = v28;
  *((_OWORD *)v20 + 4) = *(_OWORD *)(a3 + 64);
  *(void *)(a3 + 64) = 0LL;
  *(void *)(a3 + 72) = 0LL;
  __int128 v29 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v20 + 89) = *(_OWORD *)(a3 + 89);
  *((_OWORD *)v20 + 5) = v29;
  *((void *)v20 + 14) = *(void *)(a3 + 112);
  *(_OWORD *)(v20 + 12crc32(0LL, 0LL, 0) = *(_OWORD *)(a3 + 120);
  *(void *)(a3 + 12crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a3 + 12std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *((_DWORD *)v20 + 34) = *(_DWORD *)(a3 + 136);
  if ((_BYTE *)v19 != a2)
  {
    uint64_t v30 = 0LL;
    do
    {
      char v31 = &a2[v30];
      __int128 v32 = &v20[v30];
      *(_OWORD *)(v32 + 152) = *(_OWORD *)&a2[v30 + 8];
      *((void *)v32 + 21) = *(void *)&a2[v30 + 24];
      *((_OWORD *)v32 + 11) = *(_OWORD *)&a2[v30 + 32];
      *((void *)v32 + 1std::iostream::~basic_iostream(v2, v3 + 8) = &off_100174280;
      *((void *)v32 + 24) = *(void *)&a2[v30 + 48];
      v32[200] = a2[v30 + 56];
      *(_OWORD *)(v32 + 233) = *(_OWORD *)&a2[v30 + 89];
      __int128 v33 = *(_OWORD *)&a2[v30 + 64];
      __int128 v34 = *(_OWORD *)&a2[v30 + 80];
      v31[8] = 0LL;
      v31[9] = 0LL;
      *((_OWORD *)v32 + 13) = v33;
      *((_OWORD *)v32 + 14) = v34;
      *((void *)v32 + 32) = *(void *)&a2[v30 + 112];
      *(_OWORD *)&v20[v30 + 264] = *(_OWORD *)&a2[v30 + 120];
      v31[15] = 0LL;
      v31[16] = 0LL;
      LODWORD(v31) = *(_DWORD *)&a2[v30 + 136];
      v30 += 144LL;
      *((_DWORD *)v32 + 7crc32(0LL, 0LL, 0) = (_DWORD)v31;
    }

    while (&a2[v30] != (_BYTE *)v19);
  }

  v38[0] = 0LL;
  v38[1] = 0LL;
  sub_100021718(v38);
  if (v18)
  {
    uint64_t v35 = *(void *)(a1 + 8);
    if (v35)
    {
      uint64_t v36 = (uint64_t)(v18 + 64);
      do
      {
        --v35;
        sub_100006224(v36 + 56);
        sub_100006224(v36);
        v36 += 144LL;
      }

      while (v35);
    }

    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }

  uint64_t v37 = *(void *)(a1 + 8) + 1LL;
  *(void *)a1 = v17;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v37;
  *(void *)(a1 + 16) = v11;
  *a4 = &v17[a2 - v15];
}

void *sub_100021A40(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100022350((uint64_t)a1, a2);
  *a1 = off_1001742F0;
  a1[45] = &off_1001743F0;
  a1[46] = &off_100174418;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_1001742F0;
  a1[45] = off_100174378;
  a1[46] = off_1001743A0;
  return a1;
}

void sub_100021AC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100021AE8(uint64_t a1)
{
  return a1;
}

uint64_t **sub_100021B28(uint64_t **a1, uint64_t a2)
{
  __int128 v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if ((_BYTE)v15)
  {
    if (v15 == 3)
    {
    }

    else if ((unint64_t)v14 >= *((void *)&v14 + 1))
    {
      return a1 + 1;
    }
  }

  else if ((unint64_t)v14 >= *((void *)&v14 + 1) || (unint64_t)(v14 + 1) >= *((void *)&v14 + 1))
  {
    return a1 + 1;
  }

  uint64_t v5 = (int *)(a2 + 24);
  if (sub_100021C60(a2 + 24)) {
    return a1 + 1;
  }
  unint64_t v7 = (uint64_t *)sub_100021FEC(a1, a2, a2);
  if ((v8 & 1) != 0)
  {
    unint64_t v17 = v7;
    sub_100022084(a1, &v17);
    return sub_100022198(a1, (uint64_t ***)&v17);
  }

  else
  {
    uint64_t v9 = (uint64_t *)sub_10000D800((uint64_t)a1, (uint64_t)&v14);
    unint64_t v10 = (uint64_t **)sub_10000D4D8((uint64_t)a1, (uint64_t)&v14);
    unint64_t v11 = *v10;
    if (*v10)
    {
      do
      {
        uint64_t v12 = v11;
        unint64_t v11 = (uint64_t *)v11[1];
      }

      while (v11);
    }

    else
    {
      do
      {
        uint64_t v12 = v10[2];
        BOOL v13 = *v12 == (void)v10;
        unint64_t v10 = (uint64_t **)v12;
      }

      while (v13);
    }

    uint64_t v16 = v9;
    unint64_t v17 = v12;
    sub_100021CFC(a1, &v14, v5, &v16, &v17);
    return (uint64_t **)v16;
  }

BOOL sub_100021C60(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1001A3B88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1001A3B88))
  {
    sub_1000F4C18(&dword_1001A3B70);
    __cxa_guard_release(&qword_1001A3B88);
  }

  int v4 = dword_1001A3B70;
  __int128 v5 = unk_1001A3B78;
  return sub_1000F4C34(a1, (uint64_t)&v4);
}

void sub_100021CE4(_Unwind_Exception *a1)
{
}

uint64_t sub_100021CFC(uint64_t **a1, __int128 *a2, int *a3, uint64_t **a4, uint64_t **a5)
{
  char v8 = *a5;
  uint64_t v9 = (uint64_t *)(*a5)[1];
  if (v9)
  {
    do
    {
      unint64_t v10 = v9;
      uint64_t v9 = (uint64_t *)*v9;
    }

    while (v9);
  }

  else
  {
    unint64_t v11 = *a5;
    do
    {
      unint64_t v10 = (uint64_t *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      unint64_t v11 = v10;
    }

    while (!v12);
  }

  BOOL v13 = *a4;
  if (*a1 == *a4)
  {
    uint64_t v15 = (uint64_t *)(a1 + 1);
  }

  else
  {
    __int128 v14 = (uint64_t *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        __int128 v14 = (uint64_t *)v14[1];
      }

      while (v14);
    }

    else
    {
      uint64_t v16 = *a4;
      do
      {
        uint64_t v15 = (uint64_t *)v16[2];
        BOOL v12 = *v15 == (void)v16;
        uint64_t v16 = v15;
      }

      while (v12);
    }
  }

  __int128 v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  *(void *)&__int128 v37 = qword_1001A3B40;
  *((void *)&v37 + 1) = qword_1001A3B40;
  char v38 = 2;
  __int128 v35 = *((_OWORD *)v8 + 2);
  uint64_t v36 = v8[6];
  if (v13 != v10)
  {
    unint64_t v17 = (__int128 *)(a3 + 2);
    while (1)
    {
      __int128 v37 = *((_OWORD *)v13 + 2);
      char v38 = *((_BYTE *)v13 + 48);
      __int128 v33 = v39;
      uint64_t v34 = v40;
      sub_10000D658((unint64_t *)&v33, (uint64_t)&v37, (uint64_t)&v29);
      if ((_BYTE)v30) {
        break;
      }
LABEL_23:
      __int128 v27 = v39;
      uint64_t v28 = v40;
      sub_10000D72C((uint64_t)&v27, (uint64_t)&v37, (uint64_t)&v29);
      __int128 v39 = v29;
      LOBYTE(v4crc32(0LL, 0LL, 0) = v30;
      uint64_t v15 = *a4;
      unint64_t v18 = (uint64_t *)(*a4)[1];
      uint64_t v19 = *a4;
      if (v18)
      {
        do
        {
          BOOL v13 = v18;
          unint64_t v18 = (uint64_t *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          BOOL v13 = (uint64_t *)v19[2];
          BOOL v12 = *v13 == (void)v19;
          uint64_t v19 = v13;
        }

        while (!v12);
      }

      *a4 = v13;
      if (v13 == v10) {
        goto LABEL_32;
      }
    }

    if (v30 == 3)
    {
    }

    else if ((unint64_t)v29 >= *((void *)&v29 + 1))
    {
      goto LABEL_23;
    }

LABEL_22:
    int v31 = *a3;
    __int128 v32 = *v17;
    *(void *)&__int128 v29 = sub_1000222B4(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_100022084(a1, (uint64_t **)&v29);
    *a4 = (uint64_t *)sub_100022198(a1, (uint64_t ***)&v29);
    goto LABEL_23;
  }

  sub_10003B20C(a1, v3 & 1, (uint64_t)v22);
  sub_1000198A4(a1 + 56, v22);
  *(_OWORD *)(a1 + 72) = v22[1];
  unint64_t v18 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
  if (*((void *)&v22[0] + 1))
  {
    uint64_t v19 = (unint64_t *)(*((void *)&v22[0] + 1) + 8LL);
    do
      __int128 v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return a1;
}

          __int128 v23 = sub_1000A932C(v9, a2);
          if ((v24 & 1) == 0) {
            goto LABEL_25;
          }
          __int128 v25 = sub_1000A9494(v9, v23);
          uint64_t v9 = v23 + 2;
          uint64_t result = sub_1000A9494(v23 + 2, a2);
          if (!(_DWORD)result)
          {
            unint64_t v10 = v11 + 1;
            if (v25) {
              continue;
            }
LABEL_25:
            uint64_t result = sub_1000A8B6C(v8, v23, a3, -v11, a5 & 1);
            uint64_t v9 = v23 + 2;
LABEL_27:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }

          a4 = -v11;
          a2 = v23;
          if (v25) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2) {
          return (uint64_t)sub_1000A98E0((char *)v9, (char *)a2, (char *)a2, a3);
        }
        return result;
    }
  }

      if (std::chrono::steady_clock::now().__d_.__rep_ >= v4.__d_.__rep_) {
        break;
      }
    }

    *(_BYTE *)(a1 + 3672) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)(a1 + 160) != *(void *)(a1 + 152))
    {
      uint64_t v9 = 0LL;
      unint64_t v10 = 0;
      do
      {
        if (*(_BYTE *)(a1 + 16)) {
          break;
        }
        v10 |= sub_1000C411C(a1, (uint64_t)v18, v9) == 0;
        sub_1000C446C(a1, (uint64_t)v18, v9, 0, 1, (unint64_t *)&__lk);
        if (__lk.__m_ && !__lk.__m_[8].__m_.__opaque[0])
        {
          if (__lk.__m_[6].__m_.__opaque[8]) {
            unint64_t v11 = &__lk.__m_->__m_.__opaque[32];
          }
          else {
            unint64_t v11 = 0LL;
          }
          v10 |= sub_1000C4568((uint64_t)v11, (uint64_t)v18);
        }

        sub_1000C0F7C((unint64_t *)&__lk);
        ++v9;
      }

      while (v9 < (uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
      if ((v10 & 1) != 0)
      {
        BOOL v12 = *(void *)(a2 + 24);
        if (!v12) {
          sub_100014B10();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 48LL))(v12, v18);
      }
    }
  }

  while (!*(_BYTE *)(a1 + 16));
LABEL_41:
  v18[0] = off_10018B4F8;
  BOOL v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      uint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

LABEL_32:
  __int128 v23 = v39;
  uint64_t v24 = v40;
  uint64_t result = sub_10000D72C((uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v25);
  if ((_BYTE)v26)
  {
    if (v26 == 3)
    {
      goto LABEL_40;
    }

    unint64_t v21 = *((void *)&v25 + 1);
    unint64_t v22 = v25;
  }

  else
  {
    unint64_t v21 = *((void *)&v25 + 1);
    unint64_t v22 = v25 + 1;
  }

  if (v22 < v21)
  {
LABEL_40:
    __int128 v29 = v25;
    uint64_t v30 = v26;
    int v31 = *a3;
    __int128 v32 = *(_OWORD *)(a3 + 2);
    *(void *)&__int128 v29 = sub_1000222B4(a1, v15, (uint64_t)&v29, (uint64_t)&v29);
    sub_100022084(a1, (uint64_t **)&v29);
    uint64_t result = (uint64_t)sub_100022198(a1, (uint64_t ***)&v29);
    uint64_t v15 = (uint64_t *)result;
  }

  if ((*(_BYTE *)(a2 + 16) & 2) != 0) {
    __int128 v27 = v15;
  }
  else {
    __int128 v27 = v15 + 1;
  }
  sub_10001321C((uint64_t)v49, (uint64_t)v44);
  uint64_t v28 = v46;
  __int128 v29 = v44[0];
  v44[0] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
  }
  sub_10001321C((uint64_t)v49, (uint64_t)v44);
  sub_1000132BC((uint64_t)v49, (uint64_t)&__p);
  uint64_t v30 = a3 + 1;
  while (sub_1000EA3C0((uint64_t)v44, (uint64_t)&__p))
  {
    int v31 = v45;
    if ((_DWORD)v46)
    {
      if ((_DWORD)v46 != v28) {
        break;
      }
    }

    else
    {
      v36[0] = v27;
      v36[1] = v45;
      __int128 v37 = 2;
      sub_100066C68(&v38, v9, v36, v30);
      if (v28)
      {
        if (v40 != v28) {
          break;
        }
      }

      else
      {
        uint64_t v28 = v40;
      }

      __int128 v27 = v39;
      if (v39 != v31) {
        break;
      }
    }

    sub_1000EA5F0(v44);
    __int128 v27 = v31;
  }

  __int128 v32 = __p;
  __int128 __p = 0LL;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 24LL))(v32);
  }
  __int128 v33 = v44[0];
  v44[0] = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24LL))(v33);
  }
  uint64_t v34 = *(void *)a2;
  if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
    ++v34;
  }
  *(void *)a4 = v34;
  *(void *)(a4 + std::iostream::~basic_iostream(v2, v3 + 8) = v27;
  *(_BYTE *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = v28;
  if (v55 == v54)
  {
    __int128 v35 = 4LL;
  }

  else
  {
    if (!v55) {
      goto LABEL_59;
    }
    __int128 v35 = 5LL;
    __int128 v20 = v55;
  }

  (*(void (**)(void *))(*v20 + 8 * v35))(v20);
LABEL_59:
  uint64_t result = v51;
  __int128 v51 = 0LL;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40LL))(result);
  }
  return result;
}

LABEL_41:
  *a4 = v15;
  return result;
}

      if (!v44) {
        break;
      }
      goto LABEL_42;
    }

    uint64_t v43 = 0;
    if (!--v44) {
      break;
    }
LABEL_42:
  }

  if (!a1[6] || !a1[7])
  {
    __int128 v99 = "could not parse service name and realm";
    uint64_t v100 = 389;
    goto LABEL_100;
  }

  sub_100038210(v38);
  AAByteStreamClose(v30);
  free(v27);
  __sa = 0LL;
  __s1 = 0LL;
  unint64_t v119 = 0LL;
  __int128 v48 = (const char *)a1[6];
  if (!v48 || (uint64_t v49 = (const char *)a1[7]) == 0LL)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  411,  125,  0,  "missing service name or realm",  v46,  v47,  v116);
    uint64_t v52 = 0LL;
LABEL_111:
    v93 = 0;
    uint64_t v54 = 0LL;
    goto LABEL_156;
  }

  char v50 = a1[10] >> 62;
  if (v50)
  {
    fwrite("  obtaining a DAW token from the appleconnect CLI\n", 0x32uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  - realm: %s\n", v48);
    fprintf(__stderrp, "  - service name: %s\n", v49);
  }

  __int128 v51 = (char *)malloc(0x4000uLL);
  uint64_t v52 = v51;
  if (!v51)
  {
    __sa = 0LL;
    __s1 = 0LL;
    unint64_t v119 = 0LL;
    v90 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  420,  125,  *v90,  "malloc",  v91,  v92,  v116);
    goto LABEL_111;
  }

  __s1 = (char *)0x4000;
  unint64_t v119 = v51;
  uint64_t v53 = (char *)malloc(0x4000uLL);
  uint64_t v54 = v53;
  if (!v53)
  {
    uint64_t v94 = *__error();
    v97 = "malloc";
    unint64_t v98 = 422;
LABEL_115:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v98,  125,  v94,  v97,  v95,  v96,  v116);
    v93 = 0;
    goto LABEL_156;
  }

  snprintf( v53,  0x4000uLL,  "/usr/local/bin/appleconnect serviceTicket --show-signIn-dialog --dawToken --realm %s --serviceName %s",  v48,  v49);
  if (*a1)
  {
    if (v50) {
      fprintf(__stderrp, "  - account: %s\n", (const char *)*a1);
    }
    __strlcat_chk(v54, " --account ", 0x4000LL, 0x4000LL);
    __strlcat_chk(v54, *a1, 0x4000LL, 0x4000LL);
  }

  if (a1[1])
  {
    if (v50) {
      fprintf(__stderrp, "  - keytab file: %s\n", (const char *)a1[1]);
    }
    __strlcat_chk(v54, " --keytab ", 0x4000LL, 0x4000LL);
    __strlcat_chk(v54, a1[1], 0x4000LL, 0x4000LL);
  }

  uint64_t v55 = popen(v54, "r");
  if (!v55)
  {
    uint64_t v94 = *__error();
    uint64_t v116 = (char)v54;
    v97 = "%s";
    unint64_t v98 = 444;
    goto LABEL_115;
  }

  uint64_t v56 = v55;
  int v57 = 0LL;
  while (1)
  {
    uint64_t v58 = fread(&v52[v57], 1uLL, 0x4000 - v57, v56);
    if (v58)
    {
      uint64_t v61 = v57 + v58;
      if (__CFADD__(v57, v58) || v61 > 0x4000)
      {
        __sa = v57;
        uint64_t v62 = "invalid read";
        unint64_t v63 = 454;
        goto LABEL_153;
      }

      goto LABEL_70;
    }

    if (feof(v56)) {
      break;
    }
    if (ferror(v56))
    {
      __sa = v57;
      uint64_t v109 = *__error();
      uint64_t v62 = "fread";
      unint64_t v63 = 452;
      goto LABEL_154;
    }

    uint64_t v61 = v57;
LABEL_70:
    int v57 = v61;
    if (v61 == 0x4000)
    {
      __sa = 0x4000LL;
      uint64_t v62 = "token is too long";
      unint64_t v63 = 447;
      goto LABEL_153;
    }
  }

  __sa = v57;
  if (v57)
  {
    __int128 v101 = v52 - 1;
    do
    {
      __int128 v102 = v101[v57];
      if (v101[v57] < 0) {
        uint64_t v103 = __maskrune(v102, 0x4000uLL);
      }
      else {
        uint64_t v103 = _DefaultRuneLocale.__runetype[v102] & 0x4000;
      }
      if (!v103) {
        break;
      }
      --v57;
    }

    while (v57);
    __sa = v57;
  }

  uint64_t v104 = v57 + 1;
  uint64_t v105 = v57 == -1LL;
  uint64_t v106 = v105 << 63 >> 63;
  if (v106 != v105 || v106 < 0 || (v104 & 0x8000000000000000LL) != 0) {
    goto LABEL_152;
  }
  if (v104 <= 0x4000)
  {
    uint64_t v110 = v119;
LABEL_140:
    __sa = v57 + 1;
    v52[v57] = 0;
    if (v57 + 1 >= 6
      && (*(_DWORD *)v110 == 1415004484 ? (v112 = *((unsigned __int16 *)v110 + 2) == 20043) : (v112 = 0), v112))
    {
      if ((sub_100037450((uint64_t)a1, 2u, v110, 0LL) & 0x80000000) == 0)
      {
        v93 = 1;
        goto LABEL_147;
      }

      v113 = "daw token";
      v114 = 463;
    }

    else
    {
      v113 = "invalid token format";
      v114 = 460;
    }

    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v114,  125,  0,  v113,  v59,  v60,  v115);
    v93 = 0;
LABEL_147:
    uint64_t v52 = v110;
    goto LABEL_155;
  }

  for (uint64_t i = 0x4000LL; i < v104; i += v108)
  {
    __int128 v108 = i >> 1;
    if ((i & (i >> 1)) != 0) {
      __int128 v108 = i & (i >> 1);
    }
  }

  if (i >= 0x2000000001LL)
  {
    *__error() = 12;
    goto LABEL_151;
  }

  __int128 v111 = (char *)realloc(v52, i);
  if (v111)
  {
    uint64_t v110 = v111;
    __s1 = (char *)i;
    unint64_t v119 = v111;
    uint64_t v52 = v111;
    goto LABEL_140;
  }

  free(v52);
LABEL_151:
  uint64_t v52 = 0LL;
  __sa = 0LL;
  __s1 = 0LL;
  unint64_t v119 = 0LL;
LABEL_152:
  uint64_t v62 = "token is too long";
  unint64_t v63 = 459;
LABEL_153:
  uint64_t v109 = 0;
LABEL_154:
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDAWToken",  v63,  125,  v109,  v62,  v59,  v60,  v115);
  v93 = 0;
LABEL_155:
  pclose(v56);
LABEL_156:
  free(v54);
  free(v52);
  memset_s(&__sa, 0x18uLL, 0, 0x18uLL);
  if (!v93)
  {
    uint64_t v24 = "getting DAW token";
    __int128 v25 = 650;
    goto LABEL_102;
  }

  if (a1[4]) {
    return 0LL;
  }
  __int128 v5 = (const char *)a1[2];
  if (!v5)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetWestgateToken",  486,  125,  0,  "missing host or DAW token",  v22,  v23,  v115);
    __int128 v20 = 0LL;
    char v8 = 0LL;
LABEL_17:
    unint64_t v21 = 0LL;
    unint64_t v17 = 0LL;
LABEL_18:
    sub_100038210(v20);
    AAByteStreamClose(v8);
    free(v17);
    free(v21);
    uint64_t v24 = "getting Westgate token";
    __int128 v25 = 655;
LABEL_102:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextResolveWestgateToken",  v25,  125,  0,  v24,  v22,  v23,  v115);
    return 0xFFFFFFFFLL;
  }

  uint64_t v41 = v29;
  uint64_t v42 = v30;
  LOBYTE(v43) = 0;
  uint64_t v53 = 0;
  if (*((_BYTE *)a3 + 140))
  {
    uint64_t v43 = *a3;
    __int128 v44 = *((_DWORD *)a3 + 2);
    uint64_t v49 = *(_OWORD *)((char *)a3 + 76);
    char v50 = *(_OWORD *)((char *)a3 + 92);
    __int128 v51 = *(_OWORD *)((char *)a3 + 108);
    uint64_t v52 = *(_OWORD *)((char *)a3 + 124);
    uint64_t v45 = *(_OWORD *)((char *)a3 + 12);
    __int128 v46 = *(_OWORD *)((char *)a3 + 28);
    __int128 v47 = *(_OWORD *)((char *)a3 + 44);
    __int128 v48 = *(_OWORD *)((char *)a3 + 60);
    uint64_t v53 = 1;
  }

  uint64_t result = (uint64_t)sub_1000FDDA8(a1, v15, (uint64_t)&v41, (uint64_t)&v41);
  uint64_t v15 = (uint64_t *)result;
LABEL_44:
  *a4 = v15;
  return result;
}

_OWORD *sub_100021FEC(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = (void **)sub_10000CB80((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x50uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    v6[4] = *(_OWORD *)(a3 + 32);
    sub_10000CC04(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

uint64_t *sub_100022084(uint64_t **a1, uint64_t **a2)
{
  unsigned __int8 v2 = *a2;
  if (*a2 == *a1) {
    return *a1;
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 8);
    }

    while (v5);
  }

  else
  {
    uint64_t v7 = (uint64_t)*a2;
    do
    {
      uint64_t v6 = *(void *)(v7 + 16);
      BOOL v8 = *(void *)v6 == v7;
      uint64_t v7 = v6;
    }

    while (v8);
  }

  uint64_t v9 = v2[4];
  if ((v2[6] & 2) == 0) {
    ++v9;
  }
  if (v9 == (*(_BYTE *)(v6 + 48) & 1) + *(void *)(v6 + 40))
  {
    BOOL v10 = sub_1000F4C34(v6 + 56, (uint64_t)(v2 + 7));
    unsigned __int8 v2 = *a2;
    if (v10)
    {
      __int128 v16 = *((_OWORD *)v2 + 2);
      uint64_t v17 = v2[6];
      sub_10000D0E4(a1, v2);
      operator delete(v2);
      __int128 v12 = *(_OWORD *)(v6 + 32);
      uint64_t v13 = *(void *)(v6 + 48);
      sub_10000CFF0((unint64_t *)&v12, (unint64_t *)&v16, (uint64_t)&v14);
      *(_OWORD *)(v6 + 32) = v14;
      *(_BYTE *)(v6 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v15;
      *a2 = (uint64_t *)v6;
      return (uint64_t *)v6;
    }
  }

  return v2;
}

uint64_t **sub_100022198(uint64_t **a1, uint64_t ***a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t result = *a2;
  if (*a2 == v3) {
    return v3;
  }
  uint64_t v6 = result[1];
  if (v6)
  {
    do
    {
      uint64_t v7 = (uint64_t **)v6;
      uint64_t v6 = (uint64_t *)*v6;
    }

    while (v6);
  }

  else
  {
    BOOL v8 = *a2;
    do
    {
      uint64_t v7 = (uint64_t **)v8[2];
      BOOL v9 = *v7 == (uint64_t *)v8;
      BOOL v8 = v7;
    }

    while (!v9);
  }

  if (v7 != v3)
  {
    BOOL v10 = v7[4];
    if (((_BYTE)v7[6] & 2) == 0) {
      BOOL v10 = (uint64_t *)((char *)v10 + 1);
    }
    if (v10 == (uint64_t *)((char *)result[5] + ((_BYTE)result[6] & 1)))
    {
      if (sub_1000F4C34((uint64_t)(result + 7), (uint64_t)(v7 + 7)))
      {
        __int128 v17 = *((_OWORD *)v7 + 2);
        unint64_t v18 = v7[6];
        sub_10000D0E4(a1, (uint64_t *)v7);
        operator delete(v7);
        unint64_t v11 = *a2;
        __int128 v13 = *((_OWORD *)*a2 + 2);
        __int128 v14 = v11[6];
        sub_10000CFF0((unint64_t *)&v13, (unint64_t *)&v17, (uint64_t)&v15);
        __int128 v12 = *a2;
        *((_OWORD *)v12 + 2) = v15;
        *((_BYTE *)v12 + 4std::iostream::~basic_iostream(v2, v3 + 8) = v16;
      }

      return *a2;
    }
  }

  return result;
}

_OWORD *sub_1000222B4(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000E2B0(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v7[4] = *(_OWORD *)(a4 + 32);
    sub_10000CC04(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t sub_100022350(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174488;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000223B8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000223CC(uint64_t a1)
{
  *(void *)a1 = off_100174488;
  sub_100022644(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100022468(char *a1)
{
}

uint64_t sub_1000224AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000224E0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10002252C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001743B8);
  sub_1000223CC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100022564(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001743B8);
  sub_1000223CC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000225A4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001743B8);
  sub_1000223CC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000225E4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001743B8);
  sub_1000223CC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100022630(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000223CC(a1);
  operator delete(v1);
}

uint64_t sub_100022644(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100022794((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10002276C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100022794(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 505LL;
    __int16 v26 = 2082;
    __int128 v27 = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        __int128 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 505LL;
      __int16 v26 = 2082;
      __int128 v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100022988(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100022D28((uint64_t)a1, a2);
  *a1 = off_100174510;
  a1[45] = &off_100174610;
  a1[46] = &off_100174638;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174510;
  a1[45] = off_100174598;
  a1[46] = off_1001745C0;
  return a1;
}

void sub_100022A0C(_Unwind_Exception *a1)
{
}

uint64_t sub_100022A30(uint64_t a1)
{
  return a1;
}

void *sub_100022A70(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100023360((uint64_t)a1, a2);
  *a1 = off_100174730;
  a1[45] = &off_100174830;
  a1[46] = &off_100174858;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174730;
  a1[45] = off_1001747B8;
  a1[46] = off_1001747E0;
  return a1;
}

void sub_100022AF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100022B18(uint64_t a1)
{
  return a1;
}

void *sub_100022B58(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100023998((uint64_t)a1, a2);
  *a1 = off_100174950;
  a1[45] = &off_100174A50;
  a1[46] = &off_100174A78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174950;
  a1[45] = off_1001749D8;
  a1[46] = off_100174A00;
  return a1;
}

void sub_100022BDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100022C00(uint64_t a1)
{
  return a1;
}

void *sub_100022C40(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100023FD0((uint64_t)a1, a2);
  *a1 = off_100174B70;
  a1[45] = &off_100174C70;
  a1[46] = &off_100174C98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174B70;
  a1[45] = off_100174BF8;
  a1[46] = off_100174C20;
  return a1;
}

void sub_100022CC4(_Unwind_Exception *a1)
{
}

uint64_t sub_100022CE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100022D28(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001746A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100022D90(_Unwind_Exception *a1)
{
}

uint64_t sub_100022DA4(uint64_t a1)
{
  *(void *)a1 = off_1001746A8;
  sub_10002301C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100022E40(char *a1)
{
}

uint64_t sub_100022E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100022EB8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100022F04(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001745D8);
  sub_100022DA4(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100022F3C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001745D8);
  sub_100022DA4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100022F7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001745D8);
  sub_100022DA4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100022FBC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001745D8);
  sub_100022DA4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100023008(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100022DA4(a1);
  operator delete(v1);
}

uint64_t sub_10002301C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10002316C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100023144( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002316C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 636LL;
    __int16 v26 = 2082;
    __int128 v27 = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        __int128 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 636LL;
      __int16 v26 = 2082;
      __int128 v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100023360(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001748C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000233C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000233DC(uint64_t a1)
{
  *(void *)a1 = off_1001748C8;
  sub_100023654(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100023478(char *a1)
{
}

uint64_t sub_1000234BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000234F0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10002353C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001747F8);
  sub_1000233DC(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100023574(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001747F8);
  sub_1000233DC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000235B4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001747F8);
  sub_1000233DC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000235F4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001747F8);
  sub_1000233DC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100023640(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000233DC(a1);
  operator delete(v1);
}

uint64_t sub_100023654(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000237A4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10002377C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000237A4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 651LL;
    __int16 v26 = 2082;
    __int128 v27 = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        __int128 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 651LL;
      __int16 v26 = 2082;
      __int128 v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100023998(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174AE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100023A00(_Unwind_Exception *a1)
{
}

uint64_t sub_100023A14(uint64_t a1)
{
  *(void *)a1 = off_100174AE8;
  sub_100023C8C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100023AB0(char *a1)
{
}

uint64_t sub_100023AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100023B28(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100023B74(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174A18);
  sub_100023A14(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100023BAC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174A18);
  sub_100023A14((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100023BEC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174A18);
  sub_100023A14(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100023C2C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174A18);
  sub_100023A14((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100023C78(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100023A14(a1);
  operator delete(v1);
}

uint64_t sub_100023C8C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100023DDC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100023DB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100023DDC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 665LL;
    __int16 v26 = 2082;
    __int128 v27 = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        __int128 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 665LL;
      __int16 v26 = 2082;
      __int128 v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100023FD0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100174D08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100024038(_Unwind_Exception *a1)
{
}

uint64_t sub_10002404C(uint64_t a1)
{
  *(void *)a1 = off_100174D08;
  sub_1000242C4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000240E8(char *a1)
{
}

uint64_t sub_10002412C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100024160(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000241AC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100174C38);
  sub_10002404C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000241E4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100174C38);
  sub_10002404C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100024224(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174C38);
  sub_10002404C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100024264(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100174C38);
  sub_10002404C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000242B0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10002404C(a1);
  operator delete(v1);
}

uint64_t sub_1000242C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100024414((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000243EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100024414(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 672LL;
    __int16 v26 = 2082;
    __int128 v27 = v11;
    __int128 v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        __int128 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 672LL;
      __int16 v26 = 2082;
      __int128 v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100024608(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100174D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100024618(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100174D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100024638(uint64_t a1)
{
}

uint64_t sub_100024644(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  int v5 = a2 + 20;
  *(void *)a1 = v6;
  uint64_t v7 = a1 + 8;
  if ((*(_BYTE *)(a3 + 16) & 2) != 0) {
    unint64_t v8 = *(void *)a3;
  }
  else {
    unint64_t v8 = *(void *)a3 + 1LL;
  }
  unint64_t v9 = (*(_BYTE *)(a3 + 16) & 1) + *(void *)(a3 + 8) - 1LL;
  sub_1000EA2B8((uint64_t)&v22, v5);
  while (!sub_1000EA308((uint64_t)&v22, (uint64_t)(a2 + 27)))
  {
    unint64_t v10 = v23;
    if ((v24 & 2) == 0) {
      unint64_t v10 = v23 + 1;
    }
    if (v10 >= v8) {
      break;
    }
    sub_1000EA2B8((uint64_t)v21, &v22);
    sub_1000EA5F0(&v22);
    uint64_t v11 = v21[0];
    v21[0] = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
    }
  }

  if (sub_1000EA308((uint64_t)&v22, (uint64_t)(a2 + 27)))
  {
    sub_10002486C(v7, a2 + 27, a2 + 27, *((_DWORD *)a2 + 18));
  }

  else
  {
    sub_1000EA2B8((uint64_t)&v18, &v22);
    while (!sub_1000EA308((uint64_t)&v18, (uint64_t)(a2 + 27)))
    {
      unint64_t v12 = v19;
      if ((v20 & 2) == 0) {
        unint64_t v12 = v19 + 1;
      }
      if (v12 > v9) {
        break;
      }
      sub_1000EA2B8((uint64_t)v17, &v18);
      sub_1000EA5F0(&v18);
      uint64_t v13 = v17[0];
      v17[0] = 0LL;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
      }
    }

    sub_10002486C(v7, &v22, &v18, *((_DWORD *)a2 + 18));
    uint64_t v14 = v18;
    uint64_t v18 = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 24LL))(v14);
    }
  }

  uint64_t v15 = v22;
  uint64_t v22 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  *(_BYTE *)(a1 + 28std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  return a1;
}

void sub_1000247E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24LL))(a16);
  }
  uint64_t v25 = *(void *)(v23 - 120);
  *(void *)(v23 - 12crc32(0LL, 0LL, 0) = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 24LL))(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002486C(uint64_t a1, void *a2, void *a3, int a4)
{
  *(void *)a1 = 850045863LL;
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = 0u;
  *(void *)(a1 + 56) = 0LL;
  *(_DWORD *)(a1 + 64) = a4;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
  uint64_t v7 = a1 + 96;
  *(void *)(a1 + 72) = a1 + 80;
  sub_1000EA2B8(a1 + 96, a2);
  sub_1000EA2B8(a1 + 152, a2);
  sub_1000EA2B8(a1 + 208, a3);
  *(_BYTE *)(a1 + 272) = 0;
  if (!sub_1000EA308(v7, a1 + 208))
  {
    uint64_t v8 = *(void *)(a1 + 104);
    if ((*(_BYTE *)(a1 + 120) & 2) == 0) {
      ++v8;
    }
    *(void *)(a1 + 264) = v8;
  }

  return a1;
}

void sub_10002492C(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  *int v4 = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  uint64_t v8 = *v2;
  *uint64_t v2 = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
  }
  sub_100020B5C(*(void **)(v1 + 80));
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void sub_1000249AC(std::exception *a1)
{
}

void sub_1000249C0(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = (char *)sub_1001110BC(a1);
  sub_100006174(v16, v4);
  sub_10000AC5C((uint64_t)v11);
  if ((v17 & 0x80u) == 0) {
    int v5 = v16;
  }
  else {
    int v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  uint64_t v7 = sub_10000552C(&v12, (uint64_t)v5, v6);
  uint64_t v8 = sub_10000552C(v7, (uint64_t)" [", 2LL);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(*v8 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  unint64_t v9 = (void *)std::ostream::operator<<(v8, *(void *)(a1 + 32));
  sub_10000552C(v9, (uint64_t)"]", 1LL);
  sub_100005F24((uint64_t)v13, a2);
  *(void *)((char *)v11
  uint64_t v12 = v10;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
}

void sub_100024B00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  *(void *)(a1 + 20std::iostream::~basic_iostream(v2, v3 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  sub_100020B5C(*(void **)(a1 + 80));
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_100024B70(uint64_t a1)
{
  uint64_t result = sub_10000C8B0(a1 + 120);
  if (*(_BYTE *)(a1 + 113)) {
    return sub_10000C920(a1 + 24);
  }
  return result;
}

uint64_t sub_100024BAC(uint64_t a1, void *a2, unint64_t a3)
{
  *(_BYTE *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  *(void *)a1 = off_100174E20;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(void *)(a1 + 32) = a3;
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 40LL))(*a2) % a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    unint64_t v9 = std::generic_category();
    exception[1] = 152LL;
    exception[2] = v9;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4std::iostream::~basic_iostream(v2, v3 + 8) = 0;
    exception[7] = "Size is not a multiple of block size";
  }

  return a1;
}

void sub_100024C84(_Unwind_Exception *a1)
{
}

  ;
}

void *sub_100024CA0(void *a1)
{
  *a1 = off_100174E20;
  sub_100006224((uint64_t)(a1 + 2));
  return a1;
}

void sub_100024CD0(void *a1)
{
  *a1 = off_100174E20;
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_100024D00(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_100024D08(uint64_t a1)
{
}

uint64_t sub_100024D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
}

uint64_t *sub_100024D4C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)operator new(0x98uLL);
  uint64_t result = sub_10008E2E4(v4, a1);
  *a2 = (char *)v4 + *(void *)(*v4 - 104);
  return result;
}

void sub_100024D98(_Unwind_Exception *a1)
{
}

uint64_t sub_100024DAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
}

uint64_t sub_100024DBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
}

void *sub_100024DCC(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_100174EF0;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_100024E18(_Unwind_Exception *a1)
{
}

uint64_t sub_100024E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 __p = v67;
  __int128 v66 = xmmword_100142520;
  unint64_t v7 = sub_10001C700(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    unint64_t v9 = operator new(40 * v7);
    sub_10001CE68((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v66, 0LL, 0LL);
  }

  v64[0] = &__p;
  v64[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&__int128 v52 = *(void *)a3;
  *((void *)&v52 + 1) = v10;
  if (v10)
  {
    uint64_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v53[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v54 = *(void *)(a3 + 48);
  __int128 v55 = *(_OWORD *)(a3 + 56);
  __int128 v56 = *(_OWORD *)(a3 + 72);
  __int128 v57 = *(_OWORD *)(a3 + 88);
  char v58 = *(_BYTE *)(a3 + 104);
  uint64_t v13 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v59 = *(void *)(a3 + 112);
  uint64_t v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }

  __int128 v61 = *(_OWORD *)(a3 + 128);
  uint64_t v62 = *(void *)(a3 + 144);
  char v63 = *(_BYTE *)(a3 + 152);
  uint64_t v16 = *(void *)(a4 + 8);
  *(void *)&__int128 v40 = *(void *)a4;
  *((void *)&v40 + 1) = v16;
  if (v16)
  {
    unsigned __int8 v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  v41[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v42 = *(void *)(a4 + 48);
  __int128 v43 = *(_OWORD *)(a4 + 56);
  __int128 v44 = *(_OWORD *)(a4 + 72);
  __int128 v45 = *(_OWORD *)(a4 + 88);
  char v46 = *(_BYTE *)(a4 + 104);
  unint64_t v19 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v47 = *(void *)(a4 + 112);
  __int128 v48 = v19;
  if (v19)
  {
    char v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v49 = *(_OWORD *)(a4 + 128);
  uint64_t v50 = *(void *)(a4 + 144);
  char v51 = *(_BYTE *)(a4 + 152);
  sub_1000256F4((uint64_t)v64, &v52, &v40, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v22 = v48;
  if (v48)
  {
    uint64_t v23 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int16 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v60;
  if (v60)
  {
    __int128 v29 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  int v31 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1))
  {
    __int128 v32 = (unint64_t *)(*((void *)&v52 + 1) + 8LL);
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  (*(void (**)(void))(**(void **)(a2 + 16) + 144LL))(*(void *)(a2 + 16));
  if ((void)v66)
  {
    int v34 = 0;
    __int128 v35 = (unsigned int *)__p;
    uint64_t v36 = 40 * v66;
    do
    {
      int v37 = sub_10001CCB0(v35);
      int v38 = v37;
      if (v37 < 0) {
        break;
      }
      v34 += v37;
      v35 += 10;
      int v38 = v34;
      v36 -= 40LL;
    }

    while (v36);
  }

  else
  {
    int v38 = 0;
  }

  if (*((void *)&v66 + 1) && v67 != __p) {
    operator delete(__p);
  }
  return v38;
}

void sub_1000251CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  if (a53)
  {
    if (v55 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10002521C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 __p = v67;
  __int128 v66 = xmmword_100142520;
  unint64_t v7 = sub_10001C700(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    unint64_t v9 = operator new(40 * v7);
    sub_10001CE68((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v66, 0LL, 0LL);
  }

  v64[0] = &__p;
  v64[1] = a2;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)&__int128 v52 = *(void *)a3;
  *((void *)&v52 + 1) = v10;
  if (v10)
  {
    uint64_t v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v53[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v54 = *(void *)(a3 + 48);
  __int128 v55 = *(_OWORD *)(a3 + 56);
  __int128 v56 = *(_OWORD *)(a3 + 72);
  __int128 v57 = *(_OWORD *)(a3 + 88);
  char v58 = *(_BYTE *)(a3 + 104);
  uint64_t v13 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v59 = *(void *)(a3 + 112);
  uint64_t v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }

  __int128 v61 = *(_OWORD *)(a3 + 128);
  uint64_t v62 = *(void *)(a3 + 144);
  char v63 = *(_BYTE *)(a3 + 152);
  uint64_t v16 = *(void *)(a4 + 8);
  *(void *)&__int128 v40 = *(void *)a4;
  *((void *)&v40 + 1) = v16;
  if (v16)
  {
    unsigned __int8 v17 = (unint64_t *)(v16 + 8);
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  v41[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v42 = *(void *)(a4 + 48);
  __int128 v43 = *(_OWORD *)(a4 + 56);
  __int128 v44 = *(_OWORD *)(a4 + 72);
  __int128 v45 = *(_OWORD *)(a4 + 88);
  char v46 = *(_BYTE *)(a4 + 104);
  unint64_t v19 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v47 = *(void *)(a4 + 112);
  __int128 v48 = v19;
  if (v19)
  {
    char v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v49 = *(_OWORD *)(a4 + 128);
  uint64_t v50 = *(void *)(a4 + 144);
  char v51 = *(_BYTE *)(a4 + 152);
  sub_100025CAC((uint64_t)v64, &v52, &v40, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v22 = v48;
  if (v48)
  {
    uint64_t v23 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int16 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v60;
  if (v60)
  {
    __int128 v29 = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  int v31 = (std::__shared_weak_count *)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1))
  {
    __int128 v32 = (unint64_t *)(*((void *)&v52 + 1) + 8LL);
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  (*(void (**)(void))(**(void **)(a2 + 16) + 144LL))(*(void *)(a2 + 16));
  if ((void)v66)
  {
    int v34 = 0;
    __int128 v35 = (unsigned int *)__p;
    uint64_t v36 = 40 * v66;
    do
    {
      int v37 = sub_10001CCB0(v35);
      int v38 = v37;
      if (v37 < 0) {
        break;
      }
      v34 += v37;
      v35 += 10;
      int v38 = v34;
      v36 -= 40LL;
    }

    while (v36);
  }

  else
  {
    int v38 = 0;
  }

  if (*((void *)&v66 + 1) && v67 != __p) {
    operator delete(__p);
  }
  return v38;
}

void sub_1000255BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,uint64_t a53)
{
  if (a53)
  {
    if (v55 != __p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10002560C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 16) + 16LL))(*(void *)(a2 + 16), a3);
}

uint64_t sub_100025620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a4;
  for (uint64_t i = (void *)(a3 + 8); ; i += 2)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 16) + 24LL))( *(void *)(a2 + 16),  *(void *)(a1 + 32) * *(i - 1),  *i * *(void *)(a1 + 32));
    if ((_DWORD)result) {
      break;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return result;
}

void *sub_100025694(void *a1)
{
  *a1 = off_100174EF0;
  sub_100006224((uint64_t)(a1 + 2));
  return a1;
}

void sub_1000256C4(void *a1)
{
  *a1 = off_100174EF0;
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_1000256F4(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  uint64_t v15 = sub_100025910(a1, &v40, (uint64_t)&v29, a4, 0);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    unsigned __int8 v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    char v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    uint64_t v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    __int16 v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_1000258E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100025910(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *(void *)(a3 + 144);
  v35[0] = 0;
  v35[528] = 0;
  while (!sub_10003B85C((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000BE308())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:54:22)]";
      *((void *)&v32 + 1) = 104LL;
      LODWORD(v33) = 2;
      sub_100018E78(v27, &v32);
      sub_10000552C(&v30, (uint64_t)"sg: ", 4LL);
      sub_10011E9EC(&v30, a2);
      std::ostream::~ostream(&v30, off_100172858);
      sub_100019104((uint64_t)v27);
      std::ios::~ios(&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    sub_10007B490(a2, (uint64_t)v27, (uint64_t)&v32);
    __int128 v10 = *(uint64_t **)a1;
    (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(*(void *)(a1 + 8) + 16LL) + 128LL))( v27,  *(void *)(*(void *)(a1 + 8) + 16LL),  &v32);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10001EAB8(v10, *v10 + 40 * v11, 1LL, (uint64_t)v27, &v36);
    }

    else
    {
      sub_10001C2DC(*v10 + 40 * v11, (uint64_t)v27);
      ++v10[1];
    }

    uint64_t v12 = (int)v33;
    if ((v33 & 0x80000000) != 0) {
      int64_t v13 = (int)v33;
    }
    else {
      int64_t v13 = v33;
    }
    BOOL v14 = v13 >= 0 || (_DWORD)v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v34;
      if (sub_10003DA10((uint64_t)a2, a3, v34, v13))
      {
        sub_100019A88((uint64_t)v25, (uint64_t)a2);
        sub_10003D9D4((uint64_t)v25, a3, v16, v13, a4, (uint64_t)v27);
        sub_100018F60((uint64_t)v35, (uint64_t)v27);
        sub_100018FA4((uint64_t)v27);
        sub_100006224((uint64_t)&v26);
        sub_100006224((uint64_t)v25);
        sub_10003BD04((uint64_t)v35, (uint64_t)v27);
        sub_100018FFC((uint64_t)a2, (uint64_t)v27);
        sub_100006224((uint64_t)v29);
        sub_100006224((uint64_t)v27);
        sub_10003BA04((uint64_t)v35, (uint64_t)v27);
        sub_100018FFC(a3, (uint64_t)v27);
        sub_100006224((uint64_t)v29);
        sub_100006224((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sub_10003C884((uint64_t)a2, v13);
      }
      else {
        sub_10003CA5C((uint64_t)a2, v13);
      }
      v7 += v13;
    }

    else
    {
      uint64_t v21 = v12;
    }

    unsigned __int8 v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v15 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = v7;
LABEL_40:
  sub_100019A28((uint64_t)v35);
  return v21;
}

void sub_100025C38(_Unwind_Exception *a1)
{
}

uint64_t sub_100025CAC(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  __int128 v40 = v4;
  v41[0] = v5;
  *(_OWORD *)((char *)v41 + 9) = *(__int128 *)((char *)a2 + 25);
  uint64_t v42 = *((void *)a2 + 6);
  __int128 v43 = *(__int128 *)((char *)a2 + 56);
  __int128 v44 = *(__int128 *)((char *)a2 + 72);
  __int128 v45 = *(__int128 *)((char *)a2 + 88);
  char v46 = *((_BYTE *)a2 + 104);
  __int128 v6 = a2[7];
  __int128 v7 = a2[8];
  *((void *)a2 + 14) = 0LL;
  *((void *)a2 + 15) = 0LL;
  __int128 v47 = v6;
  __int128 v48 = v7;
  char v50 = *((_BYTE *)a2 + 152);
  uint64_t v49 = *((void *)a2 + 18);
  __int128 v8 = *a3;
  __int128 v9 = a3[1];
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  __int128 v29 = v8;
  v30[0] = v9;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a3 + 25);
  uint64_t v31 = *((void *)a3 + 6);
  __int128 v32 = *(__int128 *)((char *)a3 + 56);
  __int128 v10 = *(__int128 *)((char *)a3 + 72);
  __int128 v11 = *(__int128 *)((char *)a3 + 88);
  char v35 = *((_BYTE *)a3 + 104);
  __int128 v34 = v11;
  __int128 v33 = v10;
  __int128 v12 = a3[7];
  __int128 v13 = a3[8];
  *((void *)a3 + 14) = 0LL;
  *((void *)a3 + 15) = 0LL;
  __int128 v36 = v12;
  __int128 v37 = v13;
  uint64_t v14 = *((void *)a3 + 18);
  char v39 = *((_BYTE *)a3 + 152);
  uint64_t v38 = v14;
  uint64_t v15 = sub_100025EC8(a1, &v40, (uint64_t)&v29, a4, 0);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    unsigned __int8 v17 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  unint64_t v19 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    char v20 = (unint64_t *)(*((void *)&v29 + 1) + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    uint64_t v23 = (unint64_t *)(*((void *)&v47 + 1) + 8LL);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    uint64_t v26 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  return v15;
}

void sub_100025E9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100025EC8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v7 = 0LL;
  unint64_t v8 = *(void *)(a3 + 144);
  v35[0] = 0;
  v35[528] = 0;
  while (!sub_10003B85C((uint64_t)a2, a3))
  {
    if (a2[18] >= v8 || v7 >= a4) {
      break;
    }
    if (sub_1000BE308())
    {
      *(void *)&__int128 v32 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at app/disk_images/formats/raw.h:67:22)]";
      *((void *)&v32 + 1) = 104LL;
      LODWORD(v33) = 2;
      sub_100018E78(v27, &v32);
      sub_10000552C(&v30, (uint64_t)"sg: ", 4LL);
      sub_10011E9EC(&v30, a2);
      std::ostream::~ostream(&v30, off_100172858);
      sub_100019104((uint64_t)v27);
      std::ios::~ios(&v31);
    }

    v27[0] = 0LL;
    v27[1] = v8;
    char v28 = 2;
    sub_10007B490(a2, (uint64_t)v27, (uint64_t)&v32);
    __int128 v10 = *(uint64_t **)a1;
    (*(void (**)(void *__return_ptr, void, __int128 *))(**(void **)(*(void *)(a1 + 8) + 16LL) + 136LL))( v27,  *(void *)(*(void *)(a1 + 8) + 16LL),  &v32);
    uint64_t v11 = v10[1];
    if (v11 == v10[2])
    {
      sub_10001EAB8(v10, *v10 + 40 * v11, 1LL, (uint64_t)v27, &v36);
    }

    else
    {
      sub_10001C2DC(*v10 + 40 * v11, (uint64_t)v27);
      ++v10[1];
    }

    uint64_t v12 = (int)v33;
    if ((v33 & 0x80000000) != 0) {
      int64_t v13 = (int)v33;
    }
    else {
      int64_t v13 = v33;
    }
    BOOL v14 = v13 >= 0 || (_DWORD)v13 == 0;
    char v15 = v14;
    if (v14)
    {
      uint64_t v16 = v34;
      if (sub_10003DA10((uint64_t)a2, a3, v34, v13))
      {
        sub_100019A88((uint64_t)v25, (uint64_t)a2);
        sub_10003D9D4((uint64_t)v25, a3, v16, v13, a4, (uint64_t)v27);
        sub_100018F60((uint64_t)v35, (uint64_t)v27);
        sub_100018FA4((uint64_t)v27);
        sub_100006224((uint64_t)&v26);
        sub_100006224((uint64_t)v25);
        sub_10003BD04((uint64_t)v35, (uint64_t)v27);
        sub_100018FFC((uint64_t)a2, (uint64_t)v27);
        sub_100006224((uint64_t)v29);
        sub_100006224((uint64_t)v27);
        sub_10003BA04((uint64_t)v35, (uint64_t)v27);
        sub_100018FFC(a3, (uint64_t)v27);
        sub_100006224((uint64_t)v29);
        sub_100006224((uint64_t)v27);
      }

      if ((a5 & 1) != 0) {
        sub_10003C884((uint64_t)a2, v13);
      }
      else {
        sub_10003CA5C((uint64_t)a2, v13);
      }
      v7 += v13;
    }

    else
    {
      uint64_t v21 = v12;
    }

    unsigned __int8 v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v18 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    if ((v15 & 1) == 0) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = v7;
LABEL_40:
  sub_100019A28((uint64_t)v35);
  return v21;
}

void sub_1000261F0(_Unwind_Exception *a1)
{
}

void sub_100026264()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_10002629C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  sub_10001321C(*(void *)(*a1 + 8), (uint64_t)v14);
  sub_1000132BC(*(void *)(v5 + 8), (uint64_t)v13);
  sub_1000EA87C(v14, (uint64_t)v13, **(void **)v5, *a2);
  uint64_t v6 = v13[0];
  v13[0] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v7 = v14[0];
  v14[0] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 64LL))(*a2, *(void *)(v5 + 16));
  if ((_DWORD)result)
  {
    unsigned int v10 = result;
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v12 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"set size failed", v10);
  }

  uint64_t v9 = *a2;
  *a2 = 0LL;
  *a3 = v9;
  return result;
}

void sub_100026384( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24LL))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000263C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  sub_10001321C(*(void *)(*a1 + 8), (uint64_t)v14);
  sub_1000132BC(*(void *)(v5 + 8), (uint64_t)v13);
  sub_1000EA87C(v14, (uint64_t)v13, **(void **)v5, *a2);
  uint64_t v6 = v13[0];
  v13[0] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  uint64_t v7 = v14[0];
  v14[0] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 64LL))(*a2, *(void *)(v5 + 16));
  if ((_DWORD)result)
  {
    unsigned int v10 = result;
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v12 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"set size failed", v10);
  }

  uint64_t v9 = *a2;
  *a2 = 0LL;
  *a3 = v9;
  return result;
}

void sub_1000264B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24LL))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000264F4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_100174F48[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  return a1;
}

uint64_t sub_10002654C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

uint64_t sub_100026568(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

void *sub_100026584(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10002666C((uint64_t)a1, a2);
  *a1 = off_100174F70;
  a1[45] = &off_100175070;
  a1[46] = &off_100175098;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100174F70;
  a1[45] = off_100174FF8;
  a1[46] = off_100175020;
  return a1;
}

void sub_100026608(_Unwind_Exception *a1)
{
}

uint64_t sub_10002662C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002666C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100175108;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000266D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000266E8(uint64_t a1)
{
  *(void *)a1 = off_100175108;
  sub_100026960(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100026784(char *a1)
{
}

uint64_t sub_1000267C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000267FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100026848(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175038);
  sub_1000266E8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100026880(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100175038);
  sub_1000266E8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000268C0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175038);
  sub_1000266E8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100026900(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175038);
  sub_1000266E8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10002694C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000266E8(a1);
  operator delete(v1);
}

uint64_t sub_100026960(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100026AB0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100026A88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100026AB0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 191LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 191LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void sub_100026CA4(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA8uLL);
  sub_100026D0C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100026CF8(_Unwind_Exception *a1)
{
}

void *sub_100026D0C(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100175188;
  sub_10011FAE4(a1 + 3, a2, *a3);
  return a1;
}

void sub_100026D44(_Unwind_Exception *a1)
{
}

void sub_100026D58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100175188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100026D68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100175188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100026D88(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100026D98(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_1000F83FC(a1, a2, a3);
  *(void *)uint64_t v4 = off_100172A00;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v4 + 128));
  return a1;
}

void sub_100026DCC(_Unwind_Exception *a1)
{
}

void *sub_100026DE0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10002742C((uint64_t)a1, a2);
  *a1 = off_100175230;
  a1[45] = &off_100175330;
  a1[46] = &off_100175358;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175230;
  a1[45] = off_1001752B8;
  a1[46] = off_1001752E0;
  return a1;
}

void sub_100026E64(_Unwind_Exception *a1)
{
}

uint64_t sub_100026E88(uint64_t a1)
{
  return a1;
}

void *sub_100026EC8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100027A64((uint64_t)a1, a2);
  *a1 = off_100175450;
  a1[45] = &off_100175550;
  a1[46] = &off_100175578;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175450;
  a1[45] = off_1001754D8;
  a1[46] = off_100175500;
  return a1;
}

void sub_100026F4C(_Unwind_Exception *a1)
{
}

uint64_t sub_100026F70(uint64_t a1)
{
  return a1;
}

uint64_t sub_100026FB0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10001A1FC((uint64_t)v2 + 56);
    }
    operator delete(v2);
  }

  return a1;
}

uint64_t *sub_100026FF4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)a2;
  uint64_t v6 = a1 + 1;
  char v7 = *(_BYTE *)(a3 + 16);
  unint64_t v8 = (v7 & 1) + *(void *)(a3 + 8) - 1LL;
  unint64_t v9 = *(void *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 48) & 2) == 0) {
    ++v9;
  }
  if (v8 < v9)
  {
LABEL_5:
    uint64_t v10 = *(void *)a2;
    if (*a1 == (uint64_t *)a2)
    {
      uint64_t v12 = a2;
LABEL_23:
      if (v10)
      {
        uint64_t v25 = (void *)v12;
        unsigned __int8 v17 = (uint64_t **)(v12 + 8);
      }

      else
      {
        uint64_t v25 = (void *)a2;
        unsigned __int8 v17 = (uint64_t **)a2;
      }

      goto LABEL_36;
    }

    if (v10)
    {
      uint64_t v11 = *(void *)a2;
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = *(void *)(v11 + 8);
      }

      while (v11);
    }

    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v12 = *(void *)(v18 + 16);
        BOOL v13 = *(void *)v12 == v18;
        uint64_t v18 = v12;
      }

      while (v13);
    }

    unint64_t v19 = *(void *)a3;
    if ((*(_BYTE *)(a3 + 16) & 2) == 0) {
      ++v19;
    }
LABEL_35:
    unsigned __int8 v17 = (uint64_t **)sub_10000CB80((uint64_t)a1, &v25, a3);
    goto LABEL_36;
  }

  BOOL v13 = (v7 & 2) == 0;
  unint64_t v14 = *(void *)a3;
  if (v13) {
    ++v14;
  }
  if ((unint64_t)(*(_BYTE *)(a2 + 48) & 1) + *(void *)(a2 + 40) - 1 < v14)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    if (v15)
    {
      uint64_t v16 = *(uint64_t **)(a2 + 8);
      do
      {
        unsigned __int8 v17 = (uint64_t **)v16;
        uint64_t v16 = (uint64_t *)*v16;
      }

      while (v16);
    }

    else
    {
      char v20 = (uint64_t **)a2;
      do
      {
        unsigned __int8 v17 = (uint64_t **)v20[2];
        BOOL v13 = *v17 == (uint64_t *)v20;
        char v20 = v17;
      }

      while (!v13);
    }

    if (v17 == v6) {
      goto LABEL_33;
    }
    unint64_t v21 = (unint64_t)v17[4];
    if (((_BYTE)v17[6] & 2) == 0) {
      ++v21;
    }
    if (v8 < v21)
    {
LABEL_33:
      if (v15)
      {
        uint64_t v25 = v17;
      }

      else
      {
        uint64_t v25 = (void *)a2;
        unsigned __int8 v17 = (uint64_t **)(a2 + 8);
      }

LABEL_36:
      uint64_t v4 = *v17;
      if (!*v17)
      {
        uint64_t v4 = (uint64_t *)operator new(0x48uLL);
        v23[1] = v6;
        *((_OWORD *)v4 + 2) = *(_OWORD *)a3;
        v4[6] = *(void *)(a3 + 16);
        *(_OWORD *)(v4 + 7) = *(_OWORD *)(a3 + 24);
        *(void *)(a3 + 24) = 0LL;
        *(void *)(a3 + 32) = 0LL;
        char v24 = 1;
        sub_10000CC04(a1, (uint64_t)v25, v17, v4);
        v23[0] = 0LL;
        sub_100026FB0((uint64_t)v23);
      }

      return v4;
    }

    goto LABEL_35;
  }

  return v4;
}

void sub_100027200(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1001751D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100027210(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1001751D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100027230(uint64_t a1)
{
}

void *sub_100027270(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10000552C(a1, (uint64_t)"name: ", 6LL);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  char v7 = sub_10000552C(v3, v5, v6);
  unint64_t v8 = sub_10000552C(v7, (uint64_t)" checksum: ", 11LL);
  return sub_1000272CC(v8, (unsigned int *)(a2 + 24));
}

void *sub_1000272CC(void *a1, unsigned int *a2)
{
  uint64_t v3 = sub_10000552C(a1, (uint64_t)"crc32 {", 7LL);
  uint64_t v4 = 0LL;
  unsigned int v5 = *a2;
  unsigned int v11 = *a2;
  int v6 = *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24LL) + 8);
  do
  {
    *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v3 + *(void *)(*v3 - 24LL) + 8) & 0xFFFFFFB5 | 8;
    char v13 = 48;
    char v7 = sub_10000EDBC(v3, &v13);
    *(void *)((char *)v7 + *(void *)(*v7 - 24LL) + 24) = 2LL;
    unint64_t v8 = (void *)std::ostream::operator<<(v7, *((unsigned __int8 *)&v11 + v4));
    sub_10000552C(v8, (uint64_t)" ", 1LL);
    ++v4;
  }

  while (v4 != 3);
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v3 + *(void *)(*v3 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  char v12 = 48;
  unint64_t v9 = sub_10000EDBC(v3, &v12);
  *(void *)((char *)v9 + *(void *)(*v9 - 24LL) + 24) = 2LL;
  std::ostream::operator<<(v9, HIBYTE(v5));
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = v6;
  return sub_10000552C(v3, (uint64_t)"}", 1LL);
}

uint64_t sub_10002742C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001753C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100027494(_Unwind_Exception *a1)
{
}

uint64_t sub_1000274A8(uint64_t a1)
{
  *(void *)a1 = off_1001753C8;
  sub_100027720(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100027544(char *a1)
{
}

uint64_t sub_100027588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000275BC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100027608(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001752F8);
  sub_1000274A8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100027640(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001752F8);
  sub_1000274A8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100027680(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001752F8);
  sub_1000274A8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000276C0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001752F8);
  sub_1000274A8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10002770C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000274A8(a1);
  operator delete(v1);
}

uint64_t sub_100027720(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100027870((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100027848( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100027870(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unsigned int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 107LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    char v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 107LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100027A64(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001755E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100027ACC(_Unwind_Exception *a1)
{
}

uint64_t sub_100027AE0(uint64_t a1)
{
  *(void *)a1 = off_1001755E8;
  sub_100027D58(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100027B7C(char *a1)
{
}

uint64_t sub_100027BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100027BF4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100027C40(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100175518);
  sub_100027AE0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100027C78(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100175518);
  sub_100027AE0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100027CB8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175518);
  sub_100027AE0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100027CF8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100175518);
  sub_100027AE0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100027D44(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100027AE0(a1);
  operator delete(v1);
}

uint64_t sub_100027D58(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100027EA8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100027E80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100027EA8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      unsigned int v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 108LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    char v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 108LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t *sub_10002809C(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 2std::iostream::~basic_iostream(v2, v3 + 8) = **a4;
    sub_10000CC04(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

uint64_t sub_100028158(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = v5;
  *(_DWORD *)(a1 + 4) = 0;
  LODWORD(asub_1000296D8(&v5, 2) = *a2;
  int v6 = 32;
  sub_10002976C(&v7, &v6);
  *(_DWORD *)unsigned int v8 = (_DWORD)a2;
  memset(&v8[4], 0, 124);
  *(_DWORD *)(a1 + 4) = v7;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)&v8[80];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v8[96];
  *(_OWORD *)(a1 + 12crc32(0LL, 0LL, 0) = *(_OWORD *)&v8[112];
  *(_OWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v8[16];
  *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v8[48];
  return a1;
}

unint64_t sub_10002824C(void *a1, void **a2)
{
  DWORD1(v14) = crc32(0LL, 0LL, 0);
  HIDWORD(v14) = 1;
  int v4 = (void *)a1[75];
  if (v4 != a1 + 76)
  {
    do
    {
      crc32(0LL, 0LL, 0);
      sub_100028158((uint64_t)v15, (_DWORD *)(v4[7] + 24LL));
      __int128 v14 = *(_OWORD *)sub_100029B2C((uint64_t)&v14, v15);
      int v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          int v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          int v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          int v4 = v6;
        }

        while (!v7);
      }

      int v4 = v6;
    }

    while (v6 != a1 + 76);
  }

  sub_1000F49E8((uint64_t)v15, (uint64_t)&v14);
  uint64_t v8 = a1[10];
  uint64_t v9 = operator new(0x1F4uLL);
  unint64_t v10 = atomic_load(a1 + 78);
  unint64_t v11 = atomic_load(a1 + 78);
  sub_1000F3060(v9, 0LL, v10, a1 + 82, v11, v15, v8);
  char v12 = (void *)a1[9];
  a1[9] = v9;
  if (v12) {
    operator delete(v12);
  }
  return sub_1000F4DC8((uint64_t)a1, *a2);
}

void sub_100028398(_Unwind_Exception *a1)
{
}

const void **sub_1000283B4@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, CFDictionaryRef *a4@<X8>)
{
  CFTypeRef cf = 0LL;
  sub_100029DB4((uint64_t)&v168, a2);
  sub_100029DB4((uint64_t)&v160, &v168);
  sub_100029DB4((uint64_t)v156, a3);
  for (; !sub_1000F9408((uint64_t)&v160, (uint64_t)v156); ++v163)
  {
    int v7 = sub_1000F92BC(&v160);
    sub_1000F93B0((uint64_t)&v160);
  }

  __int128 v164 = v160;
  __int128 v160 = 0uLL;
  LOBYTE(v165) = 0;
  char v166 = 0;
  if (v162)
  {
    uint64_t v165 = v161;
    uint64_t v161 = 0LL;
    char v166 = 1;
  }

  uint64_t v167 = v163;
  if (v159) {
    sub_10000D8A4(&v158);
  }
  uint64_t v8 = v157;
  if (v157)
  {
    p_shared_owners = (unint64_t *)&v157->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v162) {
    sub_10000D8A4(&v161);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)&v160 + 1);
  if (*((void *)&v160 + 1))
  {
    char v12 = (unint64_t *)(*((void *)&v160 + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (sub_1000F9408((uint64_t)&v164, (uint64_t)a3))
  {
    sub_1000F8A20(buf);
    __int128 v14 = operator new[](0x408uLL);
    bzero(v14, 0x408uLL);
    sub_1000F8A50((unsigned __int16 *)buf, v14);
    *(void *)&__int128 values = v14;
    *((void *)&values + 1) = 1032LL;
    sub_1000F8C38((uint64_t)&values, (CFDataRef *)&v174);
    os_log_type_t v15 = (void *)values;
    *(void *)&__int128 values = 0LL;
    if (v15) {
      operator delete[](v15);
    }
    sub_100006174(__p, "");
    LOBYTE(values) = 0;
    char v186 = 0;
    sub_100029E88(&value, 80);
    sub_1000F8C70((uint64_t)__p, (uint64_t)&values, 0, (unsigned __int16 *)&value, v174, &v155);
    if (v186 && v185 < 0) {
      operator delete((void *)values);
    }
    if (v154 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&__int128 values = v155;
    CFArrayRef v16 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
    __p[0] = v16;
    if (cf)
    {
      CFRelease(cf);
      CFArrayRef v16 = (CFArrayRef)__p[0];
    }

    CFTypeRef cf = v16;
    __p[0] = 0LL;
    sub_10002A0C0((const void **)__p);
    sub_10000D8A4((const void **)&v155);
    sub_10002A0F0((const void **)&v174);
  }

  else
  {
    sub_1000F92BC(&v164);
    unsigned __int8 v17 = sub_1000F93B0((uint64_t)&v164);
    CFRetain(v17);
    sub_1000F92BC(&v164);
    uint64_t v18 = sub_1000F93B0((uint64_t)&v164);
    *(void *)buf = v18;
    if (cf)
    {
      CFRelease(cf);
      uint64_t v18 = *(const void **)buf;
    }

    CFTypeRef cf = v18;
    *(void *)buf = 0LL;
    sub_10002A0C0((const void **)buf);
  }

  sub_10001C610(&v168, a2);
  sub_10002A120(&v170, (uint64_t)(a2 + 2));
  uint64_t v172 = a2[4];
  sub_100029DB4((uint64_t)&v148, &v168);
  sub_100029DB4((uint64_t)v144, a3);
  unint64_t v119 = &v170;
  int v120 = a4;
  uint64_t v19 = 0LL;
  if (!sub_1000F9408((uint64_t)&v148, (uint64_t)v144))
  {
    do
    {
      int v20 = sub_1000F92BC(&v148);
      sub_1000F93B0((uint64_t)&v148);
      int v21 = sub_1000FE8B0(@"blkx");
      ++v152;
      BOOL v22 = sub_1000F9408((uint64_t)&v148, (uint64_t)v144);
      if (v20 == v21) {
        ++v19;
      }
    }

    while (!v22);
  }

  if (v147) {
    sub_10000D8A4(&v146);
  }
  uint64_t v23 = v145;
  if (v145)
  {
    __int16 v24 = (unint64_t *)&v145->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  if (v151) {
    sub_10000D8A4(&v150);
  }
  __int16 v26 = v149;
  if (v149)
  {
    unint64_t v27 = (unint64_t *)&v149->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  CFDataRef v155 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a1 + 793), 16LL);
  sub_100006174(&values, "");
  buf[0] = 0;
  buf[24] = 0;
  sub_100029E88(__p, 80);
  sub_1000F8C70((uint64_t)&values, (uint64_t)buf, 0, (unsigned __int16 *)__p, v155, (CFDictionaryRef *)&value);
  if (v185 < 0) {
    operator delete((void *)values);
  }
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(Mutable, value);
  sub_100029DB4((uint64_t)&v138, &v168);
  sub_100029DB4((uint64_t)&v134, a3);
  uint64_t v29 = sub_100029C80(&v138, &v134);
  BOOL v30 = sub_1000F9408((uint64_t)&v164, (uint64_t)a3);
  if (v137) {
    sub_10000D8A4(&v136);
  }
  uint64_t v31 = v135;
  if (v135)
  {
    __int128 v32 = (unint64_t *)&v135->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  if (v141) {
    sub_10000D8A4(&v140);
  }
  unint64_t v34 = v139;
  if (v139)
  {
    char v35 = (unint64_t *)&v139->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  uint64_t v37 = 2LL;
  if (!v19) {
    uint64_t v37 = 3LL;
  }
  uint64_t v122 = v37;
  uint64_t v38 = *(void **)(a1 + 600);
  char v39 = (void *)(a1 + 608);
  if (v38 == (void *)(a1 + 608))
  {
    CFIndex v40 = 0LL;
    uint64_t v41 = kCFAllocatorDefault;
  }

  else
  {
    CFIndex v40 = 0LL;
    uint64_t v41 = kCFAllocatorDefault;
    do
    {
      uint64_t v42 = (void *)v38[1];
      if (v42)
      {
        do
        {
          __int128 v43 = v42;
          uint64_t v42 = (void *)*v42;
        }

        while (v42);
      }

      else
      {
        do
        {
          __int128 v43 = (void *)v38[2];
          BOOL v44 = *v43 == (void)v38;
          uint64_t v38 = v43;
        }

        while (!v44);
      }

      ++v40;
      uint64_t v38 = v43;
    }

    while (v43 != v39);
  }

  BOOL v123 = v30;
  uint64_t v124 = v29;
  uint64_t v125 = (uint64_t)a3;
  uint64_t v121 = a2;
  CFMutableArrayRef v45 = CFArrayCreateMutable(v41, v40, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v46 = v45;
  CFMutableArrayRef v133 = v45;
  __int128 v47 = *(void **)(a1 + 600);
  if (v47 != v39)
  {
    int v48 = 0;
    uint64_t v126 = v45;
    do
    {
      uint64_t v49 = v47[7];
      int v175 = v48;
      if (sub_1000BE308())
      {
        *(void *)&__int128 values = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blk(const interval_sectors &, struct block &, const descriptor_t &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
        *((void *)&values + 1) = 204LL;
        int v184 = 2;
        sub_10002A1D4(buf, &values);
        sub_10000552C(&v181, (uint64_t)"generating for blkx ", 20LL);
        sub_100027270(&v181, v49);
        std::ostream::~ostream(&v181, off_1001757D8);
        sub_10002A420((uint64_t)buf);
        std::ios::~ios(v182);
      }

      uint64_t v50 = sub_1000F7414(a1, (uint64_t)(v47 + 4));
      __int128 v52 = (void *)v50;
      uint64_t v53 = v51;
      if ((void *)v50 == v51)
      {
        uint64_t v54 = 0LL;
      }

      else
      {
        uint64_t v54 = 0LL;
        __int128 v55 = (void *)v50;
        do
        {
          __int128 v56 = (void *)v55[1];
          if (v56)
          {
            do
            {
              __int128 v57 = v56;
              __int128 v56 = (void *)*v56;
            }

            while (v56);
          }

          else
          {
            do
            {
              __int128 v57 = (void *)v55[2];
              BOOL v44 = *v57 == (void)v55;
              __int128 v55 = v57;
            }

            while (!v44);
          }

          ++v54;
          __int128 v55 = v57;
        }

        while (v57 != v51);
      }

      if (sub_1000BE308())
      {
        *(void *)&__int128 values = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blk(const interval_sectors &, struct block &, const descriptor_t &) [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
        *((void *)&values + 1) = 204LL;
        int v184 = 2;
        sub_10002A2BC(buf, &values);
        sub_10000552C(&v181, (uint64_t)"num of runs ", 12LL);
        std::ostream::operator<<(&v181, v54);
        std::ostream::~ostream(&v181, off_1001759F8);
        sub_10002AA58((uint64_t)buf);
        std::ios::~ios(v182);
      }

      char v58 = operator new[](80 * v54 + 284);
      uint64_t v127 = v49;
      bzero(v58, 80 * v54 + 284);
      char v59 = *((_BYTE *)v47 + 48);
      if ((v59 & 2) != 0) {
        uint64_t v60 = v47[4];
      }
      else {
        uint64_t v60 = v47[4] + 1LL;
      }
      uint64_t v61 = (uint64_t)v58 + 204;
      if (v52 == v53)
      {
        uint64_t v63 = 0LL;
        int v62 = 0;
      }

      else
      {
        int v62 = 0;
        uint64_t v63 = 0LL;
        do
        {
          uint64_t v64 = v52[4];
          if ((v52[6] & 2) == 0) {
            ++v64;
          }
          if (v60 != v64)
          {
            sub_100020B9C(&v178, 2);
            uint64_t v65 = v52[4];
            if ((v52[6] & 2) == 0) {
              ++v65;
            }
            *(void *)&__int128 values = v60;
            *((void *)&values + 1) = v65;
            LOBYTE(v184) = 2;
            if ((v47[6] & 2) != 0) {
              uint64_t v66 = v47[4];
            }
            else {
              uint64_t v66 = v47[4] + 1LL;
            }
            LODWORD(v174) = v178;
            sub_1000F4C14((uint64_t)buf, &v174, (uint64_t)&values, v66, 0LL, 0LL);
            uint64_t v61 = sub_1000F893C((uint64_t)buf, v61);
            ++v62;
          }

          if ((v47[6] & 2) != 0) {
            uint64_t v67 = v47[4];
          }
          else {
            uint64_t v67 = v47[4] + 1LL;
          }
          sub_1000F4C14((uint64_t)buf, (_DWORD *)v52 + 14, (uint64_t)(v52 + 4), v67, v52[8], v52[9]);
          uint64_t v61 = sub_1000F893C((uint64_t)buf, v61);
          if (buf[3] == 128 || !*(_BYTE *)(a1 + 792))
          {
            unint64_t v68 = *(void *)&buf[16] + ((unint64_t)(v180 + 511) >> 9);
            else {
              uint64_t v63 = v68;
            }
          }

          int v69 = (void *)v52[1];
          uint64_t v70 = v52;
          if (v69)
          {
            do
            {
              unint64_t v71 = v69;
              int v69 = (void *)*v69;
            }

            while (v69);
          }

          else
          {
            do
            {
              unint64_t v71 = (void *)v70[2];
              BOOL v44 = *v71 == (void)v70;
              uint64_t v70 = v71;
            }

            while (!v44);
          }

          uint64_t v60 = (v52[6] & 1) + v52[5];
          ++v62;
          __int128 v52 = v71;
        }

        while (v71 != v53);
        char v59 = *((_BYTE *)v47 + 48);
      }

      if (v60 != v47[5] + (v59 & 1))
      {
        sub_100020B9C(&v177, 2);
        char v72 = *((_BYTE *)v47 + 48);
        uint64_t v74 = v47[4];
        uint64_t v73 = v47[5];
        *(void *)&__int128 values = v60;
        *((void *)&values + 1) = (v72 & 1) + v73;
        LOBYTE(v184) = 2;
        if ((v72 & 2) != 0) {
          uint64_t v75 = v74;
        }
        else {
          uint64_t v75 = v74 + 1;
        }
        LODWORD(v174) = v177;
        sub_1000F4C14((uint64_t)buf, &v174, (uint64_t)&values, v75, 0LL, 0LL);
        uint64_t v61 = sub_1000F893C((uint64_t)buf, v61);
        ++v62;
      }

      sub_100020B9C(&v176, -1);
      char v76 = *((_BYTE *)v47 + 48);
      uint64_t v77 = v47[4];
      *(void *)&__int128 values = (v76 & 1) + v47[5];
      *((void *)&values + 1) = values;
      LOBYTE(v184) = 2;
      if ((v76 & 2) != 0) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = v77 + 1;
      }
      LODWORD(v174) = v176;
      sub_1000F4C14((uint64_t)buf, &v174, (uint64_t)&values, v78, 0LL, 0LL);
      sub_1000F893C((uint64_t)buf, v61);
      unsigned int v79 = *((unsigned __int8 *)v47 + 48);
      uint64_t v80 = v47[4];
      uint64_t v81 = v47[5];
      if ((v79 & 2) != 0) {
        uint64_t v82 = v47[4];
      }
      else {
        uint64_t v82 = v80 + 1;
      }
      crc32(0LL, 0LL, 0);
      sub_100028158((uint64_t)&values, (_DWORD *)(v127 + 24));
      sub_1000F8938( buf,  v82,  (v79 & 1) + v81 - v80 + (int)(((v79 >> 1) & 1) - 1),  0LL,  v63,  &v175,  &values,  (v62 + 1));
      sub_1000F898C((uint64_t)buf, (uint64_t)v58);
      __p[0] = v58;
      __p[1] = (void *)(40LL * (v62 + 1) + 204);
      uint64_t v83 = v47[7];
      if (*(char *)(v83 + 23) < 0)
      {
        sub_10000AD88(buf, *(void **)v83, *(void *)(v83 + 8));
      }

      else
      {
        __int128 v84 = *(_OWORD *)v83;
        *(void *)&buf[16] = *(void *)(v83 + 16);
        *(_OWORD *)buf = v84;
      }

      CFMutableArrayRef v46 = v126;
      buf[24] = 1;
      sub_100029E88(&v178, 80);
      sub_1000F8C38((uint64_t)__p, (CFDataRef *)&v174);
      sub_1000F8C70(v83, (uint64_t)buf, v48, (unsigned __int16 *)&v178, v174, (CFDictionaryRef *)&values);
      sub_10002A0F0((const void **)&v174);
      CFArrayAppendValue(v126, (const void *)values);
      sub_10000D8A4((const void **)&values);
      v85 = __p[0];
      __p[0] = 0LL;
      if (v85) {
        operator delete[](v85);
      }
      BOOL v86 = (void *)v47[1];
      if (v86)
      {
        do
        {
          unint64_t v87 = v86;
          BOOL v86 = (void *)*v86;
        }

        while (v86);
      }

      else
      {
        do
        {
          unint64_t v87 = (void *)v47[2];
          BOOL v44 = *v87 == (void)v47;
          __int128 v47 = v87;
        }

        while (!v44);
      }

      ++v48;
      __int128 v47 = v87;
    }

    while (v87 != (void *)(a1 + 608));
  }

  if (sub_1000BE308())
  {
    int v88 = *__error();
    if (sub_1000BE2F0())
    {
      *(void *)&__int128 values = 0LL;
      uint64_t v89 = sub_1000BE278();
      v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG)) {
        uint64_t v91 = 3LL;
      }
      else {
        uint64_t v91 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      *(_DWORD *)&uint8_t buf[4] = 205;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blkx() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v46;
      unint64_t v92 = (char *)_os_log_send_and_compose_impl( v91,  &values,  0LL,  0LL,  &_mh_execute_header,  v90,  2LL,  "%.*s: blocks array: %{public}@",  buf,  28,  &v170);

      if (v92)
      {
        fprintf(__stderrp, "%s\n", v92);
        free(v92);
      }
    }

    else
    {
      uint64_t v93 = sub_1000BE278();
      uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)&uint8_t buf[4] = 205;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "UDIFWritable<ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, locks::Std>::generate_blkx() [Checksum = ChecksumScheduler<checksum::CRC32, DIConvertManager::convertWithDiskImage:error:::ExecSchedulerItBinder::ExecutionSchedulerSortedConsecutiveItTransform, locks::Std>, LockingPolicy = locks::Std]";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v46;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "%.*s: blocks array: %{public}@", buf, 0x1Cu);
      }
    }

    *__error() = v88;
  }

  unint64_t v95 = v122 + v124 + v123 - 1LL;
  if (v95 >> 61) {
    size_t v96 = -1LL;
  }
  else {
    size_t v96 = 8 * v95;
  }
  v97 = operator new[](v96);
  bzero(v97, v96);
  unint64_t v98 = operator new[](v96);
  bzero(v98, v96);
  CFMutableArrayRef v99 = v133;
  void *v97 = @"blkx";
  v97[1] = @"plst";
  CFTypeRef v100 = cf;
  *unint64_t v98 = v99;
  v98[1] = v100;
  v97[2] = @"uuid";
  v98[2] = Mutable;
  sub_100029DB4((uint64_t)buf, v121);
  CFIndex v101 = 3LL;
  while (!sub_1000F9408((uint64_t)buf, v125))
  {
    int v102 = sub_1000F92BC(buf);
    sub_1000F93B0((uint64_t)buf);
    if (sub_1000FE8B0(@"blkx") != v102)
    {
      int v103 = sub_1000F92BC(buf);
      sub_1000F93B0((uint64_t)buf);
      if (sub_1000FE8B0(@"plst") != v103)
      {
        int v104 = sub_1000F92BC(buf);
        sub_1000F93B0((uint64_t)buf);
        if (sub_1000FE8B0(@"uuid") != v104)
        {
          unsigned int v105 = sub_1000F92BC(buf);
          sub_1000F93B0((uint64_t)buf);
          v97[v101] = sub_1000FE970(v105);
          sub_1000F92BC(buf);
          v98[v101++] = sub_1000F93B0((uint64_t)buf);
        }
      }
    }

    sub_100029DB4((uint64_t)v129, buf);
    ++v180;
    if (v132) {
      sub_10000D8A4(&v131);
    }
    uint64_t v106 = v130;
    if (v130)
    {
      uint64_t v107 = (unint64_t *)&v130->__shared_owners_;
      do
        unint64_t v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
  }

  if (buf[24]) {
    sub_10000D8A4((const void **)&buf[16]);
  }
  uint64_t v109 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v110 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }

  *int v120 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)v97,  (const void **)v98,  v101,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  operator delete[](v98);
  operator delete[](v97);
  sub_10002B014((const void **)&v133);
  sub_10002B014((const void **)&Mutable);
  sub_10000D8A4((const void **)&value);
  sub_10002A0F0((const void **)&v155);
  if (v166) {
    sub_10000D8A4(&v165);
  }
  v112 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1))
  {
    v113 = (unint64_t *)(*((void *)&v164 + 1) + 8LL);
    do
      unint64_t v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  if (v171) {
    sub_10000D8A4(v119);
  }
  int v115 = v169;
  if (v169)
  {
    uint64_t v116 = (unint64_t *)&v169->__shared_owners_;
    do
      unint64_t v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }

  return sub_10002A0C0(&cf);
}

void sub_100029418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, const void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, const void *a42, const void *a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,const void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

int *sub_1000296D8(int *a1, int a2)
{
  *a1 = a2;
  v4[0] = xmmword_100142540;
  v4[1] = xmmword_100142550;
  uint64_t v5 = 0x900000008LL;
  int v6 = 10;
  sub_100019FE4((uint64_t)"checksum_type", a2, v4, 11LL);
  return a1;
}

_DWORD *sub_10002976C(_DWORD *result, _DWORD *a2)
{
  if (*a2 >= 0x408u)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &off_100175680;
    exception[1] = "_checksum";
    exception[2] = "field size too large";
  }

  *uint64_t result = *a2;
  return result;
}

void sub_1000297CC(std::exception *a1)
{
}

uint64_t sub_1000297E0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1000297E8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v4 = strlen(*(const char **)(a1 + 8));
  sub_10000552C(&v12, *(void *)(a1 + 8), v4);
  sub_10000552C(&v12, (uint64_t)" - ", 3LL);
  uint64_t v5 = *(const char **)(a1 + 16);
  size_t v6 = strlen(v5);
  sub_10000552C(&v12, (uint64_t)v5, v6);
  sub_100029958((uint64_t)v16, v11);
  *(uint64_t *)((char *)v11
  uint64_t v12 = v8;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
  sub_100029A84((uint64_t)v17, a2);
  v16[0] = v7;
  *(void *)((char *)v16 + *(void *)(v7 - 24)) = v9;
  v16[2] = v8;
  if (v18 < 0) {
    operator delete((void *)v17[8]);
  }
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

uint64_t sub_100029958(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  uint64_t v6 = *a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = a2[1];
  a2[1] = 0LL;
  uint64_t v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  uint64_t v8 = (std::ios_base *)((char *)a2 + *(void *)(v6 - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0LL;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 16 + *(void *)(v9 - 24)) = v10;
  *(void *)a1 = v11;
  *(void *)(a1 + *(void *)(*(void *)a1 - 24LL) + 4crc32(0LL, 0LL, 0) = std::stringbuf::basic_stringbuf( (std::stringbuf *)(a1 + 24),  (std::stringbuf *)(a2 + 3));
  return a1;
}

void sub_100029A5C(_Unwind_Exception *a1)
{
}

void sub_100029A84(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = sub_100005FC0(a1);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 64);
    std::string::size_type v7 = v4 - (void)v6;
  }

  else
  {
    std::string::size_type v7 = 0LL;
  }

  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
  a2->__r_.__value_.__l.__cap_ = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = 0LL;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  std::string::resize(a2, v7 + v5, 0);
  std::string::erase(a2, 0LL, v7);
  sub_100006064(a1);
}

void sub_100029B10(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100029B2C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  unint64_t v4 = a2[1];
  __int128 v5 = *(_OWORD *)(a2 + 22);
  __int128 v15 = *(_OWORD *)(a2 + 18);
  __int128 v16 = v5;
  __int128 v6 = *(_OWORD *)(a2 + 30);
  __int128 v17 = *(_OWORD *)(a2 + 26);
  __int128 v18 = v6;
  __int128 v7 = *(_OWORD *)(a2 + 6);
  __int128 v11 = *(_OWORD *)(a2 + 2);
  __int128 v12 = v7;
  __int128 v8 = *(_OWORD *)(a2 + 14);
  __int128 v13 = *(_OWORD *)(a2 + 10);
  __int128 v14 = v8;
  uint64_t v10 = (uint64_t *)__PAIR64__(v4, v3);
  sub_1000F4B00((uint64_t)&v10, (uint64_t)v19);
  uint64_t v10 = &v20;
  *(void *)&__int128 v11 = v4 >> 3;
  sub_100029BE8(a1, (uint64_t)&v10);
  return a1;
}

uint64_t sub_100029BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 == -1) {
    sub_100026264();
  }
  __int128 v6 = &v5;
  ((void (*)(uint64_t **, uint64_t))off_1001756A0[v2])(&v6, a1 + 4);
  return a1;
}

uLong sub_100029C48(const Bytef ****a1, _DWORD *a2)
{
  uLong result = crc32(*a2, ***a1, *((_DWORD *)**a1 + 2));
  *a2 = result;
  return result;
}

uint64_t sub_100029C80(void *a1, void *a2)
{
  if (v14) {
    sub_10000D8A4(&v13);
  }
  unint64_t v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v18) {
    sub_10000D8A4(&v17);
  }
  __int128 v7 = v16;
  if (v16)
  {
    __int128 v8 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return i;
}

void sub_100029D8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_100029DB4(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  sub_100029E20((_BYTE *)(a1 + 16), (uint64_t)(a2 + 2));
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = a2[4];
  return a1;
}

void sub_100029E0C(_Unwind_Exception *a1)
{
}

_BYTE *sub_100029E20(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    *(void *)a1 = 0LL;
    unsigned int v3 = *(const void **)a2;
    *(void *)a1 = *(void *)a2;
    if (v3) {
      CFRetain(v3);
    }
    a1[8] = 1;
  }

  return a1;
}

void sub_100029E6C(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 8)) {
    sub_10000D8A4((const void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_100029E88(_WORD *result, int a2)
{
  uint64_t v2 = 0LL;
  *uLong result = a2;
  uint64_t v5 = 0x10000800040002LL;
  int v6 = 4194336;
  __int16 v7 = 128;
  do
  {
    a2 &= *(unsigned __int16 *)((char *)&v5 + v2) ^ 0xFFFF;
    v2 += 2LL;
  }

  while (v2 != 14);
  if (a2)
  {
    __int16 v3 = a2;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_1001756D8;
    exception[1] = "block_attributes";
    *((_WORD *)exception + 16) = v3;
  }

  return result;
}

void sub_100029F6C(std::exception *a1)
{
}

void sub_100029F80(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)sub_1001110BC(a1);
  sub_100006174(v16, v4);
  sub_10000AC5C((uint64_t)v11);
  if ((v17 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  __int16 v7 = sub_10000552C(&v12, (uint64_t)v5, v6);
  __int128 v8 = sub_10000552C(v7, (uint64_t)" [", 2LL);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24LL) + std::iostream::~basic_iostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(*v8 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  unint64_t v9 = (void *)std::ostream::operator<<(v8, *(unsigned __int16 *)(a1 + 32));
  sub_10000552C(v9, (uint64_t)"]", 1LL);
  sub_100005F24((uint64_t)v13, a2);
  *(void *)((char *)v11
  uint64_t v12 = v10;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf(v13);
  std::ios::~ios(&v15);
}

const void **sub_10002A0C0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_10002A0F0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFTypeRef *sub_10002A120(CFTypeRef *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*((unsigned __int8 *)result + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*((_BYTE *)result + 8)) {
      return sub_10002A190(result, (CFTypeRef *)a2);
    }
  }

  else if (*((_BYTE *)result + 8))
  {
    uLong result = sub_10000D8A4(result);
    *((_BYTE *)v2 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  }

  else
  {
    *uLong result = 0LL;
    uLong result = *(CFTypeRef **)a2;
    *uint64_t v2 = *(CFTypeRef *)a2;
    if (result) {
      uLong result = (CFTypeRef *)CFRetain(result);
    }
    *((_BYTE *)v2 + std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  }

  return result;
}

CFTypeRef *sub_10002A190(CFTypeRef *a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRetain(*a2);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  *a1 = *a2;
  return a1;
}

void *sub_10002A1D4(void *a1, __int128 *a2)
{
  __int16 v3 = (std::ios_base *)(a1 + 46);
  sub_10002A3A4((uint64_t)a1, a2);
  *a1 = off_100175710;
  a1[45] = &off_100175810;
  a1[46] = &off_100175838;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175710;
  a1[45] = off_100175798;
  a1[46] = off_1001757C0;
  return a1;
}

void sub_10002A258(_Unwind_Exception *a1)
{
}

uint64_t sub_10002A27C(uint64_t a1)
{
  return a1;
}

void *sub_10002A2BC(void *a1, __int128 *a2)
{
  __int16 v3 = (std::ios_base *)(a1 + 46);
  sub_10002A9DC((uint64_t)a1, a2);
  *a1 = off_100175930;
  a1[45] = &off_100175A30;
  a1[46] = &off_100175A58;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12std::iostream::~basic_iostream(v2, v3 + 8) = -1;
  *a1 = off_100175930;
  a1[45] = off_1001759B8;
  a1[46] = off_1001759E0;
  return a1;
}

void sub_10002A340(_Unwind_Exception *a1)
{
}

uint64_t sub_10002A364(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002A3A4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001758A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10002A40C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002A420(uint64_t a1)
{
  *(void *)a1 = off_1001758A8;
  sub_10002A698(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10002A4BC(char *a1)
{
}

uint64_t sub_10002A500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10002A534(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10002A580(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001757D8);
  sub_10002A420(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10002A5B8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001757D8);
  sub_10002A420((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10002A5F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001757D8);
  sub_10002A420(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10002A638(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001757D8);
  sub_10002A420((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10002A684(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10002A420(a1);
  operator delete(v1);
}

uint64_t sub_10002A698(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10002A7E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10002A7C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002A7E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 136LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 136LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uLong result = __error();
  *uLong result = v5;
  return result;
}

uint64_t sub_10002A9DC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100175AC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8std::iostream::~basic_iostream(v2, v3 + 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10002AA44(_Unwind_Exception *a1)
{
}

uint64_t sub_10002AA58(uint64_t a1)
{
  *(void *)a1 = off_100175AC8;
  sub_10002ACD0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10002AAF4(char *a1)
{
}

uint64_t sub_10002AB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10002AB6C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10002ABB8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001759F8);
  sub_10002AA58(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10002ABF0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001759F8);
  sub_10002AA58((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10002AC30(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001759F8);
  sub_10002AA58(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10002AC70(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001759F8);
  sub_10002AA58((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10002ACBC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10002AA58(a1);
  operator delete(v1);
}

uint64_t sub_10002ACD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10002AE20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10002ADF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10002AE20(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    uint64_t v6 = sub_1000BE278();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v7, *((os_log_type_t *)a1 + 16))) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t v10 = *a1;
    else {
      uint64_t v11 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v21 = v4;
    __int16 v22 = 2080;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = 147LL;
    __int16 v26 = 2082;
    unint64_t v27 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v7,  v8,  "%.*s: <%lu> %{public}s",  buf,  38);

    if (v12)
    {
      fprintf(__stderrp, "%s\n", v12);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = sub_1000BE278();
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *a1;
      else {
        unsigned __int8 v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v21 = v4;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = 147LL;
      __int16 v26 = 2082;
      unint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uLong result = __error();
  *uLong result = v5;
  return result;
}

const void **sub_10002B014(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10002B044(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_100174F48[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 0;
  return a1;
}

uint64_t sub_10002B0A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_100174F48[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + std::iostream::~basic_iostream(v2, v3 + 8) = 1;
  return a1;
}

uint64_t sub_10002B110()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

void sub_10002B120(unint64_t *a1@<X8>)
{
  unint64_t v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

  ;
}

void sub_10002B138()
{
}

void sub_10002B1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002B260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002B460(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10002B59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002B9E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10002BA64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4crc32(0LL, 0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4crc32(0LL, 0LL, 0) = 0LL;
  return result;
}

void sub_10002BA74(uint64_t a1)
{
}

void sub_10002BA7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4crc32(0LL, 0LL, 0) = v5;

  [WeakRetained signalCommandCompletedWithXpcError:v6];
}

void sub_10002BAF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002BBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002BE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002C240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002C394(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

LABEL_19:
  uint64_t v23 = 0;
  unint64_t v114 = 0LL;
LABEL_22:
  __int16 v24 = *(std::__shared_weak_count **)v120;
  if (!*(void *)v120) {
    goto LABEL_26;
  }
  uint64_t v25 = (unint64_t *)(*(void *)v120 + 8LL);
  do
    __int16 v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v23) {
      goto LABEL_38;
    }
  }

  else
  {
LABEL_26:
    if (!v23) {
      goto LABEL_38;
    }
  }

  if (!v114)
  {
    v113 = 0LL;
    goto LABEL_44;
  }

  v113 = (void *)objc_claimAutoreleasedReturnValue(-[QuarantineFileHandler getFileInfoWithError:](v114, "getFileInfoWithError:", a3));
  if (v113 || !-[QuarantineFileHandler isQuarantined](v114, "isQuarantined"))
  {
    if (-[QuarantineFileHandler isQuarantined](v114, "isQuarantined"))
    {
      unint64_t v27 = *__error();
      if (sub_1000BE2F0())
      {
        lpsrc = 0LL;
        unint64_t v28 = sub_1000BE278();
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
          BOOL v30 = 3LL;
        }
        else {
          BOOL v30 = 2LL;
        }
        *(_DWORD *)buf = 68157954;
        *(_DWORD *)&uint8_t buf[4] = 58;
        *(_WORD *)int v120 = 2080;
        *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
        LODWORD(v10std::iostream::~basic_iostream(v2, v3 + 8) = 18;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl( v30,  &lpsrc,  0LL,  0LL,  &_mh_execute_header,  v29,  0LL,  "%.*s: Attaching a quarantined image",  (int)buf,  v108);

        if (v31)
        {
          fprintf(__stderrp, "%s\n", v31);
          free(v31);
        }
      }

      else
      {
        unint64_t v33 = sub_1000BE278();
        unint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68157954;
          *(_DWORD *)&uint8_t buf[4] = 58;
          *(_WORD *)int v120 = 2080;
          *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%.*s: Attaching a quarantined image",  buf,  0x12u);
        }
      }

      *__error() = v27;
    }

    goto LABEL_20;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  id v5 = *__error();
  if (!sub_1000BE2F0())
  {
    uint64_t v13 = sub_1000BE278();
    char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      __int16 v22 = 89;
      uint64_t v23 = 2080;
      __int16 v24 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      uint64_t v25 = 2114;
      __int16 v26 = v4;
      os_log_type_t v15 = "%.*s: Client reported error: %{public}@";
      uint64_t v16 = v14;
      unsigned __int8 v17 = OS_LOG_TYPE_ERROR;
      char v18 = 28;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, buf, v18);
      goto LABEL_19;
    }

    goto LABEL_19;
  }

  uint64_t v20 = 0LL;
  id v6 = sub_1000BE278();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    uint64_t v8 = 3LL;
  }
  else {
    uint64_t v8 = 2LL;
  }
  *(_DWORD *)buf = 68158210;
  __int16 v22 = 89;
  uint64_t v23 = 2080;
  __int16 v24 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
  uint64_t v25 = 2114;
  __int16 v26 = v4;
  uint64_t v9 = _os_log_send_and_compose_impl( v8,  &v20,  0LL,  0LL,  &_mh_execute_header,  v7,  16LL,  "%.*s: Client reported error: %{public}@",  COERCE_DOUBLE(68158210LL),  buf,  28);
LABEL_12:
  uint64_t v12 = (char *)v9;

  if (v12)
  {
    fprintf(__stderrp, "%s\n", v12);
    free(v12);
  }

LABEL_44:
    char v35 = -[DIController2IO_XPCHandlerAttach getInterconnectLocation](self, "getInterconnectLocation");
    unint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    if ([v36 emulateExternalDisk])
    {
      uint64_t v37 = os_variant_allows_internal_security_policies("com.apple.diskimagescontroller");

      if (v37)
      {
        uint64_t v38 = *__error();
        if (sub_1000BE2F0())
        {
          lpsrc = 0LL;
          char v39 = sub_1000BE278();
          CFIndex v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            uint64_t v41 = 3LL;
          }
          else {
            uint64_t v41 = 2LL;
          }
          *(_DWORD *)buf = 68157954;
          *(_DWORD *)&uint8_t buf[4] = 58;
          *(_WORD *)int v120 = 2080;
          *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
          LODWORD(v10std::iostream::~basic_iostream(v2, v3 + 8) = 18;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl( v41,  &lpsrc,  0LL,  0LL,  &_mh_execute_header,  v40,  0LL,  "%.*s: [Apple Internal] Creating an emulated external disk",  (int)buf,  v108);

          if (v42)
          {
            fprintf(__stderrp, "%s\n", v42);
            free(v42);
          }
        }

        else
        {
          __int128 v43 = sub_1000BE278();
          BOOL v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68157954;
            *(_DWORD *)&uint8_t buf[4] = 58;
            *(_WORD *)int v120 = 2080;
            *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%.*s: [Apple Internal] Creating an emulated external disk",  buf,  0x12u);
          }
        }

        *__error() = v38;
        char v35 = 4;
      }
    }

    else
    {
    }

    CFMutableArrayRef v45 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    CFMutableArrayRef v46 = (void *)objc_claimAutoreleasedReturnValue([v45 diskImageParamsXPC]);
    __int128 v47 = (std::__shared_weak_count *)[v46 numBlocks];

    int v48 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 diskImageParamsXPC]);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 shadowChain]);
    char v51 = [v50 isEmpty];

    if ((v51 & 1) == 0)
    {
      __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v52 diskImageParamsXPC]);
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v49 shadowChain]);
      uint64_t v54 = (std::__shared_weak_count *)[v53 topDiskImageNumBlocks];
    }

    lpsrc = (void *)8;
    unint64_t v131 = v47;
    v112 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    __int128 v55 = (void *)objc_claimAutoreleasedReturnValue([v112 diskImageParamsXPC]);
    unint64_t v111 = v55;
    char v132 = [v55 blockSize];
    __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([v56 diskImageParamsXPC]);
    char v58 = [v57 isWritableFormat];
    if ((v58 & 1) != 0)
    {
      char v59 = v35;
      uint64_t v60 = a3;
      uint64_t v61 = 0;
    }

    else
    {
      uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v110 shadowChain]);
      __int128 v55 = (void *)objc_claimAutoreleasedReturnValue([v49 activeShadowURL]);
      char v59 = v35;
      uint64_t v60 = a3;
      uint64_t v61 = v55 == 0LL;
    }

    CFMutableArrayRef v133 = v61;
    int v62 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    uint64_t v134 = [v62 hasUnlockedBackend];
    uint64_t v135 = 0;
    unint64_t v136 = v59;
    bzero(v137, 0x818uLL);

    uint64_t v63 = v60;
    if ((v58 & 1) == 0)
    {
    }

    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v64 instanceID]);
    [v65 getUUIDBytes:v137];

    uint64_t v66 = *__error();
    if (sub_1000BE2F0())
    {
      int v115 = 0LL;
      uint64_t v67 = sub_1000BE278();
      unint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
        int v69 = 3LL;
      }
      else {
        int v69 = 2LL;
      }
      uint64_t v70 = v131;
      unint64_t v71 = v132;
      char v72 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v137);
      *(_DWORD *)buf = 68158978;
      *(_DWORD *)&uint8_t buf[4] = 58;
      *(_WORD *)int v120 = 2080;
      *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
      uint64_t v121 = 2048;
      uint64_t v122 = v70;
      BOOL v123 = 1024;
      uint64_t v124 = v71;
      uint64_t v125 = 2114;
      uint64_t v126 = v72;
      uint64_t v127 = 1024;
      unint64_t v128 = 8;
      LODWORD(v10std::iostream::~basic_iostream(v2, v3 + 8) = 50;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl( v69,  &v115,  0LL,  0LL,  &_mh_execute_header,  v68,  0LL,  "%.*s: Creating device with %llu blocks of %u bytes, instance ID %{public}@, ABI version %d",  buf,  v108);

      if (v73)
      {
        fprintf(__stderrp, "%s\n", v73);
        free(v73);
      }
    }

    else
    {
      uint64_t v74 = sub_1000BE278();
      uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        char v76 = v131;
        uint64_t v77 = v132;
        uint64_t v78 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v137);
        *(_DWORD *)buf = 68158978;
        *(_DWORD *)&uint8_t buf[4] = 58;
        *(_WORD *)int v120 = 2080;
        *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
        uint64_t v121 = 2048;
        uint64_t v122 = v76;
        BOOL v123 = 1024;
        uint64_t v124 = v77;
        uint64_t v125 = 2114;
        uint64_t v126 = v78;
        uint64_t v127 = 1024;
        unint64_t v128 = 8;
        _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "%.*s: Creating device with %llu blocks of %u bytes, instance ID %{public}@, ABI version %d",  buf,  0x32u);
      }
    }

    *__error() = v66;
    unsigned int v79 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 inputURL]);
    uint64_t v81 = +[DIAttachParams copyWithURL:outURLStr:maxLen:error:]( &OBJC_CLASS___DIAttachParams,  "copyWithURL:outURLStr:maxLen:error:",  v80,  &v139,  1024LL,  v63);

    if ((v81 & 1) == 0) {
      goto LABEL_83;
    }
    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 shadowChain]);
    __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([v83 activeShadowURL]);
    if (v84)
    {
      v85 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
      BOOL v86 = (void *)objc_claimAutoreleasedReturnValue([v85 shadowChain]);
      unint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v86 activeShadowURL]);
      int v88 = +[DIAttachParams copyWithURL:outURLStr:maxLen:error:]( &OBJC_CLASS___DIAttachParams,  "copyWithURL:outURLStr:maxLen:error:",  v87,  &v140,  1024LL,  v63);

      if ((v88 & 1) == 0) {
        goto LABEL_83;
      }
    }

    else
    {
    }

    uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
    v90 = (void *)objc_claimAutoreleasedReturnValue([v89 inputURL]);
    uint64_t v91 = [v90 isFileURL];

    if (!v91
      || -[DIController2IO_XPCHandlerAttach updateFileBackingInfoWithRootDeviceEntryID:error:]( self,  "updateFileBackingInfoWithRootDeviceEntryID:error:",  &v138,  v63))
    {
      unint64_t v92 = IOConnectCallStructMethod( -[DIController2IO_XPCHandlerAttach ucConnection](self, "ucConnection"),  0,  &lpsrc,  0x830uLL,  &outputStruct,  &outputStructCnt);
      if ((_DWORD)v92)
      {
        uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Create device call failed, error=0x%x",  v92));
        __int128 v32 = +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  153LL,  v93,  v63);
      }

      else
      {
        -[DIController2IO_XPCHandlerAttach setIsNewDevice:](self, "setIsNewDevice:", v118 != 0);
        unint64_t v95 = outputStruct;
        size_t v96 = (void *)objc_claimAutoreleasedReturnValue(-[DIController2IO_XPCHandlerAttach attachParams](self, "attachParams"));
        [v96 setRegEntryID:v95];

        v97 = *__error();
        if (sub_1000BE2F0())
        {
          int v115 = 0LL;
          unint64_t v98 = sub_1000BE278();
          CFMutableArrayRef v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT)) {
            CFTypeRef v100 = 3LL;
          }
          else {
            CFTypeRef v100 = 2LL;
          }
          *(_DWORD *)buf = 68158210;
          *(_DWORD *)&uint8_t buf[4] = 58;
          *(_WORD *)int v120 = 2080;
          *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
          uint64_t v121 = 2048;
          uint64_t v122 = outputStruct;
          LODWORD(v10std::iostream::~basic_iostream(v2, v3 + 8) = 28;
          CFIndex v101 = (char *)_os_log_send_and_compose_impl( v100,  &v115,  0LL,  0LL,  &_mh_execute_header,  v99,  0LL,  "%.*s: Device registry entry ID: 0x%llx",  (int)buf,  v108,  v109);

          if (v101)
          {
            fprintf(__stderrp, "%s\n", v101);
            free(v101);
          }
        }

        else
        {
          int v102 = sub_1000BE278();
          int v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68158210;
            *(_DWORD *)&uint8_t buf[4] = 58;
            *(_WORD *)int v120 = 2080;
            *(void *)&v120[2] = "-[DIController2IO_XPCHandlerAttach createDeviceWithError:]";
            uint64_t v121 = 2048;
            uint64_t v122 = outputStruct;
            _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "%.*s: Device registry entry ID: 0x%llx",  buf,  0x1Cu);
          }
        }

        *__error() = v97;
        int v104 = -[DIController2IO_XPCHandlerAttach isNewDevice](self, "isNewDevice");
        if (v113) {
          unsigned int v105 = v104;
        }
        else {
          unsigned int v105 = 0;
        }
        if (v105 == 1
          && [v113 length]
          && (bzero(buf, 0x1060uLL),
              unint64_t v129 = (unsigned __int16)[v113 length],
              objc_msgSend(v113, "getBytes:length:", buf, objc_msgSend(v113, "length")),
              uint64_t v106 = IOConnectCallStructMethod( -[DIController2IO_XPCHandlerAttach ucConnection](self, "ucConnection"),  1u,  buf,  0x1062uLL,  0LL,  0LL),  (_DWORD)v106))
        {
          uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to quarantine device, error=0x%x",  v106));
          __int128 v32 = +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  153LL,  v107,  v63);
        }

        else
        {
          __int128 v32 = 1;
        }
      }

      goto LABEL_84;
    }

    __int128 v32 = objc_claimAutoreleasedReturnValue( +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  v27,  a3));
    goto LABEL_45;
  }

  return (id)objc_claimAutoreleasedReturnValue( +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  @"Cache is not supported when using pstack.",  a3));
}

LABEL_83:
    __int128 v32 = 0;
LABEL_84:

    goto LABEL_85;
  }

  uint64_t v50 = atomic_load(&v84);
  sub_10004D790(v87);
  sub_10009FCA4((uint64_t)v88);
  char v51 = v86;
  if (v86)
  {
    __int128 v52 = (unint64_t *)&v86->__shared_owners_;
    do
      uint64_t v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

  sub_10010008C(v89);
  return v50;
}

LABEL_38:
  __int128 v32 = 0;
LABEL_85:

  return v32;
}

    uint64_t v29 = 0;
    *__error() = v30;
    goto LABEL_39;
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  char v14 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  os_log_type_t v15 = [v13 copyItemAtURL:v14 toURL:v12 error:a3];

  if ((v15 & 1) == 0)
  {
    BOOL v30 = *__error();
    if (!sub_1000BE2F0())
    {
      CFIndex v40 = sub_1000BE278();
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68157954;
        CFMutableArrayRef v46 = 51;
        __int128 v47 = 2080;
        int v48 = "-[DIConvertParams prepareParamsForSquashWithError:]";
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%.*s: Failed to copy source disk image to temporary URL",  buf,  0x12u);
      }

      goto LABEL_38;
    }

    BOOL v44 = 0LL;
    uint64_t v37 = sub_1000BE278();
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      char v39 = 3LL;
    }
    else {
      char v39 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    CFMutableArrayRef v46 = 51;
    __int128 v47 = 2080;
    int v48 = "-[DIConvertParams prepareParamsForSquashWithError:]";
    LODWORD(v43) = 18;
    unint64_t v34 = (char *)_os_log_send_and_compose_impl( v39,  &v44,  0LL,  0LL,  &_mh_execute_header,  v38,  16LL,  "%.*s: Failed to copy source disk image to temporary URL",  (int)buf,  v43);

    if (v34) {
      goto LABEL_34;
    }
    goto LABEL_38;
  }

  uint64_t v16 = -[DIBaseParams initWithURL:error:](objc_alloc(&OBJC_CLASS___DIBaseParams), "initWithURL:error:", v12, a3);
  -[DIConvertParams setOutputParams:](self, "setOutputParams:", v16);

  unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(-[DIConvertParams outputParams](self, "outputParams"));
  char v18 = [v17 openExistingImageWithFlags:2 error:a3];

  if ((v18 & 1) == 0)
  {
LABEL_18:
    uint64_t v29 = 0;
    goto LABEL_39;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_shadowURLs, "objectAtIndex:", 0LL));
  uint64_t v20 = +[DIURL newDIURLWithNSURL:](&OBJC_CLASS___DIURL, "newDIURLWithNSURL:", v19);
  -[DIBaseParams setInputURL:](self, "setInputURL:", v20);

  int v21 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 path]);
  if (!v22)
  {

    goto LABEL_41;
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents componentsWithURL:resolvingAgainstBaseURL:]( &OBJC_CLASS___NSURLComponents,  "componentsWithURL:resolvingAgainstBaseURL:",  v23,  1LL));
  uint64_t v25 = v24 == 0LL;

  if (v25)
  {
LABEL_41:
    uint64_t v29 = +[DIError failWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:description:error:",  22LL,  @"Malformed URL format",  a3);
    goto LABEL_39;
  }

  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", self->_shadowURLs));
  [v26 removeObjectAtIndex:0];
  unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams shadowChain](self, "shadowChain"));
  unint64_t v28 = [v27 addShadowURLs:v26 error:a3];

  if ((v28 & 1) != 0)
  {
    -[DIBaseParams setDiskImageParamsXPC:](self, "setDiskImageParamsXPC:", 0LL);
    uint64_t v29 = -[DIBaseParams openExistingImageWithFlags:error:](self, "openExistingImageWithFlags:error:", 0LL, a3);
  }

  else
  {
    uint64_t v29 = 0;
  }

LABEL_39:
  return v29;
}

        *__error() = v27;
      }

    sub_1000C0F7C(&v55);
    if (v20) {
      break;
    }
    if (v17 == v13) {
      goto LABEL_57;
    }
  }

  uint64_t v13 = v5;
LABEL_57:
  char v39 = v65;
  if (v65)
  {
    CFIndex v40 = (unint64_t *)&v65->__shared_owners_;
    do
      uint64_t v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

  uint64_t v42 = v57;
  if (v57)
  {
    __int128 v43 = (unint64_t *)&v57->__shared_owners_;
    do
      BOOL v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  return v13;
}

  unint64_t v34 = v77;
  if (v77)
  {
    char v35 = (unint64_t *)&v77->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  uint64_t v37 = v76;
  if (v76)
  {
    uint64_t v38 = (unint64_t *)&v76->__shared_owners_;
    do
      char v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }

  CFIndex v40 = v75;
  if (v75)
  {
    uint64_t v41 = (unint64_t *)&v75->__shared_owners_;
    do
      uint64_t v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  __int128 v43 = v74;
  if (v74)
  {
    BOOL v44 = (unint64_t *)&v74->__shared_owners_;
    do
      CFMutableArrayRef v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  CFMutableArrayRef v46 = v73;
  if (v73)
  {
    __int128 v47 = (unint64_t *)&v73->__shared_owners_;
    do
      int v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  uint64_t v49 = v72;
  if (v72)
  {
    uint64_t v50 = (unint64_t *)&v72->__shared_owners_;
    do
      char v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

  if (v69 && &v70 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v66);
  return sub_100043BCC((uint64_t *)&v78);
}

void sub_10002D1B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10002D69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002D85C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10002D874(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4crc32(0LL, 0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4crc32(0LL, 0LL, 0) = 0LL;
  return result;
}

void sub_10002D884(uint64_t a1)
{
}

void sub_10002D88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v14 = 0LL;
    uint64_t v5 = sub_1000BE278();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      uint64_t v7 = 3LL;
    }
    else {
      uint64_t v7 = 2LL;
    }
    *(_DWORD *)buf = 68158210;
    int v16 = 89;
    __int16 v17 = 2080;
    char v18 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
    __int16 v19 = 2114;
    id v20 = v3;
    int v13 = 28;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl( v7,  &v14,  0LL,  0LL,  &_mh_execute_header,  v6,  16LL,  "%.*s: Error calling back the client via XPC: %{public}@",  buf,  v13);

    if (v8)
    {
      fprintf(__stderrp, "%s\n", v8);
      free(v8);
    }
  }

  else
  {
    uint64_t v9 = sub_1000BE278();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68158210;
      int v16 = 89;
      __int16 v17 = 2080;
      char v18 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      __int16 v19 = 2114;
      id v20 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%.*s: Error calling back the client via XPC: %{public}@",  buf,  0x1Cu);
    }
  }

  *__error() = v4;
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4crc32(0LL, 0LL, 0) = v3;
}

void sub_10002DA58(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!v4)
  {
    int v5 = *__error();
    if (sub_1000BE2F0())
    {
      uint64_t v20 = 0LL;
      uint64_t v10 = sub_1000BE278();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v11 = 3LL;
      }
      else {
        uint64_t v11 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      int v22 = 89;
      __int16 v23 = 2080;
      __int16 v24 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      uint64_t v9 = _os_log_send_and_compose_impl( v11,  &v20,  0LL,  0LL,  &_mh_execute_header,  v7,  0LL,  "%.*s: Client acknowledged receiving the device handle",  COERCE_DOUBLE(68157954LL),  buf,  18);
      goto LABEL_12;
    }

    uint64_t v19 = sub_1000BE278();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v22 = 89;
      __int16 v23 = 2080;
      __int16 v24 = "+[DIControllerServiceDelegate sendHandleToClient:clientConnection:outError:]_block_invoke";
      os_log_type_t v15 = "%.*s: Client acknowledged receiving the device handle";
      int v16 = v14;
      os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
      uint32_t v18 = 18;
      goto LABEL_18;
    }

LABEL_20:
  *__error() = v5;
}

  if (*(_DWORD *)v14 && (sub_1000329EC(&v60, a1, a2, v14, a4) & 0x80000000) != 0)
  {
    id v26 = __stderrp;
    unint64_t v27 = "Failed to sign request\n";
    unint64_t v28 = 23LL;
    goto LABEL_42;
  }

  int v21 = curl_easy_setopt(v16, CURLOPT_URL, a2);
  int v22 = curl_easy_setopt(v16, CURLOPT_HTTPHEADER, v60);
  __int16 v23 = curl_easy_setopt(v16, CURLOPT_BUFFERSIZE, 102400LL);
  __int16 v24 = (curl_easy_setopt(v16, CURLOPT_TCP_KEEPALIVE, 1LL) | v23 | v22 | v21) == 0;
  if (*(void *)(v14 + 2784) && curl_easy_setopt(v16, CURLOPT_USERAGENT, *(void *)(v14 + 2784))) {
    __int16 v24 = 0;
  }
  if (*(void *)(v14 + 2760) && curl_easy_setopt(v16, CURLOPT_PROXY, *(void *)(v14 + 2760))) {
    __int16 v24 = 0;
  }
  if (*(void *)(v14 + 2768) && curl_easy_setopt(v16, CURLOPT_PINNEDPUBLICKEY, *(void *)(v14 + 2768))) {
    __int16 v24 = 0;
  }
  if (*(void *)(v14 + 2776) && curl_easy_setopt(v16, CURLOPT_PROXY_PINNEDPUBLICKEY, *(void *)(v14 + 2776))) {
    __int16 v24 = 0;
  }
  if (*(void *)(v14 + 2800) && curl_easy_setopt(v16, CURLOPT_PROXYHEADER, *(void *)(v14 + 2800))) {
    __int16 v24 = 0;
  }
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      unint64_t v33 = curl_easy_setopt(v16, CURLOPT_CUSTOMREQUEST, "GET");
      __int16 v25 = (curl_easy_setopt(v16, CURLOPT_FOLLOWLOCATION, 1LL) | v33) == 0;
    }

    else
    {
      if (a1) {
        goto LABEL_53;
      }
      __int16 v25 = curl_easy_setopt(v16, CURLOPT_PUT, 1LL) == CURLE_OK;
    }

    if (!v25) {
      __int16 v24 = 0;
    }
LABEL_53:
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_54;
  }

  if (curl_easy_setopt(v16, CURLOPT_POST, 1LL)) {
    __int16 v24 = 0;
  }
  if (!a4)
  {
    uint64_t v31 = curl_easy_setopt(v16, CURLOPT_POSTFIELDS, "");
    __int128 v32 = curl_easy_setopt(v16, CURLOPT_POSTFIELDSIZE, 0LL) | v31;
    goto LABEL_55;
  }

  if (self->_header.__ptr_.__value_)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    uint64_t v20 = v19;
    if (v19)
    {
      [v19 backend];
    }

    else
    {
      v85 = 0LL;
      BOOL v86 = 0LL;
    }

    sub_10011EBCC((uint64_t)&v85, &v92);
    if ((void)v92
    {
      *(void *)&v90 = v31;
      *((void *)&v90 + 1) = *((void *)&v92 + 1);
      __int128 v32 = &v92;
    }

    else
    {
      __int128 v32 = &v90;
    }

    *(void *)__int128 v32 = 0LL;
    *((void *)v32 + 1) = 0LL;
    unint64_t v33 = (std::__shared_weak_count *)*((void *)&v92 + 1);
    if (*((void *)&v92 + 1))
    {
      unint64_t v34 = (unint64_t *)(*((void *)&v92 + 1) + 8LL);
      do
        char v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }

    unint64_t v36 = v86;
    if (v86)
    {
      uint64_t v37 = (unint64_t *)&v86->__shared_owners_;
      do
        uint64_t v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

    char v39 = v90;
    if ((void)v90)
    {
      sub_100102A68(*(void *)(v90 + 40));
      atomic_store(*(void *)(*(void *)(v39 + 40) + 16LL), (unint64_t *)(*(void *)(v39 + 40) + 64LL));
    }

    CFIndex v40 = (std::__shared_weak_count *)*((void *)&v90 + 1);
    if (*((void *)&v90 + 1))
    {
      uint64_t v41 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
      do
        uint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    [v43 backend];
    BOOL v44 = (*(uint64_t (**)(void))(*(void *)v90 + 40LL))(v90);
    CFMutableArrayRef v45 = (std::__shared_weak_count *)*((void *)&v90 + 1);
    if (*((void *)&v90 + 1))
    {
      CFMutableArrayRef v46 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
      do
        __int128 v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    if (v44)
    {
      int v48 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
      uint64_t v49 = v48;
      if (v48)
      {
        [v48 backend];
        uint64_t v50 = v90;
      }

      else
      {
        uint64_t v50 = 0LL;
        v90 = 0uLL;
      }

      char v51 = (header *)operator new(0x50uLL);
      sub_1000D01A8(v51, v50);
      value = self->_header.__ptr_.__value_;
      self->_header.__ptr_.__value_ = v51;
      if (value) {
        operator delete(value);
      }
      uint64_t v53 = (std::__shared_weak_count *)*((void *)&v90 + 1);
      if (*((void *)&v90 + 1))
      {
        uint64_t v54 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
        do
          __int128 v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }

    __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    __int128 v57 = v56;
    if (v56) {
      [v56 backend];
    }
    else {
      v90 = 0uLL;
    }
    char v58 = self->_header.__ptr_.__value_;
    char v59 = operator new(0xFF0uLL);
    uint64_t v60 = sub_1000D36E0(v90, (uint64_t)v58);
    sub_1000D2F8C(v59, &v90, v58, v60, v61, &qword_100143460);
    *id v4 = v59;
    int v62 = (std::__shared_weak_count *)*((void *)&v90 + 1);
    if (*((void *)&v90 + 1))
    {
      uint64_t v63 = (unint64_t *)(*((void *)&v90 + 1) + 8LL);
      do
        uint64_t v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }

  else
  {
    unint64_t v27 = (unsigned __int16)-[DiskImageParamsXPC blockSize](self, "blockSize");
    unint64_t v28 = -[DiskImageParamsXPC blockSize](self, "blockSize");
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[DiskImageParamsXPC backendXPC](self, "backendXPC"));
    BOOL v30 = v29;
    if (v29)
    {
      [v29 backend];
    }

    else
    {
      v85 = 0LL;
      BOOL v86 = 0LL;
    }

    uint64_t v66 = (char *)operator new(0xFF0uLL);
    *(void *)&unint64_t v92 = sub_100120D7C();
    *((void *)&v92 + 1) = v67;
    LOBYTE(v9crc32(0LL, 0LL, 0) = 0;
    uint64_t v91 = 0;
    sub_1000D36D4((uint64_t)v66, v27, 0x100000u, 0LL, 0x10000000000000LL / v28, &v85, &qword_100143460, &v92, &v90);
    unint64_t v68 = v86;
    if (v86)
    {
      int v69 = (unint64_t *)&v86->__shared_owners_;
      do
        uint64_t v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }

    unint64_t v71 = *(void *)(v66 + 36);
    char v72 = *((_DWORD *)v66 + 11);
    uint64_t v73 = *((void *)v66 + 13);
    uint64_t v74 = (char *)operator new(0x50uLL);
    *(_DWORD *)uint64_t v74 = 2003069043;
    *(void *)(v74 + 4) = v71;
    *((_DWORD *)v74 + 3) = v72;
    uint64_t v75 = *((_OWORD *)v66 + 4);
    *((_OWORD *)v74 + 1) = *((_OWORD *)v66 + 3);
    *((_OWORD *)v74 + sub_1000296D8(&v5, 2) = v75;
    *((_OWORD *)v74 + 3) = *((_OWORD *)v66 + 5);
    *(void *)(v74 + 6sub_1000296D8(&v5, 2) = *(void *)(v66 + 94);
    *((_WORD *)v74 + 35) = 0;
    *((void *)v74 + 9) = v73;
    char v76 = self->_header.__ptr_.__value_;
    self->_header.__ptr_.__value_ = (header *)v74;
    if (v76)
    {
      operator delete(v76);
      uint64_t v74 = (char *)self->_header.__ptr_.__value_;
    }

    uint64_t v77 = *((unsigned __int16 *)v74 + 34);
    v84.receiver = self;
    v84.super_class = (Class)&OBJC_CLASS___DiskImageParamsASIF_XPC;
    uint64_t v65 = -[DiskImageParamsXPC setBlockSize:](&v84, "setBlockSize:", v77);
    *id v4 = v66;
  }

  uint64_t v78 = v88;
  if (v88)
  {
    unsigned int v79 = (unint64_t *)&v88->__shared_owners_;
    do
      uint64_t v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

  uint64_t v81 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    uint64_t v82 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      uint64_t v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }

  return (unique_ptr<DiskImage, std::default_delete<DiskImage>>)v65;
}

LABEL_51:
  return v43;
}

void sub_10002E3C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 reason]);
    objc_claimAutoreleasedReturnValue(+[DIError errorWithEnumValue:verboseInfo:](&OBJC_CLASS___DIError, "errorWithEnumValue:verboseInfo:", 150LL, v4));

    objc_end_catch();
    JUMPOUT(0x10002E324LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10002E7F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_10002E810(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v9 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v9];
  id v4 = v9;
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40LL);
    id v8 = v4;
    +[DIControllerServiceDelegate tryAttachWithParams:clientConnection:outError:]( &OBJC_CLASS___DIControllerServiceDelegate,  "tryAttachWithParams:clientConnection:outError:",  v5,  v6,  &v8);
    id v7 = v8;

    id v4 = v7;
  }

  [(id)a1[4] invalidate];
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10002EB70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v8];
  id v4 = v8;
  if (v3)
  {
    uint64_t v5 = -[DIConvertManager initWithParams:]( objc_alloc(&OBJC_CLASS___DIConvertManager),  "initWithParams:",  *(void *)(a1 + 32));
    id v7 = v4;
    -[DIConvertManager runWithError:](v5, "runWithError:", &v7);
    id v6 = v7;

    id v4 = v6;
  }

  [*(id *)(a1 + 32) invalidate];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002ED4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v8];
  id v4 = v8;
  if (v3)
  {
    uint64_t v5 = -[DIVerifyManager initWithParams:]( objc_alloc(&OBJC_CLASS___DIVerifyManager),  "initWithParams:",  *(void *)(a1 + 32));
    id v7 = v4;
    -[DIVerifyManager runWithError:](v5, "runWithError:", &v7);
    id v6 = v7;

    id v4 = v6;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002EF20(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v8 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v8];
  id v4 = v8;
  if (v3)
  {
    uint64_t v5 = -[DIUserDataManager initWithParams:]( objc_alloc(&OBJC_CLASS___DIUserDataManager),  "initWithParams:",  *(void *)(a1 + 32));
    id v7 = v4;
    -[DIUserDataManager embedWithError:](v5, "embedWithError:", &v7);
    id v6 = v7;

    id v4 = v6;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10002F0F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v10 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v10];
  id v4 = v10;
  uint64_t v5 = v4;
  if (!v3)
  {
    id v8 = v4;
LABEL_6:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_7;
  }

  id v6 = -[DIUserDataManager initWithParams:]( objc_alloc(&OBJC_CLASS___DIUserDataManager),  "initWithParams:",  *(void *)(a1 + 32));
  id v9 = v5;
  unsigned int v7 = -[DIUserDataManager retrieveWithError:](v6, "retrieveWithError:", &v9);
  id v8 = v9;

  if (!v7)
  {

    goto LABEL_6;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_7:
}

void sub_10002F2F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v9 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v9];
  id v4 = v9;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = v4;
  unsigned int v6 = [v5 keychainUnlockWithError:&v8];
  id v7 = v8;

  if (!v6)
  {
    id v4 = v7;
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v7 = v4;
    goto LABEL_6;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_6:
}

void sub_10002F4D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v9 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v9];
  id v4 = v9;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = v4;
  unsigned int v6 = [v5 GUIAskForPassphraseWithError:&v8];
  id v7 = v8;

  if (!v6)
  {
    id v4 = v7;
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v7 = v4;
    goto LABEL_6;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_6:
}

void sub_10002F6DC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v10 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v10];
  id v4 = v10;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v9 = v4;
  unsigned int v7 = [v5 createAndStoreInSystemKeychainWithAccount:v6 error:&v9];
  id v8 = v9;

  if (!v7)
  {
    id v4 = v8;
LABEL_5:
    (*(void (**)(void))(a1[6] + 16LL))();
    id v8 = v4;
    goto LABEL_6;
  }

  (*(void (**)(void))(a1[6] + 16LL))();
LABEL_6:
}

void sub_10002F8C4(uint64_t a1)
{
  v17[0] = 0LL;
  v17[1] = v17;
  v17[2] = 0x3032000000LL;
  v17[3] = sub_10002D874;
  v17[4] = sub_10002D884;
  id v18 = 0LL;
  uint64_t v2 = *(void **)(a1 + 32);
  id v16 = 0LL;
  unsigned int v3 = [v2 validateDeserializationWithError:&v16];
  id v4 = v16;
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v5 = -[DIController2IO_XPCHandlerBase initWithParams:]( objc_alloc(&OBJC_CLASS___DIController2IO_XPCHandlerBase),  "initWithParams:",  *(void *)(a1 + 32));
  id v15 = v4;
  unsigned __int8 v6 = -[DIBaseXPCHandler connectWithError:](v5, "connectWithError:", &v15);
  id v7 = v15;

  if ((v6 & 1) == 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_8:

    id v4 = v7;
    goto LABEL_9;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseXPCHandler remoteProxy](v5, "remoteProxy"));
  uint64_t v9 = *(void *)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10002FAB0;
  v12[3] = &unk_100175C28;
  uint64_t v14 = v17;
  id v10 = v5;
  uint64_t v13 = v10;
  [v8 retrieveStatsWithParams:v9 reply:v12];

  id v11 = v7;
  LODWORD(v9) = -[DIBaseXPCHandler completeCommandWithError:](v10, "completeCommandWithError:", &v11);
  id v4 = v11;

  if (!(_DWORD)v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

    id v7 = v4;
    goto LABEL_8;
  }

LABEL_5:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_9:
  _Block_object_dispose(v17, 8);
}

void sub_10002FA94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10002FAB0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  }
  [*(id *)(a1 + 32) signalCommandCompletedWithXpcError:v6];
}

void sub_10002FBE4(id a1)
{
  int v1 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v9 = 0LL;
    uint64_t v2 = sub_1000BE278();
    unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v11 = 63;
    __int16 v12 = 2080;
    uint64_t v13 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
    LODWORD(v_Block_object_dispose(va, 8) = 18;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( v4,  &v9,  0LL,  0LL,  &_mh_execute_header,  v3,  16LL,  "%.*s: Got to XPC interruption handler",  (int)buf,  v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }

  else
  {
    uint64_t v6 = sub_1000BE278();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v11 = 63;
      __int16 v12 = 2080;
      uint64_t v13 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%.*s: Got to XPC interruption handler",  buf,  0x12u);
    }
  }

  *__error() = v1;
}

void sub_10002FD70(id a1)
{
  int v1 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v9 = 0LL;
    uint64_t v2 = sub_1000BE278();
    unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v11 = 63;
    __int16 v12 = 2080;
    uint64_t v13 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
    LODWORD(v_Block_object_dispose(va, 8) = 18;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl( v4,  &v9,  0LL,  0LL,  &_mh_execute_header,  v3,  0LL,  "%.*s: Got to XPC invalidation handler",  (int)buf,  v8);

    if (v5)
    {
      fprintf(__stderrp, "%s\n", v5);
      free(v5);
    }
  }

  else
  {
    uint64_t v6 = sub_1000BE278();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      int v11 = 63;
      __int16 v12 = 2080;
      uint64_t v13 = "-[DIControllerServiceDelegate setupNewConnection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%.*s: Got to XPC invalidation handler",  buf,  0x12u);
    }
  }

  *__error() = v1;
}

uint64_t start()
{
  int v0 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v40 = 0LL;
    uint64_t v1 = sub_1000BE278();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v3 = 3LL;
    }
    else {
      uint64_t v3 = 2LL;
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v5 = (char *)objc_claimAutoreleasedReturnValue([v4 executablePath]);
    *(_DWORD *)buf = 68158210;
    int v42 = 28;
    __int16 v43 = 2080;
    BOOL v44 = "int main(int, const char **)";
    __int16 v45 = 2114;
    CFMutableArrayRef v46 = v5;
    int v38 = 28;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( v3,  &v40,  0LL,  0LL,  &_mh_execute_header,  v2,  0LL,  "%.*s: Controller path: %{public}@",  buf,  v38);

    if (v6)
    {
      fprintf(__stderrp, "%s\n", v6);
      free(v6);
    }
  }

  else
  {
    uint64_t v7 = sub_1000BE278();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
      id v10 = (char *)objc_claimAutoreleasedReturnValue([v9 executablePath]);
      *(_DWORD *)buf = 68158210;
      int v42 = 28;
      __int16 v43 = 2080;
      BOOL v44 = "int main(int, const char **)";
      __int16 v45 = 2114;
      CFMutableArrayRef v46 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%.*s: Controller path: %{public}@",  buf,  0x1Cu);
    }
  }

  *__error() = v0;
  int v11 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v40 = 0LL;
    uint64_t v12 = sub_1000BE278();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v14 = 3LL;
    }
    else {
      uint64_t v14 = 2LL;
    }
    uid_t v15 = geteuid();
    *(_DWORD *)buf = 68158210;
    int v42 = 28;
    __int16 v43 = 2080;
    BOOL v44 = "int main(int, const char **)";
    __int16 v45 = 1024;
    LODWORD(v46) = v15;
    LODWORD(v37) = 24;
    id v16 = (char *)_os_log_send_and_compose_impl( v14,  &v40,  0LL,  0LL,  &_mh_execute_header,  v13,  0LL,  "%.*s: Controller euid: %d",  (int)buf,  v37,  (_DWORD)v39);

    if (v16)
    {
      fprintf(__stderrp, "%s\n", v16);
      free(v16);
    }
  }

  else
  {
    uint64_t v17 = sub_1000BE278();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uid_t v19 = geteuid();
      *(_DWORD *)buf = 68158210;
      int v42 = 28;
      __int16 v43 = 2080;
      BOOL v44 = "int main(int, const char **)";
      __int16 v45 = 1024;
      LODWORD(v46) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%.*s: Controller euid: %d", buf, 0x18u);
    }
  }

  *__error() = v11;
  int v20 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v40 = 0LL;
    uint64_t v21 = sub_1000BE278();
    int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v23 = 3LL;
    }
    else {
      uint64_t v23 = 2LL;
    }
    *(_DWORD *)buf = 68158210;
    int v42 = 28;
    __int16 v43 = 2080;
    BOOL v44 = "int main(int, const char **)";
    __int16 v45 = 2080;
    CFMutableArrayRef v46 = "379.60.1";
    LODWORD(v37) = 28;
    __int16 v24 = (char *)_os_log_send_and_compose_impl( v23,  &v40,  0LL,  0LL,  &_mh_execute_header,  v22,  0LL,  "%.*s: DiskImages2 framework version: %s",  (int)buf,  v37,  v39);

    if (v24)
    {
      fprintf(__stderrp, "%s\n", v24);
      free(v24);
    }
  }

  else
  {
    uint64_t v25 = sub_1000BE278();
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68158210;
      int v42 = 28;
      __int16 v43 = 2080;
      BOOL v44 = "int main(int, const char **)";
      __int16 v45 = 2080;
      CFMutableArrayRef v46 = "379.60.1";
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%.*s: DiskImages2 framework version: %s",  buf,  0x1Cu);
    }
  }

  *__error() = v20;
  unint64_t v27 = objc_alloc_init(&OBJC_CLASS___DIControllerServiceDelegate);
  -[DIControllerServiceDelegate enterSandbox](v27, "enterSandbox");
  -[DIBaseServiceDelegate startXPClistener](v27, "startXPClistener");
  unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
  [v28 run];

  int v29 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v40 = 0LL;
    uint64_t v30 = sub_1000BE278();
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      uint64_t v32 = 3LL;
    }
    else {
      uint64_t v32 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    int v42 = 28;
    __int16 v43 = 2080;
    BOOL v44 = "int main(int, const char **)";
    LODWORD(v37) = 18;
    unint64_t v33 = (char *)_os_log_send_and_compose_impl( v32,  &v40,  0LL,  0LL,  &_mh_execute_header,  v31,  16LL,  "%.*s: Run loop aborted",  (int)buf,  v37);

    if (v33)
    {
      fprintf(__stderrp, "%s\n", v33);
      free(v33);
    }
  }

  else
  {
    uint64_t v34 = sub_1000BE278();
    char v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      int v42 = 28;
      __int16 v43 = 2080;
      BOOL v44 = "int main(int, const char **)";
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%.*s: Run loop aborted", buf, 0x12u);
    }
  }

  *__error() = v29;

  return 0LL;
}

void sub_100030F74(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = -[DIIOIterator initWithIOIterator:retain:]( objc_alloc(&OBJC_CLASS___DIIOIterator),  "initWithIOIterator:retain:",  a2,  1LL);
  uint64_t v3 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v9);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = 0LL;
    do
    {
      id v6 = -[DIIOObject newIteratorWithOptions:error:](v4, "newIteratorWithOptions:error:", 3LL, 0LL);
      if (v6)
      {
        while (1)
        {
          uint64_t v7 = v5;
          uint64_t v5 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v6);

          if (!v5 || IOObjectConformsTo(-[DIIOObject ioObj](v5, "ioObj"), "IOMedia")) {
            break;
          }
          if (IOObjectIsEqualTo(-[DIIOObject ioObj](v5, "ioObj"), *(_DWORD *)(a1 + 8)))
          {
            **(_BYTE **)a1 = 1;

            goto LABEL_9;
          }
        }
      }

      id v8 = -[DIIOObject initWithIteratorNext:](objc_alloc(&OBJC_CLASS___DIIOObject), "initWithIteratorNext:", v9);
      uint64_t v4 = v8;
    }

    while (v8);
LABEL_9:
  }
}

uint64_t sub_100031458(uint64_t a1)
{
  uint64_t v2 = malloc(0xAF8uLL);
  uint64_t v3 = (uint64_t)v2;
  if (!v2)
  {
    __int16 v7 = 192;
LABEL_36:
    unint64_t v33 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"aaS3ContextClone",  v7,  80,  *v33,  "malloc",  v34,  v35,  v46);
    AAS3ContextDestroy(v3);
    return 0LL;
  }

  memset_s(v2, 0xAF8uLL, 0, 0xAF8uLL);
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)uint64_t v3 = 1;
    memcpy((void *)(v3 + 4), (const void *)(a1 + 4), 0xAC4uLL);
  }

  uint64_t v4 = *(const void **)(a1 + 2760);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a1 + 2760));
    size_t v6 = v5 + 1;
    if (v5 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_13:
      uint64_t v13 = (void *)(v3 + 2760);
      __int16 v7 = 198;
LABEL_35:
      void *v13 = 0LL;
      goto LABEL_36;
    }

    id v8 = malloc(v5 + 1);
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t v9 = v8;
    memcpy(v8, v4, v6);
    *(void *)(v3 + 276crc32(0LL, 0LL, 0) = v9;
  }

  id v10 = *(const void **)(a1 + 2768);
  if (v10)
  {
    size_t v11 = strlen(*(const char **)(a1 + 2768));
    size_t v12 = v11 + 1;
    if (v11 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_19:
      uint64_t v13 = (void *)(v3 + 2768);
      __int16 v7 = 199;
      goto LABEL_35;
    }

    uint64_t v14 = malloc(v11 + 1);
    if (!v14) {
      goto LABEL_19;
    }
    uid_t v15 = v14;
    memcpy(v14, v10, v12);
    *(void *)(v3 + 276_Block_object_dispose(va, 8) = v15;
  }

  id v16 = *(const void **)(a1 + 2776);
  if (v16)
  {
    size_t v17 = strlen(*(const char **)(a1 + 2776));
    size_t v18 = v17 + 1;
    if (v17 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_25:
      uint64_t v13 = (void *)(v3 + 2776);
      __int16 v7 = 200;
      goto LABEL_35;
    }

    uid_t v19 = malloc(v17 + 1);
    if (!v19) {
      goto LABEL_25;
    }
    int v20 = v19;
    memcpy(v19, v16, v18);
    *(void *)(v3 + 2776) = v20;
  }

  uint64_t v21 = *(const void **)(a1 + 2784);
  if (v21)
  {
    size_t v22 = strlen(*(const char **)(a1 + 2784));
    size_t v23 = v22 + 1;
    if (v22 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_34:
      uint64_t v13 = (void *)(v3 + 2784);
      __int16 v7 = 201;
      goto LABEL_35;
    }

    __int16 v24 = malloc(v22 + 1);
    if (!v24) {
      goto LABEL_34;
    }
    uint64_t v25 = v24;
    memcpy(v24, v21, v23);
    *(void *)(v3 + 2784) = v25;
  }

  uint64_t v26 = *(void *)(a1 + 2792);
  if (v26)
  {
    list = 0LL;
    p_list = &list;
    while (1)
    {
      unint64_t v28 = (curl_slist *)malloc(0x10uLL);
      if (!v28) {
        break;
      }
      p_data = &v28->data;
      v28->data = 0LL;
      v28->next = 0LL;
      *p_list = v28;
      uint64_t v30 = strdup(*(const char **)v26);
      *p_data = v30;
      if (!v30) {
        break;
      }
      p_list = (curl_slist **)(p_data + 1);
      uint64_t v26 = *(void *)(v26 + 8);
      if (!v26)
      {
        BOOL v31 = 1;
        uint64_t v32 = list;
        goto LABEL_39;
      }
    }

    curl_slist_free_all(list);
    uint64_t v32 = 0LL;
    BOOL v31 = *(void *)(a1 + 2792) != 0LL;
LABEL_39:
    *(void *)(v3 + 279sub_1000296D8(&v5, 2) = v32;
    if (v31 && v32 == 0LL)
    {
      __int16 v7 = 202;
      goto LABEL_36;
    }
  }

  else
  {
    *(void *)(v3 + 279sub_1000296D8(&v5, 2) = 0LL;
  }

  uint64_t v38 = *(void *)(a1 + 2800);
  if (!v38)
  {
    *(void *)(v3 + 280crc32(0LL, 0LL, 0) = 0LL;
    return v3;
  }

  list = 0LL;
  char v39 = &list;
  while (1)
  {
    uint64_t v40 = (curl_slist *)malloc(0x10uLL);
    if (!v40) {
      break;
    }
    uint64_t v41 = &v40->data;
    v40->data = 0LL;
    v40->next = 0LL;
    const char *v39 = v40;
    int v42 = strdup(*(const char **)v38);
    *uint64_t v41 = v42;
    if (!v42) {
      break;
    }
    char v39 = (curl_slist **)(v41 + 1);
    uint64_t v38 = *(void *)(v38 + 8);
    if (!v38)
    {
      BOOL v43 = 1;
      BOOL v44 = list;
      goto LABEL_53;
    }
  }

  curl_slist_free_all(list);
  BOOL v44 = 0LL;
  BOOL v43 = *(void *)(a1 + 2800) != 0LL;
LABEL_53:
  *(void *)(v3 + 280crc32(0LL, 0LL, 0) = v44;
  if (v43 && v44 == 0LL)
  {
    __int16 v7 = 203;
    goto LABEL_36;
  }

  return v3;
}

void AAS3ContextDestroy(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 2760));
    free(*(void **)(a1 + 2768));
    free(*(void **)(a1 + 2776));
    free(*(void **)(a1 + 2784));
    curl_slist_free_all(*(curl_slist **)(a1 + 2792));
    curl_slist_free_all(*(curl_slist **)(a1 + 2800));
    memset_s((void *)a1, 0xAF8uLL, 0, 0xAF8uLL);
    free((void *)a1);
  }

void *AAS3ContextCreate()
{
  int v0 = malloc(0xAF8uLL);
  uint64_t v1 = v0;
  if (!v0)
  {
    uint64_t v9 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextCreate",  355,  80,  *v9,  "malloc",  v10,  v11,  v13);
    goto LABEL_5;
  }

  memset_s(v0, 0xAF8uLL, 0, 0xAF8uLL);
  if ((AAS3ContextSetFieldString((uint64_t)v1, 5, "Not A Ninja/1.0", v2, v3, v4, v5, v6) & 0x80000000) != 0)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextCreate",  358,  80,  0,  "set context",  v7,  v8,  v13);
    memset_s(v1, 0xAF8uLL, 0, 0xAF8uLL);
LABEL_5:
    free(v1);
    return 0LL;
  }

  return v1;
}

uint64_t AAS3ContextSetFieldString( uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0:
      uint64_t v9 = (void **)(a1 + 2760);
      if (__s) {
        goto LABEL_17;
      }
      goto LABEL_20;
    case 1:
      uint64_t v9 = (void **)(a1 + 2768);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 2:
      uint64_t v9 = (void **)(a1 + 2776);
      if (!__s) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 3:
      uint64_t v10 = (curl_slist **)(a1 + 2792);
      if (!__s) {
        return 0LL;
      }
      goto LABEL_12;
    case 4:
      uint64_t v10 = (curl_slist **)(a1 + 2800);
      if (!__s) {
        return 0LL;
      }
LABEL_12:
      if (!*__s) {
        return 0LL;
      }
      uint64_t v11 = curl_slist_append(*v10, __s);
      if (v11)
      {
        size_t v12 = v11;
        uint64_t result = 0LL;
        *uint64_t v10 = v12;
        return result;
      }

      int v18 = *__error();
      __int16 v21 = 407;
      goto LABEL_26;
    case 5:
      uint64_t v9 = (void **)(a1 + 2784);
      if (!__s) {
        goto LABEL_20;
      }
LABEL_17:
      if (!*__s)
      {
LABEL_20:
        id v16 = 0LL;
LABEL_21:
        free(*v9);
        uint64_t result = 0LL;
        int *v9 = v16;
        return result;
      }

      size_t v14 = strlen(__s);
      size_t v15 = v14 + 1;
      if (v14 + 1 >= 0x2000000001LL)
      {
        *__error() = 12;
        goto LABEL_24;
      }

      size_t v17 = malloc(v14 + 1);
      if (v17)
      {
        id v16 = v17;
        memcpy(v17, __s, v15);
        goto LABEL_21;
      }

LABEL_24:
      int v18 = *__error();
      __int16 v21 = 399;
LABEL_26:
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextSetFieldString",  v21,  80,  v18,  "malloc",  v19,  v20,  v22);
      return 0xFFFFFFFFLL;
    default:
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Context.c",  (uint64_t)"AAS3ContextSetFieldString",  391,  80,  0,  "invalid field %u",  a7,  a8,  a2);
      return 0xFFFFFFFFLL;
  }

      char v13 = sub_10007AB10(a1, v7);
      *((_BYTE *)&v17 + v_Block_object_dispose(va, 8) = v13;
      size_t v14 = *v5++;
      uint64_t v7 = v14;
      *((_BYTE *)&v17 + v8++) = sub_10007AB10(a1, v14) | (16 * v13);
    }

    while (!v8);
    if (v8 == 16) {
      break;
    }
    uint64_t v10 = *v5++;
    uint64_t v7 = v10;
  }

  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (size_t v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_10007AAAC();
  }

  return v17;
}

    *__error() = v10;
    -[DIBaseParams setDiskImageParamsXPC:](self, "setDiskImageParamsXPC:", v8);
    goto LABEL_25;
  }

  return 0;
}

  size_t v23 = shadowStats;
  shadowStats = self->_shadowStats;
  self->_shadowStats = v23;
LABEL_29:

  return v23;
}

    char v22 = v73;
    if (v73)
    {
      size_t v23 = (unint64_t *)&v73->__shared_owners_;
      do
        __int16 v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    uint64_t v25 = v72;
    if (v72)
    {
      uint64_t v26 = (unint64_t *)&v72->__shared_owners_;
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    unint64_t v28 = v71;
    if (v71)
    {
      int v29 = (unint64_t *)&v71->__shared_owners_;
      do
        uint64_t v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

    BOOL v31 = v70;
    if (v70)
    {
      uint64_t v32 = (unint64_t *)&v70->__shared_owners_;
      do
        unint64_t v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    uint64_t v34 = v69;
    if (v69)
    {
      uint64_t v35 = (unint64_t *)&v69->__shared_owners_;
      do
        unint64_t v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    uint64_t v37 = v68;
    if (v68)
    {
      uint64_t v38 = (unint64_t *)&v68->__shared_owners_;
      do
        char v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    if (v65 && &v66 != __p) {
      operator delete(__p);
    }
    sub_10000627C((uint64_t)&keys);
    v6 += 6;
  }

  while (v6 != v7);
  uint64_t v40 = (uint64_t *)v56;
  if (v56 == (std::__shared_weak_count *)v57) {
    goto LABEL_65;
  }
  uint64_t v41 = 0;
  do
  {
    v41 += *((_DWORD *)v40 + 4);
    v40 += 6;
  }

  while (v40 != v57);
LABEL_66:
  int v42 = v41;
  BOOL v43 = valloc(v41);
  if (!v43)
  {
    char v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    __int128 v52 = std::bad_alloc::bad_alloc(v51);
  }

  __int128 values = &off_10018C340;
  p___int128 values = &values;
  keys = v43;
  sub_100043B68((uint64_t)&v63, (uint64_t)&values);
  BOOL v44 = p_values;
  if (p_values == &values)
  {
    __int16 v45 = 4LL;
    BOOL v44 = &values;
LABEL_72:
    (*((void (**)(void))*v44 + v45))();
  }

  else if (p_values)
  {
    __int16 v45 = 5LL;
    goto LABEL_72;
  }

  char v46 = v56;
  __int128 v47 = v57;
  if (v56 != (std::__shared_weak_count *)v57)
  {
    int v48 = 0;
    do
    {
      memcpy((char *)keys + v48, v46->__vftable, v46->__shared_weak_owners_);
      v48 += LODWORD(v46->__shared_weak_owners_);
      v46 += 2;
    }

    while (v46 != (std::__shared_weak_count *)v47);
  }

  sub_1000FED00((UInt8 *)keys, v42, a3);
  sub_100043BCC((uint64_t *)&keys);
  keys = &v56;
  sub_1000DF188((void ***)&keys);
}

uint64_t sub_100031A8C(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1 >> 62)
    {
      gettimeofday(&v9, 0LL);
      double v2 = (double)v9.tv_sec + (double)v9.tv_usec * 0.000001 - *(double *)(a1 + 40);
      fwrite("AAS3DownloadStream (curl)\n", 0x1AuLL, 1uLL, __stderrp);
      uint64_t v3 = __stderrp;
      unint64_t v4 = atomic_load((unint64_t *)(a1 + 32));
      unint64_t v5 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v3, "%12llu bytes downloaded (%.2f MB)\n", v4, (double)v5 * 0.000000953674316);
      uint64_t v6 = __stderrp;
      unint64_t v7 = atomic_load((unint64_t *)(a1 + 32));
      fprintf(v6, "%12.2f MB/s download speed\n", (double)v7 / v2 * 0.000000953674316);
    }

    sub_1000337A0(a1);
    memset_s((void *)a1, 0x30uLL, 0, 0x30uLL);
    free((void *)a1);
  }

  return 0LL;
}

AAByteStream_impl *sub_100031BA0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = AACustomByteStreamOpen();
  unint64_t v7 = (double *)malloc(0x30uLL);
  if (!v7 || (uint64_t v8 = v7, memset_s(v7, 0x30uLL, 0, 0x30uLL), !v6))
  {
    perror("malloc");
    goto LABEL_7;
  }

  if ((sub_100033674(v8, a1, a2, a3) & 0x80000000) != 0)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c",  (uint64_t)"s3DownloadStreamOpen_curl",  132,  83,  0,  "s3StreamBaseInit",  v9,  v10,  v12.tv_sec);
LABEL_7:
    AAByteStreamClose(v6);
    return 0LL;
  }

  gettimeofday(&v12, 0LL);
  v8[5] = (double)v12.tv_sec + (double)v12.tv_usec * 0.000001;
  AACustomByteStreamSetData(v6, v8);
  AACustomByteStreamSetCloseProc(v6, (AAByteStreamCloseProc)sub_100031A8C);
  AACustomByteStreamSetPReadProc(v6, (AAByteStreamPReadProc)sub_100031CDC);
  AACustomByteStreamSetReadProc(v6, (AAByteStreamReadProc)sub_100031EA4);
  return v6;
}

uint64_t sub_100031CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&__int128 v21 = a2;
  *((void *)&v21 + 1) = a3;
  uint64_t v22 = 0LL;
  uint64_t v5 = a2;
  if (a3)
  {
    uint64_t v18 = a2;
    uint64_t v6 = a4 + a3;
    uint64_t v7 = a4 + a3 - 1;
    while (1)
    {
      snprintf(__str, 0xC8uLL, "Range: bytes=%llu-%llu", v6 - a3, v7);
      unsigned int v11 = 0;
      v23[0] = __str;
      v23[1] = 0LL;
      __int128 v19 = v21;
      uint64_t v20 = v22;
      useconds_t v12 = 125000;
      do
      {
        if (v11)
        {
          sub_100037B30( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c",  (uint64_t)"downloadStreamPRead",  65,  83,  "s3Perform retry after %u ms",  v8,  v9,  v10,  v12 / 0x3E8);
          usleep(v12);
          v12 *= 2;
        }

        __int128 v21 = v19;
        uint64_t v22 = v20;
        int v13 = sub_1000323C8(1u, *(char **)(a1 + 8), a1, 0LL, &v21, 0LL, v23);
        if ((v13 & 0x80000000) == 0) {
          break;
        }
      }

      while (v11++ < 3);
      if (v13 < 0) {
        break;
      }
      a3 = *((void *)&v21 + 1);
      if (!*((void *)&v21 + 1))
      {
        uint64_t v5 = v21;
        a2 = v18;
        goto LABEL_12;
      }
    }

    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamCurl.c",  (uint64_t)"downloadStreamPRead",  81,  83,  0,  "s3Perform failed (after retry), %s",  v9,  v10,  (char)__str);
    return -1LL;
  }

  else
  {
LABEL_12:
    uint64_t result = v5 - a2;
    id v16 = (unint64_t *)(a1 + 32);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + result, v16));
  }

  return result;
}

uint64_t sub_100031EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (unint64_t *)(a1 + 24);
  do
    uint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 + a3, v3));
  return sub_100031CDC(a1, a2, a3, v4);
}

uint64_t sub_100031EBC(_DWORD *a1, unsigned int *a2, const void *a3, size_t a4)
{
  *a1 = 32;
  memset_s(a1 + 9, 0xE0uLL, 0, 0xE0uLL);
  memset_s(&v8, 0x180uLL, 0, 0x180uLL);
  return 0LL;
}

uint64_t sub_100031F54(uint64_t a1, const void *a2, CC_LONG a3)
{
  *(_DWORD *)a1 = 32;
  memset_s((void *)(a1 + 36), 0xE0uLL, 0, 0xE0uLL);
  return memset_s(&c, 0x68uLL, 0, 0x68uLL);
}

size_t sub_100031FDC(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = __src;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 24))
    {
      uint64_t v7 = 0LL;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 24))(*(void *)v6, v4, v5);
          if (v8 < 1) {
            break;
          }
          v4 += v8;
          v7 += v8;
          v5 -= v8;
          if (!v5) {
            return v7 & ~(v7 >> 63);
          }
        }

        uint64_t v7 = v8;
      }
    }

    else
    {
      uint64_t v7 = -1LL;
    }

    return v7 & ~(v7 >> 63);
  }

  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(*(void **)a4, __src, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + _Block_object_dispose(va, 8) = v10;
    return v5;
  }

size_t sub_100032090(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = __dst;
  size_t v5 = a3 * a2;
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    if (*(void *)(v6 + 16))
    {
      uint64_t v7 = 0LL;
      if (v5)
      {
        while (1)
        {
          uint64_t v8 = (*(uint64_t (**)(void, char *, size_t))(v6 + 16))(*(void *)v6, v4, v5);
          if (v8 < 0) {
            break;
          }
          if (v8)
          {
            v4 += v8;
            v7 += v8;
            v5 -= v8;
            if (v5) {
              continue;
            }
          }

          return v7 & ~(v7 >> 63);
        }

        uint64_t v7 = v8;
      }
    }

    else
    {
      uint64_t v7 = -1LL;
    }

    return v7 & ~(v7 >> 63);
  }

  else
  {
    if (v5 >= *(void *)(a4 + 8)) {
      size_t v5 = *(void *)(a4 + 8);
    }
    memcpy(__dst, *(const void **)a4, v5);
    size_t v10 = *(void *)(a4 + 8) - v5;
    *(void *)a4 += v5;
    *(void *)(a4 + _Block_object_dispose(va, 8) = v10;
    return v5;
  }

uint64_t sub_100032144(curl_slist **a1, char *__format, ...)
{
  int v4 = vsnprintf(0LL, 0LL, __format, va);
  if (v4 < 0)
  {
    unsigned int v11 = 0LL;
LABEL_8:
    useconds_t v12 = "vsnprintf";
    __int16 v13 = 156;
    int v14 = 0;
LABEL_12:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3HeaderAppendWithFormat",  v13,  84,  v14,  v12,  v5,  v6,  v20);
    uint64_t v18 = 0xFFFFFFFFLL;
    uint64_t v7 = v11;
  }

  else
  {
    uint64_t v7 = 0LL;
    char v8 = 1;
    while ((v8 & 1) != 0)
    {
      size_t v9 = (v4 + 1);
      size_t v10 = (char *)realloc(v7, v9);
      unsigned int v11 = v10;
      if (!v10)
      {
        free(v7);
        int v14 = *__error();
        useconds_t v12 = "malloc";
        __int16 v13 = 161;
        goto LABEL_12;
      }

      int v4 = vsnprintf(v10, v9, __format, va);
      char v8 = 0;
      uint64_t v7 = v11;
      if (v4 < 0) {
        goto LABEL_8;
      }
    }

    size_t v15 = curl_slist_append(*a1, v7);
    if (v15)
    {
      uint64_t v18 = 0LL;
      *a1 = v15;
    }

    else
    {
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3HeaderAppendWithFormat",  168,  84,  0,  "curl_slist_append failed\n",  v16,  v17,  v20);
      uint64_t v18 = 0xFFFFFFFFLL;
    }
  }

  free(v7);
  return v18;
}

uint64_t sub_1000322A8(curl_slist **a1, const char *a2)
{
  uint64_t v3 = curl_slist_append(*a1, a2);
  uint64_t v6 = v3;
  if (v3) {
    *a1 = v3;
  }
  else {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3HeaderAppend",  182,  84,  0,  "curl_slist_append failed\n",  v4,  v5,  v8);
  }
  if (v6) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

unint64_t sub_10003230C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 * a2;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0)
  {
    uint64_t v11 = 499LL;
    curl_easy_getinfo(*(CURL **)a4, CURLINFO_RESPONSE_CODE, &v11);
    int v7 = v11;
    *(_DWORD *)(a4 + _Block_object_dispose(va, 8) = v11;
    if (v7 == 200)
    {
      if (*(_DWORD *)(a4 + 12)) {
        *(void *)(a4 + 24) = *(void *)(a4 + 16);
      }
    }
  }

  unint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = v6 - v8;
  if (v6 >= v8)
  {
    if (v8)
    {
      a1 += v8;
      *(void *)(a4 + 24) = 0LL;
    }

    else
    {
      uint64_t v9 = v6;
    }

    sub_100031FDC(a1, v9, 1LL, *(void *)(a4 + 32));
  }

  else
  {
    *(void *)(a4 + 24) = v8 - v6;
  }

  return v6;
}

uint64_t sub_1000323C8( unsigned int a1, char *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, const char **a7)
{
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v60 = 0LL;
  if (a4) {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  else {
    uint64_t v15 = -1LL;
  }
  __int128 v58 = 0uLL;
  uint64_t v59 = 0LL;
  if (a5)
  {
    __int128 v58 = *a5;
    uint64_t v59 = *((void *)a5 + 2);
  }

  __int128 v57 = 0LL;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  uint64_t v16 = curl_easy_init();
  if (!v16)
  {
    uint64_t v26 = __stderrp;
    unint64_t v27 = "curl_easy_init failed\n";
    size_t v28 = 22LL;
LABEL_42:
    fwrite(v27, v28, 1uLL, v26);
    goto LABEL_43;
  }

  if ((sub_1000322A8(&v60, "Content-Type:") & 0x80000000) != 0
    || (sub_1000322A8(&v60, "Transfer-Encoding:") & 0x80000000) != 0
    || (sub_1000322A8(&v60, "Accept: application/xml") & 0x80000000) != 0
    || (v15 & 0x8000000000000000LL) == 0 && (sub_100032144(&v60, "Content-Length: %zd", v15) & 0x80000000) != 0)
  {
    goto LABEL_43;
  }

  uint64_t v17 = *(void *)(*(void *)(a3 + 16) + 2792LL);
  if (v17)
  {
    while ((sub_1000322A8(&v60, *(const char **)v17) & 0x80000000) == 0)
    {
      uint64_t v17 = *(void *)(v17 + 8);
      if (!v17) {
        goto LABEL_15;
      }
    }

    goto LABEL_43;
  }

LABEL_15:
  if (a7)
  {
    uint64_t v18 = *a7;
    if (*a7)
    {
      __int128 v19 = a7 + 1;
      while ((sub_1000322A8(&v60, v18) & 0x80000000) == 0)
      {
        char v20 = *v19++;
        uint64_t v18 = v20;
        if (!v20) {
          goto LABEL_20;
        }
      }

      goto LABEL_43;
    }
  }

  return v15;
}

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

      if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
        std::condition_variable::__do_timed_wait(a1, a2, v13);
        std::chrono::steady_clock::now();
        continue;
      }

LABEL_54:
  CURLcode v34 = curl_easy_setopt(v16, CURLOPT_READFUNCTION, sub_100032090);
  unsigned __int32 v32 = curl_easy_setopt(v16, CURLOPT_READDATA, a4) | v34;
LABEL_55:
  if (v32) {
    BOOL v24 = 0;
  }
LABEL_57:
  if (a5)
  {
    *(void *)&__int128 v55 = v16;
    __int128 v57 = a5;
    DWORD2(v55) = -1;
    if (a7)
    {
      uint64_t v35 = *a7;
      if (*a7)
      {
        uint64_t v36 = 0LL;
        do
        {
          if (!strncmp(v35, "Range:", 6uLL))
          {
            int v39 = *((unsigned __int8 *)v35 + 6);
            uint64_t v38 = v35 + 6;
            char v37 = v39;
            if (v39)
            {
              do
              {
                if (v37 < 0)
                {
                  if (!__maskrune(v37, 0x4000uLL)) {
                    break;
                  }
                }

                else if ((_DefaultRuneLocale.__runetype[v37] & 0x4000) == 0)
                {
                  break;
                }

                int v40 = *(unsigned __int8 *)++v38;
                char v37 = v40;
              }

              while (v40);
            }

            if (!strncmp(v38, "bytes=", 6uLL))
            {
              int v43 = *((unsigned __int8 *)v38 + 6);
              int v42 = v38 + 6;
              char v41 = v43;
              if (v43)
              {
                do
                {
                  if (v41 < 0)
                  {
                    if (!__maskrune(v41, 0x4000uLL)) {
                      break;
                    }
                  }

                  else if ((_DefaultRuneLocale.__runetype[v41] & 0x4000) == 0)
                  {
                    break;
                  }

                  int v44 = *(unsigned __int8 *)++v42;
                  char v41 = v44;
                }

                while (v44);
              }

              HIDWORD(v55) = 1;
              *(void *)&__int128 v56 = strtoull(v42, 0LL, 0);
            }
          }

          uint64_t v35 = a7[++v36];
        }

        while (v35);
      }
    }

    CURLcode v45 = curl_easy_setopt(v16, CURLOPT_WRITEFUNCTION, sub_10003230C);
    if (curl_easy_setopt(v16, CURLOPT_WRITEDATA, &v55) | v45) {
      BOOL v24 = 0;
    }
  }

  if (a6)
  {
    if (curl_easy_setopt(v16, CURLOPT_HEADERFUNCTION, sub_100031FDC)) {
      BOOL v24 = 0;
    }
    if (curl_easy_setopt(v16, CURLOPT_HEADERDATA, a6)) {
      goto LABEL_86;
    }
  }

  if (!v24)
  {
LABEL_86:
    uint64_t v26 = __stderrp;
    unint64_t v27 = "curl_easy_setopt failed\n";
    size_t v28 = 24LL;
    goto LABEL_42;
  }

  CURLcode v46 = curl_easy_perform(v16);
  if (v46 == CURLE_OK)
  {
    uint64_t v54 = 499LL;
    curl_easy_getinfo(v16, CURLINFO_RESPONSE_CODE, &v54);
    if ((unint64_t)(v54 - 400) <= 0xC7)
    {
      if (a1 != 1 || v54 != 416)
      {
        sub_100037B30( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Perform",  401,  84,  "HTTP %u\n",  v51,  v52,  v53,  v54);
        goto LABEL_43;
      }

      if (a5)
      {
        uint64_t v29 = 0LL;
        *a5 = v58;
        *((void *)a5 + sub_1000296D8(&v5, 2) = v59;
        goto LABEL_44;
      }
    }

    uint64_t v29 = 0LL;
    goto LABEL_44;
  }

  char v47 = v46;
  curl_easy_strerror(v46);
  sub_100037B30( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Perform",  379,  84,  "> %d %s\n",  v48,  v49,  v50,  v47);
LABEL_43:
  uint64_t v29 = 0xFFFFFFFFLL;
LABEL_44:
  curl_slist_free_all(v60);
  curl_easy_cleanup(v16);
  return v29;
}

      uint64_t v29 = (void **)&v33;
      sub_1000D689C(&v29);
    }
  }

      sub_10011E8E0(v82);
LABEL_55:
      uint64_t v17 = 2;
      goto LABEL_56;
    }

    if ((_DWORD)v33 == 3)
    {
      v94[0] = sub_1000CC3F0(a1, v26, v25);
      sub_1000C34EC(a1, a2, &v104, (unsigned int *)v94, 1u, v33 | (unint64_t)&_mh_execute_header);
      if (!v23) {
        goto LABEL_40;
      }
    }

    else
    {
      sub_10011E7D4((uint64_t)v92, 0LL, (uint64_t)v82);
      if (!v83)
      {
        *(void *)&uint64_t v80 = "di_asif::details::table::write(ContextASIF &, const sg_vec::iterator &, const sg_vec::iterator &)";
        *((void *)&v80 + 1) = 30LL;
        uint64_t v81 = 16;
        sub_1000C939C(v94, &v80);
        sub_10000552C(&v96, (uint64_t)"Couldn't upgrade lock entry ", 28LL);
        sub_1000C5948(&v96, &v104);
        sub_1000C9444((uint64_t)v94);
        uint64_t v77 = __cxa_allocate_exception(0x40uLL);
        *uint64_t v77 = &off_100196FC8;
        uint64_t v78 = std::generic_category();
        v77[1] = 4294967282LL;
        v77[2] = v78;
        *((_BYTE *)v77 + 24) = 0;
        *((_BYTE *)v77 + 4_Block_object_dispose(va, 8) = 0;
        v77[7] = "Couldn't upgrade lock entry";
      }

      int v40 = atomic_load((unint64_t *)(v104[7] + 16 * v105 + 8));
      char v41 = v40 >> 62;
      if (v40 >> 62 == 1) {
        goto LABEL_54;
      }
      v94[0] = sub_1000CC3F0(a1, v27, v18);
      sub_1000C34EC(a1, a2, &v104, (unsigned int *)v94, 1u, v41 | (unint64_t)&_mh_execute_header);
      sub_10011E8E0(v82);
      if (!v23)
      {
LABEL_40:
        uint64_t v17 = 0;
        atomic_store(1u, (unsigned int *)(a1 + 96));
        goto LABEL_56;
      }
    }

    uint64_t v17 = 0;
LABEL_56:
    v79 += v18;
    sub_1000C9484((uint64_t *)&v84);
LABEL_72:
    sub_10011E7BC(v92);
LABEL_73:
    uint64_t v49 = v103;
    if (v103)
    {
      uint64_t v50 = (unint64_t *)&v103->__shared_owners_;
      do
        uint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    uint64_t v52 = v102;
    if (v102)
    {
      uint64_t v53 = (unint64_t *)&v102->__shared_owners_;
      do
        uint64_t v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }

    __int128 v55 = v100;
    if (v100)
    {
      __int128 v56 = (unint64_t *)&v100->__shared_owners_;
      do
        __int128 v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }

    __int128 v58 = v99;
    if (v99)
    {
      uint64_t v59 = (unint64_t *)&v99->__shared_owners_;
      do
        uint64_t v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }

    if ((v17 | 2) != 2) {
      goto LABEL_102;
    }
  }

  if (v121)
  {
    uint64_t v61 = sub_1000C26AC(a1, a2, &v119[1]);
    uint64_t v18 = v79;
    if (v119[0]) {
      int v62 = 1;
    }
    else {
      int v62 = v61;
    }
    v119[0] = v62;
    if (v62 == 1)
    {
      uint64_t v63 = *(void *)(*(void *)&v119[1] + 8LL);
      uint64_t v64 = *(void *)(a1 + 8);
      uint64_t v65 = *(void *)(v64 + 48);
      sub_1000C54A4( (void *)a1,  a2,  v65 + (v65 + 1)
      * (((*(void *)(*(void *)&v119[1] + 352LL)
         + (*(void *)(v63 + 48) + *(void *)(v63 + 48) * v120)
         / (unint64_t)(*(void *)(v63 + 48) + 1LL)
         * *(unsigned int *)(v63 + 20))
        / *(unsigned __int16 *)(v63 + 18)
        - *(void *)(a1 + 352) / (unint64_t)*(unsigned __int16 *)(v64 + 18))
       / (v65
        * (unint64_t)(*(_DWORD *)(v64 + 20) / *(unsigned __int16 *)(v64 + 18)))));
    }
  }

  else
  {
    uint64_t v18 = v79;
  }

uint64_t sub_1000329EC(curl_slist **a1, unsigned int a2, char *__s, uint64_t a4, uint64_t a5)
{
  v116[0] = 0LL;
  v116[1] = 0LL;
  unint64_t v117 = 0LL;
  v114[0] = 0LL;
  v114[1] = 0LL;
  int v115 = 0LL;
  v112[0] = 0LL;
  v112[1] = 0LL;
  v113 = 0LL;
  v110[0] = 0LL;
  v110[1] = 0LL;
  unint64_t v111 = 0LL;
  int v121 = 0;
  memset(__sa, 0, sizeof(__sa));
  size_t v10 = strlen(__s);
  if (v10 < 7) {
    goto LABEL_8;
  }
  if (*(_DWORD *)__s == 1886680168 && *(_DWORD *)(__s + 3) == 791624304)
  {
    uint64_t v19 = 7LL;
  }

  else
  {
    if (v10 < 8 || *(void *)__s != 0x2F2F3A7370747468LL)
    {
LABEL_8:
      uint64_t v14 = "Invalid URL";
      __int16 v15 = 486;
LABEL_9:
      int v16 = 0;
LABEL_10:
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Sign",  v15,  84,  v16,  v14,  v11,  v12,  v98);
LABEL_11:
      BOOL v17 = 0;
      goto LABEL_12;
    }

    uint64_t v19 = 8LL;
  }

  char v20 = &__s[v19];
  CURLcode v21 = strchr(&__s[v19], 47);
  if (!v21)
  {
    uint64_t v14 = "Invalid URL";
    __int16 v15 = 488;
    goto LABEL_9;
  }

  CURLcode v22 = v21;
  unint64_t v108 = v20;
  unsigned int v106 = a2;
  CURLcode v23 = strchr(v21, 63);
  BOOL v24 = "/";
  uint64_t v107 = v22;
  if (!v23)
  {
    size_t v30 = strlen(v22);
    if (v30 <= 1) {
      uint64_t v29 = 1LL;
    }
    else {
      uint64_t v29 = v30;
    }
    if (v30) {
      BOOL v24 = v22;
    }
    goto LABEL_32;
  }

  BOOL v25 = v23;
  uint64_t v26 = v23 + 1;
  size_t v27 = strlen(v23 + 1);
  BOOL v28 = v25 == v22;
  if (v25 == v22) {
    uint64_t v29 = 1LL;
  }
  else {
    uint64_t v29 = v25 - v22;
  }
  if (!v28) {
    BOOL v24 = v22;
  }
  if (!v27)
  {
LABEL_32:
    size_t v27 = 0LL;
    uint64_t v26 = "";
  }

  size_t __n = v27;
  unsigned int v105 = (char *)v26;
  if ((sub_100032144(a1, "X-Amz-Date: %s", (const char *)(a4 + 68)) & 0x80000000) != 0
    || *(_BYTE *)(a4 + 452)
    && (sub_100032144(a1, "X-Amz-Security-Token: %s", (const char *)(a4 + 452)) & 0x80000000) != 0)
  {
    goto LABEL_11;
  }

  __srCC_SHA256_CTX c = (char *)v24;
  if (a5)
  {
    sub_100031F54((uint64_t)&v122, *(const void **)a5, *(void *)(a5 + 8));
    if (v122)
    {
      uint64_t v31 = v29;
      unsigned __int32 v32 = v123;
      uint64_t v33 = 2LL * v122;
      size_t v34 = v33 | 1;
      uint64_t v35 = __str;
      do
      {
        int v36 = *v32++;
        snprintf(v35, v34, "%02x", v36);
        v34 -= 2LL;
        v35 += 2;
      }

      while (v34 != 1);
LABEL_44:
      uint64_t v29 = v31;
      goto LABEL_46;
    }
  }

  else
  {
    sub_100031F54((uint64_t)&v122, 0LL, 0);
    if (v122)
    {
      uint64_t v31 = v29;
      char v37 = v123;
      uint64_t v33 = 2LL * v122;
      size_t v38 = v33 | 1;
      int v39 = __str;
      do
      {
        int v40 = *v37++;
        snprintf(v39, v38, "%02x", v40);
        v38 -= 2LL;
        v39 += 2;
      }

      while (v38 != 1);
      goto LABEL_44;
    }
  }

  uint64_t v33 = 0LL;
LABEL_46:
  __str[v33] = 0;
  memset_s(&v122, 0x104uLL, 0, 0x104uLL);
  if ((sub_100032144(a1, "X-Amz-Content-Sha256: %s", __str) & 0x80000000) != 0) {
    goto LABEL_11;
  }
  char v41 = *a1;
  if (*a1)
  {
    uint64_t v42 = 0LL;
    do
    {
      ++v42;
      char v41 = v41->next;
    }

    while (v41);
  }

  else
  {
    uint64_t v42 = 0LL;
  }

  uint64_t v109 = calloc(v42 + 1, 8uLL);
  if (!v109)
  {
    int v16 = *__error();
    uint64_t v14 = "malloc";
    __int16 v15 = 520;
    goto LABEL_10;
  }

  CFIndex v101 = (char *)(a4 + 68);
  size_t v102 = v29;
  CFMutableArrayRef v99 = a1;
  uint64_t v100 = a4;
  int v43 = *a1;
  if (!v43)
  {
    uint64_t v44 = 0LL;
LABEL_77:
    size_t v53 = v22 - v108;
    size_t v54 = v107 - v108 + 6;
    if (v54 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_82:
      int v58 = *__error();
      __int16 v61 = 554;
      goto LABEL_85;
    }

    __int128 v55 = (char *)malloc(v54);
    if (!v55) {
      goto LABEL_82;
    }
    __int128 v56 = &v55[v53];
    v109[v44] = v55;
    v55[4] = 58;
    *(_DWORD *)__int128 v55 = 1953722216;
    memcpy(v55 + 5, v108, v53);
    v56[5] = 0;
    qsort(v109, v44 + 1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_100033528);
    if (v106 > 3) {
      __int128 v57 = "???";
    }
    else {
      __int128 v57 = off_100175CA8[v106];
    }
    size_t v62 = strlen(v57);
    if ((sub_100033534(v116, v57, v62) & 0x80000000) == 0
      && (sub_100033534(v116, "\n", 1uLL) & 0x80000000) == 0
      && (sub_100033534(v116, __src, v102) & 0x80000000) == 0
      && (sub_100033534(v116, "\n", 1uLL) & 0x80000000) == 0
      && (sub_100033534(v116, v105, __n) & 0x80000000) == 0
      && (sub_100033534(v116, "\n", 1uLL) & 0x80000000) == 0)
    {
      if (v44 == -1)
      {
LABEL_102:
        if ((sub_100033534(v116, "\n", 1uLL) & 0x80000000) == 0)
        {
          uint64_t v70 = v115;
          size_t v71 = strlen(v115);
          if ((sub_100033534(v116, v115, v71) & 0x80000000) == 0 && (sub_100033534(v116, "\n", 1uLL) & 0x80000000) == 0)
          {
            size_t v72 = strlen(__str);
            if ((sub_100033534(v116, __str, v72) & 0x80000000) == 0
              && (sub_100033534(v112, "AWS4-HMAC-SHA256\n", 0x11uLL) & 0x80000000) == 0)
            {
              size_t v73 = strlen(v101);
              if ((sub_100033534(v112, v101, v73) & 0x80000000) == 0
                && (sub_100033534(v112, "\n", 1uLL) & 0x80000000) == 0)
              {
                uint64_t v74 = (char *)(v100 + 4);
                size_t v75 = strlen((const char *)(v100 + 4));
                if ((sub_100033534(v112, (void *)(v100 + 4), v75) & 0x80000000) == 0
                  && (sub_100033534(v112, "/", 1uLL) & 0x80000000) == 0)
                {
                  char v76 = (char *)(v100 + 132);
                  size_t v77 = strlen((const char *)(v100 + 132));
                  if ((sub_100033534(v112, (void *)(v100 + 132), v77) & 0x80000000) == 0
                    && (sub_100033534(v112, "/s3/aws4_request\n", 0x11uLL) & 0x80000000) == 0)
                  {
                    CC_LONG v78 = strlen(v117);
                    sub_100031F54((uint64_t)&v122, v117, v78);
                    if (v122)
                    {
                      unsigned int v79 = v123;
                      uint64_t v80 = 2LL * v122;
                      size_t v81 = v80 | 1;
                      uint64_t v82 = v118;
                      do
                      {
                        int v83 = *v79++;
                        snprintf(v82, v81, "%02x", v83);
                        v81 -= 2LL;
                        v82 += 2;
                      }

                      while (v81 != 1);
                    }

                    else
                    {
                      uint64_t v80 = 0LL;
                    }

                    v118[v80] = 0;
                    memset_s(&v122, 0x104uLL, 0, 0x104uLL);
                    size_t v86 = strlen(v118);
                    if ((sub_100033534(v112, v118, v86) & 0x80000000) == 0)
                    {
                      size_t v87 = strlen(v113);
                      sub_100031EBC(__sa, (unsigned int *)(v100 + 2500), v113, v87);
                      if (LODWORD(__sa[0]))
                      {
                        int v88 = (unsigned __int8 *)__sa + 4;
                        uint64_t v89 = 2LL * LODWORD(__sa[0]);
                        size_t v90 = v89 | 1;
                        uint64_t v91 = v118;
                        do
                        {
                          int v92 = *v88++;
                          snprintf(v91, v90, "%02x", v92);
                          v90 -= 2LL;
                          v91 += 2;
                        }

                        while (v90 != 1);
                      }

                      else
                      {
                        uint64_t v89 = 0LL;
                      }

                      v118[v89] = 0;
                      if ((sub_100033534(v110, "AWS4-HMAC-SHA256 Credential=", 0x1CuLL) & 0x80000000) == 0)
                      {
                        size_t v93 = strlen((const char *)(v100 + 196));
                        if ((sub_100033534(v110, (void *)(v100 + 196), v93) & 0x80000000) == 0
                          && (sub_100033534(v110, "/", 1uLL) & 0x80000000) == 0)
                        {
                          size_t v94 = strlen(v74);
                          if ((sub_100033534(v110, v74, v94) & 0x80000000) == 0
                            && (sub_100033534(v110, "/", 1uLL) & 0x80000000) == 0)
                          {
                            size_t v95 = strlen(v76);
                            if ((sub_100033534(v110, v76, v95) & 0x80000000) == 0
                              && (sub_100033534(v110, "/s3/aws4_request,SignedHeaders=", 0x1FuLL) & 0x80000000) == 0)
                            {
                              size_t v96 = strlen(v70);
                              if ((sub_100033534(v110, v70, v96) & 0x80000000) == 0
                                && (sub_100033534(v110, ",Signature=", 0xBuLL) & 0x80000000) == 0)
                              {
                                size_t v97 = strlen(v118);
                                if ((sub_100033534(v110, v118, v97) & 0x80000000) == 0)
                                {
                                  BOOL v17 = (int)sub_100032144(v99, "Authorization: %s", v111) >= 0;
                                  goto LABEL_119;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        uint64_t v63 = 0LL;
        while (1)
        {
          uint64_t v64 = (char *)v109[v63];
          uint64_t v65 = strchr(v64, 58);
          if (!v65) {
            break;
          }
          unint64_t v68 = v65;
          size_t v69 = strlen(v64);
          if ((sub_100033534(v116, v64, v69) & 0x80000000) != 0
            || (sub_100033534(v116, "\n", 1uLL) & 0x80000000) != 0
            || v63 && (sub_100033534(v114, ";", 1uLL) & 0x80000000) != 0
            || (sub_100033534(v114, v64, v68 - v64) & 0x80000000) != 0)
          {
            goto LABEL_118;
          }

          if (v44 + 1 == ++v63) {
            goto LABEL_102;
          }
        }

        sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Sign",  580,  84,  0,  "Invalid header: %s",  v66,  v67,  (char)v64);
      }
    }

LABEL_118:
    BOOL v17 = 0;
LABEL_119:
    ++v44;
    goto LABEL_120;
  }

  uint64_t v44 = 0LL;
  while (1)
  {
    data = v43->data;
    if (strncasecmp(v43->data, "x-amz-", 6uLL)) {
      goto LABEL_73;
    }
    size_t v46 = strlen(data);
    if (v46 + 1 >= 0x2000000001LL) {
      break;
    }
    char v47 = malloc(v46 + 1);
    if (!v47) {
      goto LABEL_84;
    }
    uint64_t v48 = v47;
    v109[v44] = v47;
    if (v46)
    {
      uint64_t v49 = 0LL;
      uint64_t v50 = 0LL;
      int v51 = 1;
      while (1)
      {
        __darwin_ct_rune_t v52 = v43->data[v49];
        if (v52 < 0)
        {
          if (!__maskrune(v43->data[v49], 0x4000uLL))
          {
LABEL_64:
            if (v52 == 58) {
              int v51 = 0;
            }
            if (v51) {
              LOBYTE(v5sub_1000296D8(&v5, 2) = __tolower(v52);
            }
            v48[v50++] = v52;
          }
        }

        else if ((_DefaultRuneLocale.__runetype[v52] & 0x4000) == 0)
        {
          goto LABEL_64;
        }

        if (v46 == ++v49) {
          goto LABEL_72;
        }
      }
    }

    uint64_t v50 = 0LL;
LABEL_72:
    ++v44;
    v48[v50] = 0;
LABEL_73:
    int v43 = v43->next;
    if (!v43) {
      goto LABEL_77;
    }
  }

  *__error() = 12;
LABEL_84:
  int v58 = *__error();
  __int16 v61 = 538;
LABEL_85:
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3Sign",  v61,  84,  v58,  "malloc",  v59,  v60,  v98);
  BOOL v17 = 0;
LABEL_120:
  if (v44)
  {
    __int128 v84 = (void **)v109;
    do
    {
      v85 = *v84++;
      free(v85);
      --v44;
    }

    while (v44);
  }

  free(v109);
LABEL_12:
  memset_s(__sa, 0x104uLL, 0, 0x104uLL);
  memset_s(v118, 0x80uLL, 0, 0x80uLL);
  memset_s(__str, 0x80uLL, 0, 0x80uLL);
  sub_10003363C((uint64_t)v116);
  sub_10003363C((uint64_t)v114);
  sub_10003363C((uint64_t)v112);
  sub_10003363C((uint64_t)v110);
  if (v17) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100033528(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_100033534(unint64_t *a1, void *__src, size_t __n)
{
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  size_t v8 = v6 + __n + 1;
  BOOL v9 = v8 >= *a1;
  size_t v10 = v8 - *a1;
  if (!v9) {
    size_t v10 = 0LL;
  }
  unint64_t v11 = (v10 + 255) & 0xFFFFFFFFFFFFFF00LL;
  unint64_t v12 = v7 + v11;
  __int16 v13 = (char *)a1[2];
  if (v7 + v11 <= v7) {
    goto LABEL_8;
  }
  if (v12 < 0x2000000001LL)
  {
    uint64_t v14 = (char *)realloc((void *)a1[2], v7 + v11);
    if (!v14)
    {
      free(v13);
      goto LABEL_10;
    }

    a1[2] = (unint64_t)v14;
    *a1 = v12;
    __int16 v13 = v14;
    unint64_t v6 = a1[1];
LABEL_8:
    memcpy(&v13[v6], __src, __n);
    uint64_t result = 0LL;
    unint64_t v16 = a1[2];
    uint64_t v17 = a1[1] + __n;
    a1[1] = v17;
    *(_BYTE *)(v16 + v17) = 0;
    return result;
  }

  *__error() = 12;
LABEL_10:
  a1[2] = 0LL;
  uint64_t v18 = __error();
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3StringBufferAppend",  431,  84,  *v18,  "malloc",  v19,  v20,  v21);
  *a1 = 0LL;
  a1[1] = 0LL;
  return 0xFFFFFFFFLL;
}

void sub_10003363C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1) {
    memset_s(*(void **)(a1 + 16), *(void *)a1, 0, *(void *)a1);
  }
  free(v1);
}

uint64_t sub_100033674(void *__s, char *a2, uint64_t a3, uint64_t a4)
{
  if (__s) {
    memset_s(__s, 0x18uLL, 0, 0x18uLL);
  }
  *__s = a4;
  if (a2)
  {
    size_t v8 = strlen(a2);
    size_t v9 = v8 + 1;
    if (v8 + 1 >= 0x2000000001LL)
    {
      *__error() = 12;
LABEL_10:
      __s[1] = 0LL;
      int v13 = *__error();
      unint64_t v16 = "strdup";
      __int16 v17 = 653;
      goto LABEL_15;
    }

    size_t v10 = malloc(v8 + 1);
    if (!v10) {
      goto LABEL_10;
    }
    unint64_t v11 = v10;
    memcpy(v10, a2, v9);
    __s[1] = v11;
  }

  if (a3) {
    uint64_t v12 = sub_100031458(a3);
  }
  else {
    uint64_t v12 = (uint64_t)AAS3ContextCreate();
  }
  __s[2] = v12;
  if (v12) {
    return 0LL;
  }
  int v13 = *__error();
  unint64_t v16 = "malloc";
  __int16 v17 = 656;
LABEL_15:
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Common.c",  (uint64_t)"s3StreamBaseInit",  v17,  84,  v13,  v16,  v14,  v15,  v19);
  sub_1000337A0((uint64_t)__s);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000337A0(uint64_t a1)
{
  return memset_s((void *)a1, 0x18uLL, 0, 0x18uLL);
}

AAByteStream_impl *AAS3DownloadStreamOpen(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 && *(_DWORD *)a2) {
    return sub_100031BA0(a1, a2, a3);
  }
  else {
    return sub_10003511C(a1, a2, a3, a4);
  }
}

void sub_100033B48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100033B74(uint64_t a1, void *a2, void *a3, id a4)
{
  unint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  +[AAS3DownloadSession completeRequest:data:response:error:]( &OBJC_CLASS___AAS3DownloadSession,  "completeRequest:data:response:error:",  WeakRetained,  v9,  v8,  v7);
}

void sub_100033C14(uint64_t a1, uint64_t a2)
{
}

void sub_100033C20(uint64_t a1)
{
}

LABEL_13:
  return v22;
}

  char v21 = v31;
  if (v31)
  {
    CURLcode v22 = (unint64_t *)&v31->__shared_owners_;
    do
      CURLcode v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  return v20;
}

    uint64_t v3 = v2[2];
    v2[2] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v2[1];
    v2[1] = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    operator delete(v2);
    goto LABEL_18;
  }

  if (sub_1000BE308())
  {
    *(void *)&unint64_t v6 = "sparse_bundles::Band::~Band()";
    *((void *)&v6 + 1) = 27LL;
    id v7 = 2;
    sub_1000699C0(v8, &v6);
    sub_10000552C(&v9, (uint64_t)"Closing an unchanged ", 21LL);
    sub_10007D064(&v9, a1);
    std::ostream::~ostream(&v9, off_10017DEA0);
    sub_10006EAA8((uint64_t)v8);
    std::ios::~ios(v10);
  }

  sub_10000A494((uint64_t)&v14, v15);
}

uint64_t sub_100034F90(void *a1)
{
  if (a1)
  {
    double v2 = (void *)a1[3];
    if (v2)
    {
      a1[3] = 0LL;
      atomic_store((unint64_t)[v2 bytesDownloaded], a1 + 5);
      [v2 invalidateAndCancel];
    }

    if (*a1 >> 62)
    {
      gettimeofday(&v10, 0LL);
      double v3 = (double)v10.tv_sec + (double)v10.tv_usec * 0.000001 - *((double *)a1 + 6);
      fwrite("AAS3DownloadStream (NSURLSession)\n", 0x22uLL, 1uLL, __stderrp);
      fprintf(__stderrp, "%12u max attempts for a request\n", *((_DWORD *)a1 + 14));
      fprintf(__stderrp, "%12u max requests in flight\n", *((_DWORD *)a1 + 16));
      fprintf(__stderrp, "%12.2f initial interval between retries (s)\n", *((float *)a1 + 15));
      uint64_t v4 = __stderrp;
      unint64_t v5 = atomic_load(a1 + 5);
      unint64_t v6 = atomic_load(a1 + 5);
      fprintf(v4, "%12llu bytes downloaded (%.2f MB)\n", v5, (double)v6 * 0.000000953674316);
      id v7 = __stderrp;
      unint64_t v8 = atomic_load(a1 + 5);
      fprintf(v7, "%12.2f MB/s download speed\n", (double)v8 / v3 * 0.000000953674316);
    }

    sub_1000337A0((uint64_t)a1);
    memset_s(a1, 0x48uLL, 0, 0x48uLL);
    free(a1);
  }

  return 0LL;
}

AAByteStream sub_10003511C(char *a1, uint64_t a2, uint64_t a3, int a4)
{
  AAByteStream v8 = AACustomByteStreamOpen();
  id v9 = (double *)malloc(0x48uLL);
  timeval v10 = v9;
  if (!v9 || (memset_s(v9, 0x48uLL, 0, 0x48uLL), !v8))
  {
    perror("malloc");
    goto LABEL_12;
  }

  if ((sub_100033674(v10, a1, a2, a3) & 0x80000000) != 0)
  {
    char v19 = "s3StreamBaseInit";
    __int16 v20 = 697;
LABEL_11:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3DownloadStreamURLSession.m",  (uint64_t)"s3DownloadStreamOpen_urlsession",  v20,  121,  0,  v19,  v11,  v12,  v22.tv_sec);
LABEL_12:
    free(v8);
    sub_100034F90(v10);
    return 0LL;
  }

  gettimeofday(&v22, 0LL);
  v10[6] = (double)v22.tv_sec + (double)v22.tv_usec * 0.000001;
  v10[7] = 32.0;
  if (a4) {
    int v13 = a4;
  }
  else {
    int v13 = 16;
  }
  *((_DWORD *)v10 + 16) = v13;
  uint64_t v14 = objc_alloc(&OBJC_CLASS___AAS3DownloadSession);
  uint64_t v15 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1);
  unint64_t v16 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v15);
  LODWORD(v17) = *((_DWORD *)v10 + 15);
  uint64_t v18 = -[AAS3DownloadSession initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:]( v14,  "initWithURL:streamBase:maxAttempts:pauseInterval:maxRequestsInFlight:",  v16,  v10,  *((unsigned int *)v10 + 14),  *((unsigned int *)v10 + 16),  v17);

  if (!v18)
  {
    char v19 = "creating session";
    __int16 v20 = 710;
    goto LABEL_11;
  }

  *((void *)v10 + 3) = v18;
  *(void *)AAByteStream v8 = v10;
  *((void *)v8 + 1) = sub_100034F90;
  *((void *)v8 + 4) = sub_100035314;
  *((void *)v8 + sub_1000296D8(&v5, 2) = sub_100035388;
  *((void *)v8 + 1crc32(0LL, 0LL, 0) = sub_1000353A0;
  return v8;
}

id sub_100035314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a1 >> 62 == 3LL) {
    fprintf(__stderrp, "NSURLSession read to buffer nbyte=%zx offset=%llx\n", a3, a4);
  }
  return _[*(id *)(a1 + 24) readToBuffer:a2 size:a3 atOffset:a4];
}

id sub_100035388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = (unint64_t *)(a1 + 32);
  do
    uint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 + a3, v3));
  return sub_100035314(a1, a2, a3, v4);
}

id sub_1000353A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a1 >> 62 == 3LL) {
    fprintf(__stderrp, "NSURLSession read to stream nbyte=%zx offset=%llx\n", a3, a4);
  }
  return _[*(id *)(a1 + 24) readToAsyncByteStream:a2 size:a3 atOffset:a4];
}

uint64_t sub_100035414(char **a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x58uLL);
  uint64_t v5 = (uint64_t)v4;
  if (!v4)
  {
    int v7 = *__error();
    timeval v10 = "malloc";
    __int16 v11 = 308;
LABEL_12:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextCreate",  v11,  125,  v7,  v10,  v8,  v9,  v16);
    goto LABEL_13;
  }

  memset_s(v4, 0x58uLL, 0, 0x58uLL);
  *(void *)(v5 + 8crc32(0LL, 0LL, 0) = a2;
  if (a1)
  {
    if ((sub_100037450(v5, 0, *a1, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0
      || (sub_100037450(v5, 1u, a1[1], "KNOX_KEYTAB_FILE") & 0x80000000) != 0
      || (sub_100037450(v5, 2u, a1[2], "KNOX_DAW_TOKEN") & 0x80000000) != 0
      || (sub_100037450(v5, 3u, a1[3], "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0
      || (sub_100037450(v5, 4u, a1[4], "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0
      || (sub_100037450(v5, 5u, a1[5], "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0
      || (sub_100037450(v5, 8u, a1[6], "KNOX_USER_AGENT") & 0x80000000) != 0)
    {
      goto LABEL_13;
    }

    unint64_t v6 = a1[7];
  }

  else
  {
    if ((sub_100037450(v5, 0, 0LL, "KNOX_APPLECONNECT_ACCOUNT") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100037450(v5, 1u, 0LL, "KNOX_KEYTAB_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100037450(v5, 2u, 0LL, "KNOX_DAW_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100037450(v5, 3u, 0LL, "KNOX_DAW_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100037450(v5, 4u, 0LL, "KNOX_WESTGATE_TOKEN") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    if ((sub_100037450(v5, 5u, 0LL, "KNOX_WESTGATE_TOKEN_FILE") & 0x80000000) != 0) {
      goto LABEL_13;
    }
    int v13 = sub_100037450(v5, 8u, 0LL, "KNOX_USER_AGENT");
    unint64_t v6 = 0LL;
    if (v13 < 0) {
      goto LABEL_13;
    }
  }

  if ((sub_100037450(v5, 9u, v6, "KNOX_PROXY") & 0x80000000) != 0)
  {
LABEL_13:
    sub_10003639C((char *)v5);
    return 0LL;
  }

  if (!*(void *)(v5 + 16))
  {
    uint64_t v15 = *(char **)(v5 + 24);
    if (v15)
    {
      if ((sub_100037530(v5, 2u, v15) & 0x80000000) != 0)
      {
        timeval v10 = "loading daw token";
        __int16 v11 = 324;
        goto LABEL_31;
      }
    }
  }

  if (!*(void *)(v5 + 32))
  {
    uint64_t v14 = *(char **)(v5 + 40);
    if (v14)
    {
      if ((sub_100037530(v5, 4u, v14) & 0x80000000) != 0)
      {
        timeval v10 = "loading westgate token";
        __int16 v11 = 327;
LABEL_31:
        int v7 = 0;
        goto LABEL_12;
      }
    }
  }

  return v5;
}

uint64_t sub_1000356D8(void *a1, char *__s)
{
  if (a1[4]) {
    return 0LL;
  }
  uint64_t v5 = (const char *)a1[2];
  if (v5) {
    goto LABEL_4;
  }
  size_t v11 = strlen(__s);
  size_t v12 = v11 + 200;
  if (v11 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_72:
    uint64_t v64 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetServiceName",  345,  125,  *v64,  "malloc",  v65,  v66,  v115);
    size_t v27 = 0LL;
    size_t v38 = 0LL;
    size_t v30 = 0LL;
LABEL_101:
    sub_100038210(v38);
    AAByteStreamClose(v30);
    free(v27);
    BOOL v24 = "getting service name and realm";
    __int16 v25 = 649;
    goto LABEL_102;
  }

  uint64_t v26 = malloc(v11 + 200);
  if (!v26) {
    goto LABEL_72;
  }
  size_t v27 = v26;
  size_t v30 = (AAByteStream_impl *)AATempStreamOpen(0x100000LL);
  if (!v30)
  {
    size_t v87 = "AATempStreamOpen";
    __int16 v88 = 348;
LABEL_94:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetServiceName",  v88,  125,  0,  v87,  v28,  v29,  v115);
    size_t v38 = 0LL;
    goto LABEL_101;
  }

  snprintf((char *)v27, v12, "https://%s/westgate/appinfo", __s);
  if ((sub_1000363DC((uint64_t)a1, 1u, (char *)v27, 0LL, (uint64_t)v30) & 0x80000000) != 0)
  {
    char v115 = (char)v27;
    size_t v87 = "Knox request failed: %s";
    __int16 v88 = 351;
    goto LABEL_94;
  }

  AAByteStreamSeek(v30, 0LL, 0);
  uint64_t v31 = (void **)sub_100038128((uint64_t)v30);
  size_t v38 = v31;
  if (!v31)
  {
    CFMutableArrayRef v99 = "AAJSONInputStreamOpen";
    __int16 v100 = 356;
    goto LABEL_100;
  }

  if ((sub_100038258((uint64_t)v31, (int *)&__sa, v32, v33, v34, v35, v36, v37) & 0x80000000) != 0)
  {
LABEL_95:
    CFMutableArrayRef v99 = "parsing JSON";
    __int16 v100 = 363;
    goto LABEL_100;
  }

  int v43 = 0;
  int v44 = 0;
  while (1)
  {
    if (__sa < 2)
    {
      if (v44 == 1 && __s1 && !strcmp(__s1, "idms")) {
        int v43 = 1;
      }
      ++v44;
      goto LABEL_41;
    }

    if ((_DWORD)__sa != 2)
    {
      if ((_DWORD)__sa == 3)
      {
        if (v43)
        {
          CURLcode v45 = __s1;
          if (__s1)
          {
            if (strcmp(__s1, "realm"))
            {
LABEL_33:
              if (!strcmp(v45, "serviceName") && (sub_100037450((uint64_t)a1, 7u, v119, 0LL) & 0x80000000) != 0)
              {
                CFMutableArrayRef v99 = "serviceName";
                __int16 v100 = 378;
                goto LABEL_100;
              }

              goto LABEL_41;
            }

            if ((sub_100037450((uint64_t)a1, 6u, v119, 0LL) & 0x80000000) == 0)
            {
              CURLcode v45 = __s1;
              goto LABEL_33;
            }

            CFMutableArrayRef v99 = "realm";
            __int16 v100 = 377;
LABEL_100:
            sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetServiceName",  v100,  125,  0,  v99,  v36,  v37,  v116);
            goto LABEL_101;
          }
        }
      }

void sub_10003639C(char *a1)
{
  if (a1)
  {
    for (uint64_t i = 0LL; i != 80; i += 8LL)
      free(*(void **)&a1[i]);
    free(a1);
  }

uint64_t sub_1000363DC(uint64_t a1, unsigned int a2, char *a3, const char **a4, uint64_t a5)
{
  v77[0] = 0LL;
  v77[1] = 0LL;
  __int128 v75 = 0uLL;
  uint64_t v76 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  size_t v10 = AAS3ContextCreate();
  uint64_t v78 = (uint64_t)v10;
  if (!v10)
  {
    unint64_t v57 = "AAS3ContextCreate";
    __int16 v58 = 189;
LABEL_41:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  v58,  125,  0,  v57,  v11,  v12,  v68);
    uint64_t v22 = 0LL;
LABEL_42:
    uint64_t v29 = 0LL;
    uint64_t v28 = 0LL;
LABEL_43:
    uint64_t v59 = 0xFFFFFFFFLL;
    goto LABEL_44;
  }

  uint64_t v13 = (uint64_t)v10;
  __int16 v14 = malloc(0x18uLL);
  int v15 = v14;
  if (!v14)
  {
    uint64_t v22 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
    goto LABEL_40;
  }

  memset_s(v14, 0x18uLL, 0, 0x18uLL);
  char v16 = (uint64_t (**)(int *))calloc(1uLL, 0x68uLL);
  uint64_t v22 = v16;
  if (!v16)
  {
LABEL_40:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamOpen",  165,  125,  0,  "malloc",  v20,  v21,  v68);
    free(v15);
    free(v22);
    unint64_t v57 = "open page stream";
    __int16 v58 = 192;
    goto LABEL_41;
  }

  void *v15 = a5;
  void *v16 = (uint64_t (*)(int *))v15;
  v16[1] = sub_100037754;
  void v16[3] = (uint64_t (*)(int *))sub_1000377EC;
  if ((AAS3ContextSetFieldString(v13, 5, *(char **)(a1 + 64), v17, v18, v19, v20, v21) & 0x80000000) != 0)
  {
    __int16 v61 = 194;
LABEL_47:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  v61,  125,  0,  "setup context",  v26,  v27,  v68);
    goto LABEL_42;
  }

  if ((AAS3ContextSetFieldString(v13, 0, *(char **)(a1 + 72), v23, v24, v25, v26, v27) & 0x80000000) != 0)
  {
    __int16 v61 = 195;
    goto LABEL_47;
  }

  uint64_t v28 = (char *)malloc(0x800uLL);
  if (!v28)
  {
    int v62 = *__error();
    __int16 v63 = 200;
LABEL_53:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  v63,  125,  v62,  "malloc",  v55,  v56,  v68);
    uint64_t v29 = 0LL;
    goto LABEL_43;
  }

  uint64_t v29 = 0LL;
  size_t v30 = "link:";
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  while (2)
  {
    memset_s(v28, 0x800uLL, 0, 0x800uLL);
    __int128 v75 = 0uLL;
    uint64_t v76 = v22;
    uint64_t v72 = v28;
    uint64_t v73 = 2047LL;
    uint64_t v33 = a3;
    uint64_t v74 = 0LL;
    if (v29)
    {
      if (v22[1] == sub_100037754)
      {
        uint64_t v34 = *v22;
        if (!*((_DWORD *)v34 + 5) || AAByteStreamWrite(*(AAByteStream *)v34, ",", 1uLL) == 1)
        {
          *(void *)((char *)v34 + 1sub_1000296D8(&v5, 2) = 1LL;
LABEL_15:
          *((_DWORD *)v34 + 5) = 0;
          uint64_t v33 = v29;
          goto LABEL_16;
        }

        uint64_t v64 = "writing ','";
        __int16 v65 = 146;
      }

      else
      {
        uint64_t v64 = "invalid stream";
        __int16 v65 = 132;
      }

      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamEndPage",  v65,  125,  0,  v64,  v31,  v32,  v68);
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  209,  125,  0,  "page stream next page",  v66,  v67,  v69);
      goto LABEL_43;
    }

LABEL_16:
    if ((sub_1000323C8(a2, v33, (uint64_t)v77, 0LL, &v75, (uint64_t)&v72, a4) & 0x80000000) != 0)
    {
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  212,  125,  0,  "request: %s",  v35,  v36,  (char)v33);
      goto LABEL_43;
    }

    free(v29);
    size_t v37 = strlen(v28);
    if (v37)
    {
      unint64_t v38 = v37;
      uint64_t v29 = 0LL;
      unint64_t v39 = 0LL;
      do
      {
        if (v38 <= v39 + 1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v38;
        }
        unint64_t v41 = v39;
        while (v28[v41] != 10)
        {
          if (v40 == ++v41)
          {
            unint64_t v41 = v40;
            break;
          }
        }

        v28[v41] = 0;
        if (v41 - v39 >= 5)
        {
          uint64_t v42 = &v28[v39];
          if (!strncmp(&v28[v39], v30, 5uLL))
          {
            int v43 = v30;
            int v44 = strchr(v42, 60);
            CURLcode v45 = strrchr(v42, 62);
            if (!v44 || (uint64_t v48 = v45) == 0LL || v45 <= v44)
            {
              sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  231,  125,  0,  "invalid link header (1): %s",  v46,  v47,  (char)v42);
              goto LABEL_43;
            }

            if (!strstr(v45, "rel=next"))
            {
              sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxRequest",  233,  125,  0,  "invalid link header (2): %s",  v49,  v50,  (char)v42);
              goto LABEL_43;
            }

            *uint64_t v48 = 0;
            int v51 = v44 + 1;
            size_t v52 = strlen(v51);
            size_t v53 = v52 + 1;
            if (v52 + 1 >= 0x2000000001LL)
            {
              *__error() = 12;
LABEL_52:
              __int16 v63 = 236;
              int v62 = 0;
              goto LABEL_53;
            }

            size_t v54 = (char *)malloc(v52 + 1);
            if (!v54) {
              goto LABEL_52;
            }
            uint64_t v29 = v54;
            memcpy(v54, v51, v53);
            size_t v30 = v43;
          }
        }

        unint64_t v39 = v41 + 1;
      }

      while (v41 + 1 < v38);
      a3 = v70;
      a4 = v71;
      if (v29) {
        continue;
      }
    }

    else
    {
      uint64_t v29 = 0LL;
    }

    break;
  }

  uint64_t v59 = 0LL;
LABEL_44:
  free(v29);
  free(v28);
  AAByteStreamClose((AAByteStream)v22);
  AAS3ContextDestroy(v78);
  return v59;
}

    uint64_t v12 = (v12 + 1);
    if ((_DWORD)v12 == 13) {
      goto LABEL_17;
    }
  }

uint64_t sub_100036930( uint64_t a1, const char *a2, const char *a3, const char *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(char **)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 80);
  *a5 = 0LL;
  *a6 = 0LL;
  if (!v8)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  568,  125,  0,  "missing Westgate token",  a7,  a8,  v64);
    uint64_t v21 = 0LL;
    uint64_t v18 = 0LL;
LABEL_14:
    uint64_t v27 = 0LL;
    goto LABEL_15;
  }

  if (v9 >> 62) {
    fwrite("  requesting decryption components from the Knox server\n", 0x38uLL, 1uLL, __stderrp);
  }
  uint64_t v18 = (AAByteStream_impl *)AATempStreamOpen(0x100000LL);
  if (!v18)
  {
    uint64_t v22 = "AATempStreamOpen";
    __int16 v23 = 573;
    int v24 = 0;
LABEL_13:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  v23,  125,  v24,  v22,  v16,  v17,  v64);
    uint64_t v21 = 0LL;
    uint64_t v8 = 0LL;
    goto LABEL_14;
  }

  size_t v19 = strlen(a2);
  size_t v20 = v19 + 200;
  if (v19 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_12:
    int v24 = *__error();
    uint64_t v22 = "malloc";
    __int16 v23 = 577;
    goto LABEL_13;
  }

  __str = (char *)malloc(v19 + 200);
  if (!__str) {
    goto LABEL_12;
  }
  size_t v25 = strlen(v8);
  size_t v26 = v25 + 200;
  if (v25 + 200 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_54:
    uint64_t v59 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  580,  125,  *v59,  "malloc",  v60,  v61,  v64);
    uint64_t v21 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v28 = 0xFFFFFFFFLL;
    uint64_t v27 = __str;
    goto LABEL_16;
  }

  size_t v30 = (char *)malloc(v25 + 200);
  if (!v30) {
    goto LABEL_54;
  }
  __int16 v65 = v8;
  uint64_t v8 = v30;
  snprintf(v30, v26, "Authorization: Bearer %s", v65);
  v75[0] = v8;
  v75[1] = 0LL;
  uint64_t v67 = a4;
  uint64_t v27 = __str;
  snprintf(__str, v20, "https://%s/spaces/%s/files/%s/decryption-components", a2, a3, v67);
  if ((sub_1000363DC(a1, 2u, __str, v75, (uint64_t)v18) & 0x80000000) != 0)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  587,  125,  0,  "Knox request failed: %s",  v31,  v32,  (char)__str);
    uint64_t v21 = 0LL;
    goto LABEL_15;
  }

  AAByteStreamSeek(v18, 0LL, 0);
  uint64_t v33 = (void **)sub_100038128((uint64_t)v18);
  uint64_t v21 = v33;
  if (!v33)
  {
    int v62 = "AAJSONInputStreamOpen";
    __int16 v63 = 592;
    goto LABEL_62;
  }

  if ((sub_100038258((uint64_t)v33, (int *)&v72, v34, v35, v36, v37, v38, v39) & 0x80000000) != 0)
  {
LABEL_56:
    int v62 = "parsing JSON";
    __int16 v63 = 600;
    goto LABEL_62;
  }

  int v44 = 0;
  int v45 = 0;
  int v46 = 0;
  uint64_t v70 = v8;
  while (v72 >= 2)
  {
    if (v72 == 2)
    {
      int v45 = 0;
      int v44 = 0;
      --v46;
      goto LABEL_47;
    }

    if (v72 != 3) {
      goto LABEL_47;
    }
    uint64_t v47 = __s1;
    if (v46 == 2 && v45 && __s1 && !strcmp(__s1, "key"))
    {
      int v68 = v44;
      uint64_t v48 = __s;
      if (!__s) {
        goto LABEL_64;
      }
      size_t v49 = strlen(__s);
      size_t v50 = v49 + 1;
      if (v49 + 1 >= 0x2000000001LL)
      {
        *__error() = 12;
LABEL_64:
        *a6 = 0LL;
        sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  618,  125,  0,  "key",  v38,  v39,  v66);
        uint64_t v8 = v70;
        uint64_t v27 = __str;
        goto LABEL_15;
      }

      int v51 = malloc(v49 + 1);
      if (!v51) {
        goto LABEL_64;
      }
      size_t v52 = v51;
      memcpy(v51, v48, v50);
      *a6 = v52;
      uint64_t v27 = __str;
      int v44 = v68;
    }

    if (v46 != 2 || !v44 || !v47)
    {
      uint64_t v8 = v70;
      goto LABEL_47;
    }

    if (!strcmp(v47, "uri"))
    {
      int v69 = v44;
      size_t v54 = __s;
      uint64_t v8 = v70;
      if (!__s) {
        goto LABEL_66;
      }
      size_t v55 = strlen(__s);
      size_t v56 = v55 + 1;
      if (v55 + 1 >= 0x2000000001LL)
      {
        *__error() = 12;
LABEL_66:
        *a5 = 0LL;
        sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  623,  125,  0,  "uri",  v38,  v39,  v66);
        uint64_t v27 = __str;
        goto LABEL_15;
      }

      unint64_t v57 = malloc(v55 + 1);
      if (!v57) {
        goto LABEL_66;
      }
      __int16 v58 = v57;
      memcpy(v57, v54, v56);
      *a5 = v58;
      int v46 = 2;
      uint64_t v27 = __str;
      int v44 = v69;
    }

    else
    {
      int v46 = 2;
      uint64_t v8 = v70;
    }

LABEL_48:
  }

  if (v46 == 1)
  {
    size_t v53 = __s1;
    if (__s1)
    {
      if (!strcmp(__s1, "encryption")) {
        int v45 = 1;
      }
      if (!strcmp(v53, "location")) {
        int v44 = 1;
      }
    }
  }

  ++v46;
LABEL_47:
  if (v46) {
    goto LABEL_48;
  }
  if (*a5 && *a6)
  {
    uint64_t v28 = 0LL;
    goto LABEL_16;
  }

  int v62 = "invalid/missing decryption components";
  __int16 v63 = 631;
LABEL_62:
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextGetDecryptionComponents",  v63,  125,  0,  v62,  v38,  v39,  v66);
LABEL_15:
  uint64_t v28 = 0xFFFFFFFFLL;
LABEL_16:
  sub_100038210(v21);
  AAByteStreamClose(v18);
  free(v27);
  free(v8);
  return v28;
}

            uint64_t v40 = (void *)v16[1];
            if (v40)
            {
              do
              {
                uint64_t v41 = v40;
                uint64_t v40 = (void *)*v40;
              }

              while (v40);
            }

            else
            {
              do
              {
                uint64_t v41 = (void *)v16[2];
                uint64_t v42 = *v41 == (void)v16;
                uint64_t v16 = v41;
              }

              while (!v42);
            }

            uint64_t v16 = v41;
          }

          while (v41 != (void *)(v12 + 24));
        }

        *(_BYTE *)(v12 + 56) = 0;
        uint64_t v43 = v58;
        a1 = v52;
        uint64_t v8 = v53;
        uint64_t v11 = a4;
        if (v58)
        {
          int v44 = (unint64_t *)&v58->__shared_owners_;
          do
            int v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }

      sub_10009CB8C(v8, &v61, &v60);
      int v46 = (std::__shared_weak_count *)*((void *)&v59 + 1);
      if (*((void *)&v59 + 1))
      {
        uint64_t v47 = (unint64_t *)(*((void *)&v59 + 1) + 8LL);
        do
          uint64_t v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }

      size_t v49 = (std::__shared_weak_count *)*((void *)&v60 + 1);
      if (*((void *)&v60 + 1))
      {
        size_t v50 = (unint64_t *)(*((void *)&v60 + 1) + 8LL);
        do
          int v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      uint64_t result = v61;
      uint64_t v61 = 0LL;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
      }
      ++v10;
    }

    while (v10 != v11);
  }

  return result;
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

uint64_t AAS3KnoxResolveURL( const char *a1, char **a2, void *a3, size_t a4, _BYTE *a5, size_t *a6, unint64_t a7)
{
  __s = 0LL;
  if (strncmp(a1, "knox://", 7uLL))
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  854,  125,  0,  "invalid Knox scheme: %s",  v14,  v15,  (char)a1);
LABEL_13:
    __int16 v23 = 0LL;
    int v24 = 0LL;
    size_t v20 = 0LL;
    goto LABEL_14;
  }

  uint64_t v16 = a1 + 7;
  uint64_t v17 = strchr(a1 + 7, 47);
  size_t v20 = v17;
  if (!v17)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  859,  125,  0,  "invalid Knox host: %s",  v18,  v19,  (char)a1);
    __int16 v23 = 0LL;
    int v24 = 0LL;
LABEL_14:
    uint64_t v32 = 0LL;
    size_t v26 = 0LL;
    goto LABEL_15;
  }

  uint64_t v21 = (char *)(v17 - v16);
  size_t v22 = v17 - v16 + 1;
  if (v22 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_12:
    int v33 = *__error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  863,  125,  v33,  "malloc",  v34,  v35,  v71);
    goto LABEL_13;
  }

  unsigned int v72 = a6;
  size_t v25 = (char *)malloc(v22);
  if (!v25) {
    goto LABEL_12;
  }
  size_t v26 = v25;
  memcpy(v25, a1 + 7, v20 - v16);
  v21[(void)v26] = 0;
  if (strncmp(v20 + 1, "download/", 9uLL))
  {
    char v71 = (char)a1;
    uint64_t v29 = "invalid Knox action: %s";
    __int16 v30 = 869;
LABEL_10:
    int v31 = 0;
LABEL_11:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  v30,  125,  v31,  v29,  v27,  v28,  v71);
    __int16 v23 = 0LL;
    int v24 = 0LL;
    size_t v20 = 0LL;
    uint64_t v32 = 0LL;
    goto LABEL_15;
  }

  uint64_t v38 = v20 + 10;
  uint64_t v39 = strchr(v38, 47);
  if (!v39)
  {
    char v71 = (char)a1;
    uint64_t v29 = "invalid Knox space: %s";
    __int16 v30 = 874;
    goto LABEL_10;
  }

  uint64_t v40 = v39;
  size_t v41 = v39 - v38;
  size_t v42 = v39 - v38 + 1;
  if (v42 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_37:
    int v31 = *__error();
    uint64_t v29 = "malloc";
    __int16 v30 = 878;
    goto LABEL_11;
  }

  uint64_t v43 = (char *)malloc(v42);
  if (!v43) {
    goto LABEL_37;
  }
  uint64_t v32 = v43;
  memcpy(v43, v38, v41);
  size_t v44 = 0LL;
  v32[v41] = 0;
  int v45 = v40 + 1;
  int v46 = v40 + 1;
  do
  {
    size_t v47 = v44;
    int v48 = (char)v45[v44];
    if (!v45[v44]) {
      break;
    }
    if (v48 < 0)
    {
      __uint32_t v49 = __maskrune((char)v45[v44], 0x4000uLL);
      int v45 = v46;
    }

    else
    {
      __uint32_t v49 = _DefaultRuneLocale.__runetype[v48] & 0x4000;
    }

    if (v48 == 35) {
      break;
    }
    size_t v44 = v47 + 1;
  }

  while (!v49);
  if (v47 + 1 >= 0x2000000001LL)
  {
    *__error() = 12;
LABEL_48:
    char v66 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  895,  125,  *v66,  "malloc",  v67,  v68,  v71);
    __int16 v23 = 0LL;
    int v24 = 0LL;
    size_t v20 = 0LL;
    goto LABEL_15;
  }

  int v51 = (char *)malloc(v47 + 1);
  if (!v51) {
    goto LABEL_48;
  }
  size_t v20 = v51;
  memcpy(v51, v46, v47);
  v20[v47] = 0;
  if (a7 >> 62)
  {
    fwrite("Knox resolve URL\n", 0x11uLL, 1uLL, __stderrp);
    fprintf(__stderrp, "  host: %s\n", v26);
    fprintf(__stderrp, "  space: %s\n", v32);
    fprintf(__stderrp, "  file digest: %s\n", v20);
  }

  size_t v52 = (char *)sub_100035414(a2, a7);
  int v24 = v52;
  if (!v52)
  {
    int v69 = "contextInit failed";
    __int16 v70 = 909;
LABEL_51:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  v70,  125,  0,  v69,  v53,  v54,  v71);
    __int16 v23 = 0LL;
    goto LABEL_15;
  }

  if ((sub_1000356D8(v52, v26) & 0x80000000) != 0)
  {
    int v69 = "getting Westgate token";
    __int16 v70 = 912;
    goto LABEL_51;
  }

  if ((sub_100036930((uint64_t)v24, v26, v32, v20, a3, &__s, v53, v54) & 0x80000000) != 0)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  915,  125,  0,  "getting decryption credentials",  v55,  v56,  v71);
    uint64_t v36 = 0xFFFFFFFFLL;
    __int16 v23 = __s;
    goto LABEL_16;
  }

  __int16 v23 = __s;
  size_t v57 = strlen(__s);
  if (!v57 || (v57 & 1) != 0)
  {
    char v71 = v57;
    char v64 = "invalid key length: %zu";
    __int16 v65 = 919;
  }

  else
  {
    size_t v63 = v57 >> 1;
    if (v57 >> 1 <= a4)
    {
      if ((sub_100037ED4(v57 >> 1, a5, (uint64_t)__s, v58, v59, v60, v61, v62) & 0x80000000) == 0)
      {
        uint64_t v36 = 0LL;
        *unsigned int v72 = v63;
        goto LABEL_16;
      }

      char v64 = "invalid hex key";
      __int16 v65 = 922;
    }

    else
    {
      char v64 = "key_capacity is too low";
      __int16 v65 = 921;
    }
  }

  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"AAS3KnoxResolveURL",  v65,  125,  0,  v64,  v61,  v62,  v71);
LABEL_15:
  uint64_t v36 = 0xFFFFFFFFLL;
LABEL_16:
  free(v26);
  free(v32);
  free(v20);
  free(v23);
  sub_10003639C(v24);
  return v36;
}

uint64_t sub_100037450(uint64_t a1, unsigned int a2, char *__s, char *a4)
{
  uint64_t v4 = __s;
  if (!__s)
  {
    if (a4) {
      uint64_t v4 = getenv(a4);
    }
  }

  if (!v4)
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 8LL * asub_1000296D8(&v5, 2) = 0LL;
    return result;
  }

  size_t v7 = strlen(v4);
  size_t v8 = v7 + 1;
  if (v7 + 1 < 0x2000000001LL)
  {
    size_t v10 = malloc(v7 + 1);
    if (v10)
    {
      uint64_t v11 = v10;
      memcpy(v10, v4, v8);
      uint64_t result = 0LL;
      *(void *)(a1 + 8LL * asub_1000296D8(&v5, 2) = v11;
      return result;
    }
  }

  else
  {
    *__error() = 12;
  }

  *(void *)(a1 + 8LL * asub_1000296D8(&v5, 2) = 0LL;
  uint64_t v12 = __error();
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextSetString",  259,  125,  *v12,  "malloc",  v13,  v14,  v15);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100037530(uint64_t a1, unsigned int a2, char *a3)
{
  int v6 = open(a3, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v32) < 0
      || ((st_size = v32.st_size, (v32.st_mode & 0xF000) == 0x8000) ? (BOOL v11 = v32.st_size == 0) : (BOOL v11 = 1), v11))
    {
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  274,  125,  0,  "invalid file: %s",  v8,  v9,  (char)a3);
    }

    else
    {
      if ((unint64_t)(v32.st_size + 1) < 0x2000000001LL)
      {
        uint64_t v16 = malloc(v32.st_size + 1);
        if (v16)
        {
          uint64_t v17 = v16;
          ssize_t v18 = read(v7, v16, st_size);
          if (v18 < 0)
          {
            int v28 = *__error();
            __int16 v29 = 280;
            __int16 v30 = a3;
          }

          else
          {
            if (v18 == st_size)
            {
              do
              {
                off_t v21 = st_size;
                if (!st_size) {
                  break;
                }
                __darwin_ct_rune_t v22 = (char)v17[st_size - 1];
                __uint32_t v23 = v22 < 0 ? __maskrune(v22, 0x4000uLL) : _DefaultRuneLocale.__runetype[v22] & 0x4000;
                --st_size;
              }

              while (v23);
              uint64_t v15 = 0LL;
              v17[v21] = 0;
              *(void *)(a1 + 8LL * asub_1000296D8(&v5, 2) = v17;
              goto LABEL_24;
            }

            __int16 v30 = "truncated read";
            __int16 v29 = 281;
            int v28 = 0;
          }

          sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  v29,  125,  v28,  v30,  v19,  v20,  v31);
LABEL_23:
          free(v17);
          uint64_t v15 = 0xFFFFFFFFLL;
LABEL_24:
          close(v7);
          return v15;
        }
      }

      else
      {
        *__error() = 12;
      }

      int v24 = *__error();
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  277,  125,  v24,  "malloc",  v25,  v26,  v31);
    }

    uint64_t v17 = 0LL;
    goto LABEL_23;
  }

  uint64_t v12 = __error();
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"contextLoadString",  273,  125,  *v12,  a3,  v13,  v14,  v31);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100037754(int *a1)
{
  if (!a1) {
    return 0LL;
  }
  if (a1[2] >= 1 && a1[4] && AAByteStreamWrite(*(AAByteStream *)a1, "]\n", 2uLL) != 2)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamClose",  67,  125,  0,  "writing final ']'",  v2,  v3,  v6);
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  free(a1);
  return v4;
}

uint64_t sub_1000377EC( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  int v11 = *(_DWORD *)(a1 + 8);
  if (v11)
  {
    if (v11 < 1)
    {
      uint64_t v12 = 0LL;
      goto LABEL_28;
    }
  }

  else
  {
    if (!a3 || *a2 != 91)
    {
      uint64_t v12 = 0LL;
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = -1;
      goto LABEL_28;
    }

    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 1;
  }

  uint64_t v12 = 0LL;
  if (a3 && *(_DWORD *)(a1 + 12))
  {
    if (*a2 != 91)
    {
      uint64_t v14 = "expected '['";
      __int16 v15 = 93;
LABEL_41:
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamWrite",  v15,  125,  0,  v14,  a7,  a8,  v22);
      return -1LL;
    }

    *(_DWORD *)(a1 + 1sub_1000296D8(&v5, 2) = 0;
    uint64_t v9 = a2 + 1;
    uint64_t v8 = a3 - 1;
    uint64_t v12 = 1LL;
  }

  if (!v8) {
    goto LABEL_35;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    uint64_t v13 = 0LL;
    goto LABEL_18;
  }

  if (AAByteStreamWrite(*(AAByteStream *)a1, "]", 1uLL) != 1)
  {
    uint64_t v14 = "writing ']'";
    __int16 v15 = 105;
    goto LABEL_41;
  }

  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v13 = 1LL;
LABEL_18:
  uint64_t v16 = v12 + 1;
  uint64_t v17 = v8 - 1;
  while (1)
  {
    __darwin_ct_rune_t v18 = (char)v9[v17];
    if (v18 < 0) {
      break;
    }
    if ((_DefaultRuneLocale.__runetype[v18] & 0x4000) == 0) {
      goto LABEL_25;
    }
LABEL_23:
    ++v16;
    if (--v17 == -1) {
      goto LABEL_27;
    }
  }

  if (__maskrune(v18, 0x4000uLL)) {
    goto LABEL_23;
  }
LABEL_25:
  if (v9[v17] == 93)
  {
    *(_DWORD *)(a1 + 16) = 1;
    uint64_t v12 = v16;
    uint64_t v8 = v17;
  }

LABEL_27:
  if (v8)
  {
LABEL_28:
    *(_DWORD *)(a1 + 2crc32(0LL, 0LL, 0) = 1;
    AAByteStream v19 = *(AAByteStream *)a1;
    if (*((void *)v19 + 3))
    {
      if (v8)
      {
        uint64_t v13 = 0LL;
        while (1)
        {
          uint64_t v20 = (*((uint64_t (**)(void, _BYTE *, uint64_t))v19 + 3))(*(void *)v19, v9, v8);
          if (v20 < 1) {
            break;
          }
          v9 += v20;
          v13 += v20;
          v8 -= v20;
          if (!v8)
          {
            if ((v13 & 0x8000000000000000LL) == 0) {
              goto LABEL_39;
            }
            goto LABEL_37;
          }
        }

        uint64_t v13 = v20;
        if (v20 < 0) {
          goto LABEL_37;
        }
        goto LABEL_39;
      }

    *int v11 = 0LL;
    v11[1] = 0LL;
    goto LABEL_28;
  }

  __int16 v29 = 0LL;
  if (!+[DICryptoHelper getPublicKeyWithCertificate:key:error:]( &OBJC_CLASS___DICryptoHelper,  "getPublicKeyWithCertificate:key:error:",  v12,  &v29,  a6)) {
    goto LABEL_27;
  }
  uint64_t v13 = v29;
  if (!((unint64_t)a4 | (unint64_t)v29))
  {
    off_t v21 =  +[DIError nilWithPOSIXCode:description:error:]( &OBJC_CLASS___DIError,  "nilWithPOSIXCode:description:error:",  22LL,  @"No passphrase or certificate was supplied.",  a6);
    goto LABEL_27;
  }

  -[BackendXPC cryptoHeader](self, "cryptoHeader");
  sub_1000BCB8C(v49);
  uint64_t v14 = *(void *)v49;
  __int16 v15 = *(void *)&v49[8];

LABEL_25:
  *int v11 = v14;
  v11[1] = v15;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
LABEL_28:
  char v22 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      int v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  result.var1 = v26;
  result.var0 = v25;
  return result;
}

LABEL_35:
      uint64_t v13 = 0LL;
      goto LABEL_39;
    }

    uint64_t v13 = -1LL;
LABEL_37:
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchiveS3/AAS3Knox.c",  (uint64_t)"knoxPageStreamWrite",  124,  125,  0,  "write",  a7,  a8,  v22);
  }

  else
  {
LABEL_39:
    v13 += v12;
  }

  return v13;
}

size_t sub_100037A20( uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5, const char *a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = (_WORD *)(((a3 & 0x3FFF) << 10) | (a4 << 24) | a5 & 0x3FF | 0x80000000);
  if (a5 >= 1)
  {
    uint64_t v14 = strerror(a5);
    snprintf(__str, 0x400uLL, "%s: ", v14);
  }

  size_t v15 = strlen(__str);
  vsnprintf(&__str[v15], 1024 - v15, a6, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100037C44((uint64_t)__str, (int)v13);
  }
  return ParallelCompressionUpdateError(v13, (size_t)__str);
}

uint64_t sub_100037B30( uint64_t a1, uint64_t a2, __int16 a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = ((a3 & 0x3FFF) << 10) | (a4 << 24) | 0x80000000;
  size_t v13 = strlen(__s);
  vsnprintf(&__s[v13], 1024 - v13, a5, &a9);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109378;
    int v16 = v12;
    __int16 v17 = 2080;
    __darwin_ct_rune_t v18 = __s;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "[0x%08x](warning) %s",  buf,  0x12u);
  }

  return ParallelCompressionUpdateWarning(v12, __s);
}

void sub_100037C44(uint64_t a1, int a2)
{
  v2[0] = 67109378;
  v2[1] = a2;
  __int16 v3 = 2080;
  uint64_t v4 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "[0x%08x] %s",  (uint8_t *)v2,  0x12u);
}

size_t sub_100037CCC(size_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    uint64_t result = strlen((const char *)result);
    if (result - 8193 >= 0xFFFFFFFFFFFFE000LL)
    {
      size_t v2 = result;
      pthread_key_t v3 = sub_100037E24();
      uint64_t result = (size_t)pthread_getspecific(v3);
      if (result)
      {
        size_t v4 = result;
        __int16 v5 = v2 + 3;
        uint64_t v6 = *(unsigned __int16 *)(result + 72);
        if (v6 + (unsigned __int16)(v2 + 3) <= *(unsigned __int16 *)(result + 74))
        {
          size_t v7 = result + v6;
          *(_WORD *)(v7 + 76) = v5;
          size_t v8 = v7 + 78;
          uint64_t result = (size_t)memcpy((void *)(v7 + 78), v1, v2);
          *(_BYTE *)(v8 + vsub_1000296D8(&v5, 2) = 0;
          *(_WORD *)(v4 + 72) += v5;
        }
      }
    }
  }

  return result;
}

_WORD *sub_100037D68(_WORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_100037E24();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*(_DWORD *)result & 0x80000000) == 0)
      {
        *(_DWORD *)uint64_t result = v1;
        result[3] = 0;
      }
    }
  }

  return result;
}

_DWORD *sub_100037DA8(_DWORD *result)
{
  if ((result & 0x80000000) != 0)
  {
    int v1 = (int)result;
    pthread_key_t v2 = sub_100037E24();
    uint64_t result = pthread_getspecific(v2);
    if (result)
    {
      if ((*result & 0x80000000) == 0)
      {
        uint64_t v3 = *((unsigned __int16 *)result + 3);
        if (v3 <= 0xF)
        {
          result[v3 + 2] = v1;
          *((_WORD *)result + 3) = v3 + 1;
        }
      }
    }
  }

  return result;
}

size_t ParallelCompressionUpdateError(_WORD *a1, size_t a2)
{
  return sub_100037CCC(a2);
}

uint64_t sub_100037E24()
{
  if (pthread_once(&stru_1001A3D70, (void (*)(void))sub_100037E80))
  {
    int v0 = __error();
    sub_100037A20( "/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c",  "getErrorContextKey",  53LL,  5LL,  *v0,  "pthread_once");
  }

  return qword_1001A4778;
}

uint64_t sub_100037E80()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&qword_1001A4778, 0LL);
  if ((_DWORD)result)
  {
    int v1 = __error();
    return sub_100037A20( "/Library/Caches/com.apple.xbs/Sources/ParallelCompression/Common/Threads.c",  "createErrorContextKey",  42LL,  5LL,  *v1,  "pthread_key_create");
  }

  return result;
}

uint64_t sub_100037ED4( int a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = (2 * a1);
  if (!(_DWORD)v8)
  {
LABEL_13:
    int v11 = 0;
    return (v11 << 31 >> 31);
  }

  char v9 = 0;
  uint64_t v10 = 0LL;
  int v11 = 1;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a3 + v10);
    if (!*(_BYTE *)(a3 + v10))
    {
      uint64_t v14 = "truncated hex string";
      __int16 v15 = 13;
      goto LABEL_16;
    }

    char v13 = -48;
LABEL_10:
    char v9 = v13 + 16 * v9 + v12;
    if ((v10 & 1) != 0)
    {
      *a2++ = v9;
      char v9 = 0;
    }

    int v11 = ++v10 < v8;
    if (v8 == v10) {
      goto LABEL_13;
    }
  }

  if ((v12 - 97) < 6)
  {
    char v13 = -87;
    goto LABEL_10;
  }

  if ((v12 - 65) < 6)
  {
    char v13 = -55;
    goto LABEL_10;
  }

  uint64_t v14 = "invalid hex string";
  __int16 v15 = 18;
LABEL_16:
  sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AASerialization.c",  (uint64_t)"aaParseHexString",  v15,  106,  0,  v14,  a7,  a8,  v17);
  return (v11 << 31 >> 31);
}

uint64_t sub_100037FC0(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = (void *)(a1 + 72);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256LL;
    }
    *(void *)(a1 + 7sub_1000296D8(&v5, 2) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 88), v8);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v7;
    if (!v7)
    {
      uint64_t v10 = __error();
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"jsonPushLabel",  358,  109,  *v10,  "malloc",  v11,  v12,  v14);
      void *v6 = 0LL;
      v6[1] = 0LL;
      return 0xFFFFFFFFLL;
    }

    unint64_t v5 = *(void *)(a1 + 80);
  }

  else
  {
    size_t v7 = *(_BYTE **)(a1 + 88);
  }

  uint64_t v9 = 0LL;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

uint64_t sub_100038074(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(a1 + 96);
  unint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 96);
  if (v5 >= v4)
  {
    if (v4) {
      size_t v8 = v4 + (v4 >> 1);
    }
    else {
      size_t v8 = 256LL;
    }
    *(void *)(a1 + 96) = v8;
    size_t v7 = reallocf(*(void **)(a1 + 112), v8);
    *(void *)(a1 + sub_100006224(v50 + 112) = v7;
    if (!v7)
    {
      uint64_t v10 = __error();
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"jsonPushValue",  372,  109,  *v10,  "malloc",  v11,  v12,  v14);
      void *v6 = 0LL;
      v6[1] = 0LL;
      return 0xFFFFFFFFLL;
    }

    unint64_t v5 = *(void *)(a1 + 104);
  }

  else
  {
    size_t v7 = *(_BYTE **)(a1 + 112);
  }

  uint64_t v9 = 0LL;
  *(void *)(a1 + 104) = v5 + 1;
  v7[v5] = a2;
  return v9;
}

void *sub_100038128(uint64_t a1)
{
  pthread_key_t v2 = malloc(0x78uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    memset_s(v2, 0x78uLL, 0, 0x78uLL);
    v3[1] = a1;
    v3[5] = 0x10000LL;
    unint64_t v4 = malloc(0x10000uLL);
    v3[8] = v4;
    if (v4)
    {
      *(void *)((char *)v3 + 2crc32(0LL, 0LL, 0) = 32LL;
      v3[4] = calloc(0x20uLL, 4uLL);
    }

    else
    {
      size_t v8 = __error();
      sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamOpen",  387,  109,  *v8,  "malloc",  v9,  v10,  v12);
      sub_100038210((void **)v3);
      return 0LL;
    }
  }

  else
  {
    unint64_t v5 = __error();
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamOpen",  382,  109,  *v5,  "malloc",  v6,  v7,  v12);
  }

  return v3;
}

void sub_100038210(void **a1)
{
  if (a1)
  {
    free(a1[4]);
    free(a1[11]);
    free(a1[14]);
    free(a1[8]);
    free(a1);
  }

uint64_t sub_100038258( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10 == 9 || v10 == -1)
  {
    sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamRead",  418,  109,  0,  "unexpected read call",  a7,  a8,  v45);
    return 0xFFFFFFFFLL;
  }

  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  while (2)
  {
    unint64_t v14 = *(void *)(a1 + 56);
    __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    if (v14 >= *(void *)(a1 + 48))
    {
      ssize_t v16 = AAByteStreamRead(*(AAByteStream *)(a1 + 8), v15, *(void *)(a1 + 40));
      if (v16 < 0)
      {
        sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamRead",  430,  109,  0,  "read error: %zd",  a7,  a8,  v16);
LABEL_104:
        uint64_t result = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 16) = -1;
        return result;
      }

      if (!v16)
      {
        __int16 v29 = "EOF reached";
        __int16 v30 = 431;
        goto LABEL_103;
      }

      unint64_t v14 = 0LL;
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v16;
      __int16 v15 = *(unsigned __int8 **)(a1 + 64);
    }

    *(void *)(a1 + 56) = v14 + 1;
    int v17 = v15[v14];
    char v18 = v15[v14];
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0:
        *(void *)(a1 + 104) = 0LL;
        if ((char)v17 < 0)
        {
        }

        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }

        if (v17 == 34) {
          goto LABEL_68;
        }
        if (v17 == 43 || v17 == 45 || ((char)v17 - 48) <= 9)
        {
          if ((sub_100038074(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 3;
            goto LABEL_69;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 451;
          goto LABEL_103;
        }

        if (v17 == 123)
        {
          uint64_t v31 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v31 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 465;
            goto LABEL_103;
          }

          int v26 = 0;
          uint64_t v43 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v31 + 1;
          *(_DWORD *)(v43 + 4 * v31) = 0;
          int v36 = 6;
          goto LABEL_125;
        }

        if (v17 == 91)
        {
          uint64_t v32 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v32 == *(_DWORD *)(a1 + 20))
          {
            __int16 v29 = "max level reached";
            __int16 v30 = 457;
            goto LABEL_103;
          }

          int v36 = 0;
          uint64_t v44 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 24) = v32 + 1;
          int v26 = 1;
          *(_DWORD *)(v44 + 4 * v3sub_1000296D8(&v5, 2) = 1;
          goto LABEL_125;
        }

        if (((char)v17 - 97) <= 0x19)
        {
          if ((sub_100038074(a1, v17) & 0x80000000) == 0)
          {
            int v22 = 4;
            goto LABEL_69;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 473;
          goto LABEL_103;
        }

        unsigned int v24 = *(_DWORD *)(a1 + 24) - 1;
        BOOL v33 = (*(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24) & 1) == 0 || (char)v17 != 93;
        BOOL v34 = (*(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24) & 1) == 0 && (char)v17 == 125;
        if (v33 && !v34) {
          goto LABEL_102;
        }
        goto LABEL_121;
      case 1:
        if (v17 == 92)
        {
          int v22 = 2;
          goto LABEL_69;
        }

        if (v17 == 34)
        {
          *(_DWORD *)(a1 + 16) = 5;
          if ((sub_100038074(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 3;
            goto LABEL_126;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 499;
          goto LABEL_103;
        }

        if ((sub_100038074(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 503;
          goto LABEL_103;
        }

        continue;
      case 2:
        HIDWORD(v2crc32(0LL, 0LL, 0) = (char)v17;
        LODWORD(v2crc32(0LL, 0LL, 0) = ((char)v17 << 24) - 1644167168;
        unsigned __int8 v19 = v20 >> 25;
        if (v19 < 0xAu && ((0x341u >> v19) & 1) != 0)
        {
          char v21 = aN4info7details[(char)v19];
        }

        else if ((char)v17 == 102)
        {
          char v21 = 12;
        }

        else
        {
          char v21 = v18;
        }

        if ((sub_100038074(a1, v21) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 512;
          goto LABEL_103;
        }

LABEL_68:
        int v22 = 1;
        goto LABEL_69;
      case 3:
        if (((char)v17 - 48) > 9)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_100038074(a1, 0) & 0x80000000) == 0)
          {
            int v26 = 4;
            goto LABEL_126;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 539;
          goto LABEL_103;
        }

        if ((sub_100038074(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 533;
          goto LABEL_103;
        }

        continue;
      case 4:
        if (((char)v17 - 97) > 0x19)
        {
          *(_DWORD *)(a1 + 16) = 5;
          *(void *)(a1 + 56) = v14;
          if ((sub_100038074(a1, 0) & 0x80000000) == 0)
          {
            uint64_t v27 = *(const char **)(a1 + 112);
            if (!strcmp(v27, "false") || !strcmp(v27, "true"))
            {
              int v26 = 6;
            }

            else
            {
              if (strcmp(v27, "null")) {
                goto LABEL_102;
              }
              int v26 = 7;
            }

            goto LABEL_126;
          }

          __int16 v29 = "jsonPushValue";
          __int16 v30 = 524;
          goto LABEL_103;
        }

        if ((sub_100038074(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushValue";
          __int16 v30 = 519;
          goto LABEL_103;
        }

        continue;
      case 5:
        if ((char)v17 < 0)
        {
        }

        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }

        int v23 = *(_DWORD *)(a1 + 24);
        if (!v23)
        {
          __int16 v29 = "invalid JSON state";
          __int16 v30 = 546;
          goto LABEL_103;
        }

        unsigned int v24 = v23 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24);
        if (v17 != 44)
        {
          if (v17 == 93)
          {
            if ((v25 & 1) != 0) {
              goto LABEL_121;
            }
            char v18 = 93;
          }

          else if (v17 == 125)
          {
            goto LABEL_91;
          }

LABEL_102:
          char v45 = v18;
          __int16 v29 = "invalid char %c %s";
          __int16 v30 = 610;
          goto LABEL_103;
        }

        if ((v25 & 1) != 0) {
          int v22 = 0;
        }
        else {
          int v22 = 6;
        }
LABEL_69:
        *(_DWORD *)(a1 + 16) = v22;
        continue;
      case 6:
        *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
        if (((char)v17 & 0x80000000) == 0)
        {
          continue;
        }

  char v66 = v115;
  if (v115)
  {
    uint64_t v67 = (unint64_t *)&v115->__shared_owners_;
    do
      uint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  int v69 = v107;
  if (v107)
  {
    __int16 v70 = (unint64_t *)&v107->__shared_owners_;
    do
      char v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  return v18;
}

LABEL_61:
        if (v17 == 34)
        {
          int v22 = 7;
          goto LABEL_69;
        }

        if (v17 != 125) {
          goto LABEL_102;
        }
        int v28 = *(_DWORD *)(a1 + 24);
        if (!v28) {
          goto LABEL_92;
        }
        unsigned int v24 = v28 - 1;
        int v25 = *(_DWORD *)(*(void *)(a1 + 32) + 4LL * v24);
LABEL_91:
        if ((v25 & 1) != 0)
        {
LABEL_92:
          char v18 = 125;
          goto LABEL_102;
        }

LABEL_121:
        *(_DWORD *)(a1 + 24) = v24;
        if (v24) {
          int v36 = 5;
        }
        else {
          int v36 = 9;
        }
        int v26 = 2;
LABEL_125:
        *(_DWORD *)(a1 + 16) = v36;
LABEL_126:
        if (a2) {
          memset_s(a2, 0x38uLL, 0, 0x38uLL);
        }
        *a2 = v26;
        uint64_t v37 = *(void *)(a1 + 80);
        if (v37) {
          uint64_t v37 = *(void *)(a1 + 88);
        }
        *((void *)a2 + 1) = v37;
        a2[12] = *(_DWORD *)(a1 + 24);
        if (v26 == 6)
        {
          int v38 = strcmp(*(const char **)(a1 + 112), "true");
          uint64_t result = 0LL;
          a2[9] = v38 == 0;
        }

        else if (v26 == 4)
        {
          uint64_t v39 = *(const char **)(a1 + 112);
          if (*v39 == 45)
          {
            unint64_t v40 = strtoull(v39 + 1, 0LL, 10);
            uint64_t result = 0LL;
            *((void *)a2 + 3) = v40;
            int v41 = -1;
          }

          else
          {
            unint64_t v42 = strtoull(v39, 0LL, 0);
            uint64_t result = 0LL;
            *((void *)a2 + 3) = v42;
            int v41 = v42 != 0;
          }

          a2[8] = v41;
        }

        else
        {
          uint64_t result = 0LL;
          if (v26 == 3) {
            *((void *)a2 + sub_1000296D8(&v5, 2) = *(void *)(a1 + 112);
          }
        }

        return result;
      case 7:
        if ((char)v17 == 34)
        {
          if ((sub_100037FC0(a1, 0) & 0x80000000) == 0)
          {
            int v22 = 8;
            goto LABEL_69;
          }

          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 587;
LABEL_103:
          sub_100037A20( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ParallelCompression/AppleArchive/AAJSONStreams.c",  (uint64_t)"AAJSONInputStreamRead",  v30,  109,  0,  v29,  a7,  a8,  v45);
          goto LABEL_104;
        }

        if ((sub_100037FC0(a1, v17) & 0x80000000) != 0)
        {
          __int16 v29 = "jsonPushLabel";
          __int16 v30 = 591;
          goto LABEL_103;
        }

        continue;
      case 8:
        if ((char)v17 < 0)
        {
        }

        else if ((_DefaultRuneLocale.__runetype[(char)v17] & 0x4000) != 0)
        {
          continue;
        }

        int v22 = 0;
        goto LABEL_69;
      default:
        goto LABEL_102;
    }
  }

BOOL sub_100038A84(const char *a1)
{
  return !strcmp(a1, "lifs") || strcmp(a1, "fskit") == 0;
}

uint64_t _FSGetLocationFromStatfs(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6 = calloc(1uLL, 0x400uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_100038A84((const char *)(a1 + 72)))
    {
      size_t v8 = strstr((const char *)(a1 + 1112), "://");
      if (!v8 || (v9 = v8 + 3, (int v10 = strchr(v8 + 3, 47)) == 0LL))
      {
        uint64_t v12 = 22LL;
LABEL_20:
        free(v7);
        return v12;
      }

      if (v10 - v9 >= 1023) {
        uint64_t v11 = 1023LL;
      }
      else {
        uint64_t v11 = v10 - v9;
      }
      __memcpy_chk(v7, v9, v11, 1024LL);
      *((_BYTE *)v7 + v11) = 0;
      if (!a2)
      {
LABEL_19:
        uint64_t v12 = 0LL;
        goto LABEL_20;
      }
    }

    else
    {
      if (!strncmp((const char *)(a1 + 1112), "/dev/disk", 9uLL))
      {
        uint64_t v13 = a1 + 1117;
      }

      else if (!strncmp((const char *)(a1 + 1112), "/dev/rdisk", 0xAuLL))
      {
        uint64_t v13 = a1 + 1118;
      }

      else
      {
        uint64_t v13 = a1 + 1112;
      }

      __strlcpy_chk(v7, v13, 1024LL, 1024LL);
      if (!a2) {
        goto LABEL_19;
      }
    }

    strlcpy(a2, (const char *)v7, a3);
    goto LABEL_19;
  }

  return 12LL;
}

void sub_100038C04(void *a1, uint64_t a2)
{
  uint64_t v3 = v14;
  if (v14 != v15)
  {
    unint64_t v4 = a1 + 1;
    uint64_t v5 = *a1;
    do
    {
      uint64_t v6 = *(void *)(v5 - 128);
      if (!*(_DWORD *)((char *)v4 + v6))
      {
        int v7 = *((_DWORD *)v3 + 14) + 2147483643;
        if (v7 <= 3)
        {
          int v8 = dword_100143C20[v7];
          int v9 = dword_100143C30[v7];
          *(_DWORD *)((char *)v4 + v6) = v8;
          *unint64_t v4 = v9;
        }
      }

      int64_t v10 = (char *)v3[5] - (char *)v3[4] + ((_BYTE)v3[6] & 1) + ((*((unsigned __int8 *)v3 + 48) >> 1) & 1) - 1;
      *(void *)((char *)a1 + *(void *)(v5 - 128) + 16) += v3[9];
      *(void *)((char *)a1 + *(void *)(v5 - 112) + 56) -= v10 << 9;
      uint64_t v11 = v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void **)v3[2];
          BOOL v13 = *v12 == v3;
          uint64_t v3 = v12;
        }

        while (!v13);
      }

      uint64_t v3 = v12;
    }

    while (v12 != v15);
  }

  sub_10000A494((uint64_t)&v14, v15[0]);
}

uint64_t sub_100038D24(void *a1, uint64_t a2)
{
  int v24 = *(_DWORD *)(*(void *)(a2 + 136) + 352LL);
  sub_1000398B4(&v25, &v24);
  sub_100005F24((uint64_t)v26, __p);
  unint64_t v4 = (char *)a1 + *(void *)(*a1 - 136LL);
  uint64_t v5 = v4 + 8;
  if (v4[31] < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *((void *)v5 + sub_1000296D8(&v5, 2) = v23;
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v23 = 0LL;
  sub_10000600C((uint64_t)v26, (__int128 *)__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a2 + 136);
  unint64_t v7 = *(unsigned int *)(v6 + 356);
  if (v7 >= 8)
  {
    int v8 = (unsigned __int8 *)(v6 + 360);
    unint64_t v9 = v7 >> 3;
    uint64_t v10 = *(void *)(v25 - 24);
    int v11 = *(_DWORD *)((char *)v26 + v10);
    unint64_t v12 = v9 - 1;
    if (v9 == 1)
    {
      int v17 = *(_DWORD *)((char *)v26 + v10);
    }

    else
    {
      BOOL v13 = v8;
      unint64_t v14 = v9 - 1;
      do
      {
        *(_DWORD *)((char *)v26 + *(void *)(v25 - 24)) = *(_DWORD *)((_BYTE *)v26 + *(void *)(v25 - 24)) & 0xFFFFFFB5 | 8;
        LOBYTE(__p[0]) = 48;
        __int16 v15 = sub_10000EDBC(&v25, (char *)__p);
        *(void *)((char *)v15 + *(void *)(*v15 - 24LL) + 24) = 2LL;
        ssize_t v16 = (void *)std::ostream::operator<<(v15, *v13);
        sub_10000552C(v16, (uint64_t)" ", 1LL);
        ++v13;
        --v14;
      }

      while (v14);
      uint64_t v10 = *(void *)(v25 - 24);
      int v17 = *(_DWORD *)((char *)v26 + v10);
    }

    *(_DWORD *)((char *)v26 + v1crc32(0LL, 0LL, 0) = v17 & 0xFFFFFFB5 | 8;
    LOBYTE(__p[0]) = 48;
    char v18 = sub_10000EDBC(&v25, (char *)__p);
    *(void *)((char *)v18 + *(void *)(*v18 - 24LL) + 24) = 2LL;
    std::ostream::operator<<(v18, v8[v12]);
    *(_DWORD *)((char *)v26 + *(void *)(v25 - 24)) = v11;
  }

  sub_100005F24((uint64_t)v26, __p);
  unsigned __int8 v19 = (char *)a1 + *(void *)(*a1 - 136LL);
  unint64_t v20 = v19 + 32;
  if (v19[55] < 0) {
    operator delete(*(void **)v20);
  }
  *(_OWORD *)unint64_t v20 = *(_OWORD *)__p;
  *((void *)v20 + sub_1000296D8(&v5, 2) = v23;
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_100038FBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void sub_100038FF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    uint64_t v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_10001C610(&v24, (uint64_t *)&v26);
    sub_10011F1C0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    BOOL v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      __int16 v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  int v17 = v25;
  if (v25)
  {
    char v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    char v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_100039180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1000391A0(uint64_t a1, uint64_t a2)
{
  while (!sub_1000F9408((uint64_t)&v18, (uint64_t)&v23))
  {
    int v3 = sub_1000F92BC(&v18);
    sub_1000F93B0((uint64_t)&v18);
    if (v3 == 1651272568)
    {
      sub_1000F92BC(&v18);
      uint64_t v4 = (const __CFArray *)sub_1000F93B0((uint64_t)&v18);
      sub_1000398F8(a1, v4);
    }

    sub_100029DB4((uint64_t)v14, &v18);
    ++v22;
    if (v17) {
      sub_10000D8A4(&v16);
    }
    uint64_t v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  if (v26) {
    sub_10000D8A4(&v25);
  }
  __int128 v8 = v24;
  if (v24)
  {
    unint64_t v9 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v21) {
    sub_10000D8A4(&v20);
  }
  unint64_t v11 = v19;
  if (v19)
  {
    uint64_t v12 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_10003933C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100039358(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = off_100176370;
  *(void *)(a1 + 56) = off_1001764D8;
  *(void *)(a1 + 64) = off_100176520;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = &off_1001768C8;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + sub_100006224(v50 + 112) = 0;
  *(_BYTE *)(a1 + 12crc32(0LL, 0LL, 0) = 0;
  *(void *)(a1 + 136) = off_100176A70;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 15sub_1000296D8(&v5, 2) = 0;
  *(void *)(a1 + 16crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = &off_100176C18;
  *(void *)(a1 + 24) = off_100176920;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_100176C70;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 20crc32(0LL, 0LL, 0) = &off_100176DC0;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = off_100176AC8;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100176E18;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24crc32(0LL, 0LL, 0) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  sub_100039688((uint64_t *)(a1 + 256), (uint64_t *)&off_1001762F0, (uint64_t)a2);
  *(void *)a1 = off_100175D88;
  *(void *)(a1 + 24) = off_100175DD0;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_100175E18;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = off_100175E60;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100175EA8;
  *(void *)(a1 + 56) = off_100175EF0;
  *(void *)(a1 + 64) = off_100175F38;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = off_100175F98;
  *(void *)(a1 + 136) = off_100176008;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = off_100176078;
  *(void *)(a1 + 20crc32(0LL, 0LL, 0) = off_1001760E8;
  *(void *)(a1 + 256) = off_100176158;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 2;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  uint64_t v8 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 16) = v7;
  uint64_t v9 = *(void *)(a1 + *(void *)(v8 - 112) + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 24))(a2);
  uint64_t v11 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + _Block_object_dispose(va, 8) = v10 * v9;
  uint64_t v12 = a1 + *(void *)(v11 - 112);
  *(void *)(v12 + 4crc32(0LL, 0LL, 0) = *(void *)(v12 + 8);
  *(_BYTE *)(v12 + 4_Block_object_dispose(va, 8) = 1;
  uint64_t v13 = a1 + *(void *)(*(void *)a1 - 112LL);
  *(void *)(v13 + 24) = *(void *)(v13 + 8);
  *(_BYTE *)(v13 + 3sub_1000296D8(&v5, 2) = 1;
  uint64_t v14 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 56) = *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 8);
  *(void *)(a1 + *(void *)(v14 - 128) + 16) = 0LL;
  sub_100038C04((void *)a1, (uint64_t)a2);
  sub_100038D24((void *)a1, (uint64_t)a2);
  uint64_t v15 = *(void *)a1;
  unint64_t v16 = *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 8)
      - *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 56);
  uint64_t v17 = *(void *)(*(void *)a1 - 128LL);
  if (v16) {
    float v18 = (float)*(unint64_t *)(a1 + v17 + 16) / (float)v16;
  }
  else {
    float v18 = 1.0;
  }
  *(float *)(a1 + v17 + 24) = v18;
  sub_100038FF4(a2 + 6, a1 + *(void *)(v15 - 104));
  if ((a3 & 1) != 0)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    char v21 = Mutable;
    if (*v6)
    {
      CFRelease(*v6);
      CFMutableArrayRef Mutable = v21;
    }

    *(void *)(a1 + 16) = Mutable;
    char v21 = 0LL;
    sub_10002B014((const void **)&v21);
    sub_1000391A0(a1, (uint64_t)a2);
  }

  return a1;
}

void sub_100039620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v2 + 136) = v7;
  *(void *)(v2 + 4crc32(0LL, 0LL, 0) = v7 + 88;
  sub_10003AF44(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_100039688(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100177578;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v7 = sub_1000F7F14(a3 + 64);
  uint64_t v9 = v8;
  *(void *)&v14.byte0 = v7;
  *(void *)&v14.byte8 = v9;
  uint64_t v13 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v14);
  CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v13);
  uint64_t v12 = v10;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v10 = v12;
  }

  a1[1] = (uint64_t)v10;
  uint64_t v12 = 0LL;
  sub_10003AF44((const void **)&v12);
  sub_10003B07C((const void **)&v13);
  return a1;
}

void sub_100039764( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1000397B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - sub_10003AF44((const void **)(v10 + 24)) = a2[3];
  sub_10003AF44((const void **)(a1 + 24));
  sub_10003AF44((const void **)(a1 + 16));
  sub_10003AF44((const void **)(a1 + 8));
  return a1;
}

uint64_t sub_1000397FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - sub_10003AF44((const void **)(v10 + 24)) = a2[3];
  return a1;
}

CFStringRef sub_100039850(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100177598[v1];
  }
}

CFStringRef sub_10003987C(void *a1)
{
  unsigned int v1 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 48LL) + 8) - 3;
  if (v1 > 7) {
    return @"UDRO";
  }
  else {
    return off_100177598[v1];
  }
}

void *sub_1000398B4(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100177148[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 66)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_100177148[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

void sub_1000398F8(uint64_t a1, CFArrayRef theArray)
{
  unint64_t Count = CFArrayGetCount(theArray);
  CFIndex v5 = Count;
  if (Count >> 61) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8 * Count;
  }
  uint64_t v7 = operator new[](v6);
  bzero(v7, v6);
  v30.location = 0LL;
  v30.length = v5;
  CFArrayGetValues(theArray, v30, (const void **)v7);
  if (v5 >= 1)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      uint64_t Value = (const void *)*((void *)v7 + i);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value && (uint64_t v11 = TypeID, CFGetTypeID(Value) != TypeID)
        || (Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"Data"), CFTypeID v12 = CFDataGetTypeID(), Value)
        && (uint64_t v11 = v12, CFGetTypeID(Value) != v12))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        CFTypeID v18 = CFGetTypeID(Value);
        unint64_t v19 = sub_10000A37C(exception, v18, v11);
      }

      CFIndex Length = CFDataGetLength((CFDataRef)Value);
      CFUUIDBytes v14 = operator new[](Length);
      bzero(v14, Length);
      v31.length = CFDataGetLength((CFDataRef)Value);
      v31.location = 0LL;
      CFDataGetBytes((CFDataRef)Value, v31, (UInt8 *)v14);
      sub_1000F6EA8((uint64_t)v28, (uint64_t)v14);
      if (v29)
      {
        unsigned int v15 = 0;
        uint64_t v16 = (uint64_t)v14 + 204;
        do
        {
          sub_1000F6F94((uint64_t)&v24, v16);
          int v20 = v24;
          __int128 v21 = v25;
          __int128 v22 = v26;
          int v23 = v27;
          sub_100039B78(a1, &v20);
          ++v15;
          v16 += 40LL;
        }

        while (v15 < v29);
      }

      operator delete[](v14);
    }
  }

  operator delete[](v7);
}

void sub_100039B2C(_Unwind_Exception *a1)
{
}

void sub_100039B78(uint64_t a1, int *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int v5 = *a2;
  sub_10000AC5C((uint64_t)v13);
  int v12 = v5;
  sub_10003AF74(&v14, &v12);
  sub_100005F24((uint64_t)v15, __p);
  if (v10 >= 0) {
    size_t v6 = __p;
  }
  else {
    size_t v6 = (void **)__p[0];
  }
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v6, 0x8000100u);
  CFStringRef v11 = v7;
  sub_10003AF44((const void **)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v13
  uint64_t v14 = v8;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf(v15);
  std::ios::~ios(&v17);
  CFDictionaryAddValue(Mutable, @"Type", v7);
  CFRelease(v7);
  sub_1000FEA34(Mutable, @"Reserved", a2[1]);
  sub_1000FEA34(Mutable, @"Sector Count", *((void *)a2 + 2));
  sub_1000FEA34(Mutable, @"Start Offset", *((void *)a2 + 1));
  sub_1000FEA34(Mutable, @"Compressed Offset", *((void *)a2 + 3));
  sub_1000FEA34(Mutable, @"Compressed Length", *((void *)a2 + 4));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), Mutable);
}

void sub_100039D44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void (__cdecl **a21)(std::stringbuf *__hidden this), uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(uint64_t *)((char *)&a18
  a20 = v38;
  if (a34 < 0) {
    operator delete(a29);
  }
  std::streambuf::~streambuf(&a21);
  std::ios::~ios(&a37);
  _Unwind_Resume(a1);
}

const void **sub_100039DD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 8);
  uint64_t v8 = (const __CFString **)@"Total Bytes";
  uint64_t v9 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  char v10 = @"Sector Count";
  uint64_t valuePtr = *(void *)(a1 + 16);
  CFNumberRef v11 = 0LL;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  int v12 = @"Empty Bytes";
  uint64_t valuePtr = *(void *)(a1 + 56);
  CFNumberRef v13 = 0LL;
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  uint64_t v14 = (const __CFString *)&v8;
  uint64_t v15 = 3LL;
  sub_1000FF118((CFMutableDictionaryRef *)&v6, (uint64_t *)&v14);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    sub_100006B94((const void **)&(&v8)[i]);
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v14 = @"Max Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 40);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100006B94((const void **)&v15);
  }

  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v14 = @"Min Size Bytes";
    uint64_t valuePtr = *(void *)(a1 + 24);
    uint64_t v15 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    uint64_t v8 = &v14;
    uint64_t v9 = 1LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v6, (uint64_t *)&v8);
    sub_100006B94((const void **)&v15);
  }

  *a2 = v6;
  size_t v6 = 0LL;
  return sub_100006B34(&v6);
}

void sub_100039FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10003A038()
{
}

CFStringRef sub_10003A040()
{
  return @"Size Info";
}

void sub_10003A050(void *a1)
{
}

uint64_t sub_10003A060(uint64_t a1)
{
  *(void *)a1 = off_1001773D0;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_100177428;
  sub_10003AF44((const void **)(a1 + 24));
  return a1;
}

void sub_10003A09C(void *a1)
{
  *(void *)a1 = off_1001773D0;
  *((void *)a1 + 4) = off_100177428;
  sub_10003AF44((const void **)a1 + 3);
  operator delete(a1);
}

const void **sub_10003A0D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 16)) {
    uint64_t v4 = &kCFBooleanTrue;
  }
  else {
    uint64_t v4 = &kCFBooleanFalse;
  }
  CFBooleanRef v5 = *v4;
  uint64_t v15 = (uint64_t *)@"Is Encrypted";
  uint64_t v16 = (uint64_t)v5;
  uint64_t valuePtr = 0LL;
  CFNumberRef v11 = &v15;
  uint64_t v12 = 1LL;
  sub_1000FF160((uint64_t *)&v11, (CFMutableDictionaryRef *)&v9);
  sub_100006B94((const void **)&v16);
  sub_10003AFB8(&valuePtr);
  if (*(_BYTE *)(a1 + 16))
  {
    uint64_t valuePtr = *(const void **)(a1 + 8);
    CFNumberRef v11 = (uint64_t **)@"Key Size";
    uint64_t v12 = (uint64_t)CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
    CFNumberRef v13 = @"UUID";
    size_t v6 = *(const void **)(a1 + 24);
    uint64_t v14 = v6;
    if (v6) {
      CFRetain(v6);
    }
    uint64_t v15 = (uint64_t *)&v11;
    uint64_t v16 = 2LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v9, (uint64_t *)&v15);
    for (uint64_t i = 3LL; i != -1; i -= 2LL)
      sub_100006B94((const void **)&(&v11)[i]);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return sub_100006B34(&v9);
}

void sub_10003A228(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFStringRef sub_10003A288()
{
  return @"Encryption Info";
}

const void **sub_10003A294(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)unsigned int v1 = off_1001773D0;
  *((void *)v1 + 4) = off_100177428;
  return sub_10003AF44((const void **)v1 + 3);
}

void sub_10003A2BC(void *a1)
{
  unsigned int v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)unsigned int v1 = off_1001773D0;
  *((void *)v1 + 4) = off_100177428;
  sub_10003AF44((const void **)v1 + 3);
  operator delete(v1);
}

const void **sub_10003A308@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t valuePtr = *(void *)(a1 + 16);
  v11[0] = @"Compressed Bytes";
  v11[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  LODWORD(valuePtr) = *(_DWORD *)(a1 + 24);
  void v11[2] = @"Compression Ratio";
  CFNumberRef v12 = 0LL;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  unsigned int v4 = *(_DWORD *)(a1 + 8) - 1;
  if (v4 > 3) {
    CFBooleanRef v5 = @"raw";
  }
  else {
    CFBooleanRef v5 = off_1001775D8[v4];
  }
  CFNumberRef v13 = @"Compression Type";
  uint64_t v14 = v5;
  v8[0] = (uint64_t)v11;
  v8[1] = 3LL;
  sub_1000FF160(v8, (CFMutableDictionaryRef *)&v9);
  *a2 = v9;
  uint64_t v9 = 0LL;
  sub_100006B34(&v9);
  for (uint64_t i = 5LL; i != -1; i -= 2LL)
    uint64_t result = sub_100006B94((const void **)&v11[i]);
  return result;
}

void sub_10003A43C(_Unwind_Exception *a1)
{
  for (uint64_t i = 40LL; i != -8; i -= 16LL)
    sub_100006B94((const void **)(v1 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10003A478()
{
  return @"Compression Info";
}

void sub_10003A488(void *a1)
{
}

uint64_t sub_10003A498(uint64_t a1)
{
  *(void *)a1 = &off_100177460;
  *(void *)(a1 + 56) = off_1001774B8;
  return a1;
}

void sub_10003A4EC(char *__p)
{
  *(void *)__int128 __p = &off_100177460;
  *((void *)__p + 7) = off_1001774B8;
  if (__p[55] < 0) {
    operator delete(*((void **)__p + 4));
  }
  if (__p[31] < 0) {
    operator delete(*((void **)__p + 1));
  }
  operator delete(__p);
}

const void **sub_10003A540@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    unsigned int v4 = *(const UInt8 **)(a1 + 32);
    CFIndex v5 = *(void *)(a1 + 40);
  }

  else
  {
    unsigned int v4 = (const UInt8 *)(a1 + 32);
    CFIndex v5 = *(unsigned __int8 *)(a1 + 55);
  }

  CFTypeRef cf = CFStringCreateWithBytes(kCFAllocatorDefault, v4, v5, 0x8000100u, 0);
  if (*(char *)(a1 + 31) < 0)
  {
    size_t v6 = *(const UInt8 **)(a1 + 8);
    CFIndex v7 = *(void *)(a1 + 16);
  }

  else
  {
    size_t v6 = (const UInt8 *)(a1 + 8);
    CFIndex v7 = *(unsigned __int8 *)(a1 + 31);
  }

  uint64_t v8 = CFStringCreateWithBytes(kCFAllocatorDefault, v6, v7, 0x8000100u, 0);
  CFTypeRef v13 = v8;
  v15[0] = @"Checksum Value";
  v15[1] = cf;
  if (cf)
  {
    CFRetain(cf);
    uint64_t v8 = v13;
  }

  v15[2] = @"Checksum Type";
  v15[3] = v8;
  if (v8) {
    CFRetain(v8);
  }
  v11[0] = (uint64_t)v15;
  v11[1] = 2LL;
  sub_1000FF160(v11, (CFMutableDictionaryRef *)&v12);
  *a2 = v12;
  CFNumberRef v12 = 0LL;
  sub_100006B34(&v12);
  for (uint64_t i = 3LL; i != -1; i -= 2LL)
    sub_100006B94((const void **)&v15[i]);
  sub_10003AF44(&v13);
  return sub_10003AF44(&cf);
}

void sub_10003A698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  size_t v6 = va_arg(va1, const void *);
  sub_100006B94(v4);
  sub_10003AF44((const void **)va);
  sub_10003AF44((const void **)va1);
  _Unwind_Resume(a1);
}

CFStringRef sub_10003A6EC()
{
  return @"Master Checksum Info";
}

void sub_10003A6F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = &off_100177460;
  *((void *)v1 + 7) = off_1001774B8;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
}

void sub_10003A750(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = &off_100177460;
  *((void *)v1 + 7) = off_1001774B8;
  if (v1[55] < 0) {
    operator delete(*((void **)v1 + 4));
  }
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  operator delete(v1);
}

uint64_t sub_10003A7AC(uint64_t a1)
{
  *(void *)a1 = off_1001774F0;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_100177548;
  sub_10003AF44((const void **)(a1 + 24));
  sub_10003AF44((const void **)(a1 + 16));
  sub_10003AF44((const void **)(a1 + 8));
  return a1;
}

void sub_10003A7F8(void *a1)
{
  *(void *)a1 = off_1001774F0;
  *((void *)a1 + 4) = off_100177548;
  sub_10003AF44((const void **)a1 + 3);
  sub_10003AF44((const void **)a1 + 2);
  sub_10003AF44((const void **)a1 + 1);
  operator delete(a1);
}

const void **sub_10003A844@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (const void *)a1[1];
  CFNumberRef v11 = @"UUID";
  CFNumberRef v12 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v8 = &v11;
  uint64_t v9 = 1LL;
  sub_1000FF160((uint64_t *)&v8, (CFMutableDictionaryRef *)&v10);
  sub_100006B94(&v12);
  CFIndex v5 = (const void *)a1[3];
  if (v5)
  {
    CFNumberRef v11 = @"Parent UUID";
    CFNumberRef v12 = v5;
    CFRetain(v5);
    uint64_t v8 = &v11;
    uint64_t v9 = 1LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100006B94(&v12);
  }

  size_t v6 = (const void *)a1[2];
  if (v6)
  {
    CFNumberRef v11 = @"Stable UUID";
    CFNumberRef v12 = v6;
    CFRetain(v6);
    uint64_t v8 = &v11;
    uint64_t v9 = 1LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v10, (uint64_t *)&v8);
    sub_100006B94(&v12);
  }

  *a2 = v10;
  char v10 = 0LL;
  return sub_100006B34(&v10);
}

void sub_10003A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

CFStringRef sub_10003A9B4()
{
  return @"Identity Info";
}

const void **sub_10003A9C0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_1001774F0;
  *((void *)v1 + 4) = off_100177548;
  sub_10003AF44((const void **)v1 + 3);
  sub_10003AF44((const void **)v1 + 2);
  return sub_10003AF44((const void **)v1 + 1);
}

void sub_10003AA0C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *(void *)uint64_t v1 = off_1001774F0;
  *((void *)v1 + 4) = off_100177548;
  sub_10003AF44((const void **)v1 + 3);
  sub_10003AF44((const void **)v1 + 2);
  sub_10003AF44((const void **)v1 + 1);
  operator delete(v1);
}

uint64_t sub_10003AA60(uint64_t a1)
{
  *(void *)a1 = off_100175D88;
  *(void *)(a1 + 24) = off_100175DD0;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_100175E18;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = off_100175E60;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100175EA8;
  *(void *)(a1 + 56) = off_100175EF0;
  *(void *)(a1 + 64) = off_100175F38;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = off_100175F98;
  *(void *)(a1 + 136) = off_100176008;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = off_100176078;
  *(void *)(a1 + 20crc32(0LL, 0LL, 0) = off_1001760E8;
  *(void *)(a1 + 256) = off_100176158;
  sub_10002B014((const void **)(a1 + 16));
  *(void *)(a1 + 256) = off_100176F68;
  *(void *)(a1 + 64) = off_100176FC0;
  sub_10003AF44((const void **)(a1 + 280));
  sub_10003AF44((const void **)(a1 + 272));
  sub_10003AF44((const void **)(a1 + 264));
  *(void *)(a1 + 20crc32(0LL, 0LL, 0) = &off_100176DC0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100176E18;
  *(void *)(a1 + 136) = off_100176A70;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = off_100176AC8;
  sub_10003AF44((const void **)(a1 + 160));
  return a1;
}

void sub_10003AB5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10003AA60(a1);
  operator delete(v1);
}

const void **sub_10003AB70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  CFNumberRef v11 = (uint64_t **)@"Image Format";
  uint64_t v12 = v4;
  sub_10003AFE8(a1, (CFStringRef *)&cf);
  CFTypeRef v13 = @"Format Description";
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_100039DD4((uint64_t)a1 + *(void *)(*a1 - 112LL), &v10);
  uint64_t v15 = @"Size Info";
  uint64_t v16 = v10;
  char v10 = 0LL;
  sub_10000D8A4(&v10);
  sub_10003A0D8((uint64_t)a1 + *(void *)(*a1 - 120LL), &v10);
  uint64_t v17 = @"Encryption Info";
  CFTypeID v18 = v10;
  char v10 = 0LL;
  sub_10000D8A4(&v10);
  sub_10003A308((uint64_t)a1 + *(void *)(*a1 - 128LL), &v10);
  unint64_t v19 = @"Compression Info";
  int v20 = v10;
  char v10 = 0LL;
  sub_10000D8A4(&v10);
  sub_10003A540((uint64_t)a1 + *(void *)(*a1 - 136LL), &v10);
  __int128 v21 = @"Master Checksum Info";
  __int128 v22 = v10;
  char v10 = 0LL;
  sub_10000D8A4(&v10);
  sub_10003A844((void *)((char *)a1 + *(void *)(*a1 - 144LL)), &v10);
  int v23 = @"Identity Info";
  int v24 = v10;
  char v10 = 0LL;
  sub_10000D8A4(&v10);
  __int128 v25 = (uint64_t *)&v11;
  uint64_t v26 = 7LL;
  sub_1000FF160((uint64_t *)&v25, (CFMutableDictionaryRef *)&v9);
  for (uint64_t i = 13LL; i != -1; i -= 2LL)
    sub_100006B94((const void **)&(&v11)[i]);
  sub_10003AF44(&cf);
  size_t v6 = (const void *)a1[2];
  if (v6)
  {
    __int128 v25 = (uint64_t *)@"Runs";
    uint64_t v26 = (uint64_t)v6;
    CFRetain(v6);
    CFNumberRef v11 = &v25;
    uint64_t v12 = 1LL;
    sub_1000FF118((CFMutableDictionaryRef *)&v9, (uint64_t *)&v11);
    sub_100006B94((const void **)&v26);
  }

  *a2 = v9;
  uint64_t v9 = 0LL;
  return sub_100006B34(&v9);
}

void sub_10003ADA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10003AE34(void *a1)
{
  return sub_10003AA60((uint64_t)a1 + *(void *)(*a1 - 24LL));
}

void sub_10003AE44(void *a1)
{
  uint64_t v1 = (void *)sub_10003AA60((uint64_t)a1 + *(void *)(*a1 - 24LL));
  operator delete(v1);
}

uint64_t sub_10003AE64(void *a1)
{
  return sub_10003AA60((uint64_t)a1 + *(void *)(*a1 - 32LL));
}

void sub_10003AE74(void *a1)
{
  uint64_t v1 = (void *)sub_10003AA60((uint64_t)a1 + *(void *)(*a1 - 32LL));
  operator delete(v1);
}

const void **sub_10003AE94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003AB70((void *)((char *)a1 + *(void *)(*a1 - 40LL)), a2);
}

char *sub_10003AEA4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_10003AEB4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_10003AEC4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_10003AED4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_10003AEE4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_10003AEF4(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_10003AF04(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_10003AF14(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

char *sub_10003AF24(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 32LL);
}

char *sub_10003AF34(void *a1)
{
  return (char *)a1 + *(void *)(*a1 - 40LL);
}

const void **sub_10003AF44(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_10003AF74(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_100177250[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 90)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  CFIndex v5 = &dword_100177250[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

const void **sub_10003AFB8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFStringRef sub_10003AFE8@<X0>(void *a1@<X0>, CFStringRef *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 128LL) + 8);
  if (v3)
  {
    if (v3 > 4) {
      uint64_t v4 = @"raw";
    }
    else {
      uint64_t v4 = off_1001775D8[v3 - 1];
    }
    CFStringRef result = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%s (%@)", "UDIF read-only compressed image", v4);
  }

  else
  {
    CFStringRef result = @"UDIF uncompressed read-only image";
  }

  *a2 = result;
  return result;
}

const void **sub_10003B07C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10003B0AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10003B100((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10003B0E8(_Unwind_Exception *a1)
{
}

_OWORD *sub_10003B100(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    CFIndex v5 = (uint64_t **)result;
    size_t v6 = (uint64_t *)result + 1;
    do
    {
      CFStringRef result = sub_1000222B4(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      CFIndex v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          CFIndex v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t sub_10003B1A4()
{
  return 0LL;
}

uint64_t sub_10003B1AC()
{
  return 0LL;
}

uint64_t sub_10003B1BC()
{
  return 0LL;
}

uint64_t sub_10003B1C4()
{
  return 0LL;
}

uint64_t sub_10003B1CC()
{
  return 0LL;
}

uint64_t sub_10003B1D4()
{
  return 0LL;
}

uint64_t sub_10003B1DC()
{
  return 0LL;
}

uint64_t sub_10003B1E4()
{
  return 0LL;
}

uint64_t sub_10003B1EC()
{
  return 0LL;
}

uint64_t sub_10003B1F4()
{
  return 0LL;
}

uint64_t sub_10003B1FC()
{
  return 0LL;
}

uint64_t sub_10003B204()
{
  return 0LL;
}

uint64_t sub_10003B20C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 24) == *(void *)(result + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }

  uint64_t v3 = **(void **)result + *(void *)(result + 32);
  if (*(void *)(result + 56)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(*(void *)result + 8LL);
    if (!v5) {
      goto LABEL_12;
    }
LABEL_10:
    size_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    goto LABEL_12;
  }

  uint64_t v5 = *(void *)(result + 64);
  if (v5) {
    goto LABEL_10;
  }
LABEL_12:
  *(void *)a3 = v3;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  unint64_t v8 = *(void *)(result + 32);
  unint64_t v9 = *(void *)(*(void *)result + 16LL) - v8;
  if (v9 >= *(void *)(result + 24) - *(void *)(result + 16)) {
    unint64_t v9 = *(void *)(result + 24) - *(void *)(result + 16);
  }
  unint64_t v10 = **(void **)(result + 8);
  BOOL v11 = v10 >= v8;
  unint64_t v12 = v10 - v8;
  if (!v11) {
    unint64_t v12 = 0LL;
  }
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = v12;
  return result;
}

uint64_t sub_10003B2A4( uint64_t a1, void *a2, unint64_t **a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v8 = 0LL;
  *(void *)a1 = *a2;
  unint64_t v9 = *a3;
  *(void *)(a1 + 56) = 0LL;
  uint64_t v10 = a1 + 56;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v9;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = a6;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = a7;
  *(void *)(a1 + 64) = 0LL;
  if (a4 < a5)
  {
    unint64_t v8 = **a3;
    if (v8 >= a6) {
      unint64_t v8 = a6;
    }
  }

  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v8;
  sub_10003B20C(a1, 1, (uint64_t)v15);
  sub_1000198A4(v10, v15);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v15[1];
  BOOL v11 = (std::__shared_weak_count *)*((void *)&v15[0] + 1);
  if (*((void *)&v15[0] + 1))
  {
    unint64_t v12 = (unint64_t *)(*((void *)&v15[0] + 1) + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  return a1;
}

uint64_t sub_10003B36C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(*(void *)a1 + 16LL) + v2 - *(void *)(a1 + 32);
    uint64_t v6 = *(void *)a1 + 24LL;
    *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 0LL;
    *(void *)(a1 + 4crc32(0LL, 0LL, 0) = 0LL;
    *(void *)a1 = v6;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4 + 8;
    *(void *)(a1 + 16) = v5;
  }

  sub_10003B20C(a1, v2 != v3, (uint64_t)v11);
  sub_1000198A4(a1 + 56, v11);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v11[1];
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v11[0] + 1);
  if (*((void *)&v11[0] + 1))
  {
    unint64_t v8 = (unint64_t *)(*((void *)&v11[0] + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  return a1;
}

uint64_t sub_10003B428(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void *)(a1 + 24) - v3;
    if (*(void *)(*(void *)a1 + 16LL) - *(void *)(a1 + 32) < v4) {
      unint64_t v4 = *(void *)(*(void *)a1 + 16LL) - *(void *)(a1 + 32);
    }
    BOOL v5 = v4 <= a2;
    if (v4 <= a2)
    {
      int v6 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 8) + 8LL;
      uint64_t v8 = *(void *)a1 + 24LL;
      do
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        if (v6)
        {
          *(void *)(v7 - _Block_object_dispose(va, 8) = *(void *)(a1 + 40) + v4;
          uint64_t v3 = *(void *)(a1 + 16);
        }

        *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 0LL;
        *(void *)(a1 + 4crc32(0LL, 0LL, 0) = 0LL;
        v3 += v4;
        *(void *)(a1 + 16) = v3;
        a2 -= v4;
        if (!a2) {
          break;
        }
        unint64_t v4 = *(void *)(v8 + 16);
        if (v4 >= *(void *)(a1 + 24) - v3) {
          unint64_t v4 = *(void *)(a1 + 24) - v3;
        }
        v7 += 8LL;
        v8 += 24LL;
        BOOL v11 = v4 > a2;
        if (v4 >= a2) {
          unint64_t v4 = a2;
        }
      }

      while (!v11);
      *(void *)a1 = v10;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v9;
    }
  }

  else
  {
    BOOL v5 = 0;
  }

  unint64_t v12 = *(void *)(a1 + 40) + a2;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v12;
  if (v12 && *(_BYTE *)(a1 + 48)) {
    **(void **)(a1 + _Block_object_dispose(va, 8) = v12;
  }
  *(void *)(a1 + 16) += a2;
  *(void *)(a1 + 32) += a2;
  sub_10003B20C(a1, v5, (uint64_t)v17);
  sub_1000198A4(a1 + 56, v17);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v17[1];
  unint64_t v13 = (std::__shared_weak_count *)*((void *)&v17[0] + 1);
  if (*((void *)&v17[0] + 1))
  {
    CFTypeRef v14 = (unint64_t *)(*((void *)&v17[0] + 1) + 8LL);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  return a1;
}

uint64_t sub_10003B58C(uint64_t a1, unint64_t a2)
{
  char v3 = 0;
  if (a2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 8) + 8LL;
    uint64_t v8 = *(void *)a1 + 24LL;
    while (1)
    {
      unint64_t v9 = v6 - v5;
      if (*(void *)(v8 - 8) - v4 < v6 - v5) {
        unint64_t v9 = *(void *)(v8 - 8) - v4;
      }
      unint64_t v10 = *(void *)(v7 - 8);
      BOOL v11 = v10 >= v4;
      unint64_t v12 = v10 - v4;
      unint64_t v13 = v11 ? v12 : 0LL;
      unint64_t v14 = v13 >= v9 ? v9 : v13;
      if (v14 >= a2 && (v9 > v13 || a2 != v14)) {
        break;
      }
      unint64_t v4 = 0LL;
      v5 += v9;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      *(void *)(a1 + 16) = v5;
      *(void *)a1 = v8;
      if (a2 >= v14) {
        unint64_t v16 = a2 - v14;
      }
      else {
        unint64_t v16 = 0LL;
      }
      v7 += 8LL;
      *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 0LL;
      *(void *)(a1 + 4crc32(0LL, 0LL, 0) = 0LL;
      char v3 = 1;
      v8 += 24LL;
      BOOL v11 = v14 >= a2;
      a2 = v16;
      if (v11) {
        goto LABEL_22;
      }
    }

    unint64_t v17 = *(void *)(a1 + 40) + a2;
    *(void *)(a1 + 16) = v5 + a2;
    *(void *)(a1 + 3sub_1000296D8(&v5, 2) = v4 + a2;
    *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v17;
  }

void *sub_10003B6C0(void *result)
{
  uint64_t v1 = result[2];
  if (v1 != result[3])
  {
    uint64_t v2 = result[4];
    char v3 = (void *)result[1];
    unint64_t v4 = (uint64_t *)(*result + 16LL);
    do
    {
      *v3++ = v2;
      uint64_t v5 = *v4;
      v4 += 3;
      uint64_t v6 = result[3];
      unint64_t v7 = v5 - v2;
      if (v7 >= v6 - v1) {
        unint64_t v7 = v6 - v1;
      }
      v1 += v7;
      uint64_t v2 = 0LL;
    }

    while (v1 != v6);
  }

  return result;
}

void sub_10003B708(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[6];
  if (sub_10003B85C((uint64_t)a1, a2))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  else
  {
    sub_10003DAF4((uint64_t)(a1 + 7));
    uint64_t v7 = a1[14];
    uint64_t v8 = (std::__shared_weak_count *)a1[15];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      unint64_t v11 = a1[16];
      uint64_t v12 = a1[18];
      unint64_t v13 = *(void *)(a2 + 144) - v12;
      if (v13 >= v11) {
        unint64_t v13 = a1[16];
      }
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      char v15 = *(_BYTE *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + _Block_object_dispose(va, 8) = v8;
      do
        unint64_t v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      *(void *)(a3 + 16) = v13;
      *(void *)(a3 + 24) = v12;
      *(void *)(a3 + 3sub_1000296D8(&v5, 2) = v11;
      *(_BYTE *)(a3 + 4crc32(0LL, 0LL, 0) = v15;
      do
        unint64_t v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }

      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    else
    {
      unint64_t v19 = a1[16];
      uint64_t v20 = a1[18];
      unint64_t v21 = *(void *)(a2 + 144) - v20;
      if (v21 >= v19) {
        unint64_t v21 = a1[16];
      }
      char v22 = *(_BYTE *)(v6 + 200);
      *(void *)a3 = v7;
      *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v20;
      *(void *)(a3 + 3sub_1000296D8(&v5, 2) = v19;
      *(_BYTE *)(a3 + 4crc32(0LL, 0LL, 0) = v22;
    }
  }

BOOL sub_10003B85C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2 != *(void **)(a2 + 48)) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 152)) {
    BOOL v4 = *(_BYTE *)(a2 + 152) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return *(void *)(a1 + 144) == *(void *)(a2 + 144);
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[27];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  uint64_t v8 = v2[33];
  uint64_t v9 = v2[34];
  uint64_t v10 = v2[35];
  unint64_t v11 = (std::__shared_weak_count *)v2[41];
  if (v11)
  {
    uint64_t v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v14 = *(void *)(a1 + 56);
  BOOL v15 = v14 == v8 && *(void *)(a1 + 64) == v9 && *(void *)(a1 + 72) == v10;
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  if (v17 == v8 && v16 == v9)
  {
    int v20 = v15 ^ (*(void *)(a2 + 72) != v10);
    if (v14 != v8 || v20 == 0) {
      goto LABEL_34;
    }
  }

  else
  {
    char v19 = v14 != v17 || v15;
    if ((v19 & 1) != 0) {
      goto LABEL_34;
    }
  }

  if (*(void *)(a1 + 64) == v16 && *(void *)(a1 + 72) == *(void *)(a2 + 72))
  {
    BOOL v3 = *(void *)(a1 + 144) == *(void *)(a2 + 144);
    goto LABEL_35;
  }

LABEL_34:
  BOOL v3 = 0LL;
LABEL_35:
  if (v11)
  {
    char v22 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  if (v5)
  {
    int v24 = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v3;
}

        while (1)
        {
          uint64_t v26 = *v4;
          if (atomic_load(v9)) {
            break;
          }
          uint64_t v28 = __ldaxr(v4);
          if (v28 != v26) {
            goto LABEL_39;
          }
          if (!__stlxr(0, v4))
          {
            LODWORD(v17) = v26 >> 1;
            LODWORD(v1_Block_object_dispose(va, 8) = v26 & 1;
            if (v26 > 1) {
              goto LABEL_24;
            }
            break;
          }
        }
      }

  std::mutex::unlock(v4);
  return v15;
}

double sub_10003BA04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_100019A88(a2, a1 + 208).n128_u64[0];
  return result;
}

uint64_t sub_10003BA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)a2;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = v7 - *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  __int128 v11 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 56);
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = v12;
  if (v12)
  {
    unint64_t v13 = (unint64_t *)(v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)a3;
  *(void *)(a1 + 104) = *(void *)(a3 + 8);
  __int128 v15 = *(_OWORD *)(a3 + 16);
  __int128 v16 = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a3 + 48);
  *(_OWORD *)(a1 + sub_100006224(v50 + 112) = v15;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v16;
  uint64_t v17 = *(void *)(a3 + 64);
  *(void *)(a1 + 15sub_1000296D8(&v5, 2) = *(void *)(a3 + 56);
  *(void *)(a1 + 16crc32(0LL, 0LL, 0) = v17;
  if (v17)
  {
    unint64_t v18 = (unint64_t *)(v17 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 19sub_1000296D8(&v5, 2) = a5;
  *(_BYTE *)(a1 + 20crc32(0LL, 0LL, 0) = a6;
  sub_10003D55C(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10003D55C(a1 + 368, a1, v8, 1);
  return a1;
}

void sub_10003BB28(_Unwind_Exception *a1)
{
}

uint64_t sub_10003BB64( uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t **a4, unint64_t **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *a3;
  if (*a2 == *a3)
  {
    unint64_t v14 = 0LL;
  }

  else
  {
    unint64_t v14 = 0LL;
    do
    {
      __int128 v15 = *(std::__shared_weak_count **)(v12 + 8);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        uint64_t v18 = *(void *)(v12 + 16);
        do
          unint64_t v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }

      else
      {
        uint64_t v18 = *(void *)(v12 + 16);
      }

      v14 += v18;
      v12 += 24LL;
    }

    while (v12 != v13);
  }

  *(void *)a1 = v14;
  sub_10003B2A4(a1 + 8, a2, a4, 0LL, v14, 0LL, 1);
  sub_10003B2A4(a1 + 96, a3, a5, *(void *)a1, *(void *)a1, 0LL, 1);
  *(void *)(a1 + 184) = a6;
  *(void *)(a1 + 19sub_1000296D8(&v5, 2) = a7;
  *(_BYTE *)(a1 + 20crc32(0LL, 0LL, 0) = 0;
  sub_10003D55C(a1 + 208, a1, (uint64_t *)(a1 + 96), 0);
  sub_10003D55C(a1 + 368, a1, (uint64_t *)(a1 + 8), 1);
  return a1;
}

void sub_10003BCC8(_Unwind_Exception *a1)
{
}

double sub_10003BD04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_100019A88(a2, a1 + 368).n128_u64[0];
  return result;
}

void sub_10003BD10( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 216);
  *(void *)&__int128 v141 = *(void *)(a1 + 208);
  *((void *)&v141 + 1) = v10;
  if (v10)
  {
    __int128 v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v142[0] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
  uint64_t v13 = (__int128 *)(a1 + 264);
  __int128 v144 = *(_OWORD *)(a1 + 264);
  __int128 v14 = *(_OWORD *)(a1 + 296);
  __int128 v145 = *(_OWORD *)(a1 + 280);
  uint64_t v143 = *(void *)(a1 + 256);
  char v147 = *(_BYTE *)(a1 + 312);
  __int128 v146 = v14;
  __int128 v15 = *(std::__shared_weak_count **)(a1 + 328);
  uint64_t v148 = *(void *)(a1 + 320);
  uint64_t v149 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }

  __n128 v150 = *(__n128 *)(a1 + 336);
  unint64_t v151 = *(void *)(a1 + 352);
  char v152 = *(_BYTE *)(a1 + 360);
  BOOL v18 = sub_10003B85C(a2, (uint64_t)&v141);
  if (v15)
  {
    unint64_t v19 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  unint64_t v21 = (std::__shared_weak_count *)*((void *)&v141 + 1);
  if (*((void *)&v141 + 1))
  {
    char v22 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  int v24 = (_OWORD *)(a1 + 224);
  unint64_t v25 = (__int128 *)(a1 + 280);
  uint64_t v125 = (__n128 *)(a1 + 336);
  uint64_t v26 = (uint64_t *)(a1 + 352);
  if (v18)
  {
    uint64_t v27 = *(void *)(a1 + 216);
    *(void *)&__int128 v141 = *(void *)(a1 + 208);
    *((void *)&v141 + 1) = v27;
    if (v27)
    {
      uint64_t v28 = (unint64_t *)(v27 + 8);
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }

    v142[0] = *v24;
    *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
    __int128 v144 = *v13;
    __int128 v30 = *(_OWORD *)(a1 + 296);
    __int128 v145 = *v25;
    uint64_t v143 = *(void *)(a1 + 256);
    __int128 v146 = v30;
    char v147 = *(_BYTE *)(a1 + 312);
    CFRange v31 = *(std::__shared_weak_count **)(a1 + 328);
    uint64_t v148 = *(void *)(a1 + 320);
    uint64_t v149 = v31;
    if (v31)
    {
      uint64_t v32 = (unint64_t *)&v31->__shared_owners_;
      do
        unint64_t v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }

    __n128 v150 = *v125;
    unint64_t v151 = *v26;
    char v152 = *(_BYTE *)(a1 + 360);
    BOOL v34 = *(std::__shared_weak_count **)(a1 + 216);
    uint64_t v128 = *(void *)(a1 + 208);
    unint64_t v129 = v34;
    if (v34)
    {
      uint64_t v35 = (unint64_t *)&v34->__shared_owners_;
      do
        unint64_t v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }

    v130[0] = *v24;
    *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
    __int128 v132 = *v13;
    __int128 v37 = *(_OWORD *)(a1 + 296);
    __int128 v133 = *v25;
    uint64_t v131 = *(void *)(a1 + 256);
    __int128 v134 = v37;
    char v135 = *(_BYTE *)(a1 + 312);
    uint64_t v38 = *(std::__shared_weak_count **)(a1 + 328);
    uint64_t v136 = *(void *)(a1 + 320);
    char v137 = v38;
    if (v38)
    {
      uint64_t v39 = (unint64_t *)&v38->__shared_owners_;
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    __n128 v138 = *v125;
    unint64_t v139 = *v26;
    char v140 = *(_BYTE *)(a1 + 360);
    __n128 v41 = sub_10003DB70(a5, (uint64_t)&v141, (uint64_t)&v128);
    unint64_t v42 = v137;
    if (v137)
    {
      uint64_t v43 = (unint64_t *)&v137->__shared_owners_;
      do
        unint64_t v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    char v45 = v129;
    if (v129)
    {
      int v46 = (unint64_t *)&v129->__shared_owners_;
      do
        unint64_t v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v45->__on_zero_shared)(v45, v41);
        std::__shared_weak_count::__release_weak(v45);
      }
    }

    int v48 = v149;
    if (v149)
    {
      __uint32_t v49 = (unint64_t *)&v149->__shared_owners_;
      do
        unint64_t v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v41);
        std::__shared_weak_count::__release_weak(v48);
      }
    }

    int v51 = (std::__shared_weak_count *)*((void *)&v141 + 1);
    if (*((void *)&v141 + 1))
    {
      size_t v52 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
LABEL_144:
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v41);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }

  else
  {
    uint64_t v54 = *(void *)(a1 + 192);
    if (v54 + *(void *)(a1 + 184) >= a3) {
      unint64_t v55 = a3;
    }
    else {
      unint64_t v55 = v54 + *(void *)(a1 + 184);
    }
    if (v55 >= *(void *)(a2 + 144))
    {
      uint64_t v80 = *(void *)(a2 + 8);
      *(void *)&__int128 v141 = *(void *)a2;
      *((void *)&v141 + 1) = v80;
      if (v80)
      {
        int v81 = (unint64_t *)(v80 + 8);
        do
          unint64_t v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }

      v142[0] = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a2 + 25);
      uint64_t v143 = *(void *)(a2 + 48);
      __int128 v144 = *(_OWORD *)(a2 + 56);
      __int128 v145 = *(_OWORD *)(a2 + 72);
      __int128 v146 = *(_OWORD *)(a2 + 88);
      char v147 = *(_BYTE *)(a2 + 104);
      __int16 v83 = *(std::__shared_weak_count **)(a2 + 120);
      uint64_t v148 = *(void *)(a2 + 112);
      uint64_t v149 = v83;
      if (v83)
      {
        __int128 v84 = (unint64_t *)&v83->__shared_owners_;
        do
          unint64_t v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }

      __n128 v150 = *(__n128 *)(a2 + 128);
      unint64_t v151 = *(void *)(a2 + 144);
      char v152 = *(_BYTE *)(a2 + 152);
      if (a4)
      {
        unint64_t v86 = sub_10003C72C(&v144, a1 + 96);
        unint64_t v87 = v86;
        if (v86 >= a4) {
          unint64_t v88 = a4;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88) {
          sub_10003C884((uint64_t)&v141, v88);
        }
        if (v87 < a4) {
          sub_10003CA5C((uint64_t)&v141, a4 - v88);
        }
      }

      uint64_t v89 = *(std::__shared_weak_count **)(a1 + 216);
      uint64_t v128 = *(void *)(a1 + 208);
      unint64_t v129 = v89;
      if (v89)
      {
        size_t v90 = (unint64_t *)&v89->__shared_owners_;
        do
          unint64_t v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }

      v130[0] = *v24;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
      __int128 v132 = *v13;
      __int128 v92 = *(_OWORD *)(a1 + 296);
      __int128 v133 = *v25;
      uint64_t v131 = *(void *)(a1 + 256);
      __int128 v134 = v92;
      char v135 = *(_BYTE *)(a1 + 312);
      int v93 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v136 = *(void *)(a1 + 320);
      char v137 = v93;
      if (v93)
      {
        int v94 = (unint64_t *)&v93->__shared_owners_;
        do
          unint64_t v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }

      __n128 v138 = *v125;
      char v140 = *(_BYTE *)(a1 + 360);
      unint64_t v139 = v55;
      sub_10003B708(&v141, (uint64_t)&v128, (uint64_t)&v126);
      __int128 v96 = v126;
      __int128 v126 = 0uLL;
      size_t v97 = (std::__shared_weak_count *)*((void *)&v141 + 1);
      __int128 v141 = v96;
      if (v97)
      {
        __int16 v98 = (unint64_t *)&v97->__shared_owners_;
        do
          unint64_t v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }

      v142[0] = v127[0];
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)((char *)v127 + 9);
      __int16 v100 = (std::__shared_weak_count *)*((void *)&v126 + 1);
      if (*((void *)&v126 + 1))
      {
        CFIndex v101 = (unint64_t *)(*((void *)&v126 + 1) + 8LL);
        do
          unint64_t v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }

      uint64_t v103 = *((void *)&v141 + 1);
      *(void *)a5 = v141;
      *(void *)(a5 + _Block_object_dispose(va, 8) = v103;
      if (v103)
      {
        unint64_t v104 = (unint64_t *)(v103 + 8);
        do
          unint64_t v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }

      *(_OWORD *)(a5 + 16) = v142[0];
      *(_OWORD *)(a5 + 25) = *(_OWORD *)((char *)v142 + 9);
      *(_OWORD *)(a5 + 56) = v144;
      __int128 v106 = v146;
      *(_OWORD *)(a5 + 7sub_1000296D8(&v5, 2) = v145;
      *(void *)(a5 + 4_Block_object_dispose(va, 8) = v143;
      *(_OWORD *)(a5 + 8_Block_object_dispose(va, 8) = v106;
      *(_BYTE *)(a5 + 104) = v147;
      uint64_t v107 = v149;
      *(void *)(a5 + sub_100006224(v50 + 112) = v148;
      *(void *)(a5 + 12crc32(0LL, 0LL, 0) = v107;
      if (v107)
      {
        size_t v108 = (unint64_t *)&v107->__shared_owners_;
        do
          unint64_t v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }

      *(__n128 *)(a5 + 12_Block_object_dispose(va, 8) = v150;
      *(void *)(a5 + 144) = v151;
      *(_BYTE *)(a5 + 15sub_1000296D8(&v5, 2) = v152;
      uint64_t v110 = v129;
      *(void *)(a5 + 16crc32(0LL, 0LL, 0) = v128;
      *(void *)(a5 + 16_Block_object_dispose(va, 8) = v110;
      if (v110)
      {
        unint64_t v111 = (unint64_t *)&v110->__shared_owners_;
        do
          unint64_t v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }

      *(_OWORD *)(a5 + 176) = v130[0];
      *(_OWORD *)(a5 + 185) = *(_OWORD *)((char *)v130 + 9);
      *(_OWORD *)(a5 + 216) = v132;
      __int128 v113 = v134;
      *(_OWORD *)(a5 + 23sub_1000296D8(&v5, 2) = v133;
      *(void *)(a5 + 20_Block_object_dispose(va, 8) = v131;
      *(_OWORD *)(a5 + 24_Block_object_dispose(va, 8) = v113;
      *(_BYTE *)(a5 + 2sub_100006224(v1 + 64) = v135;
      __int16 v114 = v137;
      *(void *)(a5 + 27sub_1000296D8(&v5, 2) = v136;
      *(void *)(a5 + 28crc32(0LL, 0LL, 0) = v114;
      if (v114)
      {
        char v115 = (unint64_t *)&v114->__shared_owners_;
        do
          unint64_t v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
        __n128 v41 = v138;
        *(__n128 *)(a5 + 28_Block_object_dispose(va, 8) = v138;
        *(void *)(a5 + 304) = v139;
        *(_BYTE *)(a5 + 31sub_1000296D8(&v5, 2) = v140;
        do
          unint64_t v117 = __ldaxr(v115);
        while (__stlxr(v117 - 1, v115));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }

      else
      {
        __n128 v41 = v138;
        *(__n128 *)(a5 + 28_Block_object_dispose(va, 8) = v138;
        *(void *)(a5 + 304) = v139;
        *(_BYTE *)(a5 + 31sub_1000296D8(&v5, 2) = v140;
      }

      v118 = v129;
      if (v129)
      {
        unint64_t v119 = (unint64_t *)&v129->__shared_owners_;
        do
          unint64_t v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }

      int v121 = v149;
      if (v149)
      {
        unsigned int v122 = (unint64_t *)&v149->__shared_owners_;
        do
          unint64_t v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }

      int v51 = (std::__shared_weak_count *)*((void *)&v141 + 1);
      if (*((void *)&v141 + 1))
      {
        uint64_t v124 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
        do
          unint64_t v53 = __ldaxr(v124);
        while (__stlxr(v53 - 1, v124));
        goto LABEL_144;
      }
    }

    else
    {
      uint64_t v56 = *(void *)(a1 + 216);
      *(void *)&__int128 v141 = *(void *)(a1 + 208);
      *((void *)&v141 + 1) = v56;
      if (v56)
      {
        size_t v57 = (unint64_t *)(v56 + 8);
        do
          unint64_t v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }

      v142[0] = *v24;
      *(_OWORD *)((char *)v142 + 9) = *(_OWORD *)(a1 + 233);
      __int128 v144 = *v13;
      __int128 v59 = *(_OWORD *)(a1 + 296);
      __int128 v145 = *v25;
      uint64_t v143 = *(void *)(a1 + 256);
      __int128 v146 = v59;
      char v147 = *(_BYTE *)(a1 + 312);
      uint64_t v60 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v148 = *(void *)(a1 + 320);
      uint64_t v149 = v60;
      if (v60)
      {
        uint64_t v61 = (unint64_t *)&v60->__shared_owners_;
        do
          unint64_t v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }

      __n128 v150 = *v125;
      unint64_t v151 = *v26;
      char v152 = *(_BYTE *)(a1 + 360);
      size_t v63 = *(std::__shared_weak_count **)(a1 + 216);
      uint64_t v128 = *(void *)(a1 + 208);
      unint64_t v129 = v63;
      if (v63)
      {
        char v64 = (unint64_t *)&v63->__shared_owners_;
        do
          unint64_t v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }

      v130[0] = *v24;
      *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)(a1 + 233);
      __int128 v132 = *v13;
      __int128 v66 = *(_OWORD *)(a1 + 296);
      __int128 v133 = *v25;
      uint64_t v131 = *(void *)(a1 + 256);
      __int128 v134 = v66;
      char v135 = *(_BYTE *)(a1 + 312);
      uint64_t v67 = *(std::__shared_weak_count **)(a1 + 328);
      uint64_t v136 = *(void *)(a1 + 320);
      char v137 = v67;
      if (v67)
      {
        uint64_t v68 = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }

      __n128 v138 = *v125;
      unint64_t v139 = *v26;
      char v140 = *(_BYTE *)(a1 + 360);
      __n128 v41 = sub_10003DB70(a5, (uint64_t)&v141, (uint64_t)&v128);
      __int16 v70 = v137;
      if (v137)
      {
        char v71 = (unint64_t *)&v137->__shared_owners_;
        do
          unint64_t v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v41);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

      uint64_t v73 = v129;
      if (v129)
      {
        uint64_t v74 = (unint64_t *)&v129->__shared_owners_;
        do
          unint64_t v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v73->__on_zero_shared)(v73, v41);
          std::__shared_weak_count::__release_weak(v73);
        }
      }

      uint64_t v76 = v149;
      if (v149)
      {
        uint64_t v77 = (unint64_t *)&v149->__shared_owners_;
        do
          unint64_t v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v41);
          std::__shared_weak_count::__release_weak(v76);
        }
      }

      int v51 = (std::__shared_weak_count *)*((void *)&v141 + 1);
      if (*((void *)&v141 + 1))
      {
        uint64_t v79 = (unint64_t *)(*((void *)&v141 + 1) + 8LL);
        do
          unint64_t v53 = __ldaxr(v79);
        while (__stlxr(v53 - 1, v79));
        goto LABEL_144;
      }
    }
  }

void sub_10003C6E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
}

uint64_t sub_10003C72C(__int128 *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 1;
  unint64_t v3 = *(void *)(a2 + 16);
  if (*((void *)a1 + 2) > v3) {
    return 0LL;
  }
  __int128 v6 = *v2;
  __int128 v7 = a1[2];
  __int128 v15 = *a1;
  __int128 v16 = v6;
  __int128 v17 = v7;
  char v18 = *((_BYTE *)a1 + 48);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 8);
  uint64_t v19 = *((void *)a1 + 7);
  unint64_t v20 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    unint64_t v3 = *(void *)(a2 + 16);
  }

  __int128 v21 = *(__int128 *)((char *)a1 + 72);
  if ((unint64_t)v16 >= v3)
  {
    uint64_t v4 = 0LL;
    if (!v8) {
      return v4;
    }
    goto LABEL_19;
  }

  uint64_t v4 = 0LL;
  do
  {
    sub_10003DAF4((uint64_t)&v15);
    if (*(void *)(a2 + 16) - *(void *)v2 >= *((void *)&v21 + 1)) {
      unint64_t v11 = *((void *)&v21 + 1);
    }
    else {
      unint64_t v11 = *(void *)(a2 + 16) - *(void *)v2;
    }
    if (v11) {
      sub_10003B58C((uint64_t)&v15, v11);
    }
    else {
      sub_10003B36C((uint64_t)&v15);
    }
    v4 += v11;
  }

  while ((unint64_t)v16 < *(void *)(a2 + 16));
  uint64_t v8 = v20;
  if (v20)
  {
LABEL_19:
    unint64_t v12 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v4;
}

void sub_10003C870(_Unwind_Exception *a1)
{
}

uint64_t sub_10003C884(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_10003B58C(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    uint64_t v20 = *(void *)(v3 + 208);
    __int128 v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    v22[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v23 = *(void *)(v3 + 256);
    __int128 v24 = *(_OWORD *)(v3 + 264);
    char v27 = *(_BYTE *)(v3 + 312);
    __int128 v25 = *(_OWORD *)(v3 + 280);
    __int128 v26 = *(_OWORD *)(v3 + 296);
    __int128 v7 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v28 = *(void *)(v3 + 320);
    unint64_t v29 = v7;
    if (v7)
    {
      uint64_t v8 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    __int128 v30 = *(_OWORD *)(v3 + 336);
    uint64_t v31 = *(void *)(v3 + 352);
    char v32 = *(_BYTE *)(v3 + 360);
    sub_10003B708((void *)a1, (uint64_t)&v20, (uint64_t)&v33);
    sub_1000198A4(a1, &v33);
    *(_OWORD *)(a1 + 16) = v34[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v34 + 9);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      unint64_t v11 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    unint64_t v13 = v29;
    if (v29)
    {
      __int128 v14 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    __int128 v16 = v21;
    if (v21)
    {
      __int128 v17 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  return a1;
}

void sub_10003CA40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003CA5C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 144) += a2;
  sub_10003B428(a1 + 56, a2);
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 216);
    uint64_t v20 = *(void *)(v3 + 208);
    __int128 v21 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    v22[0] = *(_OWORD *)(v3 + 224);
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)(v3 + 233);
    uint64_t v23 = *(void *)(v3 + 256);
    __int128 v24 = *(_OWORD *)(v3 + 264);
    char v27 = *(_BYTE *)(v3 + 312);
    __int128 v25 = *(_OWORD *)(v3 + 280);
    __int128 v26 = *(_OWORD *)(v3 + 296);
    __int128 v7 = *(std::__shared_weak_count **)(v3 + 328);
    uint64_t v28 = *(void *)(v3 + 320);
    unint64_t v29 = v7;
    if (v7)
    {
      uint64_t v8 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    __int128 v30 = *(_OWORD *)(v3 + 336);
    uint64_t v31 = *(void *)(v3 + 352);
    char v32 = *(_BYTE *)(v3 + 360);
    sub_10003B708((void *)a1, (uint64_t)&v20, (uint64_t)&v33);
    sub_1000198A4(a1, &v33);
    *(_OWORD *)(a1 + 16) = v34[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v34 + 9);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      unint64_t v11 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    unint64_t v13 = v29;
    if (v29)
    {
      __int128 v14 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    __int128 v16 = v21;
    if (v21)
    {
      __int128 v17 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  return a1;
}

void sub_10003CC18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003CC34(uint64_t a1)
{
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 216);
    uint64_t v19 = *(void *)(v2 + 208);
    uint64_t v20 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    v21[0] = *(_OWORD *)(v2 + 224);
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v2 + 233);
    uint64_t v22 = *(void *)(v2 + 256);
    __int128 v23 = *(_OWORD *)(v2 + 264);
    char v26 = *(_BYTE *)(v2 + 312);
    __int128 v24 = *(_OWORD *)(v2 + 280);
    __int128 v25 = *(_OWORD *)(v2 + 296);
    unint64_t v6 = *(std::__shared_weak_count **)(v2 + 328);
    uint64_t v27 = *(void *)(v2 + 320);
    uint64_t v28 = v6;
    if (v6)
    {
      __int128 v7 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }

    __int128 v29 = *(_OWORD *)(v2 + 336);
    uint64_t v30 = *(void *)(v2 + 352);
    char v31 = *(_BYTE *)(v2 + 360);
    sub_10003B708((void *)a1, (uint64_t)&v19, (uint64_t)&v32);
    sub_1000198A4(a1, &v32);
    *(_OWORD *)(a1 + 16) = v33[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v33 + 9);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1))
    {
      unint64_t v10 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    unint64_t v12 = v28;
    if (v28)
    {
      unint64_t v13 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    unint64_t v15 = v20;
    if (v20)
    {
      __int128 v16 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

  return a1;
}

void sub_10003CDE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10003CE00(uint64_t a1)
{
  return *(void *)(a1 + 80) == *(void *)(a1 + 72);
}

void sub_10003CE10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 24);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v6 >= (unint64_t)(v7 & 1) + *(void *)(a2 + 8) - 1)
  {
    sub_100019A88(a4, a3);
    sub_100019A88(a4 + 160, a3);
    return;
  }

  unint64_t v10 = *(void *)(a1 + 16) + v6;
  char v11 = v7 & 2;
  unint64_t v12 = *(void *)a2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = *(void *)a2;
  }
  else {
    unint64_t v13 = v12 + 1;
  }
  if (v10 > v13)
  {
LABEL_91:
    if (v11) {
      unint64_t v81 = v12;
    }
    else {
      unint64_t v81 = v12 + 1;
    }
    unint64_t v82 = v81 - v6;
    if (v81 < v6)
    {
      if (v7)
      {
        if (v7 == 3)
        {
          unint64_t v83 = *(void *)(a2 + 8);
          if (v83 < v12) {
            goto LABEL_107;
          }
        }

        else
        {
          unint64_t v83 = *(void *)(a2 + 8);
          if (v12 >= v83)
          {
LABEL_107:
            uint64_t v85 = qword_1001A3B40;
            goto LABEL_108;
          }
        }
      }

      else
      {
        unint64_t v83 = *(void *)(a2 + 8);
        if (v12 >= v83 || v12 + 1 >= v83) {
          goto LABEL_107;
        }
      }

      uint64_t v85 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v83;
LABEL_108:
      unint64_t v86 = v85 + v81;
      uint64_t v87 = *(void *)(a1 + 48);
      if (*(void *)(a3 + 144) >= v86) {
        unint64_t v88 = v86;
      }
      else {
        unint64_t v88 = *(void *)(a3 + 144);
      }
      uint64_t v89 = a4;
      uint64_t v90 = a1;
      unint64_t v82 = 0LL;
LABEL_121:
      sub_10003BD10(v87, v90, v88, v82, v89);
      return;
    }

    if (v7)
    {
      if (v7 == 3)
      {
        unint64_t v84 = *(void *)(a2 + 8);
        if (v84 < v12) {
          goto LABEL_116;
        }
      }

      else
      {
        unint64_t v84 = *(void *)(a2 + 8);
        if (v12 >= v84)
        {
LABEL_116:
          uint64_t v91 = qword_1001A3B40;
          goto LABEL_117;
        }
      }
    }

    else
    {
      unint64_t v84 = *(void *)(a2 + 8);
      if (v12 >= v84 || v12 + 1 >= v84) {
        goto LABEL_116;
      }
    }

    uint64_t v91 = (v7 & 1) - v12 + (int)(((v7 >> 1) & 1) - 1) + v84;
LABEL_117:
    unint64_t v92 = v91 + v81;
    uint64_t v87 = *(void *)(a1 + 48);
    if (*(void *)(a3 + 144) >= v92) {
      unint64_t v88 = v92;
    }
    else {
      unint64_t v88 = *(void *)(a3 + 144);
    }
    uint64_t v89 = a4;
    uint64_t v90 = a1;
    goto LABEL_121;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v119 = *(void *)a1;
  unint64_t v120 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    uint64_t v18 = *(void *)(a1 + 48);
  }

  else
  {
    uint64_t v18 = v14;
  }

  v121[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v121 + 9) = *(_OWORD *)(a1 + 25);
  uint64_t v122 = v18;
  __int128 v123 = *(_OWORD *)(a1 + 56);
  __int128 v124 = *(_OWORD *)(a1 + 72);
  __int128 v125 = *(_OWORD *)(a1 + 88);
  char v126 = *(_BYTE *)(a1 + 104);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v127 = *(void *)(a1 + 112);
  uint64_t v128 = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  __int128 v129 = *(_OWORD *)(a1 + 128);
  uint64_t v130 = *(void *)(a1 + 144);
  char v131 = *(_BYTE *)(a1 + 152);
  while (!sub_10003B85C((uint64_t)&v119, a3))
  {
    v10 += *(void *)&v121[0];
    unint64_t v22 = *(void *)a2;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
      ++v22;
    }
    if (v10 >= v22) {
      break;
    }
    sub_10003CC34((uint64_t)&v119);
  }

  __int128 v23 = *(std::__shared_weak_count **)(v14 + 216);
  uint64_t v106 = *(void *)(v14 + 208);
  uint64_t v107 = v23;
  if (v23)
  {
    __int128 v24 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  v108[0] = *(_OWORD *)(v14 + 224);
  *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)(v14 + 233);
  char v26 = (__int128 *)(v14 + 264);
  __int128 v110 = *(_OWORD *)(v14 + 264);
  __int128 v27 = *(_OWORD *)(v14 + 296);
  __int128 v111 = *(_OWORD *)(v14 + 280);
  uint64_t v109 = *(void *)(v14 + 256);
  char v113 = *(_BYTE *)(v14 + 312);
  __int128 v112 = v27;
  uint64_t v28 = *(std::__shared_weak_count **)(v14 + 328);
  uint64_t v114 = *(void *)(v14 + 320);
  char v115 = v28;
  if (v28)
  {
    __int128 v29 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }

  __int128 v116 = *(_OWORD *)(v14 + 336);
  uint64_t v117 = *(void *)(v14 + 352);
  char v118 = *(_BYTE *)(v14 + 360);
  BOOL v31 = sub_10003B85C((uint64_t)&v119, (uint64_t)&v106);
  if (v28)
  {
    __int128 v32 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  BOOL v34 = v107;
  if (v107)
  {
    uint64_t v35 = (unint64_t *)&v107->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v31) {
        goto LABEL_37;
      }
      goto LABEL_80;
    }
  }

  if (!v31)
  {
LABEL_80:
    unint64_t v75 = v128;
    if (v128)
    {
      uint64_t v76 = (unint64_t *)&v128->__shared_owners_;
      do
        unint64_t v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }

    unint64_t v78 = v120;
    if (v120)
    {
      uint64_t v79 = (unint64_t *)&v120->__shared_owners_;
      do
        unint64_t v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }

    unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
    unint64_t v12 = *(void *)a2;
    unint64_t v6 = *(void *)(a1 + 24);
    char v11 = v7 & 2;
    goto LABEL_91;
  }

LABEL_37:
  __int128 v37 = (_OWORD *)(v14 + 224);
  uint64_t v38 = (__int128 *)(v14 + 280);
  uint64_t v39 = *(std::__shared_weak_count **)(v14 + 216);
  uint64_t v106 = *(void *)(v14 + 208);
  uint64_t v107 = v39;
  if (v39)
  {
    unint64_t v40 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }

  v108[0] = *v37;
  *(_OWORD *)((char *)v108 + 9) = *(_OWORD *)(v14 + 233);
  __int128 v110 = *v26;
  __int128 v42 = *(_OWORD *)(v14 + 296);
  __int128 v111 = *v38;
  uint64_t v43 = (__int128 *)(v14 + 336);
  unint64_t v44 = (uint64_t *)(v14 + 352);
  uint64_t v109 = *(void *)(v14 + 256);
  __int128 v112 = v42;
  char v113 = *(_BYTE *)(v14 + 312);
  char v45 = *(std::__shared_weak_count **)(v14 + 328);
  uint64_t v114 = *(void *)(v14 + 320);
  char v115 = v45;
  if (v45)
  {
    int v46 = (unint64_t *)&v45->__shared_owners_;
    do
      unint64_t v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }

  __int128 v116 = *v43;
  uint64_t v117 = *v44;
  char v118 = *(_BYTE *)(v14 + 360);
  int v48 = *(std::__shared_weak_count **)(v14 + 216);
  uint64_t v93 = *(void *)(v14 + 208);
  int v94 = v48;
  if (v48)
  {
    __uint32_t v49 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }

  *(_OWORD *)unint64_t v95 = *v37;
  *(_OWORD *)&v95[9] = *(_OWORD *)(v14 + 233);
  __int128 v51 = *v38;
  __int128 v52 = *(_OWORD *)(v14 + 296);
  __int128 v97 = *v26;
  __int128 v98 = v51;
  uint64_t v96 = *(void *)(v14 + 256);
  __int128 v99 = v52;
  char v100 = *(_BYTE *)(v14 + 312);
  unint64_t v53 = *(std::__shared_weak_count **)(v14 + 328);
  uint64_t v101 = *(void *)(v14 + 320);
  unint64_t v102 = v53;
  if (v53)
  {
    uint64_t v54 = (unint64_t *)&v53->__shared_owners_;
    do
      unint64_t v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }

  __int128 v103 = *v43;
  uint64_t v104 = *v44;
  char v105 = *(_BYTE *)(v14 + 360);
  __n128 v56 = sub_10003DB70(a4, (uint64_t)&v106, (uint64_t)&v93);
  size_t v57 = v102;
  if (v102)
  {
    unint64_t v58 = (unint64_t *)&v102->__shared_owners_;
    do
      unint64_t v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v56);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

  uint64_t v60 = v94;
  if (v94)
  {
    uint64_t v61 = (unint64_t *)&v94->__shared_owners_;
    do
      unint64_t v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, v56);
      std::__shared_weak_count::__release_weak(v60);
    }
  }

  size_t v63 = v115;
  if (v115)
  {
    char v64 = (unint64_t *)&v115->__shared_owners_;
    do
      unint64_t v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v63->__on_zero_shared)(v63, v56);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  __int128 v66 = v107;
  if (v107)
  {
    uint64_t v67 = (unint64_t *)&v107->__shared_owners_;
    do
      unint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v56);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  unint64_t v69 = v128;
  if (v128)
  {
    __int16 v70 = (unint64_t *)&v128->__shared_owners_;
    do
      unint64_t v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v69->__on_zero_shared)(v69, v56);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  unint64_t v72 = v120;
  if (v120)
  {
    uint64_t v73 = (unint64_t *)&v120->__shared_owners_;
    do
      unint64_t v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v72->__on_zero_shared)(v72, v56);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

    sub_1000C0F7C(&v31);
    if ((v12 | 2) != 2) {
      return v4;
    }
  }

  return 0LL;
}

      sub_1000EF9D0((unint64_t *)a3, (unint64_t *)&v26);
      *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v15;
      return sub_1000EFDE8((unint64_t *)&v26);
    }
  }

  sub_1000EF9D0((unint64_t *)&v24, (unint64_t *)&v26);
  unint64_t v25 = -2LL;
  *(void *)a3 = 0LL;
  do
    char v11 = __ldaxr((unint64_t *)&v24);
  while (__stlxr(0LL, (unint64_t *)&v24));
  atomic_store(v11, (unint64_t *)a3);
  *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v25;
  sub_1000EFDE8((unint64_t *)&v24);
  return sub_1000EFDE8((unint64_t *)&v26);
}

void sub_10003D50C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_10003D540( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (*(void *)(a3 + 144) >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)(a3 + 144);
  }
  sub_10003BD10(v6, a1, v7, a4, a5);
}

uint64_t sub_10003D55C(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 56) = *a3;
  *(void *)(a1 + sub_100006224(v1 + 64) = a3[1];
  __int128 v6 = *((_OWORD *)a3 + 1);
  __int128 v7 = *((_OWORD *)a3 + 2);
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a3 + 48);
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v6;
  *(void *)(a1 + sub_100006224(v50 + 112) = a3[7];
  uint64_t v8 = a3[8];
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  char v11 = (__int128 *)(a3 + 2);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 9);
  *(_BYTE *)(a1 + 15sub_1000296D8(&v5, 2) = a4;
  uint64_t v12 = *a3;
  if (*a3 == *(void *)(a2 + 96) && a3[1] == *(void *)(a2 + 104) && *(void *)v11 == *(void *)(a2 + 112))
  {
    *(void *)(a1 + 144) = *(void *)(a2 + 184) + *(void *)(a2 + 192);
  }

  else
  {
    __int128 v73 = *(_OWORD *)(a2 + 8);
    __int128 v74 = *(_OWORD *)(a2 + 24);
    __int128 v75 = *(_OWORD *)(a2 + 40);
    char v76 = *(_BYTE *)(a2 + 56);
    unint64_t v13 = *(std::__shared_weak_count **)(a2 + 72);
    uint64_t v77 = *(void *)(a2 + 64);
    unint64_t v78 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      uint64_t v12 = *a3;
    }

    __int128 v79 = *(_OWORD *)(a2 + 80);
    uint64_t v16 = a3[1];
    uint64_t v65 = v12;
    uint64_t v66 = v16;
    __int128 v17 = *((_OWORD *)a3 + 2);
    __int128 v67 = *v11;
    __int128 v68 = v17;
    char v69 = *((_BYTE *)a3 + 48);
    uint64_t v18 = (std::__shared_weak_count *)a3[8];
    uint64_t v70 = a3[7];
    unint64_t v71 = v18;
    if (v18)
    {
      uint64_t v19 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

    int v21 = 0;
    __int128 v72 = *(_OWORD *)(a3 + 9);
    while ((void)v73 != v65 || *((void *)&v73 + 1) != v66 || (void)v74 != (void)v67)
    {
      sub_10003DAF4((uint64_t)&v73);
      unint64_t v22 = v78;
      if (v78)
      {
        __int128 v23 = (unint64_t *)&v78->__shared_owners_;
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        int v25 = DWORD2(v79);
        do
          unint64_t v26 = __ldaxr(v23);
        while (__stlxr(v26 - 1, v23));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }

      else
      {
        int v25 = DWORD2(v79);
      }

      v21 += v25;
      sub_10003B36C((uint64_t)&v73);
    }

    *(void *)(a1 + 144) = *(void *)(a2 + 184) + v21;
    if (v71)
    {
      __int128 v27 = &v71->__shared_owners_;
      do
        unint64_t v28 = __ldaxr((unint64_t *)v27);
      while (__stlxr(v28 - 1, (unint64_t *)v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }

    __int128 v29 = v78;
    if (v78)
    {
      uint64_t v30 = (unint64_t *)&v78->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    __int128 v32 = *(std::__shared_weak_count **)(a2 + 216);
    uint64_t v50 = *(void *)(a2 + 208);
    __int128 v51 = v32;
    if (v32)
    {
      unint64_t v33 = (unint64_t *)&v32->__shared_owners_;
      do
        unint64_t v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }

    v52[0] = *(_OWORD *)(a2 + 224);
    *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)(a2 + 233);
    uint64_t v53 = *(void *)(a2 + 256);
    __int128 v35 = *(_OWORD *)(a2 + 264);
    char v57 = *(_BYTE *)(a2 + 312);
    __int128 v36 = *(_OWORD *)(a2 + 280);
    __int128 v54 = v35;
    __int128 v55 = v36;
    __int128 v56 = *(_OWORD *)(a2 + 296);
    __int128 v37 = *(std::__shared_weak_count **)(a2 + 328);
    uint64_t v58 = *(void *)(a2 + 320);
    unint64_t v59 = v37;
    if (v37)
    {
      uint64_t v38 = (unint64_t *)&v37->__shared_owners_;
      do
        unint64_t v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }

    __int128 v60 = *(_OWORD *)(a2 + 336);
    uint64_t v61 = *(void *)(a2 + 352);
    char v62 = *(_BYTE *)(a2 + 360);
    sub_10003B708((void *)a1, (uint64_t)&v50, (uint64_t)&v63);
    sub_1000198A4(a1, &v63);
    *(_OWORD *)(a1 + 16) = v64[0];
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v64 + 9);
    unint64_t v40 = (std::__shared_weak_count *)*((void *)&v63 + 1);
    if (*((void *)&v63 + 1))
    {
      unint64_t v41 = (unint64_t *)(*((void *)&v63 + 1) + 8LL);
      do
        unint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    uint64_t v43 = v59;
    if (v59)
    {
      unint64_t v44 = (unint64_t *)&v59->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    int v46 = v51;
    if (v51)
    {
      unint64_t v47 = (unint64_t *)&v51->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }

  return a1;
}

void sub_10003D988(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10003D9C8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 48) + 200LL);
}

uint64_t sub_10003D9D4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = *(void *)(a2 + 144) - a3;
  if (v6 <= a4) {
    unint64_t v6 = a4;
  }
  if (v6 < a5) {
    a5 = v6;
  }
  return sub_10003BA10(a6, a1 + 56, a2 + 56, a3, a5, *(_BYTE *)(*(void *)(a1 + 48) + 200LL));
}

BOOL sub_10003DA10(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 144);
  return v4 > a3 || *(void *)(a2 + 144) - v4 < a4;
}

uint64_t sub_10003DA2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    unint64_t v6 = (unint64_t *)(v4 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  char v11 = v13;
  v13[0] = v5;
  v13[1] = v4;
  void v13[2] = v9;
  __int128 v12 = xmmword_100142560;
  sub_10003DC54(a2, (uint64_t *)&v11, v8, a1[2]);
  return sub_10000627C((uint64_t)&v11);
}

void sub_10003DAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000627C((uint64_t)va1);
  sub_100006224((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003DAF4(uint64_t a1)
{
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5[1];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v5[0] + 1);
  if (*((void *)&v5[0] + 1))
  {
    uint64_t v3 = (unint64_t *)(*((void *)&v5[0] + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

__n128 sub_10003DB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + sub_100006224(v1 + 64) = *(void *)(a2 + 64);
  __int128 v4 = *(_OWORD *)(a2 + 72);
  __int128 v5 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v4;
  *(_OWORD *)(a1 + sub_100006224(v50 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a2 + sub_100006224(v50 + 112) = 0LL;
  *(void *)(a2 + 12crc32(0LL, 0LL, 0) = 0LL;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 15sub_1000296D8(&v5, 2) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 16crc32(0LL, 0LL, 0) = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a3 + 25);
  *(_OWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = *(void *)(a3 + 48);
  *(void *)(a1 + 216) = *(void *)(a3 + 56);
  *(void *)(a1 + 224) = *(void *)(a3 + 64);
  __int128 v8 = *(_OWORD *)(a3 + 72);
  __int128 v9 = *(_OWORD *)(a3 + 88);
  *(_BYTE *)(a1 + 2sub_100006224(v1 + 64) = *(_BYTE *)(a3 + 104);
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v9;
  *(_OWORD *)(a1 + 23sub_1000296D8(&v5, 2) = v8;
  *(_OWORD *)(a1 + 27sub_1000296D8(&v5, 2) = *(_OWORD *)(a3 + 112);
  *(void *)(a3 + sub_100006224(v50 + 112) = 0LL;
  *(void *)(a3 + 12crc32(0LL, 0LL, 0) = 0LL;
  __n128 result = *(__n128 *)(a3 + 128);
  *(__n128 *)(a1 + 28_Block_object_dispose(va, 8) = result;
  uint64_t v11 = *(void *)(a3 + 144);
  *(_BYTE *)(a1 + 31sub_1000296D8(&v5, 2) = *(_BYTE *)(a3 + 152);
  *(void *)(a1 + 304) = v11;
  return result;
}

uint64_t *sub_10003DC54(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10001A464((uint64_t)a1, a2);
  uint64_t v8 = a1[1];
  uint64_t v15 = *a1;
  uint64_t v9 = v15 + 24 * v8;
  uint64_t v10 = a1[19];
  unint64_t v13 = (unint64_t *)a1[18];
  uint64_t v14 = v9;
  __int128 v12 = &v13[v10];
  sub_10003BB64(v7 + 208, &v15, &v14, &v13, &v12, a3, a4);
  return a1;
}

void sub_10003DCD0(_Unwind_Exception *a1)
{
}

void sub_10003E44C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
  if (a2 == 1)
  {
    id v24 = objc_begin_catch(exception_object);
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 reason]);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v25,  v23);

    objc_end_catch();
    JUMPOUT(0x10003E410LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E518(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4crc32(0LL, 0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4crc32(0LL, 0LL, 0) = 0LL;
  return result;
}

void sub_10003E528(uint64_t a1)
{
}

void sub_10003E530(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  if (!v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) signalCommandCompletedWithXpcError:v6];
}

void sub_10003E8C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 reason]);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v19,  v17);

    objc_end_catch();
    JUMPOUT(0x10003E88CLL);
  }

  _Unwind_Resume(exception_object);
}

id sub_10003E974(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

uint64_t sub_10003E9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v4 = *(void *)(a2 + 560);
  unint64_t v13 = (unint64_t)(*(void *)(v4 + 120) + *(void *)(v4 + 128) - 1LL) / *(void *)(v4 + 128);
  sub_100073EB4(v4, &v12);
  uint64_t v15 = v12;
  uint64_t v5 = *(void *)(a2 + 560);
  uint64_t v17 = 0LL;
  id v6 = operator new(0x30uLL);
  void *v6 = &off_100178390;
  v6[1] = &v13;
  v6[2] = &v15;
  void v6[3] = a2;
  v6[4] = &v14;
  v6[5] = a1;
  uint64_t v17 = v6;
  sub_100073F64(v5, (uint64_t)v16);
  id v7 = v17;
  if (v17 == v16)
  {
    uint64_t v8 = 4LL;
    id v7 = v16;
  }

  else
  {
    if (!v17) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  uint64_t v10 = v14;
  uint64_t v9 = v15;
  uint64_t v15 = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16LL))(v9);
  }
  return v10;
}

void sub_10003EAD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v19 = a17;
  if (a17 == v17)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*(void *)v19 + 8 * v20))();
LABEL_6:
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 16LL))(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003EB7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *(void *)&__int128 v26 = *a1;
  *((void *)&v26 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    uint64_t v24 = v3;
    int v25 = v4;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v24 = v3;
    int v25 = 0LL;
  }

  do
  {
    (*(void (**)(void, uint64_t))(*(void *)v26 + 168LL))(v26, a2);
    sub_10001C610(&v24, (uint64_t *)&v26);
    sub_10011F1C0((uint64_t)&v26, &v23);
    __int128 v8 = v23;
    __int128 v23 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    __int128 v26 = v8;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v12 = v26;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    uint64_t v14 = v24;
    if (*((void *)&v23 + 1))
    {
      uint64_t v15 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  while (v12 != v14);
  uint64_t v17 = v25;
  if (v25)
  {
    id v18 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    int v21 = (unint64_t *)(*((void *)&v26 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

void sub_10003ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100006224((uint64_t)va);
  sub_100006224((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003ED28(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_100177C78;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = off_100177CC0;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100177D08;
  *(void *)(a1 + 56) = &off_100177F90;
  *(void *)a1 = off_100177B58;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100177FE8;
  *(_BYTE *)(a1 + 8crc32(0LL, 0LL, 0) = 0;
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = off_1001780D8;
  *(void *)(a1 + 16) = off_100177BE8;
  *(void *)(a1 + 24) = off_100178130;
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0LL;
  sub_10003EFFC((uint64_t *)(a1 + 152), (uint64_t *)&off_100177AD8, a2);
  *(void *)a1 = off_1001776A0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_1001776E8;
  *(void *)(a1 + 16) = off_100177730;
  *(void *)(a1 + 24) = off_100177778;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = off_1001777C0;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = off_100177808;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100177850;
  *(void *)(a1 + 56) = off_1001778B0;
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = off_100177920;
  *(void *)(a1 + 15sub_1000296D8(&v5, 2) = off_100177990;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 560) + 40LL))(*(void *)(a2 + 560));
  uint64_t v5 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + _Block_object_dispose(va, 8) = v4;
  uint64_t v6 = *(void *)(a1 + *(void *)(v5 - 112) + 8);
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 56) = v6 - sub_10003E9C0(a1, a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32LL))(a2);
  uint64_t v8 = *(void *)a1;
  *(void *)(a1 + *(void *)(*(void *)a1 - 112LL) + 16) = v7;
  uint64_t v9 = a1 + *(void *)(v8 - 112);
  uint64_t v10 = *(void *)(a2 + 64);
  if (!*(_BYTE *)(v9 + 32)) {
    *(_BYTE *)(v9 + 3sub_1000296D8(&v5, 2) = 1;
  }
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = a1 + *(void *)(*(void *)a1 - 112LL);
  *(void *)(v11 + 4crc32(0LL, 0LL, 0) = 0x200000000000000LL;
  *(_BYTE *)(v11 + 4_Block_object_dispose(va, 8) = 1;
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 568);
  uint64_t v25 = *(void *)(a2 + 560);
  __int128 v26 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  sub_10003EB7C(&v25, a1 + *(void *)(*(void *)a1 - 104LL));
  if (v12)
  {
    uint64_t v15 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v17 = *(void *)(a2 + 560);
  uint64_t v18 = *(void *)(v17 + 96);
  unint64_t v19 = *(std::__shared_weak_count **)(v17 + 104);
  uint64_t v25 = v18;
  __int128 v26 = v19;
  if (v19)
  {
    uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  if (v18) {
    sub_100117140(v18, (char *)(a1 + *(void *)(*(void *)a1 - 104LL)));
  }
  if (v19)
  {
    unint64_t v22 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  return a1;
}

void sub_10003EFA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 12crc32(0LL, 0LL, 0) = v12;
  *(void *)(v9 + 24) = v12 + 88;
  sub_10003AF44(v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10003EFFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)off_100177578;
  uint64_t v4 = a2[1];
  *a1 = v4;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - sub_10003AF44((const void **)(v10 + 24)) = a2[2];
  uint64_t v5 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - sub_10003AF44((const void **)(v10 + 24)) = a2[3];
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v6 = (CFTypeRef *)(a1 + 1);
  a1[3] = 0LL;
  uint64_t v10 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *(CFUUIDBytes *)(*(void *)(a3 + 560) + 136LL));
  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, v10);
  uint64_t v9 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    CFStringRef v7 = v9;
  }

  a1[1] = (uint64_t)v7;
  uint64_t v9 = 0LL;
  sub_10003AF44((const void **)&v9);
  sub_10003B07C((const void **)&v10);
  return a1;
}

void sub_10003F0C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10003F110(uint64_t a1)
{
  *(void *)(a1 + 15sub_1000296D8(&v5, 2) = off_100178220;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100178278;
  sub_10003AF44((const void **)(a1 + 176));
  sub_10003AF44((const void **)(a1 + 168));
  sub_10003AF44((const void **)(a1 + 160));
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = off_1001780D8;
  *(void *)(a1 + 24) = off_100178130;
  sub_10003AF44((const void **)(a1 + 144));
  return a1;
}

void sub_10003F178(uint64_t a1)
{
  *(void *)(a1 + 15sub_1000296D8(&v5, 2) = off_100178220;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100178278;
  sub_10003AF44((const void **)(a1 + 176));
  sub_10003AF44((const void **)(a1 + 168));
  sub_10003AF44((const void **)(a1 + 160));
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = off_1001780D8;
  *(void *)(a1 + 24) = off_100178130;
  sub_10003AF44((const void **)(a1 + 144));
  operator delete((void *)a1);
}

const void **sub_10003F1E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  v10[0] = @"Image Format";
  v10[1] = v4;
  _OWORD v10[2] = @"Format Description";
  v10[3] = @"Sparse bundle image";
  sub_100039DD4(a1 + *(void *)(*(void *)a1 - 112LL), &v9);
  v10[4] = @"Size Info";
  v10[5] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  sub_10003A0D8(a1 + *(void *)(*(void *)a1 - 120LL), &v9);
  v10[6] = @"Encryption Info";
  v10[7] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  sub_10003A844((void *)(a1 + *(void *)(*(void *)a1 - 128LL)), &v9);
  v10[8] = @"Identity Info";
  v10[9] = v9;
  uint64_t v9 = 0LL;
  sub_10000D8A4(&v9);
  v7[0] = (uint64_t)v10;
  v7[1] = 5LL;
  sub_1000FF160(v7, (CFMutableDictionaryRef *)&v8);
  *a2 = v8;
  uint64_t v8 = 0LL;
  sub_100006B34(&v8);
  for (uint64_t i = 9LL; i != -1; i -= 2LL)
    __n128 result = sub_100006B94((const void **)&v10[i]);
  return result;
}

void sub_10003F358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  for (uint64_t i = 72LL; i != -8; i -= 16LL)
    sub_100006B94((const void **)(&a14 + i));
  _Unwind_Resume(a1);
}

CFStringRef sub_10003F3A0()
{
  return @"UDSB";
}

const void **sub_10003F3AC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 19) = off_100178220;
  *((void *)v1 + 6) = off_100178278;
  sub_10003AF44((const void **)v1 + 22);
  sub_10003AF44((const void **)v1 + 21);
  sub_10003AF44((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001780D8;
  *((void *)v1 + 3) = off_100178130;
  return sub_10003AF44((const void **)v1 + 18);
}

void sub_10003F414(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  *((void *)v1 + 19) = off_100178220;
  *((void *)v1 + 6) = off_100178278;
  sub_10003AF44((const void **)v1 + 22);
  sub_10003AF44((const void **)v1 + 21);
  sub_10003AF44((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001780D8;
  *((void *)v1 + 3) = off_100178130;
  sub_10003AF44((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_10003F484(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 19) = off_100178220;
  *((void *)v1 + 6) = off_100178278;
  sub_10003AF44((const void **)v1 + 22);
  sub_10003AF44((const void **)v1 + 21);
  sub_10003AF44((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001780D8;
  *((void *)v1 + 3) = off_100178130;
  return sub_10003AF44((const void **)v1 + 18);
}

void sub_10003F4EC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 32LL);
  *((void *)v1 + 19) = off_100178220;
  *((void *)v1 + 6) = off_100178278;
  sub_10003AF44((const void **)v1 + 22);
  sub_10003AF44((const void **)v1 + 21);
  sub_10003AF44((const void **)v1 + 20);
  *((void *)v1 + 15) = off_1001780D8;
  *((void *)v1 + 3) = off_100178130;
  sub_10003AF44((const void **)v1 + 18);
  operator delete(v1);
}

const void **sub_10003F55C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10003F1E0((uint64_t)a1 + *(void *)(*a1 - 40LL), a2);
}

CFStringRef sub_10003F56C()
{
  return @"UDSB";
}

__n128 sub_10003F580(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &off_100178390;
  *(_OWORD *)(v2 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_10003F5C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100178390;
  __n128 result = *(__n128 *)(a1 + 8);
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4crc32(0LL, 0LL, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10003F5F8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (**(void **)(result + 8) <= (unint64_t)*a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)&v14);
    sub_10000552C(&v14, (uint64_t)"Bands folder contains an out of range band (", 44LL);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v14, v12, v13);
    sub_10000552C(&v14, (uint64_t)")", 1LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)&v14, 0x16u);
  }

  uint64_t v4 = result;
  uint64_t v5 = *(void **)(result + 16);
  if (*v5)
  {
    sub_10011C400((uint64_t)&v14, *(void *)(result + 24) + 24LL, *a3, v5);
    **(void **)(v4 + 32) += sub_100097308(v15) << 12;
    uint64_t v6 = v16;
    uint64_t v16 = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    __n128 result = v15;
    uint64_t v15 = 0LL;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(result + 24);
    if ((unint64_t)(*(void *)(*(void *)(v7 + 560) + 120LL) + *(void *)(*(void *)(v7 + 560) + 128LL) - 1LL)
       / *(void *)(*(void *)(v7 + 560) + 128LL)
       - 1 == v3)
      uint64_t v8 = *(void *)(*(void *)(result + 40) + *(void *)(**(void **)(result + 40) - 112LL) + 8LL)
         - *(void *)(v7 + 64) * v3;
    else {
      uint64_t v8 = *(void *)(v7 + 64);
    }
    **(void **)(result + 32) += v8;
  }

  return result;
}

void sub_10003F790( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

void sub_10003F918()
{
}

uint64_t sub_10003F928(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10003F964()
{
}

uint64_t sub_10003F970@<X0>(uint64_t a1@<X8>)
{
  return std::ostream::~ostream(v1, a1 + 8);
}

void sub_10003FA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003FAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003FC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004051C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000408DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100040FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000410E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004119C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_60:
    *__error() = v22;
    __uint32_t v49 = 1;
    -[DIEncryptionFrontend setAllowStoringInKeychain:](self, "setAllowStoringInKeychain:", 1LL);
    goto LABEL_66;
  }

  if (v20)
  {
    if (v20 == -25300)
    {
      unint64_t v22 = *__error();
      if (!sub_1000BE2F0())
      {
        uint64_t v50 = sub_1000BE278();
        __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68157954;
          __int128 v63 = 65;
          char v64 = 2080;
          uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "%.*s: No matching item found in keychain",  buf,  0x12u);
        }

        goto LABEL_60;
      }

      __int128 v60 = 0LL;
      unint64_t v23 = sub_1000BE278();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v25 = 3LL;
      }
      else {
        uint64_t v25 = 2LL;
      }
      *(_DWORD *)buf = 68157954;
      __int128 v63 = 65;
      char v64 = 2080;
      uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      LODWORD(v57) = 18;
      __int128 v26 = (char *)_os_log_send_and_compose_impl( v25,  &v60,  0LL,  0LL,  &_mh_execute_header,  v24,  0LL,  "%.*s: No matching item found in keychain",  (int)buf,  v57);

      if (v26) {
        goto LABEL_36;
      }
      goto LABEL_60;
    }

    __int128 v35 = *__error();
    if (sub_1000BE2F0())
    {
      __int128 v60 = 0LL;
      __int128 v36 = sub_1000BE278();
      __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
        uint64_t v38 = 3LL;
      }
      else {
        uint64_t v38 = 2LL;
      }
      *(_DWORD *)buf = 68158210;
      __int128 v63 = 65;
      char v64 = 2080;
      uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      uint64_t v66 = 1024;
      LODWORD(v67) = v21;
      LODWORD(v57) = 24;
      unint64_t v39 = (char *)_os_log_send_and_compose_impl( v38,  &v60,  0LL,  0LL,  &_mh_execute_header,  v37,  0LL,  "%.*s: Keychain lookup returned %d",  (int)buf,  v57,  (_DWORD)v58);

      if (v39)
      {
        fprintf(__stderrp, "%s\n", v39);
        free(v39);
      }
    }

    else
    {
      __int128 v54 = sub_1000BE278();
      __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68158210;
        __int128 v63 = 65;
        char v64 = 2080;
        uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
        uint64_t v66 = 1024;
        LODWORD(v67) = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "%.*s: Keychain lookup returned %d",  buf,  0x18u);
      }
    }

    *__error() = v35;
LABEL_65:
    __uint32_t v49 = 1;
    goto LABEL_66;
  }

  __int128 v27 = *__error();
  if (sub_1000BE2F0())
  {
    __int128 v60 = 0LL;
    unint64_t v28 = sub_1000BE278();
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v30 = 3LL;
    }
    else {
      uint64_t v30 = 2LL;
    }
    *(_DWORD *)buf = 68157954;
    __int128 v63 = 65;
    char v64 = 2080;
    uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
    LODWORD(v57) = 18;
    unint64_t v31 = (char *)_os_log_send_and_compose_impl( v30,  &v60,  0LL,  0LL,  &_mh_execute_header,  v29,  0LL,  "%.*s: Passphrase found in keychain, unlocking the image",  (int)buf,  v57);

    if (v31)
    {
      fprintf(__stderrp, "%s\n", v31);
      free(v31);
    }
  }

  else
  {
    unint64_t v40 = sub_1000BE278();
    unint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      __int128 v63 = 65;
      char v64 = 2080;
      uint64_t v65 = "-[DIEncryptionUnlocker keychainUnlockWithIsSystemKeychain:error:]";
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%.*s: Passphrase found in keychain, unlocking the image",  buf,  0x12u);
    }
  }

  *__error() = v27;
  unint64_t v42 = (void *)result;
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[DIEncryptionFrontend diParams](self, "diParams"));
  unint64_t v44 = v42;
  unint64_t v59 = 0LL;
  unint64_t v45 = objc_msgSend(v43, "setPassphrase:error:", objc_msgSend(v44, "bytes"), &v59);
  int v46 = v59;

  if ((v45 & 1) != 0 || ((v47 = (uint64_t)[v46 code], v47 >= 0) ? (unint64_t v48 = v47) : (unint64_t v48 = -v47), v48 == 80))
  {
    __uint32_t v49 = 1;
  }

  else
  {
    __uint32_t v49 = 0;
    if (a4) {
      *a4 = v46;
    }
  }

LABEL_66:
  return v49;
}

void sub_100041A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_42:
    uint64_t v13 = 0LL;
    goto LABEL_43;
  }

  *__error() = v8;
}

LABEL_18:
  uint64_t v13 = 0LL;
LABEL_9:
  uint64_t v9 = 1;
LABEL_24:

  return v9;
}

  sub_10001C5B4((void *)(a1 + 16));
  if (*(_BYTE *)(a1 + 69)) {
    sub_10007C284(*(void *)(a1 + 40), *(void *)(a1 + 32));
  }
  sub_10004B4E4(*(void *)(a1 + 40) + 184LL, *(void *)(a1 + 32));
  sub_10007E4A4(a1 + 72);
  sub_100006224(a1 + 16);
  return a1;
}

    sub_10003DA2C(&v81, (uint64_t *)v87);
    uint64_t v24 = *(void **)(*(void *)(a2 + 16) + v20);
    if (a3)
    {
      sub_10003BD04((uint64_t)v91, (uint64_t)&v76);
      sub_10003BA04((uint64_t)v91, (uint64_t)v73);
      uint64_t v4 = sub_1000062D4(v24);
      uint64_t v25 = v75;
      if (v75)
      {
        __int128 v26 = (unint64_t *)&v75->__shared_owners_;
        do
          __int128 v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }

      unint64_t v28 = v74;
      if (v74)
      {
        __int128 v29 = (unint64_t *)&v74->__shared_owners_;
        do
          uint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }

      unint64_t v31 = v78;
      if (v78)
      {
        __int128 v32 = (unint64_t *)&v78->__shared_owners_;
        do
          unint64_t v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }

      unint64_t v34 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1))
      {
        __int128 v35 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
        do
          __int128 v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        goto LABEL_59;
      }
    }

    else
    {
      sub_10003BD04((uint64_t)v91, (uint64_t)&v76);
      sub_10003BA04((uint64_t)v91, (uint64_t)v73);
      uint64_t v4 = sub_100005380((uint64_t)v24);
      __int128 v37 = v75;
      if (v75)
      {
        uint64_t v38 = (unint64_t *)&v75->__shared_owners_;
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      unint64_t v40 = v74;
      if (v74)
      {
        unint64_t v41 = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      uint64_t v43 = v78;
      if (v78)
      {
        unint64_t v44 = (unint64_t *)&v78->__shared_owners_;
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }

      unint64_t v34 = (std::__shared_weak_count *)*((void *)&v76 + 1);
      if (*((void *)&v76 + 1))
      {
        int v46 = (unint64_t *)(*((void *)&v76 + 1) + 8LL);
        do
          __int128 v36 = __ldaxr(v46);
        while (__stlxr(v36 - 1, v46));
LABEL_59:
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }

    unint64_t v47 = v98;
    if (v98)
    {
      unint64_t v48 = (unint64_t *)&v98->__shared_owners_;
      do
        __uint32_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    uint64_t v50 = v97;
    if (v97)
    {
      __int128 v51 = (unint64_t *)&v97->__shared_owners_;
      do
        __int128 v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }

    uint64_t v53 = v96;
    if (v96)
    {
      __int128 v54 = (unint64_t *)&v96->__shared_owners_;
      do
        __int128 v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }

    __int128 v56 = v95;
    if (v95)
    {
      char v57 = (unint64_t *)&v95->__shared_owners_;
      do
        uint64_t v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }

    unint64_t v59 = (std::__shared_weak_count *)v94[0];
    if (v94[0])
    {
      __int128 v60 = (unint64_t *)(v94[0] + 8LL);
      do
        uint64_t v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }

    char v62 = v92;
    if (v92)
    {
      __int128 v63 = (unint64_t *)&v92->__shared_owners_;
      do
        char v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }

    if (v89 && &v90 != __p) {
      operator delete(__p);
    }
    sub_10000627C((uint64_t)v87);
    if (v4 == v13)
    {
      uint64_t v4 = v13;
LABEL_96:
      uint64_t v12 = 0LL;
      v10 -= v13;
      v7 += v13;
      ++v11;
      uint64_t v65 = 1;
      goto LABEL_98;
    }

    uint64_t v65 = 0;
LABEL_98:
    sub_10007D134((uint64_t)&v79);
    uint64_t v66 = v82;
    if (v82)
    {
      __int128 v67 = (unint64_t *)&v82->__shared_owners_;
      do
        __int128 v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }

    if ((v65 & 1) == 0) {
      return v4;
    }
  }

  return a4[2];
}

void sub_100041F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000420E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000421FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000423A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000424F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042BC0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 16LL))(a12);
  }

  if (a2 == 1)
  {
    id v17 = [objc_begin_catch(a1) reason];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v18,  v12);

    objc_end_catch();
    JUMPOUT(0x100042724LL);
  }

  _Unwind_Resume(a1);
}

void sub_100042F94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100042FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v16 = a2;
  id v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  char v21 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v16);
  uint64_t v12 = v17;
  if (v17)
  {
    uint64_t v13 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v11;
}

void sub_10004308C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

LABEL_9:
  operator delete[](v13);
  return v19;
}

    uint64_t v5 = (void *)sub_100004494((uint64_t)exception, (uint64_t)v3, v4);
  }

  if (!result[1] || !result[2] || !result[3] || !result[6] || !result[7] || !result[8])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v3 = "Mandatory callbacks in the plugin's image struct are missing";
    uint64_t v4 = -22;
    goto LABEL_9;
  }

  return result;
}

  *a2 = v7;
  return v5;
}

    unint64_t v10 = v9;
LABEL_23:
    if (v9 != v10)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)(result + 24) + 16LL * (*(_DWORD *)(result + 44) & v9));
      id v17 = 1;
      goto LABEL_27;
    }
  }

  do
    uint64_t v5 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = atomic_load(*(unsigned int **)result);
    uint64_t v7 = atomic_load(*(unsigned int **)(result + 16));
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v8 = __ldaxr(v2);
        if (v8 != 1) {
          break;
        }
        if (!__stlxr(0, v2)) {
          goto LABEL_8;
        }
      }

      __clrex();
    }
  }

  id v17 = 0;
  *(_BYTE *)a2 = 0;
LABEL_27:
  *(_BYTE *)(a2 + 16) = v17;
  return result;
}

  *a2 = v7;
  return v5;
}

    __n128 result = sub_1000A3B0C(a1, a2, a3);
  }

  while (!(_DWORD)result);
  return result;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

  atomic_store((unint64_t)v3, a1);
  return a1;
}

void sub_100043194(_Unwind_Exception *a1)
{
}

void sub_100043374( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  sub_100006224((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10004378C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 564))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    __int128 v4 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 2crc32(0LL, 0LL, 0) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v4;
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
  }

  else
  {
    *(_DWORD *)(a1 + 3sub_1000296D8(&v5, 2) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    __int128 v6 = *(_OWORD *)(a2 + 4);
    *(_OWORD *)(a1 + 2crc32(0LL, 0LL, 0) = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 4crc32(0LL, 0LL, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    bzero((void *)(a1 + 48), 0x204uLL);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
    memcpy((void *)(a1 + 52), (const void *)(a2 + 52), 0x200uLL);
    *(_BYTE *)(a1 + 5sub_100006224(v1 + 64) = 1;
  }

  return a1;
}

void sub_1000439C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100043ADC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_100178420;
  return result;
}

void sub_100043B00(uint64_t a1, void *a2)
{
  *a2 = &off_100178420;
}

void sub_100043B18(uint64_t a1, void **a2)
{
}

uint64_t sub_100043B20(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100043B5C()
{
  return &off_100178490;
}

uint64_t sub_100043B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t *sub_100043BCC(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t *sub_100043C24(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      sub_100014B10();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

int64_t sub_100043C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t result = sub_100005380(*(void *)(a1 + 16));
  v11[0] = result;
  v11[1] = v6;
  if (result <= 0)
  {
    else {
      uint64_t v10 = -(int)result;
    }
    return -v10;
  }

  else
  {
    unint64_t v7 = *(void *)(a2 + 144);
    unint64_t v8 = (*(void *)(a3 + 144) - v7) & ~((uint64_t)(*(void *)(a3 + 144) - v7) >> 63);
    if (v7 > v6 || v8 < result) {
      return sub_100120F4C(a2, a3, v8, v11);
    }
  }

  return result;
}

int64_t sub_100043CE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  if (!*(_BYTE *)(a1 + 56))
  {
    if (!a2[6]
      || (uint64_t v7 = *(void *)(a4 + 144) - *(void *)(a3 + 144),
          *(void *)(a4 + 72) - *(void *)(a3 + 72) >= (v7 & (unint64_t)~(v7 >> 63)) + a2[8]))
    {
      sub_100005380(a2[2]);
    }
  }

  unint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  char v166 = *(void **)a3;
  uint64_t v167 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  *(_OWORD *)uint64_t v168 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v168[9] = *(_OWORD *)(a3 + 25);
  uint64_t v169 = *(void *)(a3 + 48);
  __int128 v170 = *(_OWORD *)(a3 + 56);
  __int128 v171 = *(_OWORD *)(a3 + 72);
  __int128 v172 = *(_OWORD *)(a3 + 88);
  char v173 = *(_BYTE *)(a3 + 104);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v174 = *(void *)(a3 + 112);
  int v175 = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v16 = *(void *)(a3 + 144);
  uint64_t v14 = a3 + 144;
  uint64_t v15 = v16;
  __int128 v176 = *(_OWORD *)(v14 - 16);
  uint64_t v177 = v16;
  char v178 = *(_BYTE *)(v14 + 8);
  if (((*(void *)(v4 + 144) - v16) & (unint64_t)~((*(void *)(v4 + 144) - v16) >> 63)) + v6[8] <= *(void *)&v168[16])
  {
    int64_t v17 = sub_100043C70((uint64_t)v6, (uint64_t)&v166, v4);
    uint64_t v15 = v18;
    sub_10003C884((uint64_t)&v166, v17);
    if (v17 < 0)
    {
      int64_t v19 = v17;
      goto LABEL_188;
    }
  }

  else
  {
    int64_t v17 = 0LL;
  }

  int64_t v19 = v17;
  uint64_t v135 = v4;
  char v137 = v6;
  do
  {
    uint64_t v20 = *(void *)(v4 + 144);
    if (v19 == ((v20 - *(void *)v14) & ~((v20 - *(void *)v14) >> 63))) {
      break;
    }
    int64_t v161 = v17;
    uint64_t v162 = v15;
    char v21 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v163 = *(void *)(a1 + 64);
    __int128 v164 = v21;
    int64_t v138 = v19;
    if (v21)
    {
      unint64_t v22 = (unint64_t *)&v21->__shared_owners_;
      do
        unint64_t v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      uint64_t v20 = *(void *)(v4 + 144);
    }

    uint64_t v25 = v6[6];
    uint64_t v24 = v6[7];
    uint64_t v165 = v25;
    __int128 v27 = (char *)v6[3];
    __int128 v26 = (char *)v6[4];
    uint64_t v28 = v177;
    unint64_t v29 = (unint64_t)(v26 - v27 - 8) >> 3;
    if (v26 == v27) {
      unint64_t v30 = 0LL;
    }
    else {
      unint64_t v30 = v29 + 1;
    }
    unint64_t v31 = (v20 - v177) & ~((v20 - v177) >> 63);
    unint64_t v32 = v24 * v25;
    if (v32 >= v31) {
      uint64_t v33 = v31;
    }
    else {
      uint64_t v33 = v32;
    }
    __int128 __p = v203;
    __int128 v202 = xmmword_100142570;
    if (v30 < 6)
    {
      if (v27 == v26)
      {
        unint64_t v30 = 0LL;
      }

      else
      {
        unint64_t v45 = v29 + 1;
        int v46 = (unint64_t *)&v21->__shared_owners_;
        unint64_t v47 = v203;
        do
        {
          uint64_t v48 = *(void *)v27;
          if (v21)
          {
            do
              unint64_t v49 = __ldxr(v46);
            while (__stxr(v49 + 1, v46));
          }

          void *v47 = v48;
          v47[1] = v21;
          v27 += 8;
          v47[2] = v25;
          v47 += 3;
          --v45;
        }

        while (v45);
      }
    }

    else
    {
      uint64_t v134 = v177;
      if (v30 >= 0x555555555555556LL) {
        sub_10001A548("get_next_capacity, allocator's max size reached");
      }
      uint64_t v34 = v33;
      uint64_t v35 = v14;
      __int128 v36 = operator new(24 * v30);
      __int128 v37 = __p;
      if (__p)
      {
        uint64_t v38 = v202;
        if ((void)v202)
        {
          unint64_t v39 = __p;
          do
          {
            --v38;
            unint64_t v39 = (void *)(sub_100006224((uint64_t)v39) + 24);
          }

          while (v38);
        }

        *(void *)&__int128 v202 = 0LL;
        if (v203 != v37) {
          operator delete(v37);
        }
      }

      *((void *)&v202 + 1) = v30;
      __int128 __p = v36;
      *(void *)&__int128 v202 = 0LL;
      if (v27 == v26)
      {
        uint64_t v44 = 0LL;
        unint64_t v41 = (char *)v36;
        uint64_t v14 = v35;
        unint64_t v6 = v137;
        uint64_t v33 = v34;
        uint64_t v28 = v134;
      }

      else
      {
        unint64_t v40 = (unint64_t *)&v21->__shared_owners_;
        unint64_t v41 = (char *)v36;
        uint64_t v14 = v35;
        unint64_t v6 = v137;
        uint64_t v33 = v34;
        uint64_t v28 = v134;
        do
        {
          uint64_t v42 = *(void *)v27;
          if (v21)
          {
            do
              unint64_t v43 = __ldxr(v40);
            while (__stxr(v43 + 1, v40));
          }

          *(void *)unint64_t v41 = v42;
          *((void *)v41 + 1) = v21;
          *((void *)v41 + sub_1000296D8(&v5, 2) = v25;
          v27 += 8;
          v41 += 24;
        }

        while (v27 != v26);
        uint64_t v44 = v202;
      }

      unint64_t v30 = v44 - 0x5555555555555555LL * ((v41 - (_BYTE *)v36) >> 3);
    }

    uint64_t v4 = v135;
    int64_t v19 = v138;
    *(void *)&__int128 v202 = v30;
    v204 = v206;
    __int128 v205 = xmmword_100142570;
    sub_10001A86C((uint64_t)&v204, v30);
    uint64_t v181 = __p;
    __int128 __dst = (char *)__p + 24 * v202;
    char v152 = (unint64_t *)v204;
    v186[0] = (unint64_t *)((char *)v204 + 8 * v205);
    sub_10003BB64((uint64_t)v207, (uint64_t *)&v181, (uint64_t *)&__dst, &v152, v186, v28, v33);
    sub_10003BD04((uint64_t)v207, (uint64_t)&v181);
    sub_10003BA04((uint64_t)v207, (uint64_t)&__dst);
    int64_t v17 = sub_100043C70((uint64_t)v6, (uint64_t)&v181, (uint64_t)&__dst);
    uint64_t v15 = v50;
    __int128 v51 = v197;
    if (v197)
    {
      __int128 v52 = (unint64_t *)&v197->__shared_owners_;
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

    __int128 v54 = v189;
    if (v189)
    {
      __int128 v55 = (unint64_t *)&v189->__shared_owners_;
      do
        unint64_t v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }

    char v57 = v183;
    if (v183)
    {
      uint64_t v58 = (unint64_t *)&v183->__shared_owners_;
      do
        unint64_t v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }

    __int128 v60 = v182;
    if (v182)
    {
      uint64_t v61 = (unint64_t *)&v182->__shared_owners_;
      do
        unint64_t v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }

    if ((v17 & 0x8000000080000000LL) == 0x8000000080000000LL) {
      goto LABEL_147;
    }
    sub_10003BD04((uint64_t)v207, (uint64_t)&__src);
    sub_10003BA04((uint64_t)v207, (uint64_t)&v152);
    __int128 v63 = v166;
    unint64_t v139 = v166;
    char v140 = v167;
    if (v167)
    {
      char v64 = (unint64_t *)&v167->__shared_owners_;
      do
        unint64_t v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }

    v141[0] = *(_OWORD *)v168;
    *(_OWORD *)((char *)v141 + 9) = *(_OWORD *)&v168[9];
    uint64_t v142 = v169;
    __int128 v143 = v170;
    __int128 v144 = v171;
    __int128 v145 = v172;
    char v146 = v173;
    uint64_t v147 = v174;
    uint64_t v148 = v175;
    if (v175)
    {
      uint64_t v66 = (unint64_t *)&v175->__shared_owners_;
      do
        unint64_t v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }

    __int128 v149 = v176;
    uint64_t v150 = v177;
    char v151 = v178;
    __int128 __dst = v63;
    std::locale v189 = v140;
    if (v140)
    {
      __int128 v68 = (unint64_t *)&v140->__shared_owners_;
      do
        unint64_t v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }

    char v195 = v146;
    uint64_t v191 = v142;
    uint64_t v196 = v147;
    *(_OWORD *)uint64_t v190 = v141[0];
    *(_OWORD *)&v190[9] = *(_OWORD *)((char *)v141 + 9);
    __int128 v192 = v143;
    __int128 v193 = v144;
    __int128 v194 = v145;
    uint64_t v197 = v148;
    if (v148)
    {
      uint64_t v70 = (unint64_t *)&v148->__shared_owners_;
      do
        unint64_t v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }

    unint64_t v72 = 0LL;
    __int128 v198 = v149;
    uint64_t v199 = v150;
    char v200 = 0;
    while (!sub_10003B85C((uint64_t)&__src, (uint64_t)&v152))
    {
      sub_10003DAF4((uint64_t)v158);
      __int128 v73 = (std::__shared_weak_count *)v159;
      v186[0] = (unint64_t *)v158[7];
      v186[1] = v159;
      if (v159)
      {
        __int128 v74 = v159 + 1;
        do
          unint64_t v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }

      __int128 v187 = v160;
      if (*((void *)&v160 + 1))
      {
        unint64_t v76 = *(void *)&v190[16];
        if (v157 < *(void *)&v190[16]) {
          unint64_t v76 = v157;
        }
        if (v76 >= *((void *)&v187 + 1)) {
          int64_t v77 = *((void *)&v187 + 1);
        }
        else {
          int64_t v77 = v76;
        }
        memmove(__dst, __src, v77);
        if (v77 <= 0)
        {
          *(void *)&__int128 v179 = "transform(Fn &&, sg_vec_ref::iterator, const sg_vec_ref::iterator &, sg_vec_ref::iterator) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/io_breaker.cpp:76:13)]";
          *((void *)&v179 + 1) = 97LL;
          int v180 = 16;
          sub_100045E24(&v181, &v179);
          sub_10000552C(&v184, (uint64_t)"IO error with sg: ", 18LL);
          sub_10011E9EC(&v184, &__src);
          sub_10000552C(&v184, (uint64_t)" dest ", 6LL);
          sub_10011E9EC(&v184, &__dst);
          sub_10000552C(&v184, (uint64_t)" returned status ", 17LL);
          std::ostream::operator<<(&v184, v77);
          std::ostream::~ostream(&v184, off_1001788E0);
          sub_100045F88((uint64_t)&v181);
          std::ios::~ios(&v185);
          int v78 = 1;
          if (v73)
          {
LABEL_97:
            __int128 v79 = (unint64_t *)&v73->__shared_owners_;
            do
              unint64_t v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }

        else
        {
          sub_10003C884((uint64_t)&__src, v77);
          sub_10003CA5C((uint64_t)&__dst, v77);
          int v78 = 0;
          v72 += v77;
          if (v73) {
            goto LABEL_97;
          }
        }
      }

      else
      {
        sub_10003CC34((uint64_t)&__src);
        int v78 = 2;
        if (v73) {
          goto LABEL_97;
        }
      }

      if ((v78 | 2) != 2) {
        goto LABEL_106;
      }
    }

    sub_10003CA5C((uint64_t)&v139, v72);
LABEL_106:
    unint64_t v81 = v197;
    if (v197)
    {
      unint64_t v82 = (unint64_t *)&v197->__shared_owners_;
      do
        unint64_t v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }

    unint64_t v84 = v189;
    if (v189)
    {
      uint64_t v85 = (unint64_t *)&v189->__shared_owners_;
      do
        unint64_t v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }

    uint64_t v87 = v148;
    if (v148)
    {
      unint64_t v88 = (unint64_t *)&v148->__shared_owners_;
      do
        unint64_t v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }

    uint64_t v90 = v140;
    if (v140)
    {
      uint64_t v91 = (unint64_t *)&v140->__shared_owners_;
      do
        unint64_t v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }

    uint64_t v93 = v154;
    if (v154)
    {
      int v94 = (unint64_t *)&v154->__shared_owners_;
      do
        unint64_t v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }

    uint64_t v96 = v153;
    if (v153)
    {
      __int128 v97 = (unint64_t *)&v153->__shared_owners_;
      do
        unint64_t v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }

    __int128 v99 = (std::__shared_weak_count *)v159;
    if (v159)
    {
      char v100 = v159 + 1;
      do
        unint64_t v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }

    unint64_t v102 = v156;
    if (v156)
    {
      __int128 v103 = (unint64_t *)&v156->__shared_owners_;
      do
        unint64_t v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }

    sub_10003C884((uint64_t)&v166, v17);
    sub_10003B6C0(&v170);
    int64_t v19 = v17 + v138;
LABEL_147:
    char v105 = v213;
    if (v213)
    {
      uint64_t v106 = (unint64_t *)&v213->__shared_owners_;
      do
        unint64_t v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }

    size_t v108 = v212;
    if (v212)
    {
      uint64_t v109 = (unint64_t *)&v212->__shared_owners_;
      do
        unint64_t v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }

    __int128 v111 = v211;
    if (v211)
    {
      __int128 v112 = (unint64_t *)&v211->__shared_owners_;
      do
        unint64_t v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }

    uint64_t v114 = v210;
    if (v210)
    {
      char v115 = (unint64_t *)&v210->__shared_owners_;
      do
        unint64_t v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }

    uint64_t v117 = v209;
    if (v209)
    {
      char v118 = (unint64_t *)&v209->__shared_owners_;
      do
        unint64_t v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }

    unint64_t v120 = v208;
    if (v208)
    {
      int v121 = (unint64_t *)&v208->__shared_owners_;
      do
        unint64_t v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }

    if (*((void *)&v205 + 1) && v206 != v204) {
      operator delete(v204);
    }
    sub_10000627C((uint64_t)&__p);
    __int128 v123 = v164;
    if (v164)
    {
      __int128 v124 = (unint64_t *)&v164->__shared_owners_;
      do
        unint64_t v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }

    unint64_t v6 = v137;
  }

  while ((v17 & 0x8000000080000000LL) != 0x8000000080000000LL);
LABEL_188:
  char v126 = v175;
  if (v175)
  {
    uint64_t v127 = (unint64_t *)&v175->__shared_owners_;
    do
      unint64_t v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }

  __int128 v129 = v167;
  if (v167)
  {
    uint64_t v130 = (unint64_t *)&v167->__shared_owners_;
    do
      unint64_t v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }

  if (v17 < 0) {
    int v132 = v17;
  }
  else {
    int v132 = 0;
  }
  if (v132 >= 0) {
    return v19;
  }
  else {
    return v132;
  }
}

void sub_100044A7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

uint64_t sub_100044BB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56LL))(*(void *)(a1 + 16));
}

void *sub_100044BC4(void *a1)
{
  *a1 = off_1001784B0;
  sub_100006224((uint64_t)(a1 + 8));
  return a1;
}

void sub_100044BF4(void *a1)
{
  *a1 = off_1001784B0;
  sub_100006224((uint64_t)(a1 + 8));
  operator delete(a1);
}

uint64_t sub_100044C24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
}

uint64_t sub_100044C34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
}

uint64_t sub_100044C44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL))(*(void *)(a1 + 16));
}

uint64_t sub_100044C54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80LL))(*(void *)(a1 + 16));
}

uint64_t sub_100044C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 128LL))( *(void *)(a1 + 16),  a2,  *(void *)(a3 + 16));
}

void *sub_100044C78(uint64_t a1)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136LL))(*(void *)(a1 + 16));
  if (!v5) {
    return 0LL;
  }
  uint64_t v2 = operator new(0x48uLL);
  sub_100044DA4(v2, a1, &v5);
  uint64_t v3 = v5;
  uint64_t v5 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }
  return v2;
}

void sub_100044CFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 40LL))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100044D38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  return sub_1000452F0((uint64_t)&v4, a3);
}

uint64_t sub_100044D60(uint64_t a1, uint64_t a2)
{
  return sub_1000144E8(*(void **)(a2 + 16));
}

uint64_t sub_100044D6C(uint64_t a1, uint64_t a2)
{
  return sub_100045644(*(void **)(a2 + 16));
}

void sub_100044D7C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_100044DA4(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = off_100178598;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0LL;
  a1[3] = 0LL;
  uint64_t v5 = a1 + 3;
  a1[2] = v4;
  a1[4] = 0LL;
  a1[5] = 0LL;
  unint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  unint64_t v8 = v6 + 1;
  a1[7] = v6 + 1;
  a1[8] = v7;
  unint64_t v9 = v7 + v6;
  a1[6] = v9 / (v6 + 1);
  if (v6 < v9)
  {
    unint64_t v10 = 0LL;
    uint64_t v11 = a1 + 5;
    unsigned int v12 = 1;
    do
    {
      size_t v13 = a1[6];
      uint64_t v14 = operator new[](v13);
      bzero(v14, v13);
      if ((unint64_t)v10 >= *v11)
      {
        uint64_t v15 = ((uint64_t)v10 - *v5) >> 3;
        uint64_t v16 = *v11 - *v5;
        uint64_t v17 = v16 >> 2;
        else {
          unint64_t v18 = v17;
        }
        v23[4] = a1 + 5;
        if (v18) {
          int64_t v19 = (char *)sub_1000450A4((uint64_t)(a1 + 5), v18);
        }
        else {
          int64_t v19 = 0LL;
        }
        uint64_t v20 = &v19[8 * v15];
        v23[0] = v19;
        v23[1] = v20;
        unint64_t v23[3] = &v19[8 * v18];
        *(void *)uint64_t v20 = v14;
        void v23[2] = v20 + 8;
        sub_10004501C(v5, v23);
        unint64_t v10 = (void *)a1[4];
        sub_1000451E4((uint64_t)v23);
        unint64_t v8 = a1[7];
      }

      else
      {
        *v10++ = v14;
        a1[4] = v10;
      }

      a1[4] = v10;
    }

    while (v8 > v12++);
  }

  return a1;
}

void sub_100044F0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40LL))(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100044F60(uint64_t a1)
{
  *(void *)a1 = off_100178598;
  uint64_t v4 = (void **)(a1 + 24);
  sub_100045268(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  return a1;
}

void sub_100044FBC(char *a1)
{
  *(void *)a1 = off_100178598;
  uint64_t v3 = (void **)(a1 + 24);
  sub_100045268(&v3);
  uint64_t v2 = *((void *)a1 + 2);
  *((void *)a1 + sub_1000296D8(&v5, 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40LL))(v2);
  }
  operator delete(a1);
}

uint64_t sub_10004501C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000450D8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_100045090()
{
}

void *sub_1000450A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_100044D7C();
  }
  return operator new(8 * a2);
}

uint64_t sub_1000450D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0LL;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8LL;
      uint64_t v8 = v9;
    }

    while (a3 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_10004516C((uint64_t)v13);
  return v11;
}

uint64_t sub_10004516C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000451A0(a1);
  }
  return a1;
}

void sub_1000451A0(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0LL;
    if (v3) {
      operator delete[](v3);
    }
    ++v1;
  }

uint64_t sub_1000451E4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100045218(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void **)(i - 8);
    *(void *)(i - _Block_object_dispose(va, 8) = 0LL;
    if (v5) {
      operator delete[](v5);
    }
  }

void sub_100045268(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000452A8(v2);
    operator delete(**a1);
  }

void sub_1000452A8(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  while (v3 != v2)
  {
    uint64_t v5 = (void *)*--v3;
    uint64_t v4 = v5;
    void *v3 = 0LL;
    if (v5) {
      operator delete[](v4);
    }
  }

  a1[1] = v2;
}

uint64_t sub_1000452F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000062D4(*(void **)(*(void *)a1 + 16LL));
  uint64_t v4 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  uint64_t v7 = v36;
  if (v36)
  {
    uint64_t v8 = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = v40;
  if (v40)
  {
    uint64_t v11 = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  size_t v13 = v39;
  if (v39)
  {
    char v14 = (unint64_t *)&v39->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  __int128 v16 = v51;
  if (v51)
  {
    uint64_t v17 = (unint64_t *)&v51->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  int64_t v19 = v50;
  if (v50)
  {
    uint64_t v20 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v49;
  if (v49)
  {
    unint64_t v23 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  uint64_t v25 = v48;
  if (v48)
  {
    __int128 v26 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  uint64_t v28 = v47;
  if (v47)
  {
    unint64_t v29 = (unint64_t *)&v47->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  unint64_t v31 = v46;
  if (v46)
  {
    unint64_t v32 = (unint64_t *)&v46->__shared_owners_;
    do
      unint64_t v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  if (v43 && &v44 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)v41);
  return v3;
}

void sub_1000455F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

uint64_t sub_100045644(void *a1)
{
  if ((*(_BYTE *)(a1[1] + 8LL) & 1) == 0) {
    return (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  }
  if (sub_1000BE308())
  {
    *(void *)&__int128 v2 = "DiskImage::Context::unmap(const unmap_extent_t *, size_t)";
    *((void *)&v2 + 1) = 25LL;
    int v3 = 2;
    sub_100045714(v4, &v2);
    sub_10000552C(&v5, (uint64_t)"Disk image is terminated, skipping unmap", 40LL);
    std::ostream::~ostream(&v5, off_1001786C0);
    sub_100045878((uint64_t)v4);
    std::ios::~ios(&v6);
  }

  return 4294967290LL;
}

void sub_100045700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100045714(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_1000457FC((uint64_t)a1, a2);
  *a1 = off_1001785F8;
  a1[45] = &off_1001786F8;
  a1[46] = &off_100178720;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001785F8;
  a1[45] = off_100178680;
  a1[46] = off_1001786A8;
  return a1;
}

void sub_100045798(_Unwind_Exception *a1)
{
}

uint64_t sub_1000457BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000457FC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100178790;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100045864(_Unwind_Exception *a1)
{
}

uint64_t sub_100045878(uint64_t a1)
{
  *(void *)a1 = off_100178790;
  sub_100045AF0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100045914(char *a1)
{
}

uint64_t sub_100045958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004598C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000459D8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001786C0);
  sub_100045878(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100045A10(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001786C0);
  sub_100045878((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100045A50(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001786C0);
  sub_100045878(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100045A90(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001786C0);
  sub_100045878((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100045ADC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100045878(a1);
  operator delete(v1);
}

uint64_t sub_100045AF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100045C40((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100045C18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100045C40(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 173LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    size_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int128 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 173LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100045E24(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100045F0C((uint64_t)a1, a2);
  *a1 = off_100178818;
  a1[45] = &off_100178918;
  a1[46] = &off_100178940;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100178818;
  a1[45] = off_1001788A0;
  a1[46] = off_1001788C8;
  return a1;
}

void sub_100045EA8(_Unwind_Exception *a1)
{
}

uint64_t sub_100045ECC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100045F0C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001789B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100045F74(_Unwind_Exception *a1)
{
}

uint64_t sub_100045F88(uint64_t a1)
{
  *(void *)a1 = off_1001789B0;
  sub_100046200(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100046024(char *a1)
{
}

uint64_t sub_100046068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004609C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000460E8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001788E0);
  sub_100045F88(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100046120(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001788E0);
  sub_100045F88((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100046160(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001788E0);
  sub_100045F88(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000461A0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001788E0);
  sub_100045F88((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000461EC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100045F88(a1);
  operator delete(v1);
}

uint64_t sub_100046200(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100046350((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100046328( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100046350(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 615LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    size_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int128 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 615LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100046534()
{
  unint64_t v0 = atomic_load(&qword_1001A4780);
  if (v0 != -1LL)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_1001A4780, &v3, (void (__cdecl *)(void *))sub_1000466F4);
  }

  return dword_1001A4788;
}

uint64_t sub_100046590()
{
  return 2 * sub_100046534();
}

uint64_t (**sub_1000465AC())()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1001A4798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1001A4798))
  {
    qword_1001A4790 = (unint64_t)(sub_100046650() + 0x3FFFFFFF) >> 30;
    __cxa_guard_release(&qword_1001A4798);
  }

  uint64_t v1 = (uint64_t (**)())&unk_100143F08;
  else {
    return &off_100178A20;
  }
}

void sub_100046638(_Unwind_Exception *a1)
{
}

uint64_t sub_100046650()
{
  unint64_t v0 = atomic_load(&qword_1001A47A0);
  if (v0 != -1LL)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_1001A47A0, &v3, (void (__cdecl *)(void *))sub_1000466AC);
  }

  return qword_1001A47A8;
}

uint64_t sub_1000466AC()
{
  size_t v1 = 8LL;
  uint64_t v2 = 0LL;
  uint64_t result = sysctlbyname("hw.memsize", &v2, &v1, 0LL, 0LL);
  qword_1001A47A8 = v2;
  return result;
}

uint64_t sub_1000466F4()
{
  int v2 = 1;
  size_t v1 = 4LL;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0LL, 0LL);
  dword_1001A4788 = v2;
  return result;
}

double sub_100046744@<D0>(void *a1@<X0>, int *a2@<X1>, size_t a3@<X2>, _OWORD *a4@<X8>)
{
  size_t v7 = a3;
  if (*a2 == 4) {
    sub_10004A404(a1, &v7, &v6);
  }
  else {
    sub_10004A518(a1, a2, &v7, &v6);
  }
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

uint64_t sub_1000467B0(uint64_t a1, void *a2, _DWORD *a3, size_t a4)
{
  size_t v7 = sub_10004683C((void *)a1, a2);
  *size_t v7 = off_100178A80;
  *((_DWORD *)v7 + 1crc32(0LL, 0LL, 0) = *a3;
  v7[6] = a4;
  uint64_t v8 = operator new[](a4);
  bzero(v8, a4);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + sub_100006224(v1 + 64) = v8;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = a1 + 96;
  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = xmmword_100142520;
  return a1;
}

void sub_100046828(_Unwind_Exception *a1)
{
}

void *sub_10004683C(void *a1, void *a2)
{
  double result = sub_10011EBA0(a1);
  *double result = off_100178D68;
  uint64_t v4 = a2[1];
  result[3] = *a2;
  result[4] = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  return result;
}

void *sub_10004688C(void *a1)
{
  *a1 = off_100178D68;
  sub_100006224((uint64_t)(a1 + 3));
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_1000468C8(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = sub_10004683C((void *)a1, a3);
  *int v5 = off_100178A80;
  *((_DWORD *)v5 + 1crc32(0LL, 0LL, 0) = *(_DWORD *)(a2 + 40);
  size_t v6 = *(void *)(a2 + 48);
  v5[6] = v6;
  size_t v7 = operator new[](v6);
  bzero(v7, v6);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + sub_100006224(v1 + 64) = v7;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = a1 + 96;
  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = xmmword_100142520;
  return a1;
}

void sub_100046944(_Unwind_Exception *a1)
{
}

void *sub_100046958(void *a1)
{
  *a1 = off_100178A80;
  sub_10004807C((uint64_t)(a1 + 9));
  int v2 = (void *)a1[7];
  a1[7] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  *a1 = off_100178D68;
  sub_100006224((uint64_t)(a1 + 3));
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_1000469C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[8];
  if (v4 != a1[7])
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v4 = a1[7];
  }

  uint64_t v5 = sub_100042FD0(a1[3], v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = v5;
    *(void *)&__int128 v11 = "int CompressedBackend::read(const sg_entry &)";
    *((void *)&v11 + 1) = 27LL;
    int v12 = 16;
    sub_100046BAC(v13, &v11);
    sub_10000552C(&v14, (uint64_t)"Internal backend read() failed. ret=", 36LL);
    std::ostream::operator<<(&v14, v7);
    std::ios_base::getloc((const std::ios_base *)&v15[*(void *)(v14 - 24) - 8]);
    uint64_t v8 = std::locale::use_facet(&v16, &std::ctype<char>::id);
    uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
    std::locale::~locale(&v16);
    std::ostream::put(&v14, v9);
    std::ostream::flush(&v14);
    std::ostream::~ostream(&v14, off_100178F00);
    sub_1000482A4((uint64_t)v13);
    std::ios::~ios(v15);
  }

  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, a2, a1[7]);
    if (v6)
    {
      return v6;
    }

    else
    {
      *(void *)&__int128 v11 = "int CompressedBackend::read(const sg_entry &)";
      *((void *)&v11 + 1) = 27LL;
      int v12 = 16;
      sub_100046C94(v13, &v11);
      sub_10000552C(&v14, (uint64_t)"Decompression failed", 20LL);
      std::ostream::~ostream(&v14, off_100179120);
      sub_100048850((uint64_t)v13);
      std::ios::~ios(v15);
      return 4294967291LL;
    }
  }

  return v7;
}

void sub_100046B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100046BAC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004A630((uint64_t)a1, a2);
  *a1 = off_100178E38;
  a1[45] = &off_100178F38;
  a1[46] = &off_100178F60;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100178E38;
  a1[45] = off_100178EC0;
  a1[46] = off_100178EE8;
  return a1;
}

void sub_100046C30(_Unwind_Exception *a1)
{
}

uint64_t sub_100046C54(uint64_t a1)
{
  return a1;
}

void *sub_100046C94(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004A6AC((uint64_t)a1, a2);
  *a1 = off_100179058;
  a1[45] = &off_100179158;
  a1[46] = &off_100179180;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179058;
  a1[45] = off_1001790E0;
  a1[46] = off_100179108;
  return a1;
}

void sub_100046D18(_Unwind_Exception *a1)
{
}

uint64_t sub_100046D3C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100046D7C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = a2 + 2;
  unint64_t v8 = a2[2];
  if (a1[6] - v6 + a1[7] < v8)
  {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
    uint64_t v6 = a1[8];
    unint64_t v8 = *v7;
  }

  uint64_t v9 = a1[3];
  uint64_t v10 = a2[3];
  uint64_t v11 = *((void *)sub_100120DCC() + 1);
  *(void *)&__int128 v32 = v6;
  *((void *)&v32 + 1) = v11;
  if (v11)
  {
    int v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  *(void *)unint64_t v33 = v8;
  *(void *)&v33[8] = v10;
  *(void *)&v33[16] = v8;
  v33[24] = 0;
  (*(void (**)(void *__return_ptr, uint64_t, __int128 *))(*(void *)v9 + 128LL))(v39, v9, &v32);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    uint64_t v15 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if (BYTE4(v39[0])) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v39[4] == 0LL;
  }
  if (v17) {
    return sub_10001C2DC(a3, (uint64_t)v39);
  }
  LOBYTE(v3sub_1000296D8(&v5, 2) = 0;
  BYTE4(v3sub_1000296D8(&v5, 2) = 0;
  *((void *)&v32 + 1) = 0LL;
  *(void *)unint64_t v33 = sub_10011E5C4((unint64_t)&v32);
  uint64_t v18 = sub_10011E684((unint64_t)&v32);
  unint64_t v40 = &v32;
  *(void *)&v33[8] = v18;
  *(void *)&v33[16] = &v40;
  sub_10001C2DC((unint64_t)v37, (uint64_t)&v32);
  int64_t v19 = v40;
  uint64_t v38 = v40;
  *((void *)v40 + 4) = &v38;
  uint64_t v20 = a2[1];
  *(void *)&__int128 v32 = *a2;
  *((void *)&v32 + 1) = v20;
  if (v20)
  {
    __int16 v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    int64_t v19 = v38;
  }

  *(_OWORD *)&v33[9] = *(_OWORD *)((char *)v7 + 9);
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v7;
  uint64_t v34 = v19;
  uint64_t v38 = 0LL;
  *((void *)v19 + 4) = &v34;
  sub_10001C2DC((unint64_t)v35, (uint64_t)v39);
  uint64_t v23 = a1[9];
  uint64_t v36 = a1[8];
  uint64_t v24 = a1[10];
  __int16 v25 = (_OWORD *)(v23 + 104 * v24);
  if (v24 == a1[11])
  {
    sub_10004A728(a1 + 9, (void *)(v23 + 104 * v24), 1LL, (uint64_t)&v32, &v40);
  }

  else
  {
    _OWORD *v25 = v32;
    __int128 v32 = 0uLL;
    __int128 v26 = *(_OWORD *)v33;
    *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)&v33[9];
    v25[1] = v26;
    unint64_t v27 = (void *)(v23 + 104 * v24);
    v27[6] = v34;
    v27 += 6;
    uint64_t v34 = 0LL;
    *(void *)(*v27 + 32LL) = v27;
    sub_10001C2DC((unint64_t)(v27 + 1), (uint64_t)v35);
    *(void *)(v23 + 104 * v24 + 96) = v36;
    ++a1[10];
  }

  if (v34) {
    *((void *)v34 + 4) = 0LL;
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    unint64_t v29 = (unint64_t *)(*((void *)&v32 + 1) + 8LL);
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  a1[8] += *v7;
  unint64_t result = sub_10001C2DC(a3, (uint64_t)v37);
  if (v38) {
    *((void *)v38 + 4) = 0LL;
  }
  return result;
}

void sub_10004705C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (a15) {
    *(void *)(a15 + 3sub_1000296D8(&v5, 2) = 0LL;
  }
  sub_100006224((uint64_t)&a9);
  if (a28) {
    *(void *)(a28 + 3sub_1000296D8(&v5, 2) = 0LL;
  }
  _Unwind_Resume(a1);
}

void *sub_1000470D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v4 = v3 + 48;
    uint64_t v5 = 104 * v2;
    do
    {
      unsigned int v6 = sub_10001CCB0((unsigned int *)(v4 + 8));
      unsigned int v7 = v6;
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v10 = v3 + 48;
        uint64_t v11 = *(unsigned int **)v4;
        *uint64_t v11 = v7;
        uint64_t v9 = v11 + 1;
      }

      else if (*(void *)(v4 - 32) <= (unint64_t)v6)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 192LL))( a1,  v4 - 48,  *(void *)(v4 + 48));
        if (v12)
        {
          int v13 = v12;
          uint64_t v10 = v3 + 48;
          uint64_t v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = v13;
        }

        else
        {
          *(void *)&__int128 v16 = "void CompressedBackend::run_futures()";
          *((void *)&v16 + 1) = 35LL;
          int v17 = 16;
          sub_100047260(v18, &v16);
          sub_10000552C(&v19, (uint64_t)"Decompression failed", 20LL);
          std::ostream::~ostream(&v19, off_100179340);
          sub_100048DFC((uint64_t)v18);
          std::ios::~ios(&v20);
          uint64_t v10 = v3 + 48;
          uint64_t v14 = *(unsigned int **)v4;
          **(_DWORD **)uint64_t v4 = -5;
        }

        uint64_t v9 = v14 + 1;
      }

      else
      {
        unint64_t v8 = *(unsigned int **)v4;
        unsigned int *v8 = -5;
        uint64_t v9 = v8 + 1;
        uint64_t v10 = v4;
      }

      _BYTE *v9 = 1;
      sub_10001C27C(v10);
      v3 += 104LL;
      v4 += 104LL;
      v5 -= 104LL;
    }

    while (v5);
  }

  *(void *)(a1 + sub_100006224(v1 + 64) = *(void *)(a1 + 56);
  return sub_10004AB9C((void *)(a1 + 72));
}

void sub_10004724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100047260(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004AB20((uint64_t)a1, a2);
  *a1 = off_100179278;
  a1[45] = &off_100179378;
  a1[46] = &off_1001793A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179278;
  a1[45] = off_100179300;
  a1[46] = off_100179328;
  return a1;
}

void sub_1000472E4(_Unwind_Exception *a1)
{
}

uint64_t sub_100047308(uint64_t a1)
{
  return a1;
}

uint64_t sub_100047348(uint64_t *a1, uint64_t a2)
{
  if (a1[8] != a1[7]) {
    (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 184))(a1, a2);
  if (!v4) {
    return 4294967291LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000474C8(a1[3], a1[7], v4, *(void *)(a2 + 24));
  if ((v6 & 0x80000000) == 0) {
    return v5;
  }
  uint64_t v7 = v6;
  *(void *)&__int128 v11 = "int CompressedBackend::write(const sg_entry &)";
  *((void *)&v11 + 1) = 28LL;
  int v12 = 16;
  sub_100047598(v13, &v11);
  sub_10000552C(&v14, (uint64_t)"Internal backend write() failed. ret=", 37LL);
  std::ostream::operator<<(&v14, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + *(void *)(v14 - 24)));
  unint64_t v8 = std::locale::use_facet(&v16, &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale(&v16);
  std::ostream::put(&v14, v9);
  std::ostream::flush(&v14);
  std::ostream::~ostream(&v14, off_100179560);
  sub_1000493A8((uint64_t)v13);
  std::ios::~ios(&v15);
  return v7;
}

void sub_1000474A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000474C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t v16 = a2;
  int v17 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  char v21 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 96LL))(a1, &v16);
  int v12 = v17;
  if (v17)
  {
    int v13 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  return v11;
}

void sub_100047584( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100047598(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004ABE4((uint64_t)a1, a2);
  *a1 = off_100179498;
  a1[45] = &off_100179598;
  a1[46] = &off_1001795C0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179498;
  a1[45] = off_100179520;
  a1[46] = off_100179548;
  return a1;
}

void sub_10004761C(_Unwind_Exception *a1)
{
}

uint64_t sub_100047640(uint64_t a1)
{
  return a1;
}

void *sub_100047680(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10000552C(a2, (uint64_t)"Compressed(", 11LL);
  int v6 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = sub_1000476DC(v3, &v6);
  return sub_10000552C(v4, (uint64_t)")", 1LL);
}

void *sub_1000476DC(void *a1, _DWORD *a2)
{
  uint64_t v2 = 0LL;
  while (dword_1001796A0[v2] != *a2)
  {
    v2 += 6LL;
    if (v2 == 30)
    {
      uint64_t v3 = "no_match";
      uint64_t v4 = 8LL;
      return sub_10000552C(a1, (uint64_t)v3, v4);
    }
  }

  uint64_t v5 = &dword_1001796A0[v2];
  uint64_t v3 = (const char *)*((void *)v5 + 1);
  uint64_t v4 = *((void *)v5 + 2);
  return sub_10000552C(a1, (uint64_t)v3, v4);
}

void *sub_100047720(void *a1, void *a2, int *a3, size_t a4)
{
  int v13 = *a3;
  int v6 = (void *)sub_1000467B0((uint64_t)a1, a2, &v13, a4);
  void *v6 = off_100178B58;
  v6[221] = 0LL;
  uint64_t v7 = (compression_algorithm *)operator new(4uLL);
  int v14 = *a3;
  sub_100049790(v7, &v14);
  a1[222] = v7;
  size_t v8 = compression_encode_scratch_buffer_size(*v7);
  size_t v9 = compression_decode_scratch_buffer_size((compression_algorithm)*(_DWORD *)a1[222]);
  if (v8 <= v9) {
    size_t v8 = v9;
  }
  a1[220] = v8;
  unint64_t v10 = operator new[](v8);
  bzero(v10, v8);
  uint64_t v11 = (void *)a1[221];
  a1[221] = v10;
  if (v11) {
    operator delete[](v11);
  }
  return a1;
}

void sub_1000477DC(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[222];
  v1[222] = 0LL;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[221];
  v1[221] = 0LL;
  if (v4) {
    operator delete[](v4);
  }
  sub_100046958(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004782C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)sub_1000468C8(a1, a2, a3);
  *uint64_t v5 = off_100178B58;
  size_t v6 = *(void *)(a2 + 1760);
  v5[220] = v6;
  v5[221] = 0LL;
  uint64_t v7 = *(_DWORD **)(a2 + 1776);
  size_t v8 = operator new(4uLL);
  _DWORD *v8 = *v7;
  *(void *)(a1 + 1776) = v8;
  size_t v9 = operator new[](v6);
  bzero(v9, v6);
  *(void *)(a1 + 176_Block_object_dispose(va, 8) = v9;
  return a1;
}

void sub_1000478A8(_Unwind_Exception *a1)
{
  v1[222] = 0LL;
  operator delete(v2);
  uint64_t v4 = (void *)v1[221];
  v1[221] = 0LL;
  if (v4) {
    operator delete[](v4);
  }
  sub_100046958(v1);
  _Unwind_Resume(a1);
}

size_t sub_1000478E4(uint64_t a1, uint64_t a2, const uint8_t *a3)
{
  return compression_decode_buffer( *(uint8_t **)a2,  *(void *)(a2 + 32),  a3,  *(void *)(a2 + 16),  *(void **)(a1 + 1768),  (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

size_t sub_100047908(uint64_t a1, uint64_t a2)
{
  return compression_encode_buffer( *(uint8_t **)(a1 + 56),  *(void *)(a2 + 16),  *(const uint8_t **)a2,  *(void *)(a2 + 16),  *(void **)(a1 + 1768),  (compression_algorithm)**(_DWORD **)(a1 + 1776));
}

double sub_10004792C@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

uint64_t sub_10004796C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned int destLen = *(void *)(a2 + 32);
  uint64_t v3 = BZ2_bzBuffToBuffDecompress(*(char **)a2, &destLen, a3, *(_DWORD *)(a2 + 16), 0, 0);
  if (!(_DWORD)v3) {
    return destLen;
  }
  uint64_t v4 = v3;
  *(void *)&__int128 v6 = "size_t BZIPCompressedBackend::decompress(const sg_entry &, char *) const";
  *((void *)&v6 + 1) = 40LL;
  int v7 = 16;
  sub_100047A4C(v8, &v6);
  sub_10000552C(&v9, (uint64_t)"BZIP decompression failed, res=", 31LL);
  std::ostream::operator<<(&v9, v4);
  std::ostream::~ostream(&v9, off_1001797F8);
  sub_100049A70((uint64_t)v8);
  std::ios::~ios(&v10);
  return 0LL;
}

void sub_100047A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100047A4C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004AD10((uint64_t)a1, a2);
  *a1 = off_100179730;
  a1[45] = &off_100179830;
  a1[46] = &off_100179858;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179730;
  a1[45] = off_1001797B8;
  a1[46] = off_1001797E0;
  return a1;
}

void sub_100047AD0(_Unwind_Exception *a1)
{
}

uint64_t sub_100047AF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100047B34(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  unsigned int destLen = v2;
  unint64_t v3 = v2 / 0x186A0;
  uint64_t v4 = BZ2_bzBuffToBuffCompress(*(char **)(a1 + 56), &destLen, *(char **)a2, v2, v3 + 1, 0, 0);
  if ((_DWORD)v4 != -8)
  {
    uint64_t v5 = v4;
    if (!(_DWORD)v4) {
      return destLen;
    }
    *(void *)&__int128 v7 = "size_t BZIPCompressedBackend::compress(const sg_entry &) const";
    *((void *)&v7 + 1) = 38LL;
    int v8 = 16;
    sub_100047C48(v9, &v7);
    sub_10000552C(&v10, (uint64_t)"BZIP compression failed, res=", 29LL);
    std::ostream::operator<<(&v10, v5);
    std::ostream::~ostream(&v10, off_100179A18);
    sub_10004A01C((uint64_t)v9);
    std::ios::~ios(&v11);
  }

  return 0LL;
}

void sub_100047C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_100047C48(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10004AD8C((uint64_t)a1, a2);
  *a1 = off_100179950;
  a1[45] = &off_100179A50;
  a1[46] = &off_100179A78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179950;
  a1[45] = off_1001799D8;
  a1[46] = off_100179A00;
  return a1;
}

void sub_100047CCC(_Unwind_Exception *a1)
{
}

uint64_t sub_100047CF0(uint64_t a1)
{
  return a1;
}

double sub_100047D30@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void *sub_100047D70(void *a1)
{
  *a1 = off_100178B58;
  uint64_t v2 = (void *)a1[222];
  a1[222] = 0LL;
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[221];
  a1[221] = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  return sub_100046958(a1);
}

void sub_100047DC0(void *a1)
{
  uint64_t v1 = sub_100047D70(a1);
  operator delete(v1);
}

uint64_t sub_100047DD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16LL))(*(void *)(a1 + 24));
}

uint64_t sub_100047DE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24));
}

uint64_t sub_100047DF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32LL))(*(void *)(a1 + 24));
}

uint64_t sub_100047E04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24));
}

uint64_t sub_100047E14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48LL))(*(void *)(a1 + 24));
}

uint64_t sub_100047E24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56LL))(*(void *)(a1 + 24));
}

void sub_100047E34(void **a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[3] + 72LL))(&v5);
  ((void (*)(void **, uint64_t *))(*a1)[22])(a1, &v5);
  uint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_100047EC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100047ED4(void **a1)
{
  uint64_t v2 = (void *)((uint64_t (*)(void **))(*a1)[8])(a1);
  unint64_t v3 = sub_10000552C(v2, (uint64_t)"(", 1LL);
  unint64_t v4 = (void *)(*(uint64_t (**)(void *, void *))(*a1[3] + 64LL))(a1[3], v3);
  return sub_10000552C(v4, (uint64_t)")", 1LL);
}

uint64_t sub_100047F2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 160LL))(*(void *)(a1 + 24));
}

void sub_100047F3C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100005148((uint64_t)v3);
  sub_10000552C(v3, (uint64_t)"Unexpected context construction by ", 35LL);
  sub_10011EBB4((uint64_t)v3, a1);
  sub_100006AA8((uint64_t)exception, (uint64_t)v3, 0x16u);
}

void sub_100047FC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  uint64_t v31 = v28 + 8;
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf(v31);
  std::ios::~ios(&a27);
  if (v29) {
    __cxa_free_exception(v27);
  }
  _Unwind_Resume(a1);
}

void sub_100048048(void *a1)
{
  uint64_t v1 = sub_100046958(a1);
  operator delete(v1);
}

uint64_t sub_10004805C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80LL))(*(void *)(a1 + 24));
}

uint64_t sub_10004806C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88LL))(*(void *)(a1 + 24));
}

uint64_t sub_10004807C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *(void **)a1;
    do
    {
      uint64_t v4 = v3[6];
      if (v4) {
        *(void *)(v4 + 3sub_1000296D8(&v5, 2) = 0LL;
      }
      --v2;
      unint64_t v3 = (void *)(sub_100006224((uint64_t)v3) + 104);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1000480E0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100178F00);
  sub_1000482A4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100048118(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100178F00);
  sub_1000482A4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100048158(char *a1)
{
}

uint64_t sub_10004819C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000481D0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10004821C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100178F00);
  sub_1000482A4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10004825C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100178F00);
  sub_1000482A4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000482A4(uint64_t a1)
{
  *(void *)a1 = off_100178FD0;
  sub_100048340(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100048340(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000484A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100048468( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100048494(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000482A4(a1);
  operator delete(v1);
}

int *sub_1000484A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 49LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 49LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10004868C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179120);
  sub_100048850(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000486C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179120);
  sub_100048850(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100048704(char *a1)
{
}

uint64_t sub_100048748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004877C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000487C8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100179120);
  sub_100048850((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100048808(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179120);
  sub_100048850((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100048850(uint64_t a1)
{
  *(void *)a1 = off_1001791F0;
  sub_1000488EC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000488EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100048A54((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100048A14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100048A40(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100048850(a1);
  operator delete(v1);
}

int *sub_100048A54(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 55LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 55LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100048C38(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179340);
  sub_100048DFC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100048C70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179340);
  sub_100048DFC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100048CB0(char *a1)
{
}

uint64_t sub_100048CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100048D28(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100048D74(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100179340);
  sub_100048DFC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100048DB4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179340);
  sub_100048DFC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100048DFC(uint64_t a1)
{
  *(void *)a1 = off_100179410;
  sub_100048E98(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100048E98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100049000((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100048FC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100048FEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100048DFC(a1);
  operator delete(v1);
}

int *sub_100049000(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 94LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 94LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_1000491E4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179560);
  sub_1000493A8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10004921C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179560);
  sub_1000493A8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004925C(char *a1)
{
}

uint64_t sub_1000492A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000492D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100049320(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100179560);
  sub_1000493A8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100049360(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179560);
  sub_1000493A8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000493A8(uint64_t a1)
{
  *(void *)a1 = off_100179630;
  sub_100049444(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100049444(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000495AC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004956C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100049598(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000493A8(a1);
  operator delete(v1);
}

int *sub_1000495AC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 117LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 117LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

_DWORD *sub_100049790(_DWORD *a1, int *a2)
{
  *a1 = dword_100144100[*a2];
  if (sub_1000BE308())
  {
    *(void *)&__int128 v5 = "StandardCompressedBackend::pimpl::pimpl(algo_t)";
    *((void *)&v5 + 1) = 39LL;
    int v6 = 2;
    sub_10001C910(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"Using compression ", 18LL);
    int v10 = *a2;
    sub_1000476DC(&v8, &v10);
    *(_DWORD *)((char *)&v8 + *(void *)(v8 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v8 + *(void *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    sub_10000552C(&v8, (uint64_t)" constant ", 10LL);
    std::ostream::operator<<(&v8, *a1);
    std::ostream::~ostream(&v8, off_100173250);
    sub_10001D0CC((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  return a1;
}

void sub_100049898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1000498AC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001797F8);
  sub_100049A70(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000498E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001797F8);
  sub_100049A70(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100049924(char *a1)
{
}

uint64_t sub_100049968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004999C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000499E8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001797F8);
  sub_100049A70((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100049A28(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001797F8);
  sub_100049A70((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100049A70(uint64_t a1)
{
  *(void *)a1 = off_1001798C8;
  sub_100049B0C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100049B0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100049C74((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100049C34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100049C60(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100049A70(a1);
  operator delete(v1);
}

int *sub_100049C74(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 242LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 242LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100049E58(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179A18);
  sub_10004A01C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100049E90(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179A18);
  sub_10004A01C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100049ED0(char *a1)
{
}

uint64_t sub_100049F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100049F48(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100049F94(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100179A18);
  sub_10004A01C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100049FD4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179A18);
  sub_10004A01C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10004A01C(uint64_t a1)
{
  *(void *)a1 = off_100179AE8;
  sub_10004A0B8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10004A0B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10004A220((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004A1E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004A20C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004A01C(a1);
  operator delete(v1);
}

int *sub_10004A220(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 265LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 265LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void sub_10004A404(void *a1@<X1>, size_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x6F8uLL);
  sub_10004A46C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10004A458(_Unwind_Exception *a1)
{
}

void *sub_10004A46C(void *a1, void *a2, size_t *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100179B68;
  size_t v4 = *a3;
  int v6 = 4;
  sub_1000467B0((uint64_t)(a1 + 3), a2, &v6, v4);
  a1[3] = off_100178C30;
  return a1;
}

void sub_10004A4C4(_Unwind_Exception *a1)
{
}

void sub_10004A4D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100179B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004A4E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100179B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10004A508(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10004A518(void *a1@<X1>, int *a2@<X2>, size_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x710uLL);
  sub_10004A590(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10004A57C(_Unwind_Exception *a1)
{
}

void *sub_10004A590(void *a1, void *a2, int *a3, size_t *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100179BB8;
  int v6 = *a3;
  sub_100047720(a1 + 3, a2, &v6, *a4);
  return a1;
}

void sub_10004A5DC(_Unwind_Exception *a1)
{
}

void sub_10004A5F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100179BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004A600(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100179BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10004A620(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10004A630(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100178FD0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004A698(_Unwind_Exception *a1)
{
}

uint64_t sub_10004A6AC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001791F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004A714(_Unwind_Exception *a1)
{
}

void sub_10004A728(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10004A7D8((uint64_t)a1, a3);
  if (v11 >= 0x13B13B13B13B13CLL) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  int v13 = operator new(104 * v11);
  sub_10004A858((uint64_t)a1, (uint64_t)v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_10004A7D8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x13B13B13B13B13BLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x13B13B13B13B13BLL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x13B13B13B13B13BLL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_10004A858(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)a1;
  sub_10004A92C(a1, *(void **)a1, a4, (void *)(*(void *)a1 + 104LL * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (uint64_t i = *(void *)(a1 + 8); i; v10 += 104LL)
    {
      uint64_t v12 = *(void *)(v10 + 48);
      if (v12) {
        *(void *)(v12 + 3sub_1000296D8(&v5, 2) = 0LL;
      }
      --i;
      sub_100006224(v10);
    }

    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }

  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_10004A908(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10004A92C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10004AA3C(a1, a2, a3, a5);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a7;
  *(void *)a7 = 0LL;
  *(void *)(a7 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v13 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(a7 + 25);
  *(_OWORD *)(v12 + 16) = v13;
  *(void *)(v12 + 4_Block_object_dispose(va, 8) = *(void *)(a7 + 48);
  *(void *)(a7 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(*(void *)(v12 + 48) + 32LL) = v12 + 48;
  sub_10001C2DC(v12 + 56, a7 + 56);
  *(void *)(v12 + 96) = *(void *)(a7 + 96);
  return sub_10004AA3C(a1, a3, a4, v12 + 104 * a6);
}

void sub_10004A9E8(_Unwind_Exception *a1)
{
  if (*(void *)v3) {
    *(void *)(*(void *)v3 + 32LL) = 0LL;
  }
  sub_100006224(v2);
  for (; v1 != v2; v1 += 104LL)
  {
    uint64_t v5 = *(void *)(v1 + 48);
    if (v5) {
      *(void *)(v5 + 3sub_1000296D8(&v5, 2) = 0LL;
    }
    sub_100006224(v1);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10004AA3C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      unint64_t v8 = &a2[v7];
      uint64_t v9 = a4 + v7 * 8;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)&a2[v7];
      void *v8 = 0LL;
      v8[1] = 0LL;
      __int128 v10 = *(_OWORD *)&a2[v7 + 2];
      *(_OWORD *)(v9 + 25) = *(_OWORD *)((char *)&a2[v7 + 3] + 1);
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(a4 + v7 * 8 + 4_Block_object_dispose(va, 8) = a2[v7 + 6];
      v8[6] = 0LL;
      *(void *)(*(void *)(a4 + v7 * 8 + 48) + 32LL) = a4 + v7 * 8 + 48;
      sub_10001C2DC(a4 + v7 * 8 + 56, (uint64_t)&a2[v7 + 7]);
      *(void *)(v9 + 96) = a2[v7 + 12];
      v7 += 13LL;
    }

    while (v8 + 13 != a3);
    a4 += v7 * 8;
  }

  return a4;
}

void sub_10004AAE4(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4) {
    *(void *)(v4 + 3sub_1000296D8(&v5, 2) = 0LL;
  }
  sub_1001262D4(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_10004AB0C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004AB20(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100179410;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004AB88(_Unwind_Exception *a1)
{
}

void *sub_10004AB9C(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2)
  {
    double result = (void *)*result;
    do
    {
      uint64_t v3 = result[6];
      if (v3) {
        *(void *)(v3 + 3sub_1000296D8(&v5, 2) = 0LL;
      }
      --v2;
      double result = (void *)(sub_100006224((uint64_t)result) + 104);
    }

    while (v2);
  }

  v1[1] = 0LL;
  return result;
}

uint64_t sub_10004ABE4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100179630;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004AC4C(_Unwind_Exception *a1)
{
}

void sub_10004AC60(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x710uLL);
  sub_10004ACC8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10004ACB4(_Unwind_Exception *a1)
{
}

void *sub_10004ACC8(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100179BB8;
  sub_10004782C((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10004ACFC(_Unwind_Exception *a1)
{
}

uint64_t sub_10004AD10(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001798C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004AD78(_Unwind_Exception *a1)
{
}

uint64_t sub_10004AD8C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100179AE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004ADF4(_Unwind_Exception *a1)
{
}

void sub_10004AE08(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x6F8uLL);
  sub_10004AE70(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10004AE5C(_Unwind_Exception *a1)
{
}

void *sub_10004AE70(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100179B68;
  sub_1000468C8((uint64_t)(a1 + 3), a2, a3);
  a1[3] = off_100178C30;
  return a1;
}

void sub_10004AEB0(_Unwind_Exception *a1)
{
}

unint64_t *sub_10004AEC4(unint64_t *result)
{
  do
    unint64_t v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

void sub_10004AED8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  do
  {
    unint64_t v3 = __ldaxr((unint64_t *)a1);
    unint64_t v4 = v3 - 1;
  }

  while (__stlxr(v4, (unint64_t *)a1));
  if (!v4 && *(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 7sub_1000296D8(&v5, 2) = 0;
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
  }

  std::mutex::unlock(v2);
}

uint64_t sub_10004AF2C(uint64_t result)
{
  do
    unint64_t v1 = __ldaxr((unint64_t *)result);
  while (__stlxr(v1 + 1, (unint64_t *)result));
  *(_BYTE *)(result + 7sub_1000296D8(&v5, 2) = 1;
  return result;
}

void sub_10004AF48(uint64_t a1)
{
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  do
  {
    unint64_t v2 = __ldaxr((unint64_t *)a1);
    unint64_t v3 = v2 - 1;
  }

  while (__stlxr(v3, (unint64_t *)a1));
  if (v3)
  {
    while (*(_BYTE *)(a1 + 72))
      std::condition_variable::wait((std::condition_variable *)(a1 + 80), &v4);
  }

  else
  {
    *(_BYTE *)(a1 + 7sub_1000296D8(&v5, 2) = 0;
  }

  if (v4.__owns_) {
    std::mutex::unlock(v4.__m_);
  }
}

uint64_t sub_10004AFCC(uint64_t a1, unint64_t a2)
{
  unint64_t v19 = a2;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  LOBYTE(v15[0]) = 0;
  sub_10004CED4((uint64_t **)a1, &v19, &v19, v15);
  char v4 = v3;
  if ((v3 & 1) == 0)
  {
    if (sub_1000BE308())
    {
      *(void *)&__int128 v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36LL;
      int v14 = 2;
      sub_10004B284(v15, &v13);
      sub_10000552C(&v16, (uint64_t)"Band ", 5LL);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v16, v19);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      sub_10000552C(&v16, (uint64_t)" was opened in the background, waiting for it to become available", 65LL);
      std::ostream::~ostream(&v16, off_100179D00);
      sub_10004BEA4((uint64_t)v15);
      std::ios::~ios(v17);
    }

    uint64_t v7 = *(void **)(a1 + 8);
    uint64_t v6 = a1 + 8;
    __int128 v5 = v7;
    if (v7)
    {
      do
      {
        unint64_t v8 = (void *)v6;
        do
        {
          unint64_t v9 = v5[4];
          BOOL v10 = v9 >= v19;
          if (v9 >= v19) {
            unint64_t v11 = v5;
          }
          else {
            unint64_t v11 = v5 + 1;
          }
          if (v10) {
            unint64_t v8 = v5;
          }
          __int128 v5 = (void *)*v11;
        }

        while (*v11);
        if (v8 == (void *)v6) {
          break;
        }
        if (v19 < v8[4]) {
          break;
        }
        if (*((_BYTE *)v8 + 40)) {
          break;
        }
        std::condition_variable::wait((std::condition_variable *)(v6 + 80), &__lk);
        __int128 v5 = *(void **)v6;
      }

      while (*(void *)v6);
    }

    if (sub_1000BE308())
    {
      *(void *)&__int128 v13 = "sparse_bundles::open_bands_t::insert(uint64_t)";
      *((void *)&v13 + 1) = 36LL;
      int v14 = 2;
      sub_10004B36C(v15, &v13);
      sub_10000552C(&v16, (uint64_t)"Band ", 5LL);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v16, v19);
      *(_DWORD *)&v17[*(void *)(v16 - 24)] = *(_DWORD *)&v17[*(void *)(v16 - 24)] & 0xFFFFFFB5 | 2;
      sub_10000552C(&v16, (uint64_t)" is now available", 17LL);
      std::ostream::~ostream(&v16, off_100179F20);
      sub_10004C450((uint64_t)v15);
      std::ios::~ios(v17);
    }
  }

  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v4 & 1;
}

void sub_10004B23C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(_BYTE *)(v13 - 64)) {
    std::mutex::unlock(*(std::mutex **)(v13 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *sub_10004B284(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10004CF98((uint64_t)a1, a2);
  *a1 = off_100179C38;
  a1[45] = &off_100179D38;
  a1[46] = &off_100179D60;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179C38;
  a1[45] = off_100179CC0;
  a1[46] = off_100179CE8;
  return a1;
}

void sub_10004B308(_Unwind_Exception *a1)
{
}

uint64_t sub_10004B32C(uint64_t a1)
{
  return a1;
}

void *sub_10004B36C(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10004D014((uint64_t)a1, a2);
  *a1 = off_100179E58;
  a1[45] = &off_100179F58;
  a1[46] = &off_100179F80;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100179E58;
  a1[45] = off_100179EE0;
  a1[46] = off_100179F08;
  return a1;
}

void sub_10004B3F0(_Unwind_Exception *a1)
{
}

uint64_t sub_10004B414(uint64_t a1)
{
  return a1;
}

void sub_10004B454(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v8 = (void *)(a1 + 8);
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v7 + 1;
    }
    if (v10) {
      unint64_t v8 = v7;
    }
    uint64_t v7 = (void *)*v11;
  }

  while (*v11);
  if (v8 == (void *)(a1 + 8) || v8[4] > a2) {
LABEL_12:
  }
    unint64_t v8 = (void *)(a1 + 8);
  *((_BYTE *)v8 + 4crc32(0LL, 0LL, 0) = a3;
  if (a3) {
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  }
  std::mutex::unlock(v6);
}

void sub_10004B4E4(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  char v3 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_10004D090(a1, &v9);
  if (sub_1000BE308())
  {
    *(void *)&__int128 v4 = "sparse_bundles::open_bands_t::remove(uint64_t)";
    *((void *)&v4 + 1) = 36LL;
    int v5 = 2;
    sub_10004B634(v6, &v4);
    sub_10000552C(&v7, (uint64_t)"Band ", 5LL);
    *(_DWORD *)((char *)&v7 + *(void *)(v7 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v7 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v7, v9);
    *(_DWORD *)((char *)&v7 + *(void *)(v7 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v7 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 2;
    sub_10000552C(&v7, (uint64_t)" is closed, notifying waiters", 29LL);
    std::ostream::~ostream(&v7, off_10017A140);
    sub_10004C9FC((uint64_t)v6);
    std::ios::~ios(&v8);
  }

  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v3);
}

void sub_10004B60C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void *sub_10004B634(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_10004D108((uint64_t)a1, a2);
  *a1 = off_10017A078;
  a1[45] = &off_10017A178;
  a1[46] = &off_10017A1A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017A078;
  a1[45] = off_10017A100;
  a1[46] = off_10017A128;
  return a1;
}

void sub_10004B6B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10004B6DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004B71C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  int v7 = 0;
  sub_10004D184(&v7, __p);
  __int128 v3 = *(_OWORD *)__p;
  *(void *)(a1 + 19sub_1000296D8(&v5, 2) = 0LL;
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 136) = 1018212795LL;
  *(_OWORD *)(a1 + 56) = xmmword_100144320;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16crc32(0LL, 0LL, 0) = 0u;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 20crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 850045863LL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 23sub_1000296D8(&v5, 2) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 2sub_100006224(v1 + 64) = 0LL;
  *(void *)(a1 + 27sub_1000296D8(&v5, 2) = 1018212795LL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31sub_1000296D8(&v5, 2) = 0u;
  *(_OWORD *)(a1 + 28crc32(0LL, 0LL, 0) = 0u;
  sub_100006174(__p, "com.apple.diskimages.band_management");
  sub_100046534();
  sub_10004D52C((void *)(a1 + 328));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  sub_10004D810(a1 + 328, 0LL, a1 + 392);
  sub_10004D530(a1 + 328, 3);
  return a1;
}

void sub_10004B844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v21 = *(void *)(v14 + 320);
  *(void *)(v14 + 32crc32(0LL, 0LL, 0) = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  sub_10004B900(v15);
  std::condition_variable::~condition_variable(v16);
  std::mutex::~mutex((std::mutex *)(v15 - 120));
  sub_100006224(v14 + 24);
  uint64_t v22 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16LL))(v22);
  }
  uint64_t v23 = *v19;
  uint64_t *v19 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16LL))(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10004B900(uint64_t a1)
{
  return a1;
}

void sub_10004B940(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0LL;
  BOOL v10 = &v9;
  uint64_t v11 = 0x4802000000LL;
  uint64_t v12 = sub_10004BAE8;
  uint64_t v13 = sub_10004BB0C;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  __int128 __p = 0LL;
  int v17 = 0;
  sub_10004D810(a1 + 328, 0LL, (uint64_t)v18);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  uint64_t v8[2] = sub_10004BB20;
  v8[3] = &unk_100179C00;
  v8[4] = a2;
  v8[5] = &v9;
  sub_10004D630(v18, v8);
  sub_10004D790(v18);
  if (*((_DWORD *)v10 + 16))
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v4 = v10;
    uint64_t v5 = *((unsigned int *)v10 + 16);
    *(void *)exception = &off_100196FC8;
    char v6 = std::generic_category();
    *((void *)exception + 1) = v5;
    *((void *)exception + sub_1000296D8(&v5, 2) = v6;
    uint64_t v7 = v4[7];
    *(_OWORD *)(exception + 24) = *(_OWORD *)(v4 + 5);
    *((void *)exception + 5) = v7;
    v4[6] = 0LL;
    v4[7] = 0LL;
    v4[5] = 0LL;
    exception[48] = 1;
  }

  _Block_object_dispose(&v9, 8);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_10004BAAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10004BAE8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4crc32(0LL, 0LL, 0) = result;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 4crc32(0LL, 0LL, 0) = 0LL;
  *(_DWORD *)(a1 + sub_100006224(v1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_10004BB0C(uint64_t a1)
{
}

uint64_t sub_10004BB20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004BBF4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(_DWORD *)((char *)v6 + *(void *)(v5 - sub_10003AF44((const void **)(v10 + 24)) = *(_DWORD *)((_BYTE *)v6 + *(void *)(v5 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(&v5, a1);
  sub_100005F24((uint64_t)v6, a2);
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf(v6);
  return std::ios::~ios(&v8);
}

void sub_10004BCCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10004BCE0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179D00);
  sub_10004BEA4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10004BD18(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179D00);
  sub_10004BEA4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004BD58(char *a1)
{
}

uint64_t sub_10004BD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004BDD0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10004BE1C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100179D00);
  sub_10004BEA4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10004BE5C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179D00);
  sub_10004BEA4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10004BEA4(uint64_t a1)
{
  *(void *)a1 = off_100179DD0;
  sub_10004BF40(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10004BF40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10004C0A8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004C068( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004C094(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004BEA4(a1);
  operator delete(v1);
}

int *sub_10004C0A8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      BOOL v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 72LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 72LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10004C28C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100179F20);
  sub_10004C450(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10004C2C4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179F20);
  sub_10004C450(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004C304(char *a1)
{
}

uint64_t sub_10004C348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004C37C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10004C3C8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100179F20);
  sub_10004C450((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10004C408(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100179F20);
  sub_10004C450((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10004C450(uint64_t a1)
{
  *(void *)a1 = off_100179FF0;
  sub_10004C4EC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10004C4EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10004C654((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004C614( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004C640(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004C450(a1);
  operator delete(v1);
}

int *sub_10004C654(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      BOOL v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 79LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 79LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10004C838(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A140);
  sub_10004C9FC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10004C870(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017A140);
  sub_10004C9FC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10004C8B0(char *a1)
{
}

uint64_t sub_10004C8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10004C928(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10004C974(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017A140);
  sub_10004C9FC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10004C9B4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017A140);
  sub_10004C9FC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10004C9FC(uint64_t a1)
{
  *(void *)a1 = off_10017A210;
  sub_10004CA98(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10004CA98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10004CC00((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004CBC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004CBEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10004C9FC(a1);
  operator delete(v1);
}

int *sub_10004CC00(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      BOOL v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 98LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 98LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

std::string *sub_10004CDE4(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = (char)__dst->__r_.__value_.__s.__size_;
  if ((v6 & 0x80000000) != 0)
  {
    std::string::size_type cap = __dst->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }

    std::string::size_type v6 = HIBYTE(cap);
    uint64_t v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }

  else
  {
    uint64_t v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = __dst->__r_.__value_.__s.__size_;
      std::string::size_type v9 = 22LL;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0LL, size, __len, __src);
      return __dst;
    }
  }

  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = __dst->__r_.__value_.__s.__size_;
  }

  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    __dst->__r_.__value_.__s.__size_ = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_10004CEA0(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_10004CDE4(a1, __s, v4);
}

uint64_t **sub_10004CED4(uint64_t **a1, unint64_t *a2, void *a3, _BYTE *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }

      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v10 = a1 + 1;
LABEL_10:
    uint64_t v12 = operator new(0x30uLL);
    void v12[4] = *a3;
    *((_BYTE *)v12 + 4crc32(0LL, 0LL, 0) = *a4;
    sub_10000CC04(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }

  return v10;
}

uint64_t sub_10004CF98(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100179DD0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004D000(_Unwind_Exception *a1)
{
}

uint64_t sub_10004D014(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100179FF0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004D07C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004D090(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  char v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      char v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }

  while (*v7);
  sub_10000D0E4((uint64_t **)a1, v4);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_10004D108(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017A210;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10004D170(_Unwind_Exception *a1)
{
}

void sub_10004D184(int *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x48uLL);
  sub_10004D1E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_10001C350((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_10004D1D0(_Unwind_Exception *a1)
{
}

void *sub_10004D1E4(void *a1, int *a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_100172B38;
  uint64_t v3 = *a2;
  uint64_t v4 = sub_100120D7C();
  uint64_t v6 = v5;
  sub_10011EBA0(a1 + 3);
  a1[3] = &off_100172B88;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v6;
  return a1;
}

void sub_10004D248(_Unwind_Exception *a1)
{
}

char *sub_10004D25C(char *__dst, __int128 *a2, unint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10000AD88(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + sub_1000296D8(&v5, 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v5;
  }

  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 4crc32(0LL, 0LL, 0) = 0u;
  __dst[56] = a3 != 0;
  if (a3)
  {
    sub_10004D398((void *)__dst + 3, a3);
    do
    {
      uint64_t v6 = __dst;
      if (__dst[23] < 0) {
        uint64_t v6 = *(char **)__dst;
      }
      sub_1001018F4((int)&v9, v6);
      sub_10004D428((void *)__dst + 3, &v9);
      sub_100101848(&v9);
      --a3;
    }

    while (a3);
  }

  else
  {
    uint64_t v7 = __dst;
    if (__dst[23] < 0) {
      uint64_t v7 = *(char **)__dst;
    }
    sub_1001018F4((int)&v9, v7);
    sub_10004D428((void *)__dst + 3, &v9);
    sub_100101848(&v9);
  }

  return __dst;
}

void sub_10004D354(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10004D398(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_100045090();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000450A4(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    sub_10004DA14(a1, v7);
    return sub_10004DA98((uint64_t)v7);
  }

  return result;
}

void sub_10004D414(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_10004D428(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 3;
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_1000450A4(v4, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[8 * v9];
    uint64_t v18 = &v13[8 * v12];
    sub_1001018F8(v16, a2);
    int v17 = v16 + 8;
    sub_10004DA14(a1, &v15);
    unint64_t v8 = a1[1];
    sub_10004DA98((uint64_t)&v15);
  }

  else
  {
    sub_1001018F8(*(void **)(v4 - 8), a2);
    unint64_t v8 = v7 + 8;
    a1[1] = v7 + 8;
  }

  a1[1] = v8;
  return v8 - 8;
}

void sub_10004D518(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10004D530(uint64_t result, int a2)
{
  uint64_t v2 = *(dispatch_object_t **)(result + 24);
  for (uint64_t i = *(dispatch_object_t **)(result + 32); v2 != i; ++v2)
    uint64_t result = sub_1001019A8(v2, a2);
  return result;
}

void sub_10004D578(uint64_t a1)
{
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + sub_100006224(v50 + 112) = v2 - 1;
LABEL_5:
    std::mutex::unlock(v5.__m_);
    return;
  }

  do
  {
    std::condition_variable::wait((std::condition_variable *)a1, &v5);
    uint64_t v3 = *(void *)(a1 + 112);
  }

  while (!v3);
  BOOL owns = v5.__owns_;
  *(void *)(a1 + sub_100006224(v50 + 112) = v3 - 1;
  if (owns) {
    goto LABEL_5;
  }
}

void sub_10004D5F0(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  ++*(void *)(a1 + 112);
  std::condition_variable::notify_one((std::condition_variable *)a1);
  std::mutex::unlock(v2);
}

void sub_10004D630(dispatch_group_t *a1, void *a2)
{
  if (*((_BYTE *)a1 + 136))
  {
    sub_10004D578((uint64_t)(a1 + 2));
    dispatch_group_t v4 = *a1;
    std::unique_lock<std::mutex> v5 = (unint64_t *)((char *)*a1 + 48);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    uint64_t v8 = (uint64_t)v4 + 24;
    uint64_t v7 = *((void *)v4 + 3);
    unint64_t v9 = v6 % ((*(void *)(v8 + 8) - v7) >> 3);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000LL;
    void v13[2] = sub_10004D71C;
    void v13[3] = &unk_10017A288;
    v13[4] = a2;
    v13[5] = a1;
    sub_100101910((dispatch_queue_t *)(v7 + 8 * v9), a1 + 1, v13);
  }

  else
  {
    dispatch_group_t v10 = *a1;
    uint64_t v11 = (unint64_t *)((char *)*a1 + 48);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    sub_100101910( (dispatch_queue_t *)(*((void *)v10 + 3)
                         + 8 * (v12 % ((uint64_t)(*((void *)v10 + 4) - *((void *)v10 + 3)) >> 3))),
      a1 + 1,
      a2);
  }

void sub_10004D71C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  sub_10004D5F0(v1 + 16);
}

uint64_t sub_10004D744(uint64_t a1, dispatch_time_t a2)
{
  return sub_100101874((dispatch_group_t *)(a1 + 8), a2);
}

uint64_t sub_10004D74C(uint64_t a1)
{
  uint64_t v2 = (dispatch_object_s **)(a1 + 8);
  sub_100101874((dispatch_group_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
  sub_10004DAE4(a1 + 16);
  sub_100101848(v2);
  return a1;
}

uint64_t sub_10004D794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_100101820((dispatch_group_t *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (a3)
  {
    sub_10004DB1C(a1 + 16);
    *(void *)(a1 + 16) = 1018212795LL;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 4crc32(0LL, 0LL, 0) = 0u;
    *(void *)(a1 + 56) = 0LL;
    *(void *)(a1 + sub_100006224(v1 + 64) = 850045863LL;
    *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = 0u;
    *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 12crc32(0LL, 0LL, 0) = 0LL;
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = a3;
    *(_BYTE *)(a1 + 136) = 1;
  }

  return a1;
}

uint64_t sub_10004D810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10004D794(a3, a1, a2);
}

uint64_t sub_10004D820@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10004D834(a4, a1, a2, a3);
}

uint64_t sub_10004D834(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  unint64_t v6 = a2 + 6;
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2[3] + 8 * (v7 % ((uint64_t)(a2[4] - a2[3]) >> 3));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000LL;
  v9[2] = sub_10004D918;
  v9[3] = &unk_10017A2B0;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a4;
  sub_100101A44((dispatch_block_t *)(a1 + 16), v9);
  if (*(void *)(a1 + 16) && *(_BYTE *)(*(void *)a1 + 56LL)) {
    sub_100101920(*(dispatch_queue_t **)(a1 + 8), (dispatch_block_t *)(a1 + 16), a4);
  }
  return a1;
}

void sub_10004D904(_Unwind_Exception *a1)
{
}

void sub_10004D918(void *a1)
{
  uint64_t v2 = a1[5];
  (*(void (**)(void))(a1[4] + 16LL))();
  sub_100101920(*(dispatch_queue_t **)(v2 + 8), (dispatch_block_t *)(v2 + 16), a1[6]);
}

uint64_t sub_10004D94C(uint64_t a1)
{
  return a1;
}

void sub_10004D97C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (*(_BYTE *)(*(void *)a1 + 56LL))
    {
      uint64_t v2 = *(dispatch_queue_t **)(a1 + 8);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 0x40000000LL;
      _OWORD v3[2] = sub_10004DA04;
      _OWORD v3[3] = &unk_10017A2D0;
      v3[4] = a1;
      sub_100101908(v2, v3);
      sub_100101980(*(dispatch_queue_t **)(a1 + 8), &stru_10017A310);
    }
  }

void sub_10004DA04(uint64_t a1)
{
}

void *sub_10004DA14(void *a1, void *a2)
{
  std::unique_lock<std::mutex> v5 = (void *)*a1;
  dispatch_group_t v4 = (void *)a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
    uint64_t result = sub_1001018F8(result - 1, --v4);
  a2[1] = result;
  unint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10004DA98(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_100101848((dispatch_object_s **)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10004DAE4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
  }

  return a1;
}

void sub_10004DB1C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    std::condition_variable::~condition_variable((std::condition_variable *)a1);
    *(_BYTE *)(a1 + 12crc32(0LL, 0LL, 0) = 0;
  }

void sub_10004DC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004DCF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004DFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E77C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004E8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004EA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004EB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004EBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004EC20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

#error "10004F3C0: call analysis failed (funcsize=223)"
BOOL __cdecl -[DIAttachParams updateStatFSWithError:](DIAttachParams *self, SEL a2, id *a3)
{
  void *v5;
  unsigned int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  DIStatFS *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  BOOL v19;
  void *v20;
  void *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::unique_lock<std::mutex> v5 = (void *)objc_claimAutoreleasedReturnValue(-[DIBaseParams inputURL](self, "inputURL"));
  unint64_t v6 = [v5 isFileURL];

  if (v6)
  {
    -[DIBaseParams backend](self, "backend");
    sub_10011EBCC((uint64_t)&v23, &v25);
    unint64_t v7 = sub_100105A68((uint64_t)&v25);
    uint64_t v8 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        dispatch_group_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    uint64_t v11 = v24;
    if (!v24) {
      goto LABEL_11;
    }
    unint64_t v12 = (unint64_t *)&v24->__shared_owners_;
    do
      uint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }

    else
    {
LABEL_11:
      if ((v7 & 0x80000000) == 0)
      {
LABEL_12:
        os_log_type_t v14 = -[DIStatFS initWithFileDescriptor:error:]( objc_alloc(&OBJC_CLASS___DIStatFS),  "initWithFileDescriptor:error:",  v7,  a3);
        -[DIAttachParams setInputStatFS:](self, "setInputStatFS:", v14);

        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[DIAttachParams inputStatFS](self, "inputStatFS"));
        if (!v15) {
          return 0;
        }
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[DIAttachParams inputStatFS](self, "inputStatFS"));
        [v16 logWithHeader:@"Input underlying FS"];

        goto LABEL_14;
      }
    }

    return +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  @"Unexpected backend type for file",  a3);
  }

void sub_10004F894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004FE40(_Unwind_Exception *a1, int a2)
{
  unint64_t v7 = v5;

  if (a2 == 1)
  {
    id v10 = [objc_begin_catch(a1) reason];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_claimAutoreleasedReturnValue( +[DIError nilWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "nilWithEnumValue:verboseInfo:error:",  150LL,  v11,  v2));

    objc_end_catch();
    JUMPOUT(0x10004FDF8LL);
  }

  _Unwind_Resume(a1);
}

void sub_100050088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000502C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005035C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005047C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100050528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100050624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100050708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000509F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  sub_100006224((uint64_t)&__p);
  sub_100050A90(&a20);

  _Unwind_Resume(a1);
}

void *sub_100050A90(void *a1)
{
  *a1 = off_1001920D8;
  a1[3] = off_1001921B8;
  a1[4] = off_1001921F0;
  sub_100052E00((uint64_t)(a1 + 8));
  sub_100006224((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100051128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000512B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000513E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005147C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100051580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000519C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22)
{
  if (a2 == 1)
  {
    id v25 = +[DIError nilWithDIException:prefix:error:]( &OBJC_CLASS___DIError,  "nilWithDIException:prefix:error:",  __cxa_begin_catch(a1),  @"failed to open existing output file",  v22);
    objc_claimAutoreleasedReturnValue(v25);
    __cxa_end_catch();
    JUMPOUT(0x100051878LL);
  }

  _Unwind_Resume(a1);
}

LABEL_65:
      unint64_t v6 = 0;
      goto LABEL_66;
    }

LABEL_46:
    goto LABEL_65;
  }

  std::unique_lock<std::mutex> v5 = @"Invalid output format argument";
  return +[DIError failWithPOSIXCode:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithPOSIXCode:verboseInfo:error:",  22LL,  v5,  a3);
}

void sub_10005250C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  if (a2 == 1)
  {
    id v30 = [objc_begin_catch(a1) reason];
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    +[DIError failWithEnumValue:verboseInfo:error:]( &OBJC_CLASS___DIError,  "failWithEnumValue:verboseInfo:error:",  150LL,  v31,  v22);

    objc_end_catch();
    JUMPOUT(0x100051B40LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100052808(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4crc32(0LL, 0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4crc32(0LL, 0LL, 0) = 0LL;
  return result;
}

void sub_100052818(uint64_t a1)
{
}

id sub_100052820(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) signalCommandCompletedWithXpcError:a2];
}

void sub_1000528A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100052AA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v9 = a4;
  unint64_t v7 = sub_10011EBA0((void *)a1);
  *unint64_t v7 = off_1001920D8;
  v7[3] = off_1001921B8;
  v7[4] = off_1001921F0;
  sub_100102E5C(v10, a2, a3);
  sub_100052BA4((uint64_t)v10, &v9, (void *)(a1 + 40));
  sub_100102838((uint64_t)v10);
  *(void *)(a1 + 56) = *(void *)(a1 + 40) + 8LL;
  *(void *)(a1 + sub_100006224(v1 + 64) = a1 + 88;
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = xmmword_100142520;
  return a1;
}

void sub_100052B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  dispatch_group_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_100052BA4@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0xB0uLL);
  uint64_t result = sub_100052C04(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100052BF0(_Unwind_Exception *a1)
{
}

void *sub_100052C04(void *a1, uint64_t a2, char *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017A368;
  sub_100052C8C((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_100052C3C(_Unwind_Exception *a1)
{
}

void sub_100052C50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017A368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100052C60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10017A368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100052C80(uint64_t a1)
{
  return sub_100052DD0(a1 + 24);
}

uint64_t sub_100052C8C(uint64_t a1, uint64_t a2, char a3)
{
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = -1;
  *(void *)a1 = off_10017A3B8;
  __int128 v4 = *(_OWORD *)(a2 + 12);
  __int128 v5 = *(_OWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 2_Block_object_dispose(va, 8) = v5;
  *(_OWORD *)(a1 + 1sub_1000296D8(&v5, 2) = v4;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = a3;
  *(_BYTE *)(a1 + 49) = sub_100052D24(a1);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + sub_100006224(v1 + 64) = v6;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = 0LL;
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0LL;
  return a1;
}

void sub_100052D10(_Unwind_Exception *a1)
{
}

BOOL sub_100052D24(uint64_t a1)
{
  unint64_t v1 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  if (v1 == 5)
  {
    uint64_t v2 = (void **)__p[0];
    if ((v9 & 0x80u) == 0) {
      uint64_t v2 = __p;
    }
    int v3 = *(_DWORD *)v2;
    int v4 = *((unsigned __int8 *)v2 + 4);
    BOOL v6 = v3 == 1717726579 && v4 == 115;
  }

  else
  {
    BOOL v6 = 0LL;
    if ((char)v9 < 0) {
LABEL_15:
    }
      operator delete(__p[0]);
  }

  return v6;
}

uint64_t sub_100052DB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_100052DBC(uint64_t a1)
{
  unint64_t v1 = (void *)sub_100102838(a1);
  operator delete(v1);
}

uint64_t sub_100052DD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136)) {
    sub_100043BCC((uint64_t *)(a1 + 96));
  }
  return sub_100102838(a1);
}

uint64_t sub_100052E00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v3 = *(void **)a1;
    do
    {
      uint64_t v4 = v3[7];
      if (v4) {
        *(void *)(v4 + 3sub_1000296D8(&v5, 2) = 0LL;
      }
      --v2;
      int v3 = (void *)(sub_100006224((uint64_t)v3) + 64);
    }

    while (v2);
  }

  if (*(void *)(a1 + 16) && a1 + 24 != *(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

LABEL_53:
  *__error() = v27;
LABEL_54:
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  v17,  v14));
  uint64_t v44 = v43;
  if (a7) {
    *a7 = v43;
  }

  return v44;
}

void sub_100053634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100053AE4(id a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:",  @"/System/Library/PrivateFrameworks/DiskImages2.framework"));
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:"));
  uint64_t v2 = (void *)qword_1001A47B0;
  qword_1001A47B0 = v1;
}

void sub_100053B4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100053C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000540D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000540F4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

void sub_100054508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100054530(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained signalCommandCompletedWithXpcError:v3];
}

uint64_t make_error_code(uint64_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_1001A47C0);
  if ((v1 & 1) == 0)
  {
    int v3 = result;
    int v2 = __cxa_guard_acquire(&qword_1001A47C0);
    LODWORD(result) = v3;
    if (v2)
    {
      __cxa_atexit( (void (*)(void *))std::error_category::~error_category,  &off_1001A3D80,  (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1001A47C0);
      LODWORD(result) = v3;
    }
  }

  return result;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, std::__fs::filesystem::path *a2, int a3)
{
  BOOL v6 = operator new(0x270uLL);
  bzero(v6, 0x270uLL);
  *a1 = v6;
  sub_100054C2C(a2, (uint64_t)v6, a3, (uint64_t)v13);
  if (!v13[16])
  {
    uint64_t v7 = sub_100054DC8((uint64_t)v13);
    int error_code = make_error_code(162LL);
    if (*(void *)(v7 + 8) != v9 || *(_DWORD *)v7 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)sub_100054DC8((uint64_t)v13);
    }
  }

  return a1;
}

void sub_100054C18(_Unwind_Exception *a1)
{
}

const std::error_category *sub_100054C2C@<X0>( std::__fs::filesystem::path *a1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (LOBYTE(v16[0]) == 255 || LOBYTE(v16[0]) == 0)
  {
    *(void *)&__int128 v14 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::set_path(const std::filesystem::path &, const diskimage_open_params::mode)";
    *((void *)&v14 + 1) = 75LL;
    int v15 = 16;
    sub_100059B3C(v16, &v14);
    sub_10000552C(&v17, (uint64_t)"Diskimageuio: path ", 19LL);
    if ((char)a1->__pn_.__r_.__value_.__s.__size_ < 0)
    {
      sub_10000AD88(__p, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    }

    else
    {
      *(_OWORD *)__int128 __p = *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_;
      int64_t cap = a1->__pn_.__r_.__value_.__l.__cap_;
    }

    if (cap >= 0) {
      id v10 = __p;
    }
    else {
      id v10 = (void **)__p[0];
    }
    if (cap >= 0) {
      uint64_t v11 = HIBYTE(cap);
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_10000552C(&v17, (uint64_t)v10, v11);
    sub_10000552C(&v17, (uint64_t)" doesn't exist", 14LL);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    std::ostream::~ostream(&v17, off_10017AD08);
    sub_10005A464((uint64_t)v16);
    std::ios::~ios(&v18);
    uint64_t result = std::generic_category();
    *(void *)a4 = 2LL;
    *(void *)(a4 + _Block_object_dispose(va, 8) = result;
    *(_BYTE *)(a4 + 16) = 0;
  }

  else
  {
    *(_DWORD *)(a2 + 5sub_100006224(v1 + 64) = a3;
    std::string::operator=((std::string *)a2, &a1->__pn_);
    return (const std::error_category *)sub_100059C24(a2, 0LL, 1LL);
  }

  return result;
}

void sub_100054D98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t sub_100054DC8(uint64_t result)
{
  if (*(_BYTE *)(result + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_10017A4F0;
  }

  return result;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = operator new(0x270uLL);
  bzero(v8, 0x270uLL);
  *a1 = v8;
  sub_100054EF0((uint64_t)v8, a2, a3, a4, v15);
  if (!v15[16])
  {
    uint64_t v9 = sub_100054DC8((uint64_t)v15);
    int error_code = make_error_code(162LL);
    if (*(void *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)sub_100054DC8((uint64_t)v15);
    }
  }

  return a1;
}

void sub_100054EDC(_Unwind_Exception *a1)
{
}

void sub_100054EF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _BYTE *a5@<X8>)
{
  if (a4 == 1) {
    uint64_t v7 = &_mh_execute_header + 2;
  }
  else {
    uint64_t v7 = &_mh_execute_header;
  }
  sub_100069FF0(&v11, a2, a3, v7, v15, 0LL);
  sub_1000566E8(a1 + 48, a1 + 48, (uint64_t)&v11);
  if (v14 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  *(_DWORD *)(a1 + 56crc32(0LL, 0LL, 0) = 12;
  *a5 = 0;
  a5[16] = 1;
}

void *diskimage_uio::diskimage_open_params::diskimage_open_params( void *a1, unsigned int a2, int a3, char a4)
{
  uint64_t v8 = operator new(0x270uLL);
  bzero(v8, 0x270uLL);
  *a1 = v8;
  sub_100055134((uint64_t)v8, a2, a3, a4, (uint64_t)v15);
  if (!v15[16])
  {
    uint64_t v9 = sub_100054DC8((uint64_t)v15);
    int error_code = make_error_code(162LL);
    if (*(void *)(v9 + 8) != v11 || *(_DWORD *)v9 != error_code)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      _OWORD *exception = *(_OWORD *)sub_100054DC8((uint64_t)v15);
    }
  }

  return a1;
}

void sub_100055120(_Unwind_Exception *a1)
{
}

_OWORD *sub_100055134@<X0>( uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v17 = a2;
  char v16 = a4;
  *(_DWORD *)(a1 + 5sub_100006224(v1 + 64) = a3;
  *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = a3;
  int v14 = 2 * ((a3 - 1) < 2);
  sub_10005F9B4(&v17, &v14, &v16, &v15);
  sub_1000198A4(a1 + 24, &v15);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v8 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = operator new(0x4CuLL);
  sub_100115288(v11, v10);
  unint64_t v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v11;
  if (v12) {
    operator delete(v12);
  }
  return sub_100059C24(a1, *(_DWORD *)(a1 + 564), 0, a5);
}

void sub_100055224(_Unwind_Exception *a1, int a2)
{
  __int128 v5 = v3;
  operator delete(v5);
  if (a2 == 2)
  {
    uint64_t v7 = *((unsigned int *)__cxa_begin_catch(a1) + 2);
    uint64_t v8 = std::generic_category();
    *(void *)uint64_t v2 = v7;
    *(void *)(v2 + _Block_object_dispose(va, 8) = v8;
    *(_BYTE *)(v2 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x100055210LL);
  }

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1000551FCLL);
  }

  _Unwind_Resume(a1);
}

void diskimage_uio::diskimage_open_params::create( std::__fs::filesystem::path *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = v4;
  uint64_t v4 = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
}

void diskimage_uio::diskimage_open_params::create( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = v5;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

void diskimage_uio::diskimage_open_params::create( unsigned int a1@<W0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = v5;
  uint64_t v5 = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v5);
}

uint64_t *diskimage_uio::diskimage_open_params::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    sub_100006224(v4 + 608);
    sub_100006224(v4 + 592);
    sub_100006224(v4 + 576);
    sub_100056FB0(v4 + 48);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 4crc32(0LL, 0LL, 0) = 0LL;
    if (v5) {
      operator delete(v5);
    }
    sub_100006224(v4 + 24);
    operator delete((void *)v4);
  }

  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

void diskimage_uio::diskimage_open_params::~diskimage_open_params( diskimage_uio::diskimage_open_params *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    sub_100006224(v2 + 608);
    sub_100006224(v2 + 592);
    sub_100006224(v2 + 576);
    sub_100056FB0(v2 + 48);
    int v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 4crc32(0LL, 0LL, 0) = 0LL;
    if (v3) {
      operator delete(v3);
    }
    sub_100006224(v2 + 24);
    operator delete((void *)v2);
  }

  *(void *)this = 0LL;
}

_OWORD *sub_1000554E8@<X0>(const std::error_category *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = sub_1000590D8(a1, (uint64_t)v6);
  if (v6[16])
  {
    *a2 = a1[5].__vftable != 0LL;
    char v5 = 1;
  }

  else
  {
    uint64_t result = (_OWORD *)sub_100054DC8((uint64_t)v6);
    char v5 = 0;
    *(_OWORD *)a2 = *result;
  }

  a2[16] = v5;
  return result;
}

double diskimage_uio::diskimage_open_params::get_nr_blocks@<D0>( diskimage_uio::diskimage_open_params *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100055558(*(void *)this, a2).n128_u64[0];
  return result;
}

__n128 sub_100055558@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if (v13[16])
  {
    uint64_t v4 = *(unsigned int *)(a1 + 552);
    if ((_DWORD)v4 == -1) {
      sub_100026264();
    }
    v10[0] = &v8;
    ((void (*)(void *, uint64_t))off_10017CAD8[v4])(v10, a1 + 48);
  }

  else
  {
    *(void *)&__int128 v8 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_nr_blocks() const";
    *((void *)&v8 + 1) = 80LL;
    int v9 = 16;
    sub_100060C6C(v10, &v8);
    sub_10000552C(&v11, (uint64_t)"Diskimageuio: query format failed ", 34LL);
    BOOL v6 = (unsigned int *)sub_100054DC8((uint64_t)v13);
    sub_10005AA10((uint64_t)v10, v6);
    std::ostream::~ostream(&v11, off_10017C998);
    sub_100060DD0((uint64_t)v10);
    std::ios::~ios(&v12);
    uint64_t v7 = (__n128 *)sub_100054DC8((uint64_t)v13);
    __n128 result = *v7;
    *a2 = *v7;
    a2[1].n128_u8[0] = 0;
  }

  return result;
}

void sub_10005565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *diskimage_uio::operator<<(void *a1, int a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = "auto";
    uint64_t v3 = 4LL;
  }

  else if (a2 == 1)
  {
    uint64_t v2 = "read write";
    uint64_t v3 = 10LL;
  }

  else if (a2)
  {
    uint64_t v2 = "unknown";
    uint64_t v3 = 7LL;
  }

  else
  {
    uint64_t v2 = "read only";
    uint64_t v3 = 9LL;
  }

  return sub_10000552C(a1, (uint64_t)v2, v3);
}

{
  const char *v2;
  uint64_t v3;
  switch(a2)
  {
    case 1:
      uint64_t v2 = "raw";
      uint64_t v3 = 3LL;
      return sub_10000552C(a1, (uint64_t)v2, v3);
    case 2:
      uint64_t v2 = "udro";
      goto LABEL_11;
    case 3:
      uint64_t v2 = "udzo";
      goto LABEL_11;
    case 4:
      uint64_t v2 = "ulfo";
      goto LABEL_11;
    case 5:
      uint64_t v2 = "ulmo";
      goto LABEL_11;
    case 6:
      uint64_t v2 = "udzo_max";
      uint64_t v3 = 8LL;
      return sub_10000552C(a1, (uint64_t)v2, v3);
    case 7:
      uint64_t v2 = "udsb";
      goto LABEL_11;
    case 8:
      uint64_t v2 = "asif";
LABEL_11:
      uint64_t v3 = 4LL;
      break;
    case 11:
      uint64_t v2 = "pstack";
      uint64_t v3 = 6LL;
      break;
    default:
      uint64_t v2 = "unknown";
      uint64_t v3 = 7LL;
      break;
  }

  return sub_10000552C(a1, (uint64_t)v2, v3);
}

void ***sub_100055774(void ***a1, const void **a2, char *a3, char a4)
{
  *a1 = 0LL;
  if (!*a2
  {
    exception = __cxa_allocate_exception(0x40uLL);
    void *exception = &off_100196FC8;
    uint64_t v38 = std::generic_category();
    exception[1] = 22LL;
    exception[2] = v38;
    *((_BYTE *)exception + 24) = 0;
    *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
    exception[7] = "pstack_header";
    void *exception = &off_10017CD38;
  }

  memset(v46, 0, sizeof(v46));
  uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v7 + 176LL))(v7);
  sub_100061EF8(&__p, a3);
  sub_10010EC08(v8, (uint64_t *)&__p, a4, (uint64_t)&v44);
  if (v44 == v45)
  {
    unint64_t v39 = __cxa_allocate_exception(0x40uLL);
    void *v39 = &off_100196FC8;
    unint64_t v40 = std::generic_category();
    v39[1] = 22LL;
    v39[2] = v40;
    *((_BYTE *)v39 + 24) = 0;
    *((_BYTE *)v39 + 4_Block_object_dispose(va, 8) = 0;
    v39[7] = "pstack_header";
    void *v39 = &off_10017CD38;
  }

  int v9 = (void **)operator new(0x18uLL);
  dispatch_object_s *v9 = 0LL;
  v9[1] = 0LL;
  v9[2] = 0LL;
  __p.__r_.__value_.__r.__words[0] = 0LL;
  sub_100061CC4(a1, v9);
  sub_100061CC4((void ***)&__p, 0LL);
  sub_100055D00((char **)*a1, v45 - v44);
  uint64_t v10 = v44;
  for (uint64_t i = v45; v10 != i; ++v10)
  {
    uint64_t v12 = std::generic_category();
    v42[0] = 22LL;
    v42[1] = v12;
    char v43 = 0;
    uint64_t v13 = (char *)*v10;
    uint64_t v14 = *((void *)*v10 + 7);
    if (v14)
    {
      diskimage_uio::diskimage_open_params::create((uint64_t)(v13 + 32), v14, *((_DWORD *)v13 + 1), (uint64_t)&__p);
      sub_100055DBC((diskimage_uio::diskimage_open_params *)v42, (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16]) {
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      }
    }

    else
    {
      sub_100061EF8(&v41.__pn_, v13 + 8);
      diskimage_uio::diskimage_open_params::create(&v41, (*v10)[1], (uint64_t)&__p);
      sub_100055DBC((diskimage_uio::diskimage_open_params *)v42, (__int128 *)&__p);
      if (__p.__r_.__value_.__s.__data_[16]) {
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&__p);
      }
    }

    if (!v43)
    {
      uint64_t v35 = (char *)__cxa_allocate_exception(0x40uLL);
      __int128 v36 = *(_OWORD *)sub_100054DC8((uint64_t)v42);
      *(void *)uint64_t v35 = &off_100196FC8;
      *(_OWORD *)(v35 + _Block_object_dispose(va, 8) = v36;
      v35[24] = 0;
      v35[48] = 0;
      *((void *)v35 + 7) = "pstack: unsupported node";
    }

    __int128 v15 = *a1;
    int v16 = **v10;
    LODWORD(v41.__pn_.__r_.__value_.__l.__data_) = v16;
    uint64_t v17 = v42[0];
    v41.__pn_.__r_.__value_.__l.__size_ = v42[0];
    v42[0] = 0LL;
    uint64_t v18 = (char *)v15[1];
    uint64_t v19 = (char *)v15[2];
    if (v18 >= v19)
    {
      uint64_t v21 = (v18 - (_BYTE *)*v15) >> 4;
      unint64_t v22 = v21 + 1;
      uint64_t v23 = v19 - (_BYTE *)*v15;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      else {
        unint64_t v24 = v22;
      }
      unint64_t v49 = v15 + 2;
      id v25 = (char *)sub_100061D04((uint64_t)(v15 + 2), v24);
      unint64_t v27 = &v25[16 * v21];
      *(_DWORD *)unint64_t v27 = v41.__pn_.__r_.__value_.__l.__data_;
      *((void *)v27 + 1) = v41.__pn_.__r_.__value_.__l.__size_;
      v41.__pn_.__r_.__value_.__l.__size_ = 0LL;
      int v29 = *v15;
      std::string::size_type v28 = (std::string::size_type)v15[1];
      if ((void *)v28 == *v15)
      {
        std::string::size_type v32 = (std::string::size_type)v15[1];
        id v30 = &v25[16 * v21];
      }

      else
      {
        id v30 = &v25[16 * v21];
        do
        {
          int v31 = *(_DWORD *)(v28 - 16);
          v28 -= 16LL;
          *((_DWORD *)v30 - 4) = v31;
          v30 -= 16;
          *((void *)v30 + 1) = *(void *)(v28 + 8);
          *(void *)(v28 + _Block_object_dispose(va, 8) = 0LL;
        }

        while ((void *)v28 != v29);
        std::string::size_type v32 = (std::string::size_type)*v15;
        std::string::size_type v28 = (std::string::size_type)v15[1];
      }

      int v20 = v27 + 16;
      char *v15 = v30;
      __p.__r_.__value_.__r.__words[0] = v32;
      __p.__r_.__value_.__l.__size_ = v32;
      v15[1] = v27 + 16;
      __p.__r_.__value_.__l.__cap_ = v28;
      unint64_t v33 = v15[2];
      __int128 v15[2] = &v25[16 * v26];
      uint64_t v48 = v33;
      sub_100061D38((uint64_t)&__p);
    }

    else
    {
      *(_DWORD *)uint64_t v18 = v16;
      *((void *)v18 + 1) = v17;
      int v20 = v18 + 16;
      v41.__pn_.__r_.__value_.__l.__size_ = 0LL;
    }

    v15[1] = v20;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v41.__pn_.__r_.__value_.__r.__words[1]);
    if (v43) {
      diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v42);
    }
  }

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  sub_10005603C((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  sub_100061D88((void ***)&__p);
  return a1;
}

void sub_100055BAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char **a16, uint64_t a17, char a18, char *a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, char a27, int a28, __int16 a29, char a30)
{
  a16 = &a19;
  sub_10005603C((void ***)&a16);
  a19 = &a22;
  sub_100061D88((void ***)&a19);
  sub_100061CC4(v30, 0LL);
  _Unwind_Resume(a1);
}

uint64_t sub_100055C9C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &off_100196FC8;
  BOOL v6 = std::generic_category();
  *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 56) = a2;
  *(void *)a1 = &off_10017CD38;
  return a1;
}

uint64_t sub_100055D00(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100045090();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    BOOL v6 = (char *)sub_100061D04(result, a2);
    int v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64(v8);
      uint64_t v10 = &v6[v5];
    }

    else
    {
      uint64_t v10 = &v6[v5];
      do
      {
        int v11 = *(_DWORD *)(v8 - 16);
        v8 -= 16LL;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        *((void *)v10 + 1) = *(void *)(v8 + 8);
        *(void *)(v8 + _Block_object_dispose(va, 8) = 0LL;
      }

      while ((char *)v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }

    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_100061D38((uint64_t)&v14);
  }

  return result;
}

diskimage_uio::diskimage_open_params *sub_100055DBC(diskimage_uio::diskimage_open_params *a1, __int128 *a2)
{
  char v5 = *((_BYTE *)a2 + 16);
  if (v5)
  {
    *(void *)&__int128 v4 = *(void *)a2;
    *(void *)a2 = 0LL;
  }

  else
  {
    __int128 v4 = *a2;
  }

  sub_100062174((diskimage_uio::diskimage_open_params *)&v4, a1);
  if (v5) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&v4);
  }
  return a1;
}

void sub_100055E24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t diskimage_uio::stack_image_node::stack_image_node( uint64_t a1, int a2, int a3, __int128 *a4, __int128 *a5, CFTypeRef cf)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10000AD88((_BYTE *)(a1 + 8), *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v9 = *a4;
    *(void *)(a1 + 24) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v9;
  }

  if (*((char *)a5 + 23) < 0)
  {
    sub_10000AD88((_BYTE *)(a1 + 32), *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v10 = *a5;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 3sub_1000296D8(&v5, 2) = v10;
  }

  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sub_100055EE4(_Unwind_Exception *exception_object)
{
}

void diskimage_uio::stack_image_node::~stack_image_node(diskimage_uio::stack_image_node *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_100055F74(std::error_category *a1)
{
}

const char *sub_100055F88()
{
  return "disk image";
}

void *sub_100055F94@<X0>(int a1@<W1>, void *a2@<X8>)
{
  else {
    uint64_t v2 = off_10017CD50[a1 - 150];
  }
  return sub_100006174(a2, v2);
}

uint64_t sub_100055FC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_100056010((diskimage_uio::stack_image_node **)(i - 8), 0LL);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100056010(diskimage_uio::stack_image_node **a1, diskimage_uio::stack_image_node *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    diskimage_uio::stack_image_node::~stack_image_node(v3);
    operator delete(v4);
  }

void sub_10005603C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (diskimage_uio::stack_image_node **)**a1;
  if (v2)
  {
    __int128 v4 = (diskimage_uio::stack_image_node **)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100056010(--v4, 0LL);
      while (v4 != v2);
      char v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1000560B4(std::exception *a1)
{
}

uint64_t sub_1000560C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 504);
  uint64_t v4 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1) {
      return result;
    }
  }

  else if ((_DWORD)v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10017A508[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 504) = -1;
    return result;
  }

  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_10017A538[v4])(&v5, result, a2);
}

void sub_100056164(uint64_t a1, void ***a2)
{
}

uint64_t sub_100056170(uint64_t a1, uint64_t a2)
{
  return sub_100006224(a2);
}

uint64_t sub_1000561A0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504)) {
    return sub_100056228(result);
  }
  return result;
}

void sub_1000561B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000561C0(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 2) {
    return sub_100056548(result, (uint64_t)a3);
  }
  *a2 = *a3;
  __int128 v4 = a3[1];
  __int128 v5 = a3[2];
  __int128 v6 = a3[4];
  a2[3] = a3[3];
  a2[4] = v6;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1000561F4(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 504) != 3) {
    return sub_1000565EC(result, a3);
  }
  *a2 = *a3;
  return result;
}

void sub_100056218(uint64_t *a1, void ***a2, uint64_t *a3)
{
}

void sub_100056220(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100056228(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void sub_10005627C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v3 = *(_OWORD *)(a3 + 16);
    __int128 v4 = *(_OWORD *)(a3 + 32);
    __int128 v5 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + sub_100006224(v1 + 64) = v5;
    *(_OWORD *)(a2 + 16) = v3;
    *(_OWORD *)(a2 + 3sub_1000296D8(&v5, 2) = v4;
    *(_DWORD *)(a2 + 8crc32(0LL, 0LL, 0) = *(_DWORD *)(a3 + 80);
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a3 + 84);
    __int128 v6 = *(_OWORD *)(a3 + 88);
    __int128 v7 = *(_OWORD *)(a3 + 104);
    __int128 v8 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 12crc32(0LL, 0LL, 0) = v8;
    *(_OWORD *)(a2 + 104) = v7;
    *(_OWORD *)(a2 + 8_Block_object_dispose(va, 8) = v6;
    __int128 v9 = *(_OWORD *)(a3 + 152);
    __int128 v10 = *(_OWORD *)(a3 + 168);
    __int128 v11 = *(_OWORD *)(a3 + 184);
    *(_OWORD *)(a2 + 20crc32(0LL, 0LL, 0) = *(_OWORD *)(a3 + 200);
    *(_OWORD *)(a2 + 184) = v11;
    *(_OWORD *)(a2 + 16_Block_object_dispose(va, 8) = v10;
    *(_OWORD *)(a2 + 15sub_1000296D8(&v5, 2) = v9;
    __int128 v12 = *(_OWORD *)(a3 + 248);
    __int128 v13 = *(_OWORD *)(a3 + 264);
    __int128 v14 = *(_OWORD *)(a3 + 280);
    *(_OWORD *)(a2 + 23sub_1000296D8(&v5, 2) = *(_OWORD *)(a3 + 232);
    *(_OWORD *)(a2 + 2sub_100006224(v1 + 64) = v13;
    *(_OWORD *)(a2 + 28crc32(0LL, 0LL, 0) = v14;
    *(_OWORD *)(a2 + 24_Block_object_dispose(va, 8) = v12;
    __int128 v16 = *(_OWORD *)(a3 + 312);
    __int128 v15 = *(_OWORD *)(a3 + 328);
    __int128 v17 = *(_OWORD *)(a3 + 296);
    *(void *)(a2 + 344) = *(void *)(a3 + 344);
    *(_OWORD *)(a2 + 31sub_1000296D8(&v5, 2) = v16;
    *(_OWORD *)(a2 + 32_Block_object_dispose(va, 8) = v15;
    *(_OWORD *)(a2 + 296) = v17;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a3 + 216);
    *(_DWORD *)(a2 + 35sub_1000296D8(&v5, 2) = *(_DWORD *)(a3 + 352);
    *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
    __int128 v18 = *(_OWORD *)(a3 + 360);
    __int128 v19 = *(_OWORD *)(a3 + 376);
    __int128 v20 = *(_OWORD *)(a3 + 392);
    *(_OWORD *)(a2 + 40_Block_object_dispose(va, 8) = *(_OWORD *)(a3 + 408);
    *(_OWORD *)(a2 + 39sub_1000296D8(&v5, 2) = v20;
    *(_OWORD *)(a2 + 376) = v19;
    *(_OWORD *)(a2 + 36crc32(0LL, 0LL, 0) = v18;
    __int128 v21 = *(_OWORD *)(a3 + 424);
    __int128 v22 = *(_OWORD *)(a3 + 440);
    __int128 v23 = *(_OWORD *)(a3 + 456);
    *(_OWORD *)(a2 + 47sub_1000296D8(&v5, 2) = *(_OWORD *)(a3 + 472);
    *(_OWORD *)(a2 + 456) = v23;
    *(_OWORD *)(a2 + 44crc32(0LL, 0LL, 0) = v22;
    *(_OWORD *)(a2 + 424) = v21;
    uint64_t v24 = *(void *)(a3 + 488);
    *(_DWORD *)(a2 + 496) = *(_DWORD *)(a3 + 496);
    *(void *)(a2 + 48_Block_object_dispose(va, 8) = v24;
  }

  else
  {
    sub_1000563A4(a1, a3);
  }

void sub_1000563A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  sub_100056410(a1, a2);
  *(_DWORD *)(a1 + 504) = 1;
}

__n128 sub_100056410(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x4796C6F6BLL;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 512;
  *(_DWORD *)(a1 + 1sub_1000296D8(&v5, 2) = *(_DWORD *)(a2 + 12);
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 3sub_1000296D8(&v5, 2) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 6crc32(0LL, 0LL, 0) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + sub_100006224(v1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = *(void *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 88);
  __int128 v5 = *(_OWORD *)(a2 + 104);
  __int128 v6 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 12crc32(0LL, 0LL, 0) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 152);
  __int128 v8 = *(_OWORD *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 20crc32(0LL, 0LL, 0) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v8;
  *(_OWORD *)(a1 + 15sub_1000296D8(&v5, 2) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 248);
  __int128 v11 = *(_OWORD *)(a2 + 264);
  __int128 v12 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 23sub_1000296D8(&v5, 2) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 2sub_100006224(v1 + 64) = v11;
  *(_OWORD *)(a1 + 28crc32(0LL, 0LL, 0) = v12;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v10;
  __int128 v14 = *(_OWORD *)(a2 + 312);
  __int128 v13 = *(_OWORD *)(a2 + 328);
  __int128 v15 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 31sub_1000296D8(&v5, 2) = v14;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = v13;
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 35sub_1000296D8(&v5, 2) = *(void *)(a2 + 352);
  __int128 v16 = *(_OWORD *)(a2 + 360);
  __int128 v17 = *(_OWORD *)(a2 + 376);
  __int128 v18 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 40_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 39sub_1000296D8(&v5, 2) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  *(_OWORD *)(a1 + 36crc32(0LL, 0LL, 0) = v16;
  __n128 result = *(__n128 *)(a2 + 424);
  __int128 v20 = *(_OWORD *)(a2 + 440);
  __int128 v21 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 47sub_1000296D8(&v5, 2) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v21;
  *(_OWORD *)(a1 + 44crc32(0LL, 0LL, 0) = v20;
  *(__n128 *)(a1 + 424) = result;
  *(_DWORD *)(a1 + 48_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 488);
  *(void *)(a1 + 49sub_1000296D8(&v5, 2) = *(void *)(a2 + 492);
  return result;
}

uint64_t sub_100056548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v4])(&v9, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_DWORD *)a1 = 2003069043;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 1sub_1000296D8(&v5, 2) = *(_DWORD *)(a2 + 12);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 6sub_1000296D8(&v5, 2) = *(void *)(a2 + 62);
  *(_OWORD *)(a1 + 3sub_1000296D8(&v5, 2) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 7crc32(0LL, 0LL, 0) = 0;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 504) = 2;
  return a1;
}

uint64_t sub_1000565EC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 504) = 3;
  return a1;
}

void sub_100056658(uint64_t a1, void ***a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 504) == 4)
  {
    __int128 v3 = (void **)*a3;
    *a3 = 0LL;
    sub_100061CC4(a2, v3);
  }

  else
  {
    sub_100056680(a1, a3);
  }

uint64_t sub_100056680(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v4])(&v7, a1);
  }
  uint64_t v5 = *a2;
  *a2 = 0LL;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 504) = 4;
  return a1;
}

void sub_1000566E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 504) == 5)
  {
    sub_1000198A4(a2, (__int128 *)a3);
    uint64_t v5 = (void **)(a2 + 16);
    __int128 v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 3sub_1000296D8(&v5, 2) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v5 = v6;
    *(_BYTE *)(a3 + 39) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }

  else
  {
    sub_100056768(a1, a3);
  }

uint64_t sub_100056768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v4 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 3sub_1000296D8(&v5, 2) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(_DWORD *)(a1 + 504) = 5;
  return a1;
}

void sub_1000567F0(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)__p[0] + 3);
  __int128 v5 = *((_OWORD *)__p[0] + 2);
  __int128 v38 = *((_OWORD *)__p[0] + 1);
  __int128 v39 = v5;
  uint64_t v40 = *((void *)__p[0] + 6);
  uint64_t v6 = *((void *)__p[0] + 7);
  __int128 v7 = *((_OWORD *)__p[0] + 4);
  uint64_t v8 = *((void *)__p[0] + 10);
  __int128 v9 = *(_OWORD *)((char *)__p[0] + 88);
  __int128 v10 = *(_OWORD *)((char *)__p[0] + 104);
  __int128 v11 = *(_OWORD *)((char *)__p[0] + 136);
  __int128 v102 = *(_OWORD *)((char *)__p[0] + 120);
  __int128 v103 = v11;
  __int128 v100 = v9;
  __int128 v101 = v10;
  __int128 v12 = *(_OWORD *)((char *)__p[0] + 152);
  __int128 v13 = *(_OWORD *)((char *)__p[0] + 168);
  __int128 v14 = *(_OWORD *)((char *)__p[0] + 184);
  __int128 v107 = *(_OWORD *)((char *)__p[0] + 200);
  __int128 v108 = v7;
  __int128 v105 = v13;
  __int128 v106 = v14;
  __int128 v104 = v12;
  __int128 v15 = *(_OWORD *)((char *)__p[0] + 216);
  __int128 v16 = *(_OWORD *)((char *)__p[0] + 232);
  __int128 v17 = *(_OWORD *)((char *)__p[0] + 264);
  __int128 v18 = *(_OWORD *)((char *)__p[0] + 280);
  __int128 v93 = *(_OWORD *)((char *)__p[0] + 248);
  __int128 v94 = v17;
  __int128 v91 = v15;
  __int128 v92 = v16;
  __int128 v19 = *(_OWORD *)((char *)__p[0] + 296);
  __int128 v20 = *(_OWORD *)((char *)__p[0] + 312);
  __int128 v21 = *(_OWORD *)((char *)__p[0] + 328);
  uint64_t v99 = *((void *)__p[0] + 43);
  __int128 v97 = v20;
  __int128 v98 = v21;
  __int128 v95 = v18;
  __int128 v96 = v19;
  uint64_t v22 = *((void *)__p[0] + 44);
  __int128 v23 = *(_OWORD *)((char *)__p[0] + 440);
  __int128 v87 = *(_OWORD *)((char *)__p[0] + 424);
  __int128 v88 = v23;
  __int128 v24 = *(_OWORD *)((char *)__p[0] + 472);
  __int128 v89 = *(_OWORD *)((char *)__p[0] + 456);
  __int128 v90 = v24;
  __int128 v25 = *(_OWORD *)((char *)__p[0] + 376);
  __int128 v83 = *(_OWORD *)((char *)__p[0] + 360);
  __int128 v84 = v25;
  __int128 v26 = *(_OWORD *)((char *)__p[0] + 408);
  __int128 v85 = *(_OWORD *)((char *)__p[0] + 392);
  __int128 v86 = v26;
  int v27 = *((_DWORD *)__p[0] + 122);
  uint64_t v28 = *(void *)((char *)__p[0] + 492);
  int v29 = operator new(0xC8uLL);
  sub_100057768(v29, (uint64_t *)__p, a1);
  (*(void (**)(void **__return_ptr, void *, void))(*v29 + 48LL))(&lpsrc, v29, 0LL);
  if (!v30) {
    __cxa_bad_cast();
  }
  int v31 = v30[2];
  uint64_t v43 = 0x4796C6F6BLL;
  int v44 = 512;
  int v45 = v4;
  __int128 v46 = v38;
  __int128 v47 = v39;
  uint64_t v48 = v40;
  uint64_t v49 = v6;
  __int128 v50 = v108;
  uint64_t v51 = v8;
  __int128 v55 = v103;
  __int128 v54 = v102;
  __int128 v53 = v101;
  __int128 v52 = v100;
  __int128 v59 = v107;
  __int128 v58 = v106;
  __int128 v57 = v105;
  __int128 v56 = v104;
  __int128 v63 = v94;
  __int128 v64 = v95;
  __int128 v66 = v97;
  __int128 v67 = v98;
  __int128 v65 = v96;
  __int128 v60 = v91;
  __int128 v62 = v93;
  __int128 v61 = v92;
  uint64_t v68 = v99;
  uint64_t v69 = v22;
  __int128 v74 = v87;
  __int128 v75 = v88;
  __int128 v76 = v89;
  __int128 v77 = v90;
  __int128 v70 = v83;
  __int128 v71 = v84;
  __int128 v72 = v85;
  __int128 v73 = v86;
  int v78 = v27;
  uint64_t v79 = v28;
  int v80 = 1;
  sub_100056E48((uint64_t)v81, (uint64_t)&v43);
  int v82 = v31;
  sub_100056E48(a2, (uint64_t)v81);
  *(_DWORD *)(a2 + 51sub_1000296D8(&v5, 2) = v82;
  *(_BYTE *)(a2 + 52crc32(0LL, 0LL, 0) = 1;
  sub_100056FB0((uint64_t)v81);
  sub_100056FB0((uint64_t)&v43);
  std::string::size_type v32 = lpsrc;
  lpsrCC_SHA256_CTX c = 0LL;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 8LL))(v32);
  }
  (*(void (**)(void *))(*v29 + 16LL))(v29);
  unint64_t v33 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      unint64_t v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  __int128 v36 = __p[0];
  __p[0] = 0LL;
  if (v36) {
    operator delete(v36);
  }
}

void sub_100056B44( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  __int128 v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a2)
  {
    sub_100056FB0((uint64_t)&STACK[0x258]);
    sub_100056FB0((uint64_t)va1);
    if (a4) {
      (*(void (**)(uint64_t))(*(void *)a4 + 8LL))(a4);
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 16LL))(v10);
    sub_100056C1C((void **)va);
    __cxa_begin_catch(a1);
    sub_100056C54();
  }

  _Unwind_Resume(a1);
}

void **sub_100056C1C(void **a1)
{
  __int128 v2 = *a1;
  *a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100056C54()
{
}

void sub_100056C84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  if (a2 != 3 && a2 != 2)
  {
    if (a2 == 1)
    {
      __int128 v3 = (unsigned int *)__cxa_begin_catch(a1);
      *(void *)&__int128 v5 = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_handle_exceptions()";
      *((void *)&v5 + 1) = 146LL;
      int v6 = 16;
      sub_100057008(v8, &v5);
      sub_100120CD8(&v9, v3);
      std::ostream::~ostream(&v9, off_10017A690);
      sub_10005716C((uint64_t)v8);
      std::ios::~ios(&v10);
      *(void *)uint64_t v2 = make_error_code(161LL);
      *(void *)(v2 + _Block_object_dispose(va, 8) = v4;
      *(_BYTE *)(v2 + 52crc32(0LL, 0LL, 0) = 0;
      goto LABEL_7;
    }

uint64_t sub_100056E48(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 504) = -1;
  sub_100056E8C(a1, a2);
  return a1;
}

void sub_100056E78(_Unwind_Exception *a1)
{
}

uint64_t sub_100056E8C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 504);
  if ((_DWORD)v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_10017A508[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 504) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 504);
  if ((_DWORD)v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10017A568[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 504) = v5;
  }

  return result;
}

double sub_100056F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = sub_100056410(a2, a3).n128_u64[0];
  return result;
}

__n128 sub_100056F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = 2003069043;
  *(void *)(a2 + 4) = *(void *)(a3 + 4);
  *(_DWORD *)(a2 + 1sub_1000296D8(&v5, 2) = *(_DWORD *)(a3 + 12);
  __n128 result = *(__n128 *)(a3 + 16);
  __int128 v4 = *(_OWORD *)(a3 + 32);
  __int128 v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 6sub_1000296D8(&v5, 2) = *(void *)(a3 + 62);
  *(_OWORD *)(a2 + 3sub_1000296D8(&v5, 2) = v4;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v5;
  *(__n128 *)(a2 + 16) = result;
  *(_WORD *)(a2 + 7crc32(0LL, 0LL, 0) = 0;
  *(void *)(a2 + 7sub_1000296D8(&v5, 2) = *(void *)(a3 + 72);
  return result;
}

__n128 sub_100056F6C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void sub_100056F78(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0LL;
  *a2 = v3;
}

__n128 sub_100056F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  __n128 result = *(__n128 *)(a3 + 16);
  *(void *)(a2 + 3sub_1000296D8(&v5, 2) = *(void *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 3sub_1000296D8(&v5, 2) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  return result;
}

uint64_t sub_100056FB0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 504);
  if ((_DWORD)v2 != -1) {
    ((void (*)(char *, uint64_t))off_10017A508[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 504) = -1;
  return a1;
}

void *sub_100057008(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000570F0((uint64_t)a1, a2);
  *a1 = off_10017A5C8;
  a1[45] = &off_10017A6C8;
  a1[46] = &off_10017A6F0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017A5C8;
  a1[45] = off_10017A650;
  a1[46] = off_10017A678;
  return a1;
}

void sub_10005708C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000570B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000570F0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017A760;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100057158(_Unwind_Exception *a1)
{
}

uint64_t sub_10005716C(uint64_t a1)
{
  *(void *)a1 = off_10017A760;
  sub_1000573E4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100057208(char *a1)
{
}

uint64_t sub_10005724C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100057280(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000572CC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017A690);
  sub_10005716C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100057304(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017A690);
  sub_10005716C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100057344(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017A690);
  sub_10005716C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100057384(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017A690);
  sub_10005716C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000573D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005716C(a1);
  operator delete(v1);
}

uint64_t sub_1000573E4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100057534((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005750C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100057534(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 393LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int128 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 393LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

BOOL sub_100057718(_DWORD *a1, _DWORD *a2)
{
  else {
    return 0LL;
  }
}

void *sub_100057768(void *a1, uint64_t *a2, void *a3)
{
  v6[0] = &off_10017A7E0;
  sub_1000577E4((uint64_t)a1, (uint64_t)v6, a3);
  sub_100019D3C((uint64_t)v6);
  *a1 = off_100185010;
  return a1;
}

void sub_1000577D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000577E4(uint64_t a1, uint64_t a2, void *a3)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = &off_10017A820;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *a3;
  *(void *)(a1 + 56) = v5;
  if (v5)
  {
    char v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)sub_100019C5C(a1 + 64, asub_1000296D8(&v5, 2) = &off_10017A7E0;
  if (*(_BYTE *)(a2 + 88))
  {
    uint64_t v8 = *(void *)(a2 + 96);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = 1LL;
    *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 2 * v8;
    *(void *)(a1 + 4crc32(0LL, 0LL, 0) = 0LL;
  }

  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 3sub_1000296D8(&v5, 2) = 0u;
  }

  return a1;
}

void sub_100057888(_Unwind_Exception *a1)
{
}

void sub_1000578A0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100019D3C(a1);
  operator delete(v1);
}

  ;
}

uint64_t sub_1000578BC()
{
  return 512LL;
}

uint64_t sub_1000578C4(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

__n128 sub_1000578CC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1000578D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

void *sub_1000578E0(uint64_t a1)
{
  unint64_t v2 = operator new(0x40uLL);
  sub_1000589FC((uint64_t)v2, a1);
  return v2;
}

void sub_100057914(_Unwind_Exception *a1)
{
}

uint64_t sub_100057928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v180 = v182;
  __int128 v181 = xmmword_100142520;
  std::string __p = v179;
  __int128 v178 = xmmword_100142520;
  unint64_t v7 = sub_100058B9C(a3, a4);
  uint64_t v8 = v7;
  if (v7 > 0x10)
  {
    if (v7 >= 0x333333333333334LL) {
      sub_10001A548("get_next_capacity, allocator's max size reached");
    }
    uint64_t v9 = operator new(40 * v7);
    sub_10001CE68((uint64_t *)&__p, (unint64_t)v9, v8, (uint64_t)__p + 40 * v178, 0LL, 0LL);
  }

  uint64_t v10 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  sub_1000F7208(a1 + 64, *(void *)(a3 + 24), v10 & ~(v10 >> 63), (uint64_t *)&v180);
  int v11 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v163 = *(void *)a4;
  __int128 v164 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }

  __int128 v14 = *(_OWORD *)(a4 + 56);
  v165[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v165 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v166 = *(void *)(a4 + 48);
  __int128 v167 = v14;
  __int128 v15 = *(_OWORD *)(a4 + 88);
  __int128 v168 = *(_OWORD *)(a4 + 72);
  __int128 v169 = v15;
  char v170 = *(_BYTE *)(a4 + 104);
  __int128 v16 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v171 = *(void *)(a4 + 112);
  __int128 v172 = v16;
  if (v16)
  {
    __int128 v17 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  __int128 v173 = *(_OWORD *)(a4 + 128);
  uint64_t v174 = *(void *)(a4 + 144);
  char v175 = *(_BYTE *)(a4 + 152);
  v161[0] = 0;
  char v162 = 0;
  __int128 v19 = (char *)v180;
  uint64_t v126 = *((void *)v180 + 3);
  uint64_t v20 = *(void *)(a3 + 8);
  *(void *)&__int128 v149 = *(void *)a3;
  *((void *)&v149 + 1) = v20;
  if (v20)
  {
    __int16 v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  __int128 v23 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)uint64_t v150 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v150[9] = *(_OWORD *)(a3 + 25);
  uint64_t v151 = *(void *)(a3 + 48);
  __int128 v152 = v23;
  __int128 v24 = *(_OWORD *)(a3 + 88);
  __int128 v153 = *(_OWORD *)(a3 + 72);
  __int128 v154 = v24;
  char v155 = *(_BYTE *)(a3 + 104);
  __int16 v25 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v156 = *(void *)(a3 + 112);
  unint64_t v157 = v25;
  if (v25)
  {
    __int128 v26 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  __int128 v158 = *(_OWORD *)(a3 + 128);
  uint64_t v159 = *(void *)(a3 + 144);
  char v160 = *(_BYTE *)(a3 + 152);
  uint64_t v124 = a2;
  if (!(void)v181)
  {
    uint64_t v28 = 0LL;
    uint64_t v129 = 0LL;
    goto LABEL_126;
  }

  uint64_t v28 = 0LL;
  unint64_t v128 = &v19[64 * (void)v181];
  uint64_t v129 = 0LL;
  uint64_t v127 = (uint64_t **)(a2 + 16);
  while (1)
  {
    size_t v29 = *((void *)v19 + 4);
    if (v29)
    {
    }

    if (v29 > *(void *)&v150[16]) {
      sub_10003CC34((uint64_t)&v149);
    }
    if (sub_10003B85C((uint64_t)&v149, (uint64_t)&v163))
    {
      *(void *)&__int128 v147 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v147 + 1) = 75LL;
      *(_DWORD *)uint64_t v148 = 16;
      sub_10001C9F8(&v130, &v147);
      sub_10000552C(&v137, (uint64_t)"Udif: advanced buffer, needs to read ", 37LL);
      sub_1000F9078(&v137, (int *)v19);
      sub_10000552C(&v137, (uint64_t)" but buffer is full", 19LL);
      std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
      __int128 v96 = std::locale::use_facet((const std::locale *)&v143, &std::ctype<char>::id);
      uint64_t v97 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10LL);
      std::locale::~locale((std::locale *)&v143);
      std::ostream::put(&v137, v97);
      std::ostream::flush(&v137);
      std::ostream::~ostream(&v137, off_100173470);
      sub_10001D704((uint64_t)&v130);
      goto LABEL_125;
    }

    __int128 v30 = v149;
    __int128 v147 = v149;
    if (*((void *)&v149 + 1))
    {
      int v31 = (unint64_t *)(*((void *)&v149 + 1) + 8LL);
      do
        unint64_t v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }

    *(_OWORD *)&v148[9] = *(_OWORD *)&v150[9];
    *(_OWORD *)uint64_t v148 = *(_OWORD *)v150;
    unint64_t v33 = *(_OWORD *)&v150[9] >> 56;
    if (v29 > v33)
    {
      *(void *)&__int128 v143 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
      *((void *)&v143 + 1) = 75LL;
      v144.i32[0] = 16;
      sub_10001CAE0(&v130, &v143);
      sub_10000552C(&v137, (uint64_t)"Udif: needs to read ", 20LL);
      sub_1000F9078(&v137, (int *)v19);
      sub_10000552C(&v137, (uint64_t)" but buffer is too small ", 25LL);
      std::ostream::operator<<(&v137, v33);
      std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
      uint64_t v34 = std::locale::use_facet((const std::locale *)&v141, &std::ctype<char>::id);
      uint64_t v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10LL);
      std::locale::~locale((std::locale *)&v141);
      std::ostream::put(&v137, v35);
      std::ostream::flush(&v137);
      std::ostream::~ostream(&v137, off_100173690);
      sub_10001DD3C((uint64_t)&v130);
      std::ios::~ios(&v138);
      int v36 = 2;
      uint64_t v28 = -28LL;
      goto LABEL_45;
    }

    if (!*(_DWORD *)v19)
    {
      bzero((void *)v30, v29);
      sub_10003CA5C((uint64_t)&v149, v29);
LABEL_44:
      int v36 = 0;
      v129 += v29;
      goto LABEL_45;
    }

    int8x16_t v37 = *(int8x16_t *)(v19 + 8);
    uint64_t v38 = *((void *)v19 + 4);
    __int128 v143 = v30;
    if (*((void *)&v30 + 1))
    {
      __int128 v39 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
      do
        unint64_t v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }

    int8x16_t v144 = vextq_s8(v37, v37, 8uLL);
    uint64_t v145 = v38;
    char v146 = 0;
    if (v129)
    {
      *(void *)&__int128 v141 = v19;
      std::__fs::filesystem::path v41 = sub_10001E2F8(v127, (unsigned int *)v19, (uint64_t)&unk_1001447DC, (_DWORD **)&v141);
      (*(void (**)(_DWORD **__return_ptr, uint64_t *, __int128 *))(*v41[5] + 128))(&v130, v41[5], &v143);
      if ((void)v178 == *((void *)&v178 + 1))
      {
        sub_10001EAB8((uint64_t *)&__p, (uint64_t)__p + 40 * v178, 1LL, (uint64_t)&v130, &v141);
      }

      else
      {
        sub_10001C2DC((unint64_t)__p + 40 * v178, (uint64_t)&v130);
        *(void *)&__int128 v178 = v178 + 1;
      }

      sub_10003CA5C((uint64_t)&v149, v29);
    }

    else
    {
      uint64_t v130 = v19;
      uint64_t v49 = sub_10001E2F8(v127, (unsigned int *)v19, (uint64_t)&unk_1001447DC, &v130);
      int v50 = (*(uint64_t (**)(uint64_t *, __int128 *))(*v49[5] + 88))(v49[5], &v143);
      uint64_t v28 = v50;
      if (v50 < 0)
      {
        char v42 = 0;
        int v36 = 2;
        goto LABEL_37;
      }

      if (*(_BYTE *)(v124 + 56) && *((int *)v19 + 8) > (uint64_t)v50)
      {
        *(void *)&__int128 v141 = "io_result_t DiskImageUDIFRead<UDIFReader<locks::None>, DiskImageUDIF>::read(DiskImage::Context &, const sg_vec::iterator &, const sg_vec::iterator &) [UDIF = UDIFReader<locks::None>, UDIFVariant = DiskImageUDIF]";
        *((void *)&v141 + 1) = 75LL;
        int v142 = 16;
        sub_10001CBC8(&v130, &v141);
        sub_10000552C(&v137, (uint64_t)"Error: Not enough data read. expected: ", 39LL);
        std::ostream::operator<<(&v137, *((void *)v19 + 4));
        sub_10000552C(&v137, (uint64_t)" read: ", 7LL);
        std::ostream::operator<<(&v137, v28);
        sub_10000552C(&v137, (uint64_t)" backend: ", 10LL);
        std::ostream::operator<<(&v137, *(void *)(a1 + 48));
        std::ios_base::getloc((const std::ios_base *)((char *)&v137 + *(void *)(v137 - 24)));
        uint64_t v51 = std::locale::use_facet(&v176, &std::ctype<char>::id);
        uint64_t v52 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10LL);
        std::locale::~locale(&v176);
        std::ostream::put(&v137, v52);
        std::ostream::flush(&v137);
        std::ostream::~ostream(&v137, off_1001738B0);
        sub_10001E49C((uint64_t)&v130);
        std::ios::~ios(&v138);
        char v42 = 0;
        int v36 = 2;
        uint64_t v28 = -5LL;
        goto LABEL_37;
      }

      uint64_t v53 = sub_100058D30(a1, (void **)&v143, (uint64_t)v19, &v180, v33);
      v29 -= v53;
      sub_10003CA5C((uint64_t)&v149, v29);
      if ((void)v181)
      {
        uint64_t v54 = 0LL;
        uint64_t v55 = 0LL;
        uint64_t v56 = (void)v181 << 6;
        __int128 v57 = (uint64_t *)((char *)v180 + 32);
        do
        {
          uint64_t v59 = *v57;
          v57 += 8;
          uint64_t v58 = v59;
          uint64_t v60 = v59 + v54;
          uint64_t v61 = v59 + v55;
          uint64_t v62 = v33 - v55;
          BOOL v63 = v59 + v55 > v33;
          if (v59 + v55 >= v33) {
            uint64_t v55 = 0LL;
          }
          else {
            uint64_t v55 = v61;
          }
          if (v63)
          {
            uint64_t v55 = v58;
            uint64_t v64 = v62;
          }

          else
          {
            uint64_t v64 = 0LL;
          }

          uint64_t v54 = v60 + v64;
          v56 -= 64LL;
        }

        while (v56);
      }

      else
      {
        uint64_t v54 = 0LL;
      }

      char v65 = sub_10003D9C8(a3);
      v126 += v53;
      sub_10003BB60((uint64_t)&v130, a3 + 56, a4 + 56, v126, v54 - v53, v65);
      sub_10001EA58((uint64_t)v161);
      sub_100019908((uint64_t)v161, (uint64_t)&v130);
      char v162 = 1;
      __int128 v66 = v140;
      if (v140)
      {
        __int128 v67 = (unint64_t *)&v140->__shared_owners_;
        do
          unint64_t v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }

      uint64_t v69 = v139;
      if (v139)
      {
        __int128 v70 = (unint64_t *)&v139->__shared_owners_;
        do
          unint64_t v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }

      __int128 v72 = v136;
      if (v136)
      {
        __int128 v73 = (unint64_t *)&v136->__shared_owners_;
        do
          unint64_t v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }

      __int128 v75 = v135;
      if (v135)
      {
        __int128 v76 = (unint64_t *)&v135->__shared_owners_;
        do
          unint64_t v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }

      int v78 = v134;
      if (v134)
      {
        uint64_t v79 = (unint64_t *)&v134->__shared_owners_;
        do
          unint64_t v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }

      unint64_t v81 = v132;
      if (v132)
      {
        int v82 = (unint64_t *)&v132->__shared_owners_;
        do
          unint64_t v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }

      sub_10003BD04((uint64_t)v161, (uint64_t)&v130);
      sub_100018FFC((uint64_t)&v149, (uint64_t)&v130);
      __int128 v84 = v133;
      if (v133)
      {
        __int128 v85 = (unint64_t *)&v133->__shared_owners_;
        do
          unint64_t v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }

      __int128 v87 = v131;
      if (v131)
      {
        __int128 v88 = (unint64_t *)&v131->__shared_owners_;
        do
          unint64_t v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }

      sub_10003C884((uint64_t)&v149, v29);
      sub_10003BA04((uint64_t)v161, (uint64_t)&v130);
      sub_100018FFC((uint64_t)&v163, (uint64_t)&v130);
      __int128 v90 = v133;
      if (v133)
      {
        __int128 v91 = (unint64_t *)&v133->__shared_owners_;
        do
          unint64_t v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }

      __int128 v93 = v131;
      if (v131)
      {
        __int128 v94 = (unint64_t *)&v131->__shared_owners_;
        do
          unint64_t v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
    }

    int v36 = 0;
    char v42 = 1;
LABEL_37:
    uint64_t v43 = (std::__shared_weak_count *)*((void *)&v143 + 1);
    if (!*((void *)&v143 + 1)) {
      goto LABEL_41;
    }
    int v44 = (unint64_t *)(*((void *)&v143 + 1) + 8LL);
    do
      unint64_t v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if ((v42 & 1) != 0) {
        goto LABEL_44;
      }
    }

    else
    {
LABEL_41:
      if ((v42 & 1) != 0) {
        goto LABEL_44;
      }
    }

void sub_100058874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (STACK[0x650] && a11 != STACK[0x640]) {
    operator delete((void *)STACK[0x640]);
  }
  if (STACK[0x8E8])
  {
    if (a12 != STACK[0x8D8]) {
      operator delete((void *)STACK[0x8D8]);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000589F4()
{
  return 4294967251LL;
}

uint64_t sub_1000589FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10017A920;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 16) = a1 + 24;
  int v4 = (void *)(a1 + 16);
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 0LL;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = 0LL;
  uint64_t v5 = a1 + 40;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  sub_1000F61C4(a2 + 64, (uint64_t)&v12);
  sub_100019E30((uint64_t)v4, *(void **)(a1 + 24));
  char v6 = v13;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = v14;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = v14;
  if (v7)
  {
    v6[2] = v3;
    __int128 v12 = &v13;
    unint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  else
  {
    *int v4 = v3;
  }

  sub_1000198A4(v5, &v15);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v9 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_100019E30((uint64_t)&v12, v13);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

void sub_100058B04(_Unwind_Exception *a1)
{
}

uint64_t sub_100058B24(uint64_t a1)
{
  *(void *)a1 = off_10017A920;
  sub_100006224(a1 + 40);
  sub_100019E30(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_100058B60(void **a1)
{
  *a1 = off_10017A920;
  sub_100006224((uint64_t)(a1 + 5));
  sub_100019E30((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

uint64_t sub_100058B9C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 72);
  __int128 v20 = *(_OWORD *)(a1 + 56);
  __int128 v21 = v2;
  __int128 v22 = *(_OWORD *)(a1 + 88);
  char v23 = *(_BYTE *)(a1 + 104);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 112);
  __int16 v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v26 = *(_OWORD *)(a1 + 128);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  __int128 v19 = *(_OWORD *)(a2 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 120);
  if (v8)
  {
    uint64_t v9 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    BOOL v12 = (void)v20 == v6 && *((void *)&v20 + 1) == v7;
    if (v12 && (void)v21 == (void)v19) {
      break;
    }
    sub_10003B36C((uint64_t)&v20);
  }

  if (v8)
  {
    unint64_t v13 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  __int128 v15 = v25;
  if (v25)
  {
    __int128 v16 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return i;
}

void sub_100058D14(_Unwind_Exception *a1)
{
}

uint64_t sub_100058D30(uint64_t a1, void **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v5 = a4[1];
  if (!v5) {
    return 0LL;
  }
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = v5 << 6;
  uint64_t v9 = (uint64_t *)(*a4 + 32LL);
  do
  {
    uint64_t v11 = *v9;
    v9 += 8;
    uint64_t v10 = v11;
    uint64_t v12 = v11 + v6;
    uint64_t v13 = v11 + v7;
    uint64_t v14 = a5 - v7;
    BOOL v15 = v11 + v7 > a5;
    if (v11 + v7 >= a5) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = v13;
    }
    if (v15)
    {
      uint64_t v7 = v10;
      uint64_t v16 = v14;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    unint64_t v6 = v12 + v16;
    v8 -= 64LL;
  }

  while (v8);
  if (v6 <= a5 + a5 * *(void *)(a1 + 24)) {
    return 0LL;
  }
  uint64_t v17 = *(void *)(a3 + 48);
  memmove(*a2, (char *)*a2 + v17, *(void *)(a3 + 32) - v17);
  return v17;
}

uint64_t sub_100058DC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v10 = 2003069043;
  uint64_t v11 = *(void *)&v4[4];
  int v12 = v5;
  __int128 v13 = v6;
  __int128 v14 = v7;
  *(_OWORD *)BOOL v15 = *(_OWORD *)v8;
  *(void *)&v15[14] = *(void *)&v8[14];
  __int16 v16 = 0;
  uint64_t v17 = v9;
  int v18 = 2;
  int v19 = 8;
  sub_100056E48(a2, (uint64_t)&v10);
  *(_DWORD *)(a2 + 51sub_1000296D8(&v5, 2) = v19;
  *(_BYTE *)(a2 + 52crc32(0LL, 0LL, 0) = 1;
  return sub_100056FB0((uint64_t)&v10);
}

void sub_100058E9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
  {
    sub_100056FB0((uint64_t)&a19);
    __cxa_begin_catch(exception_object);
    sub_100056C54();
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100058EFC@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v6[0] = v5;
  int v7 = 3;
  sub_100056E48((uint64_t)v8, (uint64_t)v6);
  int v9 = 1;
  sub_100056E48(a3, (uint64_t)v8);
  *(_DWORD *)(a3 + 51sub_1000296D8(&v5, 2) = v9;
  *(_BYTE *)(a3 + 52crc32(0LL, 0LL, 0) = 1;
  sub_100056FB0((uint64_t)v8);
  return sub_100056FB0((uint64_t)v6);
}

void sub_100058FB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  if (a2)
  {
    sub_100056FB0((uint64_t)&STACK[0x210]);
    sub_100056FB0((uint64_t)va);
    __cxa_begin_catch(a1);
    sub_100056C54();
  }

  _Unwind_Resume(a1);
}

unint64_t *sub_100059024(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40LL))(a2);
  unint64_t v6 = 512LL;
  if (a3) {
    unint64_t v6 = a3;
  }
  if (v5 % v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100055C9C((uint64_t)exception, (uint64_t)"raw_header", 0x16u);
  }

  *a1 = v6;
  a1[1] = v5 / v6;
  return a1;
}

void sub_1000590A8(_Unwind_Exception *a1)
{
}

void sub_1000590C0(std::exception *a1)
{
}

const std::error_category *sub_1000590D8@<X0>(const std::error_category *result@<X0>, uint64_t a2@<X8>)
{
  if (LODWORD(result[70].__vftable) == 12 || result[3].__vftable)
  {
    *(_BYTE *)a2 = 0;
    char v3 = 1;
  }

  else
  {
    *(void *)&__int128 v4 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::verify_backend() const";
    *((void *)&v4 + 1) = 81LL;
    int v5 = 16;
    sub_1000591AC(v6, &v4);
    sub_10000552C(&v7, (uint64_t)"Diskimageuio: backend doesn't exist", 35LL);
    std::ostream::~ostream(&v7, off_10017AA88);
    sub_100059310((uint64_t)v6);
    std::ios::~ios(&v8);
    __n128 result = std::generic_category();
    char v3 = 0;
    *(void *)a2 = 6LL;
    *(void *)(a2 + _Block_object_dispose(va, 8) = result;
  }

  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void sub_100059198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_1000591AC(void *a1, __int128 *a2)
{
  char v3 = (std::ios_base *)(a1 + 46);
  sub_100059294((uint64_t)a1, a2);
  *a1 = off_10017A9C0;
  a1[45] = &off_10017AAC0;
  a1[46] = &off_10017AAE8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017A9C0;
  a1[45] = off_10017AA48;
  a1[46] = off_10017AA70;
  return a1;
}

void sub_100059230(_Unwind_Exception *a1)
{
}

uint64_t sub_100059254(uint64_t a1)
{
  return a1;
}

uint64_t sub_100059294(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017AB58;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000592FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100059310(uint64_t a1)
{
  *(void *)a1 = off_10017AB58;
  sub_100059588(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000593AC(char *a1)
{
}

uint64_t sub_1000593F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100059424(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100059470(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AA88);
  sub_100059310(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000594A8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017AA88);
  sub_100059310((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000594E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017AA88);
  sub_100059310(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100059528(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017AA88);
  sub_100059310((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100059574(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100059310(a1);
  operator delete(v1);
}

uint64_t sub_100059588(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000596D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000596B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000596D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 617LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int16 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 617LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

void sub_1000598C0(std::__shared_weak_count *a1)
{
}

uint64_t sub_1000598D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  }
  return result;
}

uint64_t sub_1000598EC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t *sub_10005992C(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    __int128 v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24LL;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24LL;
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }

  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100059990(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100044D7C();
  }
  return operator new(24 * a2);
}

uint64_t sub_1000599D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_100006224(i - 24);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100059A20(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100006224(v4 - 24);
      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100059A90(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_10017D1F0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)a2;
  *(void *)(a1 + 24) = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  uint64_t v6 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_10000AD88(v6, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v6 = v7;
  }

  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(void *)(a1 + 2sub_100006224(v1 + 64) = 0LL;
  return a1;
}

void sub_100059B28(_Unwind_Exception *a1)
{
}

void *sub_100059B3C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005A3E8((uint64_t)a1, a2);
  *a1 = off_10017AC40;
  a1[45] = &off_10017AD40;
  a1[46] = &off_10017AD68;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017AC40;
  a1[45] = off_10017ACC8;
  a1[46] = off_10017ACF0;
  return a1;
}

void sub_100059BC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100059BE4(uint64_t a1)
{
  return a1;
}

_OWORD *sub_100059C24@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 24;
  if (!*(void *)(a1 + 24) || *(_DWORD *)(a1 + 568) != a2)
  {
    sub_10001C5B4((void *)(a1 + 24));
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    *(_OWORD *)std::string __p = 0u;
    sub_1000198A4(a1 + 576, (__int128 *)__p);
    sub_1000198A4(a1 + 592, &v41);
    sub_1000198A4(a1 + 608, &v42);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      int v10 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    int v12 = (std::__shared_weak_count *)*((void *)&v41 + 1);
    if (*((void *)&v41 + 1))
    {
      __int128 v13 = (unint64_t *)(*((void *)&v41 + 1) + 8LL);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    uint64_t v15 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      __int16 v16 = (unint64_t *)((char *)__p[1] + 8);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    if (*(char *)(a1 + 23) < 0)
    {
      sub_10000AD88(__p, *(void **)a1, *(void *)(a1 + 8));
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      *(void *)&__int128 v41 = *(void *)(a1 + 16);
    }

    v38[0] = 2 * ((a2 - 1) < 2);
    sub_10005B368((uint64_t)__p, v38, &v34);
    sub_1000198A4(v8, &v34);
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (*((void *)&v34 + 1))
    {
      int v19 = (unint64_t *)(*((void *)&v34 + 1) + 8LL);
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    if (SBYTE7(v41) < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = a2;
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v22 = operator new(0x4CuLL);
    sub_100115288(v22, v21);
    __int16 v23 = *(void **)(a1 + 40);
    *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v22;
    if (v23) {
      operator delete(v23);
    }
  }

  sub_1000554E8((const std::error_category *)a1, (BOOL *)v38);
  if (!v39)
  {
    *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v34 + 1) = 83LL;
    int v35 = 16;
    sub_10005AA8C(__p, &v34);
    sub_10000552C(&v43, (uint64_t)"Diskimageuio: Couldn't get locked status ", 41LL);
    __int128 v26 = (unsigned int *)sub_100054DC8((uint64_t)v38);
    sub_10005AA10((uint64_t)__p, v26);
    std::ostream::~ostream(&v43, off_10017AF78);
    sub_10005B4F8((uint64_t)__p);
    std::ios::~ios(v44);
    uint64_t result = (_OWORD *)sub_100054DC8((uint64_t)v38);
    *(_OWORD *)a4 = *result;
    goto LABEL_34;
  }

  if (LOBYTE(v38[0]))
  {
    *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v34 + 1) = 83LL;
    int v35 = 16;
    sub_10005B280(__p, &v34);
    sub_10000552C(&v43, (uint64_t)"Diskimageuio: decryption key missing", 36LL);
    std::ostream::~ostream(&v43, off_10017C078);
    sub_10005ECF8((uint64_t)__p);
    std::ios::~ios(v44);
    uint64_t result = (_OWORD *)make_error_code(162LL);
    *(void *)a4 = result;
    *(void *)(a4 + _Block_object_dispose(va, 8) = v25;
LABEL_34:
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }

  *(void *)&__int128 v34 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
  *((void *)&v34 + 1) = 83LL;
  int v35 = 2;
  sub_10005AB74(__p, &v34);
  sub_10000552C(&v43, (uint64_t)"Diskimageuio: backend isn't locked", 34LL);
  std::ostream::~ostream(&v43, off_10017B198);
  sub_10005BB20((uint64_t)__p);
  std::ios::~ios(v44);
  sub_10005AC5C(a1, 0LL, (uint64_t)__p);
  if (v45)
  {
    uint64_t v27 = sub_10005B144((uint64_t)__p);
    sub_1000560C8(a1 + 48, v27);
    *(_DWORD *)(a1 + 56crc32(0LL, 0LL, 0) = *(_DWORD *)(v27 + 512);
    *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
    *((void *)&v32 + 1) = 83LL;
    int v33 = 2;
    sub_10005B198(&v34, &v32);
    sub_10000552C(&v36, (uint64_t)"Diskimageuio: resolved disk image format ", 41LL);
    diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 560));
    std::ostream::~ostream(&v36, off_10017BE58);
    sub_10005E6D0((uint64_t)&v34);
    uint64_t result = (_OWORD *)std::ios::~ios(v37);
    *(_BYTE *)a4 = 0;
    char v28 = 1;
  }

  else
  {
    int v29 = *(_DWORD *)(a1 + 564);
    if (v29)
    {
      if (*(_DWORD *)(a1 + 568) != v29)
      {
        __int128 v30 = (unsigned int *)sub_10005AF34((uint64_t)__p);
        int v31 = std::generic_category();
        *(void *)&__int128 v34 = 35LL;
        *((void *)&v34 + 1) = v31;
        if ((*(unsigned int (**)(void, void, __int128 *))(**((void **)v30 + 1) + 32LL))( *((void *)v30 + 1),  *v30,  &v34)
          || (*(unsigned int (**)(void, unsigned int *, void))(**((void **)&v34 + 1) + 40LL))( *((void *)&v34 + 1),  v30,  v34))
        {
          *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v32 + 1) = 83LL;
          int v33 = 2;
          sub_100018E78(&v34, &v32);
          sub_10000552C(&v36, (uint64_t)"Diskimageuio: required mode ", 28LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          sub_10000552C(&v36, (uint64_t)" is different than current mode ", 32LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          std::ostream::~ostream(&v36, off_100172858);
          sub_100019104((uint64_t)&v34);
          std::ios::~ios(v37);
          if (a3)
          {
            *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
            *((void *)&v32 + 1) = 83LL;
            int v33 = 2;
            sub_10005AF74(&v34, &v32);
            sub_10000552C(&v36, (uint64_t)"Diskimageuio: reopen backend to required mode ", 46LL);
            diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
            sub_10005B01C((uint64_t)&v34);
            uint64_t result = (_OWORD *)sub_100059C24(a1, *(unsigned int *)(a1 + 564), 0LL);
            goto LABEL_47;
          }

          *(void *)&__int128 v32 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::open_and_resolve(const diskimage_open_params::mode, BOOL)";
          *((void *)&v32 + 1) = 83LL;
          int v33 = 16;
          sub_10005B05C(&v34, &v32);
          sub_10000552C(&v36, (uint64_t)"Diskimageuio: required mode ", 28LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 564));
          sub_10000552C(&v36, (uint64_t)" is different than current mode ", 32LL);
          diskimage_uio::operator<<(&v36, *(_DWORD *)(a1 + 568));
          sub_10005B104((uint64_t)&v34);
        }
      }
    }

    uint64_t result = (_OWORD *)sub_10005AF34((uint64_t)__p);
    char v28 = 0;
    *(_OWORD *)a4 = *result;
  }

  *(_BYTE *)(a4 + 16) = v28;
LABEL_47:
  if (v45) {
    return (_OWORD *)sub_100056FB0((uint64_t)__p);
  }
  return result;
}

void sub_10005A278(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x448])) {
    sub_100056FB0((uint64_t)&STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005A3E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017ADD8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005A450(_Unwind_Exception *a1)
{
}

uint64_t sub_10005A464(uint64_t a1)
{
  *(void *)a1 = off_10017ADD8;
  sub_10005A6DC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005A500(char *a1)
{
}

uint64_t sub_10005A544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005A578(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005A5C4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AD08);
  sub_10005A464(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005A5FC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017AD08);
  sub_10005A464((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005A63C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017AD08);
  sub_10005A464(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005A67C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017AD08);
  sub_10005A464((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005A6C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005A464(a1);
  operator delete(v1);
}

uint64_t sub_10005A6DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005A82C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005A804( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005A82C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 573LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    __int128 v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int16 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 573LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10005AA10(uint64_t a1, unsigned int *a2)
{
  int v4 = (void *)(a1 + 360);
  int v5 = (const char *)(*(uint64_t (**)(void))(**((void **)a2 + 1) + 16LL))(*((void *)a2 + 1));
  size_t v6 = strlen(v5);
  uint64_t v7 = sub_10000552C(v4, (uint64_t)v5, v6);
  char v10 = 58;
  uint64_t v8 = sub_10000552C(v7, (uint64_t)&v10, 1LL);
  std::ostream::operator<<(v8, *a2);
  return a1;
}

void *sub_10005AA8C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005B47C((uint64_t)a1, a2);
  *a1 = off_10017AEB0;
  a1[45] = &off_10017AFB0;
  a1[46] = &off_10017AFD8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017AEB0;
  a1[45] = off_10017AF38;
  a1[46] = off_10017AF60;
  return a1;
}

void sub_10005AB10(_Unwind_Exception *a1)
{
}

uint64_t sub_10005AB34(uint64_t a1)
{
  return a1;
}

void *sub_10005AB74(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005BAA4((uint64_t)a1, a2);
  *a1 = off_10017B0D0;
  a1[45] = &off_10017B1D0;
  a1[46] = &off_10017B1F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017B0D0;
  a1[45] = off_10017B158;
  a1[46] = off_10017B180;
  return a1;
}

void sub_10005ABF8(_Unwind_Exception *a1)
{
}

uint64_t sub_10005AC1C(uint64_t a1)
{
  return a1;
}

double sub_10005AC5C@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10005C0CC(0, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 564) == 0, a1, a2, (uint64_t)v23);
  if (v25)
  {
    uint64_t v5 = sub_10005B144((uint64_t)v23);
    sub_100056E48((uint64_t)v19, v5);
    unsigned int v22 = *(_DWORD *)(v5 + 512);
    BOOL v6 = v22 > 0xB || ((1 << v22) & 0x982) == 0;
    if (v6 || *(_DWORD *)(a1 + 568) || !*(_DWORD *)(a1 + 564))
    {
      sub_100056E48((uint64_t)&v14, (uint64_t)v19);
      unsigned int v18 = v22;
      sub_100056E48(a3, (uint64_t)&v14);
      *(_DWORD *)(a3 + 51sub_1000296D8(&v5, 2) = v18;
      *(_BYTE *)(a3 + 52crc32(0LL, 0LL, 0) = 1;
      sub_100056FB0((uint64_t)&v14);
    }

    else
    {
      *(void *)&__int128 v12 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
      *((void *)&v12 + 1) = 107LL;
      int v13 = 2;
      sub_10005C5BC(&v14, &v12);
      sub_10000552C(&v16, (uint64_t)"Diskimageuio: Required read-write disk image (", 46LL);
      char v10 = diskimage_uio::operator<<(&v16, v22);
      sub_10000552C(v10, (uint64_t)")", 1LL);
      std::ostream::~ostream(&v16, off_10017B7F8);
      sub_10005D458((uint64_t)&v14);
      std::ios::~ios(&v17);
      unint64_t v11 = std::generic_category();
      *(void *)a3 = 35LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = v11;
      *(_BYTE *)(a3 + 52crc32(0LL, 0LL, 0) = 0;
    }

    sub_100056FB0((uint64_t)v19);
  }

  else
  {
    *(void *)&__int128 v14 = "image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::resolve_disk_image_header(size_t)";
    *((void *)&v14 + 1) = 107LL;
    int v15 = 16;
    sub_10005C4D4(v19, &v14);
    sub_10000552C(&v20, (uint64_t)"Diskimageuio: Couldn't get diskimage: ", 38LL);
    uint64_t v8 = (unsigned int *)sub_10005AF34((uint64_t)v23);
    sub_10005AA10((uint64_t)v19, v8);
    std::ostream::~ostream(&v20, off_10017B5D8);
    sub_10005CE30((uint64_t)v19);
    std::ios::~ios(&v21);
    *(_BYTE *)a3 = 0;
    int v9 = v25;
    *(_BYTE *)(a3 + 52crc32(0LL, 0LL, 0) = v25;
    if (!v9)
    {
      double result = v23[0];
      *(_OWORD *)a3 = *(_OWORD *)v23;
      return result;
    }

    sub_100056E48(a3, (uint64_t)v23);
    *(_DWORD *)(a3 + 51sub_1000296D8(&v5, 2) = v24;
  }

  if (v25) {
    sub_100056FB0((uint64_t)v23);
  }
  return result;
}

void sub_10005AEC4(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x630])) {
    sub_100056FB0((uint64_t)&STACK[0x428]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10005AF34(uint64_t result)
{
  if (*(_BYTE *)(result + 520))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_10017A4F0;
  }

  return result;
}

void *sub_10005AF74(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005DA04((uint64_t)a1, a2);
  *a1 = off_10017B950;
  a1[45] = &off_10017BA50;
  a1[46] = &off_10017BA78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017B950;
  a1[45] = off_10017B9D8;
  a1[46] = off_10017BA00;
  return a1;
}

void sub_10005AFF8(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B01C(uint64_t a1)
{
  return a1;
}

void *sub_10005B05C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005E02C((uint64_t)a1, a2);
  *a1 = off_10017BB70;
  a1[45] = &off_10017BC70;
  a1[46] = &off_10017BC98;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017BB70;
  a1[45] = off_10017BBF8;
  a1[46] = off_10017BC20;
  return a1;
}

void sub_10005B0E0(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B104(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005B144(uint64_t result)
{
  if (!*(_BYTE *)(result + 520))
  {
    uint64_t v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    __int128 v3 = *v1;
    *(void *)exception = &off_10017A990;
    *(_OWORD *)(exception + _Block_object_dispose(va, 8) = v3;
  }

  return result;
}

void *sub_10005B198(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10005E654((uint64_t)a1, a2);
  *a1 = off_10017BD90;
  a1[45] = &off_10017BE90;
  a1[46] = &off_10017BEB8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017BD90;
  a1[45] = off_10017BE18;
  a1[46] = off_10017BE40;
  return a1;
}

void sub_10005B21C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B240(uint64_t a1)
{
  return a1;
}

void *sub_10005B280(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10005EC7C((uint64_t)a1, a2);
  *a1 = off_10017BFB0;
  a1[45] = &off_10017C0B0;
  a1[46] = &off_10017C0D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017BFB0;
  a1[45] = off_10017C038;
  a1[46] = off_10017C060;
  return a1;
}

void sub_10005B304(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B328(uint64_t a1)
{
  return a1;
}

void sub_10005B368(uint64_t a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x470uLL);
  sub_10005B3D0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_10001C350((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_10005B3BC(_Unwind_Exception *a1)
{
}

void *sub_10005B3D0(void *a1, uint64_t a2, unsigned int *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017AE58;
  int v4 = *a3;
  uint64_t v5 = sub_100101F94(a2, *a3);
  sub_100052AA8((uint64_t)(a1 + 3), v5, (v4 & 3) != 0, 0);
  return a1;
}

void sub_10005B428(_Unwind_Exception *a1)
{
}

void sub_10005B43C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017AE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005B44C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10017AE58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10005B46C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10005B47C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017B048;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005B4E4(_Unwind_Exception *a1)
{
}

uint64_t sub_10005B4F8(uint64_t a1)
{
  *(void *)a1 = off_10017B048;
  sub_10005B770(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005B594(char *a1)
{
}

uint64_t sub_10005B5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005B60C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005B658(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017AF78);
  sub_10005B4F8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005B690(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017AF78);
  sub_10005B4F8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005B6D0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017AF78);
  sub_10005B4F8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005B710(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017AF78);
  sub_10005B4F8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005B75C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005B4F8(a1);
  operator delete(v1);
}

uint64_t sub_10005B770(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005B8C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005B898( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005B8C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 534LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 534LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005BAA4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017B268;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005BB0C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005BB20(uint64_t a1)
{
  *(void *)a1 = off_10017B268;
  sub_10005BD98(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005BBBC(char *a1)
{
}

uint64_t sub_10005BC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005BC34(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005BC80(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B198);
  sub_10005BB20(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005BCB8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017B198);
  sub_10005BB20((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005BCF8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B198);
  sub_10005BB20(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005BD38(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B198);
  sub_10005BB20((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005BD84(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005BB20(a1);
  operator delete(v1);
}

uint64_t sub_10005BD98(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005BEE8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005BEC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005BEE8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 539LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      __int128 v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 539LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void sub_10005C0CC( int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v12 = 1LL;
      break;
    case 1:
LABEL_17:
      sub_100058EFC(a2, a5, a6);
      return;
    case 2:
      sub_1000567F0(a2, a6);
      return;
    case 7:
    case 9:
    case 12:
      int v20 = 0;
      sub_100056E48((uint64_t)v21, (uint64_t)__p);
      int v24 = 0;
      sub_100056E48(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 51sub_1000296D8(&v5, 2) = v24;
      *(_BYTE *)(a6 + 52crc32(0LL, 0LL, 0) = 1;
      sub_100056FB0((uint64_t)v21);
      sub_100056FB0((uint64_t)__p);
      return;
    case 8:
      sub_100058DC4(a2, a6);
      return;
    case 11:
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10000AD88(__p, *(void **)a4, *(void *)(a4 + 8));
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a4;
        uint64_t v19 = *(void *)(a4 + 16);
      }

      sub_100055774(&v17, (const void **)a2, (char *)__p, a3);
      uint64_t v16 = v17;
      uint64_t v17 = 0LL;
      v21[0] = v16;
      v23[34] = 4;
      int v24 = 11;
      sub_100056E48(a6, (uint64_t)v21);
      *(_DWORD *)(a6 + 51sub_1000296D8(&v5, 2) = v24;
      *(_BYTE *)(a6 + 52crc32(0LL, 0LL, 0) = 1;
      sub_100056FB0((uint64_t)v21);
      sub_100061CC4(&v17, 0LL);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
      return;
    default:
      __p[0] = "expected<std::pair<hdr_variant, image_format>, diskimage_err> diskimage_uio::details::diskimage_open_params_impl::get_disk_image_hdr(image_format, std::shared_ptr<Backend> &, BOOL, const std::filesystem::path &, size_t)";
      __p[1] = (void *)132;
      LODWORD(v19) = 16;
      sub_10005C6A4(v21, (__int128 *)__p);
      sub_10000552C(&v22, (uint64_t)"Diskimageuio: Unsupported image format", 38LL);
      diskimage_uio::operator<<(&v22, a1);
      std::ostream::~ostream(&v22, off_10017B3B8);
      sub_10005C808((uint64_t)v21);
      std::ios::~ios(v23);
      *(void *)a6 = make_error_code(161LL);
      *(void *)(a6 + _Block_object_dispose(va, 8) = v15;
      *(_BYTE *)(a6 + 52crc32(0LL, 0LL, 0) = 0;
      return;
  }

  while (1)
  {
    int v13 = 2;
    if ((v12 - 2) >= 5)
    {
      if ((_DWORD)v12 == 1) {
        goto LABEL_16;
      }
      if ((_DWORD)v12 == 10) {
        int v13 = 2;
      }
      else {
        int v13 = v12;
      }
    }

    if ((_DWORD)v12 == v13)
    {
      sub_10005C0CC(v12, a2, a3, a4, a5);
      if (!*(_BYTE *)(a6 + 520)) {
        return;
      }
      int v14 = *(_DWORD *)(sub_10005B144(a6) + 512);
      if (v14 || !*(_BYTE *)(a6 + 520))
      {
        if (v14) {
          return;
        }
      }

      else
      {
        sub_100056FB0(a6);
      }
    }

void sub_10005C408(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_100056C54();
  }

  _Unwind_Resume(a1);
}

void *sub_10005C4D4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005CDB4((uint64_t)a1, a2);
  *a1 = off_10017B510;
  a1[45] = &off_10017B610;
  a1[46] = &off_10017B638;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017B510;
  a1[45] = off_10017B598;
  a1[46] = off_10017B5C0;
  return a1;
}

void sub_10005C558(_Unwind_Exception *a1)
{
}

uint64_t sub_10005C57C(uint64_t a1)
{
  return a1;
}

void *sub_10005C5BC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005D3DC((uint64_t)a1, a2);
  *a1 = off_10017B730;
  a1[45] = &off_10017B830;
  a1[46] = &off_10017B858;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017B730;
  a1[45] = off_10017B7B8;
  a1[46] = off_10017B7E0;
  return a1;
}

void sub_10005C640(_Unwind_Exception *a1)
{
}

uint64_t sub_10005C664(uint64_t a1)
{
  return a1;
}

void *sub_10005C6A4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005C78C((uint64_t)a1, a2);
  *a1 = off_10017B2F0;
  a1[45] = &off_10017B3F0;
  a1[46] = &off_10017B418;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017B2F0;
  a1[45] = off_10017B378;
  a1[46] = off_10017B3A0;
  return a1;
}

void sub_10005C728(_Unwind_Exception *a1)
{
}

uint64_t sub_10005C74C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005C78C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017B488;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005C7F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10005C808(uint64_t a1)
{
  *(void *)a1 = off_10017B488;
  sub_10005CA80(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005C8A4(char *a1)
{
}

uint64_t sub_10005C8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005C91C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005C968(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B3B8);
  sub_10005C808(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005C9A0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017B3B8);
  sub_10005C808((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005C9E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B3B8);
  sub_10005C808(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005CA20(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B3B8);
  sub_10005C808((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005CA6C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005C808(a1);
  operator delete(v1);
}

uint64_t sub_10005CA80(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005CBD0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005CBA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005CBD0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 485LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 485LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005CDB4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017B6A8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005CE1C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005CE30(uint64_t a1)
{
  *(void *)a1 = off_10017B6A8;
  sub_10005D0A8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005CECC(char *a1)
{
}

uint64_t sub_10005CF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005CF44(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005CF90(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B5D8);
  sub_10005CE30(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005CFC8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017B5D8);
  sub_10005CE30((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005D008(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B5D8);
  sub_10005CE30(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005D048(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B5D8);
  sub_10005CE30((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005D094(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005CE30(a1);
  operator delete(v1);
}

uint64_t sub_10005D0A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005D1F8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005D1D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005D1F8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 495LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 495LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005D3DC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017B8C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005D444(_Unwind_Exception *a1)
{
}

uint64_t sub_10005D458(uint64_t a1)
{
  *(void *)a1 = off_10017B8C8;
  sub_10005D6D0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005D4F4(char *a1)
{
}

uint64_t sub_10005D538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005D56C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005D5B8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017B7F8);
  sub_10005D458(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005D5F0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017B7F8);
  sub_10005D458((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005D630(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B7F8);
  sub_10005D458(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005D670(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017B7F8);
  sub_10005D458((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005D6BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005D458(a1);
  operator delete(v1);
}

uint64_t sub_10005D6D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005D820((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005D7F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005D820(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 503LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 503LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005DA04(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017BAE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005DA6C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005DA80(uint64_t a1)
{
  *(void *)a1 = off_10017BAE8;
  sub_10005DCF8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005DB1C(char *a1)
{
}

uint64_t sub_10005DB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005DB94(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005DBE0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BA18);
  sub_10005DA80(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005DC18(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017BA18);
  sub_10005DA80((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005DC58(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017BA18);
  sub_10005DA80(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005DC98(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017BA18);
  sub_10005DA80((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005DCE4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005DA80(a1);
  operator delete(v1);
}

uint64_t sub_10005DCF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005DE48((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005DE20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005DE48(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 551LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 551LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005E02C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017BD08;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005E094(_Unwind_Exception *a1)
{
}

uint64_t sub_10005E0A8(uint64_t a1)
{
  *(void *)a1 = off_10017BD08;
  sub_10005E320(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005E144(char *a1)
{
}

uint64_t sub_10005E188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005E1BC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005E208(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BC38);
  sub_10005E0A8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005E240(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017BC38);
  sub_10005E0A8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005E280(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017BC38);
  sub_10005E0A8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005E2C0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017BC38);
  sub_10005E0A8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005E30C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005E0A8(a1);
  operator delete(v1);
}

uint64_t sub_10005E320(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005E470((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005E448( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005E470(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 554LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 554LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005E654(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017BF28;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005E6BC(_Unwind_Exception *a1)
{
}

uint64_t sub_10005E6D0(uint64_t a1)
{
  *(void *)a1 = off_10017BF28;
  sub_10005E948(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005E76C(char *a1)
{
}

uint64_t sub_10005E7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005E7E4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005E830(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017BE58);
  sub_10005E6D0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005E868(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017BE58);
  sub_10005E6D0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005E8A8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017BE58);
  sub_10005E6D0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005E8E8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017BE58);
  sub_10005E6D0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005E934(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005E6D0(a1);
  operator delete(v1);
}

uint64_t sub_10005E948(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005EA98((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005EA70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005EA98(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 561LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 561LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10005EC7C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017C148;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005ECE4(_Unwind_Exception *a1)
{
}

uint64_t sub_10005ECF8(uint64_t a1)
{
  *(void *)a1 = off_10017C148;
  sub_10005EF70(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005ED94(char *a1)
{
}

uint64_t sub_10005EDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005EE0C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005EE58(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C078);
  sub_10005ECF8(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005EE90(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017C078);
  sub_10005ECF8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005EED0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C078);
  sub_10005ECF8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005EF10(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C078);
  sub_10005ECF8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005EF5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005ECF8(a1);
  operator delete(v1);
}

uint64_t sub_10005EF70(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005F0C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005F098( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005F0C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 565LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 565LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void *sub_10005F2A4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10005F38C((uint64_t)a1, a2);
  *a1 = off_10017C1D0;
  a1[45] = &off_10017C2D0;
  a1[46] = &off_10017C2F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017C1D0;
  a1[45] = off_10017C258;
  a1[46] = off_10017C280;
  return a1;
}

void sub_10005F328(_Unwind_Exception *a1)
{
}

uint64_t sub_10005F34C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005F38C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017C368;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10005F3F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10005F408(uint64_t a1)
{
  *(void *)a1 = off_10017C368;
  sub_10005F680(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10005F4A4(char *a1)
{
}

uint64_t sub_10005F4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10005F51C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10005F568(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C298);
  sub_10005F408(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10005F5A0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017C298);
  sub_10005F408((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10005F5E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C298);
  sub_10005F408(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10005F620(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C298);
  sub_10005F408((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10005F66C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10005F408(a1);
  operator delete(v1);
}

uint64_t sub_10005F680(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10005F7D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10005F7A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10005F7D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      char v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 610LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 610LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void sub_10005F9B4(unsigned int *a1@<X1>, _DWORD *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_10005FA2C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10005FA18(_Unwind_Exception *a1)
{
}

void *sub_10005FA2C(void *a1, unsigned int *a2, _DWORD *a3, char *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017AE58;
  sub_100052AA8((uint64_t)(a1 + 3), *a2, *a3 != 0, *a4);
  return a1;
}

void sub_10005FA74(_Unwind_Exception *a1)
{
}

uint64_t sub_10005FA88(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + sub_100006224(v1 + 64) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 3sub_1000296D8(&v5, 2) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    operator delete(v5);
  }

  return a1;
}

void *sub_10005FAE8(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    char v6 = result;
    double result = sub_10005FB60(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10005FB44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10005FB60(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    sub_100045090();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_10005FBA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017C3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005FBB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10017C3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10005FBD0(uint64_t a1)
{
}

void sub_10005FBDC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 3sub_1000296D8(&v5, 2) = v3;
    operator delete(v3);
  }

  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

void sub_10005FC38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017C438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10005FC48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10017C438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10005FC68(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_BYTE *sub_10005FC78@<X0>(const std::error_category *a1@<X0>, uint64_t a2@<X8>)
{
  if (v12[16])
  {
    double result = (_BYTE *)sub_10005FEE0((uint64_t)v12);
    if (*result)
    {
      *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
      *((void *)&v7 + 1) = 84LL;
      int v8 = 16;
      sub_10005FF34(v9, &v7);
      sub_10000552C(&v10, (uint64_t)"Diskimageuio: image is locked", 29LL);
      std::ostream::~ostream(&v10, off_10017C778);
      sub_1000606C0((uint64_t)v9);
      std::ios::~ios(v11);
      double result = (_BYTE *)make_error_code(162LL);
      char v4 = 0;
      *(void *)a2 = result;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v5;
    }

    else
    {
      *(_BYTE *)a2 = 0;
      char v4 = 1;
    }
  }

  else
  {
    *(void *)&__int128 v7 = "diskimage_err> diskimage_uio::details::diskimage_open_params_impl::validate_unlocked() const";
    *((void *)&v7 + 1) = 84LL;
    int v8 = 16;
    sub_10005FDF8(v9, &v7);
    sub_10000552C(&v10, (uint64_t)"Diskimageuio: can't get lock status ", 36LL);
    char v6 = (unsigned int *)sub_100054DC8((uint64_t)v12);
    sub_10005AA10((uint64_t)v9, v6);
    std::ostream::~ostream(&v10, off_10017C558);
    sub_100060098((uint64_t)v9);
    std::ios::~ios(v11);
    double result = (_BYTE *)sub_100054DC8((uint64_t)v12);
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)result;
  }

  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

void sub_10005FDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_10005FDF8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006001C((uint64_t)a1, a2);
  *a1 = off_10017C490;
  a1[45] = &off_10017C590;
  a1[46] = &off_10017C5B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017C490;
  a1[45] = off_10017C518;
  a1[46] = off_10017C540;
  return a1;
}

void sub_10005FE7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10005FEA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005FEE0(uint64_t result)
{
  if (!*(_BYTE *)(result + 16))
  {
    uint64_t v1 = (__int128 *)result;
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    __int128 v3 = *v1;
    *(void *)exception = &off_10017A990;
    *(_OWORD *)(exception + _Block_object_dispose(va, 8) = v3;
  }

  return result;
}

void *sub_10005FF34(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_100060644((uint64_t)a1, a2);
  *a1 = off_10017C6B0;
  a1[45] = &off_10017C7B0;
  a1[46] = &off_10017C7D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017C6B0;
  a1[45] = off_10017C738;
  a1[46] = off_10017C760;
  return a1;
}

void sub_10005FFB8(_Unwind_Exception *a1)
{
}

uint64_t sub_10005FFDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006001C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017C628;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100060084(_Unwind_Exception *a1)
{
}

uint64_t sub_100060098(uint64_t a1)
{
  *(void *)a1 = off_10017C628;
  sub_100060310(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100060134(char *a1)
{
}

uint64_t sub_100060178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000601AC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000601F8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C558);
  sub_100060098(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100060230(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017C558);
  sub_100060098((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100060270(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C558);
  sub_100060098(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000602B0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C558);
  sub_100060098((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000602FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100060098(a1);
  operator delete(v1);
}

uint64_t sub_100060310(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100060460((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100060438( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100060460(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 645LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 645LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_100060644(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017C848;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000606AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000606C0(uint64_t a1)
{
  *(void *)a1 = off_10017C848;
  sub_100060938(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10006075C(char *a1)
{
}

uint64_t sub_1000607A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000607D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100060820(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C778);
  sub_1000606C0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100060858(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017C778);
  sub_1000606C0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100060898(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C778);
  sub_1000606C0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000608D8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C778);
  sub_1000606C0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100060924(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000606C0(a1);
  operator delete(v1);
}

uint64_t sub_100060938(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100060A88((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100060A60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100060A88(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 650LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 650LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

void *sub_100060C6C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100060D54((uint64_t)a1, a2);
  *a1 = off_10017C8D0;
  a1[45] = &off_10017C9D0;
  a1[46] = &off_10017C9F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017C8D0;
  a1[45] = off_10017C958;
  a1[46] = off_10017C980;
  return a1;
}

void sub_100060CF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100060D14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100060D54(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017CA68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100060DBC(_Unwind_Exception *a1)
{
}

uint64_t sub_100060DD0(uint64_t a1)
{
  *(void *)a1 = off_10017CA68;
  sub_100061048(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100060E6C(char *a1)
{
}

uint64_t sub_100060EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100060EE4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100060F30(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017C998);
  sub_100060DD0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100060F68(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017C998);
  sub_100060DD0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100060FA8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C998);
  sub_100060DD0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100060FE8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017C998);
  sub_100060DD0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100061034(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100060DD0(a1);
  operator delete(v1);
}

uint64_t sub_100061048(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100061198((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100061170( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100061198(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 681LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 681LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

const std::error_category *sub_10006137C@<X0>(uint64_t a1@<X8>)
{
  *(void *)&__int128 v3 = "hdr_get_nr_blocks(const hdr_variant &)::(anonymous class)::operator()(const auto &) const [hdr:auto = std::monostate]";
  *((void *)&v3 + 1) = 69LL;
  int v4 = 16;
  sub_100061500(v5, &v3);
  sub_10000552C(&v6, (uint64_t)"Diskimageuio: can't get Diskimage attribute, unknown header format", 66LL);
  std::ostream::~ostream(&v6, off_10017CBE8);
  sub_100061664((uint64_t)v5);
  std::ios::~ios(&v7);
  double result = std::generic_category();
  *(void *)a1 = 6LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_100061418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100061444(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 492);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_10006145C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 48);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_100061470(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_100061484(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = v3.n128_u64[0];
  *(_BYTE *)(a2 + 16) = 1;
}

uint64_t sub_1000614CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 16LL))();
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void *sub_100061500(void *a1, __int128 *a2)
{
  __n128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000615E8((uint64_t)a1, a2);
  *a1 = off_10017CB20;
  a1[45] = &off_10017CC20;
  a1[46] = &off_10017CC48;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017CB20;
  a1[45] = off_10017CBA8;
  a1[46] = off_10017CBD0;
  return a1;
}

void sub_100061584(_Unwind_Exception *a1)
{
}

uint64_t sub_1000615A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000615E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017CCB8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100061650(_Unwind_Exception *a1)
{
}

uint64_t sub_100061664(uint64_t a1)
{
  *(void *)a1 = off_10017CCB8;
  sub_1000618DC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100061700(char *a1)
{
}

uint64_t sub_100061744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100061778(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000617C4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017CBE8);
  sub_100061664(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000617FC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017CBE8);
  sub_100061664((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10006183C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017CBE8);
  sub_100061664(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006187C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017CBE8);
  sub_100061664((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000618C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100061664(a1);
  operator delete(v1);
}

uint64_t sub_1000618DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100061A2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100061A04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100061A2C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 112LL;
    __int16 v25 = 2082;
    __int128 v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        uint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 112LL;
      __int16 v25 = 2082;
      __int128 v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100061C10@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = sub_100061C68(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100061C54(_Unwind_Exception *a1)
{
}

void *sub_100061C68(void *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017C3E8;
  sub_1001173B8(a1 + 3);
  return a1;
}

void sub_100061C9C(_Unwind_Exception *a1)
{
}

void sub_100061CB0(std::exception *a1)
{
}

void sub_100061CC4(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100061D88(&v3);
    operator delete(v2);
  }

void *sub_100061D04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100044D7C();
  }
  return operator new(16 * a2);
}

uint64_t sub_100061D38(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100061D88(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 16;
        diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)(v4 - 8));
        int v4 = v6;
      }

      while (v6 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t *sub_100061DFC(uint64_t *a1, __int128 *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  __int128 v5 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  void v14[2] = v4;
  uint64_t v15 = &v17;
  v14[0] = 0LL;
  v14[1] = 0LL;
  uint64_t v18 = v4;
  __int128 v16 = xmmword_100142560;
  __int128 v17 = v5;
  sub_10001A464((uint64_t)a1, (uint64_t *)&v15);
  sub_10000627C((uint64_t)&v15);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v9 = (unint64_t *)a1[18];
  uint64_t v8 = a1[19];
  uint64_t v10 = a1[1];
  uint64_t v15 = (__int128 *)*a1;
  int v13 = v9;
  v14[0] = (uint64_t)v15 + 24 * v10;
  uint64_t v12 = &v9[v8];
  sub_10003BB64((uint64_t)(a1 + 26), (uint64_t *)&v15, v14, &v13, &v12, v6, v7);
  return a1;
}

void sub_100061ECC(_Unwind_Exception *a1)
{
}

std::string *sub_100061EF8(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_100061F5C(a1, a2, &a2[v3]);
  return a1;
}

void sub_100061F40(_Unwind_Exception *exception_object)
{
}

std::string *sub_100061F5C(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = (char)this->__r_.__value_.__s.__size_;
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type cap = this->__r_.__value_.__l.__cap_;
    std::string::size_type v9 = (cap & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = HIBYTE(cap);
  }

  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v9 = 22LL;
    uint64_t v10 = this;
  }

  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0LL, 0LL);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = this->__r_.__value_.__s.__size_;
    }

    os_log_type_t v14 = this;
    if ((v6 & 0x80) != 0) {
      os_log_type_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }

    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    else {
      this->__r_.__value_.__s.__size_ = v17 & 0x7F;
    }
  }

  else
  {
    sub_1000620D0(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
  }

  return this;
}

void sub_1000620B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1000620D0(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_100005874();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    _OWORD v4[2] = v9 | 0x8000000000000000LL;
    *BOOL v4 = result;
    BOOL v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)BOOL v4 = 0;
  return result;
}

__n128 sub_100062174(diskimage_uio::diskimage_open_params *this, diskimage_uio::diskimage_open_params *a2)
{
  if (*((_BYTE *)this + 16)) {
    BOOL v4 = *((_BYTE *)a2 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v9[0] = *(void *)this;
    *(void *)this = 0LL;
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)this, (uint64_t *)a2);
    diskimage_uio::diskimage_open_params::operator=((uint64_t *)a2, v9);
LABEL_11:
    diskimage_uio::diskimage_open_params::~diskimage_open_params((diskimage_uio::diskimage_open_params *)v9);
    return result;
  }

  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *(void *)a2 = *(void *)this;
      *(void *)this = 0LL;
      diskimage_uio::diskimage_open_params::~diskimage_open_params(this);
      result.n128_u64[0] = v9[0];
      *(_OWORD *)this = *(_OWORD *)v9;
      char v6 = *((_BYTE *)this + 16);
      *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a2 + 16) = v6;
      return result;
    }
  }

  else if (*((_BYTE *)a2 + 16))
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a2 = 0LL;
    diskimage_uio::diskimage_open_params::~diskimage_open_params(a2);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(void *)this = v7;
    v9[0] = 0LL;
    char v8 = *((_BYTE *)this + 16);
    *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)a2 + 16) = v8;
    goto LABEL_11;
  }

  __n128 result = *(__n128 *)this;
  *(_OWORD *)this = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

void sub_100062270(_OWORD *a1)
{
  *(_OWORD *)uint64_t v1 = *a1;
  *(_BYTE *)(v1 + 16) = 0;
  __cxa_end_catch();
}

void *sub_100062280(void *a1)
{
  return __cxa_begin_catch(a1);
}

uint64_t sub_100062288(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_10017CF40[v1])(&v5, v3);
}

uint64_t sub_1000622E4(uint64_t (***a1)(void))
{
  v3[0] = (**a1)(a1);
  v3[1] = v1;
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, void *))off_10017CF80[v1])(&v5, v3);
}

uint64_t sub_100062340(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24) - v2;
  uint64_t v4 = v3 / 48;
  if (v3 < 49)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = v4 - 1;
    uint64_t v7 = (int *)(v2 + 48 * v4 - 96);
    do
    {
      int v8 = *v7;
      v7 -= 12;
      if (v8 != 2) {
        break;
      }
      ++v5;
    }

    while (v6-- > 1);
  }

  uint64_t v10 = v4 + ~v5;
  if (v5) {
    return v10;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000623B4(_DWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(a4 + 144);
  uint64_t v7 = (*((uint64_t (**)(_DWORD **))*a1 + 4))(a1);
  if (*a1[2]) {
    return -78LL;
  }
  uint64_t v9 = *(void ***)(a2 + 16);
  return sub_1000062D4(*v9);
}

uint64_t sub_100062470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  uint64_t v3 = *(void ***)(a2 + 24);
  if (v2 == v3) {
    return 4294967218LL;
  }
  uint64_t v4 = 4294967218LL;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)(*v2)[1] + 40LL))((*v2)[1]))
    {
      uint64_t v4 = sub_1000144E8(*v2);
      if ((_DWORD)v4) {
        break;
      }
    }

    v2 += 2;
  }

  while (v2 != v3);
  return v4;
}

uint64_t sub_1000624E8(uint64_t a1, void **a2, _BYTE *a3)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_10017CDE8;
  *(void *)(a1 + 16) = 0LL;
  unint64_t v6 = (uint64_t *)(a1 + 16);
  *(_BYTE *)(a1 + 56) = 0;
  uint64_t v7 = (void *)(a1 + 56);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 0LL;
  *(_BYTE *)(a1 + 144) = 0;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = (*(uint64_t (**)(void))(*(void *)**a2 + 24LL))(**a2);
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  if ((*a3 & 2) != 0)
  {
    int v8 = a2[1];
    *(void *)&__int128 v70 = *(v8 - 3);
    uint64_t v9 = *(v8 - 2);
    *((void *)&v70 + 1) = v9;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)(v9 + 8);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      int v8 = a2[1];
    }

    uint64_t v12 = v8 - 3;
    while (v12 != *a2)
    {
      std::string::size_type v13 = (uint64_t (***)(void))*(v12 - 3);
      v12 -= 3;
      __int128 v75 = v13;
      os_log_type_t v14 = (std::__shared_weak_count *)v12[1];
      __int128 v76 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }

      uint64_t v17 = sub_100062288((uint64_t (***)(void))v70);
      char v18 = v17;
      uint64_t v79 = v17;
      uint64_t v80 = v19;
      uint64_t v20 = sub_1000622E4(v75);
      uint64_t v77 = v20;
      uint64_t v78 = v21;
      if (v18)
      {
LABEL_11:
        if ((_BYTE)v20)
        {
LABEL_12:
          if (v79 != v77 || v80 != v78)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            void *exception = &off_100196FC8;
            char v65 = std::generic_category();
            exception[1] = 166LL;
            exception[2] = v65;
            *((_BYTE *)exception + 24) = 0;
            *((_BYTE *)exception + 4_Block_object_dispose(va, 8) = 0;
            exception[7] = "Corrupted shadow file(s) chain";
          }
        }

        else
        {
          uint64_t v28 = 1LL;
          while (v28 != 16)
          {
            if (*((unsigned __int8 *)&v77 + v28++))
            {
              break;
            }
          }
        }
      }

      else
      {
        uint64_t v26 = 1LL;
        while (v26 != 16)
        {
          if (*((unsigned __int8 *)&v79 + v26++))
          {
            break;
          }
        }
      }

      sub_10001C610(&v70, (uint64_t *)&v75);
      __int16 v23 = v76;
      if (v76)
      {
        uint64_t v24 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }

    __int128 v30 = (std::__shared_weak_count *)*((void *)&v70 + 1);
    if (*((void *)&v70 + 1))
    {
      int v31 = (unint64_t *)(*((void *)&v70 + 1) + 8LL);
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }

  uint64_t v33 = (uint64_t)*a2;
  if (a2[1] != *a2)
  {
    int v34 = 0;
    unint64_t v35 = 0LL;
    unint64_t v68 = "Block size mismatch in DiskImageStackable";
    do
    {
      uint64_t v36 = (void *)(v33 + 24 * v35);
      uint64_t v37 = *(void *)(a1 + 40);
      if (*((_DWORD *)v36 + 4) == 2)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
        if (v38 >= 2 && v35 != v38 - 2)
        {
          unint64_t v40 = (const void *)(*a2)[a2[1] - *a2 - 3];
          if (v40)
          {
            {
              unint64_t v68 = "Currently, cache can only be added directly above plugin";
LABEL_88:
              __int128 v66 = __cxa_allocate_exception(0x40uLL);
              void *v66 = &off_100196FC8;
              __int128 v67 = std::generic_category();
              v66[1] = 4294967274LL;
              v66[2] = v67;
              *((_BYTE *)v66 + 24) = 0;
              *((_BYTE *)v66 + 4_Block_object_dispose(va, 8) = 0;
              v66[7] = v68;
            }
          }
        }
      }

      __int128 v41 = (uint64_t (***)(void))*v36;
      __int128 v75 = v41;
      __int128 v42 = (std::__shared_weak_count *)v36[1];
      __int128 v76 = v42;
      uint64_t v43 = v41;
      if (v42)
      {
        int v44 = (unint64_t *)&v42->__shared_owners_;
        do
          unint64_t v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        uint64_t v43 = (uint64_t (***)(void))*v36;
      }

      if ((*v43)[12](v43))
      {
        LOBYTE(v77) = 1;
        sub_1000684F0((uint64_t)v41, (char *)&v77, &v70);
        sub_1000198A4((uint64_t)v36, &v70);
        __int128 v46 = (std::__shared_weak_count *)*((void *)&v70 + 1);
        if (*((void *)&v70 + 1))
        {
          __int128 v47 = (unint64_t *)(*((void *)&v70 + 1) + 8LL);
          do
            unint64_t v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }

        *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 1;
      }

      LODWORD(v7crc32(0LL, 0LL, 0) = *((_DWORD *)v36 + 4);
      *((void *)&v70 + 1) = *v36;
      uint64_t v49 = (std::__shared_weak_count *)v36[1];
      unint64_t v71 = v49;
      if (v49)
      {
        int v50 = (unint64_t *)&v49->__shared_owners_;
        do
          unint64_t v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }

      __int128 v72 = v75;
      __int128 v73 = v76;
      if (v76)
      {
        uint64_t v52 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }

      uint64_t v74 = (*(uint64_t (**)(void))(*(void *)*v36 + 32LL))(*v36);
      sub_100062B70(v6, (uint64_t)&v70);
      if (*((_DWORD *)v36 + 4) == 2) {
        v34 |= (*(uint64_t (**)(void))(*(void *)*v36 + 40LL))(*v36);
      }
      uint64_t v54 = v73;
      if (v73)
      {
        uint64_t v55 = (unint64_t *)&v73->__shared_owners_;
        do
          unint64_t v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }

      __int128 v57 = v71;
      if (v71)
      {
        uint64_t v58 = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }

      uint64_t v60 = v76;
      if (v76)
      {
        uint64_t v61 = (unint64_t *)&v76->__shared_owners_;
        do
          unint64_t v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }

      ++v35;
      uint64_t v33 = (uint64_t)*a2;
    }

    while (v35 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    if ((v34 & 1) != 0)
    {
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 0x40000000LL;
      v69[2] = sub_100062C94;
      v69[3] = &unk_10017CEA8;
      v69[4] = a1;
      sub_100067878((uint64_t)v7);
      sub_100066B88(v7, (uint64_t)v69, 600000000LL);
      *(_BYTE *)(a1 + 144) = 1;
    }
  }

  return a1;
}

void sub_100062AEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100062B70(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555LL) {
      sub_100045090();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555LL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      std::string::size_type v13 = (char *)sub_100067678(v4, v12);
    }
    else {
      std::string::size_type v13 = 0LL;
    }
    uint64_t v15 = v13;
    unint64_t v16 = &v13[48 * v9];
    char v18 = &v13[48 * v12];
    sub_1000675B0((uint64_t)v16, a2);
    uint64_t v17 = v16 + 48;
    sub_100067604(a1, &v15);
    uint64_t v8 = a1[1];
    sub_1000677EC((uint64_t)&v15);
  }

  else
  {
    sub_1000675B0(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 48;
    a1[1] = v7 + 48;
  }

  a1[1] = v8;
  return v8 - 48;
}

void sub_100062C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100062C94(uint64_t a1)
{
  return sub_100062C9C(*(void *)(a1 + 32));
}

uint64_t sub_100062C9C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(result + 24);
  while (v1 != v2)
  {
    __n128 result = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40LL))(*(void *)(v1 + 8));
    if ((_DWORD)result) {
      BOOL v3 = *(_DWORD *)v1 == 2;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 136LL))(*(void *)(v1 + 8));
      __n128 result = sub_1000144E8(v4);
      if (v4) {
        __n128 result = (*(uint64_t (**)(void *))(*v4 + 40LL))(v4);
      }
    }

    v1 += 48LL;
  }

  return result;
}

void sub_100062D20(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100062D44(uint64_t a1)
{
  *(void *)a1 = off_10017CDE8;
  sub_100062C9C(a1);
  sub_1000678D0(a1 + 56);
  BOOL v3 = (void **)(a1 + 16);
  sub_100067928(&v3);
  return a1;
}

void sub_100062D9C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100062D44(a1);
  operator delete(v1);
}

unint64_t sub_100062DB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v15 = *(void *)(a1 + 40);
  unsigned int v16 = *((unsigned __int8 *)a6 + 16);
  uint64_t v17 = *a6;
  uint64_t v18 = a6[1];
  if ((v16 & 2) != 0) {
    uint64_t v19 = *a6;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  v34[0] = v19 * v15;
  v34[1] = ((v16 & 1) + v18 - v17 + (int)(((v16 >> 1) & 1) - 1) + v19) * v15;
  char v35 = 2;
  sub_10003CE10(a3, (uint64_t)v34, a4, (uint64_t)v36);
  unint64_t v20 = sub_100062F90(a1, a2, (uint64_t)v36, (uint64_t)&v39, a5, a7, a8, a9, a10);
  uint64_t v21 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  uint64_t v24 = v40;
  if (v40)
  {
    unint64_t v25 = (unint64_t *)&v40->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  uint64_t v27 = v38;
  if (v38)
  {
    uint64_t v28 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  __int128 v30 = v37;
  if (v37)
  {
    int v31 = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  return v20;
}

void sub_100062F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

unint64_t sub_100062F90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  unint64_t v14 = sub_100064D5C();
  uint64_t v16 = v14;
  unint64_t v80 = v14;
  unint64_t v81 = v15;
  if ((v14 & 0x8000000000000000LL) == 0 || !(_DWORD)v14)
  {
    unint64_t v17 = *(void *)(a3 + 144);
    BOOL v18 = v15 < v17 || v14 > ((*(void *)(a4 + 144) - v17) & ~((uint64_t)(*(void *)(a4 + 144) - v17) >> 63));
    BOOL v19 = 0;
    if (a5 && v18)
    {
      unint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a4 + 144) - v17;
      unint64_t v22 = v21 & ~(v21 >> 63);
      if (v22 <= v20) {
        unint64_t v22 = *(void *)(a1 + 40);
      }
      if (v21 <= 0) {
        unint64_t v23 = 0LL;
      }
      else {
        unint64_t v23 = v22;
      }
      v78[0] = v17 / v20;
      v78[1] = (v17 + v20 + v23 - 1) / v20;
      char v79 = 2;
      BOOL v19 = sub_1000639E4(a1, a2, &v80, (uint64_t)v78, a5, a9);
    }

    BOOL v51 = v19;
    uint64_t v24 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v65 = *(void *)a3;
    __int128 v66 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }

    v67[0] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)(a3 + 25);
    uint64_t v68 = *(void *)(a3 + 48);
    __int128 v69 = *(_OWORD *)(a3 + 56);
    __int128 v70 = *(_OWORD *)(a3 + 72);
    __int128 v71 = *(_OWORD *)(a3 + 88);
    char v72 = *(_BYTE *)(a3 + 104);
    uint64_t v27 = *(std::__shared_weak_count **)(a3 + 120);
    uint64_t v73 = *(void *)(a3 + 112);
    uint64_t v74 = v27;
    if (v27)
    {
      uint64_t v28 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }

    __int128 v75 = *(_OWORD *)(a3 + 128);
    uint64_t v76 = *(void *)(a3 + 144);
    char v77 = *(_BYTE *)(a3 + 152);
    __int128 v30 = *(std::__shared_weak_count **)(a4 + 8);
    uint64_t v52 = *(void *)a4;
    unint64_t v53 = v30;
    if (v30)
    {
      int v31 = (unint64_t *)&v30->__shared_owners_;
      do
        unint64_t v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }

    v54[0] = *(_OWORD *)(a4 + 16);
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)(a4 + 25);
    uint64_t v55 = *(void *)(a4 + 48);
    __int128 v56 = *(_OWORD *)(a4 + 56);
    __int128 v57 = *(_OWORD *)(a4 + 72);
    __int128 v58 = *(_OWORD *)(a4 + 88);
    char v59 = *(_BYTE *)(a4 + 104);
    uint64_t v33 = *(std::__shared_weak_count **)(a4 + 120);
    uint64_t v60 = *(void *)(a4 + 112);
    uint64_t v61 = v33;
    if (v33)
    {
      int v34 = (unint64_t *)&v33->__shared_owners_;
      do
        unint64_t v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }

    uint64_t v36 = *(void *)(a4 + 144);
    __int128 v62 = *(_OWORD *)(a4 + 128);
    uint64_t v63 = v36;
    char v64 = *(_BYTE *)(a4 + 152);
    uint64_t v16 = sub_100063F8C(a1, a2, (uint64_t)&v65, (uint64_t)&v52, &v80, a5);
    uint64_t v37 = v61;
    if (v61)
    {
      unint64_t v38 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    unint64_t v40 = v53;
    if (v53)
    {
      __int128 v41 = (unint64_t *)&v53->__shared_owners_;
      do
        unint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    uint64_t v43 = v74;
    if (v74)
    {
      int v44 = (unint64_t *)&v74->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    __int128 v46 = v66;
    if (v66)
    {
      __int128 v47 = (unint64_t *)&v66->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    if ((v16 & 0x8000000000000000LL) == 0 || !(_DWORD)v16)
    {
      uint64_t v49 = *(void *)(a4 + 144);
      if (v51) {
        return sub_100120F4C(a3, a4, (v49 - *(void *)(a3 + 144)) & ~((v49 - *(void *)(a3 + 144)) >> 63), &v80);
      }
      else {
        return v49 - v81;
      }
    }
  }

  return v16;
}

uint64_t sub_10006337C(uint64_t a1)
{
  uint64_t v2 = a1 + 160;
  sub_100006224(a1 + 272);
  sub_100006224(v2);
  sub_100006224(a1 + 112);
  return sub_100006224(a1);
}

uint64_t sub_1000633B8@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((*(_BYTE *)(a4 + 16) & 2) != 0) {
    uint64_t v8 = *(void *)a4;
  }
  else {
    uint64_t v8 = *(void *)a4 + 1LL;
  }
  unint64_t v9 = (*(_BYTE *)(a4 + 16) & 1) + *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(result + 16);
  uint64_t v11 = *(void *)(result + 24);
  unint64_t v12 = *(void *)(v10 + 48 * a3 + 40);
  if (v12 < v9) {
    unint64_t v9 = *(void *)(v10 + 48 * a3 + 40);
  }
  *(void *)&__int128 v30 = v8;
  *((void *)&v30 + 1) = v9;
  LOBYTE(v31) = 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4) - 1 <= a3 || v12 <= *(void *)(v10 + 48 * a3 + 88)) {
    goto LABEL_19;
  }
  uint64_t v13 = result;
  *(void *)&__int128 v28 = *(void *)(v10 + 48 * a3 + 88);
  *((void *)&v28 + 1) = v12;
  LOBYTE(v29) = 2;
  __n128 result = sub_1000636AC((uint64_t)&v28, (uint64_t)&v30);
  if ((result & 1) == 0)
  {
    uint64_t v10 = *(void *)(v13 + 16);
LABEL_19:
    uint64_t v20 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
    *(void *)a5 = *(void *)(v10 + 48 * a3 + 8);
    *(_OWORD *)(a5 + _Block_object_dispose(va, 8) = v30;
    *(void *)(a5 + 24) = v31;
    *(void *)(a5 + 3sub_1000296D8(&v5, 2) = 0LL;
    *(void *)(a5 + 4crc32(0LL, 0LL, 0) = v20;
    *(_DWORD *)(a5 + 4_Block_object_dispose(va, 8) = 6;
    *(void *)(a5 + 56) = &off_1001723D8;
    *(void *)(a5 + 8crc32(0LL, 0LL, 0) = a5 + 56;
    return result;
  }

  __int128 v24 = v28;
  uint64_t v25 = v29;
  sub_100063880((unint64_t *)&v24, (unint64_t *)&v30, (uint64_t)&v26);
  uint64_t v14 = v30;
  if ((v31 & 2) == 0) {
    uint64_t v14 = v30 + 1;
  }
  uint64_t v15 = v26;
  if ((v27 & 2) == 0) {
    uint64_t v15 = v26 + 1;
  }
  *(void *)&__int128 v30 = v14;
  *((void *)&v30 + 1) = v15;
  LOBYTE(v31) = 2;
  uint64_t v16 = *(void *)(*(void *)(a2 + 16) + 16 * a3);
  uint64_t v32 = *(void *)(*(void *)(v13 + 16) + 48 * a3 + 8);
  __int128 v33 = v30;
  uint64_t v34 = v31;
  uint64_t v35 = 0LL;
  uint64_t v36 = v16;
  int v37 = 6;
  unint64_t v17 = v38;
  v38[0] = &off_1001723D8;
  unint64_t v39 = v38;
  BOOL v18 = operator new(0x20uLL);
  unint64_t v22 = v18 + 4;
  unint64_t v23 = (char *)(v18 + 4);
  *(_OWORD *)BOOL v18 = v26;
  v18[2] = v27;
  *((_DWORD *)v18 + 6) = 1;
  std::string __p = v18;
  sub_10009AC38((uint64_t)&v32, (uint64_t)&__p, a5);
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }

  if (v39 == v38)
  {
    uint64_t v19 = 4LL;
  }

  else
  {
    if (!v39) {
      goto LABEL_23;
    }
    uint64_t v19 = 5LL;
    unint64_t v17 = v39;
  }

  (*(void (**)(void *))(*v17 + 8 * v19))(v17);
LABEL_23:
  __n128 result = v35;
  uint64_t v35 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

void sub_100063638( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35 == v35)
  {
    uint64_t v37 = 4LL;
  }

  else
  {
    if (!a35) {
      goto LABEL_8;
    }
    uint64_t v37 = 5LL;
    uint64_t v35 = a35;
  }

  (*(void (**)(void *))(*v35 + 8 * v37))(v35);
LABEL_8:
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 40LL))(a29);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000636AC(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v2 == 3)
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (v4 < *(void *)a1) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      if (*(void *)a1 >= v4) {
        return 0LL;
      }
    }
  }

  else
  {
    unint64_t v3 = *(void *)a1;
    unint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)a1 >= v4 || *(void *)a1 + 1LL >= v4) {
      return 0LL;
    }
  }

  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    if (v6 == 3)
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (v7 < *(void *)a2) {
        return 0LL;
      }
    }

    else
    {
      unint64_t v8 = *(void *)a2;
      unint64_t v7 = *(void *)(a2 + 8);
      if (*(void *)a2 >= v7) {
        return 0LL;
      }
    }
  }

  else
  {
    unint64_t v8 = *(void *)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v7 || *(void *)a2 + 1LL >= v7) {
      return 0LL;
    }
  }

  if ((_BYTE)v2)
  {
    if (*(_BYTE *)(a1 + 16) == 3)
    {
      if (v4 < v3) {
        return 0LL;
      }
    }

    else if (v3 >= v4)
    {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
  }

  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0LL;
      }
    }

    else if (v8 >= v7)
    {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }

  if ((v6 & 2) != 0) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = v8 + 1;
  }
  if ((v2 & 1) + v4 - 1 < v11) {
    return 0LL;
  }
  if ((_BYTE)v6)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      if (v7 < v8) {
        return 0LL;
      }
    }

    else if (v8 >= v7)
    {
      return 0LL;
    }
  }

  else
  {
    BOOL result = 0LL;
    if (v8 >= v7 || v8 + 1 >= v7) {
      return result;
    }
  }

  if (!(_BYTE)v2)
  {
    BOOL result = 0LL;
    if (v3 >= v4 || v3 + 1 >= v4) {
      return result;
    }
    goto LABEL_60;
  }

  if (v2 == 3)
  {
    if (v4 >= v3) {
      goto LABEL_60;
    }
    return 0LL;
  }

  if (v3 >= v4) {
    return 0LL;
  }
LABEL_60:
  if ((v2 & 2) == 0) {
    ++v3;
  }
  return (v6 & 1) + v7 - 1 >= v3;
}

double sub_100063880@<D0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (*((_BYTE *)a1 + 16))
  {
    if (v3 == 3)
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (v4 < *a1) {
        goto LABEL_31;
      }
    }

    else
    {
      unint64_t v5 = *a1;
      unint64_t v4 = a1[1];
      if (*a1 >= v4) {
        goto LABEL_31;
      }
    }
  }

  else
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    if (*a1 >= v4 || *a1 + 1 >= v4) {
      goto LABEL_31;
    }
  }

  int v7 = *((unsigned __int8 *)a2 + 16);
  if (!*((_BYTE *)a2 + 16))
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (*a2 < v8 && *a2 + 1 < v8) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  if (v7 == 3)
  {
    unint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (v8 >= *a2) {
      goto LABEL_15;
    }
LABEL_31:
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_1001A3DA0);
    if ((v17 & 1) == 0)
    {
      uint64_t v20 = a3;
      int v19 = __cxa_guard_acquire(&qword_1001A3DA0);
      a3 = v20;
      if (v19)
      {
        *(void *)&xmmword_1001A3D88 = qword_1001A3B40;
        *((void *)&xmmword_1001A3D88 + 1) = qword_1001A3B40;
        LOBYTE(qword_1001A3D9_Block_object_dispose(va, 8) = 2;
        __cxa_guard_release(&qword_1001A3DA0);
        a3 = v20;
      }
    }

    double result = *(double *)&xmmword_1001A3D88;
    *(_OWORD *)a3 = xmmword_1001A3D88;
    *(void *)(a3 + 16) = qword_1001A3D98;
    return result;
  }

  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  if (*a2 >= v8) {
    goto LABEL_31;
  }
LABEL_15:
  char v10 = v3 & 2;
  if ((v3 & 2) != 0) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = v5 + 1;
  }
  char v12 = v7 & 2;
  if ((v7 & 2) != 0) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = v9 + 1;
  }
  int v14 = v3 & 1;
  int v15 = v7 & 1;
  if (v11 < v13)
  {
    unint64_t v5 = v9;
    char v10 = v12;
  }

  if (v4 + v14 - 1 >= v8 + v15 - 1)
  {
    unint64_t v4 = v8;
    LOBYTE(v14) = v15;
  }

  *(void *)a3 = v5;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a3 + 16) = v14 | v10;
  return result;
}

BOOL sub_1000639E4( uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = a3[1];
  if (*a3 <= v6) {
    unint64_t v8 = *(void *)(a1 + 40);
  }
  else {
    unint64_t v8 = *a3;
  }
  if (*a3) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0LL;
  }
  v35[0] = v7 / v6;
  v35[1] = (v7 + v9) / v6;
  char v36 = 2;
  if (a5)
  {
    uint64_t v14 = 0LL;
    unint64_t v15 = 0LL;
    unint64_t v30 = a5 - 1;
    BOOL v16 = 1;
    while (1)
    {
      if (*(_DWORD *)(*(void *)(a1 + 16) + v14) == 2) {
        goto LABEL_37;
      }
      if (a6 && v30 == v15) {
        sub_1000147D8((uint64_t)v41, a6);
      }
      else {
        sub_1000633B8(a1, a2, v15, a4, (uint64_t)v41);
      }
      sub_1000633B8(a1, a2, v15, (uint64_t)v35, (uint64_t)v37);
      sub_10001321C((uint64_t)v37, (uint64_t)v34);
      sub_1000132BC((uint64_t)v37, (uint64_t)v33);
      sub_10001321C((uint64_t)v41, (uint64_t)v32);
      sub_1000132BC((uint64_t)v41, (uint64_t)v31);
      BOOL v17 = sub_100063DA0(v34, v33, v32, v31);
      uint64_t v18 = v31[0];
      v31[0] = 0LL;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 24LL))(v18);
      }
      uint64_t v19 = v32[0];
      v32[0] = 0LL;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 24LL))(v19);
      }
      uint64_t v20 = v33[0];
      v33[0] = 0LL;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 24LL))(v20);
      }
      uint64_t v21 = v34[0];
      v34[0] = 0LL;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 24LL))(v21);
      }
      unint64_t v22 = v40;
      if (v40 == v39)
      {
        unint64_t v22 = v39;
        uint64_t v23 = 4LL;
      }

      else
      {
        if (!v40) {
          goto LABEL_27;
        }
        uint64_t v23 = 5LL;
      }

      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
      uint64_t v24 = v38;
      uint64_t v38 = 0LL;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 40LL))(v24);
      }
      uint64_t v25 = v44;
      if (v44 == v43)
      {
        uint64_t v25 = v43;
        uint64_t v26 = 4LL;
      }

      else
      {
        if (!v44) {
          goto LABEL_34;
        }
        uint64_t v26 = 5LL;
      }

      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_34:
      uint64_t v27 = v42;
      uint64_t v42 = 0LL;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 40LL))(v27);
      }
      if (!v17) {
        return v16;
      }
LABEL_37:
      BOOL v16 = ++v15 < a5;
      v14 += 48LL;
      if (a5 == v15) {
        return v16;
      }
    }
  }

  return 0;
}

void sub_100063C74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24LL))(a12);
  }
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 24LL))(a18);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 24LL))(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 24LL))(a30);
  }
  if (a49 == v50)
  {
    uint64_t v53 = 4LL;
  }

  else
  {
    if (!a49) {
      goto LABEL_14;
    }
    uint64_t v53 = 5LL;
    int v50 = a49;
  }

  (*(void (**)(void *))(*v50 + 8 * v53))(v50);
LABEL_14:
  if (a43) {
    (*(void (**)(uint64_t))(*(void *)a43 + 40LL))(a43);
  }
  uint64_t v54 = *(void **)(v51 - 104);
  if (v54 == v49)
  {
    uint64_t v55 = 4LL;
  }

  else
  {
    if (!v54) {
      goto LABEL_21;
    }
    uint64_t v55 = 5LL;
    uint64_t v49 = *(void **)(v51 - 104);
  }

  (*(void (**)(void *))(*v49 + 8 * v55))(v49);
LABEL_21:
  uint64_t v56 = *(void *)(v51 - 152);
  *(void *)(v51 - 15sub_1000296D8(&v5, 2) = 0LL;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 40LL))(v56);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100063DA0(void *a1, void *a2, void *a3, void *a4)
{
  if (sub_1000EA3C0((uint64_t)&v20, (uint64_t)v19))
  {
    while (sub_1000EA3C0((uint64_t)&v16, (uint64_t)v15))
    {
      BOOL v7 = sub_10000E514(v21, v17);
      if (v22 != v18 || !v7) {
        goto LABEL_10;
      }
      sub_1000EA5F0(&v20);
      sub_1000EA5F0(&v16);
    }
  }

  else {
LABEL_10:
  }
    BOOL v9 = 0LL;
  uint64_t v10 = v15[0];
  v15[0] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  }
  uint64_t v12 = v19[0];
  v19[0] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24LL))(v13);
  }
  return v9;
}

void sub_100063F04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24LL))(a15);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 24LL))(a21);
  }
  uint64_t v23 = *(void *)(v21 - 80);
  *(void *)(v21 - 8crc32(0LL, 0LL, 0) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24LL))(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100063F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *a5;
  unint64_t v8 = a5[1] % v6;
  BOOL v9 = v8 == 0;
  unint64_t v10 = v6 - v8;
  if (v9) {
    unint64_t v10 = 0LL;
  }
  if (v7 < v10) {
    return 0LL;
  }
  uint64_t v15 = a1;
  v178[0] = 0;
  char v179 = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
  unint64_t v17 = (v7 - v10) / v6 * v6;
  unint64_t v165 = *(void *)a3;
  uint64_t v166 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }

  __int128 v20 = *(_OWORD *)(a3 + 56);
  v167[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v167 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v168 = *(void *)(a3 + 48);
  __int128 v169 = v20;
  __int128 v21 = *(_OWORD *)(a3 + 88);
  __int128 v170 = *(_OWORD *)(a3 + 72);
  __int128 v171 = v21;
  char v172 = *(_BYTE *)(a3 + 104);
  int v22 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v173 = *(void *)(a3 + 112);
  uint64_t v174 = v22;
  if (v22)
  {
    uint64_t v23 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }

  uint64_t v25 = *(void *)(a3 + 144);
  __int128 v175 = *(_OWORD *)(a3 + 128);
  uint64_t v176 = v25;
  char v177 = *(_BYTE *)(a3 + 152);
  sub_10003D9D4((uint64_t)&v165, a4, a5[1] + v10, v17, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v180);
  sub_10001EA58((uint64_t)v178);
  sub_100019908((uint64_t)v178, (uint64_t)&v180);
  char v179 = 1;
  uint64_t v26 = v194;
  if (v194)
  {
    uint64_t v27 = (unint64_t *)&v194->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  uint64_t v29 = v192;
  if (v192)
  {
    unint64_t v30 = (unint64_t *)&v192->__shared_owners_;
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  uint64_t v32 = v190;
  if (v190)
  {
    __int128 v33 = (unint64_t *)&v190->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  uint64_t v35 = v188;
  if (v188)
  {
    char v36 = (unint64_t *)&v188->__shared_owners_;
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  uint64_t v38 = v185;
  if (v185)
  {
    unint64_t v39 = (unint64_t *)&v185->__shared_owners_;
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  __int128 v41 = v182;
  if (v182)
  {
    uint64_t v42 = (unint64_t *)&v182->__shared_owners_;
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  int v44 = v174;
  if (v174)
  {
    unint64_t v45 = (unint64_t *)&v174->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  __int128 v47 = v166;
  if (v166)
  {
    unint64_t v48 = (unint64_t *)&v166->__shared_owners_;
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  sub_10003C884(a3, v17);
  sub_10003B6C0((void *)(a3 + 56));
  sub_10003BD04((uint64_t)v178, (uint64_t)&v180);
  sub_100018FFC(a3, (uint64_t)&v180);
  int v50 = v183;
  if (v183)
  {
    uint64_t v51 = (unint64_t *)&v183->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  uint64_t v53 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    uint64_t v54 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  sub_10003BA04((uint64_t)v178, (uint64_t)&v180);
  sub_100018FFC(a4, (uint64_t)&v180);
  uint64_t v56 = v183;
  if (v183)
  {
    __int128 v57 = (unint64_t *)&v183->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  char v59 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    uint64_t v60 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  int64_t v62 = a6 - 1;
  if (v62 < 0)
  {
LABEL_192:
    uint64_t v11 = (*(void *)(a4 + 144) - *(void *)(a3 + 144)) & ~((uint64_t)(*(void *)(a4 + 144) - *(void *)(a3 + 144)) >> 63);
    goto LABEL_193;
  }

  uint64_t v154 = v15;
  while (1)
  {
    int v63 = *(_DWORD *)(*(void *)(v15 + 16) + 48 * v62);
    if (v63 != 1) {
      break;
    }
LABEL_190:
    if (v62-- <= 0) {
      goto LABEL_192;
    }
  }

  if (!v63) {
    goto LABEL_192;
  }
  uint64_t v64 = *(void *)(*(void *)(*(void *)(a2 + 16) + 16 * v62) + 8LL);
  __int128 v198 = &v200;
  __int128 v199 = xmmword_100142570;
  uint64_t v65 = *(void *)(a3 + 24);
  uint64_t v66 = *(void *)(a4 + 144) - *(void *)(a3 + 144);
  uint64_t v67 = v66 & ~(v66 >> 63);
  while (!sub_10003B85C(a3, a4))
  {
    sub_10003DAF4(a3 + 56);
    uint64_t v68 = *(std::__shared_weak_count **)(a3 + 120);
    if (v68)
    {
      __int128 v69 = (unint64_t *)&v68->__shared_owners_;
      do
        unint64_t v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }

    uint64_t v71 = *(void *)(a3 + 144);
    else {
      unint64_t v72 = (*(void *)(a4 + 144) - v71) & ~((*(void *)(a4 + 144) - v71) >> 63);
    }
    if (!v68) {
      goto LABEL_88;
    }
    uint64_t v73 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
      if (!v72) {
        goto LABEL_96;
      }
LABEL_89:
      unint64_t v75 = *(void *)a3;
      unint64_t v76 = *(void *)(a3 + 8);
      v180.n128_u64[0] = *(void *)a3;
      v180.n128_u64[1] = v76;
      if (v76)
      {
        char v77 = (unint64_t *)(v76 + 8);
        do
          unint64_t v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }

      unint64_t v181 = v72;
      uint64_t v80 = (uint64_t)v198;
      uint64_t v79 = v199;
      unint64_t v81 = (__n128 *)&v198[3 * v199];
      if ((void)v199 == *((void *)&v199 + 1))
      {
        sub_100068290((uint64_t *)&v198, v81, 1LL, &v180, &v159);
        __int128 v88 = (std::__shared_weak_count *)v180.n128_u64[1];
        if (v180.n128_u64[1])
        {
          unint64_t v89 = (unint64_t *)(v180.n128_u64[1] + 8);
          do
            unint64_t v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }

      else
      {
        v81->n128_u64[0] = v75;
        v81->n128_u64[1] = v180.n128_u64[1];
        *(void *)(v80 + 24 * v79 + 16) = v72;
        *(void *)&__int128 v199 = v79 + 1;
      }

      sub_10003C884(a3, v72);
    }

    else
    {
LABEL_88:
      if (v72) {
        goto LABEL_89;
      }
LABEL_96:
      sub_100064CC8(a3, (uint64_t)v162);
      int v82 = v164;
      if (v164)
      {
        unint64_t v83 = (unint64_t *)&v164->__shared_owners_;
        do
          unint64_t v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }

      __int128 v85 = v163;
      if (v163)
      {
        unint64_t v86 = (unint64_t *)&v163->__shared_owners_;
        do
          unint64_t v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
    }
  }

  sub_10003DC54((uint64_t *)&v180, (uint64_t *)&v198, v65, v67);
  sub_10003BD04((uint64_t)&v187, (uint64_t)&v159);
  sub_10003BA04((uint64_t)&v187, (uint64_t)v156);
  BOOL v91 = sub_10003B85C((uint64_t)&v159, (uint64_t)v156);
  unint64_t v92 = v158;
  if (v158)
  {
    __int128 v93 = (unint64_t *)&v158->__shared_owners_;
    do
      unint64_t v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }

  unint64_t v95 = v157;
  if (v157)
  {
    __int128 v96 = (unint64_t *)&v157->__shared_owners_;
    do
      unint64_t v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }

  __int128 v98 = v161;
  if (v161)
  {
    uint64_t v99 = (unint64_t *)&v161->__shared_owners_;
    do
      unint64_t v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }

  __int128 v101 = v160;
  if (v160)
  {
    __int128 v102 = (unint64_t *)&v160->__shared_owners_;
    do
      unint64_t v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (!v91) {
        goto LABEL_131;
      }
      goto LABEL_156;
    }
  }

  if (v91) {
    goto LABEL_156;
  }
LABEL_131:
  sub_10003BD04((uint64_t)&v187, (uint64_t)&v159);
  sub_10003BA04((uint64_t)&v187, (uint64_t)v156);
  uint64_t v11 = sub_100064D18(a2, v62);
  __int128 v104 = v158;
  if (v158)
  {
    __int128 v105 = (unint64_t *)&v158->__shared_owners_;
    do
      unint64_t v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }

  int v107 = v157;
  if (v157)
  {
    int v108 = (unint64_t *)&v157->__shared_owners_;
    do
      unint64_t v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }

  uint64_t v110 = v161;
  if (v161)
  {
    __int128 v111 = (unint64_t *)&v161->__shared_owners_;
    do
      unint64_t v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }

  unint64_t v113 = v160;
  if (!v160) {
    goto LABEL_150;
  }
  uint64_t v114 = (unint64_t *)&v160->__shared_owners_;
  do
    unint64_t v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_150:
    if (v11 < 0) {
      goto LABEL_151;
    }
    goto LABEL_156;
  }

  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if ((v11 & 0x8000000000000000LL) == 0) {
    goto LABEL_156;
  }
LABEL_151:
  if (!(_DWORD)v11)
  {
LABEL_156:
    unint64_t v116 = v197;
    uint64_t v15 = v154;
    if (v197)
    {
      uint64_t v117 = (unint64_t *)&v197->__shared_owners_;
      do
        unint64_t v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }

    unint64_t v119 = v196;
    if (v196)
    {
      unint64_t v120 = (unint64_t *)&v196->__shared_owners_;
      do
        unint64_t v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }

    unint64_t v122 = v195;
    if (v195)
    {
      __int128 v123 = (unint64_t *)&v195->__shared_owners_;
      do
        unint64_t v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }

    unint64_t v125 = v193;
    if (v193)
    {
      uint64_t v126 = (unint64_t *)&v193->__shared_owners_;
      do
        unint64_t v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }

    unint64_t v128 = v191;
    if (v191)
    {
      uint64_t v129 = (unint64_t *)&v191->__shared_owners_;
      do
        unint64_t v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }

    unint64_t v131 = v189;
    if (v189)
    {
      int v132 = (unint64_t *)&v189->__shared_owners_;
      do
        unint64_t v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }

    if (v185 && v186 != __p) {
      operator delete(__p);
    }
    sub_10000627C((uint64_t)&v180);
    sub_10000627C((uint64_t)&v198);
    goto LABEL_190;
  }

  uint64_t v136 = v197;
  if (v197)
  {
    uint64_t v137 = (unint64_t *)&v197->__shared_owners_;
    do
      unint64_t v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  unint64_t v139 = v196;
  if (v196)
  {
    char v140 = (unint64_t *)&v196->__shared_owners_;
    do
      unint64_t v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }

  int v142 = v195;
  if (v195)
  {
    __int128 v143 = (unint64_t *)&v195->__shared_owners_;
    do
      unint64_t v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }

  uint64_t v145 = v193;
  if (v193)
  {
    char v146 = (unint64_t *)&v193->__shared_owners_;
    do
      unint64_t v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }

  uint64_t v148 = v191;
  if (v191)
  {
    __int128 v149 = (unint64_t *)&v191->__shared_owners_;
    do
      unint64_t v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }

  uint64_t v151 = v189;
  if (v189)
  {
    __int128 v152 = (unint64_t *)&v189->__shared_owners_;
    do
      unint64_t v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }

  if (v185 && v186 != __p) {
    operator delete(__p);
  }
  sub_10000627C((uint64_t)&v180);
  sub_10000627C((uint64_t)&v198);
LABEL_193:
  sub_100019A28((uint64_t)v178);
  return v11;
}

void sub_100064BFC(_Unwind_Exception *a1)
{
}

uint64_t sub_100064CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003CC34(a1);
}

void sub_100064CFC(_Unwind_Exception *a1)
{
}

uint64_t sub_100064D18(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 48) && *(void *)(a1 + 40) <= a2) {
    return 0LL;
  }
  else {
    return sub_1000062D4(*(void **)(*(void *)(a1 + 16) + 16 * a2));
  }
}

unint64_t sub_100064D5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, char a6, BOOL a7, uint64_t a8)
{
  uint64_t v12 = (void *)a1;
  v249 = (unint64_t *)(a3 + 144);
  unint64_t v13 = *(void *)(a1 + 40);
  unint64_t v252 = *(void *)(a3 + 144);
  unint64_t v14 = v252 % v13;
  uint64_t v15 = v13 - v252 % v13;
  uint64_t v16 = *(void *)(a3 + 8);
  if (v14) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = 0LL;
  }
  *(void *)&__int128 v333 = *(void *)a3;
  *((void *)&v333 + 1) = v16;
  if (v16)
  {
    int v18 = (unint64_t *)(v16 + 8);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  v334[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v334 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v335 = *(void *)(a3 + 48);
  __int128 v336 = *(_OWORD *)(a3 + 56);
  __int128 v337 = *(_OWORD *)(a3 + 72);
  __int128 v338 = *(_OWORD *)(a3 + 88);
  char v339 = *(_BYTE *)(a3 + 104);
  uint64_t v20 = *(void *)(a3 + 120);
  *(void *)&__int128 v340 = *(void *)(a3 + 112);
  *((void *)&v340 + 1) = v20;
  if (v20)
  {
    __int128 v21 = (unint64_t *)(v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  __int128 v341 = *(_OWORD *)(a3 + 128);
  unint64_t v342 = *v249;
  char v343 = *(_BYTE *)(a3 + 152);
  uint64_t v23 = (std::__shared_weak_count *)a4[1];
  uint64_t v320 = *a4;
  v321 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }

  v322[0] = *((_OWORD *)a4 + 1);
  *(_OWORD *)((char *)v322 + 9) = *(_OWORD *)((char *)a4 + 25);
  uint64_t v323 = a4[6];
  __int128 v26 = *(_OWORD *)(a4 + 9);
  __int128 v324 = *(_OWORD *)(a4 + 7);
  __int128 v325 = v26;
  __int128 v326 = *(_OWORD *)(a4 + 11);
  char v327 = *((_BYTE *)a4 + 104);
  uint64_t v27 = (std::__shared_weak_count *)a4[15];
  uint64_t v328 = a4[14];
  v329 = v27;
  if (v27)
  {
    unint64_t v28 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  uint64_t v31 = a4[18];
  unint64_t v30 = a4 + 18;
  __int128 v330 = *((_OWORD *)v30 - 1);
  uint64_t v331 = v31;
  char v332 = *((_BYTE *)v30 + 8);
  unint64_t v32 = *(void *)(a1 + 40);
  v247 = v30;
  unint64_t v33 = *v249;
  uint64_t v34 = *v30 - *v249;
  unint64_t v35 = v34 & ~(v34 >> 63);
  if (v35 <= v32) {
    unint64_t v35 = *(void *)(a1 + 40);
  }
  if (v34 <= 0) {
    unint64_t v36 = 0LL;
  }
  else {
    unint64_t v36 = v35;
  }
  *(void *)&__int128 v318 = v33 / v32;
  *((void *)&v318 + 1) = (v32 + v33 + v36 - 1) / v32;
  LOBYTE(v319) = 2;
  sub_1000633B8(a1, a2, a5, (uint64_t)&v318, (uint64_t)v362);
  unint64_t v37 = operator new(0x20uLL);
  v280 = (char *)(v37 + 4);
  *(_OWORD *)unint64_t v37 = v318;
  v37[2] = v319;
  *((_DWORD *)v37 + 6) = 1;
  std::string __p = v37;
  v279 = (std::__shared_weak_count *)(v37 + 4);
  sub_10009AC38((uint64_t)v362, (uint64_t)&__p, (uint64_t)&v346);
  sub_1000EA6DC((uint64_t)v362, (uint64_t)&v346);
  uint64_t v38 = (__int128 *)*((void *)&v350 + 1);
  if (*((__int128 **)&v350 + 1) == &v349)
  {
    uint64_t v39 = 4LL;
    uint64_t v38 = &v349;
    goto LABEL_26;
  }

  if (*((void *)&v350 + 1))
  {
    uint64_t v39 = 5LL;
LABEL_26:
    (*(void (**)(void))(*(void *)v38 + 8 * v39))();
  }

  uint64_t v40 = *(void *)&v347[16];
  *(void *)&v347[16] = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 40LL))(v40);
  }
  if (__p)
  {
    v279 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }

LABEL_31:
  sub_10001321C((uint64_t)v362, (uint64_t)&v314);
  uint64_t v255 = a8;
  sub_1000132BC((uint64_t)v362, (uint64_t)v313);
  unint64_t v254 = 0LL;
  unint64_t v248 = a5 + 1;
  v250 = v12;
  unint64_t v251 = a5;
  while (1)
  {
    if (!sub_1000EA3C0((uint64_t)&v314, (uint64_t)v313))
    {
      int v123 = 2;
LABEL_267:
      uint64_t v184 = v255;
      goto LABEL_268;
    }

    unint64_t v41 = v315;
    uint64_t v42 = v316;
    unsigned int v43 = v317;
    unint64_t v44 = v342;
    unint64_t v45 = v12[5];
    unint64_t v46 = v342 / v45;
    if ((v317 & 2) != 0) {
      unint64_t v47 = v315;
    }
    else {
      unint64_t v47 = v315 + 1;
    }
    unint64_t v310 = v342 / v45;
    unint64_t v311 = v47;
    unsigned __int8 v312 = 2;
    BOOL v48 = v47 >= v46;
    uint64_t v49 = v47 - v46;
    if (v49 == 0 || !v48) {
      uint64_t v49 = qword_1001A3B40;
    }
    if (v49) {
      break;
    }
LABEL_150:
    uint64_t v115 = (v43 & 1) + v42 - v41 + (int)(((v43 >> 1) & 1) - 1);
    unint64_t v116 = v45 * v115 - v17;
    if (v331 - v44 < v116) {
      unint64_t v116 = v331 - v44;
    }
    if ((void)v325 - (void)v337 < v116)
    {
      int v123 = 4;
      goto LABEL_267;
    }

    *(void *)&__int128 v346 = v45 * v47;
    *((void *)&v346 + 1) = v45 * (v115 + v47);
    v347[0] = 2;
    sub_10003CE10((uint64_t)&v333, (uint64_t)&v346, (uint64_t)&v320, (uint64_t)&__p);
    unint64_t v344 = -78LL;
    uint64_t v117 = a2;
    if (((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) - 1 != v251 || *(_BYTE *)(a2 + 56) == 0 || a7)
    {
LABEL_157:
      uint64_t v120 = sub_100005380(*(void *)(*(void *)(v117 + 16) + 16 * v251));
      uint64_t v122 = v121;
      unint64_t v344 = v120;
      uint64_t v345 = v121;
      goto LABEL_158;
    }

    (*(void (**)(__int128 *__return_ptr))(**(void **)(v12[2] + 48 * v251 + 24) + 72LL))(&v346);
    if ((void)v346)
    {
      unint64_t v118 = v346 + ((v287 - v283) & ~((uint64_t)(v287 - v283) >> 63)) - 1;
      unint64_t v119 = 1
           - (v346
            + ((v287 - v283) & ~((uint64_t)(v287 - v283) >> 63)))
           + v118 / (unint64_t)v346 * v346
           + *((void *)&v346 + 1) * v346
           + v118;
      uint64_t v117 = a2;
      if (v285 - v281 < v119) {
        goto LABEL_157;
      }
    }

    else
    {
      uint64_t v117 = a2;
      if ((a6 & 1) == 0) {
        goto LABEL_157;
      }
    }

    unint64_t v182 = sub_100005380(*(void *)(*(void *)(*(void *)(v117 + 16) + 16 * v251) + 16LL));
    uint64_t v120 = v182;
    uint64_t v122 = v183;
    unint64_t v344 = v182;
    uint64_t v345 = v183;
    a7 = v183 < v283 || v182 > ((*v247 - *v249) & ~((uint64_t)(*v247 - *v249) >> 63));
LABEL_158:
    if (v120 < 0 && (_DWORD)v120)
    {
      int v123 = 1;
    }

    else
    {
      unint64_t v124 = v283;
      uint64_t v125 = v287;
      if ((a6 & 1) != 0)
      {
        if (a7)
        {
          uint64_t v126 = *v247 - *v249;
          if (v126 <= v120) {
            uint64_t v126 = v120;
          }
          __int128 v267 = v333;
          if (*((void *)&v333 + 1))
          {
            unint64_t v127 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
            do
              unint64_t v128 = __ldxr(v127);
            while (__stxr(v128 + 1, v127));
          }

          v268[0] = v334[0];
          *(_OWORD *)((char *)v268 + 9) = *(_OWORD *)((char *)v334 + 9);
          uint64_t v269 = v335;
          __int128 v270 = v336;
          __int128 v271 = v337;
          __int128 v272 = v338;
          char v273 = v339;
          __int128 v274 = v340;
          if (*((void *)&v340 + 1))
          {
            uint64_t v129 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
            do
              unint64_t v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }

          __int128 v275 = v341;
          unint64_t v276 = v342;
          char v277 = v343;
          sub_100066870( (uint64_t *)&v267,  (uint64_t)&v320,  v126 & ~(v126 >> 63),  v122,  0xFFFFFFFFFFFFFFFFLL,  (uint64_t)&v346);
          sub_10001EA58(v255);
          sub_100019908(v255, (uint64_t)&v346);
          *(_BYTE *)(v255 + 52_Block_object_dispose(va, 8) = 1;
          unint64_t v131 = v361;
          if (v361)
          {
            int v132 = (unint64_t *)&v361->__shared_owners_;
            do
              unint64_t v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }

          uint64_t v134 = v360;
          if (v360)
          {
            uint64_t v135 = (unint64_t *)&v360->__shared_owners_;
            do
              unint64_t v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }

          uint64_t v137 = v359;
          if (v359)
          {
            unint64_t v138 = (unint64_t *)&v359->__shared_owners_;
            do
              unint64_t v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }

          char v140 = v358;
          if (v358)
          {
            unint64_t v141 = (unint64_t *)&v358->__shared_owners_;
            do
              unint64_t v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }

          __int128 v143 = v357;
          if (v357)
          {
            unint64_t v144 = (unint64_t *)&v357->__shared_owners_;
            do
              unint64_t v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }

          char v146 = (std::__shared_weak_count *)v350;
          if ((void)v350)
          {
            unint64_t v147 = (unint64_t *)(v350 + 8);
            do
              unint64_t v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }

          __int128 v149 = (std::__shared_weak_count *)*((void *)&v274 + 1);
          if (*((void *)&v274 + 1))
          {
            unint64_t v150 = (unint64_t *)(*((void *)&v274 + 1) + 8LL);
            do
              unint64_t v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }

          __int128 v152 = (std::__shared_weak_count *)*((void *)&v267 + 1);
          if (*((void *)&v267 + 1))
          {
            unint64_t v153 = (unint64_t *)(*((void *)&v267 + 1) + 8LL);
            do
              unint64_t v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }

          sub_10003BD04(v255, (uint64_t)&v346);
          sub_100018FFC((uint64_t)&v333, (uint64_t)&v346);
          char v155 = (std::__shared_weak_count *)*((void *)&v353 + 1);
          if (*((void *)&v353 + 1))
          {
            uint64_t v156 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
            do
              unint64_t v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }

          __int128 v158 = (std::__shared_weak_count *)*((void *)&v346 + 1);
          if (*((void *)&v346 + 1))
          {
            uint64_t v159 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
            do
              unint64_t v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }

          sub_10003BA04(v255, (uint64_t)&v346);
          sub_100018FFC((uint64_t)&v320, (uint64_t)&v346);
          int64_t v161 = (std::__shared_weak_count *)*((void *)&v353 + 1);
          if (*((void *)&v353 + 1))
          {
            char v162 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
            do
              unint64_t v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }

          __int128 v164 = (std::__shared_weak_count *)*((void *)&v346 + 1);
          if (*((void *)&v346 + 1))
          {
            unint64_t v165 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
            do
              unint64_t v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }

          a7 = 1;
          unint64_t v167 = v344;
        }

        else
        {
          a7 = 0;
          unint64_t v167 = v120;
        }

        unint64_t v252 = v122;
      }

      else if (v122 == v342)
      {
        unint64_t v167 = v120;
      }

      else
      {
        unint64_t v167 = sub_100120F4C((uint64_t)&v333, (uint64_t)&v320, v12[5] * v115, &v344);
        unint64_t v344 = v167;
        uint64_t v345 = v168;
        a7 = v167 != v12[5] * v115;
      }

      uint64_t v169 = v125;
      sub_10003C884((uint64_t)&v333, v167);
      uint64_t v17 = 0LL;
      a6 = 0;
      v254 += v344;
      int v123 = 4 * (v122 + v120 < ((v169 - v124) & ~((uint64_t)(v169 - v124) >> 63)) + v124);
    }

    __int128 v170 = v286;
    if (v286)
    {
      __int128 v171 = (unint64_t *)&v286->__shared_owners_;
      do
        unint64_t v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }

    uint64_t v173 = v284;
    if (v284)
    {
      uint64_t v174 = (unint64_t *)&v284->__shared_owners_;
      do
        unint64_t v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }

    uint64_t v176 = v282;
    if (v282)
    {
      char v177 = (unint64_t *)&v282->__shared_owners_;
      do
        unint64_t v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }

    char v179 = v279;
    if (v279)
    {
      __n128 v180 = (unint64_t *)&v279->__shared_owners_;
      do
        unint64_t v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }

    if (v123) {
      goto LABEL_267;
    }
    sub_1000EA5F0(&v314);
  }

  unint64_t v50 = sub_100062DB0((uint64_t)v12, a2, (uint64_t)&v333, (uint64_t)&v320, v248, (uint64_t *)&v310, a6 & 1, a7, v255, v362);
  unint64_t v344 = v50;
  uint64_t v345 = v51;
  if ((v50 & 0x8000000000000000LL) != 0 && (_DWORD)v50)
  {
    int v123 = 1;
    goto LABEL_267;
  }

  unint64_t v52 = v252;
  if (v51 < v44) {
    unint64_t v52 = v51;
  }
  unint64_t v252 = v52;
  unint64_t v53 = v342;
  if (v51 >= v342)
  {
    BOOL v54 = v51 + v50 > v12[5] * (v47 - 1);
    uint64_t v55 = v255;
    if (v50 <= ((*v247 - *v249) & ~((uint64_t)(*v247 - *v249) >> 63)))
    {
      a7 = 0;
      goto LABEL_114;
    }
  }

  else
  {
    BOOL v54 = v51 + v50 > v12[5] * (v47 - 1);
    uint64_t v55 = v255;
  }

  __int128 v299 = v333;
  if (*((void *)&v333 + 1))
  {
    uint64_t v56 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
    do
      unint64_t v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }

  v300[0] = v334[0];
  *(_OWORD *)((char *)v300 + 9) = *(_OWORD *)((char *)v334 + 9);
  __int128 v302 = v336;
  __int128 v303 = v337;
  __int128 v304 = v338;
  char v305 = v339;
  uint64_t v301 = v335;
  __int128 v306 = v340;
  if (*((void *)&v340 + 1))
  {
    unint64_t v58 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }

  __int128 v307 = v341;
  unint64_t v308 = v342;
  char v309 = v343;
  sub_100066870((uint64_t *)&v299, (uint64_t)&v320, v50, v345, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v346);
  sub_10001EA58(v55);
  sub_100019908(v55, (uint64_t)&v346);
  *(_BYTE *)(v55 + 52_Block_object_dispose(va, 8) = 1;
  uint64_t v60 = v361;
  if (v361)
  {
    unint64_t v61 = (unint64_t *)&v361->__shared_owners_;
    do
      unint64_t v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }

  int v63 = v360;
  if (v360)
  {
    uint64_t v64 = (unint64_t *)&v360->__shared_owners_;
    do
      unint64_t v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

  uint64_t v66 = v359;
  if (v359)
  {
    uint64_t v67 = (unint64_t *)&v359->__shared_owners_;
    do
      unint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  __int128 v69 = v358;
  if (v358)
  {
    unint64_t v70 = (unint64_t *)&v358->__shared_owners_;
    do
      unint64_t v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  unint64_t v72 = v357;
  if (v357)
  {
    uint64_t v73 = (unint64_t *)&v357->__shared_owners_;
    do
      unint64_t v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

  unint64_t v75 = (std::__shared_weak_count *)v350;
  if ((void)v350)
  {
    unint64_t v76 = (unint64_t *)(v350 + 8);
    do
      unint64_t v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }

  unint64_t v78 = (std::__shared_weak_count *)*((void *)&v306 + 1);
  if (*((void *)&v306 + 1))
  {
    uint64_t v79 = (unint64_t *)(*((void *)&v306 + 1) + 8LL);
    do
      unint64_t v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

  unint64_t v81 = (std::__shared_weak_count *)*((void *)&v299 + 1);
  if (*((void *)&v299 + 1))
  {
    int v82 = (unint64_t *)(*((void *)&v299 + 1) + 8LL);
    do
      unint64_t v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }

  sub_10003BD04(v55, (uint64_t)&v346);
  sub_100018FFC((uint64_t)&v333, (uint64_t)&v346);
  unint64_t v84 = (std::__shared_weak_count *)*((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    __int128 v85 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
    do
      unint64_t v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

  unint64_t v87 = (std::__shared_weak_count *)*((void *)&v346 + 1);
  if (*((void *)&v346 + 1))
  {
    __int128 v88 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
    do
      unint64_t v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }

  sub_10003BA04(v55, (uint64_t)&v346);
  sub_100018FFC((uint64_t)&v320, (uint64_t)&v346);
  unint64_t v90 = (std::__shared_weak_count *)*((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    BOOL v91 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
    do
      unint64_t v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }

  __int128 v93 = (std::__shared_weak_count *)*((void *)&v346 + 1);
  if (*((void *)&v346 + 1))
  {
    unint64_t v94 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
    do
      unint64_t v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }

  a7 = 1;
  unint64_t v53 = v342;
LABEL_114:
  __int128 v288 = v333;
  if (*((void *)&v333 + 1))
  {
    __int128 v96 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
    do
      unint64_t v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }

  *(_OWORD *)v289 = v334[0];
  *(_OWORD *)&v289[9] = *(_OWORD *)((char *)v334 + 9);
  __int128 v291 = v336;
  __int128 v292 = v337;
  __int128 v293 = v338;
  char v294 = v339;
  uint64_t v290 = v335;
  __int128 v295 = v340;
  if (*((void *)&v340 + 1))
  {
    __int128 v98 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }

  __int128 v296 = v341;
  unint64_t v297 = v342;
  char v298 = v343;
  if (a7) {
    uint64_t v100 = 0LL;
  }
  else {
    uint64_t v100 = (v311 - v310 + (v312 & 1) + ((v312 >> 1) & 1) - 1) * v250[5];
  }
  unint64_t v101 = v100 - v345 + *(void *)&v289[8];
  if (v344 < v101) {
    unint64_t v101 = v344;
  }
  if (v100) {
    unint64_t v102 = v101;
  }
  else {
    unint64_t v102 = v344;
  }
  sub_10003C884((uint64_t)&v288, v102);
  sub_10003B6C0(&v291);
  __int128 v346 = v288;
  __int128 v288 = 0uLL;
  *(_OWORD *)v347 = *(_OWORD *)v289;
  *(_OWORD *)&v347[9] = *(_OWORD *)&v289[9];
  uint64_t v348 = v290;
  __int128 v349 = v291;
  __int128 v350 = v292;
  __int128 v351 = v293;
  char v352 = v294;
  __int128 v353 = v295;
  __int128 v295 = 0uLL;
  __int128 v354 = v296;
  char v356 = v298;
  unint64_t v355 = v297;
  sub_100018FFC((uint64_t)&v333, (uint64_t)&v346);
  unint64_t v103 = (std::__shared_weak_count *)*((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    __int128 v104 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
    do
      unint64_t v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }

  unint64_t v106 = (std::__shared_weak_count *)*((void *)&v346 + 1);
  if (*((void *)&v346 + 1))
  {
    int v107 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
    do
      unint64_t v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }

  unint64_t v109 = (std::__shared_weak_count *)*((void *)&v295 + 1);
  if (*((void *)&v295 + 1))
  {
    uint64_t v110 = (unint64_t *)(*((void *)&v295 + 1) + 8LL);
    do
      unint64_t v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }

  unint64_t v112 = (std::__shared_weak_count *)*((void *)&v288 + 1);
  if (*((void *)&v288 + 1))
  {
    unint64_t v113 = (unint64_t *)(*((void *)&v288 + 1) + 8LL);
    do
      unint64_t v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }

  unint64_t v44 = v342;
  v254 += v342 - v53;
  if (v54)
  {
    uint64_t v17 = 0LL;
    a6 = 0;
    uint64_t v12 = v250;
    unint64_t v45 = v250[5];
    goto LABEL_150;
  }

  a6 = 0;
  int v123 = 4;
  uint64_t v184 = v255;
  uint64_t v12 = v250;
LABEL_268:
  uint64_t v185 = v313[0];
  v313[0] = 0LL;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 24LL))(v185);
  }
  uint64_t v186 = v314;
  uint64_t v314 = 0LL;
  if (v186) {
    (*(void (**)(uint64_t))(*(void *)v186 + 24LL))(v186);
  }
  if (v123 != 2)
  {
    if (v123 != 4) {
      goto LABEL_350;
    }
LABEL_349:
    unint64_t v344 = v254;
    uint64_t v345 = v252;
    goto LABEL_350;
  }

  if (!sub_1000669C8((uint64_t)v362))
  {
    sub_1000EA750((uint64_t)v362, (uint64_t)&v346);
  }

  unint64_t v187 = sub_100062F90((uint64_t)v12, a2, (uint64_t)&v333, (uint64_t)&v320, v248, a6 & 1, a7, v184, v362);
  unint64_t v188 = v187;
  unint64_t v190 = v189;
  unint64_t v344 = v187;
  uint64_t v345 = v189;
  if ((v187 & 0x8000000000000000LL) == 0 || !(_DWORD)v187)
  {
    if ((a6 & 1) != 0)
    {
      __int128 v256 = v333;
      if (*((void *)&v333 + 1))
      {
        uint64_t v191 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
        do
          unint64_t v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
      }

      v257[0] = v334[0];
      *(_OWORD *)((char *)v257 + 9) = *(_OWORD *)((char *)v334 + 9);
      __int128 v259 = v336;
      __int128 v260 = v337;
      uint64_t v258 = v335;
      __int128 v261 = v338;
      char v262 = v339;
      __int128 v263 = v340;
      if (*((void *)&v340 + 1))
      {
        __int128 v193 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
        do
          unint64_t v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
      }

      __int128 v264 = v341;
      unint64_t v265 = v342;
      char v266 = v343;
      sub_100066870((uint64_t *)&v256, (uint64_t)&v320, v187, v345, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)&v346);
      sub_10001EA58(v184);
      sub_100019908(v184, (uint64_t)&v346);
      *(_BYTE *)(v184 + 52_Block_object_dispose(va, 8) = 1;
      char v195 = v361;
      if (v361)
      {
        uint64_t v196 = (unint64_t *)&v361->__shared_owners_;
        do
          unint64_t v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }

      __int128 v198 = v360;
      if (v360)
      {
        __int128 v199 = (unint64_t *)&v360->__shared_owners_;
        do
          unint64_t v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v198);
        }
      }

      uint64_t v201 = v359;
      if (v359)
      {
        __int128 v202 = (unint64_t *)&v359->__shared_owners_;
        do
          unint64_t v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }

      v204 = v358;
      if (v358)
      {
        __int128 v205 = (unint64_t *)&v358->__shared_owners_;
        do
          unint64_t v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }

      v207 = v357;
      if (v357)
      {
        unsigned int v208 = (unint64_t *)&v357->__shared_owners_;
        do
          unint64_t v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }

      v210 = (std::__shared_weak_count *)v350;
      if ((void)v350)
      {
        v211 = (unint64_t *)(v350 + 8);
        do
          unint64_t v212 = __ldaxr(v211);
        while (__stlxr(v212 - 1, v211));
        if (!v212)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
        }
      }

      uint64_t v213 = (std::__shared_weak_count *)*((void *)&v263 + 1);
      if (*((void *)&v263 + 1))
      {
        v214 = (unint64_t *)(*((void *)&v263 + 1) + 8LL);
        do
          unint64_t v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (!v215)
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
      }

      int v216 = (std::__shared_weak_count *)*((void *)&v256 + 1);
      if (*((void *)&v256 + 1))
      {
        __int128 v217 = (unint64_t *)(*((void *)&v256 + 1) + 8LL);
        do
          unint64_t v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
        }
      }

      sub_10003BD04(v184, (uint64_t)&v346);
      sub_100018FFC((uint64_t)&v333, (uint64_t)&v346);
      unint64_t v219 = (std::__shared_weak_count *)*((void *)&v353 + 1);
      if (*((void *)&v353 + 1))
      {
        unint64_t v220 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
        do
          unint64_t v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }

      uint64_t v222 = (std::__shared_weak_count *)*((void *)&v346 + 1);
      if (*((void *)&v346 + 1))
      {
        v223 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
        do
          unint64_t v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }

      sub_10003BA04(v184, (uint64_t)&v346);
      sub_100018FFC((uint64_t)&v320, (uint64_t)&v346);
      v225 = (std::__shared_weak_count *)*((void *)&v353 + 1);
      if (*((void *)&v353 + 1))
      {
        __int128 v226 = (unint64_t *)(*((void *)&v353 + 1) + 8LL);
        do
          unint64_t v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }

      __int128 v228 = (std::__shared_weak_count *)*((void *)&v346 + 1);
      if (*((void *)&v346 + 1))
      {
        uint64_t v229 = (unint64_t *)(*((void *)&v346 + 1) + 8LL);
        do
          unint64_t v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
        }
      }

      unint64_t v188 = v344;
      unint64_t v252 = v190;
    }

    sub_10003C884((uint64_t)&v333, v188);
    v254 += v344;
    goto LABEL_349;
  }

LABEL_350:
  __int128 v231 = v365;
  if (v365 == v364)
  {
    uint64_t v232 = 4LL;
    __int128 v231 = v364;
LABEL_354:
    (*(void (**)(void))(*v231 + 8 * v232))();
  }

  else if (v365)
  {
    uint64_t v232 = 5LL;
    goto LABEL_354;
  }

  uint64_t v233 = v363;
  uint64_t v363 = 0LL;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 40LL))(v233);
  }
  v234 = v329;
  if (v329)
  {
    unsigned int v235 = (unint64_t *)&v329->__shared_owners_;
    do
      unint64_t v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }

  uint64_t v237 = v321;
  if (v321)
  {
    v238 = (unint64_t *)&v321->__shared_owners_;
    do
      unint64_t v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }

  v240 = (std::__shared_weak_count *)*((void *)&v340 + 1);
  if (*((void *)&v340 + 1))
  {
    v241 = (unint64_t *)(*((void *)&v340 + 1) + 8LL);
    do
      unint64_t v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }

  v243 = (std::__shared_weak_count *)*((void *)&v333 + 1);
  if (*((void *)&v333 + 1))
  {
    v244 = (unint64_t *)(*((void *)&v333 + 1) + 8LL);
    do
      unint64_t v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }

  return v344;
}

void sub_100066660(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 - 112);
  if (v3 == (void *)(v1 - 136))
  {
    uint64_t v4 = 4LL;
    int v3 = (void *)(v1 - 136);
  }

  else
  {
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  uint64_t v5 = *(void *)(v1 - 160);
  *(void *)(v1 - 16crc32(0LL, 0LL, 0) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40LL))(v5);
  }
  sub_100006224((uint64_t)&STACK[0x5E0]);
  sub_100006224((uint64_t)&STACK[0x570]);
  sub_100006224((uint64_t)&STACK[0x680]);
  sub_100006224((uint64_t)&STACK[0x610]);
  _Unwind_Resume(a1);
}

void sub_100066870( uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v18 = *a1;
  unint64_t v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  v20[0] = *((_OWORD *)a1 + 1);
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 25);
  uint64_t v21 = a1[6];
  __int128 v22 = *(_OWORD *)(a1 + 7);
  __int128 v23 = *(_OWORD *)(a1 + 9);
  __int128 v24 = *(_OWORD *)(a1 + 11);
  char v25 = *((_BYTE *)a1 + 104);
  BOOL v9 = (std::__shared_weak_count *)a1[15];
  uint64_t v26 = a1[14];
  uint64_t v27 = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  __int128 v28 = *((_OWORD *)a1 + 8);
  uint64_t v29 = a1[18];
  char v30 = *((_BYTE *)a1 + 152);
  sub_10003D9D4((uint64_t)&v18, a2, a4, a3, a5, a6);
  uint64_t v12 = v27;
  if (v27)
  {
    unint64_t v13 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v15 = v19;
  if (v19)
  {
    uint64_t v16 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_1000669AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1000669C8(uint64_t a1)
{
  BOOL v2 = sub_1000EA308((uint64_t)v7, (uint64_t)v6);
  uint64_t v3 = v6[0];
  v6[0] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  uint64_t v4 = v7[0];
  v7[0] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  return v2;
}

void sub_100066A44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 24LL))(a9);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24LL))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100066A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3 == v4) {
    return 1LL;
  }
  uint64_t v7 = v3 + 48;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 - 40) + 56LL))( *(void *)(v7 - 40),  a2,  a3);
    if ((_DWORD)result) {
      BOOL v9 = v7 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 48LL;
  }

  while (!v9);
  return result;
}

uint64_t sub_100066AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)v2
    || !(*(unsigned int (**)(void))(**(void **)(v2 + 8) + 80LL))(*(void *)(v2 + 8))
    || **(_DWORD **)(a1 + 16))
  {
    return 0LL;
  }

  else
  {
    return sub_100045644(**(void ***)(a2 + 16));
  }

uint64_t sub_100066B70(uint64_t a1)
{
  return sub_1000622E4(*(uint64_t (****)(void))(*(void *)(a1 + 24) - 40LL));
}

uint64_t sub_100066B7C(uint64_t a1)
{
  return sub_100062288(*(uint64_t (****)(void))(*(void *)(a1 + 16) + 8LL));
}

void *sub_100066B88(void *a1, uint64_t a2, uint64_t a3)
{
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_10004D820(a1, a2, a3, (uint64_t)(a1 + 8));
  return a1;
}

void sub_100066C04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *sub_100066C30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1[3];
  v4[0] = a1[5];
  v4[1] = v2;
  char v5 = 2;
  return sub_100066C68(a1, (uint64_t)v4, 0LL, a2);
}

void *sub_100066C68@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result[6];
  uint64_t v7 = *(void *)(v6 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 24) - v7) >> 4) == a3) {
    goto LABEL_22;
  }
  BOOL v9 = result;
  unsigned int v10 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11 || *(void *)a2 + 1LL >= v11) {
      goto LABEL_21;
    }
LABEL_5:
LABEL_22:
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a4 + 24) = 0;
    return result;
  }

  if (v10 != 3)
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    if (*(void *)a2 >= v11) {
      goto LABEL_21;
    }
    goto LABEL_5;
  }

  unint64_t v12 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  if (v11 >= *(void *)a2) {
    goto LABEL_5;
  }
LABEL_21:
  if (!qword_1001A3B40) {
    goto LABEL_22;
  }
LABEL_6:
  uint64_t v13 = result[7];
  unint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v7 + 48 * a3 + 8) + 32LL))(*(void *)(v7 + 48 * a3 + 8));
  unint64_t v15 = *(void *)a2;
  unint64_t v16 = *(void *)(a2 + 8);
  if (*(void *)a2 >= v14) {
    unint64_t v17 = v14;
  }
  else {
    unint64_t v17 = *(void *)a2;
  }
  if (v16 >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 16) + 16 * a3);
  v49[0] = *(void *)(*(void *)(v6 + 16) + 48 * a3 + 8);
  v49[1] = v17;
  v49[2] = v18;
  char v50 = 2;
  unint64_t v51 = 0LL;
  uint64_t v52 = v19;
  int v53 = 7;
  uint64_t v20 = v54;
  v54[0] = &off_1001723D8;
  uint64_t v55 = v54;
  if (v14 < v16)
  {
    unint64_t v21 = v14;
    __int128 v22 = operator new(0x20uLL);
    uint64_t v42 = v22 + 4;
    unsigned int v43 = (char *)(v22 + 4);
    void *v22 = v21;
    v22[1] = v16;
    *((_BYTE *)v22 + 16) = 2;
    *((_DWORD *)v22 + 6) = 2;
    std::string __p = v22;
    sub_10009AC38((uint64_t)v49, (uint64_t)&__p, (uint64_t)v44);
    sub_1000EA6DC((uint64_t)v49, (uint64_t)v44);
    __int128 v23 = v48;
    if (v48 == v47)
    {
      uint64_t v24 = 4LL;
      __int128 v23 = v47;
    }

    else
    {
      if (!v48)
      {
LABEL_27:
        uint64_t v26 = v46;
        uint64_t v46 = 0LL;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 40LL))(v26);
        }
        if (__p)
        {
          uint64_t v42 = __p;
          operator delete(__p);
        }

        unint64_t v15 = *(void *)a2;
        goto LABEL_32;
      }

      uint64_t v24 = 5LL;
    }

    (*(void (**)(void))(*v23 + 8 * v24))();
    goto LABEL_27;
  }

void sub_100067014( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32)
{
  unint64_t v36 = a32;
  if (a32 == (void *)(v33 + 56))
  {
    uint64_t v37 = 4LL;
    unint64_t v36 = (void *)(v33 + 56);
  }

  else
  {
    if (!a32) {
      goto LABEL_6;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_6:
  if (a26) {
    (*(void (**)(uint64_t))(*(void *)a26 + 40LL))(a26);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v38 = *(void **)(v34 - 96);
  if (v38 == v32)
  {
    uint64_t v39 = 4LL;
  }

  else
  {
    if (!v38) {
      goto LABEL_15;
    }
    uint64_t v39 = 5LL;
    unint64_t v32 = *(void **)(v34 - 96);
  }

  (*(void (**)(void *))(*v32 + 8 * v39))(v32);
LABEL_15:
  uint64_t v40 = *(void *)(v34 - 144);
  *(void *)(v34 - 144) = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 40LL))(v40);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10006711C@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v4 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v4 + 5) = *(void *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 48);
  *((__n128 *)v4 + 3) = result;
  *(void *)uint64_t v4 = off_10017CED8;
  *a2 = v4;
  return result;
}

  ;
}

uint64_t sub_100067184(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_10006718C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 8LL) + 32LL))(*(void *)(*(void *)(a1 + 16) + 8LL));
}

uint64_t sub_1000671A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 40LL))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48LL;
  }

  while (!v5);
  return result;
}

uint64_t *sub_100067200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (uint64_t *)operator new(0xC8uLL);
  uint64_t result = sub_1000BE654(v6, a1, a2);
  *a3 = (char *)v6 + *(void *)(*v6 - 104);
  return result;
}

void sub_100067254(_Unwind_Exception *a1)
{
}

uint64_t sub_100067268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 24LL) + 64LL))(*(void *)(*(void *)(a1 + 16) + 24LL));
}

uint64_t sub_10006727C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 24) - 24LL) + 72LL))(*(void *)(*(void *)(a1 + 24) - 24LL));
}

uint64_t sub_100067290(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0LL;
  }
  uint64_t v3 = v1 + 48;
  do
  {
    LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v3 - 40) + 80LL))(*(void *)(v3 - 40));
    if (*(_DWORD *)(v3 - 48)) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) != 0) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 48LL;
  }

  while (!v5);
  return result;
}

uint64_t sub_1000672F0()
{
  return 1LL;
}

uint64_t sub_1000672F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

__n128 sub_100067300@<Q0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unint64_t a5@<X4>, __n128 **a6@<X8>)
{
  unint64_t v12 = (__n128 *)operator new(0x40uLL);
  __n128 result = *a4;
  v12[1] = *a4;
  v12[2].n128_u64[0] = a4[1].n128_u64[0];
  v12[2].n128_u64[1] = a5;
  v12[3].n128_u64[0] = a1;
  v12[3].n128_u64[1] = a3;
  v12->n128_u64[0] = (unint64_t)off_10017CED8;
  v12->n128_u64[1] = a2;
  *a6 = v12;
  return result;
}

void *sub_10006736C(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  sub_1000679C0((uint64_t)v2, a1, 0);
  return v2;
}

void sub_1000673A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000673B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = a4[18];
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
  v12[0] = 0;
  v12[528] = 0;
  unint64_t v10 = sub_100064D5C(a1, a2, a3, a4, 0LL, 1, 0, (uint64_t)v12);
  sub_100019A28((uint64_t)v12);
  return v10;
}

void sub_10006747C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100067490(uint64_t a1, uint64_t a2)
{
  return sub_100062288(*(uint64_t (****)(void))(*(void *)(*(void *)a2 + 16LL) + 8LL));
}

const void *sub_1000674A0(uint64_t a1, void *a2)
{
  return sub_1000F7F14(*a2 + 64LL);
}

uint64_t sub_1000674AC()
{
  return 0LL;
}

uint64_t sub_1000674B8(uint64_t a1, uint64_t *a2)
{
  return sub_1000D4060(*a2);
}

uint64_t sub_1000674C0(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)a2 + 560LL) + 136LL);
}

uint64_t sub_1000674D0(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 72LL);
}

uint64_t sub_1000674DC()
{
  return 0LL;
}

uint64_t sub_1000674E8(uint64_t a1, void *a2)
{
  return sub_1000674F4(*a2 + 16LL);
}

uint64_t sub_1000674F4(uint64_t a1)
{
  uint64_t v3 = (const __CFUUID *)(*(uint64_t (**)(void))(*(void *)a1 + 48LL))();
  uint64_t v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v3);
  sub_10003B07C((const void **)&v3);
  return v1;
}

void sub_100067540(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100067554()
{
  return 0LL;
}

uint64_t sub_100067560()
{
  return 0LL;
}

uint64_t sub_10006756C()
{
  return 0LL;
}

CFStringRef sub_100067578(uint64_t a1, void **a2)
{
  return sub_1000D4054(*a2);
}

uint64_t sub_100067580()
{
  return 0LL;
}

uint64_t sub_10006758C()
{
  return 0LL;
}

uint64_t sub_100067598()
{
  return 0LL;
}

uint64_t sub_1000675A4()
{
  return 0LL;
}

uint64_t sub_1000675B0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)__n128 result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 3sub_1000296D8(&v5, 2) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(result + 4crc32(0LL, 0LL, 0) = *(void *)(a2 + 40);
  return result;
}

uint64_t sub_100067604(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000676BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100067678(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    sub_100044D7C();
  }
  return operator new(48 * a2);
}

uint64_t sub_1000676BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      *(_DWORD *)(a7 + v7 - 4_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + v7 - 48);
      uint64_t v9 = a7 + v7 - 48;
      *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 4crc32(0LL, 0LL, 0) = 0LL;
      *(void *)(v8 - 3sub_1000296D8(&v5, 2) = 0LL;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 24) = 0LL;
      *(void *)(v8 - 16) = 0LL;
      *(void *)(v9 + 4crc32(0LL, 0LL, 0) = *(void *)(a3 + v7 - 8);
      *((void *)&v15 + 1) = v9;
      v7 -= 48LL;
    }

    while (a3 + v7 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_100067774((uint64_t)v12);
  return v10;
}

uint64_t sub_100067774(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000677A8(a1);
  }
  return a1;
}

uint64_t sub_1000677A8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8LL);
  while (v1 != v2)
  {
    sub_100006224(v1 + 24);
    uint64_t result = sub_100006224(v1 + 8);
    v1 += 48LL;
  }

  return result;
}

uint64_t sub_1000677EC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100067820(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 48;
      sub_100006224(v2 - 24);
      uint64_t result = sub_100006224(v2 - 40);
      uint64_t v2 = *(void *)(v4 + 16);
    }

    while (v2 != a2);
  }

  return result;
}

void sub_100067878(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    sub_10004DA00(a1 + 64);
    uint64_t v2 = (void **)(a1 + 24);
    sub_10000F974(&v2);
    *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  }

uint64_t sub_1000678D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    sub_10004DA00(a1 + 64);
    uint64_t v3 = (void **)(a1 + 24);
    sub_10000F974(&v3);
  }

  return a1;
}

void sub_100067928(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100067968((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }

uint64_t sub_100067968(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 48LL)
  {
    sub_100006224(i - 24);
    uint64_t result = sub_100006224(i - 40);
  }

  *(void *)(v3 + _Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_1000679C0(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_10017CFD0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v6 = (char **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = 0LL;
  if (a3 == 1)
  {
    uint64_t v7 = sub_100062340(a1, a2);
    char v8 = 0;
    *(void *)(a1 + 4crc32(0LL, 0LL, 0) = v7;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
  }

  else
  {
    *(_BYTE *)(a1 + 4crc32(0LL, 0LL, 0) = 0;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
    char v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 24) - 24LL) + 96LL))(*(void *)(*(void *)(a2 + 24) - 24LL));
  }

  *(_BYTE *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a2 + 16);
  for (uint64_t i = *(void *)(a2 + 24); v10 != i; v10 += 48LL)
  {
    if (a3 == 1
      && -1 - 0x5555555555555555LL * ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4) == (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4)
    {
      uint64_t v13 = *(void *)(v10 + 24);
      unint64_t v12 = *(std::__shared_weak_count **)(v10 + 32);
      v30[0] = v13;
      v30[1] = (uint64_t)v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }

      unint64_t v16 = operator new(0x28uLL);
      void *v16 = off_10017D088;
      v16[1] = v13;
      void v16[3] = 0LL;
      v16[4] = 0LL;
      v16[2] = 0LL;
      unint64_t v31 = v16;
      unint64_t v17 = *(void **)(a1 + 24);
      if ((unint64_t)v17 >= *(void *)(a1 + 32))
      {
        char v25 = sub_100067D10(v6, (uint64_t *)&v31);
        uint64_t v26 = (uint64_t)v31;
        *(void *)(a1 + 24) = v25;
        unint64_t v31 = 0LL;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 40LL))(v26);
        }
      }

      else
      {
        *unint64_t v17 = v16;
        unint64_t v18 = operator new(0x20uLL);
        uint64_t v19 = (uint64_t)v31;
        void *v18 = &off_10017D028;
        v18[1] = 0LL;
        v18[2] = 0LL;
        uint64_t v18[3] = v19;
        v17[1] = v18;
        *(void *)(a1 + 24) = v17 + 2;
        unint64_t v31 = 0LL;
      }

      if (v12)
      {
        unint64_t v27 = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }

    else
    {
      uint64_t v20 = (void *)(*(uint64_t (**)(void))(**(void **)(v10 + 8) + 136LL))(*(void *)(v10 + 8));
      v30[0] = (uint64_t)v20;
      unint64_t v21 = *(void **)(a1 + 24);
      if ((unint64_t)v21 >= *(void *)(a1 + 32))
      {
        __int128 v23 = sub_1000680DC(v6, v30);
        uint64_t v24 = v30[0];
        *(void *)(a1 + 24) = v23;
        v30[0] = 0LL;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 40LL))(v24);
        }
      }

      else
      {
        void *v21 = v20;
        if (v20)
        {
          uint64_t v20 = operator new(0x20uLL);
          uint64_t v22 = v30[0];
          *uint64_t v20 = &off_10017D0E0;
          v20[1] = 0LL;
          _OWORD v20[2] = 0LL;
          v20[3] = v22;
        }

        v21[1] = v20;
        *(void *)(a1 + 24) = v21 + 2;
      }
    }
  }

  return a1;
}

void sub_100067C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100067C84(uint64_t a1)
{
  *(void *)a1 = off_10017CFD0;
  uint64_t v3 = (void **)(a1 + 16);
  sub_10006806C(&v3);
  return a1;
}

void sub_100067CC8(char *a1)
{
  *(void *)a1 = off_10017CFD0;
  uint64_t v2 = (void **)(a1 + 16);
  sub_10006806C(&v2);
  operator delete(a1);
}

char *sub_100067D10(char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v26 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100061D04(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[16 * v4];
  __int128 v23 = v10;
  v24.i64[0] = (uint64_t)v11;
  unint64_t v12 = &v10[16 * v9];
  v24.i64[1] = (uint64_t)v11;
  char v25 = v12;
  uint64_t v13 = *a2;
  *(void *)unint64_t v11 = *a2;
  if (v13)
  {
    __int128 v14 = operator new(0x20uLL);
    uint64_t v15 = *a2;
    *__int128 v14 = &off_10017D028;
    v14[1] = 0LL;
    void v14[2] = 0LL;
    uint64_t v14[3] = v15;
  }

  else
  {
    __int128 v14 = 0LL;
  }

  *((void *)v11 + 1) = v14;
  *a2 = 0LL;
  unint64_t v16 = v11 + 16;
  v24.i64[1] = (uint64_t)(v11 + 16);
  unint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }

  else
  {
    do
    {
      __int128 v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v11 - 1) = v19;
      v11 -= 16;
      *(void *)unint64_t v17 = 0LL;
      *((void *)v17 + 1) = 0LL;
    }

    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    unint64_t v16 = (char *)v24.i64[1];
    unint64_t v12 = v25;
  }

  *a1 = v11;
  a1[1] = v16;
  int64x2_t v24 = v20;
  unint64_t v21 = a1[2];
  a1[2] = v12;
  char v25 = v21;
  __int128 v23 = (char *)v20.i64[0];
  sub_100067EC4((uint64_t)&v23);
  return v16;
}

void sub_100067E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100067E58(std::__shared_weak_count *a1)
{
}

uint64_t sub_100067E6C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_100067E84(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_100067EC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_100006224(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_100067F10(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return sub_10006B47C(a1[1], a1, a2, a3);
}

uint64_t sub_100067F24(uint64_t a1)
{
  *(void *)a1 = off_10017D088;
  uint64_t v3 = (void **)(a1 + 16);
  sub_100067FB0(&v3);
  return a1;
}

void sub_100067F68(char *a1)
{
  *(void *)a1 = off_10017D088;
  uint64_t v2 = (void **)(a1 + 16);
  sub_100067FB0(&v2);
  operator delete(a1);
}

void sub_100067FB0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152LL;
        sub_100068020(v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_100068020(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 112);
  sub_10006806C(&v3);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

void sub_10006806C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_100006224(v4 - 16);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

char *sub_1000680DC(char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v26 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100061D04(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = &v10[16 * v4];
  __int128 v23 = v10;
  v24.i64[0] = (uint64_t)v11;
  unint64_t v12 = &v10[16 * v9];
  v24.i64[1] = (uint64_t)v11;
  char v25 = v12;
  uint64_t v13 = *a2;
  *(void *)unint64_t v11 = *a2;
  if (v13)
  {
    __int128 v14 = operator new(0x20uLL);
    uint64_t v15 = *a2;
    *__int128 v14 = &off_10017D0E0;
    v14[1] = 0LL;
    void v14[2] = 0LL;
    uint64_t v14[3] = v15;
  }

  else
  {
    __int128 v14 = 0LL;
  }

  *((void *)v11 + 1) = v14;
  *a2 = 0LL;
  unint64_t v16 = v11 + 16;
  v24.i64[1] = (uint64_t)(v11 + 16);
  unint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }

  else
  {
    do
    {
      __int128 v19 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v11 - 1) = v19;
      v11 -= 16;
      *(void *)unint64_t v17 = 0LL;
      *((void *)v17 + 1) = 0LL;
    }

    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    unint64_t v16 = (char *)v24.i64[1];
    unint64_t v12 = v25;
  }

  *a1 = v11;
  a1[1] = v16;
  int64x2_t v24 = v20;
  unint64_t v21 = a1[2];
  a1[2] = v12;
  char v25 = v21;
  __int128 v23 = (char *)v20.i64[0];
  sub_100067EC4((uint64_t)&v23);
  return v16;
}

void sub_10006820C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100068224(std::__shared_weak_count *a1)
{
}

uint64_t sub_100068238(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_100068250(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

void sub_100068290(uint64_t *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = sub_10006833C((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556LL) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  uint64_t v12 = v11;
  uint64_t v13 = (__n128 *)operator new(24 * v11);
  sub_1000683B4((uint64_t)a1, v13, v12, a2, a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t sub_10006833C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x555555555555555LL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x555555555555555LL - v4 < a2 - v4 + v3) {
    sub_10001A548("get_next_capacity, allocator's max size reached");
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = v3 + a2;
  if (v8 < 0x555555555555555LL) {
    unint64_t v2 = v8;
  }
  if (v9 <= v2) {
    return v2;
  }
  else {
    return v9;
  }
}

void sub_1000683B4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  sub_10006847C(a1, *(__n128 **)a1, a4, (__n128 *)(*(void *)a1 + 24LL * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    for (i = *(void *)(a1 + 8); i; uint64_t v10 = (__n128 *)((char *)v10 + 24))
    {
      --i;
      sub_100006224((uint64_t)v10);
    }

    if (a1 + 24 != *(void *)a1) {
      operator delete(*(void **)a1);
    }
  }

  uint64_t v12 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
  *(void *)(a1 + 16) = a3;
}

void sub_100068458(_Unwind_Exception *exception_object)
{
  if (v1)
  {
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_10006847C(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5 = *a2;
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a5[1].n128_u64[0] = a2[1].n128_u64[0];
    a5 = (__n128 *)((char *)a5 + 24);
    a2 = (__n128 *)((char *)a2 + 24);
  }

  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0LL;
  a7->n128_u64[1] = 0LL;
  a5[1].n128_u64[0] = a7[1].n128_u64[0];
  if (a3 != a4)
  {
    unint64_t v8 = (__n128 *)((char *)a5 + 24 * a6);
    do
    {
      __n128 result = *a3;
      __n128 *v8 = *a3;
      a3->n128_u64[0] = 0LL;
      a3->n128_u64[1] = 0LL;
      v8[1].n128_u64[0] = a3[1].n128_u64[0];
      a3 = (__n128 *)((char *)a3 + 24);
      unint64_t v8 = (__n128 *)((char *)v8 + 24);
    }

    while (a3 != a4);
  }

  return result;
}

uint64_t sub_1000684F0@<X0>(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x68uLL);
  uint64_t result = sub_100068550((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_10006853C(_Unwind_Exception *a1)
{
}

uint64_t sub_100068550(uint64_t a1, uint64_t a2, char *a3)
{
  *(void *)a1 = off_10017D140;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  char v4 = *a3;
  *(_BYTE *)(a1 + 3sub_1000296D8(&v5, 2) = 0;
  *(void *)(a1 + 24) = off_1001784B0;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 72LL))(a2);
  *(_BYTE *)(a1 + 8crc32(0LL, 0LL, 0) = v4;
  sub_10000AF6C((void *)(a1 + 88));
  return a1;
}

void sub_1000685C0(_Unwind_Exception *a1)
{
}

void sub_1000685D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017D140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000685E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10017D140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100068604(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

uint64_t sub_100068614()
{
  uint64_t v2 = &stru_10017D1A0;
  unint64_t v0 = atomic_load(&qword_1001A47C8);
  if (v0 != -1LL)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_1001A47C8, &v3, (void (__cdecl *)(void *))sub_10006FDC8);
  }

  return qword_1001A4888;
}

void sub_10006867C(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  v1[1] = 0LL;
  *uint64_t v1 = v1 + 1;
  v1[2] = 0LL;
  v1[3] = 850045863LL;
  *((_OWORD *)v1 + sub_1000296D8(&v5, 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0LL;
  qword_1001A4888 = (uint64_t)v1;
}

void sub_1000686C4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v23 = (std::mutex *)(a1 + 24);
  char v24 = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unint64_t v8 = sub_10006D62C(a1, (void **)a2);
  if ((void **)(a1 + 8) != v8)
  {
    *(void *)a4 = v8[7];
    char v9 = 1;
LABEL_19:
    *(_BYTE *)(a4 + 16) = v9;
    goto LABEL_20;
  }

  sub_10001ED54((uint64_t)&v23);
  if (!a3 || !os_variant_allows_internal_security_policies("com.apple.diskimages2"))
  {
    *(void *)&__int128 v21 = "*, diskimage_uio::diskimage_err> PluginsManager::get_plugin_ptr(const std::string &, BOOL)";
    *((void *)&v21 + 1) = 63LL;
    int v22 = 16;
    sub_100068A48(v25, &v21);
    sub_10000552C(&v28, (uint64_t)"Plugin ", 7LL);
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      unint64_t v17 = (void *)a2;
    }
    else {
      unint64_t v17 = *(void **)a2;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v28, (uint64_t)v17, v18);
    sub_10000552C(&v28, (uint64_t)" is not registered", 18LL);
    std::ostream::~ostream(&v28, off_10017D840);
    sub_10006D9A4((uint64_t)v25);
    std::ios::~ios(&v29);
    __int128 v19 = std::generic_category();
    char v9 = 0;
    *(void *)a4 = 45LL;
    *(void *)(a4 + _Block_object_dispose(va, 8) = v19;
    goto LABEL_19;
  }

  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_1001A47E8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1001A47E8))
  {
    sub_100006174(v25, "com.apple.raw");
    v25[3] = sub_1000884A0;
    v25[4] = 0LL;
    sub_100006174(v26, "com.apple.diskimage-plugin.nbd");
    v26[3] = sub_10006C164;
    v26[4] = 0LL;
    sub_100006174(v27, "com.apple.diskimage-plugin.amber");
    v27[3] = sub_10006C164;
    v27[4] = 16LL;
    sub_10006D144((uint64_t)&qword_1001A47D0, v25, 3LL);
    for (uint64_t i = 0LL; i != -15; i -= 5LL)
    {
      if (SHIBYTE(v27[i + 2]) < 0) {
        operator delete((void *)v27[i]);
      }
    }

    __cxa_atexit((void (*)(void *))sub_10006C1C8, &qword_1001A47D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1001A47E8);
  }

  if (sub_10006D62C((uint64_t)&qword_1001A47D0, (void **)a2) != (void **)&unk_1001A47D8)
  {
    v25[0] = (void *)a2;
    unint64_t v11 = sub_10006D6A8(&qword_1001A47D0, (void **)a2, (uint64_t)&unk_1001447DC, (__int128 **)v25);
    int v12 = *(char *)(a2 + 23);
    uint64_t v13 = *(char **)a2;
    __int128 v14 = (unsigned int *)((uint64_t (*)(uint64_t))v11[7])(v11[8]);
    if (v12 >= 0) {
      uint64_t v15 = (char *)a2;
    }
    else {
      uint64_t v15 = v13;
    }
    di_plugin_register(v15, v14);
  }

  sub_1000686C4(a1, a2, 0LL);
LABEL_20:
  if (v24) {
    std::mutex::unlock(v23);
  }
}

void sub_1000689AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = 0LL;
  while (1)
  {
    v20 -= 40LL;
    if (v20 == -120)
    {
      __cxa_guard_abort(&qword_1001A47E8);
      if (a14) {
        std::mutex::unlock(a13);
      }
      _Unwind_Resume(a1);
    }
  }

void *sub_100068A48(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006FDDC((uint64_t)a1, a2);
  *a1 = off_10017D778;
  a1[45] = &off_10017D878;
  a1[46] = &off_10017D8A0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017D778;
  a1[45] = off_10017D800;
  a1[46] = off_10017D828;
  return a1;
}

void sub_100068ACC(_Unwind_Exception *a1)
{
}

uint64_t sub_100068AF0(uint64_t a1)
{
  return a1;
}

unsigned int *sub_100068B30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000BE2F0())
  {
    v19[0] = 0LL;
    unint64_t v8 = (os_log_s *)sub_1000BE278();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    uint64_t buf = 0x6704100402LL;
    unsigned __int8 v10 = "RO";
    __int128 v23 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
    __int16 v22 = 2080;
    if ((a3 & 3) != 0) {
      unsigned __int8 v10 = "RW";
    }
    __int16 v24 = 2080;
    char v25 = v10;
    __int16 v26 = 2112;
    uint64_t v27 = a4;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v9,  v19,  0LL,  0LL,  &_mh_execute_header,  v8,  0LL,  "%.*s: Creating %s plugin instance with params: %@",  COERCE_DOUBLE(68158466LL),  &buf,  38);
    if (v11)
    {
      int v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v14 = "RW";
      uint64_t buf = 0x6704100402LL;
      __int128 v23 = "di_plugin_image_t *PluginsManager::create_plugin_image(const di_plugin_t &, int, const CFDictionaryRef)";
      __int16 v22 = 2080;
      if ((a3 & 3) == 0) {
        __int128 v14 = "RO";
      }
      __int16 v24 = 2080;
      char v25 = v14;
      __int16 v26 = 2112;
      uint64_t v27 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%.*s: Creating %s plugin instance with params: %@",  (uint8_t *)&buf,  0x26u);
    }
  }

  *__error() = v7;
  v19[1] = a4;
  uint64_t v20 = 0LL;
  LODWORD(v19[0]) = 16;
  HIDWORD(v19[0]) = a3;
  uint64_t v15 = (unsigned int *)(*(uint64_t (**)(void *, __CFError **))(a2 + 8))(v19, &v20);
  int v16 = v15;
  if (v15 && *v15 <= 0x57)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)&buf);
    sub_10000552C(&buf, (uint64_t)"Plugin image struct size ", 25LL);
    std::ostream::operator<<(&buf, *v16);
    sub_10000552C(&buf, (uint64_t)" is incompatible with the framework, expected at least ", 55LL);
    std::ostream::operator<<(&buf, 88LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)&buf, 0xFFFFFFA9);
  }

  sub_100068E18(v15, v20);
  return v16;
}

void sub_100068DD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_100068E18(void *result, __CFError *a2)
{
  if (!result)
  {
    if (a2)
    {
      int v7 = *__error();
      if (sub_1000BE2F0())
      {
        uint64_t v16 = 0LL;
        unint64_t v8 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          uint64_t v9 = 3LL;
        }
        else {
          uint64_t v9 = 2LL;
        }
        *(_DWORD *)uint64_t buf = 68158210;
        int v18 = 71;
        __int16 v19 = 2080;
        uint64_t v20 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
        __int16 v21 = 2114;
        __int16 v22 = a2;
        unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl( v9,  &v16,  0LL,  0LL,  &_mh_execute_header,  v8,  16LL,  "%.*s: Failed initializing plugin: %{public}@",  buf,  28);
        if (v10)
        {
          unint64_t v11 = (char *)v10;
          fprintf(__stderrp, "%s\n", v10);
          free(v11);
        }
      }

      else
      {
        int v12 = (os_log_s *)sub_1000BE278();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 68158210;
          int v18 = 71;
          __int16 v19 = 2080;
          uint64_t v20 = "di_plugin_image_t *verify_plugin_image(di_plugin_image_t *, CFErrorRef)";
          __int16 v21 = 2114;
          __int16 v22 = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%.*s: Failed initializing plugin: %{public}@",  buf,  0x1Cu);
        }
      }

      *__error() = v7;
      uint64_t v13 = a2;
      int Code = CFErrorGetCode(a2);
      if (Code < 0) {
        int v15 = Code;
      }
      else {
        int v15 = -Code;
      }
      CFRelease(v13);
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin initialization failed";
      unsigned int v4 = v15;
    }

    else
    {
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v3 = "Plugin bug: returned init failure without supplying the error";
      unsigned int v4 = -14;
    }

void *sub_100069060(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int v7 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v19 = 0LL;
    unint64_t v8 = (os_log_s *)sub_1000BE278();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      uint64_t v9 = 3LL;
    }
    else {
      uint64_t v9 = 2LL;
    }
    *(_DWORD *)uint64_t buf = 68157954;
    *(_DWORD *)&uint8_t buf[4] = 114;
    __int16 v21 = 2080;
    __int16 v22 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
    LODWORD(v16) = 18;
    unsigned __int8 v10 = (const char *)_os_log_send_and_compose_impl( v9,  &v19,  0LL,  0LL,  &_mh_execute_header,  v8,  0LL,  "%.*s: Decoding plugin instance",  (int)buf,  v16);
    if (v10)
    {
      unint64_t v11 = (char *)v10;
      fprintf(__stderrp, "%s\n", v10);
      free(v11);
    }
  }

  else
  {
    int v12 = (os_log_s *)sub_1000BE278();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = 114;
      __int16 v21 = 2080;
      __int16 v22 = "di_plugin_image_t *PluginsManager::decode_plugin_image(const di_plugin_t &, const diskimage_decode_fn_t &, void *)";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%.*s: Decoding plugin instance", buf, 0x12u);
    }
  }

  *__error() = v7;
  *(void *)uint64_t buf = 0LL;
  uint64_t v13 = *(uint64_t (**)(__int128 *, uint64_t, uint8_t *))(a2 + 16);
  __int128 v17 = *a3;
  uint64_t v18 = *((void *)a3 + 2);
  __int128 v14 = (void *)v13(&v17, a4, buf);
  return sub_100068E18(v14, *(__CFError **)buf);
}

uint64_t sub_100069220(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (!a3) {
    return 4294967274LL;
  }
  if (a3[1] != 1)
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_10002A2BC(&v25, &__dst);
    sub_10000552C(&v28, (uint64_t)"Plugin version ", 15LL);
    std::ostream::operator<<(&v28, a3[1]);
    sub_10000552C(&v28, (uint64_t)" is incompatible with the framework, expected ", 46LL);
    std::ostream::operator<<(&v28, 1LL);
    std::ostream::~ostream(&v28, off_1001759F8);
    sub_10002AA58((uint64_t)&v25);
    goto LABEL_6;
  }

  if (*a3 <= 0x27)
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_1000697F0(&v25, &__dst);
    sub_10000552C(&v28, (uint64_t)"Plugin struct size ", 19LL);
    std::ostream::operator<<(&v28, *a3);
    sub_10000552C(&v28, (uint64_t)" is incompatible with the framework, expected at least ", 55LL);
    std::ostream::operator<<(&v28, 40LL);
    std::ostream::~ostream(&v28, off_10017DA60);
    sub_10006DF50((uint64_t)&v25);
LABEL_6:
    std::ios::~ios(v29);
    return 4294967209LL;
  }

  if (!*((void *)a3 + 1) || !*((void *)a3 + 2))
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_1000698D8(&v25, &__dst);
    sub_10000552C(&v28, (uint64_t)"Mandatory callbacks in the plugin's struct are missing", 54LL);
    std::ostream::~ostream(&v28, off_10017DC80);
    sub_10006E4FC((uint64_t)&v25);
    std::ios::~ios(v29);
    return 4294967274LL;
  }

  int v7 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((void **)(a1 + 8) == sub_10006D62C(a1, (void **)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10000AD88(v22, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)__int16 v22 = *(_OWORD *)a2;
      uint64_t v23 = *(void *)(a2 + 16);
    }

    *(void *)&__int128 v24 = a3;
    int v12 = operator new(0x38uLL);
    if (SHIBYTE(v23) < 0)
    {
      sub_10000AD88(&__dst, v22[0], (unint64_t)v22[1]);
    }

    else
    {
      __int128 __dst = *(_OWORD *)v22;
      uint64_t v31 = v23;
    }

    v12[1] = 0LL;
    v12[2] = 0LL;
    void *v12 = off_10017E488;
    char v25 = (__int128 *)a3;
    if (SHIBYTE(v31) < 0)
    {
      sub_10000AD88(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
      uint64_t v13 = v25;
    }

    else
    {
      __int128 __p = __dst;
      uint64_t v27 = v31;
      uint64_t v13 = (__int128 *)a3;
    }

    void v12[3] = v13;
    __int128 v14 = v12 + 4;
    if (SHIBYTE(v27) < 0)
    {
      sub_10000AD88(v14, (void *)__p, *((unint64_t *)&__p + 1));
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)__p);
      }
    }

    else
    {
      *(_OWORD *)__int128 v14 = __p;
      v12[6] = v27;
    }

    *((void *)&v24 + 1) = v12;
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__dst);
    }
    char v25 = (__int128 *)a2;
    int v15 = sub_10006FFCC((uint64_t **)a1, (void **)a2, (uint64_t)&unk_1001447DC, &v25);
    sub_1000198A4((uint64_t)(v15 + 7), &v24);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1))
    {
      __int128 v17 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 0;
    sub_100069AA8(&v25, &__dst);
    sub_10000552C(&v28, (uint64_t)"Registered plugin ", 18LL);
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      uint64_t v20 = (void *)a2;
    }
    else {
      uint64_t v20 = *(void **)a2;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v28, (uint64_t)v20, v21);
    std::ostream::~ostream(&v28, off_10017E0C0);
    sub_10006F054((uint64_t)&v25);
    std::ios::~ios(v29);
    uint64_t v4 = 0LL;
  }

  else
  {
    *(void *)&__int128 __dst = "PluginsManager::register_plugin(const string &, di_plugin_t *)";
    *((void *)&__dst + 1) = 31LL;
    LODWORD(v31) = 16;
    sub_1000699C0(&v25, &__dst);
    sub_10000552C(&v28, (uint64_t)"Plugin ", 7LL);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (void *)a2;
    }
    else {
      uint64_t v9 = *(void **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    sub_10000552C(&v28, (uint64_t)v9, v10);
    sub_10000552C(&v28, (uint64_t)" cannot be re-registered", 24LL);
    std::ostream::~ostream(&v28, off_10017DEA0);
    sub_10006EAA8((uint64_t)&v25);
    std::ios::~ios(v29);
    uint64_t v4 = 4294967279LL;
  }

  std::mutex::unlock(v7);
  return v4;
}

void sub_1000696E0( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v24);
  __cxa_begin_catch(a1);
  sub_100070184((uint64_t)&a9, v23);
  __cxa_rethrow();
}

void sub_100069764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100069774()
{
}

void sub_100069794(_Unwind_Exception *a1)
{
}

void sub_10006979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1000697AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000697C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_1000697F0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006FE58((uint64_t)a1, a2);
  *a1 = off_10017D998;
  a1[45] = &off_10017DA98;
  a1[46] = &off_10017DAC0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017D998;
  a1[45] = off_10017DA20;
  a1[46] = off_10017DA48;
  return a1;
}

void sub_100069874(_Unwind_Exception *a1)
{
}

uint64_t sub_100069898(uint64_t a1)
{
  return a1;
}

void *sub_1000698D8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006FED4((uint64_t)a1, a2);
  *a1 = off_10017DBB8;
  a1[45] = &off_10017DCB8;
  a1[46] = &off_10017DCE0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017DBB8;
  a1[45] = off_10017DC40;
  a1[46] = off_10017DC68;
  return a1;
}

void sub_10006995C(_Unwind_Exception *a1)
{
}

uint64_t sub_100069980(uint64_t a1)
{
  return a1;
}

void *sub_1000699C0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10006FF50((uint64_t)a1, a2);
  *a1 = off_10017DDD8;
  a1[45] = &off_10017DED8;
  a1[46] = &off_10017DF00;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017DDD8;
  a1[45] = off_10017DE60;
  a1[46] = off_10017DE88;
  return a1;
}

void sub_100069A44(_Unwind_Exception *a1)
{
}

uint64_t sub_100069A68(uint64_t a1)
{
  return a1;
}

void *sub_100069AA8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100070A6C((uint64_t)a1, a2);
  *a1 = off_10017DFF8;
  a1[45] = &off_10017E0F8;
  a1[46] = &off_10017E120;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017DFF8;
  a1[45] = off_10017E080;
  a1[46] = off_10017E0A8;
  return a1;
}

void sub_100069B2C(_Unwind_Exception *a1)
{
}

uint64_t sub_100069B50(uint64_t a1)
{
  return a1;
}

CFStringRef sub_100069B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    unint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v5) {
      return (CFStringRef)v5(a3);
    }
  }

  else {
    int v7 = *(const char **)a2;
  }
  return CFStringCreateWithCString(0LL, v7, 0x8000100u);
}

uint64_t sub_100069C08(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000AD88((_BYTE *)(a1 + 16), *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 v12 = *(_OWORD *)a2;
    *(void *)(a1 + 3sub_1000296D8(&v5, 2) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }

  uint64_t v13 = sub_100068614();
  sub_1000686C4(v13, a2, 1, (uint64_t)v34);
  if (!v35)
  {
    exception = (char *)__cxa_allocate_exception(0x40uLL);
    __int128 v32 = *(_OWORD *)sub_100054DC8((uint64_t)v34);
    *(void *)exception = &off_100196FC8;
    *(_OWORD *)(exception + _Block_object_dispose(va, 8) = v32;
    exception[24] = 0;
    exception[48] = 0;
    *((void *)exception + 7) = "Failed to get plugin instance";
  }

  v40[0] = &off_10017E708;
  unint64_t v41 = v40;
  if (!a6)
  {
    uint64_t v17 = sub_100068614();
    unint64_t v18 = sub_100068B30(v17, v34[0], a4, a3);
    uint64_t v19 = (uint64_t)v41;
    if (v41)
    {
      if (v41 == v40)
      {
        uint64_t v37 = v36;
        (*(void (**)(uint64_t, void *))(v40[0] + 24LL))((uint64_t)v40, v36);
        goto LABEL_23;
      }

      uint64_t v19 = (*(uint64_t (**)(void))(*v41 + 16LL))();
    }

    uint64_t v37 = (void *)v19;
LABEL_23:
    sub_100070B88((uint64_t *)&v33, (uint64_t)v18, (uint64_t)v36);
    sub_1000198A4(a1, &v33);
    uint64_t v25 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      __int16 v26 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    uint64_t v23 = v37;
    if (v37 == v36)
    {
      uint64_t v24 = 4LL;
      uint64_t v23 = v36;
      goto LABEL_32;
    }

    goto LABEL_29;
  }

  uint64_t v14 = sub_100068614();
  int v15 = sub_100069060(v14, v34[0], a5, a6);
  uint64_t v16 = (uint64_t)v41;
  if (v41)
  {
    if (v41 == v40)
    {
      uint64_t v39 = v38;
      (*(void (**)(uint64_t, void *))(v40[0] + 24LL))((uint64_t)v40, v38);
      goto LABEL_15;
    }

    uint64_t v16 = (*(uint64_t (**)(void))(*v41 + 16LL))();
  }

  uint64_t v39 = (void *)v16;
LABEL_15:
  sub_100070B88((uint64_t *)&v33, (uint64_t)v15, (uint64_t)v38);
  sub_1000198A4(a1, &v33);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (*((void *)&v33 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v33 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  uint64_t v23 = v39;
  if (v39 == v38)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v38;
    goto LABEL_32;
  }

void sub_100069F28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, char *a25)
{
  uint64_t v29 = a17;
  if (a17 == v27)
  {
    uint64_t v30 = 4LL;
    uint64_t v29 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*(void *)v29 + 8 * v30))();
LABEL_6:
  uint64_t v31 = a25;
  if (a25 == &a22)
  {
    uint64_t v32 = 4LL;
    uint64_t v31 = &a22;
  }

  else
  {
    if (!a25) {
      goto LABEL_11;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*(void *)v31 + 8 * v32))();
LABEL_11:
  sub_100006224(v25);
  _Unwind_Resume(a1);
}

void sub_100069FF4(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_10006A078;
  _OWORD v4[3] = &unk_10017D1C0;
  v4[4] = a1;
  unint64_t v5 = v4;
  unint64_t v3 = atomic_load(v2);
  if (v3 != -1LL)
  {
    int v7 = &v5;
    unint64_t v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_10006FDC8);
  }

uint64_t sub_10006A078(uint64_t a1)
{
  return sub_10006A0B4(*(void *)(a1 + 32) + 56LL);
}

uint64_t sub_10006A0B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 200)) {
    *(_BYTE *)(sub_10010F470() + 20crc32(0LL, 0LL, 0) = 0;
  }
  uint64_t result = sub_10010F414();
  *(_BYTE *)(result + 20crc32(0LL, 0LL, 0) = 1;
  return result;
}

void sub_10006A108(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006A110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = a3 + 16;
  uint64_t v6 = io_rings_enter(*(void *)(a1 + 104), 1, 0);
  if ((_DWORD)v6)
  {
    uint64_t v7 = v6;
    *(void *)&__int128 v9 = "DiskImagePlugin::sync_enter_and_wait(io_rings_sqe_t *, Context &)";
    *((void *)&v9 + 1) = 36LL;
    int v10 = 16;
    sub_10006A208(v11, &v9);
    sub_10000552C(&v12, (uint64_t)"failed to enter SQE to the ring, ret code ", 42LL);
    std::ostream::operator<<(&v12, v7);
    std::ostream::~ostream(&v12, off_10017E2E0);
    sub_10006F600((uint64_t)v11);
    std::ios::~ios(&v13);
  }

  else
  {
    sub_100101A34((dispatch_semaphore_t *)(a3 + 24), 0xFFFFFFFFFFFFFFFFLL);
    return *(unsigned int *)(a3 + 16);
  }

  return v7;
}

void sub_10006A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10006A208(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100070F94((uint64_t)a1, a2);
  *a1 = off_10017E218;
  a1[45] = &off_10017E318;
  a1[46] = &off_10017E340;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017E218;
  a1[45] = off_10017E2A0;
  a1[46] = off_10017E2C8;
  return a1;
}

void sub_10006A28C(_Unwind_Exception *a1)
{
}

uint64_t sub_10006A2B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006A2F0(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  double v9 = sub_10010F474((uint64_t)(a1 + 7));
  if (!v8) {
    return -35LL;
  }
  uint64_t v10 = v8;
  __int128 v98 = 0LL;
  unint64_t v99 = 0LL;
  uint64_t v100 = 0LL;
  uint64_t v11 = *(void *)(a4 + 72);
  uint64_t v12 = a3[9];
  unint64_t v13 = (*(uint64_t (**)(void *, double))(*a1 + 24LL))(a1, v9);
  uint64_t v76 = a2;
  (*(void (**)(void *__return_ptr, void *))(*a1 + 72LL))(v97, a1);
  unint64_t v77 = a3[18];
  unint64_t v14 = (*(void *)(a4 + 144) - v77) & ~((uint64_t)(*(void *)(a4 + 144) - v77) >> 63);
  if (v97[0] && v11 - v12 >= v97[1] * v97[0] + (v14 - 1 + v97[0]) / v97[0] * v97[0])
  {
    int v15 = *(uint64_t (**)(void))(a1[2] + 32LL);
    if (v15)
    {
      unsigned int v16 = v15();
      unint64_t v17 = v77;
      unint64_t v18 = v77;
      if (v16) {
        unint64_t v18 = v77 / v16 * v16;
      }
    }

    else
    {
      unint64_t v17 = a3[18];
      unint64_t v18 = v17;
    }

    unint64_t v14 = (v14 - 1 + v17 - v18 + v97[0]) / v97[0] * v97[0];
    unint64_t v77 = v18;
  }

  uint64_t v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v84 = *a3;
  __int128 v85 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }

  v86[0] = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
  __int128 v88 = *(_OWORD *)(a3 + 7);
  __int128 v23 = *(_OWORD *)(a3 + 11);
  __int128 v89 = *(_OWORD *)(a3 + 9);
  uint64_t v87 = a3[6];
  __int128 v90 = v23;
  char v91 = *((_BYTE *)a3 + 104);
  uint64_t v24 = (std::__shared_weak_count *)a3[15];
  uint64_t v92 = a3[14];
  __int128 v93 = v24;
  unint64_t v75 = v14 / v13;
  if (v24)
  {
    uint64_t v25 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }

  __int128 v94 = *((_OWORD *)a3 + 8);
  uint64_t v95 = a3[18];
  char v96 = *((_BYTE *)a3 + 152);
  while (!sub_10003CE00((uint64_t)&v84))
  {
    sub_10003DAF4((uint64_t)&v88);
    uint64_t v27 = v92;
    uint64_t v28 = v93;
    uint64_t v81 = v92;
    int v82 = v93;
    if (v93)
    {
      uint64_t v29 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      __int128 v83 = v94;
      else {
        unint64_t v31 = v14;
      }
      if (!v31)
      {
        do
          unint64_t v52 = __ldaxr(v29);
        while (__stlxr(v52 - 1, v29));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }

        break;
      }
    }

    else
    {
      __int128 v83 = v94;
      else {
        unint64_t v31 = v14;
      }
      if (!v31) {
        break;
      }
    }

    uint64_t v32 = v99;
    if (v99 >= v100)
    {
      uint64_t v34 = (v99 - v98) >> 4;
      unint64_t v35 = v34 + 1;
      uint64_t v36 = v100 - v98;
      if ((v100 - v98) >> 3 > v35) {
        unint64_t v35 = v36 >> 3;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37) {
        uint64_t v38 = (char *)sub_100061D04((uint64_t)&v100, v37);
      }
      else {
        uint64_t v38 = 0LL;
      }
      uint64_t v39 = &v38[16 * v34];
      *(void *)uint64_t v39 = v27;
      *((void *)v39 + 1) = v31;
      unint64_t v41 = v98;
      uint64_t v40 = v99;
      uint64_t v42 = v39;
      if (v99 != v98)
      {
        do
        {
          *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
          v42 -= 16;
          v40 -= 16;
        }

        while (v40 != v41);
        uint64_t v40 = v98;
      }

      __int128 v33 = v39 + 16;
      __int128 v98 = v42;
      unint64_t v99 = v39 + 16;
      uint64_t v100 = &v38[16 * v37];
      if (v40) {
        operator delete(v40);
      }
    }

    else
    {
      *(void *)unint64_t v99 = v27;
      *((void *)v32 + 1) = v31;
      __int128 v33 = v32 + 16;
    }

    unint64_t v99 = v33;
    unsigned int v43 = v82;
    if (v82)
    {
      unint64_t v44 = (unint64_t *)&v82->__shared_owners_;
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    sub_100064CC8((uint64_t)&v84, (uint64_t)v78);
    uint64_t v46 = v80;
    if (v80)
    {
      unint64_t v47 = (unint64_t *)&v80->__shared_owners_;
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    v14 -= v31;
    uint64_t v49 = v79;
    if (v79)
    {
      char v50 = (unint64_t *)&v79->__shared_owners_;
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }

  int v53 = v93;
  if (v93)
  {
    BOOL v54 = (unint64_t *)&v93->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  uint64_t v56 = v85;
  if (v85)
  {
    unint64_t v57 = (unint64_t *)&v85->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  unint64_t v59 = v98;
  *(_BYTE *)uint64_t v10 = 2;
  *(void *)(v10 + 24) = v59;
  *(void *)(v10 + 3sub_1000296D8(&v5, 2) = v77 / v13;
  *(void *)(v10 + 4crc32(0LL, 0LL, 0) = 0LL;
  *(_DWORD *)(v10 + 4_Block_object_dispose(va, 8) = v75;
  int v60 = sub_10006A110((uint64_t)a1, v10, v76);
  if (v60 == (unint64_t)v75)
  {
    unint64_t v61 = (std::__shared_weak_count *)a3[1];
    unint64_t v19 = v13 * v60;
    uint64_t v84 = *a3;
    __int128 v85 = v61;
    if (v61)
    {
      unint64_t v62 = (unint64_t *)&v61->__shared_owners_;
      do
        unint64_t v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }

    v86[0] = *((_OWORD *)a3 + 1);
    *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a3 + 25);
    __int128 v88 = *(_OWORD *)(a3 + 7);
    __int128 v64 = *(_OWORD *)(a3 + 11);
    __int128 v89 = *(_OWORD *)(a3 + 9);
    uint64_t v87 = a3[6];
    __int128 v90 = v64;
    char v91 = *((_BYTE *)a3 + 104);
    unint64_t v65 = (std::__shared_weak_count *)a3[15];
    uint64_t v92 = a3[14];
    __int128 v93 = v65;
    if (v65)
    {
      uint64_t v66 = (unint64_t *)&v65->__shared_owners_;
      do
        unint64_t v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }

    __int128 v94 = *((_OWORD *)a3 + 8);
    uint64_t v95 = a3[18];
    char v96 = *((_BYTE *)a3 + 152);
    sub_10003CA5C((uint64_t)&v84, v19);
    unint64_t v68 = v93;
    if (v93)
    {
      __int128 v69 = (unint64_t *)&v93->__shared_owners_;
      do
        unint64_t v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }

    unint64_t v71 = v85;
    if (v85)
    {
      unint64_t v72 = (unint64_t *)&v85->__shared_owners_;
      do
        unint64_t v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }

  else if (v60 < 0)
  {
    unint64_t v19 = v60;
  }

  else
  {
    unint64_t v19 = -5LL;
  }

  if (v98)
  {
    unint64_t v99 = v98;
    operator delete(v98);
  }

  return v19;
}

void sub_10006A918( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  unint64_t v45 = *(void **)(v43 - 112);
  if (v45)
  {
    *(void *)(v43 - 104) = v45;
    operator delete(v45);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10006A97C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!v8) {
    return -35LL;
  }
  __int128 __p = 0LL;
  __int128 v93 = 0LL;
  __int128 v94 = 0LL;
  uint64_t v9 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  uint64_t v78 = v8;
  *(_OWORD *)__int128 v85 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  __int128 v86 = *(_OWORD *)(a3 + 9);
  __int128 v87 = *(_OWORD *)(a3 + 11);
  char v88 = *((_BYTE *)a3 + 104);
  uint64_t v16 = a3[14];
  unint64_t v17 = (std::__shared_weak_count *)a3[15];
  if (v17)
  {
    unint64_t v18 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  uint64_t v79 = a2;
  uint64_t v80 = a1;
  unint64_t v21 = a3[18];
  uint64_t v20 = a3 + 18;
  __int128 v89 = *((_OWORD *)v20 - 1);
  unint64_t v90 = v21;
  char v91 = *((_BYTE *)v20 + 8);
  uint64_t v22 = *a4;
  __int128 v23 = (std::__shared_weak_count *)a4[1];
  if (v23)
  {
    uint64_t v24 = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }

  *(_OWORD *)uint64_t v81 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v81[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v26 = a4[6];
  uint64_t v27 = a4[7];
  uint64_t v28 = a4[8];
  __int128 v82 = *(_OWORD *)(a4 + 9);
  __int128 v83 = *(_OWORD *)(a4 + 11);
  char v84 = *((_BYTE *)a4 + 104);
  uint64_t v29 = a4[14];
  unint64_t v30 = (std::__shared_weak_count *)a4[15];
  if (v30)
  {
    unint64_t v31 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }

  unint64_t v33 = 0LL;
  v111[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v111 + 9) = *(_OWORD *)&v85[9];
  __int128 v114 = v86;
  __int128 v115 = v87;
  __int128 v119 = v89;
  v97[0] = *(_OWORD *)v81;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)&v81[9];
  __int128 v102 = v83;
  uint64_t v109 = v9;
  uint64_t v110 = v10;
  uint64_t v112 = v13;
  *(void *)&__int128 v113 = v14;
  *((void *)&v113 + 1) = v15;
  char v116 = v88;
  uint64_t v117 = v16;
  unint64_t v118 = v17;
  unint64_t v120 = v90;
  char v121 = v91;
  uint64_t v95 = v22;
  char v96 = v23;
  uint64_t v98 = v26;
  uint64_t v99 = v27;
  uint64_t v100 = v28;
  char v103 = v84;
  __int128 v101 = v82;
  uint64_t v104 = v29;
  unint64_t v105 = v30;
  __int128 v106 = *((_OWORD *)a4 + 8);
  char v108 = *((_BYTE *)a4 + 152);
  unint64_t v107 = a4[18];
  unint64_t v34 = v107;
  v141[0] = 0;
  v141[528] = 0;
  while (!sub_10003B85C((uint64_t)&v109, (uint64_t)&v95))
  {
    if (v120 >= v34 || v33 == -1LL) {
      break;
    }
    if (sub_1000BE308())
    {
      *(void *)&__int128 v138 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:305:45)]";
      *((void *)&v138 + 1) = 104LL;
      LODWORD(v139) = 2;
      sub_100018E78(v133, &v138);
      sub_10000552C(&v136, (uint64_t)"sg: ", 4LL);
      sub_10011E9EC(&v136, &v109);
      std::ostream::~ostream(&v136, off_100172858);
      sub_100019104((uint64_t)v133);
      std::ios::~ios(&v137);
    }

    v133[0] = 0LL;
    v133[1] = v34;
    char v134 = 2;
    sub_10007B490(&v109, (uint64_t)v133, (uint64_t)&v138);
    uint64_t v36 = v138;
    int64_t v37 = v139;
    if (v93 >= v94)
    {
      uint64_t v39 = (v93 - __p) >> 4;
      unint64_t v40 = v39 + 1;
      uint64_t v41 = v94 - __p;
      if ((v94 - __p) >> 3 > v40) {
        unint64_t v40 = v41 >> 3;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42) {
        uint64_t v43 = (char *)sub_100061D04((uint64_t)&v94, v42);
      }
      else {
        uint64_t v43 = 0LL;
      }
      unint64_t v44 = &v43[16 * v39];
      *(void *)unint64_t v44 = v36;
      *((void *)v44 + 1) = v37;
      unint64_t v45 = v93;
      uint64_t v46 = v44;
      if (v93 != __p)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v45 - 1);
          v46 -= 16;
          v45 -= 16;
        }

        while (v45 != __p);
        unint64_t v45 = __p;
      }

      uint64_t v38 = v44 + 16;
      __int128 __p = v46;
      __int128 v94 = &v43[16 * v42];
      if (v45) {
        operator delete(v45);
      }
    }

    else
    {
      *(void *)__int128 v93 = v138;
      *((void *)v93 + 1) = v37;
      uint64_t v38 = v93 + 16;
    }

    __int128 v93 = v38;
    uint64_t v47 = (int)v139;
    if ((v139 & 0x80000000) != 0) {
      int64_t v48 = (int)v139;
    }
    else {
      int64_t v48 = v139;
    }
    BOOL v49 = v48 >= 0 || (_DWORD)v48 == 0;
    char v50 = v49;
    if (v49)
    {
      uint64_t v51 = v140;
      if (sub_10003DA10((uint64_t)&v109, (uint64_t)&v95, v140, v48))
      {
        v122[0] = v109;
        v122[1] = v110;
        if (v110)
        {
          unint64_t v55 = (unint64_t *)&v110->__shared_owners_;
          do
            unint64_t v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }

        v123[0] = v111[0];
        *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v111 + 9);
        uint64_t v124 = v112;
        __int128 v125 = v113;
        __int128 v126 = v114;
        __int128 v127 = v115;
        char v128 = v116;
        v129[0] = v117;
        v129[1] = v118;
        if (v118)
        {
          unint64_t v57 = (unint64_t *)&v118->__shared_owners_;
          do
            unint64_t v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }

        __int128 v130 = v119;
        unint64_t v131 = v120;
        char v132 = v121;
        sub_10003D9D4((uint64_t)v122, (uint64_t)&v95, v51, v48, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v133);
        sub_100018F60((uint64_t)v141, (uint64_t)v133);
        sub_100018FA4((uint64_t)v133);
        sub_100006224((uint64_t)v129);
        sub_100006224((uint64_t)v122);
        sub_10003BD04((uint64_t)v141, (uint64_t)v133);
        sub_100018FFC((uint64_t)&v109, (uint64_t)v133);
        sub_100006224((uint64_t)v135);
        sub_100006224((uint64_t)v133);
        sub_10003BA04((uint64_t)v141, (uint64_t)v133);
        sub_100018FFC((uint64_t)&v95, (uint64_t)v133);
        sub_100006224((uint64_t)v135);
        sub_100006224((uint64_t)v133);
      }

      sub_10003CA5C((uint64_t)&v109, v48);
      v33 += v48;
    }

    else
    {
      unint64_t v77 = v47;
    }

    unint64_t v52 = (std::__shared_weak_count *)*((void *)&v138 + 1);
    if (!*((void *)&v138 + 1)) {
      goto LABEL_55;
    }
    int v53 = (unint64_t *)(*((void *)&v138 + 1) + 8LL);
    do
      unint64_t v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      if ((v50 & 1) == 0) {
        goto LABEL_70;
      }
    }

    else
    {
LABEL_55:
      if ((v50 & 1) == 0) {
        goto LABEL_70;
      }
    }
  }

  unint64_t v77 = v33;
LABEL_70:
  sub_100019A28((uint64_t)v141);
  unint64_t v59 = v105;
  if (v105)
  {
    int v60 = (unint64_t *)&v105->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  unint64_t v62 = v96;
  if (v96)
  {
    unint64_t v63 = (unint64_t *)&v96->__shared_owners_;
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  unint64_t v65 = v118;
  if (v118)
  {
    uint64_t v66 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  unint64_t v68 = v110;
  if (v110)
  {
    __int128 v69 = (unint64_t *)&v110->__shared_owners_;
    do
      unint64_t v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  unint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 24LL))(v80);
  unint64_t v72 = *v20 / v71;
  *(_BYTE *)uint64_t v78 = 4;
  *(void *)(v78 + 24) = __p;
  *(void *)(v78 + 3sub_1000296D8(&v5, 2) = v72;
  *(void *)(v78 + 4crc32(0LL, 0LL, 0) = 0LL;
  *(_DWORD *)(v78 + 4_Block_object_dispose(va, 8) = v77 / v71;
  int v73 = sub_10006A110(v80, v78, v79);
  uint64_t v74 = -5LL;
  if (v73 < 0) {
    uint64_t v74 = v73;
  }
  else {
    uint64_t v75 = v74;
  }
  if (__p) {
    operator delete(__p);
  }
  return v75;
}

void sub_10006B248( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10006B31C(uint64_t a1, uint64_t a2, int a3)
{
  if (!v6) {
    return 4294967261LL;
  }
  *(_BYTE *)uint64_t v6 = 5;
  *(_DWORD *)(v6 + 24) = a3 + 1;
  return sub_10006A110(a1, v6, a2);
}

uint64_t sub_10006B384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v4 = a4;
  uint64_t v7 = a1 + 56;
  for (uint64_t i = (uint64_t *)(a3 + 8); ; i += 2)
  {
    sub_10010F474(v7);
    if (!v9) {
      break;
    }
    uint64_t v10 = *(i - 1);
    uint64_t v11 = *i;
    *(_BYTE *)uint64_t v9 = 6;
    *(void *)(v9 + 24) = v10;
    *(_DWORD *)(v9 + 3sub_1000296D8(&v5, 2) = v11;
    uint64_t result = sub_10006A110(a1, v9, a2);
    if ((_DWORD)result) {
      return result;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return 4294967261LL;
}

void sub_10006B418(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_10010F4F8(a1 + 56, (uint64_t)&v4);
  if (v6)
  {
    uint64_t v2 = v4;
    int v3 = v5;
    do
    {
      *(_DWORD *)uint64_t v2 = v3;
      sub_100101A3C((dispatch_semaphore_t *)(v2 + 8));
      sub_10010F4F8(v1, (uint64_t)&v4);
      uint64_t v2 = v4;
      int v3 = v5;
    }

    while (v6);
  }

unint64_t sub_10006B47C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v96 = 0u;
  uint64_t v4 = *a3;
  int v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  *(_OWORD *)__int128 v89 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v89[9] = *(_OWORD *)((char *)a3 + 25);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a3[8];
  __int128 v90 = *(_OWORD *)(a3 + 9);
  __int128 v91 = *(_OWORD *)(a3 + 11);
  char v92 = *((_BYTE *)a3 + 104);
  uint64_t v11 = a3[14];
  unint64_t v12 = (std::__shared_weak_count *)a3[15];
  if (v12)
  {
    uint64_t v13 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  unint64_t v16 = a3[18];
  uint64_t v15 = a3 + 18;
  __int128 v93 = *((_OWORD *)v15 - 1);
  unint64_t v94 = v16;
  __int128 v82 = (unint64_t *)v15;
  char v95 = *((_BYTE *)v15 + 8);
  uint64_t v17 = *a4;
  unint64_t v18 = (std::__shared_weak_count *)a4[1];
  if (v18)
  {
    unint64_t v19 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  *(_OWORD *)__int128 v85 = *((_OWORD *)a4 + 1);
  *(_OWORD *)&v85[9] = *(_OWORD *)((char *)a4 + 25);
  uint64_t v21 = a4[6];
  uint64_t v22 = a4[7];
  uint64_t v23 = a4[8];
  __int128 v86 = *(_OWORD *)(a4 + 9);
  __int128 v87 = *(_OWORD *)(a4 + 11);
  char v88 = *((_BYTE *)a4 + 104);
  uint64_t v25 = a4[14];
  uint64_t v24 = (std::__shared_weak_count *)a4[15];
  if (v24)
  {
    uint64_t v26 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  unint64_t v28 = 0LL;
  uint64_t v117 = v4;
  unint64_t v118 = v5;
  v119[0] = *(_OWORD *)v89;
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)&v89[9];
  uint64_t v120 = v8;
  *(void *)&__int128 v121 = v9;
  *((void *)&v121 + 1) = v10;
  __int128 v122 = v90;
  __int128 v123 = v91;
  char v124 = v92;
  uint64_t v125 = v11;
  __int128 v126 = v12;
  __int128 v127 = v93;
  unint64_t v128 = v94;
  char v129 = v95;
  uint64_t v103 = v17;
  uint64_t v104 = v18;
  v105[0] = *(_OWORD *)v85;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v85[9];
  uint64_t v106 = v21;
  uint64_t v107 = v22;
  uint64_t v108 = v23;
  char v111 = v88;
  __int128 v109 = v86;
  __int128 v110 = v87;
  uint64_t v112 = v25;
  __int128 v113 = v24;
  __int128 v114 = *((_OWORD *)a4 + 8);
  char v116 = *((_BYTE *)a4 + 152);
  unint64_t v115 = a4[18];
  unint64_t v29 = v115;
  LOBYTE(v149[0]) = 0;
  char v150 = 0;
  while (!sub_10003B85C((uint64_t)&v117, (uint64_t)&v103))
  {
    if (v128 >= v29 || v28 == -1LL) {
      break;
    }
    if (sub_1000BE308())
    {
      *(void *)&__int128 v146 = "details::for_each_sg_in_vec_internal(Fn &&, sg_vec_ref::iterator, sg_vec::iterator, size_t, BOOL) [Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/DiskImages2/app/disk_images/formats/plugin_async_di.cpp:385:45)]";
      *((void *)&v146 + 1) = 104LL;
      LODWORD(v147) = 2;
      sub_100018E78(v141, &v146);
      sub_10000552C(&v144, (uint64_t)"sg: ", 4LL);
      sub_10011E9EC(&v144, &v117);
      std::ostream::~ostream(&v144, off_100172858);
      sub_100019104((uint64_t)v141);
      std::ios::~ios(&v145);
    }

    v141[0] = 0LL;
    v141[1] = v29;
    char v142 = 2;
    sub_10007B490(&v117, (uint64_t)v141, (uint64_t)&v146);
    sub_100071010((char **)v102, &v146);
    uint64_t v31 = v146;
    int64_t v32 = v147;
    unint64_t v33 = v101[2];
    if (v101[2] >= v101[3])
    {
      int64_t v35 = ((char *)v101[2] - (char *)v101[1]) >> 4;
      unint64_t v36 = v35 + 1;
      int64_t v37 = (char *)v101[3] - (char *)v101[1];
      else {
        unint64_t v38 = v36;
      }
      if (v38) {
        uint64_t v39 = (char *)sub_100061D04((uint64_t)&v101[3], v38);
      }
      else {
        uint64_t v39 = 0LL;
      }
      unint64_t v40 = &v39[16 * v35];
      *(void *)unint64_t v40 = v31;
      *((void *)v40 + 1) = v32;
      uint64_t v41 = (char *)v101[2];
      unint64_t v42 = (char *)v101[1];
      uint64_t v43 = v40;
      if (v101[2] != v101[1])
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
          v43 -= 16;
          v41 -= 16;
        }

        while (v41 != v42);
        uint64_t v41 = (char *)v101[1];
      }

      unint64_t v34 = v40 + 16;
      v101[1] = v43;
      v101[2] = v40 + 16;
      v101[3] = &v39[16 * v38];
      if (v41) {
        operator delete(v41);
      }
    }

    else
    {
      *(void *)v101[2] = v146;
      v33[1] = v32;
      unint64_t v34 = v33 + 2;
    }

    v101[2] = v34;
    uint64_t v44 = (int)v147;
    if ((v147 & 0x80000000) != 0) {
      int64_t v45 = (int)v147;
    }
    else {
      int64_t v45 = v147;
    }
    BOOL v46 = v45 >= 0 || (_DWORD)v45 == 0;
    char v47 = v46;
    if (v46)
    {
      uint64_t v48 = v148;
      if (sub_10003DA10((uint64_t)&v117, (uint64_t)&v103, v148, v45))
      {
        v130[0] = v117;
        v130[1] = v118;
        if (v118)
        {
          unint64_t v52 = (unint64_t *)&v118->__shared_owners_;
          do
            unint64_t v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }

        v131[0] = v119[0];
        *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)((char *)v119 + 9);
        uint64_t v132 = v120;
        __int128 v133 = v121;
        __int128 v134 = v122;
        __int128 v135 = v123;
        char v136 = v124;
        v137[0] = v125;
        v137[1] = v126;
        if (v126)
        {
          unint64_t v54 = (unint64_t *)&v126->__shared_owners_;
          do
            unint64_t v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }

        __int128 v138 = v127;
        unint64_t v139 = v128;
        char v140 = v129;
        sub_10003D9D4((uint64_t)v130, (uint64_t)&v103, v48, v45, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v141);
        sub_100018F60((uint64_t)v149, (uint64_t)v141);
        sub_100018FA4((uint64_t)v141);
        sub_100006224((uint64_t)v137);
        sub_100006224((uint64_t)v130);
        sub_10003BD04((uint64_t)v149, (uint64_t)v141);
        sub_100018FFC((uint64_t)&v117, (uint64_t)v141);
        sub_100006224((uint64_t)v143);
        sub_100006224((uint64_t)v141);
        sub_10003BA04((uint64_t)v149, (uint64_t)v141);
        sub_100018FFC((uint64_t)&v103, (uint64_t)v141);
        sub_100006224((uint64_t)v143);
        sub_100006224((uint64_t)v141);
      }

      sub_10003CA5C((uint64_t)&v117, v45);
      v28 += v45;
    }

    else
    {
      unint64_t v81 = v44;
    }

    BOOL v49 = (std::__shared_weak_count *)*((void *)&v146 + 1);
    if (*((void *)&v146 + 1))
    {
      char v50 = (unint64_t *)(*((void *)&v146 + 1) + 8LL);
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    if ((v47 & 1) == 0) {
      goto LABEL_68;
    }
  }

  unint64_t v81 = v28;
LABEL_68:
  sub_100019A28((uint64_t)v149);
  unint64_t v56 = v113;
  if (v113)
  {
    unint64_t v57 = (unint64_t *)&v113->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  unint64_t v59 = v104;
  if (v104)
  {
    int v60 = (unint64_t *)&v104->__shared_owners_;
    do
      unint64_t v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }

  unint64_t v62 = v126;
  if (v126)
  {
    unint64_t v63 = (unint64_t *)&v126->__shared_owners_;
    do
      unint64_t v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }

  unint64_t v65 = v118;
  if (v118)
  {
    uint64_t v66 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  unint64_t v68 = *v82;
  unint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  unint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  LOBYTE(v96) = 2;
  *((void **)&v97 + 1) = v101[1];
  __int128 v98 = v68 / v69;
  LODWORD(v99) = v81 / v70;
  unint64_t v71 = a2[3];
  if (v71 >= a2[4])
  {
    uint64_t v76 = sub_10006F9E8(a2 + 2, (uint64_t)&v96);
    unint64_t v77 = *(std::__shared_weak_count **)&v102[32];
    a2[3] = v76;
    if (v77)
    {
      uint64_t v78 = (unint64_t *)&v77->__shared_owners_;
      do
        unint64_t v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }

  else
  {
    __int128 v72 = v97;
    *(_OWORD *)unint64_t v71 = v96;
    *(_OWORD *)(v71 + 16) = v72;
    __int128 v73 = v98;
    __int128 v74 = v100;
    uint64_t v75 = v101[0];
    *(_OWORD *)(v71 + 4_Block_object_dispose(va, 8) = v99;
    *(_OWORD *)(v71 + sub_100006224(v1 + 64) = v74;
    *(_OWORD *)(v71 + 3sub_1000296D8(&v5, 2) = v73;
    *(void *)(v71 + 8crc32(0LL, 0LL, 0) = v75;
    *(void *)(v71 + 8_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v71 + 96) = 0LL;
    *(void *)(v71 + 104) = 0LL;
    *(_OWORD *)(v71 + 8_Block_object_dispose(va, 8) = *(_OWORD *)&v101[1];
    v101[1] = 0LL;
    v101[2] = 0LL;
    *(void **)(v71 + 104) = v101[3];
    *(void *)(v71 + sub_100006224(v1 + 112) = 0LL;
    v101[3] = 0LL;
    *(void *)(v71 + 12crc32(0LL, 0LL, 0) = 0LL;
    *(void *)(v71 + 12_Block_object_dispose(va, 8) = 0LL;
    *(_OWORD *)(v71 + sub_100006224(v1 + 112) = *(_OWORD *)v102;
    *(void *)(v71 + 12_Block_object_dispose(va, 8) = *(void *)&v102[16];
    memset(v102, 0, 24);
    *(_OWORD *)(v71 + 136) = *(_OWORD *)&v102[24];
    *(void *)&v102[32] = 0LL;
    *(void *)&v102[24] = 0LL;
    a2[3] = v71 + 152;
  }

  v149[0] = (void **)v102;
  sub_10006806C(v149);
  if (v101[1])
  {
    v101[2] = v101[1];
    operator delete(v101[1]);
  }

  return v81;
}

void sub_10006BE50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_10006BF18(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 112);
  sub_10006806C(&v4);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  return a1;
}

  ;
}

uint64_t sub_10006BF70(uint64_t a1)
{
  *(void *)a1 = off_10017D1F0;
  if (*(_BYTE *)(a1 + 256)) {
    sub_10010F470(a1 + 56);
  }
  sub_100006224(a1 + 16);
  return a1;
}

void sub_10006BFC4(void **a1)
{
  *a1 = off_10017D1F0;
  if (*((_BYTE *)a1 + 256)) {
    sub_10010F470(a1 + 7);
  }
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_10006C018(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8LL))();
}

uint64_t sub_10006C024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16LL))();
}

uint64_t sub_10006C030(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 24LL))();
}

uint64_t sub_10006C03C()
{
  return 4294967218LL;
}

double sub_10006C044@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(uint64_t (**)(void))(v4 + 32);
  if (v5)
  {
    int v6 = v5();
    uint64_t v4 = *(void *)(a1 + 16);
  }

  else
  {
    int v6 = 0;
  }

  unint64_t v7 = *(uint64_t (**)(void))(v4 + 40);
  if (v7 && (unsigned int v8 = v7()) != 0)
  {
    uint64_t v10 = v6 != 0;
    *a2 = v8;
    a2[1] = v10;
    a2[2] = v8 << v10;
    a2[3] = 0LL;
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }

  return result;
}

uint64_t sub_10006C0C0()
{
  return 1LL;
}

BOOL sub_10006C0C8(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 72LL))(v4);
  if (v4[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v4[1] == 0LL;
  }
  return !v1 || v4[2] != 0LL || v4[3] != 0LL;
}

void *sub_10006C11C(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  sub_10006FD04((uint64_t)v2, a1);
  return v2;
}

void sub_10006C150(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C164(uint64_t a1)
{
  if (qword_1001A47F8 != -1) {
    dispatch_once(&qword_1001A47F8, &stru_10017D300);
  }
  if (off_1001A47F0) {
    return off_1001A47F0(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10006C1C8(uint64_t a1)
{
  return a1;
}

void sub_10006C1F0(id a1)
{
  BOOL v1 = dlopen("/usr/lib/libAmber.dylib", 5);
  if (v1)
  {
    off_1001A47F0 = (uint64_t (*)(void))dlsym(v1, "AmberDiskImagePluginCreate");
    if (off_1001A47F0) {
      return;
    }
    *(void *)&__int128 v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18LL;
    int v3 = 16;
    sub_10006C40C(v4, &v2);
    sub_10000552C(&v5, (uint64_t)"Cannot find AmberDiskImagePluginCreate in libAmber", 50LL);
    std::ostream::~ostream(&v5, off_10017D620);
    sub_10006CB98((uint64_t)v4);
  }

  else
  {
    *(void *)&__int128 v2 = "*amberPluginCreate(uint64_t)_block_invoke";
    *((void *)&v2 + 1) = 18LL;
    int v3 = 16;
    sub_10006C324(v4, &v2);
    sub_10000552C(&v5, (uint64_t)"Cannot load libAmber", 20LL);
    std::ostream::~ostream(&v5, off_10017D400);
    sub_10006C570((uint64_t)v4);
  }

  std::ios::~ios(&v6);
}

void sub_10006C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10006C324(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10006C4F4((uint64_t)a1, a2);
  *a1 = off_10017D338;
  a1[45] = &off_10017D438;
  a1[46] = &off_10017D460;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017D338;
  a1[45] = off_10017D3C0;
  a1[46] = off_10017D3E8;
  return a1;
}

void sub_10006C3A8(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C3CC(uint64_t a1)
{
  return a1;
}

void *sub_10006C40C(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10006CB1C((uint64_t)a1, a2);
  *a1 = off_10017D558;
  a1[45] = &off_10017D658;
  a1[46] = &off_10017D680;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017D558;
  a1[45] = off_10017D5E0;
  a1[46] = off_10017D608;
  return a1;
}

void sub_10006C490(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C4B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006C4F4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017D4D0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10006C55C(_Unwind_Exception *a1)
{
}

uint64_t sub_10006C570(uint64_t a1)
{
  *(void *)a1 = off_10017D4D0;
  sub_10006C7E8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10006C60C(char *a1)
{
}

uint64_t sub_10006C650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006C684(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10006C6D0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D400);
  sub_10006C570(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10006C708(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017D400);
  sub_10006C570((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10006C748(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017D400);
  sub_10006C570(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006C788(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017D400);
  sub_10006C570((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10006C7D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006C570(a1);
  operator delete(v1);
}

uint64_t sub_10006C7E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006C938((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006C910( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006C938(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 52LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 52LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10006CB1C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017D6F0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10006CB84(_Unwind_Exception *a1)
{
}

uint64_t sub_10006CB98(uint64_t a1)
{
  *(void *)a1 = off_10017D6F0;
  sub_10006CE10(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10006CC34(char *a1)
{
}

uint64_t sub_10006CC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006CCAC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_10006CCF8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D620);
  sub_10006CB98(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_10006CD30(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017D620);
  sub_10006CB98((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_10006CD70(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017D620);
  sub_10006CB98(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006CDB0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017D620);
  sub_10006CB98((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_10006CDFC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006CB98(a1);
  operator delete(v1);
}

uint64_t sub_10006CE10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006CF60((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006CF38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006CF60(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 58LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 58LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  double result = __error();
  *double result = v5;
  return result;
}

uint64_t sub_10006D144(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_10006D1C4((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40LL;
    }

    while (v6);
  }

  return a1;
}

void sub_10006D1AC(_Unwind_Exception *a1)
{
}

uint64_t *sub_10006D1C4(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_10006D244(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_10006D3C8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10000CC04(a1, (uint64_t)v10, v6, v8);
    return v8;
  }

  return result;
}

void **sub_10006D244(void *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  uint64_t v9 = (void **)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (sub_10006D4FC(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      unint64_t v12 = (void *)a2;
    }

    else
    {
      uint64_t v11 = *(void **)a2;
      if (*(void *)a2)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = (void *)v11[1];
        }

        while (v11);
      }

      else
      {
        unint64_t v16 = (void *)a2;
        do
        {
          unint64_t v12 = (void *)v16[2];
          BOOL v17 = *v12 == (void)v16;
          unint64_t v16 = v12;
        }

        while (v17);
      }

      if ((sub_10006D4FC(v12 + 4, a5) & 0x80) == 0) {
        return (void **)sub_10006D46C((uint64_t)a1, a3, a5);
      }
    }

    if (*(void *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }

    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }

  if ((sub_10006D4FC((void *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 8);
    if (v13)
    {
      os_log_type_t v14 = *(void ***)(a2 + 8);
      do
      {
        uint64_t v15 = v14;
        os_log_type_t v14 = (void **)*v14;
      }

      while (v14);
    }

    else
    {
      unint64_t v19 = (void **)a2;
      do
      {
        uint64_t v15 = (void **)v19[2];
        BOOL v17 = *v15 == v19;
        unint64_t v19 = v15;
      }

      while (!v17);
    }

    if (v15 == v9) {
      goto LABEL_27;
    }
    if ((sub_10006D4FC(a5, v15 + 4) & 0x80) != 0)
    {
      uint64_t v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }

      else
      {
        *a3 = (void **)a2;
      }

      return (void **)a4;
    }

    return (void **)sub_10006D46C((uint64_t)a1, a3, a5);
  }

  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

__n128 sub_10006D3C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10000AD88(v7, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }

  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10006D450(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10006D590(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_10006D46C(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if ((sub_10006D4FC(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

uint64_t sub_10006D4FC(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0LL)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }

  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_10006D534(a1, v2, v5, v6);
}

uint64_t sub_10006D534(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1LL;
    }
  }

  else
  {
    if (a2 == a4) {
      return 0LL;
    }
    if (a2 >= a4) {
      return 1LL;
    }
  }

  return 255LL;
}

void sub_10006D590(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10006D5DC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10006D5DC(a1, *(void *)a2);
    sub_10006D5DC(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

void **sub_10006D62C(uint64_t a1, void **a2)
{
  size_t v2 = (void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_10006D4FC(v3 + 4, a2);
    if (v6 >= 0) {
      size_t v7 = v3;
    }
    else {
      size_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    size_t v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2 || (sub_10006D4FC(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_10006D6A8(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  char v6 = (uint64_t **)sub_10006D46C((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_10006D73C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10000CC04(a1, v9, v6, v8);
    return v8;
  }

  return result;
}

_BYTE *sub_10006D73C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_10000AD88(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10006D7C4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10006D590(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D7E0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017D840);
  sub_10006D9A4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006D818(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017D840);
  sub_10006D9A4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006D858(char *a1)
{
}

uint64_t sub_10006D89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006D8D0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006D91C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017D840);
  sub_10006D9A4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006D95C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017D840);
  sub_10006D9A4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006D9A4(uint64_t a1)
{
  *(void *)a1 = off_10017D910;
  sub_10006DA40(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006DA40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006DBA8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006DB68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006DB94(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006D9A4(a1);
  operator delete(v1);
}

int *sub_10006DBA8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 92LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 92LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006DD8C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DA60);
  sub_10006DF50(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006DDC4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017DA60);
  sub_10006DF50(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006DE04(char *a1)
{
}

uint64_t sub_10006DE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006DE7C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006DEC8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017DA60);
  sub_10006DF50((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006DF08(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017DA60);
  sub_10006DF50((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006DF50(uint64_t a1)
{
  *(void *)a1 = off_10017DB30;
  sub_10006DFEC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006DFEC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006E154((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006E114( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006E140(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006DF50(a1);
  operator delete(v1);
}

int *sub_10006E154(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 152LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 152LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006E338(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DC80);
  sub_10006E4FC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006E370(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017DC80);
  sub_10006E4FC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006E3B0(char *a1)
{
}

uint64_t sub_10006E3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006E428(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006E474(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017DC80);
  sub_10006E4FC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006E4B4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017DC80);
  sub_10006E4FC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006E4FC(uint64_t a1)
{
  *(void *)a1 = off_10017DD50;
  sub_10006E598(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006E598(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006E700((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006E6C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006E6EC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006E4FC(a1);
  operator delete(v1);
}

int *sub_10006E700(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 157LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 157LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006E8E4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017DEA0);
  sub_10006EAA8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006E91C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017DEA0);
  sub_10006EAA8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006E95C(char *a1)
{
}

uint64_t sub_10006E9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006E9D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006EA20(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017DEA0);
  sub_10006EAA8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006EA60(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017DEA0);
  sub_10006EAA8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006EAA8(uint64_t a1)
{
  *(void *)a1 = off_10017DF70;
  sub_10006EB44(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006EB44(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006ECAC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006EC6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006EC98(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006EAA8(a1);
  operator delete(v1);
}

int *sub_10006ECAC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 163LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 163LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006EE90(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E0C0);
  sub_10006F054(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006EEC8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017E0C0);
  sub_10006F054(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006EF08(char *a1)
{
}

uint64_t sub_10006EF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006EF80(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006EFCC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017E0C0);
  sub_10006F054((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006F00C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017E0C0);
  sub_10006F054((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006F054(uint64_t a1)
{
  *(void *)a1 = off_10017E190;
  sub_10006F0F0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006F0F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006F258((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006F218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F244(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006F054(a1);
  operator delete(v1);
}

int *sub_10006F258(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 171LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 171LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006F43C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E2E0);
  sub_10006F600(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10006F474(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017E2E0);
  sub_10006F600(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10006F4B4(char *a1)
{
}

uint64_t sub_10006F4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10006F52C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10006F578(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017E2E0);
  sub_10006F600((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10006F5B8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017E2E0);
  sub_10006F600((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10006F600(uint64_t a1)
{
  *(void *)a1 = off_10017E3B0;
  sub_10006F69C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10006F69C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10006F804((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10006F7C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F7F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10006F600(a1);
  operator delete(v1);
}

int *sub_10006F804(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 243LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 243LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  __n128 result = __error();
  *__n128 result = v5;
  return result;
}

uint64_t sub_10006F9E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286LL) {
    sub_100045090();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943LL) {
    unint64_t v9 = 0x1AF286BCA1AF286LL;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  uint64_t v10 = (char *)sub_10006FBC8(v7, v9);
  uint64_t v11 = &v10[152 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[152 * v12];
  __int128 v13 = *(_OWORD *)(a2 + 32);
  __int128 v14 = *(_OWORD *)(a2 + 48);
  __int128 v15 = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 1crc32(0LL, 0LL, 0) = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 4) = v15;
  *((_OWORD *)v11 + sub_1000296D8(&v5, 2) = v13;
  __int128 v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v16;
  *((void *)v11 + 1sub_1000296D8(&v5, 2) = 0LL;
  *((void *)v11 + 13) = 0LL;
  *((void *)v11 + 11) = 0LL;
  *(_OWORD *)(v11 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 88);
  *((void *)v11 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *((void *)v11 + 15) = 0LL;
  *((void *)v11 + 16) = 0LL;
  *((void *)v11 + 14) = 0LL;
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((void *)v11 + 16) = *(void *)(a2 + 128);
  *(void *)(a2 + sub_100006224(v1 + 112) = 0LL;
  *(void *)(a2 + 12crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  void v19[2] = v11 + 152;
  sub_10006FB54(a1, v19);
  uint64_t v17 = a1[1];
  sub_10006FCB8((uint64_t)v19);
  return v17;
}

void sub_10006FB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10006FB54(uint64_t *a1, void *a2)
{
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *sub_10006FBC8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287LL) {
    sub_100044D7C();
  }
  return operator new(152 * a2);
}

__n128 sub_10006FC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    unint64_t v8 = (__n128 *)(a7 - 64);
    do
    {
      __n128 v9 = *(__n128 *)(a3 - 152);
      *(__n128 *)((char *)v8 - 7sub_1000296D8(&v5, 2) = *(__n128 *)(a3 - 136);
      *(__n128 *)((char *)v8 - 8_Block_object_dispose(va, 8) = v9;
      __n128 v10 = *(__n128 *)(a3 - 120);
      __n128 v11 = *(__n128 *)(a3 - 104);
      __n128 v12 = *(__n128 *)(a3 - 88);
      v8[-1].n128_u64[1] = *(void *)(a3 - 72);
      v8->n128_u64[0] = 0LL;
      *(__n128 *)((char *)v8 - 24) = v12;
      *(__n128 *)((char *)v8 - 4crc32(0LL, 0LL, 0) = v11;
      *(__n128 *)((char *)v8 - 56) = v10;
      v8->n128_u64[1] = 0LL;
      v8[1].n128_u64[0] = 0LL;
      __n128 *v8 = *(__n128 *)(a3 - 64);
      v8[1].n128_u64[0] = *(void *)(a3 - 48);
      *(void *)(a3 - sub_100006224(v1 + 64) = 0LL;
      *(void *)(a3 - 56) = 0LL;
      *(void *)(a3 - 4_Block_object_dispose(va, 8) = 0LL;
      v8[1].n128_u64[1] = 0LL;
      v8[2].n128_u64[0] = 0LL;
      v8[2].n128_u64[1] = 0LL;
      *(__n128 *)((char *)v8 + 24) = *(__n128 *)(a3 - 40);
      v8[2].n128_u64[1] = *(void *)(a3 - 24);
      *(void *)(a3 - 4crc32(0LL, 0LL, 0) = 0LL;
      *(void *)(a3 - 3sub_1000296D8(&v5, 2) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      __n128 result = *(__n128 *)(a3 - 16);
      v8[3] = result;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - _Block_object_dispose(va, 8) = 0LL;
      unint64_t v8 = (__n128 *)((char *)v8 - 152);
      v7 -= 152LL;
      a3 -= 152LL;
    }

    while (a3 != a5);
  }

  return result;
}

uint64_t sub_10006FCB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    sub_100068020(i - 152);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10006FD04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10017E430;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  sub_100101A08((dispatch_semaphore_t *)(a1 + 24), 0LL);
  sub_100069FF4(a2);
  return a1;
}

void sub_10006FD54(_Unwind_Exception *a1)
{
}

uint64_t sub_10006FD68(uint64_t a1)
{
  *(void *)a1 = off_10017E430;
  sub_100101848((dispatch_object_s **)(a1 + 24));
  return a1;
}

void sub_10006FD98(dispatch_object_s **a1)
{
  *a1 = (dispatch_object_s *)off_10017E430;
  sub_100101848(a1 + 3);
  operator delete(a1);
}

void *sub_10006FDC8(void ***a1)
{
  return (*(void *(**)(void *__return_ptr))(***a1 + 16LL))(**a1);
}

uint64_t sub_10006FDDC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017D910;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10006FE44(_Unwind_Exception *a1)
{
}

uint64_t sub_10006FE58(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017DB30;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10006FEC0(_Unwind_Exception *a1)
{
}

uint64_t sub_10006FED4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017DD50;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10006FF3C(_Unwind_Exception *a1)
{
}

uint64_t sub_10006FF50(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017DF70;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10006FFB8(_Unwind_Exception *a1)
{
}

uint64_t *sub_10006FFCC(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_10006D46C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_100070074((uint64_t)a1, a4, (uint64_t)v10);
    sub_10000CC04(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_100070104((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_100070074@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_10000AD88(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }

  v6[7] = 0LL;
  v6[8] = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1000700EC(_Unwind_Exception *a1)
{
}

void sub_100070104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100070148((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_100070148(uint64_t a1)
{
}

uint64_t sub_100070184(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v9 = "PluginsManager::register_plugin(const string &, di_plugin_t *)::(anonymous class)::operator()(di_plugin_t *) const";
  *((void *)&v9 + 1) = 93LL;
  int v10 = 0;
  sub_10007035C(v11, &v9);
  sub_10000552C(&v12, (uint64_t)"Unregistering plugin ", 21LL);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  sub_10000552C(&v12, v5, v6);
  std::ostream::~ostream(&v12, off_10017E5B8);
  sub_1000704C0((uint64_t)v11);
  uint64_t result = std::ios::~ios(&v13);
  unint64_t v8 = *(uint64_t (**)(uint64_t))(a2 + 32);
  if (v8) {
    return v8(a2);
  }
  return result;
}

void sub_100070244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100070258(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017E488;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100070294(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017E488;
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete((void *)this[1].__shared_owners_);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v2);
}

void sub_1000702D4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_100070184(a1 + 32, *(void *)(a1 + 24));
}

uint64_t sub_10007031C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }

  else
  {
    return 0LL;
  }

void *sub_10007035C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100070444((uint64_t)a1, a2);
  *a1 = off_10017E4F0;
  a1[45] = &off_10017E5F0;
  a1[46] = &off_10017E618;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017E4F0;
  a1[45] = off_10017E578;
  a1[46] = off_10017E5A0;
  return a1;
}

void sub_1000703E0(_Unwind_Exception *a1)
{
}

uint64_t sub_100070404(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070444(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017E688;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000704AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000704C0(uint64_t a1)
{
  *(void *)a1 = off_10017E688;
  sub_100070738(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_10007055C(char *a1)
{
}

uint64_t sub_1000705A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000705D4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100070620(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017E5B8);
  sub_1000704C0(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100070658(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017E5B8);
  sub_1000704C0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100070698(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017E5B8);
  sub_1000704C0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000706D8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017E5B8);
  sub_1000704C0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100070724(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000704C0(a1);
  operator delete(v1);
}

uint64_t sub_100070738(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100070888((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100070860( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100070888(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 167LL;
    __int16 v25 = 2082;
    uint64_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        __int128 v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 167LL;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100070A6C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017E190;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100070AD4(_Unwind_Exception *a1)
{
}

void *sub_100070AF0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_10017E708;
  return result;
}

void sub_100070B14(uint64_t a1, void *a2)
{
  *a2 = &off_10017E708;
}

uint64_t sub_100070B2C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v3 = *(uint64_t (**)(void))(*a2 + 72);
  if (v3) {
    return v3();
  }
  return result;
}

uint64_t sub_100070B40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100070B7C()
{
}

uint64_t *sub_100070B88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  char v6 = operator new(0x40uLL);
  sub_100070CF8((uint64_t)v10, a3);
  sub_100070D5C(v6, a2, (uint64_t)v10);
  a1[1] = (uint64_t)v6;
  uint64_t v7 = v11;
  if (v11 == v10)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v10;
    goto LABEL_5;
  }

  if (v11)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  return a1;
}

void sub_100070C54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __int128 v16 = a13;
  if (a13 == &a10)
  {
    uint64_t v17 = 4LL;
    __int128 v16 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_7;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_7:
  operator delete(v14);
  __cxa_begin_catch(exception_object);
  uint64_t v18 = *(void *)(v13 + 24);
  if (!v18) {
    sub_100014B10();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 48LL))(v18, &a9);
  __cxa_rethrow();
}

uint64_t sub_100070CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

void *sub_100070D5C(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017E798;
  sub_100070CF8((uint64_t)v8, a3);
  a1[3] = a2;
  sub_100070CF8((uint64_t)(a1 + 4), (uint64_t)v8);
  uint64_t v4 = v9;
  if (v9 == v8)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v5 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_100070E18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017E798;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    uint64_t v4 = 4LL;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }

  if (shared_owners)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100070E74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10017E798;
  p_shared_owners = &this[1].__shared_owners_;
  shared_owners = (uint64_t *)this[2].__shared_owners_;
  if (shared_owners == p_shared_owners)
  {
    uint64_t v4 = 4LL;
    shared_owners = p_shared_owners;
    goto LABEL_5;
  }

  if (shared_owners)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*shared_owners + 8 * v4))();
  }

  std::__shared_weak_count::~__shared_weak_count(this);
  operator delete(v5);
}

void *sub_100070ED4(void *a1)
{
  uint64_t v5 = a1[3];
  uint64_t v2 = a1[7];
  if (!v2) {
    sub_100014B10();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48LL))(v2, &v5);
  uint64_t result = (void *)a1[7];
  if (result == a1 + 4)
  {
    uint64_t v4 = 4LL;
    uint64_t result = a1 + 4;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t sub_100070F54(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

uint64_t sub_100070F94(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017E3B0;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100070FFC(_Unwind_Exception *a1)
{
}

char *sub_100071010(char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v32 = v4;
    __int128 v16 = (char *)sub_100061D04(v4, v15);
    uint64_t v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)uint64_t v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      int v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    __int16 v23 = *a1;
    uint64_t v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      uint64_t v24 = &v16[16 * v12];
    }

    else
    {
      uint64_t v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)uint64_t v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    uint64_t v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v30 = v26;
    unint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    uint64_t v31 = v27;
    uint64_t v29 = v26.i64[0];
    sub_100067EC4((uint64_t)&v29);
  }

  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    uint64_t v11 = v7 + 16;
  }

  a1[1] = v11;
  return v11 - 16;
}

uint64_t sub_100071154(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4, _OWORD *a5)
{
  int v9 = sub_100071290(a2, a3);
  sub_100071498((void *)a1, v9, (a3 & 3) != 0);
  *(void *)a1 = off_10017E858;
  *(void *)(a1 + 24) = off_10017E930;
  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = off_10017E958;
  *(_OWORD *)(a1 + 8crc32(0LL, 0LL, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + sub_100006224(v1 + 112) = 0u;
  *(_OWORD *)(a1 + 136) = *a5;
  if ((a3 & 0x200) != 0)
  {
    sub_100071508(a1, a4);
    sub_1000715FC(a1);
    BOOL v10 = 1;
  }

  else if (*(_BYTE *)(a1 + 36))
  {
    BOOL v10 = faccessat(*(_DWORD *)(a1 + 32), "mapped", 0, 0) != 0;
  }

  else
  {
    BOOL v10 = 0;
  }

  if (!*(void *)(a1 + 112)) {
    sub_100071870(a1);
  }
  if (v10) {
    sub_100071B50(a1, (a3 & 0x200) != 0);
  }
  return a1;
}

void sub_100071254(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 112);
  *(void *)(v1 + sub_100006224(v1 + 112) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100006224(v1 + 96);
  sub_100006224(v2);
  sub_100071DCC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100071290(uint64_t a1, __int16 a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x200) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "Failed creating sparsebundle folder";
LABEL_16:
    int v9 = (void *)sub_100004494((uint64_t)exception, (uint64_t)v8, v7);
  }

  if ((a2 & 3) == 0 || geteuid()) {
    return sub_100101F94(v2, 0LL);
  }
  else {
    uint64_t v3 = *(const char **)v2;
  }
  if (stat(v3, &v11))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unsigned int v7 = *__error();
    uint64_t v8 = "stat failed";
    goto LABEL_16;
  }

  if (!v11.st_uid) {
    return sub_100101F94(v2, 0LL);
  }
  sub_100074DD8((uint64_t)v10, v11.st_uid);
  uint64_t v4 = sub_100101F94(v2, 0LL);
  sub_100075638((uint64_t)v10);
  return v4;
}

void sub_1000713A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13)
{
}

void *sub_100071498(void *a1, int a2, char a3)
{
  unint64_t v6 = sub_10011EBA0(a1);
  sub_100102A14((uint64_t)(v6 + 3), a2, a3);
  *a1 = off_10017EA00;
  a1[3] = &off_10017EAC0;
  return a1;
}

void sub_1000714F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100071508(uint64_t result, unint64_t a2)
{
  if (a2 < 0x100000 || a2 > 0x200000000LL || (a2 & 0xFFF) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v4);
    sub_10000552C(v4, (uint64_t)"Invalid band size (", 19LL);
    std::ostream::operator<<(v4, a2);
    sub_10000552C(v4, (uint64_t)" bytes)", 7LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)v4, 0x16u);
  }

  *(void *)(result + 12_Block_object_dispose(va, 8) = a2;
  return result;
}

void sub_1000715C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1000715FC(uint64_t a1)
{
  if (mkdirat(*(_DWORD *)(a1 + 32), "bands", 0x1FFu) == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    unint64_t v13 = __error();
    uint64_t v14 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Failed creating bands folder", *v13);
  }

  sub_1000721C8(a1);
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100006174(__p, "token");
  uint64_t v3 = sub_1001024B0(v2, (uint64_t)__p, 1538);
  sub_100052AA8((uint64_t)&v23, v3, 1LL, 0);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  int v4 = *(_DWORD *)(a1 + 32);
  sub_100006174(v15, "lock");
  uint64_t v5 = sub_1001024B0(v4, (uint64_t)v15, 1538);
  sub_100052AA8((uint64_t)__p, v5, 1LL, 0);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  __p[0] = off_1001920D8;
  __int128 v19 = off_1001921B8;
  int v20 = off_1001921F0;
  sub_100052E00((uint64_t)&v22);
  unint64_t v6 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  __int16 v23 = off_1001920D8;
  __int128 v25 = off_1001921B8;
  int64x2_t v26 = off_1001921F0;
  sub_100052E00((uint64_t)&v28);
  int v9 = v27;
  if (v27)
  {
    BOOL v10 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_100071814(_Unwind_Exception *a1)
{
}

void sub_100071870(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  *(void *)(a1 + sub_100006224(v1 + 112) = v3[0];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000718F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    unint64_t v64 = __cxa_begin_catch(exception_object);
    *(void *)&a11 = "SparseBundleBackend::read_info()";
    *((void *)&a11 + 1) = 30LL;
    a12 = 16;
    sub_100072C20(&__p, &a11);
    sub_10000552C(&a61, (uint64_t)"Failed to read ", 15LL);
    sub_10000552C(&a61, (uint64_t)"Info.plist", 10LL);
    sub_10000552C(&a61, (uint64_t)", ", 2LL);
    unint64_t v65 = (const char *)(*(uint64_t (**)(void *))(*(void *)v64 + 16LL))(v64);
    size_t v66 = strlen(v65);
    sub_10000552C(&a61, (uint64_t)v65, v66);
    sub_10000552C(&a61, (uint64_t)", reading from backup", 21LL);
    sub_100072CC8((uint64_t)&__p);
    __cxa_end_catch();
    sub_100006174(&__p, "Info.bckup");
    sub_1000723C0(v61, (uint64_t)&__p, &a10);
    uint64_t v67 = a10;
    a10 = 0LL;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
    }
    if (a18 < 0) {
      operator delete(__p);
    }
    JUMPOUT(0x1000718D8LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100071B50(uint64_t a1, char a2)
{
  uint64_t result = mkdirat(*(_DWORD *)(a1 + 32), "mapped", 0x1FFu);
  if ((_DWORD)result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v12);
    sub_10000552C(v12, (uint64_t)"Failed creating ", 16LL);
    sub_10000552C(v12, (uint64_t)"mapped", 6LL);
    sub_10000552C(v12, (uint64_t)" folder", 7LL);
    unint64_t v6 = __error();
    sub_100006AA8((uint64_t)exception, (uint64_t)v12, *v6);
  }

  if ((a2 & 1) == 0)
  {
    sub_100102E60(a1 + 24, &v11);
    if (fchmodat(*(_DWORD *)(a1 + 32), "mapped", v11.st_mode & 0x1FF, 0) == -1)
    {
      unsigned int v7 = __cxa_allocate_exception(0x40uLL);
      sub_100005148((uint64_t)v12);
      sub_10000552C(v12, (uint64_t)"fchmodat failed for ", 20LL);
      sub_10000552C(v12, (uint64_t)"mapped", 6LL);
      sub_10000552C(v12, (uint64_t)" folder", 7LL);
      unint64_t v8 = __error();
      sub_100006AA8((uint64_t)v7, (uint64_t)v12, *v8);
    }

    uint64_t result = geteuid();
    if (!(_DWORD)result && v11.st_uid)
    {
      uint64_t result = fchownat(*(_DWORD *)(a1 + 32), "mapped", v11.st_uid, 0xFFFFFFFF, 0);
      if ((_DWORD)result == -1)
      {
        int v9 = __cxa_allocate_exception(0x40uLL);
        sub_100005148((uint64_t)v12);
        sub_10000552C(v12, (uint64_t)"fchownat failed for ", 20LL);
        sub_10000552C(v12, (uint64_t)"mapped", 6LL);
        sub_10000552C(v12, (uint64_t)" folder", 7LL);
        BOOL v10 = __error();
        sub_100006AA8((uint64_t)v9, (uint64_t)v12, *v10);
      }
    }
  }

  return result;
}

void sub_100071D80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_100071DCC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *sub_100071E04(void *a1, int a2, char a3, void *a4, uint64_t *a5)
{
  unint64_t v8 = sub_100071498(a1, a2, a3);
  void *v8 = off_10017E858;
  v8[3] = off_10017E930;
  uint64_t v9 = (uint64_t)(v8 + 3);
  v8[9] = off_10017E958;
  void v8[10] = *a4;
  uint64_t v10 = a4[1];
  v8[11] = v10;
  if (v10)
  {
    stat v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  a1[12] = 0LL;
  a1[13] = 0LL;
  a1[14] = 0LL;
  sub_100071870((uint64_t)a1);
  sub_10001C610(a1 + 12, a5);
  if ((*(unsigned int (**)(void *))(*a1 + 48LL))(a1))
  {
    sub_100102E60(v9, v17);
    uint64_t v13 = v17[0].st_mode & 0x1B6;
    umask(v17[0].st_mode & 0x1B6 ^ 0x1B6);
    *(void *)&__int128 v15 = "SparseBundleBackend::SparseBundleBackend(int, BOOL, const shared_ptr<FileLocal> &, const shared_pt"
                      "r<crypto::format> &)";
    *((void *)&v15 + 1) = 40LL;
    int v16 = 0;
    sub_100071FF4(v17, &v15);
    sub_10000552C(&v18, (uint64_t)"Mode for new files in bundle: ", 30LL);
    *(_DWORD *)((char *)&v18 + *(void *)(v18 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v18 + *(void *)(v18 - 24) + 8) & 0xFFFFFFB5 | 0x40;
    std::ostream::operator<<(&v18, v13);
    *(_DWORD *)((char *)&v18 + *(void *)(v18 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v18 + *(void *)(v18 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v18, off_10017EBB8);
    sub_1000749F0((uint64_t)v17);
    std::ios::~ios(&v19);
  }

  return a1;
}

void sub_100071F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v8 = *(void *)(v4 + 112);
  *(void *)(v4 + sub_100006224(v1 + 112) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  sub_100006224(v6);
  sub_100006224(v5);
  sub_100071DCC(v4);
  _Unwind_Resume(a1);
}

void *sub_100071FF4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007A79C((uint64_t)a1, a2);
  *a1 = off_10017EAF0;
  a1[45] = &off_10017EBF0;
  a1[46] = &off_10017EC18;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017EAF0;
  a1[45] = off_10017EB78;
  a1[46] = off_10017EBA0;
  return a1;
}

void sub_100072078(_Unwind_Exception *a1)
{
}

uint64_t sub_10007209C(uint64_t a1)
{
  return a1;
}

void *sub_1000720E0(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007A818((uint64_t)a1, a2);
  *a1 = off_10017F150;
  a1[45] = &off_10017F250;
  a1[46] = &off_10017F278;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017F150;
  a1[45] = off_10017F1D8;
  a1[46] = off_10017F200;
  return a1;
}

void sub_100072164(_Unwind_Exception *a1)
{
}

uint64_t sub_100072188(uint64_t a1)
{
  return a1;
}

void sub_1000721C8(uint64_t a1)
{
  *(void *)&__int128 __p = "SparseBundleBackend::write_info_plists()";
  *((void *)&__p + 1) = 38LL;
  int v8 = 0;
  sub_1000733E4(v10, &__p);
  sub_10000552C(&v16, (uint64_t)"Updating ", 9LL);
  sub_10000552C(&v16, (uint64_t)"Info.bckup", 10LL);
  sub_10000552C(&v16, (uint64_t)", disk size: ", 13LL);
  std::ostream::operator<<(&v16, *(void *)(a1 + 120));
  std::ostream::~ostream(&v16, off_10017FCB8);
  sub_100077D10((uint64_t)v10);
  std::ios::~ios(&v17);
  int v2 = *(_DWORD *)(a1 + 32);
  sub_100006174(&__p, "Info.bckup");
  uint64_t v3 = sub_1001024B0(v2, (uint64_t)&__p, 1538);
  sub_100052AA8((uint64_t)v10, v3, 1LL, 0);
  if (v9 < 0) {
    operator delete((void *)__p);
  }
  sub_100072F8C(a1, (uint64_t)v10);
  sub_100072D08(a1);
  v10[0] = off_1001920D8;
  unint64_t v12 = off_1001921B8;
  uint64_t v13 = off_1001921F0;
  sub_100052E00((uint64_t)&v15);
  uint64_t v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_10007237C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
}

void sub_1000723C0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1);
  if ((_DWORD)v6) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  int v8 = operator new(0x458uLL);
  uint64_t v9 = sub_1001024B0(*(_DWORD *)(a1 + 32), a2, v7);
  sub_100052AA8((uint64_t)v8, v9, v6, 0);
  *a3 = v8;
  unint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v8 + 40LL))(v8);
  if (v10 >= 0x401)
  {
    *(void *)&__int128 bytes = "SparseBundleBackend::read_info(const std::string &)";
    *((void *)&bytes + 1) = 30LL;
    int v61 = 16;
    sub_100072B38(&valuePtr, &bytes);
    sub_10000552C(&v68, (uint64_t)"Info.plist", 10LL);
    sub_10000552C(&v68, (uint64_t)" is ", 4LL);
    std::ostream::operator<<(&v68, v10);
    sub_10000552C(&v68, (uint64_t)" bytes, reading only ", 21LL);
    std::ostream::operator<<(&v68, 1024LL);
    sub_10000552C(&v68, (uint64_t)" bytes", 6LL);
    std::ostream::~ostream(&v68, off_10017F438);
    sub_100076578((uint64_t)&valuePtr);
    std::ios::~ios(&v69);
    unint64_t v10 = 1024LL;
  }

  sub_100076960(&bytes, v10);
  stat v11 = (unsigned __int8 *)bytes;
  unint64_t v12 = (std::__shared_weak_count *)*((void *)sub_100120DCC() + 1);
  uint64_t valuePtr = v11;
  unint64_t v63 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  int64_t v64 = v10;
  uint64_t v65 = 0LL;
  unint64_t v66 = v10;
  char v67 = 0;
  int v15 = (*(uint64_t (**)(void *, unsigned __int8 **))(*(void *)v8 + 88LL))(v8, &valuePtr);
  uint64_t v16 = v63;
  if (v63)
  {
    uint64_t v17 = (unint64_t *)&v63->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v10 != v15)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)&valuePtr);
    sub_10000552C(&valuePtr, (uint64_t)"Failed reading ", 15LL);
    sub_10000552C(&valuePtr, (uint64_t)"Info.plist", 10LL);
    uint64_t v39 = __error();
    sub_100006AA8((uint64_t)exception, (uint64_t)&valuePtr, *v39);
  }

  CFDataRef v19 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)bytes, v10);
  CFDataRef v59 = v19;
  if (!v19)
  {
    unint64_t v40 = __cxa_allocate_exception(0x40uLL);
    void *v40 = &off_100196FC8;
    uint64_t v41 = std::generic_category();
    v40[1] = 12LL;
    v40[2] = v41;
    *((_BYTE *)v40 + 24) = 0;
    *((_BYTE *)v40 + 4_Block_object_dispose(va, 8) = 0;
    v40[7] = "Failed creating CFData";
  }

  CFErrorRef error = 0LL;
  CFPropertyListRef v20 = CFPropertyListCreateWithData(kCFAllocatorDefault, v19, 0LL, 0LL, &error);
  unint64_t v57 = v20;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v20)
  {
    unint64_t v42 = __cxa_allocate_exception(0x40uLL);
    void *v42 = &off_100196FC8;
    uint64_t v43 = std::generic_category();
    v42[1] = 22LL;
    void v42[2] = v43;
    *((_BYTE *)v42 + 24) = 0;
    *((_BYTE *)v42 + 4_Block_object_dispose(va, 8) = 0;
    v42[7] = "Corrupted plist";
  }

  uint64_t v22 = TypeID;
  if (CFGetTypeID(v20) != TypeID)
  {
    uint64_t v44 = __cxa_allocate_exception(0x40uLL);
    CFTypeID v45 = CFGetTypeID(v20);
    BOOL v46 = sub_10000A37C(v44, v45, v22);
  }

  uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)v20, @"size");
  CFTypeID v24 = CFNumberGetTypeID();
  if (Value)
  {
    uint64_t v25 = v24;
    if (CFGetTypeID(Value) != v24)
    {
      char v47 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v48 = CFGetTypeID(Value);
      BOOL v49 = sub_10000A37C(v47, v48, v25);
    }
  }

  int64x2_t v26 = CFDictionaryGetValue((CFDictionaryRef)v20, @"band-size");
  CFTypeID v27 = CFNumberGetTypeID();
  if (v26)
  {
    uint64_t v28 = v27;
    if (CFGetTypeID(v26) != v27)
    {
      char v50 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v51 = CFGetTypeID(v26);
      unint64_t v52 = sub_10000A37C(v50, v51, v28);
    }
  }

  uint64_t v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v20, @"uuid");
  CFTypeID v30 = CFStringGetTypeID();
  if (v29)
  {
    uint64_t v31 = v30;
    if (CFGetTypeID(v29) != v30)
    {
      unint64_t v53 = __cxa_allocate_exception(0x40uLL);
      CFTypeID v54 = CFGetTypeID(v29);
      unint64_t v55 = sub_10000A37C(v53, v54, v31);
    }
  }

  uint64_t v32 = "Corrupted plist dictionary";
  if (!Value || !v26)
  {
LABEL_41:
    unint64_t v36 = __cxa_allocate_exception(0x40uLL);
    void *v36 = &off_100196FC8;
    int64_t v37 = std::generic_category();
    v36[1] = 22LL;
    void v36[2] = v37;
    *((_BYTE *)v36 + 24) = 0;
    *((_BYTE *)v36 + 4_Block_object_dispose(va, 8) = 0;
    v36[7] = v32;
  }

  if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberLongLongType, &valuePtr) {
    || (*(void *)(a1 + 12crc32(0LL, 0LL, 0) = valuePtr, !CFNumberGetValue((CFNumberRef)v26, kCFNumberLongLongType, &valuePtr)))
  }
  {
    uint64_t v32 = "Failed converting CFNumber to longlong";
    goto LABEL_41;
  }

  sub_100071508(a1, (unint64_t)valuePtr);
  if (v29)
  {
    sub_1000FE7CC(v29, &valuePtr);
    unint64_t v33 = (std::__shared_weak_count *)HIBYTE(v64);
    if (v64 >= 0) {
      p_uint64_t valuePtr = (unsigned __int8 *)&valuePtr;
    }
    else {
      p_uint64_t valuePtr = valuePtr;
    }
    if (v64 < 0) {
      unint64_t v33 = v63;
    }
    *(void *)(a1 + 136) = sub_10007A910((uint64_t)&v56, p_valuePtr, (unsigned __int8 *)v33 + (void)p_valuePtr);
    *(void *)(a1 + 144) = v35;
    if (SHIBYTE(v64) < 0) {
      operator delete(valuePtr);
    }
  }

  else
  {
    *(void *)(a1 + 136) = 0LL;
    *(void *)(a1 + 144) = 0LL;
  }

  sub_100006B94(&v57);
  sub_10002A0F0((const void **)&v59);
  if ((void)bytes)
  {
    *((void *)&bytes + 1) = bytes;
    operator delete((void *)bytes);
  }

void sub_1000729D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v23 = *v21;
  uint64_t *v21 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  _Unwind_Resume(a1);
}

void *sub_100072B38(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007A894((uint64_t)a1, a2);
  *a1 = off_10017F370;
  a1[45] = &off_10017F470;
  a1[46] = &off_10017F498;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017F370;
  a1[45] = off_10017F3F8;
  a1[46] = off_10017F420;
  return a1;
}

void sub_100072BBC(_Unwind_Exception *a1)
{
}

uint64_t sub_100072BE0(uint64_t a1)
{
  return a1;
}

void *sub_100072C20(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10007AC0C((uint64_t)a1, a2);
  *a1 = off_10017F590;
  a1[45] = &off_10017F690;
  a1[46] = &off_10017F6B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017F590;
  a1[45] = off_10017F618;
  a1[46] = off_10017F640;
  return a1;
}

void sub_100072CA4(_Unwind_Exception *a1)
{
}

uint64_t sub_100072CC8(uint64_t a1)
{
  return a1;
}

const void **sub_100072D08(uint64_t a1)
{
  *(void *)&__int128 v11 = "SparseBundleBackend::write_primary_info_plist()";
  *((void *)&v11 + 1) = 45LL;
  int v12 = 0;
  sub_1000732FC(__p, &v11);
  sub_10000552C(&v15, (uint64_t)"Updating ", 9LL);
  sub_10000552C(&v15, (uint64_t)"Info.plist", 10LL);
  std::ostream::~ostream(&v15, off_10017FA98);
  sub_100077764((uint64_t)__p);
  std::ios::~ios(&v16);
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 56LL))(v2, 0LL);
    if (v3)
    {
      unsigned int v4 = v3;
      exception = __cxa_allocate_exception(0x40uLL);
      uint64_t v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Failed truncating plist", v4);
    }
  }

  else
  {
    sub_100006174(__p, "Info.plist");
    int v7 = operator new(0x458uLL);
    uint64_t v8 = sub_1001024B0(*(_DWORD *)(a1 + 32), (uint64_t)__p, 514);
    sub_100052AA8((uint64_t)v7, v8, 1LL, 0);
    uint64_t v9 = *(void *)(a1 + 112);
    *(void *)(a1 + sub_100006224(v1 + 112) = v7;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100072F8C(a1, *(void *)(a1 + 112));
}

void sub_100072E68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100072EA4(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007AC88((uint64_t)a1, a2);
  *a1 = off_10017F7B0;
  a1[45] = &off_10017F8B0;
  a1[46] = &off_10017F8D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017F7B0;
  a1[45] = off_10017F838;
  a1[46] = off_10017F860;
  return a1;
}

void sub_100072F28(_Unwind_Exception *a1)
{
}

uint64_t sub_100072F4C(uint64_t a1)
{
  return a1;
}

const void **sub_100072F8C(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"diskimage-bundle-type", @"com.apple.diskimage.sparsebundle");
  CFDictionarySetValue(Mutable, kCFBundleInfoDictionaryVersionKey, @"6.0");
  sub_1000FEA34(Mutable, @"bundle-backingstore-version", 2LL);
  sub_1000FEA34(Mutable, @"size", *(void *)(a1 + 120));
  sub_1000FEA34(Mutable, @"band-size", *(void *)(a1 + 128));
  unsigned int v4 = Mutable;
  uint64_t v5 = operator new(0x28uLL);
  __int128 __p = v5;
  __int128 v22 = xmmword_100145B50;
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  *(void *)((char *)v5 + 29) = 0LL;
  sub_100077528(a1 + 136, v5);
  sub_1000FF07C(v4, @"uuid", (uint64_t)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  CFErrorRef error = 0LL;
  CFDataRef v6 = CFPropertyListCreateData(kCFAllocatorDefault, Mutable, kCFPropertyListXMLFormat_v1_0, 0LL, &error);
  int64x2_t v26 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)&__p);
    sub_10000552C(&__p, (uint64_t)"Failed creating property list", 29LL);
    unsigned int Code = CFErrorGetCode(error);
    sub_100006AA8((uint64_t)exception, (uint64_t)&__p, Code);
  }

  CFIndex Length = CFDataGetLength(v6);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v26);
  uint64_t v9 = *((void *)sub_100120DCC() + 1);
  __int128 __p = BytePtr;
  *(void *)&__int128 v22 = v9;
  if (v9)
  {
    unint64_t v10 = (unint64_t *)(v9 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *((void *)&v22 + 1) = Length;
  uint64_t v23 = 0LL;
  CFIndex v24 = Length;
  char v25 = 0;
  unsigned int v12 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 96LL))(a2, &__p);
  uint64_t v13 = (std::__shared_weak_count *)v22;
  if ((void)v22)
  {
    char v14 = (unint64_t *)(v22 + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if ((v12 & 0x80000000) != 0
    || (unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16LL))(a2, 2LL)) != 0)
  {
    uint64_t v17 = __cxa_allocate_exception(0x40uLL);
    *uint64_t v17 = &off_100196FC8;
    unint64_t v18 = std::generic_category();
    v17[1] = v12;
    stat v17[2] = v18;
    *((_BYTE *)v17 + 24) = 0;
    *((_BYTE *)v17 + 4_Block_object_dispose(va, 8) = 0;
    uint64_t v17[7] = "Failed writing sparsebundle info";
  }

  sub_10002A0F0((const void **)&v26);
  sub_10007AD04((const void **)&error);
  return sub_100006B34((const void **)&Mutable);
}

void sub_100073258( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void *sub_1000732FC(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007AD34((uint64_t)a1, a2);
  *a1 = off_10017F9D0;
  a1[45] = &off_10017FAD0;
  a1[46] = &off_10017FAF8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017F9D0;
  a1[45] = off_10017FA58;
  a1[46] = off_10017FA80;
  return a1;
}

void sub_100073380(_Unwind_Exception *a1)
{
}

uint64_t sub_1000733A4(uint64_t a1)
{
  return a1;
}

void *sub_1000733E4(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007ADB0((uint64_t)a1, a2);
  *a1 = off_10017FBF0;
  a1[45] = &off_10017FCF0;
  a1[46] = &off_10017FD18;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017FBF0;
  a1[45] = off_10017FC78;
  a1[46] = off_10017FCA0;
  return a1;
}

void sub_100073468(_Unwind_Exception *a1)
{
}

uint64_t sub_10007348C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000734CC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 12crc32(0LL, 0LL, 0) = (a2 + 4095) & 0xFFFFFFFFFFFFF000LL;
  sub_1000721C8(a1);
  return 0LL;
}

void *sub_100073600(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007AE2C((uint64_t)a1, a2);
  *a1 = off_10017FE10;
  a1[45] = &off_10017FF10;
  a1[46] = &off_10017FF38;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017FE10;
  a1[45] = off_10017FE98;
  a1[46] = off_10017FEC0;
  return a1;
}

void sub_100073684(_Unwind_Exception *a1)
{
}

uint64_t sub_1000736A8(uint64_t a1)
{
  return a1;
}

void sub_1000736E8(int *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1 + 8;
  else {
    int v4 = 0;
  }
  int v7 = v4;
  sub_100006174(__p, "token");
  sub_10007AEA8(v3, (uint64_t)__p, &v7, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100073764( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100073780(int *a1)
{
  if (((*(uint64_t (**)(int *))(*(void *)a1 + 192LL))(a1) & 1) == 0)
  {
    else {
      unsigned int v2 = 20;
    }
    unsigned int v13 = v2;
    sub_100006174(__p, "lock");
    sub_10007AEA8(a1 + 8, (uint64_t)__p, (int *)&v13, &v7);
    sub_1000198A4((uint64_t)(a1 + 20), &v7);
    unsigned int v3 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1))
    {
      int v4 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
      do
        unint64_t v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&__int128 v7 = "int SparseBundleBackend::lock()";
    *((void *)&v7 + 1) = 29LL;
    int v8 = 0;
    sub_10000974C(__p, &v7);
    sub_10000552C(&v11, (uint64_t)"Opened bundle's lock file with flags 0x", 39LL);
    *(_DWORD *)((char *)&v11 + *(void *)(v11 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v11 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v11, v13);
    *(_DWORD *)((char *)&v11 + *(void *)(v11 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)&v11 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v11, off_100172068);
    sub_10000BD90((uint64_t)__p);
    std::ios::~ios(&v12);
  }

  return 0LL;
}

void sub_10007390C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2 == 1)
  {
    int v60 = (unsigned int *)__cxa_begin_catch(exception_object);
    int v61 = v60[2];
    if (v61 < 0) {
      int v61 = -v61;
    }
    BOOL v62 = v61 == 45 || v61 == 2;
    *(void *)&a10 = "int SparseBundleBackend::lock()";
    *((void *)&a10 + 1) = 29LL;
    if (v62)
    {
      a11 = 0;
      sub_100073A50(&__p, &a10);
      sub_10000552C(&a60, (uint64_t)"Cannot lock bundle, ignoring: ", 30LL);
      sub_100120CD8(&a60, v60);
      sub_100073AF8((uint64_t)&__p);
    }

    else
    {
      a11 = 16;
      sub_100073B38(&__p, &a10);
      sub_100120CD8(&a60, v60);
      sub_100073BE0((uint64_t)&__p);
    }

    __cxa_end_catch();
    JUMPOUT(0x1000738F4LL);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100073A50(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007AF90((uint64_t)a1, a2);
  *a1 = off_100180030;
  a1[45] = &off_100180130;
  a1[46] = &off_100180158;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180030;
  a1[45] = off_1001800B8;
  a1[46] = off_1001800E0;
  return a1;
}

void sub_100073AD4(_Unwind_Exception *a1)
{
}

uint64_t sub_100073AF8(uint64_t a1)
{
  return a1;
}

void *sub_100073B38(void *a1, __int128 *a2)
{
  unsigned int v3 = (std::ios_base *)(a1 + 46);
  sub_10007B00C((uint64_t)a1, a2);
  *a1 = off_100180250;
  a1[45] = &off_100180350;
  a1[46] = &off_100180378;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180250;
  a1[45] = off_1001802D8;
  a1[46] = off_100180300;
  return a1;
}

void sub_100073BBC(_Unwind_Exception *a1)
{
}

uint64_t sub_100073BE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100073C20(uint64_t a1)
{
  return sub_100073780((int *)(a1 - 72));
}

uint64_t sub_100073C28(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 192LL))(a1))
  {
    sub_10001C5B4(a1 + 10);
    *(void *)&__int128 v3 = "int SparseBundleBackend::unlock_all()";
    *((void *)&v3 + 1) = 35LL;
    int v4 = 0;
    sub_100073CE0(v5, &v3);
    sub_10000552C(&v6, (uint64_t)"Bundle's lock file is closed", 28LL);
    std::ostream::~ostream(&v6, off_100180538);
    sub_1000793C0((uint64_t)v5);
    std::ios::~ios(&v7);
  }

  return 0LL;
}

void sub_100073CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100073CE0(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_10007B088((uint64_t)a1, a2);
  *a1 = off_100180470;
  a1[45] = &off_100180570;
  a1[46] = &off_100180598;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180470;
  a1[45] = off_1001804F8;
  a1[46] = off_100180520;
  return a1;
}

void sub_100073D64(_Unwind_Exception *a1)
{
}

uint64_t sub_100073D88(uint64_t a1)
{
  return a1;
}

uint64_t sub_100073DC8(uint64_t a1)
{
  return 0LL;
}

BOOL sub_100073DE4(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0LL;
}

BOOL sub_100073DF4(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0LL;
}

void sub_100073E04(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = operator new(0x10uLL);
  int v5 = sub_1001024B0(*(_DWORD *)(a1 + 32), (uint64_t)__p, 0);
  *(void *)int v4 = off_100191F58;
  void v4[2] = v5;
  *a2 = v4;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100073E88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100073EB4(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = operator new(0x10uLL);
  int v5 = sub_1001024B0(*(_DWORD *)(a1 + 32), (uint64_t)__p, 0);
  *(void *)int v4 = off_100191F58;
  void v4[2] = v5;
  *a2 = v4;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100073F38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100073F64(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  sub_100006174(__p, "bands");
  int v4 = sub_1001024B0(v3, (uint64_t)__p, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  sub_1000797A8(&v10, v4);
  while (1)
  {
    int v5 = readdir(v10);
    if (!v5) {
      break;
    }
    *__error() = 0;
    d_name = v5->d_name;
    uint64_t v7 = strtoll(d_name, 0LL, 16);
    if (!*__error())
    {
      sub_100006174(__p, d_name);
      uint64_t v13 = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      if (!v8) {
        sub_100014B10();
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v8 + 48LL))(v8, __p, &v13);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return closedir(v10);
}

void sub_100074064( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DIR *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000740B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v16 = (unint64_t)(*(void *)(a1 + 120) + *(void *)(a1 + 128) - 1LL) / *(void *)(a1 + 128);
  int v4 = operator new(0x50uLL);
  sub_100079804(v4, v16, 0);
  uint64_t v14 = 0LL;
  unint64_t v15 = v4;
  *(void *)&__int128 v9 = "SparseBundleBackend::get_existing_bands() const";
  *((void *)&v9 + 1) = 39LL;
  int v10 = 0;
  sub_100074324(v11, &v9);
  sub_10000552C(&v12, (uint64_t)"Looking for existing bands", 26LL);
  std::ostream::~ostream(&v12, off_100180830);
  sub_100079E08((uint64_t)v11);
  std::ios::~ios(v13);
  unint64_t v18 = 0LL;
  int v5 = operator new(0x20uLL);
  *int v5 = &off_100180BA0;
  v5[1] = &v16;
  __int128 v5[2] = &v15;
  double v5[3] = &v14;
  unint64_t v18 = v5;
  sub_100073F64(a1, (uint64_t)v17);
  uint64_t v6 = v18;
  if (v18 == v17)
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = v17;
    goto LABEL_5;
  }

  if (v18)
  {
    uint64_t v7 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  *(void *)&__int128 v9 = "SparseBundleBackend::get_existing_bands() const";
  *((void *)&v9 + 1) = 39LL;
  int v10 = 0;
  sub_10007440C(v11, &v9);
  sub_10000552C(&v12, (uint64_t)"Found ", 6LL);
  std::ostream::operator<<(&v12, v14);
  sub_10000552C(&v12, (uint64_t)" existing bands", 15LL);
  std::ostream::~ostream(&v12, off_100180A50);
  sub_10007A3B4((uint64_t)v11);
  uint64_t result = std::ios::~ios(v13);
  *a2 = v15;
  return result;
}

void sub_100074294( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(void *)(v12 - 104);
  *(void *)(v12 - 104) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100074324(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10007B104((uint64_t)a1, a2);
  *a1 = off_100180768;
  a1[45] = &off_100180868;
  a1[46] = &off_100180890;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180768;
  a1[45] = off_1001807F0;
  a1[46] = off_100180818;
  return a1;
}

void sub_1000743A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000743CC(uint64_t a1)
{
  return a1;
}

void *sub_10007440C(void *a1, __int128 *a2)
{
  int v3 = (std::ios_base *)(a1 + 46);
  sub_10007B3E8((uint64_t)a1, a2);
  *a1 = off_100180988;
  a1[45] = &off_100180A88;
  a1[46] = &off_100180AB0;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180988;
  a1[45] = off_100180A10;
  a1[46] = off_100180A38;
  return a1;
}

void sub_100074490(_Unwind_Exception *a1)
{
}

uint64_t sub_1000744B4(uint64_t a1)
{
  return a1;
}

void *sub_1000744F4(void *a1)
{
  *a1 = off_10017E858;
  a1[3] = off_10017E930;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[9] = off_10017E958;
  uint64_t v3 = a1[14];
  a1[14] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100006224((uint64_t)(a1 + 12));
  sub_100006224((uint64_t)(a1 + 10));
  sub_100102838(v2);
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_100074570(void *a1)
{
  *a1 = off_10017E858;
  a1[3] = off_10017E930;
  uint64_t v2 = (uint64_t)(a1 + 3);
  a1[9] = off_10017E958;
  uint64_t v3 = a1[14];
  a1[14] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100006224((uint64_t)(a1 + 12));
  sub_100006224((uint64_t)(a1 + 10));
  sub_100102838(v2);
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a1);
}

uint64_t sub_1000745EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16LL))(*(void *)(a1 + 112));
}

uint64_t sub_1000745FC(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_100074604(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

void *sub_10007460C(uint64_t a1, void *a2)
{
  return sub_10000552C(a2, (uint64_t)"sparsebundle", 12LL);
}

uint64_t sub_100074620()
{
  return 4294967251LL;
}

uint64_t sub_100074628()
{
  return 4294967251LL;
}

uint64_t sub_100074630(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void sub_10007463C(void *a1)
{
  *(a1 - 3) = off_10017E858;
  *a1 = off_10017E930;
  a1[6] = off_10017E958;
  uint64_t v2 = a1[11];
  a1[11] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_100006224((uint64_t)(a1 + 9));
  sub_100006224((uint64_t)(a1 + 7));
  sub_100102838((uint64_t)a1);
  uint64_t v3 = (std::__shared_weak_count *)*(a1 - 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1000746B0(void *a1)
{
  *(a1 - 3) = off_10017E858;
  uint64_t v2 = a1 - 3;
  *a1 = off_10017E930;
  a1[6] = off_10017E958;
  uint64_t v3 = a1[11];
  a1[11] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100006224((uint64_t)(a1 + 9));
  sub_100006224((uint64_t)(a1 + 7));
  sub_100102838((uint64_t)a1);
  int v4 = (std::__shared_weak_count *)*(a1 - 1);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
}

void sub_10007472C(void *a1)
{
  *(a1 - 9) = off_10017E858;
  *(a1 - 6) = off_10017E930;
  uint64_t v2 = (uint64_t)(a1 - 6);
  *a1 = off_10017E958;
  uint64_t v3 = a1[5];
  a1[5] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100006224((uint64_t)(a1 + 3));
  sub_100006224((uint64_t)(a1 + 1));
  sub_100102838(v2);
  int v4 = (std::__shared_weak_count *)*(a1 - 7);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1000747A4(void *a1)
{
  *(a1 - 9) = off_10017E858;
  uint64_t v2 = a1 - 9;
  *(a1 - 6) = off_10017E930;
  uint64_t v3 = (uint64_t)(a1 - 6);
  *a1 = off_10017E958;
  uint64_t v4 = a1[5];
  a1[5] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_100006224((uint64_t)(a1 + 3));
  sub_100006224((uint64_t)(a1 + 1));
  sub_100102838(v3);
  int v5 = (std::__shared_weak_count *)*(a1 - 7);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
}

uint64_t sub_10007482C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EBB8);
  sub_1000749F0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100074864(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017EBB8);
  sub_1000749F0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000748A4(char *a1)
{
}

uint64_t sub_1000748E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007491C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100074968(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017EBB8);
  sub_1000749F0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000749A8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017EBB8);
  sub_1000749F0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000749F0(uint64_t a1)
{
  *(void *)a1 = off_10017EC88;
  sub_100074A8C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100074A8C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100074BF4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100074BB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100074BE0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000749F0(a1);
  operator delete(v1);
}

int *sub_100074BF4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      int v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 93LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 93LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100074DD8(uint64_t a1, uint64_t a2)
{
  if (seteuid(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v8);
    sub_10000552C(v8, (uint64_t)"failed to set euid to ", 22LL);
    std::ostream::operator<<(v8, a2);
    sub_100006AA8((uint64_t)exception, (uint64_t)v8, 1u);
  }

  *(void *)&__int128 v6 = "set_euid_wrapper::set_euid_wrapper(uid_t)";
  *((void *)&v6 + 1) = 34LL;
  int v7 = 0;
  sub_100074F28(v8, &v6);
  sub_10000552C(&v9, (uint64_t)"uid temporarily set to ", 23LL);
  std::ostream::operator<<(&v9, a2);
  std::ostream::~ostream(&v9, off_10017EDD8);
  sub_10007508C((uint64_t)v8);
  std::ios::~ios(&v10);
  return a1;
}

void sub_100074EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_100074F28(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100075010((uint64_t)a1, a2);
  *a1 = off_10017ED10;
  a1[45] = &off_10017EE10;
  a1[46] = &off_10017EE38;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017ED10;
  a1[45] = off_10017ED98;
  a1[46] = off_10017EDC0;
  return a1;
}

void sub_100074FAC(_Unwind_Exception *a1)
{
}

uint64_t sub_100074FD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100075010(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017EEA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100075078(_Unwind_Exception *a1)
{
}

uint64_t sub_10007508C(uint64_t a1)
{
  *(void *)a1 = off_10017EEA8;
  sub_100075304(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_100075128(char *a1)
{
}

uint64_t sub_10007516C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000751A0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000751EC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EDD8);
  sub_10007508C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_100075224(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017EDD8);
  sub_10007508C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100075264(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017EDD8);
  sub_10007508C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000752A4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017EDD8);
  sub_10007508C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_1000752F0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007508C(a1);
  operator delete(v1);
}

uint64_t sub_100075304(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100075454((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007542C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100075454(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 128LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 128LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100075638(uint64_t a1)
{
  uint64_t v2 = seteuid(0);
  *(void *)&__int128 v4 = "set_euid_wrapper::~set_euid_wrapper()";
  *((void *)&v4 + 1) = 35LL;
  int v5 = 0;
  sub_1000756F8(v6, &v4);
  sub_10000552C(&v7, (uint64_t)"uid restored to 0 (res=", 23LL);
  std::ostream::operator<<(&v7, v2);
  sub_10000552C(&v7, (uint64_t)")", 1LL);
  std::ostream::~ostream(&v7, off_10017EFF8);
  sub_10007585C((uint64_t)v6);
  std::ios::~ios(&v8);
  return a1;
}

void *sub_1000756F8(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000757E0((uint64_t)a1, a2);
  *a1 = off_10017EF30;
  a1[45] = &off_10017F030;
  a1[46] = &off_10017F058;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_10017EF30;
  a1[45] = off_10017EFB8;
  a1[46] = off_10017EFE0;
  return a1;
}

void sub_10007577C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000757A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000757E0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017F0C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100075848(_Unwind_Exception *a1)
{
}

uint64_t sub_10007585C(uint64_t a1)
{
  *(void *)a1 = off_10017F0C8;
  sub_100075AD4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000758F8(char *a1)
{
}

uint64_t sub_10007593C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100075970(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_1000759BC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017EFF8);
  sub_10007585C(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000759F4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017EFF8);
  sub_10007585C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_100075A34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017EFF8);
  sub_10007585C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100075A74(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017EFF8);
  sub_10007585C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100075AC0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007585C(a1);
  operator delete(v1);
}

uint64_t sub_100075AD4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100075C24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100075BFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_100075C24(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 133LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 133LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100075E08(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F218);
  sub_100075FCC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100075E40(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F218);
  sub_100075FCC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100075E80(char *a1)
{
}

uint64_t sub_100075EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100075EF8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100075F44(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017F218);
  sub_100075FCC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100075F84(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F218);
  sub_100075FCC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100075FCC(uint64_t a1)
{
  *(void *)a1 = off_10017F2E8;
  sub_100076068(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100076068(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000761D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100076190( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000761BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100075FCC(a1);
  operator delete(v1);
}

int *sub_1000761D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 161LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 161LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000763B4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F438);
  sub_100076578(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000763EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F438);
  sub_100076578(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007642C(char *a1)
{
}

uint64_t sub_100076470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000764A4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000764F0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017F438);
  sub_100076578((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100076530(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F438);
  sub_100076578((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100076578(uint64_t a1)
{
  *(void *)a1 = off_10017F508;
  sub_100076614(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100076614(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007677C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007673C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100076768(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100076578(a1);
  operator delete(v1);
}

int *sub_10007677C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 207LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 207LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_100076960(void *a1, size_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10005FB60(a1, a2);
    int v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }

  return a1;
}

void sub_1000769B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000769D0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F658);
  sub_100076B94(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100076A08(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F658);
  sub_100076B94(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100076A48(char *a1)
{
}

uint64_t sub_100076A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100076AC0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100076B0C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017F658);
  sub_100076B94((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100076B4C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F658);
  sub_100076B94((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100076B94(uint64_t a1)
{
  *(void *)a1 = off_10017F728;
  sub_100076C30(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100076C30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100076D98((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100076D58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100076D84(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100076B94(a1);
  operator delete(v1);
}

int *sub_100076D98(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 263LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 263LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100076F7C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017F878);
  sub_100077140(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100076FB4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F878);
  sub_100077140(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100076FF4(char *a1)
{
}

uint64_t sub_100077038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007706C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000770B8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017F878);
  sub_100077140((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000770F8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017F878);
  sub_100077140((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100077140(uint64_t a1)
{
  *(void *)a1 = off_10017F948;
  sub_1000771DC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000771DC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100077344((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100077304( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100077330(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100077140(a1);
  operator delete(v1);
}

int *sub_100077344(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 270LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 270LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

_BYTE *sub_100077528(uint64_t a1, _BYTE *a2)
{
  for (unint64_t i = 0LL; i != 16; ++i)
  {
    uint64_t v3 = a2;
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1LL << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      void v3[2] = 45;
    }
  }

  return a2;
}

uint64_t sub_1000775A0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017FA98);
  sub_100077764(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000775D8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017FA98);
  sub_100077764(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100077618(char *a1)
{
}

uint64_t sub_10007765C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100077690(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000776DC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017FA98);
  sub_100077764((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007771C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017FA98);
  sub_100077764((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100077764(uint64_t a1)
{
  *(void *)a1 = off_10017FB68;
  sub_100077800(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100077800(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100077968((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100077928( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100077954(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100077764(a1);
  operator delete(v1);
}

int *sub_100077968(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 304LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 304LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100077B4C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017FCB8);
  sub_100077D10(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100077B84(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017FCB8);
  sub_100077D10(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100077BC4(char *a1)
{
}

uint64_t sub_100077C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100077C3C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100077C88(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017FCB8);
  sub_100077D10((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100077CC8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017FCB8);
  sub_100077D10((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100077D10(uint64_t a1)
{
  *(void *)a1 = off_10017FD88;
  sub_100077DAC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100077DAC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100077F14((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100077ED4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100077F00(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100077D10(a1);
  operator delete(v1);
}

int *sub_100077F14(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 322LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 322LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000780F8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_10017FED8);
  sub_1000782BC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100078130(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017FED8);
  sub_1000782BC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100078170(char *a1)
{
}

uint64_t sub_1000781B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000781E8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100078234(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_10017FED8);
  sub_1000782BC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100078274(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_10017FED8);
  sub_1000782BC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000782BC(uint64_t a1)
{
  *(void *)a1 = off_10017FFA8;
  sub_100078358(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100078358(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000784C0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100078480( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000784AC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000782BC(a1);
  operator delete(v1);
}

int *sub_1000784C0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 340LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 340LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000786A4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001800F8);
  sub_100078868(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000786DC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001800F8);
  sub_100078868(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007871C(char *a1)
{
}

uint64_t sub_100078760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100078794(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000787E0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001800F8);
  sub_100078868((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100078820(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001800F8);
  sub_100078868((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100078868(uint64_t a1)
{
  *(void *)a1 = off_1001801C8;
  sub_100078904(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100078904(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100078A6C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100078A2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078A58(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100078868(a1);
  operator delete(v1);
}

int *sub_100078A6C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 367LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 367LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100078C50(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180318);
  sub_100078E14(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100078C88(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180318);
  sub_100078E14(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100078CC8(char *a1)
{
}

uint64_t sub_100078D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100078D40(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100078D8C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100180318);
  sub_100078E14((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100078DCC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180318);
  sub_100078E14((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100078E14(uint64_t a1)
{
  *(void *)a1 = off_1001803E8;
  sub_100078EB0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100078EB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100079018((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100078FD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079004(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100078E14(a1);
  operator delete(v1);
}

int *sub_100079018(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 370LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 370LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000791FC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180538);
  sub_1000793C0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100079234(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180538);
  sub_1000793C0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100079274(char *a1)
{
}

uint64_t sub_1000792B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000792EC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100079338(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100180538);
  sub_1000793C0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100079378(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180538);
  sub_1000793C0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000793C0(uint64_t a1)
{
  *(void *)a1 = off_100180608;
  sub_10007945C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007945C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000795C4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100079584( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000795B0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000793C0(a1);
  operator delete(v1);
}

int *sub_1000795C4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 379LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 379LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

DIR **sub_1000797A8(DIR **a1, int a2)
{
  uint64_t v3 = fdopendir(a2);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    char v6 = (void *)sub_100004494((uint64_t)exception, (uint64_t)"Failed opening folder for entries reading", 0x13u);
  }

  return a1;
}

void *sub_100079804(void *a1, uint64_t a2, char a3)
{
  a1[2] = a2;
  *a1 = off_100180688;
  unint64_t v5 = ((unint64_t)(a2 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  sub_1000798D4(a1 + 3, v5);
  char v6 = (void *)a1[3];
  a1[8] = v6;
  a1[9] = v5;
  if ((a3 & 1) == 0 && v5) {
    bzero(v6, 8 * v5);
  }
  a1[1] = v6;
  return a1;
}

void *sub_100079874(void *a1)
{
  *a1 = off_100180688;
  sub_100079BEC(a1 + 3);
  return a1;
}

void sub_1000798A4(uint64_t *a1)
{
  *a1 = (uint64_t)off_100180688;
  sub_100079BEC(a1 + 3);
  operator delete(a1);
}

uint64_t *sub_1000798D4(uint64_t *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[4] = 0LL;
  uint64_t v3 = valloc(8 * a2);
  if (!v3)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v8 = std::bad_alloc::bad_alloc(exception);
  }

  v9[0] = &off_1001806D0;
  uint64_t v10 = v9;
  uint64_t v11 = v3;
  sub_100079AAC((uint64_t)&v12, (uint64_t)v9);
  sub_1000799D8(a1, (uint64_t *)&v11);
  sub_100079BEC((uint64_t *)&v11);
  int v4 = v10;
  if (v10 == v9)
  {
    uint64_t v5 = 4LL;
    int v4 = v9;
    goto LABEL_6;
  }

  if (v10)
  {
    uint64_t v5 = 5LL;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }

  return a1;
}

void sub_1000799C4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000799D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  sub_100079B10(a1, v4);
  sub_100079B5C(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *sub_100079A20()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_1001806D0;
  return result;
}

void sub_100079A44(uint64_t a1, void *a2)
{
  *a2 = &off_1001806D0;
}

void sub_100079A5C(uint64_t a1, void **a2)
{
}

uint64_t sub_100079A64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100079AA0()
{
}

uint64_t sub_100079AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

uint64_t *sub_100079B10(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      sub_100014B10();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48LL))(v3, &v4);
  }

  return result;
}

void *sub_100079B5C(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3] = v6;
      *(void *)(a2 + 24) = 0LL;
    }
  }

  else
  {
    a1[3] = 0LL;
  }

  return a1;
}

uint64_t *sub_100079BEC(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_100079C44(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180830);
  sub_100079E08(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100079C7C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180830);
  sub_100079E08(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100079CBC(char *a1)
{
}

uint64_t sub_100079D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100079D34(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100079D80(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100180830);
  sub_100079E08((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100079DC0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180830);
  sub_100079E08((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100079E08(uint64_t a1)
{
  *(void *)a1 = off_100180900;
  sub_100079EA4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100079EA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007A00C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100079FCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100079FF8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100079E08(a1);
  operator delete(v1);
}

int *sub_10007A00C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 437LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 437LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007A1F0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180A50);
  sub_10007A3B4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007A228(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180A50);
  sub_10007A3B4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007A268(char *a1)
{
}

uint64_t sub_10007A2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007A2E0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007A32C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100180A50);
  sub_10007A3B4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007A36C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180A50);
  sub_10007A3B4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007A3B4(uint64_t a1)
{
  *(void *)a1 = off_100180B20;
  sub_10007A450(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007A450(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007A5B8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007A578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007A5A4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007A3B4(a1);
  operator delete(v1);
}

int *sub_10007A5B8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 446LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    uint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 446LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007A79C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017EC88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007A804(_Unwind_Exception *a1)
{
}

uint64_t sub_10007A818(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017F2E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007A880(_Unwind_Exception *a1)
{
}

uint64_t sub_10007A894(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017F508;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007A8FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007A910(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  __int128 v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    __int128 v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }

  else
  {
    signed __int8 v7 = *a2;
  }

  uint64_t v8 = 0LL;
  int v9 = 0;
  while (1)
  {
    do
    {
      if ((_DWORD)v8 == 4)
      {
        if (v7 == 45)
        {
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }

        int v9 = 0;
      }

      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || (_DWORD)v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          goto LABEL_22;
        }
      }

void sub_10007AAAC()
{
}

void sub_10007AAFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_10007AB10(uint64_t a1, int a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1001A3DB8);
  p_cache = &OBJC_CLASS___DiskImageParamsSparseBundle_XPC.cache;
  if ((v2 & 1) == 0)
  {
    int v10 = a2;
    int v9 = __cxa_guard_acquire(&qword_1001A3DB8);
    p_cache = &OBJC_CLASS___DiskImageParamsSparseBundle_XPC.cache;
    a2 = v10;
    if (v9)
    {
      qword_1001A3DB0 = (uint64_t)&a0123456789abcd[(void)off_1001A3DA8];
      __cxa_guard_release(&qword_1001A3DB8);
      p_cache = (void **)(&OBJC_CLASS___DiskImageParamsSparseBundle_XPC + 16);
      a2 = v10;
    }
  }

  char v4 = p_cache[438];
  __int128 v5 = memchr("0123456789abcdefABCDEF", a2, v4 - "0123456789abcdefABCDEF");
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = v4;
  }
  unint64_t v7 = v6 - "0123456789abcdefABCDEF";
  return byte_100146157[v7];
}

void sub_10007ABD8(const std::runtime_error *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = std::runtime_error::runtime_error(exception, a1);
}

uint64_t sub_10007AC0C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017F728;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007AC74(_Unwind_Exception *a1)
{
}

uint64_t sub_10007AC88(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017F948;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007ACF0(_Unwind_Exception *a1)
{
}

const void **sub_10007AD04(const void **a1)
{
  unsigned __int8 v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_10007AD34(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017FB68;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007AD9C(_Unwind_Exception *a1)
{
}

uint64_t sub_10007ADB0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017FD88;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007AE18(_Unwind_Exception *a1)
{
}

uint64_t sub_10007AE2C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_10017FFA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007AE94(_Unwind_Exception *a1)
{
}

void sub_10007AEA8(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_10007AF20(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10007AF0C(_Unwind_Exception *a1)
{
}

void *sub_10007AF20(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017AE58;
  int v5 = *a4;
  uint64_t v6 = sub_1001024B0(*a2, a3, *a4);
  sub_100052AA8((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_10007AF7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10007AF90(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001801C8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007AFF8(_Unwind_Exception *a1)
{
}

uint64_t sub_10007B00C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001803E8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007B074(_Unwind_Exception *a1)
{
}

uint64_t sub_10007B088(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100180608;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007B0F0(_Unwind_Exception *a1)
{
}

uint64_t sub_10007B104(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100180900;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007B16C(_Unwind_Exception *a1)
{
}

__n128 sub_10007B188(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned __int8 v2 = &off_100180BA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10007B1C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_100180BA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

BOOL sub_10007B1F0(void **a1, uint64_t a2, unint64_t *a3)
{
  if (*a1[1] <= *a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_100005148((uint64_t)v10);
    sub_10000552C(v10, (uint64_t)"Bands folder contains an out of range band (", 44LL);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_10000552C(v10, v8, v9);
    sub_10000552C(v10, (uint64_t)")", 1LL);
    sub_100006AA8((uint64_t)exception, (uint64_t)v10, 0x16u);
  }

  BOOL result = sub_1000974D8(*a1[2], *a3, 1);
  ++*a1[3];
  return result;
}

void sub_10007B2E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_100126298((uint64_t)&a11, (uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B3A0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10007B3DC()
{
}

uint64_t sub_10007B3E8(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100180B20;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10007B450(_Unwind_Exception *a1)
{
}

uint64_t sub_10007B464(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_10007B490@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = result[3];
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v3 > (v4 & 1) + v5 - 1
    || ((uint64_t v6 = result[2], v7 = v6 + v3, v8 = *(void *)a2, (v4 & 2) != 0) ? (v9 = *(void *)a2) : (v9 = v8 + 1),
        v7 <= v9))
  {
    *(_OWORD *)(a3 + 25) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }

  unint64_t v10 = v9 - v3;
  if (v9 >= v3)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      if (v4 == 3)
      {
        if (v5 < v8) {
          goto LABEL_31;
        }
      }

      else if (v8 >= v5)
      {
LABEL_31:
        unint64_t v18 = qword_1001A3B40;
        goto LABEL_32;
      }
    }

    else if (v8 >= v5 || v8 + 1 >= v5)
    {
      goto LABEL_31;
    }

    unint64_t v18 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_32:
    if (v6 - v10 < v18) {
      unint64_t v18 = v6 - v10;
    }
    uint64_t v19 = result[4];
    uint64_t v20 = result[1];
    *(void *)a3 = *result + v10;
    *(void *)(a3 + _Block_object_dispose(va, 8) = v20;
    if (v20)
    {
      __int16 v21 = (unint64_t *)(v20 + 8);
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }

    *(void *)(a3 + 16) = v18;
    *(void *)(a3 + 24) = v9;
    *(void *)(a3 + 3sub_1000296D8(&v5, 2) = v19 - v10;
    goto LABEL_38;
  }

  if (*(_BYTE *)(a2 + 16))
  {
    if (v4 == 3)
    {
      if (v5 < v8) {
        goto LABEL_20;
      }
    }

    else if (v8 >= v5)
    {
LABEL_20:
      uint64_t v11 = qword_1001A3B40;
      goto LABEL_21;
    }
  }

  else if (v8 >= v5 || v8 + 1 >= v5)
  {
    goto LABEL_20;
  }

  uint64_t v11 = v5 + (v4 & 1) + (int)(((v4 >> 1) & 1) - 1) - v8;
LABEL_21:
  unint64_t v12 = v11 + v9;
  if (v12 >= v7) {
    unint64_t v12 = v6 + v3;
  }
  unint64_t v13 = v12 - v3;
  uint64_t v14 = result[4];
  uint64_t v15 = result[1];
  *(void *)a3 = *result;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v15;
  if (v15)
  {
    unint64_t v16 = (unint64_t *)(v15 + 8);
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  *(void *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v3;
  *(void *)(a3 + 3sub_1000296D8(&v5, 2) = v14;
LABEL_38:
  *(_BYTE *)(a3 + 4crc32(0LL, 0LL, 0) = 0;
  return result;
}

uint64_t sub_10007B614(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_100180C20;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  *(void *)(a1 + 7sub_1000296D8(&v5, 2) = 0LL;
  *(void *)(a1 + 3sub_1000296D8(&v5, 2) = a3;
  *(void *)(a1 + 4crc32(0LL, 0LL, 0) = a4;
  *(_WORD *)(a1 + 6_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 8crc32(0LL, 0LL, 0) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 96) = 850045863LL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12crc32(0LL, 0LL, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 15sub_1000296D8(&v5, 2) = 0LL;
  uint64_t v8 = a4[4];
  *(void *)(a1 + 16crc32(0LL, 0LL, 0) = a4[3];
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v8;
  if (v8)
  {
    unint64_t v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  uint64_t v11 = a4[40];
  if (v11) {
    sub_1000974D8(v11, a3, 1);
  }
  return a1;
}

void sub_10007B6DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007B6F8(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v19 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
    *((void *)&v19 + 1) = 38LL;
    LODWORD(v2crc32(0LL, 0LL, 0) = 2;
    sub_10007BA00(v24, &v19);
    sub_10000552C(&v25, (uint64_t)"Reading ", 8LL);
    sub_10011E9EC(&v25, a3);
    sub_10000552C(&v25, (uint64_t)" to ", 4LL);
    sub_10007D064(&v25, a1);
    std::ostream::~ostream(&v25, off_100180E18);
    sub_10007E814((uint64_t)v24);
    std::ios::~ios(v26);
  }

  unint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40LL))(*(void *)(a2 + 16));
  unint64_t v7 = a3[3];
  if (v6 >= a3[2] + v7)
  {
    int v12 = (*(uint64_t (**)(void, void *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), a3);
  }

  else if (v6 <= v7)
  {
    if (sub_1000BE308())
    {
      *(void *)&__int128 v19 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v19 + 1) = 38LL;
      LODWORD(v2crc32(0LL, 0LL, 0) = 2;
      sub_10007BBD0(v24, &v19);
      sub_10000552C(&v25, (uint64_t)"Band data doesn't exist, zeroing", 32LL);
      std::ostream::~ostream(&v25, off_100181258);
      sub_10007F36C((uint64_t)v24);
      std::ios::~ios(v26);
    }

    bzero((void *)*a3, a3[2]);
    int v12 = *((_DWORD *)a3 + 4);
  }

  else
  {
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[1];
    *(void *)&__int128 v19 = *a3;
    *((void *)&v19 + 1) = v9;
    if (v9)
    {
      unint64_t v10 = (unint64_t *)(v9 + 8);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    uint64_t v20 = v6 - v7;
    unint64_t v21 = v7;
    uint64_t v22 = v8;
    char v23 = 0;
    if (sub_1000BE308())
    {
      *(void *)&__int128 v17 = "io_result_t sparse_bundles::Band::read(DiskImage::Context &, const sg_entry &)";
      *((void *)&v17 + 1) = 38LL;
      int v18 = 2;
      sub_10007BAE8(v24, &v17);
      sub_10000552C(&v25, (uint64_t)"Band data is partial, reading ", 30LL);
      sub_10011E9EC(&v25, &v19);
      std::ostream::~ostream(&v25, off_100181038);
      sub_10007EDC0((uint64_t)v24);
      std::ios::~ios(v26);
    }

    int v12 = (*(uint64_t (**)(void, __int128 *))(**(void **)(a2 + 16) + 88LL))(*(void *)(a2 + 16), &v19);
    bzero((void *)(*a3 + v20), a3[2] - v20);
    unint64_t v13 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    if (v20 == v12) {
      int v12 = *((_DWORD *)a3 + 4);
    }
    if (*((void *)&v19 + 1))
    {
      uint64_t v14 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  if (v12 >= 0) {
    return a3[2];
  }
  else {
    return v12;
  }
}

void sub_10007B9B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void *sub_10007BA00(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_10008471C((uint64_t)a1, a2);
  *a1 = off_100180D50;
  a1[45] = &off_100180E50;
  a1[46] = &off_100180E78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180D50;
  a1[45] = off_100180DD8;
  a1[46] = off_100180E00;
  return a1;
}

void sub_10007BA84(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BAA8(uint64_t a1)
{
  return a1;
}

void *sub_10007BAE8(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084798((uint64_t)a1, a2);
  *a1 = off_100180F70;
  a1[45] = &off_100181070;
  a1[46] = &off_100181098;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100180F70;
  a1[45] = off_100180FF8;
  a1[46] = off_100181020;
  return a1;
}

void sub_10007BB6C(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BB90(uint64_t a1)
{
  return a1;
}

void *sub_10007BBD0(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084814((uint64_t)a1, a2);
  *a1 = off_100181190;
  a1[45] = &off_100181290;
  a1[46] = &off_1001812B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100181190;
  a1[45] = off_100181218;
  a1[46] = off_100181240;
  return a1;
}

void sub_10007BC54(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BC78(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007BCB8(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v8 = "io_result_t sparse_bundles::Band::write(DiskImage::Context &, const sg_entry &)";
    *((void *)&v8 + 1) = 39LL;
    int v9 = 2;
    sub_10007BDDC(v10, &v8);
    sub_10000552C(&v11, (uint64_t)"Writing ", 8LL);
    sub_10011E9EC(&v11, a3);
    sub_10000552C(&v11, (uint64_t)" to ", 4LL);
    sub_10007D064(&v11, a1);
    std::ostream::~ostream(&v11, off_100181478);
    sub_10007F918((uint64_t)v10);
    std::ios::~ios(&v12);
  }

  unint64_t v6 = sub_10007BEC4(a1);
  sub_10011C674(v6, (uint64_t)a3);
  LODWORD(result) = (*(uint64_t (**)(void, void *))(**(void **)(a2 + 16) + 80LL))( *(void *)(a2 + 16),  a3);
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = 1;
  else {
    return (int)result;
  }
}

void sub_10007BDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10007BDDC(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084890((uint64_t)a1, a2);
  *a1 = off_1001813B0;
  a1[45] = &off_1001814B0;
  a1[46] = &off_1001814D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001813B0;
  a1[45] = off_100181438;
  a1[46] = off_100181460;
  return a1;
}

void sub_10007BE60(_Unwind_Exception *a1)
{
}

uint64_t sub_10007BE84(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007BEC4(uint64_t a1)
{
  unint64_t result = atomic_load((unint64_t *)(a1 + 48));
  if (!result)
  {
    uint64_t v6 = a1;
    unint64_t v3 = atomic_load((unint64_t *)(a1 + 56));
    if (v3 != -1LL)
    {
      v5[0] = &v6;
      unint64_t v7 = v5;
      std::__call_once((unint64_t *)(a1 + 56), &v7, (void (__cdecl *)(void *))sub_100084F1C);
    }

    unint64_t result = atomic_load((unint64_t *)(a1 + 48));
    if (!result)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_100005148((uint64_t)v5);
      sub_10000552C(v5, (uint64_t)"Failed opening mapped blocks file for ", 38LL);
      sub_10007D064(v5, a1);
      sub_100006AA8((uint64_t)exception, (uint64_t)v5, *(_DWORD *)(a1 + 64));
    }
  }

  return result;
}

void sub_10007BF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10007BFD0(uint64_t a1, void *a2)
{
  unint64_t v3 = sub_10007BEC4(a1);
  uint64_t v6 = (void *)*a2;
  unsigned int v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      if ((v5[6] & 2) != 0) {
        unint64_t v7 = v5[4];
      }
      else {
        unint64_t v7 = v5[4] + 1LL;
      }
      sub_10011CAE0(v3, v7, (v5[6] & 1) + v5[5] - 1LL);
      __int128 v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          __int128 v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          int v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }

        while (!v10);
      }

      uint64_t v5 = v9;
    }

    while (v9 != v4);
  }

  return sub_1000972A8(*(void *)(v3 + 8));
}

void *sub_10007C068(unint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v28 = a3;
  __int128 v27 = 0uLL;
  int v24 = (***(uint64_t (****)(void))(a2 + 8))(*(void *)(a2 + 8));
  sub_10004BBF4(a1, __p);
  sub_10008490C(&v24, (uint64_t)__p, &v28, &v25);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (*a4)
  {
    int v24 = 3;
    sub_1000849F4(&v25, (uint64_t)a4, &v24, __p);
    __int128 v7 = *(_OWORD *)__p;
    __p[0] = 0LL;
    __p[1] = 0LL;
    __int128 v8 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    __int128 v27 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    uint64_t v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      uint64_t v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  else
  {
    sub_10001C610(&v27, &v25);
  }

  uint64_t v14 = operator new(0xB0uLL);
  sub_10007B614((uint64_t)v14, &v27, a1, (void *)a2);
  unint64_t v15 = v26;
  if (v26)
  {
    unint64_t v16 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  int v18 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    __int128 v19 = (unint64_t *)(*((void *)&v27 + 1) + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return v14;
}

void sub_10007C230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
}

void sub_10007C284(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(*(void *)a1 + 8LL) & 1) != 0)
  {
    *(void *)&__int128 __p = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&__p + 1) = 32LL;
    int v14 = 0;
    sub_10007C748(v16, &__p);
    sub_10000552C(&v17, (uint64_t)"Skipping erase of band ", 23LL);
    std::ostream::operator<<(&v17, a2);
    sub_10000552C(&v17, (uint64_t)", disk image is terminated", 26LL);
    std::ostream::~ostream(&v17, off_100181698);
    sub_10007FEC4((uint64_t)v16);
    std::ios::~ios(v18);
    return;
  }

  sub_10004BBF4(a2, &__p);
  int v4 = (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  uint64_t v5 = sub_10010321C(v4, (uint64_t *)&__p);
  uint64_t v6 = v5;
  if ((_DWORD)v5)
  {
    else {
      int v7 = -(int)v5;
    }
    if (v7 != 2)
    {
      *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v11 + 1) = 32LL;
      int v12 = 16;
      sub_10007C830(v16, &v11);
      sub_10000552C(&v17, (uint64_t)"Failed to erase mapped file of band ", 36LL);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v17, a2);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
      sub_10000552C(&v17, (uint64_t)", error ", 8LL);
      std::ostream::operator<<(&v17, v6);
      std::ostream::~ostream(&v17, off_1001818B8);
      sub_100080470((uint64_t)v16);
      goto LABEL_11;
    }

    if (sub_1000BE308())
    {
      *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
      *((void *)&v11 + 1) = 32LL;
      int v12 = 2;
      sub_10001B43C(v16, &v11);
      sub_10000552C(&v17, (uint64_t)"No mapped file for band ", 24LL);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
      std::ostream::operator<<(&v17, a2);
      *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
      std::ostream::~ostream(&v17, off_100172D68);
      sub_10001B5A0((uint64_t)v16);
LABEL_11:
      std::ios::~ios(v18);
    }
  }

  int v8 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v9 = sub_10010321C(v8, (uint64_t *)&__p);
  if ((_DWORD)v9)
  {
    *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v11 + 1) = 32LL;
    int v12 = 16;
    sub_10002A1D4(v16, &v11);
    sub_10000552C(&v17, (uint64_t)"Failed to erase band ", 21LL);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v17, a2);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
    sub_10000552C(&v17, (uint64_t)", error ", 8LL);
    std::ostream::operator<<(&v17, v9);
    std::ostream::~ostream(&v17, off_1001757D8);
    sub_10002A420((uint64_t)v16);
    std::ios::~ios(v18);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 320);
    if (v10) {
      sub_1000974D8(v10, a2, 0);
    }
  }

  if (sub_1000BE308())
  {
    *(void *)&__int128 v11 = "void sparse_bundles::Band::erase(const bundle_commons_t &, uint64_t)";
    *((void *)&v11 + 1) = 32LL;
    int v12 = 2;
    sub_10007C918(v16, &v11);
    sub_10000552C(&v17, (uint64_t)"Completed erase of band ", 24LL);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 8;
    std::ostream::operator<<(&v17, a2);
    *(_DWORD *)&v18[*(void *)(v17 - 24)] = *(_DWORD *)&v18[*(void *)(v17 - 24)] & 0xFFFFFFB5 | 2;
    std::ostream::~ostream(&v17, off_100181AD8);
    sub_100080A1C((uint64_t)v16);
    std::ios::~ios(v18);
  }

  if (v15 < 0) {
    operator delete((void *)__p);
  }
}

void sub_10007C6CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10007C748(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084BDC((uint64_t)a1, a2);
  *a1 = off_1001815D0;
  a1[45] = &off_1001816D0;
  a1[46] = &off_1001816F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001815D0;
  a1[45] = off_100181658;
  a1[46] = off_100181680;
  return a1;
}

void sub_10007C7CC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C7F0(uint64_t a1)
{
  return a1;
}

void *sub_10007C830(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084C58((uint64_t)a1, a2);
  *a1 = off_1001817F0;
  a1[45] = &off_1001818F0;
  a1[46] = &off_100181918;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001817F0;
  a1[45] = off_100181878;
  a1[46] = off_1001818A0;
  return a1;
}

void sub_10007C8B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C8D8(uint64_t a1)
{
  return a1;
}

void *sub_10007C918(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084CD4((uint64_t)a1, a2);
  *a1 = off_100181A10;
  a1[45] = &off_100181B10;
  a1[46] = &off_100181B38;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100181A10;
  a1[45] = off_100181A98;
  a1[46] = off_100181AC0;
  return a1;
}

void sub_10007C99C(_Unwind_Exception *a1)
{
}

uint64_t sub_10007C9C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007CA00(uint64_t a1)
{
  *(void *)a1 = off_100180C20;
  sub_10004B454(*(void *)(a1 + 40) + 184LL, *(void *)(a1 + 32), 0);
  sub_10007E4F0((void *)(a1 + 72));
  uint64_t v2 = (void *)atomic_load((unint64_t *)(a1 + 48));
  if (*(_BYTE *)(a1 + 69))
  {
    if (!v2) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }

  if (v2)
  {
    if ((*(_BYTE *)(**(void **)(a1 + 40) + 8LL) & 1) != 0)
    {
      *(void *)&__int128 v6 = "sparse_bundles::Band::~Band()";
      *((void *)&v6 + 1) = 27LL;
      int v7 = 0;
      sub_1000697F0(v8, &v6);
      sub_10000552C(&v9, (uint64_t)"Disk image is terminated, skipping flush of ", 44LL);
      sub_10007D064(&v9, a1);
      sub_10000552C(&v9, (uint64_t)", dirty=", 8LL);
      std::ostream::operator<<(&v9, *(_BYTE *)(a1 + 68) & 1);
      std::ostream::~ostream(&v9, off_10017DA60);
      sub_10006DF50((uint64_t)v8);
      std::ios::~ios(v10);
    }

    else
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v6 = "sparse_bundles::Band::~Band()";
        *((void *)&v6 + 1) = 27LL;
        int v7 = 2;
        sub_10007CCAC(v8, &v6);
        sub_10000552C(&v9, (uint64_t)"flushing and closing ", 21LL);
        sub_10007D064(&v9, a1);
        std::ostream::~ostream(&v9, off_100181CF8);
        sub_100080FC8((uint64_t)v8);
        std::ios::~ios(v10);
      }

      sub_10011C680((uint64_t)v2);
      if ((*(_BYTE *)(a1 + 68) & 1) != 0) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), 1LL);
      }
    }

void *sub_10007CCAC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084D50((uint64_t)a1, a2);
  *a1 = off_100181C30;
  a1[45] = &off_100181D30;
  a1[46] = &off_100181D58;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100181C30;
  a1[45] = off_100181CB8;
  a1[46] = off_100181CE0;
  return a1;
}

void sub_10007CD30(_Unwind_Exception *a1)
{
}

uint64_t sub_10007CD54(uint64_t a1)
{
  return a1;
}

void sub_10007CD98(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007CA00(a1);
  operator delete(v1);
}

void sub_10007CDAC(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v3 = a1 + 72;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  sub_100084DCC(a2, v4);
  sub_10007CE04(v3, a2);
}

void sub_10007CDF0(_Unwind_Exception *a1)
{
}

void sub_10007CE04(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  sub_100071010((char **)a1, a2);
  std::mutex::unlock(v4);
}

void sub_10007CE48(_Unwind_Exception *a1)
{
}

uint64_t sub_10007CE5C(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 68) & 1) == 0) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = 0;
  uint64_t v3 = atomic_load((unint64_t *)(a1 + 48));
  uint64_t v1 = sub_10011C680(v3);
  if ((_DWORD)v1
    || (uint64_t v1 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), 1LL),
        (_DWORD)v1))
  {
    *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = 1;
    *(void *)&__int128 v5 = "sparse_bundles::Band::flush()";
    *((void *)&v5 + 1) = 27LL;
    int v6 = 16;
    sub_10007CF7C(v7, &v5);
    sub_10007D064(&v8, a1);
    sub_10000552C(&v8, (uint64_t)": flush failed (", 16LL);
    std::ostream::operator<<(&v8, v1);
    sub_10000552C(&v8, (uint64_t)")", 1LL);
    std::ostream::~ostream(&v8, off_100181F18);
    sub_100081574((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  return v1;
}

void sub_10007CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10007CF7C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100084EA0((uint64_t)a1, a2);
  *a1 = off_100181E50;
  a1[45] = &off_100181F50;
  a1[46] = &off_100181F78;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100181E50;
  a1[45] = off_100181ED8;
  a1[46] = off_100181F00;
  return a1;
}

void sub_10007D000(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D024(uint64_t a1)
{
  return a1;
}

void *sub_10007D064(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10000552C(a1, (uint64_t)"band ", 5LL);
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24LL) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v3 + *(void *)(*v3 - 24LL) + 8) & 0xFFFFFFB5 | 8;
  unint64_t result = (void *)std::ostream::operator<<(v3, *(void *)(a2 + 32));
  *(_DWORD *)((char *)result + *(void *)(*result - 24LL) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)result
                                                                            + *(void *)(*result - 24LL)
                                                                            + 8) & 0xFFFFFFB5 | 2;
  return result;
}

void sub_10007D0D4(uint64_t a1)
{
  uint64_t v1 = *(unint64_t **)a1;
  if (*(void *)a1)
  {
    do
    {
      unint64_t v3 = __ldaxr(v1);
      unint64_t v4 = v3 - 1;
    }

    while (__stlxr(v4, v1));
    if (!v4)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
      }
      if (*(void *)a1) {
        operator delete(*(void **)a1);
      }
    }
  }

uint64_t sub_10007D134(uint64_t a1)
{
  return a1;
}

void *sub_10007D158(void *a1, uint64_t a2)
{
  unint64_t v3 = *(unint64_t **)a2;
  *a1 = *(void *)a2;
  unint64_t v4 = atomic_load(v3);
  if (!v4)
  {
LABEL_7:
    int v6 = operator new(0x28uLL);
    uint64_t v7 = *(void *)(*a1 + 8LL);
    void *v6 = 1LL;
    v6[1] = v7;
    void v6[3] = 0LL;
    v6[4] = 0LL;
    v6[2] = 0LL;
    *a1 = v6;
    a1[1] = 0LL;
    uint64_t v8 = -1LL;
    goto LABEL_8;
  }

  while (1)
  {
    unint64_t v5 = __ldaxr((unint64_t *)*a1);
    if (v5 != v4)
    {
      __clrex();
      goto LABEL_6;
    }

LABEL_6:
    unint64_t v4 = v5;
    if (!v5) {
      goto LABEL_7;
    }
  }

  uint64_t v8 = *(void *)(a2 + 16);
  a1[1] = *(void *)(a2 + 8);
LABEL_8:
  a1[2] = v8;
  return a1;
}

  if ((_DWORD)v4)
  {
    *(void *)&uint64_t v17 = "int FileLocal::flush(di_flush_mode)";
    *((void *)&v17 + 1) = 20LL;
    int v18 = 16;
    sub_100104114(v19, &v17);
    sub_10011E968(&v20, a2);
    sub_10000552C(&v20, (uint64_t)" failed wih error ", 18LL);
    std::ostream::operator<<(&v20, v4);
    std::ostream::~ostream(&v20, off_100193668);
    sub_1001096E0((uint64_t)v19);
    std::ios::~ios(v21);
  }

  return v4;
}

uint64_t sub_10007D200(uint64_t result, uint64_t a2)
{
  *(_OWORD *)unint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (result != a2) {
    *(void *)a2 = 0LL;
  }
  return result;
}

uint64_t sub_10007D220(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10007D0D4(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0LL;
  }

  return a1;
}

void *sub_10007D268@<X0>( std::chrono::steady_clock::time_point **a1@<X0>, std::chrono::steady_clock::time_point *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = atomic_load((unint64_t *)*a1);
  sub_10004AEC4((unint64_t *)((*a1)[1].__d_.__rep_ + 56));
  if (v6 == 1)
  {
    do
    {
      unint64_t v7 = __ldaxr((unint64_t *)*a1);
      if (v7 == 1)
      {
        if (!__stlxr(0LL, (unint64_t *)*a1))
        {
          uint64_t v10 = a1[1];
          if (v10)
          {
            sub_10007E4F0(&v10[9].__d_.__rep_);
            __int128 v11 = a1[1];
            int v12 = (dispatch_group_t *)((*a1)[1].__d_.__rep_ + 392);
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 0x40000000LL;
            stat v17[2] = sub_10007D5E8;
            unint64_t v17[3] = &unk_100180CE0;
            v17[4] = a1;
            void v17[5] = v11;
            sub_10004D630(v12, v17);
          }

          else
          {
            sub_10004AED8((*a1)[1].__d_.__rep_ + 56);
            if (sub_1000BE308())
            {
              *(void *)&__int128 v18 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
              *((void *)&v18 + 1) = 46LL;
              int v19 = 2;
              sub_10007D828(v20, &v18);
              sub_10000552C(&v21, (uint64_t)"Replaced an empty slot", 22LL);
              std::ostream::~ostream(&v21, off_100182578);
              sub_100082678((uint64_t)v20);
              std::ios::~ios(v22);
            }
          }

          a1[1] = a2;
          if (a2)
          {
            a1[2] = (std::chrono::steady_clock::time_point *)a2[4].__d_.__rep_;
            atomic_store(2uLL, (unint64_t *)*a1);
            (*a1)[2].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            unint64_t result = sub_10007D158(a3, (uint64_t)a1);
            unint64_t v13 = (unint64_t *)*a1;
            do
              unint64_t v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
          }

          else
          {
            a1[2] = (std::chrono::steady_clock::time_point *)-1LL;
            char v15 = (unint64_t *)*a1;
            unint64_t v16 = v15[1];
            unint64_t result = operator new(0x28uLL);
            *unint64_t result = 1LL;
            result[1] = v16;
            result[3] = 0LL;
            result[4] = 0LL;
            result[2] = 0LL;
            *a3 = result;
            a3[1] = 0LL;
            a3[2] = -1LL;
            atomic_store(1uLL, v15);
          }

          return result;
        }
      }

      else
      {
        __clrex();
      }
    }

    while (v7 == 1);
  }

  sub_10004AED8((*a1)[1].__d_.__rep_ + 56);
  if (sub_1000BE308())
  {
    *(void *)&__int128 v18 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)";
    *((void *)&v18 + 1) = 46LL;
    int v19 = 2;
    sub_10007D500(v20, &v18);
    sub_10000552C(&v21, (uint64_t)"Missed an evictable slot", 24LL);
    std::ostream::~ostream(&v21, off_100182138);
    sub_100081B20((uint64_t)v20);
    std::ios::~ios(v22);
  }

  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (*a1)[1].__d_.__rep_;
  unint64_t result = operator new(0x28uLL);
  *unint64_t result = 1LL;
  result[1] = rep;
  result[3] = 0LL;
  result[4] = 0LL;
  result[2] = 0LL;
  *a3 = result;
  a3[1] = 0LL;
  a3[2] = -1LL;
  return result;
}

void *sub_10007D500(void *a1, __int128 *a2)
{
  unint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100085FF4((uint64_t)a1, a2);
  *a1 = off_100182070;
  a1[45] = &off_100182170;
  a1[46] = &off_100182198;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100182070;
  a1[45] = off_1001820F8;
  a1[46] = off_100182120;
  return a1;
}

void sub_10007D584(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D5A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007D5E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_1000BE308())
  {
    *(void *)&__int128 v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46LL;
    int v6 = 2;
    sub_100073600(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"Background close of ", 20LL);
    sub_10007D064(&v8, *(void *)(a1 + 40));
    std::ostream::~ostream(&v8, off_10017FED8);
    sub_1000782BC((uint64_t)v7);
    std::ios::~ios(v9);
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
  }
  sub_10004AED8(*(void *)(*(void *)v2 + 8LL) + 56LL);
  uint64_t result = sub_1000BE308();
  if ((_DWORD)result)
  {
    *(void *)&__int128 v5 = "sparse_bundles::band_ptr::replace_if_evictable(Band *)_block_invoke";
    *((void *)&v5 + 1) = 46LL;
    int v6 = 2;
    sub_10007D740(v7, &v5);
    sub_10000552C(&v8, (uint64_t)"Close completed", 15LL);
    std::ostream::~ostream(&v8, off_100182358);
    sub_1000820CC((uint64_t)v7);
    return std::ios::~ios(v9);
  }

  return result;
}

void sub_10007D71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10007D740(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100086070((uint64_t)a1, a2);
  *a1 = off_100182290;
  a1[45] = &off_100182390;
  a1[46] = &off_1001823B8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100182290;
  a1[45] = off_100182318;
  a1[46] = off_100182340;
  return a1;
}

void sub_10007D7C4(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D7E8(uint64_t a1)
{
  return a1;
}

void *sub_10007D828(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000860EC((uint64_t)a1, a2);
  *a1 = off_1001824B0;
  a1[45] = &off_1001825B0;
  a1[46] = &off_1001825D8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001824B0;
  a1[45] = off_100182538;
  a1[46] = off_100182560;
  return a1;
}

void sub_10007D8AC(_Unwind_Exception *a1)
{
}

uint64_t sub_10007D8D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007D910(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = atomic_load(*(unint64_t **)a1);
  while (v4 == 1)
  {
    unint64_t v4 = __ldaxr(*(unint64_t **)a1);
    if (v4 == 1)
    {
      if (!__stlxr(0LL, *(unint64_t **)a1))
      {
        unint64_t v5 = sub_10007BEC4(*(void *)(a1 + 8));
        if (sub_1000972A8(*(void *)(v5 + 8)))
        {
          sub_10007E4F0((void *)(*(void *)(a1 + 8) + 72LL));
          uint64_t v6 = *(void *)(a1 + 8);
          unint64_t v7 = (dispatch_group_t *)(*(void *)(*(void *)a1 + 8LL) + 392LL);
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 0x40000000LL;
          void v11[2] = sub_10007DFBC;
          void v11[3] = &unk_100180D00;
          v11[4] = v6;
          sub_10004D630(v7, v11);
          *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(a1 + 16) = -1LL;
          uint64_t v8 = *(unint64_t **)a1;
          uint64_t v9 = 1LL;
          atomic_store(1uLL, v8);
        }

        else
        {
          if (sub_1000BE308())
          {
            *(void *)&__int128 v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
            *((void *)&v14 + 1) = 43LL;
            int v15 = 2;
            sub_10007DED4(v16, &v14);
            sub_10000552C(&v17, (uint64_t)"Skipping erase of ", 18LL);
            sub_10007D064(&v17, *(void *)(a1 + 8));
            sub_10000552C(&v17, (uint64_t)", band was written to", 21LL);
            std::ostream::~ostream(&v17, off_100182DF8);
            sub_100083D28((uint64_t)v16);
            std::ios::~ios(v18);
          }

          return 1LL;
        }

        return v9;
      }
    }

    else
    {
      __clrex();
    }
  }

  if (v4)
  {
    sub_10007D158(&v14, a1);
    if (*((void *)&v14 + 1) && *(void *)(*((void *)&v14 + 1) + 32LL) == a2)
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43LL;
        int v13 = 2;
        sub_10007DD04(v16, &v12);
        sub_10000552C(&v17, (uint64_t)"Skipping band erase (in use)", 28LL);
        std::ostream::~ostream(&v17, off_1001829B8);
        sub_1000831D0((uint64_t)v16);
        std::ios::~ios(v18);
      }

      uint64_t v9 = 1LL;
    }

    else
    {
      if (sub_1000BE308())
      {
        *(void *)&__int128 v12 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
        *((void *)&v12 + 1) = 43LL;
        int v13 = 2;
        sub_10007DDEC(v16, &v12);
        sub_10000552C( &v17,  (uint64_t)"Band was evicted by another thread (during retain attempt), retry erase process",  79LL);
        std::ostream::~ostream(&v17, off_100182BD8);
        sub_10008377C((uint64_t)v16);
        std::ios::~ios(v18);
      }

      uint64_t v9 = 0LL;
    }

    sub_10007D0D4((uint64_t)&v14);
  }

  else
  {
    if (sub_1000BE308())
    {
      *(void *)&__int128 v14 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)";
      *((void *)&v14 + 1) = 43LL;
      int v15 = 2;
      sub_10007DC1C(v16, &v14);
      sub_10000552C(&v17, (uint64_t)"Band was evicted by another thread, retry erase process", 55LL);
      std::ostream::~ostream(&v17, off_100182798);
      sub_100082C24((uint64_t)v16);
      std::ios::~ios(v18);
    }

    return 0LL;
  }

  return v9;
}

void *sub_10007DC1C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100086168((uint64_t)a1, a2);
  *a1 = off_1001826D0;
  a1[45] = &off_1001827D0;
  a1[46] = &off_1001827F8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001826D0;
  a1[45] = off_100182758;
  a1[46] = off_100182780;
  return a1;
}

void sub_10007DCA0(_Unwind_Exception *a1)
{
}

uint64_t sub_10007DCC4(uint64_t a1)
{
  return a1;
}

void *sub_10007DD04(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000861E4((uint64_t)a1, a2);
  *a1 = off_1001828F0;
  a1[45] = &off_1001829F0;
  a1[46] = &off_100182A18;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_1001828F0;
  a1[45] = off_100182978;
  a1[46] = off_1001829A0;
  return a1;
}

void sub_10007DD88(_Unwind_Exception *a1)
{
}

uint64_t sub_10007DDAC(uint64_t a1)
{
  return a1;
}

void *sub_10007DDEC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100086260((uint64_t)a1, a2);
  *a1 = off_100182B10;
  a1[45] = &off_100182C10;
  a1[46] = &off_100182C38;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100182B10;
  a1[45] = off_100182B98;
  a1[46] = off_100182BC0;
  return a1;
}

void sub_10007DE70(_Unwind_Exception *a1)
{
}

uint64_t sub_10007DE94(uint64_t a1)
{
  return a1;
}

void *sub_10007DED4(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000862DC((uint64_t)a1, a2);
  *a1 = off_100182D30;
  a1[45] = &off_100182E30;
  a1[46] = &off_100182E58;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100182D30;
  a1[45] = off_100182DB8;
  a1[46] = off_100182DE0;
  return a1;
}

void sub_10007DF58(_Unwind_Exception *a1)
{
}

uint64_t sub_10007DF7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007DFBC(uint64_t a1)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v4 = "sparse_bundles::band_ptr::erase_if_unmapped(uint64_t)_block_invoke";
    *((void *)&v4 + 1) = 43LL;
    int v5 = 2;
    sub_10007E08C(v6, &v4);
    sub_10000552C(&v7, (uint64_t)"Background erase of ", 20LL);
    sub_10007D064(&v7, *(void *)(a1 + 32));
    std::ostream::~ostream(&v7, off_100183018);
    sub_1000842D4((uint64_t)v6);
    std::ios::~ios(&v8);
  }

  uint64_t v2 = *(_BYTE **)(a1 + 32);
  v2[69] = 1;
  return (*(uint64_t (**)(_BYTE *))(*(void *)v2 + 16LL))(v2);
}

void sub_10007E078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void *sub_10007E08C(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_100086358((uint64_t)a1, a2);
  *a1 = off_100182F50;
  a1[45] = &off_100183050;
  a1[46] = &off_100183078;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100182F50;
  a1[45] = off_100182FD8;
  a1[46] = off_100183000;
  return a1;
}

void sub_10007E110(_Unwind_Exception *a1)
{
}

uint64_t sub_10007E134(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007E174(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 48LL);
}

uint64_t sub_10007E180(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 40) + 40LL) / *(void *)(*(void *)(a1 + 40) + 48LL);
}

uint64_t sub_10007E190(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
}

void *sub_10007E1A0(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_100183168;
  v2[1] = a1;
  (*(void (**)(void))(**(void **)(a1 + 16) + 72LL))(*(void *)(a1 + 16));
  return v2;
}

void sub_10007E1EC(_Unwind_Exception *a1)
{
}

unint64_t sub_10007E200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v54 = xmmword_100146240;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)&__int128 v42 = *(void *)a3;
  *((void *)&v42 + 1) = v4;
  if (v4)
  {
    int v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  v43[0] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a3 + 25);
  uint64_t v44 = *(void *)(a3 + 48);
  __int128 v45 = *(_OWORD *)(a3 + 56);
  __int128 v46 = *(_OWORD *)(a3 + 72);
  __int128 v47 = *(_OWORD *)(a3 + 88);
  char v48 = *(_BYTE *)(a3 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 120);
  uint64_t v49 = *(void *)(a3 + 112);
  char v50 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v51 = *(_OWORD *)(a3 + 128);
  uint64_t v52 = *(void *)(a3 + 144);
  char v53 = *(_BYTE *)(a3 + 152);
  uint64_t v10 = *(void *)(a4 + 8);
  *(void *)&__int128 v30 = *(void *)a4;
  *((void *)&v30 + 1) = v10;
  if (v10)
  {
    __int128 v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  v31[0] = *(_OWORD *)(a4 + 16);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a4 + 25);
  uint64_t v32 = *(void *)(a4 + 48);
  __int128 v33 = *(_OWORD *)(a4 + 56);
  __int128 v34 = *(_OWORD *)(a4 + 72);
  __int128 v35 = *(_OWORD *)(a4 + 88);
  char v36 = *(_BYTE *)(a4 + 104);
  int v13 = *(std::__shared_weak_count **)(a4 + 120);
  uint64_t v37 = *(void *)(a4 + 112);
  unint64_t v38 = v13;
  if (v13)
  {
    __int128 v14 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  __int128 v39 = *(_OWORD *)(a4 + 128);
  uint64_t v40 = *(void *)(a4 + 144);
  char v41 = *(_BYTE *)(a4 + 152);
  unint64_t v16 = sub_10001890C((uint64_t)&v54, &v42, &v30, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v17 = v38;
  if (v38)
  {
    __int128 v18 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    uint64_t v21 = (unint64_t *)(*((void *)&v30 + 1) + 8LL);
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  char v23 = v50;
  if (v50)
  {
    int v24 = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  int64x2_t v26 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    __int128 v27 = (unint64_t *)(*((void *)&v42 + 1) + 8LL);
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  return v16;
}

void sub_10007E474( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_10007E4A4(uint64_t a1)
{
  uint64_t v3 = (void **)a1;
  sub_10006806C(&v3);
  return a1;
}

void sub_10007E4F0(void *a1)
{
  if (sub_1000BE308())
  {
    *(void *)&__int128 v10 = "sparse_bundles::Band::ContextsList::clear()";
    *((void *)&v10 + 1) = 41LL;
    int v11 = 2;
    sub_100068A48(v12, &v10);
    sub_10000552C(&v13, (uint64_t)"Resetting ", 10LL);
    std::ostream::operator<<(&v13, (uint64_t)(a1[1] - *a1) >> 4);
    sub_10000552C(&v13, (uint64_t)" band contexts", 14LL);
    std::ostream::~ostream(&v13, off_10017D840);
    sub_10006D9A4((uint64_t)v12);
    std::ios::~ios(&v14);
  }

  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v3)
  {
    uint64_t v4 = a1 + 11;
    do
    {
      uint64_t v5 = *v2;
      unint64_t v6 = (std::__shared_weak_count *)v2[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          unint64_t v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        sub_10001C610((void *)(v5 + 16), v4);
        do
          unint64_t v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      else
      {
        sub_10001C610((void *)(v5 + 16), v4);
      }

      v2 += 2;
    }

    while (v2 != v3);
  }

void sub_10007E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_10007E650(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100180E18);
  sub_10007E814(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007E688(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180E18);
  sub_10007E814(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007E6C8(char *a1)
{
}

uint64_t sub_10007E70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007E740(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007E78C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100180E18);
  sub_10007E814((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007E7CC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100180E18);
  sub_10007E814((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007E814(uint64_t a1)
{
  *(void *)a1 = off_100180EE8;
  sub_10007E8B0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007E8B0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007EA18((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007E9D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007EA04(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007E814(a1);
  operator delete(v1);
}

int *sub_10007EA18(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 47LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 47LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007EBFC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181038);
  sub_10007EDC0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007EC34(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181038);
  sub_10007EDC0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007EC74(char *a1)
{
}

uint64_t sub_10007ECB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007ECEC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007ED38(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181038);
  sub_10007EDC0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007ED78(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181038);
  sub_10007EDC0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007EDC0(uint64_t a1)
{
  *(void *)a1 = off_100181108;
  sub_10007EE5C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007EE5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007EFC4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007EF84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007EFB0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007EDC0(a1);
  operator delete(v1);
}

int *sub_10007EFC4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 56LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 56LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007F1A8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181258);
  sub_10007F36C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007F1E0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181258);
  sub_10007F36C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007F220(char *a1)
{
}

uint64_t sub_10007F264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007F298(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007F2E4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181258);
  sub_10007F36C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007F324(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181258);
  sub_10007F36C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007F36C(uint64_t a1)
{
  *(void *)a1 = off_100181328;
  sub_10007F408(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007F408(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007F570((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007F530( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007F55C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007F36C(a1);
  operator delete(v1);
}

int *sub_10007F570(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 63LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 63LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007F754(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181478);
  sub_10007F918(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007F78C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181478);
  sub_10007F918(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007F7CC(char *a1)
{
}

uint64_t sub_10007F810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007F844(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007F890(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181478);
  sub_10007F918((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007F8D0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181478);
  sub_10007F918((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007F918(uint64_t a1)
{
  *(void *)a1 = off_100181548;
  sub_10007F9B4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007F9B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10007FB1C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10007FADC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10007FB08(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007F918(a1);
  operator delete(v1);
}

int *sub_10007FB1C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 74LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 74LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10007FD00(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181698);
  sub_10007FEC4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_10007FD38(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181698);
  sub_10007FEC4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10007FD78(char *a1)
{
}

uint64_t sub_10007FDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10007FDF0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10007FE3C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181698);
  sub_10007FEC4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10007FE7C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181698);
  sub_10007FEC4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10007FEC4(uint64_t a1)
{
  *(void *)a1 = off_100181768;
  sub_10007FF60(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10007FF60(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000800C8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100080088( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000800B4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10007FEC4(a1);
  operator delete(v1);
}

int *sub_1000800C8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 116LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 116LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000802AC(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001818B8);
  sub_100080470(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000802E4(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001818B8);
  sub_100080470(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100080324(char *a1)
{
}

uint64_t sub_100080368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_10008039C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000803E8(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001818B8);
  sub_100080470((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100080428(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001818B8);
  sub_100080470((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100080470(uint64_t a1)
{
  *(void *)a1 = off_100181988;
  sub_10008050C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10008050C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100080674((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100080634( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100080660(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100080470(a1);
  operator delete(v1);
}

int *sub_100080674(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 126LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 126LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100080858(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181AD8);
  sub_100080A1C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100080890(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181AD8);
  sub_100080A1C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000808D0(char *a1)
{
}

uint64_t sub_100080914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100080948(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100080994(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181AD8);
  sub_100080A1C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_1000809D4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181AD8);
  sub_100080A1C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100080A1C(uint64_t a1)
{
  *(void *)a1 = off_100181BA8;
  sub_100080AB8(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100080AB8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100080C20((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100080BE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100080C0C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100080A1C(a1);
  operator delete(v1);
}

int *sub_100080C20(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 139LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 139LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100080E04(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181CF8);
  sub_100080FC8(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100080E3C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181CF8);
  sub_100080FC8(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100080E7C(char *a1)
{
}

uint64_t sub_100080EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100080EF4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100080F40(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181CF8);
  sub_100080FC8((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100080F80(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181CF8);
  sub_100080FC8((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100080FC8(uint64_t a1)
{
  *(void *)a1 = off_100181DC8;
  sub_100081064(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100081064(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000811CC((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008118C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000811B8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100080FC8(a1);
  operator delete(v1);
}

int *sub_1000811CC(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 154LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 154LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000813B0(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100181F18);
  sub_100081574(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000813E8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181F18);
  sub_100081574(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100081428(char *a1)
{
}

uint64_t sub_10008146C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000814A0(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000814EC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100181F18);
  sub_100081574((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10008152C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100181F18);
  sub_100081574((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100081574(uint64_t a1)
{
  *(void *)a1 = off_100181FE8;
  sub_100081610(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100081610(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100081778((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100081738( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100081764(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100081574(a1);
  operator delete(v1);
}

int *sub_100081778(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 203LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 203LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008195C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182138);
  sub_100081B20(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100081994(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182138);
  sub_100081B20(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_1000819D4(char *a1)
{
}

uint64_t sub_100081A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100081A4C(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100081A98(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100182138);
  sub_100081B20((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100081AD8(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182138);
  sub_100081B20((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100081B20(uint64_t a1)
{
  *(void *)a1 = off_100182208;
  sub_100081BBC(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100081BBC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100081D24((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100081CE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100081D10(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100081B20(a1);
  operator delete(v1);
}

int *sub_100081D24(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 331LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 331LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100081F08(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182358);
  sub_1000820CC(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100081F40(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182358);
  sub_1000820CC(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100081F80(char *a1)
{
}

uint64_t sub_100081FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100081FF8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100082044(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100182358);
  sub_1000820CC((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100082084(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182358);
  sub_1000820CC((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000820CC(uint64_t a1)
{
  *(void *)a1 = off_100182428;
  sub_100082168(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100082168(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000822D0((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100082290( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000822BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000820CC(a1);
  operator delete(v1);
}

int *sub_1000822D0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 343LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 343LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000824B4(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182578);
  sub_100082678(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000824EC(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182578);
  sub_100082678(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_10008252C(char *a1)
{
}

uint64_t sub_100082570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000825A4(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000825F0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100182578);
  sub_100082678((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100082630(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182578);
  sub_100082678((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100082678(uint64_t a1)
{
  *(void *)a1 = off_100182648;
  sub_100082714(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100082714(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_10008287C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_10008283C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100082868(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100082678(a1);
  operator delete(v1);
}

int *sub_10008287C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 347LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 347LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100082A60(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182798);
  sub_100082C24(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100082A98(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182798);
  sub_100082C24(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100082AD8(char *a1)
{
}

uint64_t sub_100082B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100082B50(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100082B9C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100182798);
  sub_100082C24((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100082BDC(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182798);
  sub_100082C24((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100082C24(uint64_t a1)
{
  *(void *)a1 = off_100182868;
  sub_100082CC0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100082CC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100082E28((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100082DE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100082E14(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100082C24(a1);
  operator delete(v1);
}

int *sub_100082E28(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 382LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 382LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_10008300C(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_1001829B8);
  sub_1000831D0(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100083044(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001829B8);
  sub_1000831D0(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100083084(char *a1)
{
}

uint64_t sub_1000830C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000830FC(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100083148(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_1001829B8);
  sub_1000831D0((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100083188(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_1001829B8);
  sub_1000831D0((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000831D0(uint64_t a1)
{
  *(void *)a1 = off_100182A88;
  sub_10008326C(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_10008326C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000833D4((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100083394( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000833C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000831D0(a1);
  operator delete(v1);
}

int *sub_1000833D4(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 387LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 387LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000835B8(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182BD8);
  sub_10008377C(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_1000835F0(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182BD8);
  sub_10008377C(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100083630(char *a1)
{
}

uint64_t sub_100083674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_1000836A8(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_1000836F4(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100182BD8);
  sub_10008377C((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100083734(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182BD8);
  sub_10008377C((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_10008377C(uint64_t a1)
{
  *(void *)a1 = off_100182CA8;
  sub_100083818(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100083818(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100083980((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100083940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008396C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008377C(a1);
  operator delete(v1);
}

int *sub_100083980(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 390LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 390LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100083B64(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100182DF8);
  sub_100083D28(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100083B9C(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182DF8);
  sub_100083D28(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100083BDC(char *a1)
{
}

uint64_t sub_100083C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100083C54(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_100083CA0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100182DF8);
  sub_100083D28((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_100083CE0(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100182DF8);
  sub_100083D28((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_100083D28(uint64_t a1)
{
  *(void *)a1 = off_100182EC8;
  sub_100083DC4(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100083DC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_100083F2C((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100083EEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100083F18(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100083D28(a1);
  operator delete(v1);
}

int *sub_100083F2C(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 399LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 399LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_100084110(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183018);
  sub_1000842D4(v2);
  return std::ios::~ios(a1 + 8);
}

uint64_t sub_100084148(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183018);
  sub_1000842D4(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100084188(char *a1)
{
}

uint64_t sub_1000841CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100084200(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

void sub_10008424C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183018);
  sub_1000842D4((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

void sub_10008428C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183018);
  sub_1000842D4((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

uint64_t sub_1000842D4(uint64_t a1)
{
  *(void *)a1 = off_1001830E8;
  sub_100084370(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_100084370(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000844D8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_100084498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000844C4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1000842D4(a1);
  operator delete(v1);
}

int *sub_1000844D8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      __int128 v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 406LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    int v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      unint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    uint64_t v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 406LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

void *sub_1000846BC(void *a1)
{
  *a1 = off_100183168;
  sub_100006224((uint64_t)(a1 + 2));
  return a1;
}

void sub_1000846EC(void *a1)
{
  *a1 = off_100183168;
  sub_100006224((uint64_t)(a1 + 2));
  operator delete(a1);
}

uint64_t sub_10008471C(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100180EE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084784(_Unwind_Exception *a1)
{
}

uint64_t sub_100084798(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181108;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084800(_Unwind_Exception *a1)
{
}

uint64_t sub_100084814(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181328;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008487C(_Unwind_Exception *a1)
{
}

uint64_t sub_100084890(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181548;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_1000848F8(_Unwind_Exception *a1)
{
}

void sub_10008490C(int *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x470uLL);
  sub_100084984(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100084970(_Unwind_Exception *a1)
{
}

void *sub_100084984(void *a1, int *a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017AE58;
  int v5 = *a4;
  uint64_t v6 = sub_1001024B0(*a2, a3, *a4);
  sub_100052AA8((uint64_t)(a1 + 3), v6, (v5 & 3) != 0, 0);
  return a1;
}

void sub_1000849E0(_Unwind_Exception *a1)
{
}

void sub_1000849F4(uint64_t *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_100084A6C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_10001C350((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100084A58(_Unwind_Exception *a1)
{
}

void *sub_100084A6C(void *a1, uint64_t *a2, uint64_t a3, int *a4)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10017C438;
  sub_100084AB4((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_100084AA0(_Unwind_Exception *a1)
{
}

uint64_t sub_100084AB4(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  sub_100084B6C(&v13, *a4);
  sub_100118B44(a1, &v14, a3, &v13);
  uint64_t v9 = v15;
  if (v15)
  {
    __int128 v10 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return a1;
}

void sub_100084B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

_DWORD *sub_100084B6C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  if ((a2 & 0xFFFFFFFC) != 0)
  {
    unsigned int v2 = a2 & 0xFFFFFFFC;
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = "invalid flags";
    exception[3] = "flags validator";
    void *exception = &off_100172A40;
    exception[1] = "header_ignore_fields_t";
    *((_DWORD *)exception + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_100084BDC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181768;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084C44(_Unwind_Exception *a1)
{
}

uint64_t sub_100084C58(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181988;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084CC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100084CD4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181BA8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084D3C(_Unwind_Exception *a1)
{
}

uint64_t sub_100084D50(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181DC8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084DB8(_Unwind_Exception *a1)
{
}

void *sub_100084DCC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &off_1001831C0;
  v4[1] = 0LL;
  void v4[2] = 0LL;
  _OWORD v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_100084E10(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100084E34(std::__shared_weak_count *a1)
{
}

uint64_t sub_100084E48(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t sub_100084E60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100084EA0(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100181FE8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100084F08(_Unwind_Exception *a1)
{
}

void sub_100084F1C(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (sub_1000BE308())
  {
    *(void *)&__int128 v3 = "sparse_bundles::Band::get_mapped_blocks()::(anonymous class)::operator()() const";
    *((void *)&v3 + 1) = 72LL;
    LODWORD(v4) = 2;
    sub_1000850F4(v7, &v3);
    sub_10000552C(&v8, (uint64_t)"Opening mapped blocks for ", 26LL);
    sub_10007D064(&v8, v1);
    std::ostream::~ostream(&v8, off_100183328);
    sub_100085420((uint64_t)v7);
    std::ios::~ios(&v9);
  }

  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)&__int128 v3 = _NSConcreteStackBlock;
  *((void *)&v3 + 1) = 0x40000000LL;
  char v4 = sub_1000851DC;
  __int128 v5 = &unk_100183228;
  uint64_t v6 = v1;
  sub_10004B940(v2, (uint64_t)&v3);
}

void *sub_1000850F4(void *a1, __int128 *a2)
{
  __int128 v3 = (std::ios_base *)(a1 + 46);
  sub_1000853A4((uint64_t)a1, a2);
  *a1 = off_100183260;
  a1[45] = &off_100183360;
  a1[46] = &off_100183388;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100183260;
  a1[45] = off_1001832E8;
  a1[46] = off_100183310;
  return a1;
}

void sub_100085178(_Unwind_Exception *a1)
{
}

uint64_t sub_10008519C(uint64_t a1)
{
  return a1;
}

void sub_1000851DC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  sub_10011EBCC((uint64_t)(v1 + 2), &v10);
  uint64_t v3 = v10;
  uint64_t v2 = v11;
  uint64_t v12 = v10;
  int v13 = v11;
  char v4 = operator new(0x20uLL);
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  off_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  sub_10011C34C((uint64_t)v4, v5, v6, v7, 1);
  atomic_store((unint64_t)v4, v1 + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_100085298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_1000852BC(void *a1, __int128 *a2)
{
  uint64_t v3 = (std::ios_base *)(a1 + 46);
  sub_1000859CC((uint64_t)a1, a2);
  *a1 = off_100183480;
  a1[45] = &off_100183580;
  a1[46] = &off_1001835A8;
  std::ios_base::init(v3, a1);
  a1[63] = 0LL;
  *((_DWORD *)a1 + 12_Block_object_dispose(va, 8) = -1;
  *a1 = off_100183480;
  a1[45] = off_100183508;
  a1[46] = off_100183530;
  return a1;
}

void sub_100085340(_Unwind_Exception *a1)
{
}

uint64_t sub_100085364(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000853A4(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_1001833F8;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_10008540C(_Unwind_Exception *a1)
{
}

uint64_t sub_100085420(uint64_t a1)
{
  *(void *)a1 = off_1001833F8;
  sub_100085698(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}

void sub_1000854BC(char *a1)
{
}

uint64_t sub_100085500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 64)) {
    std::ostream::write(a1 + 96, a2, a3);
  }
  return a3;
}

uint64_t sub_100085534(_BYTE *a1, int a2)
{
  unsigned __int8 v2 = a2;
  if (a1[64])
  {
    if (a2 == -1) {
      (*(void (**)(_BYTE *))(*(void *)a1 + 48LL))(a1);
    }
    else {
      std::ostream::put(a1 + 96, (char)a2);
    }
  }

  return v2;
}

uint64_t sub_100085580(uint64_t a1)
{
  uint64_t v2 = a1 - 360;
  std::ostream::~ostream(a1, off_100183328);
  sub_100085420(v2);
  return std::ios::~ios(a1 + 8);
}

void sub_1000855B8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 - 360);
  std::ostream::~ostream(a1, off_100183328);
  sub_100085420((uint64_t)v2);
  std::ios::~ios(a1 + 8);
  operator delete(v2);
}

uint64_t sub_1000855F8(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183328);
  sub_100085420(v1);
  return std::ios::~ios(v1 + 368);
}

void sub_100085638(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24LL);
  std::ostream::~ostream(v1 + 360, off_100183328);
  sub_100085420((uint64_t)v1);
  std::ios::~ios(v1 + 368);
  operator delete(v1);
}

void sub_100085684(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100085420(a1);
  operator delete(v1);
}

uint64_t sub_100085698(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = (void *)(a1 + 96);
    uint64_t v3 = a1 + 96 + *(void *)(*(void *)(a1 + 96) - 24LL);
    if ((*(_BYTE *)(v3 + 32) & 5) == 0)
    {
      (*(void (**)(void **__return_ptr, void, void, uint64_t, uint64_t))(**(void **)(v3 + 40) + 32LL))( __p,  *(void *)(v3 + 40),  0LL,  1LL,  16LL);
      if (v7 >= 1)
      {
        sub_100005F24(a1 + 104, __p);
        sub_1000857E8((uint64_t *)(a1 + 72), (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24LL)), 0);
        sub_100006174(__p, "");
        sub_10000600C(a1 + 104, (__int128 *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return 0LL;
}

void sub_1000857C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1000857E8(uint64_t *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = *__error();
  if (sub_1000BE2F0())
  {
    uint64_t v18 = 0LL;
    char v6 = (os_log_s *)sub_1000BE278();
    uint64_t v7 = *((unsigned __int8 *)a1 + 16);
    if (os_log_type_enabled(v6, *((os_log_type_t *)a1 + 16))) {
      uint64_t v8 = 3LL;
    }
    else {
      uint64_t v8 = 2LL;
    }
    uint64_t v9 = *a1;
    else {
      uint64_t v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68158466;
    int v20 = v4;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = 219LL;
    __int16 v25 = 2082;
    int64x2_t v26 = v10;
    unint64_t v11 = (const char *)_os_log_send_and_compose_impl( v8,  &v18,  0LL,  0LL,  &_mh_execute_header,  v6,  v7,  "%.*s: <%lu> %{public}s",  buf,  38);
    if (v11)
    {
      uint64_t v12 = (char *)v11;
      fprintf(__stderrp, "%s\n", v11);
      free(v12);
    }
  }

  else
  {
    int v13 = (os_log_s *)sub_1000BE278();
    os_log_type_t v14 = *((_DWORD *)a1 + 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *a1;
      else {
        unint64_t v16 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68158466;
      int v20 = v4;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      __int16 v23 = 2048;
      uint64_t v24 = 219LL;
      __int16 v25 = 2082;
      int64x2_t v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%.*s: <%lu> %{public}s", buf, 0x26u);
    }
  }

  uint64_t result = __error();
  *uint64_t result = v5;
  return result;
}

uint64_t sub_1000859CC(uint64_t a1, __int128 *a2)
{
  *(void *)std::streambuf::basic_streambuf(a1) = off_100183618;
  if (*((_DWORD *)a2 + 4) == 2) {
    char v4 = sub_1000BE308();
  }
  else {
    char v4 = 1;
  }
  *(_BYTE *)(a1 + sub_100006224(v1 + 64) = v4;
  __int128 v5 = *a2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 7sub_1000296D8(&v5, 2) = v5;
  sub_100005148(a1 + 96);
  return a1;
}

void sub_100085A34(_Unwind_Exception *a1)
{
}

uint64_t sub_100085A48(uint64_t a1)
{
  *(void *)a1 = off_100183618;
  sub_100085CC0(a1);
  std::streambuf::~streambuf(a1 + 104);
  std::ios::~ios(a1 + 208);
  return std::streambuf::~streambuf(a1);
}